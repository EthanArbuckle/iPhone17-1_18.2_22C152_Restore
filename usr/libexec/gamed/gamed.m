uint64_t sub_100006058(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  void *v5;
  uint64_t (*v7)(void);
  uint64_t v8;

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_100171E3C;
  return v7();
}

void sub_100006124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    Swift::Int v8 = v6 & ~v7;
    sub_10001704C();
    if (v9)
    {
      uint64_t v10 = *(void *)(a3 + 48);
      v11 = (void *)(v10 + 16 * v8);
      if ((*v11 != a1 || v11[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v13 = ~v7;
        uint64_t v14 = (v8 + 1) & v13;
        sub_10001704C();
        if (v15)
        {
          do
          {
            v16 = (void *)(v10 + 16 * v14);
            if (*v16 == a1 && v16[1] == a2) {
              break;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              break;
            }
            uint64_t v14 = (v14 + 1) & v13;
            sub_10001704C();
          }
          while ((v18 & 1) != 0);
        }
      }
    }
  }
}

void sub_100006238(uint64_t a1, void *a2)
{
  v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained appStateChanged:v3];
}

void sub_100006294()
{
  sub_100018510();
  if (*(void *)(v0 + 16))
  {
    sub_10000D938(&qword_100326500);
    v1 = (const void *)swift_allocObject();
    size_t v2 = j__malloc_size(v1);
    sub_1001912C4(2 * ((uint64_t)(v2 - 32) / 16));
    sub_100019D54(v3, v4, v5, v6);
    sub_100010E30();
    sub_1000176C4();
    if (!v7) {
      __break(1u);
    }
  }
  sub_1001912DC();
}

void sub_100006324(uint64_t a1)
{
  size_t v2 = dispatch_group_create();
  if (([*(id *)(a1 + 32) _isValidAndNotExpired] & 1) == 0)
  {
    dispatch_group_enter(v2);
    uint64_t v3 = *(void **)(a1 + 32);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10011FBD8;
    v8[3] = &unk_1002DB8E0;
    v8[4] = v2;
    [v3 _fetchBagWithHandler:v8];
  }
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(NSObject **)(v5 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100016FA0;
    block[3] = &unk_1002DB818;
    block[4] = v5;
    block[5] = v4;
    dispatch_group_notify(v2, v6, block);
  }
  dispatch_release(v2);
}

uint64_t sub_10000642C()
{
  sub_100017F78();
  sub_100010F2C();
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 72) = v4;
  long long v5 = *(_OWORD *)(v0 + 48);
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = v3;
  *(void *)(v4 + 32) = v2;
  *(_OWORD *)(v4 + 40) = v5;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100019B80;
  sub_100017040();
  sub_100017D80();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v7, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_100006530(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

id NetworkRequestEligibiltyChecker.verifyEligibility(bagKey:)(uint64_t a1, uint64_t a2)
{
  sub_100006124(a1, a2, *(void *)(v2 + OBJC_IVAR___GKNetworkRequestEligibilityChecker_alwaysAllowedBagKeys));
  if ((v3 & 1) == 0
    && (*(unsigned char *)(v2 + OBJC_IVAR___GKNetworkRequestEligibilityChecker_hasAcknowledgedLatestGDPR) & 1) == 0)
  {
    return [self gkPrivacyNoticeNotAcceptedError];
  }
  if (*(unsigned char *)(v2 + OBJC_IVAR___GKNetworkRequestEligibilityChecker_isAppUnlistedAndDisallowed) != 1) {
    return 0;
  }
  uint64_t v4 = self;
  uint64_t v5 = Dictionary.init(dictionaryLiteral:)();

  return sub_100191438(37, v5, v4);
}

uint64_t sub_100006650(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  void *v4 = v3;
  v4[1] = sub_100171E3C;
  return v6();
}

uint64_t shouldNotCheckApplicationState(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    if (qword_100329880 != -1) {
      dispatch_once(&qword_100329880, &stru_1002DB530);
    }
    uint64_t v2 = (uint64_t)[(id)qword_100329878 containsObject:v1];
  }
  else
  {
    uint64_t v2 = 1;
  }

  return v2;
}

uint64_t sub_100006B40(uint64_t a1)
{
  v2[17] = a1;
  v2[18] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[19] = v3;
  v2[20] = *(void *)(v3 - 8);
  v2[21] = swift_task_alloc();
  return _swift_task_switch(sub_10000C9C4, 0, 0);
}

id sub_100006C00(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_errorRetain();
LABEL_3:
    sub_10000D938(&qword_100327040);
    return (id)CheckedContinuation.resume(throwing:)();
  }
  if (a1)
  {
    swift_bridgeObjectRetain();
    sub_10000D938(&qword_100327040);
    return (id)CheckedContinuation.resume(returning:)();
  }
  else
  {
    uint64_t v3 = self;
    id result = sub_10019C600(3, 0xD000000000000021, 0x80000001002B1780, v3);
    if (result) {
      goto LABEL_3;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100006CBC()
{
  uint64_t v3 = sub_100017908();
  if (sub_10000DB14(v1, 1, v3) == 1)
  {
    sub_1000185A8(v1, &qword_100326298);
  }
  else
  {
    TaskPriority.rawValue.getter();
    sub_100017C80();
    uint64_t v4 = sub_1001DDF0C();
    v5(v4);
  }
  if (*(void *)(v0 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v2;
  *(void *)(v6 + 24) = v0;
  return swift_task_create();
}

uint64_t sub_100006E0C(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_100010C4C;
  return v6(a1);
}

uint64_t sub_100006FC8()
{
  sub_100010F2C();
  uint64_t v1 = (const void *)v0[26];
  uint64_t v3 = (void *)v0[24];
  uint64_t v2 = (void *)v0[25];
  swift_willThrow();
  _Block_release(v1);

  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

unint64_t sub_100007108(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10000D938(&qword_100326FE0);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  sub_100018B64(a1, v41);
  uint64_t v3 = v41[0];
  uint64_t v4 = v41[3];
  int64_t v29 = (unint64_t)(v41[2] + 64) >> 6;
  uint64_t v30 = v41[1];
  unint64_t v5 = v41[4];
  uint64_t v6 = &__src[40];
  uint64_t v7 = &__dst[40];
  uint64_t v8 = &v35;
  uint64_t v9 = &v37;
  unint64_t result = swift_bridgeObjectRetain();
  if (!v5) {
    goto LABEL_6;
  }
LABEL_5:
  uint64_t v31 = (v5 - 1) & v5;
  int64_t v32 = v4;
  for (unint64_t i = __clz(__rbit64(v5)) | (v4 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v14 << 6))
  {
    sub_10000753C(*(void *)(v3 + 48) + 40 * i, (uint64_t)__src);
    sub_1000074E0(*(void *)(v3 + 56) + 32 * i, (uint64_t)v6);
    memcpy(__dst, __src, sizeof(__dst));
    sub_10000753C((uint64_t)__dst, (uint64_t)v34);
    if (!swift_dynamicCast())
    {
      sub_10001864C((uint64_t)__dst, &qword_100326FE8);
      swift_bridgeObjectRelease();
      sub_10001A088();
      swift_release();
      return 0;
    }
    sub_1000074E0((uint64_t)v7, (uint64_t)v34);
    sub_10001864C((uint64_t)__dst, &qword_100326FE8);
    sub_1000074D0(v34, v8);
    long long v36 = v33;
    sub_1000074D0(v8, v9);
    long long v16 = v36;
    sub_1000074D0(v9, v38);
    sub_1000074D0(v38, &v36);
    unint64_t result = sub_1000087B0(v16, *((uint64_t *)&v16 + 1));
    unint64_t v17 = result;
    if (v18)
    {
      v19 = v9;
      v20 = v8;
      v21 = v7;
      uint64_t v22 = v3;
      v23 = v6;
      v24 = (_OWORD *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      _OWORD *v24 = v16;
      uint64_t v6 = v23;
      uint64_t v3 = v22;
      uint64_t v7 = v21;
      uint64_t v8 = v20;
      uint64_t v9 = v19;
      v25 = (_OWORD *)(v2[7] + 32 * v17);
      sub_100016C38((uint64_t)v25);
      unint64_t result = (unint64_t)sub_1000074D0(&v36, v25);
      goto LABEL_28;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_OWORD *)(v2[6] + 16 * result) = v16;
    unint64_t result = (unint64_t)sub_1000074D0(&v36, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v26 = v2[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27) {
      goto LABEL_34;
    }
    v2[2] = v28;
LABEL_28:
    unint64_t v5 = v31;
    uint64_t v4 = v32;
    if (v31) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_35;
    }
    if (v12 >= v29) {
      goto LABEL_31;
    }
    unint64_t v13 = *(void *)(v30 + 8 * v12);
    int64_t v14 = v4 + 1;
    if (!v13)
    {
      int64_t v14 = v4 + 2;
      if (v4 + 2 >= v29) {
        goto LABEL_31;
      }
      unint64_t v13 = *(void *)(v30 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = v4 + 3;
        if (v4 + 3 >= v29) {
          goto LABEL_31;
        }
        unint64_t v13 = *(void *)(v30 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v4 + 4;
          if (v4 + 4 >= v29) {
            goto LABEL_31;
          }
          unint64_t v13 = *(void *)(v30 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v4 + 5;
            if (v4 + 5 >= v29) {
              goto LABEL_31;
            }
            unint64_t v13 = *(void *)(v30 + 8 * v14);
            if (!v13)
            {
              int64_t v15 = v4 + 6;
              while (v15 < v29)
              {
                unint64_t v13 = *(void *)(v30 + 8 * v15++);
                if (v13)
                {
                  int64_t v14 = v15 - 1;
                  goto LABEL_21;
                }
              }
LABEL_31:
              sub_10001A088();
              return (unint64_t)v2;
            }
          }
        }
      }
    }
LABEL_21:
    uint64_t v31 = (v13 - 1) & v13;
    int64_t v32 = v14;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

_OWORD *sub_1000074D0(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1000074E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10000753C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100007598(uint64_t a1, uint64_t a2, void *a3, double a4)
{
  uint64_t v6 = *(void (**)(uint64_t, void *, double))(a1 + 32);
  if (a2) {
    uint64_t v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else {
    uint64_t v7 = 0;
  }
  swift_retain();
  id v8 = a3;
  v6(v7, a3, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_100007720(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_1000077E8()
{
  sub_1000181DC();
  sub_100017D24();
  uint64_t v1 = (void *)v0[37];
  NSString v2 = String._bridgeToObjectiveC()();
  v0[38] = v2;
  NSString v3 = String._bridgeToObjectiveC()();
  v0[39] = v3;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_1000198D0;
  uint64_t v4 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10001A3D0;
  v0[13] = &unk_1002DD8F8;
  v0[14] = v4;
  [v1 fetchWithBagKey:v2 id:v3 completionHandler:v0 + 10];
  sub_100018250();
  return _swift_continuation_await(v5);
}

void sub_100007BA4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6 || ![v5 count])
  {
    [*(id *)(a1 + 32) setError:v6];
  }
  else
  {
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    id v28 = v5;
    id v7 = v5;
    id v8 = [v7 countByEnumeratingWithState:&v32 objects:v36 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v33;
      do
      {
        for (unint64_t i = 0; i != v9; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v33 != v10) {
            objc_enumerationMutation(v7);
          }
          int64_t v12 = *(void **)(*((void *)&v32 + 1) + 8 * i);
          if ([v12 friendCodeState] == (id)3
            && (unint64_t v13 = *(void **)(a1 + 40),
                [v12 creatorPlayerID],
                int64_t v14 = objc_claimAutoreleasedReturnValue(),
                LOBYTE(v13) = [v13 containsObject:v14],
                v14,
                (v13 & 1) == 0))
          {
            unint64_t v17 = [v12 creatorPlayer];
            v19 = *(void **)(a1 + 48);
            v20 = [v12 friendCode];
            v21 = [v19 objectForKeyedSubscript:v20];
            [v17 setInboxEntry:v21];

            uint64_t v22 = [v17 inboxEntry];
            v23 = [v22 contactID];
            [v17 setIsInContacts:objc_msgSend(v23, "length") != 0];

            v24 = *(void **)(a1 + 56);
            char v18 = [v17 playerID];
            [v24 setObject:v17 forKeyedSubscript:v18];
          }
          else
          {
            int64_t v15 = *(void **)(a1 + 64);
            long long v16 = *(void **)(a1 + 48);
            unint64_t v17 = [v12 friendCode];
            char v18 = [v16 objectForKeyedSubscript:v17];
            [v15 addObject:v18];
          }
        }
        id v9 = [v7 countByEnumeratingWithState:&v32 objects:v36 count:16];
      }
      while (v9);
    }

    id v5 = v28;
    if ([*(id *)(a1 + 64) count])
    {
      v25 = *(void **)(a1 + 32);
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472;
      v29[2] = sub_10004C638;
      v29[3] = &unk_1002D41D0;
      int8x16_t v27 = *(int8x16_t *)(a1 + 64);
      id v26 = (id)v27.i64[0];
      int8x16_t v30 = vextq_s8(v27, v27, 8uLL);
      uint64_t v31 = *(void *)(a1 + 88);
      [v25 perform:v29];
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
}

uint64_t sub_100007EA4()
{
  sub_100010F2C();
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  sub_100011C24();
  uint64_t v5 = *v1;
  sub_100010D94();
  *id v6 = v5;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000DC0C();
  id v8 = *(const void **)(v7 + 16);
  if (v2)
  {
    _convertErrorToNSError(_:)();
    sub_10019DC80();
    uint64_t v9 = sub_1000180D8();
    v10(v9);

    _Block_release(v8);
  }
  else
  {
    uint64_t v11 = sub_10019DB14();
    v12(v11);
    _Block_release(v8);
  }
  sub_100018360();
  return v13();
}

id NetworkRequestEligibiltyChecker.init(hasAcknowledgedLatestGDPR:alwaysAllowedBagKeysObject:isAppUnlistedAndDisallowed:)(char a1, uint64_t a2, char a3)
{
  sub_1000186FC(a2, (uint64_t)v14);
  if (v15)
  {
    uint64_t v7 = v3;
    sub_10000D938(&qword_100326FC0);
    if (swift_dynamicCast())
    {
      uint64_t v8 = sub_1000118C8(v12);
      v7[OBJC_IVAR___GKNetworkRequestEligibilityChecker_hasAcknowledgedLatestGDPR] = a1 & 1;
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v9 = v3;
    sub_10001869C((uint64_t)v14);
  }
  v3[OBJC_IVAR___GKNetworkRequestEligibilityChecker_hasAcknowledgedLatestGDPR] = a1 & 1;
  if (qword_100325EA0 != -1) {
    swift_once();
  }
  uint64_t v8 = swift_bridgeObjectRetain();
LABEL_8:
  *(void *)&v3[OBJC_IVAR___GKNetworkRequestEligibilityChecker_alwaysAllowedBagKeys] = v8;
  v3[OBJC_IVAR___GKNetworkRequestEligibilityChecker_isAppUnlistedAndDisallowed] = a3 & 1;

  v13.receiver = v3;
  v13.super_class = (Class)type metadata accessor for NetworkRequestEligibiltyChecker();
  id v10 = [super init];
  sub_10001869C(a2);
  return v10;
}

uint64_t sub_100008148(uint64_t a1, int a2, void *a3, void *a4, void *aBlock)
{
  uint64_t v8 = _Block_copy(aBlock);
  sub_1000169C0();
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = a3;
  v9[3] = a4;
  v9[4] = v8;
  v9[5] = a1;
  id v10 = a3;
  id v11 = a4;
  swift_retain();
  uint64_t v12 = sub_100010F54();

  return sub_10000D83C(v12, v13);
}

uint64_t sub_100008220(int a1, int a2, void *aBlock)
{
  v3[2] = _Block_copy(aBlock);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3[3] = v4;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3[4] = v5;
  id v6 = (void *)swift_task_alloc();
  v3[5] = v6;
  *id v6 = v3;
  v6[1] = sub_100007EA4;
  return sub_10001A278();
}

uint64_t sub_10000830C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[17] = a7;
  v8[18] = a8;
  v8[16] = a6;
  id v11 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v9 = (void *)swift_task_alloc();
  v8[19] = v9;
  *uint64_t v9 = v8;
  v9[1] = sub_100019308;
  return v11();
}

uint64_t sub_1000083E0()
{
  sub_100010DA4();
  *(void *)(v1 + 216) = v2;
  *(void *)(v1 + 224) = v0;
  *(void *)(v1 + 200) = v3;
  *(void *)(v1 + 208) = v4;
  *(unsigned char *)(v1 + 400) = v5;
  *(void *)(v1 + 184) = v6;
  *(void *)(v1 + 192) = v7;
  *(void *)(v1 + 176) = v8;
  *(void *)(v1 + 232) = swift_getObjectType();
  uint64_t v9 = type metadata accessor for Logger();
  *(void *)(v1 + 240) = v9;
  *(void *)(v1 + 248) = *(void *)(v9 - 8);
  *(void *)(v1 + 256) = swift_task_alloc();
  *(void *)(v1 + 264) = swift_task_alloc();
  sub_100017040();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_1000084C4()
{
  sub_1000112E8();
  uint64_t v2 = *(void **)(v0 + 304);
  uint64_t v1 = *(void **)(v0 + 312);
  uint64_t v3 = *(void **)(v0 + 120);
  swift_unknownObjectRelease();

  if (v3 && ((*(unsigned char *)(v0 + 400) & 1) != 0 || (*((unsigned char *)v3 + OBJC_IVAR___GKFetchedEntity_isExpired) & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRetain();

    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = sub_10001823C();
    return v11(v10);
  }
  else
  {
    *(void *)(v0 + 328) = v3;
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 336) = v4;
    void *v4 = v0;
    v4[1] = sub_1000197DC;
    uint64_t v5 = sub_100017B64(*(void *)(v0 + 176));
    return sub_100019C64(v5, v6, v7, v8);
  }
}

void sub_100008684(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers();
    }
    uint64_t v8 = os_log_GKFriending;
    if (os_log_type_enabled(os_log_GKFriending, OS_LOG_TYPE_INFO))
    {
      int v10 = 138412290;
      id v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Unable to fetch iMessage friend requests --- %@", (uint8_t *)&v10, 0xCu);
    }
    [*(id *)(a1 + 32) setError:v6];
  }
  else
  {
    uint64_t v9 = [*(id *)(a1 + 32) result];
    [v9 setObject:v5 forKeyedSubscript:@"messagesFriendRequests"];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

unint64_t sub_1000087B0(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_100018A48(a1, a2, v4);
}

void sub_100008828(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers();
    }
    uint64_t v8 = os_log_GKFriending;
    if (os_log_type_enabled(os_log_GKFriending, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v34 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Unable to fetch native friend requests --- %@", buf, 0xCu);
    }
    [*(id *)(a1 + 32) setError:v6];
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    v23 = (id *)a1;
    uint64_t v9 = +[NSMutableArray array];
    int v10 = +[NSMutableDictionary dictionary];
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    id v24 = v5;
    id v11 = [v5 objectForKeyedSubscript:@"inbox"];
    id v12 = [v11 countByEnumeratingWithState:&v28 objects:v32 count:16];
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = *(void *)v29;
      do
      {
        for (unint64_t i = 0; i != v13; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v29 != v14) {
            objc_enumerationMutation(v11);
          }
          long long v16 = *(void **)(*((void *)&v28 + 1) + 8 * i);
          unint64_t v17 = [v16 objectForKeyedSubscript:@"issuing-player-id"];
          char v18 = [v16 objectForKeyedSubscript:@"issuing-player-caid"];
          if (v17)
          {
            [v9 addObject:v17];
            if (v18) {
              [v10 setObject:v18 forKeyedSubscript:v17];
            }
          }
        }
        id v13 = [v11 countByEnumeratingWithState:&v28 objects:v32 count:16];
      }
      while (v13);
    }

    if ([v9 count])
    {
      v19 = [v23[5] transport];
      v20 = [v23[5] clientProxy];
      v21 = [v23[5] localPlayer];
      uint64_t v22 = +[GKService serviceWithTransport:v19 forClient:v20 localPlayer:v21];

      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472;
      v25[2] = sub_10004D7E0;
      v25[3] = &unk_1002D4F38;
      id v26 = v23[4];
      id v27 = v23[6];
      [v22 getProfilesForPlayerIDs:v9 playerIdToContactAssociationIdMap:v10 handler:v25];
    }
    else
    {
      (*((void (**)(void))v23[6] + 2))();
    }

    id v6 = 0;
    id v5 = v24;
  }
}

uint64_t sub_100008B88(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  id v5 = (int *)v1[4];
  uint64_t v6 = swift_task_alloc();
  id v7 = (void *)sub_100008DC0(v6);
  *id v7 = v8;
  v7[1] = sub_100171E3C;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100328948 + dword_100328948);
  return v9(a1, v3, v4, v5);
}

uint64_t sub_100008C50()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = (int *)v0[4];
  uint64_t v4 = swift_task_alloc();
  id v5 = (void *)sub_100008DC0(v4);
  *id v5 = v6;
  v5[1] = sub_100171E3C;
  id v7 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_100328938 + dword_100328938);
  return v7(v1, v2, v3);
}

uint64_t sub_100008D0C(uint64_t a1)
{
  uint64_t v3 = *(int **)(v1 + 16);
  uint64_t v4 = swift_task_alloc();
  id v5 = (void *)sub_100008DC0(v4);
  *id v5 = v6;
  v5[1] = sub_100171648;
  id v7 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100328958 + dword_100328958);
  return v7(a1, v3);
}

uint64_t sub_100008DC0(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t sub_100008DCC()
{
  return swift_getWitnessTable();
}

uint64_t sub_100008DE4()
{
  return swift_task_alloc();
}

void sub_100009004(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int buf, long long a16, void *a17)
{
  if (a2)
  {
    if (a2 == 2)
    {
      id v17 = objc_begin_catch(a1);
      if (!os_log_GKGeneral) {
        id v18 = (id)GKOSLoggers();
      }
      v19 = os_log_GKError;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        v20 = +[NSThread callStackSymbols];
        buf = 138412802;
        WORD2(a16) = 2112;
        *(void *)((char *)&a16 + 6) = v17;
        HIWORD(a16) = 2112;
        a17 = v20;
        _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "CAUGHT EXCEPTION DURING SAVE(%@): %@ at %@", (uint8_t *)&buf, 0x20u);
      }
      objc_end_catch();
      JUMPOUT(0x100008FCCLL);
    }
    objc_begin_catch(a1);
    objc_exception_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1000091DC(uint64_t a1)
{
  uint64_t v4 = _NSConcreteStackBlock;
  uint64_t v5 = 3221225472;
  uint64_t v6 = sub_100038F50;
  id v7 = &unk_1002D4F60;
  uint64_t v2 = *(void **)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  uint64_t v3 = [v2 _gkFilterWithBlock:&v4];
  [*(id *)(a1 + 32) setResult:v3, v4, v5, v6, v7];
}

void sub_100009470(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100044C08();
    }
  }
  else
  {
    id v8 = +[GKScopedIDs makePlayerIDtoScopedIDsDictFromScopedIDs:v5];
    [*(id *)(a1 + 32) setObject:v8 forKeyedSubscript:@"playerIDtoScopedIDs"];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100009540(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100008684;
  v6[3] = &unk_1002D4F38;
  uint64_t v4 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  id v5 = v3;
  [v4 getActiveFriendRequests:v6];
}

uint64_t sub_100009684(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  sub_10000D938(&qword_100326298);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for TaskPriority();
  sub_10000D97C((uint64_t)v11, 1, 1, v12);
  id v13 = (void *)swift_allocObject();
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = a4;
  v13[5] = a5;
  v13[6] = a3;
  v13[7] = a1;
  v13[8] = a2;
  swift_retain();
  id v14 = a3;
  swift_retain();
  sub_100006CBC();
  return swift_release();
}

void sub_10000984C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

unint64_t *sub_100009870(uint64_t a1, uint64_t a2)
{
  int64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
    swift_bridgeObjectRelease();
    return (unint64_t *)&_swiftEmptyArrayStorage;
  }
  v23 = (unint64_t *)&_swiftEmptyArrayStorage;
  sub_100018B68(0, v3, 0);
  id v5 = (unint64_t *)&_swiftEmptyArrayStorage;
  id v6 = (void **)(a1 + 40);
  do
  {
    uint64_t v8 = (uint64_t)*(v6 - 1);
    id v7 = *v6;
    if (*(void *)(a2 + 16))
    {
      swift_bridgeObjectRetain_n();
      unint64_t v9 = sub_1000087B0(v8, (uint64_t)v7);
      if (v10)
      {
        sub_1000074E0(*(void *)(a2 + 56) + 32 * v9, (uint64_t)&v20);
      }
      else
      {
        long long v20 = 0u;
        long long v21 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((void *)&v21 + 1))
      {
        sub_1000074D0(&v20, v22);
        *(void *)&long long v20 = 0;
        *((void *)&v20 + 1) = 0xE000000000000000;
        v11._countAndFlagsBits = v8;
        v11._object = v7;
        String.append(_:)(v11);
        v12._countAndFlagsBits = 61;
        v12._object = (void *)0xE100000000000000;
        String.append(_:)(v12);
        _print_unlocked<A, B>(_:_:)();
        unint64_t v13 = *((void *)&v20 + 1);
        unint64_t v14 = v20;
        sub_100016C38((uint64_t)v22);
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
    }
    else
    {
      long long v20 = 0u;
      long long v21 = 0u;
      swift_bridgeObjectRetain();
    }
    sub_10001864C((uint64_t)&v20, &qword_100326FD0);
    *(void *)&v22[0] = v8;
    *((void *)&v22[0] + 1) = v7;
    swift_bridgeObjectRetain();
    v15._countAndFlagsBits = 1818848829;
    v15._object = (void *)0xE400000000000000;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    unint64_t v13 = *((void *)&v22[0] + 1);
    unint64_t v14 = *(void *)&v22[0];
LABEL_11:
    v23 = v5;
    unint64_t v17 = v5[2];
    unint64_t v16 = v5[3];
    if (v17 >= v16 >> 1)
    {
      sub_100018B68((char *)(v16 > 1), v17 + 1, 1);
      id v5 = v23;
    }
    v6 += 2;
    v5[2] = v17 + 1;
    id v18 = &v5[2 * v17];
    v18[4] = v14;
    v18[5] = v13;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  return v5;
}

void sub_100009A90(uint64_t a1, void *a2)
{
  id v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100008828;
  v8[3] = &unk_1002D5BC8;
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  id v9 = v5;
  uint64_t v10 = v6;
  id v11 = v3;
  id v7 = v3;
  [v4 getFriendInvitationMailboxWithType:@"inbox" completion:v8];
}

void sub_100009B50()
{
  uint64_t v1 = v0[41];
  uint64_t v2 = (void *)_convertErrorToNSError(_:)();
  char v3 = sub_10000A604();
  uint64_t v4 = (void *)v0[41];
  if ((v3 & 1) != 0 && v1)
  {
    id v5 = v4;
    static GKLog.cache.getter();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    unint64_t v9 = v0[35];
    if (v8)
    {
      uint64_t v10 = v0[34];
      unint64_t v11 = v0[24];
      uint64_t v21 = v0[23];
      uint64_t v12 = sub_100011BBC();
      uint64_t v22 = (void *)sub_10019DBCC();
      v23[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315650;
      swift_bridgeObjectRetain();
      v0[16] = sub_100174CE4(v10, v9, v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v12 + 12) = 2080;
      swift_bridgeObjectRetain();
      v0[17] = sub_100174CE4(v21, v11, v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v12 + 22) = 2112;
      swift_errorRetain();
      uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
      v0[18] = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v22 = v13;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Using cache fallback for entity ID: %s, bagKey: %s after request error: %@", (uint8_t *)v12, 0x20u);
      sub_10000D938(&qword_100326430);
      swift_arrayDestroy();
      sub_100010D7C();
      swift_arrayDestroy();
      sub_100010D7C();
      sub_100010D7C();

      swift_errorRelease();
      sub_100011C3C();
      v14();
    }
    else
    {

      swift_errorRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();

      uint64_t v17 = sub_100017DDC();
      v18(v17);
    }
    swift_unknownObjectRetain();

    swift_task_dealloc();
    swift_task_dealloc();
    sub_10001823C();
    sub_100017460();
    __asm { BRAA            X2, X16 }
  }
  swift_bridgeObjectRelease();
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000112AC();
  sub_100017460();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_100009F24(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, int a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_100010F38();
  if (v25[18]) {
    v26.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  else {
    v26.super.isa = 0;
  }
  v25[24] = v26.super.isa;
  uint64_t v27 = v25[22];
  uint64_t v28 = v25[23];
  uint64_t v37 = v25[21];
  unsigned int v36 = *((unsigned __int8 *)v25 + 224);
  id v35 = (id)v25[17];
  NSString v29 = String._bridgeToObjectiveC()();
  v25[25] = v29;
  v25[14] = v27;
  v25[15] = v28;
  v25[10] = _NSConcreteStackBlock;
  v25[11] = 1107296256;
  v25[12] = sub_100198F30;
  v25[13] = &unk_1002DDAE0;
  long long v30 = _Block_copy(v25 + 10);
  v25[26] = v30;
  swift_retain();
  swift_release();
  v25[2] = v25;
  v25[7] = v25 + 16;
  v25[3] = sub_1000194AC;
  uint64_t v31 = swift_continuation_init();
  v25[10] = _NSConcreteStackBlock;
  v25[11] = 0x40000000;
  v25[12] = sub_100019C8C;
  v25[13] = &unk_1002DDB08;
  v25[14] = v31;
  [v35 readEntityWithRequest:v26.super.isa bagKey:v29 includeStaleCacheData:v36 clientProxy:v37 entityMaker:v30 completionHandler:v25 + 10];
  sub_1000112F4();
  return _swift_continuation_await(v32);
}

void sub_10000A220(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"playerID"];
  if (v2)
  {
    char v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"skipCallbacks"];

    if (v3)
    {
      if (!os_log_GKGeneral) {
        id v4 = (id)GKOSLoggers();
      }
      id v5 = os_log_GKTrace;
      if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "getFriendIDsForPlayer: not calling handler because callbacks are skipped", buf, 2u);
      }
    }
    else
    {
      uint64_t v10 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"filterablePlayers"];
      unint64_t v11 = +[GKFriendService filterFriends:v10 filter:*(unsigned int *)(a1 + 64)];
      uint64_t v12 = [v11 _gkValuesForKeyPath:@"playerID"];

      if (!os_log_GKGeneral) {
        id v13 = (id)GKOSLoggers();
      }
      unint64_t v14 = (void *)os_log_GKTrace;
      if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
      {
        int v15 = *(_DWORD *)(a1 + 64);
        uint64_t v16 = v14;
        *(_DWORD *)buf = 67109632;
        int v35 = v15;
        __int16 v36 = 2048;
        id v37 = [v12 count];
        __int16 v38 = 2048;
        id v39 = [v10 count];
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "getFriendIDsForPlayer: filter %d kept %lu player IDs from %lu filterable players", buf, 0x1Cu);
      }
      uint64_t v17 = +[GKNetworkRequestManager commonNetworkRequestManager];
      uint64_t v33 = v2;
      id v18 = +[NSArray arrayWithObjects:&v33 count:1];
      v19 = [v17 retrieveAndClearCallbacks:@"gk-get-friend-player-ids" parameters:v18];

      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      id v20 = v19;
      id v21 = [v20 countByEnumeratingWithState:&v28 objects:v32 count:16];
      if (v21)
      {
        id v22 = v21;
        uint64_t v23 = *(void *)v29;
        do
        {
          for (unint64_t i = 0; i != v22; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v29 != v23) {
              objc_enumerationMutation(v20);
            }
            uint64_t v25 = *(void *)(*((void *)&v28 + 1) + 8 * i);
            NSDictionary v26 = [*(id *)(a1 + 32) error:v28];
            (*(void (**)(uint64_t, void *, void *))(v25 + 16))(v25, v12, v26);
          }
          id v22 = [v20 countByEnumeratingWithState:&v28 objects:v32 count:16];
        }
        while (v22);
      }

      if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
      {
        uint64_t v27 = [*(id *)(a1 + 40) clientProxy];
        [v27 refreshContentsForDataType:2 userInfo:0];
      }
    }
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v6 = (id)GKOSLoggers();
    }
    os_log_type_t v7 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "getFriendIDsForPlayer: not calling handler because callbacks are skipped", buf, 2u);
    }
    uint64_t v8 = *(void *)(a1 + 48);
    unint64_t v9 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, void, void *))(v8 + 16))(v8, 0, v9);
  }
}

uint64_t sub_10000A604()
{
  id v1 = [v0 domain];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;

  if (v2 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v4 == v5)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0) {
      return (uint64_t)[v0 gkIsNotConnectedToInternetError];
    }
  }
  if ([v0 code] == (id)3) {
    return 1;
  }
  return (uint64_t)[v0 gkIsNotConnectedToInternetError];
}

uint64_t sub_10000A6E4(uint64_t a1, int a2, int a3, void *a4, void *aBlock, const void *a6, void *a7)
{
  v7[2] = a4;
  v7[3] = a7;
  uint64_t v12 = _Block_copy(aBlock);
  v7[4] = _Block_copy(a6);
  if (a1) {
    a1 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  v7[5] = a1;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7[6] = v13;
  uint64_t v14 = swift_allocObject();
  v7[7] = v14;
  *(void *)(v14 + 16) = v12;
  id v15 = a4;
  a7;
  uint64_t v16 = (void *)swift_task_alloc();
  v7[8] = v16;
  void *v16 = v7;
  v16[1] = sub_100010A9C;
  return sub_1000083E0();
}

void sub_10000A8F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  id v6 = +[NSArray arrayWithObjects:&v11 count:1];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100009470;
  v8[3] = &unk_1002D4F38;
  id v9 = *(id *)(a1 + 56);
  id v10 = v3;
  id v7 = v3;
  [v4 loadScopedPlayerIDs:v5 gameBundleIDs:v6 handler:v8];
}

void sub_10000AA08(uint64_t a1)
{
  uint64_t v2 = +[GKPlayerProfileCacheObject playersByFamiliarity:*(void *)(a1 + 32)];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100014934;
  v6[3] = &unk_1002D4EC0;
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void **)(a1 + 56);
  id v7 = v3;
  uint64_t v8 = v4;
  id v9 = v5;
  char v11 = *(unsigned char *)(a1 + 80);
  id v10 = *(id *)(a1 + 64);
  [v2 enumerateKeysAndObjectsUsingBlock:v6];
  (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
}

void sub_10000AAF0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) allValues];
  id v3 = objc_opt_new();
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v4 = v2;
  id v5 = [v4 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v19;
    do
    {
      for (unint64_t i = 0; i != v6; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v19 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v18 + 1) + 8 * i);
        id v10 = [v9 inboxEntry:v18];
        char v11 = [v10 contactID];

        if (v11)
        {
          uint64_t v12 = [*(id *)(a1 + 40) objectForKeyedSubscript:v11];
          if (v12)
          {
            uint64_t v13 = [v3 stringFromContact:v12];
            uint64_t v14 = [v9 inboxEntry];
            [v14 setContactName:v13];
          }
        }
      }
      id v6 = [v4 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }
    while (v6);
  }

  uint64_t v15 = *(void *)(a1 + 64);
  uint64_t v16 = [*(id *)(a1 + 48) error];
  (*(void (**)(uint64_t, id, void *))(v15 + 16))(v15, v4, v16);

  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24))
  {
    uint64_t v17 = [*(id *)(a1 + 56) clientProxy];
    [v17 refreshContentsForDataType:3 userInfo:0];
  }
}

uint64_t sub_10000ACE8()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_10000AD28(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = userInfoForStateUpdate(a4);
  if (v5)
  {
    if (!os_log_GKGeneral) {
      id v6 = (id)GKOSLoggers();
    }
    uint64_t v7 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      int v9 = 136315394;
      id v10 = "-[GKApplicationStateMonitor setHandler:]_block_invoke_2";
      __int16 v11 = 2112;
      uint64_t v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s userInfo=%@", (uint8_t *)&v9, 0x16u);
    }
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    (*(void (**)(void))(WeakRetained[1] + 16))();
  }
  +[GKClientProxy checkGameCenterEnabledForegroundClients];
}

uint64_t applicationStateForProcessState(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 endowmentNamespaces];
  unsigned int v3 = [v2 containsObject:FBSSceneVisibilityEndowmentNamespace];

  LODWORD(v2) = [v1 taskState];
  switch((int)v2)
  {
    case 1:
      uint64_t result = 1;
      break;
    case 2:
    case 4:
      if (v3) {
        uint64_t result = 8;
      }
      else {
        uint64_t result = 4;
      }
      break;
    case 3:
      uint64_t result = 2;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

void sub_10000AF00(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  id v5 = +[RBSProcessPredicate predicateMatchingBundleIdentifiers:WeakRetained[4]];
  uint64_t v14 = v5;
  id v6 = +[NSArray arrayWithObjects:&v14 count:1];
  [v3 setPredicates:v6];

  if (!os_log_GKGeneral) {
    id v7 = (id)GKOSLoggers();
  }
  uint64_t v8 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = WeakRetained[4];
    int v10 = 136315394;
    __int16 v11 = "-[GKApplicationStateMonitor updateStateObservation]_block_invoke";
    __int16 v12 = 2112;
    uint64_t v13 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s interestedBundleIDs=%@", (uint8_t *)&v10, 0x16u);
  }
}

void sub_10000B048(uint64_t a1, void *a2, Class isa, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = sub_10000D938(&qword_100327040);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin();
  if (isa) {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  NSString v13 = String._bridgeToObjectiveC()();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  unint64_t v14 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v15 + v14, (char *)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  aBlock[4] = sub_100019A80;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007598;
  aBlock[3] = &unk_1002DD978;
  uint64_t v16 = _Block_copy(aBlock);
  swift_release();
  [a2 issueRequest:isa bagKey:v13 clientProxy:a6 handler:v16];
  _Block_release(v16);
}

id sub_10000B4D8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = v9;
  swift_getObjectType();
  id result = [a5 replyQueue];
  if (result)
  {
    long long v18 = result;
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = v10;
    *(void *)(v19 + 24) = a1;
    *(void *)(v19 + 32) = a2;
    *(void *)(v19 + 40) = a3;
    *(unsigned char *)(v19 + 48) = a4 & 1;
    *(void *)(v19 + 56) = a5;
    *(void *)(v19 + 64) = a8;
    *(void *)(v19 + 72) = a9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v20 = a5;
    swift_retain();
    id v21 = v10;
    sub_100009684(a6, a7, v18, (uint64_t)&unk_100327050, v19);

    return (id)swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10000B6F0(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = swift_bridgeObjectRetain();
    if (sub_100007108(v1))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain_n();
      sub_100006294();
      id v3 = v2;
      swift_bridgeObjectRelease();
      uint64_t v8 = v3;
      sub_100019F54(&v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v4 = sub_100017DDC();
      id v6 = sub_100009870(v4, v5);
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v8 = (char *)v6;
      sub_10000D938(&qword_100326FC0);
      sub_100019D1C((uint64_t)&unk_100326FC8);
      BidirectionalCollection<>.joined(separator:)();
    }
    else
    {
      Dictionary.description.getter();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return sub_100017130();
}

void sub_10000B860(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v8 = [v3 transport];
  uint64_t v5 = [*(id *)(a1 + 32) clientProxy];
  id v6 = [*(id *)(a1 + 32) localPlayer];
  id v7 = +[GKService serviceWithTransport:v8 forClient:v5 localPlayer:v6];
  [v7 getProfilesForPlayerIDs:v4 handler:*(void *)(a1 + 40)];
}

void sub_10000BCB8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = +[GKPlayerProfileCacheObject selfPlayerID];
  uint64_t v8 = [*(id *)(a1 + 32) playerID];
  uint64_t v9 = (void *)v8;
  if (v8) {
    uint64_t v10 = (void *)v8;
  }
  else {
    uint64_t v10 = v7;
  }
  id v11 = v10;

  [*(id *)(a1 + 40) setObject:v11 forKeyedSubscript:@"playerID"];
  if (!v11)
  {
    long long v18 = +[NSError userErrorForCode:8 underlyingError:0];
    [*(id *)(a1 + 40) setError:v18];

LABEL_12:
    v6[2](v6);
    goto LABEL_27;
  }
  uint64_t v12 = +[GKNetworkRequestManager commonNetworkRequestManager];
  id v51 = v11;
  NSString v13 = +[NSArray arrayWithObjects:&v51 count:1];
  id v14 = objc_retainBlock(*(id *)(a1 + 56));
  unsigned int v15 = [v12 doesCallbackListExistFor:@"gk-get-friend-player-ids" parameters:v13 callback:v14];

  if (v15)
  {
    if (!os_log_GKGeneral) {
      id v16 = (id)GKOSLoggers();
    }
    uint64_t v17 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "getFriendIDsForPlayer: callback already exists, will use its value when ready", buf, 2u);
    }
    [*(id *)(a1 + 40) setObject:&__kCFBooleanTrue forKeyedSubscript:@"skipCallbacks"];
    goto LABEL_12;
  }
  uint64_t v19 = +[GKCacheObject fetchRequestForContext:v5];
  [v19 setReturnsDistinctResults:1];
  id v20 = +[NSManagedObject _gkRetrieveCleanEntry:v5 request:v19];
  id v21 = +[GKNetworkRequestManager commonNetworkRequestManager];
  id v22 = [v21 relatedTasksExistForBagKey:@"gk-get-friend-player-ids"];

  if (v20 && (![v20 expired] || (unint64_t)v22 <= 1))
  {
    if (!os_log_GKGeneral) {
      id v32 = (id)GKOSLoggers();
    }
    uint64_t v33 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      id v34 = v33;
      int v35 = [v20 entries];
      __int16 v36 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v35 count]);
      *(_DWORD *)buf = 138412290;
      v48 = v36;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "getFriendIDsForPlayer: cache is valid, using it: %@", buf, 0xCu);
    }
    id v37 = [v20 filterableFriends];
    [*(id *)(a1 + 40) setObject:v37 forKeyedSubscript:@"filterablePlayers"];

    v6[2](v6);
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v23 = (id)GKOSLoggers();
    }
    id v24 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v25 = v24;
      NSDictionary v26 = +[NSNumber numberWithInteger:v22];
      *(_DWORD *)buf = 138412546;
      v48 = v20;
      __int16 v49 = 2112;
      v50 = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "getFriendIDsForPlayer: cache is not valid for: %@, going to the server, related: %@", buf, 0x16u);
    }
    uint64_t v27 = [v20 objectID:v19];
    v45[0] = @"requested-player-id";
    v45[1] = @"friend-type";
    v46[0] = v11;
    v46[1] = GKFriendTypeAll;
    long long v28 = +[NSDictionary dictionaryWithObjects:v46 forKeys:v45 count:2];
    long long v29 = +[GKNetworkRequestManager commonNetworkRequestManager];
    long long v30 = [*(id *)(a1 + 48) clientProxy];
    v39[0] = _NSConcreteStackBlock;
    v39[1] = 3221225472;
    v39[2] = sub_100045CEC;
    v39[3] = &unk_1002D56D0;
    id v40 = *(id *)(a1 + 40);
    id v41 = v11;
    id v42 = v27;
    uint64_t v44 = *(void *)(a1 + 64);
    v43 = v6;
    id v31 = v27;
    [v29 issueRequest:v28 bagKey:@"gk-get-friend-player-ids" clientProxy:v30 handler:v39];

    uint64_t v19 = v38;
  }

LABEL_27:
}

uint64_t sub_10000C9C4()
{
  id v1 = [*(id *)(v0 + 144) playerCredentialsForClientProxy:*(void *)(v0 + 136)];
  if (!v1
    || (v2 = v1, id v3 = [v1 playerInternal], v2, !v3))
  {
    NSString v13 = *(void **)(v0 + 136);
    static GKLog.cache.getter();
    id v14 = v13;
    unsigned int v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    long long v18 = *(void **)(v0 + 136);
    if (v17)
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      id v20 = (void *)sub_10019DBCC();
      *(_DWORD *)uint64_t v19 = 138412290;
      *(void *)(v0 + 120) = v18;
      id v21 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v20 = v18;

      _os_log_impl((void *)&_mh_execute_header, v15, v16, "No playerID associated with %@, defaulting to NOOP cache", v19, 0xCu);
      sub_10000D938(&qword_100326430);
      swift_arrayDestroy();
      sub_100010D7C();
      sub_100010D7C();
    }
    else
    {
    }
    sub_100017504();
    v22();
    type metadata accessor for NoopEntityCache();
    swift_initStaticObject();
    swift_task_dealloc();
    sub_100017928();
    __asm { BRAA            X2, X16 }
  }
  id v5 = *(void **)(v0 + 136);
  id v4 = *(void **)(v0 + 144);
  id v6 = [v3 playerID];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v7 = [v4 entityCacheProvider];
  *(void *)(v0 + 176) = v7;
  NSString v8 = String._bridgeToObjectiveC()();
  *(void *)(v0 + 184) = v8;
  swift_bridgeObjectRelease();
  sub_10019C59C(v5);
  if (v9)
  {
    NSString v10 = String._bridgeToObjectiveC()();
    *(void *)(v0 + 192) = v10;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 56) = v0 + 128;
    *(void *)(v0 + 24) = sub_10019A8D8;
    uint64_t v11 = swift_continuation_init();
    *(void *)(v0 + 80) = _NSConcreteStackBlock;
    *(void *)(v0 + 88) = 0x40000000;
    *(void *)(v0 + 96) = sub_10019B710;
    *(void *)(v0 + 104) = &unk_1002DD890;
    *(void *)(v0 + 112) = v11;
    [v7 getCacheWithPlayerID:v8 language:v10 completionHandler:v0 + 80];
    sub_100017928();
  }
  else
  {
    __break(1u);
  }
  return _swift_continuation_await();
}

void sub_10000CD14(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100016C20;
  v6[3] = &unk_1002DA470;
  id v4 = *(NSObject **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  id v5 = v3;
  dispatch_async(v4, v6);
}

void sub_10000CF38(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v5 = [v4 localPlayer];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10000DE28;
  v10[3] = &unk_1002D5A30;
  id v6 = *(void **)(a1 + 40);
  v10[4] = *(void *)(a1 + 32);
  id v11 = v6;
  id v12 = *(id *)(a1 + 48);
  id v13 = *(id *)(a1 + 56);
  id v7 = *(id *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 72);
  id v15 = v3;
  uint64_t v16 = v8;
  id v14 = v7;
  id v9 = v3;
  [v4 getFriendsForPlayer:v5 withFilter:1 handler:v10];
}

uint64_t GKGetApplicationStateForBundleID(void *a1)
{
  id v1 = a1;
  if (shouldNotCheckApplicationState(v1))
  {
    uint64_t v2 = 0;
  }
  else
  {
    id v3 = +[RBSProcessPredicate predicateMatchingBundleIdentifier:v1];
    id v14 = 0;
    id v4 = +[RBSProcessHandle handleForPredicate:v3 error:&v14];
    id v5 = v14;

    if (v5)
    {
      id v6 = os_log_GKGeneral;
      if (!os_log_GKGeneral)
      {
        id v7 = (id)GKOSLoggers();
        id v6 = os_log_GKGeneral;
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v16 = "GKApplicationState GKGetApplicationStateForBundleID(NSString *__strong)";
        __int16 v17 = 2112;
        id v18 = v1;
        __int16 v19 = 2112;
        id v20 = v5;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s bundleID=%@ error=%@", buf, 0x20u);
      }
      uint64_t v2 = 0;
    }
    else
    {
      uint64_t v8 = [v4 currentState];
      uint64_t v2 = applicationStateForProcessState(v8);

      if (!os_log_GKGeneral) {
        id v9 = (id)GKOSLoggers();
      }
      NSString v10 = (void *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        id v11 = v10;
        id v12 = +[NSNumber numberWithUnsignedInt:v2];
        *(_DWORD *)buf = 136315650;
        uint64_t v16 = "GKApplicationState GKGetApplicationStateForBundleID(NSString *__strong)";
        __int16 v17 = 2112;
        id v18 = v1;
        __int16 v19 = 2112;
        id v20 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s bundleID=%@ state=%@", buf, 0x20u);
      }
    }
  }
  return v2;
}

id userInfoForStateUpdate(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 state];
  uint64_t v3 = applicationStateForProcessState(v2);

  id v4 = [v1 process];
  id v5 = [v4 bundle];
  id v6 = [v5 identifier];

  if (v6)
  {
    v12[0] = GKApplicationStateKey;
    id v7 = +[NSNumber numberWithUnsignedInt:v3];
    v13[0] = v7;
    v13[1] = v6;
    v12[1] = GKApplicationStateDisplayIDKey;
    v12[2] = GKApplicationStatePIDKey;
    uint64_t v8 = [v1 process];
    id v9 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v8 pid]);
    v13[2] = v9;
    NSString v10 = +[NSDictionary dictionaryWithObjects:v13 forKeys:v12 count:3];
  }
  else
  {
    NSString v10 = 0;
  }

  return v10;
}

void sub_10000D6F4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"playerIDtoScopedIDs"];
  uint64_t v3 = (void *)v2;
  id v4 = &__NSDictionary0__struct;
  if (v2) {
    id v4 = (void *)v2;
  }
  id v5 = v4;

  id v11 = _NSConcreteStackBlock;
  uint64_t v12 = 3221225472;
  id v13 = sub_1000091DC;
  id v14 = &unk_1002D4928;
  id v6 = *(NSObject **)(a1 + 40);
  id v15 = *(id *)(a1 + 32);
  id v16 = *(id *)(a1 + 48);
  id v17 = *(id *)(a1 + 56);
  id v18 = v5;
  id v7 = v5;
  dispatch_sync(v6, &v11);
  uint64_t v8 = *(void *)(a1 + 64);
  id v9 = [*(id *)(a1 + 32) result:v11, v12, v13, v14];
  NSString v10 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, void *, void *))(v8 + 16))(v8, v9, v10);
}

uint64_t sub_10000D83C(uint64_t a1, uint64_t a2)
{
  sub_10000D938(&qword_100326298);
  __chkstk_darwin();
  sub_1000110F8();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = type metadata accessor for TaskPriority();
  sub_10000D97C(v6, 1, 1, v7);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  void v8[4] = a1;
  void v8[5] = a2;
  id v9 = (void *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = &unk_100328940;
  v9[5] = v8;
  sub_10000D9A4(v6, (uint64_t)&unk_100328950, (uint64_t)v9);
  return swift_release();
}

uint64_t sub_10000D938(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_10000D97C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_10000D9A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  if (sub_10000DB14(a1, 1, v6) == 1)
  {
    sub_10000DB98(a1, &qword_100326298);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_10000DB14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t sub_10000DB3C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10000D938(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10000DB98(uint64_t a1, uint64_t *a2)
{
  sub_10000D938(a2);
  sub_100017A38();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_10000DBEC()
{
  return v0;
}

BOOL sub_10000DC18(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void sub_10000DE28(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 _gkValuesForKeyPath:@"playerID"];
  uint64_t v4 = +[NSSet setWithArray:v3];

  uint64_t v5 = *(void **)(a1 + 32);
  uint64_t v6 = [*(id *)(a1 + 40) allKeys];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100007BA4;
  void v12[3] = &unk_1002D5A08;
  id v13 = *(id *)(a1 + 48);
  id v14 = v4;
  id v15 = *(id *)(a1 + 40);
  id v16 = *(id *)(a1 + 56);
  id v7 = *(id *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 32);
  id v17 = v7;
  uint64_t v18 = v8;
  long long v11 = *(_OWORD *)(a1 + 72);
  id v9 = (id)v11;
  long long v19 = v11;
  id v10 = v4;
  [v5 getFriendCodeDetailWithIdentifiers:v6 handler:v12];
}

void sub_10000E11C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) error];

  uint64_t v3 = *(void **)(a1 + 32);
  if (v2)
  {
    [v3 setResult:0];
  }
  else
  {
    uint64_t v4 = [v3 objectForKeyedSubscript:@"GKCDFriendCodeDetails"];
    uint64_t v5 = [v4 _gkMapDictionaryWithKeyPath:@"friendCode"];
    uint64_t v6 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"GKPlayers"];
    id v7 = [v6 _gkMapDictionaryWithKeyPath:@"playerID"];
    uint64_t v8 = +[NSMutableArray array];
    if ([*(id *)(a1 + 40) count])
    {
      unint64_t v9 = 0;
      do
      {
        id v10 = [*(id *)(a1 + 40) objectAtIndexedSubscript:v9];
        long long v11 = [v5 objectForKeyedSubscript:v10];

        uint64_t v12 = [v11 creatorPlayerID];

        if (v12)
        {
          id v13 = [v11 creatorPlayerID];
          id v14 = [v7 objectForKeyedSubscript:v13];

          if (v14) {
            [v11 setCreatorPlayer:v14];
          }
          [v8 addObject:v11];
        }
        ++v9;
      }
      while (v9 < (unint64_t)[*(id *)(a1 + 40) count]);
    }
    id v15 = [v8 copy];
    [*(id *)(a1 + 32) setResult:v15];
  }
  uint64_t v16 = *(void *)(a1 + 48);
  id v18 = [*(id *)(a1 + 32) result];
  id v17 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v16 + 16))(v16, v18, v17);
}

void sub_10000E32C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) result];
  uint64_t v3 = [v2 objectForKeyedSubscript:@"messagesFriendRequests"];

  uint64_t v4 = [*(id *)(a1 + 32) result];
  uint64_t v5 = [v4 objectForKeyedSubscript:@"nativeFriendRequests"];

  id v6 = objc_alloc((Class)NSMutableArray);
  if (v3) {
    id v7 = v3;
  }
  else {
    id v7 = &__NSArray0__struct;
  }
  id v8 = [v6 initWithArray:v7];
  unint64_t v9 = v8;
  if (v5) {
    id v10 = v5;
  }
  else {
    id v10 = &__NSArray0__struct;
  }
  [v8 addObjectsFromArray:v10];
  long long v11 = +[NSSortDescriptor sortDescriptorWithKey:@"alias" ascending:1 selector:"caseInsensitiveCompare:"];
  id v14 = v11;
  uint64_t v12 = +[NSArray arrayWithObjects:&v14 count:1];
  id v13 = [v9 sortedArrayUsingDescriptors:v12];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10000E740(uint64_t a1, void *a2)
{
  id v3 = a2;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_10003830C;
  v20[3] = &unk_1002D4D58;
  id v21 = *(id *)(a1 + 32);
  id v22 = *(id *)(a1 + 40);
  uint64_t v4 = objc_retainBlock(v20);
  uint64_t v5 = [*(id *)(a1 + 48) context];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10000AA08;
  void v12[3] = &unk_1002D4EE8;
  id v13 = *(id *)(a1 + 56);
  id v6 = *(id *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 64);
  id v8 = *(void **)(a1 + 72);
  id v14 = v6;
  uint64_t v15 = v7;
  id v9 = v8;
  char v19 = *(unsigned char *)(a1 + 80);
  id v16 = v9;
  id v17 = v4;
  id v18 = v3;
  id v10 = v3;
  long long v11 = v4;
  [v5 performBlock:v12];
}

void sub_10000EE60(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_10000F540(uint64_t a1)
{
  queue = dispatch_get_current_queue();
  uint64_t v2 = (char *)dispatch_queue_get_specific(queue, @"GKManagedObjectContextTransactionCountKey")
     + *(int *)(a1 + 40);
  dispatch_queue_set_specific(queue, @"GKManagedObjectContextTransactionCountKey", v2, 0);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    (*(void (**)(uint64_t, char *))(v3 + 16))(v3, v2);
  }
}

void sub_10000F5D4(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v8 = v2;
    uint64_t v9 = v3;
    [*(id *)(a1 + 32) _gkSafeSave];
    [*(id *)(a1 + 32) reset];
    dispatch_time_t v5 = dispatch_time(0, 30000000000);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000FC018;
    block[3] = &unk_1002D40E0;
    id v7 = *(id *)(a1 + 32);
    dispatch_after(v5, (dispatch_queue_t)&_dispatch_main_q, block);
  }
}

void sub_10000F928(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10000FD00(uint64_t a1)
{
  uint64_t v2 = +[NSUserDefaults standardUserDefaults];
  uint64_t v3 = [v2 objectForKey:@"GKSavedAppInitState"];
  id v4 = (id)*(int *)(a1 + 48);
  dispatch_time_t v5 = [v3 objectForKeyedSubscript:@"pid"];
  if ([v5 integerValue] == v4)
  {
    id v6 = *(void **)(a1 + 32);
    id v7 = [v3 objectForKeyedSubscript:@"bundleID"];
    LODWORD(v6) = [v6 isEqualToString:v7];

    if (v6)
    {
      uint64_t v8 = [v3 objectForKeyedSubscript:@"state"];
      uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
      id v10 = *(void **)(v9 + 40);
      *(void *)(v9 + 40) = v8;

      if (!os_log_GKGeneral) {
        id v11 = (id)GKOSLoggers();
      }
      uint64_t v12 = os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        uint64_t v13 = *(void *)(a1 + 32);
        int v14 = *(_DWORD *)(a1 + 48);
        int v19 = 138412802;
        id v20 = v3;
        __int16 v21 = 2112;
        uint64_t v22 = v13;
        __int16 v23 = 1024;
        int v24 = v14;
        uint64_t v15 = "Auth state resolved %@ for client %@ : %d";
LABEL_13:
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, v15, (uint8_t *)&v19, 0x1Cu);
        goto LABEL_14;
      }
      goto LABEL_14;
    }
  }
  else
  {
  }
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v16 = (id)GKOSLoggers();
    }
    uint64_t v12 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v17 = *(void *)(a1 + 32);
      int v18 = *(_DWORD *)(a1 + 48);
      int v19 = 138412802;
      id v20 = v3;
      __int16 v21 = 2112;
      uint64_t v22 = v17;
      __int16 v23 = 1024;
      int v24 = v18;
      uint64_t v15 = "Ignoring old appInit state -- %@ does not match client %@ : %d";
      goto LABEL_13;
    }
  }
LABEL_14:
}

void sub_10000FF30(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v53 = a3;
  id v6 = +[NSMutableArray array];
  id v7 = [*(id *)(a1 + 32) mutableCopy];
  uint64_t v8 = +[NSMutableOrderedSet orderedSet];
  uint64_t v9 = +[GKCDFriendCodeDetail _gkFetchRequest];
  id v10 = +[NSPredicate predicateWithFormat:@"friendCode IN %@", *(void *)(a1 + 32)];
  [v9 setPredicate:v10];

  id v86 = 0;
  v61 = v9;
  id v11 = [v5 executeFetchRequest:v9 error:&v86];
  id v12 = v86;
  v58 = v7;
  uint64_t v54 = a1;
  v56 = (void *)v8;
  if (v12)
  {
    v52 = v11;
    v55 = +[NSMutableArray array];
    long long v82 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    id obj = *(id *)(a1 + 32);
    id v13 = [obj countByEnumeratingWithState:&v82 objects:v91 count:16];
    if (v13)
    {
      id v14 = v13;
      id v59 = *(id *)v83;
      do
      {
        for (unint64_t i = 0; i != v14; unint64_t i = (char *)i + 1)
        {
          id v16 = v12;
          if (*(id *)v83 != v59) {
            objc_enumerationMutation(obj);
          }
          uint64_t v17 = +[NSPredicate predicateWithFormat:@"friendCode == %@", *(void *)(*((void *)&v82 + 1) + 8 * i)];
          [v61 setPredicate:v17];

          id v81 = v12;
          int v18 = [v5 executeFetchRequest:v61 error:&v81];
          id v12 = v81;

          if (v12)
          {
            int v19 = v6;
            long long v79 = 0u;
            long long v80 = 0u;
            long long v77 = 0u;
            long long v78 = 0u;
            id v20 = v18;
            id v21 = [v20 countByEnumeratingWithState:&v77 objects:v90 count:16];
            if (v21)
            {
              id v22 = v21;
              uint64_t v23 = *(void *)v78;
              do
              {
                for (j = 0; j != v22; j = (char *)j + 1)
                {
                  if (*(void *)v78 != v23) {
                    objc_enumerationMutation(v20);
                  }
                  [v5 deleteObject:*(void *)(*((void *)&v77 + 1) + 8 * (void)j)];
                }
                id v22 = [v20 countByEnumeratingWithState:&v77 objects:v90 count:16];
              }
              while (v22);
            }

            if (!os_log_GKGeneral) {
              id v25 = (id)GKOSLoggers();
            }
            NSDictionary v26 = (void *)os_log_GKError;
            id v6 = v19;
            if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
              sub_10004EA50(v88, v26, v12, &v89);
            }
          }
          else
          {
            uint64_t v27 = [v18 firstObject];
            [v55 addObject:v27];
          }
        }
        id v14 = [obj countByEnumeratingWithState:&v82 objects:v91 count:16];
      }
      while (v14);
    }

    id v11 = v55;
  }
  long long v75 = 0u;
  long long v76 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  id v60 = v11;
  id v28 = [v60 countByEnumeratingWithState:&v73 objects:v87 count:16];
  if (v28)
  {
    id v29 = v28;
    uint64_t v30 = *(void *)v74;
    do
    {
      for (k = 0; k != v29; k = (char *)k + 1)
      {
        if (*(void *)v74 != v30) {
          objc_enumerationMutation(v60);
        }
        id v32 = *(void **)(*((void *)&v73 + 1) + 8 * (void)k);
        uint64_t v33 = [v32 expirationDate];
        unsigned __int8 v34 = [v32 _gkIsExpired:v33];

        if ((v34 & 1) == 0)
        {
          id v35 = [objc_alloc((Class)GKFriendCodeDetailInternal) initWithFriendCodeDetail:v32];
          [v6 addObject:v35];
          __int16 v36 = [v32 friendCode];
          [v58 removeObject:v36];

          id v37 = [v32 creatorPlayerId];

          if (v37)
          {
            __int16 v38 = [v32 creatorPlayerId];
            [v56 addObject:v38];
          }
        }
      }
      id v29 = [v60 countByEnumeratingWithState:&v73 objects:v87 count:16];
    }
    while (v29);
  }

  id v39 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKFriendService.m", 757, "-[GKFriendServicePrivate getFriendCodeDetailWithIdentifiers:handler:]_block_invoke");
  id v40 = +[GKDispatchGroup dispatchGroupWithName:v39];

  if ([v58 count])
  {
    v67[0] = _NSConcreteStackBlock;
    v67[1] = 3221225472;
    v67[2] = sub_10004972C;
    v67[3] = &unk_1002D4518;
    id v41 = v58;
    uint64_t v42 = v54;
    uint64_t v43 = *(void *)(v54 + 40);
    id v68 = v41;
    uint64_t v69 = v43;
    id v70 = v6;
    uint64_t v44 = v56;
    id v71 = v56;
    id v72 = *(id *)(v54 + 48);
    [v40 perform:v67];

    id v45 = v68;
  }
  else
  {
    id v45 = [v6 copy];
    uint64_t v42 = v54;
    [*(id *)(v54 + 48) setObject:v45 forKeyedSubscript:@"GKCDFriendCodeDetails"];
    uint64_t v44 = v56;
  }

  v46 = [*(id *)(v42 + 40) clientProxy];
  v47 = [v46 replyQueue];
  v62[0] = _NSConcreteStackBlock;
  v62[1] = 3221225472;
  v62[2] = sub_100016E14;
  v62[3] = &unk_1002D39F8;
  uint64_t v48 = *(void *)(v42 + 40);
  __int16 v49 = *(void **)(v42 + 48);
  id v63 = v44;
  uint64_t v64 = v48;
  id v65 = v49;
  id v66 = v53;
  id v50 = v53;
  id v51 = v44;
  [v40 notifyOnQueue:v47 block:v62];
}

id GKSavedAuthentiactionStateQueue()
{
  if (qword_1003297E8 != -1) {
    dispatch_once(&qword_1003297E8, &stru_1002DAB10);
  }
  uint64_t v0 = (void *)qword_1003297E0;

  return v0;
}

uint64_t sub_100010840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_100010F38();
  uint64_t v17 = v16[20];
  uint64_t v18 = v16[17];
  uint64_t v19 = v16[18];
  uint64_t v36 = v16[16];
  id v20 = (void *)swift_allocObject();
  v20[2] = v18;
  v20[3] = v19;
  void v20[4] = v17;
  v16[6] = sub_1000192A0;
  v16[7] = v20;
  v16[2] = _NSConcreteStackBlock;
  v16[3] = 1107296256;
  v16[4] = sub_100006530;
  v16[5] = &unk_1002DDA68;
  unsigned __int8 v34 = _Block_copy(v16 + 2);
  uint64_t v35 = type metadata accessor for DispatchQoS();
  sub_100011108();
  sub_1000171A0();
  swift_retain();
  swift_errorRetain();
  static DispatchQoS.unspecified.getter();
  type metadata accessor for DispatchWorkItemFlags();
  sub_100011108();
  sub_1000171A0();
  v16[14] = _swiftEmptyArrayStorage;
  sub_10019D3C4((uint64_t)&unk_100327070);
  sub_10000D938(&qword_100327078);
  sub_100019D1C((uint64_t)&unk_100327080);
  sub_10019DB4C();
  sub_10019DB78();
  _Block_release(&qword_100327078);
  swift_errorRelease();
  uint64_t v21 = sub_10019DBFC();
  v22(v21);
  uint64_t v23 = sub_10019DBB4();
  v24(v23);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_release();
  sub_1000112AC();
  sub_1000112F4();
  return v26(v25, v26, v27, v28, v29, v30, v31, v32, a9, v17, v34, v35, v36, a14, a15, a16);
}

uint64_t sub_100010A70()
{
  return v0;
}

uint64_t sub_100010A9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1000178F0();
  sub_100017D24();
  uint64_t v13 = v10;
  uint64_t v15 = v14;
  sub_10019DAFC();
  id v16 = (void *)v12[3];
  uint64_t v17 = (void *)v12[2];
  uint64_t v18 = *v11;
  sub_100010D94();
  void *v19 = v18;
  swift_task_dealloc();

  swift_release();
  swift_bridgeObjectRelease();
  id v20 = (const void *)v12[4];
  swift_bridgeObjectRelease();
  if (v13)
  {
    _convertErrorToNSError(_:)();
    sub_10019DC80();
    uint64_t v21 = sub_100017EC4();
    v22(v21);

    _Block_release(v20);
  }
  else
  {
    uint64_t v23 = sub_100010A70();
    v24(v23, v15, 0);
    _Block_release(v20);
    swift_unknownObjectRelease();
  }
  sub_1000171B8();
  sub_10018C70C();
  return v26(v25, v26, v27, v28, v29, v30, v31, v32, a9, a10);
}

uint64_t sub_100010C4C()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  swift_task_dealloc();
  sub_1000112AC();
  return v3();
}

uint64_t sub_100010D1C()
{
  return v0;
}

void sub_100010D34(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

id sub_100010D64()
{
  return [v0 count];
}

uint64_t sub_100010D7C()
{
  return swift_slowDealloc();
}

uint64_t sub_100010DC8()
{
  return v0;
}

double sub_100010DD4()
{
  return sub_100169A40(v0, (_OWORD *)(v1 - 128));
}

void sub_100010DF0()
{
  *(void *)(v1 - 256) = v0;
}

uint64_t sub_100010E00()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100010E30()
{
  return swift_bridgeObjectRetain();
}

void sub_100010E6C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_100010E8C()
{
  return v0;
}

uint64_t sub_100010EA8()
{
  return swift_dynamicCast();
}

uint64_t sub_100010EC8(uint64_t a1)
{
  *(void *)(v1 - 160) = a1;
  return v1 - 160;
}

uint64_t sub_100010F54()
{
  return v0;
}

void sub_100010F60(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t sub_100010F94(uint64_t a1, uint64_t a2)
{
  return _swift_task_switch(a1, a2, 0);
}

void sub_100010F9C(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 16) = a2;
}

void sub_100010FD0(uint64_t a1@<X8>)
{
  *(void *)(v2 - 144) = *(void *)(v1 + a1);
}

uint64_t sub_100010FEC()
{
  return sub_10000DB14(v1, 1, v0);
}

void sub_100011010(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void sub_100011048(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_100011084(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_1000110B8(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

void sub_1000110D8(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

uint64_t sub_100011124()
{
  return sub_10000D97C(v0, 1, 1, v1);
}

uint64_t sub_100011144()
{
  return StringProtocol.contains<A>(_:)();
}

uint64_t sub_100011194()
{
  return swift_dynamicCast();
}

uint64_t sub_1000111C0(uint64_t a1)
{
  return _swift_task_switch(a1, 0, 0);
}

uint64_t sub_1000111CC(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_1000111F8()
{
  return v0 + 56;
}

uint64_t sub_100011280()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t sub_1000112AC()
{
  return v0 + 8;
}

void sub_1000112B8()
{
  *(void *)(v0 + 8 * (v3 >> 6) + 64) |= 1 << v3;
  uint64_t v4 = (void *)(*(void *)(v0 + 48) + 16 * v3);
  void *v4 = v2;
  v4[1] = v1;
}

void sub_100011310(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_100011340(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100011368()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t sub_100011380()
{
  return v0;
}

uint64_t sub_10001139C()
{
  return v0 + 8;
}

uint64_t sub_1000113C8()
{
  return swift_allocObject();
}

void sub_1000113E0(uint64_t a1, void *a2, void *a3)
{
  id v32 = a2;
  id v5 = a3;
  if (v5)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    os_log_type_t v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKFriendService.m", 1220, "-[GKFriendServicePrivate getActiveFriendRequests:]_block_invoke");
    uint64_t v30 = +[GKDispatchGroup dispatchGroupWithName:v6];

    uint64_t v7 = +[NSMutableDictionary dictionary];
    uint64_t v31 = +[NSMutableDictionary dictionary];
    uint64_t v29 = +[NSMutableArray array];
    uint64_t v28 = +[NSMutableDictionary dictionary];
    uint64_t v8 = +[NSMutableSet set];
    v54[0] = 0;
    v54[1] = v54;
    v54[2] = 0x2020000000;
    char v55 = 0;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    id v9 = v32;
    id v10 = [v9 countByEnumeratingWithState:&v50 objects:v56 count:16];
    if (v10)
    {
      uint64_t v11 = *(void *)v51;
      do
      {
        for (unint64_t i = 0; i != v10; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v51 != v11) {
            objc_enumerationMutation(v9);
          }
          uint64_t v13 = *(void **)(*((void *)&v50 + 1) + 8 * i);
          id v14 = [v13 friendCode];
          [v7 setObject:v13 forKeyedSubscript:v14];

          uint64_t v15 = [v13 contactID];
          BOOL v16 = [v15 length] == 0;

          if (!v16)
          {
            uint64_t v17 = [v13 contactID];
            [v8 addObject:v17];
          }
        }
        id v10 = [v9 countByEnumeratingWithState:&v50 objects:v56 count:16];
      }
      while (v10);
    }

    v44[0] = _NSConcreteStackBlock;
    v44[1] = 3221225472;
    v44[2] = sub_10000CF38;
    v44[3] = &unk_1002D5A58;
    v44[4] = *(void *)(a1 + 32);
    id v18 = v7;
    id v45 = v18;
    id v19 = v30;
    id v46 = v19;
    id v20 = v28;
    id v47 = v20;
    id v21 = v29;
    id v48 = v21;
    __int16 v49 = v54;
    [v19 perform:v44];
    if ([v8 count])
    {
      v40[0] = _NSConcreteStackBlock;
      v40[1] = 3221225472;
      v40[2] = sub_10004C840;
      v40[3] = &unk_1002D3980;
      id v41 = v8;
      id v42 = v19;
      id v43 = v31;
      [v42 perform:v40];
    }
    id v22 = [*(id *)(a1 + 32) clientProxy];
    uint64_t v23 = [v22 replyQueue];
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_10000AAF0;
    v33[3] = &unk_1002D5A80;
    id v24 = v20;
    id v34 = v24;
    id v25 = v31;
    id v35 = v25;
    id v38 = *(id *)(a1 + 40);
    id v26 = v19;
    id v39 = v54;
    uint64_t v27 = *(void *)(a1 + 32);
    id v36 = v26;
    uint64_t v37 = v27;
    [v26 notifyOnQueue:v23 block:v33];

    _Block_object_dispose(v54, 8);
    id v5 = 0;
  }
}

void sub_10001189C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
}

uint64_t sub_1000118C8(uint64_t a1)
{
  uint64_t v9 = Set.init(minimumCapacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      sub_100011974(&v8, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v9;
  }
  else
  {
    sub_100010E00();
  }
  return v1;
}

uint64_t sub_100011974(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  sub_10001704C();
  if (v11)
  {
    uint64_t v12 = *(void *)(v7 + 48);
    uint64_t v13 = (void *)(v12 + 16 * v10);
    BOOL v14 = *v13 == a2 && v13[1] == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v15 = (uint64_t *)(*(void *)(*v3 + 48) + 16 * v10);
      uint64_t v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v18 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v18;
      sub_10001704C();
      if ((v19 & 1) == 0) {
        break;
      }
      id v20 = (void *)(v12 + 16 * v10);
      BOOL v21 = *v20 == a2 && v20[1] == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v23 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_100011CF4(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v23;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

void sub_100011B0C(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

void sub_100011B2C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void sub_100011B48(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_100011B60(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

uint64_t sub_100011B80@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  *(void *)(result + 4) = a2;
  *(_WORD *)(result + 12) = 2048;
  *(double *)(result + 14) = a3;
  return result;
}

void sub_100011B94(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

uint64_t sub_100011BB4(void (*a1)(void))
{
  return sub_1001639F0(a1);
}

uint64_t sub_100011BBC()
{
  return swift_slowAlloc();
}

uint64_t sub_100011BEC(uint64_t a1)
{
  *(void *)(v1 - 144) = a1;
  return v1 - 144;
}

uint64_t sub_100011C00()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_100011C64(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return v1 - 96;
}

id sub_100011C94()
{
  uint64_t v5 = *(const char **)(v3 + 3872);
  return [v0 v5:v1, v2];
}

uint64_t sub_100011CCC()
{
  return v0;
}

void sub_100011CF4(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_100177A0C();
  }
  else
  {
    if (v10 > v9)
    {
      sub_100178228();
      goto LABEL_22;
    }
    sub_100178534();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v12 = Hasher._finalize()();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  a3 = v12 & ~v13;
  uint64_t v14 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v15 = *(void *)(v11 + 48);
    uint64_t v16 = (void *)(v15 + 16 * a3);
    BOOL v17 = *v16 == a1 && v16[1] == a2;
    if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v18 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v18;
        if (((*(void *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        char v19 = (void *)(v15 + 16 * a3);
        BOOL v20 = *v19 == a1 && v19[1] == a2;
        if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_21;
        }
      }
    }
  }
LABEL_22:
  uint64_t v21 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  id v22 = (void *)(*(void *)(v21 + 48) + 16 * a3);
  *id v22 = a1;
  v22[1] = a2;
  uint64_t v23 = *(void *)(v21 + 16);
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24) {
    __break(1u);
  }
  else {
    *(void *)(v21 + 16) = v25;
  }
}

void sub_100012294(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained stripGKPlayerInternalPIIs];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100012B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  objc_destroyWeak(v24);
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10001316C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) context];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100013238;
  v7[3] = &unk_1002DA420;
  id v5 = *(id *)(a1 + 40);
  v7[4] = *(void *)(a1 + 32);
  id v8 = v5;
  id v9 = v3;
  id v6 = v3;
  [v4 performBlock:v7];
}

void sub_100013238(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = [*(id *)(a1 + 32) context];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100016F90;
  v4[3] = &unk_1002D3A20;
  id v5 = *(id *)(a1 + 48);
  (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, v3, v4);
}

void GKIncrementContextTransactionCount(void *a1, int a2, void *a3)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10000F540;
  v5[3] = &unk_1002DA3D0;
  int v7 = a2;
  id v6 = a3;
  id v4 = v6;
  [a1 performBlock:v5];
}

void sub_100013B90(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 56) _clientLookup];
  id v3 = [v2 objectForKeyedSubscript:*(void *)(a1 + 32)];
  id v4 = v3;
  if (*(_DWORD *)(a1 + 64))
  {
    id v5 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:");
    id v6 = [v4 objectForKeyedSubscript:v5];

    if (v6)
    {
LABEL_6:
      uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
      uint64_t v11 = *(void **)(v10 + 40);
      *(void *)(v10 + 40) = v6;
      id v12 = v6;

      [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) updateIfRecentlyInstalled];
      goto LABEL_7;
    }
    int v7 = [v4 objectForKeyedSubscript:&off_1002F2258];
    if (v7)
    {
      id v6 = v7;
      [v7 setPid:*(unsigned int *)(a1 + 64)];
      id v8 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 64)];
      [v4 setObject:v6 forKeyedSubscript:v8];

      [v4 removeObjectForKey:&off_1002F2258];
      goto LABEL_6;
    }
  }
  else
  {
    id v9 = [v3 allValues];
    id v6 = [v9 firstObject];

    if (v6) {
      goto LABEL_6;
    }
  }
  if (!*(unsigned char *)(a1 + 68)) {
    goto LABEL_7;
  }
  double Current = CFAbsoluteTimeGetCurrent();
  uint64_t v14 = (objc_class *)objc_opt_class();
  if (([(id)objc_opt_class() isExtensionBundleID:*(void *)(a1 + 32)] & 1) == 0
    && ([*(id *)(a1 + 32) isEqualToString:GKGameCenterUIServiceIdentifier] & 1) == 0
    && ([*(id *)(a1 + 32) isEqualToString:GKGameCenterToolIdentifier] & 1) == 0
    && ([*(id *)(a1 + 32) isEqualToString:GKGameCenterDarwinTestIdentifier] & 1) == 0
    && ([*(id *)(a1 + 32) isEqualToString:GKGKTester2Identifier] & 1) == 0
    && ([*(id *)(a1 + 32) isEqualToString:GKGKTester2OldIdentifier] & 1) == 0
    && ([*(id *)(a1 + 32) isEqualToString:GKIMDPersistenceIdentifier] & 1) == 0
    && ([*(id *)(a1 + 32) isEqualToString:GKPreferencesIdentifier] & 1) == 0
    && ([*(id *)(a1 + 32) isEqualToString:GKMacOSPreferencesExtensionIdentifier] & 1) == 0
    && ([*(id *)(a1 + 32) isEqualToString:GKGameCenterHostingContainerIdentifier] & 1) == 0
    && ([*(id *)(a1 + 32) isEqualToString:GKGameCenterHUDActivityProcessIdentifier] & 1) == 0
    && ([*(id *)(a1 + 32) isEqualToString:GKGameCenterOverlayProcessIdentifier] & 1) == 0
    && ([*(id *)(a1 + 32) isEqualToString:GKInternetAccountsIdentifier] & 1) == 0
    && ([*(id *)(a1 + 32) isEqualToString:GKGameCenterMessageExtensionIdentifier] & 1) == 0
    && ([*(id *)(a1 + 32) isEqualToString:GKSpringboardIdentifier] & 1) == 0)
  {
    uint64_t v23 = GKAccountsDaemonIdentifier;
    if (([*(id *)(a1 + 32) isEqualToString:GKAccountsDaemonIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKAppStoreBinaryIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKAppStoreIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKAppStoreDaemonIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKMessagesIndentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GCUITester] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKTVAppStoreIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKArcadeIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKGameOverlayUIIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKGameOverlayUIInternalIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKAppStoreProductPageExtensionIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKWidgetIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKWidgetExtensionIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKAppStoreSuscribePageExtensionIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKAppStoreWidgetIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKArcadeWidgetIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKAppStoreKitIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKArcadeTopShelfExtensionIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKTVAppStoreTopShelfExtensionIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKAppStoreGameUISample] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKTVSettingsIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKPineboardIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:v23] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKGameCenterTodayWidgetIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKMatchmakerExtensionIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKCopresenceCoreIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKMuseBuddyIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKGameCenterRemoteAlertIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKDaemonIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKContactsUITesterIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKMobileAddressBookIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKContactViewViewServiceIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKContactsViewServiceIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKContactsUIIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKMobilePhoneIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKMobileSMSIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKXCTestInternalAngel] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKAppleAccountSetupTool] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKAppleIDSetupDaemon] & 1) == 0
      && ([*(id *)(a1 + 32) isEqual:GKAppleIDSettings] & 1) == 0)
    {
      BOOL v24 = [*(id *)(a1 + 32) _gkSHA256Hash];
      if (([v24 isEqualToString:@"t/IRG+OATWH+smiJ2A4GRp6fHjSftOF5bYwT7kv+1Mk="] & 1) == 0)
      {
        uint64_t v25 = [*(id *)(a1 + 32) _gkSHA256Hash];
        if (![v25 isEqualToString:@"BKN3YPrkowJshOfzYN9kxtu/zEFYrAWOeXV3rzu9h1k="])
        {
          id v26 = [*(id *)(a1 + 32) _gkSHA256Hash];
          unsigned __int8 v27 = [v26 isEqualToString:@"AAUzovXOVSY+3xbHnUFtnxv9PkIE3KuLYT2BnWRnkJ0="];

          if ((v27 & 1) == 0) {
            goto LABEL_16;
          }
          goto LABEL_15;
        }
      }
    }
  }
LABEL_15:
  uint64_t v14 = (objc_class *)objc_opt_class();
LABEL_16:
  id v15 = [[v14 alloc] initWithBundleIdentifier:*(void *)(a1 + 32) bundleOrNil:*(void *)(a1 + 40) pid:*(unsigned int *)(a1 + 64)];
  uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 8);
  BOOL v17 = *(void **)(v16 + 40);
  *(void *)(v16 + 40) = v15;

  if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
  {
    uint64_t v18 = [v2 objectForKeyedSubscript:*(void *)(a1 + 32)];
    if (!v18)
    {
      uint64_t v18 = +[NSMutableDictionary dictionary];
      [v2 setObject:v18 forKeyedSubscript:*(void *)(a1 + 32)];
    }
    uint64_t v19 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    BOOL v20 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 64)];
    [v18 setObject:v19 forKeyedSubscript:v20];
  }
  if (!os_log_GKGeneral) {
    id v21 = (id)GKOSLoggers();
  }
  id v22 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG)) {
    sub_10010CAD0(v22, Current);
  }
LABEL_7:
}

void sub_100014934(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([v6 count])
  {
    unsigned __int8 v7 = +[GKPlayerProfileCacheObject piecesToLoadForFamiliarity:](GKPlayerProfileCacheObject, "piecesToLoadForFamiliarity:", [v5 integerValue]);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1000384B0;
    v9[3] = &unk_1002D4E98;
    id v8 = *(void **)(a1 + 32);
    v9[4] = *(void *)(a1 + 40);
    id v10 = v6;
    id v11 = v5;
    id v13 = *(id *)(a1 + 48);
    id v12 = *(id *)(a1 + 32);
    char v15 = *(unsigned char *)(a1 + 64);
    unsigned __int8 v16 = v7;
    id v14 = *(id *)(a1 + 56);
    [v8 perform:v9];
  }
}

void sub_100014F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000165F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001698C()
{
  return swift_arrayDestroy();
}

uint64_t sub_1000169A8(uint64_t a1)
{
  return sub_10001A314(a1, v1, v2);
}

uint64_t sub_1000169C0()
{
  return v0;
}

uint64_t sub_1000169D0()
{
  return swift_allocError();
}

uint64_t sub_1000169E8()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_100016B30()
{
  return swift_release();
}

uint64_t sub_100016B38()
{
  return swift_release();
}

uint64_t sub_100016B40()
{
  return swift_release();
}

uint64_t sub_100016B48()
{
  return swift_release();
}

uint64_t sub_100016B50()
{
  return swift_release();
}

uint64_t sub_100016B58()
{
  return swift_release();
}

uint64_t sub_100016B60()
{
  return swift_release();
}

uint64_t sub_100016B68()
{
  return swift_release();
}

uint64_t sub_100016B70()
{
  return swift_release();
}

uint64_t sub_100016B78()
{
  return swift_release();
}

uint64_t sub_100016B80(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100016B90(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100016BA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100016BB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100016BC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100016BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100016BE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100016BF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100016C00(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100016C10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100016C20(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(a1 + 40));
}

uint64_t sub_100016C38(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100016C88(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void, void, void, void, void, void, void, void, void))(a1[14] + 16))(a1[14], 0, a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13]);
}

uint64_t sub_100016CD8(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void, void, void, void, void, void, void, void))(a1[14] + 16))(a1[14], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13]);
}

void sub_100016D24(uint64_t a1, void *a2)
{
  id v3 = [objc_loadWeak((id *)(a1 + 64)) verifyEligibilityForBagKey:*(void *)(a1 + 32) checkingAllowedRequestKeys:objc_msgSend(a2, "objectForKeyedSubscript:", @"gk-allowed-pregdpr-requests") client:*(void *)(a1 + 40)];
  id v4 = *(NSObject **)(a1 + 48);
  if (v4)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1001226A4;
    v7[3] = &unk_1002DB818;
    uint64_t v5 = *(void *)(a1 + 56);
    v7[4] = v3;
    void v7[5] = v5;
    dispatch_async(v4, v7);
  }
  else
  {
    id v6 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    v6();
  }
}

void sub_100016E14(id *a1)
{
  if ([a1[4] count])
  {
    uint64_t v2 = [a1[5] transport];
    id v3 = [a1[5] clientProxy];
    id v4 = [a1[5] localPlayer];
    uint64_t v5 = +[GKService serviceWithTransport:v2 forClient:v3 localPlayer:v4];
    id v6 = [a1[4] array];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100049EF4;
    v8[3] = &unk_1002D4F38;
    id v9 = a1[6];
    id v10 = a1[7];
    [v5 getProfilesForPlayerIDs:v6 handler:v8];
  }
  else
  {
    unsigned __int8 v7 = (void (*)(void))*((void *)a1[7] + 2);
    v7();
  }
}

uint64_t sub_100016F80(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100016F90(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100016FA0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(*(void *)(a1 + 32) + 80));
}

id sub_100016FB8(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (id)(*(uint64_t (**)(double))(*(void *)(a1 + 80) + 16))(0.0);
  }
  else {
    return _[*(id *)(a1 + 32) _issueRequestForPlayer:*(void *)(a1 + 40) bagKey:*(void *)(a1 + 48) clientProxy:*(void *)(a1 + 56) locale:*(void *)(a1 + 64) playerCredential:*(void *)(a1 + 72) handler:*(void *)(a1 + 80)];
  }
}

uint64_t sub_100016FF0()
{
  return swift_slowAlloc();
}

uint64_t sub_100017008()
{
  return swift_task_dealloc();
}

BOOL sub_100017028(Swift::Bool a1)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(a1, v1);
}

uint64_t sub_100017060()
{
  return v0;
}

BOOL sub_100017088(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000170A4()
{
  return v0;
}

uint64_t sub_1000170BC()
{
  return v0;
}

uint64_t sub_1000170D0(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_1000170DC()
{
  return swift_beginAccess();
}

uint64_t sub_1000170FC()
{
  return swift_unknownObjectUnownedInit();
}

uint64_t sub_100017118()
{
  return v0;
}

uint64_t sub_100017130()
{
  return v0;
}

uint64_t sub_10001713C()
{
  return swift_dynamicCast();
}

uint64_t sub_10001715C()
{
  return swift_allocObject();
}

uint64_t sub_1000171A0()
{
  return swift_task_alloc();
}

uint64_t sub_1000171B8()
{
  return v0 + 8;
}

BOOL sub_100017200(NSObject *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_10001721C()
{
  return swift_bridgeObjectRelease();
}

void sub_100017260(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_100017280(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

id sub_1000172A0(uint64_t a1, void *a2)
{
  return a2;
}

double sub_1000172B8(double a1, double a2)
{
  return a1 - a2;
}

uint64_t sub_1000172C4()
{
  return v0;
}

uint64_t sub_1000172D0()
{
  return swift_arrayDestroy();
}

uint64_t sub_1000172EC(uint64_t a1, uint64_t a2)
{
  return a2;
}

BOOL sub_100017300(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10001731C(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t sub_100017330()
{
  return swift_beginAccess();
}

void sub_100017364(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v4, a4, v6, 2u);
}

void sub_100017384(uint64_t a1@<X8>)
{
  sub_1001CD820(0xD00000000000002BLL, (a1 - 32) | 0x8000000000000000);
}

void sub_1000173A4(uint64_t a1@<X8>)
{
  *(void *)(v1 - 104) = a1;
}

uint64_t sub_1000173C4()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t sub_1000173E8()
{
  return v0;
}

void sub_100017400()
{
  *(void *)(v0 - 112) = 0;
  *(void *)(v0 - 104) = 0xE000000000000000;
}

uint64_t sub_100017410()
{
  return v0;
}

uint64_t sub_100017438()
{
  return swift_task_dealloc();
}

uint64_t sub_10001747C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_10001749C()
{
  return swift_beginAccess();
}

void sub_1000174B4()
{
  void *v2 = *(void *)(v5 - 88);
  v2[1] = v3;
  v2[2] = *(void *)(v5 - 104);
  v2[3] = v0;
  v2[4] = v4;
  v2[5] = v1;
}

uint64_t sub_1000174CC()
{
  sub_10000DB14(v1, 1, v0);
  return swift_retain();
}

uint64_t sub_100017514()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

unint64_t sub_100017538()
{
  return sub_1000087B0(v1, v0);
}

void *sub_100017550@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = a1;
  return a2;
}

id sub_10001756C()
{
  return sub_1001C4118(v0, v2, v1, 1);
}

void sub_100017594()
{
  *(void *)(v0 + 104) = 1;
}

uint64_t sub_1000175FC()
{
  return v0;
}

void sub_10001760C(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

uint64_t sub_10001762C()
{
  return static os_log_type_t.info.getter();
}

uint64_t sub_100017660()
{
  return swift_dynamicCast();
}

uint64_t sub_100017684()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000176A4()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_1000176C4()
{
  return sub_10001A088();
}

uint64_t sub_1000176F0()
{
  return v0;
}

uint64_t sub_100017710(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return v1 - 104;
}

void *sub_10001773C@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

uint64_t sub_100017758()
{
  return v0;
}

uint64_t sub_100017770()
{
  return URL.deletingLastPathComponent()();
}

uint64_t sub_10001779C()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t sub_1000177B4(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  return sub_100174CE4(v4, v3, (uint64_t *)va);
}

uint64_t sub_1000177D0()
{
  return v0;
}

void sub_1000177FC(NSURL *retstr@<X8>)
{
  URL._bridgeToObjectiveC()(retstr);
}

uint64_t sub_10001782C()
{
  return v0;
}

uint64_t sub_100017848()
{
  return swift_allocObject();
}

uint64_t sub_100017860()
{
  return v0 + 8;
}

uint64_t sub_10001788C()
{
  return swift_dynamicCast();
}

uint64_t sub_1000178A8()
{
  return sub_1000185A8(v1, v0);
}

uint64_t sub_1000178C8()
{
  return *(void *)(v0 + 104);
}

uint64_t sub_100017908()
{
  return type metadata accessor for TaskPriority();
}

uint64_t sub_100017964()
{
  return v0 + 8;
}

void sub_100017978(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0x16u);
}

void sub_1000179A0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

uint64_t sub_1000179B8()
{
  return v0;
}

unint64_t sub_1000179FC(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a5 + 8 * (result >> 6) + 64) |= 1 << result;
  uint64_t v5 = (void *)(*(void *)(a5 + 48) + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(*(void *)(a5 + 56) + 8 * result) = a4;
  return result;
}

uint64_t sub_100017A60()
{
  sub_1001BE098(0);
  return swift_willThrow();
}

NSString sub_100017A98()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_100017AB8()
{
  return *(void *)(v0 + 176);
}

uint64_t sub_100017AE0()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t sub_100017B48()
{
  return v0;
}

uint64_t sub_100017B64@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

unint64_t sub_100017B70()
{
  return sub_1000087B0(1701869940, 0xE400000000000000);
}

uint64_t sub_100017B90()
{
  return swift_release();
}

id sub_100017BB4(void *a1)
{
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = v5;
  a1[5] = v2;
  a1[6] = v4;
  a1[7] = v7;
  a1[8] = v3;
  a1[9] = v1;
  return v5;
}

uint64_t sub_100017BDC()
{
  return 0x73654D6F6C6C6548;
}

unint64_t sub_100017C20()
{
  return sub_1000087B0(1701667182, 0xE400000000000000);
}

void sub_100017C40(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_100017C60()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

void sub_100017C8C(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

float *sub_100017CA4(float *result, float a2)
{
  *uint64_t result = a2;
  return result;
}

uint64_t sub_100017CB8()
{
  return v0;
}

uint64_t sub_100017CD4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100017CF0()
{
  return swift_task_alloc();
}

uint64_t sub_100017D30()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100017D48@<X0>(uint64_t a1@<X8>)
{
  v2[26] = a1;
  v2[27] = v1;
  return v2[18];
}

void sub_100017D94(uint64_t a1@<X8>)
{
  *(void *)(v2 - 184) = a1;
  *(void *)(v2 - 176) = (v1 - 32) | 0x8000000000000000;
}

uint64_t sub_100017DA4()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_100017DBC()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100017DDC()
{
  return v0;
}

uint64_t sub_100017DE8()
{
  return v0;
}

uint64_t sub_100017E0C()
{
  return swift_bridgeObjectRelease_n();
}

void sub_100017E24()
{
  uint64_t v1 = 0x656369766564202CLL;
  unint64_t v2 = 0xEC000000203A4449;
  String.append(_:)(*(Swift::String *)&v1);
}

void sub_100017E50(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 0xCu);
}

uint64_t sub_100017E70()
{
  return v0;
}

void sub_100017E84()
{
  *uint64_t v0 = 0x8000000000000000;
}

uint64_t sub_100017E9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100174CE4(a1, (a2 - 32) | 0x8000000000000000, (uint64_t *)(v2 - 88));
}

uint64_t sub_100017EC4()
{
  return v0;
}

void sub_100017ED8(uint64_t a1@<X8>)
{
  *(void *)(v1 + 288) = a1;
}

uint64_t sub_100017EF0(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  return v1 - 112;
}

uint64_t sub_100017F04()
{
  return v0;
}

uint64_t sub_100017F10()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_100017F34()
{
  return v0;
}

uint64_t sub_100017F58()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

unint64_t sub_100017F98()
{
  return 0xD000000000000011;
}

uint64_t sub_100017FAC()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_100017FDC()
{
  unint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 160);
  return sub_100169274(v3, v2);
}

uint64_t sub_100017FFC()
{
  *(void *)(v1 + 32) = v0;
  return specialized Array._endMutation()();
}

uint64_t sub_100018018(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_100018028()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100018048()
{
  return v0;
}

_WORD *sub_100018060(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t sub_10001806C()
{
  return v0;
}

uint64_t sub_10001808C()
{
  return v0;
}

double sub_1000180A8()
{
  return sub_100169A40(v0, (_OWORD *)(v1 - 128));
}

uint64_t sub_1000180D8()
{
  return v0;
}

uint64_t *sub_1000180F0(char a1)
{
  return sub_10019E754(a1, v1, v2, v3);
}

uint64_t sub_100018110()
{
  return NWConnection.debugDescription.getter();
}

uint64_t sub_100018130()
{
  return swift_task_dealloc();
}

uint64_t sub_100018154(uint64_t a1, unsigned char *a2)
{
  *a2 = 1;
  return swift_willThrow();
}

uint64_t sub_100018170(uint64_t a1)
{
  *(void *)(v1 - 88) = a1;
  return v1 - 88;
}

uint64_t sub_100018184(uint64_t a1)
{
  return sub_10018C260(v1, a1);
}

uint64_t sub_1000181C4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000181F4()
{
  return v0;
}

unint64_t sub_100018208()
{
  return sub_1000087B0(0x6449726579616C70, 0xE800000000000000);
}

uint64_t sub_10001823C()
{
  return v0;
}

uint64_t sub_100018268(float a1)
{
  float *v1 = a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100018288()
{
  return v0;
}

void sub_10001829C()
{
  *uint64_t v0 = 0x8000000000000000;
}

uint64_t sub_1000182B8()
{
  return *(void *)(v0 + 120);
}

BOOL sub_1000182D4(NSObject *a1)
{
  return os_log_type_enabled(a1, v1);
}

double sub_1000182FC()
{
  return v0;
}

uint64_t sub_100018344()
{
  return v0;
}

uint64_t sub_100018350()
{
  return v0;
}

uint64_t sub_100018360()
{
  return v0 + 8;
}

uint64_t sub_100018370()
{
  return swift_slowAlloc();
}

void sub_100018394(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, a2, v5, a4, v4, 0xCu);
}

double sub_1000183B0()
{
  return sub_100169A40(v1, v0);
}

uint64_t sub_1000183CC()
{
  *uint64_t v0 = 0x8000000000000000;
  return v1;
}

double sub_1000183F0()
{
  uint64_t v2 = *(void *)(v0 - 248);
  return sub_100169A40(v2, (_OWORD *)(v0 - 128));
}

uint64_t sub_10001840C()
{
  return v0;
}

uint64_t sub_100018420()
{
  return v0;
}

uint64_t sub_10001843C(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_100018448(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return v1 - 104;
}

uint64_t sub_100018460()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t sub_100018484()
{
  return sub_10000DB14(v1, 1, v0);
}

id sub_1000184A8(uint64_t a1, void *a2)
{
  return a2;
}

uint64_t sub_1000184C8()
{
  return swift_release();
}

uint64_t sub_10001852C()
{
  return swift_slowAlloc();
}

uint64_t sub_100018558()
{
  return v0;
}

uint64_t sub_100018574()
{
  return swift_release();
}

uint64_t sub_1000185A8(uint64_t a1, uint64_t *a2)
{
  sub_10000D938(a2);
  sub_100017C80();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_100018600(uint64_t a1, uint64_t *a2)
{
  sub_10000D938(a2);
  sub_1000180C4();
  sub_100011C3C();
  v3();
  return a1;
}

uint64_t sub_10001864C(uint64_t a1, uint64_t *a2)
{
  sub_10000D938(a2);
  sub_100017A38();
  sub_100011C3C();
  v3();
  return a1;
}

uint64_t sub_10001869C(uint64_t a1)
{
  uint64_t v2 = sub_10000D938(&qword_100326FD0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000186FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D938(&qword_100326FD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100018768()
{
  sub_1000112E8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100008DC0(v0);
  void *v1 = v2;
  v1[1] = sub_100171648;
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_100328738 + dword_100328738);
  return v3();
}

uint64_t sub_100018818()
{
  sub_1000112E8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100171EBC(v0);
  void *v1 = v2;
  v1[1] = sub_100171E3C;
  uint64_t v3 = sub_10001808C();
  return v4(v3);
}

uint64_t sub_1000188B0()
{
  sub_1000112E8();
  uint64_t v1 = v0;
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v2 + *v2);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)sub_100171EBC(v3);
  void *v4 = v5;
  v4[1] = sub_100018764;
  return v7(v1);
}

uint64_t sub_100018980(uint64_t a1, uint64_t a2)
{
  sub_10000D938(&qword_100326538);
  uint64_t v4 = swift_allocError();
  *uint64_t v5 = a2;

  return _swift_continuation_throwingResumeWithError(a1, v4);
}

uint64_t sub_1000189E8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  sub_10001A314((uint64_t)&v4, *(void *)(*(void *)(a1 + 64) + 40), a3);
  return swift_continuation_throwingResume();
}

uint64_t sub_100018A3C(uint64_t a1, uint64_t a2)
{
  return sub_1000189E8(a1, a2, &qword_1003282C0);
}

unint64_t sub_100018A48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        id v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_100018B2C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = -1;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  *a2 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v5 = v6;
  if (-v3 < 64) {
    uint64_t v2 = ~(-1 << -(char)v3);
  }
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

char *sub_100018B68(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001774A0(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

uint64_t sub_100018B88(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3) {
        return sub_100019FC0(0, v3, 1, a1);
      }
      return result;
    }
    goto LABEL_144;
  }
  uint64_t v5 = result;
  uint64_t result = (uint64_t)sub_1001771C0(v3 / 2);
  uint64_t v95 = result;
  uint64_t v96 = v3;
  v97 = v6;
  v93 = a1;
  if (v3 <= 0)
  {
    v98 = (unint64_t *)&_swiftEmptyArrayStorage;
    unint64_t v31 = *((void *)&_swiftEmptyArrayStorage + 2);
LABEL_110:
    if (v31 < 2)
    {
LABEL_121:
      uint64_t result = swift_bridgeObjectRelease();
      if (v3 >= -1)
      {
        *(void *)(v95 + 16) = 0;
        return swift_bridgeObjectRelease();
      }
      goto LABEL_149;
    }
    uint64_t v85 = *v93;
    while (1)
    {
      unint64_t v86 = v31 - 2;
      if (v31 < 2) {
        break;
      }
      if (!v85) {
        goto LABEL_153;
      }
      v87 = v98;
      int64_t v88 = v98[2 * v86 + 4];
      int64_t v89 = v98[2 * v31 + 3];
      uint64_t result = sub_10019C2BC((char *)(v85 + 16 * v88), (char *)(v85 + 16 * v98[2 * v31 + 2]), v85 + 16 * v89, v97);
      if (v1) {
        goto LABEL_106;
      }
      if (v89 < v88) {
        goto LABEL_139;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_10019C55C((uint64_t)v98);
        v87 = (unint64_t *)result;
      }
      if (v86 >= v87[2]) {
        goto LABEL_140;
      }
      v90 = &v87[2 * v86 + 4];
      unint64_t *v90 = v88;
      v90[1] = v89;
      unint64_t v91 = v87[2];
      if (v31 > v91) {
        goto LABEL_141;
      }
      uint64_t result = (uint64_t)memmove(&v87[2 * v31 + 2], &v87[2 * v31 + 4], 16 * (v91 - v31));
      v98 = v87;
      v87[2] = v91 - 1;
      unint64_t v31 = v91 - 1;
      Swift::Int v3 = v96;
      if (v91 <= 2) {
        goto LABEL_121;
      }
    }
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
    return result;
  }
  uint64_t v94 = v5;
  Swift::Int v7 = 0;
  uint64_t v8 = *a1;
  uint64_t v92 = *a1 + 8;
  v98 = (unint64_t *)&_swiftEmptyArrayStorage;
  while (1)
  {
    Swift::Int v9 = v7++;
    if (v7 >= v3) {
      goto LABEL_32;
    }
    uint64_t v10 = (uint64_t *)(v8 + 16 * v7);
    uint64_t result = *v10;
    uint64_t v11 = v10[1];
    uint64_t v12 = (void *)(v8 + 16 * v9);
    if (result == *v12 && v11 == v12[1])
    {
      Swift::Int v15 = v9 + 2;
      if (v9 + 2 >= v3) {
        goto LABEL_31;
      }
      int v14 = 0;
LABEL_13:
      unsigned __int8 v16 = (void *)(v92 + 16 * v15);
      do
      {
        uint64_t result = *(v16 - 1);
        BOOL v17 = (void *)(v8 + 16 * v7);
        if (result == *v17 && *v16 == v17[1])
        {
          if (v14) {
            goto LABEL_24;
          }
        }
        else
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((v14 ^ result)) {
            goto LABEL_23;
          }
        }
        v16 += 2;
        Swift::Int v19 = v15 + 1;
        Swift::Int v7 = v15;
        Swift::Int v15 = v19;
      }
      while (v19 < v3);
      Swift::Int v15 = v19;
      goto LABEL_23;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    int v14 = result;
    Swift::Int v15 = v9 + 2;
    if (v9 + 2 < v3) {
      goto LABEL_13;
    }
LABEL_23:
    Swift::Int v7 = v15;
    if ((v14 & 1) == 0) {
      goto LABEL_32;
    }
LABEL_24:
    if (v15 < v9) {
      goto LABEL_148;
    }
    if (v9 < v15)
    {
      uint64_t v20 = 16 * v15;
      uint64_t v21 = 16 * v9;
      Swift::Int v22 = v15;
      Swift::Int v23 = v9;
      do
      {
        if (v23 != --v22)
        {
          if (!v8) {
            goto LABEL_152;
          }
          uint64_t v24 = v8 + v20;
          uint64_t v25 = *(void *)(v8 + v21);
          uint64_t v26 = *(void *)(v8 + v21 + 8);
          *(_OWORD *)(v8 + v21) = *(_OWORD *)(v8 + v20 - 16);
          *(void *)(v24 - 16) = v25;
          *(void *)(v24 - 8) = v26;
        }
        ++v23;
        v20 -= 16;
        v21 += 16;
      }
      while (v23 < v22);
    }
LABEL_31:
    Swift::Int v7 = v15;
LABEL_32:
    if (v7 >= v3) {
      goto LABEL_41;
    }
    if (__OFSUB__(v7, v9)) {
      goto LABEL_143;
    }
    if (v7 - v9 >= v94) {
      goto LABEL_41;
    }
    if (__OFADD__(v9, v94)) {
      goto LABEL_146;
    }
    if (v9 + v94 >= v3) {
      Swift::Int v27 = v3;
    }
    else {
      Swift::Int v27 = v9 + v94;
    }
    if (v27 < v9) {
      goto LABEL_147;
    }
    if (v7 == v27)
    {
LABEL_41:
      uint64_t v28 = (char *)v98;
    }
    else
    {
      long long v79 = (uint64_t *)(v8 + 16 * v7);
      uint64_t v28 = (char *)v98;
      do
      {
        long long v80 = (uint64_t *)(v8 + 16 * v7);
        uint64_t result = *v80;
        uint64_t v81 = v80[1];
        Swift::Int v82 = v9;
        long long v83 = v79;
        do
        {
          if (result == *(v83 - 2) && v81 == *(v83 - 1)) {
            break;
          }
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            break;
          }
          if (!v8) {
            goto LABEL_150;
          }
          uint64_t result = *v83;
          uint64_t v81 = v83[1];
          *(_OWORD *)long long v83 = *((_OWORD *)v83 - 1);
          *(v83 - 1) = v81;
          *(v83 - 2) = result;
          v83 -= 2;
          ++v82;
        }
        while (v7 != v82);
        ++v7;
        v79 += 2;
      }
      while (v7 != v27);
      Swift::Int v7 = v27;
    }
    if (v7 < v9) {
      goto LABEL_142;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_10019C464(0, *((void *)v28 + 2) + 1, 1, v28);
      uint64_t v28 = (char *)result;
    }
    unint64_t v30 = *((void *)v28 + 2);
    unint64_t v29 = *((void *)v28 + 3);
    unint64_t v31 = v30 + 1;
    if (v30 >= v29 >> 1)
    {
      uint64_t result = (uint64_t)sub_10019C464((char *)(v29 > 1), v30 + 1, 1, v28);
      uint64_t v28 = (char *)result;
    }
    *((void *)v28 + 2) = v31;
    id v32 = v28 + 32;
    uint64_t v33 = (Swift::Int *)&v28[16 * v30 + 32];
    *uint64_t v33 = v9;
    v33[1] = v7;
    v98 = (unint64_t *)v28;
    if (v30) {
      break;
    }
    unint64_t v31 = 1;
LABEL_90:
    Swift::Int v3 = v96;
    if (v7 >= v96) {
      goto LABEL_110;
    }
  }
  while (1)
  {
    unint64_t v34 = v31 - 1;
    if (v31 >= 4)
    {
      id v39 = &v32[16 * v31];
      uint64_t v40 = *((void *)v39 - 8);
      uint64_t v41 = *((void *)v39 - 7);
      BOOL v45 = __OFSUB__(v41, v40);
      uint64_t v42 = v41 - v40;
      if (v45) {
        goto LABEL_127;
      }
      uint64_t v44 = *((void *)v39 - 6);
      uint64_t v43 = *((void *)v39 - 5);
      BOOL v45 = __OFSUB__(v43, v44);
      uint64_t v37 = v43 - v44;
      char v38 = v45;
      if (v45) {
        goto LABEL_128;
      }
      unint64_t v46 = v31 - 2;
      id v47 = &v32[16 * v31 - 32];
      uint64_t v49 = *(void *)v47;
      uint64_t v48 = *((void *)v47 + 1);
      BOOL v45 = __OFSUB__(v48, v49);
      uint64_t v50 = v48 - v49;
      if (v45) {
        goto LABEL_129;
      }
      BOOL v45 = __OFADD__(v37, v50);
      uint64_t v51 = v37 + v50;
      if (v45) {
        goto LABEL_131;
      }
      if (v51 >= v42)
      {
        uint64_t v69 = &v32[16 * v34];
        uint64_t v71 = *(void *)v69;
        uint64_t v70 = *((void *)v69 + 1);
        BOOL v45 = __OFSUB__(v70, v71);
        uint64_t v72 = v70 - v71;
        if (v45) {
          goto LABEL_137;
        }
        BOOL v62 = v37 < v72;
        goto LABEL_79;
      }
    }
    else
    {
      if (v31 != 3)
      {
        uint64_t v63 = *((void *)v28 + 4);
        uint64_t v64 = *((void *)v28 + 5);
        BOOL v45 = __OFSUB__(v64, v63);
        uint64_t v56 = v64 - v63;
        char v57 = v45;
        goto LABEL_73;
      }
      uint64_t v36 = *((void *)v28 + 4);
      uint64_t v35 = *((void *)v28 + 5);
      BOOL v45 = __OFSUB__(v35, v36);
      uint64_t v37 = v35 - v36;
      char v38 = v45;
    }
    if (v38) {
      goto LABEL_130;
    }
    unint64_t v46 = v31 - 2;
    long long v52 = &v32[16 * v31 - 32];
    uint64_t v54 = *(void *)v52;
    uint64_t v53 = *((void *)v52 + 1);
    BOOL v55 = __OFSUB__(v53, v54);
    uint64_t v56 = v53 - v54;
    char v57 = v55;
    if (v55) {
      goto LABEL_132;
    }
    v58 = &v32[16 * v34];
    uint64_t v60 = *(void *)v58;
    uint64_t v59 = *((void *)v58 + 1);
    BOOL v45 = __OFSUB__(v59, v60);
    uint64_t v61 = v59 - v60;
    if (v45) {
      goto LABEL_134;
    }
    if (__OFADD__(v56, v61)) {
      goto LABEL_136;
    }
    if (v56 + v61 >= v37)
    {
      BOOL v62 = v37 < v61;
LABEL_79:
      if (v62) {
        unint64_t v34 = v46;
      }
      goto LABEL_81;
    }
LABEL_73:
    if (v57) {
      goto LABEL_133;
    }
    id v65 = &v32[16 * v34];
    uint64_t v67 = *(void *)v65;
    uint64_t v66 = *((void *)v65 + 1);
    BOOL v45 = __OFSUB__(v66, v67);
    uint64_t v68 = v66 - v67;
    if (v45) {
      goto LABEL_135;
    }
    if (v68 < v56) {
      goto LABEL_90;
    }
LABEL_81:
    unint64_t v73 = v34 - 1;
    if (v34 - 1 >= v31)
    {
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
      goto LABEL_138;
    }
    if (!v8) {
      goto LABEL_151;
    }
    long long v74 = &v32[16 * v73];
    uint64_t v75 = *(void *)v74;
    long long v76 = &v32[16 * v34];
    uint64_t v77 = *((void *)v76 + 1);
    uint64_t result = sub_10019C2BC((char *)(v8 + 16 * *(void *)v74), (char *)(v8 + 16 * *(void *)v76), v8 + 16 * v77, v97);
    if (v1) {
      break;
    }
    if (v77 < v75) {
      goto LABEL_124;
    }
    if (v34 > v98[2]) {
      goto LABEL_125;
    }
    *(void *)long long v74 = v75;
    *(void *)&v32[16 * v73 + 8] = v77;
    unint64_t v78 = v98[2];
    if (v34 >= v78) {
      goto LABEL_126;
    }
    uint64_t v28 = (char *)v98;
    unint64_t v31 = v78 - 1;
    uint64_t result = (uint64_t)memmove(&v32[16 * v34], v76 + 16, 16 * (v78 - 1 - v34));
    v98[2] = v78 - 1;
    if (v78 <= 2) {
      goto LABEL_90;
    }
  }
LABEL_106:
  uint64_t result = swift_bridgeObjectRelease();
  if (v96 < -1) {
    goto LABEL_145;
  }
  *(void *)(v95 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000191F0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_1000111E4();
    sub_1001BA82C();
LABEL_11:
    uint64_t result = sub_100011368();
    __break(1u);
    return result;
  }
  if (a3 + 16 * a2 > a1 && a1 + 16 * a2 > a3)
  {
    sub_1000111E4();
    sub_100018548();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

void sub_1000192A0()
{
  sub_1000192AC(*(void (**)(void, id))(v0 + 16));
}

void sub_1000192AC(void (*a1)(void, id))
{
  id v2 = (id)_convertErrorToNSError(_:)();
  a1(0, v2);
}

uint64_t sub_100019308()
{
  sub_1000112E8();
  uint64_t v3 = v2;
  sub_100011168();
  uint64_t v5 = v4;
  sub_1000111B4();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  sub_100010D94();
  *uint64_t v8 = v7;
  *(void *)(v5 + 160) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 168) = v3;
  }
  sub_100017040();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_1000193F8()
{
  sub_1000178F0();
  sub_100017D24();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100008DC0(v0);
  void *v1 = v2;
  v1[1] = sub_100171E3C;
  sub_10019DBE4();
  sub_10018C70C();
  return sub_10000830C(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000194AC()
{
  sub_100010DA4();
  sub_100011168();
  sub_1000111B4();
  void *v2 = v1;
  void *v2 = *v0;
  *(void *)(v1 + 216) = *(void *)(v3 + 48);
  sub_100017040();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_10001958C()
{
  sub_1000178F0();
  sub_100017D24();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100008DC0(v0);
  void *v1 = v2;
  v1[1] = sub_100171894;
  sub_10018C70C();
  return sub_10001964C(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10001964C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 176) = a7;
  *(void *)(v8 + 184) = a8;
  *(void *)(v8 + 160) = a4;
  *(void *)(v8 + 168) = a6;
  *(unsigned char *)(v8 + 224) = a5;
  *(void *)(v8 + 144) = a2;
  *(void *)(v8 + 152) = a3;
  *(void *)(v8 + 136) = a1;
  return _swift_task_switch(sub_100009F24, 0, 0);
}

uint64_t sub_10001967C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1000178F0();
  sub_100017D24();
  uint64_t v10 = swift_task_alloc();
  uint64_t v11 = (void *)sub_100008DC0(v10);
  void *v11 = v12;
  v11[1] = sub_100171E3C;
  sub_100017130();
  sub_10018C70C();
  return v20(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

uint64_t sub_10001973C()
{
  sub_100010DA4();
  v0[34] = sub_10000B6F0(v0[22]);
  v0[35] = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  v0[36] = (uint64_t)v2;
  void *v2 = v0;
  v2[1] = sub_1000199B0;
  uint64_t v3 = sub_100017B64(v0[25]);
  return sub_100006B40(v3);
}

uint64_t sub_1000197DC()
{
  sub_1000112E8();
  uint64_t v3 = v2;
  sub_100011168();
  uint64_t v5 = v4;
  sub_1000111B4();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v1;
  v5[43] = v7;
  v5[44] = v0;
  swift_task_dealloc();
  if (!v0) {
    v5[45] = v3;
  }
  sub_100017040();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_1000198D0()
{
  sub_100010DA4();
  sub_100011168();
  sub_1000111B4();
  void *v2 = v1;
  void *v2 = *v0;
  *(void *)(v1 + 320) = *(void *)(v3 + 48);
  sub_100017040();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_1000199B0()
{
  sub_100010DA4();
  sub_100011168();
  sub_1000111B4();
  void *v2 = v1;
  void *v2 = *v0;
  *(void *)(v1 + 296) = v3;
  swift_task_dealloc();
  sub_100017040();
  return _swift_task_switch(v4, v5, v6);
}

id sub_100019A80(uint64_t a1, uint64_t a2)
{
  sub_10000D938(&qword_100327040);

  return sub_100006C00(a1, a2);
}

void sub_100019B14(uint64_t a1)
{
  sub_10000B048(a1, *(void **)(v1 + 16), *(Class *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_100019B24()
{
  sub_100010DA4();
  swift_task_dealloc();
  sub_1000112AC();
  return v0();
}

uint64_t sub_100019B80()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v3 = v2;
  sub_1000111B4();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_100010D94();
  *uint64_t v6 = v5;
  *(void *)(v3 + 88) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  sub_100017040();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100019C64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[7] = a4;
  v5[8] = v4;
  v5[5] = a2;
  v5[6] = a3;
  void v5[4] = a1;
  return _swift_task_switch(sub_10000642C, 0, 0);
}

uint64_t sub_100019C8C(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 32);
  if (a3)
  {
    id v4 = a3;
    return sub_1000189E4(v3, v4);
  }
  else if (a2)
  {
    swift_unknownObjectRetain();
    return sub_1001CE290(v3, a2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100019D04()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

unint64_t sub_100019D1C(uint64_t a1)
{
  unint64_t result = sub_10001843C(a1);
  if (!result)
  {
    sub_100163988(v3);
    unint64_t result = sub_100008DCC();
    atomic_store(result, v1);
  }
  return result;
}

uint64_t sub_100019D54(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    void v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    void *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    unint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100019F54(char **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10019C688((uint64_t)v2);
  }
  uint64_t v3 = *((void *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  uint64_t result = sub_100018B88(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_100019FC0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
    while (2)
    {
      unint64_t v9 = (uint64_t *)(v7 + 16 * v4);
      uint64_t result = *v9;
      uint64_t v10 = v9[1];
      uint64_t v11 = v6;
      int64_t v12 = (uint64_t *)v8;
      do
      {
        if (result == *(v12 - 2) && v10 == *(v12 - 1)) {
          break;
        }
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0) {
          break;
        }
        if (!v7)
        {
          __break(1u);
          return result;
        }
        uint64_t result = *v12;
        uint64_t v10 = v12[1];
        *(_OWORD *)int64_t v12 = *((_OWORD *)v12 - 1);
        *(v12 - 1) = v10;
        *(v12 - 2) = result;
        v12 -= 2;
        ++v11;
      }
      while (v4 != v11);
      ++v4;
      v8 += 16;
      if (v4 != a2) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t sub_10001A088()
{
  return swift_release();
}

uint64_t type metadata accessor for NetworkRequestEligibiltyChecker()
{
  return self;
}

uint64_t sub_10001A0C4()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t type metadata accessor for NoopEntityCache()
{
  return self;
}

uint64_t sub_10001A1B0()
{
  sub_100017F78();
  sub_100010F2C();
  sub_1000175A8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100008DC0(v0);
  void *v1 = v2;
  v1[1] = sub_100171E3C;
  sub_1000176F0();
  sub_100017D80();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10001A264(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t sub_10001A278()
{
  return sub_10001A264(*(uint64_t (**)(uint64_t))(v0 + 8), v0, 0);
}

uint64_t sub_10001A2B4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10000D938(a3);
  sub_100017C80();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t sub_10001A314(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000D938(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10001A378()
{
  sub_1001BAD10();
  sub_10000D938(v2);
  sub_100017A38();
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v0, v1);
  return v0;
}

uint64_t sub_10001A3D0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    id v4 = a3;
    return sub_1000189E4(v3, v4);
  }
  else
  {
    id v7 = a2;
    return sub_100018A3C(v3, (uint64_t)a2);
  }
}

unint64_t sub_10001A43C(uint64_t a1)
{
  unint64_t result = sub_10001843C(a1);
  if (!result)
  {
    v3(255);
    unint64_t result = sub_100008DCC();
    atomic_store(result, v1);
  }
  return result;
}

uint64_t start()
{
  +[GKDaemonRuntimeStrategy setup];
  uint64_t v1 = +[GKPreferences shared];
  unsigned int v2 = [v1 lockedDown];

  if (v2)
  {
    if (!os_log_GKGeneral) {
      id v3 = (id)GKOSLoggers();
    }
    id v4 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      LOWORD(v18) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Lockdown Mode is enabled. Exiting.", (uint8_t *)&v18, 2u);
    }
    return 0;
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v6 = (id)GKOSLoggers();
    }
    id v7 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      LOWORD(v18) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "^^^^^^^^^^^^^^^^^^", (uint8_t *)&v18, 2u);
    }
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers();
    }
    uint64_t v9 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      LOWORD(v18) = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "| GAMED STARTING |", (uint8_t *)&v18, 2u);
    }
    if (!os_log_GKGeneral) {
      id v10 = (id)GKOSLoggers();
    }
    uint64_t v11 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      LOWORD(v18) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "vvvvvvvvvvvvvvvvvv", (uint8_t *)&v18, 2u);
    }
    if (!os_log_GKGeneral) {
      id v12 = (id)GKOSLoggers();
    }
    uint64_t v13 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      int64_t v14 = v13;
      unint64_t v15 = GKFrameworkVersionDescription();
      int v18 = 138412290;
      int64_t v19 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Frameworks Versions:\n%@", (uint8_t *)&v18, 0xCu);
    }
    GKDaemonRun();
    id v16 = +[GKNetworkRequestManager commonNetworkRequestManager];
    int64_t v17 = +[NSRunLoop mainRunLoop];
    [v17 run];

    return 0xFFFFFFFFLL;
  }
}

void sub_10001B118(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_10001B2B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) transport];
  uint64_t v5 = [v4 storeBag];
  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = dispatch_get_global_queue(0, 0);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10001B3B0;
  v9[3] = &unk_1002D3958;
  id v10 = *(id *)(a1 + 48);
  id v11 = v3;
  id v8 = v3;
  [v5 getValuesForKeys:v6 queue:v7 completion:v9];
}

uint64_t sub_10001B3B0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setResult:a2];
  [*(id *)(a1 + 32) setError:v6];

  id v7 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v7();
}

void sub_10001B66C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  id v6 = [*(id *)(a1 + 56) clientProxy];
  uint64_t v5 = [v6 replyQueue];
  +[NSData _gkLoadRemoteImageDataForURL:v2 subdirectory:v3 filename:v4 queue:v5 handler:*(void *)(a1 + 64)];
}

void sub_10001B700(uint64_t a1, char a2)
{
  if (a2)
  {
    uint64_t v3 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    v3();
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    uint64_t v5 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_FAULT)) {
      sub_1000228C8(a1, v5);
    }
    uint64_t v6 = *(void *)(a1 + 40);
    id v7 = +[NSData data];
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);
  }
}

void sub_10001B9AC(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = dispatch_get_global_queue(0, 0);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10001BA9C;
  v6[3] = &unk_1002D39F8;
  id v7 = a1[4];
  id v8 = a1[5];
  id v9 = a1[6];
  id v10 = v3;
  id v5 = v3;
  dispatch_async(v4, v6);
}

void sub_10001BA9C(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 32);
  id v3 = GKImageCachePathForSubdirectoryAndFilename();
  if (v3)
  {
    [*(id *)(a1 + 48) _gkWriteToImageCacheWithURLString:v3];
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    id v5 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100022944(v2, v2 + 1, v5);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

uint64_t sub_10001BB5C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10001BD4C(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = dispatch_get_global_queue(0, 0);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10001BE3C;
  v6[3] = &unk_1002D39F8;
  id v7 = a1[4];
  id v8 = a1[5];
  id v9 = a1[6];
  id v10 = v3;
  id v5 = v3;
  dispatch_async(v4, v6);
}

void sub_10001BE3C(uint64_t a1)
{
  GKImageCachePathForSubdirectoryAndFilename();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  id v2 = [objc_alloc((Class)NSData) initWithContentsOfFile:v3];
  if ([v2 length]) {
    [*(id *)(a1 + 48) setResult:v2];
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_10001BECC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) result];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10001C0F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = dispatch_get_global_queue(0, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10001C1CC;
  block[3] = &unk_1002D3A48;
  id v7 = *(id *)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v9 = v3;
  id v5 = v3;
  dispatch_async(v4, block);
}

void sub_10001C1CC(uint64_t a1)
{
  id v2 = GKImageCachePathForSubdirectoryAndFilename();
  id v3 = +[NSFileManager defaultManager];
  unsigned int v4 = [v3 fileExistsAtPath:v2];

  if (v4)
  {
    id v5 = +[NSFileManager defaultManager];
    id v8 = 0;
    [v5 removeItemAtPath:v2 error:&v8];
    id v6 = v8;

    if (v6)
    {
      if (!os_log_GKGeneral) {
        id v7 = (id)GKOSLoggers();
      }
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
        sub_1000229C4();
      }
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

uint64_t sub_10001C2D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10001C534(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = [*(id *)(a1 + 32) ampController];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10001C5F8;
  v6[3] = &unk_1002D3A98;
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  id v5 = v3;
  [v4 getBagWithCompletion:v6];
}

uint64_t sub_10001C5F8(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setResult:a2];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_10001C640(id *a1)
{
  id v2 = [a1[4] result];
  id v3 = v2;
  if (v2)
  {
    unsigned int v4 = [v2 doubleForKey:@"metrics/impressions/viewableThreshold"];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10001C778;
    v7[3] = &unk_1002D3AC0;
    id v8 = a1[5];
    id v9 = a1[6];
    [v4 valueWithCompletion:v7];
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers();
    }
    id v6 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100022A2C(v6);
    }
    (*((void (**)(void))a1[6] + 2))();
  }
}

void sub_10001C778(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10001C828;
  v7[3] = &unk_1002D3930;
  unsigned int v4 = *(NSObject **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

void sub_10001C828(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  [*(id *)(a1 + 32) doubleValue];
  id v3 = +[NSNumber numberWithDouble:v2 / 1000.0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v3);
}

void sub_10001CEC8(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v3 = a2;
    id v6 = +[GKAMPController controller];
    unsigned int v4 = [*(id *)(a1 + 32) clientProxy];
    id v5 = [v4 originalBundleIdentifier];
    [v6 reportClickStreamEventWithHostAppBundleId:v5 metricsFields:v3];
  }
}

void sub_10001D044(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v3 = a2;
    id v6 = +[GKAMPController controller];
    unsigned int v4 = [*(id *)(a1 + 32) clientProxy];
    id v5 = [v4 originalBundleIdentifier];
    [v6 reportClickStreamEventWithHostAppBundleId:v5 metricsFields:v3];
  }
}

void sub_10001D180(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) overlayServiceUtils];
  [v2 emitMultiplayerEventWithMessage:*(void *)(a1 + 40)];
}

void sub_10001DA98(id a1)
{
  qword_100329650 = objc_alloc_init(GKFriendSuggestionDenier);

  _objc_release_x1();
}

uint64_t sub_10001DFD0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    CFStringRef v3 = *(const __CFString **)(a1 + 32);
    if (v3) {
      CFStringRef v4 = v3;
    }
    else {
      CFStringRef v4 = @"NewsApp";
    }
    return (*(uint64_t (**)(uint64_t, void, _UNKNOWN **, const __CFString *))(result + 16))(result, 0, &off_1002F1EC8, v4);
  }
  return result;
}

void sub_10001E00C(uint64_t a1, void *a2)
{
  id v3 = a2;
  CFStringRef v4 = objc_opt_new();
  id v5 = [v4 handleURL:*(void *)(a1 + 32)];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10001E170;
  v11[3] = &unk_1002D3BA0;
  id v12 = *(id *)(a1 + 40);
  id v13 = *(id *)(a1 + 48);
  id v6 = v3;
  id v14 = v6;
  [v5 addSuccessBlock:v11];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10001E3B0;
  v8[3] = &unk_1002D3BC8;
  id v9 = *(id *)(a1 + 48);
  id v10 = v6;
  id v7 = v6;
  [v5 addErrorBlock:v8];
}

void sub_10001E170(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = [v3 intValue];
  if (v4 == 1)
  {
    if (!os_log_GKGeneral) {
      id v9 = (id)GKOSLoggers();
    }
    id v10 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "ASCAppLaunchTrampoline: Successfully opened app product page", buf, 2u);
    }
    if (!*(void *)(a1 + 32))
    {
      id v11 = @"com.apple.AppStore";
      goto LABEL_23;
    }
    id v8 = +[NSString stringWithFormat:@"https://apps.apple.com/app/id%@", *(void *)(a1 + 32)];
    goto LABEL_16;
  }
  if (!v4)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers();
    }
    id v6 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "ASCAppLaunchTrampoline: Successfully launched app", buf, 2u);
    }
    id v7 = *(__CFString **)(a1 + 32);
    if (!v7) {
      id v7 = @"thirdPartyApp";
    }
    id v8 = v7;
LABEL_16:
    id v11 = v8;
    goto LABEL_23;
  }
  if (!os_log_GKGeneral) {
    id v12 = (id)GKOSLoggers();
  }
  id v13 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "ASCAppLaunchTrampoline: Successfully trampolined with unknown result", buf, 2u);
  }
  id v11 = @"unknown";
LABEL_23:
  v16[0] = @"code";
  v16[1] = @"targetId";
  v17[0] = v3;
  v17[1] = v11;
  id v14 = +[NSDictionary dictionaryWithObjects:v17 forKeys:v16 count:2];
  [*(id *)(a1 + 40) setResult:v14];

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10001E3B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!os_log_GKGeneral) {
    id v4 = (id)GKOSLoggers();
  }
  id v5 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "ASCAppLaunchTrampoline: Trampoline failed because of: %@", (uint8_t *)&v6, 0xCu);
  }
  [*(id *)(a1 + 32) setError:v3];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10001E4A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v7 = [*(id *)(a1 + 32) error];
  id v3 = [*(id *)(a1 + 32) result];
  id v4 = [v3 objectForKeyedSubscript:@"code"];
  id v5 = [*(id *)(a1 + 32) result];
  int v6 = [v5 objectForKeyedSubscript:@"targetId"];
  (*(void (**)(uint64_t, id, void *, void *))(v2 + 16))(v2, v7, v4, v6);
}

void sub_10001E6BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001E6D4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10001E6E4(uint64_t a1)
{
}

void sub_10001E6EC(uint64_t a1, void *a2, unsigned char *a3)
{
  id v8 = a2;
  int v6 = [v8 bundleIdentifier];
  id v7 = *(void **)(a1 + 32);

  if (v6 == v7)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
    *a3 = 1;
  }
}

void sub_10001E9DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v8 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"playerID"];
  id v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"authToken"];
  id v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"accountName"];
  id v5 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"pushToken"];
  int v6 = [*(id *)(a1 + 32) result];
  id v7 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *, void *, void *, void *, void *))(v2 + 16))(v2, v8, v3, v4, v5, v6, v7);
}

void sub_10001EC18(id a1)
{
  id v1 = +[GKDataRequestManager sharedManager];
  [v1 terminate];
}

void sub_10001EE4C(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10001EEE0;
  v2[3] = &unk_1002D3C38;
  id v1 = *(void **)(a1 + 40);
  v2[4] = *(void *)(a1 + 32);
  id v3 = v1;
  +[GKClientProxy removeAllCachesWithHandler:v2];
}

void sub_10001EEE0(uint64_t a1)
{
  uint64_t v2 = GKInsecureCacheRoot();
  +[GKUtilityServicePrivate removeCacheDirectory:v2];

  id v3 = GKSupportDataRoot();
  +[GKUtilityServicePrivate removeCacheDirectory:v3];

  id v4 = [*(id *)(a1 + 32) clientProxy];
  id v5 = [v4 replyQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10001EFDC;
  block[3] = &unk_1002D3A20;
  id v7 = *(id *)(a1 + 40);
  dispatch_async(v5, block);
}

uint64_t sub_10001EFDC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10001F0A4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) clientProxy];
  id v3 = [v2 replyQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10001F15C;
  block[3] = &unk_1002D3A20;
  id v5 = *(id *)(a1 + 40);
  dispatch_async(v3, block);
}

uint64_t sub_10001F15C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_10001F2F0(uint64_t a1, void *a2)
{
  return [a2 refreshContentsForDataType:*(unsigned int *)(a1 + 32) userInfo:0];
}

uint64_t sub_10001F434(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10001F62C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) ampController];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10001F6F0;
  v6[3] = &unk_1002D3A98;
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  id v5 = v3;
  [v4 getBagWithCompletion:v6];
}

uint64_t sub_10001F6F0(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setResult:a2];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_10001F738(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) result];
  id v3 = v2;
  if (v2)
  {
    id v4 = [v2 stringForKey:GKArcadeProductFamilyId];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10001F87C;
    v10[3] = &unk_1002D3D58;
    id v5 = *(void **)(a1 + 48);
    v10[4] = *(void *)(a1 + 40);
    id v11 = v5;
    [v4 valueWithCompletion:v10];
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v6 = (id)GKOSLoggers();
    }
    id v7 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100022AD8(v7);
    }
    uint64_t v8 = *(void *)(a1 + 48);
    id v9 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v9);
  }
}

void sub_10001F87C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) clientProxy];
  id v5 = [v4 replyQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10001F954;
  block[3] = &unk_1002D3A48;
  id v6 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  id v9 = v3;
  id v10 = v6;
  id v7 = v3;
  dispatch_async(v5, block);
}

void sub_10001F954(id *a1)
{
  id v2 = a1[4];
  id v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKUtilityService.m", 850, "-[GKUtilityServicePrivate checkAndUpdateArcadeSubscriberStatusWithHandler:]_block_invoke_2");
  id v4 = [v2 transactionGroupWithName:v3];

  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10001FAEC;
  v15[3] = &unk_1002D3D30;
  id v5 = a1[5];
  id v6 = a1[4];
  id v16 = v5;
  id v17 = v6;
  id v7 = v4;
  id v18 = v7;
  [v7 performOnManagedObjectContext:v15];
  uint64_t v8 = [a1[4] clientProxy];
  id v9 = [v8 replyQueue];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10001FFD4;
  void v12[3] = &unk_1002D3930;
  id v10 = a1[6];
  id v13 = v7;
  id v14 = v10;
  id v11 = v7;
  [v11 notifyOnQueue:v9 block:v12];
}

void sub_10001FAEC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:a2];
  unsigned __int8 v7 = [v6 isArcadeSubscriber];
  uint64_t v8 = +[ASDSubscriptionEntitlements sharedInstance];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10001FC08;
  void v13[3] = &unk_1002D3D08;
  id v9 = *(id *)(a1 + 32);
  unsigned __int8 v18 = v7;
  uint64_t v10 = *(void *)(a1 + 40);
  id v11 = *(void **)(a1 + 48);
  id v14 = v9;
  uint64_t v15 = v10;
  id v17 = v5;
  id v16 = v11;
  id v12 = v5;
  [v8 getSubscriptionEntitlementsForSegment:1 ignoreCaches:0 withResultHandler:v13];
}

void sub_10001FC08(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  if (v7)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers();
    }
    id v9 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_ERROR)) {
      sub_100022B1C((uint64_t)v7, v9);
    }
    [*(id *)(a1 + 48) setError:v7];
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    goto LABEL_36;
  }
  if ([v6 count])
  {
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    id v10 = v6;
    id v11 = [v10 countByEnumeratingWithState:&v30 objects:v36 count:16];
    if (v11)
    {
      id v27 = v6;
      uint64_t v12 = *(void *)v31;
      while (2)
      {
        for (unint64_t i = 0; i != v11; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v31 != v12) {
            objc_enumerationMutation(v10);
          }
          id v14 = *(void **)(*((void *)&v30 + 1) + 8 * i);
          uint64_t v15 = [v14 familyID:v27];
          id v16 = [v15 stringValue];
          unsigned int v17 = [v16 isEqualToString:*(void *)(a1 + 32)];

          if (v17)
          {
            int64_t v19 = [v14 expiryDate];
            [v19 timeIntervalSinceNow];
            double v21 = v20;

            if (v21 <= 0.0)
            {
              id v11 = 0;
            }
            else
            {
              id v11 = [v14 expiryDate];
            }
            id v6 = v27;
            id v18 = v14;
            goto LABEL_23;
          }
        }
        id v11 = [v10 countByEnumeratingWithState:&v30 objects:v36 count:16];
        if (v11) {
          continue;
        }
        break;
      }
      id v18 = 0;
      id v6 = v27;
    }
    else
    {
      id v18 = 0;
    }
LABEL_23:
  }
  else
  {
    id v18 = 0;
    id v11 = 0;
  }
  if (!*(unsigned char *)(a1 + 64) || v11)
  {
    if (*(unsigned char *)(a1 + 64) || !v11) {
      goto LABEL_31;
    }
    Swift::Int v22 = +[GKService serviceFromService:*(void *)(a1 + 40)];
    [v22 setArcadeSubscriptionExpiration:v11 handler:&stru_1002D3CE0];
  }
  else
  {
    Swift::Int v22 = +[GKService serviceFromService:*(void *)(a1 + 40)];
    Swift::Int v23 = +[NSDate dateWithTimeIntervalSince1970:0.0];
    [v22 setArcadeSubscriptionExpiration:v23 handler:&stru_1002D3CC0];
  }
LABEL_31:
  if (!os_log_GKGeneral) {
    id v24 = (id)GKOSLoggers();
  }
  uint64_t v25 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    id v35 = v18;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "checkAndUpdateArcadeSubscriberStatusWithHandler: updating arcade subscription state with entitlement %@", buf, 0xCu);
  }
  uint64_t v26 = +[GKPreferences shared];
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472;
  v28[2] = sub_10001FFC4;
  v28[3] = &unk_1002D3A20;
  id v29 = *(id *)(a1 + 56);
  [v26 updateArcadeSubscriptionState:v18 completionHandler:v28];

LABEL_36:
}

uint64_t sub_10001FFC4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10001FFD4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }
}

void sub_100020184(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [GKFriendSuggester alloc];
  id v5 = [v3 contactIDs];

  id v6 = [GKFriendSuggesterSettingsProvider alloc];
  id v7 = [*(id *)(a1 + 32) transport];
  id v8 = [v7 storeBag];
  id v9 = [(GKFriendSuggesterSettingsProvider *)v6 initWithStoreBag:v8];
  id v10 = [(GKFriendSuggester *)v4 initWithDeniedContactIDs:v5 settingsProvider:v9];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100020308(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[GKContactsIntegrationController sharedController];
  id v5 = *(void **)(a1 + 32);
  id v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKUtilityService.m", 935, "-[GKUtilityServicePrivate rerankedFriendSuggestionsHandlesWithHandler:]_block_invoke");
  id v7 = [v5 transactionGroupWithName:v6];

  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  void v17[2] = sub_1000204E0;
  v17[3] = &unk_1002D3D30;
  id v8 = v7;
  id v18 = v8;
  id v19 = v3;
  id v20 = v4;
  id v9 = v4;
  id v10 = v3;
  [v8 performOnManagedObjectContext:v17];
  id v11 = [*(id *)(a1 + 32) clientProxy];
  uint64_t v12 = [v11 replyQueue];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10002056C;
  v14[3] = &unk_1002D3C38;
  id v15 = v8;
  id v16 = *(id *)(a1 + 40);
  id v13 = v8;
  [v13 notifyOnQueue:v12 block:v14];
}

void sub_1000204E0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  id v8 = a3;
  id v7 = [v5 rerankedHandlesWithContactsIntegrationController:v6 context:a2];
  [*(id *)(a1 + 32) setResult:v7];

  v8[2]();
}

void sub_10002056C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) result];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100020684(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) clientProxy];
  id v5 = [v4 replyQueue];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100020758;
  v8[3] = &unk_1002D3930;
  id v6 = *(id *)(a1 + 40);
  id v9 = v3;
  id v10 = v6;
  id v7 = v3;
  dispatch_async(v5, v8);
}

void sub_100020758(uint64_t a1)
{
  v6[0] = @"contactIDs";
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = [*(id *)(a1 + 32) contactIDs];
  v6[1] = @"playerIDs";
  v7[0] = v3;
  id v4 = [*(id *)(a1 + 32) playerIDs];
  v7[1] = v4;
  id v5 = +[NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:2];
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v5);
}

uint64_t sub_100020A2C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100020A40(void *a1, void *a2)
{
  id v4 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v7 = GKDeniedPlayerIdKey;
  uint64_t v8 = v3;
  id v5 = a2;
  id v6 = +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];
  [v4 handleFriendSuggestionDenialWithNotificationPayload:v6 error:v5 handler:a1[6]];
}

uint64_t sub_100020CF4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100020D08(void *a1, void *a2)
{
  id v4 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v7 = GKBlacklistedContactIdKey;
  uint64_t v8 = v3;
  id v5 = a2;
  id v6 = +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];
  [v4 handleFriendSuggestionDenialWithNotificationPayload:v6 error:v5 handler:a1[6]];
}

uint64_t sub_100020ED0(uint64_t a1)
{
  if (!*(void *)(a1 + 32))
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100020F84;
    v3[3] = &unk_1002D3DF8;
    id v4 = *(id *)(a1 + 40);
    +[GKClientProxy enumerateClientsUsingBlock:v3];
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

id sub_100020F84(uint64_t a1, void *a2)
{
  return [a2 refreshContentsForDataType:4 userInfo:*(void *)(a1 + 32)];
}

void sub_100021070(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 _gkMapWithBlock:&stru_1002D3E38];
  id v5 = +[GKService serviceFromService:*(void *)(a1 + 32)];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100021160;
  v8[3] = &unk_1002D3E60;
  id v6 = *(id *)(a1 + 40);
  id v9 = v3;
  id v10 = v6;
  id v7 = v3;
  [v5 filterForContactIDsSupportingFriendingViaPushFromContactIDs:v4 withCompletion:v8];
}

id sub_100021158(id a1, GKFriendSuggestion *a2, unint64_t a3)
{
  return [(GKFriendSuggestion *)a2 contactID];
}

void sub_100021160(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers();
    }
    uint64_t v8 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_ERROR)) {
      sub_100022B94((uint64_t)v6, v8);
    }
  }
  uint64_t v9 = *(void *)(a1 + 40);
  id v10 = +[GKUtilityServicePrivate serializeFriendSuggestions:*(void *)(a1 + 32) contactIDsSupportingPushFriending:v5];
  (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v10);
}

id sub_1000214A0(id a1, GKFriendSuggestion *a2, unint64_t a3)
{
  return [(GKFriendSuggestion *)a2 contactID];
}

void sub_10002153C(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 32) contactIDsFromSuggestions:a2];
  id v4 = +[NSOrderedSet orderedSetWithArray:v3];
  id v5 = [v4 array];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100021668(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKUtilityService.m", 1100, "-[GKUtilityServicePrivate fetchFriendSuggestionsWithHandler:]_block_invoke");
  id v5 = +[GKDispatchGroup dispatchGroupWithName:v4];

  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10002181C;
  v15[3] = &unk_1002D3980;
  void v15[4] = *(void *)(a1 + 32);
  id v16 = v3;
  id v6 = v5;
  id v17 = v6;
  id v7 = v3;
  [v6 perform:v15];
  uint64_t v8 = [*(id *)(a1 + 32) clientProxy];
  uint64_t v9 = [v8 replyQueue];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100021AE4;
  void v12[3] = &unk_1002D3930;
  id v10 = *(id *)(a1 + 40);
  id v13 = v6;
  id v14 = v10;
  id v11 = v6;
  [v11 notifyOnQueue:v9 block:v12];
}

void sub_10002181C(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1000219FC;
  v15[3] = &unk_1002D3ED0;
  objc_copyWeak(&v16, &location);
  id v4 = objc_retainBlock(v15);
  id v5 = [GKRerankNetworkRequester alloc];
  id v6 = [*(id *)(a1 + 32) clientProxy];
  id v7 = +[GKNetworkRequestManager commonNetworkRequestManager];
  uint64_t v8 = [(GKRerankNetworkRequester *)v5 initWithClientProxy:v6 networkManager:v7 transactionGroupProvider:v4];

  uint64_t v9 = +[GKContactsIntegrationController sharedController];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100021A9C;
  void v12[3] = &unk_1002D3E88;
  id v10 = *(void **)(a1 + 40);
  id v13 = *(id *)(a1 + 48);
  id v11 = v3;
  id v14 = v11;
  [v10 suggestionsWithRerankRequester:v8 contactsIntegrationController:v9 transactionGroupProvider:v4 handler:v12];

  objc_destroyWeak(&v16);
  objc_destroyWeak(&location);
}

void sub_1000219DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1000219FC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKUtilityService.m", 1107, "-[GKUtilityServicePrivate fetchFriendSuggestionsWithHandler:]_block_invoke_3");
  id v3 = [WeakRetained transactionGroupWithName:v2];

  return v3;
}

uint64_t sub_100021A9C(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setResult:a2];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_100021AE4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) result];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100021BD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKUtilityService.m", 1138, "-[GKUtilityServicePrivate getGameInviteFriendSuggestionsWithHandler:]_block_invoke");
  id v5 = +[GKDispatchGroup dispatchGroupWithName:v4];

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100021D88;
  v14[3] = &unk_1002D3A70;
  id v15 = v3;
  id v6 = v5;
  id v16 = v6;
  id v7 = v3;
  [v6 perform:v14];
  uint64_t v8 = [*(id *)(a1 + 32) clientProxy];
  uint64_t v9 = [v8 replyQueue];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100021E80;
  v11[3] = &unk_1002D3C38;
  id v12 = v6;
  id v13 = *(id *)(a1 + 40);
  id v10 = v6;
  [v10 notifyOnQueue:v9 block:v11];
}

void sub_100021D88(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100021E38;
  v6[3] = &unk_1002D3E88;
  id v4 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  id v5 = v3;
  [v4 gameInviteSuggestionsWithHandler:v6];
}

uint64_t sub_100021E38(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setResult:a2];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_100021E80(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) result];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_100021F74(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10002211C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v12[0] = GKBagKeyWidgetDrawerActivityLivePreview;
  v12[1] = GKBagKeyWidgetDrawerActivityTTL;
  id v4 = +[NSArray arrayWithObjects:v12 count:2];
  id v5 = [*(id *)(a1 + 32) transport];
  id v6 = [v5 storeBag];
  id v7 = dispatch_get_global_queue(0, 0);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100022280;
  v9[3] = &unk_1002D3958;
  id v10 = *(id *)(a1 + 40);
  id v11 = v3;
  id v8 = v3;
  [v6 getValuesForKeys:v4 queue:v7 completion:v9];
}

uint64_t sub_100022280(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setResult:a2];
  [*(id *)(a1 + 32) setError:v6];

  id v7 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v7();
}

void sub_1000222F0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) result];
  uint64_t v3 = GKBagKeyWidgetDrawerActivityTTL;
  uint64_t v4 = [v2 objectForKeyedSubscript:GKBagKeyWidgetDrawerActivityTTL];
  id v5 = (void *)v4;
  if (v4) {
    id v6 = (_UNKNOWN **)v4;
  }
  else {
    id v6 = &off_1002F1EE0;
  }
  id v14 = v6;

  id v7 = [*(id *)(a1 + 32) result];
  uint64_t v8 = [v7 objectForKeyedSubscript:v3];
  uint64_t v9 = (void *)v8;
  if (v8) {
    id v10 = (_UNKNOWN **)v8;
  }
  else {
    id v10 = &off_1002F1EE0;
  }
  id v11 = v10;

  uint64_t v12 = *(void *)(a1 + 40);
  id v13 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, void *, _UNKNOWN **, _UNKNOWN **))(v12 + 16))(v12, v13, v14, v11);
}

void sub_1000228C8(uint64_t a1, NSObject *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Not loading image with untrusted domain URL: %@", (uint8_t *)&v3, 0xCu);
}

void sub_100022944(void *a1, void *a2, NSObject *a3)
{
  *(_DWORD *)int v3 = 138412546;
  *(void *)&void v3[4] = *a1;
  *(_WORD *)&v3[12] = 2112;
  *(void *)&v3[14] = *a2;
  sub_100011010((void *)&_mh_execute_header, (uint64_t)a2, a3, "Image failed to cache. nil url for: subdirectory: %@, filename: %@", *(void *)v3, *(void *)&v3[8], *(void *)&v3[16]);
}

void sub_1000229C4()
{
  sub_100011030();
  sub_100011010((void *)&_mh_execute_header, v0, v1, "Error deleting cached image (%@) %@");
}

void sub_100022A2C(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Cannot get threshold value without a bag.", v1, 2u);
}

void sub_100022A70()
{
  sub_100011030();
  sub_100011010((void *)&_mh_execute_header, v0, v1, "Failed to clear GameKit cache directory: %@, error: %@");
}

void sub_100022AD8(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Cannot get Arcade subscription state without a bag.", v1, 2u);
}

void sub_100022B1C(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "checkAndUpdateArcadeSubscriberStatusWithHandler: Error updating arcade subscription status: %@ ", (uint8_t *)&v2, 0xCu);
}

void sub_100022B94(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to retrieve friending-via-push contactIDs, error: %@", (uint8_t *)&v2, 0xCu);
}

id sub_100022C8C(uint64_t a1, void *a2)
{
  return [a2 refreshContentsForDataType:*(unsigned int *)(a1 + 32) userInfo:0];
}

void sub_100022DAC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2 == 1)
  {
    id v11 = +[NSPredicate predicateWithFormat:@"wasViewed == NO"];
    uint64_t v12 = [*(id *)(a1 + 32) context];
    id v13 = +[GKCacheObject objectsMatchingPredicate:v11 context:v12];

    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    id v6 = v13;
    id v14 = [v6 countByEnumeratingWithState:&v21 objects:v29 count:16];
    if (v14)
    {
      id v15 = v14;
      uint64_t v16 = *(void *)v22;
      do
      {
        for (unint64_t i = 0; i != v15; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v22 != v16) {
            objc_enumerationMutation(v6);
          }
          [*(id *)(*((void *)&v21 + 1) + 8 * i) setWasViewed:1, (void)v21];
        }
        id v15 = [v6 countByEnumeratingWithState:&v21 objects:v29 count:16];
      }
      while (v15);
    }
    goto LABEL_18;
  }
  if (!v2)
  {
    uint64_t v3 = +[NSPredicate predicateWithFormat:@"wasViewed == NO"];
    uint64_t v4 = [*(id *)(a1 + 32) context];
    id v5 = +[GKCacheObject objectsMatchingPredicate:v3 context:v4];

    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    id v6 = v5;
    id v7 = [v6 countByEnumeratingWithState:&v25 objects:v30 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v26;
      do
      {
        for (j = 0; j != v8; j = (char *)j + 1)
        {
          if (*(void *)v26 != v9) {
            objc_enumerationMutation(v6);
          }
          [*(id *)(*((void *)&v25 + 1) + 8 * (void)j) setWasViewed:1];
        }
        id v8 = [v6 countByEnumeratingWithState:&v25 objects:v30 count:16];
      }
      while (v8);
    }
LABEL_18:
  }
  id v18 = +[GKBadgeController sharedController];
  [v18 setBadgeCount:0 forBundleID:GKGameCenterIdentifier badgeType:*(void *)(a1 + 48)];
  id v19 = [*(id *)(a1 + 40) clientProxy];
  id v20 = [v19 bundleIdentifier];
  [v18 setBadgeCount:0 forBundleID:v20 badgeType:*(void *)(a1 + 48)];
}

void sub_100023920(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) clientProxy];
  uint64_t v3 = [v2 appInitState];
  unsigned __int8 v4 = [v3 isEqualToString:@"GKAppInitialized"];

  if ((v4 & 1) == 0)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100034ED0();
    }
  }
  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = [*(id *)(a1 + 32) clientProxy];
  (*(void (**)(uint64_t, id))(v6 + 16))(v6, [v7 isAppUnlistedAndDisallowed]);
}

uint64_t sub_100023C7C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_100023D74(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100024210(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = +[GKNetworkRequestManager commonNetworkRequestManager];
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = [*(id *)(a1 + 40) clientProxy];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100024314;
  v10[3] = &unk_1002D3F90;
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 40);
  id v11 = v7;
  uint64_t v12 = v8;
  char v14 = *(unsigned char *)(a1 + 56);
  id v13 = v3;
  id v9 = v3;
  [v4 issueRequest:v5 bagKey:@"gk-logout-user" clientProxy:v6 handler:v10];
}

void sub_100024314(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  [*(id *)(a1 + 32) setError:v4];
  if (!os_log_GKGeneral) {
    id v5 = (id)GKOSLoggers();
  }
  uint64_t v6 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    id v38 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "gk-logout-user result:%@", buf, 0xCu);
  }
  id v7 = [*(id *)(a1 + 40) credential];
  uint64_t v8 = [v7 altDSID];
  id v9 = [v8 copy];

  id v10 = [*(id *)(a1 + 40) credential];
  id v11 = [v10 DSID];
  if (v11)
  {
    uint64_t v12 = [*(id *)(a1 + 40) credential];
    id v13 = [v12 DSID];
    char v14 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v13 longLongValue]);
  }
  else
  {
    char v14 = 0;
  }

  long long v32 = _NSConcreteStackBlock;
  uint64_t v33 = 3221225472;
  unint64_t v34 = sub_10002480C;
  id v35 = &unk_1002D3A70;
  int8x16_t v31 = *(int8x16_t *)(a1 + 32);
  id v15 = (id)v31.i64[0];
  int8x16_t v36 = vextq_s8(v31, v31, 8uLL);
  +[GKDispatchGroup waitUntilDone:&v32];
  uint64_t v16 = [*(id *)(a1 + 32) error];

  if (!v16)
  {
    if (!os_log_GKGeneral) {
      id v17 = (id)GKOSLoggers();
    }
    id v18 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v38 = v9;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "telling authkit DSID %@ is no longer in use", buf, 0xCu);
    }
    id v19 = objc_alloc_init((Class)AKAppleIDAuthenticationController);
    if (v9)
    {
      if (!os_log_GKGeneral) {
        id v20 = (id)GKOSLoggers();
      }
      long long v21 = os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v38 = v9;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "GKAuth:telling authkit account is not in use using altDSID:%@", buf, 0xCu);
      }
      [v19 setAppleIDWithAltDSID:v9 inUse:0 forService:6 *(_OWORD *)&v31 v32 v33 v34 v35];
    }
    else if (v14)
    {
      if (!os_log_GKGeneral) {
        id v22 = (id)GKOSLoggers();
      }
      long long v23 = os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v38 = v14;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "GKAuth:telling authkit account is not in use using DSID:%@", buf, 0xCu);
      }
      [v19 setAppleIDWithDSID:v14 inUse:0 forService:6 *(_OWORD *)&v31 v32 v33 v34 v35];
    }
    [*(id *)(a1 + 40) notifyWidgetPlayerAuthenticationUpdated:*(_OWORD *)&v31];
  }
  long long v24 = +[GKContactsIntegrationController sharedController];
  [v24 clearCachesWithCompletionHandler:&stru_1002D3F68];

  long long v25 = [*(id *)(a1 + 40) localPlayer];
  long long v26 = [v25 playerID];
  +[GKClientProxy removeCacheForPlayerID:v26];

  long long v27 = [(id)objc_opt_class() standardUserDefaults];
  [v27 removeObjectForKey:@"GKLastPushTokenPlayerID"];
  [v27 removeObjectForKey:@"GKLastPushTokenEnvironment"];
  [v27 removeObjectForKey:@"GKLastPushTokenKey"];
  [v27 removeObjectForKey:@"GKLastPushTokenDateKey"];
  if (*(unsigned char *)(a1 + 56)) {
    [v27 setBool:1 forKey:GKOptedOutOfGameCenter];
  }
  else {
    [v27 removeObjectForKey:GKOptedOutOfGameCenter];
  }
  [v27 synchronize];
  long long v28 = +[GKBadgeController sharedController];
  [v28 unbadgeAllApplications];

  id v29 = +[GKReporter reporter];
  [v29 reportEvent:GKReporterDomainLogin type:GKLoginSignOut];

  long long v30 = [*(id *)(a1 + 40) ampController];
  [v30 updateMetadataWithLocalPlayer:0];

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10002480C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[GKPlayerCredentialController sharedController];
  id v5 = [*(id *)(a1 + 32) credential];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000248F4;
  v9[3] = &unk_1002D3DD0;
  id v6 = *(id *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 32);
  id v10 = v6;
  uint64_t v11 = v7;
  id v12 = v3;
  id v8 = v3;
  [v4 removeCredential:v5 completionHandler:v9];
}

void sub_1000248F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) setError:v3];
  if (!os_log_GKGeneral) {
    id v4 = (id)GKOSLoggers();
  }
  id v5 = (void *)os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    id v6 = v5;
    v9[0] = 67109120;
    v9[1] = [v3 code];
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "GKAccountService signOutPlayerWithOptOut: removeCred (error:%d)", (uint8_t *)v9, 8u);
  }
  [*(id *)(a1 + 40) setCredential:0];
  if (!os_log_GKGeneral) {
    id v7 = (id)GKOSLoggers();
  }
  id v8 = (void *)os_log_GKAccount;
  if (os_log_type_enabled(os_log_GKAccount, OS_LOG_TYPE_DEBUG)) {
    sub_100034F44(v8);
  }
  +[GKClientProxy authenticationDidChange];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_100024A50(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (!os_log_GKGeneral) {
    id v3 = (id)GKOSLoggers();
  }
  if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG)) {
    sub_100034FDC();
  }
}

void sub_100024ABC(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers();
  }
  id v3 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "GKAccountService signOutPlayerWithOptOut: notify", v6, 2u);
  }
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);
}

void sub_100024F10(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = a2;
  id v5 = [v3 credential];
  id v6 = [v5 playerInternal];
  id v7 = [v6 playerID];
  unint64_t v8 = +[GKAccountServicePrivate lastWelcomeWhatsNewCopyVersionDisplayedForPlayerID:v7];

  if (!os_log_GKGeneral) {
    id v9 = (id)GKOSLoggers();
  }
  id v10 = (void *)os_log_GKOnboarding;
  if (os_log_type_enabled(os_log_GKOnboarding, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = v10;
    id v12 = +[NSNumber numberWithUnsignedInteger:v8];
    int v14 = 138412290;
    id v15 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "getLastWelcomeWhatsNewCopyVersionDisplayedForSignedInPlayerWithHandler: WhatsNew copy version displayed: %@", (uint8_t *)&v14, 0xCu);
  }
  id v13 = +[NSNumber numberWithUnsignedInteger:v8];
  [*(id *)(a1 + 40) setResult:v13];

  [*(id *)(a1 + 40) setError:0];
  v4[2](v4);
}

void sub_1000250A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v5 = [*(id *)(a1 + 32) result];
  id v3 = [v5 unsignedIntegerValue];
  uint64_t v4 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v3, v4);
}

void sub_100025614(id a1)
{
  if (!os_log_GKGeneral) {
    id v1 = (id)GKOSLoggers();
  }
  if (os_log_type_enabled(os_log_GKAccount, OS_LOG_TYPE_DEBUG)) {
    sub_100035010();
  }
}

void sub_10002580C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = a2;
  id v5 = [v3 credential];
  id v6 = [v5 playerInternal];
  id v7 = [v6 playerID];
  unint64_t v8 = +[GKAccountServicePrivate lastPrivacyNoticeVersionDisplayedForPlayerID:v7];

  if (!os_log_GKGeneral) {
    id v9 = (id)GKOSLoggers();
  }
  id v10 = (void *)os_log_GKOnboarding;
  if (os_log_type_enabled(os_log_GKOnboarding, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = v10;
    id v12 = +[NSNumber numberWithUnsignedInteger:v8];
    int v14 = 138412290;
    id v15 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "getLastPrivacyNoticeVersionDisplayedForSignedInPlayerWithHandler: Privacy notice version displayed: %@", (uint8_t *)&v14, 0xCu);
  }
  id v13 = +[NSNumber numberWithUnsignedInteger:v8];
  [*(id *)(a1 + 40) setResult:v13];

  [*(id *)(a1 + 40) setError:0];
  v4[2](v4);
}

void sub_1000259A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v5 = [*(id *)(a1 + 32) result];
  id v3 = [v5 unsignedIntegerValue];
  uint64_t v4 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v3, v4);
}

void sub_100025DAC(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = a2;
  id v5 = [v3 credential];
  id v6 = [v5 playerInternal];
  id v7 = [v6 playerID];
  unint64_t v8 = +[GKAccountServicePrivate lastPersonalizationVersionDisplayedForPlayerID:v7];

  if (!os_log_GKGeneral) {
    id v9 = (id)GKOSLoggers();
  }
  id v10 = os_log_GKOnboarding;
  if (os_log_type_enabled(os_log_GKOnboarding, OS_LOG_TYPE_INFO))
  {
    int v11 = 138412290;
    id v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "getLastPersonalizationVersionDisplayedForSignedInPlayerWithHandler: personalization version displayed: %@", (uint8_t *)&v11, 0xCu);
  }
  [*(id *)(a1 + 40) setResult:v8];
  [*(id *)(a1 + 40) setError:0];
  v4[2](v4);
}

void sub_100025F08(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_100026118(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 credential];
  id v6 = [v5 playerInternal];
  id v7 = [v6 playerID];
  unint64_t v8 = +[GKAccountServicePrivate lastProfilePrivacyVersionDisplayedForPlayerID:v7];

  if (!os_log_GKGeneral) {
    id v9 = (id)GKOSLoggers();
  }
  id v10 = os_log_GKOnboarding;
  if (os_log_type_enabled(os_log_GKOnboarding, OS_LOG_TYPE_INFO))
  {
    int v11 = 138412290;
    id v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "getLastProfilePrivacyVersionDisplayedForSignedInPlayerWithHandler: profile privacy version displayed: %@", (uint8_t *)&v11, 0xCu);
  }
  [*(id *)(a1 + 40) setResult:v8];
  [*(id *)(a1 + 40) setError:0];
  v4[2](v4);
}

void sub_100026274(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_10002666C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 credential];
  id v6 = [v5 playerInternal];
  id v7 = [v6 playerID];
  unint64_t v8 = +[GKAccountServicePrivate lastFriendSuggestionsVersionDisplayedForPlayerID:v7];

  if (!os_log_GKGeneral) {
    id v9 = (id)GKOSLoggers();
  }
  id v10 = os_log_GKOnboarding;
  if (os_log_type_enabled(os_log_GKOnboarding, OS_LOG_TYPE_INFO))
  {
    int v11 = 138412290;
    id v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "getLastFriendSuggestionsVersionDisplayedForSignedInPlayerWithHandler: profile privacy version displayed: %@", (uint8_t *)&v11, 0xCu);
  }
  [*(id *)(a1 + 40) setResult:v8];
  [*(id *)(a1 + 40) setError:0];
  v4[2](v4);
}

void sub_1000267C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_100026BC0(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 credential];
  id v6 = [v5 playerInternal];
  id v7 = [v6 playerID];
  unint64_t v8 = +[GKAccountServicePrivate lastContactsIntegrationConsentVersionDisplayedForPlayerID:v7];

  if (!os_log_GKGeneral) {
    id v9 = (id)GKOSLoggers();
  }
  id v10 = os_log_GKOnboarding;
  if (os_log_type_enabled(os_log_GKOnboarding, OS_LOG_TYPE_INFO))
  {
    int v11 = 138412290;
    id v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "getLastContactsIntegrationConsentVersionDisplayedForSignedInPlayerWithHandler: Contacts Integration Consent version displayed: %@", (uint8_t *)&v11, 0xCu);
  }
  [*(id *)(a1 + 40) setResult:v8];
  [*(id *)(a1 + 40) setError:0];
  v4[2](v4);
}

void sub_100026D1C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

uint64_t sub_100027A4C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_100027C18(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100027CD8;
  v7[3] = &unk_1002D4000;
  id v4 = *(id *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v8 = v4;
  uint64_t v9 = v5;
  id v10 = v3;
  id v6 = v3;
  +[GKCloudKitMultiplayer primaryPlayerWithHandler:v7];
}

void sub_100027CD8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!os_log_GKGeneral) {
    id v7 = (id)GKOSLoggers();
  }
  if (os_log_type_enabled(os_log_GKAccount, OS_LOG_TYPE_DEBUG))
  {
    sub_100035114();
    if (!v5) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (v5)
  {
LABEL_5:
    id v8 = [*(id *)(a1 + 40) clientProxy];
    uint64_t v9 = [v8 bundleIdentifier];
    id v10 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", +[GKCloudKitMultiplayerUtils isCloudDriveEnabledForBundleID:v9]);
    [*(id *)(a1 + 32) setResult:v10];
  }
LABEL_6:
  [*(id *)(a1 + 32) setError:v6];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_100027E00(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v5 = [*(id *)(a1 + 32) result];
  id v3 = [v5 BOOLValue];
  id v4 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v3, v4);
}

void sub_1000280D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[GKService serviceFromService:*(void *)(a1 + 32)];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100028188;
  v6[3] = &unk_1002D4028;
  id v7 = v3;
  id v5 = v3;
  [v4 getCountOfChallengesWithHandler:v6];
}

uint64_t sub_100028188(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100028198(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = [*(id *)(a1 + 32) clientProxy];
  id v6 = [v5 bundleIdentifier];
  id v7 = [*(id *)(a1 + 40) context];
  id v8 = +[GKGameCacheObject gameForBundleID:v6 context:v7];

  if ([v8 supportsTurnBasedMultiplayer])
  {
    uint64_t v9 = +[GKNetworkRequestManager commonNetworkRequestManager];
    id v10 = [*(id *)(a1 + 32) clientProxy];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1000282F4;
    v11[3] = &unk_1002D3F48;
    id v12 = v4;
    [v9 issueRequest:0 bagKey:@"gk-tb-get-turn-counts" clientProxy:v10 handler:v11];
  }
  else
  {
    v4[2](v4);
  }
}

uint64_t sub_1000282F4(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2 && !a3)
  {
    uint64_t v13 = a1;
    [a2 objectForKey:@"turn-counts"];
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue();
    id v3 = [obj countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v3)
    {
      id v4 = v3;
      uint64_t v5 = *(void *)v16;
      do
      {
        for (unint64_t i = 0; i != v4; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v16 != v5) {
            objc_enumerationMutation(obj);
          }
          id v7 = *(void **)(*((void *)&v15 + 1) + 8 * i);
          id v8 = [v7 objectForKey:@"turn-count"];
          uint64_t v9 = [v7 objectForKey:@"game-descriptor"];
          id v10 = [v9 objectForKey:@"bundle-id"];
          if (v10)
          {
            int v11 = +[GKBadgeController sharedController];
            [v11 setBadgeCount:[v8 unsignedIntegerValue] forBundleID:v10 badgeType:2];
          }
        }
        id v4 = [obj countByEnumeratingWithState:&v15 objects:v19 count:16];
      }
      while (v4);
    }

    a1 = v13;
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000284B0(uint64_t a1)
{
  id v3 = +[GKBadgeController sharedController];
  [v3 badgeAllApplications];
  uint64_t v2 = [*(id *)(a1 + 32) bundleIdentifier];
  [v3 registerBadgePermissionForBundleID:v2 completionHandler:&stru_1002D40B8];
}

void sub_1000286CC(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers();
  }
  id v3 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "GKAccountService _authenticateUsername", buf, 2u);
  }
  if (!os_log_GKGeneral) {
    id v4 = (id)GKOSLoggers();
  }
  uint64_t v5 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v35 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "_authenticateUsername:%@", buf, 0xCu);
  }
  id v7 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKAccountService.m", 864, "-[GKAccountServicePrivate _authenticateUsername:password:altDSID:validateOnly:handler:]_block_invoke");
  id v8 = +[GKDispatchGroup dispatchGroupWithName:v7];

  uint64_t v9 = +[NSError userErrorForServerCode:5000 reason:0];
  [v8 setError:v9];

  uint64_t v10 = *(void *)(a1 + 32);
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 40);
    if (v11)
    {
      if (*(void *)(a1 + 48)) {
        uint64_t v10 = *(void *)(a1 + 48);
      }
      v32[0] = @"username";
      v32[1] = @"password";
      v33[0] = v10;
      v33[1] = v11;
      v32[2] = @"validatePasswordOnly";
      id v12 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 72)];
      v33[2] = v12;
      v32[3] = @"udid";
      uint64_t v13 = +[GKDevice currentDevice];
      int v14 = [v13 udid];
      v33[3] = v14;
      long long v15 = +[NSDictionary dictionaryWithObjects:v33 forKeys:v32 count:4];

      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472;
      v26[2] = sub_100028B34;
      v26[3] = &unk_1002D4158;
      v26[4] = *(void *)(a1 + 56);
      id v27 = v15;
      id v28 = v8;
      id v29 = *(id *)(a1 + 32);
      id v30 = *(id *)(a1 + 48);
      char v31 = *(unsigned char *)(a1 + 72);
      id v16 = v15;
      [v28 perform:v26];
    }
  }
  if (*(void *)(a1 + 64))
  {
    if (!os_log_GKGeneral) {
      id v17 = (id)GKOSLoggers();
    }
    long long v18 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "_authenticateUsername: notify", buf, 2u);
    }
    if (!os_log_GKGeneral) {
      id v19 = (id)GKOSLoggers();
    }
    id v20 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "_authenticateUsername: notify", buf, 2u);
    }
    long long v21 = [*(id *)(a1 + 56) clientProxy];
    id v22 = [v21 replyQueue];
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    uint64_t v23[2] = sub_100029570;
    v23[3] = &unk_1002D3930;
    id v25 = *(id *)(a1 + 64);
    id v24 = v8;
    [v24 notifyOnQueue:v22 block:v23];
  }
}

void sub_100028B34(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) transport];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_100028C3C;
  v9[3] = &unk_1002D4130;
  uint64_t v5 = *(void *)(a1 + 40);
  id v10 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 56);
  id v6 = *(id *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 32);
  id v12 = v6;
  uint64_t v13 = v7;
  char v15 = *(unsigned char *)(a1 + 72);
  id v14 = v3;
  id v8 = v3;
  [v4 postRequest:v5 forBagKey:@"gk-authenticate-user" response:v9];
}

void sub_100028C3C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100035184();
    }
  }
  [*(id *)(a1 + 32) setError:v6];
  id v8 = [v5 representedItem];
  if (v8)
  {
    if (!os_log_GKGeneral) {
      id v9 = (id)GKOSLoggers();
    }
    id v10 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "_authenticateUsername:Result present for post request call for gk-authenticate-user", buf, 2u);
    }
    id v11 = [v8 objectForKey:GKRequestStatusKey];
    id v12 = [v11 integerValue];

    uint64_t v13 = [v8 objectForKey:GKPlayerIDKey];
    id v14 = [v8 objectForKey:@"alias"];
    uint64_t v15 = [v8 objectForKey:@"auth-token"];
    id v16 = (void *)v15;
    id v35 = v12;
    if (v13 && v15)
    {
      id v33 = v5;
      long long v32 = +[GKPlayerCredentialController sharedController];
      id v17 = +[GKPlayerCredential internalRepresentation];
      +[GKLocalPlayerInternal internalRepresentation];
      v19 = long long v18 = v14;
      [v19 setPlayerID:v13];
      [v19 setAccountName:*(void *)(a1 + 40)];
      unint64_t v34 = v18;
      [v19 setAlias:v18];
      if (*(void *)(a1 + 48)) {
        [v17 setAltDSID:];
      }
      +[GKContactsIntegrationUserSettings applySettingsToObject:v19 fromResults:v8];
      [v17 setPlayerInternal:v19];
      [v17 setAuthenticationToken:v16];
      [v17 setAccountName:*(void *)(a1 + 40)];
      id v20 = [*(id *)(a1 + 56) clientProxy];
      [v17 setEnvironment:[v20 environment]];

      if (v12 == (id)5029) {
        uint64_t v21 = 12;
      }
      else {
        uint64_t v21 = 14;
      }
      [v17 setScope:v21];
      id v22 = +[GKService serviceFromService:*(void *)(a1 + 56)];
      long long v23 = [v22 credential];
      [v23 setAuthenticationToken:v16];

      id v24 = *(void **)(a1 + 32);
      v36[0] = _NSConcreteStackBlock;
      v36[1] = 3221225472;
      v36[2] = sub_1000290FC;
      v36[3] = &unk_1002D3980;
      id v37 = v17;
      id v38 = v32;
      id v39 = v24;
      id v25 = v32;
      id v26 = v17;
      [v24 perform:v36];
      [*(id *)(a1 + 56) notifyWidgetPlayerAuthenticationUpdated];
      [*(id *)(a1 + 32) setObject:v26 forKeyedSubscript:@"credential"];

      id v5 = v33;
    }
    else
    {
      id v29 = [*(id *)(a1 + 32) error];

      if (v29) {
        goto LABEL_30;
      }
      if (!os_log_GKGeneral) {
        id v30 = (id)GKOSLoggers();
      }
      unint64_t v34 = v14;
      char v31 = os_log_GKTrace;
      if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "_authenticateUsername:Server Error when posting request for gk-authenticat-user", buf, 2u);
      }
      id v19 = +[NSError userErrorForServerCode:3 reason:@"no error, but missing playerID or token"];
      [*(id *)(a1 + 32) setError:v19];
    }

    id v14 = v34;
LABEL_30:
    if (*(unsigned char *)(a1 + 72) && v35 == (id)5029) {
      [*(id *)(a1 + 32) setError:0];
    }

    goto LABEL_34;
  }
  if (!os_log_GKGeneral) {
    id v27 = (id)GKOSLoggers();
  }
  id v28 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "_authenticateUsername:No result for Post request call", buf, 2u);
  }
LABEL_34:
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_1000290FC(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = [a1[4] altDSID];

  if (v4)
  {
    id v6 = a1[4];
    id v5 = a1[5];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    void v17[2] = sub_100029524;
    v17[3] = &unk_1002D3BC8;
    id v7 = &v18;
    id v8 = &v19;
    id v18 = a1[6];
    id v19 = v3;
    id v9 = v3;
    [v5 setPrimaryCredential:v6 completionHandler:v17];
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v10 = (id)GKOSLoggers();
    }
    id v11 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      id v12 = a1[4];
      *(_DWORD *)buf = 138412290;
      id v26 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "missing altDSID for credential:%@ will try to get it from IDMS", buf, 0xCu);
    }
    id v13 = a1[4];
    id v14 = a1[5];
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_100029310;
    v20[3] = &unk_1002D4108;
    id v7 = &v21;
    id v15 = v13;
    id v21 = v15;
    id v8 = &v22;
    id v22 = a1[5];
    id v23 = a1[6];
    id v24 = v3;
    id v16 = v3;
    [v14 getAltDSIDFromIDMSForCredential:v15 completionHandler:v20];
  }
}

void sub_100029310(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6) {
    goto LABEL_5;
  }
  if (!os_log_GKGeneral) {
    id v7 = (id)GKOSLoggers();
  }
  if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
  {
    sub_1000351EC();
    if (!v5) {
      goto LABEL_11;
    }
  }
  else
  {
LABEL_5:
    if (!v5) {
      goto LABEL_11;
    }
  }
  if (!os_log_GKGeneral) {
    id v8 = (id)GKOSLoggers();
  }
  id v9 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v17 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "fixed the credential (%@) with a missing altDSID", buf, 0xCu);
  }
  [*(id *)(a1 + 32) setAltDSID:v5];
LABEL_11:
  uint64_t v12 = *(void *)(a1 + 32);
  id v11 = *(void **)(a1 + 40);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1000294D8;
  void v13[3] = &unk_1002D3BC8;
  id v14 = *(id *)(a1 + 48);
  id v15 = *(id *)(a1 + 56);
  [v11 setPrimaryCredential:v12 completionHandler:v13];
}

uint64_t sub_1000294D8(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) setError:a2];
  }
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

uint64_t sub_100029524(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) setError:a2];
  }
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_100029570(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"credential"];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_1000296B0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) authenticationToken];
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0);
}

void sub_1000298AC(uint64_t a1)
{
  uint64_t v26 = 0;
  id v27 = &v26;
  uint64_t v28 = 0x3032000000;
  id v29 = sub_100029C60;
  id v30 = sub_100029C70;
  id v31 = +[GKAuthenticateResponse internalRepresentation];
  id v2 = [*(id *)(a1 + 32) credential];
  id v3 = [v2 playerInternal];
  id v4 = [v3 playerID];
  [(id)v27[5] setPlayerID:v4];

  id v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKAccountService.m", 1190, "-[GKAccountServicePrivate _constructAuthenticationResponseWithError:handler:]_block_invoke");
  id v6 = +[GKDispatchGroup dispatchGroupWithName:v5];

  [v6 setError:*(void *)(a1 + 40)];
  id v7 = *(void **)(a1 + 40);
  if (v7)
  {
    id v8 = [v7 userInfo];
    id v9 = [v8 objectForKey:GKServerStatusCode];

    if (v9 && [v9 integerValue] == (id)5047)
    {
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472;
      uint64_t v23[2] = sub_100029C78;
      v23[3] = &unk_1002D41D0;
      void v23[4] = *(void *)(a1 + 32);
      id v24 = v6;
      id v25 = &v26;
      [v24 perform:v23];
    }
  }
  uint64_t v10 = [*(id *)(a1 + 32) credential];

  if (!v10)
  {
    if (!os_log_GKGeneral) {
      id v11 = (id)GKOSLoggers();
    }
    uint64_t v12 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "_constructAuthenticationResponseWithError: no credential -- clearing appInit state", buf, 2u);
    }
    id v13 = [*(id *)(a1 + 32) clientProxy];
    [v13 setAppInitState:@"GKAppInitUnknown"];
  }
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_100029E30;
  v21[3] = &unk_1002D4220;
  v21[4] = *(void *)(a1 + 32);
  v21[5] = &v26;
  [v6 perform:v21];
  id v14 = [*(id *)(a1 + 32) clientProxy];
  id v15 = [v14 replyQueue];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  void v17[2] = sub_100029F50;
  v17[3] = &unk_1002D4248;
  id v19 = *(id *)(a1 + 48);
  id v20 = &v26;
  id v16 = v6;
  id v18 = v16;
  [v16 notifyOnQueue:v15 block:v17];

  _Block_object_dispose(&v26, 8);
}

void sub_100029C3C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100029C60(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100029C70(uint64_t a1)
{
}

void sub_100029C78(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) transport];
  id v5 = [v4 storeBag];
  id v6 = [*(id *)(a1 + 32) clientProxy];
  id v7 = [v6 replyQueue];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100029D8C;
  v11[3] = &unk_1002D41A8;
  id v8 = *(id *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  id v13 = v3;
  uint64_t v14 = v9;
  id v12 = v8;
  id v10 = v3;
  [v5 getURLForKey:@"ds-password-change-url" queue:v7 handler:v11];
}

void sub_100029D8C(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (v5) {
    [*(id *)(a1 + 32) setError:v5];
  }
  if (v6)
  {
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) setPasswordChangeURL:v6];
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) setPasswordChangeRequired:1];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100029E30(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100029EC8;
  v7[3] = &unk_1002D41F8;
  id v5 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v8 = v3;
  uint64_t v9 = v4;
  id v6 = v3;
  [v5 _fetchLoginDisabledWithHandler:v7];
}

uint64_t sub_100029EC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setLoginDisabled:a2];
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setSuppressLoginSheet:a3];
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setLoginBannerDisabled:a4];
  id v7 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v7();
}

void sub_100029F50(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, uint64_t, id))(v1 + 16))(v1, v2, v3);
}

id sub_10002A10C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [a2 bundleID];
  id v4 = [v2 isEqualToString:v3];

  return v4;
}

id sub_10002A2B4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [a2 gameRecord];
  id v4 = [v3 game];
  id v5 = [v4 bundleID];
  id v6 = [v2 isEqualToString:v5];

  return v6;
}

void sub_10002A770(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = [a2 objectForKey:@"auth-token"];
  id v7 = os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    id v8 = (id)GKOSLoggers();
    id v7 = os_log_GKGeneral;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    sub_1000352BC();
    if (v6) {
      goto LABEL_5;
    }
  }
  else if (v6)
  {
LABEL_5:
    uint64_t v9 = +[GKPlayerCredentialController sharedController];
    id v10 = [*(id *)(a1 + 32) credential];
    [v10 setAuthenticationToken:v6];
    [v10 setScope:[v10 scope] | 2];
    [v9 setCredential:v10 completionHandler:&stru_1002D42B8];

    goto LABEL_11;
  }
  if (!os_log_GKGeneral) {
    id v11 = (id)GKOSLoggers();
  }
  if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
    sub_100035254();
  }
LABEL_11:
}

void sub_10002A8B8(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    if (!os_log_GKGeneral) {
      id v3 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100035330();
    }
  }
}

void sub_10002ABC8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10002ABE8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v5 = [*(id *)(a1 + 40) credential];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10002ACE4;
  v11[3] = &unk_1002D4350;
  id v6 = *(id *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 64);
  id v12 = v6;
  uint64_t v17 = v7;
  id v8 = *(id *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  id v13 = v8;
  uint64_t v14 = v9;
  id v15 = *(id *)(a1 + 56);
  id v16 = v3;
  id v10 = v3;
  [v4 initializeWithCredential:v5 completionHandler:v11];
}

void sub_10002ACE4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = [v5 representedItem];
  [*(id *)(a1 + 32) setError:v6];
  id v8 = [v6 code];

  if (v8 != (id)15)
  {
    uint64_t v9 = [v7 objectForKey:@"status"];
    *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = [v9 integerValue];

    id v10 = [*(id *)(a1 + 32) context];
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_10002AEC8;
    v19[3] = &unk_1002D4328;
    id v20 = *(id *)(a1 + 40);
    id v21 = *(id *)(a1 + 32);
    id v11 = v7;
    id v22 = v11;
    id v12 = v5;
    uint64_t v13 = *(void *)(a1 + 48);
    id v23 = v12;
    uint64_t v24 = v13;
    [v10 performBlockAndWait:v19];

    uint64_t v14 = *(void **)(a1 + 56);
    id v15 = [*(id *)(a1 + 48) clientProxy];
    id v16 = [v15 replyQueue];
    [v14 sendPushTokenWithReplyQueue:v16];

    if (v11)
    {
      uint64_t v17 = [v11 objectForKey:@"renew-auth-token"];
      unsigned int v18 = [v17 BOOLValue];

      if (v18) {
        [*(id *)(a1 + 48) renewAuthToken];
      }
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_10002AEC8(id *a1)
{
  unsigned __int8 v2 = [a1[4] isGameCenter];
  id v41 = [a1[4] bundleIdentifier];
  id v3 = [a1[5] context];
  id v4 = +[GKGameCacheObject gameForBundleID:v41 context:v3];

  id v5 = v4;
  if (a1[6])
  {
    [a1[7] TTL];
    if (v6 == 0.0)
    {
      uint64_t v7 = 0;
    }
    else
    {
      [a1[7] TTL];
      uint64_t v7 = +[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:");
    }
    id v8 = [a1[6] objectForKey:@"game-metadata"];
    [v5 updateWithServerRepresentation:v8 expirationDate:v7];
  }
  uint64_t v9 = [v5 name];

  if (!v9)
  {
    id v10 = [a1[8] clientProxy];
    id v11 = +[NSBundle _gkBundleWithPID:](NSBundle, "_gkBundleWithPID:", [v10 pid]);
    id v12 = [v11 _gkLocalizedName];
    [v5 setName:v12];
  }
  id v13 = a1[8];
  uint64_t v14 = [a1[5] context];
  [v13 _syncPlayerOnboardingParametersInManagedObjectContext:v14 withServerResult:a1[7]];

  id v15 = [a1[5] context];
  id v16 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:v15];

  uint64_t v17 = [a1[7] representedItem];
  +[GKContactsIntegrationUserSettings applySettingsToObject:v16 fromResults:v17];

  unsigned int v18 = +[GKPlayerCredentialController sharedController];
  id v19 = [v16 contactsAssociationID];
  id v20 = [v16 contactsIntegrationConsent];
  id v21 = [v16 serviceLastUpdatedTimestamp];
  id v22 = [a1[8] clientProxy];
  [v18 setContactAssociationID:v19 contactIntegrationConsent:v20 serviceLastUpdateTimestamp:v21 forEnvironment:[v22 environment] forcefully:0 completionHandler:&stru_1002D4300];

  if (v2)
  {
    id v23 = a1[8];
    uint64_t v24 = [a1[5] context];
    [v23 _postLaunchEventsForGame:v5 moc:v24];
    id v25 = v5;
  }
  else
  {
    uint64_t v24 = [a1[6] objectForKey:@"game-metadata"];
    uint64_t v26 = [v24 objectForKeyedSubscript:@"bundle-id"];
    id v27 = [a1[5] context];
    uint64_t v28 = [v16 playerID];
    +[GKCachingUtils ensureGameInGamesPlayed:v27 playerID:v28 bundleID:v26 gameDescriptor:v24 updateWidget:0];

    id v29 = [v5 bundleID];
    [v16 setLastPlayedGame:v29];

    id v30 = +[NSDate date];
    [v16 setLastPlayedDate:v30];

    id v31 = +[GKGameRecordCacheObject recordForGame:v5 playerProfile:v16];
    long long v32 = [v16 lastPlayedDate];
    [v31 setLastPlayedDate:v32];

    if (a1[6]) {
      [v31 updateWithServerRepresentation:];
    }
    id v25 = v31;

    id v33 = +[GKService serviceFromService:a1[8]];
    [v33 setOcelotStateForCurrentApp];
    id v34 = a1[8];
    id v35 = [a1[5] context];
    [v34 _addGameListEntryForGame:v5 profile:v16 moc:v35];

    id v36 = a1[8];
    id v37 = [a1[5] context];
    [v36 _addAchievementPointsEntryForGame:v5 record:v25 profile:v16 moc:v37];

    id v38 = a1[8];
    id v39 = [a1[5] context];
    [v38 _postLaunchEventsForGame:v5 moc:v39];
  }
  uint64_t v40 = [v25 internalRepresentation];
  [a1[5] setResult:v40];
}

void sub_10002B384(id a1, NSError *a2)
{
  unsigned __int8 v2 = a2;
  if (!os_log_GKGeneral) {
    id v3 = (id)GKOSLoggers();
  }
  if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG)) {
    sub_100035398();
  }
}

void sub_10002B3F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *, void))(v2 + 16))(v2, v4, v3, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24));
}

void sub_10002BA38(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = +[GKService serviceFromService:*(void *)(a1 + 32)];
    [v3 setPrivacyNoticeVersion:a2 withCompletionHandler:&stru_1002D43C0];
  }
}

void sub_10002BD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002BD30(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  id v3 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:*(void *)(a1 + 40)];
  unsigned int v4 = [v3 isValid];
  **(unsigned char **)(a1 + 64) = v4;
  if (v4)
  {
    uint64_t v5 = [v3 internalRepresentation];
    uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;
  }
  else
  {
    uint64_t v8 = +[GKLocalPlayerInternal archivedProfile];
    uint64_t v9 = a1 + 56;
    uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8);
    id v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v8;

    id v12 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) accountName];
    unsigned int v13 = [v12 isEqual:*(void *)(a1 + 32)];

    if (v13)
    {
      if (!os_log_GKGeneral) {
        id v14 = (id)GKOSLoggers();
      }
      id v15 = (void *)os_log_GKCache;
      if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
        sub_10003540C(v9, v15);
      }
    }
    else
    {
      if (!os_log_GKGeneral) {
        id v16 = (id)GKOSLoggers();
      }
      uint64_t v17 = (void *)os_log_GKCache;
      if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
        sub_100035550(a1 + 56, v17);
      }
      unsigned int v18 = [*(id *)(a1 + 48) credential];
      id v19 = [v18 playerInternal];

      uint64_t v20 = +[GKLocalPlayerInternal internalRepresentation];
      uint64_t v21 = *(void *)(*(void *)(a1 + 56) + 8);
      id v22 = *(void **)(v21 + 40);
      *(void *)(v21 + 40) = v20;

      [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setAccountName:v2];
      id v23 = [v19 alias];
      [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setAlias:v23];

      uint64_t v24 = [v19 playerID];
      [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setPlayerID:v24];

      if (!os_log_GKGeneral) {
        id v25 = (id)GKOSLoggers();
      }
      uint64_t v26 = (void *)os_log_GKCache;
      if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
        sub_1000354B4(v9, v26);
      }
    }
  }
}

void sub_10002C0CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_10002C174;
  v6[3] = &unk_1002D4438;
  uint64_t v8 = *(void *)(a1 + 40);
  id v7 = v3;
  id v5 = v3;
  [v4 getFriendIDsForPlayer:0 commonFriends:0 handler:v6];
}

void sub_10002C174(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!os_log_GKGeneral) {
    id v7 = (id)GKOSLoggers();
  }
  uint64_t v8 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG)) {
    sub_1000355EC(v8);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10002C370(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && (uint64_t v3 = *(void *)(a1 + 40)) != 0)
  {
    unsigned int v4 = *(void **)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 56);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_10002C4F0;
    void v12[3] = &unk_1002D4488;
    id v13 = *(id *)(a1 + 64);
    [v4 _authenticateUsername:v2 password:v3 altDSID:v5 validateOnly:0 handler:v12];
    id v6 = v13;
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers();
    }
    uint64_t v8 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "_fetchCredentialsForUsername: no username or password; attempt to grab credentials",
        v11,
        2u);
    }
    uint64_t v9 = +[GKPlayerCredentialController sharedController];
    uint64_t v10 = [*(id *)(a1 + 48) clientProxy];
    id v6 = [v9 primaryCredentialForEnvironment:[v10 environment]];

    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
}

void sub_10002C4F0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers();
    }
    uint64_t v9 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = v9;
      id v11 = [v5 altDSID];
      int v23 = 138412290;
      uint64_t v24 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "telling authkit altDSID %@ is in use", (uint8_t *)&v23, 0xCu);
    }
    id v12 = objc_alloc_init((Class)AKAppleIDAuthenticationController);
    id v13 = [v5 altDSID];

    if (v13)
    {
      if (!os_log_GKGeneral) {
        id v14 = (id)GKOSLoggers();
      }
      id v15 = (void *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        id v16 = v15;
        uint64_t v17 = [v5 altDSID];
        int v23 = 138412290;
        uint64_t v24 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "GKAuth:telling authkit account is in use using altDSID:%@", (uint8_t *)&v23, 0xCu);
      }
      unsigned int v18 = [v5 altDSID];
      [v12 setAppleIDWithAltDSID:v18 inUse:1 forService:6];
    }
    else
    {
      id v19 = [v5 DSID];

      if (!v19)
      {
LABEL_23:

        goto LABEL_24;
      }
      uint64_t v20 = [v5 DSID];
      unsigned int v18 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v20 longLongValue]);

      if (!os_log_GKGeneral) {
        id v21 = (id)GKOSLoggers();
      }
      id v22 = os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        int v23 = 138412290;
        uint64_t v24 = v18;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "GKAuth:telling authkit account is in use using DSID:%@", (uint8_t *)&v23, 0xCu);
      }
      [v12 setAppleIDWithDSID:v18 inUse:1 forService:6];
    }

    goto LABEL_23;
  }
  if (!os_log_GKGeneral) {
    id v7 = (id)GKOSLoggers();
  }
  if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
    sub_100035684();
  }
LABEL_24:
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10002C8AC(uint64_t a1)
{
  id v1 = +[GKService serviceFromService:*(void *)(a1 + 32)];
  [v1 getGamesForPlayer:0 includeInstalled:1 handler:&stru_1002D44C8];
}

void sub_10002C90C(id a1, NSArray *a2, NSString *a3, NSError *a4)
{
  id v6 = a2;
  id v7 = a3;
  id v8 = a4;
  if (v8)
  {
    if (!os_log_GKGeneral) {
      id v9 = (id)GKOSLoggers();
    }
    uint64_t v10 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      int v15 = 138412290;
      id v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Could not preload stats for the current player due to:%@", (uint8_t *)&v15, 0xCu);
    }
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v11 = (id)GKOSLoggers();
    }
    id v12 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      id v13 = v12;
      id v14 = +[NSNumber numberWithUnsignedInteger:[(NSArray *)v6 count]];
      int v15 = 138412290;
      id v16 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "preloaded stats for %@ games for the current player", (uint8_t *)&v15, 0xCu);
    }
  }
}

void sub_10002CCB0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) clientProxy];
  uint64_t v3 = *(unsigned __int8 *)(a1 + 72);
  unsigned int v4 = [*(id *)(a1 + 32) clientProxy];
  [v4 setIsGameCenterEnabledClient:v3];

  if (*(void *)(a1 + 40) && *(void *)(a1 + 48))
  {
    id v5 = +[GKPlayerCredentialController sharedController];
    id v6 = [v5 signInVisibilityManager];
    [v6 reset];

    char v7 = 1;
  }
  else
  {
    char v7 = 0;
  }
  id v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKAccountService.m", 1727, "-[GKAccountServicePrivate authenticatePlayerWithUsername:password:altDSID:isGame:usingFastPath:handler:]_block_invoke");
  id v9 = +[GKDispatchGroup dispatchGroupWithName:v8];

  uint64_t v10 = +[GKDevice currentDevice];
  unsigned __int8 v11 = [v10 isGameKitAvailable];

  if (v11)
  {
    id v12 = +[GKPreferences shared];
    unsigned int v13 = [v12 isGameCenterDisabled];

    if (!v13)
    {
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472;
      v28[2] = sub_10002CFA8;
      v28[3] = &unk_1002D4518;
      id v16 = *(id *)(a1 + 40);
      uint64_t v17 = *(void *)(a1 + 32);
      id v29 = v16;
      uint64_t v30 = v17;
      id v31 = *(id *)(a1 + 48);
      id v32 = *(id *)(a1 + 56);
      id v33 = v9;
      [v33 perform:v28];

      goto LABEL_11;
    }
    uint64_t v14 = +[NSError errorWithDomain:GKInternalErrorDomain code:103 userInfo:0];
  }
  else
  {
    uint64_t v14 = +[NSError userErrorForCode:10 underlyingError:0];
  }
  int v15 = (void *)v14;
  [v9 setError:v14];

LABEL_11:
  unsigned int v18 = [v2 replyQueue];
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  _OWORD v22[2] = sub_10002D348;
  v22[3] = &unk_1002D4560;
  uint64_t v19 = *(void *)(a1 + 32);
  id v23 = v9;
  uint64_t v24 = v19;
  id v25 = v2;
  char v27 = v7;
  id v26 = *(id *)(a1 + 64);
  id v20 = v2;
  id v21 = v9;
  [v21 notifyOnQueue:v18 block:v22];
}

void sub_10002CFA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!os_log_GKGeneral) {
    id v4 = (id)GKOSLoggers();
  }
  id v5 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v16 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "fetch credentials with username:%@ ", buf, 0xCu);
  }
  uint64_t v8 = *(void *)(a1 + 32);
  char v7 = *(void **)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_10002D110;
  void v12[3] = &unk_1002D44F0;
  id v13 = *(id *)(a1 + 64);
  id v14 = v3;
  id v11 = v3;
  [v7 _fetchCredentialsForUsername:v8 password:v9 altDSID:v10 handler:v12];
}

void sub_10002D110(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!os_log_GKGeneral) {
    id v7 = (id)GKOSLoggers();
  }
  uint64_t v8 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    int v14 = 138412290;
    v15[0] = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "authenticateWithCompletionHandler:fetched credentials for username. Credential:%@", (uint8_t *)&v14, 0xCu);
  }
  if (!os_log_GKGeneral) {
    id v9 = (id)GKOSLoggers();
  }
  uint64_t v10 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    int v14 = 138412290;
    v15[0] = v6;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "error fetching credentials: %@", (uint8_t *)&v14, 0xCu);
  }
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v11 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000356EC();
    }
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v12 = (id)GKOSLoggers();
    }
    id v13 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      int v14 = 67109376;
      LODWORD(v15[0]) = v5 != 0;
      WORD2(v15[0]) = 1024;
      *(_DWORD *)((char *)v15 + 6) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "authenticatePlayerWithUsername: creds(%d) error(%d)", (uint8_t *)&v14, 0xEu);
    }
  }
  [*(id *)(a1 + 32) setError:v6];
  if (v5) {
    [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:@"credential"];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10002D348(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"credential"];
  if (v2)
  {
    id v3 = objc_opt_class();
    id v4 = [*(id *)(a1 + 40) clientProxy];
    id v5 = [v3 serviceWithTransport:0 forClient:v4 credential:v2];

    [*(id *)(a1 + 40) setCredential:v2];
    id v6 = +[GKStoreBag storeBagForEnvironment:](GKStoreBag, "storeBagForEnvironment:", [*(id *)(a1 + 48) environment]);
    id v7 = +[GKDataTransport transportWithBag:v6 clientProxy:*(void *)(a1 + 48) credential:v2];
    [*(id *)(a1 + 40) setTransport:v7];

    uint64_t v8 = +[GKBadgeController sharedController];
    id v9 = [*(id *)(a1 + 48) bundleIdentifier];
    [v8 registerBadgePermissionForBundleID:v9 completionHandler:&stru_1002D4538];

    if (*(unsigned char *)(a1 + 64)) {
      [*(id *)(a1 + 40) updateBadgeCounts];
    }
    [v5 _continueAuthenticationWithHandler:*(void *)(a1 + 56)];
  }
  else
  {
    CFAbsoluteTimeGetCurrent();
    id v11 = *(void **)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 48);
    id v12 = [*(id *)(a1 + 32) error];
    [v11 notifyClient:v10 authenticationDidChangeWithError:v12 handler:*(void *)(a1 + 56)];

    if (!os_log_GKGeneral) {
      id v13 = (id)GKOSLoggers();
    }
    int v14 = (void *)os_log_GKPerf;
    if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG)) {
      sub_100035754(v14);
    }
  }
}

void sub_10002D5F0(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10002D680;
  v3[3] = &unk_1002D4588;
  id v4 = *(id *)(a1 + 48);
  [v1 _constructAuthenticationResponseWithError:v2 handler:v3];
}

void sub_10002D680(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000357F8();
    }
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    (*(void (**)(uint64_t, id, id))(v8 + 16))(v8, v5, v6);
  }
}

void sub_10002D870(uint64_t a1, void *a2)
{
  id v3 = a2;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  id v5 = [*(id *)(a1 + 32) credential];
  id v6 = [v5 playerInternal];
  id v7 = [v6 playerID];

  uint64_t v8 = +[GKService serviceFromService:*(void *)(a1 + 32)];
  uint64_t v9 = +[GKPlayerProfileCacheObject piecesToLoadForFamiliarity:1];
  uint64_t v10 = [*(id *)(a1 + 40) context];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_10002D9B0;
  void v12[3] = &unk_1002D45B0;
  CFAbsoluteTime v14 = Current;
  id v13 = v3;
  id v11 = v3;
  [v8 loadProfileForPlayer:v7 pieces:v9 context:v10 handler:v12];
}

void sub_10002D9B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000359E0();
    }
  }
  id v5 = os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    id v6 = (id)GKOSLoggers();
    id v5 = os_log_GKGeneral;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
    sub_1000359AC();
  }
  if (!os_log_GKGeneral) {
    id v7 = (id)GKOSLoggers();
  }
  uint64_t v8 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG)) {
    sub_100035914(v8);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10002DBC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    id v5 = (id)GKOSLoggers();
    id v4 = os_log_GKGeneral;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
    sub_100035A48(a1, v4);
  }
  id v6 = *(void **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_10002DCC4;
  v9[3] = &unk_1002D4628;
  void v9[4] = v6;
  id v7 = *(id *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 56);
  id v10 = v7;
  id v11 = v3;
  id v8 = v3;
  [v6 _initGameForLaunchedApp:1 withHandler:v9];
}

void sub_10002DCC4(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = [*(id *)(a1 + 32) credential];
  id v10 = [*(id *)(a1 + 32) clientProxy];
  id v11 = [v10 adamID];
  id v12 = [v11 integerValue];

  if (!v12)
  {
    id v13 = [v7 adamID];
    CFAbsoluteTime v14 = [*(id *)(a1 + 32) clientProxy];
    [v14 setAdamID:v13];
  }
  if (v9)
  {
    uint64_t v15 = (uint64_t)[v9 scope];
    if (a4 <= 5028)
    {
      if (!a4)
      {
LABEL_24:
        uint64_t v15 = v15 | 2;
LABEL_29:
        if (v15 != [v9 scope])
        {
          id v26 = os_log_GKGeneral;
          if (!os_log_GKGeneral)
          {
            id v27 = (id)GKOSLoggers();
            id v26 = os_log_GKGeneral;
          }
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)) {
            sub_100035BD8(v15, v26);
          }
          uint64_t v28 = *(void **)(a1 + 40);
          v40[0] = _NSConcreteStackBlock;
          v40[1] = 3221225472;
          v40[2] = sub_10002E164;
          v40[3] = &unk_1002D4600;
          id v41 = v9;
          int v42 = v15;
          [v28 perform:v40];
        }
        goto LABEL_35;
      }
      if (a4 != 5000)
      {
LABEL_25:
        if (!os_log_GKGeneral) {
          id v24 = (id)GKOSLoggers();
        }
        id v25 = (void *)os_log_GKError;
        if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
          sub_100035C7C(v25, a4);
        }
        goto LABEL_29;
      }
      if (!os_log_GKGeneral) {
        id v22 = (id)GKOSLoggers();
      }
      id v23 = os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "server error coming back from appInit. Player is unauthenticated. Removing the authorization flag", buf, 2u);
      }
    }
    else if (a4 != 5029 && a4 != 5170)
    {
      if (a4 == 5172)
      {
        if (!os_log_GKGeneral) {
          id v16 = (id)GKOSLoggers();
        }
        uint64_t v17 = (void *)os_log_GKDaemon;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          unsigned int v18 = v17;
          uint64_t v19 = +[GCFLocalizedStrings ERROR_APP_UNLISTED];
          *(_DWORD *)buf = 138412290;
          uint64_t v44 = v19;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Disabling GameCenter for this game. %@", buf, 0xCu);
        }
        id v20 = [*(id *)(a1 + 32) clientProxy];
        [v20 setIsAppUnlistedAndDisallowed:1];

        goto LABEL_24;
      }
      goto LABEL_25;
    }
    uint64_t v15 = v15 & 0xFFFFFFFD;
    goto LABEL_29;
  }
  if (!os_log_GKGeneral) {
    id v21 = (id)GKOSLoggers();
  }
  if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
    sub_100035B98();
  }
LABEL_35:
  if (!os_log_GKGeneral) {
    id v29 = (id)GKOSLoggers();
  }
  uint64_t v30 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG)) {
    sub_100035B00(v30);
  }
  id v34 = _NSConcreteStackBlock;
  uint64_t v35 = 3221225472;
  id v36 = sub_10002E240;
  id v37 = &unk_1002D3A70;
  id v31 = *(void **)(a1 + 40);
  uint64_t v38 = *(void *)(a1 + 32);
  id v32 = v7;
  id v39 = v32;
  [v31 perform:&v34];
  if (a4 == 5172 || !a4)
  {
    id v33 = [*(id *)(a1 + 32) clientProxy:v34, v35, v36, v37, v38];
    [v33 setAppInitState:@"GKAppInitialized"];
  }
  [*(id *)(a1 + 40) setError:v8, v34, v35, v36, v37, v38];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10002E164(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) setScope:*(unsigned int *)(a1 + 40)];
  id v4 = +[GKPlayerCredentialController sharedController];
  uint64_t v5 = *(void *)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_10002E230;
  v7[3] = &unk_1002D45D8;
  id v8 = v3;
  id v6 = v3;
  [v4 setCredential:v5 completionHandler:v7];
}

uint64_t sub_10002E230(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10002E240(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) clientProxy];
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = [v4 environment];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10002E308;
  v8[3] = &unk_1002D3A20;
  id v9 = v3;
  id v7 = v3;
  [v4 setCurrentGame:v5 serverEnvironment:v6 reply:v8];
}

uint64_t sub_10002E308(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10002E470(uint64_t a1, void *a2, unsigned char *a3)
{
  id v7 = a2;
  uint64_t v5 = [v7 bundleIdentifier];
  unsigned int v6 = [v5 isEqualToString:*(void *)(a1 + 32)];

  if (v6)
  {
    [*(id *)(a1 + 40) notifyClient:v7 playerAuthenticatedWithCredential:*(void *)(a1 + 48) authenticatingBundleID:*(void *)(a1 + 56)];
    *a3 = 1;
  }
}

void sub_10002E644(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if ([*(id *)(a1 + 40) length]) {
      [*(id *)(a1 + 32) sendAuthenticationDidChangeNotificationWithAuthenticatingBundleID:*(void *)(a1 + 40) completionHandler:&stru_1002D46D8];
    }
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100035D38();
    }
  }
  else
  {
    [*(id *)(a1 + 32) setCurrentGame:v5 serverEnvironment:[*(id *)(a1 + 32) environment] reply:&stru_1002D4698];
    [*(id *)(a1 + 32) setAppInitState:@"GKAppInitialized"];
    [*(id *)(a1 + 32) sendAuthenticationDidChangeNotificationWithAuthenticatingBundleID:*(void *)(a1 + 40) completionHandler:&stru_1002D46B8];
  }
}

void sub_10002E83C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (*(id *)(a1 + 32) == v3)
  {
    id v7 = *(void **)(a1 + 40);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    _DWORD v9[2] = sub_10002E94C;
    v9[3] = &unk_1002D4050;
    id v10 = v3;
    [v7 perform:v9];
  }
  else
  {
    id v5 = [v3 appInitState];
    id v6 = v5;
    if (v5 != @"GKAppInitUnknown")
    {

LABEL_6:
      [*(id *)(a1 + 48) notifyClient:v4 playerAuthenticatedWithCredential:*(void *)(a1 + 56) authenticatingBundleID:0];
      goto LABEL_7;
    }
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();

    if (isKindOfClass) {
      goto LABEL_6;
    }
  }
LABEL_7:
}

void sub_10002E94C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_10002E9E8;
  v6[3] = &unk_1002D3A20;
  id v7 = v3;
  id v5 = v3;
  [v4 sendAuthenticationDidChangeNotificationWithAuthenticatingBundleID:0 completionHandler:v6];
}

uint64_t sub_10002E9E8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10002EDF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, void, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), a2, *(unsigned __int8 *)(a1 + 40), a3);
}

void sub_10002EE14(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3) {
    id v3 = objc_alloc_init((Class)NSDictionary);
  }
  id v4 = [v3 integerValueFromKey:GKFullscreenSignInSheetLimit defaultValue:1];
  id v5 = [*(id *)(a1 + 32) sheetConfig];
  [v5 setLimit:v4];

  id v6 = [v3 integerValueFromKey:GKFullscreenSignInSheetInitialLimit defaultValue:-1];
  id v7 = [*(id *)(a1 + 32) sheetConfig];
  [v7 setInitialLimit:v6];

  [v3 doubleValueFromKey:GKFullscreenSignInSheetCooldown defaultValue:604800.0];
  double v9 = v8;
  id v10 = [*(id *)(a1 + 32) sheetConfig];
  [v10 setResetPeriod:v9];

  [v3 doubleValueFromKey:GKFullscreenSignInSheetMinTimeBetween defaultValue:0.0];
  double v12 = v11;
  id v13 = [*(id *)(a1 + 32) sheetConfig];
  [v13 setMinTimeBetweenAppearances:v12];

  BOOL v14 = [v3 integerValueFromKey:GKFullscreenSignInSheetEnabled defaultValue:0] != 0;
  uint64_t v15 = [*(id *)(a1 + 32) sheetConfig];
  [v15 setEnabled:v14];

  id v16 = [v3 integerValueFromKey:GKSignInBannerLimit defaultValue:-1];
  uint64_t v17 = [*(id *)(a1 + 32) bannerConfig];
  [v17 setLimit:v16];

  id v18 = [v3 integerValueFromKey:GKSignInBannerInitialLimit defaultValue:-1];
  uint64_t v19 = [*(id *)(a1 + 32) bannerConfig];
  [v19 setInitialLimit:v18];

  [v3 doubleValueFromKey:GKSignInBannerCooldown defaultValue:-1.0];
  double v21 = v20;
  id v22 = [*(id *)(a1 + 32) bannerConfig];
  [v22 setResetPeriod:v21];

  [v3 doubleValueFromKey:GKSignInBannerMinTimeBetween defaultValue:0.0];
  double v24 = v23;
  id v25 = [*(id *)(a1 + 32) bannerConfig];
  [v25 setMinTimeBetweenAppearances:v24];

  BOOL v26 = [v3 integerValueFromKey:GKSignInBannerEnabled defaultValue:0] != 0;
  id v27 = [*(id *)(a1 + 32) bannerConfig];
  [v27 setEnabled:v26];

  uint64_t v28 = +[GKPlayerCredentialController sharedController];
  id v29 = [v28 signInVisibilityManager];
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472;
  v31[2] = sub_10002F14C;
  v31[3] = &unk_1002D4748;
  uint64_t v30 = *(void *)(a1 + 32);
  id v32 = *(id *)(a1 + 40);
  char v33 = *(unsigned char *)(a1 + 48);
  [v29 promptsDisabledWithConfig:v30 scope:1 handler:v31];
}

uint64_t sub_10002F14C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, void, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), a2, *(unsigned __int8 *)(a1 + 40), a3);
}

id sub_10002F25C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _continueAuthenticationWithLoginDisabled:a2 handler:*(void *)(a1 + 40)];
}

void sub_10002F8C0(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) clientProxy];
  [v1 refreshContentsForDataType:12 userInfo:0];
}

void sub_10002F90C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) playerInternal];
  id v3 = [v2 playerID];
  id v4 = [*(id *)(a1 + 40) context];
  id v6 = +[GKPlayerProfileCacheObject playerProfileWithPlayerID:v3 inManagedObjectContext:v4];

  id v5 = v6;
  if (v6)
  {
    +[GKPlayerProfileCacheObject buildFamiliarilyLookupForProfile:v6];
    id v5 = v6;
  }
}

void sub_10002F9C4(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers();
  }
  id v3 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG)) {
    sub_100035DD4(v3);
  }
  id v4 = [*(id *)(a1 + 40) error];
  [*(id *)(a1 + 32) setError:v4];

  id v5 = [*(id *)(a1 + 40) context];
  uint64_t v37 = 0;
  uint64_t v38 = &v37;
  uint64_t v39 = 0x2020000000;
  char v40 = 0;
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472;
  v32[2] = sub_10002FE40;
  v32[3] = &unk_1002D47C0;
  id v6 = *(void **)(a1 + 56);
  void v32[4] = *(void *)(a1 + 48);
  id v33 = v6;
  id v34 = *(id *)(a1 + 40);
  id v36 = &v37;
  id v35 = *(id *)(a1 + 32);
  [v5 performBlockAndWait:v32];
  if (!os_log_GKGeneral) {
    id v7 = (id)GKOSLoggers();
  }
  double v8 = os_log_GKDaemon;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    NSStringFromSelector(*(SEL *)(a1 + 80));
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    int v10 = *((unsigned __int8 *)v38 + 24);
    unsigned __int8 v11 = [*(id *)(a1 + 56) scope];
    CFStringRef v12 = @"YES";
    if (v10) {
      CFStringRef v13 = @"YES";
    }
    else {
      CFStringRef v13 = @"NO";
    }
    *(_DWORD *)buf = 138412802;
    id v42 = v9;
    __int16 v43 = 2112;
    CFStringRef v44 = v13;
    if ((v11 & 2) == 0) {
      CFStringRef v12 = @"NO";
    }
    __int16 v45 = 2112;
    CFStringRef v46 = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%@ profileIsValid:%@ PlayerIsAuthorized:%@", buf, 0x20u);
  }
  if (*((unsigned char *)v38 + 24) && (BOOL v14 = *(void **)(a1 + 56)) != 0) {
    uint64_t v15 = ([v14 scope] >> 1) & 1;
  }
  else {
    uint64_t v15 = 0;
  }
  id v16 = +[NSNumber numberWithBool:v15];
  [*(id *)(a1 + 32) setObject:v16 forKeyedSubscript:@"authenticated"];

  if (*(void *)(a1 + 56))
  {
    uint64_t v17 = +[GKBadgeController sharedController];
    [v17 badgeAllApplications];

    id v18 = [*(id *)(a1 + 48) clientProxy];
    +[GKClientProxy performDelayedRequestsForEnvironment:](GKClientProxy, "performDelayedRequestsForEnvironment:", [v18 environment]);
  }
  if (v15)
  {
    uint64_t v19 = [(id)objc_opt_class() standardUserDefaults];
    [v19 removeObjectForKey:GKOptedOutOfGameCenter];

    double v20 = +[GKService serviceFromService:*(void *)(a1 + 48)];
    double v21 = *(void **)(a1 + 32);
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    v26[2] = sub_10002FFCC;
    v26[3] = &unk_1002D4518;
    id v27 = *(id *)(a1 + 56);
    id v22 = v20;
    uint64_t v23 = *(void *)(a1 + 48);
    id v28 = v22;
    uint64_t v29 = v23;
    id v30 = *(id *)(a1 + 64);
    id v31 = *(id *)(a1 + 32);
    [v21 perform:v26];
  }
  else
  {
    double v24 = os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      id v25 = (id)GKOSLoggers();
      double v24 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG)) {
      sub_100035DA0();
    }
    [*(id *)(a1 + 64) setAppInitState:@"GKAppInitUnknown"];
  }

  _Block_object_dispose(&v37, 8);
}

void sub_10002FE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_10002FE40(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) accountName];
  id v4 = [*(id *)(a1 + 48) context];
  id v5 = [v2 _authenticatedLocalPlayerWithUsername:v3 inContext:v4 isValid:*(void *)(*(void *)(a1 + 64) + 8) + 24];

  if (!os_log_GKGeneral) {
    id v6 = (id)GKOSLoggers();
  }
  id v7 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    int v12 = 138412290;
    CFStringRef v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "authenticated LocalPlayerInternal:%@", (uint8_t *)&v12, 0xCu);
  }
  uint64_t v8 = [v5 playerID];
  if (v8)
  {
    id v9 = (void *)v8;
    int v10 = [v5 alias];

    if (v10) {
      +[GKLocalPlayerInternal archiveProfile:v5];
    }
  }
  if (v5)
  {
    [*(id *)(a1 + 56) setObject:v5 forKeyedSubscript:@"localPlayer"];
    unsigned __int8 v11 = [*(id *)(a1 + 32) ampController];
    [v11 updateMetadataWithLocalPlayer:v5];
  }
}

void sub_10002FFCC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) playerInternal];
  id v5 = [v4 playerID];

  id v6 = *(void **)(a1 + 40);
  if (v5)
  {
    uint64_t v15 = v5;
    id v7 = +[NSArray arrayWithObjects:&v15 count:1];
  }
  else
  {
    id v7 = &__NSArray0__struct;
  }
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100030140;
  v10[3] = &unk_1002D39A8;
  uint64_t v8 = *(void **)(a1 + 56);
  void v10[4] = *(void *)(a1 + 48);
  id v11 = v8;
  id v12 = *(id *)(a1 + 32);
  id v13 = *(id *)(a1 + 64);
  id v14 = v3;
  id v9 = v3;
  [v6 preloadInstalledGamesScopedPlayerIDs:v7 completion:v10];
  if (v5) {
}
  }

uint64_t sub_100030140(uint64_t a1)
{
  id v2 = [(id)objc_opt_class() standardUserDefaults];
  [v2 removeObjectForKey:GKOptedOutOfGameCenter];

  id v3 = +[NSNotificationCenter defaultCenter];
  [v3 postNotificationName:GKPrimaryCredentialDidChangeNotification object:0];

  [*(id *)(a1 + 32) _notifyAllClientsPlayerAuthenticatedFromClient:*(void *)(a1 + 40) withCredential:*(void *)(a1 + 48) replyGroup:*(void *)(a1 + 56)];
  [*(id *)(a1 + 32) notifyWidgetPlayerAuthenticationUpdated];
  id v4 = *(uint64_t (**)(void))(*(void *)(a1 + 64) + 16);

  return v4();
}

void sub_1000301E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v5 = [*(id *)(a1 + 40) error];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1000302AC;
  v7[3] = &unk_1002D4810;
  id v8 = *(id *)(a1 + 40);
  id v9 = v3;
  id v6 = v3;
  [v4 _constructAuthenticationResponseWithError:v5 handler:v7];
}

uint64_t sub_1000302AC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a2;
  [v5 setError:a3];
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:@"response"];

  id v7 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v7();
}

void sub_100030324(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  id v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"response"];
  id v4 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, v3, v4);

  id v5 = [*(id *)(a1 + 32) error];
  if (v5 || !*(void *)(a1 + 40))
  {
  }
  else if ([*(id *)(a1 + 48) isGameCenter])
  {
    id v6 = *(void **)(a1 + 56);
    _[v6 _preloadDataForGameCenterTabs];
  }
}

void sub_1000308A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[GKPlayerCredentialController sharedController];
  uint64_t v5 = *(void *)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100030960;
  v7[3] = &unk_1002D45D8;
  id v8 = v3;
  id v6 = v3;
  [v4 setPrimaryCredential:v5 completionHandler:v7];
}

void sub_100030960(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!os_log_GKGeneral) {
    id v4 = (id)GKOSLoggers();
  }
  if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
    sub_100035E70();
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000309EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100030A84;
  v6[3] = &unk_1002D3A20;
  id v7 = v3;
  id v5 = v3;
  [v4 updateClientSettings:v6];
}

uint64_t sub_100030A84(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100030A94(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) context];
  id v12 = +[GKPlayerProfileCacheObject playerProfileWithPlayerID:v2 inManagedObjectContext:v3];

  +[GKPlayerProfileCacheObject buildFamiliarilyLookupForProfile:v12];
  id v4 = [*(id *)(a1 + 48) clientProxy];
  id v5 = [v4 gameDescriptor];
  id v6 = [*(id *)(a1 + 40) context];
  id v7 = +[GKGameCacheObject gameForGameDescriptor:v5 context:v6];

  if (*(void *)(a1 + 56)) {
    [v12 setAlias:];
  }
  id v8 = [*(id *)(a1 + 72) playerInternal];
  id v9 = [v8 playerID];
  [*(id *)(a1 + 64) setPlayerID:v9];

  int v10 = [v12 internalRepresentation];
  [*(id *)(a1 + 40) setResult:*(void *)(a1 + 64)];
  id v11 = [v7 internalRepresentation];
  [*(id *)(a1 + 40) setObject:v11 forKeyedSubscript:@"game"];

  [*(id *)(a1 + 40) setObject:v10 forKeyedSubscript:@"player"];
}

void sub_100030C18(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100030CD0;
  v6[3] = &unk_1002D4810;
  id v4 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  id v5 = v3;
  [v4 authenticatePlayerWithUsername:0 password:0 handler:v6];
}

uint64_t sub_100030CD0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setResult:a2];
  [*(id *)(a1 + 32) setError:v6];

  id v7 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v7();
}

void sub_100030D40(uint64_t a1)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100030E54;
  v7[3] = &unk_1002D3980;
  int8x16_t v4 = *(int8x16_t *)(a1 + 32);
  id v2 = (id)v4.i64[0];
  int8x16_t v8 = vextq_s8(v4, v4, 8uLL);
  id v9 = *(id *)(a1 + 48);
  [v2 perform:v7];
  id v3 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_100030F48;
  v5[3] = &unk_1002D4050;
  id v6 = v3;
  [v6 perform:v5];
}

void sub_100030E54(id *a1, void *a2)
{
  id v3 = a2;
  int8x16_t v4 = [a1[4] clientProxy];
  id v5 = [a1[5] objectForKeyedSubscript:@"game"];
  id v6 = [a1[6] currentEnvironment];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100030F38;
  v8[3] = &unk_1002D3A20;
  id v9 = v3;
  id v7 = v3;
  [v4 setCurrentGame:v5 serverEnvironment:v6 reply:v8];
}

uint64_t sub_100030F38(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100030F48(uint64_t a1, void *a2)
{
  int8x16_t v4 = a2;
  id v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"player"];
  if (v3) {
    +[GKClientProxy authenticationDidChange];
  }
  v4[2]();
}

void sub_100030FC8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_100031504(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[GKPlayerCredentialController sharedController];
  uint64_t v5 = *(void *)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1000315C4;
  v7[3] = &unk_1002D45D8;
  id v8 = v3;
  id v6 = v3;
  [v4 setPrimaryCredential:v5 completionHandler:v7];
}

void sub_1000315C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!os_log_GKGeneral) {
    id v4 = (id)GKOSLoggers();
  }
  if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
    sub_100035E70();
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100031650(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1000316E8;
  v6[3] = &unk_1002D3A20;
  id v7 = v3;
  id v5 = v3;
  [v4 updateClientSettings:v6];
}

uint64_t sub_1000316E8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000316F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) context];
  id v12 = +[GKPlayerProfileCacheObject playerProfileWithPlayerID:v2 inManagedObjectContext:v3];

  +[GKPlayerProfileCacheObject buildFamiliarilyLookupForProfile:v12];
  id v4 = [*(id *)(a1 + 48) clientProxy];
  id v5 = [v4 gameDescriptor];
  id v6 = [*(id *)(a1 + 40) context];
  id v7 = +[GKGameCacheObject gameForGameDescriptor:v5 context:v6];

  if (*(void *)(a1 + 56)) {
    [v12 setAlias:];
  }
  id v8 = [*(id *)(a1 + 72) playerInternal];
  id v9 = [v8 playerID];
  [*(id *)(a1 + 64) setPlayerID:v9];

  int v10 = [v12 internalRepresentation];
  [*(id *)(a1 + 40) setResult:*(void *)(a1 + 64)];
  id v11 = [v7 internalRepresentation];
  [*(id *)(a1 + 40) setObject:v11 forKeyedSubscript:@"game"];

  [*(id *)(a1 + 40) setObject:v10 forKeyedSubscript:@"player"];
}

void sub_10003187C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100031934;
  v6[3] = &unk_1002D4810;
  id v4 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  id v5 = v3;
  [v4 authenticatePlayerWithUsername:0 password:0 handler:v6];
}

uint64_t sub_100031934(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setResult:a2];
  [*(id *)(a1 + 32) setError:v6];

  id v7 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v7();
}

void sub_1000319A4(uint64_t a1)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100031AB8;
  v7[3] = &unk_1002D3980;
  int8x16_t v4 = *(int8x16_t *)(a1 + 32);
  id v2 = (id)v4.i64[0];
  int8x16_t v8 = vextq_s8(v4, v4, 8uLL);
  id v9 = *(id *)(a1 + 48);
  [v2 perform:v7];
  id v3 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_100031BAC;
  v5[3] = &unk_1002D4050;
  id v6 = v3;
  [v6 perform:v5];
}

void sub_100031AB8(id *a1, void *a2)
{
  id v3 = a2;
  int8x16_t v4 = [a1[4] clientProxy];
  id v5 = [a1[5] objectForKeyedSubscript:@"game"];
  id v6 = [a1[6] currentEnvironment];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100031B9C;
  v8[3] = &unk_1002D3A20;
  id v9 = v3;
  id v7 = v3;
  [v4 setCurrentGame:v5 serverEnvironment:v6 reply:v8];
}

uint64_t sub_100031B9C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100031BAC(uint64_t a1, void *a2)
{
  int8x16_t v4 = a2;
  id v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"player"];
  if (v3) {
    +[GKClientProxy authenticationDidChange];
  }
  v4[2]();
}

void sub_100031C2C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_100031EBC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100031F88;
  v8[3] = &unk_1002D44F0;
  uint64_t v6 = *(void *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  id v10 = v3;
  id v7 = v3;
  [v4 _authenticateUsername:v5 password:v6 altDSID:0 validateOnly:1 handler:v8];
}

uint64_t sub_100031F88(uint64_t a1)
{
  [*(id *)(a1 + 32) setError:];
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v2();
}

void sub_100031FCC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1)
  {
    uint64_t v2 = *(void *)(a1 + 32);
    id v3 = [*(id *)(a1 + 40) error];
    (*(void (**)(uint64_t, uint64_t, id))(v1 + 16))(v1, v2, v3);
  }
}

void sub_100032210(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[GKPlayerCredentialController sharedController];
  double v5 = *(double *)(a1 + 48);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000322EC;
  v8[3] = &unk_1002D3BC8;
  uint64_t v6 = *(void *)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  id v10 = v3;
  id v7 = v3;
  [v4 renewCredentialForUsername:v6 ttl:v8 completionHandler:v5];
}

uint64_t sub_1000322EC(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setError:a2];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_100032334(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1000330FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) context];
  id v5 = +[GKPlayerProfileCacheObject playerProfileWithPlayerID:v2 inManagedObjectContext:v3];

  +[GKPlayerProfileCacheObject buildFamiliarilyLookupForProfile:v5];
  if (*(void *)(a1 + 48)) {
    [v5 setAlias:];
  }
  if (*(void *)(a1 + 56)) {
    [v5 setFirstName:];
  }
  id v4 = v5;
  if (*(void *)(a1 + 64))
  {
    [v5 setLastName:];
    id v4 = v5;
  }
}

void sub_1000331BC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) context];
  id v3 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:v2];

  if (!os_log_GKGeneral) {
    id v4 = (id)GKOSLoggers();
  }
  id v5 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    int v8 = 138412290;
    id v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Account setup (Player did not change): current profile:%@", (uint8_t *)&v8, 0xCu);
  }
  if (*(void *)(a1 + 40)) {
    [v3 setAlias:];
  }
  if (*(void *)(a1 + 48)) {
    [v3 setFirstName:];
  }
  if (*(void *)(a1 + 56)) {
    [v3 setLastName:];
  }
  if (!os_log_GKGeneral) {
    id v6 = (id)GKOSLoggers();
  }
  id v7 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    int v8 = 138412290;
    id v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Account setup (Player did not change): updated profile:%@", (uint8_t *)&v8, 0xCu);
  }
}

void sub_1000334FC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) context];
  id v10 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:v2];

  id v3 = +[GKPlayerCredentialController sharedController];
  id v4 = [*(id *)(a1 + 40) credential];
  id v5 = [v4 copy];

  id v6 = [v5 playerInternal];
  id v7 = [*(id *)(a1 + 40) clientProxy];
  [v5 setEnvironment:[v7 environment]];

  if (*(void *)(a1 + 48)) {
    [v5 setAccountName:];
  }
  if (*(void *)(a1 + 56))
  {
    [v10 setAlias:];
    [v6 setAlias:*(void *)(a1 + 56)];
  }
  if (*(void *)(a1 + 64))
  {
    [v10 setFirstName:];
    [v6 setFirstName:*(void *)(a1 + 64)];
  }
  if (*(void *)(a1 + 72))
  {
    [v10 setLastName:];
    [v6 setLastName:*(void *)(a1 + 72)];
  }
  int v8 = [*(id *)(a1 + 40) credential];
  [v3 replaceCredential:v8 withCredential:v5 completionHandler:0];

  uint64_t v9 = *(void *)(a1 + 80);
  if (v9) {
    (*(void (**)(void))(v9 + 16))();
  }
}

void sub_10003388C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!os_log_GKGeneral) {
    id v4 = (id)GKOSLoggers();
  }
  if (!os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
  {
    if (v3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  sub_100035ED8();
  if (!v3)
  {
LABEL_5:
    id v5 = [*(id *)(a1 + 32) clientProxy];
    [v5 setAppInitState:@"GKAppInitialized"];
  }
LABEL_6:
  +[GKClientProxy authenticationDidChange];
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v3);
  }
}

void sub_100033C78(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v12[0] = GKMaxPlayersP2P;
  v12[1] = GKMaxPlayersHosted;
  void v12[2] = GKMaxPlayersTurnBased;
  void v12[3] = GKMaxGameStateSizeTurnBased;
  void v12[4] = GKExchangeDataMaximumSize;
  v12[5] = GKExchangeMaxPerPlayer;
  id v5 = +[NSArray arrayWithObjects:v12 count:6];
  uint64_t v6 = [*(id *)(a1 + 40) clientProxy];
  id v7 = [v6 replyQueue];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_100033E00;
  v9[3] = &unk_1002D3958;
  id v10 = *(id *)(a1 + 48);
  id v11 = v3;
  id v8 = v3;
  [v4 getValuesForKeys:v5 queue:v7 completion:v9];
}

uint64_t sub_100033E00(uint64_t a1, void *a2)
{
  uint64_t v3 = GKMaxPlayersP2P;
  id v4 = a2;
  id v5 = [v4 objectForKeyedSubscript:v3];
  [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:@"GKMaxPlayersP2P"];

  uint64_t v6 = [v4 objectForKeyedSubscript:GKMaxPlayersHosted];
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:@"GKMaxPlayersHosted"];

  id v7 = [v4 objectForKeyedSubscript:GKMaxPlayersTurnBased];
  [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:@"GKMaxPlayersTurnBased"];

  id v8 = [v4 objectForKeyedSubscript:GKMaxGameStateSizeTurnBased];
  [*(id *)(a1 + 32) setObject:v8 forKeyedSubscript:@"GKMaxGameStateSizeTurnBased"];

  uint64_t v9 = [v4 objectForKeyedSubscript:GKExchangeDataMaximumSize];
  [*(id *)(a1 + 32) setObject:v9 forKeyedSubscript:@"GKExchangeDataMaximumSize"];

  id v10 = [v4 objectForKeyedSubscript:GKExchangeMaxPerPlayer];

  [*(id *)(a1 + 32) setObject:v10 forKeyedSubscript:@"GKExchangeMaxPerPlayer"];
  id v11 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v11();
}

uint64_t sub_100033F88(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) clientProxy];
  uint64_t v3 = [*(id *)(a1 + 40) allValues];
  [v2 updatePreferencesFromBag:v3];

  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    id v5 = *(uint64_t (**)(void))(result + 16);
    return v5();
  }
  return result;
}

void sub_10003420C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v5 = [v4 localPlayer];
  uint64_t v6 = [v5 playerID];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000342F8;
  v10[3] = &unk_1002D49A0;
  id v7 = *(id *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 32);
  id v11 = v7;
  uint64_t v12 = v8;
  id v13 = v3;
  id v9 = v3;
  [v4 getAccountAgeCategoryForPlayerID:v6 withCompletion:v10];
}

void sub_1000342F8(id *a1, int a2)
{
  if (a2 == 1)
  {
    id v3 = [a1[5] transport];
    id v4 = [a1[5] clientProxy];
    id v5 = [a1[5] localPlayer];
    uint64_t v6 = +[GKService serviceWithTransport:v3 forClient:v4 localPlayer:v5];

    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10003449C;
    v10[3] = &unk_1002D49A0;
    id v11 = a1[4];
    id v7 = a1[6];
    id v12 = a1[5];
    id v13 = v7;
    [v6 getProfilePrivacyWithHandler:v10];
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers();
    }
    id v9 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "checkActivitySharingRepromptWithCompletion: No, the user is not adult.", buf, 2u);
    }
    [a1[4] setResult:&__kCFBooleanFalse];
    (*((void (**)(void))a1[6] + 2))();
  }
}

void sub_10003449C(uint64_t a1, int a2)
{
  if (a2 == 2)
  {
    id v3 = [*(id *)(a1 + 40) transport];
    id v4 = [*(id *)(a1 + 40) clientProxy];
    id v5 = [*(id *)(a1 + 40) localPlayer];
    uint64_t v6 = +[GKService serviceWithTransport:v3 forClient:v4 localPlayer:v5];

    v18[0] = GKActivitySharingRepromptLimit;
    v18[1] = GKActivitySharingRepromptMinDaysBetween;
    id v7 = +[NSArray arrayWithObjects:v18 count:2];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1000346A8;
    void v13[3] = &unk_1002D4978;
    id v8 = *(id *)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    id v10 = *(void **)(a1 + 48);
    id v14 = v8;
    uint64_t v15 = v9;
    id v16 = v10;
    [v6 getStoreBagValuesForKeys:v7 handler:v13];
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v11 = (id)GKOSLoggers();
    }
    id v12 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "checkActivitySharingRepromptWithCompletion: No, the user's profile privacy is not Only You.", buf, 2u);
    }
    [*(id *)(a1 + 32) setResult:&__kCFBooleanFalse];
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_1000346A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3) {
    id v3 = &__NSDictionary0__struct;
  }
  id v6 = v3;
  id v4 = [v3 integerValueFromKey:GKActivitySharingRepromptLimit defaultValue:3];
  id v5 = [NSNumber numberWithBool:objc_msgSend(*(id *)(a1 + 40), "shouldCadencedActivitySharingRepromptWithLimit:minDaysBetween:", v4, objc_msgSend(v6, "integerValueFromKey:defaultValue:", GKActivitySharingRepromptMinDaysBetween, 30))];
  [*(id *)(a1 + 32) setResult:v5];

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_100034780(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) result];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, [v2 BOOLValue]);
}

uint64_t sub_100034DE4()
{
  return v0;
}

void sub_100034DF0()
{
  sub_100011030();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Failure to save profile to %@ error %@", v1, 0x16u);
}

void sub_100034E68()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "error while decoding GKPlayerInternal archive:%@", v2, v3, v4, v5, v6);
}

void sub_100034ED0()
{
  sub_100010D10();
}

void sub_100034F10()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "GKAccountService notifyWidgetPlayerAuthenticationUpdated: Requesting a timeline reload.", v2, v3, v4, v5, v6);
}

void sub_100034F44(void *a1)
{
  id v2 = a1;
  v3[0] = 67109120;
  v3[1] = [(id)sub_100010D1C() code];
  _os_log_debug_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "GKAccountService signOutPlayerWithOptOut: removeCred (error:%d)", (uint8_t *)v3, 8u);
}

void sub_100034FDC()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "Finished clearing contacts cache while signing out", v2, v3, v4, v5, v6);
}

void sub_100035010()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "Finished setting up metrics controller after privacy notice acceptance.", v2, v3, v4, v5, v6);
}

void sub_100035044()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "getAccountAgeCategoryForCredential: Failed getting AppleAccount accounts, error: %@", v2, v3, v4, v5, v6);
}

void sub_1000350AC()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "getAccountAgeCategoryForCredential: Failed getting IDMS accounts, error: %@", v2, v3, v4, v5, v6);
}

void sub_100035114()
{
  sub_100011030();
  sub_100017978((void *)&_mh_execute_header, v0, (uint64_t)v0, "Retrieved primary player from game session: %@, error: %@", v1);
}

void sub_100035184()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "_authenticateUsername:Failed to post Request for gk-authenticate-user. Error: %@", v2, v3, v4, v5, v6);
}

void sub_1000351EC()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Error when trying to get the full credential:%@", v2, v3, v4, v5, v6);
}

void sub_100035254()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Error renewing auth token: %@", v2, v3, v4, v5, v6);
}

void sub_1000352BC()
{
  sub_100011064();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "GKAccountService renewAuthToken server error:%@", v1, 0xCu);
}

void sub_100035330()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Error from setCredential:%@", v2, v3, v4, v5, v6);
}

void sub_100035398()
{
  sub_100011064();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Updated contacts integration info as part of app init. error: %@", v1, 0xCu);
}

void sub_10003540C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [(id)sub_100010D1C() conciseDescription];
  sub_100011064();
  _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Cached local player incomplete, using archived local player (%@)", v5, 0xCu);
}

void sub_1000354B4(uint64_t a1, void *a2)
{
  sub_1000184A8(a1, a2);
  id v3 = [(id)sub_100034DE4() conciseDescription];
  sub_100017248();
  sub_100017978((void *)&_mh_execute_header, v2, v4, "local player djinned up:%@ for %@", v5);
}

void sub_100035550(uint64_t a1, void *a2)
{
  sub_1000184A8(a1, a2);
  id v3 = [(id)sub_100034DE4() conciseDescription];
  sub_100017248();
  sub_100017978((void *)&_mh_execute_header, v2, v4, "Cached local player incomplete, archived local player (%@) doesn't match %@", v5);
}

void sub_1000355EC(void *a1)
{
  id v1 = a1;
  CFAbsoluteTimeGetCurrent();
  sub_100011070();
  sub_100011B0C((void *)&_mh_execute_header, v2, v3, "%s elapsed seconds:%g", v4, v5, v6, v7, 2u);
}

void sub_100035684()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "_fetchCredentialsForUsername: failed to authenticate username and password. Error: %@", v2, v3, v4, v5, v6);
}

void sub_1000356EC()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "authenticatePlayerWithUsername: failed to fetch creds. Error: %@", v2, v3, v4, v5, v6);
}

void sub_100035754(void *a1)
{
  uint64_t v1 = a1;
  CFAbsoluteTimeGetCurrent();
  v3[0] = 136315394;
  sub_100011070();
  sub_100017978((void *)&_mh_execute_header, v1, v2, "%s elapsed seconds:%g", (uint8_t *)v3);
}

void sub_1000357F8()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "authenticatePlayerWithUsername:Failed send authentication did change notification. Error: %@", v2, v3, v4, v5, v6);
}

void sub_100035860(void *a1, void *a2)
{
  id v4 = a1;
  uint64_t v5 = (const char *)sub_100034DE4();
  NSStringFromSelector(v5);
  objc_claimAutoreleasedReturnValue();
  uint8_t v6 = [(id)sub_100010D1C() credential];
  sub_100034DCC();
  sub_100017978((void *)&_mh_execute_header, v2, v7, "%@ cred:%@", v8);
}

void sub_100035914(void *a1)
{
  id v1 = a1;
  CFAbsoluteTimeGetCurrent();
  sub_100011070();
  sub_100011B0C((void *)&_mh_execute_header, v2, v3, "%s elapsed seconds:%g", v4, v5, v6, v7, 2u);
}

void sub_1000359AC()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "Local player profile has been loaded, cached and is available", v2, v3, v4, v5, v6);
}

void sub_1000359E0()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Encountered error when attempting to load profile: %@", v2, v3, v4, v5, v6);
}

void sub_100035A48(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v5 = (const char *)sub_100034DE4();
  uint8_t v6 = NSStringFromSelector(v5);
  uint64_t v7 = [*(id *)(a1 + 32) credential];
  sub_100034DCC();
  sub_100017978((void *)&_mh_execute_header, v2, v8, "%@ cred:%@", v9);
}

void sub_100035B00(void *a1)
{
  id v1 = a1;
  CFAbsoluteTimeGetCurrent();
  sub_100011070();
  sub_100011B0C((void *)&_mh_execute_header, v2, v3, "%s elapsed seconds:%g", v4, v5, v6, v7, 2u);
}

void sub_100035B98()
{
  sub_100010D10();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "EVIL: _initGame without player logged in", v1, 2u);
}

void sub_100035BD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  [(id)sub_100010D1C() scope];
  sub_100011B0C((void *)&_mh_execute_header, v4, v5, "_initGame login scope change new:%lX old:%lX", v6, v7, v8, v9, 0);
}

void sub_100035C7C(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = +[NSNumber numberWithInteger:a2];
  sub_100017248();
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "EVIL: don't know how to handle server error code (%@) for server error %@", v5, 0x16u);
}

void sub_100035D38()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Error attempting to init game: %@", v2, v3, v4, v5, v6);
}

void sub_100035DA0()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "unauthenticated -- clearing appInit state", v2, v3, v4, v5, v6);
}

void sub_100035DD4(void *a1)
{
  id v1 = a1;
  CFAbsoluteTimeGetCurrent();
  sub_100011070();
  sub_100011B0C((void *)&_mh_execute_header, v2, v3, "%s elapsed seconds:%g", v4, v5, v6, v7, 2u);
}

void sub_100035E70()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "error while trying to set primary credential:%@", v2, v3, v4, v5, v6);
}

void sub_100035ED8()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "setLoginStatus: error from setCredential:%@", v2, v3, v4, v5, v6);
}

void sub_100036284(id *a1, void *a2, uint64_t a3)
{
  id v7 = a2;
  uint64_t v5 = [a1[4] objectAtIndexedSubscript:a3];
  uint8_t v6 = [a1[5] objectForKeyedSubscript:v5];
  if (!v6)
  {
    uint8_t v6 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [a1[6] count]);
    [a1[5] setObject:v6 forKeyedSubscript:v5];
  }
  [v6 addObject:v7];
}

void sub_100036348(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[GKService serviceFromService:*(void *)(a1 + 32)];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_10003642C;
  v7[3] = &unk_1002D4A48;
  uint64_t v5 = *(void *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  id v10 = v3;
  id v6 = v3;
  [v4 getGameMetadataForBundleIDs:v5 handler:v7];
}

void sub_10003642C(uint64_t a1, void *a2)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1000364E0;
  v7[3] = &unk_1002D4A20;
  id v8 = *(id *)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  [a2 enumerateObjectsUsingBlock:v7];
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), v4, v5, v6);
}

void sub_1000364E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = [v3 bundleIdentifier];
  uint64_t v6 = [v4 objectForKeyedSubscript:v5];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_1000365BC;
  v9[3] = &unk_1002D49F8;
  id v7 = *(id *)(a1 + 40);
  id v10 = v3;
  id v11 = v7;
  id v8 = v3;
  [v6 enumerateObjectsUsingBlock:v9];
}

uint64_t sub_1000365BC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), a2, *(void *)(a1 + 32));
}

void sub_1000366B0(id a1, GKPlayerInternal *a2, GKGameInternal *a3)
{
}

void sub_100036798(id a1, GKPlayerInternal *a2, GKGameInternal *a3)
{
}

void sub_100036BA8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_100036BE8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  id v7 = [*(id *)(a1 + 32) count];
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24)) {
    goto LABEL_42;
  }
  id v8 = +[NSDate date];
  id v9 = +[GKCacheObject fetchRequestForContext:v5];
  [v9 setFetchLimit:v7];
  id v10 = +[NSPredicate predicateWithFormat:@"expirationDate > %@ && ((availablePieces & %d) = %d) && playerID in %@", v8, *(unsigned __int8 *)(a1 + 100), *(unsigned __int8 *)(a1 + 100), *(void *)(a1 + 32)];
  [v9 setPredicate:v10];

  id v52 = 0;
  id v11 = [v5 countForFetchRequest:v9 error:&v52];
  id v12 = v52;
  if (v12)
  {
    if (!os_log_GKGeneral) {
      id v13 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
      sub_100044A38();
    }
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = v11 == v7;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = v11 == v7;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24))
  {
    id v14 = v12;
  }
  else
  {
    uint64_t v15 = +[NSPredicate predicateWithFormat:@"expirationDate != nil && ((availablePieces & %d) = %d) && playerID in %@", *(unsigned __int8 *)(a1 + 100), *(unsigned __int8 *)(a1 + 100), *(void *)(a1 + 32)];
    [v9 setPredicate:v15];

    id v51 = v12;
    id v16 = [v5 countForFetchRequest:v9 error:&v51];
    id v14 = v51;

    if (v14)
    {
      if (!os_log_GKGeneral) {
        id v17 = (id)GKOSLoggers();
      }
      if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
        sub_1000449D0();
      }
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = v16 == v7;
  }

  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24))
  {
LABEL_42:
    if (*(_DWORD *)(a1 + 96))
    {
      id v18 = +[GKPlayerProfileCacheObject playerProfilesWithPlayerIDs:*(void *)(a1 + 32) inManagedObjectContext:v5];
      if ([v18 count] != v7)
      {
        if (!os_log_GKGeneral) {
          id v19 = (id)GKOSLoggers();
        }
        double v20 = os_log_GKCache;
        if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
          sub_100044960(a1, v20, v21, v22, v23, v24, v25, v26);
        }
      }
      id v27 = [v18 _gkMapDictionaryWithKeyPath:@"playerID"];
      if (*(unsigned char *)(a1 + 101))
      {
        id v28 = +[NSMutableArray arrayWithCapacity:v7];
      }
      else
      {
        id v28 = 0;
      }
      if (*(unsigned char *)(a1 + 101))
      {
        uint64_t v29 = +[NSMutableArray arrayWithCapacity:v7];
      }
      else
      {
        uint64_t v29 = 0;
      }
      if (*(unsigned char *)(a1 + 102))
      {
        id v30 = +[NSMutableArray arrayWithCapacity:v7];
      }
      else
      {
        id v30 = 0;
      }
      id v41 = v18;
      id v31 = v5;
      if (*(unsigned char *)(a1 + 102))
      {
        id v32 = +[NSMutableArray arrayWithCapacity:v7];
      }
      else
      {
        id v32 = 0;
      }
      id v33 = *(void **)(a1 + 56);
      v42[0] = _NSConcreteStackBlock;
      v42[1] = 3221225472;
      v42[2] = sub_1000370E0;
      v42[3] = &unk_1002D4AF8;
      id v34 = v27;
      uint64_t v35 = *(void *)(a1 + 88);
      id v43 = v34;
      uint64_t v48 = v35;
      char v49 = *(unsigned char *)(a1 + 101);
      id v36 = v28;
      id v44 = v36;
      id v37 = v29;
      id v45 = v37;
      char v50 = *(unsigned char *)(a1 + 102);
      id v38 = v30;
      id v46 = v38;
      id v39 = v32;
      id v47 = v39;
      char v40 = [v33 _gkFilterWithBlock:v42];
      [*(id *)(a1 + 48) setResult:v40];

      if ([v36 count]) {
        [*(id *)(a1 + 64) updateLastPlayedGames:v36 forPlayers:v37 group:*(void *)(a1 + 48)];
      }
      id v5 = v31;
      if ([v38 count]) {
        [*(id *)(a1 + 64) updateChallengedGames:v38 forPlayers:v39 group:*(void *)(a1 + 48)];
      }
    }
  }
  v6[2](v6);
}

id sub_1000370E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:v3];
  if (v4)
  {
    id v5 = [*(id *)(a1 + 72) internalRepresentationForCacheObject:v4];
LABEL_8:
    id v7 = v5;
    goto LABEL_9;
  }
  if ([v3 isEqualToString:GKAnonymousPlayerID])
  {
    uint64_t v6 = (objc_class *)GKAnonymousPlayerInternal;
LABEL_7:
    id v5 = objc_alloc_init(v6);
    goto LABEL_8;
  }
  if ([v3 isEqualToString:GKUnknownPlayerID])
  {
    uint64_t v6 = (objc_class *)GKUnknownPlayerInternal;
    goto LABEL_7;
  }
  id v7 = 0;
LABEL_9:
  if (*(unsigned char *)(a1 + 80))
  {
    id v8 = [v4 lastPlayedGame];
    if (v8)
    {
      [*(id *)(a1 + 40) addObject:v8];
      [*(id *)(a1 + 48) addObject:v7];
    }
  }
  if (*(unsigned char *)(a1 + 81))
  {
    id v9 = [v4 lastChallengedGame];
    if (v9)
    {
      [*(id *)(a1 + 56) addObject:v9];
      [*(id *)(a1 + 64) addObject:v7];
    }
  }

  return v7;
}

void sub_100037224(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = [*(id *)(a1 + 32) result];
  (*(void (**)(uint64_t, id, void, void, void))(v2 + 16))(v2, v3, 0, *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24));
}

void sub_100037580(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

id sub_10003759C(id a1, id a2)
{
  v6[0] = @"GKPlayerInternal";
  v6[1] = a2;
  id v2 = a2;
  id v3 = +[NSArray arrayWithObjects:v6 count:2];
  uint64_t v4 = +[GKResourceIdentifier resourceIdentifierForKeys:v3];

  return v4;
}

void sub_100037660(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) _gkMapWithBlock:&stru_1002D4BC8];
  id v5 = +[NSMutableSet setWithArray:v4];

  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_10003799C;
  v25[3] = &unk_1002D4C18;
  uint64_t v6 = *(void **)(a1 + 40);
  id v26 = *(id *)(a1 + 48);
  id v27 = *(id *)(a1 + 40);
  char v29 = *(unsigned char *)(a1 + 88);
  id v7 = v5;
  id v28 = v7;
  [v6 performBlockAndWait:v25];
  if (!os_log_GKGeneral) {
    id v8 = (id)GKOSLoggers();
  }
  if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
    sub_100044AA0();
  }
  id v9 = [v7 allObjects];
  id v10 = [v9 mutableCopy];
  id v11 = +[NSString stringWithFormat:@"%hhu", *(unsigned __int8 *)(a1 + 88)];
  [v10 addObject:v11];
  [*(id *)(a1 + 56) setObject:v10 forKeyedSubscript:@"callParams"];
  id v12 = +[GKNetworkRequestManager commonNetworkRequestManager];
  id v13 = objc_retainBlock(*(id *)(a1 + 72));
  unsigned int v14 = [v12 doesCallbackListExistFor:@"gk-get-profile-info" parameters:v10 callback:v13];

  if (v14)
  {
    [*(id *)(a1 + 56) setObject:&__kCFBooleanTrue forKeyedSubscript:@"skipCallbacks"];
  }
  else if ([v7 count])
  {
    uint64_t v15 = *(void **)(a1 + 56);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_100037AF4;
    v20[3] = &unk_1002D4CB8;
    id v16 = v9;
    char v24 = *(unsigned char *)(a1 + 88);
    uint64_t v17 = *(void *)(a1 + 80);
    id v21 = v16;
    uint64_t v23 = v17;
    int8x16_t v19 = *(int8x16_t *)(a1 + 56);
    id v18 = (id)v19.i64[0];
    int8x16_t v22 = vextq_s8(v19, v19, 8uLL);
    [v15 perform:v20];
  }
  v3[2](v3);
}

id sub_100037948(id a1, GKResourceIdentifier *a2, unint64_t a3)
{
  id v3 = [(GKResourceIdentifier *)a2 keys];
  uint64_t v4 = [v3 objectAtIndexedSubscript:1];

  return v4;
}

void sub_10003799C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) allObjects];
  id v3 = +[GKPlayerProfileCacheObject playerProfilesWithPlayerIDs:v2 inManagedObjectContext:*(void *)(a1 + 40)];

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100037A70;
  v4[3] = &unk_1002D4BF0;
  char v6 = *(unsigned char *)(a1 + 56);
  id v5 = *(id *)(a1 + 48);
  [v3 enumerateObjectsUsingBlock:v4];
}

void sub_100037A70(uint64_t a1, void *a2)
{
  id v5 = a2;
  if ([v5 availablePieces] == *(unsigned __int8 *)(a1 + 40)
    && ([v5 expired] & 1) == 0)
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = [v5 playerID];
    [v3 removeObject:v4];
  }
}

void sub_100037AF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[GKProfileService profileRequestForPlayerIDs:*(void *)(a1 + 32) pieces:*(unsigned __int8 *)(a1 + 64)];
  id v5 = +[GKNetworkRequestManager commonNetworkRequestManager];
  char v6 = [*(id *)(a1 + 40) clientProxy];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100037C28;
  v10[3] = &unk_1002D4C90;
  id v7 = *(void **)(a1 + 48);
  uint64_t v14 = *(void *)(a1 + 56);
  id v11 = v7;
  id v8 = *(id *)(a1 + 32);
  char v15 = *(unsigned char *)(a1 + 64);
  id v12 = v8;
  id v13 = v3;
  id v9 = v3;
  [v5 issueRequest:v4 bagKey:@"gk-get-profile-info" clientProxy:v6 handler:v10];
}

void sub_100037C28(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7 = a2;
  *(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = a4;
  [*(id *)(a1 + 32) setError:a3];
  if (v7)
  {
    id v8 = *(void **)(a1 + 32);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    _DWORD v9[2] = sub_100037D38;
    v9[3] = &unk_1002D4C68;
    double v13 = a4;
    id v10 = v7;
    id v11 = *(id *)(a1 + 40);
    char v14 = *(unsigned char *)(a1 + 64);
    id v12 = *(id *)(a1 + 32);
    [v8 performOnManagedObjectContext:v9];
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_100037D38(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  double v6 = *(double *)(a1 + 56);
  id v7 = a3;
  id v8 = +[NSDate dateWithTimeIntervalSinceNow:v6];
  id v9 = (id *)(a1 + 32);
  id v10 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"profile-infos"];
  if (v10)
  {
    id v11 = +[GKPlayerProfileCacheObject playerProfilesWithPlayerIDs:*(void *)(a1 + 40) inManagedObjectContext:v5];
    id v12 = [v10 _gkMapDictionaryWithKeyPath:@"input-id"];
    if (![v12 count])
    {
      uint64_t v13 = [v10 _gkMapDictionaryWithKeyPath:@"player-id"];

      id v12 = (void *)v13;
    }
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_100037FB4;
    v27[3] = &unk_1002D4C40;
    id v28 = v12;
    id v29 = v8;
    char v31 = *(unsigned char *)(a1 + 64);
    id v30 = v5;
    id v14 = v12;
    [v11 enumerateObjectsUsingBlock:v27];
  }
  else
  {
    char v15 = [*v9 objectForKeyedSubscript:@"status"];

    if (v15)
    {
      id v16 = [*v9 objectForKeyedSubscript:@"status"];
      uint64_t v17 = (uint64_t)[v16 integerValue];
    }
    else
    {
      uint64_t v17 = 1;
    }
    id v18 = +[NSError errorWithDomain:GKServerErrorDomain code:v17 userInfo:0];
    [*(id *)(a1 + 48) setError:v18];

    if (!os_log_GKGeneral) {
      id v19 = (id)GKOSLoggers();
    }
    double v20 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100044AD4((uint64_t)v9, v20, v21, v22, v23, v24, v25, v26);
    }
  }
  v7[2](v7);
}

void sub_100037FB4(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v4 playerID];
  id v7 = [v3 objectForKeyedSubscript:v5];

  if (v7) {
    double v6 = v7;
  }
  else {
    double v6 = &__NSDictionary0__struct;
  }
  [v4 updateWithServerRepresentation:v6 expirationDate:*(void *)(a1 + 40) pieces:*(unsigned __int8 *)(a1 + 56)];
  [*(id *)(a1 + 48) refreshObject:v4 mergeChanges:1];
}

void sub_100038060(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"callParams"];
  id v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"skipCallbacks"];

  if (v3) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v2 == 0;
  }
  if (!v4)
  {
    id v5 = +[GKNetworkRequestManager commonNetworkRequestManager];
    double v6 = [v5 retrieveAndClearCallbacks:@"gk-get-profile-info" parameters:v2];

    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v7 = v6;
    id v8 = [v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v16;
      do
      {
        id v11 = 0;
        do
        {
          if (*(void *)v16 != v10) {
            objc_enumerationMutation(v7);
          }
          uint64_t v12 = *(void *)(*((void *)&v15 + 1) + 8 * (void)v11);
          double v13 = *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
          id v14 = [*(id *)(a1 + 32) error:v15];
          (*(void (**)(uint64_t, void *, double))(v12 + 16))(v12, v14, v13);

          id v11 = (char *)v11 + 1;
        }
        while (v9 != v11);
        id v9 = [v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }
      while (v9);
    }
  }
}

void sub_10003830C(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_1000383C0;
  v5[3] = &unk_1002D3B38;
  id v6 = a2;
  id v3 = *(NSObject **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v4 = v6;
  dispatch_sync(v3, v5);
}

void sub_1000383C0(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100038448;
  v2[3] = &unk_1002D4D30;
  uint64_t v1 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  [v1 enumerateObjectsUsingBlock:v2];
}

void sub_100038448(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = [v4 playerID];
  if (v3) {
    [*(id *)(a1 + 32) setObject:v4 forKeyedSubscript:v3];
  }
}

void sub_1000384B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = [*(id *)(a1 + 48) integerValue];
  BOOL v7 = *(void *)(a1 + 64) != 0;
  id v8 = [*(id *)(a1 + 56) context];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_10003860C;
  void v12[3] = &unk_1002D4E70;
  id v13 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 56);
  __int16 v20 = *(_WORD *)(a1 + 80);
  uint64_t v10 = *(void *)(a1 + 32);
  id v14 = v9;
  uint64_t v15 = v10;
  id v17 = *(id *)(a1 + 64);
  id v18 = *(id *)(a1 + 72);
  id v16 = *(id *)(a1 + 48);
  id v19 = v3;
  id v11 = v3;
  [v4 fetchProfilesForPlayerIDs:v5 familiarity:v6 responseKind:v7 context:v8 handler:v12];
}

void sub_10003860C(uint64_t a1, void *a2, void *a3, char a4, char a5)
{
  id v9 = a2;
  id v10 = a3;
  if ((a4 & 1) == 0)
  {
    if (!os_log_GKGeneral) {
      id v11 = (id)GKOSLoggers();
    }
    uint64_t v12 = os_log_GKCache;
    if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
      sub_100044B78(a1, v12);
    }
    id v13 = *(void **)(a1 + 40);
    id v14 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKProfileService.m", 456, "-[GKProfileService getProfilesForPlayerIDs:discardingStaleData:handler:]_block_invoke");
    uint64_t v15 = [v13 transactionGroupWithName:v14];

    LODWORD(v14) = *(unsigned __int8 *)(a1 + 88);
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_1000388E0;
    v27[3] = &unk_1002D4DF8;
    void v27[4] = *(void *)(a1 + 48);
    id v28 = *(id *)(a1 + 32);
    char v33 = *(unsigned char *)(a1 + 89);
    id v29 = *(id *)(a1 + 40);
    id v16 = v15;
    id v30 = v16;
    id v31 = *(id *)(a1 + 64);
    id v32 = *(id *)(a1 + 72);
    [v16 perform:v27];
    if (v14 || (a5 & 1) == 0)
    {
      id v17 = *(void **)(a1 + 40);
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_100038C5C;
      v20[3] = &unk_1002D4E48;
      id v21 = v16;
      int8x16_t v19 = *(int8x16_t *)(a1 + 40);
      id v18 = (id)v19.i64[0];
      int8x16_t v22 = vextq_s8(v19, v19, 8uLL);
      id v23 = *(id *)(a1 + 32);
      id v24 = *(id *)(a1 + 56);
      id v25 = *(id *)(a1 + 64);
      id v26 = *(id *)(a1 + 72);
      [v17 perform:v20];
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
}

void sub_1000388E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 80);
  BOOL v7 = [*(id *)(a1 + 48) context];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_100038A10;
  void v12[3] = &unk_1002D4DD0;
  id v8 = *(id *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 32);
  id v10 = *(void **)(a1 + 40);
  id v13 = v8;
  uint64_t v14 = v9;
  id v15 = v10;
  id v17 = *(id *)(a1 + 64);
  id v16 = *(id *)(a1 + 48);
  id v18 = *(id *)(a1 + 72);
  id v19 = v3;
  id v11 = v3;
  [v4 loadProfilesForPlayerIDs:v5 pieces:v6 context:v7 handler:v12];
}

uint64_t sub_100038A10(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 setError:v4];
  LODWORD(v3) = [v4 gkIsNotConnectedToInternetError];

  if (v3)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100038B24;
    v8[3] = &unk_1002D4DA8;
    uint64_t v5 = *(void **)(a1 + 32);
    uint64_t v6 = *(void **)(a1 + 48);
    void v8[4] = *(void *)(a1 + 40);
    id v9 = v6;
    id v11 = *(id *)(a1 + 64);
    id v10 = *(id *)(a1 + 56);
    id v12 = *(id *)(a1 + 72);
    [v5 perform:v8];
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 80) + 16))();
}

void sub_100038B24(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = 2 * (*(void *)(a1 + 56) != 0);
  BOOL v7 = [*(id *)(a1 + 48) context];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_100038C10;
  v9[3] = &unk_1002D4D80;
  id v10 = *(id *)(a1 + 64);
  id v11 = v3;
  id v8 = v3;
  [v4 fetchProfilesForPlayerIDs:v5 familiarity:0 responseKind:v6 context:v7 handler:v9];
}

uint64_t sub_100038C10(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  id v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v2();
}

void sub_100038C5C(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1[4];
  uint64_t v5 = [a1[5] clientProxy];
  uint64_t v6 = [v5 replyQueue];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100038DA4;
  v10[3] = &unk_1002D4E20;
  id v11 = a1[6];
  id v7 = a1[4];
  id v8 = a1[5];
  id v12 = v7;
  id v13 = v8;
  id v14 = a1[7];
  id v15 = a1[8];
  id v16 = a1[9];
  id v17 = a1[10];
  id v18 = v3;
  id v9 = v3;
  [v4 notifyOnQueue:v6 block:v10];
}

void sub_100038DA4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 40) error];
  [*(id *)(a1 + 32) setError:v2];

  id v3 = [*(id *)(a1 + 40) error];

  if (v3)
  {
    id v4 = *(void (**)(void))(*(void *)(a1 + 88) + 16);
    v4();
  }
  else
  {
    uint64_t v5 = *(void **)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 56);
    id v7 = [*(id *)(a1 + 64) integerValue];
    uint64_t v8 = 2 * (*(void *)(a1 + 72) != 0);
    id v9 = [*(id *)(a1 + 32) context];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100038F04;
    v10[3] = &unk_1002D4D80;
    id v11 = *(id *)(a1 + 80);
    id v12 = *(id *)(a1 + 88);
    [v5 fetchProfilesForPlayerIDs:v6 familiarity:v7 responseKind:v8 context:v9 handler:v10];
  }
}

uint64_t sub_100038F04(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  id v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v2();
}

id sub_100038F50(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = [v3 objectForKeyedSubscript:v4];
  uint64_t v6 = [*(id *)(a1 + 40) objectForKeyedSubscript:v4];

  [v5 setScopedIDs:v6];

  return v5;
}

void sub_1000391A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v12 = GKFriendSupportPageURL;
  uint64_t v5 = +[NSArray arrayWithObjects:&v12 count:1];
  uint64_t v6 = [*(id *)(a1 + 40) clientProxy];
  id v7 = [v6 replyQueue];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_1000392E4;
  v9[3] = &unk_1002D3958;
  id v10 = *(id *)(a1 + 48);
  id v11 = v3;
  id v8 = v3;
  [v4 getValuesForKeys:v5 queue:v7 completion:v9];
}

void sub_1000392E4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6 || ![v5 count])
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100044C70();
    }
  }
  id v8 = [v5 objectForKeyedSubscript:GKFriendSupportPageURL];
  [*(id *)(a1 + 32) setResult:v8];

  [*(id *)(a1 + 32) setError:v6];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000393C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_100039688(uint64_t a1, void *a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100039768;
  v8[3] = &unk_1002D4FB0;
  id v4 = *(void **)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  id v10 = v5;
  uint64_t v11 = v6;
  id v12 = *(id *)(a1 + 32);
  id v7 = a2;
  [v4 performOnManagedObjectContext:v8];
  v7[2](v7);
}

void sub_100039768(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = +[GKPlayerProfileCacheObject selfPlayerID];
  if (v7)
  {
    id v8 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:v5];
    [v8 setStatus:*(void *)(a1 + 32)];
    [v8 expire];
    if (*(void *)(a1 + 32)) {
      CFStringRef v9 = *(const __CFString **)(a1 + 32);
    }
    else {
      CFStringRef v9 = &stru_1002E4F58;
    }
    id v10 = +[GKResource resourceWithID:v7 representedItem:v9];
    uint64_t v11 = *(void **)(a1 + 40);
    id v12 = [*(id *)(a1 + 48) credential];
    id v13 = [v11 setPlayerStatusWriterWithCredential:v12];
    id v14 = +[NSSet setWithObject:v10];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    void v15[2] = sub_100039900;
    v15[3] = &unk_1002D3BC8;
    id v16 = *(id *)(a1 + 56);
    id v17 = v6;
    [v13 writeResources:v14 handler:v15];
  }
}

uint64_t sub_100039900(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setError:a2];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_100039948(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100039BD0(uint64_t a1, void *a2)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_100039CAC;
  v9[3] = &unk_1002D4FB0;
  id v4 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  id v7 = *(void **)(a1 + 56);
  id v10 = v5;
  uint64_t v11 = v6;
  id v12 = v7;
  id v13 = *(id *)(a1 + 64);
  id v8 = a2;
  [v4 performOnManagedObjectContext:v9];
  v8[2](v8);
}

void sub_100039CAC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:a2];
  [v6 setAvatarType:*(void *)(a1 + 32)];
  id v7 = [*(id *)(a1 + 40) localPlayer];
  id v8 = [v7 playerID];
  CFStringRef v9 = GKAvatarSubdirectoryNameForPlayerID();

  id v10 = [v6 imageCacheKeyPathsByKey];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100039E10;
  void v13[3] = &unk_1002D4FD8;
  id v14 = *(id *)(a1 + 48);
  id v15 = *(id *)(a1 + 56);
  id v16 = v9;
  id v17 = v6;
  id v11 = v6;
  id v12 = v9;
  [v10 enumerateKeysAndObjectsUsingBlock:v13];

  v5[2](v5);
}

void sub_100039E10(uint64_t a1, void *a2, void *a3)
{
  id v11 = a3;
  id v5 = *(void **)(a1 + 32);
  id v6 = a2;
  id v7 = [v5 objectForKeyedSubscript:v6];
  id v8 = [*(id *)(a1 + 40) objectForKeyedSubscript:v6];

  if (v7) {
    BOOL v9 = v8 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    id v10 = GKImageCachePathForSubdirectoryAndFilename();
    [*(id *)(a1 + 56) setValue:v10 forKeyPath:v11];
    [v7 _gkWriteToImageCacheWithURLString:v10];
  }
}

uint64_t sub_100039EE0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10003A0F0(uint64_t a1, void *a2)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_10003A1D4;
  v7[3] = &unk_1002D4FB0;
  id v4 = *(void **)(a1 + 32);
  id v5 = *(void **)(a1 + 48);
  void v7[4] = *(void *)(a1 + 40);
  id v8 = v5;
  id v9 = *(id *)(a1 + 56);
  id v10 = *(id *)(a1 + 32);
  id v6 = a2;
  [v4 performOnManagedObjectContext:v7];
  v6[2](v6);
}

void sub_10003A1D4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = [*(id *)(a1 + 32) localPlayer];
  id v6 = [v5 playerID];

  v21[0] = @"photo-data";
  v21[1] = GKAvatarTypeKey;
  uint64_t v7 = *(void *)(a1 + 48);
  v22[0] = *(void *)(a1 + 40);
  v22[1] = v7;
  id v8 = +[NSDictionary dictionaryWithObjects:v22 forKeys:v21 count:2];
  id v9 = +[GKResource resourceWithID:v6 representedItem:v8];
  id v10 = [*(id *)(a1 + 32) clientProxy];
  id v11 = [*(id *)(a1 + 32) credential];
  id v12 = [v10 setPlayerPhotoWriterWithCredential:v11];
  id v13 = +[NSSet setWithObject:v9];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  void v17[2] = sub_10003A3B8;
  v17[3] = &unk_1002D3DD0;
  id v14 = *(id *)(a1 + 56);
  uint64_t v15 = *(void *)(a1 + 32);
  id v18 = v14;
  uint64_t v19 = v15;
  id v20 = v4;
  id v16 = v4;
  [v12 writeResources:v13 handler:v17];
}

uint64_t sub_10003A3B8(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setError:a2];
  if (!a2)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    uint64_t v5[2] = sub_10003A460;
    v5[3] = &unk_1002D3DF8;
    void v5[4] = *(void *)(a1 + 40);
    +[GKClientProxy enumerateClientsUsingBlock:v5];
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10003A460(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = [*(id *)(a1 + 32) clientProxy];
  unsigned __int8 v4 = [v5 isEqual:v3];

  if ((v4 & 1) == 0) {
    [v5 refreshContentsForDataType:16 userInfo:0];
  }
}

uint64_t sub_10003A4DC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10003A6FC(int8x16_t *a1, void *a2)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_10003A7B8;
  v6[3] = &unk_1002D4078;
  int8x16_t v5 = a1[2];
  id v3 = (id)v5.i64[0];
  int8x16_t v7 = vextq_s8(v5, v5, 8uLL);
  unsigned __int8 v4 = a2;
  [v3 performOnManagedObjectContext:v6];
  v4[2](v4);
}

void sub_10003A7B8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:a2];
  [v6 clearImages];
  int8x16_t v7 = [*(id *)(a1 + 32) localPlayer];
  id v8 = [v7 playerID];

  id v9 = +[GKResource resourceWithID:v8];
  id v10 = [*(id *)(a1 + 32) clientProxy];
  id v11 = [*(id *)(a1 + 32) credential];
  id v12 = [v10 deletePlayerPhotoWriterWithCredential:v11];
  id v13 = +[NSSet setWithObject:v9];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  void v15[2] = sub_10003A944;
  v15[3] = &unk_1002D3BC8;
  id v16 = *(id *)(a1 + 40);
  id v17 = v5;
  id v14 = v5;
  [v12 writeResources:v13 handler:v15];
}

uint64_t sub_10003A944(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setError:a2];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

uint64_t sub_10003A98C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10003AACC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) context];
  id v3 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:v2];

  unsigned __int8 v4 = [v3 isFindable];
  [v3 setFindable:*(unsigned __int8 *)(a1 + 56)];
  CFStringRef v15 = @"findable";
  id v5 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 56)];
  id v16 = v5;
  id v6 = +[NSDictionary dictionaryWithObjects:&v16 forKeys:&v15 count:1];

  int8x16_t v7 = +[GKNetworkRequestManager commonNetworkRequestManager];
  id v8 = [*(id *)(a1 + 40) clientProxy];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10003AC94;
  v11[3] = &unk_1002D3F90;
  int8x16_t v10 = *(int8x16_t *)(a1 + 32);
  id v9 = (id)v10.i64[0];
  int8x16_t v12 = vextq_s8(v10, v10, 8uLL);
  unsigned __int8 v14 = v4;
  id v13 = *(id *)(a1 + 48);
  [v7 issueRequest:v6 bagKey:@"gk-set-findable" clientProxy:v8 handler:v11];
}

void sub_10003AC94(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    int8x16_t v7 = [*(id *)(a1 + 40) context];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10003ADA0;
    v10[3] = &unk_1002D5000;
    id v11 = *(id *)(a1 + 40);
    char v12 = *(unsigned char *)(a1 + 56);
    [v7 performBlock:v10];
  }
  else
  {
    id v8 = [*(id *)(a1 + 32) clientProxy];
    [v8 refreshContentsForDataType:6 userInfo:0];
  }
  uint64_t v9 = *(void *)(a1 + 48);
  if (v9) {
    (*(void (**)(uint64_t, id))(v9 + 16))(v9, v6);
  }
}

void sub_10003ADA0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) context];
  id v3 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:v2];

  [v3 setFindable:*(unsigned __int8 *)(a1 + 40)];
}

void sub_10003B05C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:a2];
  int8x16_t v7 = [v6 alias];
  [v6 setAlias:*(void *)(a1 + 32)];
  uint64_t v8 = *(void *)(a1 + 32);
  v22[1] = @"suggestions-count";
  v23[0] = v8;
  v22[0] = @"player-nickname";
  uint64_t v9 = +[NSNumber numberWithInteger:*(void *)(a1 + 56)];
  v23[1] = v9;
  int8x16_t v10 = +[NSDictionary dictionaryWithObjects:v23 forKeys:v22 count:2];

  id v11 = +[GKNetworkRequestManager commonNetworkRequestManager];
  char v12 = [*(id *)(a1 + 40) clientProxy];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  void v17[2] = sub_10003B238;
  v17[3] = &unk_1002D5050;
  id v13 = *(id *)(a1 + 48);
  uint64_t v14 = *(void *)(a1 + 40);
  id v18 = v13;
  uint64_t v19 = v14;
  id v20 = v7;
  id v21 = v5;
  id v15 = v7;
  id v16 = v5;
  [v11 issueRequest:v10 bagKey:@"gk-set-player-nickname" clientProxy:v12 handler:v17];
}

void sub_10003B238(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  int8x16_t v7 = [v6 objectForKeyedSubscript:@"suggestions"];
  uint64_t v8 = [v6 objectForKeyedSubscript:@"player-nickname-update-status"];

  id v9 = [v8 unsignedIntegerValue];
  if (v7) {
    int8x16_t v10 = v7;
  }
  else {
    int8x16_t v10 = &__NSArray0__struct;
  }
  [*(id *)(a1 + 32) setResult:v10];
  id v11 = +[NSNumber numberWithUnsignedInteger:v9];
  [*(id *)(a1 + 32) setObject:v11 forKeyedSubscript:@"updateStatus"];

  [*(id *)(a1 + 32) setError:v5];
  if (v5 || v9)
  {
    if ([v7 count]) {
      goto LABEL_11;
    }
    uint64_t v14 = os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      id v15 = (id)GKOSLoggers();
      uint64_t v14 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      sub_100044D80();
      if (v5) {
        goto LABEL_12;
      }
    }
    else
    {
LABEL_11:
      if (v5)
      {
LABEL_12:
        [*(id *)(a1 + 32) setObject:&off_1002F1F40 forKeyedSubscript:@"updateStatus"];
        if (!os_log_GKGeneral) {
          id v16 = (id)GKOSLoggers();
        }
        if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
          sub_100044D18();
        }
      }
    }
    id v17 = [*(id *)(a1 + 32) context];
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    void v18[2] = sub_10003B4E8;
    v18[3] = &unk_1002D3B38;
    id v13 = &v19;
    id v19 = *(id *)(a1 + 32);
    id v20 = *(id *)(a1 + 48);
    [v17 performBlock:v18];

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    goto LABEL_17;
  }
  char v12 = *(void **)(a1 + 40);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  void v21[2] = sub_10003B4D8;
  v21[3] = &unk_1002D3A20;
  id v13 = &v22;
  id v22 = *(id *)(a1 + 56);
  [v12 invalidateCachedProfileForLocalPlayerWithHandler:v21];
LABEL_17:
}

uint64_t sub_10003B4D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10003B4E8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) context];
  id v3 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:v2];

  [v3 setAlias:*(void *)(a1 + 40)];
}

void sub_10003B568(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v6 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"updateStatus"];
  id v4 = [v3 unsignedIntegerValue];
  id v5 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, id, void *))(v2 + 16))(v2, v6, v4, v5);
}

void sub_10003B844(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[GKNetworkRequestManager commonNetworkRequestManager];
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = [*(id *)(a1 + 40) clientProxy];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10003B938;
  v8[3] = &unk_1002D50A0;
  id v9 = *(id *)(a1 + 48);
  id v10 = v3;
  id v7 = v3;
  [v4 issueRequest:v5 bagKey:@"gk-get-suggested-player-nickname" clientProxy:v6 handler:v8];
}

void sub_10003B938(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = [a2 objectForKeyedSubscript:@"suggestions"];
  if ([v6 count]) {
    goto LABEL_5;
  }
  id v7 = os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    id v8 = (id)GKOSLoggers();
    id v7 = os_log_GKGeneral;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    sub_100044E1C();
    if (!v5) {
      goto LABEL_10;
    }
  }
  else
  {
LABEL_5:
    if (!v5) {
      goto LABEL_10;
    }
  }
  if (!os_log_GKGeneral) {
    id v9 = (id)GKOSLoggers();
  }
  if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
    sub_100044DB4();
  }
LABEL_10:
  if (v6) {
    id v10 = v6;
  }
  else {
    id v10 = &__NSArray0__struct;
  }
  [*(id *)(a1 + 32) setResult:v10];
  [*(id *)(a1 + 32) setError:v5];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10003BA54(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_10003BCE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[GKNetworkRequestManager commonNetworkRequestManager];
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = [*(id *)(a1 + 40) clientProxy];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10003BDD8;
  v8[3] = &unk_1002D50A0;
  id v9 = *(id *)(a1 + 48);
  id v10 = v3;
  id v7 = v3;
  [v4 issueRequest:v5 bagKey:@"gk-get-localized-key" clientProxy:v6 handler:v8];
}

void sub_10003BDD8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = [a2 objectForKeyedSubscript:@"value"];
  id v7 = v6;
  if (v6 && [v6 length]) {
    goto LABEL_6;
  }
  id v8 = os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    id v9 = (id)GKOSLoggers();
    id v8 = os_log_GKGeneral;
  }
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
LABEL_6:
    if (!v5) {
      goto LABEL_11;
    }
  }
  else
  {
    sub_100044EB8();
    if (!v5) {
      goto LABEL_11;
    }
  }
  if (!os_log_GKGeneral) {
    id v10 = (id)GKOSLoggers();
  }
  if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
    sub_100044E50();
  }
LABEL_11:
  [*(id *)(a1 + 32) setResult:v7];
  [*(id *)(a1 + 32) setError:v5];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10003BEF0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_10003C108(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:a2];
  unsigned int v7 = [v6 globalFriendListAccess];
  id v8 = (id *)&GKGlobalFriendListAccessAllowed;
  id v9 = (id *)&GKGlobalFriendListAccessDenied;
  int v10 = *(_DWORD *)(a1 + 48);
  if (v10 != 1) {
    id v9 = (id *)&GKGlobalFriendListAccessUndetermined;
  }
  if (v10) {
    id v8 = v9;
  }
  id v11 = *v8;
  uint64_t v20 = GKGlobalFriendListAccessKey;
  id v21 = v11;
  char v12 = +[NSDictionary dictionaryWithObjects:&v21 forKeys:&v20 count:1];
  [v6 setGlobalFriendListAccess:*(unsigned int *)(a1 + 48)];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  void v16[2] = sub_10003C2A0;
  v16[3] = &unk_1002D50F0;
  id v13 = *(void **)(a1 + 32);
  id v14 = *(id *)(a1 + 40);
  unsigned int v19 = v7;
  id v17 = v14;
  id v18 = v5;
  id v15 = v5;
  [v13 setProfileSettings:v12 handler:v16];
}

uint64_t sub_10003C2A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  [*(id *)(a1 + 32) setError:];
  if (a3)
  {
    id v8 = [*(id *)(a1 + 32) context];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10003C368;
    v10[3] = &unk_1002D50C8;
    id v11 = *(id *)(a1 + 32);
    int v12 = *(_DWORD *)(a1 + 48);
    [v8 performBlock:v10];
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v5, v6, v7);
}

void sub_10003C368(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) context];
  id v3 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:v2];

  [v3 setGlobalFriendListAccess:*(unsigned int *)(a1 + 40)];
}

void sub_10003C3E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10003C608(uint64_t a1, void *a2)
{
  id v3 = a2;
  CFStringRef v12 = @"arcade-subscription-expiration";
  [*(id *)(a1 + 32) timeIntervalSince1970];
  uint64_t v5 = +[NSNumber numberWithDouble:v4 * 1000.0];
  id v13 = v5;
  uint64_t v6 = +[NSDictionary dictionaryWithObjects:&v13 forKeys:&v12 count:1];

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_10003C74C;
  v9[3] = &unk_1002D3958;
  uint64_t v7 = *(void **)(a1 + 40);
  id v10 = *(id *)(a1 + 48);
  id v11 = v3;
  id v8 = v3;
  [v7 setProfileSettings:v6 handler:v9];
}

uint64_t sub_10003C74C(uint64_t a1)
{
  [*(id *)(a1 + 32) setError:];
  id v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v2();
}

void sub_10003C790(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10003CA2C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!os_log_GKGeneral) {
    id v7 = (id)GKOSLoggers();
  }
  id v8 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Done syncing friend invites allowed flag.", v10, 2u);
  }
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v9 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100044EEC();
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10003CD60(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!os_log_GKGeneral) {
    id v7 = (id)GKOSLoggers();
  }
  id v8 = os_log_GKOnboarding;
  if (os_log_type_enabled(os_log_GKOnboarding, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Done syncing privacy notice version.", v10, 2u);
  }
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v9 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100044F54();
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10003D100(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:a2];
  unsigned int v7 = [v6 achievementsVisibility];
  CFStringRef v20 = @"privacy-settings";
  uint64_t v8 = *(void *)(a1 + 32);
  v18[0] = @"achievements";
  v18[1] = @"friends";
  v19[0] = v8;
  v19[1] = v8;
  void v18[2] = @"games-played";
  v19[2] = v8;
  id v9 = +[NSDictionary dictionaryWithObjects:v19 forKeys:v18 count:3];
  id v21 = v9;
  id v10 = +[NSDictionary dictionaryWithObjects:&v21 forKeys:&v20 count:1];

  [v6 setAchievementsVisibility:*(unsigned int *)(a1 + 56)];
  [v6 setGamesPlayedVisibility:*(unsigned int *)(a1 + 56)];
  [v6 setFriendsVisibility:*(unsigned int *)(a1 + 56)];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10003D2B8;
  v14[3] = &unk_1002D50F0;
  id v11 = *(void **)(a1 + 40);
  id v12 = *(id *)(a1 + 48);
  unsigned int v17 = v7;
  id v15 = v12;
  id v16 = v5;
  id v13 = v5;
  [v11 setProfileSettings:v10 handler:v14];
}

uint64_t sub_10003D2B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  [*(id *)(a1 + 32) setError:];
  if (a3)
  {
    uint64_t v8 = [*(id *)(a1 + 32) context];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10003D380;
    v10[3] = &unk_1002D50C8;
    id v11 = *(id *)(a1 + 32);
    int v12 = *(_DWORD *)(a1 + 48);
    [v8 performBlock:v10];
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v5, v6, v7);
}

void sub_10003D380(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) context];
  id v3 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:v2];

  [v3 setGamesPlayedVisibility:*(unsigned int *)(a1 + 40)];
  [v3 setFriendsVisibility:*(unsigned int *)(a1 + 40)];
  [v3 setAchievementsVisibility:*(unsigned int *)(a1 + 40)];
}

void sub_10003D418(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) error];

  if (!v2) {
    [*(id *)(a1 + 40) refreshContentsForDataType:17 userInfo:0];
  }
  uint64_t v3 = *(void *)(a1 + 48);
  id v4 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);
}

void sub_10003D660(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = +[GKNetworkRequestManager commonNetworkRequestManager];
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = [*(id *)(a1 + 40) clientProxy];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10003D75C;
  v11[3] = &unk_1002D5190;
  id v8 = *(id *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 40);
  id v12 = v8;
  uint64_t v13 = v9;
  id v14 = v4;
  id v10 = v4;
  [v5 issueRequest:v6 bagKey:@"gk-set-profile-settings" clientProxy:v7 handler:v11];
}

void sub_10003D75C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setResult:a2];
  [*(id *)(a1 + 32) setError:v6];

  if (v6)
  {
    uint64_t v7 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    v7();
  }
  else
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    _DWORD v9[2] = sub_10003D850;
    v9[3] = &unk_1002D3A20;
    id v8 = *(void **)(a1 + 40);
    id v10 = *(id *)(a1 + 48);
    [v8 invalidateCachedProfileForLocalPlayerWithHandler:v9];
  }
}

uint64_t sub_10003D850(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10003D860(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  uint64_t v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_10003DA04(id a1, NSManagedObjectContext *a2, id a3)
{
  id v4 = (void (**)(void))a3;
  id v5 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:a2];
  [v5 expire];
  v4[2](v4);
}

uint64_t sub_10003DA84(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10003DC7C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v7 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:a2];
  id v6 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v7 achievementsVisibility]);
  [*(id *)(a1 + 32) setResult:v6];

  v5[2](v5);
}

void sub_10003DD2C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) result];
  (*(void (**)(void, id))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), [v2 intValue]);
}

void sub_10003DF88(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:a2];
  id v7 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v6 contactsIntegrationConsent]);
  [*(id *)(a1 + 32) setResult:v7];

  if (!os_log_GKGeneral) {
    id v8 = (id)GKOSLoggers();
  }
  uint64_t v9 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    id v10 = *(void **)(a1 + 32);
    id v11 = v9;
    id v12 = [v10 result];
    int v13 = 138412290;
    id v14 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "GKProfileService: getContactsIntegrationConsentWithCompletionHandler: result=%@", (uint8_t *)&v13, 0xCu);
  }
  v5[2](v5);
}

void sub_10003E0E4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) result];
  (*(void (**)(void, id))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), [v2 intValue]);
}

void sub_10003E3A8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:v5];
  unsigned int v8 = [v7 contactsIntegrationConsent];
  if (*(_DWORD *)(a1 + 48) == v8)
  {
    if (!os_log_GKGeneral) {
      id v9 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100044FBC();
    }
    v6[2](v6);
  }
  else
  {
    unsigned int v10 = v8;
    [v7 setContactsIntegrationConsent:];
    id v11 = (id *)&GKContactsIntegrationConsentAllowed;
    id v12 = (id *)&GKContactsIntegrationConsentDenied;
    int v13 = *(_DWORD *)(a1 + 48);
    if (v13) {
      id v12 = (id *)&GKContactsIntegrationConsentUndetermined;
    }
    if (v13 != 1) {
      id v11 = v12;
    }
    id v14 = *v11;
    uint64_t v23 = GKContactsIntegrationConsentKey;
    id v24 = v14;
    id v15 = +[NSDictionary dictionaryWithObjects:&v24 forKeys:&v23 count:1];
    objc_initWeak(&location, *(id *)(a1 + 32));
    id v16 = *(void **)(a1 + 32);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    void v17[2] = sub_10003E608;
    v17[3] = &unk_1002D5248;
    id v18 = *(id *)(a1 + 40);
    objc_copyWeak(&v20, &location);
    unsigned int v21 = v10;
    unsigned int v19 = v6;
    [v16 setProfileSettings:v15 handler:v17];

    objc_destroyWeak(&v20);
    objc_destroyWeak(&location);
  }
}

void sub_10003E5E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10003E608(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  [*(id *)(a1 + 32) setError:v6];
  id v7 = *(void **)(a1 + 32);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10003E72C;
  void v13[3] = &unk_1002D5220;
  objc_copyWeak(&v16, (id *)(a1 + 48));
  id v8 = v6;
  id v14 = v8;
  int v17 = *(_DWORD *)(a1 + 56);
  id v9 = v5;
  id v15 = v9;
  [v7 performOnManagedObjectContext:v13];
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v10, v11, v12);

  objc_destroyWeak(&v16);
}

void sub_10003E714(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10003E72C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v8 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:v6];

  if (*(void *)(a1 + 32))
  {
    unsigned int v10 = *(_DWORD *)(a1 + 56);
    id v9 = (int *)(a1 + 56);
    [v8 setContactsIntegrationConsent:v10];
    if (!os_log_GKGeneral) {
      id v11 = (id)GKOSLoggers();
    }
    uint64_t v12 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100044FFC(v9, v12);
    }
    v5[2](v5);
  }
  else
  {
    int v13 = [*(id *)(a1 + 40) objectForKeyedSubscript:GKContactsAssociationIDKey];
    id v14 = +[GKContactsIntegrationUserSettings associationIDFromServerResult:v13];
    [v8 setContactsAssociationID:v14];

    id v15 = [*(id *)(a1 + 40) objectForKeyedSubscript:GKServiceLastUpdateTimestamp];
    id v16 = +[GKContactsIntegrationUserSettings dateFromServerResult:v15];
    [v8 setServiceLastUpdatedTimestamp:v16];

    if (!os_log_GKGeneral) {
      id v17 = (id)GKOSLoggers();
    }
    id v18 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "GKProfileService: setContactsIntegrationConsent from game center server succeeded", buf, 2u);
    }
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_10003E980;
    void v19[3] = &unk_1002D45D8;
    id v20 = v5;
    [WeakRetained updateContactsIntegrationInfoFromLocalPlayerProfile:v8 completionHandler:v19];
  }
}

uint64_t sub_10003E980(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10003E990(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) error];

  if (!v2) {
    [*(id *)(a1 + 40) refreshContentsForDataType:17 userInfo:0];
  }
  uint64_t v3 = *(void *)(a1 + 48);
  id v4 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);
}

uint64_t sub_10003EC4C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10003EF00(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) contactsIntegrationController];
  uint64_t v11 = *(void *)(a1 + 40);
  id v5 = +[NSArray arrayWithObjects:&v11 count:1];
  uint64_t v6 = *(unsigned __int8 *)(a1 + 56);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10003F02C;
  v8[3] = &unk_1002D5270;
  id v9 = *(id *)(a1 + 48);
  id v10 = v3;
  id v7 = v3;
  [v4 getRelationshipsForContacts:v5 updateExistingContactEntries:v6 completionHandler:v8];
}

uint64_t sub_10003F02C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = *(void **)(a1 + 32);
  id v7 = a4;
  [v6 setResult:a2];
  [*(id *)(a1 + 32) setError:v7];

  id v8 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v8();
}

void sub_10003F09C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_10003F3AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) contactsIntegrationController];
  uint64_t v5 = *(unsigned __int8 *)(a1 + 56);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10003F49C;
  v8[3] = &unk_1002D5298;
  uint64_t v6 = *(void *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  id v11 = v3;
  id v10 = *(id *)(a1 + 40);
  id v7 = v3;
  [v4 getRelationshipsForContacts:v6 updateExistingContactEntries:v5 completionHandler:v8];
}

void sub_10003F49C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    if (!os_log_GKGeneral) {
      id v10 = (id)GKOSLoggers();
    }
    id v11 = (void *)os_log_GKContacts;
    if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG)) {
      sub_1000451A4(v11);
    }
    [*(id *)(a1 + 32) setResult:0];
    [*(id *)(a1 + 32) setError:v9];
  }
  else
  {
    if (v7)
    {
      uint64_t v12 = +[GKProfileServicePrivate parseContactAssociationIDsFromRelationships:v7 contactAssociationIDMap:v8 contacts:*(void *)(a1 + 40)];
      [*(id *)(a1 + 32) setResult:v12];
      [*(id *)(a1 + 32) setError:0];
      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();

      goto LABEL_10;
    }
    if (!os_log_GKGeneral) {
      id v13 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG)) {
      sub_100045170();
    }
    [*(id *)(a1 + 32) setResult:0];
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
LABEL_10:
}

void sub_10003F614(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_10003F888(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  uint64_t v6 = a3;
  id v7 = a2;
  id v8 = [v5 contactsIntegrationController];
  id v9 = [v8 getContactsForContactAssociationIDs:*(void *)(a1 + 40) withContext:v7];

  [*(id *)(a1 + 48) setResult:v9];
  v6[2](v6);
}

void sub_10003F930(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) result];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t sub_10003FAA8(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers();
  }
  if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG)) {
    sub_100045268();
  }
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

void sub_10003FC00(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!os_log_GKGeneral) {
    id v4 = (id)GKOSLoggers();
  }
  uint64_t v5 = os_log_GKContacts;
  if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG)) {
    sub_10004529C(a1, v5, v6, v7, v8, v9, v10, v11);
  }
  uint64_t v12 = *(void *)(a1 + 40);
  if (v12) {
    (*(void (**)(uint64_t, id))(v12 + 16))(v12, v3);
  }
}

void sub_10003FD54(id *a1, int a2)
{
  if (a2
    && (+[GKPreferences shared],
        id v3 = objc_claimAutoreleasedReturnValue(),
        unsigned __int8 v4 = [v3 isAddingFriendsRestricted],
        v3,
        (v4 & 1) == 0))
  {
    id v9 = a1[4];
    uint64_t v10 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKProfileService.m", 1352, "-[GKProfileServicePrivate filterForContactIDsSupportingFriendingViaPushFromContactIDs:withCompletion:]_block_invoke");
    uint64_t v11 = [v9 transactionGroupWithName:v10];

    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    void v21[2] = sub_10003FFE8;
    v21[3] = &unk_1002D3D30;
    void v21[4] = a1[4];
    id v12 = v11;
    id v22 = v12;
    id v23 = a1[5];
    [v12 performOnManagedObjectContext:v21];
    id v13 = [a1[4] clientProxy];
    id v14 = [v13 replyQueue];
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    void v18[2] = sub_100040090;
    void v18[3] = &unk_1002D3930;
    id v15 = a1[6];
    id v19 = v12;
    id v20 = v15;
    id v8 = v12;
    [v8 notifyOnQueue:v14 block:v18];
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG)) {
      sub_10004530C();
    }
    uint64_t v6 = [a1[4] clientProxy];
    uint64_t v7 = [v6 replyQueue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100040108;
    block[3] = &unk_1002D3A20;
    id v17 = a1[6];
    dispatch_async(v7, block);

    id v8 = v17;
  }
}

void sub_10003FFE8(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = a3;
  id v7 = a2;
  id v9 = [v5 contactsIntegrationController];
  id v8 = [v9 filterForContactIDsSupportingFriendingViaPushFromContactIDs:*(void *)(a1 + 48) withContext:v7];

  [*(id *)(a1 + 40) setResult:v8];
  v6[2](v6);
}

void sub_100040090(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_100040108(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSSet set];
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0);
}

void sub_100040320(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = v5;
  }
  else
  {
    id v7 = +[NSDictionary dictionary];
  }
  id v8 = v7;
  if (v6 || ![v7 count])
  {
    if (!os_log_GKGeneral) {
      id v9 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100045374();
    }
  }
  (*(void (**)(void, BOOL))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), [v8 integerValueFromKey:GKFriendingViaPushEnabled defaultValue:1] == (id)1);
}

void sub_1000405D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10004069C;
  v10[3] = &unk_1002D52E8;
  id v6 = *(id *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 32);
  id v11 = v6;
  uint64_t v12 = v8;
  id v13 = v3;
  uint64_t v14 = v7;
  id v9 = v3;
  [v4 getProfilesForPlayerIDs:v5 handler:v10];
}

void sub_10004069C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 32);
  id v7 = a3;
  [v6 setObject:v5 forKeyedSubscript:@"profiles"];
  [*(id *)(a1 + 32) setError:v7];

  if (!v7 && (*(unsigned char *)(a1 + 56) & 1) != 0)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100040790;
    void v13[3] = &unk_1002D4078;
    uint64_t v12 = *(void **)(a1 + 32);
    void v13[4] = *(void *)(a1 + 40);
    id v14 = v5;
    [v12 performOnManagedObjectContext:v13];
  }
  (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), v8, v9, v10, v11);
}

void sub_100040790(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  uint64_t v8 = a3;
  id v6 = a2;
  id v7 = [v5 contactsIntegrationController];
  [v7 populateContactInfoForProfiles:*(void *)(a1 + 40) withContext:v6];

  v8[2]();
}

void sub_100040820(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  id v3 = [*(id *)(a1 + 32) error];

  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    id v5 = (void *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000453DC(v2, v5);
    }
    uint64_t v6 = *(void *)(a1 + 40);
    id v7 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, void, void *))(v6 + 16))(v6, 0, v7);
  }
  else
  {
    id v8 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"profiles"];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_100040B10(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_100040BE4;
  v9[3] = &unk_1002D5338;
  id v10 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 32);
  id v11 = v6;
  uint64_t v12 = v7;
  id v13 = v3;
  id v8 = v3;
  [v4 getProfilesForPlayerIDs:v5 handler:v9];
}

void sub_100040BE4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 32);
  id v7 = a3;
  [v6 setObject:v5 forKeyedSubscript:@"profiles"];
  [*(id *)(a1 + 32) setError:v7];

  if (!v7 && [*(id *)(a1 + 40) count])
  {
    id v8 = *(void **)(a1 + 32);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    _DWORD v9[2] = sub_100040CF4;
    v9[3] = &unk_1002D3D30;
    void v9[4] = *(void *)(a1 + 48);
    id v10 = v5;
    id v11 = *(id *)(a1 + 40);
    [v8 performOnManagedObjectContext:v9];
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_100040CF4(void *a1, void *a2, void *a3)
{
  id v5 = (void *)a1[4];
  id v8 = a3;
  id v6 = a2;
  id v7 = [v5 contactsIntegrationController];
  [v7 populateContactInfoForProfiles:a1[5] playerIdToContactAssociationIdMap:a1[6] withContext:v6];

  v8[2]();
}

void sub_100040D84(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  id v3 = [*(id *)(a1 + 32) error];

  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    id v5 = (void *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10004546C(v2, v5);
    }
    uint64_t v6 = *(void *)(a1 + 40);
    id v7 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, void, void *))(v6 + 16))(v6, 0, v7);
  }
  else
  {
    id v8 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"profiles"];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_10004114C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_100041174(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = +[GKPlayerProfileCacheObject playerProfileWithPlayerID:*(void *)(a1 + 32) inManagedObjectContext:a2];
  if ([v6 isValid])
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers();
    }
    id v8 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v22 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Profile is still valid for: %@", buf, 0xCu);
    }
    v5[2](v5);
  }
  else
  {
    id v10 = +[GKProfileService profileRequestForPlayerIDs:*(void *)(a1 + 40) pieces:*(unsigned __int8 *)(a1 + 72)];
    id v11 = +[GKNetworkRequestManager commonNetworkRequestManager];
    uint64_t v12 = [*(id *)(a1 + 48) clientProxy];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    void v15[2] = sub_100041388;
    v15[3] = &unk_1002D5388;
    id v16 = *(id *)(a1 + 56);
    id v13 = *(id *)(a1 + 40);
    char v20 = *(unsigned char *)(a1 + 72);
    uint64_t v14 = *(void *)(a1 + 64);
    id v17 = v13;
    uint64_t v19 = v14;
    id v18 = v5;
    [v11 issueRequest:v10 bagKey:@"gk-get-profile-info" clientProxy:v12 handler:v15];
  }
}

void sub_100041388(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7 = a2;
  id v8 = a3;
  if (v7)
  {
    uint64_t v9 = *(void **)(a1 + 32);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_1000414D4;
    void v12[3] = &unk_1002D5360;
    double v19 = a4;
    id v13 = v7;
    id v10 = *(id *)(a1 + 40);
    char v20 = *(unsigned char *)(a1 + 64);
    uint64_t v11 = *(void *)(a1 + 56);
    id v14 = v10;
    uint64_t v18 = v11;
    id v15 = *(id *)(a1 + 32);
    id v16 = v8;
    id v17 = *(id *)(a1 + 48);
    [v9 performOnManagedObjectContext:v12];
  }
  else
  {
    *(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = a4;
    [*(id *)(a1 + 32) setError:v8];
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_1000414D4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  id v7 = +[NSDate dateWithTimeIntervalSinceNow:*(double *)(a1 + 80)];
  id v8 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"profile-infos"];
  if (v8)
  {
    uint64_t v9 = +[GKPlayerProfileCacheObject playerProfilesWithPlayerIDs:*(void *)(a1 + 40) inManagedObjectContext:v5];
    id v10 = [v8 _gkMapDictionaryWithKeyPath:@"input-id"];
    if (![v10 count])
    {
      uint64_t v11 = [v8 _gkMapDictionaryWithKeyPath:@"player-id"];

      id v10 = (void *)v11;
    }
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    void v16[2] = sub_100041694;
    v16[3] = &unk_1002D4C40;
    id v17 = v10;
    id v18 = v7;
    char v20 = *(unsigned char *)(a1 + 88);
    id v19 = v5;
    id v12 = v10;
    [v9 enumerateObjectsUsingBlock:v16];
  }
  v6[2](v6);
  *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = *(void *)(a1 + 80);
  [*(id *)(a1 + 48) setError:*(void *)(a1 + 56)];
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 64) + 16))(*(void *)(a1 + 64), v13, v14, v15);
}

void sub_100041694(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v4 playerID];
  id v7 = [v3 objectForKeyedSubscript:v5];

  if (v7) {
    uint64_t v6 = v7;
  }
  else {
    uint64_t v6 = &__NSDictionary0__struct;
  }
  [v4 updateWithServerRepresentation:v6 expirationDate:*(void *)(a1 + 40) pieces:*(unsigned __int8 *)(a1 + 56)];
  [*(id *)(a1 + 48) refreshObject:v4 mergeChanges:1];
}

void sub_100041740(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  double v2 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, double))(v1 + 16))(v1, v3, v2);
}

uint64_t sub_10004191C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100041934(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000454FC();
    }
  }
  else if ([v5 count])
  {
    id v8 = [v5 allObjects];
    uint64_t v9 = *(void **)(a1 + 32);
    id v10 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKProfileService.m", 1570, "-[GKProfileServicePrivate preloadInstalledGamesScopedPlayerIDs:completion:]_block_invoke");
    uint64_t v11 = [v9 transactionGroupWithName:v10];

    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    v28[2] = sub_100041BB8;
    v28[3] = &unk_1002D4FB0;
    id v12 = *(void **)(a1 + 40);
    void v28[4] = *(void *)(a1 + 32);
    id v29 = v12;
    id v13 = v8;
    id v30 = v13;
    id v14 = v11;
    id v31 = v14;
    [v14 performOnManagedObjectContext:v28];
    uint64_t v15 = [*(id *)(a1 + 32) clientProxy];
    id v16 = [v15 replyQueue];
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    void v22[2] = sub_100041CC4;
    v22[3] = &unk_1002D5400;
    id v23 = v14;
    id v17 = *(id *)(a1 + 48);
    uint64_t v18 = *(void *)(a1 + 32);
    id v19 = *(void **)(a1 + 40);
    id v27 = v17;
    uint64_t v24 = v18;
    id v25 = v19;
    id v26 = v13;
    id v20 = v13;
    id v21 = v14;
    [v21 notifyOnQueue:v16 block:v22];

    goto LABEL_9;
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
LABEL_9:
}

void sub_100041BB8(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  id v6 = [*(id *)(a1 + 32) filterPlayerIDsThatNeedPreloading:*(void *)(a1 + 40) gameBundleIDs:*(void *)(a1 + 48) moc:v9];
  id v7 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v6 count]);
  [*(id *)(a1 + 56) setObject:v7 forKeyedSubscript:@"incompletePlayerIDsCount"];

  if ([v6 count])
  {
    id v8 = [*(id *)(a1 + 32) fetchScopedIDsCacheKeysWithPlayerIDs:v6 gameBundleIDs:*(void *)(a1 + 48) moc:v9];
    [*(id *)(a1 + 56) setResult:v8];
    v5[2](v5);
  }
  else
  {
    v5[2](v5);
  }
}

void sub_100041CC4(uint64_t a1)
{
  double v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"incompletePlayerIDsCount"];
  unsigned int v3 = [v2 unsignedIntValue];

  if (v3)
  {
    id v4 = [*(id *)(a1 + 32) result];
    id v6 = *(void **)(a1 + 40);
    id v5 = *(void **)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 56);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    _DWORD v9[2] = sub_100041E10;
    v9[3] = &unk_1002D53D8;
    id v10 = v5;
    id v11 = *(id *)(a1 + 56);
    id v12 = *(id *)(a1 + 64);
    [v6 fetchAndCacheScopedPlayerIDs:v10 gameBundleIDs:v7 scopedIDsCacheKeys:v4 cacheOnly:1 handler:v9];
  }
  else
  {
    id v8 = *(void (**)(void))(*(void *)(a1 + 64) + 16);
    v8();
  }
}

void sub_100041E10(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = os_log_GKGeneral;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100045624();
    }
  }
  else
  {
    if (!os_log_GKGeneral)
    {
      id v9 = (id)GKOSLoggers();
      uint64_t v7 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      sub_100045564(a1, v7);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

id sub_1000423F4(id a1, NSDictionary *a2, unint64_t a3)
{
  return [(NSDictionary *)a2 objectForKeyedSubscript:@"playerId"];
}

uint64_t sub_100042404(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) containsObject:a2] ^ 1;
}

id sub_100042624(id a1, NSDictionary *a2, unint64_t a3)
{
  unsigned int v3 = a2;
  id v4 = [(NSDictionary *)v3 objectForKeyedSubscript:@"gameBundleId"];
  id v5 = [(NSDictionary *)v3 objectForKeyedSubscript:@"playerId"];

  id v6 = +[GKProfileServicePrivate cacheKeyForScopedIDsWithGameBundleID:v4 playerID:v5];

  return v6;
}

BOOL sub_1000426BC(id a1, NSString *a2, NSDictionary *a3)
{
  return +[GKScopedIDs availableForPlayerID:a2];
}

void sub_1000426CC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  id v11 = 0;
  id v8 = a3;
  id v9 = [v5 loadCachedScopedPlayerIDs:v6 gameBundleIDs:v7 error:&v11 moc:a2];
  id v10 = v11;
  [*(id *)(a1 + 56) setError:v10];
  [*(id *)(a1 + 56) setResult:v9];

  v8[2](v8);
}

void sub_10004277C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) result];
  unsigned int v3 = (void *)v2;
  id v4 = &__NSArray0__struct;
  if (v2) {
    id v4 = (void *)v2;
  }
  id v5 = v4;

  uint64_t v6 = [*(id *)(a1 + 32) error];
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
      sub_1000457C4();
    }
  }
  id v8 = [*(id *)(a1 + 40) count];
  id v9 = (id)((void)[*(id *)(a1 + 48) count] * (void)v8);
  if ([v5 count] == v9)
  {
    id v10 = os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      id v11 = (id)GKOSLoggers();
      id v10 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
      sub_1000456F4();
    }
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  else
  {
    id v12 = +[GKScopedIDsUtils incompletePlayerIDs:*(void *)(a1 + 40) gameBundleIDs:*(void *)(a1 + 48) scopedIDs:v5];
    id v13 = [v12 count];
    id v14 = os_log_GKGeneral;
    if (v13)
    {
      if (!os_log_GKGeneral)
      {
        id v15 = (id)GKOSLoggers();
        id v14 = os_log_GKGeneral;
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        id v19 = v14;
        *(_DWORD *)buf = 134218496;
        id v24 = [v5 count];
        __int16 v25 = 2048;
        id v26 = v9;
        __int16 v27 = 2048;
        id v28 = [v12 count];
        _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Loading scoped ids from server after cache hits: %lu, expected: %lu, incompletes: %lu", buf, 0x20u);
      }
      uint64_t v17 = *(void *)(a1 + 48);
      id v16 = *(void **)(a1 + 56);
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_100042A88;
      v20[3] = &unk_1002D4F38;
      id v21 = v5;
      id v22 = *(id *)(a1 + 64);
      [v16 fetchAndCacheScopedPlayerIDs:v12 gameBundleIDs:v17 cachedScopedIDs:v21 handler:v20];
    }
    else
    {
      if (!os_log_GKGeneral)
      {
        id v18 = (id)GKOSLoggers();
        id v14 = os_log_GKGeneral;
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
        sub_10004575C();
      }
      (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
    }
  }
}

void sub_100042A88(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = +[GKScopedIDsUtils mergeWithScopedIDs:*(void *)(a1 + 32) with:v5];
  id v8 = os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    id v9 = (id)GKOSLoggers();
    id v8 = os_log_GKGeneral;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    int v10 = 138412802;
    id v11 = v5;
    __int16 v12 = 2112;
    id v13 = v7;
    __int16 v14 = 2112;
    id v15 = v6;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Loaded scoped ids from server: %@, merged: %@, error: %@", (uint8_t *)&v10, 0x20u);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

id sub_10004305C(uint64_t a1, void *a2)
{
  unsigned int v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 playerId];
  id v6 = [*(id *)(a1 + 32) gameBundleId];
  id v7 = [v4 isForPlayerID:v5 gameBundleID:v6];

  return v7;
}

id sub_100043260(id a1, GKScopedIDs *a2, unint64_t a3)
{
  return +[GKProfileServicePrivate cacheKeyForScopedIDs:a2];
}

uint64_t sub_100043634(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100043650(uint64_t a1, void *a2)
{
  id v3 = a2;
  v14[0] = @"related-player-ids";
  id v4 = *(void **)(a1 + 32);
  id v5 = [*(id *)(a1 + 40) playerIDs];
  v14[1] = @"games";
  v15[0] = v5;
  id v6 = [*(id *)(a1 + 40) gameBundleIDs];
  v15[1] = v6;
  id v7 = +[NSDictionary dictionaryWithObjects:v15 forKeys:v14 count:2];
  uint64_t v8 = *(unsigned __int8 *)(a1 + 64);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1000437B4;
  v11[3] = &unk_1002D4F38;
  uint64_t v9 = *(void *)(a1 + 48);
  id v12 = *(id *)(a1 + 56);
  id v13 = v3;
  id v10 = v3;
  [v4 fetchAndCacheScopedPlayerIDsForRequest:v7 scopedIDsCacheKeys:v9 cacheOnly:v8 handler:v11];
}

void sub_1000437B4(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if (v5) {
    [*(id *)(a1 + 32) setError:v5];
  }
  if ([v8 count])
  {
    id v6 = *(void **)(a1 + 32);
    id v7 = +[NSUUID UUID];
    [v6 setObject:v8 forKeyedSubscript:v7];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100043868(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v2 = *(void *)(a1 + 40);
    id v13 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, void *))(v2 + 16))(v2, &__NSArray0__struct);
  }
  else
  {
    id v3 = +[NSArray array];
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    id v4 = [*(id *)(a1 + 32) allValues];
    id v5 = [v4 allValues];

    id v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v15;
      do
      {
        uint64_t v9 = 0;
        id v10 = v3;
        do
        {
          if (*(void *)v15 != v8) {
            objc_enumerationMutation(v5);
          }
          id v3 = +[GKScopedIDsUtils mergeWithScopedIDs:v10 with:*(void *)(*((void *)&v14 + 1) + 8 * (void)v9)];

          uint64_t v9 = (char *)v9 + 1;
          id v10 = v3;
        }
        while (v7 != v9);
        id v7 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }
      while (v7);
    }

    uint64_t v11 = *(void *)(a1 + 40);
    id v12 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, void *, void *))(v11 + 16))(v11, v3, v12);
  }
}

void sub_100043B90(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    id v7 = [v5 objectForKeyedSubscript:@"status"];
    if ([v7 isEqualToNumber:&off_1002F1F58])
    {
      uint64_t v8 = [v6 objectForKeyedSubscript:@"results"];
      uint64_t v9 = *(void **)(a1 + 32);
      id v10 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKProfileService.m", 1888, "-[GKProfileServicePrivate fetchAndCacheScopedPlayerIDsForRequest:scopedIDsCacheKeys:cacheOnly:handler:]_block_invoke");
      uint64_t v11 = [v9 transactionGroupWithName:v10];

      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      void v22[2] = sub_100043E2C;
      v22[3] = &unk_1002D55F8;
      id v23 = v8;
      id v24 = *(id *)(a1 + 40);
      char v26 = *(unsigned char *)(a1 + 56);
      id v12 = v11;
      id v25 = v12;
      id v13 = v8;
      [v12 performOnManagedObjectContext:v22];
      long long v14 = [*(id *)(a1 + 32) clientProxy];
      long long v15 = [v14 replyQueue];
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      v19[2] = sub_100044198;
      void v19[3] = &unk_1002D3930;
      id v16 = *(id *)(a1 + 48);
      id v20 = v12;
      id v21 = v16;
      id v17 = v12;
      [v17 notifyOnQueue:v15 block:v19];
    }
    else
    {
      uint64_t v18 = *(void *)(a1 + 48);
      +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", GKServerErrorDomain, [v7 integerValue], 0);
      id v13 = (id)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void *, id))(v18 + 16))(v18, &__NSArray0__struct, v13);
    }
  }
}

void sub_100043E2C(uint64_t a1, void *a2, void *a3)
{
  id v29 = a2;
  char v26 = a3;
  __int16 v27 = +[NSMutableArray array];
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  id obj = *(id *)(a1 + 32);
  id v5 = [obj countByEnumeratingWithState:&v35 objects:v39 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v36;
    uint64_t v32 = GKGamePlayerIDKey;
    uint64_t v8 = &off_1002F1F58;
    uint64_t v30 = a1;
    uint64_t v31 = GKTeamPlayerIDKey;
    do
    {
      uint64_t v9 = 0;
      id v33 = v6;
      do
      {
        if (*(void *)v36 != v7) {
          objc_enumerationMutation(obj);
        }
        id v10 = *(void **)(*((void *)&v35 + 1) + 8 * (void)v9);
        uint64_t v11 = [v10 objectForKeyedSubscript:@"status"];
        unsigned int v12 = [v11 isEqualToNumber:v8];

        if (v12)
        {
          id v13 = v8;
          long long v14 = [v10 objectForKeyedSubscript:@"bundle-id"];
          long long v15 = [v10 objectForKeyedSubscript:@"player-id"];
          id v16 = [v10 objectForKeyedSubscript:v32];
          id v17 = [v10 objectForKeyedSubscript:v31];
          if (v14) {
            BOOL v18 = v15 == 0;
          }
          else {
            BOOL v18 = 1;
          }
          if (!v18)
          {
            if ([v16 length])
            {
              if ([v17 length])
              {
                id v19 = *(void **)(a1 + 40);
                id v20 = +[GKProfileServicePrivate cacheKeyForScopedIDsWithGameBundleID:v14 playerID:v15];
                LOBYTE(v19) = [v19 containsObject:v20];

                a1 = v30;
                if ((v19 & 1) == 0)
                {
                  id v21 = [[GKCDScopedIds alloc] initWithContext:v29];
                  id v22 = +[NSDate now];
                  [(GKCDScopedIds *)v21 setFetchedOn:v22];

                  a1 = v30;
                  [(GKCDScopedIds *)v21 setPlayerId:v15];
                  [(GKCDScopedIds *)v21 setGameBundleId:v14];
                  [(GKCDScopedIds *)v21 setGamePlayerId:v16];
                  [(GKCDScopedIds *)v21 setTeamPlayerId:v17];
                  if (!*(unsigned char *)(v30 + 56))
                  {
                    id v23 = +[GKProfileServicePrivate makeGKScopedIDsFromInternal:v21];
                    if (v23)
                    {
                      id v28 = v23;
                      [v27 addObject:v23];
                      id v23 = v28;
                    }
                  }
                }
              }
            }
          }

          uint64_t v8 = v13;
          id v6 = v33;
        }
        uint64_t v9 = (char *)v9 + 1;
      }
      while (v6 != v9);
      id v6 = [obj countByEnumeratingWithState:&v35 objects:v39 count:16];
    }
    while (v6);
  }

  if (*(unsigned char *)(a1 + 56))
  {
    [*(id *)(a1 + 48) setResult:&__NSArray0__struct];
    id v24 = v27;
  }
  else
  {
    id v24 = v27;
    id v25 = [v27 copy];
    [*(id *)(a1 + 48) setResult:v25];
  }
  v26[2](v26);
}

void sub_100044198(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) result];
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0);
}

void sub_100044384(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = +[GKCDScopedIds _gkFetchRequest];
  id v8 = [objc_alloc((Class)NSBatchDeleteRequest) initWithFetchRequest:v7];
  id v11 = 0;
  id v9 = [v5 executeRequest:v8 error:&v11];
  id v10 = v11;
  [*(id *)(a1 + 32) setError:v10];
  v6[2](v6);
}

void sub_100044458(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }
}

void sub_1000446BC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v13 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:a2];
  id v6 = +[GKPlayerCredentialController sharedController];
  uint64_t v7 = [v13 playerID];
  id v8 = [*(id *)(a1 + 32) clientProxy];
  id v9 = [v6 credentialForPlayerID:v7 environment:[v8 environment]];

  id v10 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", +[GKAccountServicePrivate getAccountAgeCategoryForCredential:v9]);
  [*(id *)(a1 + 40) setObject:v10 forKeyedSubscript:@"ageCategory"];

  id v11 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v13 achievementsVisibility]);
  [*(id *)(a1 + 40) setObject:v11 forKeyedSubscript:@"profilePrivacy"];

  unsigned int v12 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v13 contactsIntegrationConsent]);
  [*(id *)(a1 + 40) setObject:v12 forKeyedSubscript:@"contactsIntegration"];

  v5[2](v5);
}

void sub_100044858(uint64_t a1)
{
  v7[0] = @"ageCategory";
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = [[*(id *)(a1 + 32) objectForKeyedSubscript:];
  v8[0] = v3;
  v7[1] = @"profilePrivacy";
  id v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:];
  v8[1] = v4;
  void v7[2] = @"contactsIntegration";
  id v5 = [*(id *)(a1 + 32) objectForKeyedSubscript:];
  v8[2] = v5;
  id v6 = +[NSDictionary dictionaryWithObjects:v8 forKeys:v7 count:3];
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v6);
}

void sub_100044960(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000449D0()
{
  sub_100011064();
  sub_100011084((void *)&_mh_execute_header, v0, v1, "Load cache failed for unexpired profile and incomplete response. Error: %@", v2, v3, v4, v5, v6);
}

void sub_100044A38()
{
  sub_100011064();
  sub_100011084((void *)&_mh_execute_header, v0, v1, "Load cache failed for unexpired profile. Error: %@", v2, v3, v4, v5, v6);
}

void sub_100044AA0()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "loadProfilesForPlayerIDs: Finished collecting unique player IDs to load", v2, v3, v4, v5, v6);
}

void sub_100044AD4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100044B44()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "Not enriching profiles with scoped ids because gameBundleID is nil", v2, v3, v4, v5, v6);
}

void sub_100044B78(uint64_t a1, NSObject *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = 136315394;
  uint64_t v4 = "-[GKProfileService getProfilesForPlayerIDs:discardingStaleData:handler:]_block_invoke_8";
  __int16 v5 = 2112;
  uint64_t v6 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Cache miss - %s %@", (uint8_t *)&v3, 0x16u);
}

void sub_100044C08()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Failed to fetch scoped ids for profiles, error: %@", v2, v3, v4, v5, v6);
}

void sub_100044C70()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "getFriendSupportPageURLWithHandler - no friend support page url in bag, error = %@", v2, v3, v4, v5, v6);
}

void sub_100044CD8()
{
  sub_100010D10();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "setPlayerNickname - nickname cannot be nil.", v1, 2u);
}

void sub_100044D18()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "setPlayerNickname - server error: %@", v2, v3, v4, v5, v6);
}

void sub_100044D80()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "setPlayerNickname - server returned zero nickname suggestions", v2, v3, v4, v5, v6);
}

void sub_100044DB4()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "getNicknameSuggestions - server error: %@", v2, v3, v4, v5, v6);
}

void sub_100044E1C()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "getNicknameSuggestions - server returned zero nickname suggestions", v2, v3, v4, v5, v6);
}

void sub_100044E50()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "getTermsAndConditionsWithHandler - server error: %@", v2, v3, v4, v5, v6);
}

void sub_100044EB8()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "getTermsAndConditionsWithHandler - server returned invalid url", v2, v3, v4, v5, v6);
}

void sub_100044EEC()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "GKProfileService: setFriendInvitesAllowedFlag failed: %@", v2, v3, v4, v5, v6);
}

void sub_100044F54()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "GKProfileService: setPrivacyNoticeVersion error=%@", v2, v3, v4, v5, v6);
}

void sub_100044FBC()
{
  sub_100010D10();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "GKProfileService: profile already has the consent flag we are attempting to change to.", v1, 2u);
}

void sub_100044FFC(int *a1, NSObject *a2)
{
  int v2 = *a1;
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "GKProfileService: setContactsIntegrationConsent error, reverted to %d", (uint8_t *)v3, 8u);
}

void sub_100045078(void *a1)
{
  id v2 = a1;
  uint64_t v3 = [(id)sub_100010D1C() identifier];
  sub_100011064();
  sub_100017260((void *)&_mh_execute_header, v4, v5, "Will not proceed getting relationsips for contact %@ because there is no completion block", v6, v7, v8, v9, v10);
}

void sub_100045108()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "Attempting to get relationships without a contact.", v2, v3, v4, v5, v6);
}

void sub_10004513C()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "Will not proceed getting relationsips for contacts because there is no completion block", v2, v3, v4, v5, v6);
}

void sub_100045170()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "getContactAssociationIDsForContacts: Unable to get relationships for contacts: relationships list was nil", v2, v3, v4, v5, v6);
}

void sub_1000451A4(void *a1)
{
  id v2 = a1;
  uint64_t v3 = [(id)sub_100010D1C() localizedDescription];
  sub_100011064();
  sub_100017260((void *)&_mh_execute_header, v4, v5, "getContactAssociationIDsForContacts: Unable to get relationships for contacts: %@", v6, v7, v8, v9, v10);
}

void sub_100045234()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "Will not proceed getting contacts for caids because there is no completion block.", v2, v3, v4, v5, v6);
}

void sub_100045268()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "Finished starting contacts controller", v2, v3, v4, v5, v6);
}

void sub_10004529C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10004530C()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "filterForContactIDsSupportingFriendingViaPushFromContactIDs - friending via push is disabled (via bag key), returning no contact IDs", v2, v3, v4, v5, v6);
}

void sub_100045340()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "getIsFriendingViaPushEnabledWithCompletion - no storeBag, assume friending via push is enabled", v2, v3, v4, v5, v6);
}

void sub_100045374()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "getIsFriendingViaPushEnabledWithCompletion - no value in bag, error = %@", v2, v3, v4, v5, v6);
}

void sub_1000453DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [(id)sub_100010D1C() error];
  sub_100011064();
  sub_100017280((void *)&_mh_execute_header, v5, v6, "Failed to fetch friends with error: %@", v7, v8, v9, v10, v11);
}

void sub_10004546C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [(id)sub_100010D1C() error];
  sub_100011064();
  sub_100017280((void *)&_mh_execute_header, v5, v6, "Failed to fetch profile with caid with error: %@", v7, v8, v9, v10, v11);
}

void sub_1000454FC()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Failed to fetch installed game ids: %@", v2, v3, v4, v5, v6);
}

void sub_100045564(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = a2;
  id v5 = [v3 count];
  id v6 = [*(id *)(a1 + 40) count];
  int v7 = 134218240;
  id v8 = v5;
  __int16 v9 = 2048;
  id v10 = v6;
  _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Preloaded scoped ids records for %lu players and %lu installed games", (uint8_t *)&v7, 0x16u);
}

void sub_100045624()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Failed to preload installed games scoped ids: %@", v2, v3, v4, v5, v6);
}

void sub_10004568C()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Failed to query count of cached scoped ids: %@", v2, v3, v4, v5, v6);
}

void sub_1000456F4()
{
  sub_100011064();
  sub_100011084((void *)&_mh_execute_header, v0, v1, "Loaded all scoped ids from cache: %@", v2, v3, v4, v5, v6);
}

void sub_10004575C()
{
  sub_100011064();
  sub_100011084((void *)&_mh_execute_header, v0, v1, "No player missing scoped ids found, using cached value: %@", v2, v3, v4, v5, v6);
}

void sub_1000457C4()
{
  sub_100011064();
  sub_100011084((void *)&_mh_execute_header, v0, v1, "Ignoring error loading scoped ids from cache: %@", v2, v3, v4, v5, v6);
}

void sub_10004582C()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "Not loading scoped ids for empty list of effective game bundle ids", v2, v3, v4, v5, v6);
}

uint64_t sub_100045974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a3);
  }
  return result;
}

void sub_100045A3C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v8 = [v3 transport];
  uint64_t v5 = [*(id *)(a1 + 32) clientProxy];
  uint8_t v6 = [*(id *)(a1 + 32) localPlayer];
  int v7 = +[GKService serviceWithTransport:v8 forClient:v5 localPlayer:v6];
  [v7 getProfilesForPlayerIDs:v4 handler:*(void *)(a1 + 40)];
}

NSPredicate *__cdecl sub_100045B18(id a1, NSString *a2, BOOL a3, NSDate *a4)
{
  return +[NSPredicate predicateWithFormat:@"player.playerID = %@", a4, a2];
}

NSPredicate *__cdecl sub_100045B60(id a1, NSString *a2, BOOL a3, NSDate *a4)
{
  return +[NSPredicate predicateWithFormat:@"player.playerID = %@", a4, a2];
}

id sub_100045CCC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) getProfilesForPlayerIDs:a2 handler:*(void *)(a1 + 40)];
}

void sub_100045CEC(uint64_t a1, void *a2, void *a3, double a4)
{
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_100045E18;
  void v12[3] = &unk_1002D56A8;
  id v13 = a2;
  id v14 = a3;
  int v7 = *(void **)(a1 + 32);
  id v15 = *(id *)(a1 + 40);
  id v16 = *(id *)(a1 + 48);
  double v19 = a4;
  id v17 = *(id *)(a1 + 32);
  long long v11 = *(_OWORD *)(a1 + 56);
  id v8 = (id)v11;
  long long v18 = v11;
  id v9 = v14;
  id v10 = v13;
  [v7 performOnManagedObjectContext:v12];
}

void sub_100045E18(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint8_t v6 = a3;
  int v7 = *(void **)(a1 + 32);
  if (v7 && !*(void *)(a1 + 40))
  {
    id v8 = [v7 objectForKey:@"results"];
    id v9 = +[GKPlayerProfileCacheObject playerProfileWithPlayerID:*(void *)(a1 + 48) inManagedObjectContext:v5];
    uint64_t v10 = *(void *)(a1 + 56);
    if (v10)
    {
      id v18 = 0;
      long long v11 = [v5 existingObjectWithID:v10 error:&v18];
      id v12 = v18;
      if (v12)
      {
        if (!os_log_GKGeneral) {
          id v13 = (id)GKOSLoggers();
        }
        if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
          sub_10004E710();
        }
      }
    }
    else
    {
      long long v11 = 0;
    }
    id v14 = +[GKContactsIntegrationController sharedController];
    id v15 = [v11 entries];
    [v14 updateIDSEntriesFromOldFriendEntries:v15 againstServerRepresentation:v8 withContext:v5];

    if (v11) {
      [v5 deleteObject:v11];
    }
    id v16 = +[GKFriendListCacheObject cacheFriendList:v8 withTimeToLive:v9 forProfile:v5 managedObjectContext:0 commonFriends:*(double *)(a1 + 88)];
    id v17 = [v16 filterableFriends];
    [*(id *)(a1 + 64) setObject:v17 forKeyedSubscript:@"filterablePlayers"];

    *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = *(double *)(a1 + 88) > 0.0;
  }
  [*(id *)(a1 + 64) setError:*(void *)(a1 + 40)];
  (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  v6[2](v6);
}

void sub_1000461C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[GKNetworkRequestManager commonNetworkRequestManager];
  id v5 = [*(id *)(a1 + 32) clientProxy];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000462B8;
  void v8[3] = &unk_1002D5190;
  uint8_t v6 = *(void **)(a1 + 40);
  void v8[4] = *(void *)(a1 + 32);
  id v9 = v6;
  id v10 = v3;
  id v7 = v3;
  [v4 issueRequest:0 bagKey:@"gk-get-nearby-friend-token" clientProxy:v5 handler:v8];
}

void sub_1000462B8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint8_t v6 = [a2 objectForKey:@"friend-token"];
  if (![(__CFString *)v6 length])
  {
    id v7 = [*(id *)(a1 + 32) localPlayer];
    id v8 = [v7 playerID];
    uint64_t v9 = +[NSString stringWithFormat:@"NEARBY_TOKEN_%@", v8];

    uint8_t v6 = (__CFString *)v9;
  }
  id v10 = os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    id v11 = (id)GKOSLoggers();
    id v10 = os_log_GKGeneral;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
    sub_10004E7E0();
  }
  if (v6) {
    CFStringRef v12 = v6;
  }
  else {
    CFStringRef v12 = &stru_1002E4F58;
  }
  [*(id *)(a1 + 40) setResult:v12];
  [*(id *)(a1 + 40) setError:v5];
  if (v5)
  {
    if (!os_log_GKGeneral) {
      id v13 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10004E778();
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10004642C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_1000467A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  CFStringRef v12 = @"friend-tokens";
  uint64_t v13 = v4;
  id v5 = +[NSDictionary dictionaryWithObjects:&v13 forKeys:&v12 count:1];
  uint8_t v6 = +[GKNetworkRequestManager commonNetworkRequestManager];
  id v7 = [*(id *)(a1 + 40) clientProxy];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_1000468FC;
  v9[3] = &unk_1002D50A0;
  id v10 = *(id *)(a1 + 48);
  id v11 = v3;
  id v8 = v3;
  [v6 issueRequest:v5 bagKey:@"gk-establish-nearby-relationship" clientProxy:v7 handler:v9];
}

void sub_1000468FC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  [*(id *)(a1 + 32) setError:v4];
  if (v4)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10004E8B0();
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100046998(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100046BB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  CFStringRef v12 = @"request-id";
  uint64_t v13 = v4;
  id v5 = +[NSDictionary dictionaryWithObjects:&v13 forKeys:&v12 count:1];
  uint8_t v6 = +[GKNetworkRequestManager commonNetworkRequestManager];
  id v7 = [*(id *)(a1 + 40) clientProxy];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_100046D04;
  v9[3] = &unk_1002D50A0;
  id v10 = *(id *)(a1 + 48);
  id v11 = v3;
  id v8 = v3;
  [v6 issueRequest:v5 bagKey:@"gk-get-friend-code" clientProxy:v7 handler:v9];
}

void sub_100046D04(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  id v8 = v5;
  if (a2 && !v5)
  {
    id v7 = [a2 objectForKey:@"friend-code"];
    [*(id *)(a1 + 32) setResult:v7];

    id v6 = v8;
  }
  [*(id *)(a1 + 32) setError:v6];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100046DA0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

id sub_100046F64(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) getProfilesForPlayerIDs:a2 fetchOptions:*(void *)(a1 + 48) handler:*(void *)(a1 + 40)];
}

void sub_100047028(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 transport];
  id v6 = [*(id *)(a1 + 32) clientProxy];
  id v7 = [*(id *)(a1 + 32) localPlayer];
  id v8 = +[GKService serviceWithTransport:v5 forClient:v6 localPlayer:v7];

  [v8 getProfilesForPlayerIDs:v4 fetchOptions:*(void *)(a1 + 48) handler:*(void *)(a1 + 40)];
}

void sub_1000471AC(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 transport];
  id v6 = [*(id *)(a1 + 32) clientProxy];
  id v7 = [*(id *)(a1 + 32) localPlayer];
  id v8 = +[GKService serviceWithTransport:v5 forClient:v6 localPlayer:v7];

  [v8 getProfilesForPlayerIDs:v4 fetchOptions:*(void *)(a1 + 48) handler:*(void *)(a1 + 40)];
}

void sub_10004755C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = a3;
  id v7 = a2;
  id v8 = +[GKPlayerProfileCacheObject selfPlayerID];
  uint64_t v9 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v5, v8, 0);

  id v10 = +[GKGameStatServicePrivate currentFriendsPlayedList:v7];
  [v10 setExpirationDate:0];
  id v11 = +[NSPredicate predicateWithFormat:@"playerID == %@", *(void *)(a1 + 32)];
  +[GKCacheObject deleteObjectsMatchingPredicate:v11 context:v7];

  CFStringRef v12 = +[NSPredicate predicateWithFormat:@"playerID == %@", *(void *)(a1 + 32)];
  +[GKCacheObject deleteObjectsMatchingPredicate:v12 context:v7];

  uint64_t v13 = +[NSPredicate predicateWithFormat:@"player.playerID IN %@", v9];
  +[GKExpiringCacheObject expireObjectsMatchingPredicate:v13 context:v7];

  id v14 = +[NSPredicate predicateWithFormat:@"player.playerID IN %@", v9];
  +[GKExpiringCacheObject expireObjectsMatchingPredicate:v14 context:v7];

  +[GKExpiringCacheObject expireObjectsMatchingPredicate:0 context:v7];
  +[GKExpiringCacheObject expireObjectsMatchingPredicate:0 context:v7];

  id v15 = [*(id *)(a1 + 40) playerID];
  id v17 = v15;
  id v16 = +[NSArray arrayWithObjects:&v17 count:1];
  +[GKPlayerProfileCacheObject removeFamiliarPlayerIDs:v16 familiarity:2];

  v6[2](v6);
}

void sub_1000477C4(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  id v2 = [*(id *)(a1 + 32) clientProxy];
  [v2 refreshContentsForDataType:2 userInfo:0];
}

void sub_1000479C8(id *a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    [a1[5] setError:v3];
    id v4 = os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      id v5 = (id)GKOSLoggers();
      id v4 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      sub_10004E9B4();
    }
  }
  else
  {
    id v6 = [a1[4] clientProxy];
    id v7 = [a1[4] localPlayer];
    id v8 = +[GKService serviceWithTransport:0 forClient:v6 localPlayer:v7];

    [v8 expireGamesFriendsPlayed];
    [a1[5] performOnManagedObjectContext:&stru_1002D5768];
  }
  if (a1[6])
  {
    id v9 = a1[5];
    id v10 = [a1[4] clientProxy];
    id v11 = [v10 replyQueue];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    void v14[2] = sub_100047CA0;
    v14[3] = &unk_1002D48D8;
    id v17 = a1[6];
    id v12 = v3;
    id v13 = a1[4];
    id v15 = v12;
    id v16 = v13;
    [v9 notifyOnQueue:v11 block:v14];
  }
}

void sub_100047B6C(id a1, NSManagedObjectContext *a2, id a3)
{
  id v4 = a2;
  id v5 = (void (**)(void))a3;
  id v6 = +[GKGameStatServicePrivate currentFriendsPlayedList:v4];
  if (v6) {
    [(NSManagedObjectContext *)v4 deleteObject:v6];
  }
  +[GKCacheObject deleteObjectsMatchingPredicate:0 context:v4];
  +[GKCacheObject deleteObjectsMatchingPredicate:0 context:v4];
  +[GKExpiringCacheObject expireObjectsMatchingPredicate:0 context:v4];
  +[GKExpiringCacheObject expireObjectsMatchingPredicate:0 context:v4];
  +[GKExpiringCacheObject expireObjectsMatchingPredicate:0 context:v4];
  +[GKExpiringCacheObject expireObjectsMatchingPredicate:0 context:v4];
  v5[2](v5);

  id v7 = os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    id v8 = (id)GKOSLoggers();
    id v7 = os_log_GKGeneral;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
    sub_10004EA1C();
  }
}

void sub_100047CA0(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  id v2 = [*(id *)(a1 + 40) clientProxy];
  [v2 refreshContentsForDataType:2 userInfo:0];
}

void sub_100047EC8(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = [a1[4] playerID];
  if (v4)
  {
    CFStringRef v14 = @"reported-player-id";
    id v5 = [a1[4] playerID];
    id v15 = v5;
    id v6 = +[NSDictionary dictionaryWithObjects:&v15 forKeys:&v14 count:1];
  }
  else
  {
    id v6 = 0;
  }

  id v7 = +[GKNetworkRequestManager commonNetworkRequestManager];
  id v8 = [a1[5] clientProxy];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100048064;
  v10[3] = &unk_1002D5190;
  id v11 = a1[4];
  id v12 = a1[6];
  id v13 = v3;
  id v9 = v3;
  [v7 issueRequest:v6 bagKey:@"gk-report-a-concern-metadata" clientProxy:v8 handler:v10];
}

void sub_100048064(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [v5 objectForKeyedSubscript:@"reported-player"];
  if ([v7 count])
  {
    id v8 = [v7 objectForKeyedSubscript:@"nickname"];
    [*(id *)(a1 + 32) setAlias:v8];

    id v9 = [v7 objectForKeyedSubscript:@"first-name"];
    [*(id *)(a1 + 32) setFirstName:v9];

    id v10 = [v7 objectForKeyedSubscript:@"last-name"];
    [*(id *)(a1 + 32) setLastName:v10];
  }
  id v11 = [v5 objectForKeyedSubscript:@"concerns"];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100048208;
  void v13[3] = &unk_1002D5790;
  id v14 = *(id *)(a1 + 32);
  id v12 = [v11 _gkMapWithBlock:v13];
  [*(id *)(a1 + 40) setResult:v12];

  [*(id *)(a1 + 40) setError:v6];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

id sub_100048208(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[GKConcernInternal internalRepresentation];
  [v4 setPlayer:*(void *)(a1 + 32)];
  id v5 = [v3 objectForKeyedSubscript:@"id"];
  [v4 setConcernID:[v5 unsignedLongValue]];

  id v6 = [v3 objectForKeyedSubscript:@"value"];

  [v4 setMessage:v6];

  return v4;
}

void sub_1000482C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_100048588(uint64_t a1, void *a2)
{
  id v3 = a2;
  v13[0] = @"reported-player-id";
  v13[1] = @"comments";
  uint64_t v4 = *(void *)(a1 + 40);
  v14[0] = *(void *)(a1 + 32);
  v14[1] = v4;
  v13[2] = @"concern-id";
  id v5 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [*(id *)(a1 + 48) concernID]);
  void v14[2] = v5;
  id v6 = +[NSDictionary dictionaryWithObjects:v14 forKeys:v13 count:3];

  id v7 = +[GKNetworkRequestManager commonNetworkRequestManager];
  id v8 = [*(id *)(a1 + 56) clientProxy];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100048720;
  v10[3] = &unk_1002D50A0;
  id v11 = *(id *)(a1 + 64);
  id v12 = v3;
  id v9 = v3;
  [v7 issueRequest:v6 bagKey:@"gk-report-a-concern" clientProxy:v8 handler:v10];
}

uint64_t sub_100048720(uint64_t a1)
{
  [*(id *)(a1 + 32) setError:];
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v2();
}

void sub_100048764(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

NSPredicate *__cdecl sub_1000487C0(id a1, NSString *a2, BOOL a3, NSDate *a4)
{
  if (a4) {
    +[NSPredicate predicateWithFormat:@"expirationDate > %@  && common = %d && player.playerID = %@", a4, a3, a2];
  }
  else {
  uint64_t v4 = +[NSPredicate predicateWithFormat:@"expirationDate != nil && common = %d && player.playerID = %@", a3, a2, v6];
  }

  return (NSPredicate *)v4;
}

void sub_1000489DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  CFStringRef v12 = @"friend-code";
  uint64_t v13 = v4;
  id v5 = +[NSDictionary dictionaryWithObjects:&v13 forKeys:&v12 count:1];
  uint64_t v6 = +[GKNetworkRequestManager commonNetworkRequestManager];
  id v7 = [*(id *)(a1 + 40) clientProxy];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_100048B30;
  v9[3] = &unk_1002D50A0;
  id v10 = *(id *)(a1 + 48);
  id v11 = v3;
  id v8 = v3;
  [v6 issueRequest:v5 bagKey:@"gk-cancel-friend-code" clientProxy:v7 handler:v9];
}

uint64_t sub_100048B30(uint64_t a1)
{
  [*(id *)(a1 + 32) setError:];
  id v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v2();
}

void sub_100048B74(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100048D88(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    uint64_t v10 = *(void *)(a1 + 48);
    if (v10) {
      (*(void (**)(uint64_t, void *))(v10 + 16))(v10, v7);
    }
  }
  else
  {
    [*(id *)(a1 + 32) expireFriendList];
    id v8 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100048E74;
    v11[3] = &unk_1002D45D8;
    id v12 = *(id *)(a1 + 48);
    [v8 _invalidateCacheForFriendCode:v9 handler:v11];
  }
}

uint64_t sub_100048E74(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (!v5) {
    +[GKClientProxy enumerateClientsUsingBlock:&stru_1002D57F0];
  }
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v5);
  }

  return _objc_release_x1();
}

void sub_100048EF0(id a1, GKClientProxy *a2, BOOL *a3)
{
}

void sub_1000490F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  CFStringRef v12 = @"friend-code";
  uint64_t v13 = v4;
  id v5 = +[NSDictionary dictionaryWithObjects:&v13 forKeys:&v12 count:1];
  id v6 = +[GKNetworkRequestManager commonNetworkRequestManager];
  id v7 = [*(id *)(a1 + 40) clientProxy];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_100049248;
  v9[3] = &unk_1002D50A0;
  id v10 = *(id *)(a1 + 48);
  id v11 = v3;
  id v8 = v3;
  [v6 issueRequest:v5 bagKey:@"gk-reject-friend-code" clientProxy:v7 handler:v9];
}

uint64_t sub_100049248(uint64_t a1)
{
  [*(id *)(a1 + 32) setError:];
  id v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v2();
}

void sub_10004928C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) error];

  if (!v2) {
    [*(id *)(a1 + 40) _invalidateCacheForFriendCode:*(void *)(a1 + 48) handler:0];
  }
  id v3 = [*(id *)(a1 + 40) clientProxy];
  [v3 refreshContentsForDataType:3 userInfo:0];

  uint64_t v4 = *(void *)(a1 + 56);
  if (v4)
  {
    id v5 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);
  }
}

void sub_100049504(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = +[GKCDFriendCodeDetail _gkFetchRequest];
  id v8 = +[NSPredicate predicateWithFormat:@"friendCode == %@", *(void *)(a1 + 32)];
  [v7 setPredicate:v8];

  id v20 = 0;
  uint64_t v9 = [v5 executeFetchRequest:v7 error:&v20];
  id v10 = v20;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v11 = v9;
  id v12 = [v11 countByEnumeratingWithState:&v16 objects:v21 count:16];
  if (v12)
  {
    id v13 = v12;
    uint64_t v14 = *(void *)v17;
    do
    {
      id v15 = 0;
      do
      {
        if (*(void *)v17 != v14) {
          objc_enumerationMutation(v11);
        }
        [v5 deleteObject:*(void *)(*((void *)&v16 + 1) + 8 * (void)v15)];
        id v15 = (char *)v15 + 1;
      }
      while (v13 != v15);
      id v13 = [v11 countByEnumeratingWithState:&v16 objects:v21 count:16];
    }
    while (v13);
  }

  [*(id *)(a1 + 40) setError:v10];
  v6[2](v6);
}

void sub_1000496B8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }
}

void sub_10004972C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  CFStringRef v17 = @"friend-codes";
  uint64_t v18 = v4;
  id v5 = +[NSDictionary dictionaryWithObjects:&v18 forKeys:&v17 count:1];
  id v6 = +[GKNetworkRequestManager commonNetworkRequestManager];
  id v7 = [*(id *)(a1 + 40) clientProxy];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1000498CC;
  v11[3] = &unk_1002D5840;
  int8x16_t v10 = *(int8x16_t *)(a1 + 32);
  id v8 = (id)v10.i64[0];
  int8x16_t v12 = vextq_s8(v10, v10, 8uLL);
  id v13 = *(id *)(a1 + 48);
  id v14 = *(id *)(a1 + 56);
  id v15 = *(id *)(a1 + 64);
  id v16 = v3;
  id v9 = v3;
  [v6 issueRequest:v5 bagKey:@"gk-view-friend-code-details" clientProxy:v7 handler:v11];
}

void sub_1000498CC(id *a1, void *a2, void *a3, double a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a1[4];
  int8x16_t v10 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKFriendService.m", 767, "-[GKFriendServicePrivate getFriendCodeDetailWithIdentifiers:handler:]_block_invoke_3");
  id v11 = [v9 transactionGroupWithName:v10];

  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  void v18[2] = sub_100049AD0;
  void v18[3] = &unk_1002D5818;
  id v19 = v7;
  id v20 = v8;
  id v21 = a1[5];
  double v25 = a4;
  id v22 = a1[6];
  id v23 = a1[7];
  id v24 = a1[8];
  id v12 = v8;
  id v13 = v7;
  [v11 performOnManagedObjectContext:v18];
  id v14 = [a1[4] clientProxy];
  id v15 = [v14 replyQueue];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  void v16[2] = sub_100049EE4;
  v16[3] = &unk_1002D3A20;
  id v17 = a1[9];
  [v11 notifyOnQueue:v15 block:v16];
}

void sub_100049AD0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 32);
  if (v7 && !*(void *)(a1 + 40))
  {
    long long v38 = v6;
    id v8 = [v7 objectForKeyedSubscript:@"results"];
    if ([v8 count])
    {
      unint64_t v9 = 0;
      p_superclass = &OBJC_METACLASS___GKTurnBasedMultiplayerCanceledExchangeBulletin.superclass;
      do
      {
        uint64_t v11 = [*(id *)(a1 + 48) objectAtIndexedSubscript:v9];
        id v12 = [p_superclass + 314 _gkFetchRequest];
        id v13 = +[NSPredicate predicateWithFormat:@"friendCode == %@", v11];
        [v12 setPredicate:v13];

        id v41 = v12;
        id v14 = [v5 executeFetchRequest:v12 error:0];
        long long v44 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        id v15 = [v14 countByEnumeratingWithState:&v44 objects:v48 count:16];
        if (v15)
        {
          id v16 = v15;
          uint64_t v17 = *(void *)v45;
          do
          {
            uint64_t v18 = 0;
            do
            {
              if (*(void *)v45 != v17) {
                objc_enumerationMutation(v14);
              }
              [v5 deleteObject:*(void *)(*((void *)&v44 + 1) + 8 * (void)v18)];
              uint64_t v18 = (char *)v18 + 1;
            }
            while (v16 != v18);
            id v16 = [v14 countByEnumeratingWithState:&v44 objects:v48 count:16];
          }
          while (v16);
        }
        id v19 = [v8 objectAtIndexedSubscript:v9];
        id v43 = +[NSDate dateWithTimeIntervalSinceNow:*(double *)(a1 + 80)];
        id v20 = objc_alloc((Class)(p_superclass + 314));
        id v21 = [p_superclass + 314 entity];
        id v22 = [v20 initWithEntity:v21 insertIntoManagedObjectContext:v5];

        id v42 = (void *)v11;
        [v22 setFriendCode:v11];
        id v23 = [v19 objectForKeyedSubscript:@"creator-player-id"];
        [v22 setCreatorPlayerId:v23];

        id v24 = [v19 objectForKeyedSubscript:@"friend-code-state"];
        [v22 setFriendCodeState:v24];

        double v25 = [v19 objectForKeyedSubscript:@"num-uses"];
        [v22 setNumUses:v25];

        char v26 = [v19 objectForKeyedSubscript:@"already-used-player-ids"];
        __int16 v27 = v26;
        if (v26 && [v26 count])
        {
          id v28 = [v27 componentsJoinedByString:@","];
          [v22 setAlreadyUsedPlayerIds:v28];
        }
        char v40 = v27;
        [v22 setExpirationDate:v43];
        id v29 = [objc_alloc((Class)GKFriendCodeDetailInternal) initWithFriendCodeDetail:v22];
        [*(id *)(a1 + 56) addObject:v29];
        uint64_t v30 = [v22 creatorPlayerId];

        if (v30)
        {
          uint64_t v31 = *(void **)(a1 + 64);
          [v22 creatorPlayerId];
          id v39 = v19;
          uint64_t v32 = p_superclass;
          unint64_t v33 = v9;
          id v34 = v8;
          v36 = uint64_t v35 = a1;
          [v31 addObject:v36];

          a1 = v35;
          id v8 = v34;
          unint64_t v9 = v33;
          p_superclass = v32;
          id v19 = v39;
        }

        ++v9;
      }
      while (v9 < (unint64_t)[v8 count]);
    }
    id v37 = [*(id *)(a1 + 56) copy];
    [*(id *)(a1 + 72) setObject:v37 forKeyedSubscript:@"GKCDFriendCodeDetails"];

    id v6 = v38;
  }
  [*(id *)(a1 + 72) setError:*(void *)(a1 + 40)];
  v6[2](v6);
}

uint64_t sub_100049EE4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100049EF4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a2;
  [v5 setError:a3];
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:@"GKPlayers"];

  id v7 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v7();
}

void sub_10004A438(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = a3;
  id v7 = +[NSManagedObject _gkRetrieveCleanEntry:a2 request:v5];
  id v8 = v7;
  if (v7)
  {
    unint64_t v9 = [v7 timeToLive];
    if (([v8 _gkIsExpired:v9] & 1) == 0)
    {
      int8x16_t v10 = [v8 activityData];
      id v23 = 0;
      uint64_t v11 = +[NSDictionary _gkDictionaryWithServerDataJson:v10 error:&v23];
      id v12 = v23;

      if (v12)
      {
        if (!os_log_GKGeneral) {
          id v13 = (id)GKOSLoggers();
        }
        if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
          sub_10004EAD4();
        }
        [*(id *)(a1 + 72) setError:v12];
      }
      else
      {
        id v20 = [objc_alloc((Class)GKPlayerActivityInternal) initWithServerResponse:v11];
        [*(id *)(a1 + 72) setResult:v20];
        if (!os_log_GKGeneral) {
          id v21 = (id)GKOSLoggers();
        }
        id v22 = os_log_GKTrace;
        if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "PlayerActivity: loaded from cache", buf, 2u);
        }
      }
    }
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v14 = (id)GKOSLoggers();
    }
    id v15 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = *(void *)(a1 + 40);
      uint64_t v17 = *(void *)(a1 + 48);
      uint64_t v18 = *(void *)(a1 + 56);
      uint64_t v19 = *(void *)(a1 + 64);
      *(_DWORD *)buf = 138413058;
      uint64_t v25 = v16;
      __int16 v26 = 2112;
      uint64_t v27 = v17;
      __int16 v28 = 2112;
      uint64_t v29 = v18;
      __int16 v30 = 2112;
      uint64_t v31 = v19;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "PlayerActivity: No cache results found for continuation: %@, bundleID: %@, and playerID: %@, and GameCategoryFilter: %@", buf, 0x2Au);
    }
  }
  v6[2](v6);
}

void sub_10004A6D8(id *a1)
{
  id v2 = [a1[4] result];
  id v3 = v2;
  if (v2 && a1[14])
  {
    uint64_t v4 = [a1[4] error];

    if (!v4)
    {
      uint64_t v5 = (void (**)(id, id, void))a1[14];
      id v13 = [a1[4] result];
      v5[2](v5, v13, 0);

      return;
    }
  }
  else
  {
  }
  id v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKFriendService.m", 934, "-[GKFriendServicePrivate getPlayerActivityFeed:bundleID:continuation:gameCategoryFilter:handler:]_block_invoke");
  id v7 = +[GKDispatchGroup dispatchGroupWithName:v6];

  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  void v17[2] = sub_10004A9B4;
  v17[3] = &unk_1002D58E0;
  id v18 = a1[5];
  id v19 = a1[6];
  id v20 = a1[7];
  id v8 = a1[8];
  id v9 = a1[9];
  id v21 = v8;
  id v22 = v9;
  id v10 = v7;
  id v23 = v10;
  id v24 = a1[10];
  id v25 = a1[11];
  id v26 = a1[12];
  id v27 = a1[13];
  [v10 perform:v17];
  if (a1[14])
  {
    uint64_t v11 = [a1[9] clientProxy];
    id v12 = [v11 replyQueue];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    void v14[2] = sub_10004B284;
    void v14[3] = &unk_1002D3C38;
    id v15 = v10;
    id v16 = a1[14];
    [v15 notifyOnQueue:v12 block:v14];
  }
}

void sub_10004A9B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[NSMutableDictionary dictionary];
  if (([*(id *)(a1 + 32) isEqualToString:@"NoGameId"] & 1) == 0) {
    [v4 setObject:*(void *)(a1 + 32) forKeyedSubscript:@"bundle-id"];
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    [v4 setObject:v5 forKeyedSubscript:@"player-id"];
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    [v4 setObject:v6 forKeyedSubscript:@"continuation-key"];
  }
  id v7 = +[GKPreferences shared];
  unsigned int v8 = [v7 activityFeedTestFeedOnly];

  if (v8) {
    [v4 setObject:&__kCFBooleanTrue forKeyedSubscript:@"include-test-feed"];
  }
  uint64_t v9 = *(void *)(a1 + 56);
  if (v9) {
    [v4 setObject:v9 forKeyedSubscript:@"type"];
  }
  id v10 = +[GKNetworkRequestManager commonNetworkRequestManager];
  uint64_t v11 = [*(id *)(a1 + 64) clientProxy];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  void v15[2] = sub_10004ABD4;
  v15[3] = &unk_1002D58B8;
  id v12 = *(id *)(a1 + 72);
  uint64_t v13 = *(void *)(a1 + 64);
  id v16 = v12;
  uint64_t v17 = v13;
  id v18 = *(id *)(a1 + 80);
  id v19 = *(id *)(a1 + 88);
  id v20 = *(id *)(a1 + 32);
  id v21 = *(id *)(a1 + 96);
  id v22 = *(id *)(a1 + 104);
  id v23 = v3;
  id v14 = v3;
  [v10 issueRequest:v4 bagKey:@"gk-get-activity-feed" clientProxy:v11 handler:v15];
}

void sub_10004ABD4(id *a1, void *a2, void *a3, double a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = v8;
  if (!v7 || v8)
  {
    [a1[4] setError:v8];
  }
  else
  {
    id v10 = [objc_alloc((Class)GKPlayerActivityInternal) initWithServerResponse:v7];
    [a1[4] setResult:v10];
  }
  id v11 = a1[5];
  id v12 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKFriendService.m", 961, "-[GKFriendServicePrivate getPlayerActivityFeed:bundleID:continuation:gameCategoryFilter:handler:]_block_invoke_3");
  uint64_t v13 = [v11 transactionGroupWithName:v12];

  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_10004AE68;
  v24[3] = &unk_1002D5890;
  id v25 = a1[6];
  id v26 = v9;
  id v14 = v13;
  id v27 = v14;
  id v28 = v7;
  id v29 = a1[7];
  id v30 = a1[8];
  id v31 = a1[9];
  double v33 = a4;
  id v32 = a1[10];
  id v15 = v7;
  id v16 = v9;
  [v14 performOnManagedObjectContext:v24];
  uint64_t v17 = [a1[5] clientProxy];
  id v18 = [v17 replyQueue];
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_10004B1D4;
  v20[3] = &unk_1002D3A48;
  id v21 = v14;
  id v22 = a1[4];
  id v23 = a1[11];
  id v19 = v14;
  [v19 notifyOnQueue:v18 block:v20];
}

void sub_10004AE68(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  id v7 = +[NSManagedObject _gkRetrieveCleanEntry:v5 request:*(void *)(a1 + 32)];
  uint64_t v8 = *(void *)(a1 + 40);
  if (v7)
  {
    uint64_t v9 = v7;
    if (v8)
    {
      id v10 = [(GKCDPlayerActivity *)v7 activityData];
      id v26 = 0;
      id v11 = +[NSDictionary _gkDictionaryWithServerDataJson:v10 error:&v26];
      id v12 = v26;

      if (v12)
      {
        if (!os_log_GKGeneral) {
          id v13 = (id)GKOSLoggers();
        }
        if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
          sub_10004EBA4();
        }
        [*(id *)(a1 + 48) setError:v12];
      }
      else
      {
        id v14 = [objc_alloc((Class)GKPlayerActivityInternal) initWithServerResponse:v11];
        [*(id *)(a1 + 48) setResult:v14];
        if (!os_log_GKGeneral) {
          id v15 = (id)GKOSLoggers();
        }
        id v16 = os_log_GKTrace;
        if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Player Activity: loaded from stale cache", buf, 2u);
        }
      }
LABEL_26:
      v6[2](v6);

      goto LABEL_27;
    }
LABEL_17:
    uint64_t v19 = *(void *)(a1 + 56);
    id v24 = 0;
    id v11 = +[NSJSONSerialization dataWithJSONObject:v19 options:1 error:&v24];
    id v12 = v24;
    if (v12)
    {
      if (!os_log_GKGeneral) {
        id v20 = (id)GKOSLoggers();
      }
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
        sub_10004EB3C();
      }
    }
    else
    {
      [(GKCDPlayerActivity *)v9 setActivityData:v11];
      [(GKCDPlayerActivity *)v9 setContinuation:*(void *)(a1 + 64)];
      [(GKCDPlayerActivity *)v9 setGameID:*(void *)(a1 + 72)];
      [(GKCDPlayerActivity *)v9 setTargetPlayerID:*(void *)(a1 + 80)];
      id v21 = +[NSDate dateWithTimeIntervalSinceNow:*(double *)(a1 + 96)];
      [(GKCDPlayerActivity *)v9 setTimeToLive:v21];

      [(GKCDPlayerActivity *)v9 setGameCategoryFilter:*(void *)(a1 + 88)];
      [(GKCDPlayerActivity *)v9 setVersion:@"v1.0"];
      if (!os_log_GKGeneral) {
        id v22 = (id)GKOSLoggers();
      }
      id v23 = os_log_GKTrace;
      if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Player Activity: updated cache from network", buf, 2u);
      }
    }
    goto LABEL_26;
  }
  if (!v8)
  {
    uint64_t v17 = [GKCDPlayerActivity alloc];
    id v18 = +[GKCDPlayerActivity entity];
    uint64_t v9 = [(GKCDPlayerActivity *)v17 initWithEntity:v18 insertIntoManagedObjectContext:v5];

    goto LABEL_17;
  }
  v6[2](v6);
LABEL_27:
}

uint64_t sub_10004B1D4(uint64_t a1)
{
  id v2 = os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    id v3 = (id)GKOSLoggers();
    id v2 = os_log_GKGeneral;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_10004EC0C(a1, v2);
  }
  uint64_t v4 = [*(id *)(a1 + 40) result];

  if (!v4)
  {
    id v5 = [*(id *)(a1 + 32) result];
    [*(id *)(a1 + 40) setResult:v5];
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10004B284(uint64_t a1)
{
  id v2 = os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    id v3 = (id)GKOSLoggers();
    id v2 = os_log_GKGeneral;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_10004EC0C(a1, v2);
  }
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = [*(id *)(a1 + 32) result];
  uint64_t v6 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, void *, void *))(v4 + 16))(v4, v5, v6);
}

void sub_10004B4B8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  id v7 = +[GKCDPlayerActivity _gkFetchRequest];
  id v8 = [objc_alloc((Class)NSBatchDeleteRequest) initWithFetchRequest:v7];
  id v11 = 0;
  id v9 = [v5 executeRequest:v8 error:&v11];
  id v10 = v11;
  [*(id *)(a1 + 32) setError:v10];
  v6[2](v6);
}

void sub_10004B58C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }
}

void sub_10004B770(id a1, NSManagedObjectContext *a2, id a3)
{
  uint64_t v4 = (void (**)(void))a3;
  id v5 = a2;
  id v7 = +[GKCacheObject fetchRequestForContext:v5];
  [v7 setReturnsDistinctResults:1];
  uint64_t v6 = +[NSManagedObject _gkRetrieveCleanEntry:v5 request:v7];

  [v6 expire];
  v4[2](v4);
}

void sub_10004B828(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) clientProxy];
  [v1 refreshContentsForDataType:2 userInfo:0];
}

void sub_10004B874(id a1)
{
  id v1 = GKInsecureCacheRoot();
  id v2 = (id)gkEnsureDirectory();
  uint64_t v3 = [v1 stringByAppendingPathComponent:@"messageInboxCache.plist"];

  uint64_t v4 = (void *)qword_100329660;
  qword_100329660 = v3;
}

void sub_10004B8E0(id a1)
{
  dword_100329670 = 0;
}

void sub_10004BB88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    v4();
  }
  else
  {
    id v5 = +[GKPreferences shared];
    id v6 = [v5 fakeFriendRequestCount];

    id v7 = *(void **)(a1 + 32);
    id v8 = [v7 localPlayer];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10004BC9C;
    v11[3] = &unk_1002D5748;
    uint64_t v9 = *(void *)(a1 + 32);
    id v10 = *(void **)(a1 + 40);
    id v13 = v6;
    void v11[4] = v9;
    id v12 = v10;
    [v7 getFriendsForPlayer:v8 handler:v11];
  }
}

void sub_10004BC9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 count];
  if ((unint64_t)v4 >= *(void *)(a1 + 48)) {
    id v5 = *(id *)(a1 + 48);
  }
  else {
    id v5 = v4;
  }
  id v6 = [*(id *)(a1 + 32) transport];
  id v7 = [*(id *)(a1 + 32) clientProxy];
  id v8 = [*(id *)(a1 + 32) localPlayer];
  uint64_t v9 = +[GKService serviceWithTransport:v6 forClient:v7 localPlayer:v8];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_10004BDDC;
  void v12[3] = &unk_1002D59B8;
  id v10 = *(void **)(a1 + 40);
  uint64_t v15 = *(void *)(a1 + 48);
  id v16 = v5;
  id v13 = v3;
  id v14 = v10;
  id v11 = v3;
  [v9 getNicknameSuggestions:20 handler:v12];
}

void sub_10004BDDC(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = +[NSMutableArray array];
  long long v66 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  id v4 = v2;
  id v5 = [v4 countByEnumeratingWithState:&v66 objects:v70 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v67;
    do
    {
      for (unint64_t i = 0; i != v6; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v67 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void **)(*((void *)&v66 + 1) + 8 * i);
        id v10 = [v9 length];
        v64[0] = _NSConcreteStackBlock;
        v64[1] = 3221225472;
        v64[2] = sub_10004C62C;
        v64[3] = &unk_1002D5990;
        id v65 = v3;
        [v9 enumerateSubstringsInRange:0 options:v10 usingBlock:v64];
      }
      id v6 = [v4 countByEnumeratingWithState:&v66 objects:v70 count:16];
    }
    while (v6);
  }

  id v11 = [v4 count];
  if ((unint64_t)v11 <= 1) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = (uint64_t)v11;
  }
  uint64_t v45 = v12;
  v58 = +[NSMutableArray array];
  uint64_t v13 = a1;
  if (*(uint64_t *)(a1 + 48) >= 1)
  {
    unint64_t v62 = 0;
    unint64_t v63 = 0;
    uint64_t v14 = 0;
    unint64_t v60 = 0;
    unint64_t v61 = 0;
    unint64_t v59 = 0;
    unint64_t v15 = 0;
    uint64_t v16 = 0;
    do
    {
      uint64_t v17 = [*(id *)(v13 + 32) objectAtIndexedSubscript:v16 % *(void *)(v13 + 56)];
      id v18 = [v17 copy];

      uint64_t v19 = [v18 alias];
      id v20 = +[NSNumber numberWithInteger:v16];
      id v21 = +[NSString stringWithFormat:@"%@-%@", v19, v20];
      [v18 setAlias:v21];

      id v22 = [v18 playerID];
      id v23 = +[NSNumber numberWithInteger:v16];
      id v24 = +[NSString stringWithFormat:@"%@-%@", v22, v23];
      [v18 setPlayerID:v24];

      id v25 = objc_alloc_init((Class)GKMessageInboxEntryInternal);
      [v18 setInboxEntry:v25];
      id v26 = +[NSNumber numberWithInteger:v16];
      id v27 = +[NSString stringWithFormat:@"%@", v26];
      [v25 setFriendCode:v27];

      [v18 setIsInContacts:0];
      switch(v16)
      {
        case 1:
          id v28 = v25;
          CFStringRef v29 = @"user@email.com";
          break;
        case 2:
          id v28 = v25;
          CFStringRef v29 = @"555-987-6543";
          break;
        case 4:
          [v25 setSenderHandle:@"555-987-6543"];
          [v25 setSenderAlias:@"gracec@email.com"];
          [v25 setContactName:@"Grace Copeland"];
          goto LABEL_23;
        default:
          unint64_t v30 = v62 % 0xA;
          unint64_t v31 = v63 % 0xA;
          if (v16 % 5uLL == 1)
          {
            uint64_t v50 = +[NSNumber numberWithInteger:v31];
            uint64_t v48 = +[NSNumber numberWithInteger:v14 % 0xAuLL];
            long long v46 = +[NSNumber numberWithInteger:v30];
            id v52 = +[NSNumber numberWithInteger:v61 % 0xA];
            long long v44 = +[NSNumber numberWithInteger:v60 % 0xA];
            id v34 = +[NSNumber numberWithInteger:v59 % 0xA];
            uint64_t v35 = +[NSNumber numberWithInteger:v15 % 0xA];
            long long v36 = +[NSString stringWithFormat:@"555-%@%@%@-%@%@%@%@", v50, v48, v46, v52, v44, v34, v35];
            [v25 setSenderHandle:v36];

            id v37 = (void *)v50;
          }
          else
          {
            if (v16 % 5uLL == 4)
            {
              uint64_t v54 = [v3 objectAtIndexedSubscript:(uint64_t)((unint64_t)(v16 + 1) >> 2) % v45];
              id v32 = [v3 objectAtIndexedSubscript:(uint64_t)(7 * ((unint64_t)(v16 + 1) >> 2)) % v45];
              double v33 = +[NSString stringWithFormat:@"%@ %@", v54, v32];
              [v25 setContactName:v33];

LABEL_23:
              [v18 setIsInContacts:1];
LABEL_27:
              uint64_t v13 = a1;
              goto LABEL_28;
            }
            id v51 = +[NSNumber numberWithInteger:v31];
            char v49 = +[NSNumber numberWithInteger:v14 % 0xAuLL];
            long long v47 = +[NSNumber numberWithInteger:v30];
            uint64_t v53 = +[NSNumber numberWithInteger:v61 % 0xA];
            long long v38 = +[NSNumber numberWithInteger:v60 % 0xA];
            id v39 = +[NSNumber numberWithInteger:v59 % 0xA];
            uint64_t v56 = +[NSNumber numberWithInteger:v15 % 0xA];
            char v40 = +[NSString stringWithFormat:@"555-%@%@%@-%@%@%@%@", v51, v49, v47, v53, v38, v39, v56];
            [v25 setSenderHandle:v40];

            uint64_t v55 = [v3 objectAtIndexedSubscript:v16 % v45];
            id v41 = +[NSNumber numberWithInteger:v16];
            id v42 = [v3 objectAtIndexedSubscript:v14 % v45];
            id v43 = +[NSString stringWithFormat:@"%@%@@%@.com", v55, v41, v42];
            [v25 setSenderAlias:v43];

            id v37 = (void *)v55;
          }

          goto LABEL_27;
      }
      [v28 setSenderHandle:v29];
      uint64_t v13 = a1;
LABEL_28:
      [v58 addObject:v18];

      ++v16;
      v15 += 29;
      v59 += 23;
      v60 += 17;
      v61 += 11;
      v62 += 7;
      v14 += 3;
      v63 += 13;
    }
    while (v16 < *(void *)(v13 + 48));
  }
  (*(void (**)(void))(*(void *)(v13 + 40) + 16))();
}

id sub_10004C62C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addObject:a2];
}

void sub_10004C638(void *a1, void *a2)
{
  id v3 = a2;
  id v5 = (void *)a1[4];
  id v4 = (void *)a1[5];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_10004C6F8;
  v9[3] = &unk_1002D59E0;
  id v6 = v4;
  uint64_t v7 = a1[6];
  id v11 = v3;
  uint64_t v12 = v7;
  id v10 = v6;
  id v8 = v3;
  [v5 removeMessageInboxEntries:v6 handler:v9];
}

void sub_10004C6F8(void *a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    id v5 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10004ECC8((uint64_t)a1, (uint64_t)v3, v5);
    }
  }
  else
  {
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
    if (!os_log_GKGeneral) {
      id v6 = (id)GKOSLoggers();
    }
    uint64_t v7 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = a1[4];
      int v9 = 138412290;
      uint64_t v10 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "removed inbox entries: %@", (uint8_t *)&v9, 0xCu);
    }
  }
  (*(void (**)(void))(a1[5] + 16))();
}

void sub_10004C840(uint64_t a1, void *a2)
{
  id v20 = a2;
  id v3 = objc_opt_new();
  id v4 = +[CNContactFormatter descriptorForRequiredKeysForStyle:0];
  id v27 = v4;
  uint64_t v5 = +[NSArray arrayWithObjects:&v27 count:1];

  id v6 = [*(id *)(a1 + 32) allObjects];
  uint64_t v7 = +[CNContact predicateForContactsWithIdentifiers:v6];

  id v25 = 0;
  id v18 = (void *)v5;
  uint64_t v19 = v3;
  uint64_t v8 = [v3 unifiedContactsMatchingPredicate:v7 keysToFetch:v5 error:&v25];
  id v9 = v25;
  [*(id *)(a1 + 40) setError:v9];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v10 = v8;
  id v11 = [v10 countByEnumeratingWithState:&v21 objects:v26 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v22;
    do
    {
      for (unint64_t i = 0; i != v12; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v22 != v13) {
          objc_enumerationMutation(v10);
        }
        unint64_t v15 = *(void **)(*((void *)&v21 + 1) + 8 * i);
        uint64_t v16 = *(void **)(a1 + 48);
        uint64_t v17 = [v15 identifier];
        [v16 setObject:v15 forKeyedSubscript:v17];
      }
      id v12 = [v10 countByEnumeratingWithState:&v21 objects:v26 count:16];
    }
    while (v12);
  }

  v20[2](v20);
}

void sub_10004CC48(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_10004CC60(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) inboxEntry];

  if (v4)
  {
    uint64_t v5 = *(void **)(a1 + 40);
    id v6 = [*(id *)(a1 + 32) inboxEntry];
    id v25 = v6;
    uint64_t v7 = +[NSArray arrayWithObjects:&v25 count:1];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    void v14[2] = sub_10004D0A4;
    void v14[3] = &unk_1002D5AD0;
    char v18 = *(unsigned char *)(a1 + 56);
    int8x16_t v13 = *(int8x16_t *)(a1 + 32);
    id v8 = (id)v13.i64[0];
    int8x16_t v15 = vextq_s8(v13, v13, 8uLL);
    uint64_t v17 = *(void *)(a1 + 48);
    id v16 = v3;
    [v5 removeMessageInboxEntries:v7 handler:v14];

    id v9 = (void *)v15.i64[1];
  }
  else
  {
    int v10 = *(unsigned __int8 *)(a1 + 56);
    id v11 = *(void **)(a1 + 40);
    id v12 = [*(id *)(a1 + 32) playerID];
    if (v10)
    {
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      void v22[2] = sub_10004CEB0;
      v22[3] = &unk_1002D5AA8;
      uint64_t v24 = *(void *)(a1 + 48);
      id v23 = v3;
      [v11 acceptFriendInvitationWithPlayerID:v12 completion:v22];

      id v9 = v23;
    }
    else
    {
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      v19[2] = sub_10004CFD8;
      void v19[3] = &unk_1002D5AA8;
      uint64_t v21 = *(void *)(a1 + 48);
      id v20 = v3;
      [v11 ignoreFriendInvitationWithPlayerID:v12 completion:v19];

      id v9 = v20;
    }
  }
}

void sub_10004CEB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = os_log_GKGeneral;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers();
    }
    id v6 = os_log_GKFriending;
    if (os_log_type_enabled(os_log_GKFriending, OS_LOG_TYPE_INFO))
    {
      int v8 = 138412290;
      id v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "GKFriendService didAccept: accept native friend request failed: %@", (uint8_t *)&v8, 0xCu);
    }
  }
  else
  {
    if (!os_log_GKGeneral)
    {
      id v7 = (id)GKOSLoggers();
      id v4 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      sub_10004ED54();
    }
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10004CFD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = os_log_GKGeneral;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10004EDBC();
    }
  }
  else
  {
    if (!os_log_GKGeneral)
    {
      id v6 = (id)GKOSLoggers();
      id v4 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      sub_10004ED88();
    }
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10004D0A4(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 64);
  id v3 = *(void **)(a1 + 32);
  id v4 = [*(id *)(a1 + 40) inboxEntry];
  id v5 = [v4 friendCode];
  if (v2)
  {
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    void v15[2] = sub_10004D220;
    v15[3] = &unk_1002D59E0;
    id v6 = &v16;
    id v16 = *(id *)(a1 + 40);
    id v7 = (id *)&v17;
    long long v10 = *(_OWORD *)(a1 + 48);
    id v8 = (id)v10;
    long long v17 = v10;
    [v3 acceptFriendRequestWithIdentifier:v5 sendPush:1 handler:v15];
  }
  else
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_10004D350;
    void v12[3] = &unk_1002D59E0;
    id v6 = &v13;
    id v13 = *(id *)(a1 + 40);
    id v7 = (id *)&v14;
    long long v11 = *(_OWORD *)(a1 + 48);
    id v9 = (id)v11;
    long long v14 = v11;
    [v3 rejectFriendRequestWithIdentifier:v5 handler:v12];
  }
}

void sub_10004D220(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = os_log_GKGeneral;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers();
    }
    id v6 = os_log_GKFriending;
    if (os_log_type_enabled(os_log_GKFriending, OS_LOG_TYPE_INFO))
    {
      int v8 = 138412290;
      id v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "acccept friend code failed: %@", (uint8_t *)&v8, 0xCu);
    }
  }
  else
  {
    if (!os_log_GKGeneral)
    {
      id v7 = (id)GKOSLoggers();
      id v4 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      sub_10004EE24(a1, v4);
    }
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10004D350(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = os_log_GKGeneral;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10004EF7C();
    }
  }
  else
  {
    if (!os_log_GKGeneral)
    {
      id v6 = (id)GKOSLoggers();
      id v4 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      sub_10004EED0(a1, v4);
    }
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10004D424(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
  {
    int v2 = [*(id *)(a1 + 32) clientProxy];
    [v2 refreshContentsForDataType:3 userInfo:0];
  }
  uint64_t v3 = *(void *)(a1 + 48);
  id v4 = [*(id *)(a1 + 40) error];
  (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);
}

id sub_10004D664(uint64_t a1, void *a2)
{
  return [a2 refreshContentsForDataType:21 userInfo:*(void *)(a1 + 32)];
}

NSSecureCoding *__cdecl sub_10004D718(id a1, NSDictionary *a2)
{
  int v2 = [(NSDictionary *)a2 objectForKeyedSubscript:@"friends-last-activities"];
  uint64_t v3 = [v2 _gkMapWithBlock:&stru_1002D5B80];

  return (NSSecureCoding *)v3;
}

id sub_10004D778(id a1, NSDictionary *a2, unint64_t a3)
{
  uint64_t v3 = a2;
  id v4 = [objc_alloc((Class)GKFriendActivityInternal) initWithServerRepresentation:v3];

  return v4;
}

NSSecureCoding *__cdecl sub_10004D7D0(id a1, NSDictionary *a2)
{
  return (NSSecureCoding *)[(NSDictionary *)a2 _gkSubDictionaryWithKeys:&off_1002F2E88];
}

uint64_t sub_10004D7E0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 result];
  [v5 setObject:v4 forKeyedSubscript:@"nativeFriendRequests"];

  id v6 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v6();
}

void sub_10004D9D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    id v5 = os_log_GKFriending;
    if (os_log_type_enabled(os_log_GKFriending, OS_LOG_TYPE_INFO))
    {
      int v7 = 138412290;
      id v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Failed while sending friend invitation via push: %@", (uint8_t *)&v7, 0xCu);
    }
  }
  else
  {
    id v6 = +[GKAMPController controller];
    [v6 reportFriendInviteActivityEventAtStage:0 hostApp:*(void *)(a1 + 32)];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10004DC08(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    id v5 = os_log_GKFriending;
    if (os_log_type_enabled(os_log_GKFriending, OS_LOG_TYPE_INFO))
    {
      int v7 = 138412290;
      id v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Failed to accept a friend invitation: %@", (uint8_t *)&v7, 0xCu);
    }
  }
  else
  {
    id v6 = +[GKAMPController controller];
    [v6 reportFriendInviteActivityEventAtStage:4 hostApp:0];
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10004DF04(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    id v5 = os_log_GKFriending;
    if (os_log_type_enabled(os_log_GKFriending, OS_LOG_TYPE_INFO))
    {
      int v7 = 138412290;
      id v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Failed to ignore a friend invitation: %@", (uint8_t *)&v7, 0xCu);
    }
  }
  else
  {
    id v6 = +[GKAMPController controller];
    [v6 reportFriendInviteActivityEventAtStage:6 hostApp:0];
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10004E3BC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = +[GKNetworkRequestManager commonNetworkRequestManager];
  uint64_t v6 = GKBagKeyGetFriendInvitationMailbox;
  int v7 = [*(id *)(a1 + 32) clientProxy];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10004E4C0;
  v10[3] = &unk_1002D5C18;
  id v8 = *(void **)(a1 + 40);
  void v10[4] = *(void *)(a1 + 32);
  char v13 = *(unsigned char *)(a1 + 48);
  id v11 = v4;
  id v12 = v8;
  id v9 = v4;
  [v5 deleteEntitiesWithBagKey:v6 clientProxy:v7 completionHandler:v10];
}

void sub_10004E4C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_ERROR)) {
      sub_10004EFE4();
    }
  }
  id v5 = [*(id *)(a1 + 32) clientProxy];
  uint64_t v6 = [v5 replyQueue];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_10004E5F4;
  void v7[3] = &unk_1002D5BF0;
  char v10 = *(unsigned char *)(a1 + 56);
  void v7[4] = *(void *)(a1 + 32);
  id v9 = *(id *)(a1 + 48);
  id v8 = *(id *)(a1 + 40);
  dispatch_async(v6, v7);
}

uint64_t sub_10004E5F4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    int v2 = [*(id *)(a1 + 32) clientProxy];
    [v2 refreshContentsForDataType:3 userInfo:0];
  }
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);

  return v3();
}

void sub_10004E658(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = GKStackTraceWithFrameLimit();
  int v5 = 138412546;
  uint64_t v6 = a1;
  sub_100017990();
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "getFriendIDsForPlayer: internal without playerID:%@: %@", (uint8_t *)&v5, 0x16u);
}

void sub_10004E710()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "getFriendIDsForPlayer: encountered a fetch error while trying to lookup a game access list: %@", v2, v3, v4, v5, v6);
}

void sub_10004E778()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "getNearbyTokenForLocalPlayerWithHandler server error: %@", v2, v3, v4, v5, v6);
}

void sub_10004E7E0()
{
  sub_100011064();
  sub_100011084((void *)&_mh_execute_header, v0, v1, "getNearbyTokenForLocalPlayerWithHandler: nearby token received:%@", v2, v3, v4, v5, v6);
}

void sub_10004E848()
{
  sub_100011064();
  sub_100011084((void *)&_mh_execute_header, v0, v1, "establishNearbyRelationshipsUsingPlayerTokens: nearby tokens:%@", v2, v3, v4, v5, v6);
}

void sub_10004E8B0()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "establishNearbyRelationshipsUsingPlayerTokens: server error: %@", v2, v3, v4, v5, v6);
}

void sub_10004E918()
{
  sub_100011064();
  sub_100011084((void *)&_mh_execute_header, v0, v1, "removeFriendWithPlayer: Removing a friend with playerID %@", v2, v3, v4, v5, v6);
}

void sub_10004E980()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "removeAllFriends: starting...", v2, v3, v4, v5, v6);
}

void sub_10004E9B4()
{
  sub_100011064();
  sub_100011084((void *)&_mh_execute_header, v0, v1, "removeAllFriends: failed with error: %@", v2, v3, v4, v5, v6);
}

void sub_10004EA1C()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "removeAllFriends: succeeded", v2, v3, v4, v5, v6);
}

void sub_10004EA50(uint8_t *a1, void *a2, void *a3, void *a4)
{
  int v7 = a2;
  id v8 = [a3 localizedDescription];
  *(_DWORD *)a1 = 138412290;
  *a4 = v8;
  _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Error loading friend code from cache: %@", a1, 0xCu);
}

void sub_10004EAD4()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "PlayerActivity Error deserializing cached activity feed: %@", v2, v3, v4, v5, v6);
}

void sub_10004EB3C()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Player Activity Error: serializing new activity feed cache: %@", v2, v3, v4, v5, v6);
}

void sub_10004EBA4()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Player Activity Error deserializing stale cached activity feed: %@", v2, v3, v4, v5, v6);
}

void sub_10004EC0C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = [v3 result];
  uint8_t v6 = [*(id *)(a1 + 32) error];
  sub_100017990();
  sub_10001760C((void *)&_mh_execute_header, v7, v8, "Player Activity: finished network group result: %@, error: %@", v9, v10, v11, v12, 2u);
}

void sub_10004ECC8(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = 138412546;
  uint64_t v5 = v3;
  __int16 v6 = 2112;
  uint64_t v7 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "removal of %@ failed due to %@", (uint8_t *)&v4, 0x16u);
}

void sub_10004ED54()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "GKFriendSerivce didAccept: accepted native friend request", v2, v3, v4, v5, v6);
}

void sub_10004ED88()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "GKFriendSerivce didAccept: ignored native friend request", v2, v3, v4, v5, v6);
}

void sub_10004EDBC()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "GKFriendService didAccept: ignore native friend request failed: %@", v2, v3, v4, v5, v6);
}

void sub_10004EE24(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  uint64_t v4 = [v2 inboxEntry];
  uint64_t v5 = [v4 friendCode];
  sub_100011064();
  sub_100017260((void *)&_mh_execute_header, v6, v7, "accepted friendCode: %@", v8, v9, v10, v11, v12);
}

void sub_10004EED0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  uint64_t v4 = [v2 inboxEntry];
  uint64_t v5 = [v4 friendCode];
  sub_100011064();
  sub_100017260((void *)&_mh_execute_header, v6, v7, "rejected friendCode: %@", v8, v9, v10, v11, v12);
}

void sub_10004EF7C()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "reject friend code failed: %@", v2, v3, v4, v5, v6);
}

void sub_10004EFE4()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Failed to preemptively flush friend invitation mailbox, error: %@", v2, v3, v4, v5, v6);
}

void sub_10004F3CC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = a2;
  uint8_t v6 = [a3 entityName];
  int v7 = 138412546;
  uint64_t v8 = a1;
  __int16 v9 = 2112;
  uint64_t v10 = v6;
  _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Cache Error: %@ failed to retrieve cache for fetched entity: %@", (uint8_t *)&v7, 0x16u);
}

void sub_10004F48C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Fetch error occurred.", v1, 2u);
}

void sub_10004F530(id a1)
{
  qword_100329680 = objc_alloc_init(GKGameActivityStore);

  _objc_release_x1();
}

void sub_10004F6B0(id a1)
{
  qword_100329698 = (uint64_t)[objc_alloc((Class)ASCLockupViewGroup) initWithName:@"ASCLockupView.Group.gameCenter"];

  _objc_release_x1();
}

void sub_10004F6F8(uint64_t a1)
{
  uint64_t v2 = (void *)qword_100329698;
  uint64_t v3 = *(void *)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_10004F7B4;
  v6[3] = &unk_1002D5CF8;
  id v9 = *(id *)(a1 + 56);
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  id v7 = v4;
  uint64_t v8 = v5;
  [v2 _cacheLockupsWithCollectionRequest:v3 withCompletionBlock:v6];
}

void sub_10004F7B4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000645AC();
    }
    uint64_t v8 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    goto LABEL_7;
  }
  if (![v5 count])
  {
    uint64_t v8 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
LABEL_7:
    v8();
    goto LABEL_17;
  }
  v34[0] = _NSConcreteStackBlock;
  v34[1] = 3221225472;
  _OWORD v34[2] = sub_10004FB64;
  v34[3] = &unk_1002D5CA8;
  uint64_t v23 = a1;
  id v35 = *(id *)(a1 + 32);
  id v9 = [v5 _gkFilterWithBlock:v34];

  uint64_t v10 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKGameService.m", 106, "-[GKGameService getArcadeHighlightForAdamID:count:handler:]_block_invoke_2");
  uint64_t v11 = +[GKDispatchGroup dispatchGroupWithName:v10];

  uint8_t v12 = +[NSMutableArray array];
  [v11 setResult:v12];
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id v5 = v9;
  id v13 = [v5 countByEnumeratingWithState:&v30 objects:v36 count:16];
  if (v13)
  {
    id v14 = v13;
    uint64_t v15 = *(void *)v31;
    do
    {
      for (unint64_t i = 0; i != v14; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v31 != v15) {
          objc_enumerationMutation(v5);
        }
        uint64_t v17 = *(void *)(*((void *)&v30 + 1) + 8 * i);
        v27[0] = _NSConcreteStackBlock;
        v27[1] = 3221225472;
        v27[2] = sub_10004FBD8;
        v27[3] = &unk_1002D3980;
        void v27[4] = v17;
        id v18 = v11;
        id v28 = v18;
        id v29 = v12;
        [v18 perform:v27];
      }
      id v14 = [v5 countByEnumeratingWithState:&v30 objects:v36 count:16];
    }
    while (v14);
  }

  uint64_t v19 = [*(id *)(v23 + 40) clientProxy];
  id v20 = [v19 replyQueue];
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_10004FEE0;
  v24[3] = &unk_1002D3930;
  id v21 = *(id *)(v23 + 48);
  id v25 = v11;
  id v26 = v21;
  id v22 = v11;
  [v22 notifyOnQueue:v20 block:v24];

  id v6 = 0;
LABEL_17:
}

id sub_10004FB64(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 id];
  id v5 = [v4 numberValue];

  if ([v5 isEqual:*(void *)(a1 + 32)]) {
    id v6 = 0;
  }
  else {
    id v6 = v3;
  }
  id v7 = v6;

  return v7;
}

void sub_10004FBD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)qword_100329698;
  uint64_t v5 = *(void *)(a1 + 32);
  v16[0] = _ASCLockupKeyIcon;
  v16[1] = _ASCLockupKeyTitle;
  void v16[2] = _ASCLockupKeySubtitle;
  id v6 = +[NSArray arrayWithObjects:v16 count:3];
  id v7 = +[NSSet setWithArray:v6];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10004FD54;
  v11[3] = &unk_1002D5CD0;
  id v8 = *(id *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 32);
  id v12 = v8;
  uint64_t v13 = v9;
  id v14 = *(id *)(a1 + 48);
  id v15 = v3;
  id v10 = v3;
  [v4 _lockupDictionaryForRequest:v5 includingKeys:v7 withCompletionBlock:v11];
}

void sub_10004FD54(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100064614();
    }
    [*(id *)(a1 + 32) setError:v6];
  }
  else
  {
    id v8 = objc_alloc_init((Class)GKGameHighlightInternal);
    uint64_t v9 = [*(id *)(a1 + 40) id];
    id v10 = [v9 numberValue];
    [v8 setAdamID:v10];

    uint64_t v11 = [v5 objectForKeyedSubscript:_ASCLockupKeyIcon];
    [v8 setArtwork:v11];

    id v12 = [v5 objectForKeyedSubscript:_ASCLockupKeyTitle];
    [v8 setTitle:v12];

    uint64_t v13 = [v5 objectForKeyedSubscript:_ASCLockupKeySubtitle];
    [v8 setSubtitle:v13];

    [*(id *)(a1 + 48) addObject:v8];
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_10004FEE0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_10005010C(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = +[GKCDGameSettings _gkFetchRequest];
  id v8 = +[NSPredicate predicateWithFormat:@"bundleID == %@", a1[4]];
  [v7 setPredicate:v8];

  uint64_t v9 = [v5 executeFetchRequest:v7 error:0];
  if (![v9 count])
  {
    uint64_t v11 = 0;
LABEL_6:
    id v15 = +[GKNetworkRequestManager commonNetworkRequestManager];
    uint64_t v16 = GKBagKeyGetPerGameSettings;
    uint64_t v17 = [a1[5] clientProxy];
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    void v18[2] = sub_100050340;
    void v18[3] = &unk_1002D5D48;
    id v19 = a1[6];
    id v20 = a1[4];
    id v21 = v5;
    id v22 = v6;
    [v15 issueRequest:&__NSDictionary0__struct bagKey:v16 clientProxy:v17 handler:v18];

    goto LABEL_7;
  }
  id v10 = [v9 firstObject];
  uint64_t v11 = v10;
  if (!v10) {
    goto LABEL_6;
  }
  id v12 = [v10 expirationDate];
  unsigned int v13 = [v11 _gkIsExpired:v12];

  if (v13) {
    goto LABEL_6;
  }
  id v14 = [objc_alloc((Class)GKGameSettingsInternal) initWithGameSettings:v11];
  [a1[6] setResult:v14];

  v6[2](v6);
LABEL_7:
}

void sub_100050340(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7 = a2;
  [*(id *)(a1 + 32) setError:a3];
  uint64_t v11 = +[NSDate dateWithTimeIntervalSinceNow:a4];
  if (v7 && !a3)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100050480;
    void v13[3] = &unk_1002D5868;
    id v12 = *(void **)(a1 + 32);
    id v14 = *(id *)(a1 + 40);
    id v15 = *(id *)(a1 + 48);
    id v16 = 0;
    id v17 = v7;
    id v18 = v11;
    id v19 = *(id *)(a1 + 32);
    [v12 performOnManagedObjectContext:v13];
  }
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 56) + 16))(*(void *)(a1 + 56), v8, v9, v10);
}

void sub_100050480(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = +[GKCDGameSettings _gkFetchRequest];
  uint64_t v8 = +[NSPredicate predicateWithFormat:@"bundleID == %@", *(void *)(a1 + 32)];
  [v7 setPredicate:v8];

  uint64_t v9 = *(void **)(a1 + 40);
  id v28 = 0;
  uint64_t v10 = [v9 executeFetchRequest:v7 error:&v28];
  id v11 = v28;
  if (v11)
  {
    if (!os_log_GKGeneral) {
      id v12 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10006467C();
    }
  }
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v13 = v10;
  id v14 = [v13 countByEnumeratingWithState:&v24 objects:v29 count:16];
  if (v14)
  {
    id v15 = v14;
    uint64_t v16 = *(void *)v25;
    do
    {
      id v17 = 0;
      do
      {
        if (*(void *)v25 != v16) {
          objc_enumerationMutation(v13);
        }
        [v5 deleteObject:*(void *)(*((void *)&v24 + 1) + 8 * (void)v17)];
        id v17 = (char *)v17 + 1;
      }
      while (v15 != v17);
      id v15 = [v13 countByEnumeratingWithState:&v24 objects:v29 count:16];
    }
    while (v15);
  }

  id v18 = *(id *)(a1 + 56);
  id v19 = [GKCDGameSettings alloc];
  id v20 = +[GKCDGameSettings entity];
  id v21 = [(GKCDGameSettings *)v19 initWithEntity:v20 insertIntoManagedObjectContext:v5];

  [(GKCDGameSettings *)v21 setBundleID:*(void *)(a1 + 32)];
  [(GKCDGameSettings *)v21 setExpirationDate:*(void *)(a1 + 64)];
  id v22 = [v18 objectForKeyedSubscript:@"allow-friend-list-access"];
  [(GKCDGameSettings *)v21 setAllowFriendListAccess:v22];

  id v23 = [objc_alloc((Class)GKGameSettingsInternal) initWithGameSettings:v21];
  [*(id *)(a1 + 72) setResult:v23];

  v6[2](v6);
}

void sub_100050728(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) result];
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_10005095C(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  long long v31 = a3;
  id v6 = +[GKCDGameSettings _gkFetchRequest];
  id v7 = [a1[4] bundleID];
  uint64_t v8 = +[NSPredicate predicateWithFormat:@"bundleID == %@", v7];
  [v6 setPredicate:v8];

  uint64_t v9 = [v5 executeFetchRequest:v6 error:0];
  if ([v9 count])
  {
    uint64_t v10 = [v9 firstObject];
    if ((unint64_t)[v9 count] >= 2)
    {
      unint64_t v11 = 1;
      do
      {
        id v12 = [v9 objectAtIndexedSubscript:v11];
        [v5 deleteObject:v12];

        ++v11;
      }
      while (v11 < (unint64_t)[v9 count]);
    }
  }
  else
  {
    id v13 = [GKCDGameSettings alloc];
    id v14 = +[GKCDGameSettings entity];
    uint64_t v10 = [(GKCDGameSettings *)v13 initWithEntity:v14 insertIntoManagedObjectContext:v5];

    id v15 = [a1[4] bundleID];
    [(GKCDGameSettings *)v10 setBundleID:v15];

    uint64_t v16 = [a1[4] serverAllowFriendListAccessValue];
    [(GKCDGameSettings *)v10 setAllowFriendListAccess:v16];
  }
  id v17 = [(GKCDGameSettings *)v10 allowFriendListAccess];
  id v18 = [a1[4] serverAllowFriendListAccessValue];
  [(GKCDGameSettings *)v10 setAllowFriendListAccess:v18];
  if ([v18 length])
  {
    v38[0] = v18;
    v37[0] = @"allow-friend-list-access";
    v37[1] = @"for-bundle-id";
    id v19 = [a1[4] bundleID];
    v38[1] = v19;
    id v20 = +[NSDictionary dictionaryWithObjects:v38 forKeys:v37 count:2];

    [(GKCDGameSettings *)v10 objectID];
    v21 = long long v30 = v17;
    id v22 = +[GKNetworkRequestManager commonNetworkRequestManager];
    id v29 = v6;
    uint64_t v23 = GKBagKeySetPerGameSettings;
    long long v24 = [a1[6] clientProxy];
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_100050D30;
    v32[3] = &unk_1002D5D48;
    id v33 = a1[5];
    id v34 = v21;
    id v35 = v30;
    long long v25 = v31;
    long long v36 = v31;
    id v26 = v21;
    uint64_t v27 = v23;
    id v6 = v29;
    [v22 issueRequest:v20 bagKey:v27 clientProxy:v24 handler:v32];

    id v17 = v30;
  }
  else
  {
    [(GKCDGameSettings *)v10 setAllowFriendListAccess:v17];
    id v28 = +[NSError userErrorForCode:3 underlyingError:0];
    [a1[5] setError:v28];

    long long v25 = v31;
    v31[2](v31);
  }
}

void sub_100050D30(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  [*(id *)(a1 + 32) setError:v4];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100050E10;
  void v7[3] = &unk_1002D3D30;
  id v5 = *(void **)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v9 = v4;
  id v10 = *(id *)(a1 + 48);
  id v6 = v4;
  [v5 performOnManagedObjectContext:v7];
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_100050E10(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = a1[4];
  id v35 = 0;
  id v8 = [v5 existingObjectWithID:v7 error:&v35];
  id v9 = v35;
  if (v9)
  {
    if (!os_log_GKGeneral) {
      id v10 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000646E8();
    }
  }
  if (a1[5]) {
    [v8 setAllowFriendListAccess:a1[6]];
  }
  unint64_t v11 = +[GKCDGameAccessList _gkFetchRequest];
  id v34 = 0;
  id v12 = [v5 executeFetchRequest:v11 error:&v34];
  id v13 = v34;
  id v14 = v13;
  if (v12 || a1[5])
  {
    id v28 = v13;
    id v29 = v11;
    id v15 = v6;
    id v16 = v9;
    id v17 = v8;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    id v18 = v12;
    id v19 = [v18 countByEnumeratingWithState:&v30 objects:v38 count:16];
    if (v19)
    {
      id v20 = v19;
      uint64_t v21 = *(void *)v31;
      do
      {
        id v22 = 0;
        do
        {
          if (*(void *)v31 != v21) {
            objc_enumerationMutation(v18);
          }
          [v5 deleteObject:*(void *)(*((void *)&v30 + 1) + 8 * (void)v22) v28, v29, (void)v30];
          id v22 = (char *)v22 + 1;
        }
        while (v20 != v22);
        id v20 = [v18 countByEnumeratingWithState:&v30 objects:v38 count:16];
      }
      while (v20);
    }

    if (!os_log_GKGeneral) {
      id v23 = (id)GKOSLoggers();
    }
    long long v24 = os_log_GKDaemon;
    id v8 = v17;
    id v9 = v16;
    id v6 = v15;
    id v14 = v28;
    unint64_t v11 = v29;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v25 = a1[5];
      *(_DWORD *)buf = 138412290;
      uint64_t v37 = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "Could not fetch data from cache: %@", buf, 0xCu);
    }
  }
  if (objc_msgSend(v12, "count", v28, v29))
  {
    unint64_t v26 = 0;
    do
    {
      uint64_t v27 = [v12 objectAtIndexedSubscript:v26];
      [v5 deleteObject:v27];

      ++v26;
    }
    while (v26 < (unint64_t)[v12 count]);
  }
  v6[2](v6);
}

void sub_1000510F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }
}

void sub_100051328(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000513F8;
  v10[3] = &unk_1002D5D98;
  id v6 = *(id *)(a1 + 48);
  id v14 = v3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(void **)(a1 + 40);
  id v11 = v6;
  uint64_t v12 = v7;
  id v13 = v8;
  id v9 = v3;
  [v4 getPerGameSettingsForBundleID:v5 handler:v10];
}

void sub_1000513F8(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3)
  {
    [*(id *)(a1 + 32) setError:];
    id v4 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    v4();
  }
  else if ([a2 allowFriendListAccess] == (id)2)
  {
    uint64_t v5 = *(void **)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 48);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    _DWORD v9[2] = sub_100051558;
    v9[3] = &unk_1002D5D70;
    id v10 = *(id *)(a1 + 32);
    id v7 = *(id *)(a1 + 56);
    uint64_t v11 = *(void *)(a1 + 40);
    id v12 = v7;
    [v5 _getPerGameFriendsPlayerIDForBundleID:v6 handler:v9];
  }
  else
  {
    id v8 = +[NSError userErrorForCode:102 underlyingError:0];
    [*(id *)(a1 + 32) setError:v8];
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_100051558(id *a1, void *a2, uint64_t a3)
{
  if (a3)
  {
    [a1[4] setError:];
    id v4 = (void (*)(void))*((void *)a1[6] + 2);
    v4();
  }
  else
  {
    uint64_t v5 = [a2 _gkValuesForKeyPath:@"playerID"];
    uint64_t v6 = [a1[5] transport];
    id v7 = [a1[5] clientProxy];
    id v8 = [a1[5] localPlayer];
    id v9 = +[GKService serviceWithTransport:v6 forClient:v7 localPlayer:v8];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1000516CC;
    v10[3] = &unk_1002D4F38;
    id v11 = a1[4];
    id v12 = a1[6];
    [v9 getProfilesForPlayerIDs:v5 handler:v10];
  }
}

void sub_1000516CC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [*(id *)(a1 + 32) setError:a3];
  if (!a3) {
    [*(id *)(a1 + 32) setResult:v5];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100051740(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_100051950(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 clientProxy];
  uint64_t v6 = [v5 connection];

  if (v6) {
    [v6 auditToken];
  }
  v9[0] = kTCCAccessCheckOptionPurposeRequired;
  v9[1] = kTCCAccessCheckOptionPrompt;
  v10[0] = &__kCFBooleanTrue;
  v10[1] = &__kCFBooleanTrue;
  id v7 = +[NSDictionary dictionaryWithObjects:v10 forKeys:v9 count:2];
  id v8 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", TCCAccessCheckAuditToken() != 0, (unsigned __int128)0, (unsigned __int128)0);
  [*(id *)(a1 + 40) setResult:v8];

  v4[2](v4);
}

void sub_100051AA8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = [*(id *)(a1 + 32) result];
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, [v2 BOOLValue]);
  }
}

void sub_100051CD4(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 clientProxy];
  id v5 = [v4 connection];

  if (v5) {
    [v5 auditToken];
  }
  TCCAccessResetForBundleIdWithAuditToken();
  v3[2](v3);
}

uint64_t sub_100051D80(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

NSArray *__cdecl sub_100051F5C(id a1, NSOrderedSet *a2)
{
  id v2 = a2;
  id v3 = dispatch_get_current_queue();
  if (dispatch_queue_get_specific(v3, @"com.apple.gamed.cachequeue") != @"com.apple.gamed.cachequeue")
  {
    id v4 = +[NSThread callStackSymbols];
    id v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s not invoked on managed object context queue at %@", "-[GKGameService _getPerGameFriendsPlayerIDForBundleID:handler:]_block_invoke", v4);
    uint64_t v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKGameService.m"];
    id v7 = [v6 lastPathComponent];
    id v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@ (_queueContext == (__bridge const void * _Nonnull)GKCacheQueueID)\n[%s (%s:%d)]", v5, "-[GKGameService _getPerGameFriendsPlayerIDForBundleID:handler:]_block_invoke", [v7 UTF8String], 422);

    +[NSException raise:@"GameKit Exception", @"%@", v8 format];
  }

  id v9 = +[NSMutableArray arrayWithCapacity:[(NSOrderedSet *)v2 count]];
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v10 = v2;
  id v11 = [(NSOrderedSet *)v10 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v21;
    do
    {
      for (unint64_t i = 0; i != v12; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v21 != v13) {
          objc_enumerationMutation(v10);
        }
        id v15 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        id v16 = objc_opt_new();
        id v17 = [v15 playerID];
        [v16 setPlayerID:v17];

        [v9 addObject:v16];
      }
      id v12 = [(NSOrderedSet *)v10 countByEnumeratingWithState:&v20 objects:v24 count:16];
    }
    while (v12);
  }

  id v18 = [v9 copy];

  return (NSArray *)v18;
}

void sub_1000521D0(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  id v7 = +[GKCDGameFriendList _gkFetchRequest];
  id v8 = +[NSPredicate predicateWithFormat:@"bundleID == %@", a1[4]];
  [v7 setPredicate:v8];

  id v42 = 0;
  id v9 = [v5 executeFetchRequest:v7 error:&v42];
  id v10 = v42;
  if (v10)
  {
    id v11 = v6;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    id v12 = v9;
    id v13 = [v12 countByEnumeratingWithState:&v38 objects:v45 count:16];
    if (v13)
    {
      id v14 = v13;
      uint64_t v15 = *(void *)v39;
      do
      {
        for (unint64_t i = 0; i != v14; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v39 != v15) {
            objc_enumerationMutation(v12);
          }
          [v5 deleteObject:*(void *)(*((void *)&v38 + 1) + 8 * i)];
        }
        id v14 = [v12 countByEnumeratingWithState:&v38 objects:v45 count:16];
      }
      while (v14);
    }

    if (!os_log_GKGeneral) {
      id v17 = (id)GKOSLoggers();
    }
    id v18 = os_log_GKDaemon;
    uint64_t v6 = v11;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v44 = v10;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Could not fetch data from cache: %@", buf, 0xCu);
    }
  }
  else if ([v9 count])
  {
    id v19 = [v9 firstObject];
    goto LABEL_16;
  }
  long long v20 = [GKCDGameFriendList alloc];
  long long v21 = +[GKCDGameFriendList entity];
  id v19 = [(GKCDGameFriendList *)v20 initWithEntity:v21 insertIntoManagedObjectContext:v5];

  [(GKCDGameFriendList *)v19 setBundleID:a1[4]];
LABEL_16:
  long long v22 = [(GKCDGameFriendList *)v19 expirationDate];
  unsigned int v23 = [(GKCDGameFriendList *)v19 _gkIsExpired:v22];

  if (v23)
  {
    long long v24 = +[GKNetworkRequestManager commonNetworkRequestManager];
    uint64_t v25 = GKBagKeyGetPerGameFriendPlayerIDs;
    unint64_t v26 = [a1[5] clientProxy];
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_1000525E0;
    v32[3] = &unk_1002D5E28;
    id v33 = a1[6];
    id v34 = a1[4];
    id v35 = v5;
    id v36 = a1[7];
    uint64_t v37 = v6;
    [v24 issueRequest:&__NSDictionary0__struct bagKey:v25 clientProxy:v26 handler:v32];
  }
  else
  {
    uint64_t v27 = [(GKCDGameFriendList *)v19 entries];
    id v28 = [v27 count];

    if (v28)
    {
      id v29 = (void (**)(id, void *))a1[7];
      long long v30 = [(GKCDGameFriendList *)v19 entries];
      long long v31 = v29[2](v29, v30);
      [a1[6] setResult:v31];
    }
    v6[2](v6);
  }
}

void sub_1000525E0(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7 = a2;
  [*(id *)(a1 + 32) setError:a3];
  if (v7 && !a3)
  {
    id v8 = [v7 objectForKey:@"results"];
    id v9 = +[NSMutableOrderedSet orderedSetWithCapacity:](NSMutableOrderedSet, "orderedSetWithCapacity:", [v8 count]);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100052760;
    void v13[3] = &unk_1002D5E00;
    id v10 = *(void **)(a1 + 32);
    id v14 = *(id *)(a1 + 40);
    id v15 = *(id *)(a1 + 48);
    id v16 = v8;
    id v17 = v9;
    double v20 = a4;
    id v18 = *(id *)(a1 + 32);
    id v19 = *(id *)(a1 + 56);
    id v11 = v9;
    id v12 = v8;
    [v10 performOnManagedObjectContext:v13];
  }
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_100052760(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v36 = a3;
  uint64_t v6 = +[GKCDGameFriendList _gkFetchRequest];
  id v7 = +[NSPredicate predicateWithFormat:@"bundleID == %@", *(void *)(a1 + 32)];
  [v6 setPredicate:v7];

  id v8 = *(void **)(a1 + 40);
  id v46 = 0;
  id v35 = v6;
  id v9 = [v8 executeFetchRequest:v6 error:&v46];
  id v34 = v46;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  id v10 = v9;
  id v11 = [v10 countByEnumeratingWithState:&v42 objects:v48 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v43;
    do
    {
      id v14 = 0;
      do
      {
        if (*(void *)v43 != v13) {
          objc_enumerationMutation(v10);
        }
        [v5 deleteObject:*(void *)(*((void *)&v42 + 1) + 8 * (void)v14)];
        id v14 = (char *)v14 + 1;
      }
      while (v12 != v14);
      id v12 = [v10 countByEnumeratingWithState:&v42 objects:v48 count:16];
    }
    while (v12);
  }
  id v33 = v10;

  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  id obj = *(id *)(a1 + 48);
  id v15 = [obj countByEnumeratingWithState:&v38 objects:v47 count:16];
  if (v15)
  {
    id v16 = v15;
    uint64_t v17 = *(void *)v39;
    do
    {
      id v18 = 0;
      do
      {
        uint64_t v19 = a1;
        if (*(void *)v39 != v17) {
          objc_enumerationMutation(obj);
        }
        double v20 = *(void **)(*((void *)&v38 + 1) + 8 * (void)v18);
        long long v21 = [GKCDGameFriend alloc];
        long long v22 = +[GKCDGameFriend entity];
        unsigned int v23 = [(GKCDGameFriend *)v21 initWithEntity:v22 insertIntoManagedObjectContext:v5];

        long long v24 = [v20 objectForKeyedSubscript:@"player-id"];
        [(GKCDGameFriend *)v23 setPlayerID:v24];

        a1 = v19;
        [*(id *)(v19 + 56) addObject:v23];

        id v18 = (char *)v18 + 1;
      }
      while (v16 != v18);
      id v16 = [obj countByEnumeratingWithState:&v38 objects:v47 count:16];
    }
    while (v16);
  }

  uint64_t v25 = +[NSDate dateWithTimeIntervalSinceNow:*(double *)(a1 + 80)];
  unint64_t v26 = [GKCDGameFriendList alloc];
  uint64_t v27 = +[GKCDGameFriendList entity];
  id v28 = [(GKCDGameFriendList *)v26 initWithEntity:v27 insertIntoManagedObjectContext:*(void *)(a1 + 40)];

  [(GKCDGameFriendList *)v28 setExpirationDate:v25];
  [(GKCDGameFriendList *)v28 setBundleID:*(void *)(a1 + 32)];
  if ([*(id *)(a1 + 56) count])
  {
    id v29 = [*(id *)(a1 + 56) copy];
    [(GKCDGameFriendList *)v28 setEntries:v29];

    uint64_t v30 = *(void *)(a1 + 72);
    long long v31 = [(GKCDGameFriendList *)v28 entries];
    long long v32 = (*(void (**)(uint64_t, void *))(v30 + 16))(v30, v31);
    [*(id *)(a1 + 64) setResult:v32];
  }
  v36[2](v36);
}

void sub_100052B04(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) result];
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_100052E84(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  unint64_t v26 = a3;
  uint64_t v6 = +[GKCDLoadedGame _gkFetchRequest];
  long long v24 = +[NSPredicate predicateWithFormat:@"bundleId IN %@", *(void *)(a1 + 32)];
  [v6 setPredicate:];
  uint64_t v25 = v6;
  id v7 = +[NSManagedObject _gkObjectsFromFetchRequest:v6 withContext:v5];
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  id v8 = [v7 countByEnumeratingWithState:&v31 objects:v36 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v32;
    do
    {
      id v11 = 0;
      do
      {
        if (*(void *)v32 != v10) {
          objc_enumerationMutation(v7);
        }
        id v12 = *(void **)(a1 + 40);
        uint64_t v13 = [*(id *)(*((void *)&v31 + 1) + 8 * (void)v11) bundleId];
        [v12 removeObject:v13];

        id v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      id v9 = [v7 countByEnumeratingWithState:&v31 objects:v36 count:16];
    }
    while (v9);
  }
  unsigned int v23 = v7;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v14 = *(id *)(a1 + 40);
  id v15 = [v14 countByEnumeratingWithState:&v27 objects:v35 count:16];
  if (v15)
  {
    id v16 = v15;
    uint64_t v17 = *(void *)v28;
    do
    {
      id v18 = 0;
      do
      {
        if (*(void *)v28 != v17) {
          objc_enumerationMutation(v14);
        }
        uint64_t v19 = *(void *)(*((void *)&v27 + 1) + 8 * (void)v18);
        double v20 = [GKCDLoadedGame alloc];
        long long v21 = +[GKCDLoadedGame entity];
        long long v22 = [(GKCDLoadedGame *)v20 initWithEntity:v21 insertIntoManagedObjectContext:v5];

        [(GKCDLoadedGame *)v22 setBundleId:v19];
        id v18 = (char *)v18 + 1;
      }
      while (v16 != v18);
      id v16 = [v14 countByEnumeratingWithState:&v27 objects:v35 count:16];
    }
    while (v16);
  }

  [*(id *)(a1 + 48) setResult:*(void *)(a1 + 40)];
  v26[2](v26);
}

void sub_100053114(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) result];
  if ([v2 count] && *(void *)(a1 + 40))
  {
    id v3 = *(void **)(a1 + 48);
    uint64_t v9 = *(void *)(a1 + 40);
    id v4 = +[NSArray arrayWithObjects:&v9 count:1];
    id v5 = [v2 allObjects];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    void v7[2] = sub_100053260;
    void v7[3] = &unk_1002D4F38;
    uint64_t v6 = *(void **)(a1 + 64);
    void v7[4] = *(void *)(a1 + 56);
    id v8 = v6;
    [v3 loadScopedPlayerIDs:v4 gameBundleIDs:v5 handler:v7];
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
}

void sub_100053260(uint64_t a1, void *a2, void *a3)
{
  id v11 = a3;
  id v7 = [a2 firstObject];
  id v8 = v7;
  if (!v7)
  {
    id v3 = [*(id *)(a1 + 32) credential];
    id v4 = [v3 playerInternal];
    id v8 = [v4 scopedIDs];
  }
  uint64_t v9 = [*(id *)(a1 + 32) credential];
  uint64_t v10 = [v9 playerInternal];
  [v10 setScopedIDs:v8];

  if (!v7)
  {
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_100053420(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10005368C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    v3();
  }
  else
  {
    id v4 = [*(id *)(a1 + 32) transactionGroupBypassingMultiUser];
    [v4 performOnManagedObjectContext:&stru_1002D5EC0];
    id v5 = [*(id *)(a1 + 32) clientProxy];
    uint64_t v6 = [v5 replyQueue];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    void v7[2] = sub_10005390C;
    void v7[3] = &unk_1002D3A20;
    id v8 = *(id *)(a1 + 40);
    [v4 notifyOnQueue:v6 block:v7];
  }
}

void sub_10005379C(id a1, NSManagedObjectContext *a2, id a3)
{
  id v4 = a2;
  id v5 = (void (**)(void))a3;
  uint64_t v6 = +[GKCDGameAccessList _gkFetchRequest];
  id v18 = 0;
  id v7 = [(NSManagedObjectContext *)v4 executeFetchRequest:v6 error:&v18];
  id v8 = v18;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v9 = v7;
  id v10 = [v9 countByEnumeratingWithState:&v14 objects:v19 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = *(void *)v15;
    do
    {
      uint64_t v13 = 0;
      do
      {
        if (*(void *)v15 != v12) {
          objc_enumerationMutation(v9);
        }
        -[NSManagedObjectContext deleteObject:](v4, "deleteObject:", *(void *)(*((void *)&v14 + 1) + 8 * (void)v13), (void)v14);
        uint64_t v13 = (char *)v13 + 1;
      }
      while (v11 != v13);
      id v11 = [v9 countByEnumeratingWithState:&v14 objects:v19 count:16];
    }
    while (v11);
  }

  v5[2](v5);
}

uint64_t sub_10005390C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100053AF0(uint64_t a1, void *a2, void *a3)
{
  id v33 = a2;
  long long v32 = a3;
  if (*(void *)(a1 + 32) && *(void *)(a1 + 56))
  {
    long long v30 = (id *)a1;
    id v5 = [[*(id *)(a1 + 48) cachedGamesPlayed:context:];
    long long v31 = v5;
    if (v5
      && ([v5 expirationDate],
          uint64_t v6 = objc_claimAutoreleasedReturnValue(),
          id v7 = v31,
          unsigned int v8 = [v31 _gkIsExpired:v6],
          v6,
          !v8))
    {
      id v35 = objc_alloc_init((Class)NSMutableArray);
      if (!os_log_GKGeneral)
      {
        id v19 = (id)GKOSLoggers();
        id v7 = v31;
      }
      double v20 = os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "getGamesPlayedMetaData using cache", buf, 2u);
      }
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      id obj = [v7 entries];
      id v21 = [obj countByEnumeratingWithState:&v36 objects:v50 count:16];
      if (v21)
      {
        long long v22 = 0;
        id v23 = 0;
        uint64_t v24 = *(void *)v37;
        do
        {
          uint64_t v25 = 0;
          unint64_t v26 = v22;
          long long v27 = v23;
          do
          {
            if (*(void *)v37 != v24) {
              objc_enumerationMutation(obj);
            }
            long long v28 = *(void **)(*((void *)&v36 + 1) + 8 * (void)v25);
            id v23 = [objc_alloc((Class)GKGameInternal) initWithCacheObject:v28];

            long long v22 = +[GKGameRecordInternal gameRecordForGame:v23];

            long long v29 = [v28 timeStamp];
            [v22 setLastPlayedDate:v29];

            [v35 addObject:v22];
            uint64_t v25 = (char *)v25 + 1;
            unint64_t v26 = v22;
            long long v27 = v23;
          }
          while (v21 != v25);
          id v21 = [obj countByEnumeratingWithState:&v36 objects:v50 count:16];
        }
        while (v21);
      }
      [v30[5] setResult:v35];
      v32[2]();
    }
    else
    {
      id v9 = v30[4];
      CFStringRef v51 = @"requested-player-id";
      id v52 = v9;
      id v35 = +[NSDictionary dictionaryWithObjects:&v52 forKeys:&v51 count:1];
      *(void *)buf = 0;
      long long v47 = buf;
      uint64_t v48 = 0x2020000000;
      uint64_t v49 = 0;
      id v10 = +[NSDate date];
      [v10 timeIntervalSince1970];
      uint64_t v12 = v11;

      uint64_t v49 = v12;
      uint64_t v13 = +[GKNetworkRequestManager commonNetworkRequestManager];
      long long v14 = [v30[6] clientProxy];
      v40[0] = _NSConcreteStackBlock;
      v40[1] = 3221225472;
      v40[2] = sub_100053F64;
      v40[3] = &unk_1002D5F38;
      long long v45 = buf;
      id v15 = v30[5];
      id v16 = v30[6];
      id v41 = v15;
      id v42 = v16;
      id v43 = v30[4];
      long long v44 = v32;
      [v13 issueRequest:v35 bagKey:@"gk-get-games-played-metadata" clientProxy:v14 handler:v40];

      _Block_object_dispose(buf, 8);
    }

    id v18 = v32;
  }
  else
  {
    long long v17 = +[NSError userErrorForCode:8 underlyingError:0];
    [*(id *)(a1 + 40) setError:v17];

    id v18 = v32;
    ((void (*)(void (**)(void)))v32[2])(v32);
  }
}

void sub_100053F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_100053F64(void *a1, void *a2, void *a3, double a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v32 = 0;
  id v33 = (double *)&v32;
  uint64_t v34 = 0x2020000000;
  uint64_t v35 = 0;
  id v9 = +[NSDate date];
  [v9 timeIntervalSince1970];
  uint64_t v11 = v10;

  uint64_t v35 = v11;
  uint64_t v12 = +[NSDate dateWithTimeIntervalSinceNow:a4];
  if (!os_log_GKGeneral) {
    id v13 = (id)GKOSLoggers();
  }
  long long v14 = os_log_GKDaemon;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    id v15 = +[NSNumber numberWithDouble:v33[3] - *(double *)(*(void *)(a1[8] + 8) + 24)];
    *(_DWORD *)buf = 138412290;
    long long v37 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "getGamesPlayedMetaData perf server:%@", buf, 0xCu);
  }
  id v16 = (void *)a1[4];
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  void v22[2] = sub_100054200;
  v22[3] = &unk_1002D5F10;
  id v23 = v16;
  id v17 = v8;
  id v24 = v17;
  id v18 = v7;
  uint64_t v29 = a1[8];
  uint64_t v19 = a1[5];
  double v20 = (void *)a1[6];
  id v25 = v18;
  uint64_t v26 = v19;
  id v27 = v20;
  id v21 = v12;
  double v31 = a4;
  id v28 = v21;
  long long v30 = &v32;
  [v23 performOnManagedObjectContext:v22];
  (*(void (**)(void))(a1[7] + 16))();

  _Block_object_dispose(&v32, 8);
}

void sub_1000541DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100054200(uint64_t a1, void *a2, void *a3)
{
  id v58 = a2;
  id v5 = a3;
  [*(id *)(a1 + 32) setError:*(void *)(a1 + 40)];
  if (*(void *)(a1 + 48) && !*(void *)(a1 + 40))
  {
    id v9 = +[NSDate date];
    [v9 timeIntervalSince1970];
    *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = v10;

    uint64_t v11 = [*(id *)(a1 + 48) objectForKeyedSubscript:@"results"];
    id v64 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v12 = [*(id *)(a1 + 56) cachedGamesPlayed:*(void *)(a1 + 64) context:v58];
    if (!v12)
    {
      id v13 = [GamesPlayed alloc];
      long long v14 = +[GamesPlayed entity];
      uint64_t v12 = [(GamesPlayed *)v13 initWithEntity:v14 insertIntoManagedObjectContext:v58];

      [(GamesPlayed *)v12 setPlayerID:*(void *)(a1 + 64)];
    }
    char v57 = v12;
    [(GamesPlayed *)v12 setExpirationDate:*(void *)(a1 + 72)];
    id v66 = objc_alloc_init((Class)NSMutableSet);
    id v63 = objc_alloc_init((Class)NSMutableDictionary);
    id v65 = objc_alloc_init((Class)NSMutableSet);
    id v68 = objc_alloc_init((Class)NSMutableDictionary);
    long long v77 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    id v15 = v11;
    id v16 = [v15 countByEnumeratingWithState:&v77 objects:v87 count:16];
    if (v16)
    {
      id v17 = v16;
      uint64_t v18 = *(void *)v78;
      do
      {
        for (unint64_t i = 0; i != v17; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v78 != v18) {
            objc_enumerationMutation(v15);
          }
          double v20 = [*(id *)(*((void *)&v77 + 1) + 8 * i) objectForKeyedSubscript:@"game-metadata"];
          id v21 = [v20 objectForKeyedSubscript:@"bundle-id"];
          [v65 addObject:v21];
        }
        id v17 = [v15 countByEnumeratingWithState:&v77 objects:v87 count:16];
      }
      while (v17);
    }

    long long v22 = +[NSPredicate predicateWithFormat:@"bundleID IN %@", v65];
    id v23 = +[GKCacheObject fetchRequestForContext:v58];
    [v23 setPredicate:v22];
    uint64_t v56 = v23;
    [v58 executeFetchRequest:v23 error:0];
    long long v73 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue();
    id v24 = [obj countByEnumeratingWithState:&v73 objects:v86 count:16];
    if (v24)
    {
      id v25 = v24;
      uint64_t v26 = *(void *)v74;
      do
      {
        for (j = 0; j != v25; j = (char *)j + 1)
        {
          if (*(void *)v74 != v26) {
            objc_enumerationMutation(obj);
          }
          id v28 = *(void **)(*((void *)&v73 + 1) + 8 * (void)j);
          uint64_t v29 = [v28 bundleID];
          [v68 setObject:v28 forKeyedSubscript:v29];
        }
        id v25 = [obj countByEnumeratingWithState:&v73 objects:v86 count:16];
      }
      while (v25);
    }
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v60 = v15;
    id v67 = [v60 countByEnumeratingWithState:&v69 objects:v85 count:16];
    if (v67)
    {
      uint64_t v54 = v22;
      uint64_t v55 = v5;
      long long v30 = 0;
      id v31 = 0;
      uint64_t v32 = 0;
      uint64_t v61 = *(void *)v70;
      uint64_t v62 = a1;
      do
      {
        id v33 = 0;
        uint64_t v34 = v31;
        uint64_t v35 = v32;
        do
        {
          if (*(void *)v70 != v61) {
            objc_enumerationMutation(v60);
          }
          long long v36 = *(void **)(*((void *)&v69 + 1) + 8 * (void)v33);
          long long v37 = [v36 objectForKeyedSubscript:@"game-metadata"];
          long long v38 = [v37 objectForKeyedSubscript:@"bundle-id"];

          uint64_t v39 = [v68 objectForKeyedSubscript:v38];

          long long v30 = (GKGameCacheObject *)v39;
          if (!v39) {
            long long v30 = [[GKGameCacheObject alloc] initWithContext:v58];
          }
          long long v40 = [v36 objectForKeyedSubscript:@"game-metadata"];
          id v41 = +[NSDate dateWithTimeIntervalSinceNow:*(double *)(v62 + 96)];
          [(GKGameCacheObject *)v30 updateWithServerRepresentation:v40 expirationDate:v41];

          [(GKGameCacheObject *)v30 setBundleID:v38];
          id v42 = [v36 objectForKeyedSubscript:@"timestamp"];
          id v43 = +[NSDate _gkDateFromServerTimestamp:v42];
          [(GKGameCacheObject *)v30 setTimeStamp:v43];

          [v66 addObject:v30];
          long long v44 = [(GKGameCacheObject *)v30 adamID];
          [v63 setObject:v30 forKeyedSubscript:v44];

          id v31 = [objc_alloc((Class)GKGameInternal) initWithCacheObject:v30];
          uint64_t v32 = +[GKGameRecordInternal gameRecordForGame:v31];

          long long v45 = [(GKGameCacheObject *)v30 timeStamp];
          [v32 setLastPlayedDate:v45];

          [v64 addObject:v32];
          id v33 = (char *)v33 + 1;
          uint64_t v34 = v31;
          uint64_t v35 = v32;
        }
        while (v67 != v33);
        id v67 = [v60 countByEnumeratingWithState:&v69 objects:v85 count:16];
      }
      while (v67);

      long long v22 = v54;
      id v5 = v55;
      a1 = v62;
    }

    id v46 = +[NSDate date];
    [v46 timeIntervalSince1970];
    *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = v47;

    [(GamesPlayed *)v57 setEntries:v66];
    if (!os_log_GKGeneral) {
      id v48 = (id)GKOSLoggers();
    }
    uint64_t v49 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      double v50 = *(double *)(*(void *)(*(void *)(a1 + 88) + 8) + 24)
          - *(double *)(*(void *)(*(void *)(a1 + 80) + 8) + 24);
      CFStringRef v51 = v49;
      id v52 = +[NSNumber numberWithDouble:v50];
      uint64_t v53 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v60 count]);
      *(_DWORD *)buf = 138412546;
      Swift::Int v82 = v52;
      __int16 v83 = 2112;
      long long v84 = v53;
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_INFO, "getGamesPlayedMetaData perf cache time:%@ results %@", buf, 0x16u);
    }
    [*(id *)(a1 + 32) setResult:v64];
    v5[2](v5);
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v6 = (id)GKOSLoggers();
    }
    id v7 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      id v8 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      Swift::Int v82 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Error: %@", buf, 0xCu);
    }
    [*(id *)(a1 + 32) setError:*(void *)(a1 + 40)];
    v5[2](v5);
  }
}

void sub_1000549E4(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) result];
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_100054C38(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (*(void *)(a1 + 32))
  {
    id v6 = +[GKCachingUtils ensureGamesPlayedList:playerID:](GKCachingUtils, "ensureGamesPlayedList:playerID:", a2);
    id v7 = [*(id *)(a1 + 48) longValue];
    id v8 = [v6 expirationDate];
    if (([v6 _gkIsExpired:v8] & 1) == 0)
    {
      id v9 = [v6 withinSecs];
      if ([v9 longValue])
      {
        uint64_t v10 = [v6 withinSecs];
        if ((uint64_t)v7 > (uint64_t)[v10 longValue])
        {

          goto LABEL_6;
        }
        uint64_t v26 = *(void *)(a1 + 48);

        if (!v26 || !v7) {
          goto LABEL_7;
        }
      }
      else
      {
      }
      if (!os_log_GKGeneral) {
        id v27 = (id)GKOSLoggers();
      }
      id v28 = os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        uint64_t v29 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        uint64_t v45 = v29;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "Using cached games played descriptors for : %@", buf, 0xCu);
      }
      long long v30 = [v6 entries];
      id v31 = [v30 count];

      if (v31)
      {
        uint64_t v32 = [v6 entries];
        id v33 = +[NSOrderedSet orderedSetWithOrderedSet:v32];

        uint64_t v34 = [*(id *)(a1 + 56) internalGameSummariesFromResults:v33 limit:*(void *)(a1 + 64)];
        [*(id *)(a1 + 40) setResult:v34];
      }
      v5[2](v5);
      goto LABEL_28;
    }
LABEL_6:

LABEL_7:
    if (!os_log_GKGeneral) {
      id v11 = (id)GKOSLoggers();
    }
    uint64_t v12 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v45 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Going to server for games played descriptors for : %@", buf, 0xCu);
    }
    id v14 = objc_alloc_init((Class)NSMutableDictionary);
    id v15 = *(void **)(a1 + 32);
    id v16 = [*(id *)(a1 + 56) localPlayer];
    id v17 = [v16 playerID];
    LOBYTE(v15) = [v15 isEqualToString:v17];

    if ((v15 & 1) == 0) {
      [v14 setObject:*(void *)(a1 + 32) forKeyedSubscript:@"requested-player-id"];
    }
    if (*(void *)(a1 + 48) && v7) {
      [v14 setObject:forKeyedSubscript:];
    }
    uint64_t v18 = [v6 objectID];
    uint64_t v19 = +[GKNetworkRequestManager commonNetworkRequestManager];
    double v20 = [*(id *)(a1 + 56) clientProxy];
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472;
    v35[2] = sub_1000550B0;
    v35[3] = &unk_1002D58B8;
    id v36 = *(id *)(a1 + 40);
    id v37 = v18;
    id v38 = *(id *)(a1 + 32);
    id v39 = *(id *)(a1 + 48);
    id v21 = v6;
    uint64_t v22 = *(void *)(a1 + 56);
    id v23 = *(void **)(a1 + 64);
    id v40 = v21;
    uint64_t v41 = v22;
    id v42 = v23;
    id v43 = v5;
    id v24 = v18;
    [v19 issueRequest:v14 bagKey:@"gk-get-games-played-summaries" clientProxy:v20 handler:v35];

LABEL_28:
    goto LABEL_29;
  }
  id v25 = +[NSError userErrorForCode:underlyingError:](NSError, "userErrorForCode:underlyingError:", 8);
  [*(id *)(a1 + 40) setError:v25];

  v5[2](v5);
LABEL_29:
}

void sub_1000550B0(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = objc_alloc_init((Class)NSMutableArray);
  [*(id *)(a1 + 32) setError:v8];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  void v17[2] = sub_100055240;
  v17[3] = &unk_1002D5F88;
  uint64_t v10 = *(void **)(a1 + 32);
  id v18 = *(id *)(a1 + 40);
  id v19 = *(id *)(a1 + 48);
  id v20 = v7;
  double v28 = a4;
  id v21 = v8;
  id v22 = v9;
  id v23 = *(id *)(a1 + 56);
  id v24 = *(id *)(a1 + 64);
  id v11 = *(id *)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 72);
  uint64_t v13 = *(void **)(a1 + 80);
  id v25 = v11;
  uint64_t v26 = v12;
  id v27 = v13;
  id v14 = v9;
  id v15 = v8;
  id v16 = v7;
  [v10 performOnManagedObjectContext:v17];
  (*(void (**)(void))(*(void *)(a1 + 88) + 16))();
}

void sub_100055240(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v50 = 0;
  id v8 = [v5 existingObjectWithID:v7 error:&v50];
  id v9 = v50;
  if (v9) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = v8 == 0;
  }
  if (v10)
  {
    if (!os_log_GKGeneral) {
      id v11 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100064754();
    }
    uint64_t v12 = +[GKCachingUtils ensureGamesPlayedList:v5 playerID:*(void *)(a1 + 40)];

    id v8 = (void *)v12;
  }
  if (*(void *)(a1 + 48) && !*(void *)(a1 + 56))
  {
    id v15 = +[GKCachingUtils existingGamePlatforms:v5];
    id v17 = +[NSDate dateWithTimeIntervalSinceNow:*(double *)(a1 + 112)];
    [*(id *)(a1 + 48) objectForKeyedSubscript:@"results"];
    long long v46 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue();
    id v18 = [obj countByEnumeratingWithState:&v46 objects:v51 count:16];
    if (v18)
    {
      id v19 = v18;
      id v40 = v17;
      id v41 = v9;
      long long v44 = v15;
      id v42 = v8;
      id v43 = v6;
      id v20 = 0;
      uint64_t v21 = *(void *)v47;
      do
      {
        for (unint64_t i = 0; i != v19; unint64_t i = (char *)i + 1)
        {
          id v23 = v20;
          if (*(void *)v47 != v21) {
            objc_enumerationMutation(obj);
          }
          id v24 = *(void **)(*((void *)&v46 + 1) + 8 * i);
          id v25 = [v24 objectForKeyedSubscript:@"game"];
          uint64_t v26 = [v24 objectForKeyedSubscript:@"timestamp"];
          id v27 = +[NSDate _gkDateFromServerTimestamp:v26];

          double v28 = [GameSummary alloc];
          uint64_t v29 = +[GameSummary entity];
          id v20 = [(GameSummary *)v28 initWithEntity:v29 insertIntoManagedObjectContext:v5];

          long long v30 = [v25 objectForKeyedSubscript:@"adam-id"];
          [(GameSummary *)v20 setAdamID:v30];

          id v31 = [v25 objectForKeyedSubscript:@"bundle-id"];
          [(GameSummary *)v20 setBundleID:v31];

          uint64_t v32 = [(GameSummary *)v20 bundleID];
          if (v32)
          {
            id v33 = (void *)v32;
            uint64_t v34 = [(GameSummary *)v20 adamID];

            if (v34)
            {
              [(GameSummary *)v20 setPlayedAt:v27];
              uint64_t v35 = [v25 objectForKeyedSubscript:@"is-arcade-game"];
              [(GameSummary *)v20 setIsArcade:v35];

              id v36 = +[GKCachingUtils compatiblePlatforms:v25 platformLookup:v44 moc:v5];
              [(GameSummary *)v20 setCompatiblePlatforms:v36];

              [*(id *)(a1 + 64) addObject:v20];
            }
          }
        }
        id v19 = [obj countByEnumeratingWithState:&v46 objects:v51 count:16];
      }
      while (v19);

      id v8 = v42;
      id v6 = v43;
      id v15 = v44;
      id v17 = v40;
      id v9 = v41;
    }
    [v8 setExpirationDate:v17];
    if (*(void *)(a1 + 72)) {
      id v37 = *(_UNKNOWN ***)(a1 + 72);
    }
    else {
      id v37 = &off_1002F1F70;
    }
    [v8 setWithinSecs:v37];
    if ([*(id *)(a1 + 64) count])
    {
      id v16 = +[NSOrderedSet orderedSetWithArray:*(void *)(a1 + 64)];
      id v38 = [*(id *)(a1 + 80) entries];
      [v8 removeEntries:v38];

      [v8 addEntries:v16];
      [*(id *)(a1 + 88) setObject:v16 forKeyedSubscript:@"response"];
    }
    else
    {
      id v16 = 0;
    }

    goto LABEL_34;
  }
  uint64_t v13 = [v8 entries];
  id v14 = [v13 count];

  if (v14)
  {
    id v15 = [v8 entries];
    id v16 = +[NSOrderedSet orderedSetWithOrderedSet:v15];
LABEL_34:

    goto LABEL_35;
  }
  id v16 = 0;
LABEL_35:
  id v39 = [*(id *)(a1 + 96) internalGameSummariesFromResults:v16 limit:*(void *)(a1 + 104)];
  [*(id *)(a1 + 88) setResult:v39];
  v6[2](v6);
}

void sub_100055728(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) result];
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

uint64_t sub_100055924(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

void sub_10005593C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = [*(id *)(a1 + 32) clientProxy];
  id v8 = [v7 replyQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100055A3C;
  block[3] = &unk_1002D48D8;
  id v9 = *(id *)(a1 + 40);
  id v14 = v6;
  id v15 = v9;
  id v13 = v5;
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v8, block);
}

uint64_t sub_100055A3C(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_100055C48(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) ampController];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100055D3C;
  void v7[3] = &unk_1002D6018;
  id v5 = *(void **)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v5;
  id v11 = v3;
  id v9 = *(id *)(a1 + 48);
  id v10 = *(id *)(a1 + 56);
  id v6 = v3;
  [v4 getBagWithCompletion:v7];
}

void sub_100055D3C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 localPlayer];
  id v6 = [v5 playerID];
  uint64_t v7 = +[GKClientProxy gameCenterClient];
  id v8 = [v7 language];
  id v16 = 0;
  id v9 = +[GKAppMetadataFetcher createFor:v6 language:v8 bag:v4 error:&v16];

  id v10 = v16;
  if (v10)
  {
    [*(id *)(a1 + 40) setError:v10];
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 48);
    uint64_t v12 = *(void *)(a1 + 56);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100055F44;
    void v13[3] = &unk_1002D3958;
    id v14 = *(id *)(a1 + 40);
    id v15 = *(id *)(a1 + 64);
    [v9 fetchWithBundleIDs:v11 adamIDs:v12 batchSize:100 ttl:&stru_1002D5FF0 refreshExpiredCompletion:v13 completionHandler:900.0];
  }
}

void sub_100055ED4(id a1, NSDictionary *a2)
{
  uint64_t v2 = a2;
  if (!os_log_GKGeneral) {
    id v3 = (id)GKOSLoggers();
  }
  id v4 = (void *)os_log_GKCache;
  if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
    sub_1000647BC(v4, v2);
  }
}

uint64_t sub_100055F44(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setResult:a2];
  [*(id *)(a1 + 32) setError:v6];

  uint64_t v7 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v7();
}

void sub_100055FB4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_1000561C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [GKAppMetadataCache alloc];
  id v5 = [*(id *)(a1 + 32) localPlayer];
  id v6 = [v5 playerID];
  uint64_t v7 = +[GKClientProxy gameCenterClient];
  id v8 = [v7 language];
  id v14 = 0;
  id v9 = [(GKAppMetadataCache *)v4 initWithPlayerID:v6 language:v8 error:&v14];
  id v10 = v14;

  if (v10)
  {
    [*(id *)(a1 + 40) setError:v10];
    v3[2](v3);
  }
  else
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100056334;
    v11[3] = &unk_1002D3BC8;
    id v12 = *(id *)(a1 + 40);
    id v13 = v3;
    [(GKAppMetadataCache *)v9 deleteAllWithCompletionHandler:v11];
  }
}

uint64_t sub_100056334(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setError:a2];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_10005637C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100056958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_10005697C(uint64_t a1, uint64_t a2, void *a3)
{
  id v8 = a3;
  id v5 = +[GKCacheObject firstObjectMatchingPredicate:0 context:a2];
  if ([v5 isValid])
  {
    id v6 = [v5 internalRepresentation];
    [*(id *)(a1 + 32) setResult:v6];

    uint64_t v7 = [v5 seed];
    [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:@"seed"];

    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v5 expired] ^ 1;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) &= *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8)
                                                                           + 24);
  }
  v8[2]();
}

void sub_100056A90(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"seed"];
  (*(void (**)(uint64_t, id, void *, void, void))(v2 + 16))(v2, v4, v3, *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24));
}

void sub_100056D24(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[GKNetworkRequestManager commonNetworkRequestManager];
  id v5 = [*(id *)(a1 + 32) clientProxy];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100056E14;
  void v7[3] = &unk_1002D50A0;
  id v8 = *(id *)(a1 + 40);
  id v9 = v3;
  id v6 = v3;
  [v4 issueRequest:&off_1002F2C28 bagKey:@"gk-get-top-game-list" clientProxy:v5 handler:v7];
}

void sub_100056E14(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7 = a2;
  [*(id *)(a1 + 32) setError:a3];
  if (v7)
  {
    uint64_t v11 = +[NSNumber numberWithDouble:a4];
    [*(id *)(a1 + 32) setObject:v11 forKeyedSubscript:@"ttl"];

    id v12 = *(void **)(a1 + 32);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100056F18;
    void v13[3] = &unk_1002D6068;
    double v15 = a4;
    id v14 = v7;
    [v12 performOnManagedObjectContext:v13];
  }
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v8, v9, v10);
}

void sub_100056F18(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  id v6 = +[GKCacheObject firstObjectMatchingPredicate:0 context:v8];
  if (!v6) {
    id v6 = [(GKCacheObject *)[GKTopGamesListCacheObject alloc] initWithManagedObjectContext:v8];
  }
  id v7 = +[NSDate dateWithTimeIntervalSinceNow:*(double *)(a1 + 40)];
  [(GKTopGamesListCacheObject *)v6 updateWithServerRepresentation:*(void *)(a1 + 32) expirationDate:v7];
  v5[2](v5);
}

void sub_100056FEC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v6 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"ttl"];
  [v6 doubleValue];
  double v4 = v3;
  id v5 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, void *, double))(v2 + 16))(v2, v5, v4);
}

void sub_100057218(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = *(void **)(a1 + 32);
  id v5 = [*(id *)(a1 + 40) context];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_1000572E8;
  v9[3] = &unk_1002D60E0;
  id v6 = *(id *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 32);
  id v10 = v6;
  uint64_t v11 = v7;
  id v12 = v3;
  id v8 = v3;
  [v4 fetchTopGamesInContext:v5 handler:v9];
}

uint64_t sub_1000572E8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  [*(id *)(a1 + 32) setResult:a2];
  if ((a4 & 1) == 0)
  {
    id v8 = *(void **)(a1 + 32);
    uint64_t v9 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKGameService.m", 1071, "-[GKGameServicePrivate getTopGamesWithHandler:]_block_invoke_2");
    id v10 = [v8 transactionGroupWithName:v9];

    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_10005748C;
    void v19[3] = &unk_1002D3A70;
    void v19[4] = *(void *)(a1 + 40);
    id v11 = v10;
    id v20 = v11;
    [v11 perform:v19];
    if ((a5 & 1) == 0)
    {
      id v12 = *(void **)(a1 + 32);
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      void v16[2] = sub_10005759C;
      void v16[3] = &unk_1002D3980;
      id v17 = v11;
      int8x16_t v15 = *(int8x16_t *)(a1 + 32);
      id v13 = (id)v15.i64[0];
      int8x16_t v18 = vextq_s8(v15, v15, 8uLL);
      [v12 perform:v16];
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10005748C(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = *(void **)(a1 + 32);
  id v5 = [*(id *)(a1 + 40) context];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100057554;
  void v7[3] = &unk_1002D6090;
  id v8 = *(id *)(a1 + 40);
  id v9 = v3;
  id v6 = v3;
  [v4 loadTopGamesWithContext:v5 handler:v7];
}

uint64_t sub_100057554(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setError:a2];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_10005759C(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1[4];
  id v5 = [a1[5] clientProxy];
  id v6 = [v5 replyQueue];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_100057698;
  v10[3] = &unk_1002D39F8;
  id v11 = a1[6];
  id v7 = a1[4];
  id v8 = a1[5];
  id v12 = v7;
  id v13 = v8;
  id v14 = v3;
  id v9 = v3;
  [v4 notifyOnQueue:v6 block:v10];
}

void sub_100057698(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 40) error];
  [*(id *)(a1 + 32) setError:v2];

  id v3 = [*(id *)(a1 + 40) error];

  if (v3)
  {
    id v4 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    v4();
  }
  else
  {
    id v5 = *(void **)(a1 + 48);
    id v6 = [*(id *)(a1 + 32) context];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    void v7[2] = sub_1000577C4;
    void v7[3] = &unk_1002D60B8;
    id v8 = *(id *)(a1 + 32);
    id v9 = *(id *)(a1 + 56);
    [v5 fetchTopGamesInContext:v6 handler:v7];
  }
}

uint64_t sub_1000577C4(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setResult:a2];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_10005780C(id *a1)
{
  uint64_t v2 = [a1[4] result];
  [a1[4] setResult:0];
  if ([v2 count])
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_100057988;
    v10[3] = &unk_1002D3980;
    id v3 = a1[4];
    void v10[4] = a1[5];
    id v11 = v2;
    id v12 = a1[4];
    [v3 perform:v10];
  }
  id v4 = a1[4];
  id v5 = [a1[5] clientProxy];
  id v6 = [v5 replyQueue];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100057AB0;
  void v7[3] = &unk_1002D3930;
  id v9 = a1[6];
  id v8 = a1[4];
  [v4 notifyOnQueue:v6 block:v7];
}

void sub_100057988(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100057A40;
  void v7[3] = &unk_1002D4F38;
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v6 = v3;
  [v4 getGameMetadataForBundleIDs:v5 handler:v7];
}

uint64_t sub_100057A40(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setResult:a2];
  [*(id *)(a1 + 32) setError:v6];

  id v7 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v7();
}

void sub_100057AB0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_100057D70(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_100057D94(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a3;
  id v6 = +[GKCacheObject firstObjectMatchingPredicate:0 context:a2];
  id v7 = v6;
  if (v6)
  {
    id v8 = [v6 bundleIDs];
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    id v9 = *(id *)(a1 + 32);
    id v10 = [v9 countByEnumeratingWithState:&v21 objects:v27 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v22;
      while (2)
      {
        for (unint64_t i = 0; i != v11; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v22 != v12) {
            objc_enumerationMutation(v9);
          }
          uint64_t v14 = *(void *)(*((void *)&v21 + 1) + 8 * i);
          if ((objc_msgSend(v8, "containsObject:", v14, (void)v21) & 1) == 0)
          {
            if (!os_log_GKGeneral) {
              id v16 = (id)GKOSLoggers();
            }
            id v17 = os_log_GKMatch;
            char v15 = 1;
            if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              uint64_t v26 = v14;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "needForceUpdate = YES, since one/more bundleID is not existing in the cached list: %@", buf, 0xCu);
            }
            goto LABEL_15;
          }
        }
        id v11 = [v9 countByEnumeratingWithState:&v21 objects:v27 count:16];
        if (v11) {
          continue;
        }
        break;
      }
    }
    char v15 = 0;
LABEL_15:

    unsigned int v18 = [v7 isValid];
    if ((v15 & 1) == 0 && v18)
    {
      id v19 = [v7 multiplayerGames];
      [*(id *)(a1 + 40) setResult:v19];

      id v20 = [v7 seed];
      [*(id *)(a1 + 40) setObject:v20 forKeyedSubscript:@"seed"];

      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v7 expired] ^ 1;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) &= *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8)
                                                                             + 24);
    }
  }
  v5[2](v5);
}

void sub_10005800C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"seed"];
  (*(void (**)(uint64_t, id, void *, void, void))(v2 + 16))(v2, v4, v3, *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24));
}

void sub_1000582CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[GKApplicationWorkspace defaultWorkspace];
  uint64_t v5 = [v4 gameDescriptorsWithInstalledBundleVersionsForBundleIDs:*(void *)(a1 + 32)];

  CFStringRef v13 = @"games";
  uint64_t v14 = v5;
  id v6 = +[NSDictionary dictionaryWithObjects:&v14 forKeys:&v13 count:1];
  id v7 = +[GKNetworkRequestManager commonNetworkRequestManager];
  id v8 = [*(id *)(a1 + 40) clientProxy];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_100058448;
  v10[3] = &unk_1002D50A0;
  id v11 = *(id *)(a1 + 48);
  id v12 = v3;
  id v9 = v3;
  [v7 issueRequest:v6 bagKey:@"gk-get-game-features" clientProxy:v8 handler:v10];
}

void sub_100058448(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7 = a2;
  [*(id *)(a1 + 32) setError:a3];
  if (v7)
  {
    id v11 = +[NSNumber numberWithDouble:a4];
    [*(id *)(a1 + 32) setObject:v11 forKeyedSubscript:@"ttl"];

    id v12 = *(void **)(a1 + 32);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10005854C;
    void v13[3] = &unk_1002D6068;
    double v15 = a4;
    id v14 = v7;
    [v12 performOnManagedObjectContext:v13];
  }
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v8, v9, v10);
}

void sub_10005854C(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  uint64_t v5 = a3;
  id v6 = +[GKCacheObject firstObjectMatchingPredicate:0 context:v8];
  if (!v6) {
    id v6 = [(GKCacheObject *)[GKOnDeviceMultiplayerGameListCacheObject alloc] initWithManagedObjectContext:v8];
  }
  id v7 = +[NSDate dateWithTimeIntervalSinceNow:*(double *)(a1 + 40)];
  [(GKOnDeviceMultiplayerGameListCacheObject *)v6 updateWithServerRepresentation:*(void *)(a1 + 32) expirationDate:v7];
  v5[2](v5);
}

void sub_100058620(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v6 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"ttl"];
  [v6 doubleValue];
  double v4 = v3;
  uint64_t v5 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, void *, double))(v2 + 16))(v2, v5, v4);
}

void sub_10005886C(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = *(void **)(a1 + 32);
  uint64_t v5 = [*(id *)(a1 + 40) context];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_100058958;
  v10[3] = &unk_1002D6130;
  uint64_t v6 = *(void *)(a1 + 48);
  id v7 = *(id *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 32);
  id v11 = v7;
  uint64_t v12 = v8;
  id v13 = *(id *)(a1 + 48);
  id v14 = v3;
  id v9 = v3;
  [v4 fetchOnDeviceMultiplayerGamesInContext:v5 forBundleIDs:v6 handler:v10];
}

uint64_t sub_100058958(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  [*(id *)(a1 + 32) setResult:a2];
  if ((a4 & 1) == 0)
  {
    uint64_t v8 = *(void **)(a1 + 32);
    id v9 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKGameService.m", 1199, "-[GKGameServicePrivate getOnDeviceMultiplayerGamesForBundleIDs:handler:]_block_invoke_2");
    uint64_t v10 = [v8 transactionGroupWithName:v9];

    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_100058B28;
    v20[3] = &unk_1002D3980;
    void v20[4] = *(void *)(a1 + 40);
    id v11 = v10;
    id v21 = v11;
    id v22 = *(id *)(a1 + 48);
    [v11 perform:v20];
    if ((a5 & 1) == 0)
    {
      uint64_t v12 = *(void **)(a1 + 32);
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      void v16[2] = sub_100058C44;
      void v16[3] = &unk_1002D48B0;
      id v17 = v11;
      int8x16_t v15 = *(int8x16_t *)(a1 + 32);
      id v13 = (id)v15.i64[0];
      int8x16_t v18 = vextq_s8(v15, v15, 8uLL);
      id v19 = *(id *)(a1 + 48);
      [v12 perform:v16];
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_100058B28(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = *(void **)(a1 + 32);
  uint64_t v5 = [*(id *)(a1 + 40) context];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100058BFC;
  void v8[3] = &unk_1002D6090;
  uint64_t v6 = *(void *)(a1 + 48);
  id v9 = *(id *)(a1 + 40);
  id v10 = v3;
  id v7 = v3;
  [v4 loadOnDeviceMultiplayerGamesWithContext:v5 forBundleIDs:v6 handler:v8];
}

uint64_t sub_100058BFC(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setError:a2];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_100058C44(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1[4];
  uint64_t v5 = [a1[5] clientProxy];
  uint64_t v6 = [v5 replyQueue];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_100058D50;
  v10[3] = &unk_1002D39A8;
  id v11 = a1[6];
  id v7 = a1[4];
  id v8 = a1[5];
  id v12 = v7;
  id v13 = v8;
  id v14 = a1[7];
  id v15 = v3;
  id v9 = v3;
  [v4 notifyOnQueue:v6 block:v10];
}

void sub_100058D50(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 40) error];
  [*(id *)(a1 + 32) setError:v2];

  id v3 = [*(id *)(a1 + 40) error];

  if (v3)
  {
    id v4 = *(void (**)(void))(*(void *)(a1 + 64) + 16);
    v4();
  }
  else
  {
    uint64_t v5 = *(void **)(a1 + 48);
    uint64_t v6 = [*(id *)(a1 + 32) context];
    uint64_t v7 = *(void *)(a1 + 56);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100058E84;
    void v8[3] = &unk_1002D60B8;
    id v9 = *(id *)(a1 + 32);
    id v10 = *(id *)(a1 + 64);
    [v5 fetchOnDeviceMultiplayerGamesInContext:v6 forBundleIDs:v7 handler:v8];
  }
}

uint64_t sub_100058E84(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setResult:a2];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_100058ECC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v4 = [*(id *)(a1 + 32) result];
    id v3 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, id, void *))(v1 + 16))(v1, v4, v3);
  }
}

void sub_100059050(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = dispatch_get_global_queue(-32768, 0);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100059130;
  void v7[3] = &unk_1002D39F8;
  uint64_t v5 = *(void **)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v5;
  id v9 = *(id *)(a1 + 48);
  id v10 = v3;
  id v6 = v3;
  dispatch_async(v4, v7);
}

void sub_100059130(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v3 = (id)GKOSLoggers();
  }
  if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
    sub_100064854();
  }
  id v4 = +[GKApplicationWorkspace defaultWorkspace];
  uint64_t v5 = [v4 availableGameIdentifiers];
  id v6 = [v5 count];
  if (v6)
  {
    id v10 = v6;
    id v11 = +[NSMutableSet setWithCapacity:v6];
    id v12 = +[NSMutableDictionary dictionaryWithCapacity:v10];
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    v26[2] = sub_10005936C;
    v26[3] = &unk_1002D6158;
    id v27 = v4;
    id v13 = v11;
    id v28 = v13;
    id v14 = v12;
    id v29 = v14;
    [v5 enumerateObjectsUsingBlock:v26];
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_100059414;
    v20[3] = &unk_1002D5FB0;
    id v21 = v13;
    id v15 = *(void **)(a1 + 40);
    id v22 = *(id *)(a1 + 48);
    id v23 = v14;
    id v16 = *(id *)(a1 + 40);
    uint64_t v17 = *(void *)(a1 + 32);
    id v24 = v16;
    uint64_t v25 = v17;
    id v18 = v14;
    id v19 = v13;
    [v15 performOnManagedObjectContext:v20];
  }
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 56) + 16))(*(void *)(a1 + 56), v7, v8, v9);
}

void sub_10005936C(id *a1, void *a2)
{
  id v6 = a2;
  id v4 = [a1[4] applicationProxyForBundleID:v6];
  [a1[5] addObject:v6];
  uint64_t v5 = [v4 purchaseDate];
  if (v5) {
    [a1[6] setObject:v5 forKeyedSubscript:v6];
  }
}

void sub_100059414(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v8 = [*(id *)(a1 + 32) allObjects];
  uint64_t v9 = +[GKGameCacheObject gamesForBundleIDs:v8 context:v5];

  id v10 = +[GKPlayerProfileCacheObject profileForPlayer:*(void *)(a1 + 40) context:v5];
  id v11 = +[GKGameRecordCacheObject recordsForGames:v9 playerProfile:v10];
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_100059654;
  v20[3] = &unk_1002D6180;
  id v21 = *(id *)(a1 + 48);
  id v12 = v5;
  id v22 = v12;
  [v11 enumerateObjectsUsingBlock:v20];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  void v17[2] = sub_1000596F4;
  v17[3] = &unk_1002D3980;
  id v13 = *(void **)(a1 + 56);
  void v17[4] = *(void *)(a1 + 64);
  id v18 = *(id *)(a1 + 32);
  id v14 = v12;
  id v19 = v14;
  [v13 perform:v17];
  uint64_t v15 = [v10 gameList];
  id v16 = (GKGameListCacheObject *)v15;
  if (v10 && !v15)
  {
    id v16 = [(GKCacheObject *)[GKGameListCacheObject alloc] initWithManagedObjectContext:v14];
    [(GKGameListCacheObject *)v16 setPlayer:v10];
  }
  [(GKListCacheObject *)v16 updateSeed];
  [v14 refreshObject:v16 mergeChanges:1];
  v6[2](v6);
}

void sub_100059654(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 game];
  id v6 = [v4 bundleID];

  id v5 = [*(id *)(a1 + 32) objectForKeyedSubscript:v6];
  [v3 setPurchaseDate:v5];

  [*(id *)(a1 + 40) refreshObject:v3 mergeChanges:1];
}

void sub_1000596F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v5 = [*(id *)(a1 + 40) allObjects];
  uint64_t v6 = *(void *)(a1 + 48);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000597B4;
  void v8[3] = &unk_1002D61A8;
  id v9 = v3;
  id v7 = v3;
  [v4 loadGameMetadataForBundleIDs:v5 context:v6 handler:v8];
}

uint64_t sub_1000597B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100059A38(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_100059A5C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  id v7 = [*(id *)(a1 + 32) playerID];
  uint64_t v8 = +[GKCacheObject fetchRequestForContext:v5];
  [v8 setFetchLimit:1];
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
  {
    id v9 = +[NSPredicate predicateWithFormat:@"expirationDate != nil && player.playerID = %@", v7];
  }
  else
  {
    id v10 = +[NSDate date];
    id v9 = +[NSPredicate predicateWithFormat:@"expirationDate > %@ && player.playerID = %@", v10, v7];
  }
  [v8 setPredicate:v9];
  id v30 = 0;
  id v11 = [v5 executeFetchRequest:v8 error:&v30];
  id v12 = v30;
  id v13 = [v11 firstObject];

  *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = v13 != 0;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v13 != 0;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) && *(_DWORD *)(a1 + 72))
  {
    id v24 = v7;
    id v14 = [v13 seed];
    [*(id *)(a1 + 40) setObject:v14 forKeyedSubscript:@"seed"];

    uint64_t v15 = [v13 entries];
    id v16 = [v15 _gkValuesForKeyPath:@"bundleID"];

    if (*(unsigned char *)(a1 + 76))
    {
      uint64_t v17 = +[NSMutableSet setWithArray:v16];
      +[GKApplicationWorkspace defaultWorkspace];
      id v18 = v23 = v12;
      id v19 = [v18 availableGameIdentifiers];
      [v17 addObjectsFromArray:v19];

      id v12 = v23;
      uint64_t v20 = [v17 allObjects];

      id v16 = (void *)v20;
    }
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_100059D74;
    v25[3] = &unk_1002D4518;
    id v21 = *(void **)(a1 + 40);
    void v25[4] = *(void *)(a1 + 48);
    id v26 = *(id *)(a1 + 32);
    id v27 = v16;
    id v28 = v5;
    id v29 = *(id *)(a1 + 40);
    id v22 = v16;
    [v21 perform:v25];

    id v7 = v24;
  }
  v6[2](v6);
}

void sub_100059D74(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_100059E44;
  v9[3] = &unk_1002D60B8;
  id v10 = *(id *)(a1 + 64);
  id v11 = v3;
  id v8 = v3;
  [v4 fetchGameStatsForPlayer:v5 bundleIdentifiers:v6 responseKind:2 context:v7 handler:v9];
}

void sub_100059E44(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = +[NSSortDescriptor sortDescriptorWithKey:@"self" ascending:0 comparator:&stru_1002D61E8];
  id v4 = +[NSArray arrayWithObject:v6];
  uint64_t v5 = [v3 sortedArrayUsingDescriptors:v4];

  [*(id *)(a1 + 32) setResult:v5];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

int64_t sub_100059F10(id a1, id a2, id a3)
{
  id v4 = a2;
  id v5 = a3;
  id v6 = v4;
  id v7 = v5;
  id v8 = [v6 platform];
  if ((v8 == (id)1) == ([v7 platform] != (id)1))
  {
    if (v8 == (id)1) {
      int64_t v10 = -1;
    }
    else {
      int64_t v10 = 1;
    }
  }
  else
  {
    id v9 = [v6 lastPlayedDate];
    if (v9) {
      [v6 lastPlayedDate];
    }
    else {
    id v11 = [v6 purchaseDate];
    }

    id v12 = [v7 lastPlayedDate];
    if (v12) {
      [v7 lastPlayedDate];
    }
    else {
    id v13 = [v7 purchaseDate];
    }

    int64_t v10 = (int64_t)[v11 compare:v13];
  }

  return v10;
}

void sub_10005A038(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"seed"];
  (*(void (**)(uint64_t, id, void *, void, void))(v2 + 16))(v2, v4, v3, *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24));
}

void sub_10005A2F0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_10005A308(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 32);
  id v7 = a3;
  unsigned __int8 v8 = [v6 isLocalPlayer];
  id v9 = [*(id *)(a1 + 32) playerID];
  if (v9)
  {
    int64_t v10 = *(void **)(a1 + 40);
    id v11 = [*(id *)(a1 + 48) clientProxy];
    id v12 = [v11 replyQueue];
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    void v21[2] = sub_10005A560;
    v21[3] = &unk_1002D6340;
    unsigned __int8 v27 = v8;
    id v22 = v9;
    int8x16_t v20 = *(int8x16_t *)(a1 + 40);
    id v13 = (id)v20.i64[0];
    int8x16_t v23 = vextq_s8(v20, v20, 8uLL);
    uint64_t v26 = *(void *)(a1 + 56);
    id v24 = v5;
    id v25 = *(id *)(a1 + 32);
    [v10 performOnQueue:v12 block:v21];

    id v14 = v22;
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v15 = (id)GKOSLoggers();
    }
    id v16 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v17 = *(void **)(a1 + 48);
      id v18 = v16;
      id v19 = [v17 clientProxy];
      *(_DWORD *)buf = 138412290;
      id v29 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Cannot load games with no playerID and no localPlayer for %@", buf, 0xCu);
    }
    id v14 = +[NSError userErrorForCode:17 underlyingError:0];
    [*(id *)(a1 + 40) setError:v14];
  }

  v7[2](v7);
}

void sub_10005A560(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 80))
  {
    id v4 = 0;
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 32);
    CFStringRef v22 = @"requested-player-id";
    uint64_t v23 = v5;
    id v4 = +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];
  }
  id v6 = +[GKNetworkRequestManager commonNetworkRequestManager];
  id v7 = [*(id *)(a1 + 40) clientProxy];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10005A714;
  void v13[3] = &unk_1002D6318;
  id v8 = *(id *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 72);
  id v14 = v8;
  uint64_t v20 = v9;
  id v15 = *(id *)(a1 + 56);
  id v10 = *(id *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  id v16 = v10;
  uint64_t v17 = v11;
  char v21 = *(unsigned char *)(a1 + 80);
  id v18 = *(id *)(a1 + 64);
  id v19 = v3;
  id v12 = v3;
  [v6 issueRequest:v4 bagKey:@"gk-get-games-played-descriptor" clientProxy:v7 handler:v13];
}

void sub_10005A714(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7 = a2;
  [*(id *)(a1 + 32) setError:a3];
  if (v7 && !a3)
  {
    *(double *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = a4;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    void v15[2] = sub_10005A84C;
    v15[3] = &unk_1002D62F0;
    double v22 = a4;
    uint64_t v11 = *(void **)(a1 + 40);
    id v16 = *(id *)(a1 + 48);
    id v17 = *(id *)(a1 + 40);
    id v18 = v7;
    id v12 = *(id *)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 56);
    id v14 = *(void **)(a1 + 64);
    id v19 = v12;
    uint64_t v20 = v13;
    char v23 = *(unsigned char *)(a1 + 88);
    id v21 = v14;
    [v11 performBlockAndWait:v15];
  }
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 72) + 16))(*(void *)(a1 + 72), v8, v9, v10);
}

void sub_10005A84C(uint64_t a1)
{
  uint64_t v2 = +[NSDate dateWithTimeIntervalSinceNow:*(double *)(a1 + 80)];
  id v3 = +[GKPlayerProfileCacheObject playerProfileWithPlayerID:*(void *)(a1 + 32) inManagedObjectContext:*(void *)(a1 + 40)];
  uint64_t v4 = [v3 gameList];
  uint64_t v5 = (GKGameListCacheObject *)v4;
  if (v3) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    uint64_t v5 = [(GKCacheObject *)[GKGameListCacheObject alloc] initWithManagedObjectContext:*(void *)(a1 + 40)];
    [(GKGameListCacheObject *)v5 setPlayer:v3];
  }
  [(GKGameListCacheObject *)v5 updateWithServerRepresentation:*(void *)(a1 + 48) expirationDate:v2];
  id v7 = [(GKGameListCacheObject *)v5 seed];
  [*(id *)(a1 + 56) setObject:v7 forKeyedSubscript:@"seed"];

  uint64_t v8 = [(GKGameListCacheObject *)v5 entries];
  uint64_t v9 = [v8 array];
  uint64_t v10 = [v9 _gkMapWithBlock:&stru_1002D6250];

  if ([v10 count])
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_10005AA44;
    void v12[3] = &unk_1002D62C8;
    uint64_t v11 = *(void **)(a1 + 56);
    void v12[4] = *(void *)(a1 + 64);
    id v13 = v10;
    id v14 = *(id *)(a1 + 40);
    id v15 = v5;
    id v16 = *(id *)(a1 + 56);
    char v18 = *(unsigned char *)(a1 + 88);
    id v17 = *(id *)(a1 + 72);
    [v11 perform:v12];
  }
}

id sub_10005AA3C(id a1, GKGameListEntryCacheObject *a2, unint64_t a3)
{
  return [(GKGameListEntryCacheObject *)a2 bundleID];
}

void sub_10005AA44(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10005ABB0;
  void v8[3] = &unk_1002D62A0;
  objc_copyWeak(&v15, &location);
  id v9 = *(id *)(a1 + 48);
  id v10 = *(id *)(a1 + 56);
  id v11 = *(id *)(a1 + 64);
  char v16 = *(unsigned char *)(a1 + 80);
  id v12 = *(id *)(a1 + 72);
  id v13 = *(id *)(a1 + 40);
  id v7 = v3;
  id v14 = v7;
  [v4 loadGameMetadataForBundleIDs:v5 context:v6 handler:v8];

  objc_destroyWeak(&v15);
  objc_destroyWeak(&location);
}

void sub_10005AB94(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_10005ABB0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_10005ACEC;
  v10[3] = &unk_1002D40E0;
  id v3 = *(void **)(a1 + 32);
  id v11 = *(id *)(a1 + 40);
  [v3 performBlockAndWait:v10];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_10005ACF8;
  v5[3] = &unk_1002D6278;
  char v9 = *(unsigned char *)(a1 + 88);
  void v5[4] = WeakRetained;
  uint64_t v4 = *(void **)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  id v7 = *(id *)(a1 + 64);
  id v8 = *(id *)(a1 + 72);
  [v4 perform:v5];
}

id sub_10005ACEC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) setDetailsLoaded:1];
}

void sub_10005ACF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (*(unsigned char *)(a1 + 64))
  {
    id v6 = *(void **)(a1 + 32);
    uint64_t v5 = *(void **)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10005ADEC;
    v11[3] = &unk_1002D4F38;
    id v12 = v5;
    id v13 = v4;
    [v6 getGameStatsForPlayer:v12 bundleIDs:v7 handler:v11];
  }
  else
  {
    (*((void (**)(id))v3 + 2))(v3);
  }
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 56) + 16))(*(void *)(a1 + 56), v8, v9, v10);
}

void sub_10005ADEC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers();
    }
    uint64_t v8 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v10 = 138412546;
      uint64_t v11 = v9;
      __int16 v12 = 2112;
      id v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Error getting the stats for player:%@ error:%@", (uint8_t *)&v10, 0x16u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10005AEF4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  double v3 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  id v5 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"seed"];
  uint64_t v4 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *, double))(v2 + 16))(v2, v5, v4, v3);
}

void sub_10005B23C(uint64_t a1)
{
  id v2 = +[GKPlayerProfileCacheObject selfPlayerID];
  [*(id *)(a1 + 32) setPlayerID:v2];
}

void sub_10005B298(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  int v6 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = [*(id *)(a1 + 48) context];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_10005B41C;
  void v12[3] = &unk_1002D6430;
  objc_copyWeak(&v18, &location);
  id v13 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  char v19 = *(unsigned char *)(a1 + 64);
  uint64_t v10 = *(void *)(a1 + 32);
  id v14 = v9;
  uint64_t v15 = v10;
  id v16 = *(id *)(a1 + 56);
  id v11 = v3;
  id v17 = v11;
  [v4 fetchGamesForPlayer:v5 includeInstalled:v6 != 0 responseKind:v7 != 0 context:v8 handler:v12];

  objc_destroyWeak(&v18);
  objc_destroyWeak(&location);
}

void sub_10005B3F8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_10005B41C(uint64_t a1, void *a2, void *a3, char a4, char a5)
{
  id v9 = a2;
  id v10 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if ((a4 & 1) == 0)
  {
    if (!os_log_GKGeneral) {
      id v12 = (id)GKOSLoggers();
    }
    id v13 = (void *)os_log_GKCache;
    if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
      sub_1000648CC(a1, v13);
    }
    id v14 = *(void **)(a1 + 40);
    uint64_t v15 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKGameService.m", 1495, "-[GKGameServicePrivate getGamesForPlayer:includeInstalled:handler:]_block_invoke");
    id v16 = [v14 transactionGroupWithName:v15];

    v37[0] = 0;
    v37[1] = v37;
    void v37[2] = 0x2020000000;
    char v38 = 0;
    if (*(unsigned char *)(a1 + 80)) {
      [WeakRetained scanInstalledGamesForPlayer:*(void *)(a1 + 32) transaction:v16];
    }
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_10005B784;
    v33[3] = &unk_1002D63B8;
    void v33[4] = WeakRetained;
    id v34 = *(id *)(a1 + 32);
    id v17 = v16;
    id v35 = v17;
    id v36 = v37;
    [v17 perform:v33];
    if (a5)
    {
      id v18 = [WeakRetained clientProxy];
      char v19 = [v18 replyQueue];
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_10005BC0C;
      v24[3] = &unk_1002D6408;
      v25[2] = v37;
      v25[0] = v17;
      v25[1] = WeakRetained;
      [v25[0] notifyOnQueue:v19 block:v24];
      uint64_t v20 = v25;
    }
    else
    {
      id v21 = *(void **)(a1 + 40);
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472;
      v26[2] = sub_10005B910;
      v26[3] = &unk_1002D4F10;
      id v27 = v17;
      int8x16_t v23 = *(int8x16_t *)(a1 + 40);
      id v22 = (id)v23.i64[0];
      int8x16_t v28 = vextq_s8(v23, v23, 8uLL);
      id v29 = WeakRetained;
      id v30 = *(id *)(a1 + 32);
      char v32 = *(unsigned char *)(a1 + 80);
      id v31 = *(id *)(a1 + 56);
      [v21 perform:v26];
      uint64_t v20 = &v27;

      id v18 = (void *)v28.i64[1];
    }

    _Block_object_dispose(v37, 8);
  }
  [*(id *)(a1 + 40) setObject:v9 forKeyedSubscript:@"games"];
  [*(id *)(a1 + 40) setObject:v10 forKeyedSubscript:@"seed"];
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_10005B76C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_10005B784(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  int v6 = [*(id *)(a1 + 48) context];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_10005B864;
  v10[3] = &unk_1002D6390;
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  id v12 = v3;
  uint64_t v13 = v8;
  id v11 = v7;
  id v9 = v3;
  [v4 loadGamesForPlayer:v5 context:v6 handler:v10];
}

void sub_10005B864(uint64_t a1, uint64_t a2, void *a3, double a4)
{
  id v7 = *(void **)(a1 + 32);
  id v10 = a3;
  [v7 setObject:a2 forKeyedSubscript:@"seed"];
  [*(id *)(a1 + 32) setError:v10];
  BOOL v9 = a4 > 0.0 && v10 == 0;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v9;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10005B910(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = [*(id *)(a1 + 40) clientProxy];
  int v6 = [v5 replyQueue];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10005BA34;
  v11[3] = &unk_1002D63E0;
  id v12 = *(id *)(a1 + 48);
  id v7 = *(id *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 56);
  BOOL v9 = *(void **)(a1 + 64);
  id v13 = v7;
  uint64_t v14 = v8;
  id v15 = v9;
  char v18 = *(unsigned char *)(a1 + 80);
  id v16 = *(id *)(a1 + 72);
  id v17 = v3;
  id v10 = v3;
  [v4 notifyOnQueue:v6 block:v11];
}

void sub_10005BA34(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 40) error];
  [*(id *)(a1 + 32) setError:v2];

  id v3 = [*(id *)(a1 + 40) error];

  if (v3)
  {
    uint64_t v4 = *(void (**)(void))(*(void *)(a1 + 72) + 16);
    v4();
  }
  else
  {
    uint64_t v5 = *(void **)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(unsigned __int8 *)(a1 + 80);
    uint64_t v8 = 2 * (*(void *)(a1 + 64) != 0);
    BOOL v9 = [*(id *)(a1 + 32) context];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_10005BB8C;
    v10[3] = &unk_1002D60B8;
    id v11 = *(id *)(a1 + 32);
    id v12 = *(id *)(a1 + 72);
    [v5 fetchGamesForPlayer:v6 includeInstalled:v7 responseKind:v8 context:v9 handler:v10];
  }
}

uint64_t sub_10005BB8C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setObject:a2 forKeyedSubscript:@"games"];
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:@"seed"];

  uint64_t v7 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v7();
}

void sub_10005BC0C(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
  {
    uint64_t v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"seed"];
    id v3 = (void *)v2;
    if (v2)
    {
      uint64_t v6 = GKRefreshSeedKey;
      uint64_t v7 = v2;
      uint64_t v4 = +[NSDictionary dictionaryWithObjects:&v7 forKeys:&v6 count:1];
    }
    else
    {
      uint64_t v4 = 0;
    }
    uint64_t v5 = [*(id *)(a1 + 40) clientProxy];
    [v5 refreshContentsForDataType:5 userInfo:v4];
  }
}

void sub_10005BCF4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v5 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"games"];
  id v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"seed"];
  uint64_t v4 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *, void *))(v2 + 16))(v2, v5, v3, v4);
}

void sub_10005C030(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_10005C054(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  uint64_t v7 = +[NSDate date];
  uint64_t v8 = +[GKCacheObject fetchRequestForContext:v5];
  [v8 setFetchLimit:*(void *)(a1 + 72)];
  int v9 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
  uint64_t v10 = [*(id *)(a1 + 32) playerID];
  id v11 = (void *)v10;
  uint64_t v12 = *(void *)(a1 + 40);
  if (v9)
  {
    id v13 = +[NSPredicate predicateWithFormat:@"player.playerID = %@ && game.bundleID in %@", v10, v12];
    [v8 setPredicate:v13];
  }
  else
  {
    uint64_t v14 = +[NSPredicate predicateWithFormat:@"expirationDate > %@ && player.playerID = %@ && game.bundleID in %@", v7, v10, v12];
    [v8 setPredicate:v14];

    BOOL v15 = [v5 countForFetchRequest:v8 error:0] == *(id *)(a1 + 72);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = v15;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v15;
    if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
    {
      id v16 = [*(id *)(a1 + 32) playerID];
      id v17 = +[NSPredicate predicateWithFormat:@"expirationDate != nil && player.playerID = %@ && game.bundleID in %@", v16, *(void *)(a1 + 40)];
      [v8 setPredicate:v17];

      *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v5 countForFetchRequest:v8 error:0] == *(id *)(a1 + 72);
    }
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) && *(_DWORD *)(a1 + 80))
  {
    char v18 = [v5 executeFetchRequest:v8 error:0];
    char v19 = [v18 _gkMapDictionaryWithKeyPath:@"game.bundleID"];
    uint64_t v20 = *(void **)(a1 + 40);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    void v23[2] = sub_10005C310;
    v23[3] = &unk_1002D6480;
    id v24 = v19;
    id v21 = v19;
    id v22 = [v20 _gkFilterWithBlock:v23];
    [*(id *)(a1 + 48) setResult:v22];
  }
  v6[2](v6);
}

id sub_10005C310(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:a2];
  if (v2)
  {
    id v3 = +[GKGameRecordInternal internalRepresentationForCacheObject:v2];
  }
  else
  {
    id v3 = 0;
  }

  return v3;
}

void sub_10005C37C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = [*(id *)(a1 + 32) result];
  (*(void (**)(uint64_t, id, void, void, void))(v2 + 16))(v2, v3, 0, *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24));
}

void sub_10005C610(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = [objc_alloc((Class)NSMutableSet) initWithArray:*(void *)(a1 + 32)];
  uint64_t v8 = +[GKPlayerProfileCacheObject profileForPlayer:*(void *)(a1 + 40) context:v6];
  int v9 = +[GKGameCacheObject gamesForBundleIDs:*(void *)(a1 + 32) context:v6];

  uint64_t v10 = +[GKGameRecordCacheObject recordsForGames:v9 playerProfile:v8];
  id v11 = [*(id *)(a1 + 40) playerID];
  unsigned int v12 = +[GKPlayerProfileCacheObject familiarityForPlayerID:v11];

  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  void v23[2] = sub_10005C844;
  v23[3] = &unk_1002D64D0;
  id v13 = v7;
  id v24 = v13;
  [v10 enumerateObjectsUsingBlock:v23];
  if ([v13 count])
  {
    uint64_t v14 = *(void **)(a1 + 48);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    void v17[2] = sub_10005C8D8;
    v17[3] = &unk_1002D6560;
    id v18 = v13;
    unsigned int v22 = v12;
    id v19 = *(id *)(a1 + 40);
    int8x16_t v16 = *(int8x16_t *)(a1 + 48);
    id v15 = (id)v16.i64[0];
    int8x16_t v20 = vextq_s8(v16, v16, 8uLL);
    id v21 = v8;
    [v14 perform:v17];
  }
  v5[2](v5);
}

void sub_10005C844(uint64_t a1, void *a2)
{
  id v6 = a2;
  if ([v6 valid] && (objc_msgSend(v6, "expired") & 1) == 0)
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = [v6 game];
    id v5 = [v4 bundleID];
    [v3 removeObject:v5];
  }
}

void sub_10005C8D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) allObjects];
  id v5 = [v4 _gkMapWithBlock:&stru_1002D6510];
  if (*(_DWORD *)(a1 + 72) == 1
    || ([*(id *)(a1 + 40) playerID],
        id v6 = objc_claimAutoreleasedReturnValue(),
        v6,
        !v6))
  {
    CFStringRef v20 = @"games-played";
    id v21 = v5;
    uint64_t v8 = +[NSDictionary dictionaryWithObjects:&v21 forKeys:&v20 count:1];
  }
  else
  {
    v18[0] = @"games-played";
    v18[1] = @"requested-player-id";
    v19[0] = v5;
    id v7 = [*(id *)(a1 + 40) playerID];
    v19[1] = v7;
    uint64_t v8 = +[NSDictionary dictionaryWithObjects:v19 forKeys:v18 count:2];
  }
  int v9 = +[GKNetworkRequestManager commonNetworkRequestManager];
  uint64_t v10 = [*(id *)(a1 + 48) clientProxy];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10005CB9C;
  void v13[3] = &unk_1002D5D48;
  id v14 = *(id *)(a1 + 56);
  id v15 = *(id *)(a1 + 64);
  id v16 = v4;
  id v17 = v3;
  id v11 = v3;
  id v12 = v4;
  [v9 issueRequest:v8 bagKey:@"gk-get-games-played" clientProxy:v10 handler:v13];
}

id sub_10005CAFC(id a1, NSString *a2, unint64_t a3)
{
  CFStringRef v6 = @"bundle-id";
  id v7 = a2;
  id v3 = a2;
  uint64_t v4 = +[NSDictionary dictionaryWithObjects:&v7 forKeys:&v6 count:1];

  return v4;
}

void sub_10005CB9C(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7 = a2;
  [*(id *)(a1 + 32) setError:a3];
  if (v7 && !a3)
  {
    id v11 = +[NSNumber numberWithDouble:a4];
    [*(id *)(a1 + 32) setObject:v11 forKeyedSubscript:@"ttl"];

    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10005CCC8;
    void v13[3] = &unk_1002D5078;
    id v12 = *(void **)(a1 + 32);
    id v14 = *(id *)(a1 + 40);
    double v17 = a4;
    id v15 = *(id *)(a1 + 48);
    id v16 = v7;
    [v12 performOnManagedObjectContext:v13];
  }
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 56) + 16))(*(void *)(a1 + 56), v8, v9, v10);
}

void sub_10005CCC8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = a3;
  [v5 refreshObject:v6 mergeChanges:1];
  uint64_t v8 = +[NSDate dateWithTimeIntervalSinceNow:*(double *)(a1 + 56)];
  uint64_t v9 = +[GKGameCacheObject gamesForBundleIDs:*(void *)(a1 + 40) context:v5];
  uint64_t v10 = +[GKGameRecordCacheObject recordsForGames:v9 playerProfile:*(void *)(a1 + 32)];
  id v11 = [*(id *)(a1 + 48) objectForKeyedSubscript:@"results"];
  [v10 _gkMapDictionaryWithKeyPath:@"game.bundleID"];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  void v15[2] = sub_10005CE78;
  v15[3] = &unk_1002D6538;
  id v16 = (id)objc_claimAutoreleasedReturnValue();
  id v17 = v8;
  id v18 = v5;
  id v19 = *(id *)(a1 + 40);
  id v12 = v5;
  id v13 = v8;
  id v14 = v16;
  [v11 enumerateObjectsUsingBlock:v15];
  v7[2](v7);
}

void sub_10005CE78(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = [v5 objectForKeyedSubscript:@"status"];
  id v7 = [v6 integerValue];

  uint64_t v8 = [v5 objectForKeyedSubscript:@"game-metadata"];
  uint64_t v9 = [v8 objectForKeyedSubscript:@"bundle-id"];
  if (v9)
  {
    uint64_t v10 = [*(id *)(a1 + 32) objectForKeyedSubscript:v9];
    id v11 = v10;
    if (v10)
    {
      if (v7)
      {
        if (!os_log_GKGeneral) {
          id v12 = (id)GKOSLoggers();
        }
        id v13 = (void *)os_log_GKDaemon;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          id v14 = *(void **)(a1 + 56);
          id v15 = v13;
          id v16 = [v14 objectAtIndexedSubscript:a3];
          v17[0] = 67109378;
          v17[1] = v7;
          __int16 v18 = 2112;
          id v19 = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Unrecognized game(%d) %@", (uint8_t *)v17, 0x12u);
        }
        [v11 setExpirationDate:*(void *)(a1 + 40)];
      }
      else
      {
        [v10 updateWithServerRepresentation:v5 expirationDate:*(void *)(a1 + 40)];
        [v11 setValid:1];
        [*(id *)(a1 + 48) refreshObject:v11 mergeChanges:1];
      }
    }
  }
}

void sub_10005D050(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v6 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"ttl"];
  [v6 doubleValue];
  double v4 = v3;
  id v5 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, void *, double))(v2 + 16))(v2, v5, v4);
}

void sub_10005D300(uint64_t a1, void *a2)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_10005D3F0;
  v9[3] = &unk_1002D6600;
  double v4 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  id v7 = *(void **)(a1 + 56);
  id v10 = v5;
  uint64_t v11 = v6;
  id v12 = v7;
  id v14 = *(id *)(a1 + 64);
  id v13 = *(id *)(a1 + 32);
  uint64_t v8 = a2;
  [v4 performOnManagedObjectContext:v9];
  v8[2](v8);
}

void sub_10005D3F0(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = +[GKLocalPlayerInternal internalRepresentation];
  uint64_t v8 = +[GKPlayerProfileCacheObject selfPlayerID];
  [v7 setPlayerID:v8];

  uint64_t v9 = [a1[4] playerID];
  id v10 = v7;
  if (v9) {
    id v10 = a1[4];
  }
  id v11 = v10;

  objc_initWeak(&location, a1[5]);
  id v12 = a1[5];
  id v13 = a1[6];
  BOOL v14 = a1[8] != 0;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  void v19[2] = sub_10005D5DC;
  void v19[3] = &unk_1002D65D8;
  objc_copyWeak(&v26, &location);
  id v20 = a1[7];
  id v15 = v11;
  id v21 = v15;
  id v16 = a1[6];
  id v17 = a1[5];
  id v22 = v16;
  id v23 = v17;
  id v24 = a1[8];
  id v18 = v6;
  id v25 = v18;
  [v12 fetchGameStatsForPlayer:v15 bundleIdentifiers:v13 responseKind:v14 context:v5 handler:v19];

  objc_destroyWeak(&v26);
  objc_destroyWeak(&location);
}

void sub_10005D5C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10005D5DC(uint64_t a1, void *a2, uint64_t a3, char a4, char a5)
{
  uint64_t v8 = (id *)(a1 + 80);
  id v9 = a2;
  id WeakRetained = objc_loadWeakRetained(v8);
  [*(id *)(a1 + 32) setObject:v9 forKeyedSubscript:@"records"];

  if ((a4 & 1) == 0)
  {
    if (!os_log_GKGeneral) {
      id v11 = (id)GKOSLoggers();
    }
    id v12 = (void *)os_log_GKCache;
    if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
      sub_10006498C(a1, v12);
    }
    id v13 = *(void **)(a1 + 32);
    BOOL v14 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKGameService.m", 1728, "-[GKGameServicePrivate getGameStatsForPlayer:bundleIDs:handler:]_block_invoke");
    id v15 = [v13 transactionGroupWithName:v14];

    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_10005D8BC;
    v33[3] = &unk_1002D3980;
    void v33[4] = WeakRetained;
    id v34 = *(id *)(a1 + 48);
    id v16 = v15;
    id v35 = v16;
    [v16 perform:v33];
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    v29[2] = sub_10005D98C;
    v29[3] = &unk_1002D48B0;
    void v29[4] = WeakRetained;
    id v30 = *(id *)(a1 + 40);
    id v31 = *(id *)(a1 + 48);
    id v17 = v16;
    id v32 = v17;
    [v17 perform:v29];
    if ((a5 & 1) == 0)
    {
      id v18 = *(void **)(a1 + 32);
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472;
      void v21[2] = sub_10005DAB0;
      v21[3] = &unk_1002D65B0;
      id v19 = v17;
      uint64_t v20 = *(void *)(a1 + 56);
      id v22 = v19;
      uint64_t v23 = v20;
      id v24 = *(id *)(a1 + 32);
      id v25 = WeakRetained;
      id v26 = *(id *)(a1 + 40);
      id v27 = *(id *)(a1 + 48);
      id v28 = *(id *)(a1 + 64);
      [v18 perform:v21];
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
}

void sub_10005D8BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = [*(id *)(a1 + 48) context];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10005D97C;
  void v8[3] = &unk_1002D61A8;
  id v9 = v3;
  id v7 = v3;
  [v4 loadGameMetadataForBundleIDs:v5 context:v6 handler:v8];
}

uint64_t sub_10005D97C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10005D98C(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  id v7 = [*(id *)(a1 + 56) context];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_10005DA68;
  v9[3] = &unk_1002D6090;
  id v10 = *(id *)(a1 + 56);
  id v11 = v3;
  id v8 = v3;
  [v4 loadGameStatsForPlayer:v5 bundleIdentifiers:v6 context:v7 handler:v9];
}

uint64_t sub_10005DA68(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setError:a2];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_10005DAB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = *(void **)(a1 + 32);
  uint64_t v5 = [*(id *)(a1 + 40) clientProxy];
  uint64_t v6 = [v5 replyQueue];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10005DBE0;
  v11[3] = &unk_1002D6588;
  id v12 = *(id *)(a1 + 48);
  id v7 = *(id *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 56);
  id v9 = *(void **)(a1 + 64);
  id v13 = v7;
  uint64_t v14 = v8;
  id v15 = v9;
  id v16 = *(id *)(a1 + 72);
  id v17 = *(id *)(a1 + 80);
  id v18 = v3;
  id v10 = v3;
  [v4 notifyOnQueue:v6 block:v11];
}

void sub_10005DBE0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 40) error];
  [*(id *)(a1 + 32) setError:v2];

  id v3 = [*(id *)(a1 + 40) error];

  if (v3)
  {
    double v4 = *(void (**)(void))(*(void *)(a1 + 80) + 16);
    v4();
  }
  else
  {
    uint64_t v5 = *(void **)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    uint64_t v8 = 2 * (*(void *)(a1 + 72) != 0);
    id v9 = [*(id *)(a1 + 32) context];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_10005DD34;
    v10[3] = &unk_1002D60B8;
    id v11 = *(id *)(a1 + 32);
    id v12 = *(id *)(a1 + 80);
    [v5 fetchGameStatsForPlayer:v6 bundleIdentifiers:v7 responseKind:v8 context:v9 handler:v10];
  }
}

uint64_t sub_10005DD34(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setObject:a2 forKeyedSubscript:@"records"];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_10005DD84(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"records"];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_10005E0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_10005E0E8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  id v7 = [*(id *)(a1 + 32) count];
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
    goto LABEL_19;
  }
  uint64_t v8 = +[NSDate date];
  id v9 = +[GKCacheObject fetchRequestForContext:v5];
  [v9 setFetchLimit:v7];
  id v10 = +[NSPredicate predicateWithFormat:@"expirationDate > %@ && bundleID in %@", v8, *(void *)(a1 + 32)];
  [v9 setPredicate:v10];

  BOOL v11 = [v5 countForFetchRequest:v9 error:0] == v7;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v11;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v11;
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
  {
    id v12 = +[NSPredicate predicateWithFormat:@"expirationDate != nil && bundleID in %@", *(void *)(a1 + 32)];
    [v9 setPredicate:v12];

    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v5 countForFetchRequest:v9 error:0] == v7;
  }

  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
  {
LABEL_19:
    if (*(_DWORD *)(a1 + 64))
    {
      id v13 = +[GKGameCacheObject gamesForBundleIDs:*(void *)(a1 + 32) context:v5];
      if ([v13 count] != v7)
      {
        if (!os_log_GKGeneral) {
          id v14 = (id)GKOSLoggers();
        }
        if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
          sub_100064AA4();
        }
        id v15 = os_log_GKGeneral;
        if (!os_log_GKGeneral)
        {
          id v16 = (id)GKOSLoggers();
          id v15 = os_log_GKGeneral;
        }
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
          sub_100064A60(v15);
        }
      }
      id v17 = [v13 _gkMapDictionaryWithKeyPath:@"bundleID"];
      id v18 = *(void **)(a1 + 32);
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472;
      void v21[2] = sub_10005E3D8;
      v21[3] = &unk_1002D6480;
      id v22 = v17;
      id v19 = v17;
      uint64_t v20 = [v18 _gkFilterWithBlock:v21];
      [*(id *)(a1 + 40) setResult:v20];
    }
  }
  v6[2](v6);
}

id sub_10005E3D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:a2];
  if (v2)
  {
    id v3 = +[GKGameInternal internalRepresentationForCacheObject:v2];
  }
  else
  {
    id v3 = 0;
  }

  return v3;
}

void sub_10005E444(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = [*(id *)(a1 + 32) result];
  (*(void (**)(uint64_t, id, void, void))(v2 + 16))(v2, v3, *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24));
}

void sub_10005E734(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_10005E74C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  id v7 = +[GKCacheObject fetchRequestForContext:v5];
  uint64_t v8 = +[NSPredicate predicateWithFormat:@"bundleID in %@", *(void *)(a1 + 32)];
  [v7 setPredicate:v8];

  uint64_t v29 = v5;
  id v9 = [v5 executeFetchRequest:v7 error:0];
  id v10 = objc_opt_new();
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  id v11 = v9;
  id v12 = [v11 countByEnumeratingWithState:&v34 objects:v38 count:16];
  if (v12)
  {
    id v13 = v12;
    uint64_t v14 = *(void *)v35;
    do
    {
      for (unint64_t i = 0; i != v13; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v35 != v14) {
          objc_enumerationMutation(v11);
        }
        id v16 = *(void **)(*((void *)&v34 + 1) + 8 * i);
        if (([v16 expired] & 1) == 0)
        {
          id v17 = [v16 bundleID];

          if (v17)
          {
            id v18 = [v16 bundleID];
            [v10 addObject:v18];
          }
        }
      }
      id v13 = [v11 countByEnumeratingWithState:&v34 objects:v38 count:16];
    }
    while (v13);
  }

  id v19 = +[NSMutableSet setWithArray:*(void *)(a1 + 32)];
  [v19 minusSet:v10];
  if ([v19 count])
  {
    uint64_t v20 = +[GKApplicationWorkspace defaultWorkspace];
    id v21 = [v19 allObjects];
    id v22 = [v20 gameDescriptorsWithInstalledBundleVersionsForBundleIDs:v21];

    uint64_t v23 = *(void **)(a1 + 40);
    id v24 = [*(id *)(a1 + 48) clientProxy];
    id v25 = [v24 replyQueue];
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_10005EA68;
    v30[3] = &unk_1002D63B8;
    id v31 = v22;
    int8x16_t v28 = *(int8x16_t *)(a1 + 40);
    id v26 = (id)v28.i64[0];
    int8x16_t v32 = vextq_s8(v28, v28, 8uLL);
    uint64_t v33 = *(void *)(a1 + 56);
    id v27 = v22;
    [v23 performOnQueue:v25 block:v30];
  }
  v6[2](v6);
}

void sub_10005EA68(uint64_t a1, void *a2)
{
  id v3 = a2;
  CFStringRef v15 = @"game";
  uint64_t v16 = *(void *)(a1 + 32);
  id v4 = +[NSDictionary dictionaryWithObjects:&v16 forKeys:&v15 count:1];
  id v5 = +[GKNetworkRequestManager commonNetworkRequestManager];
  uint64_t v6 = [*(id *)(a1 + 40) clientProxy];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_10005EBDC;
  v10[3] = &unk_1002D66C8;
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  id v11 = v7;
  uint64_t v14 = v8;
  id v12 = *(id *)(a1 + 32);
  id v13 = v3;
  id v9 = v3;
  [v5 issueRequest:v4 bagKey:@"gk-get-game-metadata" clientProxy:v6 handler:v10];
}

void sub_10005EBDC(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7 = a2;
  [*(id *)(a1 + 32) setError:a3];
  if (v7 && !a3)
  {
    *(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = a4;
    uint64_t v8 = *(void **)(a1 + 32);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_10005ECD4;
    v9[3] = &unk_1002D66A0;
    double v12 = a4;
    id v10 = v7;
    id v11 = *(id *)(a1 + 40);
    [v8 performOnManagedObjectContext:v9];
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10005ECD4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  double v6 = *(double *)(a1 + 48);
  id v7 = a3;
  uint64_t v8 = +[NSDate dateWithTimeIntervalSinceNow:v6];
  id v9 = [*(id *)(a1 + 32) objectForKey:@"game-metadata"];
  +[GKGameCacheObject gamesForGameDescriptors:*(void *)(a1 + 40) context:v5];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10005EE28;
  void v13[3] = &unk_1002D6678;
  id v14 = (id)objc_claimAutoreleasedReturnValue();
  id v15 = v8;
  id v16 = v5;
  id v10 = v5;
  id v11 = v8;
  id v12 = v14;
  [v9 enumerateObjectsUsingBlock:v13];
  v7[2](v7);
}

void sub_10005EE28(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a2;
  id v7 = [v5 objectAtIndexedSubscript:a3];
  [v7 updateWithServerRepresentation:v6 expirationDate:*(void *)(a1 + 40)];

  [*(id *)(a1 + 48) refreshObject:v7 mergeChanges:1];
}

void sub_10005EEB0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  double v2 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, double))(v1 + 16))(v1, v3, v2);
}

void sub_10005F128(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  BOOL v6 = *(void *)(a1 + 64) != 0;
  id v7 = [*(id *)(a1 + 48) context];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10005F250;
  v11[3] = &unk_1002D6768;
  id v12 = *(id *)(a1 + 48);
  id v8 = *(id *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 32);
  id v13 = v8;
  uint64_t v14 = v9;
  id v15 = *(id *)(a1 + 56);
  id v16 = *(id *)(a1 + 64);
  id v17 = v3;
  id v10 = v3;
  [v4 fetchGameMetadataForBundleIDs:v5 responseKind:v6 context:v7 handler:v11];
}

uint64_t sub_10005F250(uint64_t a1, uint64_t a2, char a3, char a4)
{
  [*(id *)(a1 + 32) setObject:a2 forKeyedSubscript:@"games"];
  if ((a3 & 1) == 0)
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers();
    }
    id v8 = os_log_GKCache;
    if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
      sub_100064B1C(a1, v8);
    }
    uint64_t v9 = *(void **)(a1 + 32);
    id v10 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKGameService.m", 1910, "-[GKGameServicePrivate getGameMetadataForBundleIDs:handler:]_block_invoke");
    id v11 = [v9 transactionGroupWithName:v10];

    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_10005F4A4;
    id v25[3] = &unk_1002D3980;
    int8x16_t v17 = *(int8x16_t *)(a1 + 40);
    id v12 = (id)v17.i64[0];
    int8x16_t v26 = vextq_s8(v17, v17, 8uLL);
    id v13 = v11;
    id v27 = v13;
    [v13 perform:v25];
    if ((a4 & 1) == 0)
    {
      uint64_t v14 = *(void **)(a1 + 32);
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      void v19[2] = sub_10005F5C4;
      void v19[3] = &unk_1002D6740;
      id v20 = v13;
      id v21 = *(id *)(a1 + 56);
      id v22 = *(id *)(a1 + 32);
      int8x16_t v18 = *(int8x16_t *)(a1 + 40);
      id v15 = (id)v18.i64[0];
      int8x16_t v23 = vextq_s8(v18, v18, 8uLL);
      id v24 = *(id *)(a1 + 64);
      [v14 perform:v19];
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 72) + 16))();
}

void sub_10005F4A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  BOOL v6 = [*(id *)(a1 + 48) context];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10005F57C;
  void v8[3] = &unk_1002D6090;
  id v9 = *(id *)(a1 + 48);
  id v10 = v3;
  id v7 = v3;
  [v4 loadGameMetadataForBundleIDs:v5 context:v6 handler:v8];
}

uint64_t sub_10005F57C(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setError:a2];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_10005F5C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_10005F6B8;
  v10[3] = &unk_1002D6718;
  id v11 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 56);
  id v8 = *(void **)(a1 + 64);
  id v12 = v6;
  uint64_t v13 = v7;
  id v14 = v8;
  id v15 = *(id *)(a1 + 72);
  id v16 = v3;
  id v9 = v3;
  [v4 notifyOnQueue:v5 block:v10];
}

void sub_10005F6B8(uint64_t a1)
{
  double v2 = [*(id *)(a1 + 40) error];
  [*(id *)(a1 + 32) setError:v2];

  id v3 = [*(id *)(a1 + 40) error];

  if (v3)
  {
    id v4 = *(void (**)(void))(*(void *)(a1 + 72) + 16);
    v4();
  }
  else
  {
    uint64_t v5 = *(void **)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = 2 * (*(void *)(a1 + 64) != 0);
    id v8 = [*(id *)(a1 + 32) context];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_10005F808;
    v9[3] = &unk_1002D66F0;
    id v10 = *(id *)(a1 + 32);
    id v11 = *(id *)(a1 + 72);
    [v5 fetchGameMetadataForBundleIDs:v6 responseKind:v7 context:v8 handler:v9];
  }
}

uint64_t sub_10005F808(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setObject:a2 forKeyedSubscript:@"games"];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_10005F858(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"games"];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_10005F9B8(id *a1)
{
  uint64_t v2 = [a1[4] objectForKeyedSubscript:@"bundle-id"];
  id v3 = [a1[4] objectForKeyedSubscript:@"bundle-version"];
  id v4 = +[GKCacheObject fetchRequestForContext:a1[5]];
  uint64_t v5 = +[NSPredicate predicateWithFormat:@"bundleID = %@ && bundleVersion = %@", v2, v3];
  [v4 setPredicate:v5];

  [v4 setFetchLimit:1];
  uint64_t v6 = [a1[5] executeFetchRequest:v4 error:0];
  uint64_t v7 = [v6 firstObject];

  id v8 = [v7 rating];
  BOOL v9 = v8 != 0;

  id v10 = [v7 expirationDate];
  [v10 timeIntervalSinceNow];
  BOOL v12 = v11 > 0.0;

  uint64_t v13 = [a1[6] clientProxy];
  id v14 = [v13 replyQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10005FB94;
  block[3] = &unk_1002D67B8;
  id v15 = a1[7];
  id v18 = v7;
  id v19 = v15;
  BOOL v20 = v12;
  BOOL v21 = v9;
  id v16 = v7;
  dispatch_async(v14, block);
}

void sub_10005FB94(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = [*(id *)(a1 + 32) rating];
  [v3 floatValue];
  (*(void (**)(uint64_t, void, void))(v2 + 16))(v2, *(unsigned __int8 *)(a1 + 48), *(unsigned __int8 *)(a1 + 49));
}

void sub_10005FE30(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_10005FE48(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v18 = *(void *)(a1 + 32);
  id v4 = +[NSArray arrayWithObjects:&v18 count:1];
  CFStringRef v16 = @"games";
  int8x16_t v17 = v4;
  uint64_t v5 = +[NSDictionary dictionaryWithObjects:&v17 forKeys:&v16 count:1];
  uint64_t v6 = +[GKNetworkRequestManager commonNetworkRequestManager];
  uint64_t v7 = [*(id *)(a1 + 40) clientProxy];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10005FFDC;
  v11[3] = &unk_1002D6808;
  id v12 = *(id *)(a1 + 48);
  id v8 = *(id *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  id v14 = v3;
  uint64_t v15 = v9;
  id v13 = v8;
  id v10 = v3;
  [v6 issueRequest:v5 bagKey:@"gk-get-game-ratings" clientProxy:v7 handler:v11];
}

void sub_10005FFDC(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = +[NSDate dateWithTimeIntervalSinceNow:a4];
  if (v7 && !v8)
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10006010C;
    v11[3] = &unk_1002D3980;
    id v10 = *(void **)(a1 + 32);
    id v12 = *(id *)(a1 + 40);
    id v13 = v7;
    id v14 = v9;
    [v10 perform:v11];
  }
  [*(id *)(a1 + 32) setError:v8];
  *(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = a4;
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10006010C(id *a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1000601E4;
  v6[3] = &unk_1002D39F8;
  id v4 = a1[4];
  id v7 = a1[5];
  id v8 = a1[4];
  id v9 = a1[6];
  id v10 = v3;
  id v5 = v3;
  [v4 performBlock:v6];
}

void sub_1000601E4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"ratings"];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1000602B0;
  v6[3] = &unk_1002D67E0;
  id v7 = *(id *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  [v2 enumerateObjectsUsingBlock:v6];
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 56) + 16))(*(void *)(a1 + 56), v3, v4, v5);
}

void sub_1000602B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 objectForKeyedSubscript:@"game"];
  id v5 = +[GKGameRatingCacheObject ratingForGameDescriptor:v4 context:*(void *)(a1 + 32)];

  [v5 updateWithServerRepresentation:v3 expirationDate:*(void *)(a1 + 40)];
}

void sub_100060348(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  double v2 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, double))(v1 + 16))(v1, v3, v2);
}

void sub_100060480(id *a1)
{
  double v2 = [a1[4] achievementPointsList];
  if ([v2 isValid])
  {
    id v3 = [v2 internalRepresentation];
    uint64_t v4 = [v2 seed];
    unsigned __int8 v5 = [v2 detailsLoaded];
    char v6 = v5 & ([v2 expired] ^ 1);
  }
  else
  {
    id v3 = 0;
    uint64_t v4 = 0;
    unsigned __int8 v5 = 0;
    char v6 = 0;
  }
  id v7 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKGameService.m", 2033, "-[GKGameServicePrivate fetchGamesWithAchievementStatsForPlayer:context:handler:]_block_invoke");
  id v8 = +[GKDispatchGroup dispatchGroupWithName:v7];

  id v9 = [a1[5] clientProxy];
  id v10 = [v9 replyQueue];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  void v14[2] = sub_100060650;
  void v14[3] = &unk_1002D6858;
  id v11 = a1[6];
  id v16 = v4;
  id v17 = v11;
  id v15 = v3;
  char v18 = v6;
  unsigned __int8 v19 = v5;
  id v12 = v4;
  id v13 = v3;
  [v8 notifyOnQueue:v10 block:v14];
}

uint64_t sub_100060650(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void, void))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 57));
}

void sub_100060890(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1000608A8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  char v6 = *(void **)(a1 + 32);
  id v7 = a3;
  id v8 = [v6 playerID];
  id v9 = *(void **)(a1 + 40);
  id v10 = [*(id *)(a1 + 48) clientProxy];
  id v11 = [v10 replyQueue];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  _DWORD v17[2] = sub_1000609FC;
  v17[3] = &unk_1002D5A58;
  uint64_t v12 = *(void *)(a1 + 48);
  id v18 = v8;
  uint64_t v19 = v12;
  id v20 = v5;
  id v21 = *(id *)(a1 + 32);
  id v13 = *(id *)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 56);
  id v22 = v13;
  uint64_t v23 = v14;
  id v15 = v5;
  id v16 = v8;
  [v9 performOnQueue:v11 block:v17];

  v7[2](v7);
}

void sub_1000609FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    CFStringRef v19 = @"requested-player-id";
    uint64_t v20 = v4;
    id v5 = +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];
  }
  else
  {
    id v5 = 0;
  }
  char v6 = +[GKNetworkRequestManager commonNetworkRequestManager];
  id v7 = [*(id *)(a1 + 40) clientProxy];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_100060B90;
  void v12[3] = &unk_1002D68D0;
  id v13 = *(id *)(a1 + 48);
  id v14 = *(id *)(a1 + 56);
  id v8 = *(id *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 40);
  id v15 = v8;
  uint64_t v16 = v9;
  uint64_t v10 = *(void *)(a1 + 72);
  id v17 = v3;
  uint64_t v18 = v10;
  id v11 = v3;
  [v6 issueRequest:v5 bagKey:@"gk-get-games-played-descriptors-with-achievements" clientProxy:v7 handler:v12];
}

void sub_100060B90(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = v8;
  if (v7 && !v8)
  {
    id v13 = _NSConcreteStackBlock;
    uint64_t v14 = 3221225472;
    id v15 = sub_100060CBC;
    uint64_t v16 = &unk_1002D68A8;
    uint64_t v10 = *(void **)(a1 + 32);
    id v17 = *(id *)(a1 + 40);
    id v18 = *(id *)(a1 + 32);
    double v22 = a4;
    id v19 = v7;
    id v11 = *(id *)(a1 + 48);
    uint64_t v12 = *(void *)(a1 + 56);
    id v20 = v11;
    uint64_t v21 = v12;
    [v10 performBlockAndWait:&v13];
  }
  *(double *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = a4;
  [*(id *)(a1 + 48) setError:v9, v13, v14, v15, v16];
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_100060CBC(uint64_t a1)
{
  double v2 = [*(id *)(a1 + 32) achievementPointsList];
  if (!v2)
  {
    double v2 = [(GKCacheObject *)[GKAchievementPointsListCacheObject alloc] initWithManagedObjectContext:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) setAchievementPointsList:v2];
  }
  id v3 = +[NSDate dateWithTimeIntervalSinceNow:*(double *)(a1 + 72)];
  [(GKAchievementPointsListCacheObject *)v2 updateWithServerRepresentation:*(void *)(a1 + 48) expirationDate:v3];
  uint64_t v4 = [(GKAchievementPointsListCacheObject *)v2 entries];
  id v5 = [v4 _gkValuesForKeyPath:@"gameRecord.game.bundleID"];

  uint64_t v10 = _NSConcreteStackBlock;
  uint64_t v11 = 3221225472;
  uint64_t v12 = sub_100060E3C;
  id v13 = &unk_1002D48B0;
  char v6 = *(void **)(a1 + 56);
  uint64_t v14 = *(void *)(a1 + 64);
  id v15 = v5;
  id v16 = *(id *)(a1 + 40);
  id v17 = v2;
  id v7 = v2;
  id v8 = v5;
  [v6 perform:&v10];
  uint64_t v9 = [(GKAchievementPointsListCacheObject *)v7 seed];
  [*(id *)(a1 + 56) setObject:v9 forKeyedSubscript:@"seed"];
}

void sub_100060E3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  char v6 = *(void **)(a1 + 48);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100060F18;
  void v8[3] = &unk_1002D6880;
  id v9 = v6;
  id v10 = *(id *)(a1 + 56);
  id v11 = v3;
  id v7 = v3;
  [v4 loadGameMetadataForBundleIDs:v5 context:v9 handler:v8];
}

void sub_100060F18(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  _DWORD v3[2] = sub_100060FB4;
  v3[3] = &unk_1002D40E0;
  double v2 = *(void **)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  [v2 performBlockAndWait:v3];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

id sub_100060FB4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) setDetailsLoaded:1];
}

void sub_100060FC0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  double v3 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  id v5 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"seed"];
  id v4 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *, double))(v2 + 16))(v2, v5, v4, v3);
}

void sub_100061240(uint64_t a1, void *a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10006130C;
  void v8[3] = &unk_1002D3D30;
  id v4 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  id v9 = v5;
  uint64_t v10 = v6;
  id v11 = *(id *)(a1 + 32);
  id v7 = a2;
  [v4 performOnManagedObjectContext:v8];
  v7[2](v7);
}

void sub_10006130C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void **)(a1 + 32);
  id v7 = a2;
  id v8 = [v6 playerID];
  id v9 = +[GKPlayerProfileCacheObject playerProfileWithPlayerID:v8 inManagedObjectContext:v7];

  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  void v15[2] = sub_100061430;
  v15[3] = &unk_1002D6130;
  uint64_t v10 = *(void **)(a1 + 40);
  id v11 = *(id *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 40);
  id v16 = v11;
  uint64_t v17 = v12;
  id v18 = v9;
  id v19 = v5;
  id v13 = v5;
  id v14 = v9;
  [v10 fetchGamesWithAchievementStatsForPlayer:v14 context:v7 handler:v15];
}

void sub_100061430(uint64_t a1, void *a2, void *a3, char a4, char a5)
{
  id v9 = a2;
  id v10 = a3;
  [*(id *)(a1 + 32) setObject:v9 forKeyedSubscript:@"games"];
  [*(id *)(a1 + 32) setObject:v10 forKeyedSubscript:@"seed"];
  if ((a4 & 1) == 0)
  {
    id v11 = *(void **)(a1 + 32);
    uint64_t v12 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKGameService.m", 2103, "-[GKGameServicePrivate getGamesWithAchievementStatsForPlayer:handler:]_block_invoke_3");
    id v13 = [v11 transactionGroupWithName:v12];

    v34[0] = 0;
    v34[1] = v34;
    _OWORD v34[2] = 0x2020000000;
    char v35 = 0;
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_100061704;
    v30[3] = &unk_1002D63B8;
    id v14 = *(void **)(a1 + 48);
    void v30[4] = *(void *)(a1 + 40);
    id v31 = v14;
    id v15 = v13;
    id v32 = v15;
    uint64_t v33 = v34;
    [v15 perform:v30];
    if (a5)
    {
      id v16 = [*(id *)(a1 + 40) clientProxy];
      uint64_t v17 = [v16 replyQueue];
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_100061B58;
      v24[3] = &unk_1002D6408;
      v25[2] = v34;
      id v18 = v15;
      uint64_t v19 = *(void *)(a1 + 40);
      v25[0] = v18;
      v25[1] = v19;
      [v18 notifyOnQueue:v17 block:v24];
      id v20 = (id *)v25;
    }
    else
    {
      uint64_t v21 = *(void **)(a1 + 32);
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472;
      v26[2] = sub_10006189C;
      v26[3] = &unk_1002D48B0;
      id v27 = v15;
      int8x16_t v23 = *(int8x16_t *)(a1 + 32);
      id v22 = (id)v23.i64[0];
      int8x16_t v28 = vextq_s8(v23, v23, 8uLL);
      id v29 = *(id *)(a1 + 48);
      [v21 perform:v26];
      id v20 = &v27;

      id v16 = (void *)v28.i64[1];
    }

    _Block_object_dispose(v34, 8);
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_1000616EC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_100061704(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = [*(id *)(a1 + 48) context];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_1000617E4;
  v10[3] = &unk_1002D6390;
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  id v12 = v3;
  uint64_t v13 = v8;
  id v11 = v7;
  id v9 = v3;
  [v4 loadGamesWithAchievementStatsForPlayer:v5 context:v6 handler:v10];
}

void sub_1000617E4(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7 = *(void **)(a1 + 32);
  id v11 = a3;
  id v8 = a2;
  [v7 setError:v11];
  BOOL v10 = a4 > 0.0 && v11 == 0;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v10;
  [*(id *)(a1 + 32) setObject:v8 forKeyedSubscript:@"seed"];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10006189C(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1[4];
  uint64_t v5 = [a1[5] clientProxy];
  uint64_t v6 = [v5 replyQueue];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_1000619A8;
  v10[3] = &unk_1002D39A8;
  id v11 = a1[6];
  id v7 = a1[4];
  id v8 = a1[5];
  id v12 = v7;
  id v13 = v8;
  id v14 = a1[7];
  id v15 = v3;
  id v9 = v3;
  [v4 notifyOnQueue:v6 block:v10];
}

void sub_1000619A8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 40) error];
  [*(id *)(a1 + 32) setError:v2];

  id v3 = [*(id *)(a1 + 40) error];

  if (v3)
  {
    id v4 = *(void (**)(void))(*(void *)(a1 + 64) + 16);
    v4();
  }
  else
  {
    uint64_t v5 = *(void **)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 56);
    id v7 = [*(id *)(a1 + 32) context];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100061AD8;
    void v8[3] = &unk_1002D60B8;
    id v9 = *(id *)(a1 + 32);
    id v10 = *(id *)(a1 + 64);
    [v5 fetchGamesWithAchievementStatsForPlayer:v6 context:v7 handler:v8];
  }
}

uint64_t sub_100061AD8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setObject:a2 forKeyedSubscript:@"games"];
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:@"seed"];

  id v7 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v7();
}

void sub_100061B58(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
  {
    uint64_t v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"seed"];
    id v3 = (void *)v2;
    if (v2)
    {
      uint64_t v6 = GKRefreshSeedKey;
      uint64_t v7 = v2;
      id v4 = +[NSDictionary dictionaryWithObjects:&v7 forKeys:&v6 count:1];
    }
    else
    {
      id v4 = 0;
    }
    uint64_t v5 = [*(id *)(a1 + 40) clientProxy];
    [v5 refreshContentsForDataType:5 userInfo:v4];
  }
}

void sub_100061C40(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v5 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"games"];
  id v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"seed"];
  id v4 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *, void *))(v2 + 16))(v2, v5, v3, v4);
}

void sub_100061EC0(uint64_t a1, void *a2)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100061F90;
  void v7[3] = &unk_1002D3D30;
  id v4 = *(void **)(a1 + 32);
  id v5 = *(void **)(a1 + 48);
  void v7[4] = *(void *)(a1 + 40);
  id v8 = v5;
  id v9 = *(id *)(a1 + 32);
  uint64_t v6 = a2;
  [v4 performOnManagedObjectContext:v7];
  v6[2](v6);
}

void sub_100061F90(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void **)(a1 + 32);
  id v7 = a2;
  id v8 = [v6 localPlayer];
  id v9 = [v8 playerID];
  id v10 = +[GKResource resourceWithID:v9];

  id v11 = +[NSMutableSet set];
  id v12 = +[GKResource resourceForRemoveGames:*(void *)(a1 + 40)];
  [v11 addObject:v12];
  [v10 setRepresentedItem:v11];
  id v13 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:v7];
  id v14 = +[NSPredicate predicateWithFormat:@"player = %@ && game.bundleID = %@", v13, *(void *)(a1 + 40)];
  +[GKCacheObject deleteObjectsMatchingPredicate:v14 context:v7];

  id v15 = [*(id *)(a1 + 32) clientProxy];
  id v16 = [*(id *)(a1 + 32) credential];
  uint64_t v17 = [v15 removeGameWriterWithCredential:v16];
  id v18 = +[NSSet setWithObject:v10];
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_1000621B8;
  v20[3] = &unk_1002D3BC8;
  id v21 = *(id *)(a1 + 48);
  id v22 = v5;
  id v19 = v5;
  [v17 writeResources:v18 handler:v20];
}

uint64_t sub_1000621B8(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setError:a2];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

uint64_t sub_100062200(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000623A8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  id v7 = +[GKCDLoadedGame _gkFetchRequest];
  id v23 = 0;
  id v18 = v5;
  id v8 = [v5 executeFetchRequest:v7 error:&v23];
  id v9 = v23;
  id v10 = objc_alloc_init((Class)NSMutableSet);
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v11 = v8;
  id v12 = [v11 countByEnumeratingWithState:&v19 objects:v24 count:16];
  if (v12)
  {
    id v13 = v12;
    uint64_t v14 = *(void *)v20;
    do
    {
      id v15 = 0;
      do
      {
        if (*(void *)v20 != v14) {
          objc_enumerationMutation(v11);
        }
        id v16 = [*(id *)(*((void *)&v19 + 1) + 8 * (void)v15) bundleId];
        [v10 addObject:v16];

        id v15 = (char *)v15 + 1;
      }
      while (v13 != v15);
      id v13 = [v11 countByEnumeratingWithState:&v19 objects:v24 count:16];
    }
    while (v13);
  }

  id v17 = [v10 copy];
  [*(id *)(a1 + 32) setResult:v17];

  [*(id *)(a1 + 32) setError:v9];
  v6[2](v6);
}

void sub_100062574(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) result];
  if ([v4 count])
  {
    uint64_t v2 = *(void *)(a1 + 48);
    id v3 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
  }
  else
  {
    [*(id *)(a1 + 40) restoreGameIdCacheWithHandler:*(void *)(a1 + 48)];
  }
}

uint64_t sub_10006277C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), a2);
}

void sub_100062AB0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = [objc_alloc((Class)NSBatchDeleteRequest) initWithFetchRequest:*(void *)(a1 + 32)];
  [v7 setResultType:2];
  id v15 = 0;
  id v8 = [v6 executeRequest:v7 error:&v15];

  id v9 = v15;
  if (v9) {
    [*(id *)(a1 + 40) setError:v9];
  }
  if (!os_log_GKGeneral) {
    id v10 = (id)GKOSLoggers();
  }
  id v11 = (void *)os_log_GKCache;
  if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG))
  {
    id v12 = v11;
    id v13 = [v8 result];
    uint64_t v14 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 138412802;
    id v17 = v13;
    __int16 v18 = 2112;
    uint64_t v19 = v14;
    __int16 v20 = 2112;
    id v21 = v9;
    _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Cleared %@ cached %@ entities (error: %@)", buf, 0x20u);
  }
  v5[2](v5);
}

void sub_100062C58(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

NSArray *__cdecl sub_100062E10(id a1, NSSet *a2)
{
  id v2 = a2;
  id v3 = dispatch_get_current_queue();
  if (dispatch_queue_get_specific(v3, @"com.apple.gamed.cachequeue") != @"com.apple.gamed.cachequeue")
  {
    id v4 = +[NSThread callStackSymbols];
    id v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s not invoked on managed object context queue at %@", "-[GKGameServicePrivate getFriendListAccessForAllGames:]_block_invoke", v4);
    id v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKGameService.m"];
    id v7 = [v6 lastPathComponent];
    id v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@ (_queueContext == (__bridge const void * _Nonnull)GKCacheQueueID)\n[%s (%s:%d)]", v5, "-[GKGameServicePrivate getFriendListAccessForAllGames:]_block_invoke", [v7 UTF8String], 2262);

    +[NSException raise:@"GameKit Exception", @"%@", v8 format];
  }

  id v9 = [(NSSet *)v2 _gkMapWithBlock:&stru_1002D6978];

  return (NSArray *)v9;
}

id sub_100062F70(id a1, GKCDGameSettings *a2)
{
  id v2 = a2;
  id v3 = [(GKCDGameSettings *)v2 bundleID];
  if ([v3 isEqualToString:GKGameCenterIdentifier]) {
    id v4 = 0;
  }
  else {
    id v4 = [objc_alloc((Class)GKGameSettingsInternal) initWithGameSettings:v2];
  }

  return v4;
}

void sub_100062FF8(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = +[GKCDGameAccessList _gkFetchRequest];
  id v42 = 0;
  id v8 = [v5 executeFetchRequest:v7 error:&v42];
  id v9 = v42;
  if (v9)
  {
    id v10 = v6;
    id v11 = v7;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    id v12 = v8;
    id v13 = v8;
    id v14 = [v13 countByEnumeratingWithState:&v38 objects:v45 count:16];
    if (v14)
    {
      id v15 = v14;
      uint64_t v16 = *(void *)v39;
      do
      {
        for (unint64_t i = 0; i != v15; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v39 != v16) {
            objc_enumerationMutation(v13);
          }
          [v5 deleteObject:*(void *)(*((void *)&v38 + 1) + 8 * i)];
        }
        id v15 = [v13 countByEnumeratingWithState:&v38 objects:v45 count:16];
      }
      while (v15);
    }

    if (!os_log_GKGeneral) {
      id v18 = (id)GKOSLoggers();
    }
    uint64_t v19 = os_log_GKDaemon;
    id v7 = v11;
    id v6 = v10;
    id v8 = v12;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v44 = v9;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Could not fetch data from cache: %@", buf, 0xCu);
    }
  }
  else if ([v8 count])
  {
    __int16 v20 = [v8 firstObject];
    goto LABEL_16;
  }
  id v21 = [GKCDGameAccessList alloc];
  long long v22 = +[GKCDGameAccessList entity];
  __int16 v20 = [(GKCDGameAccessList *)v21 initWithEntity:v22 insertIntoManagedObjectContext:v5];

LABEL_16:
  id v23 = [(GKCDGameAccessList *)v20 expirationDate];
  unsigned int v24 = [(GKCDGameAccessList *)v20 _gkIsExpired:v23];

  if (v24)
  {
    id v25 = +[GKNetworkRequestManager commonNetworkRequestManager];
    uint64_t v26 = GKBagKeyGetAllowFriendListAccessForAllGames;
    [a1[4] clientProxy];
    v28 = id v27 = v8;
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472;
    _OWORD v34[2] = sub_1000633BC;
    void v34[3] = &unk_1002D69C8;
    id v35 = a1[5];
    id v36 = a1[6];
    long long v37 = v6;
    [v25 issueRequest:&__NSDictionary0__struct bagKey:v26 clientProxy:v28 handler:v34];

    id v8 = v27;
  }
  else
  {
    id v29 = [(GKCDGameAccessList *)v20 entries];
    id v30 = [v29 count];

    if (v30)
    {
      id v31 = (void (**)(id, void *))a1[6];
      id v32 = [(GKCDGameAccessList *)v20 entries];
      uint64_t v33 = v31[2](v31, v32);
      [a1[5] setResult:v33];
    }
    v6[2](v6);
  }
}

void sub_1000633BC(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7 = a2;
  [*(id *)(a1 + 32) setError:a3];
  if (v7 && !a3)
  {
    id v8 = [v7 objectForKey:@"results"];
    +[NSMutableSet setWithCapacity:](NSMutableSet, "setWithCapacity:", [v8 count]);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_100063514;
    void v12[3] = &unk_1002D69A0;
    id v13 = v8;
    id v14 = (id)objc_claimAutoreleasedReturnValue();
    double v17 = a4;
    id v9 = *(void **)(a1 + 32);
    id v15 = v9;
    id v16 = *(id *)(a1 + 40);
    id v10 = v14;
    id v11 = v8;
    [v9 performOnManagedObjectContext:v12];
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_100063514(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v36 = a3;
  +[GKCDGameAccessList _gkFetchRequest];
  id v35 = v46 = 0;
  id v6 = [v5 executeFetchRequest:error:];
  id v7 = 0;
  if (v7)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100064BF0();
    }
  }
  long long v34 = v7;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  id v9 = v6;
  id v10 = [v9 countByEnumeratingWithState:&v42 objects:v48 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = *(void *)v43;
    do
    {
      for (unint64_t i = 0; i != v11; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v43 != v12) {
          objc_enumerationMutation(v9);
        }
        [v5 deleteObject:*(void *)(*((void *)&v42 + 1) + 8 * i)];
      }
      id v11 = [v9 countByEnumeratingWithState:&v42 objects:v48 count:16];
    }
    while (v11);
  }

  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  uint64_t v14 = a1;
  id obj = *(id *)(a1 + 32);
  id v15 = [obj countByEnumeratingWithState:&v38 objects:v47 count:16];
  if (v15)
  {
    id v16 = v15;
    uint64_t v17 = *(void *)v39;
    do
    {
      for (j = 0; j != v16; j = (char *)j + 1)
      {
        if (*(void *)v39 != v17) {
          objc_enumerationMutation(obj);
        }
        uint64_t v19 = *(void **)(*((void *)&v38 + 1) + 8 * (void)j);
        __int16 v20 = [GKCDGameSettings alloc];
        id v21 = +[GKCDGameSettings entity];
        long long v22 = [(GKCDGameSettings *)v20 initWithEntity:v21 insertIntoManagedObjectContext:v5];

        id v23 = [v19 objectForKeyedSubscript:@"allow-friend-list-access"];
        [(GKCDGameSettings *)v22 setAllowFriendListAccess:v23];

        unsigned int v24 = [v19 objectForKeyedSubscript:@"bundle-id"];
        [(GKCDGameSettings *)v22 setBundleID:v24];

        [*(id *)(v14 + 40) addObject:v22];
      }
      id v16 = [obj countByEnumeratingWithState:&v38 objects:v47 count:16];
    }
    while (v16);
  }

  uint64_t v25 = v14;
  uint64_t v26 = +[NSDate dateWithTimeIntervalSinceNow:*(double *)(v14 + 64)];
  id v27 = [GKCDGameAccessList alloc];
  int8x16_t v28 = +[GKCDGameAccessList entity];
  id v29 = [(GKCDGameAccessList *)v27 initWithEntity:v28 insertIntoManagedObjectContext:v5];

  [(GKCDGameAccessList *)v29 setExpirationDate:v26];
  if ([*(id *)(v25 + 40) count])
  {
    id v30 = [*(id *)(v25 + 40) copy];
    [(GKCDGameAccessList *)v29 setEntries:v30];

    uint64_t v31 = *(void *)(v25 + 56);
    id v32 = [(GKCDGameAccessList *)v29 entries];
    uint64_t v33 = (*(void (**)(uint64_t, void *))(v31 + 16))(v31, v32);
    [*(id *)(v25 + 48) setResult:v33];
  }
  v36[2](v36);
}

void sub_1000638EC(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) result];
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_100063AB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 40);
  id v5 = +[NSArray arrayWithObjects:&v13 count:1];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100063BD8;
  void v8[3] = &unk_1002D6A40;
  id v9 = *(id *)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  id v11 = v3;
  id v12 = v6;
  uint64_t v10 = *(void *)(a1 + 32);
  id v7 = v3;
  [v4 getGameMetadataForBundleIDs:v5 handler:v8];
}

void sub_100063BD8(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 firstObject];
  if (v4)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers();
    }
    id v6 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      id v7 = v6;
      id v8 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v3 count]);
      *(_DWORD *)buf = 138412546;
      id v21 = v8;
      __int16 v22 = 2112;
      id v23 = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Loaded %@ games for bundleID, pick the first one out of: %@", buf, 0x16u);
    }
    id v9 = [a1[5] transport];
    uint64_t v10 = [a1[5] clientProxy];
    id v11 = [a1[5] localPlayer];
    id v12 = +[GKService serviceWithTransport:v9 forClient:v10 localPlayer:v11];
    uint64_t v13 = [v4 gameDescriptor];
    uint64_t v14 = [a1[5] localPlayer];
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    void v16[2] = sub_100063E8C;
    void v16[3] = &unk_1002D53D8;
    id v17 = a1[6];
    id v18 = a1[4];
    id v19 = a1[7];
    [v12 getLeaderboardsForGameDescriptor:v13 player:v14 setIdentifier:0 handler:v16];
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v15 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100064C58();
    }
    (*((void (**)(void))a1[7] + 2))();
  }
}

void sub_100063E8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  void v21[2] = sub_100064180;
  v21[3] = &unk_1002D6A18;
  id v22 = *(id *)(a1 + 32);
  id v4 = [v3 _gkFilterWithBlock:v21];
  id v5 = [v4 firstObject];

  if (v5)
  {
    if (!os_log_GKGeneral) {
      id v6 = (id)GKOSLoggers();
    }
    id v7 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      id v8 = v7;
      id v9 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v3 count]);
      uint64_t v10 = *(void *)(a1 + 40);
      id v11 = [*(id *)(a1 + 32) leaderboardID];
      *(_DWORD *)buf = 138413058;
      unsigned int v24 = v9;
      __int16 v25 = 2112;
      uint64_t v26 = v10;
      __int16 v27 = 2112;
      int8x16_t v28 = v11;
      __int16 v29 = 2112;
      id v30 = v3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Loaded %@ leaderboards for bundleID: %@.\n Pick the first one matching leaderboardID: (%@) out of: %@", buf, 0x2Au);
    }
    id v12 = objc_alloc((Class)GKGameActivityInternal);
    uint64_t v13 = [v5 activityType];
    uint64_t v14 = *(void *)(a1 + 40);
    id v15 = [v5 userInfo];
    id v16 = [v12 initWithActivityType:v13 bundleID:v14 andUserInfo:v15];

    id v17 = +[GKGameService sharedGameActivityStore];
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    void v19[2] = sub_1000641F8;
    void v19[3] = &unk_1002D3A20;
    id v20 = *(id *)(a1 + 48);
    [v17 add:v16 completionHandler:v19];
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v18 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100064CC4();
    }
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

id sub_100064180(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 identifier];
  id v5 = [*(id *)(a1 + 32) leaderboardID];
  if ([v4 isEqualToString:v5]) {
    id v6 = v3;
  }
  else {
    id v6 = 0;
  }
  id v7 = v6;

  return v7;
}

uint64_t sub_1000641F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100064320(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100064404(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000644C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10006459C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000645AC()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "_cacheLockupsWithCollectionRequest returned error: %@", v2, v3, v4, v5, v6);
}

void sub_100064614()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "_lockupDictionaryForRequest returned error: %@", v2, v3, v4, v5, v6);
}

void sub_10006467C()
{
  sub_100010D28();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Unable to lookup game settings: %@", v2, v3, v4, v5, v6);
}

void sub_1000646E8()
{
  sub_100010D28();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Unable to lookup existing game settings object. %@", v2, v3, v4, v5, v6);
}

void sub_100064754()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Encountered a fetch error while trying to lookup a game list: %@", v2, v3, v4, v5, v6);
}

void sub_1000647BC(void *a1, void *a2)
{
  uint64_t v3 = a1;
  [a2 count];
  sub_100011064();
  _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Finished refreshing %lu expired metadatas", v4, 0xCu);
}

void sub_100064854()
{
  sub_100010D28();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "%@ Scanning installed apps", v1, 0xCu);
}

void sub_1000648CC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = a2;
  uint64_t v4 = [v2 conciseDescription];
  int v5 = 136315394;
  uint8_t v6 = "-[GKGameServicePrivate getGamesForPlayer:includeInstalled:handler:]_block_invoke_3";
  __int16 v7 = 2112;
  id v8 = v4;
  _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Cache miss - %s %@", (uint8_t *)&v5, 0x16u);
}

void sub_10006498C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = a2;
  int v5 = [v3 conciseDescription];
  uint64_t v6 = *(void *)(a1 + 48);
  int v7 = 136315650;
  id v8 = "-[GKGameServicePrivate getGameStatsForPlayer:bundleIDs:handler:]_block_invoke_3";
  __int16 v9 = 2112;
  uint64_t v10 = v5;
  __int16 v11 = 2112;
  uint64_t v12 = v6;
  _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Cache miss - %s %@ %@", (uint8_t *)&v7, 0x20u);
}

void sub_100064A60(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Cache Validity Error! Missing Results", v1, 2u);
}

void sub_100064AA4()
{
  sub_100010D28();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Cache validity error! Missing results for %@", v1, 0xCu);
}

void sub_100064B1C(uint64_t a1, NSObject *a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = 136315394;
  uint64_t v4 = "-[GKGameServicePrivate getGameMetadataForBundleIDs:handler:]_block_invoke_2";
  __int16 v5 = 2112;
  uint64_t v6 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Cache miss - %s %@", (uint8_t *)&v3, 0x16u);
}

void sub_100064BAC(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Scanning installed apps after cache reset", v1, 2u);
}

void sub_100064BF0()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Unable to lookup game access list: %@", v2, v3, v4, v5, v6);
}

void sub_100064C58()
{
  sub_100010D28();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Failed to load games for activity creation, with bundleID: %@", v2, v3, v4, v5, v6);
}

void sub_100064CC4()
{
  sub_100010D28();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Failed to load leaderboards for activity creation, with bundleID: %@", v2, v3, v4, v5, v6);
}

void sub_100064E58(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v8 = 0;
    __int16 v9 = &v8;
    uint64_t v10 = 0x2020000000;
    char v11 = 0;
    uint64_t v4 = [v3 requiredDeviceCapabilities];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    void v7[2] = sub_100064F94;
    void v7[3] = &unk_1002D6A90;
    void v7[4] = &v8;
    [v4 enumerateObjectsUsingBlock:v7];

    if (([v3 isGameCenterEnabled] & 1) != 0 || *((unsigned char *)v9 + 24))
    {
      uint64_t v5 = *(void **)(a1 + 32);
      uint8_t v6 = [v3 bundleIdentifier];
      [v5 addObject:v6];
    }
    _Block_object_dispose(&v8, 8);
  }
}

void sub_100064F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100064F94(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id result = [a2 isEqualToString:@"gamekit"];
  if (result)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

void sub_1000650AC(uint64_t a1, void *a2)
{
  id v8 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v3 = [objc_alloc((Class)GKApplicationProxy) initWithProxy:v8];
    if ([v3 isGameCenterEnabled])
    {
      uint64_t v4 = [v3 bundleID];
      uint64_t v5 = [v8 itemName];

      if (v5)
      {
        uint8_t v6 = *(void **)(a1 + 32);
        int v7 = [v8 itemName];
        [v6 setObject:v4 forKey:v7];
      }
    }
  }
}

void sub_100065344(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "cannot openURL: %@, because of error: %@", (uint8_t *)&v3, 0x16u);
}

void sub_100065848(uint64_t a1, void *a2)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_100065954;
  v9[3] = &unk_1002D6B80;
  uint64_t v4 = *(void **)(a1 + 32);
  id v10 = *(id *)(a1 + 40);
  id v11 = *(id *)(a1 + 32);
  id v5 = *(id *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  int v7 = *(void **)(a1 + 64);
  id v12 = v5;
  uint64_t v13 = v6;
  int v16 = *(_DWORD *)(a1 + 80);
  id v14 = v7;
  id v15 = *(id *)(a1 + 72);
  id v8 = a2;
  [v4 performOnManagedObjectContext:v9];
  v8[2](v8);
}

void sub_100065954(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  int v7 = +[GKCacheObject firstObjectMatchingPredicate:*(void *)(a1 + 32) context:v5];
  unsigned int v8 = [v7 isValid];
  char v9 = v8;
  if (!v8) {
    goto LABEL_3;
  }
  id v10 = [v7 internalRepresentation];
  [*(id *)(a1 + 40) setResult:v10];

  id v11 = [v7 expirationDate];
  [v11 timeIntervalSinceNow];
  double v13 = v12;

  if (v13 <= 0.0)
  {
LABEL_3:
    id v14 = *(void **)(a1 + 40);
    id v15 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKGameStatService.m", 136, "-[GKGameStatService _getRecentMatchesForGameDescriptor:type:reference:handler:]_block_invoke_2");
    int v16 = [v14 transactionGroupWithName:v15];

    v39[0] = 0;
    v39[1] = v39;
    v39[2] = 0x2020000000;
    char v40 = 0;
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_100065C80;
    v30[3] = &unk_1002D6B30;
    id v17 = *(id *)(a1 + 48);
    uint64_t v18 = *(void *)(a1 + 56);
    id v31 = v17;
    uint64_t v32 = v18;
    id v19 = v16;
    id v33 = v19;
    id v34 = v7;
    int v38 = *(_DWORD *)(a1 + 80);
    id v35 = *(id *)(a1 + 64);
    id v36 = *(id *)(a1 + 72);
    long long v37 = v39;
    [v19 perform:v30];
    if (v9)
    {
      id v20 = [*(id *)(a1 + 56) clientProxy];
      id v21 = [v20 replyQueue];
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472;
      v25[2] = sub_1000661D0;
      void v25[3] = &unk_1002D6B58;
      void v25[4] = *(void *)(a1 + 56);
      void v25[5] = v39;
      [v19 notifyOnQueue:v21 block:v25];
    }
    else
    {
      id v22 = *(void **)(a1 + 40);
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472;
      v26[2] = sub_100066060;
      v26[3] = &unk_1002D3980;
      id v23 = v19;
      uint64_t v24 = *(void *)(a1 + 56);
      id v27 = v23;
      uint64_t v28 = v24;
      id v29 = *(id *)(a1 + 40);
      [v22 perform:v26];
    }
    _Block_object_dispose(v39, 8);
  }
  v6[2](v6);
}

void sub_100065C68(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_100065C80(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[GKNetworkRequestManager commonNetworkRequestManager];
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = [*(id *)(a1 + 40) clientProxy];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_100065DC0;
  v10[3] = &unk_1002D6B08;
  id v11 = *(id *)(a1 + 48);
  id v12 = *(id *)(a1 + 56);
  int v17 = *(_DWORD *)(a1 + 88);
  id v13 = *(id *)(a1 + 64);
  id v7 = *(id *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 80);
  id v15 = v3;
  uint64_t v16 = v8;
  id v14 = v7;
  id v9 = v3;
  [v4 issueRequest:v5 bagKey:@"gk-get-friends-who-played-game" clientProxy:v6 handler:v10];
}

void sub_100065DC0(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = v8;
  if (v7 && !v8)
  {
    id v10 = [*(id *)(a1 + 32) context];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100065F20;
    v11[3] = &unk_1002D6AE0;
    id v12 = *(id *)(a1 + 40);
    double v17 = a4;
    id v13 = *(id *)(a1 + 32);
    int v18 = *(_DWORD *)(a1 + 80);
    id v14 = *(id *)(a1 + 48);
    id v15 = *(id *)(a1 + 56);
    id v16 = v7;
    [v10 performBlockAndWait:v11];

    *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = a4 > 0.0;
  }
  [*(id *)(a1 + 32) setError:v9];
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_100065F20(uint64_t a1)
{
  id v9 = (GKCompatiblePlayerListCacheObject *)*(id *)(a1 + 32);
  uint64_t v2 = +[NSDate dateWithTimeIntervalSinceNow:*(double *)(a1 + 72)];
  if (!v9)
  {
    id v3 = [GKCompatiblePlayerListCacheObject alloc];
    uint64_t v4 = [*(id *)(a1 + 40) context];
    id v9 = [(GKCacheObject *)v3 initWithManagedObjectContext:v4];

    [(GKCompatiblePlayerListCacheObject *)v9 setType:*(unsigned int *)(a1 + 80)];
    [(GKCompatiblePlayerListCacheObject *)v9 setReference:*(void *)(a1 + 48)];
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v6 = [*(id *)(a1 + 40) context];
    id v7 = +[GKGameCacheObject gameForGameDescriptor:v5 context:v6];
    [(GKCompatiblePlayerListCacheObject *)v9 setGame:v7];
  }
  [(GKCompatiblePlayerListCacheObject *)v9 updateWithServerRepresentation:*(void *)(a1 + 64) expirationDate:v2];
  id v8 = [(GKPlayerListCacheObject *)v9 internalRepresentation];
  [*(id *)(a1 + 40) setResult:v8];
}

void sub_100066060(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1[4];
  uint64_t v5 = [a1[5] clientProxy];
  uint64_t v6 = [v5 replyQueue];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100066154;
  void v8[3] = &unk_1002D3A48;
  id v9 = a1[6];
  id v10 = a1[4];
  id v11 = v3;
  id v7 = v3;
  [v4 notifyOnQueue:v6 block:v8];
}

uint64_t sub_100066154(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 40) error];
  [*(id *)(a1 + 32) setError:v2];

  id v3 = [*(id *)(a1 + 40) result];
  [*(id *)(a1 + 32) setResult:v3];

  id v4 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);

  return v4();
}

void sub_1000661D0(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    id v1 = [*(id *)(a1 + 32) clientProxy];
    [v1 refreshContentsForDataType:7 userInfo:0];
  }
}

void sub_100066238(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) result];
  id v3 = [v2 _gkValuesForKeyPath:@"player.playerID"];

  id v4 = +[GKService serviceFromService:*(void *)(a1 + 40)];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_10006632C;
  v5[3] = &unk_1002D4F38;
  id v6 = *(id *)(a1 + 32);
  id v7 = *(id *)(a1 + 48);
  [v4 getProfilesForPlayerIDs:v3 handler:v5];
}

void sub_10006632C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = [a2 _gkMapDictionaryWithKeyPath:@"playerID"];
  id v7 = [*(id *)(a1 + 32) result];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  void v14[2] = sub_100066444;
  void v14[3] = &unk_1002D6BD0;
  id v15 = v6;
  id v8 = v6;
  id v9 = [v7 _gkMapWithBlock:v14];

  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = [*(id *)(a1 + 32) error];
  id v12 = (void *)v11;
  if (v11) {
    id v13 = (id)v11;
  }
  else {
    id v13 = v5;
  }
  (*(void (**)(uint64_t, void *, id))(v10 + 16))(v10, v9, v13);
}

id sub_100066444(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 player];
  id v5 = [v4 playerID];

  if (v5)
  {
    id v6 = [*(id *)(a1 + 32) objectForKeyedSubscript:v5];
    [v3 setPlayer:v6];
  }

  return v3;
}

void sub_100066608(uint64_t a1)
{
  uint64_t v2 = +[NSPredicate predicateWithFormat:@"player == %@ && game == %@", *(void *)(a1 + 32), *(void *)(a1 + 40)];
  id v3 = +[GKCacheObject firstObjectMatchingPredicate:v2 context:*(void *)(a1 + 48)];

  unsigned int v4 = [v3 isValid];
  char v5 = v4;
  if (v4)
  {
    id v6 = [v3 internalRepresentation];
    id v7 = [v3 seed];
    id v8 = [v3 expirationDate];
    [v8 timeIntervalSinceNow];
    BOOL v10 = v9 > 0.0;
  }
  else
  {
    BOOL v10 = 0;
    id v6 = 0;
    id v7 = 0;
  }
  uint64_t v11 = [*(id *)(a1 + 56) clientProxy];
  id v12 = [v11 replyQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000667B0;
  block[3] = &unk_1002D6858;
  id v13 = *(id *)(a1 + 64);
  id v18 = v7;
  id v19 = v13;
  id v17 = v6;
  BOOL v20 = v10;
  char v21 = v5;
  id v14 = v7;
  id v15 = v6;
  dispatch_async(v12, block);
}

uint64_t sub_1000667B0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void, void))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 57));
}

void sub_1000668DC(uint64_t a1)
{
  uint64_t v2 = +[NSPredicate predicateWithFormat:@"player == %@ && otherPlayer == %@", *(void *)(a1 + 32), *(void *)(a1 + 40)];
  id v3 = +[GKCacheObject firstObjectMatchingPredicate:v2 context:*(void *)(a1 + 48)];

  unsigned int v4 = [v3 isValid];
  char v5 = v4;
  if (v4)
  {
    id v6 = [v3 internalRepresentation];
    id v7 = [v3 seed];
    id v8 = [v3 expirationDate];
    [v8 timeIntervalSinceNow];
    BOOL v10 = v9 > 0.0;
  }
  else
  {
    BOOL v10 = 0;
    id v6 = 0;
    id v7 = 0;
  }
  uint64_t v11 = [*(id *)(a1 + 56) clientProxy];
  id v12 = [v11 replyQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100066A84;
  block[3] = &unk_1002D6858;
  id v13 = *(id *)(a1 + 64);
  id v18 = v7;
  id v19 = v13;
  id v17 = v6;
  BOOL v20 = v10;
  char v21 = v5;
  id v14 = v7;
  id v15 = v6;
  dispatch_async(v12, block);
}

uint64_t sub_100066A84(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void, void))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 57));
}

void sub_100066D54(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_100066D74(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v28[0] = @"count";
  id v7 = +[NSNumber numberWithInteger:*(void *)(a1 + 80)];
  v29[0] = v7;
  v28[1] = @"since-time";
  id v8 = [*(id *)(a1 + 32) _gkServerTimestamp];
  v29[1] = v8;
  double v9 = +[NSDictionary dictionaryWithObjects:v29 forKeys:v28 count:2];
  BOOL v10 = +[NSMutableDictionary dictionaryWithDictionary:v9];

  uint64_t v11 = *(void **)(a1 + 40);
  if (v11)
  {
    id v12 = [v11 gameDescriptor];
    [v10 setObject:v12 forKeyedSubscript:@"game"];
  }
  id v13 = +[GKNetworkRequestManager commonNetworkRequestManager];
  id v14 = [*(id *)(a1 + 48) clientProxy];
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  void v19[2] = sub_100066FC8;
  void v19[3] = &unk_1002D6C48;
  uint64_t v27 = *(void *)(a1 + 72);
  id v20 = *(id *)(a1 + 56);
  id v21 = v5;
  id v22 = *(id *)(a1 + 64);
  id v23 = *(id *)(a1 + 40);
  id v15 = *(id *)(a1 + 32);
  uint64_t v16 = *(void *)(a1 + 48);
  id v24 = v15;
  uint64_t v25 = v16;
  id v26 = v6;
  id v17 = v6;
  id v18 = v5;
  [v13 issueRequest:v10 bagKey:@"gk-get-recently-matched" clientProxy:v14 handler:v19];
}

void sub_100066FC8(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7 = a2;
  *(double *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = a4;
  [*(id *)(a1 + 32) setError:a3];
  if (v7 && !a3)
  {
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    void v14[2] = sub_100067110;
    void v14[3] = &unk_1002D6C20;
    uint64_t v11 = *(void **)(a1 + 32);
    id v15 = *(id *)(a1 + 40);
    double v22 = a4;
    id v16 = *(id *)(a1 + 48);
    id v17 = *(id *)(a1 + 56);
    id v18 = *(id *)(a1 + 64);
    id v19 = v7;
    id v12 = *(id *)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 72);
    id v20 = v12;
    uint64_t v21 = v13;
    [v11 perform:v14];
  }
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 80) + 16))(*(void *)(a1 + 80), v8, v9, v10);
}

void sub_100067110(uint64_t a1, void *a2)
{
  id v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100067234;
  void v8[3] = &unk_1002D6BF8;
  uint64_t v17 = *(void *)(a1 + 88);
  unsigned int v4 = *(void **)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  id v10 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 32);
  id v12 = *(id *)(a1 + 56);
  id v13 = *(id *)(a1 + 64);
  id v5 = *(id *)(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 80);
  id v14 = v5;
  uint64_t v15 = v6;
  id v16 = v3;
  id v7 = v3;
  [v4 performBlock:v8];
}

void sub_100067234(uint64_t a1)
{
  uint64_t v2 = +[NSDate dateWithTimeIntervalSinceNow:*(double *)(a1 + 96)];
  id v3 = +[NSPredicate predicateWithFormat:@"player == %@ && game == %@", *(void *)(a1 + 32), *(void *)(a1 + 40)];
  unsigned int v4 = +[GKCacheObject firstObjectMatchingPredicate:v3 context:*(void *)(a1 + 48)];

  if (!v4)
  {
    unsigned int v4 = [(GKCacheObject *)[GKRecentPlayerListCacheObject alloc] initWithManagedObjectContext:*(void *)(a1 + 48)];
    [(GKRecentPlayerListCacheObject *)v4 setGame:*(void *)(a1 + 40)];
    [(GKRecentPlayerListCacheObject *)v4 setPlayer:*(void *)(a1 + 32)];
  }
  [(GKRecentPlayerListCacheObject *)v4 setSinceDate:*(void *)(a1 + 56)];
  [(GKRecentPlayerListCacheObject *)v4 updateWithServerRepresentation:*(void *)(a1 + 64) expirationDate:v2];
  id v5 = [(GKRecentPlayerListCacheObject *)v4 entries];
  id v6 = [v5 count];

  if (v6)
  {
    id v7 = [(GKRecentPlayerListCacheObject *)v4 entries];
    uint64_t v8 = [v7 _gkValuesForKeyPath:@"playerID"];
    id v9 = [*(id *)(a1 + 32) playerID];
    id v10 = [v8 arrayByAddingObject:v9];

    v41[0] = _NSConcreteStackBlock;
    v41[1] = 3221225472;
    v41[2] = sub_100067668;
    v41[3] = &unk_1002D3A70;
    id v11 = *(void **)(a1 + 72);
    v41[4] = *(void *)(a1 + 80);
    id v12 = v10;
    id v42 = v12;
    [v11 perform:v41];
    if (*(void *)(a1 + 40))
    {
      id v26 = v2;
      id v13 = +[GKService serviceFromService:*(void *)(a1 + 80)];
      id v14 = [*(id *)(a1 + 40) bundleID];
      long long v44 = v14;
      uint64_t v15 = +[NSArray arrayWithObjects:&v44 count:1];

      id v16 = *(void **)(a1 + 72);
      v37[0] = _NSConcreteStackBlock;
      v37[1] = 3221225472;
      void v37[2] = sub_100067820;
      void v37[3] = &unk_1002D3980;
      id v17 = v13;
      id v38 = v17;
      id v18 = v15;
      id v39 = v18;
      id v40 = *(id *)(a1 + 48);
      [v16 perform:v37];
      id v25 = v12;
      +[GKPlayerProfileCacheObject playerProfilesWithPlayerIDs:v12 inManagedObjectContext:*(void *)(a1 + 48)];
      long long v33 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      id obj = (id)objc_claimAutoreleasedReturnValue();
      id v19 = [obj countByEnumeratingWithState:&v33 objects:v43 count:16];
      if (v19)
      {
        id v20 = v19;
        uint64_t v21 = *(void *)v34;
        do
        {
          for (unint64_t i = 0; i != v20; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v34 != v21) {
              objc_enumerationMutation(obj);
            }
            uint64_t v23 = *(void *)(*((void *)&v33 + 1) + 8 * i);
            id v24 = *(void **)(a1 + 72);
            v28[0] = _NSConcreteStackBlock;
            v28[1] = 3221225472;
            void v28[2] = sub_1000678DC;
            v28[3] = &unk_1002D48B0;
            id v29 = v17;
            uint64_t v30 = v23;
            id v31 = v18;
            id v32 = *(id *)(a1 + 48);
            [v24 perform:v28];
          }
          id v20 = [obj countByEnumeratingWithState:&v33 objects:v43 count:16];
        }
        while (v20);
      }

      uint64_t v2 = v26;
      id v12 = v25;
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 88) + 16))();
}

void sub_100067668(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = +[GKService serviceFromService:*(void *)(a1 + 32)];
  uint64_t v5 = *(void *)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_10006772C;
  void v7[3] = &unk_1002D4F88;
  id v8 = v3;
  id v6 = v3;
  [v4 getProfilesForPlayerIDs:v5 handler:v7];
}

void sub_10006772C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!os_log_GKGeneral) {
    id v7 = (id)GKOSLoggers();
  }
  id v8 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    int v9 = 138412290;
    id v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "recent Player profiles:%@", (uint8_t *)&v9, 0xCu);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100067820(void *a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = (void *)a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000678CC;
  void v8[3] = &unk_1002D61A8;
  id v9 = v3;
  id v7 = v3;
  [v4 loadGameMetadataForBundleIDs:v5 context:v6 handler:v8];
}

uint64_t sub_1000678CC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000678DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = *(void **)(a1 + 32);
  uint64_t v5 = [*(id *)(a1 + 40) internalRepresentation];
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_1000679A8;
  v9[3] = &unk_1002D61A8;
  id v10 = v3;
  id v8 = v3;
  [v4 loadGameStatsForPlayer:v5 bundleIdentifiers:v7 context:v6 handler:v9];
}

uint64_t sub_1000679A8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000679B8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  double v2 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, double))(v1 + 16))(v1, v3, v2);
}

void sub_100067D78(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_100067D98(uint64_t a1)
{
  v6[0] = @"count";
  double v2 = +[NSNumber numberWithInteger:*(void *)(a1 + 56)];
  v7[0] = v2;
  v6[1] = @"since-time";
  id v3 = [*(id *)(a1 + 40) _gkServerTimestamp];
  v7[1] = v3;
  void v6[2] = @"other-player-id";
  unsigned int v4 = [*(id *)(a1 + 48) playerID];
  void v7[2] = v4;
  uint64_t v5 = +[NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:3];
  [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:@"request"];
}

void sub_100067EA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"request"];
  uint64_t v5 = +[GKNetworkRequestManager commonNetworkRequestManager];
  uint64_t v6 = [*(id *)(a1 + 40) clientProxy];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_100068018;
  v10[3] = &unk_1002D6C48;
  uint64_t v18 = *(void *)(a1 + 80);
  id v11 = *(id *)(a1 + 32);
  id v12 = *(id *)(a1 + 48);
  id v13 = *(id *)(a1 + 56);
  id v14 = *(id *)(a1 + 64);
  id v7 = *(id *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 40);
  id v15 = v7;
  uint64_t v16 = v8;
  id v17 = v3;
  id v9 = v3;
  [v5 issueRequest:v4 bagKey:@"gk-get-recently-matched" clientProxy:v6 handler:v10];
}

void sub_100068018(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7 = a2;
  *(double *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = a4;
  [*(id *)(a1 + 32) setError:a3];
  if (v7 && !a3)
  {
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    void v14[2] = sub_100068160;
    void v14[3] = &unk_1002D6C20;
    id v11 = *(void **)(a1 + 32);
    id v15 = *(id *)(a1 + 40);
    double v22 = a4;
    id v16 = *(id *)(a1 + 48);
    id v17 = *(id *)(a1 + 56);
    id v18 = *(id *)(a1 + 64);
    id v19 = v7;
    id v12 = *(id *)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 72);
    id v20 = v12;
    uint64_t v21 = v13;
    [v11 perform:v14];
  }
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 80) + 16))(*(void *)(a1 + 80), v8, v9, v10);
}

void sub_100068160(uint64_t a1, void *a2)
{
  id v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100068284;
  void v8[3] = &unk_1002D6BF8;
  uint64_t v17 = *(void *)(a1 + 88);
  unsigned int v4 = *(void **)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  id v10 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 32);
  id v12 = *(id *)(a1 + 56);
  id v13 = *(id *)(a1 + 64);
  id v5 = *(id *)(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 80);
  id v14 = v5;
  uint64_t v15 = v6;
  id v16 = v3;
  id v7 = v3;
  [v4 performBlock:v8];
}

void sub_100068284(uint64_t a1)
{
  double v2 = +[NSDate dateWithTimeIntervalSinceNow:*(double *)(a1 + 96)];
  id v3 = +[NSPredicate predicateWithFormat:@"player == %@ && otherPlayer == %@", *(void *)(a1 + 32), *(void *)(a1 + 40)];
  unsigned int v4 = +[GKCacheObject firstObjectMatchingPredicate:v3 context:*(void *)(a1 + 48)];

  if (!v4)
  {
    unsigned int v4 = [(GKCacheObject *)[GKRecentGameListCacheObject alloc] initWithManagedObjectContext:*(void *)(a1 + 48)];
    [(GKRecentGameListCacheObject *)v4 setPlayer:*(void *)(a1 + 32)];
    [(GKRecentGameListCacheObject *)v4 setOtherPlayer:*(void *)(a1 + 40)];
  }
  [(GKRecentGameListCacheObject *)v4 setSinceDate:*(void *)(a1 + 56)];
  [(GKRecentGameListCacheObject *)v4 updateWithServerRepresentation:*(void *)(a1 + 64) expirationDate:v2];
  id v5 = [(GKRecentGameListCacheObject *)v4 entries];
  id v6 = [v5 count];

  if (v6)
  {
    id v7 = [(GKRecentGameListCacheObject *)v4 entries];
    uint64_t v8 = [v7 _gkValuesForKeyPath:@"bundleID"];

    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472;
    _OWORD v34[2] = sub_100068624;
    void v34[3] = &unk_1002D3980;
    id v9 = *(void **)(a1 + 72);
    void v34[4] = *(void *)(a1 + 80);
    id v35 = *(id *)(a1 + 32);
    id v36 = *(id *)(a1 + 40);
    [v9 perform:v34];
    id v10 = +[GKService serviceFromService:*(void *)(a1 + 80)];
    id v11 = *(void **)(a1 + 72);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_100068778;
    v30[3] = &unk_1002D3980;
    id v12 = v10;
    id v31 = v12;
    id v13 = v8;
    id v32 = v13;
    id v33 = *(id *)(a1 + 48);
    [v11 perform:v30];
    id v14 = *(void **)(a1 + 72);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_100068834;
    void v25[3] = &unk_1002D48B0;
    id v15 = v12;
    id v26 = v15;
    id v27 = *(id *)(a1 + 32);
    id v16 = v13;
    id v28 = v16;
    id v29 = *(id *)(a1 + 48);
    [v14 perform:v25];
    uint64_t v17 = *(void **)(a1 + 72);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_100068910;
    v20[3] = &unk_1002D48B0;
    id v21 = v15;
    id v22 = *(id *)(a1 + 32);
    id v23 = v16;
    id v24 = *(id *)(a1 + 48);
    id v18 = v16;
    id v19 = v15;
    [v17 perform:v20];
  }
  (*(void (**)(void))(*(void *)(a1 + 88) + 16))();
}

void sub_100068624(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = +[GKService serviceFromService:*(void *)(a1 + 32)];
  id v5 = [*(id *)(a1 + 40) playerID];
  v11[0] = v5;
  id v6 = [*(id *)(a1 + 48) playerID];
  v11[1] = v6;
  id v7 = +[NSArray arrayWithObjects:v11 count:2];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_100068768;
  v9[3] = &unk_1002D4F88;
  id v10 = v3;
  id v8 = v3;
  [v4 getProfilesForPlayerIDs:v7 handler:v9];
}

uint64_t sub_100068768(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100068778(void *a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = (void *)a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100068824;
  void v8[3] = &unk_1002D61A8;
  id v9 = v3;
  id v7 = v3;
  [v4 loadGameMetadataForBundleIDs:v5 context:v6 handler:v8];
}

uint64_t sub_100068824(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100068834(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = *(void **)(a1 + 32);
  uint64_t v5 = [*(id *)(a1 + 40) internalRepresentation];
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_100068900;
  v9[3] = &unk_1002D61A8;
  id v10 = v3;
  id v8 = v3;
  [v4 loadGameStatsForPlayer:v5 bundleIdentifiers:v7 context:v6 handler:v9];
}

uint64_t sub_100068900(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100068910(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = *(void **)(a1 + 32);
  uint64_t v5 = [*(id *)(a1 + 40) internalRepresentation];
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_1000689DC;
  v9[3] = &unk_1002D61A8;
  id v10 = v3;
  id v8 = v3;
  [v4 loadGameStatsForPlayer:v5 bundleIdentifiers:v7 context:v6 handler:v9];
}

uint64_t sub_1000689DC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000689EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  double v2 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, double))(v1 + 16))(v1, v3, v2);
}

void sub_100068C48(uint64_t a1, void *a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100068D14;
  void v8[3] = &unk_1002D3D30;
  unsigned int v4 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  id v9 = v5;
  uint64_t v10 = v6;
  id v11 = *(id *)(a1 + 32);
  uint64_t v7 = a2;
  [v4 performOnManagedObjectContext:v8];
  v7[2](v7);
}

void sub_100068D14(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:v5];
  id v8 = *(void **)(a1 + 32);
  if (v8)
  {
    id v9 = [v8 dictionaryForRequest];
    uint64_t v10 = +[GKGameCacheObject gameForGameDescriptor:v9 context:v5];
  }
  else
  {
    uint64_t v10 = 0;
  }
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  _DWORD v17[2] = sub_100068E74;
  v17[3] = &unk_1002D6D10;
  id v11 = *(void **)(a1 + 40);
  id v12 = *(id *)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 40);
  id v18 = v12;
  uint64_t v19 = v13;
  id v20 = v7;
  id v21 = v10;
  id v22 = v6;
  id v14 = v6;
  id v15 = v10;
  id v16 = v7;
  [v11 fetchRecentPlayersWithPlayer:v16 game:v15 context:v5 handler:v17];
}

void sub_100068E74(uint64_t a1, void *a2, void *a3, int a4, char a5)
{
  id v9 = a2;
  id v10 = a3;
  if (a4 && (a5 & 1) != 0)
  {
    if (!os_log_GKGeneral) {
      id v11 = (id)GKOSLoggers();
    }
    id v12 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v36 = v9;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "GKFriendList:recent list of players:%@", buf, 0xCu);
    }
    [*(id *)(a1 + 32) setObject:v9 forKeyedSubscript:@"players"];
    [*(id *)(a1 + 32) setObject:v10 forKeyedSubscript:@"seed"];
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v13 = (id)GKOSLoggers();
    }
    id v14 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v36 = v9;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "GKFriendList:list from cache is not valid/good going to server:%@", buf, 0xCu);
    }
    id v15 = *(void **)(a1 + 32);
    id v16 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKGameStatService.m", 464, "-[GKGameStatService getRecentPlayersForGameDescriptor:handler:]_block_invoke");
    uint64_t v17 = [v15 transactionGroupWithName:v16];

    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    v31[2] = sub_1000691D4;
    v31[3] = &unk_1002D48B0;
    id v18 = *(void **)(a1 + 48);
    void v31[4] = *(void *)(a1 + 40);
    id v32 = v18;
    id v33 = *(id *)(a1 + 56);
    id v19 = v17;
    id v34 = v19;
    [v19 perform:v31];
    id v20 = [*(id *)(a1 + 40) clientProxy];
    id v21 = [v20 replyQueue];
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_1000692F8;
    v24[3] = &unk_1002D6CE8;
    id v25 = *(id *)(a1 + 32);
    id v26 = v19;
    id v22 = *(void **)(a1 + 48);
    uint64_t v27 = *(void *)(a1 + 40);
    id v28 = v22;
    id v29 = *(id *)(a1 + 56);
    id v30 = *(id *)(a1 + 64);
    id v23 = v19;
    [v23 notifyOnQueue:v21 block:v24];
  }
}

void sub_1000691D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = [*(id *)(a1 + 56) context];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_1000692B0;
  v9[3] = &unk_1002D6090;
  id v10 = *(id *)(a1 + 56);
  id v11 = v3;
  id v8 = v3;
  [v4 loadRecentPlayersWithPlayer:v5 game:v6 context:v7 handler:v9];
}

uint64_t sub_1000692B0(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setError:a2];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_1000692F8(uint64_t a1)
{
  double v2 = [*(id *)(a1 + 40) error];
  [*(id *)(a1 + 32) setError:v2];

  id v3 = [*(id *)(a1 + 40) error];

  if (v3)
  {
    unsigned int v4 = *(void (**)(void))(*(void *)(a1 + 72) + 16);
    v4();
  }
  else
  {
    uint64_t v5 = *(void **)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    id v8 = [*(id *)(a1 + 32) context];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_100069450;
    v9[3] = &unk_1002D60E0;
    id v10 = *(id *)(a1 + 32);
    id v11 = *(id *)(a1 + 40);
    id v12 = *(id *)(a1 + 72);
    [v5 fetchRecentPlayersWithPlayer:v6 game:v7 context:v8 handler:v9];
  }
}

uint64_t sub_100069450(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setObject:a2 forKeyedSubscript:@"players"];
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:@"seed"];

  uint64_t v7 = [*(id *)(a1 + 40) error];
  [*(id *)(a1 + 32) setError:v7];

  id v8 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);

  return v8();
}

void sub_1000694F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v5 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"players"];
  id v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"seed"];
  unsigned int v4 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *, void *))(v2 + 16))(v2, v5, v3, v4);
}

void sub_100069750(int8x16_t *a1, void *a2)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_10006980C;
  void v6[3] = &unk_1002D4078;
  int8x16_t v5 = a1[2];
  id v3 = (id)v5.i64[0];
  int8x16_t v7 = vextq_s8(v5, v5, 8uLL);
  unsigned int v4 = a2;
  [v3 performOnManagedObjectContext:v6];
  v4[2](v4);
}

void sub_10006980C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  int8x16_t v7 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:v6];
  id v8 = [v7 playerID];
  id v9 = +[GKPlayerProfileCacheObject playerProfileWithPlayerID:v8 inManagedObjectContext:v6];

  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  void v16[2] = sub_10006995C;
  void v16[3] = &unk_1002D6D10;
  id v10 = *(void **)(a1 + 32);
  id v11 = *(id *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 32);
  id v17 = v11;
  uint64_t v18 = v12;
  id v19 = v7;
  id v20 = v9;
  id v21 = v5;
  id v13 = v5;
  id v14 = v9;
  id v15 = v7;
  [v10 fetchRecentGamesBetweenPlayer:v15 otherPlayer:v14 context:v6 handler:v16];
}

uint64_t sub_10006995C(uint64_t a1, uint64_t a2, void *a3, int a4, char a5)
{
  id v9 = *(void **)(a1 + 32);
  id v10 = a3;
  [v9 setObject:a2 forKeyedSubscript:@"games"];
  [*(id *)(a1 + 32) setObject:v10 forKeyedSubscript:@"seed"];

  if (!a4 || (a5 & 1) == 0)
  {
    id v11 = *(void **)(a1 + 32);
    uint64_t v12 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKGameStatService.m", 517, "-[GKGameStatService getRecentGamesWithPlayer:handler:]_block_invoke_3");
    id v13 = [v11 transactionGroupWithName:v12];

    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_100069B90;
    void v25[3] = &unk_1002D48B0;
    id v14 = *(void **)(a1 + 48);
    void v25[4] = *(void *)(a1 + 40);
    id v26 = v14;
    id v27 = *(id *)(a1 + 56);
    id v15 = v13;
    id v28 = v15;
    [v15 perform:v25];
    if ((a5 & 1) == 0)
    {
      id v16 = *(void **)(a1 + 32);
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_100069CB4;
      v20[3] = &unk_1002D4518;
      id v21 = v15;
      int8x16_t v19 = *(int8x16_t *)(a1 + 32);
      id v17 = (id)v19.i64[0];
      int8x16_t v22 = vextq_s8(v19, v19, 8uLL);
      id v23 = *(id *)(a1 + 48);
      id v24 = *(id *)(a1 + 56);
      [v16 perform:v20];
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_100069B90(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  int8x16_t v7 = [*(id *)(a1 + 56) context];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_100069C6C;
  v9[3] = &unk_1002D6090;
  id v10 = *(id *)(a1 + 56);
  id v11 = v3;
  id v8 = v3;
  [v4 loadRecentGamesBetweenPlayer:v5 otherPlayer:v6 context:v7 handler:v9];
}

uint64_t sub_100069C6C(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setError:a2];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_100069CB4(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1[4];
  uint64_t v5 = [a1[5] clientProxy];
  uint64_t v6 = [v5 replyQueue];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_100069DD4;
  v10[3] = &unk_1002D6CE8;
  id v11 = a1[6];
  id v7 = a1[4];
  id v8 = a1[5];
  id v12 = v7;
  id v13 = v8;
  id v14 = a1[7];
  id v15 = a1[8];
  id v16 = v3;
  id v9 = v3;
  [v4 notifyOnQueue:v6 block:v10];
}

void sub_100069DD4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 40) error];
  [*(id *)(a1 + 32) setError:v2];

  id v3 = [*(id *)(a1 + 40) error];

  if (v3)
  {
    id v4 = *(void (**)(void))(*(void *)(a1 + 72) + 16);
    v4();
  }
  else
  {
    uint64_t v5 = *(void **)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    id v8 = [*(id *)(a1 + 32) context];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_100069F18;
    v9[3] = &unk_1002D60B8;
    id v10 = *(id *)(a1 + 32);
    id v11 = *(id *)(a1 + 72);
    [v5 fetchRecentGamesBetweenPlayer:v6 otherPlayer:v7 context:v8 handler:v9];
  }
}

uint64_t sub_100069F18(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setObject:a2 forKeyedSubscript:@"games"];
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:@"seed"];

  uint64_t v7 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v7();
}

void sub_100069F98(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v5 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"games"];
  id v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"seed"];
  id v4 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *, void *))(v2 + 16))(v2, v5, v3, v4);
}

uint64_t sub_10006A0F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10006A1E0(void *a1)
{
  uint64_t v2 = +[GKGameCacheObject gameForGameDescriptor:a1[4] context:a1[5]];
  id v3 = [v2 achievementDescriptionList];
  if ([v3 isValid])
  {
    id v5 = [v3 internalRepresentation];
    id v4 = [v3 expirationDate];
    [v4 timeIntervalSinceNow];
  }
  else
  {
    id v5 = 0;
  }
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_10006A544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10006A568(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10006A578(uint64_t a1)
{
}

void sub_10006A580(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = a3;
  uint64_t v7 = +[GKGameCacheObject gameForGameDescriptor:v5 context:a2];
  uint64_t v8 = [v7 bundleID];
  uint64_t v9 = *(void *)(*(void *)(a1 + 64) + 8);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40))
  {
    id v11 = [v7 achievementDescriptionList];
    id v12 = [v11 expirationDate];
    [v12 timeIntervalSinceNow];
    *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = v13;

    if (v11 && ![v11 expired])
    {
      [*(id *)(a1 + 40) setObject:&off_1002F1FA0 forKeyedSubscript:@"skipCallbacks"];
      uint64_t v26 = *(void *)(a1 + 56);
      double v27 = *(double *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
      id v23 = [*(id *)(a1 + 40) error];
      (*(void (**)(uint64_t, id, double))(v26 + 16))(v26, v23, v27);
    }
    else
    {
      CFStringRef v36 = @"game";
      id v14 = [v7 gameDescriptor];
      long long v37 = v14;
      id v15 = +[NSDictionary dictionaryWithObjects:&v37 forKeys:&v36 count:1];

      id v16 = *(void **)(a1 + 40);
      id v17 = [*(id *)(a1 + 48) clientProxy];
      uint64_t v18 = [v17 replyQueue];
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472;
      void v29[2] = sub_10006A87C;
      v29[3] = &unk_1002D6DB0;
      long long v28 = *(_OWORD *)(a1 + 56);
      id v19 = (id)v28;
      long long v34 = v28;
      id v20 = *(id *)(a1 + 40);
      uint64_t v21 = *(void *)(a1 + 48);
      id v30 = v20;
      uint64_t v31 = v21;
      uint64_t v22 = *(void *)(a1 + 72);
      id v32 = v15;
      uint64_t v35 = v22;
      id v33 = *(id *)(a1 + 32);
      id v23 = v15;
      [v16 performOnQueue:v18 block:v29];
    }
    v6[2](v6);
  }
  else
  {
    uint64_t v24 = *(void *)(a1 + 56);
    id v25 = +[NSError userErrorForCode:15 underlyingError:0];
    (*(void (**)(uint64_t, void *, double))(v24 + 16))(v24, v25, 0.0);

    v6[2](v6);
    id v11 = v6;
  }
}

void sub_10006A87C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[GKNetworkRequestManager commonNetworkRequestManager];
  uint64_t v24 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
  uint64_t v5 = +[NSArray arrayWithObjects:&v24 count:1];
  id v6 = objc_retainBlock(*(id *)(a1 + 64));
  unsigned int v7 = [v4 doesCallbackListExistFor:@"gk-get-game-achievements" parameters:v5 callback:v6];

  if (v7)
  {
    [*(id *)(a1 + 32) setObject:&off_1002F1FA0 forKeyedSubscript:@"skipCallbacks"];
    v3[2](v3);
  }
  else
  {
    uint64_t v8 = +[GKPlayerCredentialController sharedController];
    uint64_t v9 = [*(id *)(a1 + 40) clientProxy];
    id v10 = [v8 pushCredentialForEnvironment:[v9 environment]];

    id v11 = +[GKNetworkRequestManager commonNetworkRequestManager];
    uint64_t v12 = *(void *)(a1 + 48);
    uint64_t v13 = [*(id *)(a1 + 40) clientProxy];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    _DWORD v17[2] = sub_10006AAC8;
    v17[3] = &unk_1002D6D88;
    id v14 = *(id *)(a1 + 32);
    uint64_t v15 = *(void *)(a1 + 80);
    id v18 = v14;
    uint64_t v23 = v15;
    id v19 = *(id *)(a1 + 56);
    id v20 = v10;
    uint64_t v21 = *(void *)(a1 + 40);
    uint64_t v22 = v3;
    id v16 = v10;
    [v11 issueRequestForPlayer:v12 bagKey:@"gk-get-game-achievements" clientProxy:v13 locale:0 playerCredential:v16 handler:v17];
  }
}

void sub_10006AAC8(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7 = a2;
  [*(id *)(a1 + 32) setError:a3];
  *(double *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = a4;
  if (v7 && !a3)
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    void v11[2] = sub_10006ABD4;
    v11[3] = &unk_1002D6D60;
    uint64_t v8 = *(void **)(a1 + 32);
    id v12 = *(id *)(a1 + 40);
    double v16 = a4;
    id v13 = v7;
    id v9 = *(id *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 56);
    id v14 = v9;
    uint64_t v15 = v10;
    [v8 performOnManagedObjectContext:v11];
  }
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_10006ABD4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v25 = a3;
  id v6 = +[GKGameCacheObject gameForGameDescriptor:*(void *)(a1 + 32) context:v5];
  uint64_t v7 = +[NSDate dateWithTimeIntervalSinceNow:*(double *)(a1 + 64)];
  long long v28 = v6;
  uint64_t v8 = [v6 achievementDescriptionList];
  if (!v8)
  {
    uint64_t v8 = [(GKCacheObject *)[GKAchievementDescriptionListCacheObject alloc] initWithManagedObjectContext:v5];
    [(GKAchievementDescriptionListCacheObject *)v8 setGame:v28];
  }
  double v27 = (void *)v7;
  [(GKAchievementDescriptionListCacheObject *)v8 updateWithServerRepresentation:*(void *)(a1 + 40) expirationDate:v7];
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  uint64_t v24 = v8;
  id obj = [(GKAchievementDescriptionListCacheObject *)v8 entries];
  id v9 = [obj countByEnumeratingWithState:&v31 objects:v35 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v32;
    do
    {
      id v12 = 0;
      do
      {
        if (*(void *)v32 != v11) {
          objc_enumerationMutation(obj);
        }
        id v13 = *(void **)(*((void *)&v31 + 1) + 8 * (void)v12);
        id v14 = [(GKCacheObject *)[GKAchievementThatAFriendHasListCacheObject alloc] initWithManagedObjectContext:v5];
        [(GKAchievementThatAFriendHasListCacheObject *)v14 setGame:v28];
        uint64_t v15 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:v5];
        [(GKAchievementThatAFriendHasListCacheObject *)v14 setPlayer:v15];

        [(GKAchievementThatAFriendHasListCacheObject *)v14 setAchievementDescription:v13];
        uint64_t v16 = *(void *)(a1 + 40);
        id v17 = [*(id *)(a1 + 48) playerInternal];
        id v18 = [v17 playerID];
        id v19 = [v13 identifier];
        [(GKAchievementThatAFriendHasListCacheObject *)v14 updateWithServerRepresentation:v16 expirationDate:v27 playerId:v18 achievementId:v19];

        id v12 = (char *)v12 + 1;
      }
      while (v10 != v12);
      id v10 = [obj countByEnumeratingWithState:&v31 objects:v35 count:16];
    }
    while (v10);
  }

  id v20 = +[GKService serviceFromService:*(void *)(a1 + 56)];
  uint64_t v21 = +[GKGameStatService friendsRequiringHydration:*(void *)(a1 + 40)];
  uint64_t v22 = [v21 allObjects];
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  void v29[2] = sub_10006AEEC;
  v29[3] = &unk_1002D4F88;
  id v30 = v25;
  id v23 = v25;
  [v20 getProfilesForPlayerIDs:v22 handler:v29];
}

uint64_t sub_10006AEEC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10006AEFC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"skipCallbacks"];
  if (v2)
  {
  }
  else if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    id v3 = +[GKNetworkRequestManager commonNetworkRequestManager];
    uint64_t v19 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    id v4 = +[NSArray arrayWithObjects:&v19 count:1];
    id v5 = [v3 retrieveAndClearCallbacks:@"gk-get-game-achievements" parameters:v4];

    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v6 = v5;
    id v7 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v15;
      do
      {
        id v10 = 0;
        do
        {
          if (*(void *)v15 != v9) {
            objc_enumerationMutation(v6);
          }
          uint64_t v11 = *(void *)(*((void *)&v14 + 1) + 8 * (void)v10);
          double v12 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
          id v13 = [*(id *)(a1 + 32) error:v14];
          (*(void (**)(uint64_t, void *, double))(v11 + 16))(v11, v13, v12);

          id v10 = (char *)v10 + 1;
        }
        while (v8 != v10);
        id v8 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }
      while (v8);
    }
  }
}

void sub_10006BC60(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  void v14[2] = sub_10006BD6C;
  void v14[3] = &unk_1002D6E78;
  id v9 = *(id *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void **)(a1 + 40);
  id v15 = v9;
  uint64_t v16 = v10;
  id v17 = v11;
  id v18 = v5;
  id v19 = *(id *)(a1 + 56);
  id v20 = v6;
  id v12 = v6;
  id v13 = v5;
  [v7 fetchAchievementDescriptionsForGameDescriptor:v8 context:v13 handler:v14];
}

void sub_10006BD6C(uint64_t a1, void *a2, void *a3, int a4, char a5)
{
  id v9 = a2;
  id v10 = a3;
  [*(id *)(a1 + 32) setObject:v9 forKeyedSubscript:@"results"];
  if (!a4 || (a5 & 1) == 0)
  {
    uint64_t v11 = *(void **)(a1 + 32);
    id v12 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKGameStatService.m", 809, "-[GKGameStatService getAchievementDescriptionsForGameDescriptor:handler:]_block_invoke_2");
    id v13 = [v11 transactionGroupWithName:v12];

    v34[0] = 0;
    v34[1] = v34;
    _OWORD v34[2] = 0x2020000000;
    char v35 = 0;
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    void v29[2] = sub_10006C034;
    v29[3] = &unk_1002D4378;
    long long v14 = *(void **)(a1 + 48);
    void v29[4] = *(void *)(a1 + 40);
    id v30 = v14;
    id v31 = *(id *)(a1 + 56);
    long long v33 = v34;
    id v15 = v13;
    id v32 = v15;
    [v15 perform:v29];
    if (a5)
    {
      uint64_t v16 = *(void *)(a1 + 64);
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472;
      void v21[2] = sub_10006C3E0;
      v21[3] = &unk_1002D6B58;
      void v21[4] = *(void *)(a1 + 40);
      void v21[5] = v34;
      [v15 notifyOnQueue:v16 block:v21];
    }
    else
    {
      id v17 = *(void **)(a1 + 32);
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      void v22[2] = sub_10006C17C;
      v22[3] = &unk_1002D6E50;
      id v23 = v15;
      id v24 = *(id *)(a1 + 64);
      id v18 = *(id *)(a1 + 32);
      uint64_t v19 = *(void *)(a1 + 40);
      id v20 = *(void **)(a1 + 48);
      id v25 = v18;
      uint64_t v26 = v19;
      id v27 = v20;
      id v28 = *(id *)(a1 + 56);
      [v17 perform:v22];
    }
    _Block_object_dispose(v34, 8);
  }
  (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
}

void sub_10006C01C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_10006C034(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)a1[4];
  uint64_t v5 = a1[5];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_10006C100;
  v9[3] = &unk_1002D6E28;
  uint64_t v7 = a1[6];
  id v6 = (void *)a1[7];
  uint64_t v12 = a1[8];
  id v10 = v6;
  id v11 = v3;
  id v8 = v3;
  [v4 loadAchievementDescriptionsForGameDescriptor:v5 context:v7 handler:v9];
}

void sub_10006C100(void *a1, void *a2, double a3)
{
  BOOL v5 = a3 > 0.0 && a2 == 0;
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = v5;
  id v6 = (void *)a1[4];
  id v7 = a2;
  [v6 setError:v7];
  (*(void (**)(void))(a1[5] + 16))();
}

void sub_10006C17C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_10006C270;
  v10[3] = &unk_1002D6CE8;
  id v11 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 56);
  id v8 = *(void **)(a1 + 64);
  id v12 = v6;
  uint64_t v13 = v7;
  id v14 = v8;
  id v15 = *(id *)(a1 + 72);
  id v16 = v3;
  id v9 = v3;
  [v4 notifyOnQueue:v5 block:v10];
}

void sub_10006C270(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 40) error];
  [*(id *)(a1 + 32) setError:v2];

  id v3 = [*(id *)(a1 + 40) error];

  if (v3)
  {
    id v4 = *(void (**)(void))(*(void *)(a1 + 72) + 16);
    v4();
  }
  else
  {
    uint64_t v5 = *(void **)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10006C390;
    void v8[3] = &unk_1002D60B8;
    id v9 = *(id *)(a1 + 32);
    id v10 = *(id *)(a1 + 72);
    [v5 fetchAchievementDescriptionsForGameDescriptor:v6 context:v7 handler:v8];
  }
}

uint64_t sub_10006C390(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setObject:a2 forKeyedSubscript:@"results"];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_10006C3E0(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    id v1 = [*(id *)(a1 + 32) clientProxy];
    [v1 refreshContentsForDataType:8 userInfo:0];
  }
}

void sub_10006C448(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"results"];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_10006C720(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_10006C738(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(a1 + 32);
  id v8 = *(void **)(a1 + 40);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  void v14[2] = sub_10006C850;
  void v14[3] = &unk_1002D6F30;
  id v15 = v5;
  id v16 = v8;
  id v17 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 32);
  id v18 = v9;
  uint64_t v19 = v11;
  id v20 = v6;
  uint64_t v21 = v10;
  id v12 = v6;
  id v13 = v5;
  [v7 loadAchievementDescriptionsForGameDescriptor:v8 context:v13 handler:v14];
}

void sub_10006C850(uint64_t a1)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_10006C934;
  v9[3] = &unk_1002D6F08;
  uint64_t v2 = *(void **)(a1 + 32);
  id v10 = *(id *)(a1 + 40);
  id v11 = *(id *)(a1 + 32);
  id v12 = *(id *)(a1 + 48);
  id v3 = *(id *)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v5 = *(void *)(a1 + 64);
  id v13 = v3;
  uint64_t v14 = v5;
  uint64_t v15 = v4;
  [v2 performBlockAndWait:v9];
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 72) + 16))(*(void *)(a1 + 72), v6, v7, v8);
}

void sub_10006C934(uint64_t a1)
{
  uint64_t v2 = +[GKGameCacheObject gameForGameDescriptor:*(void *)(a1 + 32) context:*(void *)(a1 + 40)];
  uint64_t v3 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:*(void *)(a1 + 40)];
  uint64_t v29 = (void *)v3;
  if ([*(id *)(a1 + 48) count]) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (v4)
  {
    [*(id *)(a1 + 56) setObject:0 forKeyedSubscript:@"results"];
    [*(id *)(a1 + 56) setObject:0 forKeyedSubscript:@"missingPlayers"];
  }
  else
  {
    if ([*(id *)(a1 + 48) count])
    {
      uint64_t v5 = +[GKPlayerProfileCacheObject playerProfilesWithPlayers:*(void *)(a1 + 48) inManagedObjectContext:*(void *)(a1 + 40)];
    }
    else
    {
      uint64_t v39 = v3;
      uint64_t v5 = +[NSArray arrayWithObjects:&v39 count:1];
    }
    uint64_t v6 = v5;
    id v7 = [v5 count];
    id v28 = +[NSMutableDictionary dictionaryWithCapacity:v7];
    uint64_t v26 = +[NSMutableArray arrayWithCapacity:v7];
    [*(id *)(a1 + 40) refreshObject:v2 mergeChanges:1];
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    id obj = v6;
    id v30 = [obj countByEnumeratingWithState:&v34 objects:v38 count:16];
    if (v30)
    {
      uint64_t v27 = *(void *)v35;
      do
      {
        for (unint64_t i = 0; i != v30; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v35 != v27) {
            objc_enumerationMutation(obj);
          }
          id v9 = *(void **)(*((void *)&v34 + 1) + 8 * i);
          [*(id *)(a1 + 40) refreshObject:v9 mergeChanges:1];
          id v10 = [v9 achievementLists];
          id v11 = +[NSMutableSet setWithSet:v10];

          id v12 = [v2 achievementLists];
          [v11 intersectSet:v12];

          id v31 = v11;
          id v13 = [v11 anyObject];
          uint64_t v14 = v13;
          if (!v13 || [v13 expired])
          {
            *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 0;
            uint64_t v15 = [v9 internalRepresentation];
            [v26 addObject:v15];
          }
          id v16 = [v14 internalRepresentation];
          id v17 = [v16 _gkMapWithBlock:&stru_1002D6EB8];
          id v18 = *(void **)(a1 + 64);
          uint64_t v19 = [v29 playerID];
          id v20 = [v2 bundleID];
          uint64_t v21 = [v18 getFriendsWhoHaveTheseAchievements:v17 playerID:v19 gameBundleID:v20 context:*(void *)(a1 + 40)];

          v32[0] = _NSConcreteStackBlock;
          v32[1] = 3221225472;
          v32[2] = sub_10006CD6C;
          v32[3] = &unk_1002D6EE0;
          id v33 = v16;
          id v22 = v16;
          [v21 enumerateObjectsUsingBlock:v32];
          if (v22) {
            id v23 = v22;
          }
          else {
            id v23 = &__NSArray0__struct;
          }
          id v24 = [v9 playerID];
          [v28 setObject:v23 forKeyedSubscript:v24];
        }
        id v30 = [obj countByEnumeratingWithState:&v34 objects:v38 count:16];
      }
      while (v30);
    }

    [*(id *)(a1 + 56) setObject:v26 forKeyedSubscript:@"missingPlayers"];
    [*(id *)(a1 + 56) setObject:v28 forKeyedSubscript:@"results"];
  }
}

id sub_10006CD64(id a1, GKAchievementInternal *a2, unint64_t a3)
{
  return [(GKAchievementInternal *)a2 identifier];
}

void sub_10006CD6C(uint64_t a1, void *a2, uint64_t a3)
{
  BOOL v4 = *(void **)(a1 + 32);
  id v5 = a2;
  id v6 = [v4 objectAtIndexedSubscript:a3];
  [v6 setFriendsWhoHaveThis:v5];
}

void sub_10006CDDC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"results"];
  id v5 = (id)v3;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v2 + 16))(v2, v3, 1, 0);
  }
  else
  {
    BOOL v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"missingPlayers"];
    (*(void (**)(uint64_t, id, void, void *))(v2 + 16))(v2, v5, 0, v4);
  }
}

void sub_10006D0E8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_10006D100(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  long long v35 = a3;
  id v6 = [*(id *)(a1 + 32) dictionaryForRequest];
  long long v36 = v5;
  id v7 = +[GKGameCacheObject gameForGameDescriptor:v6 context:v5];

  uint64_t v8 = [v7 bundleID];
  long long v34 = v7;
  uint64_t v32 = [v7 gameDescriptor];
  uint64_t v37 = a1;
  id v9 = *(void **)(a1 + 40);
  if (!v9 || ![v9 count])
  {
    id v10 = os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      id v11 = (id)GKOSLoggers();
      id v10 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT)) {
      sub_1000821A8();
    }
  }
  id v12 = +[NSMutableSet set];
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  id v13 = *(id *)(a1 + 40);
  id v14 = [v13 countByEnumeratingWithState:&v46 objects:v55 count:16];
  if (v14)
  {
    id v15 = v14;
    uint64_t v16 = *(void *)v47;
    do
    {
      for (unint64_t i = 0; i != v15; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v47 != v16) {
          objc_enumerationMutation(v13);
        }
        id v18 = *(void **)(*((void *)&v46 + 1) + 8 * i);
        if ([v18 length] && objc_msgSend(v8, "length"))
        {
          v54[0] = @"GKPlayerAchievements";
          v54[1] = v8;
          v54[2] = v18;
          uint64_t v19 = +[NSArray arrayWithObjects:v54 count:3];
          id v20 = +[GKResourceIdentifier resourceIdentifierForKeys:v19];
          [v12 addObject:v20];
        }
        else
        {
          uint64_t v21 = os_log_GKGeneral;
          if (!os_log_GKGeneral)
          {
            id v22 = (id)GKOSLoggers();
            uint64_t v21 = os_log_GKGeneral;
          }
          if (os_log_type_enabled(v21, OS_LOG_TYPE_FAULT))
          {
            uint64_t v23 = *(void *)(v37 + 40);
            *(_DWORD *)buf = 138412546;
            CFStringRef v51 = v8;
            __int16 v52 = 2112;
            uint64_t v53 = v23;
            _os_log_fault_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "================ GameKit - GKGameStatService requested a simulated crash.\nachievementsForPlayersAndGame:players:context:handler: got an invalid playerID from bundleID: %@, playerIDs: %@ ================", buf, 0x16u);
          }
        }
      }
      id v15 = [v13 countByEnumeratingWithState:&v46 objects:v55 count:16];
    }
    while (v15);
  }

  id v24 = *(void **)(v37 + 48);
  id v25 = [*(id *)(v37 + 56) clientProxy];
  uint64_t v26 = [v25 replyQueue];
  v38[0] = _NSConcreteStackBlock;
  v38[1] = 3221225472;
  void v38[2] = sub_10006D4F4;
  v38[3] = &unk_1002D6FA0;
  id v39 = v12;
  id v40 = *(id *)(v37 + 48);
  id v27 = *(id *)(v37 + 64);
  uint64_t v28 = *(void *)(v37 + 56);
  id v41 = v33;
  uint64_t v42 = v28;
  id v43 = v34;
  id v44 = v27;
  uint64_t v45 = *(void *)(v37 + 72);
  id v29 = v34;
  id v30 = v33;
  id v31 = v12;
  [v24 performOnQueue:v26 block:v38];

  v35[2](v35);
}

void sub_10006D4F4(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  BOOL v4 = [*(id *)(a1 + 32) allObjects];
  id v5 = [v4 _gkMapWithBlock:&stru_1002D6F78];
  if ([v5 count])
  {
    id v6 = *(void **)(a1 + 40);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_10006D68C;
    void v12[3] = &unk_1002D6FA0;
    id v13 = v6;
    id v14 = v5;
    id v18 = *(id *)(a1 + 72);
    id v7 = *(id *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 56);
    id v9 = *(void **)(a1 + 64);
    id v15 = v7;
    uint64_t v16 = v8;
    id v10 = v9;
    uint64_t v11 = *(void *)(a1 + 80);
    id v17 = v10;
    uint64_t v19 = v11;
    [v13 perform:v12];
  }
  v3[2](v3);
}

id sub_10006D638(id a1, GKResourceIdentifier *a2, unint64_t a3)
{
  uint64_t v3 = [(GKResourceIdentifier *)a2 keys];
  BOOL v4 = [v3 objectAtIndexedSubscript:2];

  return v4;
}

void sub_10006D68C(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  [*(id *)(a1 + 32) setObject:*(void *)(a1 + 40) forKeyedSubscript:@"playerIDsToLoad"];
  BOOL v4 = +[GKNetworkRequestManager commonNetworkRequestManager];
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = objc_retainBlock(*(id *)(a1 + 72));
  LODWORD(v5) = [v4 doesCallbackListExistFor:@"gk-get-player-achievements" parameters:v5 callback:v6];

  if (v5)
  {
    [*(id *)(a1 + 32) setObject:&off_1002F1FA0 forKeyedSubscript:@"skipCallbacks"];
    v3[2](v3);
  }
  else
  {
    v19[0] = @"game";
    v19[1] = @"requested-player-ids";
    uint64_t v7 = *(void *)(a1 + 40);
    v20[0] = *(void *)(a1 + 48);
    v20[1] = v7;
    uint64_t v8 = +[NSDictionary dictionaryWithObjects:v20 forKeys:v19 count:2];
    id v9 = +[GKNetworkRequestManager commonNetworkRequestManager];
    id v10 = [*(id *)(a1 + 56) clientProxy];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10006D8A0;
    void v13[3] = &unk_1002D56D0;
    id v14 = *(id *)(a1 + 32);
    id v15 = *(id *)(a1 + 40);
    id v11 = *(id *)(a1 + 64);
    uint64_t v12 = *(void *)(a1 + 80);
    id v16 = v11;
    uint64_t v18 = v12;
    id v17 = v3;
    [v9 issueRequest:v8 bagKey:@"gk-get-player-achievements" clientProxy:v10 handler:v13];
  }
}

void sub_10006D8A0(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = v8;
  if (v7 && !v8)
  {
    id v11 = _NSConcreteStackBlock;
    uint64_t v12 = 3221225472;
    id v13 = sub_10006D9B4;
    id v14 = &unk_1002D5078;
    id v10 = *(void **)(a1 + 32);
    id v15 = *(id *)(a1 + 40);
    double v18 = a4;
    id v16 = v7;
    id v17 = *(id *)(a1 + 48);
    [v10 performOnManagedObjectContext:&v11];
  }
  *(double *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = a4;
  [*(id *)(a1 + 32) setError:v9, v11, v12, v13, v14];
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_10006D9B4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v21 = a3;
  id v24 = v5;
  id v20 = +[GKPlayerProfileCacheObject playerProfilesWithPlayerIDs:*(void *)(a1 + 32) inManagedObjectContext:v5];
  uint64_t v23 = [v20 _gkMapDictionaryWithKeyPath:@"playerID"];
  id v25 = +[NSDate dateWithTimeIntervalSinceNow:*(double *)(a1 + 56)];
  id v6 = [*(id *)(a1 + 40) objectForKey:@"results"];
  uint64_t v22 = a1;
  id v7 = [*(id *)(a1 + 48) achievementLists];
  id v8 = [v7 _gkMapDictionaryWithKeyPath:@"player.playerID"];

  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v9 = v6;
  id v10 = [v9 countByEnumeratingWithState:&v26 objects:v32 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = *(void *)v27;
    do
    {
      for (unint64_t i = 0; i != v11; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v27 != v12) {
          objc_enumerationMutation(v9);
        }
        id v14 = *(void **)(*((void *)&v26 + 1) + 8 * i);
        id v15 = [v14 objectForKey:@"player-id"];
        if (v15)
        {
          id v16 = [v8 objectForKeyedSubscript:v15];
          if (!v16)
          {
            id v16 = [(GKCacheObject *)[GKAchievementListCacheObject alloc] initWithManagedObjectContext:v24];
            [(GKAchievementListCacheObject *)v16 setGame:*(void *)(v22 + 48)];
            id v17 = [v23 objectForKeyedSubscript:v15];
            [(GKAchievementListCacheObject *)v16 setPlayer:v17];
          }
          double v18 = [v14 objectForKeyedSubscript:@"achievements"];
          CFStringRef v30 = @"results";
          id v31 = v18;
          uint64_t v19 = +[NSDictionary dictionaryWithObjects:&v31 forKeys:&v30 count:1];
          [(GKAchievementListCacheObject *)v16 updateWithServerRepresentation:v19 expirationDate:v25];
        }
      }
      id v11 = [v9 countByEnumeratingWithState:&v26 objects:v32 count:16];
    }
    while (v11);
  }

  v21[2](v21);
}

void sub_10006DC74(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"skipCallbacks"];

  if (!v2)
  {
    uint64_t v3 = +[GKNetworkRequestManager commonNetworkRequestManager];
    BOOL v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"playerIDsToLoad"];
    id v5 = [v3 retrieveAndClearCallbacks:@"gk-get-player-achievements" parameters:v4];

    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v6 = v5;
    id v7 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v15;
      do
      {
        id v10 = 0;
        do
        {
          if (*(void *)v15 != v9) {
            objc_enumerationMutation(v6);
          }
          uint64_t v11 = *(void *)(*((void *)&v14 + 1) + 8 * (void)v10);
          double v12 = *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
          id v13 = [*(id *)(a1 + 32) error:v14];
          (*(void (**)(uint64_t, void *, double))(v11 + 16))(v11, v13, v12);

          id v10 = (char *)v10 + 1;
        }
        while (v8 != v10);
        id v8 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }
      while (v8);
    }
  }
}

id sub_10006DEC0(id a1, GKPlayerInternal *a2, unint64_t a3)
{
  return [(GKPlayerInternal *)a2 playerID];
}

void sub_10006E124(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_10006E1F0;
  v9[3] = &unk_1002D6090;
  id v10 = *(id *)(a1 + 64);
  id v11 = v3;
  id v8 = v3;
  [v4 loadAchievementsForGameDescriptor:v5 players:v6 context:v7 handler:v9];
}

uint64_t sub_10006E1F0(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setError:a2];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_10006E238(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_10006E318;
  void v6[3] = &unk_1002D6E50;
  id v7 = v2;
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void **)(a1 + 56);
  id v8 = v3;
  uint64_t v9 = v4;
  id v10 = v5;
  id v11 = *(id *)(a1 + 64);
  id v12 = *(id *)(a1 + 72);
  [v7 perform:v6];
}

void sub_10006E318(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 40) error];
  [*(id *)(a1 + 32) setError:v4];

  uint64_t v5 = [*(id *)(a1 + 40) error];

  if (v5)
  {
    v3[2](v3);
  }
  else
  {
    uint64_t v6 = *(void **)(a1 + 48);
    id v7 = [*(id *)(a1 + 56) dictionaryForRequest];
    uint64_t v8 = *(void *)(a1 + 64);
    uint64_t v9 = *(void *)(a1 + 72);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_10006E440;
    v10[3] = &unk_1002D7030;
    id v11 = *(id *)(a1 + 32);
    id v12 = v3;
    [v6 fetchAchievementsForGameDescriptor:v7 players:v8 context:v9 handler:v10];
  }
}

uint64_t sub_10006E440(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setResult:a2];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_10006E754(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_10006E868;
  void v12[3] = &unk_1002D7098;
  void v12[4] = v7;
  uint64_t v9 = *(void *)(a1 + 48);
  id v13 = *(id *)(a1 + 56);
  id v14 = v5;
  id v15 = *(id *)(a1 + 64);
  id v16 = *(id *)(a1 + 48);
  id v17 = v6;
  id v10 = v6;
  id v11 = v5;
  [v7 fetchAchievementsForGameDescriptor:v8 players:v9 context:v11 handler:v12];
}

void sub_10006E868(uint64_t a1, void *a2, char a3, uint64_t a4)
{
  id v7 = a2;
  if ((a3 & 1) == 0) {
    [*(id *)(a1 + 32) primeCacheWithAchievementDescriptions:*(void *)(a1 + 40) context:*(void *)(a1 + 48) gameDescriptor:*(void *)(a1 + 56) players:*(void *)(a1 + 64) missingPlayers:a4];
  }
  uint64_t v8 = [*(id *)(a1 + 32) clientProxy];
  unsigned __int8 v9 = [v8 isDevSigned];

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_10006E950;
  v10[3] = &unk_1002D7070;
  unsigned __int8 v11 = v9;
  [v7 enumerateKeysAndObjectsUsingBlock:v10];
  [*(id *)(a1 + 40) setResult:v7];
  (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
}

id sub_10006E950(uint64_t a1, uint64_t a2, void *a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10006E9C8;
  v4[3] = &unk_1002D7050;
  char v5 = *(unsigned char *)(a1 + 32);
  return [a3 enumerateObjectsUsingBlock:v4];
}

void sub_10006E9C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (!*(unsigned char *)(a1 + 32) && [v3 releaseState] != (id)1)
  {
    char v5 = os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      id v6 = (id)GKOSLoggers();
      char v5 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      sub_100082250();
    }
    [v4 setReleaseState:0];
  }
}

void sub_10006EA5C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_10006ED4C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_10006ED64(uint64_t a1, void *a2)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_10006EE50;
  v9[3] = &unk_1002D70C0;
  id v4 = *(void **)(a1 + 32);
  char v5 = *(void **)(a1 + 48);
  void v9[4] = *(void *)(a1 + 40);
  id v10 = v5;
  id v6 = *(id *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  id v11 = v6;
  uint64_t v13 = v7;
  id v12 = *(id *)(a1 + 32);
  uint64_t v8 = a2;
  [v4 performOnManagedObjectContext:v9];
  v8[2](v8);
}

void sub_10006EE50(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  unint64_t v59 = a3;
  id v6 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:v5];
  uint64_t v7 = [*(id *)(a1 + 32) clientProxy];
  uint64_t v8 = [v7 bundleIdentifier];
  id v60 = v5;
  unsigned __int8 v9 = +[GKGameCacheObject gameForBundleID:v8 context:v5];

  id v10 = [v9 achievementLists];
  id v11 = +[NSMutableSet setWithSet:v10];

  id v58 = v6;
  id v12 = [v6 achievementLists];
  [v11 intersectSet:v12];

  uint64_t v56 = v11;
  uint64_t v13 = [v11 anyObject];
  id v14 = [v13 entries];
  id v15 = [v14 _gkMapDictionaryWithKeyPath:@"identifier"];
  id v16 = +[NSMutableDictionary dictionaryWithDictionary:v15];

  id v17 = [v13 entries];
  double v18 = [v17 _gkMapDictionaryWithKeyPath:@"groupIdentifier"];
  [v16 addEntriesFromDictionary:v18];

  uint64_t v19 = [v9 achievementDescriptionList];
  id v20 = [v19 entries];
  uint64_t v21 = [v20 _gkMapDictionaryWithKeyPath:@"identifier"];
  uint64_t v22 = +[NSMutableDictionary dictionaryWithDictionary:v21];

  char v57 = v9;
  uint64_t v23 = [v9 achievementDescriptionList];
  id v24 = [v23 entries];
  id v25 = [v24 _gkMapDictionaryWithKeyPath:@"groupIdentifier"];
  [v22 addEntriesFromDictionary:v25];

  uint64_t v55 = v13;
  long long v26 = [v13 entries];
  id v61 = [v26 mutableCopy];

  long long v27 = v22;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  id obj = *(id *)(a1 + 40);
  uint64_t v62 = v22;
  id v66 = [obj countByEnumeratingWithState:&v71 objects:v75 count:16];
  if (!v66) {
    goto LABEL_19;
  }
  uint64_t v65 = *(void *)v72;
  do
  {
    for (unint64_t i = 0; i != v66; unint64_t i = (char *)i + 1)
    {
      if (*(void *)v72 != v65) {
        objc_enumerationMutation(obj);
      }
      long long v29 = *(void **)(*((void *)&v71 + 1) + 8 * i);
      CFStringRef v30 = [v29 identifier];
      id v31 = [v16 objectForKey:v30];
      uint64_t v32 = [v27 objectForKey:v30];
      if (v32)
      {
        if (!v31)
        {
          id v31 = [(GKCacheObject *)[GKAchievementCacheObject alloc] initWithManagedObjectContext:v60];
          [v61 addObject:v31];
          id v33 = [v32 identifier];
          [(GKAchievementCacheObject *)v31 setIdentifier:v33];

          long long v34 = [v32 groupIdentifier];
          [(GKAchievementCacheObject *)v31 setGroupIdentifier:v34];
        }
        id v67 = v29;
        long long v35 = [(GKAchievementCacheObject *)v31 identifier];
        long long v36 = [v32 identifier];
        if ([v35 isEqualToString:v36])
        {
          uint64_t v37 = [(GKAchievementCacheObject *)v31 groupIdentifier];
          [v32 groupIdentifier];
          id v38 = v16;
          v40 = uint64_t v39 = a1;
          unsigned __int8 v64 = [v37 isEqualToString:v40];

          a1 = v39;
          id v16 = v38;
          long long v27 = v62;

          if (v64) {
            goto LABEL_14;
          }
        }
        else
        {
        }
        id v41 = [v32 identifier];
        [(GKAchievementCacheObject *)v31 setIdentifier:v41];

        uint64_t v42 = [v32 groupIdentifier];
        [(GKAchievementCacheObject *)v31 setGroupIdentifier:v42];

LABEL_14:
        long long v29 = v67;
      }
      [(GKAchievementCacheObject *)v31 percentComplete];
      double v44 = v43;
      [v29 percentComplete];
      if (v45 > v44)
      {
        [v29 percentComplete];
        *(float *)&double v46 = v46;
        [(GKAchievementCacheObject *)v31 setPercentComplete:v46];
        [(GKAchievementCacheObject *)v31 setLastReportedDate:*(void *)(a1 + 48)];
        *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
      }
    }
    id v66 = [obj countByEnumeratingWithState:&v71 objects:v75 count:16];
  }
  while (v66);
LABEL_19:

  [v55 setEntries:v61];
  if ([*(id *)(a1 + 40) count])
  {
    long long v47 = [GKAchievementNetworkRequest alloc];
    uint64_t v48 = *(void *)(a1 + 40);
    long long v49 = [*(id *)(a1 + 32) clientProxy];
    id v50 = [v49 bundleIdentifier];
    CFStringRef v51 = [(GKAchievementNetworkRequest *)v47 initWithAchievements:v48 bundleID:v50];

    __int16 v52 = +[GKNetworkRequestManager commonNetworkRequestManager];
    uint64_t v53 = [*(id *)(a1 + 32) clientProxy];
    v68[0] = _NSConcreteStackBlock;
    v68[1] = 3221225472;
    v68[2] = sub_10006F4C8;
    v68[3] = &unk_1002D3BC8;
    id v69 = *(id *)(a1 + 56);
    uint64_t v54 = v59;
    long long v70 = v59;
    [v52 writeToNetwork:v51 clientProxy:v53 handler:v68];

    long long v27 = v62;
  }
  else
  {
    uint64_t v54 = v59;
    v59[2](v59);
  }
}

uint64_t sub_10006F4C8(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setError:a2];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_10006F510(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
  {
    uint64_t v2 = [*(id *)(a1 + 32) clientProxy];
    [v2 refreshContentsForDataType:8 userInfo:0];
  }
  uint64_t v3 = *(void *)(a1 + 56);
  id v4 = [*(id *)(a1 + 40) error];
  (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v4);

  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v5 = *(id *)(a1 + 48);
  id v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v13;
    do
    {
      for (unint64_t i = 0; i != v7; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void *)(*((void *)&v12 + 1) + 8 * i);
        id v11 = +[GKBiomeManager shared];
        [v11 logEarnedWithAchievement:v10];
      }
      id v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v7);
  }
}

void sub_10006F838(uint64_t a1, void *a2)
{
  id v4 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10006F8F4;
  void v8[3] = &unk_1002D4078;
  id v5 = v4;
  uint64_t v6 = *(void *)(a1 + 40);
  id v9 = v5;
  uint64_t v10 = v6;
  id v7 = a2;
  [v5 performOnManagedObjectContext:v8];
  v7[2](v7);
}

void sub_10006F8F4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  id v7 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:v5];
  if (v7)
  {
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    void v21[2] = sub_10006FB60;
    v21[3] = &unk_1002D3A70;
    int8x16_t v18 = *(int8x16_t *)(a1 + 32);
    int8x16_t v22 = vextq_s8(v18, v18, 8uLL);
    [(id)v18.i64[0] perform:v21];
    uint64_t v8 = [*(id *)(a1 + 40) clientProxy];
    id v9 = [v8 bundleIdentifier];
    uint64_t v10 = +[GKGameCacheObject gameForBundleID:v9 context:v5];

    [v7 expire];
    id v11 = +[GKGameRecordCacheObject recordForGame:v10 playerProfile:v7];
    [v11 expire];
    long long v12 = +[NSPredicate predicateWithFormat:@"game = %@ AND player = %@", v10, v7];
    +[GKCacheObject deleteObjectsMatchingPredicate:v12 context:v5];

    long long v13 = +[GKClientProxy gameCenterClient];
    long long v14 = *(void **)(a1 + 32);
    long long v15 = [v13 replyQueue];
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    void v19[2] = sub_10006FC90;
    void v19[3] = &unk_1002D40E0;
    id v20 = v13;
    id v16 = v13;
    [v14 notifyOnQueue:v15 block:v19];
  }
  else
  {
    id v17 = +[NSError gkUnauthenticatedError];
    [*(id *)(a1 + 32) setError:v17];
  }
  v6[2](v6);
}

void sub_10006FB60(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[GKNetworkRequestManager commonNetworkRequestManager];
  id v5 = [*(id *)(a1 + 32) clientProxy];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_10006FC4C;
  void v7[3] = &unk_1002D50A0;
  id v8 = *(id *)(a1 + 40);
  id v9 = v3;
  id v6 = v3;
  [v4 issueRequest:0 bagKey:@"gk-reset-achievements" clientProxy:v5 handler:v7];
}

uint64_t sub_10006FC4C(uint64_t a1)
{
  [*(id *)(a1 + 32) setError:];
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v2();
}

id sub_10006FC90(uint64_t a1)
{
  return [*(id *)(a1 + 32) refreshContentsForDataType:8 userInfo:0];
}

void sub_10006FCA0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10006FF2C(uint64_t a1, void *a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10006FFF8;
  void v8[3] = &unk_1002D3980;
  id v4 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  id v9 = v5;
  uint64_t v10 = v6;
  id v11 = *(id *)(a1 + 32);
  id v7 = a2;
  [v4 perform:v8];
  v7[2](v7);
}

void sub_10006FFF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = [*(id *)(a1 + 48) context];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000700D0;
  void v8[3] = &unk_1002D7110;
  id v9 = *(id *)(a1 + 48);
  id v10 = v3;
  id v7 = v3;
  [v4 loadScoresWithService:v5 context:v6 handler:v8];
}

uint64_t sub_1000700D0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setObject:a2 forKeyedSubscript:@"result"];
  [*(id *)(a1 + 32) setError:v6];

  id v7 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v7();
}

void sub_100070148(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"result"];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_100070490(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [GKScoreNetworkRequest alloc];
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = [*(id *)(a1 + 40) clientProxy];
  id v7 = [v6 bundleIdentifier];
  id v8 = [(GKScoreNetworkRequest *)v4 initWithScores:v5 bundleID:v7 eligibleChallenges:*(void *)(a1 + 48)];

  id v9 = +[GKNetworkRequestManager commonNetworkRequestManager];
  id v10 = [*(id *)(a1 + 40) clientProxy];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_1000705CC;
  void v12[3] = &unk_1002D3BC8;
  id v13 = *(id *)(a1 + 56);
  id v14 = v3;
  id v11 = v3;
  [v9 writeToNetwork:v8 clientProxy:v10 handler:v12];
}

uint64_t sub_1000705CC(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setError:a2];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_100070614(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100070A64(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) bundleIdentifier];
  uint64_t v4 = [*(id *)(a1 + 48) playerID];
  uint64_t v5 = (void *)v4;
  if (v2) {
    +[NSPredicate predicateWithFormat:@"game.bundleID = %@ AND player.playerID = %@ AND set.identifier = %@", v3, v4, *(void *)(a1 + 32)];
  }
  else {
  id v6 = +[NSPredicate predicateWithFormat:@"game.bundleID = %@ AND player.playerID = %@ AND set.identifier = nil", v3, v4, v16];
  }

  id v7 = +[GKCacheObject firstObjectMatchingPredicate:v6 context:*(void *)(a1 + 56)];
  id v17 = [v7 internalRepresentation];
  if (*(void *)(a1 + 32))
  {
    id v8 = [*(id *)(a1 + 40) dictionaryForRequest];
    id v9 = +[GKGameCacheObject gameForGameDescriptor:v8 context:*(void *)(a1 + 56)];

    id v10 = [v9 leaderboardSetWithIdentifier:*(void *)(a1 + 32)];
    [*(id *)(a1 + 64) cleanUpLeaderboardTitles:v17 set:v10 context:*(void *)(a1 + 56)];
  }
  id v11 = [v7 isValid];
  if (v11)
  {
    uint64_t v12 = [v7 expired] ^ 1;
    id v13 = [v7 game];
    if ([v13 numberOfCategories])
    {
      id v14 = [v17 count];

      if (v14) {
        uint64_t v12 = v12;
      }
      else {
        uint64_t v12 = 0;
      }
    }
    else
    {
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v15 = *(void *)(a1 + 72);
  if (v15) {
    (*(void (**)(uint64_t, id, uint64_t, id))(v15 + 16))(v15, v17, v12, v11);
  }
}

void sub_100070FC8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_100070FE0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v5 = [*(id *)(a1 + 32) dictionaryForRequest];
  [v4 setObject:v5 forKeyedSubscript:@"game"];

  id v6 = [*(id *)(a1 + 40) playerID];
  [v4 setObject:v6 forKeyedSubscript:@"player-id"];

  uint64_t v7 = *(void *)(a1 + 48);
  if (v7) {
    [v4 setObject:v7 forKeyedSubscript:@"set-name"];
  }
  id v8 = +[GKNetworkRequestManager commonNetworkRequestManager];
  uint64_t v9 = *(void *)(a1 + 56);
  id v10 = [*(id *)(a1 + 64) clientProxy];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_1000711A4;
  void v12[3] = &unk_1002D7138;
  uint64_t v19 = *(void *)(a1 + 88);
  id v13 = *(id *)(a1 + 72);
  id v14 = *(id *)(a1 + 80);
  id v15 = *(id *)(a1 + 32);
  id v16 = *(id *)(a1 + 40);
  id v17 = *(id *)(a1 + 48);
  id v18 = v3;
  id v11 = v3;
  [v8 issueRequest:v4 bagKey:v9 clientProxy:v10 handler:v12];
}

void sub_1000711A4(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7 = a2;
  *(double *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = a4;
  [*(id *)(a1 + 32) setError:a3];
  if (v7 && !a3)
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_1000712D4;
    void v12[3] = &unk_1002D68A8;
    double v18 = a4;
    id v11 = *(void **)(a1 + 40);
    id v13 = *(id *)(a1 + 48);
    id v14 = *(id *)(a1 + 40);
    id v15 = *(id *)(a1 + 56);
    id v16 = *(id *)(a1 + 64);
    id v17 = v7;
    [v11 performBlockAndWait:v12];
  }
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 72) + 16))(*(void *)(a1 + 72), v8, v9, v10);
}

void sub_1000712D4(uint64_t a1)
{
  uint64_t v2 = +[NSDate dateWithTimeIntervalSinceNow:*(double *)(a1 + 72)];
  id v3 = [*(id *)(a1 + 32) dictionaryForRequest];
  id v4 = +[GKGameCacheObject gameForGameDescriptor:v3 context:*(void *)(a1 + 40)];

  uint64_t v5 = [*(id *)(a1 + 48) playerID];
  uint64_t v6 = +[GKPlayerProfileCacheObject playerProfileWithPlayerID:v5 inManagedObjectContext:*(void *)(a1 + 40)];

  uint64_t v7 = [v4 leaderboardSetWithIdentifier:*(void *)(a1 + 56)];
  uint64_t v8 = [v4 defaultCategory];

  if (!v8)
  {
    uint64_t v9 = [*(id *)(a1 + 64) objectForKey:@"default-category-name"];
    [v4 setDefaultCategory:v9];
  }
  uint64_t v10 = [(GKCacheObject *)[GKLeaderboardListCacheObject alloc] initWithManagedObjectContext:*(void *)(a1 + 40)];
  long long v34 = v4;
  [(GKLeaderboardListCacheObject *)v10 setGame:v4];
  id v33 = (void *)v6;
  [(GKLeaderboardListCacheObject *)v10 setPlayer:v6];
  CFStringRef v30 = (void *)v7;
  [(GKLeaderboardListCacheObject *)v10 setSet:v7];
  id v31 = (void *)v2;
  uint64_t v32 = v10;
  [(GKLeaderboardListCacheObject *)v10 updateWithServerRepresentation:*(void *)(a1 + 64) expirationDate:v2];
  id v11 = objc_alloc_init((Class)NSMutableDictionary);
  [*(id *)(a1 + 64) objectForKeyedSubscript:@"results"];
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue();
  id v12 = [obj countByEnumeratingWithState:&v42 objects:v47 count:16];
  if (v12)
  {
    id v13 = v12;
    uint64_t v14 = *(void *)v43;
    do
    {
      for (unint64_t i = 0; i != v13; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v43 != v14) {
          objc_enumerationMutation(obj);
        }
        id v16 = *(void **)(*((void *)&v42 + 1) + 8 * i);
        id v17 = [v16 objectForKeyedSubscript:@"global-alltime-info"];
        if (!v17) {
          id v17 = v16;
        }
        double v18 = [v17 objectForKeyedSubscript:@"base-leaderboard-id"];
        if (!v18)
        {
          double v18 = [v17 objectForKeyedSubscript:@"category-name"];
        }
        [v11 setObject:v16 forKeyedSubscript:v18];
      }
      id v13 = [obj countByEnumeratingWithState:&v42 objects:v47 count:16];
    }
    while (v13);
  }
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  id v35 = [(GKLeaderboardListCacheObject *)v10 entries];
  id v19 = [v35 countByEnumeratingWithState:&v38 objects:v46 count:16];
  if (v19)
  {
    id v20 = v19;
    uint64_t v37 = *(void *)v39;
    do
    {
      for (j = 0; j != v20; j = (char *)j + 1)
      {
        if (*(void *)v39 != v37) {
          objc_enumerationMutation(v35);
        }
        int8x16_t v22 = *(void **)(*((void *)&v38 + 1) + 8 * (void)j);
        uint64_t v23 = [*(id *)(a1 + 32) bundleIdentifier];
        id v24 = [*(id *)(a1 + 48) playerID];
        id v25 = [v22 baseLeaderboardID];
        long long v26 = +[NSPredicate predicateWithFormat:@"game.bundleID = %@ AND player.playerID = %@ AND baseLeaderboardID = %@ AND isPrimary == YES", v23, v24, v25];

        long long v27 = +[GKCacheObject firstObjectMatchingPredicate:v26 context:*(void *)(a1 + 40)];
        if (!v27)
        {
          long long v27 = [(GKCacheObject *)[GKLeaderboardCacheObject alloc] initWithManagedObjectContext:*(void *)(a1 + 40)];
          [(GKLeaderboardCacheObject *)v27 setGame:v34];
          [(GKLeaderboardCacheObject *)v27 setPlayer:v33];
        }
        long long v28 = [v22 baseLeaderboardID];
        long long v29 = [v11 objectForKeyedSubscript:v28];
        [(GKLeaderboardCacheObject *)v27 updateWithServerRepresentation:v29];

        [v22 setLeaderboard:v27];
      }
      id v20 = [v35 countByEnumeratingWithState:&v38 objects:v46 count:16];
    }
    while (v20);
  }
}

void sub_100071754(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  double v2 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, double))(v1 + 16))(v1, v3, v2);
}

void sub_100071CE8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_100071D00(uint64_t a1)
{
  double v2 = [*(id *)(a1 + 32) context];
  id v6 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:v2];

  uint64_t v3 = [v6 internalRepresentationWithPieces:0];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_100071D98(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError userErrorForCode:6 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_100071E08(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError userErrorForCode:17 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_100071E78(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  if (*(void *)(a1 + 32) && (uint64_t v4 = *(void **)(a1 + 40)) != 0)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    void v7[2] = sub_100071FBC;
    void v7[3] = &unk_1002D6E50;
    uint64_t v5 = *(void **)(a1 + 48);
    void v7[4] = *(void *)(a1 + 56);
    id v8 = v4;
    id v9 = *(id *)(a1 + 32);
    id v10 = *(id *)(a1 + 64);
    id v11 = *(id *)(a1 + 48);
    id v12 = *(id *)(a1 + 72);
    [v5 perform:v7];
    v3[2](v3);
  }
  else
  {
    id v6 = +[NSError userErrorForCode:17 underlyingError:0];
    [*(id *)(a1 + 48) setError:v6];
  }
}

void sub_100071FBC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  id v8 = [*(id *)(a1 + 64) context];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1000720F8;
  void v13[3] = &unk_1002D7228;
  id v9 = *(id *)(a1 + 64);
  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = *(void **)(a1 + 40);
  id v14 = v9;
  uint64_t v15 = v10;
  id v16 = v11;
  id v17 = *(id *)(a1 + 48);
  id v18 = *(id *)(a1 + 56);
  id v19 = *(id *)(a1 + 72);
  id v20 = v3;
  id v12 = v3;
  [v4 fetchLeaderboardsForGameDescriptor:v5 player:v6 setIdentifier:v7 context:v8 handler:v13];
}

void sub_1000720F8(uint64_t a1, void *a2, char a3, char a4)
{
  id v7 = a2;
  if ((a3 & 1) == 0)
  {
    v35[0] = 0;
    v35[1] = v35;
    v35[2] = 0x2020000000;
    char v36 = 0;
    id v8 = *(void **)(a1 + 32);
    id v9 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKGameStatService.m", 1545, "-[GKGameStatService getLeaderboardsForGameDescriptor:player:setIdentifier:handler:]_block_invoke_4");
    uint64_t v10 = [v8 transactionGroupWithName:v9];

    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    void v28[2] = sub_1000723F8;
    v28[3] = &unk_1002D71B0;
    id v11 = *(void **)(a1 + 48);
    void v28[4] = *(void *)(a1 + 40);
    id v29 = v11;
    id v30 = *(id *)(a1 + 56);
    id v31 = *(id *)(a1 + 64);
    id v32 = *(id *)(a1 + 32);
    id v12 = v10;
    id v33 = v12;
    long long v34 = v35;
    [v12 perform:v28];
    if (a4)
    {
      uint64_t v13 = *(void *)(a1 + 72);
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      void v19[2] = sub_10007283C;
      void v19[3] = &unk_1002D6B58;
      void v19[4] = *(void *)(a1 + 40);
      void v19[5] = v35;
      [v12 notifyOnQueue:v13 block:v19];
    }
    else
    {
      id v14 = *(void **)(a1 + 32);
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      void v20[2] = sub_100072580;
      v20[3] = &unk_1002D7200;
      id v21 = v12;
      id v22 = *(id *)(a1 + 72);
      id v15 = *(id *)(a1 + 32);
      uint64_t v16 = *(void *)(a1 + 40);
      id v17 = *(void **)(a1 + 48);
      id v23 = v15;
      uint64_t v24 = v16;
      id v25 = v17;
      id v26 = *(id *)(a1 + 56);
      id v27 = *(id *)(a1 + 64);
      [v14 perform:v20];
    }
    _Block_object_dispose(v35, 8);
  }
  id v18 = [*(id *)(a1 + 40) updateSigningStatusIfChanged:v7];
  [*(id *)(a1 + 32) setObject:v18 forKeyedSubscript:@"leaderboards"];

  (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
}

void sub_1000723E0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1000723F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  id v8 = [*(id *)(a1 + 64) context];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_1000724F4;
  void v12[3] = &unk_1002D7188;
  id v9 = *(id *)(a1 + 72);
  uint64_t v10 = *(void *)(a1 + 80);
  id v14 = v3;
  uint64_t v15 = v10;
  id v13 = v9;
  id v11 = v3;
  [v4 loadLeaderboardsForGameDescriptor:v5 player:v6 setIdentifier:v7 context:v8 bagKey:@"gk-get-leaderboard-categories" handler:v12];
}

void sub_1000724F4(void *a1, void *a2, double a3)
{
  uint64_t v5 = (void *)a1[4];
  id v8 = a2;
  [v5 setError:v8];
  BOOL v7 = a3 > 0.0 && v8 == 0;
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = v7;
  (*(void (**)(void))(a1[5] + 16))();
}

void sub_100072580(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_100072688;
  v10[3] = &unk_1002D4950;
  id v11 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 56);
  id v8 = *(void **)(a1 + 64);
  id v12 = v6;
  uint64_t v13 = v7;
  id v14 = v8;
  id v15 = *(id *)(a1 + 72);
  id v16 = *(id *)(a1 + 80);
  id v17 = v3;
  id v9 = v3;
  [v4 notifyOnQueue:v5 block:v10];
}

void sub_100072688(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 40) error];
  [*(id *)(a1 + 32) setError:v2];

  id v3 = [*(id *)(a1 + 40) error];

  if (v3)
  {
    uint64_t v4 = *(void (**)(void))(*(void *)(a1 + 80) + 16);
    v4();
  }
  else
  {
    uint64_t v5 = *(void **)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 72);
    id v9 = [*(id *)(a1 + 32) context];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_1000727D4;
    void v12[3] = &unk_1002D71D8;
    id v10 = *(id *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 48);
    id v13 = v10;
    uint64_t v14 = v11;
    id v15 = *(id *)(a1 + 80);
    [v5 fetchLeaderboardsForGameDescriptor:v6 player:v7 setIdentifier:v8 context:v9 handler:v12];
  }
}

uint64_t sub_1000727D4(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 40) updateSigningStatusIfChanged:a2];
  [*(id *)(a1 + 32) setObject:v3 forKeyedSubscript:@"leaderboards"];

  uint64_t v4 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);

  return v4();
}

void sub_10007283C(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    uint64_t v1 = [*(id *)(a1 + 32) clientProxy];
    CFStringRef v4 = @"scroll";
    id v2 = +[NSNumber numberWithBool:0];
    uint64_t v5 = v2;
    id v3 = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];
    [v1 refreshContentsForDataType:9 userInfo:v3];
  }
}

void sub_100072918(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"leaderboards"];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_100072B7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v17[0] = @"timestamp";
  uint64_t v4 = +[NSDate _gkServerTimestamp];
  uint64_t v5 = (void *)v4;
  v17[1] = @"category";
  CFStringRef v6 = *(const __CFString **)(a1 + 32);
  if (!v6) {
    CFStringRef v6 = &stru_1002E4F58;
  }
  v18[0] = v4;
  v18[1] = v6;
  uint64_t v7 = +[NSDictionary dictionaryWithObjects:v18 forKeys:v17 count:2];

  uint64_t v8 = +[GKNetworkRequestManager commonNetworkRequestManager];
  id v9 = [*(id *)(a1 + 40) clientProxy];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100072D30;
  void v13[3] = &unk_1002D5D48;
  id v14 = *(id *)(a1 + 48);
  int8x16_t v12 = *(int8x16_t *)(a1 + 32);
  id v10 = (id)v12.i64[0];
  int8x16_t v15 = vextq_s8(v12, v12, 8uLL);
  id v16 = v3;
  id v11 = v3;
  [v8 issueRequest:v7 bagKey:@"gk-set-default-leaderboard" clientProxy:v9 handler:v13];
}

void sub_100072D30(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (!v4)
  {
    uint64_t v5 = [*(id *)(a1 + 32) context];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100072E28;
    void v8[3] = &unk_1002D4888;
    int8x16_t v7 = *(int8x16_t *)(a1 + 32);
    id v6 = (id)v7.i64[0];
    int8x16_t v9 = vextq_s8(v7, v7, 8uLL);
    id v10 = *(id *)(a1 + 48);
    [v5 performBlockAndWait:v8];
  }
  [*(id *)(a1 + 32) setError:v4, *(_OWORD *)&v7];
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_100072E28(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) clientProxy];
  id v3 = [v2 gameDescriptor];
  id v4 = [*(id *)(a1 + 40) context];
  id v8 = +[GKGameCacheObject gameForGameDescriptor:v3 context:v4];

  uint64_t v5 = [*(id *)(a1 + 40) context];
  id v6 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:v5];

  int8x16_t v7 = +[GKGameRecordCacheObject recordForGame:v8 playerProfile:v6];
  [v7 setDefaultLeaderboardIdentifier:*(void *)(a1 + 48)];
}

void sub_100072F28(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1000730C4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v10 = a3;
  uint64_t v5 = [a2 lastObject];
  uint64_t v6 = [v5 defaultLeaderboardIdentifier];
  uint64_t v7 = v10 | v6;

  if (!v7)
  {
    uint64_t v10 = +[NSError userErrorForCode:16 underlyingError:0];
  }
  uint64_t v8 = *(void *)(a1 + 32);
  int8x16_t v9 = [v5 defaultLeaderboardIdentifier];
  (*(void (**)(uint64_t, void *, uint64_t))(v8 + 16))(v8, v9, v10);
}

void sub_1000733C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) context];
  id v4 = +[GKGameCacheObject gameForGameDescriptor:v2 context:v3];

  uint64_t v5 = [v4 leaderboardSetList];
  unsigned int v6 = [v5 isValid];
  char v7 = v6;
  if (!v6) {
    goto LABEL_3;
  }
  uint64_t v8 = [v5 internalRepresentation];
  [*(id *)(a1 + 40) setObject:v8 forKeyedSubscript:@"sets"];

  int8x16_t v9 = [v5 expirationDate];
  [v9 timeIntervalSinceNow];
  double v11 = v10;

  if (v11 <= 0.0)
  {
LABEL_3:
    int8x16_t v12 = *(void **)(a1 + 40);
    id v13 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKGameStatService.m", 1669, "-[GKGameStatService getLeaderboardSetsForGameDescriptor:handler:]_block_invoke");
    id v14 = [v12 transactionGroupWithName:v13];

    uint64_t v15 = *(void *)(a1 + 32);
    CFStringRef v31 = @"game";
    uint64_t v32 = v15;
    +[NSDictionary dictionaryWithObjects:&v32 forKeys:&v31 count:1];
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_10007367C;
    void v25[3] = &unk_1002D55A8;
    id v16 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v17 = *(void *)(a1 + 48);
    id v26 = v16;
    uint64_t v27 = v17;
    id v18 = v14;
    id v28 = v18;
    id v29 = v4;
    char v30 = v7;
    [v18 perform:v25];
    if ((v7 & 1) == 0)
    {
      id v19 = *(void **)(a1 + 40);
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      void v22[2] = sub_1000739A8;
      v22[3] = &unk_1002D3980;
      id v23 = v18;
      int8x16_t v21 = *(int8x16_t *)(a1 + 40);
      id v20 = (id)v21.i64[0];
      int8x16_t v24 = vextq_s8(v21, v21, 8uLL);
      [v19 perform:v22];
    }
  }
}

void sub_10007367C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[GKNetworkRequestManager commonNetworkRequestManager];
  uint64_t v5 = *(void *)(a1 + 32);
  unsigned int v6 = [*(id *)(a1 + 40) clientProxy];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_10007378C;
  v9[3] = &unk_1002D3F90;
  id v10 = *(id *)(a1 + 48);
  id v7 = *(id *)(a1 + 56);
  char v13 = *(unsigned char *)(a1 + 64);
  id v11 = v7;
  id v12 = v3;
  id v8 = v3;
  [v4 issueRequest:v5 bagKey:@"gk-get-leaderboard-sets" clientProxy:v6 handler:v9];
}

void sub_10007378C(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7 = a2;
  id v8 = a3;
  int8x16_t v9 = v8;
  if (v7 && !v8)
  {
    id v10 = [*(id *)(a1 + 32) context];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    void v11[2] = sub_1000738B0;
    v11[3] = &unk_1002D7250;
    id v12 = *(id *)(a1 + 40);
    double v15 = a4;
    id v13 = *(id *)(a1 + 32);
    id v14 = v7;
    char v16 = *(unsigned char *)(a1 + 56);
    [v10 performBlockAndWait:v11];
  }
  [*(id *)(a1 + 32) setError:v9];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1000738B0(uint64_t a1)
{
  unsigned int v6 = [*(id *)(a1 + 32) leaderboardSetList];
  uint64_t v2 = +[NSDate dateWithTimeIntervalSinceNow:*(double *)(a1 + 56)];
  if (!v6)
  {
    id v3 = [GKLeaderboardSetListCacheObject alloc];
    id v4 = [*(id *)(a1 + 40) context];
    unsigned int v6 = [(GKCacheObject *)v3 initWithManagedObjectContext:v4];

    [*(id *)(a1 + 32) setLeaderboardSetList:v6];
  }
  [(GKLeaderboardSetListCacheObject *)v6 updateWithServerRepresentation:*(void *)(a1 + 48) expirationDate:v2];
  if (!*(unsigned char *)(a1 + 64))
  {
    uint64_t v5 = [(GKListCacheObject *)v6 internalRepresentation];
    [*(id *)(a1 + 40) setObject:v5 forKeyedSubscript:@"sets"];
  }
}

void sub_1000739A8(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1[4];
  uint64_t v5 = [a1[5] clientProxy];
  unsigned int v6 = [v5 replyQueue];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100073A9C;
  void v8[3] = &unk_1002D3A48;
  id v9 = a1[6];
  id v10 = a1[4];
  id v11 = v3;
  id v7 = v3;
  [v4 notifyOnQueue:v6 block:v8];
}

uint64_t sub_100073A9C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"sets"];
  [*(id *)(a1 + 32) setObject:v2 forKeyedSubscript:@"sets"];

  id v3 = [*(id *)(a1 + 40) error];
  [*(id *)(a1 + 32) setError:v3];

  id v4 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);

  return v4();
}

void sub_100073B30(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"sets"];
    id v3 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, id, void *))(v1 + 16))(v1, v4, v3);
  }
}

void sub_100073F28(uint64_t a1, void *a2)
{
  id v3 = a2;
  v17[0] = @"game";
  id v4 = [*(id *)(a1 + 32) dictionaryForRequest];
  v18[0] = v4;
  v17[1] = @"player-id";
  uint64_t v5 = [*(id *)(a1 + 40) playerID];
  void v17[2] = @"base-leaderboard-ids";
  uint64_t v6 = *(void *)(a1 + 48);
  v18[1] = v5;
  void v18[2] = v6;
  id v7 = +[NSDictionary dictionaryWithObjects:v18 forKeys:v17 count:3];

  id v8 = +[GKNetworkRequestManager commonNetworkRequestManager];
  id v9 = [*(id *)(a1 + 56) clientProxy];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_100074100;
  v11[3] = &unk_1002D7278;
  id v12 = *(id *)(a1 + 64);
  id v13 = *(id *)(a1 + 72);
  id v14 = *(id *)(a1 + 32);
  id v15 = *(id *)(a1 + 40);
  id v16 = v3;
  id v10 = v3;
  [v8 issueRequest:v7 bagKey:@"gk-get-leaderboards" clientProxy:v9 handler:v11];
}

void sub_100074100(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [*(id *)(a1 + 32) setError:a3];
  if (v5 && !a3)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    void v7[2] = sub_100074214;
    void v7[3] = &unk_1002D4328;
    uint64_t v6 = *(void **)(a1 + 40);
    id v8 = *(id *)(a1 + 48);
    id v9 = *(id *)(a1 + 40);
    id v10 = *(id *)(a1 + 56);
    id v11 = v5;
    id v12 = *(id *)(a1 + 32);
    [v6 performBlockAndWait:v7];
  }
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_100074214(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) dictionaryForRequest];
  id v18 = +[GKGameCacheObject gameForGameDescriptor:v2 context:*(void *)(a1 + 40)];

  id v3 = [*(id *)(a1 + 48) playerID];
  uint64_t v17 = +[GKPlayerProfileCacheObject playerProfileWithPlayerID:v3 inManagedObjectContext:*(void *)(a1 + 40)];

  id v4 = [*(id *)(a1 + 56) objectForKeyedSubscript:@"results"];
  id v5 = [objc_alloc((Class)NSMutableArray) initWithCapacity:[v4 count]];
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id obj = v4;
  id v6 = [obj countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v21;
    do
    {
      for (unint64_t i = 0; i != v7; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v21 != v8) {
          objc_enumerationMutation(obj);
        }
        id v10 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        id v11 = [v10 objectForKeyedSubscript:@"base-leaderboard-id"];
        id v12 = [*(id *)(a1 + 32) bundleIdentifier];
        id v13 = [*(id *)(a1 + 48) playerID];
        id v14 = +[NSPredicate predicateWithFormat:@"game.bundleID = %@ AND player.playerID = %@ AND baseLeaderboardID = %@ AND isPrimary == YES", v12, v13, v11];

        id v15 = +[GKCacheObject firstObjectMatchingPredicate:v14 context:*(void *)(a1 + 40)];
        if (!v15)
        {
          id v15 = [(GKCacheObject *)[GKLeaderboardCacheObject alloc] initWithManagedObjectContext:*(void *)(a1 + 40)];
          [(GKLeaderboardCacheObject *)v15 setGame:v18];
          [(GKLeaderboardCacheObject *)v15 setPlayer:v17];
        }
        [(GKLeaderboardCacheObject *)v15 updateWithServerRepresentation:v10];
        id v16 = [(GKLeaderboardCacheObject *)v15 internalRepresentation];
        [v5 addObject:v16];
      }
      id v7 = [obj countByEnumeratingWithState:&v20 objects:v24 count:16];
    }
    while (v7);
  }

  [*(id *)(a1 + 64) setResult:v5];
}

void sub_1000744C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

id sub_100074620(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v5 = [v3 baseLeaderboardID];
  LODWORD(v4) = [v4 containsObject:v5];

  if (v4) {
    id v6 = v3;
  }
  else {
    id v6 = 0;
  }

  return v6;
}

void sub_10007475C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(unsigned char *)(a1 + 32))
  {
    id v5 = v3;
    BOOL v4 = [v3 releaseState] == (id)1;
    id v3 = v5;
    if (!v4)
    {
      [v5 setReleaseState:0];
      id v3 = v5;
    }
  }
}

void sub_100074D94(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_100074DAC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError userErrorForCode:17 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_100074E1C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) context];
  id v6 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:v2];

  uint64_t v3 = [v6 internalRepresentationWithPieces:0];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_100074EB4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError userErrorForCode:6 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_100074F24(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError userErrorForCode:17 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_100074F94(uint64_t a1, void *a2)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1000750B4;
  void v7[3] = &unk_1002D7200;
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = *(void **)(a1 + 48);
  void v7[4] = *(void *)(a1 + 40);
  id v8 = v5;
  id v9 = *(id *)(a1 + 56);
  id v10 = *(id *)(a1 + 64);
  id v11 = *(id *)(a1 + 32);
  id v12 = *(id *)(a1 + 72);
  id v13 = *(id *)(a1 + 80);
  id v6 = a2;
  [v4 perform:v7];
  v6[2](v6);
}

void sub_1000750B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  id v8 = [*(id *)(a1 + 64) context];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100075204;
  void v13[3] = &unk_1002D73B0;
  id v9 = *(id *)(a1 + 64);
  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = *(void **)(a1 + 40);
  id v14 = v9;
  uint64_t v15 = v10;
  id v16 = v11;
  id v17 = *(id *)(a1 + 48);
  id v18 = *(id *)(a1 + 56);
  id v19 = *(id *)(a1 + 72);
  id v20 = *(id *)(a1 + 80);
  id v21 = v3;
  id v12 = v3;
  [v4 fetchLeaderboardsForGameDescriptor:v5 player:v6 setIdentifier:v7 context:v8 handler:v13];
}

void sub_100075204(uint64_t a1, void *a2, char a3, int a4)
{
  id v7 = a2;
  if (a3)
  {
    id v8 = +[GKGameStatService leaderboards:v7 filteredWithIDs:*(void *)(a1 + 72)];

    +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [v8 count]);
    v46[0] = _NSConcreteStackBlock;
    v46[1] = 3221225472;
    void v46[2] = sub_100075D70;
    v46[3] = &unk_1002D7338;
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    id v47 = v9;
    [v8 enumerateObjectsUsingBlock:v46];
    if ([v9 count])
    {
      uint64_t v65 = 0;
      id v66 = &v65;
      uint64_t v67 = 0x2020000000;
      char v68 = 0;
      uint64_t v10 = *(void **)(a1 + 32);
      id v11 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKGameStatService.m", 1913, "-[GKGameStatService getLeaderboardsForGameDescriptor:player:leaderboardIDs:setIdentifier:handler:]_block_invoke_4");
      id v12 = [v10 transactionGroupWithName:v11];

      v39[0] = _NSConcreteStackBlock;
      v39[1] = 3221225472;
      v39[2] = sub_100075E10;
      void v39[3] = &unk_1002D71B0;
      void v39[4] = *(void *)(a1 + 40);
      id v40 = v9;
      id v41 = *(id *)(a1 + 48);
      id v42 = *(id *)(a1 + 56);
      id v43 = *(id *)(a1 + 32);
      id v13 = v12;
      id v44 = v13;
      long long v45 = &v65;
      [v13 perform:v39];
      if ([*(id *)(a1 + 72) count])
      {
        id v14 = *(void **)(a1 + 32);
        v33[0] = _NSConcreteStackBlock;
        v33[1] = 3221225472;
        v33[2] = sub_100075FA4;
        v33[3] = &unk_1002D4518;
        id v34 = v13;
        id v35 = *(id *)(a1 + 80);
        id v36 = *(id *)(a1 + 32);
        id v15 = v8;
        uint64_t v16 = *(void *)(a1 + 40);
        id v37 = v15;
        uint64_t v38 = v16;
        [v14 perform:v33];
      }
      else
      {
        uint64_t v29 = *(void *)(a1 + 80);
        v32[0] = _NSConcreteStackBlock;
        v32[1] = 3221225472;
        v32[2] = sub_1000763C8;
        v32[3] = &unk_1002D6B58;
        void v32[4] = *(void *)(a1 + 40);
        void v32[5] = &v65;
        [v13 notifyOnQueue:v29 block:v32];
      }

      _Block_object_dispose(&v65, 8);
    }
    char v30 = [*(id *)(a1 + 40) updateSigningStatusIfChanged:v8];
    [*(id *)(a1 + 32) setObject:v30 forKeyedSubscript:@"leaderboards"];

    (*(void (**)(void))(*(void *)(a1 + 88) + 16))();
  }
  else
  {
    uint64_t v65 = 0;
    id v66 = &v65;
    uint64_t v67 = 0x2020000000;
    char v68 = 0;
    id v17 = *(void **)(a1 + 32);
    id v18 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKGameStatService.m", 1856, "-[GKGameStatService getLeaderboardsForGameDescriptor:player:leaderboardIDs:setIdentifier:handler:]_block_invoke_4");
    id v19 = [v17 transactionGroupWithName:v18];

    v58[0] = _NSConcreteStackBlock;
    v58[1] = 3221225472;
    v58[2] = sub_100075870;
    v58[3] = &unk_1002D71B0;
    id v20 = *(void **)(a1 + 48);
    v58[4] = *(void *)(a1 + 40);
    id v59 = v20;
    id v60 = *(id *)(a1 + 56);
    id v61 = *(id *)(a1 + 64);
    id v62 = *(id *)(a1 + 32);
    id v21 = v19;
    id v63 = v21;
    unsigned __int8 v64 = &v65;
    [v21 perform:v58];
    if (a4 && ![*(id *)(a1 + 72) count])
    {
      uint64_t v31 = *(void *)(a1 + 80);
      v48[0] = _NSConcreteStackBlock;
      v48[1] = 3221225472;
      v48[2] = sub_100075D04;
      v48[3] = &unk_1002D6B58;
      v48[4] = *(void *)(a1 + 40);
      v48[5] = &v65;
      [v21 notifyOnQueue:v31 block:v48];
    }
    else
    {
      long long v22 = *(void **)(a1 + 32);
      v49[0] = _NSConcreteStackBlock;
      v49[1] = 3221225472;
      v49[2] = sub_1000759F8;
      v49[3] = &unk_1002D7310;
      id v50 = v21;
      id v51 = *(id *)(a1 + 80);
      id v23 = *(id *)(a1 + 32);
      uint64_t v24 = *(void *)(a1 + 40);
      id v25 = *(void **)(a1 + 48);
      id v52 = v23;
      uint64_t v53 = v24;
      id v54 = v25;
      id v55 = *(id *)(a1 + 56);
      id v56 = *(id *)(a1 + 64);
      id v57 = *(id *)(a1 + 72);
      [v22 perform:v49];
    }
    id v26 = *(void **)(a1 + 40);
    uint64_t v27 = +[GKGameStatService leaderboards:v7 filteredWithIDs:*(void *)(a1 + 72)];
    id v28 = [v26 updateSigningStatusIfChanged:v27];
    [*(id *)(a1 + 32) setObject:v28 forKeyedSubscript:@"leaderboards"];

    (*(void (**)(void))(*(void *)(a1 + 88) + 16))();
    _Block_object_dispose(&v65, 8);
    id v8 = v7;
  }
}

void sub_100075854(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100075870(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  id v8 = [*(id *)(a1 + 64) context];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_10007596C;
  void v12[3] = &unk_1002D7188;
  id v9 = *(id *)(a1 + 72);
  uint64_t v10 = *(void *)(a1 + 80);
  id v14 = v3;
  uint64_t v15 = v10;
  id v13 = v9;
  id v11 = v3;
  [v4 loadLeaderboardsForGameDescriptor:v5 player:v6 setIdentifier:v7 context:v8 bagKey:@"gk-get-leaderboards" handler:v12];
}

void sub_10007596C(void *a1, void *a2, double a3)
{
  uint64_t v5 = (void *)a1[4];
  id v8 = a2;
  [v5 setError:v8];
  BOOL v7 = a3 > 0.0 && v8 == 0;
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = v7;
  (*(void (**)(void))(a1[5] + 16))();
}

void sub_1000759F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_100075B14;
  v10[3] = &unk_1002D72E8;
  id v11 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 56);
  id v8 = *(void **)(a1 + 64);
  id v12 = v6;
  uint64_t v13 = v7;
  id v14 = v8;
  id v15 = *(id *)(a1 + 72);
  id v16 = *(id *)(a1 + 80);
  id v17 = *(id *)(a1 + 88);
  id v18 = v3;
  id v9 = v3;
  [v4 notifyOnQueue:v5 block:v10];
}

void sub_100075B14(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 40) error];
  [*(id *)(a1 + 32) setError:v2];

  id v3 = [*(id *)(a1 + 40) error];

  if (v3)
  {
    uint64_t v4 = *(void (**)(void))(*(void *)(a1 + 88) + 16);
    v4();
  }
  else
  {
    uint64_t v5 = *(void **)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 72);
    id v9 = [*(id *)(a1 + 32) context];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_100075C74;
    void v12[3] = &unk_1002D72C0;
    id v10 = *(id *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 48);
    id v13 = v10;
    uint64_t v14 = v11;
    id v15 = *(id *)(a1 + 80);
    id v16 = *(id *)(a1 + 88);
    [v5 fetchLeaderboardsForGameDescriptor:v6 player:v7 setIdentifier:v8 context:v9 handler:v12];
  }
}

uint64_t sub_100075C74(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a1 + 40);
  uint64_t v4 = +[GKGameStatService leaderboards:a2 filteredWithIDs:*(void *)(a1 + 48)];
  uint64_t v5 = [v3 updateSigningStatusIfChanged:v4];
  [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:@"leaderboards"];

  uint64_t v6 = *(uint64_t (**)(void))(*(void *)(a1 + 56) + 16);

  return v6();
}

void sub_100075D04(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    id v1 = [*(id *)(a1 + 32) clientProxy];
    [v1 refreshContentsForDataType:9 userInfo:&off_1002F2C50];
  }
}

void sub_100075D70(uint64_t a1, void *a2)
{
  id v8 = a2;
  if ([v8 type] == (id)1)
  {
    id v3 = [v8 nextStartDate];
    [v3 timeIntervalSinceNow];
    double v5 = v4;

    if (v5 <= 0.0)
    {
      uint64_t v6 = *(void **)(a1 + 32);
      uint64_t v7 = [v8 baseLeaderboardID];
      [v6 addObject:v7];
    }
  }
}

void sub_100075E10(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  id v8 = [*(id *)(a1 + 64) context];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_100075F04;
  void v12[3] = &unk_1002D7360;
  id v9 = *(id *)(a1 + 72);
  uint64_t v10 = *(void *)(a1 + 80);
  id v14 = v3;
  uint64_t v15 = v10;
  id v13 = v9;
  id v11 = v3;
  [v4 updateLeaderboardsWithIDs:v5 gameDescriptor:v6 player:v7 context:v8 handler:v12];
}

void sub_100075F04(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v7 = a3;
  id v6 = a2;
  [v5 setError:v7];
  [*(id *)(a1 + 32) setResult:v6];

  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v7 == 0;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100075FA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_10007608C;
  v9[3] = &unk_1002D39A8;
  id v10 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 32);
  id v6 = *(id *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  id v12 = v6;
  uint64_t v13 = v7;
  id v14 = v3;
  id v8 = v3;
  [v4 notifyOnQueue:v5 block:v9];
}

uint64_t sub_10007608C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 40) error];
  [*(id *)(a1 + 32) setError:v2];

  id v3 = [*(id *)(a1 + 40) error];

  if (!v3)
  {
    id v4 = objc_alloc_init((Class)NSMutableDictionary);
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    uint64_t v5 = [*(id *)(a1 + 40) result];
    id v6 = [v5 countByEnumeratingWithState:&v24 objects:v28 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v25;
      do
      {
        for (unint64_t i = 0; i != v7; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v25 != v8) {
            objc_enumerationMutation(v5);
          }
          id v10 = *(void **)(*((void *)&v24 + 1) + 8 * i);
          id v11 = [v10 baseLeaderboardID];
          [v4 setObject:v10 forKeyedSubscript:v11];
        }
        id v7 = [v5 countByEnumeratingWithState:&v24 objects:v28 count:16];
      }
      while (v7);
    }

    id v12 = [objc_alloc((Class)NSMutableArray) initWithCapacity:[*(id *)(a1 + 48) count]];
    uint64_t v13 = *(void **)(a1 + 48);
    id v18 = _NSConcreteStackBlock;
    uint64_t v19 = 3221225472;
    id v20 = sub_1000762DC;
    id v21 = &unk_1002D7388;
    id v22 = v12;
    id v23 = v4;
    id v14 = v4;
    id v15 = v12;
    [v13 enumerateObjectsUsingBlock:&v18];
    id v16 = [*(id *)(a1 + 56) updateSigningStatusIfChanged:v15, v18, v19, v20, v21];
    [*(id *)(a1 + 32) setObject:v16 forKeyedSubscript:@"leaderboards"];
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_1000762DC(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = *(void **)(a1 + 40);
  id v5 = a2;
  id v6 = [v5 baseLeaderboardID];
  uint64_t v7 = [v4 objectForKeyedSubscript:v6];
  uint64_t v8 = (void *)v7;
  if (v7) {
    id v9 = (id)v7;
  }
  else {
    id v9 = v5;
  }
  [v3 addObject:v9];

  id v10 = *(void **)(a1 + 40);
  id v11 = [v5 baseLeaderboardID];

  id v12 = [v10 objectForKeyedSubscript:v11];

  if (v12)
  {
    uint64_t v13 = os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      id v14 = (id)GKOSLoggers();
      uint64_t v13 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
      sub_1000823C8(v13, v12);
    }
  }
}

void sub_1000763C8(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    id v1 = [*(id *)(a1 + 32) clientProxy];
    [v1 refreshContentsForDataType:9 userInfo:&off_1002F2C78];
  }
}

void sub_100076434(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  id v3 = [*(id *)(a1 + 32) error];

  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    id v5 = (void *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100082494(v2, v5);
    }
  }
  id v6 = *(void **)(a1 + 40);
  uint64_t v7 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"leaderboards"];
  uint64_t v8 = [*(id *)(a1 + 48) playerID];
  id v9 = [*(id *)(a1 + 56) bundleIdentifier];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_100076598;
  v10[3] = &unk_1002D73D8;
  id v12 = *(id *)(a1 + 64);
  id v11 = *(id *)(a1 + 32);
  [v6 mixinHasActiveChallengesWithLeaderboards:v7 playerID:v8 bundleID:v9 completionHandler:v10];
}

void sub_100076598(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = a2;
  id v5 = [v3 error];
  (*(void (**)(uint64_t, id, id))(v2 + 16))(v2, v4, v5);
}

uint64_t sub_1000767E8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1000767FC(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100082524();
    }
  }
  else
  {
    uint64_t v8 = [v5 _gkDistinctValuesForKeyPath:@"leaderboardID"];
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    id v9 = a1[4];
    id v10 = [v9 countByEnumeratingWithState:&v21 objects:v25 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v22;
      do
      {
        for (unint64_t i = 0; i != v11; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v22 != v12) {
            objc_enumerationMutation(v9);
          }
          id v14 = *(void **)(*((void *)&v21 + 1) + 8 * i);
          id v15 = [v14 baseLeaderboardID];
          [v14 setHasActiveChallenges:[v8 containsObject:v15]];
        }
        id v11 = [v9 countByEnumeratingWithState:&v21 objects:v25 count:16];
      }
      while (v11);
    }
  }
  id v16 = [a1[5] clientProxy];
  id v17 = [v16 replyQueue];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  void v18[2] = sub_100076A44;
  void v18[3] = &unk_1002D3930;
  id v20 = a1[6];
  id v19 = a1[4];
  dispatch_async(v17, v18);
}

uint64_t sub_100076A44(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100076B34(void *a1)
{
  +[NSPredicate predicateWithFormat:@"recordID = %@", a1[4]];
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = +[GKCacheObject firstObjectMatchingPredicate:v3 context:a1[5]];
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_100076F18(uint64_t a1, void *a2)
{
  id v3 = a2;
  v19[0] = @"game";
  id v4 = [*(id *)(a1 + 32) dictionaryForRequest];
  v20[0] = v4;
  v19[1] = @"player-id";
  id v5 = [*(id *)(a1 + 40) playerID];
  v20[1] = v5;
  void v19[2] = @"leaderboard-id";
  id v6 = [*(id *)(a1 + 48) identifier];
  void v20[2] = v6;
  v20[3] = &off_1002F1FA0;
  void v19[3] = @"count";
  void v19[4] = @"player-played-in-only";
  id v7 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 80)];
  void v20[4] = v7;
  uint64_t v8 = +[NSDictionary dictionaryWithObjects:v20 forKeys:v19 count:5];

  id v9 = +[GKNetworkRequestManager commonNetworkRequestManager];
  id v10 = [*(id *)(a1 + 56) clientProxy];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_10007715C;
  void v12[3] = &unk_1002D5840;
  id v13 = *(id *)(a1 + 64);
  id v14 = *(id *)(a1 + 72);
  id v15 = *(id *)(a1 + 32);
  id v16 = *(id *)(a1 + 40);
  id v17 = *(id *)(a1 + 48);
  id v18 = v3;
  id v11 = v3;
  [v9 issueRequest:v8 bagKey:@"gk-get-previous-leaderboard-instances" clientProxy:v10 handler:v12];
}

void sub_10007715C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [*(id *)(a1 + 32) setError:a3];
  if (v5 && !a3)
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_100077284;
    v10[3] = &unk_1002D4860;
    id v9 = *(void **)(a1 + 40);
    id v11 = *(id *)(a1 + 48);
    id v12 = *(id *)(a1 + 40);
    id v13 = *(id *)(a1 + 56);
    id v14 = v5;
    id v15 = *(id *)(a1 + 64);
    id v16 = *(id *)(a1 + 32);
    [v9 performBlockAndWait:v10];
  }
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 72) + 16))(*(void *)(a1 + 72), v6, v7, v8);
}

void sub_100077284(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) dictionaryForRequest];
  id v12 = +[GKGameCacheObject gameForGameDescriptor:v2 context:*(void *)(a1 + 40)];

  id v3 = [*(id *)(a1 + 48) playerID];
  id v4 = +[GKPlayerProfileCacheObject playerProfileWithPlayerID:v3 inManagedObjectContext:*(void *)(a1 + 40)];

  id v5 = [*(id *)(a1 + 56) objectForKeyedSubscript:@"results"];
  if ([v5 count])
  {
    uint64_t v6 = [v5 objectAtIndexedSubscript:0];
    uint64_t v7 = [*(id *)(a1 + 64) recordID];
    uint64_t v8 = +[NSPredicate predicateWithFormat:@"recordID = %@", v7];

    id v9 = +[GKCacheObject firstObjectMatchingPredicate:v8 context:*(void *)(a1 + 40)];
    id v10 = [(GKCacheObject *)[GKLeaderboardCacheObject alloc] initWithManagedObjectContext:*(void *)(a1 + 40)];
    [(GKLeaderboardCacheObject *)v10 setGame:v12];
    [(GKLeaderboardCacheObject *)v10 setPlayer:v4];
    [(GKLeaderboardCacheObject *)v10 updateWithServerRepresentation:v6];
    [(GKLeaderboardCacheObject *)v10 setIsPrimary:0];
    [v9 setPreviousInstance:v10];
    [v9 setPreviousInstanceLoaded:1];
    id v11 = [(GKLeaderboardCacheObject *)v10 internalRepresentation];
    [*(id *)(a1 + 72) setResult:v11];
  }
}

void sub_100077458(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_100077A94(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 184), 8);
  _Unwind_Resume(a1);
}

void sub_100077AAC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError userErrorForCode:17 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_100077B1C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) context];
  id v6 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:v2];

  uint64_t v3 = [v6 internalRepresentationWithPieces:0];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_100077BB4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError userErrorForCode:6 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_100077C24(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError userErrorForCode:17 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_100077C94(uint64_t a1, void *a2)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100077D8C;
  void v7[3] = &unk_1002D4518;
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = *(void **)(a1 + 48);
  void v7[4] = *(void *)(a1 + 40);
  id v8 = v5;
  id v9 = *(id *)(a1 + 32);
  id v10 = *(id *)(a1 + 56);
  id v11 = *(id *)(a1 + 64);
  id v6 = a2;
  [v4 perform:v7];
  v6[2](v6);
}

void sub_100077D8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = [*(id *)(a1 + 40) recordID];
  id v6 = [*(id *)(a1 + 48) context];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_100077EB4;
  v11[3] = &unk_1002D7428;
  id v7 = *(id *)(a1 + 48);
  id v17 = v3;
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(a1 + 40);
  id v12 = v7;
  uint64_t v13 = v8;
  id v14 = v9;
  id v15 = *(id *)(a1 + 56);
  id v16 = *(id *)(a1 + 64);
  id v10 = v3;
  [v4 fetchLeaderboardWithRecordID:v5 context:v6 handler:v11];
}

void sub_100077EB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 previousInstanceLoaded])
  {
    uint64_t v4 = [v3 previousInstance];
    id v5 = [v4 internalRepresentation];

    [*(id *)(a1 + 32) setResult:v5];
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 56);
    uint64_t v8 = *(void *)(a1 + 64);
    id v9 = *(void **)(a1 + 40);
    id v10 = [*(id *)(a1 + 32) context];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    void v14[2] = sub_100078034;
    void v14[3] = &unk_1002D7400;
    id v15 = *(id *)(a1 + 32);
    id v11 = *(id *)(a1 + 72);
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v13 = *(void **)(a1 + 48);
    id v20 = v11;
    uint64_t v16 = v12;
    id v17 = v13;
    id v18 = *(id *)(a1 + 56);
    id v19 = *(id *)(a1 + 64);
    [v9 loadPreviousInstanceForLeaderboard:v6 gameDescriptor:v7 player:v8 playerPlayedIn:1 context:v10 handler:v14];
  }
}

void sub_100078034(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [*(id *)(a1 + 32) setError:a3];
  if (v5)
  {
    [*(id *)(a1 + 32) setResult:v5];
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 56);
    uint64_t v8 = *(void *)(a1 + 64);
    id v9 = *(void **)(a1 + 40);
    id v10 = [*(id *)(a1 + 32) context];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    void v11[2] = sub_10007815C;
    v11[3] = &unk_1002D7110;
    id v12 = *(id *)(a1 + 32);
    id v13 = *(id *)(a1 + 72);
    [v9 loadPreviousInstanceForLeaderboard:v6 gameDescriptor:v7 player:v8 playerPlayedIn:0 context:v10 handler:v11];
  }
}

uint64_t sub_10007815C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a2;
  [v5 setError:a3];
  [*(id *)(a1 + 32) setResult:v6];

  uint64_t v7 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v7();
}

void sub_1000781CC(uint64_t a1)
{
  id v2 = (id *)(a1 + 32);
  id v3 = [*(id *)(a1 + 32) error];

  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    id v5 = (void *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10008265C((uint64_t)v2, v5);
    }
  }
  uint64_t v6 = [*v2 result];
  uint64_t v7 = (void *)v6;
  if (v6)
  {
    uint64_t v8 = *(void **)(a1 + 40);
    uint64_t v17 = v6;
    id v9 = +[NSArray arrayWithObjects:&v17 count:1];
    id v10 = [*(id *)(a1 + 48) playerID];
    id v11 = [*(id *)(a1 + 56) bundleIdentifier];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    void v14[2] = sub_1000783B0;
    void v14[3] = &unk_1002D73D8;
    id v16 = *(id *)(a1 + 64);
    id v15 = *(id *)(a1 + 32);
    [v8 mixinHasActiveChallengesWithLeaderboards:v9 playerID:v10 bundleID:v11 completionHandler:v14];

    id v12 = v16;
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 64);
    id v12 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0, v12);
  }
}

void sub_1000783B0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  id v5 = [a2 firstObject];
  id v4 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v3 + 16))(v3, v5, v4);
}

void sub_1000785A4(uint64_t a1, void *a2)
{
  [a2 _gkMapDictionaryWithKeyPath:@"playerID"];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100078678;
  void v8[3] = &unk_1002D7450;
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v3 = *(void **)(a1 + 32);
  id v10 = *(id *)(a1 + 40);
  id v4 = v9;
  [v3 enumerateObjectsUsingBlock:v8];
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), v5, v6, v7);
}

void sub_100078678(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 player];
  uint64_t v5 = [v4 playerID];

  if (!v5)
  {
LABEL_9:
    id v7 = *(id *)(a1 + 40);
    goto LABEL_10;
  }
  uint64_t v6 = [*(id *)(a1 + 32) objectForKeyedSubscript:v5];
  id v7 = v6;
  if (!v6
    || ([v6 displayNameWithOptions:0],
        uint64_t v8 = objc_claimAutoreleasedReturnValue(),
        id v9 = [v8 length],
        v8,
        !v9))
  {
    id v10 = os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      id v11 = (id)GKOSLoggers();
      id v10 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
      sub_1000826EC();
    }

    goto LABEL_9;
  }
LABEL_10:
  [v3 setPlayer:v7];
}

void sub_100078990(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  id v7 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:v5];
  uint64_t v8 = [v7 internalRepresentation];
  uint64_t v37 = 0;
  uint64_t v38 = &v37;
  uint64_t v39 = 0x3032000000;
  id v40 = sub_10006A568;
  id v41 = sub_10006A578;
  id v42 = 0;
  id v9 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"player-score"];
  if ([v9 count])
  {
    id v10 = objc_alloc_init((Class)GKLeaderboardEntryInternal);
    id v11 = (void *)v38[5];
    v38[5] = (uint64_t)v10;

    id v12 = [v9 objectForKeyedSubscript:@"context"];
    id v13 = [v12 integerValue];
    [(id)v38[5] setContext:v13];

    id v14 = [v9 objectForKeyedSubscript:@"score-value"];
    id v15 = [v14 integerValue];
    [(id)v38[5] setScore:v15];

    id v16 = [v9 objectForKeyedSubscript:@"formatted-score-value"];
    [(id)v38[5] setFormattedScore:v16];

    uint64_t v17 = [v9 objectForKeyedSubscript:@"rank"];
    unsigned int v18 = [v17 integerValue];
    [(id)v38[5] setRank:v18];

    id v19 = [v9 objectForKeyedSubscript:@"timestamp"];
    id v20 = +[NSDate _gkDateFromServerTimestamp:v19];
    [(id)v38[5] setDate:v20];

    [(id)v38[5] setPlayer:v8];
    long long v21 = [*(id *)(a1 + 40) baseLeaderboardID];
    [(id)v38[5] setBaseLeaderboardID:v21];
  }
  long long v22 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"total-entries"];
  id v23 = [v22 integerValue];

  long long v24 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"results"];
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472;
  v33[2] = sub_100078DAC;
  v33[3] = &unk_1002D7478;
  id v34 = *(id *)(a1 + 40);
  id v25 = v8;
  id v35 = v25;
  id v36 = &v37;
  long long v26 = [v24 _gkMapWithBlock:v33];
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472;
  v30[2] = sub_100078FF4;
  v30[3] = &unk_1002D41D0;
  long long v27 = *(void **)(a1 + 48);
  void v30[4] = *(void *)(a1 + 56);
  id v28 = v26;
  id v31 = v28;
  uint64_t v32 = &v37;
  [v27 perform:v30];
  [*(id *)(a1 + 48) setResult:v38[5]];
  [*(id *)(a1 + 48) setObject:v28 forKeyedSubscript:@"entries"];
  uint64_t v29 = +[NSNumber numberWithInteger:v23];
  [*(id *)(a1 + 48) setObject:v29 forKeyedSubscript:@"count"];

  v6[2](v6);
  _Block_object_dispose(&v37, 8);
}

void sub_100078D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100078DAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)GKLeaderboardEntryInternal);
  id v5 = [v3 objectForKeyedSubscript:@"context"];
  [v4 setContext:[v5 integerValue]];

  uint64_t v6 = [v3 objectForKeyedSubscript:@"score-value"];
  [v4 setScore:[v6 integerValue]];

  id v7 = [v3 objectForKeyedSubscript:@"formatted-score-value"];
  [v4 setFormattedScore:v7];

  uint64_t v8 = [v3 objectForKeyedSubscript:@"rank"];
  [v4 setRank:[v8 integerValue]];

  id v9 = [v3 objectForKeyedSubscript:@"timestamp"];
  id v10 = +[NSDate _gkDateFromServerTimestamp:v9];
  [v4 setDate:v10];

  id v11 = [*(id *)(a1 + 32) baseLeaderboardID];
  [v4 setBaseLeaderboardID:v11];

  id v12 = [v3 objectForKeyedSubscript:@"player-descriptor"];

  id v13 = [v12 objectForKeyedSubscript:@"player-id"];

  if (v13)
  {
    id v14 = [*(id *)(a1 + 40) playerID];
    unsigned int v15 = [v13 isEqualToString:v14];

    if (v15)
    {
      [v4 setPlayer:*(void *)(a1 + 40)];
      uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 8);
      if (*(void *)(v16 + 40)) {
        goto LABEL_7;
      }
      id v17 = v4;
      unsigned int v18 = *(void **)(v16 + 40);
      *(void *)(v16 + 40) = v17;
    }
    else
    {
      id v19 = +[GKPlayerInternal internalRepresentation];
      [v4 setPlayer:v19];

      unsigned int v18 = [v4 player];
      [v18 setPlayerID:v13];
    }
  }
LABEL_7:

  return v4;
}

void sub_100078FF4(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = *(void *)(*(void *)(a1[6] + 8) + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000790A8;
  void v8[3] = &unk_1002D3A20;
  id v9 = v3;
  id v7 = v3;
  [v4 updatePlayersForEntries:v5 localPlayerEntry:v6 handler:v8];
}

uint64_t sub_1000790A8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000790B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v5 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"entries"];
  id v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"count"];
  (*(void (**)(uint64_t, id, void *, id, void))(v2 + 16))(v2, v5, v3, [v4 integerValue], 0);
}

NSString *__cdecl sub_1000794B0(id a1, GKPlayerInternal *a2, unint64_t a3)
{
  return (NSString *)[(GKPlayerInternal *)a2 playerID];
}

void sub_1000794B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)NSMutableDictionary);
  id v5 = [*(id *)(a1 + 32) dictionaryForRequest];
  [v4 setObject:v5 forKeyedSubscript:@"game"];

  uint64_t v6 = [*(id *)(a1 + 40) playerID];
  [v4 setObject:v6 forKeyedSubscript:@"player-id"];

  id v7 = [*(id *)(a1 + 48) baseLeaderboardID];
  [v4 setObject:v7 forKeyedSubscript:@"base-leaderboard-id"];

  uint64_t v8 = [*(id *)(a1 + 48) identifier];
  [v4 setObject:v8 forKeyedSubscript:@"leaderboard-id"];

  id v9 = [*(id *)(a1 + 56) timeScopeName:*(void *)(a1 + 96)];
  [v4 setObject:v9 forKeyedSubscript:@"time-scope"];

  if ([*(id *)(a1 + 64) count])
  {
    [v4 setObject:*(void *)(a1 + 64) forKeyedSubscript:@"player-ids"];
    CFStringRef v10 = @"gk-get-leaderboard-entries-for-players";
  }
  else
  {
    id v11 = [*(id *)(a1 + 56) playerScopeName:*(void *)(a1 + 104)];
    [v4 setObject:v11 forKeyedSubscript:@"player-scope"];

    id v12 = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 112)];
    [v4 setObject:v12 forKeyedSubscript:@"starting-rank"];

    id v13 = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 120)];
    [v4 setObject:v13 forKeyedSubscript:@"count"];

    CFStringRef v10 = @"gk-get-leaderboard-entries";
  }
  id v14 = +[GKNetworkRequestManager commonNetworkRequestManager];
  unsigned int v15 = [*(id *)(a1 + 56) clientProxy];
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  void v20[2] = sub_10007977C;
  v20[3] = &unk_1002D7278;
  uint64_t v16 = *(void *)(a1 + 72);
  id v17 = *(id *)(a1 + 80);
  uint64_t v18 = *(void *)(a1 + 56);
  id v21 = v17;
  uint64_t v22 = v18;
  id v23 = *(id *)(a1 + 88);
  id v24 = *(id *)(a1 + 48);
  id v25 = v3;
  id v19 = v3;
  [v14 issueRequest:v4 bagKey:v10 clientProxy:v15 locale:v16 handler:v20];
}

void sub_10007977C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [*(id *)(a1 + 32) setError:a3];
  if (v5 && !a3)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    void v7[2] = sub_100079884;
    void v7[3] = &unk_1002D4518;
    uint64_t v6 = *(void **)(a1 + 32);
    void v7[4] = *(void *)(a1 + 40);
    id v8 = v5;
    id v9 = *(id *)(a1 + 48);
    id v10 = *(id *)(a1 + 56);
    id v11 = *(id *)(a1 + 32);
    [v6 perform:v7];
  }
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_100079884(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_100079950;
  v9[3] = &unk_1002D74E0;
  id v10 = *(id *)(a1 + 64);
  id v11 = v3;
  id v8 = v3;
  [v4 generateEntriesFromServerResponse:v5 context:v6 leaderboard:v7 handler:v9];
}

uint64_t sub_100079950(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7 = *(void **)(a1 + 32);
  id v8 = a3;
  [v7 setResult:a2];
  [*(id *)(a1 + 32) setObject:v8 forKeyedSubscript:@"entries"];

  id v9 = +[NSNumber numberWithInteger:a4];
  [*(id *)(a1 + 32) setObject:v9 forKeyedSubscript:@"count"];

  id v10 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v10();
}

void sub_100079A04(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v7 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"entries"];
  id v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"count"];
  id v5 = [v4 integerValue];
  uint64_t v6 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *, id, void *))(v2 + 16))(v2, v7, v3, v5, v6);
}

void sub_10007A234(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 232), 8);
  _Unwind_Resume(a1);
}

void sub_10007A24C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError userErrorForCode:17 userInfo:0];
  (*(void (**)(uint64_t, void, void, void, id))(v1 + 16))(v1, 0, 0, 0, v2);
}

void sub_10007A2C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError userErrorForCode:17 userInfo:0];
  (*(void (**)(uint64_t, void, void, void, id))(v1 + 16))(v1, 0, 0, 0, v2);
}

void sub_10007A33C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) context];
  id v6 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:v2];

  uint64_t v3 = [v6 internalRepresentationWithPieces:0];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_10007A3D4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError userErrorForCode:6 userInfo:0];
  (*(void (**)(uint64_t, void, void, void, id))(v1 + 16))(v1, 0, 0, 0, v2);
}

void sub_10007A44C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError userErrorForCode:17 userInfo:0];
  (*(void (**)(uint64_t, void, void, void, id))(v1 + 16))(v1, 0, 0, 0, v2);
}

void sub_10007A4C4(uint64_t a1, void *a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10007A5F0;
  void v8[3] = &unk_1002D7530;
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = *(void **)(a1 + 48);
  void v8[4] = *(void *)(a1 + 40);
  id v9 = v5;
  id v10 = *(id *)(a1 + 56);
  id v11 = *(id *)(a1 + 64);
  long long v6 = *(_OWORD *)(a1 + 104);
  long long v15 = *(_OWORD *)(a1 + 88);
  long long v16 = v6;
  id v12 = *(id *)(a1 + 72);
  id v13 = *(id *)(a1 + 32);
  id v14 = *(id *)(a1 + 80);
  id v7 = a2;
  [v4 perform:v8];
  v7[2](v7);
}

void sub_10007A5F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 40);
  id v14 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 88);
  uint64_t v8 = *(void *)(a1 + 96);
  id v9 = [*(id *)(a1 + 72) context];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  void v15[2] = sub_10007A704;
  v15[3] = &unk_1002D74E0;
  uint64_t v10 = *(void *)(a1 + 80);
  id v16 = *(id *)(a1 + 72);
  id v17 = v3;
  long long v12 = *(_OWORD *)(a1 + 104);
  id v11 = v3;
  [v14 loadEntriesForLeaderboard:v13 gameDescriptor:v4 localPlayer:v5 playerScope:v7 timeScope:v8 range:v12 players:v6 context:v9 locale:v10 handler:v15];
}

uint64_t sub_10007A704(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9 = *(void **)(a1 + 32);
  id v10 = a3;
  id v11 = a2;
  [v9 setError:a5];
  [*(id *)(a1 + 32) setResult:v11];

  [*(id *)(a1 + 32) setObject:v10 forKeyedSubscript:@"entries"];
  long long v12 = +[NSNumber numberWithInteger:a4];
  [*(id *)(a1 + 32) setObject:v12 forKeyedSubscript:@"totalPlayerCount"];

  uint64_t v13 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v13();
}

void sub_10007A7D4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v7 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"entries"];
  uint64_t v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"totalPlayerCount"];
  id v5 = [v4 integerValue];
  uint64_t v6 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *, id, void *))(v2 + 16))(v2, v7, v3, v5, v6);
}

void sub_10007AAA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[NSMutableArray array];
  id v5 = +[NSMutableArray array];
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  id obj = v3;
  id v6 = [obj countByEnumeratingWithState:&v48 objects:v53 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v49;
    do
    {
      id v9 = 0;
      do
      {
        if (*(void *)v49 != v8) {
          objc_enumerationMutation(obj);
        }
        id v10 = *(void **)(*((void *)&v48 + 1) + 8 * (void)v9);
        id v11 = objc_alloc_init((Class)GKScoreInternal);
        [v11 setDate:*(void *)(a1 + 32)];
        long long v12 = [v10 baseLeaderboardID];
        [v11 setLeaderboardIdentifier:v12];

        [v11 setValue:*(void *)(a1 + 88)];
        [v11 setContext:*(void *)(a1 + 96)];
        [v11 setPlayer:*(void *)(a1 + 40)];
        if ([v10 type] == (id)1) {
          uint64_t v13 = v4;
        }
        else {
          uint64_t v13 = v5;
        }
        [v13 addObject:v11];
        id v14 = *(void **)(a1 + 48);
        long long v15 = [v10 baseLeaderboardID];
        [v14 removeObject:v15];

        id v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id v7 = [obj countByEnumeratingWithState:&v48 objects:v53 count:16];
    }
    while (v7);
  }

  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  id v16 = *(id *)(a1 + 48);
  id v17 = [v16 countByEnumeratingWithState:&v44 objects:v52 count:16];
  if (v17)
  {
    id v18 = v17;
    uint64_t v19 = *(void *)v45;
    do
    {
      id v20 = 0;
      do
      {
        if (*(void *)v45 != v19) {
          objc_enumerationMutation(v16);
        }
        uint64_t v21 = *(void *)(*((void *)&v44 + 1) + 8 * (void)v20);
        id v22 = objc_alloc_init((Class)GKScoreInternal);
        [v22 setDate:*(void *)(a1 + 32)];
        [v22 setLeaderboardIdentifier:v21];
        [v22 setValue:*(void *)(a1 + 88)];
        [v22 setContext:*(void *)(a1 + 96)];
        [v22 setPlayer:*(void *)(a1 + 40)];
        [v5 addObject:v22];

        id v20 = (char *)v20 + 1;
      }
      while (v18 != v20);
      id v18 = [v16 countByEnumeratingWithState:&v44 objects:v52 count:16];
    }
    while (v18);
  }

  +[GKScoreSubmissionBulletin presentForScores:v4];
  +[GKScoreSubmissionBulletin presentForScores:v5];
  id v23 = *(void **)(a1 + 56);
  id v24 = [*(id *)(a1 + 64) clientProxy];
  id v25 = [v24 replyQueue];
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472;
  void v37[2] = sub_10007AEE8;
  void v37[3] = &unk_1002D75A8;
  id v26 = v4;
  id v38 = v26;
  id v39 = *(id *)(a1 + 56);
  id v27 = *(id *)(a1 + 72);
  uint64_t v28 = *(void *)(a1 + 64);
  id v40 = v27;
  uint64_t v41 = v28;
  uint64_t v43 = *(void *)(a1 + 88);
  id v29 = v5;
  id v42 = v29;
  [v23 performOnQueue:v25 block:v37];

  if (*(void *)(a1 + 80))
  {
    char v30 = *(void **)(a1 + 56);
    id v31 = [*(id *)(a1 + 64) clientProxy];
    uint64_t v32 = [v31 replyQueue];
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472;
    _OWORD v34[2] = sub_10007B810;
    void v34[3] = &unk_1002D3C38;
    id v35 = *(id *)(a1 + 56);
    id v36 = *(id *)(a1 + 80);
    [v30 notifyOnQueue:v32 block:v34];
  }
}

void sub_10007AEE8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) count])
  {
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    void v18[2] = sub_10007B080;
    void v18[3] = &unk_1002D7580;
    uint64_t v4 = *(void **)(a1 + 40);
    id v19 = *(id *)(a1 + 32);
    id v5 = *(id *)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 56);
    id v20 = v5;
    uint64_t v21 = v6;
    id v7 = *(id *)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 72);
    id v22 = v7;
    uint64_t v23 = v8;
    [v4 perform:v18];
  }
  if ([*(id *)(a1 + 64) count])
  {
    id v9 = *(void **)(a1 + 40);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10007B5C4;
    void v13[3] = &unk_1002D7580;
    id v10 = *(void **)(a1 + 64);
    uint64_t v17 = *(void *)(a1 + 72);
    id v14 = v10;
    int8x16_t v12 = *(int8x16_t *)(a1 + 48);
    id v11 = (id)v12.i64[0];
    int8x16_t v15 = vextq_s8(v12, v12, 8uLL);
    id v16 = *(id *)(a1 + 40);
    [v9 perform:v13];
  }
  v3[2](v3);
}

void sub_10007B080(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_new();
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v5 = *(id *)(a1 + 32);
  id v6 = [v5 countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v24;
    do
    {
      id v9 = 0;
      do
      {
        if (*(void *)v24 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = [*(id *)(*((void *)&v23 + 1) + 8 * (void)v9) serverRepresentation];
        [v4 addObject:v10];

        id v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v23 objects:v27 count:16];
    }
    while (v7);
  }

  id v11 = objc_opt_new();
  [v11 setObject:v4 forKeyedSubscript:@"scores"];
  [v11 setObject:*(void *)(a1 + 40) forKeyedSubscript:@"eligible-challenges"];
  int8x16_t v12 = +[GKNetworkRequestManager commonNetworkRequestManager];
  uint64_t v13 = [*(id *)(a1 + 48) clientProxy];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  void v17[2] = sub_10007B2E0;
  void v17[3] = &unk_1002D7558;
  id v18 = *(id *)(a1 + 32);
  int8x16_t v16 = *(int8x16_t *)(a1 + 40);
  id v14 = (id)v16.i64[0];
  int8x16_t v19 = vextq_s8(v16, v16, 8uLL);
  id v20 = *(id *)(a1 + 56);
  id v21 = v3;
  uint64_t v22 = *(void *)(a1 + 64);
  id v15 = v3;
  [v12 issueRequest:v11 bagKey:@"gk-submit-scores" clientProxy:v13 handler:v17];
}

void sub_10007B2E0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    if (!os_log_GKGeneral) {
      id v13 = (id)GKOSLoggers();
    }
    id v14 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      long long v26 = v7;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "In-process score submission failed due to error: %@", buf, 0xCu);
    }
    id v15 = [GKScoreNetworkRequest alloc];
    uint64_t v16 = *(void *)(a1 + 32);
    uint64_t v17 = [*(id *)(a1 + 40) clientProxy];
    id v18 = [v17 bundleIdentifier];
    int8x16_t v19 = [(GKScoreNetworkRequest *)v15 initWithScores:v16 bundleID:v18 eligibleChallenges:*(void *)(a1 + 48)];

    id v20 = +[GKNetworkRequestManager commonNetworkRequestManager];
    id v21 = [*(id *)(a1 + 40) clientProxy];
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    void v22[2] = sub_10007B57C;
    v22[3] = &unk_1002D3BC8;
    id v23 = *(id *)(a1 + 56);
    id v24 = *(id *)(a1 + 64);
    [v20 writeToNetwork:v19 clientProxy:v21 handler:v22];
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers();
    }
    id v9 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = *(void *)(a1 + 72);
      id v11 = v9;
      int8x16_t v12 = +[NSNumber numberWithInteger:v10];
      *(_DWORD *)buf = 138412290;
      long long v26 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Score %@ submitted successfully in-process", buf, 0xCu);
    }
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
}

uint64_t sub_10007B57C(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setError:a2];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_10007B5C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!os_log_GKGeneral) {
    id v4 = (id)GKOSLoggers();
  }
  id v5 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(a1 + 64);
    id v7 = v5;
    id v8 = +[NSNumber numberWithInteger:v6];
    *(_DWORD *)buf = 138412290;
    id v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Score %@ submitted via store and forward for classic", buf, 0xCu);
  }
  id v9 = [GKScoreNetworkRequest alloc];
  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = [*(id *)(a1 + 40) clientProxy];
  int8x16_t v12 = [v11 bundleIdentifier];
  id v13 = [(GKScoreNetworkRequest *)v9 initWithScores:v10 bundleID:v12 eligibleChallenges:*(void *)(a1 + 48)];

  id v14 = +[GKNetworkRequestManager commonNetworkRequestManager];
  id v15 = [*(id *)(a1 + 40) clientProxy];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  void v17[2] = sub_10007B7C8;
  void v17[3] = &unk_1002D3BC8;
  id v18 = *(id *)(a1 + 56);
  id v19 = v3;
  id v16 = v3;
  [v14 writeToNetwork:v13 clientProxy:v15 handler:v17];
}

uint64_t sub_10007B7C8(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setError:a2];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_10007B810(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  id v3 = [*(id *)(a1 + 32) error];

  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    id v5 = (void *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100082874(v2, v5);
    }
  }
  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);
}

void sub_10007BB0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)GKScoreInternal);
  [v4 setDate:*(void *)(a1 + 32)];
  id v5 = [*(id *)(a1 + 40) identifier];
  [v4 setLeaderboardIdentifier:v5];

  [v4 setValue:*(void *)(a1 + 80)];
  [v4 setContext:*(void *)(a1 + 88)];
  [v4 setPlayer:*(void *)(a1 + 48)];
  id v23 = v4;
  uint64_t v6 = +[NSArray arrayWithObjects:&v23 count:1];
  +[GKScoreSubmissionBulletin presentForScores:v6];

  id v7 = [v4 serverRepresentation];
  id v8 = [v7 mutableCopy];

  id v9 = [v4 leaderboardIdentifier];
  [v8 setObject:v9 forKeyedSubscript:@"leaderboard-id"];

  uint64_t v10 = [*(id *)(a1 + 48) playerID];
  [v8 setObject:v10 forKeyedSubscript:@"player-id"];

  uint64_t v11 = *(void *)(a1 + 56);
  if (v11) {
    [v8 setObject:v11 forKeyedSubscript:@"challenges"];
  }
  int8x16_t v12 = +[GKNetworkRequestManager commonNetworkRequestManager];
  id v13 = [*(id *)(a1 + 64) clientProxy];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  void v18[2] = sub_10007BD84;
  void v18[3] = &unk_1002D7278;
  id v19 = v4;
  int8x16_t v17 = *(int8x16_t *)(a1 + 56);
  id v14 = (id)v17.i64[0];
  int8x16_t v20 = vextq_s8(v17, v17, 8uLL);
  id v21 = *(id *)(a1 + 72);
  id v22 = v3;
  id v15 = v3;
  id v16 = v4;
  [v12 issueRequest:v8 bagKey:@"gk-submit-instance-score" clientProxy:v13 handler:v18];
}

void sub_10007BD84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2 || a3)
  {
    id v5 = [GKInstanceScoreNetworkRequest alloc];
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = [*(id *)(a1 + 40) clientProxy];
    id v8 = [v7 bundleIdentifier];
    id v9 = [(GKInstanceScoreNetworkRequest *)v5 initWithInstanceScore:v6 bundleID:v8 challenges:*(void *)(a1 + 48)];

    uint64_t v10 = +[GKNetworkRequestManager commonNetworkRequestManager];
    uint64_t v11 = [*(id *)(a1 + 40) clientProxy];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_10007BEF4;
    void v12[3] = &unk_1002D3BC8;
    id v13 = *(id *)(a1 + 56);
    id v14 = *(id *)(a1 + 64);
    [v10 writeToNetwork:v9 clientProxy:v11 handler:v12];
  }
  else
  {
    id v4 = *(void (**)(void))(*(void *)(a1 + 64) + 16);
    v4();
  }
}

uint64_t sub_10007BEF4(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setError:a2];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_10007BF3C(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  id v3 = [*(id *)(a1 + 32) error];

  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    id v5 = (void *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100082904(v2, v5);
    }
  }
  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);
}

void sub_10007C2A4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v6)
  {
    id v8 = v6;
  }
  else
  {
    if (v5)
    {
      id v9 = [v5 objectForKeyedSubscript:@"status"];
      id v10 = [v9 longValue];

      if (!v10)
      {
        id v12 = objc_alloc_init((Class)GKLeaderboardSummaryInternal);
        id v18 = [v5 objectForKeyedSubscript:@"start-date"];
        [v12 setStartDate:[v18 longValue]];

        id v19 = [v5 objectForKeyedSubscript:@"duration"];
        [v12 setDuration:[v19 longValue]];

        int8x16_t v20 = [v5 objectForKeyedSubscript:@"next-start-date"];
        [v12 setNextStartDate:[v20 longValue]];

        id v21 = [v5 objectForKeyedSubscript:@"score-value"];
        [v12 setScoreValue:[v21 longValue]];

        id v22 = [v5 objectForKeyedSubscript:@"rank"];
        [v12 setRank:[v22 longValue]];

        id v23 = [v5 objectForKeyedSubscript:@"total-entries"];
        [v12 setTotalEntries:[v23 longValue]];

        id v24 = [v5 objectForKeyedSubscript:@"friend-rank"];
        [v12 setFriendRank:[v24 longValue]];

        long long v25 = [v5 objectForKeyedSubscript:@"total-friend-entries"];
        [v12 setTotalFriendEntries:[v25 longValue]];

        long long v26 = [v5 objectForKeyedSubscript:@"context"];
        [v12 setContext:[v26 longValue]];

        id v27 = [v5 objectForKeyedSubscript:@"leaderboard-id"];
        [v12 setLeaderboardID:v27];

        uint64_t v28 = [v5 objectForKeyedSubscript:@"base-leaderboard-id"];
        [v12 setBaseLeaderboardID:v28];

        id v29 = [v5 objectForKeyedSubscript:@"group-id"];
        [v12 setGroupID:v29];

        char v30 = [v5 objectForKeyedSubscript:@"title"];
        [v12 setTitle:v30];

        id v31 = [v5 objectForKeyedSubscript:@"type"];
        [v12 setType:v31];

        uint64_t v32 = [v5 objectForKeyedSubscript:@"formatted-score-value"];
        [v12 setFormattedScoreValue:v32];

        uint64_t v11 = 0;
        goto LABEL_7;
      }
    }
    id v8 = +[NSError userErrorForCode:3 underlyingError:0];
  }
  uint64_t v11 = v8;
  id v12 = 0;
LABEL_7:
  id v13 = [*(id *)(a1 + 32) clientProxy];
  id v14 = [v13 replyQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10007C6A0;
  block[3] = &unk_1002D48D8;
  id v15 = *(id *)(a1 + 40);
  id v35 = v11;
  id v36 = v15;
  id v34 = v12;
  id v16 = v11;
  id v17 = v12;
  dispatch_async(v14, block);
}

uint64_t sub_10007C6A0(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_10007C7A4(uint64_t a1, void *a2, void *a3)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_10007C858;
  void v7[3] = &unk_1002D7618;
  __int16 v8 = *(_WORD *)(a1 + 40);
  id v5 = a2;
  id v6 = [a3 _gkFilterWithBlock:v7];
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:v5];
}

id sub_10007C858(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if ((*(unsigned char *)(a1 + 32)
     || ([v3 lastReportedDate], id v5 = objc_claimAutoreleasedReturnValue(), v5, v5))
    && (*(unsigned char *)(a1 + 33)
     || ![v4 isHidden]
     || [v4 isCompleted]))
  {
    id v6 = v4;
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

void sub_10007CA00(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[GKService serviceFromService:*(void *)(a1 + 32)];
  id v5 = [*(id *)(a1 + 40) bundleIdentifier];
  id v17 = v5;
  id v6 = +[NSArray arrayWithObjects:&v17 count:1];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_10007CB64;
  v10[3] = &unk_1002D7780;
  __int16 v16 = *(_WORD *)(a1 + 72);
  id v11 = *(id *)(a1 + 48);
  id v12 = v3;
  uint64_t v7 = *(void *)(a1 + 32);
  __int16 v8 = *(void **)(a1 + 56);
  uint64_t v15 = *(void *)(a1 + 64);
  uint64_t v13 = v7;
  id v14 = v8;
  id v9 = v3;
  [v4 getGameMetadataForBundleIDs:v6 handler:v10];
}

void sub_10007CB64(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = [a2 firstObject];
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  void v22[2] = sub_10007CDA8;
  v22[3] = &unk_1002D76B8;
  __int16 v25 = *(_WORD *)(a1 + 72);
  id v23 = *(id *)(a1 + 32);
  id v7 = v6;
  id v24 = v7;
  __int16 v8 = objc_retainBlock(v22);
  if (*(unsigned char *)(a1 + 64))
  {
    id v9 = objc_alloc_init((Class)NSMutableArray);
    id v10 = *(void **)(a1 + 40);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    void v20[2] = sub_10007CFF8;
    v20[3] = &unk_1002D7730;
    id v21 = v9;
    id v11 = v9;
    [v10 enumerateKeysAndObjectsUsingBlock:v20];
    id v12 = +[GKContactsIntegrationController sharedController];
    uint64_t v13 = [*(id *)(a1 + 48) clientProxy];
    id v14 = [v13 replyQueue];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    void v15[2] = sub_10007D17C;
    v15[3] = &unk_1002D7758;
    id v18 = *(id *)(a1 + 56);
    id v19 = v8;
    id v16 = *(id *)(a1 + 40);
    id v17 = v5;
    [v12 populateContactInfoForProfiles:v11 replyOnQueue:v14 withCompletionHandler:v15];
  }
}

id sub_10007CDA8(uint64_t a1, uint64_t a2)
{
  id v3 = +[GKGameStatServicePrivate filterUnreportedAndHiddenAchievements:a2 includeUnreported:*(unsigned __int8 *)(a1 + 48) includeHidden:*(unsigned __int8 *)(a1 + 49)];
  id v4 = *(void **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_10007CE84;
  v9[3] = &unk_1002D7690;
  id v5 = v3;
  id v10 = v5;
  id v11 = *(id *)(a1 + 40);
  [v4 enumerateObjectsUsingBlock:v9];
  id v6 = v11;
  id v7 = v5;

  return v7;
}

void sub_10007CE84(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 playerID];
  id v5 = [v4 length];

  if (v5)
  {
    id v6 = *(void **)(a1 + 32);
    id v7 = [v3 playerID];
    __int16 v8 = [v6 objectForKeyedSubscript:v7];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_10007CF80;
    v9[3] = &unk_1002D7668;
    id v10 = *(id *)(a1 + 40);
    id v11 = v3;
    [v8 enumerateObjectsUsingBlock:v9];
  }
}

void sub_10007CF80(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 setGameHint:v3];
  id v5 = [*(id *)(a1 + 40) minimalInternal];
  [v4 setPlayer:v5];
}

void sub_10007CFF8(uint64_t a1, uint64_t a2, void *a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10007D084;
  v4[3] = &unk_1002D7708;
  id v5 = *(id *)(a1 + 32);
  [a3 enumerateObjectsUsingBlock:v4];
}

void sub_10007D084(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 friendsWhoHaveThis];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10007D124;
  v4[3] = &unk_1002D76E0;
  id v5 = *(id *)(a1 + 32);
  [v3 enumerateObjectsUsingBlock:v4];
}

void sub_10007D124(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [a2 friendPlayer];
  [v2 addObject:v3];
}

void sub_10007D17C(void *a1)
{
  uint64_t v2 = os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    id v3 = (id)GKOSLoggers();
    uint64_t v2 = os_log_GKGeneral;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_100082994();
  }
  uint64_t v4 = a1[6];
  id v5 = (*(void (**)(void))(a1[7] + 16))();
  (*(void (**)(uint64_t, void *, void))(v4 + 16))(v4, v5, a1[5]);
}

void sub_10007D470(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 80);
  uint64_t v9 = *(void *)(a1 + 88);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  void v15[2] = sub_10007D570;
  v15[3] = &unk_1002D77D0;
  uint64_t v10 = *(void *)(a1 + 64);
  id v11 = *(id *)(a1 + 72);
  uint64_t v12 = *(void *)(a1 + 112);
  id v17 = v3;
  uint64_t v18 = v12;
  id v16 = v11;
  long long v14 = *(_OWORD *)(a1 + 96);
  id v13 = v3;
  [v4 getEntriesForLeaderboard:v5 gameDescriptor:v6 localPlayer:v7 playerScope:v8 timeScope:v9 range:v14 players:v10 handler:v15];
}

void sub_10007D570(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9 = a3;
  uint64_t v10 = *(void **)(a1 + 32);
  id v11 = a2;
  [v10 setError:a5];
  [*(id *)(a1 + 32) setResult:v11];

  [*(id *)(a1 + 32) setObject:v9 forKeyedSubscript:@"entries"];
  uint64_t v12 = +[NSNumber numberWithInteger:a4];
  [*(id *)(a1 + 32) setObject:v12 forKeyedSubscript:@"totalPlayerCount"];

  if (!a5 && (*(unsigned char *)(a1 + 48) & 1) != 0)
  {
    id v13 = [v9 _gkValuesForKeyPath:@"player"];
    long long v14 = *(void **)(a1 + 32);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    void v16[2] = sub_10007D6C8;
    void v16[3] = &unk_1002D51F8;
    id v17 = v13;
    id v15 = v13;
    [v14 performOnManagedObjectContext:v16];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10007D6C8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v7 = a3;
  id v5 = a2;
  uint64_t v6 = +[GKContactsIntegrationController sharedController];
  [v6 populateContactInfoForProfiles:*(void *)(a1 + 32) withContext:v5];

  v7[2]();
}

void sub_10007D75C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v7 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"entries"];
  uint64_t v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"totalPlayerCount"];
  id v5 = [v4 integerValue];
  uint64_t v6 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *, id, void *))(v2 + 16))(v2, v7, v3, v5, v6);
}

void sub_10007DA14(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    v4();
  }
  else
  {
    id v5 = [a2 lastObject];
    uint64_t v6 = [v5 defaultLeaderboardIdentifier];
    id v7 = *(void **)(a1 + 32);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    void v16[2] = sub_10007DC64;
    void v16[3] = &unk_1002D7820;
    id v17 = v6;
    id v8 = v6;
    id v9 = [v7 _gkMapWithBlock:v16];
    v18[0] = @"game";
    uint64_t v10 = [*(id *)(a1 + 40) dictionaryForRequest];
    v18[1] = @"scores";
    v19[0] = v10;
    v19[1] = v9;
    id v11 = +[NSDictionary dictionaryWithObjects:v19 forKeys:v18 count:2];

    uint64_t v12 = +[GKNetworkRequestManager commonNetworkRequestManager];
    id v13 = [*(id *)(a1 + 48) clientProxy];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    void v14[2] = sub_10007DD68;
    void v14[3] = &unk_1002D3F48;
    id v15 = *(id *)(a1 + 56);
    [v12 issueRequest:v11 bagKey:@"gk-get-hypothetical-score-rank" clientProxy:v13 handler:v14];
  }
}

id sub_10007DC64(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 leaderboardIdentifier];
  if (!v4) {
    id v4 = *(id *)(a1 + 32);
  }
  v9[0] = @"score-value";
  id v5 = [v3 value];

  uint64_t v6 = +[NSNumber numberWithLongLong:v5];
  v9[1] = @"category";
  v10[0] = v6;
  v10[1] = v4;
  id v7 = +[NSDictionary dictionaryWithObjects:v10 forKeys:v9 count:2];

  return v7;
}

void sub_10007DD68(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = [a2 objectForKeyedSubscript:@"results"];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_10007DEE8(id a1, NSDictionary *a2, unint64_t a3)
{
  return [(NSDictionary *)a2 objectForKeyedSubscript:@"bundle-id"];
}

void sub_10007DEF8(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a2;
  id v6 = [v4 objectAtIndexedSubscript:a3];
  [v5 updateWithGameDescriptor:v6];
}

void sub_10007E158(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = v8;
  if (!v7 || v8)
  {
    if (!v8)
    {
      id v9 = +[NSError userErrorForCode:3 underlyingError:0];
    }
    if (!os_log_GKGeneral) {
      id v18 = (id)GKOSLoggers();
    }
    id v19 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      id v28 = v7;
      __int16 v29 = 2112;
      char v30 = v9;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Error getting games friends played from server plist: %@, error: %@", buf, 0x16u);
    }
    uint64_t v20 = *(void *)(a1 + 48);
    if (v20) {
      (*(void (**)(uint64_t, void, void *))(v20 + 16))(v20, 0, v9);
    }
  }
  else
  {
    uint64_t v10 = +[NSDate dateWithTimeIntervalSinceNow:a4];
    if (!os_log_GKGeneral) {
      id v11 = (id)GKOSLoggers();
    }
    uint64_t v12 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v28 = v10;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Games friends played data new expiration date is: %@", buf, 0xCu);
    }
    id v13 = [*(id *)(a1 + 32) transactionGroupBypassingMultiUser];
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    void v21[2] = sub_10007E3D4;
    v21[3] = &unk_1002D7900;
    id v14 = v7;
    uint64_t v15 = *(void *)(a1 + 32);
    id v16 = *(void **)(a1 + 40);
    id v22 = v14;
    uint64_t v23 = v15;
    id v24 = v16;
    id v25 = v10;
    id v26 = *(id *)(a1 + 48);
    id v17 = v10;
    [v13 performOnManagedObjectContext:v21];

    id v9 = 0;
  }
}

void sub_10007E3D4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  long long v47 = a3;
  id v6 = objc_alloc_init((Class)NSMutableDictionary);
  id v7 = +[GKCacheObject fetchRequestForContext:v5];
  id v8 = +[NSPredicate predicateWithFormat:@"friendBiDirectional == %@", &off_1002F1FA0];
  [v7 setPredicate:v8];

  long long v46 = v7;
  id v9 = [v5 executeFetchRequest:v7 error:0];
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  id v10 = [v9 countByEnumeratingWithState:&v59 objects:v68 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = *(void *)v60;
    do
    {
      for (unint64_t i = 0; i != v11; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v60 != v12) {
          objc_enumerationMutation(v9);
        }
        id v14 = *(void **)(*((void *)&v59 + 1) + 8 * i);
        uint64_t v15 = [v14 playerID];
        [v6 setObject:v14 forKeyedSubscript:v15];
      }
      id v11 = [v9 countByEnumeratingWithState:&v59 objects:v68 count:16];
    }
    while (v11);
  }
  id v16 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"results"];
  if (!os_log_GKGeneral) {
    id v17 = (id)GKOSLoggers();
  }
  id v18 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    id v19 = v18;
    uint64_t v20 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v9 count]);
    id v21 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v16 count]);
    *(_DWORD *)buf = 138412546;
    uint64_t v65 = v20;
    __int16 v66 = 2112;
    uint64_t v67 = v21;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Number of cached friends: %@, games and players: %@", buf, 0x16u);
  }
  long long v44 = [v16 _gkMapWithBlock:&stru_1002D78B0];
  id v22 = [[*(id *)(a1 + 40) ensureGameObjectsForDescriptors:moc:];
  uint64_t v43 = +[FriendsPlayedGameList _gkFetchRequest];
  id v40 = [v5 executeFetchRequest:error:];
  uint64_t v23 = [FriendsPlayedGameList alloc];
  id v24 = +[FriendsPlayedGameList entity];
  id v25 = [(FriendsPlayedGameList *)v23 initWithEntity:v24 insertIntoManagedObjectContext:v5];

  id v26 = objc_alloc_init((Class)NSMutableSet);
  id v27 = +[NSMutableArray array];
  v52[0] = _NSConcreteStackBlock;
  v52[1] = 3221225472;
  v52[2] = sub_10007E974;
  v52[3] = &unk_1002D78D8;
  id v41 = v22;
  id v53 = v41;
  id v28 = v5;
  id v54 = v28;
  id v42 = v6;
  id v55 = v42;
  id v56 = *(id *)(a1 + 48);
  id v29 = v27;
  id v57 = v29;
  id v30 = v26;
  id v58 = v30;
  long long v45 = v16;
  [v16 enumerateObjectsUsingBlock:v52];
  [(FriendsPlayedGameList *)v25 setEntries:v30];
  [(FriendsPlayedGameList *)v25 setExpirationDate:*(void *)(a1 + 56)];
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  id v31 = v40;
  id v32 = [v31 countByEnumeratingWithState:&v48 objects:v63 count:16];
  if (v32)
  {
    id v33 = v32;
    uint64_t v34 = *(void *)v49;
    do
    {
      for (j = 0; j != v33; j = (char *)j + 1)
      {
        if (*(void *)v49 != v34) {
          objc_enumerationMutation(v31);
        }
        [v28 deleteObject:*(void *)(*((void *)&v48 + 1) + 8 * (void)j)];
      }
      id v33 = [v31 countByEnumeratingWithState:&v48 objects:v63 count:16];
    }
    while (v33);
  }

  id v36 = [*(id *)(a1 + 40) clientProxy];
  uint64_t v37 = [*(id *)(a1 + 40) currentLocalPlayer];
  id v38 = +[GKService serviceWithTransport:0 forClient:v36 localPlayer:v37];

  [v38 notifyWidgetFriendListUpdated];
  uint64_t v39 = *(void *)(a1 + 64);
  if (v39) {
    (*(void (**)(uint64_t, id, void))(v39 + 16))(v39, v29, 0);
  }
  v47[2](v47);
}

id sub_10007E964(id a1, NSDictionary *a2, unint64_t a3)
{
  return [(NSDictionary *)a2 objectForKeyedSubscript:@"game"];
}

void sub_10007E974(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = [*(id *)(a1 + 32) objectAtIndexedSubscript:a3];
  id v41 = [v6 internalRepresentation];
  id v7 = [FriendPlayedGameEntry alloc];
  id v8 = +[FriendPlayedGameEntry entity];
  id v9 = [(FriendPlayedGameEntry *)v7 initWithEntity:v8 insertIntoManagedObjectContext:*(void *)(a1 + 40)];

  id v35 = v9;
  uint64_t v37 = v6;
  [(FriendPlayedGameEntry *)v9 setGame:v6];
  id v40 = objc_alloc_init((Class)NSMutableSet);
  id v36 = v5;
  id v10 = [v5 objectForKeyedSubscript:@"friends"];
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  id v11 = [v10 countByEnumeratingWithState:&v42 objects:v48 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v43;
    uint64_t v38 = *(void *)v43;
    uint64_t v39 = v10;
    do
    {
      for (unint64_t i = 0; i != v12; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v43 != v13) {
          objc_enumerationMutation(v10);
        }
        uint64_t v15 = *(void **)(*((void *)&v42 + 1) + 8 * i);
        id v16 = [v15 objectForKeyedSubscript:@"player-id"];
        if (v16)
        {
          id v17 = [*(id *)(a1 + 48) objectForKeyedSubscript:v16];

          if (v17)
          {
            id v18 = [v15 objectForKeyedSubscript:@"played-at"];
            if (v18)
            {
              if (!os_log_GKGeneral) {
                id v19 = (id)GKOSLoggers();
              }
              uint64_t v20 = os_log_GKDaemon;
              if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 138412290;
                long long v47 = v15;
                _os_log_debug_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Using friendInfo: %@", buf, 0xCu);
              }
              id v21 = [FriendPlayedEntry alloc];
              id v22 = +[FriendPlayedEntry entity];
              uint64_t v23 = [(FriendPlayedEntry *)v21 initWithEntity:v22 insertIntoManagedObjectContext:*(void *)(a1 + 40)];

              [v18 doubleValue];
              id v25 = +[NSDate dateWithTimeIntervalSince1970:v24 / 1000.0];
              [(FriendPlayedEntry *)v23 setPlayedAt:v25];
              id v26 = [*(id *)(a1 + 48) objectForKeyedSubscript:v16];
              [(FriendPlayedEntry *)v23 setFriend:v26];

              [v40 addObject:v23];
              id v27 = objc_alloc((Class)GKFriendPlayerInternal);
              id v28 = [(FriendPlayedEntry *)v23 friend];
              id v29 = [v27 initWithCacheObject:v28];

              [v29 setLastPlayedGame:v41];
              [v29 setLastPlayedDate:v25];
              id v30 = *(void **)(a1 + 56);
              if (!v30
                || ([v37 bundleID],
                    id v31 = objc_claimAutoreleasedReturnValue(),
                    unsigned int v32 = [v30 containsObject:v31],
                    v31,
                    v32))
              {
                [*(id *)(a1 + 64) addObject:v29];
              }

              uint64_t v13 = v38;
              id v10 = v39;
            }
            else
            {
              if (!os_log_GKGeneral) {
                id v33 = (id)GKOSLoggers();
              }
              uint64_t v34 = os_log_GKDaemon;
              if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138412290;
                long long v47 = v15;
                _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "Missing required field, skipping friendInfo: %@", buf, 0xCu);
              }
            }
          }
        }
      }
      id v12 = [v10 countByEnumeratingWithState:&v42 objects:v48 count:16];
    }
    while (v12);
  }
  [(FriendPlayedGameEntry *)v35 setFriendsPlayed:v40];
  [*(id *)(a1 + 72) addObject:v35];
}

void sub_10007F1D0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v9 = +[GKGameStatServicePrivate currentFriendsPlayedList:a2];
  if (v9) {
    [v9 setExpirationDate:0];
  }
  id v6 = [*(id *)(a1 + 32) clientProxy];
  id v7 = [*(id *)(a1 + 32) currentLocalPlayer];
  id v8 = +[GKService serviceWithTransport:0 forClient:v6 localPlayer:v7];

  [v8 expireFriendList];
  [v8 notifyWidgetFriendListUpdated];
  v5[2](v5);
}

void sub_10007F44C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v27[0] = 0;
  v27[1] = v27;
  v27[2] = 0x3032000000;
  v27[3] = sub_10006A568;
  void v27[4] = sub_10006A578;
  id v28 = 0;
  if (v6)
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  else
  {
    id v7 = objc_alloc_init((Class)NSMutableDictionary);
    if (*(void *)(a1 + 72))
    {
      id v8 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:");
      [v7 setObject:v8 forKeyedSubscript:@"limit"];
    }
    uint64_t v9 = *(void *)(a1 + 32);
    if (v9) {
      [v7 setObject:v9 forKeyedSubscript:@"type"];
    }
    if (*(void *)(a1 + 80))
    {
      id v10 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:");
      [v7 setObject:v10 forKeyedSubscript:@"within-secs"];
    }
    id v11 = *(void **)(a1 + 40);
    id v12 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKGameStatService.m", 3162, "-[GKGameStatServicePrivate getGamesFriendsPlayed:type:fetchOptions:withinSecs:matchingBundleIDs:handler:]_block_invoke");
    uint64_t v13 = [*(id *)(a1 + 48) playerID];
    id v14 = [v11 transactionGroupWithName:v12 forPlayerID:v13];

    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    void v20[2] = sub_10007F6D8;
    v20[3] = &unk_1002D7950;
    id v25 = v27;
    id v15 = *(id *)(a1 + 56);
    uint64_t v16 = *(void *)(a1 + 40);
    id v21 = v15;
    uint64_t v22 = v16;
    id v17 = v7;
    id v23 = v17;
    id v18 = *(id *)(a1 + 64);
    uint64_t v19 = *(void *)(a1 + 88);
    id v24 = v18;
    uint64_t v26 = v19;
    [v14 performOnManagedObjectContext:v20];
  }
  _Block_object_dispose(v27, 8);
}

void sub_10007F6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10007F6D8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = +[GKGameStatServicePrivate currentFriendsPlayedList:v5];
  uint64_t v51 = a1;
  if (v7)
  {
    long long v45 = v6;
    id v46 = v5;
    id v8 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v9 = *(void *)(*(void *)(a1 + 64) + 8);
    id v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;

    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v44 = v7;
    id obj = [v7 entries];
    uint64_t v11 = a1;
    id v49 = [obj countByEnumeratingWithState:&v56 objects:v63 count:16];
    if (v49)
    {
      uint64_t v48 = *(void *)v57;
      do
      {
        uint64_t v12 = 0;
        do
        {
          if (*(void *)v57 != v48) {
            objc_enumerationMutation(obj);
          }
          uint64_t v50 = v12;
          uint64_t v13 = *(void **)(*((void *)&v56 + 1) + 8 * v12);
          id v14 = [v13 game];
          id v15 = [v14 internalRepresentation];

          long long v54 = 0u;
          long long v55 = 0u;
          long long v52 = 0u;
          long long v53 = 0u;
          uint64_t v16 = [v13 friendsPlayed];
          id v17 = [v16 countByEnumeratingWithState:&v52 objects:v62 count:16];
          if (v17)
          {
            id v18 = v17;
            uint64_t v19 = *(void *)v53;
            do
            {
              for (unint64_t i = 0; i != v18; unint64_t i = (char *)i + 1)
              {
                if (*(void *)v53 != v19) {
                  objc_enumerationMutation(v16);
                }
                id v21 = *(void **)(*((void *)&v52 + 1) + 8 * i);
                uint64_t v22 = *(void **)(v11 + 32);
                if (!v22) {
                  goto LABEL_14;
                }
                id v23 = [v13 game];
                id v24 = [v23 bundleID];
                unsigned int v25 = [v22 containsObject:v24];

                uint64_t v11 = v51;
                if (v25)
                {
LABEL_14:
                  id v26 = objc_alloc((Class)GKFriendPlayerInternal);
                  id v27 = [v21 friend];
                  id v28 = [v26 initWithCacheObject:v27];

                  [v28 setLastPlayedGame:v15];
                  id v29 = [v21 playedAt];
                  [v28 setLastPlayedDate:v29];

                  [*(id *)(*(void *)(*(void *)(v11 + 64) + 8) + 40) addObject:v28];
                }
              }
              id v18 = [v16 countByEnumeratingWithState:&v52 objects:v62 count:16];
            }
            while (v18);
          }

          uint64_t v12 = v50 + 1;
        }
        while ((id)(v50 + 1) != v49);
        id v49 = [obj countByEnumeratingWithState:&v56 objects:v63 count:16];
      }
      while (v49);
    }

    a1 = v11;
    id v6 = v45;
    id v5 = v46;
    id v7 = v44;
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40))
  {
    id v30 = [v7 expirationDate];
    unsigned int v31 = [v7 _gkIsExpired:v30];

    if (v31)
    {
      if (!os_log_GKGeneral) {
        id v32 = (id)GKOSLoggers();
      }
      id v33 = (void *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        uint64_t v34 = v33;
        id v35 = [v7 expirationDate];
        *(_DWORD *)buf = 138412290;
        long long v61 = v35;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "Games friends played cache data is expired, refreshing from server: %@", buf, 0xCu);
      }
      [*(id *)(v51 + 40) loadGamesFriendsPlayed:*(void *)(v51 + 48) matchingBundleIDs:*(void *)(v51 + 32) handler:0];
    }
    else
    {
      if (!os_log_GKGeneral) {
        id v40 = (id)GKOSLoggers();
      }
      id v41 = os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "Using games friends played cache data as it is still valid", buf, 2u);
      }
    }
    if (*(unsigned char *)(v51 + 72))
    {
      long long v42 = +[GKContactsIntegrationController sharedController];
      [v42 populateContactInfoForProfiles:*(void *)(*(void *)(*(void *)(v51 + 64) + 8) + 40) withContext:v5];
    }
    uint64_t v43 = *(void *)(v51 + 56);
    if (v43) {
      (*(void (**)(uint64_t, void, void))(v43 + 16))(v43, *(void *)(*(void *)(*(void *)(v51 + 64) + 8) + 40), 0);
    }
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v36 = (id)GKOSLoggers();
    }
    uint64_t v37 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v38 = v37;
      uint64_t v39 = [v7 expirationDate];
      *(_DWORD *)buf = 138412290;
      long long v61 = v39;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "No games friends played cache data, refreshing from server: %@", buf, 0xCu);
    }
    [*(id *)(v51 + 40) loadGamesFriendsPlayed:*(void *)(v51 + 48) matchingBundleIDs:*(void *)(v51 + 32) handler:*(void *)(v51 + 56)];
  }
  v6[2](v6);
}

void sub_100080948(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = [*(id *)(a1 + 32) transactionGroupBypassingMultiUser];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  void v16[2] = sub_100080A68;
  void v16[3] = &unk_1002D79F0;
  double v23 = a4;
  id v17 = v7;
  id v18 = v8;
  id v10 = *(id *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(void **)(a1 + 40);
  id v22 = v10;
  uint64_t v19 = v11;
  id v20 = v12;
  id v21 = v9;
  id v13 = v9;
  id v14 = v8;
  id v15 = v7;
  [v13 performOnManagedObjectContext:v16];
}

void sub_100080A68(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v58[0] = 0;
  v58[1] = v58;
  v58[2] = 0x3032000000;
  v58[3] = sub_10006A568;
  v58[4] = sub_10006A578;
  id v59 = 0;
  id v7 = +[NSDate dateWithTimeIntervalSinceNow:*(double *)(a1 + 80)];
  uint64_t v52 = 0;
  long long v53 = &v52;
  uint64_t v54 = 0x3032000000;
  long long v55 = sub_10006A568;
  long long v56 = sub_10006A578;
  id v57 = 0;
  if (!os_log_GKGeneral) {
    id v8 = (id)GKOSLoggers();
  }
  uint64_t v9 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412546;
    uint64_t v62 = v10;
    __int16 v63 = 2112;
    unsigned __int8 v64 = v7;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "THE reengagement server response is: %@ with expiration of: %@", buf, 0x16u);
  }
  uint64_t v11 = *(void **)(a1 + 40);
  if (v11)
  {
    uint64_t v12 = v53;
    id v13 = v11;
    id v14 = (void *)v12[5];
    void v12[5] = (uint64_t)v13;
LABEL_7:

    if (!os_log_GKGeneral) {
      id v15 = (id)GKOSLoggers();
    }
    uint64_t v16 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v17 = *(void *)(a1 + 32);
      id v18 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138412546;
      uint64_t v62 = v17;
      __int16 v63 = 2112;
      unsigned __int8 v64 = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "error getting reengagement from server plist %@ error: %@", buf, 0x16u);
    }
    uint64_t v19 = *(void *)(a1 + 72);
    if (v19) {
      (*(void (**)(uint64_t, void, void, uint64_t))(v19 + 16))(v19, 0, 0, v53[5]);
    }
    v6[2](v6);
    goto LABEL_26;
  }
  id v20 = *(void **)(a1 + 32);
  if (!v20)
  {
    uint64_t v32 = +[NSError userErrorForCode:3 underlyingError:0];
    id v14 = (void *)v53[5];
    v53[5] = v32;
    goto LABEL_7;
  }
  id v21 = [v20 objectForKeyedSubscript:@"results"];
  if ([v21 count])
  {
    id v22 = [v21 objectAtIndexedSubscript:0];
    double v23 = *(void **)(a1 + 48);
    id v24 = [v22 objectForKeyedSubscript:@"game"];
    unsigned int v25 = [v23 ensureGameObject:v5 gameDescriptor:v24];

    id v26 = *(void **)(a1 + 48);
    id v27 = [v22 objectForKeyedSubscript:@"game"];
    uint64_t v60 = *(void *)(a1 + 56);
    id v28 = +[NSArray arrayWithObjects:&v60 count:1];
    v40[0] = _NSConcreteStackBlock;
    v40[1] = 3221225472;
    v40[2] = sub_100080FEC;
    v40[3] = &unk_1002D79C8;
    id v41 = *(id *)(a1 + 40);
    id v48 = *(id *)(a1 + 72);
    id v49 = v6;
    id v29 = *(id *)(a1 + 64);
    uint64_t v50 = v58;
    uint64_t v30 = *(void *)(a1 + 48);
    id v42 = v29;
    uint64_t v43 = v30;
    id v44 = v21;
    id v45 = *(id *)(a1 + 56);
    id v46 = v7;
    id v31 = v25;
    id v47 = v31;
    uint64_t v51 = &v52;
    [v26 fetchAchievementsForGameDescriptor:v27 players:v28 context:v5 handler:v40];
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v33 = (id)GKOSLoggers();
    }
    uint64_t v34 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v35 = *(void *)(a1 + 32);
      id v36 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138412546;
      uint64_t v62 = v35;
      __int16 v63 = 2112;
      unsigned __int8 v64 = v36;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "No reengagement results from server plist %@ error: %@", buf, 0x16u);
    }
    uint64_t v37 = +[NSError userErrorForCode:3 underlyingError:0];
    uint64_t v38 = (void *)v53[5];
    v53[5] = v37;

    uint64_t v39 = *(void *)(a1 + 72);
    if (v39) {
      (*(void (**)(uint64_t, void, void, uint64_t))(v39 + 16))(v39, 0, 0, v53[5]);
    }
    v6[2](v6);
  }

LABEL_26:
  _Block_object_dispose(&v52, 8);

  _Block_object_dispose(v58, 8);
}

void sub_100080FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

void sub_100080FEC(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  if (*(void *)(a1 + 32))
  {
    uint64_t v8 = *(void *)(a1 + 88);
    if (v8) {
      (*(void (**)(uint64_t, void, void))(v8 + 16))(v8, 0, 0);
    }
    (*(void (**)(void))(*(void *)(a1 + 96) + 16))();
  }
  else
  {
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    void v14[2] = sub_100081150;
    void v14[3] = &unk_1002D79A0;
    uint64_t v10 = *(void **)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v11 = *(void **)(a1 + 56);
    uint64_t v21 = *(void *)(a1 + 104);
    void v14[4] = v9;
    id v15 = v11;
    id v16 = *(id *)(a1 + 64);
    id v17 = *(id *)(a1 + 72);
    id v19 = *(id *)(a1 + 88);
    id v12 = *(id *)(a1 + 80);
    uint64_t v13 = *(void *)(a1 + 112);
    id v18 = v12;
    uint64_t v22 = v13;
    id v20 = *(id *)(a1 + 96);
    [v10 performOnManagedObjectContext:v14];
  }
}

void sub_100081150(uint64_t a1, uint64_t a2, void *a3)
{
  id v12 = a3;
  uint64_t v5 = [*(id *)(a1 + 32) processReengagementResults:*(void *)(a1 + 40) localPlayer:*(void *)(a1 + 48) expirationDate:*(void *)(a1 + 56) context:a2];
  uint64_t v6 = *(void *)(*(void *)(a1 + 88) + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  if (*(void *)(a1 + 72))
  {
    uint64_t v8 = [*(id *)(a1 + 64) internalRepresentation];
    if (!v8 || !*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40))
    {
      uint64_t v9 = +[NSError userErrorForCode:3 underlyingError:0];
      uint64_t v10 = *(void *)(*(void *)(a1 + 96) + 8);
      uint64_t v11 = *(void **)(v10 + 40);
      *(void *)(v10 + 40) = v9;
    }
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
  v12[2]();
  (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
}

uint64_t sub_1000812FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100081488(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  id v7 = a1[4];
  uint64_t v8 = [a1[5] playerID];
  uint64_t v9 = [v7 existingReengagementAchievement:v8 context:v5];

  if (!os_log_GKGeneral) {
    id v10 = (id)GKOSLoggers();
  }
  uint64_t v11 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    id v12 = v11;
    uint64_t v13 = [v9 expirationDate];
    *(_DWORD *)buf = 138412546;
    id v40 = v9;
    __int16 v41 = 2112;
    id v42 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "achievementEntry = %@ and expiry : %@", buf, 0x16u);
  }
  if (v9
    && ([v9 expirationDate],
        id v14 = objc_claimAutoreleasedReturnValue(),
        unsigned __int8 v15 = [v9 _gkIsExpired:v14],
        v14,
        (v15 & 1) == 0))
  {
    id v16 = [v9 bundleID];
    id v17 = +[GKGameCacheObject gameForBundleID:v16 context:v5];

    id v18 = [objc_alloc((Class)GKGameDescriptor) initWithCacheObject:v17];
    if (!os_log_GKGeneral) {
      id v19 = (id)GKOSLoggers();
    }
    id v20 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v21 = v20;
      uint64_t v22 = [v9 expirationDate];
      double v23 = [v9 bundleID];
      *(_DWORD *)buf = 138412546;
      id v40 = v22;
      __int16 v41 = 2112;
      id v42 = v23;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Using reengagement cache as it is still valid: %@ game: %@", buf, 0x16u);
    }
    id v24 = a1[4];
    unsigned int v25 = [a1[5] playerID];
    uint64_t v38 = v25;
    id v26 = +[NSArray arrayWithObjects:&v38 count:1];
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_100081824;
    v30[3] = &unk_1002D7A90;
    id v27 = a1[6];
    id v28 = a1[4];
    id v31 = v27;
    id v32 = v28;
    id v33 = v9;
    id v36 = a1[7];
    id v34 = v17;
    id v35 = a1[5];
    uint64_t v37 = v6;
    id v29 = v17;
    [v24 achievementsForPlayersAndGameDescriptor:v18 players:v26 context:v5 handler:v30];
  }
  else
  {
    [a1[4] loadReengagementAchievements:a1[5] handler:a1[7]];
    v6[2](v6);
  }
}

void sub_100081824(uint64_t a1)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100081908;
  v4[3] = &unk_1002D7A68;
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = *(void **)(a1 + 48);
  void v4[4] = *(void *)(a1 + 40);
  id v5 = v3;
  id v8 = *(id *)(a1 + 72);
  id v6 = *(id *)(a1 + 56);
  id v7 = *(id *)(a1 + 64);
  id v9 = *(id *)(a1 + 80);
  [v2 performOnManagedObjectContext:v4];
}

void sub_100081908(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = *(void **)(a1 + 40);
  id v7 = a3;
  id v8 = a2;
  id v9 = [v6 bundleID];
  id v10 = [*(id *)(a1 + 40) identifier];
  uint64_t v11 = [*(id *)(a1 + 40) percentComplete];
  [v11 doubleValue];
  double v13 = v12;
  id v14 = [*(id *)(a1 + 40) lastReportedDate];
  id v17 = [v5 findAchievementInternal:v9 identifier:v10 context:v8 existingPercent:v14 existingDate:v13];

  if (v17)
  {
    uint64_t v15 = *(void *)(a1 + 64);
    id v16 = [*(id *)(a1 + 48) internalRepresentation];
    (*(void (**)(uint64_t, id, void *, void))(v15 + 16))(v15, v17, v16, 0);
  }
  else
  {
    [*(id *)(a1 + 32) loadReengagementAchievements:*(void *)(a1 + 56) handler:*(void *)(a1 + 64)];
  }
  v7[2](v7);

  (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
}

void sub_100081C50(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = +[GKAchievementListCacheObject _gkFetchRequest];
  id v8 = [objc_alloc((Class)NSBatchDeleteRequest) initWithFetchRequest:v7];
  id v11 = 0;
  id v9 = [v5 executeRequest:v8 error:&v11];
  id v10 = v11;
  [*(id *)(a1 + 32) setError:v10];
  v6[2](v6);
}

void sub_100081D24(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = +[GKAchievementDescriptionListCacheObject _gkFetchRequest];
  id v8 = [objc_alloc((Class)NSBatchDeleteRequest) initWithFetchRequest:v7];
  id v11 = 0;
  id v9 = [v5 executeRequest:v8 error:&v11];
  id v10 = v11;
  [*(id *)(a1 + 32) setError:v10];
  v6[2](v6);
}

void sub_100081DF8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }
}

void sub_100081FF8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = +[GKLeaderboardListCacheObject _gkFetchRequest];
  id v8 = [objc_alloc((Class)NSBatchDeleteRequest) initWithFetchRequest:v7];
  id v11 = 0;
  id v9 = [v5 executeRequest:v8 error:&v11];
  id v10 = v11;
  [*(id *)(a1 + 32) setError:v10];
  v6[2](v6);
}

void sub_1000820CC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }
}

void sub_100082140()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Encountered fetch error while querying friends who have this achievement: %@", v2, v3, v4, v5, v6);
}

void sub_1000821A8()
{
  sub_100010D10();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "================ GameKit - GKGameStatService requested a simulated crash.\nachievementsForPlayersAndGame:players:context:handler: got nil playerIDs or count is zero. ================", v1, 2u);
}

void sub_1000821E8()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Unable to get achievements for game descriptor with no bundle-id: %@", v2, v3, v4, v5, v6);
}

void sub_100082250()
{
  sub_100010D10();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "App's signing status seems to have changed, setting release state to 'unknown' for achievements.", v1, 2u);
}

void sub_100082290()
{
  sub_100010D10();
  sub_100010D34((void *)&_mh_execute_header, v0, v1, "getLeaderboardsForGameDescriptor: no player given, and no authenticated player", v2, v3, v4, v5, v6);
}

void sub_1000822C4()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "no playerID for internal %@", v2, v3, v4, v5, v6);
}

void sub_10008232C()
{
  sub_100010D10();
  sub_100010D34((void *)&_mh_execute_header, v0, v1, "getLeaderboardsForGameDescriptor: no game descriptor specified", v2, v3, v4, v5, v6);
}

void sub_100082360()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "getLeaderboardsForGameDescriptor: no playerID for internal %@", v2, v3, v4, v5, v6);
}

void sub_1000823C8(void *a1, void *a2)
{
  id v4 = a1;
  uint64_t v5 = [(id)sub_100010D1C() baseLeaderboardID];
  uint8_t v6 = [a2 startDate];
  int v7 = 138412546;
  id v8 = v5;
  __int16 v9 = 2112;
  id v10 = v6;
  _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "getLeaderboardsForGameDescriptor - updated: %@, %@", (uint8_t *)&v7, 0x16u);
}

void sub_100082494(uint64_t a1, void *a2)
{
  sub_1000172A0(a1, a2);
  uint64_t v3 = [(id)sub_100010D1C() error];
  sub_100011064();
  sub_100011B48((void *)&_mh_execute_header, v2, v4, "getLeaderboardsForGameDescriptor: %@", v5);
}

void sub_100082524()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Failed to retrieve active leaderboard challenges: %@", v2, v3, v4, v5, v6);
}

void sub_10008258C()
{
  sub_100010D10();
  sub_100010D34((void *)&_mh_execute_header, v0, v1, "getPreviousInstanceForLeaderboard: no game descriptor specified", v2, v3, v4, v5, v6);
}

void sub_1000825C0()
{
  sub_100010D10();
  sub_100010D34((void *)&_mh_execute_header, v0, v1, "getPreviousInstanceForLeaderboard: no player given, and no authenticated player", v2, v3, v4, v5, v6);
}

void sub_1000825F4()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "getPreviousInstanceForLeaderboard: no playerID for internal %@", v2, v3, v4, v5, v6);
}

void sub_10008265C(uint64_t a1, void *a2)
{
  sub_1000172A0(a1, a2);
  uint64_t v3 = [(id)sub_100010D1C() error];
  sub_100011064();
  sub_100011B48((void *)&_mh_execute_header, v2, v4, "getPreviousInstanceForLeaderboard: %@", v5);
}

void sub_1000826EC()
{
  sub_100011064();
  __int16 v3 = 2112;
  uint64_t v4 = v0;
  _os_log_debug_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "No internal or displayName for playerID:%@ (entry:%@). Will be changed to anonymous", v2, 0x16u);
}

void sub_100082770()
{
  sub_100010D10();
  sub_100010D34((void *)&_mh_execute_header, v0, v1, "getEntriesForLeaderboard: no game descriptor specified", v2, v3, v4, v5, v6);
}

void sub_1000827A4()
{
  sub_100010D10();
  sub_100010D34((void *)&_mh_execute_header, v0, v1, "loadEntriesForLeaderboard: invalid leaderboard parameter.", v2, v3, v4, v5, v6);
}

void sub_1000827D8()
{
  sub_100010D10();
  sub_100010D34((void *)&_mh_execute_header, v0, v1, "getEntriesForLeaderboard: no player given, and no authenticated player", v2, v3, v4, v5, v6);
}

void sub_10008280C()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "getEntriesForLeaderboard: no playerID for internal %@", v2, v3, v4, v5, v6);
}

void sub_100082874(uint64_t a1, void *a2)
{
  sub_1000172A0(a1, a2);
  uint64_t v3 = [(id)sub_100010D1C() error];
  sub_100011064();
  sub_100011B48((void *)&_mh_execute_header, v2, v4, "submitScore: %@", v5);
}

void sub_100082904(uint64_t a1, void *a2)
{
  sub_1000172A0(a1, a2);
  uint64_t v3 = [(id)sub_100010D1C() error];
  sub_100011064();
  sub_100011B48((void *)&_mh_execute_header, v2, v4, "submitInstanceScore: %@", v5);
}

void sub_100082994()
{
  sub_100010D10();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Finished populating contact information for Friends Who Have This Achievement", v1, 2u);
}

void sub_100082B2C(uint64_t a1, void *a2)
{
  id v7 = a2;
  uint64_t v3 = [v7 issuingPlayer];
  uint64_t v4 = [v3 playerID];

  if (v4) {
    [*(id *)(a1 + 32) addObject:v4];
  }
  uint64_t v5 = [v7 receivingPlayer];
  uint8_t v6 = [v5 playerID];

  if (v6) {
    [*(id *)(a1 + 32) addObject:v6];
  }
}

void sub_100082BDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[GKService serviceFromService:*(void *)(a1 + 32)];
  uint64_t v5 = [*(id *)(a1 + 40) allObjects];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100082CC0;
  void v7[3] = &unk_1002D4F38;
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v6 = v3;
  [v4 getProfilesForPlayerIDs:v5 handler:v7];
}

void sub_100082CC0(uint64_t a1, void *a2)
{
  id v3 = [a2 _gkMapDictionaryWithKeyPath:@"playerID"];
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100082D80;
  void v6[3] = &unk_1002D7AB8;
  id v7 = v3;
  id v5 = v3;
  [v4 enumerateObjectsUsingBlock:v6];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100082D80(uint64_t a1, void *a2)
{
  id v9 = a2;
  id v3 = [v9 receivingPlayer];
  uint64_t v4 = [v3 playerID];

  if (v4)
  {
    id v5 = [*(id *)(a1 + 32) objectForKeyedSubscript:v4];
    [v9 setReceivingPlayer:v5];
  }
  id v6 = [v9 issuingPlayer];
  id v7 = [v6 playerID];

  if (v7)
  {
    id v8 = [*(id *)(a1 + 32) objectForKeyedSubscript:v7];
    [v9 setIssuingPlayer:v8];
  }
}

id sub_100082F4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 compatibleBundleIDs];
  id v5 = [v4 containsObject:*(void *)(a1 + 32)];

  if (v5) {
    [v3 setBundleID:*(void *)(a1 + 32)];
  }

  return v5;
}

void sub_1000833D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[GKService serviceFromService:*(void *)(a1 + 32)];
  id v5 = [*(id *)(a1 + 40) allObjects];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1000834B4;
  void v7[3] = &unk_1002D4F38;
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v6 = v3;
  [v4 getGameMetadataForBundleIDs:v5 handler:v7];
}

void sub_1000834B4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v8 = [v5 _gkMapDictionaryWithKeyPath:@"bundleIdentifier"];
  id v9 = *(void **)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_1000835A8;
  v11[3] = &unk_1002D7AB8;
  id v12 = v8;
  id v10 = v8;
  [v9 enumerateObjectsUsingBlock:v11];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000835A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = [v3 bundleID];
  uint64_t v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:v5];
  [v3 setGame:v4];
}

void sub_1000836CC(uint64_t a1)
{
  id v15 = +[GKPlayerProfileCacheObject selfPlayerID];
  uint64_t v2 = +[NSDate date];
  id v3 = +[GKCacheObject fetchRequestForContext:*(void *)(a1 + 32)];
  [v3 setResultType:1];
  [v3 setFetchLimit:1];
  [v3 setReturnsDistinctResults:1];
  uint64_t v4 = +[NSPredicate predicateWithFormat:@"expirationDate > %@ && player.playerID = %@", v2, v15];
  [v3 setPredicate:v4];

  id v5 = [*(id *)(a1 + 32) executeFetchRequest:v3 error:0];
  uint64_t v6 = [v5 firstObject];

  if (!v6)
  {
    id v8 = +[NSPredicate predicateWithFormat:@"expirationDate != nil && player.playerID = %@", v15];
    [v3 setPredicate:v8];

    id v9 = [*(id *)(a1 + 32) executeFetchRequest:v3 error:0];
    id v7 = [v9 firstObject];

    uint64_t v10 = *(void *)(a1 + 40);
    if (!v10) {
      goto LABEL_8;
    }
    if (!v7)
    {
      uint64_t v14 = 0;
      double v13 = 0;
      goto LABEL_7;
    }
LABEL_6:
    id v11 = [*(id *)(a1 + 32) objectWithID:v7];
    id v12 = [v11 entries];
    double v13 = [v12 _gkValuesForKeyPath:@"challengeID"];

    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v14 = 1;
LABEL_7:
    (*(void (**)(uint64_t, void *, BOOL, uint64_t))(v10 + 16))(v10, v13, v6 != 0, v14);

    goto LABEL_8;
  }
  id v7 = (void *)v6;
  if (*(void *)(a1 + 40)) {
    goto LABEL_6;
  }
LABEL_8:
}

void sub_100083AE0(id *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[GKNetworkRequestManager commonNetworkRequestManager];
  id v5 = [a1[4] clientProxy];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100083BF4;
  void v7[3] = &unk_1002D5D48;
  id v8 = a1[5];
  id v9 = a1[6];
  id v10 = a1[7];
  id v11 = v3;
  id v6 = v3;
  [v4 issueRequest:0 bagKey:@"gk-get-challenge-ids" clientProxy:v5 handler:v7];
}

void sub_100083BF4(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = +[NSNumber numberWithDouble:a4];
  [*(id *)(a1 + 32) setObject:v9 forKeyedSubscript:@"ttl"];

  [*(id *)(a1 + 32) setError:v8];
  if (v7 && !v8)
  {
    double v13 = *(void **)(a1 + 40);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    void v14[2] = sub_100083D34;
    void v14[3] = &unk_1002D6C98;
    double v18 = a4;
    id v15 = v13;
    id v16 = v7;
    id v17 = *(id *)(a1 + 48);
    [v15 performBlockAndWait:v14];
  }
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 56) + 16))(*(void *)(a1 + 56), v10, v11, v12);
}

void sub_100083D34(uint64_t a1)
{
  id v10 = +[NSDate dateWithTimeIntervalSinceNow:*(double *)(a1 + 56)];
  uint64_t v2 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:*(void *)(a1 + 32)];
  id v3 = [v2 challengeList];
  if (!v3)
  {
    id v3 = [(GKCacheObject *)[GKChallengeListCacheObject alloc] initWithManagedObjectContext:*(void *)(a1 + 32)];
    [(GKChallengeListCacheObject *)v3 setPlayer:v2];
  }
  [(GKChallengeListCacheObject *)v3 updateWithServerRepresentation:*(void *)(a1 + 40) expirationDate:v10];
  if ([*(id *)(a1 + 48) isGameCenter])
  {
    id v4 = objc_alloc((Class)NSFetchRequest);
    id v5 = +[GKChallengeCacheObject entityName];
    id v6 = [v4 initWithEntityName:v5];

    id v7 = +[NSPredicate predicateWithFormat:@"wasViewed == NO"];
    [v6 setPredicate:v7];

    id v8 = [*(id *)(a1 + 32) countForFetchRequest:v6 error:0];
    id v9 = +[GKBadgeController sharedController];
    [v9 setBadgeCount:v8 forBundleID:GKGameCenterIdentifier badgeType:0];
  }
}

void sub_100083EB0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v6 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"ttl"];
  [v6 doubleValue];
  double v4 = v3;
  id v5 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, void *, double))(v2 + 16))(v2, v5, v4);
}

void sub_1000841A4(uint64_t a1, void *a2)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100084288;
  void v7[3] = &unk_1002D48B0;
  double v4 = *(void **)(a1 + 32);
  id v5 = *(void **)(a1 + 48);
  void v7[4] = *(void *)(a1 + 40);
  id v8 = v5;
  id v9 = *(id *)(a1 + 32);
  id v10 = *(id *)(a1 + 56);
  id v6 = a2;
  [v4 perform:v7];
  v6[2](v6);
}

void sub_100084288(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = [*(id *)(a1 + 48) context];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_100084388;
  v11[3] = &unk_1002D7B08;
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(a1 + 40);
  id v12 = v7;
  uint64_t v13 = v8;
  id v14 = v9;
  id v15 = *(id *)(a1 + 56);
  id v16 = v3;
  id v10 = v3;
  [v4 fetchChallengesForGameDescriptor:v5 context:v6 handler:v11];
}

void sub_100084388(uint64_t a1, void *a2, char a3, char a4)
{
  id v7 = a2;
  if ((a3 & 1) == 0)
  {
    v30[0] = 0;
    v30[1] = v30;
    v30[2] = 0x2020000000;
    char v31 = 0;
    uint64_t v8 = *(void **)(a1 + 32);
    id v9 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKChallengeService.m", 262, "-[GKChallengeService getChallengesForGameDescriptor:handler:]_block_invoke_3");
    id v10 = [v8 transactionGroupWithName:v9];

    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_100084620;
    void v25[3] = &unk_1002D6830;
    uint64_t v11 = *(void **)(a1 + 48);
    void v25[4] = *(void *)(a1 + 40);
    id v26 = v11;
    id v27 = *(id *)(a1 + 32);
    id v12 = v10;
    id v28 = v12;
    id v29 = v30;
    [v12 perform:v25];
    if (a4)
    {
      uint64_t v13 = *(void *)(a1 + 56);
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      void v18[2] = sub_1000849BC;
      void v18[3] = &unk_1002D6B58;
      void v18[4] = *(void *)(a1 + 40);
      v18[5] = v30;
      [v12 notifyOnQueue:v13 block:v18];
    }
    else
    {
      id v14 = *(void **)(a1 + 32);
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      void v19[2] = sub_10008478C;
      void v19[3] = &unk_1002D4518;
      id v20 = v12;
      id v15 = *(id *)(a1 + 56);
      uint64_t v16 = *(void *)(a1 + 40);
      id v17 = *(void **)(a1 + 48);
      id v21 = v15;
      uint64_t v22 = v16;
      id v23 = v17;
      id v24 = *(id *)(a1 + 32);
      [v14 perform:v19];
    }
    _Block_object_dispose(v30, 8);
  }
  [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:@"challengeIDs"];
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_100084608(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100084620(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = [*(id *)(a1 + 48) context];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_100084700;
  v10[3] = &unk_1002D7188;
  id v7 = *(id *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  id v12 = v3;
  uint64_t v13 = v8;
  id v11 = v7;
  id v9 = v3;
  [v4 loadChallengesForGameDescriptor:v5 context:v6 handler:v10];
}

void sub_100084700(void *a1, void *a2, double a3)
{
  uint64_t v5 = (void *)a1[4];
  id v8 = a2;
  [v5 setError:v8];
  BOOL v7 = a3 > 0.0 && v8 == 0;
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = v7;
  (*(void (**)(void))(a1[5] + 16))();
}

void sub_10008478C(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100084870;
  void v8[3] = &unk_1002D39A8;
  id v6 = *(void **)(a1 + 56);
  void v8[4] = *(void *)(a1 + 48);
  id v9 = v6;
  id v10 = *(id *)(a1 + 64);
  id v11 = *(id *)(a1 + 32);
  id v12 = v3;
  id v7 = v3;
  [v4 notifyOnQueue:v5 block:v8];
}

void sub_100084870(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  double v4 = [*(id *)(a1 + 48) context];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_10008494C;
  v5[3] = &unk_1002D71D8;
  id v6 = *(id *)(a1 + 48);
  id v7 = *(id *)(a1 + 56);
  id v8 = *(id *)(a1 + 64);
  [v2 fetchChallengesForGameDescriptor:v3 context:v4 handler:v5];
}

uint64_t sub_10008494C(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setObject:a2 forKeyedSubscript:@"challengeIDs"];
  uint64_t v3 = [*(id *)(a1 + 40) error];
  [*(id *)(a1 + 32) setError:v3];

  double v4 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);

  return v4();
}

void sub_1000849BC(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    uint64_t v1 = [*(id *)(a1 + 32) clientProxy];
    CFStringRef v4 = @"scroll";
    uint64_t v2 = +[NSNumber numberWithBool:0];
    uint64_t v5 = v2;
    uint64_t v3 = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];
    [v1 refreshContentsForDataType:1 userInfo:v3];
  }
}

void sub_100084A98(id *a1)
{
  uint64_t v2 = [a1[4] error];

  if (!v2)
  {
    id v3 = a1[4];
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    void v18[2] = sub_100084C2C;
    void v18[3] = &unk_1002D3980;
    id v4 = v3;
    id v5 = a1[5];
    id v6 = a1[6];
    id v19 = v4;
    id v20 = v5;
    id v21 = v6;
    [v4 perform:v18];
  }
  id v7 = a1[4];
  id v8 = [a1[5] clientProxy];
  id v9 = [v8 replyQueue];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_100084DA8;
  void v12[3] = &unk_1002D39A8;
  id v13 = a1[4];
  id v10 = a1[6];
  id v11 = a1[5];
  id v14 = v10;
  id v15 = v11;
  id v16 = a1[7];
  id v17 = a1[8];
  [v7 notifyOnQueue:v9 block:v12];
}

void sub_100084C2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"challengeIDs"];
  id v5 = *(void **)(a1 + 40);
  id v6 = [*(id *)(a1 + 48) objectForKeyedSubscript:@"bundle-id"];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100084D28;
  void v8[3] = &unk_1002D4F38;
  id v9 = *(id *)(a1 + 32);
  id v10 = v3;
  id v7 = v3;
  [v5 getChallengeDetailsForChallengeIDs:v4 receiverID:0 clientBundleID:v6 handler:v8];
}

void sub_100084D28(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  [*(id *)(a1 + 32) setObject:a2 forKeyedSubscript:@"challenges"];
  if (v5) {
    [*(id *)(a1 + 32) setError:v5];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100084DA8(uint64_t a1)
{
  id v8 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"challenges"];
  uint64_t v2 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"bundle-id"];
  if (+[NSBundle _gkBundleIdentifierIsAnyOverlayUI:](NSBundle, "_gkBundleIdentifierIsAnyOverlayUI:", v2) & 1) != 0|| ([v2 isEqual:GKDaemonIdentifier])
  {
    id v3 = v8;
  }
  else
  {
    id v6 = *(void **)(a1 + 48);
    id v7 = v2;
    if (!v2)
    {
      id v7 = [*(id *)(a1 + 56) bundleIdentifier];
    }
    id v3 = [v6 _filterChallenges:v8 compatibleWithBundleID:v7];
    if (!v2) {
  }
    }
  uint64_t v4 = *(void *)(a1 + 64);
  id v5 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v4 + 16))(v4, v3, v5);
}

void sub_10008511C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v14[0] = 0;
  v14[1] = v14;
  void v14[2] = 0x2020000000;
  char v15 = 0;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100085234;
  void v8[3] = &unk_1002D7C10;
  uint64_t v4 = *(void **)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 32);
  id v13 = v14;
  uint64_t v6 = *(void *)(a1 + 48);
  id v7 = *(void **)(a1 + 56);
  id v10 = v5;
  uint64_t v11 = v6;
  id v12 = v7;
  [v4 performOnManagedObjectContext:v8];
  v3[2](v3);

  _Block_object_dispose(v14, 8);
}

void sub_10008521C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_100085234(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v44 = a3;
  id v42 = [*(id *)(a1 + 32) count];
  uint64_t v43 = v5;
  uint64_t v6 = +[GKChallengeCacheObject challengesWithChallengeIDs:*(void *)(a1 + 32) context:v5];
  id v7 = [objc_alloc((Class)NSMutableSet) initWithArray:*(void *)(a1 + 32)];
  id v8 = [v6 count];
  id v9 = [*(id *)(a1 + 32) count];
  long long v60 = 0u;
  long long v61 = 0u;
  BOOL v10 = v8 == v9;
  long long v62 = 0u;
  long long v63 = 0u;
  id v11 = v6;
  id v12 = [v11 countByEnumeratingWithState:&v60 objects:v64 count:16];
  if (v12)
  {
    uint64_t v13 = *(void *)v61;
    double v14 = INFINITY;
    do
    {
      for (unint64_t i = 0; i != v12; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v61 != v13) {
          objc_enumerationMutation(v11);
        }
        id v16 = *(void **)(*((void *)&v60 + 1) + 8 * i);
        if ([v16 hasDetails])
        {
          id v17 = [v16 detailsExpirationDate];
          [v17 timeIntervalSinceNow];
          BOOL v19 = v18 > 0.0;

          if (v19)
          {
            id v20 = [v16 challengeID];
            [v7 removeObject:v20];
          }
          id v21 = [v16 detailsExpirationDate];
          [v21 timeIntervalSinceNow];
          double v23 = v22;

          double v14 = fmin(v14, v23);
        }
        else
        {
          BOOL v10 = 0;
        }
      }
      id v12 = [v11 countByEnumeratingWithState:&v60 objects:v64 count:16];
    }
    while (v12);
  }
  else
  {
    double v14 = INFINITY;
  }

  if ([v7 count] != 0 && !v10
    || ([v11 valueForKeyPath:@"internalRepresentation"],
        id v24 = objc_claimAutoreleasedReturnValue(),
        [*(id *)(a1 + 40) setObject:v24 forKeyedSubscript:@"challenges"],
        v24,
        *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1,
        v14 <= 0.0))
  {
    unsigned int v25 = *(void **)(a1 + 40);
    id v26 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKChallengeService.m", 383, "-[GKChallengeService getChallengeDetailsForChallengeIDs:receiverID:clientBundleID:handler:]_block_invoke_2");
    id v27 = [v25 transactionGroupWithName:v26];

    v58[0] = 0;
    v58[1] = v58;
    v58[2] = 0x2020000000;
    char v59 = 0;
    id v28 = [v7 _gkMapWithBlock:&stru_1002D7B28];
    id v29 = [*(id *)(a1 + 48) clientProxy];
    uint64_t v30 = [v29 replyQueue];
    v49[0] = _NSConcreteStackBlock;
    v49[1] = 3221225472;
    v49[2] = sub_100085868;
    v49[3] = &unk_1002D7BE8;
    id v31 = v28;
    id v50 = v31;
    id v51 = *(id *)(a1 + 56);
    int8x16_t v41 = *(int8x16_t *)(a1 + 40);
    id v32 = (id)v41.i64[0];
    int8x16_t v52 = vextq_s8(v41, v41, 8uLL);
    long long v55 = v58;
    id v33 = v27;
    id v53 = v33;
    id v57 = v42;
    id v34 = *(id *)(a1 + 32);
    uint64_t v35 = *(void *)(a1 + 64);
    id v54 = v34;
    uint64_t v56 = v35;
    [v33 performOnQueue:v30 block:v49];

    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
    {
      id v36 = [*(id *)(a1 + 48) clientProxy];
      uint64_t v37 = [v36 replyQueue];
      v45[0] = _NSConcreteStackBlock;
      v45[1] = 3221225472;
      void v45[2] = sub_1000860B4;
      v45[3] = &unk_1002D6B58;
      v45[4] = *(void *)(a1 + 48);
      v45[5] = v58;
      [v33 notifyOnQueue:v37 block:v45];
    }
    else
    {
      uint64_t v38 = *(void **)(a1 + 40);
      uint64_t v39 = [*(id *)(a1 + 48) clientProxy];
      id v40 = [v39 replyQueue];
      v46[0] = _NSConcreteStackBlock;
      v46[1] = 3221225472;
      void v46[2] = sub_100086024;
      v46[3] = &unk_1002D3B38;
      id v47 = *(id *)(a1 + 40);
      id v48 = v33;
      [v38 join:v48 queue:v40 block:v46];
    }
    _Block_object_dispose(v58, 8);
  }
  v44[2]();
}

void sub_100085784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
}

id sub_1000857A4(id a1, id a2)
{
  v6[0] = @"GKChallengeInternal";
  v6[1] = a2;
  id v2 = a2;
  id v3 = +[NSArray arrayWithObjects:v6 count:2];
  uint64_t v4 = +[GKResourceIdentifier resourceIdentifierForKeys:v3];

  return v4;
}

void sub_100085868(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) _gkMapWithBlock:&stru_1002D7B48];
  CFStringRef v24 = @"challenge-ids";
  unsigned int v25 = v4;
  id v5 = +[NSDictionary dictionaryWithObjects:&v25 forKeys:&v24 count:1];
  uint64_t v6 = +[NSMutableDictionary dictionaryWithDictionary:v5];

  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    [v6 setObject:v7 forKey:@"player-id"];
  }
  id v8 = +[GKNetworkRequestManager commonNetworkRequestManager];
  id v9 = [*(id *)(a1 + 48) clientProxy];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  void v16[2] = sub_100085AA0;
  void v16[3] = &unk_1002D7BC0;
  id v10 = *(id *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 80);
  id v17 = v10;
  uint64_t v21 = v11;
  id v12 = *(id *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 96);
  id v18 = v12;
  uint64_t v23 = v13;
  id v14 = *(id *)(a1 + 72);
  uint64_t v22 = *(void *)(a1 + 88);
  id v19 = v14;
  id v20 = v3;
  id v15 = v3;
  [v8 issueRequest:v6 bagKey:@"gk-get-challenges" clientProxy:v9 handler:v16];
}

id sub_100085A4C(id a1, GKResourceIdentifier *a2, unint64_t a3)
{
  id v3 = [(GKResourceIdentifier *)a2 keys];
  uint64_t v4 = [v3 objectAtIndexedSubscript:1];

  return v4;
}

void sub_100085AA0(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7 = a2;
  id v8 = a3;
  [*(id *)(a1 + 32) setError:v8];
  if (v7 && !v8)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = a4 > 0.0;
    id v9 = [*(id *)(a1 + 40) context];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    void v14[2] = sub_100085C00;
    void v14[3] = &unk_1002D7B98;
    double v20 = a4;
    id v10 = v7;
    uint64_t v11 = *(void *)(a1 + 80);
    id v15 = v10;
    uint64_t v21 = v11;
    id v16 = *(id *)(a1 + 48);
    id v12 = *(id *)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 72);
    id v17 = v12;
    uint64_t v19 = v13;
    id v18 = *(id *)(a1 + 40);
    [v9 performBlockAndWait:v14];
  }
  [*(id *)(a1 + 40) setError:v8];
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_100085C00(uint64_t a1)
{
  id v33 = +[NSDate dateWithTimeIntervalSinceNow:*(double *)(a1 + 72)];
  id v2 = [*(id *)(a1 + 32) objectForKey:@"results"];
  id v3 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:*(void *)(a1 + 80)];
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v32 = a1;
  id v5 = [*(id *)(a1 + 48) context];
  uint64_t v6 = +[GKChallengeCacheObject challengesWithChallengeIDs:v4 context:v5];

  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  id v7 = v6;
  id v8 = [v7 countByEnumeratingWithState:&v40 objects:v45 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v41;
    do
    {
      for (unint64_t i = 0; i != v9; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v41 != v10) {
          objc_enumerationMutation(v7);
        }
        id v12 = *(void **)(*((void *)&v40 + 1) + 8 * i);
        uint64_t v13 = [v12 challengeID];
        [v3 setObject:v12 forKeyedSubscript:v13];
      }
      id v9 = [v7 countByEnumeratingWithState:&v40 objects:v45 count:16];
    }
    while (v9);
  }
  id v31 = v7;

  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  id v14 = v2;
  id v15 = [v14 countByEnumeratingWithState:&v36 objects:v44 count:16];
  if (v15)
  {
    id v16 = v15;
    uint64_t v17 = *(void *)v37;
    do
    {
      for (j = 0; j != v16; j = (char *)j + 1)
      {
        if (*(void *)v37 != v17) {
          objc_enumerationMutation(v14);
        }
        uint64_t v19 = *(void **)(*((void *)&v36 + 1) + 8 * (void)j);
        double v20 = [[v19 objectForKey:@"status"] doubleValue];
        id v21 = [v20 integerValue];

        if (!v21)
        {
          uint64_t v22 = [v19 objectForKey:@"challenge"];
          uint64_t v23 = v22;
          if (v22)
          {
            CFStringRef v24 = [v22 objectForKey:@"challenge-id"];
            unsigned int v25 = [v3 objectForKey:v24];
            if (v25)
            {
              id v26 = v25;
              [v25 updateWithServerRepresentation:v23];
            }
            else
            {
              id v27 = [*(id *)(v32 + 48) context];
              id v26 = +[GKChallengeCacheObject challengeWithServerRepresentation:v23 context:v27];
            }
            id v28 = [v26 challengeID];
            [v3 setObject:v26 forKeyedSubscript:v28];

            [v26 setDetailsExpirationDate:v33];
          }
        }
      }
      id v16 = [v14 countByEnumeratingWithState:&v36 objects:v44 count:16];
    }
    while (v16);
  }

  if (!*(unsigned char *)(*(void *)(*(void *)(v32 + 64) + 8) + 24))
  {
    id v29 = *(void **)(v32 + 40);
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472;
    _OWORD v34[2] = sub_100085FD0;
    void v34[3] = &unk_1002D7B70;
    id v35 = v3;
    uint64_t v30 = [v29 _gkFilterWithBlock:v34];
    [*(id *)(v32 + 56) setObject:v30 forKeyedSubscript:@"challenges"];
  }
}

id sub_100085FD0(uint64_t a1, uint64_t a2)
{
  id v2 = [*(id *)(a1 + 32) objectForKey:a2];
  id v3 = [v2 internalRepresentation];

  return v3;
}

void sub_100086024(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"challenges"];
  [*(id *)(a1 + 32) setObject:v2 forKeyedSubscript:@"challenges"];

  id v3 = [*(id *)(a1 + 40) error];
  [*(id *)(a1 + 32) setError:v3];
}

void sub_1000860B4(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    uint64_t v1 = [*(id *)(a1 + 32) clientProxy];
    CFStringRef v4 = @"scroll";
    id v2 = +[NSNumber numberWithBool:0];
    id v5 = v2;
    id v3 = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];
    [v1 refreshContentsForDataType:1 userInfo:v3];
  }
}

void sub_100086190(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"challenges"];
  id v3 = v2;
  if (v2)
  {
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    void v17[2] = sub_100086328;
    void v17[3] = &unk_1002D3980;
    CFStringRef v4 = *(void **)(a1 + 32);
    void v17[4] = *(void *)(a1 + 40);
    id v18 = v2;
    id v19 = *(id *)(a1 + 32);
    [v4 perform:v17];
  }
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = [*(id *)(a1 + 40) clientProxy];
  id v7 = [v6 replyQueue];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_1000864DC;
  v11[3] = &unk_1002D5518;
  uint64_t v8 = *(void *)(a1 + 40);
  id v9 = *(void **)(a1 + 48);
  id v12 = v3;
  uint64_t v13 = v8;
  id v14 = v9;
  id v16 = *(id *)(a1 + 56);
  id v15 = *(id *)(a1 + 32);
  id v10 = v3;
  [v5 notifyOnQueue:v7 block:v11];
}

void sub_100086328(uint64_t a1, void *a2)
{
  id v3 = a2;
  CFStringRef v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKChallengeService.m", 475, "-[GKChallengeService getChallengeDetailsForChallengeIDs:receiverID:clientBundleID:handler:]_block_invoke_12");
  id v5 = +[GKDispatchGroup dispatchGroupWithName:v4];

  [*(id *)(a1 + 32) _determineCompatibleGamesForChallenges:*(void *)(a1 + 40) dispatchGroup:v5];
  uint64_t v6 = [*(id *)(a1 + 32) clientProxy];
  id v7 = [v6 replyQueue];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_100086488;
  v10[3] = &unk_1002D39F8;
  uint64_t v8 = *(void **)(a1 + 40);
  void v10[4] = *(void *)(a1 + 32);
  id v11 = v8;
  id v12 = *(id *)(a1 + 48);
  id v13 = v3;
  id v9 = v3;
  [v5 notifyOnQueue:v7 block:v10];
}

uint64_t sub_100086488(uint64_t a1)
{
  [*(id *)(a1 + 32) _updatePlayersForChallenges:*(void *)(a1 + 40) dispatchGroup:*(void *)(a1 + 48)];
  [*(id *)(a1 + 32) _updateGamesForChallenges:*(void *)(a1 + 40) dispatchGroup:*(void *)(a1 + 48)];
  id v2 = *(uint64_t (**)(void))(*(void *)(a1 + 56) + 16);

  return v2();
}

void sub_1000864DC(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) clientProxy];
  unsigned __int8 v4 = [v3 isGameCenter];

  if ((v4 & 1) == 0)
  {
    id v5 = *(void **)(a1 + 48);
    if (v5)
    {
      id v6 = v5;
    }
    else
    {
      id v7 = [*(id *)(a1 + 40) clientProxy];
      id v6 = [v7 bundleIdentifier];
    }
    uint64_t v8 = *(void **)(a1 + 32);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    void v14[2] = sub_100086650;
    void v14[3] = &unk_1002D7C38;
    id v9 = v6;
    id v15 = v9;
    id v10 = [v8 indexesOfObjectsPassingTest:v14];
    if ([v10 count])
    {
      uint64_t v11 = [*(id *)(a1 + 32) objectsAtIndexes:v10];
    }
    else
    {
      uint64_t v11 = 0;
    }

    id v2 = (id)v11;
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (v12)
  {
    id v13 = [*(id *)(a1 + 56) error];
    (*(void (**)(uint64_t, id, void *))(v12 + 16))(v12, v2, v13);
  }
}

id sub_100086650(uint64_t a1, void *a2)
{
  id v3 = [a2 compatibleBundleIDs];
  id v4 = [v3 containsObject:*(void *)(a1 + 32)];

  return v4;
}

uint64_t sub_100086948(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100086B68(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[NSMutableSet set];
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id v5 = *(id *)(a1 + 32);
  id v6 = [v5 countByEnumeratingWithState:&v29 objects:v34 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v30;
    do
    {
      id v9 = 0;
      do
      {
        if (*(void *)v30 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = [*(id *)(*((void *)&v29 + 1) + 8 * (void)v9) challengeID];
        [v4 addObject:v10];

        id v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v29 objects:v34 count:16];
    }
    while (v7);
  }

  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v11 = v4;
  id v12 = [v11 countByEnumeratingWithState:&v25 objects:v33 count:16];
  if (v12)
  {
    id v13 = v12;
    uint64_t v14 = *(void *)v26;
    do
    {
      id v15 = 0;
      do
      {
        if (*(void *)v26 != v14) {
          objc_enumerationMutation(v11);
        }
        uint64_t v16 = *(void *)(*((void *)&v25 + 1) + 8 * (void)v15);
        uint64_t v17 = +[GKBulletinController sharedController];
        [v17 clearChallengeBulletinsForChallengeID:v16];

        id v15 = (char *)v15 + 1;
      }
      while (v13 != v15);
      id v13 = [v11 countByEnumeratingWithState:&v25 objects:v33 count:16];
    }
    while (v13);
  }

  id v18 = *(void **)(a1 + 40);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  void v22[2] = sub_100086DEC;
  v22[3] = &unk_1002D3D30;
  id v23 = v11;
  int8x16_t v21 = *(int8x16_t *)(a1 + 40);
  id v19 = (id)v21.i64[0];
  int8x16_t v24 = vextq_s8(v21, v21, 8uLL);
  id v20 = v11;
  [v18 performOnManagedObjectContext:v22];
  v3[2](v3);
}

void sub_100086DEC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v27 = a3;
  id v6 = +[NSPredicate predicateWithFormat:@"challengeID in %@", *(void *)(a1 + 32)];
  id v7 = +[GKCacheObject objectsMatchingPredicate:v6 context:v5];
  uint64_t v8 = +[GKBadgeController sharedController];
  uint64_t v9 = GKGameCenterIdentifier;
  long long v28 = v8;
  id v10 = (char *)[v8 badgeCountForBundleID:GKGameCenterIdentifier badgeType:0];
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  id v11 = v7;
  id v12 = [v11 countByEnumeratingWithState:&v32 objects:v36 count:16];
  if (v12)
  {
    id v13 = v12;
    uint64_t v14 = *(void *)v33;
    do
    {
      id v15 = 0;
      do
      {
        if (*(void *)v33 != v14) {
          objc_enumerationMutation(v11);
        }
        v10 -= [*(id *)(*((void *)&v32 + 1) + 8 * (void)v15) wasViewed] ^ 1;
        id v15 = (char *)v15 + 1;
      }
      while (v13 != v15);
      id v13 = [v11 countByEnumeratingWithState:&v32 objects:v36 count:16];
    }
    while (v13);
  }

  uint64_t v16 = +[GKBadgeController sharedController];
  [v16 setBadgeCount:v10 forBundleID:v9 badgeType:0];

  uint64_t v17 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:v5];
  id v18 = [v17 challengeList];
  [v18 expire];

  +[GKCacheObject deleteObjectsMatchingPredicate:v6 context:v5];
  +[GKExpiringCacheObject expireObjectsMatchingPredicate:0 context:v5];
  id v19 = [GKAbortChallengeNetworkRequest alloc];
  uint64_t v20 = *(void *)(a1 + 32);
  int8x16_t v21 = [*(id *)(a1 + 40) clientProxy];
  uint64_t v22 = [v21 bundleIdentifier];
  id v23 = [(GKChallengeNetworkRequest *)v19 initWithChallenges:v20 bundleID:v22];

  int8x16_t v24 = +[GKNetworkRequestManager commonNetworkRequestManager];
  long long v25 = [*(id *)(a1 + 40) clientProxy];
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  void v29[2] = sub_100087100;
  v29[3] = &unk_1002D3BC8;
  id v30 = *(id *)(a1 + 48);
  id v31 = v27;
  id v26 = v27;
  [v24 writeToNetwork:v23 clientProxy:v25 handler:v29];
}

uint64_t sub_100087100(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setError:a2];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_100087148(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  id v2 = [*(id *)(a1 + 32) clientProxy];
  [v2 refreshContentsForDataType:1 userInfo:&off_1002F2CA0];
}

void sub_100087420(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10008744C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) context];
  id v5 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:v2];

  id v3 = [v5 challengeList];
  if ([v3 isValid])
  {
    id v4 = [v3 entries];
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v4 count];

    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v3 expired];
  }
  [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:@"profile"];
}

void sub_100087528(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v5 = [*(id *)(a1 + 40) context];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_1000875FC;
  v9[3] = &unk_1002D7188;
  id v6 = *(id *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  id v11 = v3;
  uint64_t v12 = v7;
  id v10 = v6;
  id v8 = v3;
  [v4 loadChallengesForGameDescriptor:0 context:v5 handler:v9];
}

void sub_1000875FC(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setError:a2];
  id v3 = [*(id *)(a1 + 32) context];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_1000876BC;
  v9[3] = &unk_1002D4D08;
  id v4 = *(id *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 48);
  id v10 = v4;
  uint64_t v11 = v5;
  [v3 performBlockAndWait:v9];

  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v6, v7, v8);
}

void sub_1000876BC(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"profile"];
  id v2 = [*(id *)(a1 + 32) context];
  [v2 refreshObject:v5 mergeChanges:1];

  id v3 = [v5 challengeList];
  id v4 = [v3 entries];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v4 count];
}

void sub_10008776C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, uint64_t, id))(v1 + 16))(v1, v2, v3);
}

void sub_1000879A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = GKBagKeyChallengeApprovedGames;
  id v5 = [v3 objectForKeyedSubscript:GKBagKeyChallengeApprovedGames];

  uint64_t v6 = *(void *)(a1 + 32);
  if (v5)
  {
    uint64_t v7 = [v3 objectForKeyedSubscript:v4];
  }
  else
  {
    v9[0] = @"com.hipsterwhale.crossy";
    v9[1] = @"com.ketchapp.ballz";
    void v9[2] = @"com.seabaa.finity";
    v9[3] = @"3Tank.TimeLockerPlus";
    void v9[4] = @"com.pixelperfectdude.htdrive";
    void v9[5] = @"com.apple.TheCoast";
    v9[6] = GKGKTester2OldIdentifier;
    v9[7] = GKGKTester2Identifier;
    uint64_t v7 = +[NSArray arrayWithObjects:v9 count:8];
  }
  uint64_t v8 = (void *)v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v6, v7);
}

_TtC14GameDaemonCore17GKCacheableEntity *__cdecl sub_100087D18(id a1, NSDictionary *a2)
{
  uint64_t v2 = a2;
  id v3 = objc_alloc((Class)GKLeaderboardChallengeInternal);
  uint64_t v4 = [(NSDictionary *)v2 objectForKeyedSubscript:@"result"];

  id v5 = [v3 initWithServerRepresentation:v4];
  CFStringRef v11 = @"challenge-id";
  uint64_t v6 = [v5 challengeID];
  uint64_t v12 = v6;
  uint64_t v7 = +[NSDictionary dictionaryWithObjects:&v12 forKeys:&v11 count:1];
  uint64_t v8 = +[GKNetworkRequestManager makeEntityIDWithRequest:v7 bagKey:@"gk-challenge-detail"];
  uint64_t v9 = +[GKCacheableEntity createWithBagKey:@"gk-challenge-detail" entityID:v8 entity:v5];

  return (_TtC14GameDaemonCore17GKCacheableEntity *)v9;
}

NSSecureCoding *__cdecl sub_100087F80(id a1, NSDictionary *a2)
{
  uint64_t v2 = a2;
  id v3 = [objc_alloc((Class)GKLeaderboardChallengeInternal) initWithServerRepresentation:v2];

  return (NSSecureCoding *)v3;
}

NSSecureCoding *__cdecl sub_100088128(id a1, NSDictionary *a2)
{
  uint64_t v2 = a2;
  id v3 = [objc_alloc((Class)GKLeaderboardChallengeSummaryInternal) initWithServerRepresentation:v2];

  return (NSSecureCoding *)v3;
}

void sub_100088460(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = [*(id *)(a1 + 32) clientProxy];
  uint64_t v6 = [v5 replyQueue];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_100088534;
  v9[3] = &unk_1002D3930;
  id v7 = *(id *)(a1 + 40);
  id v10 = v4;
  id v11 = v7;
  id v8 = v4;
  dispatch_async(v6, v9);
}

uint64_t sub_100088534(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1000886C0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [*(id *)(a1 + 32) clientProxy];
  id v8 = [v7 replyQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000887C0;
  block[3] = &unk_1002D3AE8;
  id v13 = v6;
  id v9 = *(id *)(a1 + 40);
  id v14 = v5;
  id v15 = v9;
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v8, block);
}

void sub_1000887C0(void *a1)
{
  uint64_t v1 = a1[6];
  if (a1[4])
  {
    uint64_t v2 = *(void (**)(uint64_t, void))(v1 + 16);
    uint64_t v3 = a1[6];
    v2(v3, 0);
  }
  else
  {
    id v4 = [objc_alloc((Class)GKLeaderboardChallengeInviteStatusInternal) initWithServerRepresentation:a1[5]];
    (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v4, 0);
  }
}

void sub_100088B1C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError userErrorForCode:8 description:@"Request playerID does not match local player"];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

NSSecureCoding *__cdecl sub_100088D04(id a1, NSDictionary *a2)
{
  id v2 = a2;
  id v3 = [objc_alloc((Class)GKLeaderboardChallengeComparisonInternal) initWithServerRepresentation:v2];

  return (NSSecureCoding *)v3;
}

NSSecureCoding *__cdecl sub_100088ED0(id a1, NSDictionary *a2)
{
  id v2 = a2;
  id v3 = [objc_alloc((Class)GKLeaderboardChallengeDetailsPageInternal) initWithServerRepresentation:v2];

  return (NSSecureCoding *)v3;
}

NSSecureCoding *__cdecl sub_10008909C(id a1, NSDictionary *a2)
{
  id v2 = a2;
  id v3 = [objc_alloc((Class)GKLeaderboardChallengeCompletedSummaryInternal) initWithServerRepresentation:v2];

  return (NSSecureCoding *)v3;
}

void sub_100089298(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers();
    }
    id v8 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100089B1C((uint64_t)v6, v8);
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    id v9 = [v5 activeChallenges];
    id v10 = [v9 actives];
    id v11 = [v10 _gkDistinctValuesForKeyPath:@"challengeID"];

    uint64_t v12 = *(void **)(a1 + 32);
    id v13 = [v11 allObjects];
    [v12 getLeaderboardChallengeDetailsForChallengeIDs:v13 allowStaleData:*(unsigned __int8 *)(a1 + 48) completionHandler:*(void *)(a1 + 40)];
  }
}

void sub_100089634(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 56);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_100089704;
  v10[3] = &unk_1002D6A68;
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 40);
  id v11 = v7;
  uint64_t v12 = v8;
  id v13 = v3;
  id v9 = v3;
  [v4 getLeaderboardChallengeDetailsForChallengeID:v5 allowStaleData:v6 completionHandler:v10];
}

void sub_100089704(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (v5)
  {
    [*(id *)(a1 + 32) setError:v5];
  }
  else if (v6)
  {
    [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:*(void *)(a1 + 40)];
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_100089790(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v7 = [*(id *)(a1 + 32) allValues];
  uint64_t v3 = [v7 allValues];
  id v4 = (void *)v3;
  if (v3) {
    id v5 = (void *)v3;
  }
  else {
    id v5 = &__NSArray0__struct;
  }
  id v6 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, v5, v6);
}

void sub_100089960(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [a1[4] clientProxy];
  uint64_t v8 = [v7 replyQueue];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_100089A78;
  v11[3] = &unk_1002D5D20;
  id v12 = v6;
  id v15 = a1[6];
  id v13 = v5;
  id v14 = a1[5];
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, v11);
}

void sub_100089A78(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = *(void (**)(uint64_t, void))(v1 + 16);
    uint64_t v3 = *(void *)(a1 + 56);
    v2(v3, 0);
  }
  else
  {
    id v4 = [*(id *)(a1 + 40) objectForKeyedSubscript:*(void *)(a1 + 48)];
    (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v4, 0);
  }
}

void sub_100089B1C(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to retrieve leaderboard challenge summary: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100089E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100089E90(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100089EA0(uint64_t a1)
{
}

void sub_100089EA8(uint64_t a1, int a2, void *a3)
{
  id v6 = a3;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a3);
  id v7 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKMultiplayerMatchService.m", 115, "-[GKMultiplayerMatchService fetchPseudonymIfNeededWithTransportContext:withCompletionHandler:]_block_invoke");
  uint64_t v8 = +[GKDispatchGroup dispatchGroupWithName:v7];

  uint64_t v9 = *(void *)(a1 + 48);
  if (a2 && !*(void *)(*(void *)(v9 + 8) + 40))
  {
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    void v16[2] = sub_10008A044;
    void v16[3] = &unk_1002D7D90;
    uint64_t v10 = *(void *)(a1 + 56);
    void v16[4] = *(void *)(a1 + 32);
    v16[5] = v10;
    v16[6] = v9;
    [v8 perform:v16];
    uint64_t v9 = *(void *)(a1 + 48);
  }
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_10008A1A4;
  void v12[3] = &unk_1002D7DB8;
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v14 = v9;
  uint64_t v15 = v11;
  id v13 = *(id *)(a1 + 40);
  [v8 notifyOnMainQueueWithBlock:v12];
}

void sub_10008A044(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) pseudonymManager];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_10008A100;
  void v6[3] = &unk_1002D7D68;
  long long v8 = *(_OWORD *)(a1 + 40);
  id v7 = v3;
  id v5 = v3;
  [v4 fetchPseudonymWithCompletionHandler:v6];
}

void sub_10008A100(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1[5] + 8);
  long long v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(a1[6] + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  (*(void (**)(void))(a1[4] + 16))();
}

uint64_t sub_10008A1A4(void *a1)
{
  if (*(void *)(*(void *)(a1[5] + 8) + 40))
  {
    if (!os_log_GKGeneral) {
      id v2 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
      sub_10009BB10();
    }
  }
  if (*(void *)(*(void *)(a1[6] + 8) + 40)
    || (+[NSError userErrorForCode:35 underlyingError:*(void *)(*(void *)(a1[5] + 8) + 40)], uint64_t v3 = objc_claimAutoreleasedReturnValue(), v4 = *(void *)(a1[5] + 8), v5 = *(void **)(v4 + 40), *(void *)(v4 + 40) = v3, v5, *(void *)(*(void *)(a1[6] + 8) + 40)))
  {
    id v6 = *(uint64_t (**)(void))(a1[4] + 16);
  }
  else
  {
    id v6 = *(uint64_t (**)(void))(a1[4] + 16);
  }
  return v6();
}

void sub_10008A610(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[GKDataRequestManager sharedManager];
  [v4 beginTransaction:@"matchRequest"];

  id v5 = +[GKDataRequestManager sharedManager];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_10008A758;
  v11[3] = &unk_1002D7E30;
  id v6 = *(void **)(a1 + 40);
  void v11[4] = *(void *)(a1 + 32);
  id v12 = v6;
  id v13 = *(id *)(a1 + 48);
  id v17 = v3;
  id v14 = *(id *)(a1 + 56);
  id v7 = *(id *)(a1 + 64);
  uint64_t v9 = *(void **)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 80);
  id v15 = v7;
  uint64_t v18 = v8;
  id v16 = v9;
  id v10 = v3;
  [v5 getValidNATTypeWithForceRelay:0 withHandler:v11];
}

void sub_10008A758(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_10008A86C;
  v10[3] = &unk_1002D7E08;
  id v11 = *(id *)(a1 + 48);
  id v17 = *(id *)(a1 + 80);
  id v6 = *(id *)(a1 + 56);
  uint64_t v18 = a2;
  uint64_t v7 = *(void *)(a1 + 32);
  id v12 = v6;
  uint64_t v13 = v7;
  id v8 = *(id *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 88);
  id v14 = v8;
  uint64_t v19 = v9;
  id v15 = *(id *)(a1 + 72);
  id v16 = *(id *)(a1 + 40);
  [v4 fetchPseudonymIfNeededWithTransportContext:v5 withCompletionHandler:v10];
}

void sub_10008A86C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    [*(id *)(a1 + 32) setError:a3];
    (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
  }
  else
  {
    [*(id *)(a1 + 40) setSelfPseudonym:v5];
    id v6 = +[GKReachability _gkReachabilityForInternetConnection];
    uint64_t v7 = [objc_opt_class() makeBaseServerRequestForMatchRequest:*(void *)(a1 + 56) playerCount:*(void *)(a1 + 96) rematchID:*(void *)(a1 + 64) connInfo:*(void *)(a1 + 88) | (8 * (objc_msgSend(v6, "_gkCurrentReachabilityStatus") == 2))];
    id v8 = [(id)objc_opt_class() makePlayersDictionaryForMatchRequest:*(void *)(a1 + 56) transportContext:*(void *)(a1 + 72)];
    [v7 setObject:v8 forKey:@"players"];

    if ([*(id *)(a1 + 56) matchType])
    {
      uint64_t v9 = +[NSNumber numberWithInteger:1];
      [v7 setObject:v9 forKey:GKServerHostedKey];
    }
    else
    {
      [*(id *)(a1 + 72) enrichServerRequest:v7 withMatchRequest:*(void *)(a1 + 56) selfPseudonym:v5];
      [*(id *)(a1 + 48) validateRequests:v7 andFileMultiplayerTTRIfNeededWithContext:@"[Internal Only] Found invalid transport version for matchmaking request."];
      uint64_t v9 = [v7 objectForKeyedSubscript:GKMatchClientDataKey];
      id v10 = +[NSNumber numberWithInteger:*(void *)(a1 + 88)];
      [v9 setObject:v10 forKey:@"nat-type"];

      id v11 = +[GKDataRequestManager sharedManager];
      id v12 = [v11 pushToken];

      if (v12) {
        [v9 setObject:v12 forKey:GKMatchPushTokenKey];
      }
      [v9 setObject:v5 forKey:GKTransportPseudonymKey];
      uint64_t v13 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [*(id *)(a1 + 56) isLateJoin]);
      [v7 setObject:v13 forKeyedSubscript:@"is-late-join"];
    }
    [*(id *)(a1 + 40) setServerRequest:v7];
    id v14 = *(void **)(a1 + 32);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    void v17[2] = sub_10008AB54;
    void v17[3] = &unk_1002D3980;
    uint64_t v15 = *(void *)(a1 + 48);
    id v18 = v7;
    uint64_t v19 = v15;
    id v20 = v14;
    id v16 = v7;
    [v14 perform:v17];
    (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
  }
}

void sub_10008AB54(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[GKNetworkRequestManager commonNetworkRequestManager];
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = [*(id *)(a1 + 40) clientProxy];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_10008AC4C;
  v9[3] = &unk_1002D5190;
  uint64_t v7 = *(void **)(a1 + 48);
  void v9[4] = *(void *)(a1 + 40);
  id v10 = v7;
  id v11 = v3;
  id v8 = v3;
  [v4 issueRequest:v5 bagKey:@"gk-request-match" clientProxy:v6 handler:v9];
}

void sub_10008AC4C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v9 = v5;
  if (!v5)
  {
    id v6 = *(void **)(a1 + 32);
    id v7 = a2;
    id v8 = [v6 clientProxy];
    [v8 processMatchResponse:v7];

    id v5 = 0;
  }
  [*(id *)(a1 + 40) setError:v5];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10008ACF0(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isCancelled])
  {
    uint64_t v2 = 2;
  }
  else if ([*(id *)(a1 + 32) isTimeout])
  {
    uint64_t v2 = 33;
  }
  else
  {
    if (![*(id *)(a1 + 32) isNetworkError]) {
      goto LABEL_8;
    }
    uint64_t v2 = 3;
  }
  id v3 = +[NSError userErrorForCode:v2 underlyingError:0];
  [*(id *)(a1 + 40) setError:v3];

LABEL_8:
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = [*(id *)(a1 + 40) error];
    (*(void (**)(uint64_t, uint64_t, void *))(v4 + 16))(v4, v5, v6);
  }
  id v7 = [*(id *)(a1 + 48) clientProxy];
  [v7 setCurrentMatchResponse:0];

  id v8 = +[GKDataRequestManager sharedManager];
  [v8 endTransaction:@"matchRequest"];
}

void sub_10008B7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008B7EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    uint64_t v5 = +[GKNetworkRequestManager commonNetworkRequestManager];
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = [WeakRetained clientProxy];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10008B8F8;
    void v8[3] = &unk_1002D3F48;
    id v9 = v3;
    [v5 issueRequest:v6 bagKey:@"gk-cancel-match" clientProxy:v7 handler:v8];
  }
  else
  {
    v3[2](v3);
  }
}

uint64_t sub_10008B8F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10008BD58(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_10008BD70(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  id v7 = [*(id *)(a1 + 32) clientProxy];
  id v8 = [v7 gameDescriptor];
  id v9 = +[GKGameCacheObject gameForGameDescriptor:v8 context:v5];

  id v10 = +[NSPredicate predicateWithFormat:@"game == %@ && playerGroup == %@ && queueName == %@", v9, *(void *)(a1 + 40), *(void *)(a1 + 48)];
  id v11 = +[GKCacheObject firstObjectMatchingPredicate:v10 context:v5];
  id v12 = v11;
  if (v11)
  {
    uint64_t v13 = [v11 playersPerMinute];
    *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [v13 unsignedIntegerValue];

    id v14 = [v12 expirationDate];
    [v14 timeIntervalSinceNow];
    BOOL v16 = v15 > 0.0;
  }
  else
  {
    BOOL v16 = 0;
  }
  if (!os_log_GKGeneral) {
    id v17 = (id)GKOSLoggers();
  }
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_DEBUG))
  {
    sub_10009BBF8();
    if (v16) {
      goto LABEL_16;
    }
  }
  else if (v16)
  {
    goto LABEL_16;
  }
  id v18 = *(void **)(a1 + 56);
  uint64_t v19 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKMultiplayerMatchService.m", 413, "-[GKMultiplayerMatchService getFlowRateWithPlayerGroup:queueName:handler:]_block_invoke");
  id v20 = [v18 transactionGroupWithName:v19];

  uint64_t v21 = *(void *)(a1 + 40);
  if (v21)
  {
    CFStringRef v49 = @"bucket-id";
    uint64_t v50 = v21;
    uint64_t v22 = +[NSDictionary dictionaryWithObjects:&v50 forKeys:&v49 count:1];
  }
  else
  {
    uint64_t v22 = 0;
  }
  uint64_t v23 = *(void *)(a1 + 48);
  if (v23)
  {
    CFStringRef v47 = @"queue-name";
    uint64_t v48 = v23;
    uint64_t v24 = +[NSDictionary dictionaryWithObjects:&v48 forKeys:&v47 count:1];

    uint64_t v22 = (void *)v24;
  }
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472;
  void v37[2] = sub_10008C170;
  void v37[3] = &unk_1002D7F20;
  id v25 = v22;
  uint64_t v26 = *(void *)(a1 + 32);
  id v38 = v25;
  uint64_t v39 = v26;
  id v27 = v20;
  id v40 = v27;
  id v41 = v12;
  id v42 = v5;
  id v43 = v9;
  id v44 = *(id *)(a1 + 40);
  id v28 = *(id *)(a1 + 48);
  uint64_t v29 = *(void *)(a1 + 64);
  id v45 = v28;
  uint64_t v46 = v29;
  [v27 perform:v37];
  if (!v12)
  {
    id v30 = *(void **)(a1 + 56);
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_10008C524;
    v33[3] = &unk_1002D3980;
    id v31 = v27;
    uint64_t v32 = *(void *)(a1 + 32);
    id v34 = v31;
    uint64_t v35 = v32;
    id v36 = *(id *)(a1 + 56);
    [v30 perform:v33];
  }
LABEL_16:
  v6[2](v6);
}

void sub_10008C170(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[GKNetworkRequestManager commonNetworkRequestManager];
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = [*(id *)(a1 + 40) clientProxy];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_10008C2D0;
  v10[3] = &unk_1002D7EF8;
  id v11 = *(id *)(a1 + 48);
  id v12 = *(id *)(a1 + 56);
  id v13 = *(id *)(a1 + 64);
  id v14 = *(id *)(a1 + 72);
  id v15 = *(id *)(a1 + 80);
  id v7 = *(id *)(a1 + 88);
  uint64_t v8 = *(void *)(a1 + 96);
  id v17 = v3;
  uint64_t v18 = v8;
  id v16 = v7;
  id v9 = v3;
  [v4 issueRequest:v5 bagKey:@"gk-get-flow-rate" clientProxy:v6 handler:v10];
}

void sub_10008C2D0(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = v8;
  if (v7 && !v8)
  {
    id v10 = [*(id *)(a1 + 32) context];
    id v13 = _NSConcreteStackBlock;
    uint64_t v14 = 3221225472;
    id v15 = sub_10008C42C;
    id v16 = &unk_1002D7ED0;
    id v17 = *(id *)(a1 + 40);
    id v18 = *(id *)(a1 + 48);
    id v19 = *(id *)(a1 + 56);
    id v20 = *(id *)(a1 + 64);
    id v21 = *(id *)(a1 + 72);
    id v11 = v7;
    double v24 = a4;
    uint64_t v12 = *(void *)(a1 + 88);
    id v22 = v11;
    uint64_t v23 = v12;
    [v10 performBlockAndWait:&v13];
  }
  [*(id *)(a1 + 32) setError:v9, v13, v14, v15, v16];
  (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
}

void sub_10008C42C(uint64_t a1)
{
  uint64_t v5 = (GKFlowRateCacheObject *)*(id *)(a1 + 32);
  if (!v5)
  {
    uint64_t v5 = [(GKCacheObject *)[GKFlowRateCacheObject alloc] initWithManagedObjectContext:*(void *)(a1 + 40)];
    [(GKFlowRateCacheObject *)v5 setGame:*(void *)(a1 + 48)];
    [(GKFlowRateCacheObject *)v5 setPlayerGroup:*(void *)(a1 + 56)];
    [(GKFlowRateCacheObject *)v5 setQueueName:*(void *)(a1 + 64)];
  }
  uint64_t v2 = [*(id *)(a1 + 72) valueForKey:@"players-per-min"];
  [(GKFlowRateCacheObject *)v5 setPlayersPerMinute:v2];

  id v3 = +[NSDate dateWithTimeIntervalSinceNow:*(double *)(a1 + 88)];
  [(GKFlowRateCacheObject *)v5 setExpirationDate:v3];

  uint64_t v4 = [(GKFlowRateCacheObject *)v5 playersPerMinute];
  *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = [v4 unsignedIntegerValue];
}

void sub_10008C524(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1[4];
  uint64_t v5 = [a1[5] clientProxy];
  uint64_t v6 = [v5 replyQueue];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10008C618;
  void v8[3] = &unk_1002D3A48;
  id v9 = a1[6];
  id v10 = a1[4];
  id v11 = v3;
  id v7 = v3;
  [v4 notifyOnQueue:v6 block:v8];
}

uint64_t sub_10008C618(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 40) error];
  [*(id *)(a1 + 32) setError:v2];

  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);

  return v3();
}

void sub_10008C674(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, uint64_t, id))(v1 + 16))(v1, v2, v3);
}

void sub_10008C8DC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  id v7 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"short-bundle-version"];

  id v8 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"bundle-id"];
  id v9 = *(void **)(a1 + 32);
  if (v7)
  {
    id v10 = [v9 objectForKeyedSubscript:@"short-bundle-version"];
    +[NSPredicate predicateWithFormat:@"bundleID = %@ AND shortVersion = %@", v8, v10];
  }
  else
  {
    id v10 = [v9 objectForKeyedSubscript:@"bundle-version"];
    +[NSPredicate predicateWithFormat:@"bundleID = %@ AND version = %@", v8, v10];
  id v11 = };

  uint64_t v12 = +[GKCacheObject firstObjectMatchingPredicate:v11 context:v5];
  unsigned int v13 = [v12 isValid];
  char v14 = v13;
  if (!v13) {
    goto LABEL_10;
  }
  id v15 = [v12 internalRepresentation];
  [*(id *)(a1 + 40) setObject:v15 forKeyedSubscript:@"result"];

  if (!os_log_GKGeneral) {
    id v16 = (id)GKOSLoggers();
  }
  id v17 = (void *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    id v18 = *(void **)(a1 + 40);
    id v19 = v17;
    id v20 = [v18 objectForKeyedSubscript:@"result"];
    *(_DWORD *)buf = 138412290;
    id v43 = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "List of compatible games:%@", buf, 0xCu);
  }
  id v21 = [v12 expirationDate];
  [v21 timeIntervalSinceNow];
  double v23 = v22;

  if (v23 <= 0.0)
  {
LABEL_10:
    double v24 = *(void **)(a1 + 40);
    id v25 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKMultiplayerMatchService.m", 492, "-[GKMultiplayerMatchService getCompatibilityMatrix:handler:]_block_invoke");
    uint64_t v26 = [v24 transactionGroupWithName:v25];

    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472;
    v36[2] = sub_10008CCB0;
    v36[3] = &unk_1002D4518;
    id v27 = *(id *)(a1 + 32);
    uint64_t v28 = *(void *)(a1 + 48);
    id v37 = v27;
    uint64_t v38 = v28;
    id v29 = v26;
    id v39 = v29;
    id v40 = v12;
    id v41 = v5;
    [v29 perform:v36];
    if ((v14 & 1) == 0)
    {
      id v30 = *(void **)(a1 + 40);
      v33[0] = _NSConcreteStackBlock;
      v33[1] = 3221225472;
      v33[2] = sub_10008D0C4;
      v33[3] = &unk_1002D3980;
      id v34 = v29;
      int8x16_t v32 = *(int8x16_t *)(a1 + 40);
      id v31 = (id)v32.i64[0];
      int8x16_t v35 = vextq_s8(v32, v32, 8uLL);
      [v30 perform:v33];
    }
  }
  v6[2](v6);
}

void sub_10008CCB0(id *a1, void *a2)
{
  id v3 = a2;
  CFStringRef v14 = @"game";
  id v15 = a1[4];
  id v4 = +[NSDictionary dictionaryWithObjects:&v15 forKeys:&v14 count:1];
  id v5 = +[GKNetworkRequestManager commonNetworkRequestManager];
  uint64_t v6 = [a1[5] clientProxy];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10008CE44;
  void v8[3] = &unk_1002D7278;
  id v9 = a1[6];
  id v10 = a1[7];
  id v11 = a1[8];
  id v12 = a1[4];
  id v13 = v3;
  id v7 = v3;
  [v5 issueRequest:v4 bagKey:@"gk-get-compatible-games" clientProxy:v6 handler:v8];
}

void sub_10008CE44(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = v8;
  if (v7 && !v8)
  {
    id v10 = [*(id *)(a1 + 32) context];
    id v11 = _NSConcreteStackBlock;
    uint64_t v12 = 3221225472;
    id v13 = sub_10008CF88;
    CFStringRef v14 = &unk_1002D68A8;
    id v15 = *(id *)(a1 + 40);
    double v20 = a4;
    id v16 = *(id *)(a1 + 48);
    id v17 = *(id *)(a1 + 56);
    id v18 = v7;
    id v19 = *(id *)(a1 + 32);
    [v10 performBlockAndWait:&v11];
  }
  [*(id *)(a1 + 32) setError:v9, v11, v12, v13, v14];
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_10008CF88(uint64_t a1)
{
  id v7 = (GKCompatibilityListCacheObject *)*(id *)(a1 + 32);
  uint64_t v2 = +[NSDate dateWithTimeIntervalSinceNow:*(double *)(a1 + 72)];
  if (!v7)
  {
    id v7 = [(GKCacheObject *)[GKCompatibilityListCacheObject alloc] initWithManagedObjectContext:*(void *)(a1 + 40)];
    id v3 = [*(id *)(a1 + 48) objectForKey:@"bundle-id"];
    [(GKCompatibilityListCacheObject *)v7 setBundleID:v3];

    id v4 = [*(id *)(a1 + 48) objectForKey:@"bundle-version"];
    [(GKCompatibilityListCacheObject *)v7 setVersion:v4];

    id v5 = [*(id *)(a1 + 48) objectForKey:@"short-bundle-version"];
    [(GKCompatibilityListCacheObject *)v7 setShortVersion:v5];
  }
  [(GKCompatibilityListCacheObject *)v7 updateWithServerRepresentation:*(void *)(a1 + 56) expirationDate:v2];
  uint64_t v6 = [(GKListCacheObject *)v7 internalRepresentation];
  [*(id *)(a1 + 64) setObject:v6 forKeyedSubscript:@"result"];
}

void sub_10008D0C4(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1[4];
  id v5 = [a1[5] clientProxy];
  uint64_t v6 = [v5 replyQueue];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10008D1B8;
  void v8[3] = &unk_1002D3A48;
  id v9 = a1[6];
  id v10 = a1[4];
  id v11 = v3;
  id v7 = v3;
  [v4 notifyOnQueue:v6 block:v8];
}

uint64_t sub_10008D1B8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 40) error];
  [*(id *)(a1 + 32) setError:v2];

  id v3 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"result"];
  [*(id *)(a1 + 32) setObject:v3 forKeyedSubscript:@"result"];

  id v4 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);

  return v4();
}

void sub_10008D24C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"result"];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_10008D514(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) shareRecordID];
  id v15 = v4;
  id v5 = +[NSArray arrayWithObjects:&v15 count:1];
  uint64_t v6 = +[GKCloudKitMultiplayerUtils privateDatabase];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_10008D670;
  v10[3] = &unk_1002D5CD0;
  id v11 = *(id *)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  id v12 = v7;
  uint64_t v13 = v8;
  id v14 = v3;
  id v9 = v3;
  +[GKCloudKitMultiplayerUtils fetchShareRecordsWithRecordIDs:v5 inDatabase:v6 handler:v10];
}

void sub_10008D670(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void **)(a1 + 32);
  id v7 = a2;
  uint64_t v8 = [v6 shareRecordID];
  id v9 = [v7 objectForKeyedSubscript:v8];

  if (v9)
  {
    [v9 setObject:*(void *)(a1 + 40) forKeyedSubscript:@"invitedPlayers"];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10008D7D8;
    void v13[3] = &unk_1002D7F48;
    id v10 = *(void **)(a1 + 48);
    id v14 = *(id *)(a1 + 56);
    [v10 saveRecord:v9 withHandler:v13];
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v11 = (id)GKOSLoggers();
    }
    id v12 = (void *)os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
      sub_10009BCE8((void **)(a1 + 32), v12, (uint64_t)v5);
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_10008D7D8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
      sub_10009BDA8();
    }
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers();
    }
    id v9 = os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Saved invitee record to CloudKit, where invitedPlayers entry maps [MessagesID : playerID].", v10, 2u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10008DC38(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = a2;
  uint64_t v49 = a2;
  id v4 = +[NSMutableDictionary dictionary];
  id v5 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [*(id *)(a1 + 32) hasGuestPlayers]);
  [v4 setObject:v5 forKey:@"requires-guest-player-capability"];

  [v4 setObject:*(void *)(a1 + 40) forKey:@"peers"];
  if (*(unsigned char *)(a1 + 88))
  {
    uint64_t v6 = 3;
    CFStringRef v7 = @"nearby";
  }
  else if ([*(id *)(a1 + 56) count] {
         || [*(id *)(a1 + 40) count]
  }
         && ([*(id *)(a1 + 40) objectAtIndexedSubscript:0],
             id v8 = objc_claimAutoreleasedReturnValue(),
             [v8 objectForKeyedSubscript:@"push-token"],
             id v9 = objc_claimAutoreleasedReturnValue(),
             v9,
             v8,
             v9))
  {
    uint64_t v6 = 4;
    CFStringRef v7 = @"shareplay";
  }
  else
  {
    uint64_t v6 = 1;
    CFStringRef v7 = @"standard";
  }
  [v4 setObject:v7 forKeyedSubscript:@"mode"];
  id v10 = +[NSNumber numberWithInt:v6];
  [*(id *)(a1 + 48) setApproachUsed:v10];

  id v11 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [*(id *)(a1 + 32) isLateJoin]);
  [v4 setObject:v11 forKeyedSubscript:@"is-late-join"];

  id v12 = +[GKDataRequestManager sharedManager];
  uint64_t v13 = [v12 pushToken];

  if (v13) {
    [v4 setObject:v13 forKey:@"self-push-token"];
  }
  id v14 = [*(id *)(a1 + 64) clientProxy];
  id v15 = [v14 fetchOrCreateInviteSession];

  v46[0] = _NSConcreteStackBlock;
  v46[1] = 3221225472;
  void v46[2] = sub_10008E148;
  v46[3] = &unk_1002D3B38;
  id v16 = v15;
  id v47 = v16;
  id v17 = v4;
  id v48 = v17;
  [v16 performSync:v46];
  id v18 = +[NSNumber numberWithUnsignedChar:v2];
  [v17 setObject:v18 forKey:@"self-nat-type"];

  id v19 = [*(id *)(a1 + 32) inviteMessage];
  double v20 = v19;
  if (!v19) {
    id v19 = &stru_1002E4F58;
  }
  id v21 = [(__CFString *)v19 dataUsingEncoding:4];

  double v22 = +[NSMutableData dataWithCapacity:](NSMutableData, "dataWithCapacity:", (char *)[v21 length] + 2);
  [v22 appendBytes:&v49 length:1];
  BOOL v45 = [*(id *)(a1 + 32) matchType] == (id)1;
  [v22 appendBytes:&v45 length:1];
  [v22 appendData:v21];
  [v22 appendBytes:&unk_10024F240 length:1];
  double v23 = [*(id *)(a1 + 72) defaultInviteVersionFromMinimumSupportedTransportVersion];
  unsigned __int8 v24 = [v23 unsignedIntValue];

  unsigned __int8 v44 = v24;
  [v22 appendBytes:&v44 length:1];
  id v25 = +[NSMutableDictionary dictionaryWithObjectsAndKeys:v22, @"s", 0];
  [v17 setObject:v25 forKey:GKMatchClientDataKey];
  uint64_t v26 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(a1 + 32) playerGroup]);
  [v25 setObject:v26 forKey:@"g"];

  id v27 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(a1 + 32) playerAttributes]);
  [v25 setObject:v27 forKey:@"a"];

  uint64_t v28 = *(void **)(a1 + 64);
  uint64_t v29 = *(void *)(a1 + 72);
  v34[0] = _NSConcreteStackBlock;
  v34[1] = 3221225472;
  _OWORD v34[2] = sub_10008E260;
  void v34[3] = &unk_1002D7F98;
  id v41 = *(id *)(a1 + 80);
  uint64_t v42 = v49;
  id v35 = *(id *)(a1 + 48);
  id v36 = v13;
  id v37 = *(id *)(a1 + 72);
  id v38 = v17;
  uint64_t v30 = *(void *)(a1 + 64);
  char v43 = *(unsigned char *)(a1 + 89);
  uint64_t v39 = v30;
  id v40 = v16;
  id v31 = v16;
  id v32 = v17;
  id v33 = v13;
  [v28 fetchPseudonymIfNeededWithTransportContext:v29 withCompletionHandler:v34];
}

void sub_10008E148(uint64_t a1)
{
  unsigned __int8 v2 = [*(id *)(a1 + 32) sessionToken];
  if (v2) {
    [*(id *)(a1 + 40) setObject:v2 forKey:@"session-token"];
  }
  if (!os_log_GKGeneral) {
    id v3 = (id)GKOSLoggers();
  }
  id v4 = (void *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    id v5 = *(void **)(a1 + 32);
    uint64_t v6 = v4;
    CFStringRef v7 = [v5 sessionToken];
    int v8 = 138412290;
    id v9 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Session token for initiate request: %@", (uint8_t *)&v8, 0xCu);
  }
}

void sub_10008E260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    id v4 = *(void (**)(void))(*(void *)(a1 + 80) + 16);
    v4();
  }
  else
  {
    [*(id *)(a1 + 32) setSelfPseudonym:a2];
    [*(id *)(a1 + 32) setSelfPushToken:*(void *)(a1 + 40)];
    [*(id *)(a1 + 48) enrichServerRequest:*(void *)(a1 + 56) andInviteResponse:*(void *)(a1 + 32)];
    [*(id *)(a1 + 64) validateRequests:*(void *)(a1 + 56) andFileMultiplayerTTRIfNeededWithContext:@"[Internal Only] Found invalid transport version for invitation request."];
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers();
    }
    uint64_t v6 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(a1 + 56);
      *(_DWORD *)buf = 138412290;
      uint64_t v21 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "gk-invitation-initiate request: %@", buf, 0xCu);
    }
    int v8 = +[GKNetworkRequestManager commonNetworkRequestManager];
    uint64_t v9 = *(void *)(a1 + 56);
    id v10 = [*(id *)(a1 + 64) clientProxy];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10008E49C;
    void v13[3] = &unk_1002D7F70;
    id v14 = *(id *)(a1 + 32);
    id v15 = *(id *)(a1 + 48);
    char v19 = *(unsigned char *)(a1 + 96);
    id v16 = *(id *)(a1 + 72);
    id v11 = *(id *)(a1 + 80);
    uint64_t v12 = *(void *)(a1 + 88);
    id v17 = v11;
    uint64_t v18 = v12;
    [v8 issueRequest:v9 bagKey:@"gk-invitation-initiate" clientProxy:v10 handler:v13];
  }
}

void sub_10008E49C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = v6;
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
      sub_10009BE78();
    }
    uint64_t v9 = [v5 objectForKeyedSubscript:@"status"];

    if (!v9) {
      goto LABEL_10;
    }
    id v10 = [v5 objectForKeyedSubscript:@"status"];
    id v11 = [v10 integerValue];

    if (v11 != (id)5020) {
      goto LABEL_10;
    }
    uint64_t v12 = [v5 objectForKeyedSubscript:@"peers"];
    id v13 = [v12 count];

    if (!v13) {
      goto LABEL_10;
    }
    id v14 = v5;
    id v15 = [v7 userInfo];
    uint64_t v16 = +[NSError userErrorForCode:5020 userInfo:v15];

    uint64_t v7 = (void *)v16;
    if (!v5)
    {
LABEL_10:
      id v17 = 0;
      goto LABEL_27;
    }
  }
  else
  {
    id v18 = v5;
    if (!os_log_GKGeneral) {
      id v19 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_DEBUG)) {
      sub_10009BE10();
    }
    uint64_t v7 = 0;
    if (!v5) {
      goto LABEL_10;
    }
  }
  double v20 = [v5 objectForKeyedSubscript:GKSuggestedTransportVersionKey];
  uint64_t v21 = v20;
  if (v20 && [v20 integerValue])
  {
    [*(id *)(a1 + 32) setTransportVersionToUse:v21];
  }
  else if ([*(id *)(a1 + 40) validTransportSelected])
  {
    if (!os_log_GKGeneral) {
      id v22 = (id)GKOSLoggers();
    }
    double v23 = (void *)os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      unsigned __int8 v24 = *(void **)(a1 + 40);
      id v25 = v23;
      uint64_t v26 = [v24 selectedTransport];
      *(_DWORD *)buf = 138412290;
      int8x16_t v52 = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "We didn't get transport suggestion from server, but we have previously selected transport. Use it. %@", buf, 0xCu);
    }
    id v27 = [*(id *)(a1 + 40) selectedTransport];
    uint64_t v28 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v27 version]);
    [*(id *)(a1 + 32) setTransportVersionToUse:v28];
  }
  uint64_t v29 = [*(id *)(a1 + 32) transportVersionToUse];

  if (!v29)
  {
    if (*(unsigned char *)(a1 + 72))
    {
      [*(id *)(a1 + 32) setTransportVersionToUse:&off_1002F1FB8];
      if (!os_log_GKGeneral) {
        id v33 = (id)GKOSLoggers();
      }
      id v34 = os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "Use V2 transport since message invitees are all available for v2.", buf, 2u);
      }
    }
    else
    {
      unsigned __int8 v44 = *(void **)(a1 + 40);
      uint64_t v46 = +[GKPreferences shared];
      BOOL v45 = [v46 forceEnabledTransportVersions];
      id v35 = +[GKPreferences shared];
      id v36 = [v35 forceDisabledTransportVersions];
      id v37 = +[GKPreferences shared];
      id v38 = [v44 defaultTransportWithForceEnabledTransports:v45 forceDisabledTransports:v36 andHealthMonitorEnabled:[v37 multiplayerHealthCheckEnabled]];
      uint64_t v39 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v38 version]);
      [*(id *)(a1 + 32) setTransportVersionToUse:v39];

      if (!os_log_GKGeneral) {
        id v40 = (id)GKOSLoggers();
      }
      id v41 = (void *)os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        uint64_t v42 = v41;
        char v43 = +[NSNumber numberWithInteger:1];
        *(_DWORD *)buf = 138412290;
        int8x16_t v52 = v43;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "Default to use GKDefaultTransportVersionIfNeeded = %@, since this is not included in the response.", buf, 0xCu);
      }
    }
  }

  id v17 = v5;
LABEL_27:
  uint64_t v30 = *(void **)(a1 + 48);
  v47[0] = _NSConcreteStackBlock;
  v47[1] = 3221225472;
  v47[2] = sub_10008EA4C;
  v47[3] = &unk_1002D4888;
  id v31 = v17;
  id v48 = v31;
  id v49 = *(id *)(a1 + 48);
  id v50 = *(id *)(a1 + 32);
  [v30 performSync:v47];
  uint64_t v32 = *(void *)(a1 + 56);
  if (v32) {
    (*(void (**)(uint64_t, id, void, void *, void))(v32 + 16))(v32, v31, *(void *)(a1 + 64), v7, *(void *)(a1 + 32));
  }
}

void sub_10008EA4C(id *a1)
{
  unsigned __int8 v2 = [a1[4] objectForKey:@"session-token"];
  if (v2)
  {
    [a1[5] setSessionToken:v2];
    [a1[6] setSessionToken:v2];
  }
  if (!os_log_GKGeneral) {
    id v3 = (id)GKOSLoggers();
  }
  id v4 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    int v10 = 138412290;
    id v11 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Session token from initiate response: %@", (uint8_t *)&v10, 0xCu);
  }
  if (!os_log_GKGeneral) {
    id v5 = (id)GKOSLoggers();
  }
  id v6 = (void *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    id v7 = a1[5];
    id v8 = v6;
    uint64_t v9 = [v7 sessionToken];
    int v10 = 138412290;
    id v11 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "session.sessionToken %@", (uint8_t *)&v10, 0xCu);
  }
}

void sub_10008F008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  objc_destroyWeak(v25);
  objc_destroyWeak((id *)(v26 - 144));
  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

void sub_10008F050(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v9 = a2;
  id v6 = [v9 messagesID];

  if (v6)
  {
    id v7 = *(void **)(a1 + 32);
    id v8 = [v9 messagesID];
    [v7 addObject:v8];
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    *a4 = 1;
  }
}

void sub_10008F0F0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (!os_log_GKGeneral) {
    id v10 = (id)GKOSLoggers();
  }
  id v11 = (void *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    uint64_t v12 = v11;
    id v13 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v7 count]);
    id v14 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v8 count]);
    int v21 = 138412802;
    id v22 = v9;
    __int16 v23 = 2112;
    unsigned __int8 v24 = v13;
    __int16 v25 = 2112;
    uint64_t v26 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Fetched IDS message V2. Error: %@. available: %@ unavailable: %@", (uint8_t *)&v21, 0x20u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  id v19 = [*(id *)(a1 + 56) count];
  BOOL v20 = v19 == [v7 count] && [v8 count] == 0;
  [WeakRetained loadCloudKitShareURLWithPlayer:v16 matchRequest:v17 transportContext:v18 availableForMessageV2:v20 handler:*(void *)(a1 + 64)];
}

void sub_10008F534(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 72);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_10008F65C;
  v11[3] = &unk_1002D8060;
  uint64_t v7 = *(void *)(a1 + 48);
  id v8 = *(id *)(a1 + 56);
  id v17 = v3;
  uint64_t v9 = *(void *)(a1 + 32);
  id v12 = v8;
  uint64_t v13 = v9;
  id v14 = *(id *)(a1 + 64);
  id v15 = *(id *)(a1 + 48);
  id v16 = *(id *)(a1 + 40);
  id v10 = v3;
  [v4 initiateInvitationForMatchRequest:v5 recipients:&__NSArray0__struct devicePushTokenMap:0 isNearbyInvite:0 availableForMessageV2:v6 transportContext:v7 handler:v11];
}

void sub_10008F65C(uint64_t a1, void *a2, unsigned __int8 a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a4;
  id v11 = a5;
  if (v10)
  {
    if (!os_log_GKGeneral) {
      id v12 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
      sub_10009BFB0();
    }
    [*(id *)(a1 + 32) setError:v10];
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
  else
  {
    id v64 = v9;
    id v13 = objc_alloc_init((Class)NSMutableDictionary);
    id v14 = [*(id *)(a1 + 40) clientProxy];
    id v15 = [v14 bundleIdentifier];
    [v13 setObject:v15 forKey:@"bundle-id"];

    id v16 = [*(id *)(a1 + 40) clientProxy];
    id v17 = [v16 bundleVersion];
    [v13 setObject:v17 forKey:@"bundle-version"];

    uint64_t v18 = [*(id *)(a1 + 40) clientProxy];
    id v19 = [v18 bundleShortVersion];

    if (v19)
    {
      BOOL v20 = [*(id *)(a1 + 40) clientProxy];
      int v21 = [v20 bundleShortVersion];
      [v13 setObject:v21 forKey:@"short-bundle-version"];
    }
    id v22 = [*(id *)(a1 + 40) clientProxy];
    __int16 v23 = [v22 adamID];

    if (v23)
    {
      unsigned __int8 v24 = [*(id *)(a1 + 40) clientProxy];
      __int16 v25 = [v24 adamID];
      [v13 setObject:v25 forKey:@"adam-id"];
    }
    uint64_t v26 = [*(id *)(a1 + 48) playerID];
    [v13 setObject:v26 forKey:@"playerID"];

    id v27 = +[NSNumber numberWithUnsignedChar:a3];
    [v13 setObject:v27 forKey:@"self-nat-type"];

    [*(id *)(a1 + 56) enrichConnectionDictionary:v13 inviteResponse:v11];
    uint64_t v28 = [*(id *)(a1 + 40) clientProxy];
    uint64_t v29 = [v28 fetchOrCreateInviteSession];

    v72[0] = _NSConcreteStackBlock;
    v72[1] = 3221225472;
    v72[2] = sub_10008FF44;
    v72[3] = &unk_1002D3B38;
    id v73 = v29;
    id v30 = v13;
    id v74 = v30;
    id v63 = v73;
    [v73 performSync:v72];
    id v31 = +[GKDataRequestManager sharedManager];
    uint64_t v32 = [v31 pushToken];

    if (v32)
    {
      id v33 = [v32 base64EncodedStringWithOptions:0];
      [v30 setObject:v33 forKey:@"self-push-token"];
    }
    id v34 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(a1 + 64) playerGroup]);
    [v30 setObject:v34 forKey:@"g"];

    id v35 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(a1 + 64) playerAttributes]);
    [v30 setObject:v35 forKey:@"a"];

    id v36 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(a1 + 64) matchType]);
    [v30 setObject:v36 forKey:@"matchType"];

    id v37 = [*(id *)(a1 + 56) defaultInviteVersionFromMinimumSupportedTransportVersion];
    [v30 setObject:v37 forKey:@"inviteVersion"];

    [v30 setObject:&off_1002F1FD0 forKey:@"invite-type"];
    id v38 = [v11 selfPseudonym];
    [v30 setObject:v38 forKey:GKTransportPseudonymKey];

    uint64_t v39 = [v11 transportVersionToUse];
    [v30 setObject:v39 forKey:GKSuggestedTransportVersionPushShortKey];

    id v40 = [v11 transportVersionToUse];
    id v41 = [v40 integerValue];

    if (v41 == (id)2)
    {
      uint64_t v42 = +[NSMutableDictionary dictionary];
      char v43 = [v11 lobbyParticipantsInfo];

      if (v43)
      {
        unsigned __int8 v44 = [v11 lobbyParticipantsInfo];
        [v42 setObject:v44 forKey:GKInviteLobbyParticipantsKey];
      }
      BOOL v45 = [v11 gameParticipantsInfo];

      if (v45)
      {
        uint64_t v46 = [v11 gameParticipantsInfo];
        [v42 setObject:v46 forKey:GKInviteGameParticipantsKey];
      }
      if ([v42 count])
      {
        id v71 = 0;
        id v47 = +[NSKeyedArchiver archivedDataWithRootObject:v42 requiringSecureCoding:1 error:&v71];
        id v48 = v71;
        id v49 = v48;
        if (v47)
        {
          [v30 setObject:v47 forKey:GKInviteArchivedParticipantInfoKey];
        }
        else if (v48)
        {
          if (!os_log_GKGeneral) {
            id v50 = (id)GKOSLoggers();
          }
          if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
            sub_10009BF48();
          }
        }
      }
      [v30 setObject:&off_1002F1FB8 forKey:@"inviteVersion"];
    }
    if (!os_log_GKGeneral) {
      id v51 = (id)GKOSLoggers();
    }
    int8x16_t v52 = os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v76 = v30;
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_INFO, "GK-InviteMessages: loadDataForURL connectionDictionary: %@", buf, 0xCu);
    }
    id v53 = [objc_alloc((Class)CKRecordZoneID) initWithZoneName:@"com.apple.legacygaming.invites" ownerName:CKCurrentUserDefaultName];
    id v54 = [objc_alloc((Class)CKRecord) initWithRecordType:@"LegacyMultiplayerInvites" zoneID:v53];
    id v70 = 0;
    long long v55 = +[NSKeyedArchiver archivedDataWithRootObject:v30 requiringSecureCoding:1 error:&v70];
    id v56 = v70;
    if (v56)
    {
      [*(id *)(a1 + 32) setError:v56];
      if (!os_log_GKGeneral) {
        id v57 = (id)GKOSLoggers();
      }
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
        sub_10009BEE0();
      }
    }
    else
    {
      [v54 setObject:v55 forKeyedSubscript:@"connectionData"];
      if (!os_log_GKGeneral) {
        id v58 = (id)GKOSLoggers();
      }
      char v59 = os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v76 = v55;
        _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_INFO, "GK-InviteMessages: loadDataForURL record for inviteData: %@", buf, 0xCu);
      }
      long long v60 = *(void **)(a1 + 32);
      v65[0] = _NSConcreteStackBlock;
      v65[1] = 3221225472;
      v65[2] = sub_100090054;
      v65[3] = &unk_1002D48B0;
      id v61 = v54;
      uint64_t v62 = *(void *)(a1 + 40);
      id v66 = v61;
      uint64_t v67 = v62;
      id v68 = v11;
      id v69 = *(id *)(a1 + 32);
      [v60 perform:v65];
    }
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();

    id v9 = v64;
  }
}

void sub_10008FF44(uint64_t a1)
{
  unsigned __int8 v2 = [*(id *)(a1 + 32) sessionToken];
  id v3 = v2;
  if (v2)
  {
    id v4 = *(void **)(a1 + 40);
    uint64_t v5 = [v2 base64EncodedStringWithOptions:0];
    [v4 setObject:v5 forKey:@"session-token"];
  }
  if (!os_log_GKGeneral) {
    id v6 = (id)GKOSLoggers();
  }
  uint64_t v7 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    int v8 = 138412290;
    id v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Session token for CloudKit record: %@", (uint8_t *)&v8, 0xCu);
  }
}

void sub_100090054(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) share];
  uint64_t v5 = [v4 recordID];
  id v6 = v5;
  if (v5)
  {
    id v7 = v5;
  }
  else
  {
    id v8 = objc_alloc((Class)CKRecordID);
    id v9 = [*(id *)(a1 + 32) recordID];
    id v10 = [v9 recordName];
    id v11 = +[NSString stringWithFormat:@"%@%@", @"share", v10];
    id v12 = [*(id *)(a1 + 32) recordID];
    id v13 = [v12 zoneID];
    id v7 = [v8 initWithRecordName:v11 zoneID:v13];
  }
  id v14 = *(void **)(a1 + 40);
  id v15 = [*(id *)(a1 + 32) recordID];
  [v14 setShareRecordID:v15];

  if (!os_log_GKGeneral) {
    id v16 = (id)GKOSLoggers();
  }
  id v17 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    uint64_t v18 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v27 = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Setting up CKShare for record: %@", buf, 0xCu);
  }
  uint64_t v20 = *(void *)(a1 + 32);
  id v19 = *(void **)(a1 + 40);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  void v22[2] = sub_1000902CC;
  v22[3] = &unk_1002D8038;
  id v23 = *(id *)(a1 + 48);
  id v24 = *(id *)(a1 + 56);
  id v25 = v3;
  id v21 = v3;
  [v19 setupInviteShareWithRecordID:v7 rootRecord:v20 handler:v22];
}

void sub_1000902CC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = [a2 URL];
  [*(id *)(a1 + 32) setCloudKitShareURL:v6];

  [*(id *)(a1 + 40) setObject:*(void *)(a1 + 32) forKeyedSubscript:@"inviteResponse"];
  if (v5)
  {
    [*(id *)(a1 + 40) setError:v5];
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
      sub_10009C018();
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10009039C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"inviteResponse"];
    id v3 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, id, void *))(v1 + 16))(v1, v4, v3);
  }
}

void sub_1000906E4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  void v17[2] = sub_1000908C4;
  void v17[3] = &unk_1002D8088;
  id v8 = v6;
  id v18 = v8;
  id v19 = *(id *)(a1 + 32);
  id v21 = *(id *)(a1 + 64);
  id v9 = v7;
  id v20 = v9;
  id v10 = objc_retainBlock(v17);
  if (*(unsigned char *)(a1 + 72)
    && [*(id *)(a1 + 40) zoneNotFoundFromOperation:@"setupInviteShareWithRecordID" operationError:v9])
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_100090A20;
    void v12[3] = &unk_1002D80B0;
    id v11 = *(void **)(a1 + 48);
    void v12[4] = *(void *)(a1 + 40);
    id v13 = v11;
    id v14 = *(id *)(a1 + 56);
    id v15 = *(id *)(a1 + 64);
    id v16 = v10;
    +[GKCloudKitMultiplayerUtils createZoneWithName:@"com.apple.legacygaming.invites" handler:v12];
  }
  else
  {
    ((void (*)(void *, id))v10[2])(v10, v9);
  }
}

void sub_1000908C4(uint64_t a1)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v11;
    while (2)
    {
      for (unint64_t i = 0; i != v3; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v4) {
          objc_enumerationMutation(v2);
        }
        id v6 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        id v7 = [v6 recordID:v10];
        id v8 = [*(id *)(a1 + 40) recordID];
        unsigned int v9 = [v7 isEqual:v8];

        if (v9)
        {
          id v3 = v6;
          goto LABEL_11;
        }
      }
      id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

id sub_100090A20(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  else {
    return _[*(id *)(a1 + 32) setupInviteShareWithRecordID:*(void *)(a1 + 40) rootRecord:*(void *)(a1 + 48) shouldRetry:0 handler:*(void *)(a1 + 56)];
  }
}

void sub_100090EE0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (*(unsigned char *)(a1 + 56)
    && [*(id *)(a1 + 32) zoneNotFoundFromOperation:@"saveRecord" operationError:v9])
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    void v11[2] = sub_100091008;
    v11[3] = &unk_1002D3DD0;
    long long v10 = *(void **)(a1 + 40);
    void v11[4] = *(void *)(a1 + 32);
    id v12 = v10;
    id v13 = *(id *)(a1 + 48);
    +[GKCloudKitMultiplayerUtils createZoneWithName:@"com.apple.legacygaming.invites" handler:v11];
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

id sub_100091008(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (id)(*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), *(void *)(a1 + 40), a2);
  }
  else {
    return _[*(id *)(a1 + 32) saveRecord:*(void *)(a1 + 40) shouldRetry:0 withHandler:*(void *)(a1 + 48)];
  }
}

void sub_100091524(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (([v5 isGuestPlayer] & 1) == 0)
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = [v5 playerID];
    [v3 addObject:v4];
  }
}

void sub_100091594(uint64_t a1, void *a2)
{
  uint64_t v32 = a2;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v53 objects:v64 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v54;
    uint64_t v33 = *(void *)v54;
    id v34 = v3;
    do
    {
      id v7 = 0;
      id v35 = v5;
      do
      {
        if (*(void *)v54 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v53 + 1) + 8 * (void)v7);
        id v9 = *(void **)(a1 + 40);
        if (v9)
        {
          id v37 = v7;
          long long v10 = [v9 objectForKeyedSubscript:v8];
          if ([v10 count])
          {
            long long v51 = 0u;
            long long v52 = 0u;
            long long v49 = 0u;
            long long v50 = 0u;
            id v11 = v10;
            id v12 = [v11 countByEnumeratingWithState:&v49 objects:v63 count:16];
            if (v12)
            {
              id v13 = v12;
              id v36 = v10;
              uint64_t v14 = *(void *)v50;
              do
              {
                id v15 = 0;
                do
                {
                  if (*(void *)v50 != v14) {
                    objc_enumerationMutation(v11);
                  }
                  uint64_t v16 = *(void *)(*((void *)&v49 + 1) + 8 * (void)v15);
                  id v17 = +[NSMutableDictionary dictionary];
                  [v17 setObject:v8 forKeyedSubscript:@"raw-id"];
                  [v17 setObject:v16 forKeyedSubscript:@"push-token"];
                  [*(id *)(a1 + 48) addObject:v17];

                  id v15 = (char *)v15 + 1;
                }
                while (v13 != v15);
                id v13 = [v11 countByEnumeratingWithState:&v49 objects:v63 count:16];
              }
              while (v13);
              uint64_t v6 = v33;
              id v3 = v34;
              id v5 = v35;
              long long v10 = v36;
            }
            else
            {
              id v5 = v35;
            }
          }
          else
          {
            id v25 = *(void **)(a1 + 48);
            CFStringRef v61 = @"raw-id";
            uint64_t v62 = v8;
            id v11 = +[NSDictionary dictionaryWithObjects:&v62 forKeys:&v61 count:1];
            [v25 addObject:v11];
          }

          id v7 = v37;
        }
        else
        {
          id v18 = *(void **)(a1 + 56);
          if (v18
            && ([v18 objectForKeyedSubscript:*(void *)(*((void *)&v53 + 1) + 8 * (void)v7)],
                (uint64_t v19 = objc_claimAutoreleasedReturnValue()) != 0))
          {
            uint64_t v20 = v19;
            id v38 = *(void **)(a1 + 48);
            v59[0] = @"raw-id";
            v59[1] = @"push-token";
            v60[0] = v8;
            v60[1] = v19;
            +[NSDictionary dictionaryWithObjects:v60 forKeys:v59 count:2];
            uint64_t v21 = v6;
            id v22 = v3;
            id v24 = v23 = (void *)v20;
            [v38 addObject:v24];

            long long v10 = v23;
            id v3 = v22;
            uint64_t v6 = v21;
          }
          else
          {
            uint64_t v26 = *(void **)(a1 + 48);
            CFStringRef v57 = @"raw-id";
            uint64_t v58 = v8;
            long long v10 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v58, &v57, 1, v32);
            [v26 addObject:v10];
          }
        }

        uint64_t v27 = *(void **)(a1 + 64);
        uint64_t v28 = +[NSNumber numberWithInteger:0];
        [v27 setObject:v28 forKey:v8];

        id v7 = (char *)v7 + 1;
      }
      while (v7 != v5);
      id v5 = [v3 countByEnumeratingWithState:&v53 objects:v64 count:16];
    }
    while (v5);
  }

  if ([*(id *)(a1 + 48) count])
  {
    v48[0] = _NSConcreteStackBlock;
    v48[1] = 3221225472;
    v48[2] = sub_100091A44;
    v48[3] = &unk_1002D51F8;
    uint64_t v29 = *(void **)(a1 + 72);
    v48[4] = *(void *)(a1 + 80);
    [v29 performOnManagedObjectContext:v48];
    v39[0] = _NSConcreteStackBlock;
    v39[1] = 3221225472;
    v39[2] = sub_100091B2C;
    void v39[3] = &unk_1002D8150;
    id v30 = *(void **)(a1 + 72);
    id v31 = *(void **)(a1 + 88);
    void v39[4] = *(void *)(a1 + 80);
    id v40 = v31;
    id v41 = *(id *)(a1 + 48);
    id v42 = *(id *)(a1 + 40);
    char v47 = *(unsigned char *)(a1 + 104);
    id v43 = *(id *)(a1 + 96);
    id v44 = *(id *)(a1 + 72);
    id v45 = *(id *)(a1 + 32);
    id v46 = *(id *)(a1 + 64);
    [v30 perform:v39];
  }
  v32[2](v32);
}

void sub_100091A44(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v10 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:v6];
  id v7 = [*(id *)(a1 + 32) clientProxy];
  uint64_t v8 = [v7 bundleIdentifier];
  id v9 = +[GKGameCacheObject gameForBundleID:v8 context:v6];

  [v10 expireRecentMatchesWithGame:v9];
  v5[2](v5);
}

void sub_100091B2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 96);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100091C5C;
  void v13[3] = &unk_1002D8060;
  uint64_t v9 = *(void *)(a1 + 64);
  id v10 = *(id *)(a1 + 72);
  id v19 = v3;
  uint64_t v11 = *(void *)(a1 + 32);
  id v14 = v10;
  uint64_t v15 = v11;
  id v16 = *(id *)(a1 + 80);
  id v17 = *(id *)(a1 + 88);
  id v18 = *(id *)(a1 + 48);
  id v12 = v3;
  [v4 initiateInvitationForMatchRequest:v5 recipients:v6 devicePushTokenMap:v7 isNearbyInvite:v8 availableForMessageV2:0 transportContext:v9 handler:v13];
}

void sub_100091C5C(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v8 = a2;
  id v9 = a4;
  id v10 = a5;
  if (v8 && v9 && [v9 code] != (id)5020)
  {
    if (!os_log_GKGeneral) {
      id v13 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
      sub_10009C0E8();
    }
    [*(id *)(a1 + 32) setError:v9];
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
  else
  {
    uint64_t v11 = +[GKService serviceFromService:*(void *)(a1 + 40)];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    void v14[2] = sub_100091E40;
    void v14[3] = &unk_1002D8128;
    uint64_t v12 = *(void *)(a1 + 48);
    void v14[4] = *(void *)(a1 + 40);
    id v15 = v8;
    id v16 = v9;
    id v17 = *(id *)(a1 + 56);
    id v18 = *(id *)(a1 + 64);
    id v19 = v10;
    id v20 = *(id *)(a1 + 32);
    id v21 = *(id *)(a1 + 72);
    [v11 getProfilesForPlayerIDs:v12 handler:v14];
  }
}

void sub_100091E40(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v61 = a3;
  uint64_t v6 = [a1[4] clientProxy];
  uint64_t v67 = [v6 fetchOrCreateInviteSession];

  long long v60 = v5;
  id v69 = [v5 _gkMapDictionaryWithKeyPath:@"playerID"];
  id v64 = a1;
  uint64_t v7 = [a1[5] objectForKey:@"peers"];
  id v68 = +[NSMutableDictionary dictionary];
  long long v82 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  id obj = v7;
  id v8 = [obj countByEnumeratingWithState:&v82 objects:v95 count:16];
  if (v8)
  {
    id v9 = v8;
    char v66 = 0;
    uint64_t v10 = *(void *)v83;
    do
    {
      for (unint64_t i = 0; i != v9; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v83 != v10) {
          objc_enumerationMutation(obj);
        }
        uint64_t v12 = *(void **)(*((void *)&v82 + 1) + 8 * i);
        id v13 = [v12 objectForKey:@"raw-id"];
        id v14 = [v12 objectForKey:@"status"];
        id v15 = [v14 integerValue];

        id v16 = [v69 objectForKeyedSubscript:v13];
        uint64_t v17 = [v12 objectForKey:@"push-token"];
        id v18 = (void *)v17;
        if (v16) {
          BOOL v19 = v15 == 0;
        }
        else {
          BOOL v19 = 0;
        }
        if (!v19 || v17 == 0)
        {
          if (!os_log_GKGeneral) {
            id v21 = (id)GKOSLoggers();
          }
          id v22 = (void *)os_log_GKMatch;
          char v66 = 1;
          if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
          {
            id v23 = v22;
            id v24 = [v16 conciseDescription];
            *(_DWORD *)buf = 138412802;
            v90 = v24;
            __int16 v91 = 2048;
            id v92 = v15;
            __int16 v93 = 2112;
            uint64_t v94 = v18;
            char v66 = 1;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Invite to %@ failed with status %ld. pushToken: %@", buf, 0x20u);
          }
        }
        else
        {
          id v25 = [v68 objectForKeyedSubscript:v13];
          id v26 = [v25 mutableCopy];
          uint64_t v27 = v26;
          if (v26)
          {
            id v28 = v26;
          }
          else
          {
            id v28 = +[NSMutableArray array];
          }
          uint64_t v29 = v28;

          [v29 addObject:v18];
          [v68 setObject:v29 forKeyedSubscript:v13];
          [v67 addInvitee:v16 reference:v18];
          if (!os_log_GKGeneral) {
            id v30 = (id)GKOSLoggers();
          }
          id v31 = os_log_GKMatch;
          if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            v90 = v67;
            __int16 v91 = 2112;
            id v92 = v16;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "InviteSession (%@) added one player: %@.", buf, 0x16u);
          }
        }
      }
      id v9 = [obj countByEnumeratingWithState:&v82 objects:v95 count:16];
    }
    while (v9);
  }
  else
  {
    char v66 = 0;
  }

  id v32 = v61;
  uint64_t v33 = v64;
  if (v61 || (id v32 = v64[6]) != 0)
  {
    id v34 = [v32 userInfo];
    id v35 = [v34 objectForKey:NSUnderlyingErrorKey];

    if ([v35 isGKCompoundError])
    {
      id v63 = v35;
      id v62 = v32;
      id v36 = [v64[5] objectForKeyedSubscript:@"peers"];
      id v37 = +[NSMutableSet set];
      long long v78 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      id v38 = v36;
      id v39 = [v38 countByEnumeratingWithState:&v78 objects:v88 count:16];
      if (v39)
      {
        id v40 = v39;
        uint64_t v41 = *(void *)v79;
        do
        {
          for (j = 0; j != v40; j = (char *)j + 1)
          {
            if (*(void *)v79 != v41) {
              objc_enumerationMutation(v38);
            }
            id v43 = *(void **)(*((void *)&v78 + 1) + 8 * (void)j);
            id v44 = [v43 objectForKeyedSubscript:@"status"];
            id v45 = [v43 objectForKeyedSubscript:@"raw-id"];
            if ([v44 integerValue]) {
              [v64[7] setObject:v44 forKey:v45];
            }
            else {
              [v37 addObject:v45];
            }
          }
          id v40 = [v38 countByEnumeratingWithState:&v78 objects:v88 count:16];
        }
        while (v40);
      }

      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      id v46 = [v64[7] allKeys];
      id v47 = [v46 countByEnumeratingWithState:&v74 objects:v87 count:16];
      if (v47)
      {
        id v48 = v47;
        uint64_t v49 = *(void *)v75;
        do
        {
          for (k = 0; k != v48; k = (char *)k + 1)
          {
            if (*(void *)v75 != v49) {
              objc_enumerationMutation(v46);
            }
            uint64_t v51 = *(void *)(*((void *)&v74 + 1) + 8 * (void)k);
            if (([v37 containsObject:v51] & 1) == 0)
            {
              long long v52 = +[NSNumber numberWithInteger:1];
              [v64[7] setObject:v52 forKeyedSubscript:v51];
            }
            if ([v37 containsObject:v51]) {
              [v64[7] setObject:&off_1002F1FE8 forKeyedSubscript:v51];
            }
          }
          id v48 = [v46 countByEnumeratingWithState:&v74 objects:v87 count:16];
        }
        while (v48);
      }

      id v32 = v62;
      uint64_t v33 = v64;
      id v35 = v63;
    }
    else
    {
      if (v35) {
        long long v53 = v35;
      }
      else {
        long long v53 = v32;
      }
      +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v53 code]);
      id v38 = (id)objc_claimAutoreleasedReturnValue();
      long long v70 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      id v37 = v64[8];
      id v54 = [v37 countByEnumeratingWithState:&v70 objects:v86 count:16];
      if (v54)
      {
        id v55 = v54;
        uint64_t v56 = *(void *)v71;
        do
        {
          for (m = 0; m != v55; m = (char *)m + 1)
          {
            if (*(void *)v71 != v56) {
              objc_enumerationMutation(v37);
            }
            uint64_t v58 = [*(id *)(*((void *)&v70 + 1) + 8 * (void)m) objectForKey:@"raw-id"];
            [v64[7] setObject:v38 forKey:v58];
          }
          id v55 = [v37 countByEnumeratingWithState:&v70 objects:v86 count:16];
        }
        while (v55);
      }
    }
  }
  if (v66)
  {
    char v59 = +[GKReporter reporter];
    [v59 reportEvent:GKReporterDomainInvite type:GKReporterInviteFail];
  }
  [v33[9] setInvitedUserIDs:v33[7]];
  [v33[9] setPlayerTokenMap:v68];
  [v33[10] setObject:v33[9] forKeyedSubscript:@"inviteResponse"];
  [v33[10] setError:v32];
  (*((void (**)(void))v33[11] + 2))();
}

void sub_10009261C(uint64_t a1)
{
  id v2 = +[GKReporter reporter];
  [v2 reportEvent:GKReporterDomainInvite type:GKReporterInviteInitiate];

  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    id v5 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"inviteResponse"];
    id v4 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, id, void *))(v3 + 16))(v3, v5, v4);
  }
}

void sub_10009294C(uint64_t a1)
{
  uint64_t v1 = a1;
  id v2 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [*(id *)(a1 + 32) count]);
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id obj = *(id *)(v1 + 32);
  id v23 = [obj countByEnumeratingWithState:&v30 objects:v39 count:16];
  if (v23)
  {
    uint64_t v21 = v1;
    uint64_t v22 = *(void *)v31;
    do
    {
      for (unint64_t i = 0; i != v23; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v31 != v22) {
          objc_enumerationMutation(obj);
        }
        id v4 = *(void **)(*((void *)&v30 + 1) + 8 * i);
        id v5 = [*(id *)(v1 + 40) referencesForInvitee:v4];
        if ([v5 count])
        {
          id v24 = v5;
          id v25 = i;
          long long v28 = 0u;
          long long v29 = 0u;
          long long v26 = 0u;
          long long v27 = 0u;
          id v6 = v5;
          id v7 = [v6 countByEnumeratingWithState:&v26 objects:v38 count:16];
          if (v7)
          {
            id v8 = v7;
            uint64_t v9 = *(void *)v27;
            do
            {
              for (j = 0; j != v8; j = (char *)j + 1)
              {
                if (*(void *)v27 != v9) {
                  objc_enumerationMutation(v6);
                }
                uint64_t v11 = *(void *)(*((void *)&v26 + 1) + 8 * (void)j);
                v36[0] = @"id";
                uint64_t v12 = [v4 playerID];
                v36[1] = @"push-token";
                v37[0] = v12;
                v37[1] = v11;
                id v13 = +[NSDictionary dictionaryWithObjects:v37 forKeys:v36 count:2];
                [v2 addObject:v13];
              }
              id v8 = [v6 countByEnumeratingWithState:&v26 objects:v38 count:16];
            }
            while (v8);
          }

          uint64_t v1 = v21;
          [*(id *)(v21 + 40) removeInvitee:v4 reference:0];
          id v5 = v24;
          unint64_t i = v25;
        }
      }
      id v23 = [obj countByEnumeratingWithState:&v30 objects:v39 count:16];
    }
    while (v23);
  }

  if ([v2 count])
  {
    uint64_t v14 = *(void *)(v1 + 48);
    v34[0] = @"session-token";
    v34[1] = @"peers";
    v35[0] = v14;
    v35[1] = v2;
    _OWORD v34[2] = @"reason";
    id v15 = +[NSNumber numberWithInteger:0];
    v35[2] = v15;
    id v16 = +[NSDictionary dictionaryWithObjects:v35 forKeys:v34 count:3];

    uint64_t v17 = +[GKNetworkRequestManager commonNetworkRequestManager];
    id v18 = [*(id *)(v1 + 56) clientProxy];
    [v17 issueRequest:v16 bagKey:@"gk-invitation-cancel" clientProxy:v18 handler:&stru_1002D81B8];

    BOOL v19 = +[GKReporter reporter];
    [v19 reportEvent:GKReporterDomainInvite type:GKReporterInviteUninvite];
  }
  dispatch_group_leave(*(dispatch_group_t *)(v1 + 64));
}

uint64_t sub_100092CA4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100092ED0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100092F8C;
  void v8[3] = &unk_1002D3A48;
  id v5 = v4;
  uint64_t v6 = *(void *)(a1 + 40);
  id v9 = v5;
  uint64_t v10 = v6;
  id v11 = v3;
  id v7 = v3;
  [v5 performAsync:v8];
}

void sub_100092F8C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) allInvitees];
  if ([v2 count])
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_100093064;
    v4[3] = &unk_1002D3A20;
    id v3 = *(void **)(a1 + 40);
    id v5 = *(id *)(a1 + 48);
    [v3 removePlayersFromGameInviteV2:v2 handler:v4];
  }
  else
  {
    [*(id *)(a1 + 32) removeAllInvitees];
    [*(id *)(a1 + 32) removeAllResponses];
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

uint64_t sub_100093064(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100093074(uint64_t a1)
{
  id v2 = +[GKReporter reporter];
  [v2 reportEvent:GKReporterDomainInvite type:GKReporterInviteCancel];

  id v3 = [*(id *)(a1 + 32) clientProxy];
  [v3 deleteInviteSession];

  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    id v5 = *(uint64_t (**)(void))(result + 16);
    return v5();
  }
  return result;
}

void sub_1000937B8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = +[MultiplayerGroupList _gkFetchRequest];
  id v8 = +[NSManagedObject _gkRetrieveCleanEntry:v6 request:v7];

  id v9 = +[GKNetworkRequestManager commonNetworkRequestManager];
  id v10 = [v9 relatedTasksExistForBagKey:@"gk-get-player-groups"];

  if (!v8
    || (([v8 expirationDate],
         id v11 = objc_claimAutoreleasedReturnValue(),
         unsigned int v12 = [v8 _gkIsExpired:v11],
         v11,
         v12)
      ? (BOOL v13 = v10 == (id)2)
      : (BOOL v13 = 0),
        v13))
  {
    id v20 = +[GKNetworkRequestManager commonNetworkRequestManager];
    uint64_t v21 = [*(id *)(a1 + 32) clientProxy];
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_100093B70;
    v32[3] = &unk_1002D7278;
    id v33 = *(id *)(a1 + 48);
    id v22 = v7;
    uint64_t v23 = *(void *)(a1 + 32);
    id v24 = *(void **)(a1 + 40);
    id v34 = v22;
    uint64_t v35 = v23;
    id v36 = v24;
    id v37 = v5;
    [v20 issueRequest:&__NSDictionary0__struct bagKey:@"gk-get-player-groups" clientProxy:v21 handler:v32];
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v14 = (id)GKOSLoggers();
    }
    id v15 = (void *)os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      log = v15;
      id v16 = [v8 expirationDate];
      uint64_t v17 = [v8 entries];
      id v18 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v17 count]);
      BOOL v19 = +[NSNumber numberWithBool:v10 != (id)2];
      *(_DWORD *)buf = 138412802;
      id v39 = v16;
      __int16 v40 = 2112;
      uint64_t v41 = v18;
      __int16 v42 = 2112;
      id v43 = v19;
      _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_INFO, "getMultiPlayerGroups using cache: %@ %@ storeAndForwardActiveUseCache: %@", buf, 0x20u);
    }
    [*(id *)(a1 + 32) convertToInternalObjects:v8 results:*(void *)(a1 + 40)];
    v5[2](v5);
  }
  id v25 = *(void **)(a1 + 48);
  long long v26 = [*(id *)(a1 + 32) clientProxy];
  long long v27 = [v26 replyQueue];
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  void v29[2] = sub_100094140;
  v29[3] = &unk_1002D3930;
  id v31 = *(id *)(a1 + 56);
  id v30 = *(id *)(a1 + 48);
  [v25 notifyOnQueue:v27 block:v29];
}

void sub_100093B70(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7 = a2;
  id v8 = a3;
  [*(id *)(a1 + 32) setError:v8];
  if (!v7 || v8)
  {
    if (!os_log_GKGeneral) {
      id v13 = (id)GKOSLoggers();
    }
    id v14 = os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v23 = v8;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "getMultiPlayerGroups error: %@", buf, 0xCu);
    }
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  else
  {
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    void v15[2] = sub_100093D28;
    v15[3] = &unk_1002D81E0;
    id v9 = *(void **)(a1 + 32);
    id v16 = *(id *)(a1 + 40);
    id v10 = v7;
    uint64_t v11 = *(void *)(a1 + 48);
    unsigned int v12 = *(void **)(a1 + 56);
    id v17 = v10;
    uint64_t v18 = v11;
    double v21 = a4;
    id v19 = v12;
    id v20 = *(id *)(a1 + 64);
    [v9 performOnManagedObjectContext:v15];
  }
}

void sub_100093D28(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  long long v29 = a3;
  uint64_t v35 = a1;
  id v33 = v5;
  id v34 = +[NSManagedObject _gkRetrieveCleanEntry:v5 request:*(void *)(a1 + 32)];
  if (!v34)
  {
    id v6 = [MultiplayerGroupList alloc];
    id v7 = +[MultiplayerGroupList entity];
    id v34 = [(MultiplayerGroupList *)v6 initWithEntity:v7 insertIntoManagedObjectContext:v33];
  }
  if (!os_log_GKGeneral) {
    id v8 = (id)GKOSLoggers();
  }
  id v9 = (void *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    id v10 = v9;
    uint64_t v11 = [(MultiplayerGroupList *)v34 expirationDate];
    unsigned int v12 = [(MultiplayerGroupList *)v34 entries];
    id v13 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v12 count]);
    *(_DWORD *)buf = 138412546;
    id v43 = v11;
    __int16 v44 = 2112;
    id v45 = v13;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "getMultiPlayerGroups from server: %@ %@", buf, 0x16u);
  }
  id v14 = [*(id *)(v35 + 40) objectForKey:@"groups"];
  long long v32 = objc_opt_new();
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  id obj = v14;
  id v36 = [obj countByEnumeratingWithState:&v37 objects:v41 count:16];
  if (v36)
  {
    uint64_t v31 = *(void *)v38;
    do
    {
      for (unint64_t i = 0; i != v36; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v38 != v31) {
          objc_enumerationMutation(obj);
        }
        id v16 = *(void **)(*((void *)&v37 + 1) + 8 * i);
        id v17 = [v16 objectForKeyedSubscript:@"participants"];
        uint64_t v18 = [v16 objectForKeyedSubscript:@"played-at"];
        id v19 = [v18 longValue];
        id v20 = [v16 objectForKeyedSubscript:@"player-group-id"];
        double v21 = [v16 objectForKeyedSubscript:@"properties"];
        id v22 = [v21 objectForKeyedSubscript:@"numberOfAutomatched"];
        id v23 = [v22 integerValue];
        id v24 = *(void **)(v35 + 48);
        id v25 = +[NSSet setWithArray:v17];
        long long v26 = [v24 ensureGroup:v20 participants:v25 playedAt:v19 numberOfAutomatched:v23 moc:v33 list:v34];

        [v32 addObject:v26];
      }
      id v36 = [obj countByEnumeratingWithState:&v37 objects:v41 count:16];
    }
    while (v36);
  }

  long long v27 = +[NSDate dateWithTimeIntervalSinceNow:*(double *)(v35 + 72)];
  [(MultiplayerGroupList *)v34 setExpirationDate:v27];
  long long v28 = [(MultiplayerGroupList *)v34 entries];
  [(MultiplayerGroupList *)v34 removeEntries:v28];

  [(MultiplayerGroupList *)v34 addEntries:v32];
  [*(id *)(v35 + 48) convertToInternalObjects:v34 results:*(void *)(v35 + 56)];
  v29[2](v29);
  (*(void (**)(void))(*(void *)(v35 + 64) + 16))();
}

void sub_100094140(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_100094338(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[NSSet setWithArray:*(void *)(a1 + 32)];
  id v5 = +[MultiplayerGroupList _gkFetchRequest];
  id v6 = +[NSManagedObject _gkRetrieveCleanEntry:v3 request:v5];
  id v7 = [*(id *)(a1 + 40) ensureGroup:*(void *)(a1 + 48) participants:v4 playedAt:*(void *)(a1 + 72) numberOfAutomatched:*(void *)(a1 + 80) moc:v3 list:v6];
  id v8 = [[GKMultiplayerGroupRequest alloc] initWithGroupID:*(void *)(a1 + 48)];
  [(GKMultiplayerGroupRequest *)v8 setBundleID:*(void *)(a1 + 56)];
  [(GKMultiplayerGroupRequest *)v8 setParticipants:v4];
  if (*(void *)(a1 + 72)) {
    -[GKMultiplayerGroupRequest setPlayedAt:](v8, "setPlayedAt:");
  }
  [(GKMultiplayerGroupRequest *)v8 setPlayerGroupID:*(void *)(a1 + 48)];
  CFStringRef v17 = @"numberOfAutomatched";
  id v9 = +[NSNumber numberWithInteger:*(void *)(a1 + 80)];
  id v10 = +[NSString stringWithFormat:@"%@", v9];
  uint64_t v18 = v10;
  uint64_t v11 = +[NSDictionary dictionaryWithObjects:&v18 forKeys:&v17 count:1];
  id v12 = [v11 mutableCopy];
  [(GKMultiplayerGroupRequest *)v8 setRequestData:v12];

  id v13 = +[GKNetworkRequestManager commonNetworkRequestManager];
  id v14 = [*(id *)(a1 + 40) clientProxy];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  void v15[2] = sub_1000945A0;
  v15[3] = &unk_1002D45D8;
  id v16 = *(id *)(a1 + 64);
  [v13 writeToNetwork:v8 clientProxy:v14 handler:v15];
}

void sub_1000945A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!os_log_GKGeneral) {
    id v4 = (id)GKOSLoggers();
  }
  id v5 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "GKMultiplayerGroupRequest successfully registered with store and forward", v6, 2u);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100094930(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[GKDataRequestManager sharedManager];
  id v5 = +[GKPreferences shared];
  id v6 = [v5 forceRelay];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_100094A68;
  v9[3] = &unk_1002D8258;
  id v7 = *(void **)(a1 + 40);
  void v9[4] = *(void *)(a1 + 32);
  id v10 = v7;
  id v11 = *(id *)(a1 + 48);
  id v12 = *(id *)(a1 + 56);
  id v14 = v3;
  id v13 = *(id *)(a1 + 64);
  id v8 = v3;
  [v4 getValidNATTypeWithForceRelay:v6 withHandler:v9];
}

void sub_100094A68(id *a1, unsigned __int8 a2)
{
  id v4 = +[NSMutableData data];
  id v5 = [a1[4] clientProxy];
  id v6 = [v5 bundleIdentifier];
  id v7 = [v6 dataUsingEncoding:4];
  [v4 appendData:v7];

  if ([a1[5] version])
  {
    [v4 appendBytes:&unk_10024F240 length:1];
    id v8 = +[GKPreferences shared];
    unsigned __int8 v9 = [v8 maximumInviteVersionSupported];

    unsigned __int8 v38 = v9;
    [v4 appendBytes:&v38 length:1];
  }
  CFStringRef v41 = @"s";
  __int16 v42 = v4;
  long long v29 = v4;
  id v10 = +[NSDictionary dictionaryWithObjects:&v42 forKeys:&v41 count:1];
  long long v28 = +[NSMutableDictionary dictionaryWithDictionary:v10];

  v39[0] = @"session-token";
  id v11 = [a1[5] sessionToken];
  v40[0] = v11;
  v39[1] = @"self-nat-type";
  id v12 = +[NSNumber numberWithUnsignedChar:a2];
  v40[1] = v12;
  v39[2] = @"peer-id";
  id v13 = [a1[5] peerID];
  v40[2] = v13;
  void v39[3] = @"peer-push-token";
  id v14 = [a1[5] peerPushToken];
  v40[3] = v14;
  void v39[4] = @"peer-nat-type";
  id v15 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [a1[5] peerNATType]);
  void v40[4] = v15;
  void v39[5] = @"peer-nat-ip";
  id v16 = [a1[5] peerNATIP];
  v40[5] = v16;
  v39[6] = @"peer-blob";
  CFStringRef v17 = [a1[5] peerBlob];
  v40[6] = v17;
  uint64_t v18 = +[NSDictionary dictionaryWithObjects:v40 forKeys:v39 count:7];
  id v19 = +[NSMutableDictionary dictionaryWithDictionary:v18];

  [a1[6] enrichServerRequestWithConnectionData:v19];
  id v20 = +[GKDataRequestManager sharedManager];
  double v21 = [v20 pushToken];

  if (v21) {
    [v19 setObject:v21 forKey:@"self-push-token"];
  }
  id v22 = a1[4];
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472;
  v30[2] = sub_100094E54;
  void v30[3] = &unk_1002D8230;
  id v23 = a1[6];
  id v31 = a1[7];
  id v37 = a1[9];
  id v32 = a1[8];
  id v33 = v28;
  id v24 = a1[4];
  id v25 = a1[5];
  id v34 = v19;
  id v35 = v24;
  id v36 = v25;
  id v26 = v19;
  id v27 = v28;
  [v22 fetchPseudonymIfNeededWithTransportContext:v23 withCompletionHandler:v30];
}

void sub_100094E54(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    [*(id *)(a1 + 32) setError:a3];
    (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
  }
  else
  {
    [*(id *)(a1 + 40) setSelfPseudonym:v5];
    [*(id *)(a1 + 48) setObject:v5 forKey:GKTransportPseudonymKey];
    [*(id *)(a1 + 56) setObject:*(void *)(a1 + 48) forKey:@"client-data"];
    if (!os_log_GKGeneral) {
      id v6 = (id)GKOSLoggers();
    }
    id v7 = os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = *(void *)(a1 + 56);
      *(_DWORD *)buf = 138412290;
      uint64_t v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Created data request for gk-invitation-accept request: %@", buf, 0xCu);
    }
    unsigned __int8 v9 = *(void **)(a1 + 32);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_100095040;
    void v12[3] = &unk_1002D4518;
    id v10 = *(id *)(a1 + 56);
    uint64_t v11 = *(void *)(a1 + 64);
    id v13 = v10;
    uint64_t v14 = v11;
    id v15 = *(id *)(a1 + 40);
    id v16 = *(id *)(a1 + 72);
    id v17 = *(id *)(a1 + 32);
    [v9 perform:v12];
    (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
  }
}

void sub_100095040(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[GKNetworkRequestManager commonNetworkRequestManager];
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = [*(id *)(a1 + 40) clientProxy];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10009515C;
  void v8[3] = &unk_1002D5D48;
  id v9 = *(id *)(a1 + 48);
  id v10 = *(id *)(a1 + 56);
  id v11 = *(id *)(a1 + 64);
  id v12 = v3;
  id v7 = v3;
  [v4 issueRequest:v5 bagKey:@"gk-invitation-accept" clientProxy:v6 handler:v8];
}

uint64_t sub_10009515C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setResponsePlist:a2];
  id v7 = [*(id *)(a1 + 40) sessionID];
  [*(id *)(a1 + 32) setSessionID:v7];

  uint64_t v8 = [*(id *)(a1 + 40) transportVersionToUse];
  [*(id *)(a1 + 32) setTransportVersionToUse:v8];

  [*(id *)(a1 + 48) setObject:*(void *)(a1 + 32) forKeyedSubscript:@"acceptResponse"];
  [*(id *)(a1 + 48) setError:v6];

  id v9 = *(uint64_t (**)(void))(*(void *)(a1 + 56) + 16);

  return v9();
}

void sub_100095220(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"acceptResponse"];
    id v4 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, void *, void *))(v1 + 16))(v1, v3, v4);
  }
  id v5 = +[GKReporter reporter];
  [v5 reportEvent:GKReporterDomainInvite type:GKReporterInviteAcceptApp];
}

uint64_t sub_1000955B0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000956B0(uint64_t a1)
{
  uint64_t v2 = +[GKDispatchGroup dispatchGroupWithName:@"getAcceptedGameInvite"];
  id v3 = [*(id *)(a1 + 32) clientProxy];
  id v4 = [v3 gameDescriptor];
  id v5 = +[GKBulletinController sharedController];
  id v6 = [v5 acceptedInviteManager];
  id v7 = [v6 multiplayerInviteForGame:v4];
  v21[0] = 0;
  v21[1] = v21;
  void v21[2] = 0x3032000000;
  v21[3] = sub_100089E90;
  void v21[4] = sub_100089EA0;
  id v22 = 0;
  if (v7)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers();
    }
    id v9 = os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "GKMatchMaker invite manager and bullentin are set", buf, 2u);
    }
    id v10 = [v7 originatorPlayer];

    if (!v10)
    {
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      void v18[2] = sub_10009597C;
      void v18[3] = &unk_1002D4050;
      id v19 = v7;
      [v2 perform:v18];
    }
    id v11 = [v3 replyQueue];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100095A24;
    void v13[3] = &unk_1002D8280;
    id v14 = v7;
    id v17 = v21;
    id v16 = *(id *)(a1 + 40);
    id v15 = v5;
    [v2 notifyOnQueue:v11 block:v13];
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 40);
    if (v12) {
      (*(void (**)(uint64_t, void, void))(v12 + 16))(v12, 0, 0);
    }
  }
  _Block_object_dispose(v21, 8);
}

void sub_100095964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10009597C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100095A14;
  void v6[3] = &unk_1002D45D8;
  id v7 = v3;
  id v5 = v3;
  [v4 loadOriginatorPlayerWithCompletionHandler:v6];
}

uint64_t sub_100095A14(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100095A24(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = +[GKInviteInternal inviteWithBulletin:](GKInviteInternal, "inviteWithBulletin:");
    id v3 = [*(id *)(a1 + 32) declineReason];

    if (v3)
    {
      if (!os_log_GKGeneral) {
        id v4 = (id)GKOSLoggers();
      }
      id v5 = os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        LOWORD(v8) = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Found a declined invite due to incompatible transport version.", (uint8_t *)&v8, 2u);
      }
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), *(id *)(a1 + 32));
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  if (*(void *)(a1 + 48))
  {
    if (!os_log_GKGeneral) {
      id v6 = (id)GKOSLoggers();
    }
    id v7 = os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      int v8 = 138412290;
      id v9 = v2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "GKGetAcceptedInviteHandler invite: %@", (uint8_t *)&v8, 0xCu);
    }
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)) {
    [*(id *)(a1 + 40) withdrawBulletin:];
  }
}

void sub_100095E6C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) clientProxy];
  id v3 = [v2 gameDescriptor];
  id v4 = [*(id *)(a1 + 40) context];
  id v10 = +[GKGameCacheObject gameForGameDescriptor:v3 context:v4];

  id v5 = +[NSPredicate predicateWithFormat:@"game = %@", v10];
  id v6 = [*(id *)(a1 + 40) context];
  id v7 = +[GKCacheObject objectsMatchingPredicate:v5 context:v6];

  int v8 = [v7 _gkMapWithBlock:&stru_1002D82C0];
  if ([v8 count]) {
    [*(id *)(a1 + 40) setObject:v8 forKeyedSubscript:@"players"];
  }
  id v9 = [*(id *)(a1 + 40) context];
  [v9 _gkDeleteObjects:v7];
}

id sub_100095FC4(id a1, id a2, unint64_t a3)
{
  return [a2 internalRepresentation:a3];
}

void sub_100095FCC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"players"];
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0);
}

void sub_100096164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10009617C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) sessionToken];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    id v6 = *(uint64_t (**)(void))(result + 16);
    return v6();
  }
  return result;
}

void sub_10009653C(uint64_t a1, uint64_t a2)
{
  uint64_t v47 = a2;
  char v46 = 0;
  if (*(void *)(a1 + 32)) {
    uint64_t v3 = *(__CFString **)(a1 + 32);
  }
  else {
    uint64_t v3 = &stru_1002E4F58;
  }
  id v4 = [(__CFString *)v3 dataUsingEncoding:4];
  id v5 = +[NSMutableData dataWithCapacity:](NSMutableData, "dataWithCapacity:", (char *)[v4 length] + 2);
  [v5 appendBytes:&v47 length:1];
  [v5 appendBytes:&v46 length:1];
  long long v39 = v4;
  [v5 appendData:v4];
  [v5 appendBytes:&unk_10024F240 length:1];
  id v6 = +[GKPreferences shared];
  unsigned __int8 v7 = [v6 maximumInviteVersionSupported];

  unsigned __int8 v45 = v7;
  [v5 appendBytes:&v45 length:1];
  v58[0] = *(void *)(a1 + 40);
  v57[0] = @"B";
  v57[1] = @"A";
  int v8 = +[GKViceroyNATConfiguration externalAddressForSelfConnectionData:](GKViceroyNATConfiguration, "externalAddressForSelfConnectionData:");
  v58[1] = v8;
  v57[2] = @"N";
  id v9 = +[NSNumber numberWithUnsignedChar:v47];
  v58[2] = v9;
  v57[3] = @"i";
  id v10 = [*(id *)(a1 + 48) clientProxy];
  id v11 = [v10 bundleIdentifier];
  void v58[3] = v11;
  v57[4] = @"v";
  uint64_t v12 = [*(id *)(a1 + 48) clientProxy];
  id v13 = [v12 bundleVersion];
  v57[5] = @"s";
  v58[4] = v13;
  void v58[5] = v5;
  id v14 = +[NSDictionary dictionaryWithObjects:v58 forKeys:v57 count:6];

  unsigned __int8 v38 = v14;
  id v15 = [v14 mutableCopy];
  id v16 = [*(id *)(a1 + 48) clientProxy];
  id v17 = [v16 bundleShortVersion];

  if (v17)
  {
    uint64_t v18 = [*(id *)(a1 + 48) clientProxy];
    id v19 = [v18 bundleShortVersion];
    [v15 setObject:v19 forKeyedSubscript:@"V"];
  }
  id v20 = v15;
  v56[0] = *(void *)(a1 + 56);
  v55[0] = @"session-token";
  v55[1] = @"self-push-token";
  double v21 = +[GKDataRequestManager sharedManager];
  id v22 = [v21 pushToken];
  id v23 = v22;
  if (!v22)
  {
    id v23 = +[NSData data];
  }
  v56[1] = v23;
  v55[2] = @"reason";
  id v24 = +[NSNumber numberWithInt:2];
  v56[2] = v24;
  v55[3] = @"peers";
  v52[0] = @"id";
  id v25 = [*(id *)(a1 + 64) playerID];
  v52[1] = @"push-token";
  v53[0] = v25;
  v53[1] = *(void *)(a1 + 72);
  id v26 = +[NSDictionary dictionaryWithObjects:v53 forKeys:v52 count:2];
  id v54 = v26;
  id v27 = +[NSArray arrayWithObjects:&v54 count:1];
  v55[4] = @"client-data";
  v56[3] = v27;
  v56[4] = v20;
  id v37 = +[NSDictionary dictionaryWithObjects:v56 forKeys:v55 count:5];

  if (!v22) {
  long long v28 = [[GKInviteSession alloc] initWithSessionToken:*(void *)(a1 + 56)];
  }
  if (!os_log_GKGeneral) {
    id v29 = (id)GKOSLoggers();
  }
  id v30 = (void *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    id v31 = v30;
    id v32 = [(GKInviteSession *)v28 sessionToken];
    *(_DWORD *)buf = 134218242;
    uint64_t v49 = v28;
    __int16 v50 = 2112;
    uint64_t v51 = v32;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "SendReconnectInvitation: created a new GKInviteSession(%p): %@", buf, 0x16u);
  }
  id v33 = [*(id *)(a1 + 48) clientProxy];
  [v33 setInviteSession:v28];

  id v34 = +[GKNetworkRequestManager commonNetworkRequestManager];
  id v35 = [*(id *)(a1 + 48) clientProxy];
  v40[0] = _NSConcreteStackBlock;
  v40[1] = 3221225472;
  v40[2] = sub_100096AF8;
  v40[3] = &unk_1002D5D48;
  CFStringRef v41 = v28;
  id v42 = *(id *)(a1 + 64);
  id v43 = *(id *)(a1 + 72);
  id v44 = *(id *)(a1 + 80);
  id v36 = v28;
  [v34 issueRequest:v37 bagKey:@"gk-invitation-send" clientProxy:v35 handler:v40];
}

void sub_100096AF8(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (!v5) {
    [*(id *)(a1 + 32) addInvitee:*(void *)(a1 + 40) reference:*(void *)(a1 + 48)];
  }
  uint64_t v6 = *(void *)(a1 + 56);
  if (v6) {
    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v5);
  }
}

void sub_100097288(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [a2 serverRepresentation];
  [v2 addObject:v3];
}

void sub_1000972E0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [a2 serverRepresentation];
  [v2 addObject:v3];
}

void sub_100097338(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!os_log_GKGeneral) {
    id v7 = (id)GKOSLoggers();
  }
  int v8 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    int v10 = 138412546;
    id v11 = v5;
    __int16 v12 = 2112;
    id v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Invitation send done. plist: %@, error: %@", (uint8_t *)&v10, 0x16u);
  }
  uint64_t v9 = *(void *)(a1 + 32);
  if (v9) {
    (*(void (**)(uint64_t, id))(v9 + 16))(v9, v6);
  }
}

void sub_100097AA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v3);
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10009C150();
    }
  }
}

void sub_100097B30(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!os_log_GKGeneral) {
    id v7 = (id)GKOSLoggers();
  }
  int v8 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    int v9 = 138412546;
    id v10 = v5;
    __int16 v11 = 2112;
    id v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "TTRLogs send is done. plist: %@, error: %@", (uint8_t *)&v9, 0x16u);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100097E1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[GKNetworkRequestManager commonNetworkRequestManager];
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = [*(id *)(a1 + 48) clientProxy];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_100097F10;
  v9[3] = &unk_1002D50A0;
  id v10 = *(id *)(a1 + 56);
  id v11 = v3;
  id v8 = v3;
  [v4 issueRequest:v5 bagKey:v6 clientProxy:v7 handler:v9];
}

uint64_t sub_100097F10(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setObject:a2 forKeyedSubscript:@"result"];
  [*(id *)(a1 + 32) setError:v6];

  id v7 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v7();
}

void sub_100097F88(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"result"];
    id v3 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, id, void *))(v1 + 16))(v1, v4, v3);
  }
}

void sub_100098100(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(a1 + 32) mutableCopy];
  uint64_t v5 = +[GKDataRequestManager sharedManager];
  id v6 = [v5 pushToken];

  if (v6) {
    [v4 setObject:v6 forKey:@"self-push-token"];
  }
  id v7 = +[NSNumber numberWithInteger:a2];
  [v4 setObject:v7 forKey:@"self-nat-type"];

  if (!os_log_GKGeneral) {
    id v8 = (id)GKOSLoggers();
  }
  int v9 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    int v11 = 138412290;
    id v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "relayInit serverRequest:%@", (uint8_t *)&v11, 0xCu);
  }
  [*(id *)(a1 + 40) _performRelayAction:@"gk-invitation-relay-initiate" request:v4 handler:*(void *)(a1 + 48)];
  id v10 = +[GKReporter reporter];
  [v10 reportEvent:GKReporterDomainRelay type:GKReporterRelayInitiate];
}

void sub_10009837C(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(a1 + 32) mutableCopy];
  uint64_t v5 = +[GKDataRequestManager sharedManager];
  id v6 = [v5 pushToken];

  if (v6) {
    [v4 setObject:v6 forKey:@"self-push-token"];
  }
  id v7 = +[NSNumber numberWithInteger:a2];
  [v4 setObject:v7 forKey:@"self-nat-type"];

  if (!os_log_GKGeneral) {
    id v8 = (id)GKOSLoggers();
  }
  int v9 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    int v11 = 138412290;
    id v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "relayUpdate serverRequest:%@", (uint8_t *)&v11, 0xCu);
  }
  [*(id *)(a1 + 40) _performRelayAction:@"gk-invitation-relay-update" request:v4 handler:*(void *)(a1 + 48)];
  id v10 = +[GKReporter reporter];
  [v10 reportEvent:GKReporterDomainRelay type:GKReporterRelayUpdate];
}

void sub_100098860(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) context];
  id v4 = +[GKPlayerProfileCacheObject playerProfileWithPlayerID:v2 inManagedObjectContext:v3];

  [v4 setAvailablePieces:[v4 availablePieces] | 1];
  uint64_t v5 = +[NSDate dateWithTimeIntervalSinceNow:600.0];
  [v4 setExpirationDate:v5];

  id v6 = [*(id *)(a1 + 48) objectForKey:@"alias"];
  [v4 setAlias:v6];

  id v7 = [*(id *)(a1 + 48) objectForKey:@"photos"];
  id v8 = v7;
  if (v7 && [v7 count]) {
    id v9 = [v4 updateImagesWithImageURLs:v8];
  }
  id v33 = v8;
  uint64_t v34 = a1;
  id v35 = v4;
  id v10 = [*(id *)(a1 + 48) objectForKey:@"photoData"];
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  id v11 = [v10 countByEnumeratingWithState:&v38 objects:v44 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v39;
    NSErrorDomain v14 = NSCocoaErrorDomain;
    id v36 = v10;
    do
    {
      for (unint64_t i = 0; i != v12; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v39 != v13) {
          objc_enumerationMutation(v10);
        }
        id v16 = *(void **)(*((void *)&v38 + 1) + 8 * i);
        id v17 = [v10 objectForKey:v16];
        if (v17)
        {
          uint64_t v18 = +[NSURL URLWithString:v16];
          id v19 = GKImageCachePathForURL();

          id v20 = [v16 lastPathComponent];
          double v21 = [v19 stringByAppendingPathComponent:v20];

          id v22 = +[NSFileManager defaultManager];
          id v37 = 0;
          [v22 createDirectoryAtPath:v19 withIntermediateDirectories:1 attributes:0 error:&v37];
          id v23 = v37;

          if (v23)
          {
            id v24 = [v23 domain];
            if (([v24 isEqual:v14] & 1) == 0)
            {

              goto LABEL_16;
            }
            id v25 = v12;
            uint64_t v26 = v13;
            id v27 = v14;
            id v28 = [v23 code];

            BOOL v29 = v28 == (id)516;
            NSErrorDomain v14 = v27;
            uint64_t v13 = v26;
            id v12 = v25;
            id v10 = v36;
            if (!v29)
            {
LABEL_16:
              if (!os_log_GKGeneral) {
                id v30 = (id)GKOSLoggers();
              }
              id v31 = os_log_GKMatch;
              if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412290;
                id v43 = v23;
                _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "GKMultiplayerMatchService error while trying to create path error/warning while updating cache with nearby: %@", buf, 0xCu);
              }
            }
          }
          [v17 writeToFile:v21 atomically:1];
          _gkMarkFileAsPurgeable();
        }
      }
      id v12 = [v10 countByEnumeratingWithState:&v38 objects:v44 count:16];
    }
    while (v12);
  }
  id v32 = [v35 internalRepresentation];
  [*(id *)(v34 + 40) setResult:v32];
}

void sub_100098C30(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) result];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100098F18(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = *(void (**)(void))(v1 + 16);
    v2();
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v3 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
      sub_10009C1B8();
    }
  }
}

uint64_t sub_100098FA4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10009922C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = *(void (**)(void))(v1 + 16);
    v2();
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v3 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
      sub_10009C1EC();
    }
  }
}

uint64_t sub_1000992B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100099588(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v3);
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
      sub_10009C220();
    }
  }
}

uint64_t sub_100099614(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1000998A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = *(void (**)(void))(v1 + 16);
    v2();
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v3 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
      sub_10009C254();
    }
  }
}

uint64_t sub_10009992C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100099C5C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10009C288();
    }
  }
  else if (![v5 count])
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers();
    }
    id v9 = os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "0 multiplyaer games loaded on this device.", v11, 2u);
    }
  }
  uint64_t v10 = *(void *)(a1 + 32);
  if (v10) {
    (*(void (**)(uint64_t, id, id))(v10 + 16))(v10, v5, v6);
  }
}

void sub_10009A0FC(uint64_t a1, void *a2, void *a3)
{
  id v7 = a3;
  id v5 = [a2 containsObject:*(void *)(a1 + 32)];
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v5, v7);
  }
}

void sub_10009A4D4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (!os_log_GKGeneral) {
    id v10 = (id)GKOSLoggers();
  }
  id v11 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412802;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v8;
    *(_WORD *)&buf[22] = 2112;
    id v23 = v9;
    _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "nearbyDiscovery playerFoundHandler called back. playerID: %@, deviceID: %@, discoveryInfo: %@", buf, 0x20u);
  }
  *(void *)buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x2020000000;
  LOBYTE(v23) = 0;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  void v16[2] = sub_10009A720;
  void v16[3] = &unk_1002D8388;
  double v21 = buf;
  id v17 = *(id *)(a1 + 32);
  id v12 = v7;
  id v18 = v12;
  id v13 = v8;
  id v19 = v13;
  id v14 = v9;
  id v20 = v14;
  +[GKClientProxy enumerateClientsUsingBlock:v16];
  if (!*(unsigned char *)(*(void *)&buf[8] + 24))
  {
    if (!os_log_GKGeneral) {
      id v15 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_DEBUG)) {
      sub_10009C2F0();
    }
  }

  _Block_object_dispose(buf, 8);
}

void sub_10009A700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10009A720(void *a1, void *a2, unsigned char *a3)
{
  id v5 = a2;
  if (!*(unsigned char *)(*(void *)(a1[8] + 8) + 24))
  {
    id v8 = v5;
    uint64_t v6 = [v5 bundleIdentifier];
    unsigned int v7 = [v6 isEqualToString:a1[4]];

    id v5 = v8;
    if (v7)
    {
      [v8 nearbyPlayerFoundForPlayerID:a1[5] deviceID:a1[6] discoveryInfo:a1[7]];
      id v5 = v8;
      *(unsigned char *)(*(void *)(a1[8] + 8) + 24) = 1;
      *a3 = 1;
    }
  }
}

void sub_10009A7C8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v15 = 0;
  id v16 = &v15;
  uint64_t v17 = 0x2020000000;
  char v18 = 0;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_10009A944;
  v10[3] = &unk_1002D83D8;
  id v14 = &v15;
  id v11 = *(id *)(a1 + 32);
  id v7 = v5;
  id v12 = v7;
  id v8 = v6;
  id v13 = v8;
  +[GKClientProxy enumerateClientsUsingBlock:v10];
  if (!*((unsigned char *)v16 + 24))
  {
    if (!os_log_GKGeneral) {
      id v9 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_DEBUG)) {
      sub_10009C358();
    }
  }

  _Block_object_dispose(&v15, 8);
}

void sub_10009A92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10009A944(void *a1, void *a2, unsigned char *a3)
{
  id v5 = a2;
  if (!*(unsigned char *)(*(void *)(a1[7] + 8) + 24))
  {
    id v8 = v5;
    id v6 = [v5 bundleIdentifier];
    unsigned int v7 = [v6 isEqualToString:a1[4]];

    id v5 = v8;
    if (v7)
    {
      [v8 nearbyPlayerLostForPlayerID:a1[5] deviceID:a1[6]];
      id v5 = v8;
      *a3 = 1;
    }
  }
}

void sub_10009A9DC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v20 = 0;
  double v21 = &v20;
  uint64_t v22 = 0x2020000000;
  char v23 = 0;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  void v14[2] = sub_10009AB7C;
  void v14[3] = &unk_1002D8388;
  id v19 = &v20;
  id v15 = *(id *)(a1 + 32);
  id v10 = v7;
  id v16 = v10;
  id v11 = v8;
  id v17 = v11;
  id v12 = v9;
  id v18 = v12;
  +[GKClientProxy enumerateClientsUsingBlock:v14];
  if (!*((unsigned char *)v21 + 24))
  {
    if (!os_log_GKGeneral) {
      id v13 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_DEBUG)) {
      sub_10009C3C0();
    }
  }

  _Block_object_dispose(&v20, 8);
}

void sub_10009AB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10009AB7C(void *a1, void *a2, unsigned char *a3)
{
  id v5 = a2;
  if (!*(unsigned char *)(*(void *)(a1[8] + 8) + 24))
  {
    id v8 = v5;
    id v6 = [v5 bundleIdentifier];
    unsigned int v7 = [v6 isEqualToString:a1[4]];

    id v5 = v8;
    if (v7)
    {
      [v8 nearbyDataReceivedForPlayerID:a1[5] deviceID:a1[6] data:a1[7]];
      id v5 = v8;
      *a3 = 1;
    }
  }
}

uint64_t sub_10009AF40(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t result = *(void *)(result + 32);
    if (result) {
      return (*(uint64_t (**)(void))(result + 16))();
    }
  }
  return result;
}

void sub_10009AF5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v3);
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
      sub_10009C45C();
    }
  }
}

void sub_10009B7C8(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v19 = [a1[4] serverRepresentation];
  unsigned int v7 = +[GKGameCacheObject gameForGameDescriptor:context:](GKGameCacheObject, "gameForGameDescriptor:context:");
  uint64_t v8 = +[NSPredicate predicateWithFormat:@"game = %@", v7];
  id v9 = [a1[5] context];
  id v18 = (void *)v8;
  +[GKCacheObject deleteObjectsMatchingPredicate:v8 context:v9];

  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v10 = a1[6];
  id v11 = [v10 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v21;
    do
    {
      id v14 = 0;
      do
      {
        if (*(void *)v21 != v13) {
          objc_enumerationMutation(v10);
        }
        id v15 = *(void **)(*((void *)&v20 + 1) + 8 * (void)v14);
        id v16 = [(GKCacheObject *)[GKPlayerToInviteCacheObject alloc] initWithManagedObjectContext:v5];
        [(GKPlayerToInviteCacheObject *)v16 setGame:v7];
        id v17 = [v15 playerID];
        [(GKPlayerToInviteCacheObject *)v16 setPlayerID:v17];

        id v14 = (char *)v14 + 1;
      }
      while (v12 != v14);
      id v12 = [v10 countByEnumeratingWithState:&v20 objects:v24 count:16];
    }
    while (v12);
  }

  v6[2](v6);
}

void sub_10009B9C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  [*(id *)(a1 + 32) bundleIdentifier];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10009BA74;
  block[3] = &unk_1002D40E0;
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  id v3 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

void sub_10009BA74(uint64_t a1)
{
  unsigned int v2 = GKGetApplicationStateForBundleID(*(void **)(a1 + 32));
  if (v2 == 8 || (unsigned int v3 = v2, GKLaunchApplicationWithIdentifier(*(void **)(a1 + 32), 0), v3 >= 4))
  {
    id v4 = +[GKClientProxy clientForBundleID:*(void *)(a1 + 32)];
    [v4 acceptMultiplayerGameInvite];
  }
}

void sub_10009BB04(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_10009BB10()
{
  sub_10009BB04(__stack_chk_guard);
  sub_100010D28();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Failed to fetch pseudonym for local player. Error: %@", v2, v3, v4, v5, v6);
}

void sub_10009BB80()
{
  sub_100011030();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Get flow rate for player group: %@, queue name: %@", v1, 0x16u);
}

void sub_10009BBF8()
{
  sub_100011064();
  __int16 v3 = 1024;
  int v4 = v0;
  _os_log_debug_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "Fetched GKFlowRateCacheObject: %@, valid? %hhd", v2, 0x12u);
}

void sub_10009BC80()
{
  sub_100011064();
  sub_100011084((void *)&_mh_execute_header, v0, v1, "Get compatibility matrix: %@", v2, v3, v4, v5, v6);
}

void sub_10009BCE8(void **a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a2;
  uint8_t v6 = [v4 shareRecordID];
  int v7 = 138412546;
  uint64_t v8 = v6;
  __int16 v9 = 2112;
  uint64_t v10 = a3;
  _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "setShareInvitees - No CKRecord found fetching shareRecordID %@ error: %@", (uint8_t *)&v7, 0x16u);
}

void sub_10009BDA8()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Error saving record with share invitees %@", v2, v3, v4, v5, v6);
}

void sub_10009BE10()
{
  sub_100011064();
  sub_100011084((void *)&_mh_execute_header, v0, v1, "Response for gk-invitation-initiate: %@", v2, v3, v4, v5, v6);
}

void sub_10009BE78()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Failed to post request for bag key gk-invitation-initiate due to error: %@", v2, v3, v4, v5, v6);
}

void sub_10009BEE0()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Error archiving connection dictionary for share record: %@", v2, v3, v4, v5, v6);
}

void sub_10009BF48()
{
  sub_100011030();
  sub_100011010((void *)&_mh_execute_header, v0, v1, "Failed to archive participant info: %@. Error: %@");
}

void sub_10009BFB0()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Error while initiating invitation for share URL: %@", v2, v3, v4, v5, v6);
}

void sub_10009C018()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Error while setting up invite share recordID: %@", v2, v3, v4, v5, v6);
}

void sub_10009C080()
{
  sub_100011064();
  sub_100011084((void *)&_mh_execute_header, v0, v1, "Failed to unarchive object with error: %@", v2, v3, v4, v5, v6);
}

void sub_10009C0E8()
{
  sub_100011030();
  sub_100011010((void *)&_mh_execute_header, v0, v1, "invite for match request failed with error: %@, result: %@");
}

void sub_10009C150()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Found nil handler for requestTTRLogsWith. Error: %@", v2, v3, v4, v5, v6);
}

void sub_10009C1B8()
{
  sub_100010D10();
  sub_100010D34((void *)&_mh_execute_header, v0, v1, "no handler set for starting nearby browsing", v2, v3, v4, v5, v6);
}

void sub_10009C1EC()
{
  sub_100010D10();
  sub_100010D34((void *)&_mh_execute_header, v0, v1, "no handler set for stopping nearby browsing", v2, v3, v4, v5, v6);
}

void sub_10009C220()
{
  sub_100010D10();
  sub_100010D34((void *)&_mh_execute_header, v0, v1, "no handler set for starting nearby advertising", v2, v3, v4, v5, v6);
}

void sub_10009C254()
{
  sub_100010D10();
  sub_100010D34((void *)&_mh_execute_header, v0, v1, "no handler set for stopping nearby advertising", v2, v3, v4, v5, v6);
}

void sub_10009C288()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Error retrieving games for Data Detectors: %@", v2, v3, v4, v5, v6);
}

void sub_10009C2F0()
{
  sub_10009BB04(__stack_chk_guard);
  sub_100010D28();
  sub_100011084((void *)&_mh_execute_header, v0, v1, "cannot find a client proxy which has the same bundleIdentifier with '%@' so not calling nearbyPlayerFoundForPlayerID", v2, v3, v4, v5, v6);
}

void sub_10009C358()
{
  sub_10009BB04(__stack_chk_guard);
  sub_100010D28();
  sub_100011084((void *)&_mh_execute_header, v0, v1, "cannot find a client proxy which has the same bundleIdentifier with '%@' so not calling nearbyPlayerLostForPlayerID", v2, v3, v4, v5, v6);
}

void sub_10009C3C0()
{
  sub_10009BB04(__stack_chk_guard);
  sub_100010D28();
  sub_100011084((void *)&_mh_execute_header, v0, v1, "cannot find a client proxy which has the same bundleIdentifier with '%@' so not calling nearbyDataReceivedForPlayerID", v2, v3, v4, v5, v6);
}

void sub_10009C428()
{
  sub_100010D10();
  sub_100010D34((void *)&_mh_execute_header, v0, v1, "no handler set for forgetParticipant", v2, v3, v4, v5, v6);
}

void sub_10009C45C()
{
  sub_100010D10();
  sub_100010D34((void *)&_mh_execute_header, v0, v1, "no handler set for sendDataToParticipant", v2, v3, v4, v5, v6);
}

id sub_10009C5F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) deniedContactIDs];
  uint64_t v5 = [v3 contactID];
  unsigned int v6 = [v4 containsObject:v5];

  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers();
    }
    uint64_t v8 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      int v11 = 136315394;
      id v12 = "-[GKDeniedSuggestionsModifier nonDeniedRecipientsFromInitialRecipients:]_block_invoke";
      __int16 v13 = 2112;
      id v14 = v3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s filtering out: %@", (uint8_t *)&v11, 0x16u);
    }
    id v9 = 0;
  }
  else
  {
    id v9 = v3;
  }

  return v9;
}

void sub_10009D10C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) context];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  void v15[2] = sub_10009D2B8;
  v15[3] = &unk_1002D3B38;
  int8x16_t v11 = *(int8x16_t *)(a1 + 32);
  id v5 = (id)v11.i64[0];
  int8x16_t v16 = vextq_s8(v11, v11, 8uLL);
  [v4 performBlock:v15];

  unsigned int v6 = +[GKDataRequestManager sharedManager];
  id v7 = +[GKNetworkRequestManager commonNetworkRequestManager];
  uint64_t v8 = [v6 updateRequestWithPushToken:*(void *)(a1 + 48)];
  id v9 = [*(id *)(a1 + 40) clientProxy];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_10009D3E8;
  void v12[3] = &unk_1002D50A0;
  id v13 = *(id *)(a1 + 32);
  id v14 = v3;
  id v10 = v3;
  [v7 issueRequest:v8 bagKey:@"gk-tb-create-session" clientProxy:v9 handler:v12];
}

void sub_10009D2B8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) clientProxy];
  id v3 = [v2 bundleIdentifier];
  uint64_t v4 = [*(id *)(a1 + 40) context];
  id v5 = +[GKGameCacheObject gameForBundleID:v3 context:v4];

  unsigned int v6 = [v5 turnBasedSessionList];
  [v6 expire];

  id v7 = +[GKClientProxy gameCenterClient];
  uint64_t v8 = [v7 bundleIdentifier];
  id v9 = [*(id *)(a1 + 40) context];
  id v11 = +[GKGameCacheObject gameForBundleID:v8 context:v9];

  id v10 = [v11 turnBasedSessionList];
  [v10 expire];
}

uint64_t sub_10009D3E8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  unsigned int v6 = [a2 objectForKey:@"session-id"];
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:@"sessionID"];

  [*(id *)(a1 + 32) setError:v5];
  id v7 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v7();
}

void sub_10009D478(id *a1)
{
  uint64_t v2 = [a1[4] objectForKeyedSubscript:@"sessionID"];
  id v3 = v2;
  if (v2)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10009D644;
    void v13[3] = &unk_1002D3980;
    id v4 = a1[4];
    void v13[4] = a1[5];
    id v14 = v2;
    id v15 = a1[4];
    [v4 perform:v13];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_10009D80C;
    void v12[3] = &unk_1002D4050;
    id v5 = a1[4];
    void v12[4] = a1[5];
    [v5 perform:v12];
  }
  if (a1[6])
  {
    id v6 = a1[4];
    id v7 = [a1[5] clientProxy];
    uint64_t v8 = [v7 replyQueue];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_10009D8B4;
    v9[3] = &unk_1002D3C38;
    id v10 = a1[4];
    id v11 = a1[6];
    [v6 notifyOnQueue:v8 block:v9];
  }
}

void sub_10009D644(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  id v5 = +[NSArray arrayWithObjects:&v10 count:1];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_10009D750;
  void v7[3] = &unk_1002D4F38;
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v6 = v3;
  [v4 getDetailsForTurnBasedMatchIDs:v5 includeGameData:1 handler:v7];
}

void sub_10009D750(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if (v5)
  {
    id v6 = [*(id *)(a1 + 32) error];

    if (!v6) {
      [*(id *)(a1 + 32) setError:v5];
    }
  }
  id v7 = [v8 lastObject];
  [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:@"result"];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10009D80C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_10009D8A4;
  void v6[3] = &unk_1002D4F88;
  id v7 = v3;
  id v5 = v3;
  [v4 getTurnBasedMatchesWithHandler:v6];
}

uint64_t sub_10009D8A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10009D8B4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"result"];
  if (v2) {
    goto LABEL_2;
  }
  id v3 = [*(id *)(a1 + 32) error];

  if (!v3)
  {
    uint64_t v2 = +[NSError userErrorForCode:1 underlyingError:0];
    [*(id *)(a1 + 32) setError:v2];
LABEL_2:
  }
  uint64_t v4 = *(void *)(a1 + 40);
  id v6 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"result"];
  id v5 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v4 + 16))(v4, v6, v5);
}

void sub_10009DA84(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[GKService serviceFromService:*(void *)(a1 + 32)];
  id v5 = [*(id *)(a1 + 40) allObjects];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_10009DB68;
  void v7[3] = &unk_1002D4F38;
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v6 = v3;
  [v4 getGameMetadataForBundleIDs:v5 handler:v7];
}

void sub_10009DB68(uint64_t a1, void *a2)
{
  id v3 = [a2 _gkMapDictionaryWithKeyPath:@"bundleIdentifier"];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v13;
    do
    {
      for (unint64_t i = 0; i != v6; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        uint64_t v10 = [v9 bundleID];
        id v11 = [v3 objectForKeyedSubscript:v10];
        [v9 setGame:v11];
      }
      id v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v6);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10009E098(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 bundleID];
  if (v4)
  {
    id v5 = [v3 bundleVersion];
    if (v5)
    {
      id v6 = [*(id *)(a1 + 32) objectForKeyedSubscript:v4];
      if (!v6)
      {
        id v6 = +[NSMutableSet setWithCapacity:*(void *)(a1 + 48)];
        [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:v4];
      }
      uint64_t v7 = [v3 shortBundleVersion];
      id v8 = +[NSMutableDictionary dictionaryWithObject:v5 forKey:@"bundleVersion"];
      id v9 = v8;
      if (v7) {
        [v8 setObject:v7 forKeyedSubscript:@"shortBundleVersion"];
      }
      uint64_t v10 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v3 platform]);
      [v9 setObject:v10 forKeyedSubscript:@"platform"];

      [v6 addObject:v9];
      if (!os_log_GKGeneral) {
        id v11 = (id)GKOSLoggers();
      }
      long long v12 = os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        long long v21 = v9;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "bundle version dict %@", buf, 0xCu);
      }
      if (v7) {
        long long v13 = v7;
      }
      else {
        long long v13 = v5;
      }
      long long v14 = +[NSString stringWithFormat:@"%@%@", v4, v13];
      long long v15 = [*(id *)(a1 + 40) objectForKeyedSubscript:v14];
      if (!v15)
      {
        long long v15 = +[NSMutableArray arrayWithCapacity:*(void *)(a1 + 48)];
        [*(id *)(a1 + 40) setObject:v15 forKeyedSubscript:v14];
      }
      [v15 addObject:v3];
    }
    else
    {
      id v18 = os_log_GKGeneral;
      if (!os_log_GKGeneral)
      {
        id v19 = (id)GKOSLoggers();
        id v18 = os_log_GKGeneral;
      }
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
        sub_1000AD14C((uint64_t)v3, v18);
      }
    }
  }
  else
  {
    int8x16_t v16 = os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      id v17 = (id)GKOSLoggers();
      int8x16_t v16 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
      sub_1000AD0D4((uint64_t)v3, v16);
    }
  }
}

void sub_10009E38C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = [*(id *)(a1 + 48) objectForKeyedSubscript:@"bundleVersion"];
  uint64_t v7 = [*(id *)(a1 + 48) objectForKeyedSubscript:@"shortBundleVersion"];
  id v8 = [*(id *)(a1 + 48) objectForKeyedSubscript:@"platform"];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_10009E4C0;
  v10[3] = &unk_1002D84C0;
  int8x16_t v11 = vextq_s8(*(int8x16_t *)(a1 + 40), *(int8x16_t *)(a1 + 40), 8uLL);
  id v12 = *(id *)(a1 + 56);
  id v13 = v3;
  id v9 = v3;
  [v4 _determineCompatibleBundleIDForAppID:v5 bundleVersion:v6 shortBundleVersion:v7 platform:v8 withCompletionHandler:v10];
}

void sub_10009E4C0(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"shortBundleVersion"];
  uint64_t v14 = *(void *)(a1 + 40);
  if (v13) {
    CFStringRef v15 = @"shortBundleVersion";
  }
  else {
    CFStringRef v15 = @"bundleVersion";
  }
  int8x16_t v16 = [*(id *)(a1 + 32) objectForKeyedSubscript:v15];
  uint64_t v17 = +[NSString stringWithFormat:@"%@%@", v14, v16];

  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v24 = (void *)v17;
  id v18 = [*(id *)(a1 + 48) objectForKeyedSubscript:v17];
  id v19 = [v18 countByEnumeratingWithState:&v25 objects:v29 count:16];
  if (v19)
  {
    id v20 = v19;
    uint64_t v21 = *(void *)v26;
    do
    {
      for (unint64_t i = 0; i != v20; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v26 != v21) {
          objc_enumerationMutation(v18);
        }
        long long v23 = *(void **)(*((void *)&v25 + 1) + 8 * i);
        [v23 setBundleID:v9];
        [v23 setBundleVersion:v10];
        [v23 setShortBundleVersion:v11];
        [v23 setPlatform:[v12 integerValue]];
      }
      id v20 = [v18 countByEnumeratingWithState:&v25 objects:v29 count:16];
    }
    while (v20);
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_10009E6BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = [*(id *)(a1 + 40) clientProxy];
  id v6 = [v5 replyQueue];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_10009E7B4;
  v9[3] = &unk_1002D39F8;
  uint64_t v7 = *(void **)(a1 + 48);
  void v9[4] = *(void *)(a1 + 40);
  id v10 = v7;
  id v11 = *(id *)(a1 + 56);
  id v12 = v3;
  id v8 = v3;
  [v4 notifyOnQueue:v6 block:v9];
}

uint64_t sub_10009E7B4(uint64_t a1)
{
  [*(id *)(a1 + 32) _updateGamesForTurnBasedMatches:*(void *)(a1 + 40) dispatchGroup:*(void *)(a1 + 48)];
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 56) + 16);

  return v2();
}

void sub_10009EB44(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[GKService serviceFromService:*(void *)(a1 + 32)];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_10009EC28;
  void v7[3] = &unk_1002D53D8;
  uint64_t v5 = *(void *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  id v10 = v3;
  id v6 = v3;
  [v4 getCompatibilityMatrix:v5 handler:v7];
}

void sub_10009EC28(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v25 = a3;
  if (!os_log_GKGeneral) {
    id v6 = (id)GKOSLoggers();
  }
  uint64_t v7 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    id v40 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "compatibility matrix result %@", buf, 0xCu);
  }
  id v8 = +[GKApplicationWorkspace defaultWorkspace];
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  id obj = v5;
  id v9 = [obj countByEnumeratingWithState:&v34 objects:v38 count:16];
  if (v9)
  {
    id v10 = v9;
    id v11 = &GKInfoPlistKeyFriendsAPIUsageDescription_ptr;
    uint64_t v12 = *(void *)v35;
    long long v27 = v8;
    uint64_t v31 = *(void *)v35;
    do
    {
      id v13 = 0;
      id v30 = v10;
      do
      {
        if (*(void *)v35 != v12) {
          objc_enumerationMutation(obj);
        }
        uint64_t v14 = *(void **)(*((void *)&v34 + 1) + 8 * (void)v13);
        if (objc_msgSend(v11[297], "supportsPlatform:", objc_msgSend(v14, "platform")))
        {
          CFStringRef v15 = [v14 bundleID];
          if ([v8 applicationIsInstalled:v15])
          {
            int8x16_t v16 = +[NSBundle _gkBundleWithIdentifier:v15];
            uint64_t v17 = [v16 _gkBundleVersion];
            id v18 = [v16 _gkBundleShortVersion];
            unsigned __int8 v33 = [*(id *)(a1 + 32) isEqualToString:v15];

            if (v18)
            {
              BOOL v29 = [v14 shortVersions];
              if (([v29 containsObject:v18] & 1) == 0)
              {
                int v19 = 1;
                goto LABEL_17;
              }
LABEL_22:

LABEL_23:
              [*(id *)(a1 + 40) setObject:v15 forKeyedSubscript:@"bundleID"];
              [*(id *)(a1 + 40) setObject:v17 forKeyedSubscript:@"bundleVersion"];
              [*(id *)(a1 + 40) setObject:v18 forKeyedSubscript:@"shortBundleVersion"];
              long long v22 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v14 platform]);
              [*(id *)(a1 + 40) setObject:v22 forKeyedSubscript:@"platform"];

              if (v33)
              {

                goto LABEL_35;
              }
              goto LABEL_24;
            }
            int v19 = 0;
          }
          else
          {
            int v19 = 0;
            unsigned __int8 v33 = 0;
            id v18 = 0;
            uint64_t v17 = 0;
          }
LABEL_17:
          id v20 = [v14 shortVersions];
          if ([v20 containsObject:@"-1"])
          {

            id v10 = v30;
            if (v19) {
              goto LABEL_22;
            }
            goto LABEL_23;
          }
          uint64_t v21 = [v14 versions];
          if ([v21 containsObject:v17])
          {

            id v10 = v30;
            if (v19) {
              goto LABEL_22;
            }
            goto LABEL_23;
          }
          long long v23 = [v14 versions];
          unsigned int v28 = [v23 containsObject:@"-1"];

          if (v19)
          {

            id v8 = v27;
            id v10 = v30;
            if (v28) {
              goto LABEL_23;
            }
          }
          else
          {
            id v8 = v27;
            id v10 = v30;
            if (v28) {
              goto LABEL_23;
            }
          }
LABEL_24:

          id v11 = &GKInfoPlistKeyFriendsAPIUsageDescription_ptr;
          uint64_t v12 = v31;
        }
        id v13 = (char *)v13 + 1;
      }
      while (v10 != v13);
      id v24 = [obj countByEnumeratingWithState:&v34 objects:v38 count:16];
      id v10 = v24;
    }
    while (v24);
  }
LABEL_35:

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10009F018(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v6 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"bundleID"];
  id v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"bundleVersion"];
  id v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"shortBundleVersion"];
  id v5 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"platform"];
  (*(void (**)(uint64_t, id, void *, void *, void *))(v2 + 16))(v2, v6, v3, v4, v5);
}

void sub_10009F1C4(uint64_t a1)
{
  [*(id *)(a1 + 32) refreshObject:*(void *)(a1 + 40) mergeChanges:1];
  id v2 = objc_alloc((Class)NSFetchRequest);
  id v3 = +[GKTurnBasedSessionCacheObject entityName];
  id v4 = [v2 initWithEntityName:v3];

  id v5 = [*(id *)(a1 + 40) sessionIDs];
  id v6 = +[GKPlayerProfileCacheObject selfPlayerID];
  uint64_t v7 = +[NSPredicate predicateWithFormat:@"sessionID IN %@ && currentPlayerID = %@ && status IN %@", v5, v6, &off_1002F2EA0];
  [v4 setPredicate:v7];

  id v8 = +[NSSortDescriptor sortDescriptorWithKey:@"bundleID" ascending:1];
  long long v39 = v8;
  id v9 = +[NSArray arrayWithObjects:&v39 count:1];
  [v4 setSortDescriptors:v9];

  id v32 = v4;
  uint64_t v33 = a1;
  id v10 = [*(id *)(a1 + 32) executeFetchRequest:v4 error:0];
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  id v11 = [v10 countByEnumeratingWithState:&v34 objects:v38 count:16];
  if (v11)
  {
    id v12 = v11;
    int v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = *(void *)v35;
    do
    {
      for (unint64_t i = 0; i != v12; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v35 != v15) {
          objc_enumerationMutation(v10);
        }
        uint64_t v17 = *(void **)(*((void *)&v34 + 1) + 8 * i);
        id v18 = [v17 bundleID];
        unsigned __int8 v19 = [v18 isEqualToString:v14];

        if (v19)
        {
          ++v13;
        }
        else
        {
          if (v14)
          {
            id v20 = +[GKBadgeController sharedController];
            [v20 setBadgeCount:v13 forBundleID:v14 badgeType:2];
          }
          uint64_t v21 = [v17 bundleID];

          int v13 = 1;
          uint64_t v14 = (void *)v21;
        }
      }
      id v12 = [v10 countByEnumeratingWithState:&v34 objects:v38 count:16];
    }
    while (v12);
  }
  else
  {
    uint64_t v14 = 0;
  }
  long long v22 = [*(id *)(v33 + 40) game];
  long long v23 = [v22 bundleID];

  id v24 = [v10 count];
  id v25 = [*(id *)(v33 + 48) clientProxy];
  long long v26 = [v25 bundleIdentifier];
  unsigned int v27 = [v23 isEqualToString:v26];

  if (v27)
  {
    unsigned int v28 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:*(void *)(v33 + 32)];
    [v28 setNumberOfTurns:v24];
  }
  uint64_t v29 = GKGameCenterIdentifier;
  if ([v23 isEqualToString:GKGameCenterIdentifier])
  {
    id v30 = +[GKBadgeController sharedController];
    [v30 setBadgeCount:(int)v24 forBundleID:v29 badgeType:2];
  }
  uint64_t v31 = *(void *)(v33 + 56);
  if (v31) {
    (*(void (**)(void))(v31 + 16))();
  }
}

void sub_10009F680(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers();
  }
  id v3 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "GKTurnBasedService: loadTurnBasedMatchesForGame:", buf, 2u);
  }
  id v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKTurnBasedService.m", 419, "-[GKTurnBasedService loadTurnBasedMatchesForGame:loadDetails:prefetchOnly:context:handler:]_block_invoke");
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = [*(id *)(a1 + 40) clientProxy];
  uint64_t v7 = +[GKCacheTransactionGroup transactionGroupWithName:v4 context:v5 client:v6];

  *(void *)buf = 0;
  id v32 = buf;
  uint64_t v33 = 0x2020000000;
  uint64_t v34 = 0;
  v29[0] = 0;
  v29[1] = v29;
  void v29[2] = 0x2020000000;
  char v30 = 0;
  id v8 = [*(id *)(a1 + 40) clientProxy];
  id v9 = [v8 replyQueue];
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  void v23[2] = sub_10009F96C;
  v23[3] = &unk_1002D8510;
  int8x16_t v16 = *(int8x16_t *)(a1 + 32);
  id v10 = (id)v16.i64[0];
  int8x16_t v24 = vextq_s8(v16, v16, 8uLL);
  id v25 = *(id *)(a1 + 48);
  id v11 = v7;
  id v26 = v11;
  unsigned int v27 = buf;
  unsigned int v28 = v29;
  [v11 performOnQueue:v9 block:v23];

  id v12 = [*(id *)(a1 + 40) clientProxy];
  int v13 = [v12 replyQueue];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  void v17[2] = sub_10009FDB8;
  void v17[3] = &unk_1002D8538;
  id v20 = *(id *)(a1 + 56);
  uint64_t v21 = buf;
  id v14 = v11;
  long long v22 = v29;
  uint64_t v15 = *(void *)(a1 + 40);
  id v18 = v14;
  uint64_t v19 = v15;
  [v14 notifyOnQueue:v13 block:v17];

  _Block_object_dispose(v29, 8);
  _Block_object_dispose(buf, 8);
}

void sub_10009F948(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10009F96C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[GKNetworkRequestManager commonNetworkRequestManager];
  uint64_t v5 = [*(id *)(a1 + 32) clientProxy];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_10009FA90;
  v9[3] = &unk_1002D84E8;
  id v10 = *(id *)(a1 + 40);
  id v11 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 32);
  id v12 = v6;
  uint64_t v13 = v7;
  long long v15 = *(_OWORD *)(a1 + 64);
  id v14 = v3;
  id v8 = v3;
  [v4 issueRequest:0 bagKey:@"gk-tb-find-sessions" clientProxy:v5 handler:v9];
}

void sub_10009FA90(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7 = a2;
  id v8 = a3;
  if (v7)
  {
    id v14 = _NSConcreteStackBlock;
    uint64_t v15 = 3221225472;
    int8x16_t v16 = sub_10009FBD8;
    uint64_t v17 = &unk_1002D68A8;
    id v9 = *(void **)(a1 + 32);
    id v18 = *(id *)(a1 + 40);
    id v19 = *(id *)(a1 + 32);
    id v20 = v7;
    double v23 = a4;
    id v10 = *(id *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 56);
    id v21 = v10;
    uint64_t v22 = v11;
    [v9 performBlockAndWait:&v14];
  }
  *(double *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = a4;
  BOOL v13 = *(double *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) > 0.0 && v8 == 0;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = v13;
  [*(id *)(a1 + 48) setError:v8, v14, v15, v16, v17];
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_10009FBD8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) turnBasedSessionList];
  [*(id *)(a1 + 40) refreshObject:*(void *)(a1 + 32) mergeChanges:1];
  if (!v2)
  {
    id v2 = [(GKCacheObject *)[GKTurnBasedSessionListCacheObject alloc] initWithManagedObjectContext:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) setTurnBasedSessionList:v2];
  }
  uint64_t v3 = *(void *)(a1 + 48);
  id v4 = +[NSDate dateWithTimeIntervalSinceNow:*(double *)(a1 + 72)];
  [(GKTurnBasedSessionListCacheObject *)v2 updateWithServerRepresentation:v3 expirationDate:v4];

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_10009FCFC;
  void v7[3] = &unk_1002D3980;
  uint64_t v5 = *(void **)(a1 + 56);
  void v7[4] = *(void *)(a1 + 64);
  id v8 = v2;
  id v9 = *(id *)(a1 + 40);
  id v6 = v2;
  [v5 perform:v7];
}

void sub_10009FCFC(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10009FDA8;
  void v8[3] = &unk_1002D3A20;
  id v9 = v3;
  id v7 = v3;
  [v4 _determineTurnBasedBadgeCountFromList:v5 context:v6 completionHandler:v8];
}

uint64_t sub_10009FDA8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10009FDB8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  double v3 = *(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
  id v4 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, void *, double))(v2 + 16))(v2, v4, v3);

  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
  {
    id v5 = [*(id *)(a1 + 40) clientProxy];
    [v5 refreshContentsForDataType:14 userInfo:0];
  }
}

void sub_10009FFB4(id *a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers();
  }
  double v3 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "GKTurnBasedService: fetchTurnBasedMatchesForGame:", buf, 2u);
  }
  id v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKTurnBasedService.m", 472, "-[GKTurnBasedService fetchTurnBasedMatchesForGame:context:handler:]_block_invoke");
  id v5 = a1[4];
  uint64_t v6 = [a1[5] clientProxy];
  id v7 = +[GKCacheTransactionGroup transactionGroupWithName:v4 context:v5 client:v6];

  *(void *)buf = 0;
  id v26 = buf;
  uint64_t v27 = 0x2020000000;
  char v28 = 0;
  v23[0] = 0;
  v23[1] = v23;
  void v23[2] = 0x2020000000;
  char v24 = 0;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  void v17[2] = sub_1000A0260;
  void v17[3] = &unk_1002D8588;
  id v18 = a1[4];
  id v19 = a1[6];
  id v21 = v23;
  uint64_t v22 = buf;
  id v8 = v7;
  id v20 = v8;
  [v8 perform:v17];
  id v9 = [a1[5] clientProxy];
  id v10 = [v9 replyQueue];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_1000A0428;
  void v12[3] = &unk_1002D4B48;
  id v14 = a1[7];
  id v11 = v8;
  id v13 = v11;
  uint64_t v15 = buf;
  int8x16_t v16 = v23;
  [v11 notifyOnQueue:v10 block:v12];

  _Block_object_dispose(v23, 8);
  _Block_object_dispose(buf, 8);
}

void sub_1000A023C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1000A0260(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1000A0344;
  void v6[3] = &unk_1002D8560;
  id v7 = v4;
  id v8 = *(id *)(a1 + 40);
  long long v11 = *(_OWORD *)(a1 + 56);
  id v9 = *(id *)(a1 + 48);
  id v10 = v3;
  id v5 = v3;
  [v7 performBlock:v6];
}

void sub_1000A0344(uint64_t a1)
{
  [*(id *)(a1 + 32) refreshObject:*(void *)(a1 + 40) mergeChanges:1];
  id v4 = [*(id *)(a1 + 40) turnBasedSessionList];
  if ([v4 isValid])
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = [v4 expired] ^ 1;
    id v2 = [v4 sessionIDs];
    [*(id *)(a1 + 48) setResult:v2];

    id v3 = [v4 seed];
    [*(id *)(a1 + 48) setObject:v3 forKeyedSubscript:@"seed"];
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_1000A0428(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"seed"];
  (*(void (**)(uint64_t, id, void *, void, void))(v2 + 16))(v2, v4, v3, *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24));
}

void sub_1000A05BC(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers();
  }
  id v3 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "GKTurnBasedService: getTurnBasedMatchesAndCompatibleBundleID:", buf, 2u);
  }
  id v4 = *(void **)(a1 + 32);
  id v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKTurnBasedService.m", 505, "-[GKTurnBasedService getTurnBasedMatchesAndCompatibleBundleID:handler:]_block_invoke");
  uint64_t v6 = [v4 transactionGroupWithName:v5];

  id v7 = [*(id *)(a1 + 32) clientProxy];
  id v8 = [v7 replyQueue];
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  void v22[2] = sub_1000A07FC;
  v22[3] = &unk_1002D8600;
  id v9 = v6;
  uint64_t v10 = *(void *)(a1 + 32);
  long long v11 = *(void **)(a1 + 40);
  id v23 = v9;
  uint64_t v24 = v10;
  id v25 = v11;
  [v9 performOnQueue:v8 block:v22];

  if (*(void *)(a1 + 40))
  {
    id v12 = [*(id *)(a1 + 32) clientProxy];
    id v13 = [v12 replyQueue];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    void v17[2] = sub_1000A10E8;
    void v17[3] = &unk_1002D5028;
    id v14 = v9;
    uint64_t v15 = *(void *)(a1 + 32);
    int8x16_t v16 = *(void **)(a1 + 40);
    id v18 = v14;
    uint64_t v19 = v15;
    char v21 = *(unsigned char *)(a1 + 48);
    id v20 = v16;
    [v14 notifyOnQueue:v13 block:v17];
  }
}

void sub_1000A07FC(uint64_t a1, void *a2)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1000A08D8;
  void v7[3] = &unk_1002D69F0;
  int8x16_t v6 = *(int8x16_t *)(a1 + 32);
  id v4 = (id)v6.i64[0];
  int8x16_t v8 = vextq_s8(v6, v6, 8uLL);
  id v9 = *(id *)(a1 + 48);
  id v5 = a2;
  [v4 performOnManagedObjectContext:v7];
  v5[2](v5);
}

void sub_1000A08D8(id *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = [a1[4] clientProxy];
  int8x16_t v6 = [v5 bundleIdentifier];
  id v7 = [a1[5] context];
  int8x16_t v8 = +[GKGameCacheObject gameForBundleID:v6 context:v7];

  if (!os_log_GKGeneral) {
    id v9 = (id)GKOSLoggers();
  }
  uint64_t v10 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "GKTurnBasedService: getTurnBasedMatchesAndCompatibleBundleID: fetching TB match for games", buf, 2u);
  }
  id v11 = a1[4];
  id v12 = [a1[5] context];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  void v17[2] = sub_1000A0A94;
  void v17[3] = &unk_1002D85D8;
  id v13 = a1[5];
  id v14 = a1[4];
  id v18 = v13;
  id v19 = v14;
  id v20 = v8;
  id v21 = a1[6];
  id v22 = v4;
  id v15 = v4;
  id v16 = v8;
  [v11 fetchTurnBasedMatchesForGame:v16 context:v12 handler:v17];
}

uint64_t sub_1000A0A94(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  id v7 = *(void **)(a1 + 32);
  id v8 = a3;
  [v7 setResult:a2];
  [*(id *)(a1 + 32) setObject:v8 forKeyedSubscript:@"seed"];

  if ((a4 & 1) == 0)
  {
    id v9 = *(void **)(a1 + 32);
    uint64_t v10 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKTurnBasedService.m", 518, "-[GKTurnBasedService getTurnBasedMatchesAndCompatibleBundleID:handler:]_block_invoke");
    id v11 = [v9 transactionGroupWithName:v10];

    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_1000A0CB4;
    void v25[3] = &unk_1002D85B0;
    id v12 = *(void **)(a1 + 48);
    void v25[4] = *(void *)(a1 + 40);
    id v26 = v12;
    id v28 = *(id *)(a1 + 56);
    id v13 = v11;
    id v27 = v13;
    [v13 perform:v25];
    id v14 = *(void **)(a1 + 32);
    id v15 = [*(id *)(a1 + 40) clientProxy];
    id v16 = [v15 replyQueue];
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    void v20[2] = sub_1000A0E44;
    v20[3] = &unk_1002D4928;
    id v21 = *(id *)(a1 + 32);
    id v22 = v13;
    uint64_t v17 = *(void **)(a1 + 48);
    uint64_t v23 = *(void *)(a1 + 40);
    id v24 = v17;
    id v18 = v13;
    [v14 join:v18 queue:v16 block:v20];
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_1000A0CB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!os_log_GKGeneral) {
    id v4 = (id)GKOSLoggers();
  }
  id v5 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "GKTurnBasedService: getTurnBasedMatchesAndCompatibleBundleID: loading TB match for games", buf, 2u);
  }
  int8x16_t v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  BOOL v8 = *(void *)(a1 + 56) == 0;
  id v9 = [*(id *)(a1 + 48) context];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_1000A0DFC;
  v11[3] = &unk_1002D6090;
  id v12 = *(id *)(a1 + 48);
  id v13 = v3;
  id v10 = v3;
  [v6 loadTurnBasedMatchesForGame:v7 loadDetails:1 prefetchOnly:v8 context:v9 handler:v11];
}

uint64_t sub_1000A0DFC(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setError:a2];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_1000A0E44(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 40) error];
  [*(id *)(a1 + 32) setError:v2];

  id v3 = [*(id *)(a1 + 40) error];

  if (!v3)
  {
    id v4 = *(void **)(a1 + 32);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    void v6[2] = sub_1000A0F38;
    void v6[3] = &unk_1002D48B0;
    id v5 = *(void **)(a1 + 56);
    void v6[4] = *(void *)(a1 + 48);
    id v7 = v5;
    id v8 = *(id *)(a1 + 40);
    id v9 = *(id *)(a1 + 32);
    [v4 perform:v6];
  }
}

void sub_1000A0F38(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!os_log_GKGeneral) {
    id v4 = (id)GKOSLoggers();
  }
  id v5 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "GKTurnBasedService: getTurnBasedMatchesAndCompatibleBundleID: fetching TB match for games", buf, 2u);
  }
  int8x16_t v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  id v8 = [*(id *)(a1 + 48) context];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_1000A1070;
  v10[3] = &unk_1002D60B8;
  id v11 = *(id *)(a1 + 56);
  id v12 = v3;
  id v9 = v3;
  [v6 fetchTurnBasedMatchesForGame:v7 context:v8 handler:v10];
}

uint64_t sub_1000A1070(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setResult:a2];
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:@"seed"];

  uint64_t v7 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v7();
}

void sub_1000A10E8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) result];
  id v3 = [v2 count];
  id v4 = *(void **)(a1 + 32);
  if (v3)
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    void v11[2] = sub_1000A1270;
    v11[3] = &unk_1002D3FB8;
    void v11[4] = *(void *)(a1 + 40);
    id v12 = v2;
    id v13 = *(id *)(a1 + 32);
    char v14 = *(unsigned char *)(a1 + 56);
    [v4 perform:v11];
  }
  else
  {
    [*(id *)(a1 + 32) setResult:0];
  }
  id v5 = *(void **)(a1 + 32);
  id v6 = [*(id *)(a1 + 40) clientProxy];
  uint64_t v7 = [v6 replyQueue];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000A143C;
  void v8[3] = &unk_1002D3930;
  id v10 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 32);
  [v5 notifyOnQueue:v7 block:v8];
}

void sub_1000A1270(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!os_log_GKGeneral) {
    id v4 = (id)GKOSLoggers();
  }
  id v5 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "GKTurnBasedService: getTurnBasedMatchesAndCompatibleBundleID: get details for TB match for games", buf, 2u);
  }
  id v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_1000A13A0;
  v11[3] = &unk_1002D8628;
  id v8 = *(id *)(a1 + 48);
  char v15 = *(unsigned char *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 32);
  id v12 = v8;
  uint64_t v13 = v9;
  id v14 = v3;
  id v10 = v3;
  [v6 getDetailsForTurnBasedMatchIDs:v7 includeGameData:0 prefetchOnly:0 handler:v11];
}

void sub_1000A13A0(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setResult:v7];
  [*(id *)(a1 + 32) setError:v6];

  if (*(unsigned char *)(a1 + 56)) {
    [*(id *)(a1 + 40) _determineCompatibleGamesForMatches:v7 dispatchGroup:*(void *)(a1 + 32)];
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1000A143C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_1000A154C(uint64_t a1, void *a2)
{
  id v3 = a2;
  +[NSMutableSet setWithCapacity:0];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  void v16[2] = sub_1000A1714;
  void v16[3] = &unk_1002D8678;
  id v17 = (id)objc_claimAutoreleasedReturnValue();
  id v4 = v17;
  id v5 = objc_retainBlock(v16);
  id v6 = *(void **)(a1 + 32);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  void v14[2] = sub_1000A17A4;
  void v14[3] = &unk_1002D86C8;
  id v15 = v5;
  id v7 = v5;
  [v6 enumerateObjectsUsingBlock:v14];
  id v8 = +[GKService serviceFromService:*(void *)(a1 + 40)];
  uint64_t v9 = [v4 allObjects];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_1000A1920;
  v11[3] = &unk_1002D4F38;
  id v12 = *(id *)(a1 + 32);
  id v13 = v3;
  id v10 = v3;
  [v8 getProfilesForPlayerIDs:v9 handler:v11];
}

uint64_t sub_1000A1714(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v7 = v3;
    if (([v3 isAutomatchPlayer] & 1) == 0
      && ([v7 isGuestPlayer] & 1) == 0)
    {
      id v4 = *(void **)(a1 + 32);
      id v5 = [v7 playerID];
      [v4 addObject:v5];
    }
  }

  return _objc_release_x1();
}

void sub_1000A17A4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  id v5 = [v4 currentPlayer];
  (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v5);

  id v6 = [v4 participants];

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1000A1880;
  void v7[3] = &unk_1002D86A0;
  id v8 = *(id *)(a1 + 32);
  [v6 enumerateObjectsUsingBlock:v7];
}

void sub_1000A1880(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  id v5 = [v4 player];
  (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v5);

  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = [v4 invitedBy];

  (*(void (**)(uint64_t, id))(v6 + 16))(v6, v7);
}

void sub_1000A1920(uint64_t a1, void *a2)
{
  [a2 _gkMapDictionaryWithKeyPath:@"playerID"];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_1000A1A44;
  void v12[3] = &unk_1002D86F0;
  id v13 = (id)objc_claimAutoreleasedReturnValue();
  id v3 = v13;
  id v4 = objc_retainBlock(v12);
  id v5 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_1000A1AAC;
  v10[3] = &unk_1002D86C8;
  id v11 = v4;
  uint64_t v6 = v4;
  [v5 enumerateObjectsUsingBlock:v10];
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v7, v8, v9);
}

id sub_1000A1A44(uint64_t a1, void *a2)
{
  id v3 = [a2 playerID];
  if (v3)
  {
    id v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:v3];
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

void sub_1000A1AAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 currentPlayer];
  unsigned __int8 v5 = [v4 isGuestPlayer];

  if ((v5 & 1) == 0)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = [v3 currentPlayer];
    uint64_t v8 = (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);
    [v3 setCurrentPlayer:v8];
  }
  uint64_t v9 = [v3 participants];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_1000A1BC0;
  v10[3] = &unk_1002D86A0;
  id v11 = *(id *)(a1 + 32);
  [v9 enumerateObjectsUsingBlock:v10];
}

void sub_1000A1BC0(uint64_t a1, void *a2)
{
  id v13 = a2;
  id v3 = [v13 player];
  unsigned __int8 v4 = [v3 isGuestPlayer];

  if ((v4 & 1) == 0)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = [v13 player];
    uint64_t v7 = (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
    [v13 setPlayer:v7];
  }
  uint64_t v8 = [v13 invitedBy];
  unsigned __int8 v9 = [v8 isGuestPlayer];

  if ((v9 & 1) == 0)
  {
    uint64_t v10 = *(void *)(a1 + 32);
    id v11 = [v13 invitedBy];
    id v12 = (*(void (**)(uint64_t, void *))(v10 + 16))(v10, v11);
    [v13 setInvitedBy:v12];
  }
}

void sub_1000A1E1C(uint64_t a1)
{
  uint64_t v2 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKTurnBasedService.m", 641, "-[GKTurnBasedService fetchDetailsForTurnBasedMatchIDs:includeGameData:responseKind:context:handler:]_block_invoke");
  uint64_t v3 = *(void *)(a1 + 32);
  unsigned __int8 v4 = [*(id *)(a1 + 40) clientProxy];
  uint64_t v5 = +[GKCacheTransactionGroup transactionGroupWithName:v2 context:v3 client:v4];

  v27[0] = 0;
  v27[1] = v27;
  v27[2] = 0x2020000000;
  char v28 = 0;
  v25[0] = 0;
  v25[1] = v25;
  v25[2] = 0x2020000000;
  char v26 = 0;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  void v17[2] = sub_1000A2068;
  void v17[3] = &unk_1002D6210;
  id v6 = *(id *)(a1 + 48);
  id v21 = v27;
  id v22 = v25;
  int v23 = *(_DWORD *)(a1 + 64);
  char v24 = *(unsigned char *)(a1 + 68);
  uint64_t v7 = *(void *)(a1 + 40);
  id v18 = v6;
  uint64_t v19 = v7;
  id v8 = v5;
  id v20 = v8;
  [v8 performOnManagedObjectContext:v17];
  unsigned __int8 v9 = [*(id *)(a1 + 40) clientProxy];
  uint64_t v10 = [v9 replyQueue];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_1000A251C;
  void v12[3] = &unk_1002D4B48;
  id v14 = *(id *)(a1 + 56);
  id v11 = v8;
  id v13 = v11;
  id v15 = v27;
  id v16 = v25;
  [v11 notifyOnQueue:v10 block:v12];

  _Block_object_dispose(v25, 8);
  _Block_object_dispose(v27, 8);
}

void sub_1000A2044(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1000A2068(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = a3;
  id v6 = *(void **)(a1 + 32);
  id v7 = a2;
  id v8 = [v6 count];
  unsigned __int8 v9 = +[GKTurnBasedSessionCacheObject sessionsWithSessionIDs:*(void *)(a1 + 32) inContext:v7];

  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v9 count] == v8;
  BOOL v10 = *(int *)(a1 + 72) >= 1 && *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) != 0;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = v10;
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_1000A2338;
  v26[3] = &unk_1002D8718;
  char v28 = *(unsigned char *)(a1 + 76);
  int8x16_t v27 = vextq_s8(*(int8x16_t *)(a1 + 56), *(int8x16_t *)(a1 + 56), 8uLL);
  id v11 = [v9 _gkFilterWithBlock:v26];
  id v12 = [v11 count];
  uint64_t v13 = *(void *)(*(void *)(a1 + 64) + 8);
  if (v12) {
    BOOL v14 = 1;
  }
  else {
    BOOL v14 = *(unsigned char *)(v13 + 24) == 0;
  }
  char v15 = !v14;
  *(unsigned char *)(v13 + 24) = v15;
  if (*(_DWORD *)(a1 + 72) == 2) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) &= *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
  {
    id v16 = [v9 _gkMapDictionaryWithKeyPath:@"sessionID"];
    id v17 = *(void **)(a1 + 32);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    void v23[2] = sub_1000A2494;
    void v23[3] = &unk_1002D8740;
    id v18 = v16;
    id v24 = v18;
    char v25 = *(unsigned char *)(a1 + 76);
    uint64_t v19 = [v17 _gkFilterWithBlock:v23];
    if (!os_log_GKGeneral) {
      id v20 = (id)GKOSLoggers();
    }
    id v21 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "fetchDetailsForTurnBasedMatchIDs:Group Matches with SessionIDs have been set", v22, 2u);
    }
    [*(id *)(a1 + 40) _updatePlayersForMatches:v19 group:*(void *)(a1 + 48)];
    [*(id *)(a1 + 48) setResult:v19];
  }
  v5[2](v5);
}

id sub_1000A2338(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = [v3 expirationDate];
  [v4 timeIntervalSinceNow];
  double v6 = v5;
  BOOL v7 = v5 > 0.0;

  if (*(unsigned char *)(a1 + 48))
  {
    BOOL v7 = v6 > 0.0;
    id v8 = [v3 dataExpirationDate];
    [v8 timeIntervalSinceNow];
    double v10 = v9;

    BOOL v11 = v10 > 0.0;
    if (v10 <= 0.0) {
      BOOL v7 = 0;
    }
    uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 8);
    if (!*(unsigned char *)(v12 + 24)) {
      BOOL v11 = 0;
    }
    *(unsigned char *)(v12 + 24) = v11;
  }
  uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 8);
  if (*(unsigned char *)(v13 + 24)) {
    BOOL v14 = v7;
  }
  else {
    BOOL v14 = 0;
  }
  *(unsigned char *)(v13 + 24) = v14;
  if (v7)
  {
    if (!os_log_GKGeneral) {
      id v15 = (id)GKOSLoggers();
    }
    id v16 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "fetchDetailsForTurnBasedMatchIDs:Session Valid for match ID, returning sessionID", v19, 2u);
    }
    id v17 = 0;
  }
  else
  {
    id v17 = [v3 sessionID];
  }

  return v17;
}

id sub_1000A2494(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:a2];
  unsigned __int8 v4 = [v3 internalRepresentation];
  if (*(unsigned char *)(a1 + 40))
  {
    double v5 = [v3 gameData];
    [v4 setMatchData:v5];
  }

  return v4;
}

void sub_1000A251C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = [*(id *)(a1 + 32) result];
  (*(void (**)(uint64_t, id, void, void, void))(v2 + 16))(v2, v3, 0, *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24));
}

void sub_1000A26D8(uint64_t a1)
{
  uint64_t v2 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKTurnBasedService.m", 707, "-[GKTurnBasedService loadDetailsForTurnBasedMatchIDs:includeGameData:context:handler:]_block_invoke");
  uint64_t v3 = *(void *)(a1 + 32);
  unsigned __int8 v4 = [*(id *)(a1 + 40) clientProxy];
  double v5 = +[GKCacheTransactionGroup transactionGroupWithName:v2 context:v3 client:v4];

  v21[0] = 0;
  v21[1] = v21;
  void v21[2] = 0x2020000000;
  v21[3] = 0;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  void v15[2] = sub_1000A28E8;
  v15[3] = &unk_1002D87D8;
  id v16 = *(id *)(a1 + 48);
  char v20 = *(unsigned char *)(a1 + 64);
  id v6 = v5;
  uint64_t v7 = *(void *)(a1 + 40);
  id v17 = v6;
  uint64_t v18 = v7;
  uint64_t v19 = v21;
  [v6 performOnManagedObjectContext:v15];
  id v8 = [*(id *)(a1 + 40) clientProxy];
  double v9 = [v8 replyQueue];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_1000A2F94;
  v11[3] = &unk_1002D4248;
  id v13 = *(id *)(a1 + 56);
  BOOL v14 = v21;
  id v10 = v6;
  id v12 = v10;
  [v10 notifyOnQueue:v9 block:v11];

  _Block_object_dispose(v21, 8);
}

void sub_1000A28D0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1000A28E8(uint64_t a1, uint64_t a2, void *a3)
{
  double v5 = a3;
  id v6 = +[GKTurnBasedSessionCacheObject sessionsWithSessionIDs:*(void *)(a1 + 32) inContext:a2];
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  void v19[2] = sub_1000A2A6C;
  void v19[3] = &unk_1002D8788;
  char v20 = *(unsigned char *)(a1 + 64);
  uint64_t v7 = [v6 _gkFilterWithBlock:v19];
  if ([v7 count])
  {
    id v8 = *(void **)(a1 + 40);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1000A2B28;
    void v13[3] = &unk_1002D87B0;
    id v14 = v7;
    char v18 = *(unsigned char *)(a1 + 64);
    int8x16_t v12 = *(int8x16_t *)(a1 + 40);
    id v9 = (id)v12.i64[0];
    int8x16_t v15 = vextq_s8(v12, v12, 8uLL);
    id v10 = v6;
    uint64_t v11 = *(void *)(a1 + 56);
    id v16 = v10;
    uint64_t v17 = v11;
    [v8 perform:v13];
  }
  v5[2](v5);
}

id sub_1000A2A6C(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = [v3 expirationDate];
  [v4 timeIntervalSinceNow];
  double v6 = v5;

  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v7 = [v3 dataExpirationDate];
    [v7 timeIntervalSinceNow];
    double v9 = v8;

    if (v6 > 0.0 && v9 > 0.0) {
      goto LABEL_4;
    }
  }
  else if (v6 > 0.0)
  {
LABEL_4:
    id v10 = 0;
    goto LABEL_7;
  }
  id v10 = [v3 sessionID];
LABEL_7:

  return v10;
}

void sub_1000A2B28(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  v17[0] = @"session-ids";
  v17[1] = @"get-game-state";
  v18[0] = v4;
  v18[1] = &off_1002F2048;
  void v17[2] = @"get-exchanges";
  double v5 = +[NSNumber numberWithInteger:*(unsigned __int8 *)(a1 + 72)];
  void v18[2] = v5;
  double v6 = +[NSDictionary dictionaryWithObjects:v18 forKeys:v17 count:3];

  uint64_t v7 = +[GKNetworkRequestManager commonNetworkRequestManager];
  double v8 = [*(id *)(a1 + 40) clientProxy];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_1000A2CD8;
  void v12[3] = &unk_1002D6808;
  id v13 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  id v15 = v3;
  uint64_t v16 = v10;
  id v14 = v9;
  id v11 = v3;
  [v7 issueRequest:v6 bagKey:@"gk-tb-get-session" clientProxy:v8 handler:v12];
}

void sub_1000A2CD8(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7 = a2;
  id v8 = a3;
  if (v7)
  {
    id v9 = +[NSDate dateWithTimeIntervalSinceNow:a4];
    uint64_t v10 = *(void **)(a1 + 32);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_1000A2E08;
    void v12[3] = &unk_1002D3D30;
    id v13 = v7;
    id v14 = *(id *)(a1 + 40);
    id v15 = v9;
    id v11 = v9;
    [v10 performOnManagedObjectContext:v12];
  }
  *(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = a4;
  [*(id *)(a1 + 32) setError:v8];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1000A2E08(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void **)(a1 + 32);
  double v5 = a3;
  double v6 = [v4 objectForKey:@"sessions"];
  [*(id *)(a1 + 40) _gkMapDictionaryWithKeyPath:@"sessionID"];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000A2F08;
  void v8[3] = &unk_1002D67E0;
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  id v10 = *(id *)(a1 + 48);
  id v7 = v9;
  [v6 enumerateObjectsUsingBlock:v8];
  v5[2](v5);
}

void sub_1000A2F08(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = [v5 objectForKey:@"session-id"];
  if (v3)
  {
    uint64_t v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:v3];
    [v4 updateWithServerRepresentation:v5 expirationDate:*(void *)(a1 + 40)];
  }
}

void sub_1000A2F94(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  double v2 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, double))(v1 + 16))(v1, v3, v2);
}

void sub_1000A3134(uint64_t a1)
{
  double v2 = *(void **)(a1 + 32);
  id v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKTurnBasedService.m", 773, "-[GKTurnBasedService getDetailsForTurnBasedMatchIDs:includeGameData:prefetchOnly:handler:]_block_invoke");
  uint64_t v4 = [v2 transactionGroupWithName:v3];

  id v5 = [*(id *)(a1 + 32) clientProxy];
  double v6 = [v5 replyQueue];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  void v16[2] = sub_1000A3320;
  void v16[3] = &unk_1002D8878;
  id v7 = *(id *)(a1 + 48);
  char v20 = *(unsigned char *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(a1 + 40);
  id v19 = v7;
  void v16[4] = v8;
  id v17 = v9;
  char v21 = *(unsigned char *)(a1 + 57);
  id v10 = v4;
  id v18 = v10;
  [v10 performOnQueue:v6 block:v16];

  if (*(void *)(a1 + 48))
  {
    id v11 = [*(id *)(a1 + 32) clientProxy];
    int8x16_t v12 = [v11 replyQueue];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1000A3A1C;
    void v13[3] = &unk_1002D3930;
    id v15 = *(id *)(a1 + 48);
    id v14 = v10;
    [v14 notifyOnQueue:v12 block:v13];
  }
}

void sub_1000A3320(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 64)) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = *(void *)(a1 + 56) == 0;
  }
  uint64_t v5 = !v4;
  double v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 65);
  id v9 = [*(id *)(a1 + 48) context];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  void v14[2] = sub_1000A3454;
  void v14[3] = &unk_1002D8850;
  id v10 = *(id *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 32);
  int8x16_t v12 = *(void **)(a1 + 40);
  id v15 = v10;
  uint64_t v16 = v11;
  id v17 = v12;
  char v20 = *(unsigned char *)(a1 + 65);
  char v21 = *(unsigned char *)(a1 + 64);
  id v18 = *(id *)(a1 + 56);
  id v19 = v3;
  id v13 = v3;
  [v6 fetchDetailsForTurnBasedMatchIDs:v7 includeGameData:v8 responseKind:v5 context:v9 handler:v14];
}

void sub_1000A3454(uint64_t a1, void *a2, uint64_t a3, char a4, char a5)
{
  id v8 = a2;
  if ((a4 & 1) == 0)
  {
    id v9 = *(void **)(a1 + 32);
    id v10 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKTurnBasedService.m", 784, "-[GKTurnBasedService getDetailsForTurnBasedMatchIDs:includeGameData:prefetchOnly:handler:]_block_invoke_3");
    uint64_t v11 = [v9 transactionGroupWithName:v10];

    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_1000A3680;
    void v27[3] = &unk_1002D3FB8;
    int8x16_t v12 = *(void **)(a1 + 48);
    void v27[4] = *(void *)(a1 + 40);
    id v28 = v12;
    char v30 = *(unsigned char *)(a1 + 72);
    id v13 = v11;
    id v29 = v13;
    [v13 perform:v27];
    if ((a5 & 1) == 0 && !*(unsigned char *)(a1 + 73))
    {
      id v14 = *(void **)(a1 + 32);
      id v15 = [*(id *)(a1 + 40) clientProxy];
      uint64_t v16 = [v15 replyQueue];
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      void v20[2] = sub_1000A37E0;
      v20[3] = &unk_1002D8828;
      id v21 = v13;
      id v25 = *(id *)(a1 + 56);
      id v17 = *(id *)(a1 + 32);
      uint64_t v18 = *(void *)(a1 + 40);
      id v19 = *(void **)(a1 + 48);
      id v22 = v17;
      uint64_t v23 = v18;
      id v24 = v19;
      char v26 = *(unsigned char *)(a1 + 72);
      [v14 join:v21 queue:v16 block:v20];
    }
  }
  [*(id *)(a1 + 32) setResult:v8];
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_1000A3680(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v7 = [*(id *)(a1 + 48) context];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_1000A3750;
  v9[3] = &unk_1002D61A8;
  id v10 = v3;
  id v8 = v3;
  [v4 loadDetailsForTurnBasedMatchIDs:v5 includeGameData:v6 context:v7 handler:v9];
}

void sub_1000A3750(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    uint64_t v5 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000AD1C4((uint64_t)v3, v5);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000A37E0(uint64_t a1)
{
  double v2 = [*(id *)(a1 + 32) error];

  if (!v2)
  {
    int v3 = 2 * (*(void *)(a1 + 64) != 0);
    uint64_t v7 = _NSConcreteStackBlock;
    uint64_t v8 = 3221225472;
    id v9 = sub_1000A38E4;
    id v10 = &unk_1002D8800;
    id v4 = *(void **)(a1 + 40);
    uint64_t v5 = *(void **)(a1 + 56);
    uint64_t v11 = *(void *)(a1 + 48);
    id v12 = v5;
    char v15 = *(unsigned char *)(a1 + 72);
    int v14 = v3;
    id v13 = *(id *)(a1 + 40);
    [v4 perform:&v7];
  }
  uint64_t v6 = [*(id *)(a1 + 32) error:v7, v8, v9, v10, v11];
  [*(id *)(a1 + 40) setError:v6];
}

void sub_1000A38E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 60);
  uint64_t v7 = *(unsigned int *)(a1 + 56);
  uint64_t v8 = [*(id *)(a1 + 48) context];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_1000A39D4;
  v10[3] = &unk_1002D60B8;
  id v11 = *(id *)(a1 + 48);
  id v12 = v3;
  id v9 = v3;
  [v4 fetchDetailsForTurnBasedMatchIDs:v5 includeGameData:v6 responseKind:v7 context:v8 handler:v10];
}

uint64_t sub_1000A39D4(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setResult:a2];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_1000A3A1C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_1000A3ED0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) context];
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_1000A41F8;
  v24[3] = &unk_1002D3B38;
  id v25 = *(id *)(a1 + 40);
  id v26 = *(id *)(a1 + 32);
  [v4 performBlockAndWait:v24];

  uint64_t v5 = [*(id *)(a1 + 48) participants];
  id v6 = [v5 count];

  if (v6)
  {
    uint64_t v7 = [*(id *)(a1 + 48) participants];
    uint64_t v8 = [v7 objectAtIndexedSubscript:([*(id *)(a1 + 48) currentParticipant])];

    id v9 = [v8 player];
    unsigned int v10 = [v9 isGuestPlayer];
    id v11 = *(void **)(a1 + 56);
    if (v10)
    {
      uint64_t v12 = *(void *)(a1 + 40);
      v31[0] = @"session-id";
      v31[1] = @"guest-id";
      v32[0] = v12;
      id v13 = [v9 guestIdentifier];
      v32[1] = v13;
      int v14 = +[NSDictionary dictionaryWithObjects:v32 forKeys:v31 count:2];
      char v15 = [v11 updateRequestWithPushToken:v14];
    }
    else
    {
      CFStringRef v29 = @"session-id";
      uint64_t v30 = *(void *)(a1 + 40);
      id v13 = +[NSDictionary dictionaryWithObjects:&v30 forKeys:&v29 count:1];
      char v15 = [v11 updateRequestWithPushToken:v13];
    }
  }
  else
  {
    uint64_t v16 = *(void **)(a1 + 56);
    uint64_t v17 = *(void *)(a1 + 40);
    CFStringRef v27 = @"session-id";
    uint64_t v28 = v17;
    uint64_t v8 = +[NSDictionary dictionaryWithObjects:&v28 forKeys:&v27 count:1];
    char v15 = [v16 updateRequestWithPushToken:v8];
  }

  uint64_t v18 = +[GKNetworkRequestManager commonNetworkRequestManager];
  id v19 = [*(id *)(a1 + 64) clientProxy];
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  void v21[2] = sub_1000A42A4;
  v21[3] = &unk_1002D50A0;
  id v22 = *(id *)(a1 + 32);
  id v23 = v3;
  id v20 = v3;
  [v18 issueRequest:v15 bagKey:@"gk-tb-accept" clientProxy:v19 handler:v21];
}

void sub_1000A41F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) context];
  id v6 = +[GKTurnBasedSessionCacheObject sessionWithID:v2 inManagedObjectContext:v3];

  [v6 expire];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = [*(id *)(a1 + 40) context];
  +[GKTurnBasedSessionListCacheObject expireListsForSessionID:v4 context:v5];
}

uint64_t sub_1000A42A4(uint64_t a1)
{
  [*(id *)(a1 + 32) setError:];
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v2();
}

void sub_1000A42E8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    void v21[2] = sub_1000A44DC;
    v21[3] = &unk_1002D3980;
    id v3 = *(void **)(a1 + 40);
    void v21[4] = *(void *)(a1 + 48);
    id v22 = v2;
    id v23 = *(id *)(a1 + 40);
    [v3 perform:v21];
    uint64_t v4 = *(void **)(a1 + 40);
    uint64_t v5 = [*(id *)(a1 + 48) clientProxy];
    id v6 = [v5 replyQueue];
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    void v18[2] = sub_1000A46A4;
    void v18[3] = &unk_1002D3A70;
    id v7 = *(id *)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 48);
    id v19 = v7;
    uint64_t v20 = v8;
    [v4 performOnQueue:v6 block:v18];
  }
  if (*(void *)(a1 + 56))
  {
    id v9 = *(void **)(a1 + 40);
    unsigned int v10 = [*(id *)(a1 + 48) clientProxy];
    id v11 = [v10 replyQueue];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    void v14[2] = sub_1000A4944;
    void v14[3] = &unk_1002D48D8;
    id v17 = *(id *)(a1 + 56);
    id v12 = *(id *)(a1 + 40);
    uint64_t v13 = *(void *)(a1 + 48);
    id v15 = v12;
    uint64_t v16 = v13;
    [v9 notifyOnQueue:v11 block:v14];
  }
}

void sub_1000A44DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v5 = +[NSArray arrayWithObjects:&v10 count:1];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1000A45E8;
  void v7[3] = &unk_1002D4F38;
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v6 = v3;
  [v4 getDetailsForTurnBasedMatchIDs:v5 includeGameData:1 handler:v7];
}

void sub_1000A45E8(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if (v5)
  {
    id v6 = [*(id *)(a1 + 32) error];

    if (!v6) {
      [*(id *)(a1 + 32) setError:v5];
    }
  }
  id v7 = [v8 lastObject];
  [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:@"result"];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000A46A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) context];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_1000A47D0;
  v10[3] = &unk_1002D3A48;
  int8x16_t v8 = *(int8x16_t *)(a1 + 32);
  id v5 = (id)v8.i64[0];
  int8x16_t v11 = vextq_s8(v8, v8, 8uLL);
  id v12 = v3;
  id v6 = v3;
  [v4 performBlockAndWait:v10];

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_1000A489C;
  v9[3] = &unk_1002D4050;
  id v7 = *(void **)(a1 + 32);
  void v9[4] = *(void *)(a1 + 40);
  [v7 perform:v9];
}

void sub_1000A47D0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) clientProxy];
  id v3 = [v2 bundleIdentifier];
  uint64_t v4 = [*(id *)(a1 + 40) context];
  id v6 = +[GKGameCacheObject gameForBundleID:v3 context:v4];

  id v5 = [v6 turnBasedSessionList];
  [v5 expire];

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1000A489C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1000A4934;
  void v6[3] = &unk_1002D4F88;
  id v7 = v3;
  id v5 = v3;
  [v4 getTurnBasedMatchesWithHandler:v6];
}

uint64_t sub_1000A4934(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000A4944(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  id v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"result"];
  uint64_t v4 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, v3, v4);

  id v5 = [*(id *)(a1 + 40) clientProxy];
  [v5 refreshContentsForDataType:14 userInfo:0];
}

void sub_1000A4C90(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) context];
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  void v20[2] = sub_1000A4F70;
  v20[3] = &unk_1002D3B38;
  id v21 = *(id *)(a1 + 40);
  id v22 = *(id *)(a1 + 32);
  [v4 performBlockAndWait:v20];

  id v5 = [*(id *)(a1 + 48) participants];
  id v6 = [v5 objectAtIndexedSubscript:objc_msgSend(*(id *)(a1 + 48), "currentParticipant")];

  id v7 = [v6 player];
  unsigned int v8 = [v7 isGuestPlayer];
  id v9 = *(void **)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 40);
  if (v8)
  {
    v25[0] = @"session-id";
    v25[1] = @"reason";
    v26[0] = v10;
    v26[1] = &off_1002F2048;
    v25[2] = @"guest-id";
    int8x16_t v11 = [v7 guestIdentifier];
    v26[2] = v11;
    id v12 = +[NSDictionary dictionaryWithObjects:v26 forKeys:v25 count:3];
    uint64_t v13 = [v9 updateRequestWithPushToken:v12];
  }
  else
  {
    v23[0] = @"session-id";
    v23[1] = @"reason";
    v24[0] = v10;
    v24[1] = &off_1002F2048;
    int8x16_t v11 = +[NSDictionary dictionaryWithObjects:v24 forKeys:v23 count:2];
    uint64_t v13 = [v9 updateRequestWithPushToken:v11];
  }

  int v14 = +[GKNetworkRequestManager commonNetworkRequestManager];
  id v15 = [*(id *)(a1 + 64) clientProxy];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  void v17[2] = sub_1000A5098;
  void v17[3] = &unk_1002D50A0;
  id v18 = *(id *)(a1 + 32);
  id v19 = v3;
  id v16 = v3;
  [v14 issueRequest:v13 bagKey:@"gk-tb-decline" clientProxy:v15 handler:v17];
}

void sub_1000A4F70(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) context];
  id v11 = +[GKTurnBasedSessionCacheObject sessionWithID:v2 inManagedObjectContext:v3];

  [v11 expire];
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = [*(id *)(a1 + 40) context];
  +[GKTurnBasedSessionListCacheObject expireListsForSessionID:v4 context:v5];

  id v6 = +[GKClientProxy gameCenterClient];
  id v7 = [v6 bundleIdentifier];
  unsigned int v8 = [*(id *)(a1 + 40) context];
  id v9 = +[GKGameCacheObject gameForBundleID:v7 context:v8];
  uint64_t v10 = [v9 turnBasedSessionList];
  [v10 expire];
}

uint64_t sub_1000A5098(uint64_t a1)
{
  [*(id *)(a1 + 32) setError:];
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v2();
}

void sub_1000A50DC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    void v15[2] = sub_1000A5294;
    v15[3] = &unk_1002D3980;
    id v3 = *(void **)(a1 + 40);
    void v15[4] = *(void *)(a1 + 48);
    id v16 = v2;
    id v17 = *(id *)(a1 + 40);
    [v3 perform:v15];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    void v14[2] = sub_1000A545C;
    void v14[3] = &unk_1002D4050;
    uint64_t v4 = *(void **)(a1 + 40);
    void v14[4] = *(void *)(a1 + 48);
    [v4 perform:v14];
  }
  if (*(void *)(a1 + 56))
  {
    id v5 = *(void **)(a1 + 40);
    id v6 = [*(id *)(a1 + 48) clientProxy];
    id v7 = [v6 replyQueue];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1000A5504;
    v10[3] = &unk_1002D48D8;
    id v13 = *(id *)(a1 + 56);
    id v8 = *(id *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48);
    id v11 = v8;
    uint64_t v12 = v9;
    [v5 notifyOnQueue:v7 block:v10];
  }
}

void sub_1000A5294(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  id v5 = +[NSArray arrayWithObjects:&v10 count:1];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1000A53A0;
  void v7[3] = &unk_1002D4F38;
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v6 = v3;
  [v4 getDetailsForTurnBasedMatchIDs:v5 includeGameData:1 handler:v7];
}

void sub_1000A53A0(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if (v5)
  {
    id v6 = [*(id *)(a1 + 32) error];

    if (!v6) {
      [*(id *)(a1 + 32) setError:v5];
    }
  }
  id v7 = [v8 lastObject];
  [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:@"result"];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000A545C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1000A54F4;
  void v6[3] = &unk_1002D4F88;
  id v7 = v3;
  id v5 = v3;
  [v4 getTurnBasedMatchesWithHandler:v6];
}

uint64_t sub_1000A54F4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000A5504(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  id v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"result"];
  uint64_t v4 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, v3, v4);

  id v5 = [*(id *)(a1 + 40) clientProxy];
  [v5 refreshContentsForDataType:14 userInfo:0];
}

void sub_1000A5844(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) context];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  void v15[2] = sub_1000A5A3C;
  v15[3] = &unk_1002D3B38;
  id v16 = *(id *)(a1 + 40);
  id v17 = *(id *)(a1 + 32);
  [v4 performBlock:v15];

  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = *(void **)(a1 + 48);
  CFStringRef v18 = @"session-id";
  uint64_t v19 = v5;
  id v7 = +[NSDictionary dictionaryWithObjects:&v19 forKeys:&v18 count:1];
  id v8 = [v6 updateRequestWithPushToken:v7];

  id v9 = +[GKNetworkRequestManager commonNetworkRequestManager];
  uint64_t v10 = [*(id *)(a1 + 56) clientProxy];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_1000A5BA4;
  void v12[3] = &unk_1002D50A0;
  id v13 = *(id *)(a1 + 32);
  id v14 = v3;
  id v11 = v3;
  [v9 issueRequest:v8 bagKey:@"gk-tb-remove-session" clientProxy:v10 handler:v12];
}

void sub_1000A5A3C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) context];
  +[GKTurnBasedSessionListCacheObject expireListsForSessionID:v2 context:v3];

  uint64_t v4 = +[GKClientProxy gameCenterClient];
  uint64_t v5 = [v4 bundleIdentifier];
  id v6 = [*(id *)(a1 + 40) context];
  id v7 = +[GKGameCacheObject gameForBundleID:v5 context:v6];
  id v8 = [v7 turnBasedSessionList];
  [v8 expire];

  +[NSPredicate predicateWithFormat:@"sessionID = %@", *(void *)(a1 + 32)];
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  id v9 = [*(id *)(a1 + 40) context];
  +[GKCacheObject deleteObjectsMatchingPredicate:v11 context:v9];

  uint64_t v10 = [*(id *)(a1 + 40) context];
  +[GKCacheObject deleteObjectsMatchingPredicate:v11 context:v10];
}

uint64_t sub_1000A5BA4(uint64_t a1)
{
  [*(id *)(a1 + 32) setError:];
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v2();
}

void sub_1000A5BE8(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_1000A5D24;
    void v12[3] = &unk_1002D4050;
    uint64_t v2 = *(void **)(a1 + 40);
    void v12[4] = *(void *)(a1 + 48);
    [v2 perform:v12];
  }
  if (*(void *)(a1 + 56))
  {
    id v3 = *(void **)(a1 + 40);
    uint64_t v4 = [*(id *)(a1 + 48) clientProxy];
    uint64_t v5 = [v4 replyQueue];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1000A5DCC;
    void v8[3] = &unk_1002D48D8;
    id v11 = *(id *)(a1 + 56);
    id v6 = *(id *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    id v9 = v6;
    uint64_t v10 = v7;
    [v3 notifyOnQueue:v5 block:v8];
  }
}

void sub_1000A5D24(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1000A5DBC;
  void v6[3] = &unk_1002D4F88;
  id v7 = v3;
  id v5 = v3;
  [v4 getTurnBasedMatchesWithHandler:v6];
}

uint64_t sub_1000A5DBC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000A5DCC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);

  id v4 = [*(id *)(a1 + 40) clientProxy];
  [v4 refreshContentsForDataType:14 userInfo:0];
}

void sub_1000A612C(uint64_t a1, void *a2)
{
  id v31 = a2;
  id v3 = +[NSDate date];
  id v4 = [*(id *)(a1 + 32) context];
  v40[0] = _NSConcreteStackBlock;
  v40[1] = 3221225472;
  v40[2] = sub_1000A6584;
  v40[3] = &unk_1002D3B38;
  id v41 = *(id *)(a1 + 40);
  id v42 = *(id *)(a1 + 32);
  [v4 performBlockAndWait:v40];

  id v5 = [*(id *)(a1 + 48) participants];
  id v6 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [v5 count]);

  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  id v7 = [*(id *)(a1 + 48) participants];
  id v8 = [v7 countByEnumeratingWithState:&v36 objects:v45 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v37;
    do
    {
      for (unint64_t i = 0; i != v9; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v37 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(void **)(*((void *)&v36 + 1) + 8 * i);
        if (([v12 isAutomatchParticipant] & 1) == 0)
        {
          id v13 = [v12 serverRepresentation];
          [v6 addObject:v13];
        }
      }
      id v9 = [v7 countByEnumeratingWithState:&v36 objects:v45 count:16];
    }
    while (v9);
  }

  id v14 = *(void **)(a1 + 48);
  v44[0] = *(void *)(a1 + 40);
  v43[0] = @"session-id";
  v43[1] = @"current-turn-number";
  id v15 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v14 turnNumber]);
  v44[1] = v15;
  v43[2] = @"turns";
  id v16 = [*(id *)(a1 + 56) turnsForParticipantIndexes:*(void *)(a1 + 64) turnTimeout:*(double *)(a1 + 80)];
  v44[2] = v16;
  v43[3] = @"turn-at";
  id v32 = v3;
  id v17 = [v3 _gkServerTimestamp];
  v44[3] = v17;
  v43[4] = @"turn-message";
  uint64_t v18 = [*(id *)(a1 + 48) message];
  uint64_t v19 = (void *)v18;
  CFStringRef v20 = &stru_1002E4F58;
  if (v18) {
    CFStringRef v20 = (const __CFString *)v18;
  }
  v44[4] = v20;
  v43[5] = @"localized-turn-message";
  uint64_t v21 = [*(id *)(a1 + 48) localizableMessage];
  id v22 = (void *)v21;
  id v23 = &__NSDictionary0__struct;
  if (v21) {
    id v23 = (void *)v21;
  }
  void v44[5] = v23;
  v43[6] = @"game-state";
  id v24 = [*(id *)(a1 + 48) matchData];
  id v25 = v24;
  if (!v24)
  {
    id v25 = +[NSData data];
  }
  v43[7] = @"players";
  v44[6] = v25;
  v44[7] = v6;
  id v26 = +[NSDictionary dictionaryWithObjects:v44 forKeys:v43 count:8];
  if (!v24) {

  }
  CFStringRef v27 = +[GKNetworkRequestManager commonNetworkRequestManager];
  uint64_t v28 = [*(id *)(a1 + 72) updateRequestWithPushToken:v26];
  CFStringRef v29 = [*(id *)(a1 + 56) clientProxy];
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472;
  v33[2] = sub_1000A6608;
  v33[3] = &unk_1002D50A0;
  id v34 = *(id *)(a1 + 32);
  id v35 = v31;
  id v30 = v31;
  [v27 issueRequest:v28 bagKey:@"gk-tb-turn" clientProxy:v29 handler:v33];
}

void sub_1000A6584(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = [*(id *)(a1 + 40) context];
  id v3 = +[GKTurnBasedSessionCacheObject sessionWithID:v1 inManagedObjectContext:v2];

  [v3 expire];
  [v3 expireGameData];
}

uint64_t sub_1000A6608(uint64_t a1)
{
  [*(id *)(a1 + 32) setError:];
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v2();
}

void sub_1000A664C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    void v15[2] = sub_1000A6804;
    v15[3] = &unk_1002D3980;
    id v3 = *(void **)(a1 + 40);
    void v15[4] = *(void *)(a1 + 48);
    id v16 = v2;
    id v17 = *(id *)(a1 + 40);
    [v3 perform:v15];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    void v14[2] = sub_1000A69CC;
    void v14[3] = &unk_1002D4050;
    id v4 = *(void **)(a1 + 40);
    void v14[4] = *(void *)(a1 + 48);
    [v4 perform:v14];
  }
  if (*(void *)(a1 + 56))
  {
    id v5 = *(void **)(a1 + 40);
    id v6 = [*(id *)(a1 + 48) clientProxy];
    id v7 = [v6 replyQueue];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1000A6A74;
    v10[3] = &unk_1002D48D8;
    id v13 = *(id *)(a1 + 56);
    id v8 = *(id *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48);
    id v11 = v8;
    uint64_t v12 = v9;
    [v5 notifyOnQueue:v7 block:v10];
  }
}

void sub_1000A6804(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  id v5 = +[NSArray arrayWithObjects:&v10 count:1];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1000A6910;
  void v7[3] = &unk_1002D4F38;
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v6 = v3;
  [v4 getDetailsForTurnBasedMatchIDs:v5 includeGameData:1 handler:v7];
}

void sub_1000A6910(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if (v5)
  {
    id v6 = [*(id *)(a1 + 32) error];

    if (!v6) {
      [*(id *)(a1 + 32) setError:v5];
    }
  }
  id v7 = [v8 lastObject];
  [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:@"result"];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000A69CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1000A6A64;
  void v6[3] = &unk_1002D4F88;
  id v7 = v3;
  id v5 = v3;
  [v4 getTurnBasedMatchesWithHandler:v6];
}

uint64_t sub_1000A6A64(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000A6A74(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  id v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"result"];
  id v4 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, v3, v4);

  id v5 = [*(id *)(a1 + 40) clientProxy];
  [v5 refreshContentsForDataType:14 userInfo:0];
}

void sub_1000A6DE4(uint64_t a1, void *a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000A6EEC;
  void v8[3] = &unk_1002D5868;
  id v4 = *(void **)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  id v10 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 56);
  id v5 = *(id *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 72);
  id v12 = v5;
  uint64_t v13 = v6;
  id v14 = *(id *)(a1 + 32);
  id v7 = a2;
  [v4 performOnManagedObjectContext:v8];
  v7[2](v7);
}

void sub_1000A6EEC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = +[GKTurnBasedSessionCacheObject sessionWithID:*(void *)(a1 + 32) inManagedObjectContext:v5];
  [v7 expire];
  id v8 = *(void **)(a1 + 40);
  v29[0] = *(void *)(a1 + 32);
  v28[0] = @"session-id";
  v28[1] = @"game-state-version";
  uint64_t v9 = [v8 matchDataVersion];
  id v10 = (void *)v9;
  CFStringRef v11 = &stru_1002E4F58;
  if (v9) {
    CFStringRef v11 = (const __CFString *)v9;
  }
  v29[1] = v11;
  void v28[2] = @"game-state";
  id v12 = [*(id *)(a1 + 40) matchData];
  uint64_t v13 = v12;
  if (!v12)
  {
    uint64_t v13 = +[NSData data];
  }
  v28[3] = @"resolve-exchanges";
  id v14 = *(void **)(a1 + 48);
  if (!v14) {
    id v14 = &__NSArray0__struct;
  }
  void v29[2] = v13;
  void v29[3] = v14;
  id v15 = +[NSDictionary dictionaryWithObjects:v29 forKeys:v28 count:4];
  if (!v12) {

  }
  id v16 = +[GKNetworkRequestManager commonNetworkRequestManager];
  id v17 = [*(id *)(a1 + 56) updateRequestWithPushToken:v15];
  uint64_t v18 = [*(id *)(a1 + 64) clientProxy];
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  void v22[2] = sub_1000A7164;
  v22[3] = &unk_1002D7278;
  id v23 = *(id *)(a1 + 72);
  id v24 = v5;
  id v25 = v7;
  id v26 = *(id *)(a1 + 40);
  id v27 = v6;
  id v19 = v6;
  id v20 = v7;
  id v21 = v5;
  [v16 issueRequest:v17 bagKey:@"gk-tb-update-game-state" clientProxy:v18 handler:v22];
}

uint64_t sub_1000A7164(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  [*(id *)(a1 + 32) setError:];
  if (!a4)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_1000A7234;
    v9[3] = &unk_1002D3F20;
    id v7 = *(void **)(a1 + 40);
    id v10 = *(id *)(a1 + 48);
    id v11 = *(id *)(a1 + 56);
    double v12 = a2;
    [v7 performBlockAndWait:v9];
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_1000A7234(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v4 = [*(id *)(a1 + 40) matchData];
  id v3 = +[NSDate dateWithTimeIntervalSinceNow:*(double *)(a1 + 48)];
  [v2 saveGameData:v4 expirationDate:v3];
}

void sub_1000A72AC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1000A7410;
    void v13[3] = &unk_1002D3980;
    id v3 = *(void **)(a1 + 40);
    void v13[4] = *(void *)(a1 + 48);
    id v14 = v2;
    id v15 = *(id *)(a1 + 40);
    [v3 perform:v13];
  }
  if (*(void *)(a1 + 56))
  {
    id v4 = *(void **)(a1 + 40);
    id v5 = [*(id *)(a1 + 48) clientProxy];
    id v6 = [v5 replyQueue];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_1000A75D4;
    v9[3] = &unk_1002D48D8;
    id v12 = *(id *)(a1 + 56);
    id v7 = *(id *)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 48);
    id v10 = v7;
    uint64_t v11 = v8;
    [v4 notifyOnQueue:v6 block:v9];
  }
}

void sub_1000A7410(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  id v5 = +[NSArray arrayWithObjects:&v10 count:1];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1000A751C;
  void v7[3] = &unk_1002D4F38;
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v6 = v3;
  [v4 getDetailsForTurnBasedMatchIDs:v5 includeGameData:1 handler:v7];
}

void sub_1000A751C(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  id v6 = [*(id *)(a1 + 32) error];

  if (!v6) {
    [*(id *)(a1 + 32) setError:v5];
  }
  id v7 = [v8 lastObject];
  [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:@"result"];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000A75D4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  id v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"result"];
  id v4 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, v3, v4);

  id v5 = [*(id *)(a1 + 40) clientProxy];
  [v5 refreshContentsForDataType:14 userInfo:0];
}

void sub_1000A78FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) context];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  void v16[2] = sub_1000A7B40;
  void v16[3] = &unk_1002D3B38;
  id v17 = *(id *)(a1 + 40);
  id v18 = *(id *)(a1 + 32);
  [v4 performBlockAndWait:v16];

  id v5 = +[GKBulletinController sharedController];
  [v5 clearTurnBasedBulletinsForMatchID:*(void *)(a1 + 40)];

  id v6 = *(void **)(a1 + 48);
  v20[0] = *(void *)(a1 + 40);
  v19[0] = @"session-id";
  v19[1] = @"player-status-code";
  id v7 = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 64)];
  v20[1] = v7;
  id v8 = +[NSDictionary dictionaryWithObjects:v20 forKeys:v19 count:2];
  id v9 = [v6 updateRequestWithPushToken:v8];

  uint64_t v10 = +[GKNetworkRequestManager commonNetworkRequestManager];
  uint64_t v11 = [*(id *)(a1 + 56) clientProxy];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1000A7C68;
  void v13[3] = &unk_1002D50A0;
  id v14 = *(id *)(a1 + 32);
  id v15 = v3;
  id v12 = v3;
  [v10 issueRequest:v9 bagKey:@"gk-tb-resign" clientProxy:v11 handler:v13];
}

void sub_1000A7B40(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) context];
  id v11 = +[GKTurnBasedSessionCacheObject sessionWithID:v2 inManagedObjectContext:v3];

  [v11 expire];
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = [*(id *)(a1 + 40) context];
  +[GKTurnBasedSessionListCacheObject expireListsForSessionID:v4 context:v5];

  id v6 = +[GKClientProxy gameCenterClient];
  id v7 = [v6 bundleIdentifier];
  id v8 = [*(id *)(a1 + 40) context];
  id v9 = +[GKGameCacheObject gameForBundleID:v7 context:v8];
  uint64_t v10 = [v9 turnBasedSessionList];
  [v10 expire];
}

uint64_t sub_1000A7C68(uint64_t a1)
{
  [*(id *)(a1 + 32) setError:];
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v2();
}

void sub_1000A7CAC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    void v15[2] = sub_1000A7E64;
    v15[3] = &unk_1002D3980;
    id v3 = *(void **)(a1 + 40);
    void v15[4] = *(void *)(a1 + 48);
    id v16 = v2;
    id v17 = *(id *)(a1 + 40);
    [v3 perform:v15];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    void v14[2] = sub_1000A8028;
    void v14[3] = &unk_1002D4050;
    uint64_t v4 = *(void **)(a1 + 40);
    void v14[4] = *(void *)(a1 + 48);
    [v4 perform:v14];
  }
  if (*(void *)(a1 + 56))
  {
    id v5 = *(void **)(a1 + 40);
    id v6 = [*(id *)(a1 + 48) clientProxy];
    id v7 = [v6 replyQueue];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1000A80D0;
    v10[3] = &unk_1002D48D8;
    id v13 = *(id *)(a1 + 56);
    id v8 = *(id *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48);
    id v11 = v8;
    uint64_t v12 = v9;
    [v5 notifyOnQueue:v7 block:v10];
  }
}

void sub_1000A7E64(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  id v5 = +[NSArray arrayWithObjects:&v10 count:1];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1000A7F70;
  void v7[3] = &unk_1002D4F38;
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v6 = v3;
  [v4 getDetailsForTurnBasedMatchIDs:v5 includeGameData:1 handler:v7];
}

void sub_1000A7F70(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  id v6 = [*(id *)(a1 + 32) error];

  if (!v6) {
    [*(id *)(a1 + 32) setError:v5];
  }
  id v7 = [v8 lastObject];
  [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:@"result"];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000A8028(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1000A80C0;
  void v6[3] = &unk_1002D4F88;
  id v7 = v3;
  id v5 = v3;
  [v4 getTurnBasedMatchesWithHandler:v6];
}

uint64_t sub_1000A80C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000A80D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  id v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"result"];
  uint64_t v4 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, v3, v4);

  id v5 = [*(id *)(a1 + 40) clientProxy];
  [v5 refreshContentsForDataType:14 userInfo:0];
}

void sub_1000A870C(id *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [a1[4] context];
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_1000A8A48;
  void v25[3] = &unk_1002D3B38;
  id v26 = a1[5];
  id v27 = a1[4];
  [v4 performBlockAndWait:v25];

  id v5 = a1[6];
  v29[0] = a1[5];
  v28[0] = @"session-id";
  v28[1] = @"current-turn-number";
  id v6 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v5 turnNumber]);
  v29[1] = v6;
  void v28[2] = @"completion-message";
  uint64_t v7 = [a1[6] message];
  id v8 = (void *)v7;
  CFStringRef v9 = &stru_1002E4F58;
  if (v7) {
    CFStringRef v9 = (const __CFString *)v7;
  }
  void v29[2] = v9;
  v28[3] = @"localized-completion-message";
  uint64_t v10 = [a1[6] localizableMessage];
  id v11 = (void *)v10;
  uint64_t v12 = &__NSDictionary0__struct;
  if (v10) {
    uint64_t v12 = (void *)v10;
  }
  void v29[3] = v12;
  void v28[4] = @"game-state";
  id v13 = [a1[6] matchData];
  id v14 = v13;
  if (!v13)
  {
    id v14 = +[NSData data];
  }
  void v29[4] = v14;
  void v28[5] = @"players";
  id v15 = [a1[6] participants];
  id v16 = [v15 _gkFilterWithBlock:&stru_1002D88E0];
  v28[6] = @"reason";
  void v29[5] = v16;
  v29[6] = @"Game Over";
  id v17 = +[NSDictionary dictionaryWithObjects:v29 forKeys:v28 count:7];

  if (!v13) {
  id v18 = +[GKNetworkRequestManager commonNetworkRequestManager];
  }
  id v19 = [a1[7] updateRequestWithPushToken:v17];
  id v20 = [a1[8] clientProxy];
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  void v22[2] = sub_1000A8BCC;
  v22[3] = &unk_1002D50A0;
  id v23 = a1[4];
  id v24 = v3;
  id v21 = v3;
  [v18 issueRequest:v19 bagKey:@"gk-tb-complete" clientProxy:v20 handler:v22];
}

void sub_1000A8A48(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) context];
  id v11 = +[GKTurnBasedSessionCacheObject sessionWithID:v2 inManagedObjectContext:v3];

  [v11 expire];
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = [*(id *)(a1 + 40) context];
  +[GKTurnBasedSessionListCacheObject expireListsForSessionID:v4 context:v5];

  id v6 = +[GKClientProxy gameCenterClient];
  uint64_t v7 = [v6 bundleIdentifier];
  id v8 = [*(id *)(a1 + 40) context];
  CFStringRef v9 = +[GKGameCacheObject gameForBundleID:v7 context:v8];
  uint64_t v10 = [v9 turnBasedSessionList];
  [v10 expire];
}

id sub_1000A8B70(id a1, GKTurnBasedParticipantInternal *a2, unint64_t a3)
{
  id v3 = a2;
  if ([(GKTurnBasedParticipantInternal *)v3 isAutomatchParticipant])
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = [(GKTurnBasedParticipantInternal *)v3 serverRepresentation];
  }

  return v4;
}

uint64_t sub_1000A8BCC(uint64_t a1)
{
  [*(id *)(a1 + 32) setError:];
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v2();
}

void sub_1000A8C10(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    goto LABEL_14;
  }
  uint64_t v2 = *(void **)(a1 + 40);
  id v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKTurnBasedService.m", 1297, "-[GKTurnBasedService completeTurnBasedMatch:scores:achievements:handler:]_block_invoke_5");
  uint64_t v4 = [v2 transactionGroupWithName:v3];

  id v5 = [*(id *)(a1 + 48) error];
  if (v5)
  {
  }
  else if ([*(id *)(a1 + 56) count])
  {
    id v6 = [*(id *)(a1 + 40) _requestForTurnBasedSubmitValues:*(void *)(a1 + 56) withServerLabel:@"scores" sessionID:*(void *)(a1 + 32)];
    if (v6)
    {
      uint64_t v7 = [*(id *)(a1 + 40) clientProxy];
      id v8 = [v7 replyQueue];
      v39[0] = _NSConcreteStackBlock;
      v39[1] = 3221225472;
      v39[2] = sub_1000A8FE4;
      void v39[3] = &unk_1002D3980;
      id v9 = v6;
      uint64_t v10 = *(void *)(a1 + 40);
      id v11 = *(void **)(a1 + 48);
      id v40 = v9;
      uint64_t v41 = v10;
      id v42 = v11;
      [v4 performOnQueue:v8 block:v39];
    }
  }
  uint64_t v12 = [*(id *)(a1 + 48) error];
  if (v12) {
    goto LABEL_12;
  }
  if ([*(id *)(a1 + 64) count])
  {
    uint64_t v12 = [*(id *)(a1 + 40) _requestForTurnBasedSubmitValues:*(void *)(a1 + 64) withServerLabel:@"achievement-ids" sessionID:*(void *)(a1 + 32)];
    if (v12)
    {
      id v13 = [*(id *)(a1 + 40) clientProxy];
      id v14 = [v13 replyQueue];
      v35[0] = _NSConcreteStackBlock;
      v35[1] = 3221225472;
      v35[2] = sub_1000A916C;
      void v35[3] = &unk_1002D3980;
      id v15 = v12;
      uint64_t v16 = *(void *)(a1 + 40);
      id v17 = *(void **)(a1 + 48);
      id v36 = v15;
      uint64_t v37 = v16;
      id v38 = v17;
      [v4 performOnQueue:v14 block:v35];
    }
LABEL_12:
  }
  id v18 = *(void **)(a1 + 48);
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472;
  void v32[2] = sub_1000A92F4;
  v32[3] = &unk_1002D3980;
  int8x16_t v26 = *(int8x16_t *)(a1 + 32);
  id v19 = (id)v26.i64[0];
  int8x16_t v33 = vextq_s8(v26, v26, 8uLL);
  id v34 = *(id *)(a1 + 48);
  [v18 perform:v32];
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472;
  void v31[2] = sub_1000A94BC;
  v31[3] = &unk_1002D4050;
  id v20 = *(void **)(a1 + 48);
  void v31[4] = *(void *)(a1 + 40);
  [v20 perform:v31];

LABEL_14:
  if (*(void *)(a1 + 72))
  {
    id v21 = *(void **)(a1 + 48);
    id v22 = [*(id *)(a1 + 40) clientProxy];
    id v23 = [v22 replyQueue];
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_1000A9564;
    void v27[3] = &unk_1002D48D8;
    id v30 = *(id *)(a1 + 72);
    id v24 = *(id *)(a1 + 48);
    uint64_t v25 = *(void *)(a1 + 40);
    id v28 = v24;
    uint64_t v29 = v25;
    [v21 notifyOnQueue:v23 block:v27];
  }
}

void sub_1000A8FE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[GKNetworkRequestManager commonNetworkRequestManager];
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = [*(id *)(a1 + 40) clientProxy];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000A90D8;
  void v8[3] = &unk_1002D50A0;
  id v9 = *(id *)(a1 + 48);
  id v10 = v3;
  id v7 = v3;
  [v4 issueRequest:v5 bagKey:@"gk-submit-session-scores" clientProxy:v6 handler:v8];
}

void sub_1000A90D8(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (v5)
  {
    id v6 = [*(id *)(a1 + 32) error];

    if (!v6) {
      [*(id *)(a1 + 32) setError:v5];
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000A916C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[GKNetworkRequestManager commonNetworkRequestManager];
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = [*(id *)(a1 + 40) clientProxy];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000A9260;
  void v8[3] = &unk_1002D50A0;
  id v9 = *(id *)(a1 + 48);
  id v10 = v3;
  id v7 = v3;
  [v4 issueRequest:v5 bagKey:@"gk-submit-session-achievements" clientProxy:v6 handler:v8];
}

void sub_1000A9260(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (v5)
  {
    id v6 = [*(id *)(a1 + 32) error];

    if (!v6) {
      [*(id *)(a1 + 32) setError:v5];
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000A92F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  id v5 = +[NSArray arrayWithObjects:&v10 count:1];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1000A9400;
  void v7[3] = &unk_1002D4F38;
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v6 = v3;
  [v4 getDetailsForTurnBasedMatchIDs:v5 includeGameData:1 handler:v7];
}

void sub_1000A9400(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if (v5)
  {
    id v6 = [*(id *)(a1 + 32) error];

    if (!v6) {
      [*(id *)(a1 + 32) setError:v5];
    }
  }
  id v7 = [v8 lastObject];
  [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:@"result"];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000A94BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1000A9554;
  void v6[3] = &unk_1002D4F88;
  id v7 = v3;
  id v5 = v3;
  [v4 getTurnBasedMatchesWithHandler:v6];
}

uint64_t sub_1000A9554(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000A9564(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  id v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"result"];
  uint64_t v4 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, v3, v4);

  id v5 = [*(id *)(a1 + 40) clientProxy];
  [v5 refreshContentsForDataType:14 userInfo:0];
}

void sub_1000A994C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) context];
  id v6 = +[GKTurnBasedSessionCacheObject sessionWithID:v2 inManagedObjectContext:v3];

  [v6 expire];
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = [*(id *)(a1 + 40) context];
  +[GKTurnBasedSessionListCacheObject expireListsForSessionID:v4 context:v5];
}

void sub_1000A99F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  v19[0] = @"session-id";
  uint64_t v4 = [*(id *)(a1 + 32) matchID];
  uint64_t v5 = *(void *)(a1 + 40);
  v20[0] = v4;
  v20[1] = v5;
  v19[1] = @"participants";
  void v19[2] = @"message-timeout";
  uint64_t v6 = +[NSNumber _gkServerTimeInterval:*(double *)(a1 + 88)];
  id v7 = (void *)v6;
  id v8 = &__NSDictionary0__struct;
  id v9 = *(void **)(a1 + 56);
  if (*(void *)(a1 + 48)) {
    id v8 = *(void **)(a1 + 48);
  }
  void v20[2] = v6;
  v20[3] = v8;
  void v19[3] = @"notification-message";
  void v19[4] = @"data";
  uint64_t v10 = v9;
  if (!v9)
  {
    uint64_t v10 = +[NSData data];
  }
  void v20[4] = v10;
  id v11 = +[NSDictionary dictionaryWithObjects:v20 forKeys:v19 count:5];
  if (!v9) {

  }
  uint64_t v12 = +[GKNetworkRequestManager commonNetworkRequestManager];
  id v13 = [*(id *)(a1 + 64) updateRequestWithPushToken:v11];
  id v14 = [*(id *)(a1 + 72) clientProxy];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  void v16[2] = sub_1000A9C08;
  void v16[3] = &unk_1002D50A0;
  id v17 = *(id *)(a1 + 80);
  id v18 = v3;
  id v15 = v3;
  [v12 issueRequest:v13 bagKey:@"gk-tb-send-request" clientProxy:v14 handler:v16];
}

uint64_t sub_1000A9C08(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = [a2 objectForKey:@"request-id"];
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:@"exchangeID"];

  [*(id *)(a1 + 32) setError:v5];
  id v7 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v7();
}

void sub_1000A9C98(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"exchangeID"];
  id v3 = (void *)v2;
  uint64_t v4 = *(void **)(a1 + 40);
  if (v4) {
    BOOL v5 = v2 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v6 = *(void **)(a1 + 32);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    void v18[2] = sub_1000A9E90;
    void v18[3] = &unk_1002D48B0;
    void v18[4] = *(void *)(a1 + 48);
    id v19 = v4;
    id v20 = *(id *)(a1 + 32);
    id v21 = v3;
    [v6 perform:v18];
  }
  id v7 = *(void **)(a1 + 32);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  void v17[2] = sub_1000AA07C;
  void v17[3] = &unk_1002D4050;
  void v17[4] = *(void *)(a1 + 48);
  [v7 perform:v17];
  if (*(void *)(a1 + 56))
  {
    id v8 = *(void **)(a1 + 32);
    id v9 = [*(id *)(a1 + 48) clientProxy];
    uint64_t v10 = [v9 replyQueue];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1000AA124;
    void v13[3] = &unk_1002D48D8;
    id v16 = *(id *)(a1 + 56);
    id v11 = *(id *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 48);
    id v14 = v11;
    uint64_t v15 = v12;
    [v8 notifyOnQueue:v10 block:v13];
  }
}

void sub_1000A9E90(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  BOOL v5 = +[NSArray arrayWithObjects:&v11 count:1];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1000A9FB0;
  void v7[3] = &unk_1002D53D8;
  id v8 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  id v10 = v3;
  id v6 = v3;
  [v4 getDetailsForTurnBasedMatchIDs:v5 includeGameData:1 handler:v7];
}

void sub_1000A9FB0(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if (v5)
  {
    id v6 = [*(id *)(a1 + 32) error];

    if (!v6) {
      [*(id *)(a1 + 32) setError:v5];
    }
  }
  id v7 = [v8 lastObject];
  [*(id *)(a1 + 32) setObject:*(void *)(a1 + 40) forKeyedSubscript:@"exchangeID"];
  [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:@"match"];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1000AA07C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1000AA114;
  void v6[3] = &unk_1002D4F88;
  id v7 = v3;
  id v5 = v3;
  [v4 getTurnBasedMatchesWithHandler:v6];
}

uint64_t sub_1000AA114(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000AA124(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  id v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"exchangeID"];
  uint64_t v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"match"];
  id v5 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, void *, void *, void *))(v2 + 16))(v2, v3, v4, v5);

  id v6 = [*(id *)(a1 + 40) clientProxy];
  [v6 refreshContentsForDataType:14 userInfo:0];
}

void sub_1000AA498(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) context];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1000AA628;
  void v13[3] = &unk_1002D3B38;
  id v14 = *(id *)(a1 + 40);
  id v15 = *(id *)(a1 + 32);
  [v4 performBlockAndWait:v13];

  id v5 = +[GKNetworkRequestManager commonNetworkRequestManager];
  id v6 = [*(id *)(a1 + 48) updateRequestWithPushToken:*(void *)(a1 + 56)];
  uint64_t v7 = *(void *)(a1 + 64);
  id v8 = [*(id *)(a1 + 72) clientProxy];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_1000AA6D4;
  v10[3] = &unk_1002D50A0;
  id v11 = *(id *)(a1 + 32);
  id v12 = v3;
  id v9 = v3;
  [v5 issueRequest:v6 bagKey:v7 clientProxy:v8 handler:v10];
}

void sub_1000AA628(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) context];
  id v6 = +[GKTurnBasedSessionCacheObject sessionWithID:v2 inManagedObjectContext:v3];

  [v6 expire];
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = [*(id *)(a1 + 40) context];
  +[GKTurnBasedSessionListCacheObject expireListsForSessionID:v4 context:v5];
}

uint64_t sub_1000AA6D4(uint64_t a1)
{
  [*(id *)(a1 + 32) setError:];
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v2();
}

void sub_1000AA718(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    void v15[2] = sub_1000AA8DC;
    v15[3] = &unk_1002D48B0;
    id v3 = *(void **)(a1 + 40);
    void v15[4] = *(void *)(a1 + 48);
    id v16 = v2;
    id v17 = *(id *)(a1 + 40);
    id v18 = *(id *)(a1 + 56);
    [v3 perform:v15];
  }
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  void v14[2] = sub_1000AAAC8;
  void v14[3] = &unk_1002D4050;
  uint64_t v4 = *(void **)(a1 + 40);
  void v14[4] = *(void *)(a1 + 48);
  [v4 perform:v14];
  if (*(void *)(a1 + 64))
  {
    id v5 = *(void **)(a1 + 40);
    id v6 = [*(id *)(a1 + 48) clientProxy];
    uint64_t v7 = [v6 replyQueue];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1000AAB70;
    v10[3] = &unk_1002D48D8;
    id v13 = *(id *)(a1 + 64);
    id v8 = *(id *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48);
    id v11 = v8;
    uint64_t v12 = v9;
    [v5 notifyOnQueue:v7 block:v10];
  }
}

void sub_1000AA8DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  id v5 = +[NSArray arrayWithObjects:&v11 count:1];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1000AA9FC;
  void v7[3] = &unk_1002D53D8;
  id v8 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  id v10 = v3;
  id v6 = v3;
  [v4 getDetailsForTurnBasedMatchIDs:v5 includeGameData:1 handler:v7];
}

void sub_1000AA9FC(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if (v5)
  {
    id v6 = [*(id *)(a1 + 32) error];

    if (!v6) {
      [*(id *)(a1 + 32) setError:v5];
    }
  }
  uint64_t v7 = [v8 lastObject];
  [*(id *)(a1 + 32) setObject:*(void *)(a1 + 40) forKeyedSubscript:@"exchangeID"];
  [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:@"match"];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1000AAAC8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1000AAB60;
  void v6[3] = &unk_1002D4F88;
  id v7 = v3;
  id v5 = v3;
  [v4 getTurnBasedMatchesWithHandler:v6];
}

uint64_t sub_1000AAB60(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000AAB70(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  id v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"match"];
  uint64_t v4 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, v3, v4);

  id v5 = [*(id *)(a1 + 40) clientProxy];
  [v5 refreshContentsForDataType:14 userInfo:0];
}

void sub_1000AB420(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[GKNetworkRequestManager commonNetworkRequestManager];
  id v5 = [*(id *)(a1 + 32) updateRequestWithPushToken:*(void *)(a1 + 40)];
  id v6 = [*(id *)(a1 + 48) clientProxy];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000AB528;
  void v8[3] = &unk_1002D50A0;
  id v9 = *(id *)(a1 + 56);
  id v10 = v3;
  id v7 = v3;
  [v4 issueRequest:v5 bagKey:@"gk-tb-reminder" clientProxy:v6 handler:v8];
}

uint64_t sub_1000AB528(uint64_t a1)
{
  [*(id *)(a1 + 32) setError:];
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v2();
}

void sub_1000AB56C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1000AB9C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) share];
  id v5 = [v4 recordID];
  id v6 = v5;
  if (v5)
  {
    id v7 = v5;
  }
  else
  {
    id v8 = objc_alloc((Class)CKRecordID);
    id v9 = [*(id *)(a1 + 32) recordID];
    id v10 = [v9 recordName];
    uint64_t v11 = +[NSString stringWithFormat:@"%@%@", @"share", v10];
    uint64_t v12 = [*(id *)(a1 + 32) recordID];
    id v13 = [v12 zoneID];
    id v7 = [v8 initWithRecordName:v11 zoneID:v13];
  }
  id v14 = +[GKService serviceFromService:*(void *)(a1 + 40)];
  uint64_t v15 = *(void *)(a1 + 32);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  void v17[2] = sub_1000ABB88;
  void v17[3] = &unk_1002D8908;
  id v18 = *(id *)(a1 + 48);
  id v19 = v3;
  id v16 = v3;
  [v14 setupInviteShareWithRecordID:v7 rootRecord:v15 handler:v17];
}

uint64_t sub_1000ABB88(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = [a2 URL];
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:@"url"];

  [*(id *)(a1 + 32) setError:v5];
  id v7 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v7();
}

void sub_1000ABC10(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"url"];
    id v3 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, id, void *))(v1 + 16))(v1, v4, v3);
  }
}

void sub_1000ABEF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  v37[0] = @"session-id";
  id v4 = [*(id *)(a1 + 32) matchID];
  v38[0] = v4;
  v37[1] = @"num-reservations";
  id v5 = +[NSNumber numberWithInteger:*(void *)(a1 + 72)];
  v38[1] = v5;
  void v37[2] = @"min-players";
  id v6 = +[NSNumber numberWithInteger:*(void *)(a1 + 80)];
  void v38[2] = v6;
  void v37[3] = @"max-players";
  id v7 = +[NSNumber numberWithInteger:*(void *)(a1 + 88)];
  v38[3] = v7;
  id v8 = +[NSDictionary dictionaryWithObjects:v38 forKeys:v37 count:4];
  id v9 = +[NSMutableDictionary dictionaryWithDictionary:v8];

  if ([*(id *)(a1 + 40) count])
  {
    uint64_t v25 = v9;
    id v26 = v3;
    id v10 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [*(id *)(a1 + 40) count]);
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    id v11 = *(id *)(a1 + 40);
    id v12 = [v11 countByEnumeratingWithState:&v30 objects:v36 count:16];
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = *(void *)v31;
      do
      {
        uint64_t v15 = 0;
        do
        {
          if (*(void *)v31 != v14) {
            objc_enumerationMutation(v11);
          }
          uint64_t v16 = *(void *)(*((void *)&v30 + 1) + 8 * (void)v15);
          CFStringRef v34 = @"player-id";
          uint64_t v35 = v16;
          id v17 = +[NSDictionary dictionaryWithObjects:&v35 forKeys:&v34 count:1];
          id v18 = +[NSMutableDictionary dictionaryWithDictionary:v17];

          uint64_t v19 = *(void *)(a1 + 48);
          if (v19) {
            [v18 setObject:v19 forKeyedSubscript:@"invite-message"];
          }
          [v10 addObject:v18];

          uint64_t v15 = (char *)v15 + 1;
        }
        while (v13 != v15);
        id v13 = [v11 countByEnumeratingWithState:&v30 objects:v36 count:16];
      }
      while (v13);
    }

    id v9 = v25;
    [v25 setObject:v10 forKeyedSubscript:@"invites"];

    id v3 = v26;
  }
  id v20 = +[GKNetworkRequestManager commonNetworkRequestManager];
  id v21 = +[GKDataRequestManager sharedManager];
  id v22 = [v21 updateRequestWithPushToken:v9];
  id v23 = [*(id *)(a1 + 56) clientProxy];
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_1000AC28C;
  void v27[3] = &unk_1002D50A0;
  id v28 = *(id *)(a1 + 64);
  id v29 = v3;
  id v24 = v3;
  [v20 issueRequest:v22 bagKey:@"gk-tb-reserve-slots" clientProxy:v23 handler:v27];
}

uint64_t sub_1000AC28C(uint64_t a1)
{
  [*(id *)(a1 + 32) setError:];
  id v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v2();
}

void sub_1000AC2D0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }
}

void sub_1000AC530(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  id v6 = v5;
  if ([v5 code] == (id)2)
  {
    id v7 = [v5 userInfo];
    id v8 = [v7 objectForKeyedSubscript:CKPartialErrorsByItemIDKey];

    id v9 = [*(id *)(a1 + 32) recordID];
    id v6 = [v8 objectForKeyedSubscript:v9];
  }
  if ([v6 code] == (id)26)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1000AC6B0;
    void v13[3] = &unk_1002D3DD0;
    int8x16_t v12 = *(int8x16_t *)(a1 + 32);
    id v10 = (id)v12.i64[0];
    int8x16_t v14 = vextq_s8(v12, v12, 8uLL);
    id v15 = *(id *)(a1 + 48);
    +[GKCloudKitMultiplayerUtils createZoneWithName:@"com.apple.legacygaming.invites" handler:v13];
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 48);
    if (v11) {
      (*(void (**)(uint64_t, void, void *))(v11 + 16))(v11, *(void *)(a1 + 32), v6);
    }
  }
}

id *sub_1000AC6B0(id *result, uint64_t a2)
{
  if (!a2) {
    return (id *)[result[4] saveRecord:result[5] withHandler:result[6]];
  }
  return result;
}

void sub_1000AC968(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1000AC990(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) clientProxy];
  id v3 = [v2 bundleIdentifier];
  id v4 = [*(id *)(a1 + 40) context];
  id v9 = +[GKGameCacheObject gameForBundleID:v3 context:v4];

  [*(id *)(a1 + 40) setObject:v9 forKeyedSubscript:@"game"];
  id v5 = [v9 turnBasedSessionList];
  if ([v5 isValid])
  {
    id v6 = +[GKBadgeController sharedController];
    id v7 = [*(id *)(a1 + 32) clientProxy];
    id v8 = [v7 bundleIdentifier];
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v6 badgeCountForBundleID:v8 badgeType:2];

    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v5 expired];
  }
}

void sub_1000ACAD0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = [*(id *)(a1 + 48) context];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_1000ACBD0;
  v11[3] = &unk_1002D89D0;
  id v12 = *(id *)(a1 + 48);
  id v7 = *(id *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 32);
  id v13 = v7;
  uint64_t v14 = v9;
  id v15 = v3;
  uint64_t v16 = v8;
  id v10 = v3;
  [v4 loadTurnBasedMatchesForGame:v5 loadDetails:0 prefetchOnly:1 context:v6 handler:v11];
}

void sub_1000ACBD0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) context];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_1000ACCC4;
  v9[3] = &unk_1002D89A8;
  id v10 = *(id *)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 48);
  id v11 = v5;
  uint64_t v12 = v7;
  id v13 = v3;
  uint64_t v14 = v6;
  id v8 = v3;
  [v4 performBlockAndWait:v9];

  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

id sub_1000ACCC4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) context];
  [v2 refreshObject:*(void *)(a1 + 40) mergeChanges:1];

  id v3 = +[GKBadgeController sharedController];
  id v4 = [*(id *)(a1 + 48) clientProxy];
  id v5 = [v4 bundleIdentifier];
  *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [v3 badgeCountForBundleID:v5 badgeType:2];

  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void **)(a1 + 32);

  return [v7 setError:v6];
}

void sub_1000ACD7C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
  id v4 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, uint64_t, void *))(v2 + 16))(v2, v3, v4);

  id v5 = [*(id *)(a1 + 40) clientProxy];
  [v5 refreshContentsForDataType:14 userInfo:0];
}

void sub_1000AD0D4(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "_determineCompatibleGamesForMatches:dispatchGroup: Missing bundleID for match %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000AD14C(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "_determineCompatibleGamesForMatches:dispatchGroup: Missing bundleVersion for match %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000AD1C4(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "getDetailsForTurnBasedMatchIDs:Failed to Load Details for TBG Match ID.Error: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000AD908(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) clientProxy];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, [v2 isAppUnlistedAndDisallowed]);
}

void sub_1000ADCD0(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 40) clientProxy];
  uint64_t v3 = [v2 verifyAuthorized];

  id v4 = *(id **)(a1 + 32);
  if (v3)
  {
    id v5 = [v4 clientProxy];
    uint64_t v6 = [v5 replyQueue];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    void v7[2] = sub_1000ADDDC;
    void v7[3] = &unk_1002D3930;
    id v9 = *(id *)(a1 + 40);
    id v8 = v3;
    dispatch_async(v6, v7);
  }
  else
  {
    [v4[5] generateIdentityVerificationSignatureWithCompletionHandler:*(void *)(a1 + 40)];
  }
}

uint64_t sub_1000ADDDC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

void sub_1000ADFCC(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 40) clientProxy];
  uint64_t v3 = [v2 verifyAuthorized];

  id v4 = *(id **)(a1 + 32);
  if (v3)
  {
    id v5 = [v4 clientProxy];
    uint64_t v6 = [v5 replyQueue];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    void v7[2] = sub_1000AE0D8;
    void v7[3] = &unk_1002D3930;
    id v9 = *(id *)(a1 + 40);
    id v8 = v3;
    dispatch_async(v6, v7);
  }
  else
  {
    [v4[5] fetchItemsForIdentityVerificationSignature:*(void *)(a1 + 40)];
  }
}

uint64_t sub_1000AE0D8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

void sub_1000AE534(uint64_t a1)
{
  id v2 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKAuthenticationWrapperService.m", 161, "-[GKAuthenticationWrapperService signOutPlayerWithOptOut:handler:]_block_invoke");
  uint64_t v3 = +[GKDispatchGroup dispatchGroupWithName:v2];

  id v4 = +[NSError userErrorForCode:7 underlyingError:0];
  [v3 setError:v4];

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_1000AE704;
  v11[3] = &unk_1002D8A20;
  void v11[4] = *(void *)(a1 + 32);
  char v13 = *(unsigned char *)(a1 + 48);
  id v5 = v3;
  id v12 = v5;
  [v5 perform:v11];
  [v5 wait];
  if (*(void *)(a1 + 40))
  {
    uint64_t v6 = [*(id *)(a1 + 32) clientProxy];
    uint64_t v7 = [v6 replyQueue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000AE814;
    block[3] = &unk_1002D3930;
    id v10 = *(id *)(a1 + 40);
    id v9 = v5;
    dispatch_async(v7, block);
  }
}

void sub_1000AE704(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(*(void *)(a1 + 32) + 40);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1000AE7CC;
  void v7[3] = &unk_1002D3BC8;
  id v8 = *(id *)(a1 + 40);
  id v9 = v3;
  id v6 = v3;
  [v4 signOutPlayerWithOptOut:v5 handler:v7];
}

uint64_t sub_1000AE7CC(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setError:a2];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_1000AE814(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t sub_1000AEA5C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000AEC98(uint64_t a1)
{
  id v2 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKAuthenticationWrapperService.m", 209, "-[GKAuthenticationWrapperService authenticateWithService:username:password:altDSID:isGame:usingFastPath:displayAuthUI:handler:]_block_invoke");
  id v3 = +[GKDispatchGroup dispatchGroupWithName:v2];

  id v4 = +[NSError userErrorForCode:7 underlyingError:0];
  [v3 setError:v4];

  uint64_t v5 = [*(id *)(a1 + 32) clientProxy];
  id v6 = [v5 appInitState];
  unsigned int v7 = [v6 isEqual:@"GKAppInitialized"];

  if (v7)
  {
    id v8 = v22;
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    id v9 = sub_1000AEFA0;
  }
  else
  {
    id v10 = [*(id *)(a1 + 32) clientProxy];
    id v11 = [v10 appInitState];
    if ([v11 isEqual:@"GKAppInitInProgress"])
    {
    }
    else
    {
      id v12 = [*(id *)(a1 + 32) clientProxy];
      unsigned int v13 = [v12 setAppInitState:@"GKAppInitInProgress"];

      if (!v13) {
        goto LABEL_8;
      }
    }
    id v8 = v21;
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    id v9 = sub_1000AF0F4;
  }
  v8[2] = v9;
  void v8[3] = &unk_1002D8A48;
  void v8[4] = *(id *)(a1 + 32);
  void v8[5] = *(id *)(a1 + 40);
  v8[6] = *(id *)(a1 + 48);
  v8[7] = *(id *)(a1 + 56);
  *((_WORD *)v8 + 36) = *(_WORD *)(a1 + 88);
  id v14 = v3;
  v8[8] = v14;
  [v14 perform:v8];

LABEL_8:
  [v3 wait];
  if (*(void *)(a1 + 72))
  {
    id v15 = [*(id *)(a1 + 64) clientProxy];
    uint64_t v16 = [v15 replyQueue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000AF3B0;
    block[3] = &unk_1002D8A98;
    uint64_t v20 = *(void *)(a1 + 80);
    id v19 = *(id *)(a1 + 72);
    id v18 = v3;
    dispatch_async(v16, block);
  }
}

void sub_1000AEFA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 72);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 73);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_1000AF084;
  v11[3] = &unk_1002D4810;
  id v12 = *(id *)(a1 + 64);
  id v13 = v3;
  id v10 = v3;
  [v4 authenticatePlayerWithUsername:v5 password:v6 altDSID:v7 isGame:v8 usingFastPath:v9 handler:v11];
}

uint64_t sub_1000AF084(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setResult:a2];
  [*(id *)(a1 + 32) setError:v6];

  uint64_t v7 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v7();
}

void sub_1000AF0F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 72);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 73);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1000AF200;
  void v13[3] = &unk_1002D8A70;
  id v14 = v5;
  id v11 = *(id *)(a1 + 64);
  CFAbsoluteTime v17 = Current;
  id v15 = v11;
  id v16 = v3;
  id v12 = v3;
  [v14 authenticatePlayerWithUsername:v6 password:v7 altDSID:v8 isGame:v9 usingFastPath:v10 handler:v13];
}

void sub_1000AF200(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = [*(id *)(a1 + 32) clientProxy];
  uint64_t v8 = [v7 appInitState];

  if (!v6 && v8 != @"GKAppInitialized")
  {
    if (!os_log_GKGeneral) {
      id v9 = (id)GKOSLoggers();
    }
    uint64_t v10 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "wrapper app-init state not set, returning not-authenticated", v15, 2u);
    }
    if (!os_log_GKGeneral) {
      id v11 = (id)GKOSLoggers();
    }
    id v12 = os_log_GKAccount;
    if (os_log_type_enabled(os_log_GKAccount, OS_LOG_TYPE_ERROR)) {
      sub_1000B2DA4(v12);
    }
    id v6 = +[NSError userErrorForCode:6 underlyingError:0];
  }
  [*(id *)(a1 + 40) setResult:v5];
  [*(id *)(a1 + 40) setError:v6];
  if (!os_log_GKGeneral) {
    id v13 = (id)GKOSLoggers();
  }
  id v14 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG)) {
    sub_1000B2D0C(v14);
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1000AF3B0(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers();
  }
  id v3 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG)) {
    sub_1000B2DE8(v3);
  }
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = [*(id *)(a1 + 32) result];
  id v6 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, void *, void *))(v4 + 16))(v4, v5, v6);
}

uint64_t sub_1000AFAAC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000B18BC(uint64_t a1)
{
  id v2 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKAuthenticationWrapperService.m", 526, "-[GKAuthenticationWrapperService accountCreated:playerID:authenticationToken:alias:finished:handler:]_block_invoke");
  id v3 = +[GKDispatchGroup dispatchGroupWithName:v2];

  uint64_t v4 = +[NSError userErrorForCode:7 underlyingError:0];
  [v3 setError:v4];

  id v5 = [*(id *)(*(void *)(a1 + 32) + 40) clientProxy];
  [v5 setAppInitState:@"GKAppInitInProgress"];

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1000B1B00;
  void v13[3] = &unk_1002D62C8;
  id v6 = *(void **)(a1 + 40);
  void v13[4] = *(void *)(a1 + 32);
  id v14 = v6;
  id v15 = *(id *)(a1 + 48);
  id v16 = *(id *)(a1 + 56);
  id v17 = *(id *)(a1 + 64);
  char v19 = *(unsigned char *)(a1 + 80);
  id v7 = v3;
  id v18 = v7;
  [v7 perform:v13];
  if (*(void *)(a1 + 72))
  {
    uint64_t v8 = [*(id *)(a1 + 32) clientProxy];
    id v9 = [v8 replyQueue];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1000B1C5C;
    v10[3] = &unk_1002D3930;
    id v12 = *(id *)(a1 + 72);
    id v11 = v7;
    [v11 notifyOnQueue:v9 block:v10];
  }
}

void sub_1000B1B00(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = *(void **)(*(void *)(a1 + 32) + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 80);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_1000B1BEC;
  v11[3] = &unk_1002D4810;
  uint64_t v9 = *(void *)(a1 + 64);
  id v12 = *(id *)(a1 + 72);
  id v13 = v3;
  id v10 = v3;
  [v5 accountCreated:v4 playerID:v6 authenticationToken:v7 alias:v9 finished:v8 handler:v11];
}

uint64_t sub_1000B1BEC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setResult:a2];
  [*(id *)(a1 + 32) setError:v6];

  uint64_t v7 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v7();
}

void sub_1000B1C5C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_1000B1F98(uint64_t a1)
{
  uint64_t v2 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKAuthenticationWrapperService.m", 561, "-[GKAuthenticationWrapperService accountCreated:playerID:authenticationToken:alias:altDSID:finished:handler:]_block_invoke");
  id v3 = +[GKDispatchGroup dispatchGroupWithName:v2];

  id v4 = +[NSError userErrorForCode:7 underlyingError:0];
  [v3 setError:v4];

  id v5 = [*(id *)(*(void *)(a1 + 32) + 40) clientProxy];
  [v5 setAppInitState:@"GKAppInitInProgress"];

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1000B21F0;
  void v13[3] = &unk_1002D8B10;
  id v6 = *(void **)(a1 + 40);
  void v13[4] = *(void *)(a1 + 32);
  id v14 = v6;
  id v15 = *(id *)(a1 + 48);
  id v16 = *(id *)(a1 + 56);
  id v17 = *(id *)(a1 + 64);
  id v18 = *(id *)(a1 + 72);
  char v20 = *(unsigned char *)(a1 + 88);
  id v7 = v3;
  id v19 = v7;
  [v7 perform:v13];
  if (*(void *)(a1 + 80))
  {
    uint64_t v8 = [*(id *)(a1 + 32) clientProxy];
    uint64_t v9 = [v8 replyQueue];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1000B235C;
    v10[3] = &unk_1002D3930;
    id v12 = *(id *)(a1 + 80);
    id v11 = v7;
    [v11 notifyOnQueue:v9 block:v10];
  }
}

void sub_1000B21F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = *(void **)(*(void *)(a1 + 32) + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 72);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 88);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_1000B22EC;
  void v12[3] = &unk_1002D4810;
  id v13 = *(id *)(a1 + 80);
  id v14 = v3;
  id v11 = v3;
  [v5 accountCreated:v4 playerID:v6 authenticationToken:v7 alias:v8 altDSID:v9 finished:v10 handler:v12];
}

uint64_t sub_1000B22EC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setResult:a2];
  [*(id *)(a1 + 32) setError:v6];

  uint64_t v7 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v7();
}

void sub_1000B235C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

uint64_t sub_1000B260C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1000B2804(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000B2BA8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 40) clientProxy];
  id v3 = [v2 verifyAuthorized];

  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    id v5 = os_log_GKAccount;
    if (os_log_type_enabled(os_log_GKAccount, OS_LOG_TYPE_ERROR)) {
      sub_1000B2E80((uint64_t)v3, v5);
    }
    id v6 = [*(id *)(a1 + 40) _gkReplyHandlerInvocation];
    uint64_t v7 = [*(id *)(a1 + 32) clientProxy];
    uint64_t v8 = [v7 replyQueue];
    [v6 _gkCallbackWithError:v3 queue:v8];
  }
  else
  {
    [*(id *)(a1 + 40) invokeWithTarget:*(void *)(*(void *)(a1 + 32) + 40)];
  }
}

void sub_1000B2D0C(void *a1)
{
  id v1 = a1;
  CFAbsoluteTimeGetCurrent();
  sub_100011070();
  sub_100011B0C((void *)&_mh_execute_header, v2, v3, "%s elapsed seconds:%g", v4, v5, v6, v7, 2u);
}

void sub_1000B2DA4(os_log_t log)
{
  *(_WORD *)id v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "AppInit state is not set, returning not-authenticated error", v1, 2u);
}

void sub_1000B2DE8(void *a1)
{
  id v1 = a1;
  CFAbsoluteTimeGetCurrent();
  sub_100011070();
  sub_100011B0C((void *)&_mh_execute_header, v2, v3, "%s elapsed seconds:%g", v4, v5, v6, v7, 2u);
}

void sub_1000B2E80(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "verifyAuthorized failed, we might be authenticating or authorizing: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000B3720(uint64_t a1, void *a2)
{
  [a2 _gkMapDictionaryWithKeyPath:@"playerID"];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000B37F4;
  void v8[3] = &unk_1002D8B60;
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v3 = *(void **)(a1 + 32);
  id v10 = *(id *)(a1 + 40);
  id v4 = v9;
  [v3 enumerateObjectsUsingBlock:v8];
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), v5, v6, v7);
}

void sub_1000B37F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 player];
  uint64_t v5 = [v4 playerID];

  if (!v5)
  {
LABEL_9:
    id v7 = *(id *)(a1 + 40);
    goto LABEL_10;
  }
  uint64_t v6 = [*(id *)(a1 + 32) objectForKeyedSubscript:v5];
  id v7 = v6;
  if (!v6
    || ([v6 displayNameWithOptions:0],
        uint64_t v8 = objc_claimAutoreleasedReturnValue(),
        id v9 = [v8 length],
        v8,
        !v9))
  {
    id v10 = os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      id v11 = (id)GKOSLoggers();
      id v10 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
      sub_1000B58D0((uint64_t)v5, (uint64_t)v3, v10);
    }

    goto LABEL_9;
  }
LABEL_10:
  [v3 setPlayer:v7];
}

void sub_1000B3F38(id *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a3;
  uint64_t v6 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:a2];
  if (a1[4])
  {
    id v7 = [a1[5] leaderboardForServerRepresentations:];
    uint64_t v8 = [a1[4] objectForKeyedSubscript:@"results"];
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    void v19[2] = sub_1000B4164;
    void v19[3] = &unk_1002D8B88;
    void v19[4] = a1[5];
    id v9 = v7;
    id v20 = v9;
    id v10 = [v8 _gkMapWithBlock:v19];
    [v9 setScores:v10];

    id v11 = [a1[4] objectForKeyedSubscript:@"player-score"];
    if ([v11 count])
    {
      id v12 = [a1[5] scoreForServerRepresentation:v11 leaderboard:v9];
      id v13 = [v6 internalRepresentation];
      [v12 setPlayer:v13];

      [v9 setPlayerScore:v12];
    }
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    void v16[2] = sub_1000B4174;
    void v16[3] = &unk_1002D3980;
    id v14 = a1[6];
    void v16[4] = a1[5];
    id v17 = v9;
    id v18 = a1[7];
    id v15 = v9;
    [v14 perform:v16];
    [a1[6] setResult:v15];
  }
  v5[2](v5);
}

id sub_1000B4164(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) scoreForServerRepresentation:a2 leaderboard:*(void *)(a1 + 40)];
}

void sub_1000B4174(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000B4220;
  void v8[3] = &unk_1002D3A20;
  id v9 = v3;
  id v7 = v3;
  [v4 updatePlayersForLeaderboard:v5 service:v6 handler:v8];
}

uint64_t sub_1000B4220(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000B4230(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) result];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1000B449C(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = +[GKNetworkRequestManager commonNetworkRequestManager];
  uint64_t v5 = [a1[4] serverRequestWithService:a1[5]];
  uint64_t v6 = [a1[4] bagKey];
  id v7 = [a1[5] clientProxy];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_1000B45DC;
  void v12[3] = &unk_1002D7278;
  id v8 = a1[6];
  id v9 = a1[4];
  id v10 = a1[5];
  id v13 = v8;
  id v14 = v9;
  id v15 = v10;
  id v16 = a1[7];
  id v17 = v3;
  id v11 = v3;
  [v4 issueRequest:v5 bagKey:v6 clientProxy:v7 handler:v12];
}

void sub_1000B45DC(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7 = a2;
  [*(id *)(a1 + 32) setError:a3];
  if (v7 && !a3)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1000B46F4;
    void v13[3] = &unk_1002D75A8;
    id v12 = *(void **)(a1 + 32);
    void v13[4] = *(void *)(a1 + 40);
    id v14 = v7;
    id v15 = *(id *)(a1 + 48);
    id v16 = *(id *)(a1 + 56);
    double v18 = a4;
    id v17 = *(id *)(a1 + 32);
    [v12 perform:v13];
  }
  (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 64) + 16))(*(void *)(a1 + 64), v8, v9, v10, v11);
}

void sub_1000B46F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  double v8 = *(double *)(a1 + 72);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_1000B47D0;
  v10[3] = &unk_1002D8BB0;
  id v11 = *(id *)(a1 + 64);
  id v12 = v3;
  id v9 = v3;
  [v4 generateScoresFromServerResponse:v5 service:v6 context:v7 timeToLive:v10 handler:v8];
}

uint64_t sub_1000B47D0(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setResult:a2];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_1000B4818(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

NSString *__cdecl sub_1000B4B0C(id a1, GKPlayerInternal *a2, unint64_t a3)
{
  return (NSString *)[(GKPlayerInternal *)a2 playerID];
}

void sub_1000B4D1C(id *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a3;
  uint64_t v6 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:a2];
  uint64_t v7 = [v6 internalRepresentation];
  double v8 = [a1[4] leaderboardForServerRepresentations:a1[5]];
  id v9 = [a1[5] objectForKeyedSubscript:@"results"];
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_1000B4FF0;
  void v27[3] = &unk_1002D8BF8;
  void v27[4] = a1[4];
  id v10 = v8;
  id v28 = v10;
  id v11 = [v9 _gkMapWithBlock:v27];
  id v12 = [v11 _gkMapDictionaryWithKeyPath:@"player.playerID"];
  id v13 = [a1[4] playerInternals];
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_1000B5000;
  void v25[3] = &unk_1002D8C20;
  id v14 = v12;
  id v26 = v14;
  id v15 = [v13 _gkFilterWithBlock:v25];
  [v10 setScores:v15];

  id v16 = [v7 playerID];

  if (v16)
  {
    id v17 = [v7 playerID];
    double v18 = [v14 objectForKeyedSubscript:v17];
    [v10 setPlayerScore:v18];

    id v19 = [v10 playerScore];
    [v19 setPlayer:v7];
  }
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  void v22[2] = sub_1000B505C;
  v22[3] = &unk_1002D3980;
  void v22[4] = a1[4];
  id v23 = v10;
  id v20 = a1[6];
  id v24 = a1[7];
  id v21 = v10;
  [v20 perform:v22];
  [a1[6] setResult:v21];
  v5[2](v5);
}

id sub_1000B4FF0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) scoreForServerRepresentation:a2 leaderboard:*(void *)(a1 + 40)];
}

id sub_1000B5000(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [a2 playerID];
  id v4 = [v2 objectForKeyedSubscript:v3];

  return v4;
}

void sub_1000B505C(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000B5108;
  void v8[3] = &unk_1002D3A20;
  id v9 = v3;
  id v7 = v3;
  [v4 updatePlayersForLeaderboard:v5 service:v6 handler:v8];
}

uint64_t sub_1000B5108(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000B5118(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) result];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1000B539C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[GKNetworkRequestManager commonNetworkRequestManager];
  uint64_t v5 = [*(id *)(a1 + 32) serverRequestWithService:*(void *)(a1 + 40)];
  uint64_t v6 = [*(id *)(a1 + 32) bagKey];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_1000B54C8;
  void v12[3] = &unk_1002D7278;
  uint64_t v7 = *(void *)(a1 + 48);
  id v8 = *(id *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 32);
  id v10 = *(void **)(a1 + 40);
  id v13 = v8;
  uint64_t v14 = v9;
  id v15 = v10;
  id v16 = *(id *)(a1 + 64);
  id v17 = v3;
  id v11 = v3;
  [v4 issueRequest:v5 bagKey:v6 clientProxy:v7 handler:v12];
}

void sub_1000B54C8(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7 = a2;
  id v8 = a3;
  [*(id *)(a1 + 32) setError:v8];
  if (v7 && !v8)
  {
    id v10 = _NSConcreteStackBlock;
    uint64_t v11 = 3221225472;
    id v12 = sub_1000B55F8;
    id v13 = &unk_1002D75A8;
    uint64_t v9 = *(void **)(a1 + 32);
    uint64_t v14 = *(void *)(a1 + 40);
    id v15 = v7;
    id v16 = *(id *)(a1 + 48);
    id v17 = *(id *)(a1 + 56);
    double v19 = a4;
    id v18 = *(id *)(a1 + 32);
    [v9 perform:&v10];
  }
  [*(id *)(a1 + 32) setError:v8, v10, v11, v12, v13, v14];
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_1000B55F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  double v8 = *(double *)(a1 + 72);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_1000B56D4;
  v10[3] = &unk_1002D8BB0;
  id v11 = *(id *)(a1 + 64);
  id v12 = v3;
  id v9 = v3;
  [v4 generateScoresFromServerResponse:v5 service:v6 context:v7 timeToLive:v10 handler:v8];
}

uint64_t sub_1000B56D4(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setResult:a2];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_1000B571C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_1000B58D0(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "No internal or displayName for playerID:%@ (score:%@).Will be changed to anonymous", (uint8_t *)&v3, 0x16u);
}

void sub_1000B5958(id a1)
{
  long long v6 = *(_OWORD *)off_1002D8C98;
  long long v7 = *(_OWORD *)off_1002D8CA8;
  CFStringRef v8 = @"Media";
  *(_OWORD *)keys = *(_OWORD *)off_1002D8C78;
  long long v5 = *(_OWORD *)off_1002D8C88;
  v2[0] = xmmword_10024F258;
  v2[1] = unk_10024F268;
  v2[2] = xmmword_10024F278;
  v2[3] = unk_10024F288;
  uint64_t v3 = 1024;
  qword_1003296A0 = (uint64_t)CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)v2, 9, &kCFTypeDictionaryKeyCallBacks, 0);
  for (uint64_t i = 8; i != -1; --i)
}

void sub_1000B5A34(void *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = +[NSBundle _gkBundleIdentifierFromConnection:a2];
  int v5 = 138412290;
  long long v6 = v4;
  _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Granting public Game Center entitlement that was not provided by: %@", (uint8_t *)&v5, 0xCu);
}

void sub_1000B5AF0(void *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = +[NSBundle _gkBundleIdentifierFromConnection:a2];
  int v5 = 138412290;
  long long v6 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "ERROR: No Game Center entitlement provided by new connection from: %@", (uint8_t *)&v5, 0xCu);
}

void sub_1000B5BAC(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "ERROR: The Game Center entitlement is required to use GameKit. To avoid failing App Store Review, follow these instructions:\nhttps://developer.apple.com/documentation/bundleresources/entitlements/com_apple_developer_game-center", v1, 2u);
}

id sub_1000B5DE4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) appendFormat:@".%@", a2];
}

id sub_1000B5E9C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  long long v7 = a2;
  id v3 = a2;
  uint64_t v4 = +[NSArray arrayWithObjects:&v7 count:1];
  int v5 = [v2 resourceIdentifierForKeys:v4, v7];

  return v5;
}

void sub_1000B6064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

unint64_t sub_1000B607C(uint64_t a1, void *a2)
{
  unint64_t result = (unint64_t)[a2 hash];
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) ^= result;
  return result;
}

void sub_1000B6408(id a1)
{
  qword_1003296B0 = objc_alloc_init(GKInviteURLManager);

  _objc_release_x1();
}

void sub_1000B6650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B6668(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000B6678(uint64_t a1)
{
}

void sub_1000B6680(uint64_t a1)
{
}

void sub_1000B6754(uint64_t a1)
{
}

void sub_1000B682C(id a1)
{
  qword_1003296C0 = objc_alloc_init(GKCloudKitMultiplayerCache);

  _objc_release_x1();
}

void sub_1000B6B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000B6B8C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 40);
  CFStringRef v8 = a2;
  uint64_t v4 = [v3 sessionCache];
  uint64_t v5 = [v4 userPlayer];
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  long long v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  v8[2]();
}

void sub_1000B6F6C(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)CKFetchWhitelistedBundleIDsOperation);
  uint64_t v5 = +[GKCloudKitMultiplayerUtils cloudKitOperationConfigurationForContainer:a1[4]];
  [v4 setConfiguration:v5];

  long long v7 = _NSConcreteStackBlock;
  uint64_t v8 = 3221225472;
  id v9 = sub_1000B708C;
  id v10 = &unk_1002D5338;
  id v11 = a1[5];
  id v12 = a1[6];
  id v13 = a1[7];
  id v14 = v3;
  id v6 = v3;
  [v4 setFetchWhitelistedBundleIDsCompletionBlock:&v7];
  [a1[4] addOperation:v4, v7, v8, v9, v10];
}

void sub_1000B708C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([v5 count])
  {
    [*(id *)(a1 + 40) updateBundleIDs:v5 forContainerName:*(void *)(a1 + 32)];
  }
  else
  {
    id v7 = *(id *)(a1 + 32);
    if ([*(id *)(a1 + 32) rangeOfString:@"iCloud." options:9] != (id)0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v8 = [[*(id *)(a1 + 32) substringFromIndex:[@"iCloud." length]];

      id v7 = (id)v8;
    }
    id v10 = v7;
    uint64_t v9 = +[NSArray arrayWithObjects:&v10 count:1];

    id v5 = (id)v9;
  }
  [*(id *)(a1 + 48) setResult:v5];
  [*(id *)(a1 + 48) setError:v6];

  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_1000B71D4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v4 = [*(id *)(a1 + 32) result];
    id v3 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, id, void *))(v1 + 16))(v1, v4, v3);
  }
}

void sub_1000B7614(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 56);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000B76DC;
  void v8[3] = &unk_1002D3BC8;
  id v6 = *(void **)(a1 + 48);
  id v9 = *(id *)(a1 + 40);
  id v10 = v3;
  id v7 = v3;
  [v6 handleLegacyShareMetadata:v4 needsAccept:v5 completionHandler:v8];
}

uint64_t sub_1000B76DC(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setError:a2];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_1000B7724(uint64_t a1)
{
  uint64_t v2 = +[GKInviteURLManager sharedManager];
  id v3 = [v2 acceptingInProgressRecordIDs];
  [v3 removeObject:*(void *)(a1 + 32)];

  uint64_t v4 = *(void *)(a1 + 48);
  if (v4)
  {
    id v5 = [*(id *)(a1 + 40) error];
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);
  }
}

void sub_1000B798C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!os_log_GKGeneral) {
    id v4 = (id)GKOSLoggers();
  }
  id v5 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Accepting CKShareMetadata for Messages multiplayer invite.", buf, 2u);
  }
  id v6 = [*(id *)(a1 + 32) rootRecordID];
  id v7 = +[GKInviteURLManager sharedManager];
  [v7 setMostRecentInviteShareRootRecordID:v6];

  uint64_t v8 = *(void **)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 32);
  id v10 = +[GKPreferences shared];
  id v11 = [v10 maxPlayersP2P];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1000B7B08;
  void v13[3] = &unk_1002D3BC8;
  id v14 = *(id *)(a1 + 40);
  id v15 = v3;
  id v12 = v3;
  [v8 acceptShareMetadata:v9 retryCount:v11 completionHandler:v13];
}

void sub_1000B7B08(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
      sub_1000BAD70();
    }
    [*(id *)(a1 + 32) setError:v3];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000B7BA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!os_log_GKGeneral) {
    id v4 = (id)GKOSLoggers();
  }
  id v5 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Fetching share record for multiplayer invite to generate initiate bulletin.", buf, 2u);
  }
  id v6 = [*(id *)(a1 + 32) rootRecordID];
  id v7 = [v6 zoneID];
  uint64_t v8 = +[GKCloudKitMultiplayer databaseForZoneID:v7];

  uint64_t v9 = [*(id *)(a1 + 32) rootRecordID];
  id v22 = v9;
  id v10 = +[NSArray arrayWithObjects:&v22 count:1];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  void v15[2] = sub_1000B7DA0;
  v15[3] = &unk_1002D8DA0;
  id v16 = *(id *)(a1 + 40);
  id v11 = *(id *)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 48);
  id v17 = v11;
  id v18 = v8;
  id v19 = v3;
  uint64_t v20 = v12;
  id v13 = v3;
  id v14 = v8;
  +[GKCloudKitMultiplayerUtils fetchShareRecordsWithRecordIDs:v10 inDatabase:v14 handler:v15];
}

void sub_1000B7DA0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
      sub_1000BADD8();
    }
    [*(id *)(a1 + 32) setError:v6];
  }
  else
  {
    uint64_t v8 = [*(id *)(a1 + 40) rootRecordID];
    uint64_t v9 = +[GKInviteURLManager sharedManager];
    [v9 setMostRecentInviteShareRootRecordID:v8];

    id v10 = [*(id *)(a1 + 40) rootRecordID];
    id v11 = [v5 objectForKeyedSubscript:v10];

    [*(id *)(a1 + 64) generateAndStoreInviteBulletinForRecord:v11 database:*(void *)(a1 + 48)];
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_1000B7EC8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }
}

void sub_1000B80D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000BAE40();
    }
    if (+[GKCloudKitMultiplayerUtils shouldRetryForError:v3 andRetryCount:*(unsigned int *)(a1 + 56)])
    {
      if (!os_log_GKGeneral) {
        id v5 = (id)GKOSLoggers();
      }
      id v6 = os_log_GKError;
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      {
        uint64_t v20 = *(void *)(a1 + 32);
        int v21 = *(_DWORD *)(a1 + 56);
        *(_DWORD *)buf = 138412802;
        uint64_t v33 = v20;
        __int16 v34 = 2112;
        id v35 = v3;
        __int16 v36 = 1024;
        int v37 = v21;
        _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Error accepting CloudKit share metadata %@ due to: %@. Will retry at most %d times.", buf, 0x1Cu);
      }
      id v7 = [v3 userInfo];
      uint64_t v8 = [v7 valueForKey:CKErrorRetryAfterKey];
      [v8 doubleValue];
      double v10 = v9;

      dispatch_time_t v11 = dispatch_time(0, 1000000000 * (uint64_t)v10);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000B8580;
      block[3] = &unk_1002D8DF0;
      uint64_t v26 = *(void *)(a1 + 48);
      id v24 = *(id *)(a1 + 32);
      int v27 = *(_DWORD *)(a1 + 56);
      id v25 = *(id *)(a1 + 40);
      dispatch_after(v11, (dispatch_queue_t)&_dispatch_main_q, block);
    }
    else
    {
      uint64_t v19 = *(void *)(a1 + 40);
      if (v19) {
        (*(void (**)(uint64_t, id))(v19 + 16))(v19, v3);
      }
    }
  }
  else
  {
    uint64_t v12 = [*(id *)(a1 + 32) rootRecordID];
    id v13 = [v12 zoneID];
    id v14 = +[GKCloudKitMultiplayer databaseForZoneID:v13];

    id v15 = [*(id *)(a1 + 32) rootRecordID];
    id v38 = v15;
    id v16 = +[NSArray arrayWithObjects:&v38 count:1];
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    void v28[2] = sub_1000B8460;
    v28[3] = &unk_1002D8DC8;
    id v29 = *(id *)(a1 + 32);
    id v30 = v14;
    long long v22 = *(_OWORD *)(a1 + 40);
    id v17 = (id)v22;
    long long v31 = v22;
    id v18 = v14;
    +[GKCloudKitMultiplayerUtils fetchShareRecordsWithRecordIDs:v16 inDatabase:v18 handler:v28];
  }
}

void sub_1000B8460(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
      sub_1000BADD8();
    }
  }
  else
  {
    uint64_t v8 = [*(id *)(a1 + 32) rootRecordID];
    double v9 = +[GKInviteURLManager sharedManager];
    [v9 setMostRecentInviteShareRootRecordID:v8];

    double v10 = [*(id *)(a1 + 32) rootRecordID];
    dispatch_time_t v11 = [v5 objectForKeyedSubscript:v10];

    [*(id *)(a1 + 56) generateAndStoreInviteBulletinForRecord:v11 database:*(void *)(a1 + 40)];
  }
  uint64_t v12 = *(void *)(a1 + 48);
  if (v12) {
    (*(void (**)(uint64_t, id))(v12 + 16))(v12, v6);
  }
}

id sub_1000B8580(uint64_t a1)
{
  return [*(id *)(a1 + 48) acceptShareMetadata:*(void *)(a1 + 32) retryCount:(*(_DWORD *)(a1 + 56) - 1) completionHandler:*(void *)(a1 + 40)];
}

void sub_1000B95AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  v24[0] = objc_opt_class();
  v24[1] = objc_opt_class();
  void v24[2] = objc_opt_class();
  v24[3] = objc_opt_class();
  void v24[4] = objc_opt_class();
  id v4 = +[NSArray arrayWithObjects:v24 count:5];
  id v5 = +[NSSet setWithArray:v4];
  id v6 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"connectionData"];
  id v21 = 0;
  id v7 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v5 fromData:v6 error:&v21];
  id v8 = v21;

  if (v8)
  {
    if (!os_log_GKGeneral) {
      id v9 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
      sub_1000BAFF8();
    }
    v3[2](v3);
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v10 = (id)GKOSLoggers();
    }
    dispatch_time_t v11 = os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v23 = v7;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Unarchived recordDictionary from invite record: %@", buf, 0xCu);
    }
    uint64_t v12 = [v7 objectForKeyedSubscript:@"invite-type"];
    id v13 = [v12 integerValue];

    if (v13 == (id)1)
    {
      id v14 = +[GKCloudKitMultiplayer packFakeTurnBasedBulletinWithZoneData:v7];
      id v15 = +[GKDataRequestManager sharedManager];
      [v15 processIncomingiMessageInvite:v14];

      v3[2](v3);
    }
    else
    {
      uint64_t v17 = *(void *)(a1 + 32);
      uint64_t v16 = *(void *)(a1 + 40);
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      void v18[2] = sub_1000B98CC;
      void v18[3] = &unk_1002D8E40;
      id v19 = v7;
      uint64_t v20 = v3;
      +[GKCloudKitMultiplayer searchAndSaveIdentityForRecord:v17 database:v16 completionHandler:v18];
    }
  }
}

void sub_1000B98CC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v5)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers();
    }
    id v9 = os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      int v14 = 138412290;
      id v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Updated Messages invite record save completed: %@", (uint8_t *)&v14, 0xCu);
    }
    id v10 = +[GKCloudKitMultiplayer packFakeRealTimeBulletinWithZoneData:*(void *)(a1 + 32)];
    dispatch_time_t v11 = +[GKDataRequestManager sharedManager];
    [(__CFString *)v11 processIncomingiMessageInvite:v10];
    goto LABEL_7;
  }
  if (!v6)
  {
    id v10 = +[GCFLocalizedStrings MESSAGE_BASED_INVITEE_ERROR_ALERT_TITLE];
    dispatch_time_t v11 = +[GCFLocalizedStrings MESSAGE_BASED_INVITEE_NOT_FOUND_ALERT_BODY];
    id v13 = +[GCFLocalizedStrings MESSAGE_BASED_INVITEE_ERROR_ALERT_BUTTON];
    CFUserNotificationDisplayNotice(0.0, 0, 0, 0, 0, v10, v11, v13);

LABEL_7:
    goto LABEL_13;
  }
  if (!os_log_GKGeneral) {
    id v12 = (id)GKOSLoggers();
  }
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
    sub_1000BB064();
  }
LABEL_13:
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000B9AB8(id a1)
{
  id v1 = +[GKInviteURLManager sharedManager];
  [v1 setMostRecentInviteShareRootRecordID:0];
}

void sub_1000B9B58(id a1)
{
  qword_1003296D0 = (uint64_t)dispatch_queue_create("com.apple.GameKit.messageServicesQueue", 0);

  _objc_release_x1();
}

void sub_1000B9C48(uint64_t a1)
{
  id v2 = +[IMDaemonController sharedInstance];
  [v2 blockUntilConnected];

  id v12 = +[IMService iMessageService];
  id v3 = +[IMAccountController sharedInstance];
  uint64_t v4 = [v3 accountsForService:v12];
  id v5 = (void *)qword_1003296E0;
  qword_1003296E0 = v4;

  id v6 = +[IMAccountController sharedInstance];
  id v7 = +[IMService smsService];
  id v8 = [v6 accountsForService:v7];

  if (qword_1003296E0)
  {
    id v9 = [(id)qword_1003296E0 arrayByAddingObjectsFromArray:v8];
  }
  else
  {
    id v9 = v8;
  }
  id v10 = (void *)qword_1003296E0;
  qword_1003296E0 = (uint64_t)v9;

  uint64_t v11 = *(void *)(a1 + 32);
  if (v11) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 16))(v11, qword_1003296E0);
  }
}

void sub_1000BA12C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!os_log_GKGeneral) {
    id v4 = (id)GKOSLoggers();
  }
  id v5 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    id v77 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "GK-InviteMessage: got IM accounts: %@", buf, 0xCu);
  }
  long long v60 = v3;
  v85[0] = objc_opt_class();
  v85[1] = objc_opt_class();
  v85[2] = objc_opt_class();
  v85[3] = objc_opt_class();
  id v6 = +[NSArray arrayWithObjects:v85 count:4];
  id v7 = +[NSSet setWithArray:v6];
  id v8 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"invitedPlayers"];
  id v75 = 0;
  id v9 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v7 fromData:v8 error:&v75];
  id v10 = v75;
  id v62 = +[NSMutableDictionary dictionaryWithDictionary:v9];

  if (v10)
  {
    if (!os_log_GKGeneral) {
      id v11 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
      sub_1000BB184();
    }
  }
  if (!os_log_GKGeneral) {
    id v12 = (id)GKOSLoggers();
  }
  id v59 = v10;
  id v13 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    id v77 = v62;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "GK-InviteMessage:playerContacts: %@", buf, 0xCu);
  }
  int v14 = +[NSMutableDictionary dictionary];
  long long v71 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  id v15 = [v62 allKeys];
  id v16 = [v15 countByEnumeratingWithState:&v71 objects:v84 count:16];
  if (v16)
  {
    id v17 = v16;
    uint64_t v18 = *(void *)v72;
    do
    {
      for (uint64_t i = 0; i != v17; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v72 != v18) {
          objc_enumerationMutation(v15);
        }
        uint64_t v20 = *(void **)(*((void *)&v71 + 1) + 8 * i);
        id v21 = [*(id *)(a1 + 64) formattedContact:v20];
        long long v22 = +[NSMutableString string];

        if (v21 == v22)
        {
          if (!os_log_GKGeneral) {
            id v24 = (id)GKOSLoggers();
          }
          id v25 = os_log_GKMatch;
          if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412546;
            id v77 = v21;
            __int16 v78 = 2112;
            long long v79 = v20;
            _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "formattedPlayerContact (%@) is neither phone num nor email address. it's from playerContact: %@", buf, 0x16u);
          }
        }
        else if (IMStringIsPhoneNumber())
        {
          id v23 = [*(id *)(a1 + 64) lastSevenDigits:v21];
          [v14 setObject:v20 forKey:v23];
        }
        else
        {
          [v14 setObject:v20 forKey:v21];
        }
      }
      id v17 = [v15 countByEnumeratingWithState:&v71 objects:v84 count:16];
    }
    while (v17);
  }

  long long v69 = 0u;
  long long v70 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  id v26 = v60;
  id v58 = [v26 countByEnumeratingWithState:&v67 objects:v83 count:16];
  if (!v58) {
    goto LABEL_58;
  }
  uint64_t v27 = *(void *)v68;
  uint64_t v57 = *(void *)v68;
  id v61 = v26;
  do
  {
    uint64_t v28 = 0;
    do
    {
      if (*(void *)v68 != v27) {
        objc_enumerationMutation(v26);
      }
      uint64_t v29 = v28;
      id v30 = *(void **)(*((void *)&v67 + 1) + 8 * v28);
      if (!os_log_GKGeneral) {
        id v31 = (id)GKOSLoggers();
      }
      long long v32 = os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v77 = v30;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "GK-InviteMessage:checking (local) account: %@", buf, 0xCu);
      }
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      uint64_t v33 = [v30 aliases];
      id v34 = [v33 countByEnumeratingWithState:&v63 objects:v82 count:16];
      if (!v34) {
        goto LABEL_56;
      }
      id v35 = v34;
      uint64_t v36 = *(void *)v64;
      while (2)
      {
        for (j = 0; j != v35; j = (char *)j + 1)
        {
          if (*(void *)v64 != v36) {
            objc_enumerationMutation(v33);
          }
          id v38 = [*(id *)(a1 + 64) formattedContact:*(void *)(*((void *)&v63 + 1) + 8 * (void)j)];
          long long v39 = [v14 objectForKey:v38];
          if (v39)
          {
          }
          else
          {
            id v40 = [*(id *)(a1 + 64) lastSevenDigits:v38];
            uint64_t v41 = [v14 objectForKey:v40];

            if (!v41) {
              goto LABEL_54;
            }
          }
          id v42 = [v14 objectForKey:v38];
          if (!v42)
          {
            id v43 = [*(id *)(a1 + 64) lastSevenDigits:v38];
            id v42 = [v14 objectForKey:v43];
          }
          id v44 = [v62 objectForKey:v42];

          if (v44)
          {
            [v62 setObject:*(void *)(a1 + 40) forKey:v42];
            __int16 v50 = +[NSKeyedArchiver archivedDataWithRootObject:v62 requiringSecureCoding:1 error:0];
            [*(id *)(a1 + 32) setObject:v50 forKeyedSubscript:@"invitedPlayers"];
            if (!os_log_GKGeneral) {
              id v51 = (id)GKOSLoggers();
            }
            long long v52 = os_log_GKMatch;
            if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
            {
              long long v53 = *(void **)(a1 + 40);
              *(_DWORD *)buf = 138412546;
              id v77 = v53;
              __int16 v78 = 2112;
              long long v79 = v62;
              _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_INFO, "GK-InviteMessage: Found a match (formatted)->saving into invite CKRecord: %@ <- %@", buf, 0x16u);
            }
            uint64_t v54 = *(void *)(a1 + 32);
            uint64_t v55 = *(void *)(a1 + 48);
            uint64_t v56 = +[GKPreferences shared];
            +[GKCloudKitMultiplayerUtils saveInviteRecord:database:retryCount:completionHandler:](GKCloudKitMultiplayerUtils, "saveInviteRecord:database:retryCount:completionHandler:", v54, v55, [v56 maxPlayersP2P], *(void *)(a1 + 56));

            id v26 = v61;
            uint64_t v49 = v59;
            goto LABEL_69;
          }
          if (!os_log_GKGeneral) {
            id v45 = (id)GKOSLoggers();
          }
          char v46 = os_log_GKMatch;
          if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412802;
            id v77 = v42;
            __int16 v78 = 2112;
            long long v79 = v62;
            __int16 v80 = 2112;
            long long v81 = v14;
            _os_log_error_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "cannot find key: %@ in the playerContacts: %@. Currently the formattedPlayerContacts: %@", buf, 0x20u);
          }

LABEL_54:
        }
        id v35 = [v33 countByEnumeratingWithState:&v63 objects:v82 count:16];
        if (v35) {
          continue;
        }
        break;
      }
LABEL_56:

      uint64_t v28 = v29 + 1;
      id v26 = v61;
      uint64_t v27 = v57;
    }
    while ((id)(v29 + 1) != v58);
    id v58 = [v61 countByEnumeratingWithState:&v67 objects:v83 count:16];
  }
  while (v58);
LABEL_58:

  if (!os_log_GKGeneral) {
    id v47 = (id)GKOSLoggers();
  }
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
    sub_1000BB110();
  }
  uint64_t v48 = *(void *)(a1 + 56);
  uint64_t v49 = v59;
  if (v48) {
    (*(void (**)(uint64_t, void, id))(v48 + 16))(v48, 0, v59);
  }
LABEL_69:
}

void sub_1000BAB64(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    if (!os_log_GKGeneral) {
      id v10 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000BB260();
    }
    if (!os_log_GKGeneral) {
      id v11 = (id)GKOSLoggers();
    }
    id v12 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000BB1F0(a1, v12, v13, v14, v15, v16, v17, v18);
    }
  }
}

void sub_1000BAC4C(os_log_t log)
{
  *(_WORD *)id v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "No handler set by callers of primaryPlayerWithHandler.", v1, 2u);
}

void sub_1000BAC90(uint64_t a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)id v3 = 134218242;
  *(void *)&void v3[4] = a2;
  *(_WORD *)&v3[12] = 2112;
  *(void *)&v3[14] = a1;
  sub_100011010((void *)&_mh_execute_header, a2, a3, "Failed to fetch the primary iCloud player with timeoutResult: %ld, error: %@", *(void *)v3, *(void *)&v3[8], *(void *)&v3[16]);
}

void sub_1000BAD08()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Cannot handle CloudKit data from unsupported zone: %@.", v2, v3, v4, v5, v6);
}

void sub_1000BAD70()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Error accepting share for multiplayer invite: %@", v2, v3, v4, v5, v6);
}

void sub_1000BADD8()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Error fetching share record for multiplayer invite %@", v2, v3, v4, v5, v6);
}

void sub_1000BAE40()
{
  sub_1000110A0();
  sub_100011010((void *)&_mh_execute_header, v0, v1, "Error accepting CloudKit share metadata %@ due to: %@.");
}

void sub_1000BAEAC()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Could not generate invite bulletin from CKRecord %@", v2, v3, v4, v5, v6);
}

void sub_1000BAF14(void *a1, void *a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = [a2 recordID];
  uint64_t v5 = +[GKInviteURLManager sharedManager];
  uint8_t v6 = [v5 mostRecentInviteShareRootRecordID];
  int v7 = 138412546;
  id v8 = v4;
  __int16 v9 = 2112;
  id v10 = v6;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Could not generate invite bulletin from CKRecord, recordID (%@) does not equal most recent invite share root recordID %@", (uint8_t *)&v7, 0x16u);
}

void sub_1000BAFF8()
{
  sub_1000110A0();
  sub_100011010((void *)&_mh_execute_header, v0, v1, "Error unarchiving connectionData from multiplayer invite record %@ \n%@");
}

void sub_1000BB064()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Error searching for identity and/or saving invite CKRecord %@", v2, v3, v4, v5, v6);
}

void sub_1000BB0CC(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "no player is signed in to Game Center", v1, 2u);
}

void sub_1000BB110()
{
  sub_100011064();
  sub_100011010((void *)&_mh_execute_header, v0, v1, "GK-InviteMessage: None of your Messages accounts were found in the invitation. invited accounts - %@, local accounts - %@");
}

void sub_1000BB184()
{
  sub_1000110A0();
  sub_100011010((void *)&_mh_execute_header, v0, v1, "Error decoding invitedPlayer archive in cloudGameSession from record %@ \n%@");
}

void sub_1000BB1F0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000BB260()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Error deleting invite record: %@", v2, v3, v4, v5, v6);
}

uint64_t sub_1000BB470(uint64_t a1)
{
  [*(id *)(a1 + 32) setUserRecordID:0];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 64);
  *(void *)(v2 + 64) = 0;

  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 56);
  *(void *)(v4 + 56) = 0;

  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    int v7 = *(uint64_t (**)(void))(result + 16);
    return v7();
  }
  return result;
}

id sub_1000BB594(uint64_t a1)
{
  id result = *(id *)(*(void *)(a1 + 32) + 64);
  if (result)
  {
    id result = [result timeIntervalSinceNow];
    BOOL v4 = v3 > 0.0;
  }
  else
  {
    BOOL v4 = 0;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v4;
  return result;
}

uint64_t sub_1000BB654(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 64) = +[NSDate dateWithTimeIntervalSinceNow:3600.0];

  return _objc_release_x1();
}

uint64_t sub_1000BB798(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000BB7A8(uint64_t a1)
{
}

void sub_1000BB7B0(uint64_t a1)
{
}

void sub_1000BB96C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a3;
  id v7 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:a2];
  uint8_t v6 = [v7 alias];
  [*(id *)(a1 + 32) setResult:v6];

  v5[2](v5);
}

void sub_1000BBB50(uint64_t a1)
{
  +[GKDispatchGroup dispatchGroupWithName:@"updateUserWithHandler"];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1000BBC80;
  void v7[3] = &unk_1002D3A70;
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v3 = *(void *)(a1 + 32);
  id v8 = v2;
  uint64_t v9 = v3;
  [v2 perform:v7];
  [v2 wait];
  if (*(void *)(a1 + 40))
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1000BC050;
    v4[3] = &unk_1002D3930;
    id v6 = *(id *)(a1 + 40);
    id v5 = v2;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v4);
  }
}

void sub_1000BBC80(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!os_log_GKGeneral) {
    id v4 = (id)GKOSLoggers();
  }
  id v5 = os_log_GKAccount;
  if (os_log_type_enabled(os_log_GKAccount, OS_LOG_TYPE_DEBUG)) {
    sub_1000BC6B8(v5);
  }
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_1000BBD84;
  v9[3] = &unk_1002D8EF8;
  id v6 = *(id *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  id v10 = v6;
  uint64_t v11 = v7;
  id v12 = v3;
  id v8 = v3;
  +[GKCloudKitMultiplayerUtils fetchUserRecordIDWithHandler:v9];
}

void sub_1000BBD84(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [*(id *)(a1 + 32) setError:a3];
  id v6 = *(id *)(*(void *)(a1 + 40) + 24);
  if (v6 == v5) {
    unsigned int v7 = 0;
  }
  else {
    unsigned int v7 = [v6 isEqual:v5] ^ 1;
  }
  if (!os_log_GKGeneral) {
    id v8 = (id)GKOSLoggers();
  }
  uint64_t v9 = os_log_GKAccount;
  if (os_log_type_enabled(os_log_GKAccount, OS_LOG_TYPE_DEBUG))
  {
    sub_1000BC6FC((uint64_t)v5, a1 + 40, v9);
    if (!v7) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (v7)
  {
LABEL_8:
    id v10 = +[NSNumber numberWithBool:v5 != 0];
    [*(id *)(a1 + 32) setObject:v10 forKeyedSubscript:@"read"];

    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_1000BBF08;
    void v12[3] = &unk_1002D8A20;
    uint64_t v11 = *(void **)(a1 + 32);
    void v12[4] = *(void *)(a1 + 40);
    BOOL v14 = v5 != 0;
    id v13 = v5;
    [v11 perform:v12];
  }
LABEL_9:
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1000BBF08(uint64_t a1, void *a2)
{
  id v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000BBFC8;
  void v8[3] = &unk_1002D5028;
  char v12 = *(unsigned char *)(a1 + 48);
  id v4 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  id v9 = v5;
  uint64_t v10 = v6;
  id v11 = v3;
  id v7 = v3;
  [v4 clearWithHandler:v8];
}

uint64_t sub_1000BBFC8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    if (!os_log_GKGeneral) {
      id v2 = (id)GKOSLoggers();
    }
    id v3 = os_log_GKAccount;
    if (os_log_type_enabled(os_log_GKAccount, OS_LOG_TYPE_DEBUG)) {
      sub_1000BC78C(a1, v3);
    }
    [*(id *)(a1 + 40) setUserRecordID:*(void *)(a1 + 32)];
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1000BC050(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1000BC1D0(void *a1)
{
  id v2 = [*(id *)(a1[4] + 40) objectForKeyedSubscript:a1[5]];
  if (v2)
  {
    id v8 = v2;
    [v2 doubleValue];
    id v3 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:");
    [v3 timeIntervalSinceNow];
    if (v4 > 0.0)
    {
      uint64_t v5 = [*(id *)(a1[4] + 32) objectForKeyedSubscript:a1[5]];
      uint64_t v6 = *(void *)(a1[6] + 8);
      id v7 = *(void **)(v6 + 40);
      *(void *)(v6 + 40) = v5;
    }
    id v2 = v8;
  }
}

id sub_1000BC338(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count])
  {
    [*(id *)(*(void *)(a1 + 40) + 32) setObject:*(void *)(a1 + 32) forKeyedSubscript:*(void *)(a1 + 48)];
    +[NSDate timeIntervalSinceReferenceDate];
    id v3 = +[NSNumber numberWithDouble:v2 + 3600.0];
    [*(id *)(*(void *)(a1 + 40) + 40) setObject:v3 forKeyedSubscript:*(void *)(a1 + 48)];
  }
  else
  {
    [*(id *)(*(void *)(a1 + 40) + 32) removeObjectForKey:*(void *)(a1 + 48)];
  }
  double v4 = *(void **)(a1 + 40);

  return _[v4 writeBundleIDsToDisk];
}

void sub_1000BC674(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Clearing session cache", v1, 2u);
}

void sub_1000BC6B8(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Fetching user record ID", v1, 2u);
}

void sub_1000BC6FC(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3 = *(void *)(*(void *)a2 + 24);
  int v4 = 138412546;
  uint64_t v5 = a1;
  __int16 v6 = 2112;
  uint64_t v7 = v3;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Fetched user record ID: %@, previous record ID: %@", (uint8_t *)&v4, 0x16u);
}

void sub_1000BC78C(uint64_t a1, NSObject *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Setting user record ID to: %@", (uint8_t *)&v3, 0xCu);
}

void sub_1000BD128(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "No server data to decode, raising a communication failure error with reason:no data received from server", v1, 2u);
}

id _localPlayerID()
{
  uint64_t v0 = +[GKPreferences shared];
  uint64_t v1 = [v0 networkManagerUserOverride];

  if ([v1 length])
  {
    id v2 = v1;
  }
  else
  {
    int v3 = +[GKClientProxy gameCenterClient];
    uint64_t v4 = +[GKPlayerCredentialController sharedController];
    uint64_t v5 = [v4 pushCredentialForEnvironment:[v3 environment]];
    __int16 v6 = [v5 playerInternal];

    id v2 = [v6 playerID];
  }

  return v2;
}

void _updateRequestBody(void *a1, uint64_t a2)
{
  id v5 = a1;
  int v3 = +[NSPropertyListSerialization dataWithPropertyList:a2 format:100 options:0 error:0];
  uint64_t v4 = [v5 allHTTPHeaderFields];
  if (v4) {
    [v5 setValue:0 forHTTPHeaderField:@"Content-Encoding"];
  }
  [v5 setHTTPBody:v3];
}

void sub_1000BDECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000BDEF0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained setFairPlaySessionReady:v6 == 0];
  if (([WeakRetained fairPlaySessionReady] & 1) == 0)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers();
    }
    id v9 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000C9670((uint64_t)v6, v9);
    }
  }
  uint64_t v10 = *(void *)(a1 + 32);
  if (v10) {
    (*(void (**)(uint64_t, id))(v10 + 16))(v10, v5);
  }
}

void sub_1000BE5D4(id a1)
{
  uint64_t v1 = [[GKNetworkRequestManager alloc] initWithInMemoryEntityCache:0];
  id v2 = (void *)qword_1003296E8;
  qword_1003296E8 = (uint64_t)v1;

  int v3 = (void *)qword_1003296E8;

  _[v3 setupSessionsAsync];
}

void sub_1000BE93C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) stateQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000BE9E8;
  block[3] = &unk_1002D40E0;
  id v7 = v3;
  id v5 = v3;
  dispatch_async(v4, block);
}

void sub_1000BE9E8(uint64_t a1)
{
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v1 = *(id *)(a1 + 32);
  id v2 = [v1 countByEnumeratingWithState:&v13 objects:v19 count:16];
  if (v2)
  {
    id v4 = v2;
    uint64_t v5 = *(void *)v14;
    *(void *)&long long v3 = 138412290;
    long long v12 = v3;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v14 != v5) {
          objc_enumerationMutation(v1);
        }
        id v7 = *(void **)(*((void *)&v13 + 1) + 8 * (void)v6);
        if (!os_log_GKGeneral) {
          id v8 = (id)GKOSLoggers();
        }
        id v9 = (void *)os_log_GKDaemon;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          uint64_t v10 = v9;
          id v11 = +[GKNetworkRequestManager dictionaryFromTaskDescription:v7];
          *(_DWORD *)buf = v12;
          uint64_t v18 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "GKNetworkRequestManager taskDescription: %@", buf, 0xCu);
        }
        [v7 cancel:v12];
        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v1 countByEnumeratingWithState:&v13 objects:v19 count:16];
    }
    while (v4);
  }
}

void sub_1000BED7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000BEDA0(uint64_t a1)
{
  uint64_t v1 = a1;
  if ([*(id *)(a1 + 32) managerReady])
  {
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    id obj = *(id *)(v1 + 40);
    id v2 = [obj countByEnumeratingWithState:&v22 objects:v26 count:16];
    if (v2)
    {
      id v3 = v2;
      uint64_t v4 = *(void *)v23;
      uint64_t v19 = v1;
      uint64_t v20 = *(void *)v23;
      while (2)
      {
        for (uint64_t i = 0; i != v3; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v23 != v4) {
            objc_enumerationMutation(obj);
          }
          uint64_t v6 = *(void *)(*((void *)&v22 + 1) + 8 * i);
          id v7 = [*(id *)(v1 + 32) existingTasks];
          id v8 = [v7 objectForKeyedSubscript:v6];

          if (v8)
          {
            id v9 = _localPlayerID();
            uint64_t v10 = [v8 objectForKeyedSubscript:v9];
            id v11 = v10;
            if (v10)
            {
              long long v12 = [v10 currentTasks];
              long long v13 = [v12 allKeys];
              if ([v13 count])
              {

LABEL_17:
                *(void *)(*(void *)(*(void *)(v1 + 48) + 8) + 24) = 1;

                goto LABEL_18;
              }
              long long v14 = [v11 pendingRequests];
              [v14 allKeys];
              long long v15 = v9;
              v17 = id v16 = v3;
              id v18 = [v17 count];

              id v3 = v16;
              id v9 = v15;

              uint64_t v1 = v19;
              uint64_t v4 = v20;

              if (v18) {
                goto LABEL_17;
              }
            }
          }
        }
        id v3 = [obj countByEnumeratingWithState:&v22 objects:v26 count:16];
        if (v3) {
          continue;
        }
        break;
      }
    }
LABEL_18:
  }
  else
  {
    *(void *)(*(void *)(*(void *)(v1 + 48) + 8) + 24) = 0;
  }
}

void sub_1000BFA50(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) dictionaryForBagAndPlayer:*(void *)(a1 + 40) createIfNotPresent:0 description:0];
  if (objc_opt_respondsToSelector())
  {
    id v3 = [v2 currentTasks];
    uint64_t v4 = [*(id *)(a1 + 40) requestIdentifier];
    [v3 setObject:0 forKeyedSubscript:v4];
  }
  else if (v2 && (objc_opt_respondsToSelector() & 1) != 0)
  {
    [*(id *)(a1 + 40) removeFromStore:v2];
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers();
    }
    uint64_t v6 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      id v7 = *(void **)(a1 + 40);
      int v13 = 138412290;
      long long v14 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "GKNetworkRequestManager error when trying to remove from store: %@", (uint8_t *)&v13, 0xCu);
    }
  }
  if (!os_log_GKGeneral) {
    id v8 = (id)GKOSLoggers();
  }
  id v9 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = *(void **)(a1 + 32);
    id v11 = v9;
    long long v12 = [v10 existingTasks];
    int v13 = 138412290;
    long long v14 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "GKNetworkRequestManager handleTaskFinished state after update: %@", (uint8_t *)&v13, 0xCu);
  }
}

void sub_1000BFCC4(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers();
  }
  id v3 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "GKNetworkRequestManager setupSessionsAsync", buf, 2u);
  }
  [*(id *)(a1 + 32) getFairPlaySession:0];
  uint64_t v4 = +[NSURLSessionConfiguration backgroundSessionConfigurationWithIdentifier:@"com.apple.gamed.networking.background"];
  [*(id *)(a1 + 32) setBackgroundConfig:v4];

  id v5 = [*(id *)(a1 + 32) backgroundConfig];
  [v5 setDiscretionary:0];

  uint64_t v6 = [[GKNetworkRequestManagerSessionDelegate alloc] initWithNetworkManager:*(void *)(a1 + 32)];
  [*(id *)(a1 + 32) setBackgroundTasksSessionDelegate:v6];

  id v7 = [*(id *)(a1 + 32) backgroundConfig];
  id v8 = [*(id *)(a1 + 32) backgroundTasksSessionDelegate];
  id v9 = [*(id *)(a1 + 32) operationQueue];
  uint64_t v10 = +[NSURLSession sessionWithConfiguration:v7 delegate:v8 delegateQueue:v9];
  [*(id *)(a1 + 32) setBackgroundSession:v10];

  [*(id *)(a1 + 32) setCurrentState:1];
  id v11 = [*(id *)(a1 + 32) backgroundSession];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_1000BFEBC;
  void v12[3] = &unk_1002D8F90;
  void v12[4] = *(void *)(a1 + 32);
  [v11 getAllTasksWithCompletionHandler:v12];
}

void sub_1000BFEBC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!os_log_GKGeneral) {
    id v4 = (id)GKOSLoggers();
  }
  id v5 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = v5;
    id v7 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v3 count]);
    *(_DWORD *)buf = 138412290;
    long long v15 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "GKNetworkRequestManager setupSessionsAsync tasks: %@", buf, 0xCu);
  }
  if (v3)
  {
    id v8 = [*(id *)(a1 + 32) stateQueue];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    void v11[2] = sub_1000C0040;
    v11[3] = &unk_1002D3B38;
    id v9 = v3;
    uint64_t v10 = *(void *)(a1 + 32);
    id v12 = v9;
    uint64_t v13 = v10;
    dispatch_async(v8, v11);
  }
}

void sub_1000C0040(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v37 = (uint64_t)[*(id *)(a1 + 32) count];
  if (v37 < 61 || ([*(id *)(v1 + 40) reportedExessiveRequests] & 1) != 0)
  {
    id v2 = 0;
    int v3 = 0;
  }
  else
  {
    id v2 = objc_alloc_init((Class)NSMutableDictionary);
    int v3 = 1;
  }
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  id obj = *(id *)(v1 + 32);
  id v4 = [obj countByEnumeratingWithState:&v44 objects:v53 count:16];
  uint64_t v38 = v1;
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v45;
    do
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v45 != v6) {
          objc_enumerationMutation(obj);
        }
        id v8 = *(void **)(*((void *)&v44 + 1) + 8 * i);
        if (!os_log_GKGeneral) {
          id v9 = (id)GKOSLoggers();
        }
        uint64_t v10 = (void *)os_log_GKDaemon;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          id v11 = v10;
          id v12 = +[GKNetworkRequestManager dictionaryFromTaskDescription:v8];
          *(_DWORD *)buf = 138412290;
          long long v52 = v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "GKNetworkRequestManager setupSessionsAsync task: %@", buf, 0xCu);
        }
        uint64_t v13 = +[GKNetworkRequestManager networkRequestFromNsurlTask:v8];
        long long v14 = v13;
        if (v13)
        {
          [v13 setCurrentlyRunning:1];
          long long v15 = *(void **)(v1 + 40);
          id v16 = [v14 taskInfo];
          [v15 addNetworkRequest:v14 description:v16 clientProxy:0];

          if (v3)
          {
            uint64_t v17 = [(id)objc_opt_class() bagKey];
            id v18 = [v2 objectForKeyedSubscript:v17];
            if (v18)
            {
              uint64_t v19 = v18;
              id v20 = [objc_alloc((Class)NSNumber) initWithInt:[v18 intValue] + 1];

              [v2 setObject:v20 forKeyedSubscript:v17];
              uint64_t v1 = v38;
            }
            else
            {
              [v2 setObject:&off_1002F2120 forKeyedSubscript:v17];
            }
          }
        }
        else
        {
          if (!os_log_GKGeneral) {
            id v21 = (id)GKOSLoggers();
          }
          long long v22 = os_log_GKDaemon;
          if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "GKNetworkRequestManager got an invalid request, skipping", buf, 2u);
          }
          [v8 cancel];
        }
      }
      id v5 = [obj countByEnumeratingWithState:&v44 objects:v53 count:16];
    }
    while (v5);
  }

  if (v3)
  {
    id v23 = objc_alloc_init((Class)NSString);
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v24 = [v2 allKeys];
    id v25 = [v24 countByEnumeratingWithState:&v40 objects:v50 count:16];
    if (v25)
    {
      id v26 = v25;
      uint64_t v27 = *(void *)v41;
      do
      {
        uint64_t v28 = 0;
        uint64_t v29 = v23;
        do
        {
          if (*(void *)v41 != v27) {
            objc_enumerationMutation(v24);
          }
          uint64_t v30 = *(void *)(*((void *)&v40 + 1) + 8 * (void)v28);
          id v31 = [v2 objectForKeyedSubscript:v30];
          id v23 = +[NSString stringWithFormat:@"%@ %@:%@", v29, v30, v31];

          uint64_t v28 = (char *)v28 + 1;
          uint64_t v29 = v23;
        }
        while (v26 != v28);
        id v26 = [v24 countByEnumeratingWithState:&v40 objects:v50 count:16];
      }
      while (v26);
    }

    v48[0] = @"concurrentCount";
    long long v32 = +[NSNumber numberWithLong:v37];
    v48[1] = @"concurrentBreakDown";
    v49[0] = v32;
    v49[1] = v23;
    uint64_t v33 = +[NSDictionary dictionaryWithObjects:v49 forKeys:v48 count:2];

    if (!os_log_GKGeneral) {
      id v34 = (id)GKOSLoggers();
    }
    id v35 = os_log_GKDaemon;
    uint64_t v1 = v38;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      long long v52 = v33;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "GKNetworkRequestManager sending event %@", buf, 0xCu);
    }
    uint64_t v36 = +[GKReporter reporter];
    [v36 reportEvent:GKReporterDomainNetworkRequests type:GKNetworkRequestCount payload:v33];

    [*(id *)(v38 + 40) setReportedExessiveRequests:1];
  }
  [*(id *)(v1 + 40) setCurrentState:2];
}

void sub_1000C05F8(id a1)
{
  qword_1003296F8 = +[NSSet setWithArray:&off_1002F2EE8];

  _objc_release_x1();
}

void sub_1000C06A8(id a1)
{
  v4[0] = @"gk-get-activity-feed";
  v4[1] = @"gk-get-friends-latest-activity";
  v4[2] = @"gk-challenge-accept";
  v4[3] = @"gk-challenge-compare";
  void v4[4] = @"gk-challenge-create";
  void v4[5] = @"gk-challenge-create-invite-code";
  v4[6] = @"gk-challenge-detail";
  v4[7] = @"gk-challenge-get-completed";
  v4[8] = @"gk-challenge-get-completed-summary";
  v4[9] = @"gk-challenge-invite";
  v4[10] = @"gk-challenge-leave";
  v4[11] = @"gk-challenge-summary";
  v4[12] = @"gk-accept-friend-invitation";
  v4[13] = @"gk-cancel-friend-invitation";
  v4[14] = @"gk-ignore-friend-invitation";
  v4[15] = GKBagKeyGetFriendInvitationMailbox;
  v4[16] = @"gk-send-friend-invitation";
  uint64_t v1 = +[NSArray arrayWithObjects:v4 count:17];
  uint64_t v2 = +[NSSet setWithArray:v1];
  int v3 = (void *)qword_100329708;
  qword_100329708 = v2;
}

void sub_1000C0A34(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    unsigned int v2 = +[GKNetworkRequestManager useJSONForBagKey:*(void *)(a1 + 40)];
    uint64_t v3 = *(void *)(a1 + 32);
    if (v2) {
      +[NSJSONSerialization dataWithJSONObject:v3 options:0 error:0];
    }
    else {
    id v4 = +[NSPropertyListSerialization dataWithPropertyList:v3 format:100 options:0 error:0];
    }
  }
  else
  {
    id v4 = 0;
  }
  id v5 = +[GKDataRequestManager sharedManager];
  uint64_t v6 = [v5 pushToken];
  id v7 = [v5 storeBag];
  id v8 = [v7 APNSRequired];
  unsigned __int8 v9 = [v8 containsObject:*(void *)(a1 + 40)];

  uint64_t v10 = [*(id *)(a1 + 48) authenticationToken];
  id v11 = (void *)v10;
  id v12 = &stru_1002E4F58;
  if (v10) {
    id v12 = (__CFString *)v10;
  }
  uint64_t v13 = v12;

  if (![(__CFString *)v13 length])
  {
    if (!os_log_GKGeneral) {
      id v14 = (id)GKOSLoggers();
    }
    long long v15 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000C96E8(v15);
    }
  }
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v17 = [*(id *)(a1 + 56) stateQueue];
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  void v22[2] = sub_1000C0CD8;
  v22[3] = &unk_1002D8FF8;
  id v23 = v7;
  id v24 = *(id *)(a1 + 48);
  id v25 = v13;
  id v26 = v6;
  id v27 = *(id *)(a1 + 64);
  id v28 = v4;
  unsigned __int8 v32 = v9;
  id v29 = *(id *)(a1 + 72);
  id v30 = *(id *)(a1 + 40);
  id v31 = *(id *)(a1 + 80);
  id v18 = v4;
  id v19 = v6;
  id v20 = v13;
  id v21 = v7;
  [v21 getURLForKey:v16 queue:v17 handler:v22];
}

void sub_1000C0CD8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = *(void **)(a1 + 40);
  id v5 = a2;
  uint64_t v6 = [v4 playerInternal];
  id v7 = [v6 playerID];
  BYTE1(v10) = *(unsigned char *)(a1 + 104);
  LOBYTE(v10) = 0;
  [v3 requestWithURL:v5 playerID:v7 authToken:*(void *)(a1 + 48) pushToken:*(void *)(a1 + 56) client:*(void *)(a1 + 64) postData:*(void *)(a1 + 72) includeUDID:v10 includeAPNS:*(void *)(a1 + 80)];
  id v11 = (id)objc_claimAutoreleasedReturnValue();

  if (+[GKNetworkRequestManager useJSONForBagKey:*(void *)(a1 + 88)])
  {
    [v11 setValue:@"application/json" forHTTPHeaderField:@"content-type"];
    [v11 setValue:@"application/json" forHTTPHeaderField:@"Accept"];
  }
  [v11 setCachePolicy:4];
  [v11 setValue:@"ra,fp" forHTTPHeaderField:@"x-gk-client-capabilities"];
  id v8 = [*(id *)(a1 + 64) originalBundleIdentifier];

  if (v8)
  {
    unsigned __int8 v9 = [*(id *)(a1 + 64) originalBundleIdentifier];
    [v11 setValue:v9 forHTTPHeaderField:@"x-gk-host-bundle-id"];
  }
  if (+[GKNetworkRequestManager entityIsReleaseStateAwareForBagKey:](GKNetworkRequestManager, "entityIsReleaseStateAwareForBagKey:", *(void *)(a1 + 88))&& [*(id *)(a1 + 64) isDevSigned])
  {
    [v11 setValue:@"prerelease" forHTTPHeaderField:@"x-gk-release-state"];
  }
  +[GKStoreBag addAppOriginHeadersToRequest:v11 clientProxy:*(void *)(a1 + 64)];
  (*(void (**)(void))(*(void *)(a1 + 96) + 16))();
}

void sub_1000C1008(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 40))
  {
    id v4 = [*(id *)(a1 + 32) handlerQueue];
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    uint64_t v5[2] = sub_1000C10D4;
    v5[3] = &unk_1002D3930;
    id v7 = *(id *)(a1 + 40);
    id v6 = v3;
    dispatch_async(v4, v5);
  }
}

uint64_t sub_1000C10D4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1000C10E8(uint64_t a1)
{
  [*(id *)(a1 + 32) getFairPlaySession:0];
  unsigned int v2 = [(id)objc_opt_class() bagKey];
  id v3 = [*(id *)(a1 + 40) postBody];
  if (![*(id *)(a1 + 32) beforeFirstUnlock])
  {
    id v4 = +[GKDataRequestManager sharedManager];
    unsigned __int8 v9 = [v4 storeBag];
    uint64_t v10 = *(void *)(a1 + 48);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    void v14[2] = sub_1000C1360;
    void v14[3] = &unk_1002D9048;
    id v21 = *(id *)(a1 + 64);
    id v15 = v9;
    id v11 = v2;
    uint64_t v12 = *(void *)(a1 + 32);
    id v16 = v11;
    uint64_t v17 = v12;
    id v18 = v3;
    id v19 = *(id *)(a1 + 48);
    id v20 = *(id *)(a1 + 40);
    id v13 = v9;
    [v13 verifyEligibilityForBagKey:v11 replyQueue:0 client:v10 completion:v14];

LABEL_9:
    goto LABEL_10;
  }
  if (*(void *)(a1 + 56))
  {
    id v4 = +[NSError userErrorForCode:31 underlyingError:0];
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers();
    }
    id v6 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      id v7 = *(void **)(a1 + 32);
      id v8 = v6;
      *(_DWORD *)buf = 67109378;
      unsigned int v23 = [v7 beforeFirstUnlock];
      __int16 v24 = 2112;
      id v25 = v4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "GKNetworkRequestManager cannot send due to not being initialized beforeFirstUnlock: %d , error: %@", buf, 0x12u);
    }
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
    goto LABEL_9;
  }
LABEL_10:
}

void sub_1000C1360(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    id v5 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      id v6 = v5;
      id v7 = [v3 localizedDescription];
      *(_DWORD *)buf = 138412290;
      id v25 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "GKNetworkRequestManager ignoring request to write to network as the request isn't eligible: %@", buf, 0xCu);
    }
    (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
  }
  else
  {
    id v8 = *(void **)(a1 + 32);
    if (v8)
    {
      unsigned __int8 v9 = [v8 signatureRequired];
      unsigned __int8 v10 = [v9 containsObject:*(void *)(a1 + 40)];
    }
    else
    {
      unsigned __int8 v10 = 0;
    }
    uint64_t v12 = *(void *)(a1 + 40);
    id v11 = *(void **)(a1 + 48);
    uint64_t v13 = *(void *)(a1 + 56);
    uint64_t v14 = *(void *)(a1 + 64);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    void v17[2] = sub_1000C156C;
    void v17[3] = &unk_1002D9020;
    unsigned __int8 v23 = v10;
    id v18 = *(id *)(a1 + 72);
    id v15 = *(id *)(a1 + 56);
    uint64_t v16 = *(void *)(a1 + 48);
    id v19 = v15;
    uint64_t v20 = v16;
    id v21 = *(id *)(a1 + 64);
    id v22 = *(id *)(a1 + 80);
    [v11 assembleRequest:v13 bagKey:v12 clientProxy:v14 sapSession:0 handler:v17];
  }
}

void sub_1000C156C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (*(unsigned char *)(a1 + 72)) {
    [v3 setValue:@"1" forHTTPHeaderField:@"x-gk-sap-signature"];
  }
  [*(id *)(a1 + 32) setNsurlRequest:v4];
  [*(id *)(a1 + 32) setCurrentlyRunning:0];
  if (!os_log_GKGeneral) {
    id v5 = (id)GKOSLoggers();
  }
  id v6 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(a1 + 40);
    id v8 = v6;
    unsigned __int8 v9 = [v4 loggableHeaders];
    int v13 = 138412802;
    uint64_t v14 = v4;
    __int16 v15 = 2112;
    uint64_t v16 = v7;
    __int16 v17 = 2112;
    id v18 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "GKNetworkRequestManager sending background %@ postBody:%@ {\nheaders: %@}", (uint8_t *)&v13, 0x20u);
  }
  unsigned __int8 v10 = *(void **)(a1 + 48);
  id v11 = *(void **)(a1 + 32);
  uint64_t v12 = [v11 taskInfo];
  [v10 addNetworkRequest:v11 description:v12 clientProxy:*(void *)(a1 + 56)];

  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_1000C1AFC(id *a1)
{
  unsigned int v2 = [a1[4] allHeaderFields];
  id v7 = [v2 objectForKey:@"Retry-After"];

  if (v7)
  {
    id v3 = a1[5];
    id v4 = [(id)objc_opt_class() bagKey];
    [v7 doubleValue];
    [v3 setWaitPeriod:v4];
  }
  id v5 = [a1[6] bundleID];
  id v6 = +[GKClientProxy clientForBundleID:v5 pid:0 createIfNecessary:1];

  [a1[5] writeToNetwork:a1[6] clientProxy:v6 handler:0];
}

void sub_1000C1F28(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) canSafelyIssueRequest:*(void *)(a1 + 40)];
  if (v4)
  {
    (*(void (**)(double))(*(void *)(a1 + 80) + 16))(0.0);
  }
  else
  {
    id v5 = +[GKDataRequestManager sharedManager];
    id v6 = [v5 storeBag];
    id v7 = v6;
    id v18 = v5;
    if (v6
      && ([v6 signatureRequired],
          id v8 = objc_claimAutoreleasedReturnValue(),
          unsigned int v9 = [v8 containsObject:*(void *)(a1 + 40)],
          v8,
          v9))
    {
      id v10 = v3;
    }
    else
    {
      id v10 = 0;
    }
    id v11 = *(void **)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v13 = *(void *)(a1 + 48);
    uint64_t v14 = *(void *)(a1 + 56);
    uint64_t v15 = *(void *)(a1 + 64);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    void v19[2] = sub_1000C20F8;
    void v19[3] = &unk_1002D9100;
    id v25 = *(id *)(a1 + 80);
    id v16 = *(id *)(a1 + 72);
    uint64_t v17 = *(void *)(a1 + 32);
    id v20 = v16;
    uint64_t v21 = v17;
    id v22 = *(id *)(a1 + 56);
    id v23 = *(id *)(a1 + 40);
    id v24 = *(id *)(a1 + 48);
    [v11 assembleRequestForPlayer:v13 bagKey:v12 clientProxy:v14 sapSession:v10 playerCredential:v15 handler:v19];
  }
}

void sub_1000C20F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (*(void *)(a1 + 32))
    {
      if (!os_log_GKGeneral) {
        id v4 = (id)GKOSLoggers();
      }
      id v5 = (void *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        id v6 = *(void **)(a1 + 32);
        id v7 = v5;
        id v8 = [v6 localeIdentifier];
        unsigned int v9 = [v3 URL];
        *(_DWORD *)buf = 138412546;
        id v28 = v8;
        __int16 v29 = 2112;
        id v30 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Overriding locale to %@ for request to %@", buf, 0x16u);
      }
      [v3 setLocale:*(void *)(a1 + 32) isOverridingUsersPreferredLanguage:1];
    }
    id v10 = objc_alloc((Class)NSURLSessionConfiguration);
    id v11 = [*(id *)(a1 + 40) inProcessConfig];
    id v12 = [v10 _initWithConfiguration:v11];

    uint64_t v13 = [*(id *)(a1 + 48) originalBundleIdentifier];
    [v12 set_sourceApplicationBundleIdentifier:v13];

    +[GKStoreBag addAuthHeadersToRequest:v3];
    uint64_t v14 = [*(id *)(a1 + 40) inProcessSession];
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    void v24[2] = sub_1000C2494;
    v24[3] = &unk_1002D90D8;
    void v24[4] = *(void *)(a1 + 40);
    id v25 = *(id *)(a1 + 56);
    id v26 = *(id *)(a1 + 72);
    uint64_t v15 = [v14 dataTaskWithRequest:v3 completionHandler:v24];

    if (!os_log_GKGeneral) {
      id v16 = (id)GKOSLoggers();
    }
    uint64_t v17 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      id v18 = v17;
      id v19 = [v3 URL];
      uint64_t v20 = *(void *)(a1 + 64);
      uint64_t v21 = [v3 loggableHeaders];
      *(_DWORD *)buf = 138413314;
      id v28 = v15;
      __int16 v29 = 2112;
      id v30 = v19;
      __int16 v31 = 2112;
      uint64_t v32 = v20;
      __int16 v33 = 2112;
      id v34 = v3;
      __int16 v35 = 2112;
      uint64_t v36 = v21;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "GKNetworkRequestManager sending in process task: %@ \nREQUEST:%@ postBody:%@ request: %@ {\nheaders: %@}", buf, 0x34u);
    }
    [v15 _adoptEffectiveConfiguration:v12];
    [v15 resume];
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 72);
    NSErrorUserInfoKey v37 = NSLocalizedFailureReasonErrorKey;
    CFStringRef v38 = @"Could not create network task";
    id v12 = +[NSDictionary dictionaryWithObjects:&v38 forKeys:&v37 count:1];
    id v23 = +[NSError userErrorForCode:3 userInfo:v12];
    (*(void (**)(uint64_t, void, void *, double))(v22 + 16))(v22, 0, v23, 0.0);
  }
}

void sub_1000C2494(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = v8;
  [v10 _maxAge];
  double v12 = v11;
  if ([v10 statusCode] == (id)520)
  {
    uint64_t v13 = [v10 allHeaderFields];
    uint64_t v14 = [v13 objectForKey:@"Retry-After"];

    if (v14)
    {
      uint64_t v15 = (void *)a1[4];
      uint64_t v16 = a1[5];
      [v14 doubleValue];
      [v15 setWaitPeriod:v16];
    }
    NSErrorUserInfoKey v46 = NSLocalizedFailureReasonErrorKey;
    CFStringRef v47 = @"Server returned 520 with a wait period";
    uint64_t v17 = +[NSDictionary dictionaryWithObjects:&v47 forKeys:&v46 count:1];
    id v18 = +[NSError userErrorForCode:3 userInfo:v17];

    goto LABEL_5;
  }
  if (v9)
  {
    id v18 = [v9 serializableError];
    goto LABEL_8;
  }
  if (!v7)
  {
    NSErrorUserInfoKey v44 = NSLocalizedFailureReasonErrorKey;
    CFStringRef v45 = @"Empty server response";
    uint64_t v14 = +[NSDictionary dictionaryWithObjects:&v45 forKeys:&v44 count:1];
    id v18 = +[NSError userErrorForCode:3 userInfo:v14];
LABEL_5:

LABEL_8:
    id v19 = 0;
    goto LABEL_9;
  }
  id v28 = [v10 allHeaderFields];
  __int16 v29 = [v28 objectForKeyedSubscript:@"Content-Type"];
  unsigned int v30 = [v29 isEqualToString:@"application/json"];

  if (v30)
  {
    __int16 v33 = 0;
    id v19 = +[NSDictionary _gkDictionaryWithServerDataJson:v7 error:&v33];
    __int16 v31 = v33;
  }
  else
  {
    uint64_t v32 = 0;
    id v19 = +[NSDictionary _gkDictionaryWithServerData:v7 error:&v32];
    __int16 v31 = v32;
  }
  id v18 = v31;
LABEL_9:
  if (!os_log_GKGeneral) {
    id v20 = (id)GKOSLoggers();
  }
  uint64_t v21 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v22 = v21;
    id v23 = [v10 URL];
    id v24 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v10 statusCode]);
    id v25 = [v10 allHeaderFields];
    *(_DWORD *)buf = 138413314;
    __int16 v35 = v23;
    __int16 v36 = 2112;
    NSErrorUserInfoKey v37 = v24;
    __int16 v38 = 2112;
    id v39 = v9;
    __int16 v40 = 2112;
    long long v41 = v25;
    __int16 v42 = 2112;
    long long v43 = v19;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "GKNetworkRequestManager in process task completed:%@ code:%@ error: %@ headers: %@ plist: %@", buf, 0x34u);
  }
  id v26 = [v18 underlyingErrors];
  unsigned int v27 = [v26 _gkContainsObjectPassingTest:&stru_1002D90B0];

  if (v27)
  {

    id v18 = 0;
  }
  (*(void (**)(double))(a1[6] + 16))(v12);
}

BOOL sub_1000C2850(id a1, NSError *a2)
{
  unsigned int v2 = a2;
  BOOL v3 = (id)[(NSError *)v2 code] == (id)5044 || (id)[(NSError *)v2 code] == (id)5043;

  return v3;
}

void sub_1000C2D44(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) stateQueue];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_1000C2DE8;
  v5[3] = &unk_1002D3B38;
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = v3;
  uint64_t v7 = v4;
  dispatch_async(v2, v5);
}

void sub_1000C2DE8(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers();
  }
  id v3 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "GKNetworkRequestManager issuing pending requests", buf, 2u);
  }
  uint64_t v4 = +[NSPredicate predicateWithFormat:@"lastPathComponent CONTAINS %@", *(void *)(a1 + 32)];
  id v5 = [*(id *)(a1 + 40) pendingLocation];
  id v6 = +[NSURL fileURLWithPath:v5];

  if (v6)
  {
    uint64_t v7 = +[NSFileManager defaultManager];
    id v8 = [v7 contentsOfDirectoryAtURL:v6 includingPropertiesForKeys:&__NSArray0__struct options:0 error:0];
    id v9 = [v8 filteredArrayUsingPredicate:v4];

    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    id v10 = v9;
    id v11 = [v10 countByEnumeratingWithState:&v28 objects:v34 count:16];
    if (v11)
    {
      id v12 = v11;
      id v26 = v6;
      unsigned int v27 = v4;
      uint64_t v13 = 0;
      uint64_t v14 = *(void *)v29;
      do
      {
        uint64_t v15 = 0;
        uint64_t v16 = v13;
        do
        {
          if (*(void *)v29 != v14) {
            objc_enumerationMutation(v10);
          }
          uint64_t v17 = *(void **)(*((void *)&v28 + 1) + 8 * (void)v15);
          if (!os_log_GKGeneral) {
            id v18 = (id)GKOSLoggers();
          }
          id v19 = os_log_GKDaemon;
          if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            __int16 v33 = v17;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Issueing: %@", buf, 0xCu);
          }
          id v20 = *(void **)(a1 + 40);
          uint64_t v21 = [v17 lastPathComponent];
          uint64_t v22 = [v20 taskFromIdentifier:v21];

          id v23 = [v22 bundleID];
          uint64_t v13 = +[GKClientProxy clientForBundleID:v23 pid:0 createIfNecessary:1];

          [v22 setIssueRequests:1];
          [*(id *)(a1 + 40) writeToNetwork:v22 clientProxy:v13 handler:0];

          uint64_t v15 = (char *)v15 + 1;
          uint64_t v16 = v13;
        }
        while (v12 != v15);
        id v12 = [v10 countByEnumeratingWithState:&v28 objects:v34 count:16];
      }
      while (v12);

      id v6 = v26;
      uint64_t v4 = v27;
    }
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v24 = (id)GKOSLoggers();
    }
    id v25 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000C972C(v25);
    }
  }
}

id networkRequestIdentifier(void *a1)
{
  id v1 = a1;
  id v2 = [v1 bundleID];
  id v3 = [v1 playerID];
  uint64_t v4 = objc_opt_class();

  id v5 = [v4 bagKey];
  id v6 = +[NSString stringWithFormat:@"%@+%@+%@", v2, v3, v5];

  return v6;
}

void updateCoalescingState(int a1, void *a2, void *a3)
{
  id v8 = a3;
  id v5 = a2;
  id v6 = [v8 requestIdentifier];
  uint64_t v7 = [v5 alreadyCoalescingNetworkRequests];

  if (a1) {
    [v7 setObject:v8 forKeyedSubscript:v6];
  }
  else {
    [v7 removeObjectForKey:v6];
  }
}

BOOL alreadyCoalescing(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [a1 alreadyCoalescingNetworkRequests];
  id v5 = [v4 objectForKeyedSubscript:v3];

  return v5 != 0;
}

void handleStandardRequest(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  id v11 = [v7 requestIdentifier];
  id v12 = +[GKNetworkRequestManager commonNetworkRequestManager];
  uint64_t v13 = [v8 currentTasks];
  uint64_t v14 = [v13 objectForKeyedSubscript:v11];

  unsigned __int8 v15 = [v12 managerReady];
  if (![v7 currentlyRunning])
  {
    id v59 = v10;
    if (objc_opt_respondsToSelector())
    {
      id v19 = [v12 contentsOfPendingStore:v11];
      if (v19)
      {
        if (!os_log_GKGeneral) {
          id v20 = (id)GKOSLoggers();
        }
        uint64_t v21 = os_log_GKDaemon;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          id v61 = v11;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "GKNetworkRequestManager adding in pending data: %@", buf, 0xCu);
        }
        uint64_t v22 = [v12 taskFromIdentifier:v11];
        [v7 mergeRequestData:v22];
      }
    }
    id v23 = [(id)objc_opt_class() bagKey];
    id v18 = [v12 canSafelyIssueRequest:v23];

    if (v18) {
      unsigned __int8 v24 = 0;
    }
    else {
      unsigned __int8 v24 = v15;
    }
    if ((v24 & 1) == 0)
    {
      if (!os_log_GKGeneral) {
        id v28 = (id)GKOSLoggers();
      }
      long long v29 = (void *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        long long v30 = v29;
        long long v31 = [v7 nsurlTask];
        *(_DWORD *)buf = 138412802;
        id v61 = v11;
        __int16 v62 = 2112;
        id v63 = v31;
        __int16 v64 = 2112;
        long long v65 = v18;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "GKNetworkRequestManager cannot issue request, writing to pending: %@ : %@ %@", buf, 0x20u);
      }
      id v27 = [v7 taskInfo];
      uint64_t v32 = [v7 requestIdentifier];
      [v12 writeToPendingStore:v27 fileName:v32];

      goto LABEL_54;
    }
    id v58 = v9;
    if (v14)
    {
      if ([v7 isDuplicateRequest:v14])
      {
        if (!os_log_GKGeneral) {
          id v25 = (id)GKOSLoggers();
        }
        id v26 = os_log_GKDaemon;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          id v61 = v11;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "GKNetworkRequestManager duplicate request skipping: %@", buf, 0xCu);
        }
        id v27 = [v7 requestIdentifier];
        [v12 cleanUpPendingStore:v27];
LABEL_54:

        id v10 = v59;
        goto LABEL_55;
      }
      if (!os_log_GKGeneral) {
        id v33 = (id)GKOSLoggers();
      }
      id v34 = os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v61 = v11;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "GKNetworkRequestManager non duplicate value for same request, reissuing: %@", buf, 0xCu);
      }
      __int16 v35 = [v14 nsurlTask];
      [v35 cancel];

      if (objc_opt_respondsToSelector())
      {
        if (!os_log_GKGeneral) {
          id v36 = (id)GKOSLoggers();
        }
        NSErrorUserInfoKey v37 = os_log_GKDaemon;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          id v61 = v11;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "GKNetworkRequestManager non duplicate requires merge of data: %@", buf, 0xCu);
        }
        [v7 mergeRequestData:v14];
      }
    }
    __int16 v38 = [v8 currentTasks];
    [v38 setObject:v7 forKeyedSubscript:v11];

    id v39 = [v7 requestIdentifier];
    [v12 cleanUpPendingStore:v39];

    if (!os_log_GKGeneral) {
      id v40 = (id)GKOSLoggers();
    }
    long long v41 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      __int16 v42 = v41;
      long long v43 = objc_opt_class();
      id v57 = v43;
      NSErrorUserInfoKey v44 = [v7 nsurlRequest];
      CFStringRef v45 = [v44 allHTTPHeaderFields];
      *(_DWORD *)buf = 138412802;
      id v61 = v43;
      __int16 v62 = 2112;
      id v63 = v7;
      __int16 v64 = 2112;
      long long v65 = v45;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "%@ issuing request: %@ headers: %@", buf, 0x20u);
    }
    NSErrorUserInfoKey v46 = [v7 nsurlRequest];
    CFStringRef v47 = [v7 taskInfo];
    uint64_t v48 = +[GKNetworkRequestManager taskWithRequest:v46 description:v47 session:v58];
    [v7 setNsurlTask:v48];

    uint64_t v49 = [v7 nsurlTask];

    if (v49)
    {
      id v50 = objc_alloc((Class)NSURLSessionConfiguration);
      id v51 = [v12 backgroundConfig];
      id v27 = [v50 _initWithConfiguration:v51];

      long long v52 = [v59 originalBundleIdentifier];
      [v27 set_sourceApplicationBundleIdentifier:v52];

      long long v53 = [v7 nsurlTask];
      [v53 _adoptEffectiveConfiguration:v27];

      uint64_t v54 = [v7 nsurlTask];
      [v54 resume];
    }
    else
    {
      if (!os_log_GKGeneral) {
        id v55 = (id)GKOSLoggers();
      }
      uint64_t v56 = os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v61 = v11;
        _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_INFO, "GKNetworkRequestManager cannot issue request as it is nil, writing to pending: %@", buf, 0xCu);
      }
      id v27 = [v7 taskInfo];
      uint64_t v54 = [v7 requestIdentifier];
      [v12 writeToPendingStore:v27 fileName:v54];
    }

    id v9 = v58;
    goto LABEL_54;
  }
  if (v14)
  {
    if (!os_log_GKGeneral) {
      id v16 = (id)GKOSLoggers();
    }
    uint64_t v17 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v61 = v11;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "GKNetworkRequestManager possible duplicate tasks when syncing nsurlsession: %@", buf, 0xCu);
    }
  }
  id v18 = [v8 currentTasks];
  [v18 setObject:v7 forKeyedSubscript:v11];
LABEL_55:
}

void handleCoalescingRequest(void *a1, void *a2, void *a3, unint64_t a4, void *a5)
{
  id v8 = a1;
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  id v12 = [v8 bundleID];

  if (v12) {
    [v8 bundleID];
  }
  else {
  uint64_t v13 = [v9 bundleIdentifier];
  }
  if (v13)
  {
    id v202 = v11;
    v210 = +[GKNetworkRequestManager commonNetworkRequestManager];
    unsigned int v201 = [v210 managerReady];
    id v14 = objc_alloc_init((Class)NSMutableDictionary);
    unsigned __int8 v15 = [v10 pendingRequests];
    id v16 = [v15 objectForKeyedSubscript:v13];

    v206 = [v8 requestIdentifier];
    uint64_t v17 = v10;
    BOOL v18 = alreadyCoalescing(v9, v206);
    id v19 = v16;
    unint64_t v205 = (unint64_t)[v16 numberOfRequests];
    v207 = v17;
    id v20 = [v17 currentTasks];
    uint64_t v21 = [v20 objectForKeyedSubscript:v13];

    if (!os_log_GKGeneral) {
      id v22 = (id)GKOSLoggers();
    }
    id v23 = (void *)os_log_GKDaemon;
    id v24 = v9;
    v208 = v21;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      id v25 = v23;
      id v26 = objc_opt_class();
      id v27 = v26;
      id v28 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v8 currentlyRunning]);
      *(_DWORD *)buf = 138414082;
      id v223 = v26;
      uint64_t v21 = v208;
      __int16 v224 = 2112;
      unint64_t v225 = (unint64_t)v13;
      __int16 v226 = 2048;
      unint64_t v227 = a4;
      __int16 v228 = 2048;
      *(void *)v229 = v205;
      *(_WORD *)&v229[8] = 1024;
      *(_DWORD *)&v229[10] = v201;
      __int16 v230 = 1024;
      BOOL v231 = v18;
      __int16 v232 = 2112;
      id v233 = v8;
      __int16 v234 = 2112;
      v235 = v28;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "%@ bundleID: %@ previousPending:%ld pending:%ld managerReady: %d clientProxyFlag:%d request:%@ currentlyRunning:%@", buf, 0x4Au);

      id v9 = v24;
    }
    if (!v19)
    {
      long long v29 = [v210 contentsOfPendingStore:v206];
      if (v29)
      {
        id v30 = objc_alloc_init((Class)objc_opt_class());
        [v30 updateWithTaskInfo:v29];
        long long v31 = [v207 pendingRequests];
        id v19 = v30;
        [v31 setObject:v30 forKeyedSubscript:v13];

        if (!os_log_GKGeneral) {
          id v32 = (id)GKOSLoggers();
        }
        id v33 = (void *)os_log_GKDaemon;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          id v34 = v33;
          __int16 v35 = objc_opt_class();
          *(_DWORD *)buf = 138412802;
          id v223 = v35;
          __int16 v224 = 2112;
          unint64_t v225 = (unint64_t)v13;
          __int16 v226 = 2112;
          unint64_t v227 = (unint64_t)v19;
          id v36 = v35;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "%@ bundleID: %@ using file system cache: %@", buf, 0x20u);
        }
      }
      else
      {
        id v19 = 0;
      }

      id v9 = v24;
    }
    long long v41 = [(id)objc_opt_class() bagKey];
    v204 = [v210 canSafelyIssueRequest:v41];

    if ([v8 currentlyRunning])
    {
      if (!v21)
      {
        id v10 = v207;
        if (!os_log_GKGeneral) {
          id v60 = (id)GKOSLoggers();
        }
        id v61 = (void *)os_log_GKDaemon;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          __int16 v62 = v61;
          id v63 = objc_opt_class();
          id v64 = v63;
          long long v65 = [v8 nsurlTask];
          long long v66 = [v65 taskDescription];
          *(_DWORD *)buf = 138413314;
          id v223 = v63;
          __int16 v224 = 2048;
          unint64_t v225 = a4;
          __int16 v226 = 2048;
          unint64_t v227 = v205;
          __int16 v228 = 1024;
          *(_DWORD *)v229 = v201;
          *(_WORD *)&v229[4] = 2112;
          *(void *)&v229[6] = v66;
          _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_INFO, "%@ already running with no other current, update state: previousPending:%ld pending:%ld managerReady: %d request:%@", buf, 0x30u);

          id v9 = v24;
          id v10 = v207;
        }
        long long v67 = [v10 currentTasks];
        [v67 setObject:v8 forKeyedSubscript:v13];

        goto LABEL_42;
      }
      __int16 v42 = [v21 requestData];
      long long v43 = [v8 requestData];
      unsigned int v44 = [v42 isEqualToDictionary:v43];

      id v10 = v207;
      if (v44)
      {
        if (!os_log_GKGeneral) {
          id v45 = (id)GKOSLoggers();
        }
        NSErrorUserInfoKey v46 = (void *)os_log_GKDaemon;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          CFStringRef v47 = v46;
          uint64_t v48 = objc_opt_class();
          id v49 = v48;
          id v50 = [v8 nsurlTask];
          id v51 = [v50 taskDescription];
          *(_DWORD *)buf = 138413314;
          id v223 = v48;
          __int16 v224 = 2048;
          unint64_t v225 = a4;
          __int16 v226 = 2048;
          unint64_t v227 = v205;
          __int16 v228 = 1024;
          *(_DWORD *)v229 = v201;
          *(_WORD *)&v229[4] = 2112;
          *(void *)&v229[6] = v51;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_INFO, "%@ already running this task, doing nothing: previousPending:%ld pending:%ld managerReady: %d request:%@", buf, 0x30u);

          id v9 = v24;
          id v10 = v207;
        }
LABEL_42:
        id v11 = v202;
        id v54 = v19;
LABEL_132:

        goto LABEL_133;
      }
      if (!os_log_GKGeneral) {
        id v68 = (id)GKOSLoggers();
      }
      long long v69 = (void *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        long long v70 = v69;
        long long v71 = objc_opt_class();
        id v72 = v71;
        long long v73 = [v8 nsurlTask];
        long long v74 = [v73 taskDescription];
        *(_DWORD *)buf = 138413314;
        id v223 = v71;
        __int16 v224 = 2048;
        unint64_t v225 = a4;
        __int16 v226 = 2048;
        unint64_t v227 = v205;
        __int16 v228 = 1024;
        *(_DWORD *)v229 = v201;
        *(_WORD *)&v229[4] = 2112;
        *(void *)&v229[6] = v74;
        _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_INFO, "%@ currently running two tasks, cancel and issue again: previousPending:%ld pending:%ld managerReady: %d request:%@", buf, 0x30u);

        id v9 = v24;
      }
      id v75 = [v8 nsurlTask];
      [v75 cancel];

      id v11 = v202;
      id v199 = v19;
      goto LABEL_48;
    }
    if ([v8 coalescingAgent] && v205 != a4)
    {
      int v52 = 0;
      LODWORD(v53) = 1;
      id v11 = v202;
      id v54 = v19;
      goto LABEL_100;
    }
    id v11 = v202;
    if (v204)
    {
      id v54 = v19;
      if (!os_log_GKGeneral) {
        id v55 = (id)GKOSLoggers();
      }
      uint64_t v56 = (void *)os_log_GKDaemon;
      int v52 = 1;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        id v57 = v56;
        id v58 = objc_opt_class();
        *(_DWORD *)buf = 138412290;
        id v223 = v58;
        id v59 = v58;
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_INFO, "%@ do not retry wait period exists, adding to pending", buf, 0xCu);

        id v54 = v19;
      }
      LODWORD(v53) = 0;
LABEL_100:
      if (objc_msgSend(v8, "coalescingAgent", v199))
      {
        if (!os_log_GKGeneral) {
          id v146 = (id)GKOSLoggers();
        }
        v147 = (void *)os_log_GKDaemon;
        id v10 = v207;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          char v148 = (char)v53;
          id v53 = v14;
          id v149 = v54;
          v150 = v147;
          v151 = objc_opt_class();
          *(_DWORD *)buf = 138412546;
          id v223 = v151;
          __int16 v224 = 2112;
          unint64_t v225 = (unint64_t)v8;
          id v152 = v151;
          _os_log_impl((void *)&_mh_execute_header, v150, OS_LOG_TYPE_INFO, "%@ we have already added in the coalescingAgent's data, do nothing: %@", buf, 0x16u);

          id v54 = v149;
          id v14 = v53;
          LOBYTE(v53) = v148;
        }
        if ((v53 & 1) == 0) {
          goto LABEL_132;
        }
      }
      else
      {
        if (!v52)
        {
          if (!os_log_GKGeneral) {
            id v164 = (id)GKOSLoggers();
          }
          v165 = (void *)os_log_GKDaemon;
          id v10 = v207;
          if (!os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO)) {
            goto LABEL_132;
          }
          id v119 = v14;
          id v120 = v54;
          v123 = v165;
          v166 = objc_opt_class();
          *(_DWORD *)buf = 138413314;
          id v223 = v166;
          __int16 v224 = 2048;
          unint64_t v225 = a4;
          __int16 v226 = 2048;
          unint64_t v227 = v205;
          __int16 v228 = 1024;
          *(_DWORD *)v229 = v201;
          *(_WORD *)&v229[4] = 2112;
          *(void *)&v229[6] = v8;
          id v125 = v166;
          v126 = "%@ Issuance failure: previousPending:%ld pending:%ld managerReady: %d request:%@";
          v127 = v123;
          uint32_t v128 = 48;
          goto LABEL_118;
        }
        if (!os_log_GKGeneral) {
          id v153 = (id)GKOSLoggers();
        }
        int v203 = (int)v53;
        v154 = (void *)os_log_GKDaemon;
        id v10 = v207;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          id v155 = v14;
          id v156 = v54;
          v157 = v154;
          v158 = objc_opt_class();
          *(_DWORD *)buf = 138412546;
          id v223 = v158;
          __int16 v224 = 2112;
          unint64_t v225 = (unint64_t)v8;
          id v159 = v158;
          _os_log_impl((void *)&_mh_execute_header, v157, OS_LOG_TYPE_INFO, "%@ adding request to pending:%@", buf, 0x16u);

          id v54 = v156;
          id v14 = v155;
        }
        if (v54)
        {
          id v218 = v14;
          [v8 requestData];
          v161 = v160 = v54;
          [v8 addInRequestData:&v218 additional:v161];
          id v162 = v218;

          id v217 = v162;
          v163 = [v160 requestData];
          [v8 addInRequestData:&v217 additional:v163];
          id v14 = v217;

          id v54 = v160;
          [v160 setRequestData:v14];
        }
        else
        {
          v167 = [v207 pendingRequests];
          [v167 setObject:v8 forKeyedSubscript:v13];

          id v54 = v8;
        }
        if ((uint64_t)[v54 numberOfRequests] < 1)
        {
          if (!v203) {
            goto LABEL_132;
          }
        }
        else
        {
          [v54 taskInfo];
          id v168 = v14;
          v170 = id v169 = v54;
          v171 = [v8 requestIdentifier];
          [v210 writeToPendingStore:v170 fileName:v171];

          id v54 = v169;
          id v14 = v168;
          if ((v203 & 1) == 0) {
            goto LABEL_132;
          }
        }
      }
      if (!os_log_GKGeneral) {
        id v172 = (id)GKOSLoggers();
      }
      v173 = (void *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        id v174 = v14;
        id v175 = v54;
        v176 = v173;
        v177 = objc_opt_class();
        *(_DWORD *)buf = 138413314;
        id v223 = v177;
        __int16 v224 = 2048;
        unint64_t v225 = a4;
        __int16 v226 = 2048;
        unint64_t v227 = v205;
        __int16 v228 = 1024;
        *(_DWORD *)v229 = v201;
        *(_WORD *)&v229[4] = 2112;
        *(void *)&v229[6] = v8;
        id v178 = v177;
        _os_log_impl((void *)&_mh_execute_header, v176, OS_LOG_TYPE_INFO, "%@ Dispatching block: previousPending:%ld pending:%ld managerReady: %d request:%@", buf, 0x30u);

        id v54 = v175;
        id v14 = v174;
      }
      [v8 setCoalescingAgent:1];
      updateCoalescingState(1, v9, v8);
      id v179 = [v54 numberOfRequests];
      int64_t v180 = 1000000000 * (void)[(id)objc_opt_class() coalescingDelay];
      if (v180)
      {
        id v181 = v14;
        id v182 = v54;
        dispatch_time_t v183 = dispatch_time(0, v180);
        v184 = [v210 stateQueue];
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1000C570C;
        block[3] = &unk_1002D9178;
        id v212 = v8;
        id v213 = v10;
        id v214 = v11;
        id v215 = v9;
        id v216 = v179;
        dispatch_time_t v185 = v183;
        id v54 = v182;
        id v14 = v181;
        dispatch_after(v185, v184, block);
      }
      else
      {
        [v8 handleNetworkRequest:v10 session:v11 clientProxy:v9 previousKnownPendingAmount:v179];
      }
      goto LABEL_132;
    }
    id v54 = v19;
    if (v201)
    {
      if ([v8 issueRequests])
      {
        if (v18)
        {
          if (!os_log_GKGeneral) {
            id v113 = (id)GKOSLoggers();
          }
          v114 = (void *)os_log_GKDaemon;
          int v52 = 1;
          if (!os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO)) {
            goto LABEL_73;
          }
          id v115 = v14;
          v116 = v114;
          v117 = objc_opt_class();
          *(_DWORD *)buf = 138413058;
          id v223 = v117;
          __int16 v224 = 2048;
          unint64_t v225 = a4;
          __int16 v226 = 2048;
          unint64_t v227 = v205;
          __int16 v228 = 1024;
          *(_DWORD *)v229 = 1;
          id v118 = v117;
          _os_log_impl((void *)&_mh_execute_header, v116, OS_LOG_TYPE_INFO, "%@ issue pending request while coalescing add to pending, update state: previousPending:%ld pending:%ld managerReady: %d", buf, 0x26u);

          id v54 = v19;
LABEL_72:
          id v14 = v115;
LABEL_73:
          LODWORD(v53) = 0;
          goto LABEL_100;
        }
        if (!os_log_GKGeneral) {
          id v186 = (id)GKOSLoggers();
        }
        v187 = (void *)os_log_GKDaemon;
        id v199 = v19;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          v188 = v187;
          v189 = objc_opt_class();
          *(_DWORD *)buf = 138413058;
          id v223 = v189;
          __int16 v224 = 2048;
          unint64_t v225 = a4;
          __int16 v226 = 2048;
          unint64_t v227 = v205;
          __int16 v228 = 1024;
          *(_DWORD *)v229 = 1;
          id v190 = v189;
          _os_log_impl((void *)&_mh_execute_header, v188, OS_LOG_TYPE_INFO, "%@ issue pending request while not coalescing issue request, update state: previousPending:%ld pending:%ld managerReady: %d", buf, 0x26u);
        }
        goto LABEL_48;
      }
      if (a4 | v205)
      {
        if (v205)
        {
          id v199 = v19;
          if (v205 != a4)
          {
            id v115 = v14;
            if (a4)
            {
              id v54 = v19;
              if (!v18)
              {
                if (!os_log_GKGeneral) {
                  id v191 = (id)GKOSLoggers();
                }
                v192 = (void *)os_log_GKDaemon;
                if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
                {
                  v193 = v192;
                  v194 = objc_opt_class();
                  *(_DWORD *)buf = 138413314;
                  id v223 = v194;
                  __int16 v224 = 2048;
                  unint64_t v225 = a4;
                  __int16 v226 = 2048;
                  unint64_t v227 = v205;
                  __int16 v228 = 1024;
                  *(_DWORD *)v229 = 1;
                  *(_WORD *)&v229[4] = 2112;
                  *(void *)&v229[6] = v8;
                  id v195 = v194;
                  _os_log_impl((void *)&_mh_execute_header, v193, OS_LOG_TYPE_INFO, "%@ dispatch logic failure: previousPending:%ld pending:%ld managerReady: %d request:%@", buf, 0x30u);

                  id v54 = v19;
                }
              }
              int v52 = 0;
            }
            else
            {
              id v54 = v19;
              if (v18 && ![v8 coalescingAgent])
              {
                int v52 = 1;
                goto LABEL_72;
              }
              int v52 = 1;
            }
            LODWORD(v53) = 1;
            goto LABEL_100;
          }
LABEL_48:
          id v221 = v14;
          long long v76 = [v208 requestData:v199];
          [v8 addInRequestData:&v221 additional:v76];
          id v77 = v221;

          id v220 = v77;
          __int16 v78 = [v200 requestData];
          [v8 addInRequestData:&v220 additional:v78];
          id v79 = v220;

          id v219 = v79;
          __int16 v80 = [v8 requestData];
          [v8 addInRequestData:&v219 additional:v80];
          id v14 = v219;

          id v10 = v207;
          if ([v8 numberOfRequests])
          {
            if (!os_log_GKGeneral) {
              id v81 = (id)GKOSLoggers();
            }
            long long v82 = (void *)os_log_GKDaemon;
            if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
            {
              long long v83 = v82;
              long long v84 = objc_opt_class();
              *(_DWORD *)buf = 138412546;
              id v223 = v84;
              __int16 v224 = 2112;
              unint64_t v225 = (unint64_t)v14;
              id v85 = v84;
              _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_INFO, "%@ attempting to issue request:%@", buf, 0x16u);
            }
            if (v208)
            {
              if (!os_log_GKGeneral) {
                id v86 = (id)GKOSLoggers();
              }
              v87 = (void *)os_log_GKDaemon;
              if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
              {
                int64_t v88 = v87;
                int64_t v89 = objc_opt_class();
                *(_DWORD *)buf = 138412546;
                id v223 = v89;
                __int16 v224 = 2112;
                unint64_t v225 = (unint64_t)v8;
                id v90 = v89;
                _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_INFO, "%@ canceling previous request as we are going to replace it with new data: %@", buf, 0x16u);
              }
              __int16 v91 = [v208 nsurlTask];
              [v91 cancel];
            }
            id v92 = [v207 pendingRequests];
            [v92 removeObjectForKey:v13];

            [v8 setRequestData:v14];
            __int16 v93 = [v8 nsurlRequest];
            uint64_t v94 = [v8 postBody];
            _updateRequestBody(v93, (uint64_t)v94);

            uint64_t v95 = [v207 currentTasks];
            [v95 setObject:v8 forKeyedSubscript:v13];

            uint64_t v96 = [v8 nsurlRequest];
            v97 = [v8 taskInfo];
            v98 = +[GKNetworkRequestManager taskWithRequest:v96 description:v97 session:v11];
            [v8 setNsurlTask:v98];

            v99 = [v8 nsurlTask];

            if (v99)
            {
              if (!os_log_GKGeneral) {
                id v100 = (id)GKOSLoggers();
              }
              v101 = (void *)os_log_GKDaemon;
              if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
              {
                v102 = v101;
                v103 = objc_opt_class();
                id v104 = v103;
                v105 = [v8 nsurlTask];
                *(_DWORD *)buf = 138412546;
                id v223 = v103;
                __int16 v224 = 2112;
                unint64_t v225 = (unint64_t)v105;
                _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_INFO, "%@ resuming task:%@", buf, 0x16u);
              }
              id v106 = objc_alloc((Class)NSURLSessionConfiguration);
              v107 = [v210 backgroundConfig];
              id v108 = [v106 _initWithConfiguration:v107];

              v109 = [v9 originalBundleIdentifier];
              [v108 set_sourceApplicationBundleIdentifier:v109];

              v110 = [v8 nsurlTask];
              [v110 _adoptEffectiveConfiguration:v108];

              v111 = [v8 nsurlTask];
              [v111 resume];

              v112 = [v8 requestIdentifier];
              [v210 cleanUpPendingStore:v112];
              id v54 = v19;
            }
            else
            {
              if (!os_log_GKGeneral) {
                id v129 = (id)GKOSLoggers();
              }
              v130 = (void *)os_log_GKDaemon;
              id v54 = v19;
              if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
              {
                v131 = v130;
                v132 = [v8 requestData];
                *(_DWORD *)buf = 138412290;
                id v223 = v132;
                _os_log_impl((void *)&_mh_execute_header, v131, OS_LOG_TYPE_INFO, "GKNetworkRequestManager cannot issue request as it is nil, writing to pending: %@", buf, 0xCu);

                id v54 = v19;
              }
              id v108 = [v54 taskInfo];
              v112 = [v8 requestIdentifier];
              [v210 writeToPendingStore:v108 fileName:v112];
            }

            updateCoalescingState(0, v9, v8);
            id v10 = v207;
            goto LABEL_132;
          }
          id v119 = v14;
          id v120 = v200;
          if (!os_log_GKGeneral) {
            id v121 = (id)GKOSLoggers();
          }
          v122 = (void *)os_log_GKDaemon;
          if (!os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO)) {
            goto LABEL_119;
          }
          v123 = v122;
          v124 = objc_opt_class();
          *(_DWORD *)buf = 138412546;
          id v223 = v124;
          __int16 v224 = 2112;
          unint64_t v225 = (unint64_t)v8;
          id v125 = v124;
          v126 = "%@ new request is empty, skipping: %@";
          v127 = v123;
          uint32_t v128 = 22;
LABEL_118:
          _os_log_impl((void *)&_mh_execute_header, v127, OS_LOG_TYPE_INFO, v126, buf, v128);

LABEL_119:
          id v54 = v120;
          id v14 = v119;
          goto LABEL_132;
        }
        if (!os_log_GKGeneral) {
          id v196 = (id)GKOSLoggers();
        }
        v197 = (void *)os_log_GKDaemon;
        id v10 = v207;
        if (!os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO)) {
          goto LABEL_132;
        }
        id v140 = v14;
        id v141 = v54;
        v142 = v197;
        v198 = objc_opt_class();
        *(_DWORD *)buf = 138413314;
        id v223 = v198;
        __int16 v224 = 2048;
        unint64_t v225 = a4;
        __int16 v226 = 2048;
        unint64_t v227 = 0;
        __int16 v228 = 1024;
        *(_DWORD *)v229 = 1;
        *(_WORD *)&v229[4] = 2112;
        *(void *)&v229[6] = v8;
        id v144 = v198;
        v145 = "%@ Selection logic failure: previousPending:%ld pending:%ld managerReady: %d request:%@";
LABEL_151:
        _os_log_impl((void *)&_mh_execute_header, v142, OS_LOG_TYPE_INFO, v145, buf, 0x30u);

        id v54 = v141;
        id v14 = v140;
        goto LABEL_132;
      }
      if (v18)
      {
        if (!os_log_GKGeneral) {
          id v133 = (id)GKOSLoggers();
        }
        v134 = (void *)os_log_GKDaemon;
        id v10 = v207;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          v135 = v134;
          v136 = objc_opt_class();
          *(_DWORD *)buf = 138413314;
          id v223 = v136;
          __int16 v224 = 2048;
          unint64_t v225 = 0;
          __int16 v226 = 2048;
          unint64_t v227 = 0;
          __int16 v228 = 1024;
          *(_DWORD *)v229 = 1;
          *(_WORD *)&v229[4] = 2112;
          *(void *)&v229[6] = v8;
          id v137 = v136;
          _os_log_impl((void *)&_mh_execute_header, v135, OS_LOG_TYPE_INFO, "%@ first request condition: previousPending:%ld pending:%ld managerReady: %d request:%@", buf, 0x30u);

          id v54 = v19;
        }
        if (![v8 coalescingAgent])
        {
          LODWORD(v53) = 1;
          int v52 = 1;
          goto LABEL_100;
        }
        if (!os_log_GKGeneral) {
          id v138 = (id)GKOSLoggers();
        }
        v139 = (void *)os_log_GKDaemon;
        if (!os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO)) {
          goto LABEL_132;
        }
        id v140 = v14;
        id v141 = v54;
        v142 = v139;
        v143 = objc_opt_class();
        *(_DWORD *)buf = 138413314;
        id v223 = v143;
        __int16 v224 = 2048;
        unint64_t v225 = 0;
        __int16 v226 = 2048;
        unint64_t v227 = 0;
        __int16 v228 = 1024;
        *(_DWORD *)v229 = 1;
        *(_WORD *)&v229[4] = 2112;
        *(void *)&v229[6] = v8;
        id v144 = v143;
        v145 = "%@ stopping coalescing monitoring: previousPending:%ld pending:%ld managerReady: %d request:%@";
        goto LABEL_151;
      }
    }
    else if (v18 && ![v8 coalescingAgent])
    {
      LODWORD(v53) = 0;
LABEL_99:
      int v52 = 1;
      goto LABEL_100;
    }
    LODWORD(v53) = 1;
    goto LABEL_99;
  }
  if (!os_log_GKGeneral) {
    id v37 = (id)GKOSLoggers();
  }
  __int16 v38 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    id v39 = v38;
    *(_DWORD *)buf = 138412546;
    id v223 = (id)objc_opt_class();
    __int16 v224 = 2112;
    unint64_t v225 = (unint64_t)v8;
    id v40 = v223;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "%@ cannot issue a request without bundleId: %@", buf, 0x16u);
  }
LABEL_133:
}

id sub_1000C570C(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleNetworkRequest:*(void *)(a1 + 40) session:*(void *)(a1 + 48) clientProxy:*(void *)(a1 + 56) previousKnownPendingAmount:*(void *)(a1 + 64)];
}

void sub_1000C9670(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "GKNetworkRequestManager fairplay session creation failed due to error: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000C96E8(os_log_t log)
{
  *(_WORD *)id v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "No valid player credentials found. The subsequent network request will not contain an authentication token.", v1, 2u);
}

void sub_1000C972C(os_log_t log)
{
  *(_WORD *)id v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Network Request Manager: failed to load url from pendingLocation", v1, 2u);
}

uint64_t sub_1000C9B08(void *a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers();
  }
  uint64_t v3 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = a1[4];
    uint64_t v4 = (void *)a1[5];
    id v6 = v3;
    id v7 = [v4 loggableHeaders];
    int v9 = 138412546;
    uint64_t v10 = v5;
    __int16 v11 = 2112;
    id v12 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "GKNetworkRequestManager updated headers for: %@ {\nheaders: %@}", (uint8_t *)&v9, 0x16u);
  }
  return (*(uint64_t (**)(void))(a1[6] + 16))();
}

void sub_1000C9C14(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[GKDataRequestManager sharedManager];
  uint64_t v5 = [v4 storeBag];
  id v6 = *(void **)(a1 + 32);
  id v7 = [v6 HTTPBody];
  [v5 signRequest:v6 sapSession:v3 postData:v7];

  if (!os_log_GKGeneral) {
    id v8 = (id)GKOSLoggers();
  }
  int v9 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "GKNetworkRequestManager finished getting session.", v10, 2u);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000CAB04(os_log_t log)
{
  *(_WORD *)id v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "GKNetworkRequestManager is missing.", v1, 2u);
}

void sub_1000CB5C0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000CB62C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000CB698(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000CB8A0(id a1)
{
  qword_100329720 = objc_alloc_init(GKIDSConnectionManager);

  _objc_release_x1();
}

void sub_1000CBB30(uint64_t a1)
{
  id v2 = +[IDSIDQueryController sharedInstance];
  id v3 = objc_alloc_init((Class)IDSIDInfoOptions);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 64);
  id v7 = [*(id *)(a1 + 48) idsDelegateQueue];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000CBC38;
  void v8[3] = &unk_1002D5140;
  id v9 = *(id *)(a1 + 56);
  [v2 idInfoForDestinations:v4 service:v5 infoTypes:v6 options:v3 listenerID:@"com.apple.gamed" queue:v7 completionBlock:v8];
}

uint64_t sub_1000CBC38(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1000CBCFC(uint64_t a1)
{
  return objc_storeWeak((id *)(*(void *)(a1 + 32) + 8), *(id *)(a1 + 40));
}

void sub_1000CC02C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CC0D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CC288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000CC370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000CC600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

id sub_1000CC664(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v6 = 0;
  id v4 = [*(id *)(a1 + 32) getStatement:&v6 forSQL:v3];
  if (!v4)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    id v4 = (id)sqlite3_step(v6);
  }

  return v4;
}

void sub_1000CC6E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CC7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_1000CC818(uint64_t a1, uint64_t a2, void *a3)
{
  id v23 = a3;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id obj = *(id *)(a1 + 32);
  id v5 = [obj countByEnumeratingWithState:&v33 objects:v38 count:16];
  if (v5)
  {
    uint64_t v19 = *(void *)v34;
    do
    {
      id v20 = v5;
      for (uint64_t i = 0; i != v20; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v34 != v19) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void **)(*((void *)&v33 + 1) + 8 * i);
        id v7 = [v6 representedItem];
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        id v22 = v7;
        id v8 = [v22 countByEnumeratingWithState:&v29 objects:v37 count:16];
        if (v8)
        {
          uint64_t v9 = *(void *)v30;
          do
          {
            for (j = 0; j != v8; j = (char *)j + 1)
            {
              if (*(void *)v30 != v9) {
                objc_enumerationMutation(v22);
              }
              __int16 v11 = [*(id *)(*((void *)&v29 + 1) + 8 * (void)j) resourceID];
              id v12 = *(void **)(a1 + 40);
              uint64_t v13 = [v12 requestsInsertSQL];
              v27[0] = _NSConcreteStackBlock;
              v27[1] = 3221225472;
              v27[2] = sub_1000CCBB8;
              void v27[3] = &unk_1002D9240;
              void v27[4] = *(void *)(a1 + 40);
              void v27[5] = v6;
              id v14 = v11;
              id v28 = v14;
              [v12 writeToDatabase:a2 statementStore:v23 withInsertSQL:v13 updateSQL:0 bindOperation:v27];

              unsigned __int8 v15 = *(void **)(a1 + 40);
              id v16 = [v15 removeGamesInsertSQL];
              v24[0] = _NSConcreteStackBlock;
              v24[1] = 3221225472;
              void v24[2] = sub_1000CCC38;
              v24[3] = &unk_1002D9268;
              void v24[4] = *(void *)(a1 + 40);
              id v17 = v14;
              id v25 = v17;
              uint64_t v26 = a2;
              [v15 writeToDatabase:a2 statementStore:v23 withInsertSQL:v16 updateSQL:0 bindOperation:v24];
            }
            id v8 = [v22 countByEnumeratingWithState:&v29 objects:v37 count:16];
          }
          while (v8);
        }
      }
      id v5 = [obj countByEnumeratingWithState:&v33 objects:v38 count:16];
    }
    while (v5);
  }
}

void sub_1000CCB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1000CCBB8(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = [*(id *)(a1 + 40) resourceID];
  [v3 bindParametersForRequestsStatement:playerID:digest:];
}

void sub_1000CCC24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_1000CCC38(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  sqlite3_int64 insert_rowid = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 48));

  return _[v3 bindParametersForRemoveGamesStatement:a2 forRemovedBundleID:v4 requestsRowID:insert_rowid];
}

uint64_t sub_1000CCC8C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000CCDB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CCE5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CCEF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000CCF08(uint64_t a1)
{
  uint64_t v2 = 0;
  int v3 = 0;
  do
  {
    uint64_t v4 = *(unsigned char **)(a1 + 8 * v2);
    if (*v4)
    {
      id v5 = v4 + 1;
      do
        ++v3;
      while (*v5++);
    }
    ++v2;
  }
  while (v2 != 4);
  id v7 = +[NSMutableString stringWithCapacity:v3 + 8];
  for (uint64_t i = 0; i != 24; i += 8)
    [v7 appendFormat:@"%s, ", *(void *)(a1 + i)];
  [v7 appendFormat:@"%s ", *(void *)(a1 + 24)];

  return v7;
}

void sub_1000CCFDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CD06C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000CD07C(void *a1)
{
  if (*(unsigned char *)*a1)
  {
    uint64_t v2 = 1;
    while (*(unsigned __int8 *)(*a1 + v2++))
      ;
    uint64_t v4 = (int)v2 + 1;
  }
  else
  {
    uint64_t v4 = 2;
  }
  id v5 = +[NSMutableString stringWithCapacity:v4];
  [v5 appendFormat:@"%s ", *a1];

  return v5;
}

void sub_1000CD10C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CD198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000CD294(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000CD2C0(sqlite3_stmt **a1)
{
  id v1 = (void *)sqlite3_column_text(*a1, 3);
  if (v1)
  {
    id v1 = +[NSString stringWithUTF8String:v1];
  }

  return v1;
}

void sub_1000CD4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_1000CD558(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 8);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000CD650;
  void v8[3] = &unk_1002D9308;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  id v9 = v5;
  uint64_t v10 = v6;
  id v11 = *(id *)(a1 + 48);
  id v12 = v3;
  id v7 = v3;
  [v4 performAsync:v8];
}

void sub_1000CD628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1000CD650(uint64_t a1, uint64_t a2, void *a3)
{
  id v30 = a3;
  id v40 = 0;
  long long v41 = 0;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  id obj = *(id *)(a1 + 32);
  id v4 = [obj countByEnumeratingWithState:&v36 objects:v43 count:16];
  if (v4)
  {
    uint64_t v26 = *(void *)v37;
    do
    {
      id v27 = v4;
      for (uint64_t i = 0; i != v27; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v37 != v26) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void **)(*((void *)&v36 + 1) + 8 * i);
        long long v31 = [v6 resourceID];
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        id v7 = [v6 representedItem];
        id v8 = [v7 countByEnumeratingWithState:&v32 objects:v42 count:16];
        if (v8)
        {
          uint64_t v28 = *(void *)v33;
          id v29 = v7;
          while (2)
          {
            for (j = 0; j != v8; j = (char *)j + 1)
            {
              if (*(void *)v33 != v28) {
                objc_enumerationMutation(v29);
              }
              uint64_t v10 = [*(id *)(*((void *)&v32 + 1) + 8 * (void)j) resourceID];
              id v11 = +[NSMutableArray array];
              id v12 = +[NSMutableSet set];
              uint64_t v13 = [*(id *)(a1 + 40) getAllRemoveGamesRequestIDsStatement];
              int v14 = [v30 getStatement:&v40 forSQL:v13];

              [*(id *)(a1 + 40) bindParametersForStatement:v40 playerID:v31 bundleID:v10];
              if (!v14)
              {
                int v14 = sqlite3_step(v40);
                while (v14 == 100)
                {
                  id v20 = +[NSNumber numberWithDouble:sqlite3_column_double(v40, 0)];
                  [v12 addObject:v20];
                  int v14 = sqlite3_step(v40);
                }
              }
              if (v14 != 101) {
                goto LABEL_27;
              }
              unsigned __int8 v15 = [*(id *)(a1 + 40) getRemoveGamesDescriptorsStatement];
              unsigned int v16 = [v30 getStatement:&v41 forSQL:v15];

              if (v16) {
                goto LABEL_27;
              }
              [*(id *)(a1 + 40) bindParametersForStatement:v41 playerID:v31 bundleID:v10];
              int v17 = sqlite3_step(v41);
              while (v17 == 100)
              {
                BOOL v18 = [*(id *)(a1 + 40) removeGamesForExecutedStatement:v41];
                [v11 addObject:v18];
                int v17 = sqlite3_step(v41);
              }
              if (v17 != 101)
              {
LABEL_27:
                id v23 = +[NSError _gkErrorForDatabase:a2];
                [*(id *)(a1 + 48) setError:v23];

                id v7 = v29;
                goto LABEL_28;
              }
              if ([v11 count])
              {
                uint64_t v19 = [v11 firstObject];
              }
              else
              {
                uint64_t v19 = &__NSDictionary0__struct;
              }
              uint64_t v21 = +[GKResource resourceWithID:v31 representedItem:v19];
              [v21 setObject:v12 forKeyedSubscript:@"GKRequestIDs"];
              id v22 = [*(id *)(a1 + 48) result];
              [v22 addObject:v21];
            }
            id v7 = v29;
            id v8 = [v29 countByEnumeratingWithState:&v32 objects:v42 count:16];
            if (v8) {
              continue;
            }
            break;
          }
        }
LABEL_28:
      }
      id v4 = [obj countByEnumeratingWithState:&v36 objects:v43 count:16];
    }
    while (v4);
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_1000CDAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1000CDBD4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_1000CDC4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000CDD2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CDDB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CDE4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000CDE5C(void *a1)
{
  uint64_t v2 = 0;
  int v3 = 0;
  do
  {
    id v4 = (unsigned char *)a1[v2];
    if (*v4)
    {
      id v5 = v4 + 1;
      do
        ++v3;
      while (*v5++);
    }
    ++v2;
  }
  while (v2 != 2);
  id v7 = +[NSMutableString stringWithCapacity:v3 + 4];
  [v7 appendFormat:@"%s, ", *a1];
  [v7 appendFormat:@"%s ", a1[1]];

  return v7;
}

void sub_1000CDF10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CE034(_Unwind_Exception *a1)
{
  int v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1000CE2BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CE330(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(*(void *)(a1 + 32) + 8);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000CE428;
  void v8[3] = &unk_1002D9308;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  id v9 = v5;
  uint64_t v10 = v6;
  id v11 = *(id *)(a1 + 48);
  id v12 = v3;
  id v7 = v3;
  [v4 performAsync:v8];
}

void sub_1000CE400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1000CE428(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  unsigned __int8 v15 = 0;
  uint64_t v6 = [*(id *)(a1 + 32) anyObject];
  id v7 = [v6 resourceID];
  id v8 = +[NSMutableSet set];
  id v9 = [*(id *)(a1 + 40) deletePhotoDescriptorStatement];
  int v10 = [v5 getStatement:&v15 forSQL:v9];

  if (v10
    || ([*(id *)(a1 + 40) bindParametersForStatement:v15 playerID:v7],
        int v10 = sqlite3_step(v15),
        v10 != 100))
  {
    id v11 = 0;
  }
  else
  {
    id v11 = 0;
    do
    {
      if (!v11)
      {
        id v11 = [*(id *)(a1 + 40) deletePhotoDescriptorForExecutedStatement:v15];
      }
      id v12 = +[NSNumber numberWithDouble:sqlite3_column_double(v15, 0)];
      [v8 addObject:v12];
      int v10 = sqlite3_step(v15);
    }
    while (v10 == 100);
  }
  if (v10 == 101)
  {
    uint64_t v13 = +[GKResource resourceWithID:v7 representedItem:v11];
    [v13 setObject:v8 forKeyedSubscript:@"GKRequestIDs"];
    int v14 = [*(id *)(a1 + 48) result];
    [v14 addObject:v13];
  }
  else
  {
    uint64_t v13 = +[NSError _gkErrorForDatabase:a2];
    [*(id *)(a1 + 48) setError:v13];
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_1000CE61C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CE69C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_1000CE714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000CE7A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CE830(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CE914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000CECA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

id sub_1000CED04(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v6 = 0;
  id v4 = [*(id *)(a1 + 32) getStatement:&v6 forSQL:v3];
  if (!v4)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    id v4 = (id)sqlite3_step(v6);
  }

  return v4;
}

void sub_1000CED80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CEF24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CEF5C(uint64_t a1, sqlite3 *a2, void *a3)
{
  id v5 = a3;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  id obj = *(id *)(a1 + 32);
  id v6 = [obj countByEnumeratingWithState:&v34 objects:v42 count:16];
  if (v6)
  {
    uint64_t v28 = *(void *)v35;
    do
    {
      id v7 = 0;
      do
      {
        if (*(void *)v35 != v28) {
          objc_enumerationMutation(obj);
        }
        id v8 = [*(id *)(*((void *)&v34 + 1) + 8 * (void)v7) resourceID];
        long long v33 = 0;
        id v9 = [*(id *)(a1 + 40) getOldPhotosSQL];
        if ([v5 getStatement:&v33 forSQL:v9])
        {
          id v22 = +[NSString stringWithUTF8String:sqlite3_errmsg(a2)];
          CFStringRef v40 = @"SQL";
          long long v41 = v9;
          id v23 = +[NSDictionary dictionaryWithObjects:&v41 forKeys:&v40 count:1];
          id v24 = +[NSException exceptionWithName:NSInternalInconsistencyException reason:v22 userInfo:v23];

          objc_exception_throw(v24);
        }
        long long v32 = 0;
        int v10 = [*(id *)(a1 + 40) deleteOldPhotosSQL];
        int i = [v5 getStatement:&v32 forSQL:v10];
        if (!i)
        {
          [*(id *)(a1 + 40) bindParametersForGetOldPhotosStatement:v33 playerID:v8];
          for (int i = sqlite3_step(v33); i == 100; int i = sqlite3_step(v33))
          {
            sqlite3_int64 v17 = sqlite3_column_int64(v33, 0);
            [*(id *)(a1 + 40) bindParametersForDeleteOldPhotosStatement:v32 requestsRowID:v17];
            if (sqlite3_step(v32) != 101)
            {
              uint64_t v19 = +[NSString stringWithUTF8String:sqlite3_errmsg(a2)];
              CFStringRef v38 = @"SQL";
              long long v39 = v10;
              id v20 = +[NSDictionary dictionaryWithObjects:&v39 forKeys:&v38 count:1];
              id v21 = +[NSException exceptionWithName:NSInternalInconsistencyException reason:v19 userInfo:v20];

              objc_exception_throw(v21);
            }
          }
        }
        if (i != 101)
        {
          id v25 = +[NSString stringWithUTF8String:sqlite3_errmsg(a2)];
          id v26 = +[NSException exceptionWithName:NSInternalInconsistencyException reason:v25 userInfo:0];

          objc_exception_throw(v26);
        }

        id v12 = *(void **)(a1 + 40);
        uint64_t v13 = [v12 requestsInsertSQL];
        v30[0] = _NSConcreteStackBlock;
        v30[1] = 3221225472;
        v30[2] = sub_1000CF4C8;
        void v30[3] = &unk_1002D9390;
        void v30[4] = *(void *)(a1 + 40);
        id v14 = v8;
        id v31 = v14;
        [v12 writeToDatabase:a2 statementStore:v5 withInsertSQL:v13 updateSQL:0 bindOperation:v30];

        unsigned __int8 v15 = *(void **)(a1 + 40);
        unsigned int v16 = [v15 photosInsertSQL];
        v29[0] = _NSConcreteStackBlock;
        v29[1] = 3221225472;
        void v29[2] = sub_1000CF4D8;
        void v29[3] = &unk_1002D93B8;
        void v29[4] = *(void *)(a1 + 40);
        void v29[5] = a2;
        [v15 writeToDatabase:a2 statementStore:v5 withInsertSQL:v16 updateSQL:0 bindOperation:v29];

        id v7 = (char *)v7 + 1;
      }
      while (v7 != v6);
      id v18 = [obj countByEnumeratingWithState:&v34 objects:v42 count:16];
      id v6 = v18;
    }
    while (v18);
  }
}

void sub_1000CF3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id sub_1000CF4C8(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) bindParametersForRequestsStatement:a2 playerID:*(void *)(a1 + 40)];
}

id sub_1000CF4D8(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a1 + 32);
  sqlite3_int64 insert_rowid = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 40));

  return _[v3 bindParametersForPhotoStatement:a2 requestsRowID:insert_rowid];
}

uint64_t sub_1000CF51C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000CF5A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CF628(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CF6C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CF83C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NSData *sub_1000CF878(sqlite3_stmt **a1)
{
  uint64_t v2 = sqlite3_column_blob(*a1, 2);
  uint64_t v3 = sqlite3_column_bytes(*a1, 2);

  return +[NSData dataWithBytes:v2 length:v3];
}

void sub_1000CFB40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CFBB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(*(void *)(a1 + 32) + 8);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000CFCAC;
  void v8[3] = &unk_1002D9308;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  id v9 = v5;
  uint64_t v10 = v6;
  id v11 = *(id *)(a1 + 48);
  id v12 = v3;
  id v7 = v3;
  [v4 performAsync:v8];
}

void sub_1000CFC84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1000CFCAC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  unsigned __int8 v15 = 0;
  uint64_t v6 = [*(id *)(a1 + 32) anyObject];
  id v7 = [v6 resourceID];
  id v8 = +[NSMutableSet set];
  id v9 = [*(id *)(a1 + 40) setPhotoDescriptorStatement];
  int v10 = [v5 getStatement:&v15 forSQL:v9];

  if (v10
    || ([*(id *)(a1 + 40) bindParametersForStatement:v15 playerID:v7],
        int v10 = sqlite3_step(v15),
        v10 != 100))
  {
    id v11 = 0;
  }
  else
  {
    id v11 = 0;
    do
    {
      if (!v11)
      {
        id v11 = [*(id *)(a1 + 40) setPhotoDescriptorForExecutedStatement:v15];
      }
      id v12 = +[NSNumber numberWithDouble:sqlite3_column_double(v15, 0)];
      [v8 addObject:v12];
      int v10 = sqlite3_step(v15);
    }
    while (v10 == 100);
  }
  if (v10 == 101)
  {
    uint64_t v13 = +[GKResource resourceWithID:v7 representedItem:v11];
    [v13 setObject:v8 forKeyedSubscript:@"GKRequestIDs"];
    id v14 = [*(id *)(a1 + 48) result];
    [v14 addObject:v13];
  }
  else
  {
    uint64_t v13 = +[NSError _gkErrorForDatabase:a2];
    [*(id *)(a1 + 48) setError:v13];
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_1000CFEA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CFF20(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_1000CFF98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000D03E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D0468(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D054C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000D0658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000D098C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

id sub_1000D09F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v6 = 0;
  id v4 = [*(id *)(a1 + 32) getStatement:&v6 forSQL:v3];
  if (!v4)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    id v4 = (id)sqlite3_step(v6);
  }

  return v4;
}

void sub_1000D0A6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D0C10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D0C48(uint64_t a1, sqlite3 *a2, void *a3)
{
  id v34 = a3;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  id obj = *(id *)(a1 + 32);
  id v4 = [obj countByEnumeratingWithState:&v41 objects:v49 count:16];
  if (v4)
  {
    uint64_t v30 = *(void *)v42;
    uint64_t v29 = GKAvatarTypeKey;
    do
    {
      id v5 = 0;
      do
      {
        if (*(void *)v42 != v30) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void **)(*((void *)&v41 + 1) + 8 * (void)v5);
        id v7 = [v6 resourceID];
        id v8 = [v6 representedItem];
        id v9 = [v8 objectForKeyedSubscript:@"photo-data"];
        id v31 = v8;
        long long v32 = [v8 objectForKeyedSubscript:v29];
        CFStringRef v40 = 0;
        int v10 = [*(id *)(a1 + 40) getOldPhotosSQL];
        if ([v34 getStatement:&v40 forSQL:v10])
        {
          id v23 = +[NSString stringWithUTF8String:sqlite3_errmsg(a2)];
          CFStringRef v47 = @"SQL";
          uint64_t v48 = v10;
          id v24 = +[NSDictionary dictionaryWithObjects:&v48 forKeys:&v47 count:1];
          id v25 = +[NSException exceptionWithName:NSInternalInconsistencyException reason:v23 userInfo:v24];

          objc_exception_throw(v25);
        }
        long long v39 = 0;
        id v11 = [*(id *)(a1 + 40) deleteOldPhotosSQL];
        int i = [v34 getStatement:&v39 forSQL:v11];
        if (!i)
        {
          [*(id *)(a1 + 40) bindParametersForGetOldPhotosStatement:v40 playerID:v7];
          for (int i = sqlite3_step(v40); i == 100; int i = sqlite3_step(v40))
          {
            sqlite3_int64 v18 = sqlite3_column_int64(v40, 0);
            [*(id *)(a1 + 40) bindParametersForDeleteOldPhotosStatement:v39 requestsRowID:v18];
            if (sqlite3_step(v39) != 101)
            {
              id v20 = +[NSString stringWithUTF8String:sqlite3_errmsg(a2)];
              CFStringRef v45 = @"SQL";
              NSErrorUserInfoKey v46 = v11;
              id v21 = +[NSDictionary dictionaryWithObjects:&v46 forKeys:&v45 count:1];
              id v22 = +[NSException exceptionWithName:NSInternalInconsistencyException reason:v20 userInfo:v21];

              objc_exception_throw(v22);
            }
          }
        }
        if (i != 101)
        {
          id v26 = +[NSString stringWithUTF8String:sqlite3_errmsg(a2)];
          id v27 = +[NSException exceptionWithName:NSInternalInconsistencyException reason:v26 userInfo:0];

          objc_exception_throw(v27);
        }

        uint64_t v13 = *(void **)(a1 + 40);
        id v14 = [v13 requestsInsertSQL];
        v37[0] = _NSConcreteStackBlock;
        v37[1] = 3221225472;
        void v37[2] = sub_1000D1294;
        void v37[3] = &unk_1002D9390;
        void v37[4] = *(void *)(a1 + 40);
        id v15 = v7;
        id v38 = v15;
        [v13 writeToDatabase:a2 statementStore:v34 withInsertSQL:v14 updateSQL:0 bindOperation:v37];

        unsigned int v16 = *(void **)(a1 + 40);
        sqlite3_int64 v17 = [v16 photosInsertSQL];
        id v35 = v9;
        id v36 = v32;
        [v16 writeToDatabase:x0 statementStore:x1 withInsertSQL:x2 updateSQL:x3 bindOperation:x4];

        id v5 = (char *)v5 + 1;
      }
      while (v5 != v4);
      id v19 = [obj countByEnumeratingWithState:&v41 objects:v49 count:16];
      id v4 = v19;
    }
    while (v19);
  }
}

void sub_1000D117C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

id sub_1000D1294(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) bindParametersForRequestsStatement:a2 playerID:*(void *)(a1 + 40)];
}

id sub_1000D12A4(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  sqlite3_int64 insert_rowid = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 56));

  return _[v3 bindParametersForPhotoStatement:a2 photo:v4 avatarType:v5 requestsRowID:insert_rowid];
}

uint64_t sub_1000D12FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000D1708(id *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [a1[4] firstObject];
  uint64_t v5 = [a1[5] _gkResourceWithID:v4];
  uint64_t v6 = [v5 representedItem];

  id v7 = [v6 objectForKeyedSubscript:GKAvatarTypeKey];
  [a1[6] setAvatarType:v7];

  id v8 = [v6 objectForKeyedSubscript:@"image-data"];
  CFStringRef v19 = @"file-size";
  id v9 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v8 length]);
  id v20 = v9;
  int v10 = +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];

  id v11 = [a1[6] transport];
  id v12 = [a1[6] bagKey];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  void v15[2] = sub_1000D1914;
  v15[3] = &unk_1002D9468;
  id v16 = a1[7];
  id v17 = v8;
  id v18 = v3;
  id v13 = v3;
  id v14 = v8;
  [v11 postRequest:v10 forBagKey:v12 response:v15];
}

void sub_1000D1914(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = [a2 representedItem];
  id v7 = v6;
  if (v5)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers();
    }
    id v9 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000D2ACC((uint64_t)v5, v9, v10, v11, v12, v13, v14, v15);
    }
    [*(id *)(a1 + 32) setError:v5];
  }
  else if (v6)
  {
    id v16 = [v6 objectForKeyedSubscript:@"upload-url"];
    [*(id *)(a1 + 32) setResult:v16];

    [*(id *)(a1 + 32) setObject:*(void *)(a1 + 40) forKeyedSubscript:@"image-data"];
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1000D1A08(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) error];

  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 48);
    if (!v3) {
      return;
    }
    id v6 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v6);
  }
  else
  {
    uint64_t v4 = *(void **)(a1 + 40);
    id v6 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"image-data"];
    id v5 = [*(id *)(a1 + 32) result];
    [v4 uploadImageData:v6 toURL:v5 handler:*(void *)(a1 + 48)];
  }
}

void sub_1000D1CD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[NSURL URLWithString:*(void *)(a1 + 32)];
  id v5 = +[NSMutableURLRequest requestWithURL:v4];
  [v5 setValue:@"image/png" forHTTPHeaderField:@"content-type"];
  [v5 setHTTPMethod:@"POST"];
  [v5 setHTTPBody:*(void *)(a1 + 40)];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_1000D1E28;
  v9[3] = &unk_1002D9490;
  id v10 = v5;
  id v11 = *(id *)(a1 + 48);
  id v12 = v4;
  id v13 = v3;
  id v6 = v3;
  id v7 = v4;
  id v8 = v5;
  +[NSURLSession _gkSendAsynchronousRequest:v8 completionHandler:v9];
}

void sub_1000D1E28(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = v7;
  if (os_log_type_enabled(os_log_GKHTTP, OS_LOG_TYPE_INFO) && *(void *)(a1 + 32))
  {
    id v11 = [*(id *)(a1 + 32) HTTPBody];
    id v12 = [*(id *)(a1 + 32) valueForHTTPHeaderField:@"content-encoding"];
    unsigned int v13 = [v12 isEqualToString:@"gzip"];

    if (v13)
    {
      uint64_t v14 = [v11 _gkUnzippedData];
      uint64_t v15 = v14;
      if (v14)
      {
        id v16 = v14;

        id v11 = v16;
      }
    }
    id v17 = os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      id v18 = (id)GKOSLoggers();
      id v17 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Upload avatar image data: Received HTTP Response", buf, 2u);
    }
    if (!os_log_GKGeneral) {
      id v19 = (id)GKOSLoggers();
    }
    id v20 = (void *)os_log_GKHTTP;
    if (os_log_type_enabled(os_log_GKHTTP, OS_LOG_TYPE_INFO))
    {
      id v21 = *(void **)(a1 + 32);
      id v22 = v20;
      id v23 = [v21 loggableHeaders];
      *(_DWORD *)buf = 138412802;
      id v49 = v21;
      __int16 v50 = 2112;
      id v51 = v23;
      __int16 v52 = 2112;
      id v53 = v11;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "%@\nREQUEST {\nheader: %@\nbody: %@}", buf, 0x20u);
    }
    if (!os_log_GKGeneral) {
      id v24 = (id)GKOSLoggers();
    }
    id v25 = (void *)os_log_GKHTTP;
    if (os_log_type_enabled(os_log_GKHTTP, OS_LOG_TYPE_INFO))
    {
      id v26 = v25;
      id v27 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v10 statusCode]);
      uint64_t v28 = +[NSHTTPURLResponse localizedStringForStatusCode:](NSHTTPURLResponse, "localizedStringForStatusCode:", [v10 statusCode]);
      uint64_t v29 = [v10 allHeaderFields];
      *(_DWORD *)buf = 138413570;
      id v49 = v10;
      __int16 v50 = 2112;
      id v51 = v9;
      __int16 v52 = 2112;
      id v53 = v27;
      __int16 v54 = 2112;
      id v55 = v28;
      __int16 v56 = 2112;
      id v57 = v29;
      __int16 v58 = 2112;
      id v59 = v8;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "%@\nRESPONSE (error:%@) {\nstatus: (%@) %@\nheader: %@\nbody: %@ }", buf, 0x3Eu);
    }
  }
  if (v8 && !v9 && [v10 statusCode] == (id)200)
  {
    id v47 = 0;
    uint64_t v30 = +[NSJSONSerialization JSONObjectWithData:v8 options:0 error:&v47];
    id v31 = v47;
    if (v31 || !v30)
    {
      [*(id *)(a1 + 40) setError:v31];
      if (!os_log_GKGeneral) {
        id v35 = (id)GKOSLoggers();
      }
      id v36 = os_log_GKError;
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
        sub_1000D2B38((uint64_t)v31, v36, v37, v38, v39, v40, v41, v42);
      }
    }
    else
    {
      long long v32 = [v30 objectForKeyedSubscript:@"singleFile"];
      [*(id *)(a1 + 40) setResult:v32];
    }
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v33 = (id)GKOSLoggers();
    }
    id v34 = (void *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
    {
      long long v43 = *(void **)(a1 + 48);
      long long v44 = v34;
      CFStringRef v45 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v10 statusCode]);
      *(_DWORD *)buf = 138412802;
      id v49 = v43;
      __int16 v50 = 2112;
      id v51 = v45;
      __int16 v52 = 2112;
      id v53 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "Error uploading profile image data to url:  %@, status code:  %@, error:  %@", buf, 0x20u);
    }
    [*(id *)(a1 + 40) setError:v9];
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_1000D2308(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) result];

  if (v2)
  {
    id v3 = *(void **)(a1 + 40);
    id v5 = [*(id *)(a1 + 32) result];
    [v3 uploadProfileImageMetadata:fromUploadURL:handler:];
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 56);
    if (!v4) {
      return;
    }
    id v5 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t))(v4 + 16))(v4);
  }
}

void sub_1000D2590(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[NSMutableDictionary dictionaryWithObjectsAndKeys:*(void *)(a1 + 32), @"upload-url", *(void *)(a1 + 40), @"asset-metadata", 0];
  id v5 = [*(id *)(a1 + 48) avatarType];

  if (v5)
  {
    id v6 = [*(id *)(a1 + 48) avatarType];
    [v4 setObject:v6 forKeyedSubscript:GKAvatarTypeKey];
  }
  id v7 = [*(id *)(a1 + 48) transport];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_1000D26E0;
  v11[3] = &unk_1002D3DD0;
  id v8 = *(id *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 48);
  id v12 = v8;
  uint64_t v13 = v9;
  id v14 = v3;
  id v10 = v3;
  [v7 postRequest:v4 forBagKey:@"gk-set-profile-image-metadata" result:v11];
}

void sub_1000D26E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    id v5 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000D2BA4((uint64_t)v3, v5, v6, v7, v8, v9, v10, v11);
    }
    [*(id *)(a1 + 32) setError:v3];
  }
  else
  {
    id v12 = [*(id *)(a1 + 40) transport];
    uint64_t v13 = [v12 clientProxy];

    id v14 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKDelayedSetPhotoNetworkWriter.m", 179, "-[GKDelayedSetPhotoNetworkWriter uploadProfileImageMetadata:fromUploadURL:handler:]_block_invoke");
    uint64_t v15 = [*(id *)(a1 + 40) transport];
    id v16 = [v15 credential];
    id v17 = [v16 playerInternal];
    id v18 = [v17 playerID];
    id v19 = [v13 transactionGroupWithName:v14 forPlayerID:v18];

    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    void v20[2] = sub_1000D28B8;
    v20[3] = &unk_1002D51F8;
    void v20[4] = *(void *)(a1 + 40);
    [v19 performOnManagedObjectContext:v20];
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1000D28B8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!os_log_GKGeneral) {
    id v7 = (id)GKOSLoggers();
  }
  uint64_t v8 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = *(void **)(a1 + 32);
    uint64_t v10 = v8;
    uint64_t v11 = [v9 transport];
    id v12 = [v11 credential];
    uint64_t v13 = [v12 playerInternal];
    int v14 = 138412290;
    uint64_t v15 = v13;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "GKDelayedSetPhotoNetworkWriter: Successfully uploaded player avatar image and metadata to server for %@", (uint8_t *)&v14, 0xCu);
  }
}

void sub_1000D29E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1000D2ACC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000D2B38(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000D2BA4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000D2C64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D2CEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D2D84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D2E54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000D2E6C(sqlite3_stmt **a1)
{
  uint64_t v1 = (void *)sqlite3_column_text(*a1, 1);
  if (v1)
  {
    uint64_t v1 = +[NSString stringWithUTF8String:v1];
  }

  return v1;
}

void sub_1000D3114(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D3188(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(*(void *)(a1 + 32) + 8);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000D3280;
  void v8[3] = &unk_1002D9308;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  id v9 = v5;
  uint64_t v10 = v6;
  id v11 = *(id *)(a1 + 48);
  id v12 = v3;
  id v7 = v3;
  [v4 performAsync:v8];
}

void sub_1000D3258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1000D3280(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v15 = 0;
  uint64_t v6 = [*(id *)(a1 + 32) anyObject];
  id v7 = [v6 resourceID];
  uint64_t v8 = +[NSMutableSet set];
  id v9 = [*(id *)(a1 + 40) setStatusDescriptorStatement];
  int v10 = [v5 getStatement:&v15 forSQL:v9];

  if (v10
    || ([*(id *)(a1 + 40) bindParametersForStatement:v15 playerID:v7],
        int v10 = sqlite3_step(v15),
        v10 != 100))
  {
    id v11 = 0;
  }
  else
  {
    id v11 = 0;
    do
    {
      if (!v11)
      {
        id v11 = [*(id *)(a1 + 40) setStatusDescriptorForExecutedStatement:v15];
      }
      id v12 = +[NSNumber numberWithDouble:sqlite3_column_double(v15, 0)];
      [v8 addObject:v12];
      int v10 = sqlite3_step(v15);
    }
    while (v10 == 100);
  }
  if (v10 == 101)
  {
    uint64_t v13 = +[GKResource resourceWithID:v7 representedItem:v11];
    [v13 setObject:v8 forKeyedSubscript:@"GKRequestIDs"];
    int v14 = [*(id *)(a1 + 48) result];
    [v14 addObject:v13];
  }
  else
  {
    uint64_t v13 = +[NSError _gkErrorForDatabase:a2];
    [*(id *)(a1 + 48) setError:v13];
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_1000D3474(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D34F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_1000D356C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000D3600(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D3688(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D376C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000D3840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000D3B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

id sub_1000D3BD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v6 = 0;
  id v4 = [*(id *)(a1 + 32) getStatement:&v6 forSQL:v3];
  if (!v4)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    id v4 = (id)sqlite3_step(v6);
  }

  return v4;
}

void sub_1000D3C50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D3DF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D3E2C(uint64_t a1, sqlite3 *a2, void *a3)
{
  id v31 = a3;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  id obj = *(id *)(a1 + 32);
  id v5 = [obj countByEnumeratingWithState:&v39 objects:v47 count:16];
  if (v5)
  {
    uint64_t v29 = *(void *)v40;
    do
    {
      id v30 = v5;
      for (int i = 0; i != v30; int i = (char *)i + 1)
      {
        if (*(void *)v40 != v29) {
          objc_enumerationMutation(obj);
        }
        id v7 = *(void **)(*((void *)&v39 + 1) + 8 * i);
        uint64_t v8 = [v7 resourceID];
        id v9 = [v7 representedItem];
        uint64_t v38 = 0;
        int v10 = [*(id *)(a1 + 40) getOldStatusesSQL];
        if ([v31 getStatement:&v38 forSQL:v10])
        {
          id v23 = +[NSString stringWithUTF8String:sqlite3_errmsg(a2)];
          CFStringRef v45 = @"SQL";
          NSErrorUserInfoKey v46 = v10;
          id v24 = +[NSDictionary dictionaryWithObjects:&v46 forKeys:&v45 count:1];
          id v25 = +[NSException exceptionWithName:NSInternalInconsistencyException reason:v23 userInfo:v24];

          objc_exception_throw(v25);
        }
        uint64_t v37 = 0;
        id v11 = [*(id *)(a1 + 40) deleteOldStatusesSQL];
        int j = [v31 getStatement:&v37 forSQL:v11];
        if (!j)
        {
          [*(id *)(a1 + 40) bindParametersForGetOldStatusesStatement:v38 playerID:v8];
          for (int j = sqlite3_step(v38); j == 100; int j = sqlite3_step(v38))
          {
            sqlite3_int64 v19 = sqlite3_column_int64(v38, 0);
            [*(id *)(a1 + 40) bindParametersForDeleteOldStatusesStatement:v37 requestsRowID:v19];
            if (sqlite3_step(v37) != 101)
            {
              id v20 = +[NSString stringWithUTF8String:sqlite3_errmsg(a2)];
              CFStringRef v43 = @"SQL";
              long long v44 = v11;
              id v21 = +[NSDictionary dictionaryWithObjects:&v44 forKeys:&v43 count:1];
              id v22 = +[NSException exceptionWithName:NSInternalInconsistencyException reason:v20 userInfo:v21];

              objc_exception_throw(v22);
            }
          }
        }
        if (j != 101)
        {
          id v26 = +[NSString stringWithUTF8String:sqlite3_errmsg(a2)];
          id v27 = +[NSException exceptionWithName:NSInternalInconsistencyException reason:v26 userInfo:0];

          objc_exception_throw(v27);
        }

        uint64_t v13 = *(void **)(a1 + 40);
        int v14 = [v13 requestsInsertSQL];
        v35[0] = _NSConcreteStackBlock;
        v35[1] = 3221225472;
        v35[2] = sub_1000D43EC;
        void v35[3] = &unk_1002D9390;
        void v35[4] = *(void *)(a1 + 40);
        id v15 = v8;
        id v36 = v15;
        [v13 writeToDatabase:a2 statementStore:v31 withInsertSQL:v14 updateSQL:0 bindOperation:v35];

        id v16 = *(void **)(a1 + 40);
        id v17 = [v16 statusInsertSQL];
        v32[0] = _NSConcreteStackBlock;
        v32[1] = 3221225472;
        void v32[2] = sub_1000D43FC;
        v32[3] = &unk_1002D9268;
        void v32[4] = *(void *)(a1 + 40);
        id v18 = v9;
        id v33 = v18;
        id v34 = a2;
        [v16 writeToDatabase:a2 statementStore:v31 withInsertSQL:v17 updateSQL:0 bindOperation:v32];
      }
      id v5 = [obj countByEnumeratingWithState:&v39 objects:v47 count:16];
    }
    while (v5);
  }
}

void sub_1000D4300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

id sub_1000D43EC(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) bindParametersForRequestsStatement:a2 playerID:*(void *)(a1 + 40)];
}

id sub_1000D43FC(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  sqlite3_int64 insert_rowid = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 48));

  return _[v3 bindParametersForStatusStatement:a2 status:v4 requestsRowID:insert_rowid];
}

uint64_t sub_1000D4450(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000D4D00(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "No contact list currently exist. Likely due to a clear cache event. Stopping.", v1, 2u);
}

void sub_1000D4D44(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Nothing to do, no new synced contacts to update IDS cache with.", v1, 2u);
}

uint64_t sub_1000D50D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000D52BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D541C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D551C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D5540(void *a1, void *a2)
{
  id v3 = a2;
  dispatch_time_t v4 = dispatch_time(0, (uint64_t)(*(double *)(a1[4] + 16) * 1000000000.0));
  id v5 = dispatch_get_global_queue(0, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000D5634;
  block[3] = &unk_1002D94D0;
  uint64_t v6 = (void *)a1[5];
  uint64_t v11 = a1[6];
  id v9 = v6;
  id v10 = v3;
  id v7 = v3;
  dispatch_after(v4, v5, block);
}

uint64_t sub_1000D5634(void *a1)
{
  if (a1[6] == qword_100329728) {
    (*(void (**)(void))(a1[4] + 16))();
  }
  uint64_t v2 = *(uint64_t (**)(void))(a1[5] + 16);

  return v2();
}

void sub_1000D5768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D5890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1000D58C0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  pStmt = 0;
  if ([v4 getStatement:&pStmt forSQL:*(void *)(a1 + 32)])
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers();
    }
    uint64_t v6 = os_log_GKCache;
    if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
      sub_1000D73D0(a1, v6);
    }
  }
  else
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v7 = *(id *)(a1 + 40);
    id v8 = [v7 countByEnumeratingWithState:&v15 objects:v22 count:16];
    if (v8)
    {
      uint64_t v9 = *(void *)v16;
      do
      {
        for (int i = 0; i != v8; int i = (char *)i + 1)
        {
          if (*(void *)v16 != v9) {
            objc_enumerationMutation(v7);
          }
          uint64_t v11 = *(NSNumber **)(*((void *)&v15 + 1) + 8 * i);
          GKBindParam(pStmt, ":request_id", v11);
          int v12 = sqlite3_step(pStmt);
          sqlite3_reset(pStmt);
          if (v12 != 101)
          {
            if (!os_log_GKGeneral) {
              id v13 = (id)GKOSLoggers();
            }
            int v14 = os_log_GKCache;
            if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138412290;
              id v21 = v11;
              _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Unable to delete delayed request with id: %@", buf, 0xCu);
            }
          }
        }
        id v8 = [v7 countByEnumeratingWithState:&v15 objects:v22 count:16];
      }
      while (v8);
    }
  }
}

void sub_1000D5AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1000D5D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25)
{
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1000D5D68(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = *(void **)(*(void *)(a1 + 32) + 48);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_1000D5E50;
  v10[3] = &unk_1002D9590;
  id v6 = *(id *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 32);
  id v11 = v6;
  uint64_t v12 = v8;
  id v13 = v3;
  uint64_t v14 = v7;
  id v9 = v3;
  [v5 readResources:v4 handler:v10];
}

void sub_1000D5E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1000D5E50(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  [*(id *)(a1 + 32) setError:v6];
  if (!v6)
  {
    uint64_t v7 = +[NSMutableSet set];
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    id v8 = v5;
    id v9 = [v8 countByEnumeratingWithState:&v37 objects:v42 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v38;
      do
      {
        id v11 = 0;
        do
        {
          if (*(void *)v38 != v10) {
            objc_enumerationMutation(v8);
          }
          uint64_t v12 = [*(id *)(*((void *)&v37 + 1) + 8 * (void)v11) objectForKeyedSubscript:@"GKRequestIDs"];
          [v7 unionSet:v12];

          id v11 = (char *)v11 + 1;
        }
        while (v9 != v11);
        id v9 = [v8 countByEnumeratingWithState:&v37 objects:v42 count:16];
      }
      while (v9);
    }

    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v7 count];
    if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
    {
      id v13 = +[NSUserDefaults standardUserDefaults];
      uint64_t v14 = (objc_class *)objc_opt_class();
      long long v15 = NSStringFromClass(v14);
      long long v16 = +[NSString stringWithFormat:@"GKRetryAfter-%@", v15];
      [v13 doubleForKey:v16];
      if (v17 == 0.0
        || (+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:"), long long v18 = objc_claimAutoreleasedReturnValue(), [v18 timeIntervalSinceNow], v20 = v19 > 0.0, v18, !v20))
      {
        v30[0] = _NSConcreteStackBlock;
        v30[1] = 3221225472;
        v30[2] = sub_1000D6280;
        void v30[3] = &unk_1002D9568;
        id v27 = *(void **)(a1 + 32);
        void v30[4] = *(void *)(a1 + 40);
        id v31 = v8;
        id v28 = v7;
        uint64_t v29 = *(void *)(a1 + 56);
        id v32 = v28;
        uint64_t v36 = v29;
        id v33 = v13;
        id v34 = v16;
        id v35 = *(id *)(a1 + 32);
        [v27 perform:v30];
      }
      else
      {
        id v21 = +[NSError userErrorForCode:3 userInfo:&off_1002F2D18];
        [*(id *)(a1 + 32) setError:v21];

        id v22 = (void *)os_log_GKGeneral;
        if (!os_log_GKGeneral)
        {
          id v23 = (id)GKOSLoggers();
          id v22 = (void *)os_log_GKGeneral;
        }
        id v24 = v22;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          id v25 = (objc_class *)objc_opt_class();
          id v26 = NSStringFromClass(v25);
          sub_1000D744C(v26, buf, v24);
        }
      }
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1000D61B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D6280(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = *(void **)(v4 + 56);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_1000D63BC;
  v10[3] = &unk_1002D9540;
  void v10[4] = v4;
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 80);
  id v11 = v7;
  uint64_t v16 = v8;
  id v12 = *(id *)(a1 + 56);
  id v13 = *(id *)(a1 + 64);
  id v14 = *(id *)(a1 + 72);
  id v15 = v3;
  id v9 = v3;
  [v6 writeResources:v5 handler:v10];
}

void sub_1000D6384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_1000D63BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v13 = v3;
  if (v3)
  {
    uint64_t v4 = [v3 userInfo];
    uint64_t v5 = [v4 objectForKeyedSubscript:@"retryTime"];
    [v5 doubleValue];
    double v7 = v6;

    if (v7 > 0.0)
    {
      uint64_t v8 = +[NSDate dateWithTimeIntervalSinceNow:v7];
      id v9 = *(void **)(a1 + 48);
      [v8 timeIntervalSinceReferenceDate];
      [v9 setDouble:*(void *)(a1 + 56) forKey:@""];
    }
  }
  else
  {
    uint64_t v10 = *(id **)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    id v12 = [v10[6] databaseConnection];
    [v10 deleteSubmittedRequestsWithIDs:v11 onConnection:v12];

    *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 0;
  }
  [*(id *)(a1 + 64) setError:v13];
  (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
}

void sub_1000D64D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000D650C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t))(v1 + 16))(v1);
}

void sub_1000D6578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000D6660(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D6674(uint64_t a1)
{
  id v2 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKDelayedRequestWriter.mm", 191, "-[GKDelayedRequestWriter writeResources:handler:]_block_invoke");
  id v3 = +[GKDispatchGroup dispatchGroupWithName:v2];

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_1000D6884;
  void v12[3] = &unk_1002D96F8;
  uint64_t v4 = *(void **)(a1 + 40);
  void v12[4] = *(void *)(a1 + 32);
  id v13 = v4;
  id v5 = v3;
  id v14 = v5;
  char v16 = *(unsigned char *)(a1 + 56);
  id v15 = *(id *)(a1 + 48);
  [v5 perform:v12];
  double v6 = dispatch_get_global_queue(0, 0);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000D7014;
  void v8[3] = &unk_1002D9720;
  id v7 = v5;
  id v9 = v7;
  char v11 = *(unsigned char *)(a1 + 56);
  id v10 = *(id *)(a1 + 48);
  [v7 notifyOnQueue:v6 block:v8];
}

void sub_1000D6834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,void *a27)
{
  _Unwind_Resume(a1);
}

void sub_1000D6884(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  double v6 = *(void **)(v4 + 40);
  id v10 = _NSConcreteStackBlock;
  uint64_t v11 = 3221225472;
  id v12 = sub_1000D69C8;
  id v13 = &unk_1002D96D0;
  uint64_t v14 = v4;
  id v15 = v5;
  id v16 = *(id *)(a1 + 48);
  id v7 = v3;
  id v17 = v7;
  [v6 writeResources:v15 handler:&v10];
  if (!*(unsigned char *)(a1 + 64))
  {
    uint64_t v8 = *(void *)(a1 + 56);
    id v9 = [*(id *)(a1 + 48) error:v10, v11, v12, v13, v14, v15, v16];
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v9);
  }
}

void sub_1000D698C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  long long v18 = v17;

  _Unwind_Resume(a1);
}

uint64_t sub_1000D69C8(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(NSObject **)(v3 + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000D6A88;
    block[3] = &unk_1002D96A8;
    void block[4] = v3;
    id v7 = *(id *)(a1 + 40);
    id v8 = *(id *)(a1 + 48);
    dispatch_async(v4, block);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_1000D6A88(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) resourcesPending];
  uint64_t v3 = [v2 setByAddingObjectsFromSet:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) setResourcesPending:v3];

  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = *(void **)(a1 + 48);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000D6B88;
  void v8[3] = &unk_1002D9608;
  id v6 = v5;
  uint64_t v7 = *(void *)(a1 + 32);
  id v9 = v6;
  uint64_t v10 = v7;
  [v4 batchAndPerformInGroup:v6 block:v8];
}

void sub_1000D6B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1000D6B88(int8x16_t *a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1000D6C30;
  v2[3] = &unk_1002D9680;
  int8x16_t v1 = a1[2];
  int8x16_t v3 = vextq_s8(v1, v1, 8uLL);
  [(id)v1.i64[0] perform:v2];
}

void sub_1000D6C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1000D6C30(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000D6CEC;
  block[3] = &unk_1002D9658;
  void block[4] = v4;
  id v8 = *(id *)(a1 + 40);
  id v9 = v3;
  id v6 = v3;
  dispatch_async(v5, block);
}

void sub_1000D6CEC(id *a1)
{
  id v2 = [a1[4] resourcesPending];
  id v3 = +[NSSet set];
  [a1[4] setResourcesPending:v3];

  id v4 = a1[4];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_1000D6E0C;
  v5[3] = &unk_1002D9630;
  void v5[4] = v4;
  id v6 = a1[5];
  id v7 = a1[6];
  [v4 readAndSubmitDelayedRequestsOfResources:v2 handler:v5];
}

void sub_1000D6DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1000D6E0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[GKClientProxy gameCenterClient];
  [v4 setAchievementsRateLimitedCurrentState:0];

  id v5 = +[GKClientProxy gameCenterClient];
  [v5 setAchievementsRateLimitingCurrentNumberOfRequests:0];

  id v6 = +[GKClientProxy gameCenterClient];
  [v6 setScoresRateLimitedCurrentState:0];

  id v7 = +[GKClientProxy gameCenterClient];
  [v7 setScoresRateLimitingCurrentNumberOfRequests:0];

  if (objc_opt_respondsToSelector())
  {
    id v8 = +[GKClientProxy gameCenterClient];
    id v9 = *(void **)(a1 + 40);
    uint64_t v10 = [v8 replyQueue];
    id v13 = _NSConcreteStackBlock;
    uint64_t v14 = 3221225472;
    id v15 = sub_1000D6FD0;
    id v16 = &unk_1002D9608;
    id v11 = v8;
    uint64_t v12 = *(void *)(a1 + 32);
    id v17 = v11;
    uint64_t v18 = v12;
    [v9 notifyOnQueue:v10 block:&v13];
  }
  [*(id *)(a1 + 40) setError:v3, v13, v14, v15, v16];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1000D6F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

id sub_1000D6FD0(uint64_t a1)
{
  int8x16_t v1 = *(void **)(a1 + 32);
  id v2 = [*(id *)(*(void *)(a1 + 40) + 40) refreshDataType];

  return [v1 refreshContentsForDataType:v2 userInfo:0];
}

void sub_1000D7014(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) error];

  if (v2)
  {
    if (!os_log_GKGeneral) {
      id v3 = (id)GKOSLoggers();
    }
    id v4 = os_log_GKDaemon;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      id v5 = [*(id *)(a1 + 32) error];
      int v8 = 138412290;
      id v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%@", (uint8_t *)&v8, 0xCu);
    }
  }
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v6 = *(void *)(a1 + 40);
    id v7 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);
  }
}

void sub_1000D7140(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D7228(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = *(void **)(*(void *)(a1 + 32) + 40);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  _DWORD v3[2] = sub_1000D72D0;
  v3[3] = &unk_1002D92B8;
  id v4 = *(id *)(a1 + 48);
  [v2 writeResources:v1 handler:v3];
}

void sub_1000D72BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000D72D0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000D73D0(uint64_t a1, NSObject *a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Unable to delete delayed requests with ids: %@", (uint8_t *)&v3, 0xCu);
}

void sub_1000D744C(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 138412290;
  *(void *)(buf + 4) = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "%@ - Not submitting delayed requests because retry time interval has not expired. Will try again", buf, 0xCu);
}

void sub_1000D768C(void *a1)
{
  id v2 = +[NSMutableDictionary dictionaryWithContentsOfFile:a1[4]];
  if (!v2) {
    id v2 = objc_alloc_init((Class)NSMutableDictionary);
  }
  id v3 = v2;
  [v2 setObject:&off_1002F2150 forKeyedSubscript:a1[5]];
  [v3 writeToFile:a1[4] atomically:1];
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_1000D7814(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) friendSuggestionsDenyListLocation];
  id v1 = objc_alloc_init((Class)NSMutableDictionary);
  [v1 writeToFile:v2 atomically:1];
}

void sub_1000D7974(uint64_t a1, NSObject *a2)
{
  int v2 = 136315394;
  id v3 = "-[GKContactDenier deniedContactIdentifiers]";
  __int16 v4 = 2112;
  uint64_t v5 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "%s error: %@", (uint8_t *)&v2, 0x16u);
}

void sub_1000D7BB8(uint64_t a1)
{
  if (([*(id *)(a1 + 32) inFlightProvision] & 1) == 0)
  {
    if (!os_log_GKGeneral) {
      id v2 = (id)GKOSLoggers();
    }
    id v3 = os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Provisioning pseudonym", buf, 2u);
    }
    [*(id *)(a1 + 32) setInFlightProvision:1];
    __int16 v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKFireworksPseudonymManager.m", 56, "-[GKFireworksPseudonymManager provisionPseudonymIfNeeded:]_block_invoke");
    uint64_t v5 = +[GKDispatchGroup dispatchGroupWithName:v4];

    uint64_t v6 = [*(id *)(a1 + 32) service];
    id v7 = [v6 pseudonymPropertiesWithFeatureID:@"GamecenterMultiplayerFastsync" scopeID:0 expiryDurationInSeconds:86400.0];

    *(void *)buf = 0;
    BOOL v20 = buf;
    uint64_t v21 = 0x2020000000;
    int v22 = 0;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    void v15[2] = sub_1000D7ED4;
    v15[3] = &unk_1002D97C0;
    void v15[4] = *(void *)(a1 + 32);
    id v8 = v7;
    id v16 = v8;
    uint64_t v18 = buf;
    id v17 = *(id *)(a1 + 40);
    [v5 perform:v15];
    if ([v5 waitWithTimeout:60.0] && GKAtomicCompareAndSwap32())
    {
      if (!os_log_GKGeneral) {
        id v9 = (id)GKOSLoggers();
      }
      uint64_t v10 = os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v14 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Timeout while handling pseudonym provision.", v14, 2u);
      }
      id v11 = +[NSError userErrorForCode:28 description:@"Connection timeout."];
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
    if (!os_log_GKGeneral) {
      id v12 = (id)GKOSLoggers();
    }
    id v13 = os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Provisioning pseudonym task done.", v14, 2u);
    }

    _Block_object_dispose(buf, 8);
  }
}

void sub_1000D7EB4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1000D7ED4(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int16 v4 = [*(id *)(a1 + 32) service];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_1000D7FA8;
  v9[3] = &unk_1002D9798;
  uint64_t v5 = *(void *)(a1 + 40);
  id v7 = *(void **)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  void v9[4] = *(void *)(a1 + 32);
  uint64_t v12 = v6;
  id v10 = v7;
  id v11 = v3;
  id v8 = v3;
  [v4 provisionPseudonymWithProperties:v5 completion:v9];
}

void sub_1000D7FA8(uint64_t a1, void *a2, void *a3)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_1000D80A0;
  v9[3] = &unk_1002D9770;
  id v10 = a2;
  id v11 = a3;
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void **)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v15 = v5;
  id v13 = v6;
  id v14 = *(id *)(a1 + 48);
  id v7 = v11;
  id v8 = v10;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v9);
}

uint64_t sub_1000D80A0(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers();
  }
  id v3 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    int v7 = 138412546;
    uint64_t v8 = v4;
    __int16 v9 = 2112;
    uint64_t v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Provisioned pseudonym %@ %@", (uint8_t *)&v7, 0x16u);
  }
  [*(id *)(a1 + 48) setInFlightProvision:0];
  if (GKAtomicCompareAndSwap32()) {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_1000D8294(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers();
  }
  id v3 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    id v47 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Revoking pseudonym: %@.", buf, 0xCu);
  }
  uint64_t v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKFireworksPseudonymManager.m", 90, "-[GKFireworksPseudonymManager revokePseudonym:withCompletionHandler:]_block_invoke");
  uint64_t v6 = +[GKDispatchGroup dispatchGroupWithName:v5];

  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  int v7 = [*(id *)(a1 + 40) service];
  uint64_t v8 = [v7 pseudonymURIMap];

  id obj = v8;
  id v32 = [v8 countByEnumeratingWithState:&v40 objects:v45 count:16];
  if (v32)
  {
    uint64_t v31 = *(void *)v41;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v41 != v31) {
          objc_enumerationMutation(obj);
        }
        uint64_t v33 = v9;
        uint64_t v10 = *(void *)(*((void *)&v40 + 1) + 8 * v9);
        long long v36 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        id v11 = [*(id *)(a1 + 40) service];
        uint64_t v12 = [v11 pseudonymURIMap];
        id v13 = [v12 objectForKeyedSubscript:v10];

        id v14 = [v13 countByEnumeratingWithState:&v36 objects:v44 count:16];
        if (v14)
        {
          id v15 = v14;
          uint64_t v16 = *(void *)v37;
          do
          {
            for (int i = 0; i != v15; int i = (char *)i + 1)
            {
              if (*(void *)v37 != v16) {
                objc_enumerationMutation(v13);
              }
              uint64_t v18 = *(void **)(*((void *)&v36 + 1) + 8 * i);
              double v19 = [v18 URI];
              BOOL v20 = [v19 prefixedURI];
              unsigned int v21 = [v20 isEqualToString:*(void *)(a1 + 32)];

              if (v21)
              {
                if (!os_log_GKGeneral) {
                  id v22 = (id)GKOSLoggers();
                }
                id v23 = os_log_GKMatch;
                if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 138412290;
                  id v47 = v18;
                  _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Revoking {pseudonym: %@}", buf, 0xCu);
                }
                [v6 enter];
                id v24 = [*(id *)(a1 + 40) service];
                v34[0] = _NSConcreteStackBlock;
                v34[1] = 3221225472;
                _OWORD v34[2] = sub_1000D8778;
                void v34[3] = &unk_1002D97E8;
                void v34[4] = v18;
                id v35 = v6;
                [v24 revokePseudonym:v18 completion:v34];
              }
            }
            id v15 = [v13 countByEnumeratingWithState:&v36 objects:v44 count:16];
          }
          while (v15);
        }

        uint64_t v9 = v33 + 1;
      }
      while ((id)(v33 + 1) != v32);
      id v32 = [obj countByEnumeratingWithState:&v40 objects:v45 count:16];
    }
    while (v32);
  }

  if ([v6 waitWithTimeout:60.0])
  {
    if (!os_log_GKGeneral) {
      id v25 = (id)GKOSLoggers();
    }
    id v26 = os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      id v27 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      id v47 = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Timeout while revoking pseudonym: %@.", buf, 0xCu);
    }
    id v28 = +[NSString stringWithFormat:@"Timeout while revoking pseudonym: %@.", *(void *)(a1 + 32)];
    uint64_t v29 = +[NSError userErrorForCode:35 description:v28];
  }
  else
  {
    uint64_t v29 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1000D8778(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (!os_log_GKGeneral) {
    id v5 = (id)GKOSLoggers();
  }
  uint64_t v6 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 138412546;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    id v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Revoked {pseudonym: %@, error: %@}", (uint8_t *)&v8, 0x16u);
  }
  [*(id *)(a1 + 40) leave];
}

uint64_t finalize_stmt_applier(int a1, sqlite3_stmt *pStmt)
{
  return sqlite3_finalize(pStmt);
}

void sub_1000D9118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v13 - 144), 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1000D915C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = *(sqlite3 **)(*(void *)(a1 + 32) + 24);
  int v24 = 1;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = sqlite3_file_control(v5, 0, 10, &v24);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = sqlite3_exec(*(sqlite3 **)(*(void *)(a1 + 32) + 24), "PRAGMA journal_mode=WAL; PRAGMA foreign_keys=ON;",
                                                                  0,
                                                                  0,
                                                                  (char **)(*(void *)(*(void *)(a1 + 56) + 8)
                                                                          + 24));
  int v6 = *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  if (v6 == 13 || v6 == 10)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers();
    }
    uint64_t v9 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      int v10 = *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "GKDatabaseConnection can't exec on database due to rc2=%d - closing and retrying", buf, 8u);
    }
    sqlite3_close(*(sqlite3 **)(*(void *)(a1 + 32) + 24));
    id v11 = +[NSFileManager defaultManager];
    uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 16);
    id v23 = 0;
    unsigned __int8 v13 = [v11 removeItemAtPath:v12 error:&v23];
    id v14 = v23;
    if (v13)
    {
      uint64_t v15 = v14;
      *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = sqlite3_open_v2((const char *)[*(id *)(*(void *)(a1 + 32) + 16) cStringUsingEncoding:4], (sqlite3 **)(*(void *)(a1 + 32) + 24), 6, 0);
      if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
      {
        *(void *)buf = 0;
        uint64_t v16 = *(sqlite3 **)(*(void *)(a1 + 32) + 24);
        int v22 = 1;
        *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = sqlite3_file_control(v16, 0, 10, &v22);
        *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = sqlite3_exec(*(sqlite3 **)(*(void *)(a1 + 32) + 24), "PRAGMA journal_mode=WAL; PRAGMA foreign_keys=ON;",
                                                                        0,
                                                                        0,
                                                                        (char **)buf);

        goto LABEL_13;
      }
      if (!os_log_GKGeneral) {
        id v17 = (id)GKOSLoggers();
      }
      uint64_t v18 = os_log_GKTrace;
      if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
      {
        int v19 = *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "GKDatabaseConnection couldn't recreate the database due to returnFlagFileOpen=%d - closing and throwing exception", buf, 8u);
      }
      sqlite3_close(*(sqlite3 **)(*(void *)(a1 + 32) + 24));
      +[NSString stringWithFormat:@"failed to open database (%d)", *(unsigned int *)(a1 + 72)];
    }
    else
    {
      +[NSString stringWithFormat:@"failed to set pragmas for database connection and to remove existing database.(%d)", *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)];
    BOOL v20 = };
    id v21 = +[NSException exceptionWithName:@"GKDatabaseInaccessibleException" reason:v20 userInfo:0];

    objc_exception_throw(v21);
  }
LABEL_13:
}

void sub_1000D9540(uint64_t a1)
{
  uint64_t v1 = a1 + 32;
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(*(void *)(a1 + 32) + 8), (CFDictionaryApplierFunction)finalize_stmt_applier, 0);
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(*(void *)v1 + 8));
  uint64_t v2 = sqlite3_close(*(sqlite3 **)(*(void *)v1 + 24));
  if (v2)
  {
    uint64_t v3 = v2;
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    id v5 = (void *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000DA000(v1, v5, v3);
    }
  }
  else
  {
    *(void *)(*(void *)v1 + 24) = 0;
  }
  if ((GKAtomicCompareAndSwap32Barrier() & 1) == 0)
  {
    if (!os_log_GKGeneral) {
      id v6 = (id)GKOSLoggers();
    }
    uint64_t v7 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "databaseCloseReentrancyCount out of sync", v8, 2u);
    }
  }
}

uint64_t sub_1000D9798(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(*(void *)(a1 + 32) + 24));
}

uint64_t sub_1000D98D4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(*(void *)(a1 + 32) + 24));
}

void sub_1000D9A48(uint64_t a1)
{
  sqlite3_exec(*(sqlite3 **)(*(void *)(a1 + 32) + 24), "BEGIN", 0, 0, 0);
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  if (sqlite3_exec(*(sqlite3 **)(*(void *)(a1 + 32) + 24), "COMMIT", 0, 0, 0))
  {
    uint64_t v2 = +[NSError _gkErrorForDatabase:*(void *)(*(void *)(a1 + 32) + 24)];
    if (!os_log_GKGeneral) {
      id v3 = (id)GKOSLoggers();
    }
    id v4 = os_log_GKCache;
    if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
      sub_1000DA164((uint64_t)v2, v4);
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  id v5 = dispatch_get_global_queue(0, 0);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1000D9D58;
  void v7[3] = &unk_1002D3930;
  id v9 = *(id *)(a1 + 48);
  id v6 = v2;
  id v8 = v6;
  dispatch_async(v5, v7);
}

void sub_1000D9C18(_Unwind_Exception *a1)
{
}

uint64_t sub_1000D9D58(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1000D9DE4()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "not opening the database at this time, as the device is currently locked", v2, v3, v4, v5, v6);
}

void sub_1000D9E18(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = a2;
  uint64_t v5 = +[NSNumber numberWithInt:a3];
  sub_100017990();
  sub_100011B60((void *)&_mh_execute_header, v6, v7, "unable to reset prepared statement for SQL: %@ due to id result = %@", v8, v9, v10, v11, 2u);
}

void sub_1000D9ECC(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = a2;
  uint64_t v5 = +[NSNumber numberWithInt:a3];
  sub_100017990();
  sub_100011B60((void *)&_mh_execute_header, v6, v7, "unable to create prepared statement for SQL: %@ due to result=%@", v8, v9, v10, v11, 2u);
}

void sub_1000D9F80(uint64_t a1, NSObject *a2)
{
  uint64_t v2 = *(void *)(*(void *)a1 + 24);
  int v3 = 136315138;
  uint64_t v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "unable to sqlite3_exec  due to error %s", (uint8_t *)&v3, 0xCu);
}

void sub_1000DA000(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)a1 + 16);
  uint64_t v5 = a2;
  uint64_t v6 = +[NSNumber numberWithInt:a3];
  int v7 = 138412546;
  uint64_t v8 = v4;
  sub_100017990();
  _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "unable to close database connection to %@due to id result = %@", (uint8_t *)&v7, 0x16u);
}

void sub_1000DA0C8()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "sqlite database was closed by another process, reopening (performSync)", v2, v3, v4, v5, v6);
}

void sub_1000DA0FC()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "sqlite database was closed by another process, reopening(performAsync)", v2, v3, v4, v5, v6);
}

void sub_1000DA130()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "sqlite database was closed by another process, reopening(performAsyncTransaction)", v2, v3, v4, v5, v6);
}

void sub_1000DA164(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Unable to write record to cache. Rolling back transaction: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000DA3BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DA3D4(uint64_t a1, sqlite3 *a2)
{
  uint64_t result = sqlite3_exec(a2, (const char *)[*(id *)(a1 + 32) UTF8String], 0, 0, 0);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1000DB3EC(void *a1, void *a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = [a2 ttrURLString];
  int v5 = 138412290;
  uint8_t v6 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Can't handle action of filing a radar due to invalid url: %@", (uint8_t *)&v5, 0xCu);
}

void sub_1000DB6C4(uint64_t a1)
{
  int v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void **)(a1 + 48);
  int v5 = (void *)v2[1];
  uint64_t v6 = v2[2];
  int v7 = [v2 credential];
  uint64_t v8 = [v7 playerInternal];
  uint64_t v9 = [v4 _gkPlistXMLDataForClient:v6 player:v8];
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(v10 + 16);
  uint64_t v12 = *(void *)(v10 + 24);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  void v14[2] = sub_1000DB7E0;
  void v14[3] = &unk_1002D9890;
  id v15 = *(id *)(a1 + 40);
  id v13 = *(id *)(a1 + 56);
  uint64_t v16 = *(void *)(a1 + 32);
  id v17 = v13;
  [v5 readDataForBagKey:v3 postData:v9 client:v11 credential:v12 completion:v14];
}

void sub_1000DB7E0(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7 = a2;
  id v8 = a3;
  if (v8)
  {
    if (!os_log_GKGeneral) {
      id v9 = (id)GKOSLoggers();
    }
    uint64_t v10 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000DBD04(a1, (uint64_t)v8, v10);
    }
  }
  if (*(void *)(a1 + 48))
  {
    if (!os_log_GKGeneral) {
      id v11 = (id)GKOSLoggers();
    }
    uint64_t v12 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "postRequest:Response handler exist for read data for bag key call", buf, 2u);
    }
    if (v7)
    {
      id v18 = 0;
      id v13 = +[NSDictionary _gkDictionaryWithServerData:v7 error:&v18];
      id v14 = v18;
      id v15 = +[GKResource resourceWithID:*(void *)(a1 + 32) representedItem:v13 TTL:a4];
    }
    else
    {
      id v15 = 0;
      id v13 = 0;
      id v14 = 0;
    }
    uint64_t v16 = *(void *)(a1 + 48);
    id v17 = [*(id *)(a1 + 40) errorForBagError:v8 serverError:v14];
    (*(void (**)(uint64_t, void *, void *))(v16 + 16))(v16, v15, v17);
  }
}

void sub_1000DBAD8(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers();
  }
  uint64_t v3 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "postRequest: forBagKey: result:", buf, 2u);
  }
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void **)(a1 + 48);
  id v7 = (void *)v4[1];
  uint64_t v8 = v4[2];
  id v9 = [v4 credential];
  uint64_t v10 = [v9 playerInternal];
  id v11 = [v6 _gkPlistXMLDataForClient:v8 player:v10];
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = *(void *)(v12 + 16);
  uint64_t v14 = *(void *)(v12 + 24);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  void v15[2] = sub_1000DBC3C;
  v15[3] = &unk_1002D3C80;
  id v16 = *(id *)(a1 + 56);
  [v7 readDataForBagKey:v5 postData:v11 client:v13 credential:v14 completion:v15];
}

uint64_t sub_1000DBC3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a3);
  }
  return result;
}

void sub_1000DBD04(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = 138412546;
  uint64_t v5 = v3;
  __int16 v6 = 2112;
  uint64_t v7 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "postRequest:Failed to read data for bag key (%@) due to error: %@", (uint8_t *)&v4, 0x16u);
}

void sub_1000DC098(id a1)
{
  id v1 = objc_alloc_init((Class)NSDateFormatter);
  id v2 = (void *)qword_100329738;
  qword_100329738 = (uint64_t)v1;

  [(id)qword_100329738 setDateStyle:1];
  uint64_t v3 = (void *)qword_100329738;

  _[v3 setTimeStyle:2];
}

id sub_1000DC3B8(id a1, NSString *a2, unint64_t a3)
{
  return +[GKResource resourceWithID:a2];
}

uint64_t sub_1000DC5F8(uint64_t a1)
{
  qword_100329748 = [[GKResource alloc] initWithResourceID:*(void *)(a1 + 32) representedItem:0 TTL:0.0];

  return _objc_release_x1();
}

void sub_1000DC71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DC734(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if (result)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    *a3 = 1;
  }
  return result;
}

BOOL sub_1000DC78C(id a1, GKResource *a2, BOOL *a3)
{
  return [(GKResource *)a2 isExpired];
}

BOOL sub_1000DC7A0(id a1, GKResource *a2, BOOL *a3)
{
  return [(GKResource *)a2 isInvalid];
}

BOOL sub_1000DC7B4(id a1, GKResource *a2, BOOL *a3)
{
  uint64_t v3 = a2;
  if ([(GKResource *)v3 isExpired]) {
    LOBYTE(v4) = 0;
  }
  else {
    unsigned int v4 = ![(GKResource *)v3 isInvalid];
  }

  return v4;
}

BOOL sub_1000DC808(id a1, GKResource *a2, BOOL *a3)
{
  uint64_t v3 = a2;
  if ([(GKResource *)v3 isExpired]) {
    unsigned __int8 v4 = 1;
  }
  else {
    unsigned __int8 v4 = [(GKResource *)v3 isInvalid];
  }

  return v4;
}

BOOL sub_1000DC874(id a1, GKResource *a2)
{
  id v2 = a2;
  if ([(GKResource *)v2 isInvalid]) {
    unsigned __int8 v3 = 1;
  }
  else {
    unsigned __int8 v3 = [(GKResource *)v2 isExpired];
  }

  return v3;
}

BOOL sub_1000DC8C8(id a1, GKResource *a2)
{
  return [(GKResource *)a2 isExpired];
}

BOOL sub_1000DC8DC(id a1, GKResource *a2)
{
  return [(GKResource *)a2 isInvalid];
}

void GKBindParam(sqlite3_stmt *a1, const char *a2, NSString *a3)
{
  uint64_t v7 = a3;
  int v5 = sqlite3_bind_parameter_index(a1, a2);
  if (v5 >= 1)
  {
    __int16 v6 = v7;
    sqlite3_bind_text(a1, v5, [(NSString *)v6 UTF8String], (int)[(NSString *)v6 lengthOfBytesUsingEncoding:4], (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  }
}

void sub_1000DCB5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t GKBindParam(sqlite3_stmt *a1, const char *a2, sqlite3_int64 a3)
{
  uint64_t result = sqlite3_bind_parameter_index(a1, a2);
  if ((int)result >= 1)
  {
    return sqlite3_bind_int64(a1, result, a3);
  }
  return result;
}

{
  uint64_t result;
  uint64_t vars8;

  uint64_t result = sqlite3_bind_parameter_index(a1, a2);
  if ((int)result >= 1)
  {
    return sqlite3_bind_int64(a1, result, a3);
  }
  return result;
}

uint64_t GKBindParam(sqlite3_stmt *a1, const char *a2, int a3)
{
  uint64_t result = sqlite3_bind_parameter_index(a1, a2);
  if ((int)result >= 1)
  {
    return sqlite3_bind_int(a1, result, a3);
  }
  return result;
}

{
  uint64_t result;
  uint64_t vars8;

  uint64_t result = sqlite3_bind_parameter_index(a1, a2);
  if ((int)result >= 1)
  {
    return sqlite3_bind_int(a1, result, a3);
  }
  return result;
}

{
  uint64_t result;
  uint64_t vars8;

  uint64_t result = sqlite3_bind_parameter_index(a1, a2);
  if ((int)result >= 1)
  {
    return sqlite3_bind_int(a1, result, a3);
  }
  return result;
}

{
  uint64_t result;
  uint64_t vars8;

  uint64_t result = sqlite3_bind_parameter_index(a1, a2);
  if ((int)result >= 1)
  {
    return sqlite3_bind_int(a1, result, a3);
  }
  return result;
}

uint64_t GKBindParam(sqlite3_stmt *a1, const char *a2, double a3)
{
  uint64_t result = sqlite3_bind_parameter_index(a1, a2);
  if ((int)result >= 1)
  {
    return sqlite3_bind_double(a1, result, a3);
  }
  return result;
}

void GKBindParam(sqlite3_stmt *a1, const char *a2, NSDate *a3)
{
  uint64_t v7 = a3;
  int v5 = sqlite3_bind_parameter_index(a1, a2);
  if (v5 >= 1)
  {
    __int16 v6 = [(NSDate *)v7 _gkServerTimestamp];
    sqlite3_bind_int64(a1, v5, (sqlite3_int64)[v6 longLongValue]);
  }
}

void sub_1000DCE1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void GKBindParam(sqlite3_stmt *a1, const char *a2, NSNumber *a3)
{
  uint64_t v7 = a3;
  int v5 = sqlite3_bind_parameter_index(a1, a2);
  if (v5 >= 1)
  {
    [(NSNumber *)v7 doubleValue];
    sqlite3_bind_double(a1, v5, v6);
  }
}

void sub_1000DCEB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void GKBindParam(sqlite3_stmt *a1, const char *a2, NSData *a3)
{
  uint64_t v7 = a3;
  int v5 = sqlite3_bind_parameter_index(a1, a2);
  if (v5 >= 1)
  {
    double v6 = v7;
    sqlite3_bind_blob(a1, v5, [(NSData *)v6 bytes], (int)[(NSData *)v6 length], (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  }
}

void sub_1000DCFB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000DD304(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = +[GKAMPController controller];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000DD3E8;
  void v8[3] = &unk_1002D9AB0;
  id v12 = *(id *)(a1 + 48);
  id v5 = *(id *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  id v9 = v5;
  uint64_t v10 = v6;
  id v11 = v3;
  id v7 = v3;
  [v4 getBagWithCompletion:v8];
}

void sub_1000DD3E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = v3;
  if (v3)
  {
    id v5 = [v3 stringForKey:@"arcade-iap-family-id"];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    void v11[2] = sub_1000DD528;
    v11[3] = &unk_1002D9A88;
    id v6 = *(id *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(void **)(a1 + 48);
    id v12 = v6;
    uint64_t v13 = v7;
    id v14 = v8;
    id v15 = *(id *)(a1 + 56);
    [v5 valueWithCompletion:v11];
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v9 = (id)GKOSLoggers();
    }
    uint64_t v10 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000DD66C(v10);
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_1000DD528(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v18 = a2;
  id v6 = a4;
  uint64_t v7 = *(void **)(a1 + 32);
  if (v7)
  {
    uint64_t v8 = [v7 familyID];
    id v9 = [v8 stringValue];
    unsigned int v10 = [v9 isEqualToString:v18];

    if (v10)
    {
      unsigned __int8 v11 = [*(id *)(a1 + 40) hasConsumedArcadeSubscription:*(void *)(a1 + 48) arcadeFamilyId:v18];
      id v12 = *(void **)(a1 + 32);
      if (v12)
      {
        uint64_t v13 = [v12 expiryDate];
        id v14 = +[NSDate now];
        id v15 = [v13 compare:v14];

        uint64_t v16 = 1;
        if (((v18 != 0) & v11) != 0) {
          uint64_t v16 = 2;
        }
        if (v15 == (id)1) {
          uint64_t v17 = 3;
        }
        else {
          uint64_t v17 = v16;
        }
      }
      else if (((v18 != 0) & v11) != 0)
      {
        uint64_t v17 = 2;
      }
      else
      {
        uint64_t v17 = 1;
      }
      [*(id *)(a1 + 40) setArcadeSubscriptionState:v17];
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_1000DD66C(os_log_t log)
{
  *(_WORD *)id v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Cannot setup arcade subscription state without a bag.", v1, 2u);
}

void sub_1000DD704(id a1)
{
  qword_100329758 = objc_alloc_init(GKBadgeController);

  _objc_release_x1();
}

void sub_1000DD978(uint64_t a1)
{
  if (qword_100329768 == *(void *)(a1 + 40))
  {
    id v2 = +[NSMutableDictionary dictionaryWithCapacity:4];
    for (uint64_t i = 0; i != 4; ++i)
    {
      unsigned __int8 v4 = [*(id *)(a1 + 32) _plistKeyForBadgeType:i];
      [v2 setObject:*(void *)(*(void *)(a1 + 32) + 8 * i + 8) forKeyedSubscript:v4];
    }
    id v27 = 0;
    id v5 = +[NSPropertyListSerialization dataWithPropertyList:v2 format:200 options:0 error:&v27];
    id v6 = v27;
    if (v5)
    {
      uint64_t v7 = [*(id *)(a1 + 32) _badgeCountURL];
      id v26 = v6;
      unsigned __int8 v8 = [v5 writeToURL:v7 options:1 error:&v26];
      id v9 = v26;

      if ((v8 & 1) == 0)
      {
        if (!os_log_GKGeneral) {
          id v10 = (id)GKOSLoggers();
        }
        unsigned __int8 v11 = os_log_GKError;
        if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
          sub_1000DF460((uint64_t)v9, v11, v12, v13, v14, v15, v16, v17);
        }
      }
    }
    else
    {
      if (!os_log_GKGeneral) {
        id v18 = (id)GKOSLoggers();
      }
      int v19 = os_log_GKError;
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
        sub_1000DF3F4((uint64_t)v6, v19, v20, v21, v22, v23, v24, v25);
      }
      id v9 = v6;
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 48) = 0;
  }
}

void sub_1000DDB48(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (!v2[1])
  {
    id v3 = [v2 _badgeCountURL];
    id v35 = 0;
    unsigned __int8 v4 = +[NSData dataWithContentsOfURL:v3 options:1 error:&v35];
    id v5 = v35;

    if (v4)
    {
      id v33 = 0;
      uint64_t v34 = 200;
      id v6 = +[NSPropertyListSerialization propertyListWithData:v4 options:1 format:&v34 error:&v33];
      id v7 = v33;

      if (v6)
      {
        for (uint64_t i = 1; i != 5; ++i)
        {
          id v9 = [*(id *)(a1 + 32) _plistKeyForBadgeType:i - 1];
          id v10 = [v6 objectForKeyedSubscript:v9];
          unsigned __int8 v11 = v10;
          if (v10)
          {
            uint64_t v12 = *(void *)(a1 + 32);
            id v13 = v10;
            uint64_t v14 = *(void **)(v12 + 8 * i);
            *(void *)(v12 + 8 * i) = v13;
          }
          else
          {
            id v15 = objc_alloc_init((Class)NSMutableDictionary);
            uint64_t v16 = *(void *)(a1 + 32);
            uint64_t v14 = *(void **)(v16 + 8 * i);
            *(void *)(v16 + 8 * i) = v15;
          }
        }
      }
      else
      {
        if (!os_log_GKGeneral) {
          id v21 = (id)GKOSLoggers();
        }
        uint64_t v22 = os_log_GKError;
        if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
          sub_1000DF4CC((uint64_t)v7, v22, v23, v24, v25, v26, v27, v28);
        }
        for (uint64_t j = 8; j != 40; j += 8)
        {
          id v30 = objc_alloc_init((Class)NSMutableDictionary);
          uint64_t v31 = *(void *)(a1 + 32);
          id v32 = *(void **)(v31 + j);
          *(void *)(v31 + j) = v30;
        }
      }
    }
    else
    {
      for (uint64_t k = 8; k != 40; k += 8)
      {
        id v18 = objc_alloc_init((Class)NSMutableDictionary);
        uint64_t v19 = *(void *)(a1 + 32);
        uint64_t v20 = *(void **)(v19 + k);
        *(void *)(v19 + k) = v18;
      }
      id v7 = v5;
    }
  }
}

void sub_1000DDF90(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    [*(id *)(a1 + 32) badgeBundleID:*(void *)(a1 + 40) badgeCount:*(void *)(a1 + 48)];
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v6 = (id)GKOSLoggers();
    }
    id v7 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)unsigned __int8 v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "GKBadgeController - RegisterBadgePermission denied", v8, 2u);
    }
  }
}

void sub_1000DE044(uint64_t a1)
{
  uint64_t v2 = GKGameCenterIdentifier;
  if ([*(id *)(a1 + 32) isEqualToString:GKGameCenterIdentifier])
  {
    id v3 = +[GKClientProxy gameCenterClient];
    [v3 setBadgeCount:[*(id *)(a1 + 40) _badgeCountForBundleID:badgeType:v2, 0] forType:0];
    [v3 setBadgeCount:[*(id *)(a1 + 40) _badgeCountForBundleID:badgeType:v2, 1] forType:1];
    [v3 setBadgeCount:[*(id *)(a1 + 40) _badgeCountForBundleID:badgeType:v2, 2] forType:2];
  }
}

id sub_1000DE814(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _badgeCountForBundleID:*(void *)(a1 + 40) badgeType:*(void *)(a1 + 56)];
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = result;
  return result;
}

void sub_1000DEC38(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) _dictionaryForBadgeType:*(void *)(a1 + 48)];
  uint64_t v2 = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 56)];
  [v3 setObject:v2 forKeyedSubscript:*(void *)(a1 + 40)];

  *(unsigned char *)(*(void *)(a1 + 32) + 48) = 1;
  [*(id *)(a1 + 32) badgeApplicationWithBundleID:*(void *)(a1 + 40) badgeCount:[*(id *)(a1 + 32) _totalBadgeCountForBundleID:*(void *)(a1 + 40)]];
}

void sub_1000DED54(uint64_t a1)
{
  uint64_t v2 = +[NSMutableSet set];
  for (uint64_t i = 8; i != 40; i += 8)
  {
    unsigned __int8 v4 = [*(id *)(*(void *)(a1 + 32) + i) allKeys];
    [v2 addObjectsFromArray:v4];
  }
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v5 = v2;
  id v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v13;
    do
    {
      id v9 = 0;
      do
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v5);
        }
        [*(id *)(a1 + 32) badgeApplicationWithBundleID:*(void *)(*((void *)&v12 + 1) + 8 * (void)v9) badgeCount:objc_msgSend(*(id *)(a1 + 32), "_totalBadgeCountForBundleID:", *(void *)(*((void *)&v12 + 1) + 8 * (void)v9), (void)v12)];
        id v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v7);
  }

  id v10 = +[GKClientProxy gameCenterClient];
  uint64_t v11 = GKGameCenterIdentifier;
  [v10 setBadgeCount:objc_msgSend(*(id *)(a1 + 32), "_badgeCountForBundleID:badgeType:", GKGameCenterIdentifier, 0) forType:0];
  [v10 setBadgeCount:[*(id *)(a1 + 32) _badgeCountForBundleID:v11 badgeType:1] forType:1];
  [v10 setBadgeCount:objc_msgSend(*(id *)(a1 + 32), "_badgeCountForBundleID:badgeType:", v11, 2) forType:2];
}

void sub_1000DEFB8(uint64_t a1)
{
  uint64_t v2 = +[NSMutableSet set];
  for (uint64_t i = 8; i != 40; i += 8)
  {
    unsigned __int8 v4 = [*(id *)(*(void *)(a1 + 32) + i) allKeys];
    [v2 addObjectsFromArray:v4];

    [*(id *)(*(void *)(a1 + 32) + i) removeAllObjects];
    *(unsigned char *)(*(void *)(a1 + 32) + 48) = 1;
  }
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v5 = v2;
  id v6 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v12;
    do
    {
      id v9 = 0;
      do
      {
        if (*(void *)v12 != v8) {
          objc_enumerationMutation(v5);
        }
        [*(id *)(a1 + 32) badgeApplicationWithBundleID:v11 badgeCount:0];
        id v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v7);
  }

  id v10 = +[GKClientProxy gameCenterClient];
  [v10 setBadgeCount:0 forType:0];
  [v10 setBadgeCount:0 forType:1];
  [v10 setBadgeCount:0 forType:2];
}

void sub_1000DF2DC(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _totalBadgeCountForBundleID:*(void *)(a1 + 40)])
  {
    id v2 = [objc_alloc((Class)UNUserNotificationCenter) initWithBundleIdentifier:*(void *)(a1 + 40)];
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    _DWORD v3[2] = sub_1000DF398;
    v3[3] = &unk_1002D9BC0;
    id v4 = *(id *)(a1 + 48);
    [v2 requestAuthorizationWithOptions:1 completionHandler:v3];
  }
}

uint64_t sub_1000DF398(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000DF3F4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000DF460(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000DF4CC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000DFC74(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(*(void *)(a1 + 32) + 16);
  if (!v4)
  {
    id v5 = +[NSString stringWithFormat:@"Assertion failed"];
    id v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKCacheObject.m"];
    id v7 = [v6 lastPathComponent];
    uint64_t v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@ (self->_lookup != ((void *)0))\n[%s (%s:%d)]", v5, "-[GKUniqueObjectIDLookup _populateWithContext:]_block_invoke", [v7 UTF8String], 105);

    +[NSException raise:@"GameKit Exception", @"%@", v8 format];
    id v4 = *(void **)(*(void *)(a1 + 32) + 16);
  }
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_1000DFE14;
  void v12[3] = &unk_1002D9BE8;
  id v13 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 32);
  id v14 = v9;
  uint64_t v15 = v10;
  id v16 = *(id *)(a1 + 56);
  id v17 = v3;
  id v11 = v3;
  [v4 writeToDictionary:v12];
}

void sub_1000DFE14(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 removeAllObjects];
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id obj = *(id *)(a1 + 32);
  id v4 = [obj countByEnumeratingWithState:&v22 objects:v34 count:16];
  if (v4)
  {
    id v6 = v4;
    uint64_t v7 = *(void *)v23;
    *(void *)&long long v5 = 136315906;
    long long v19 = v5;
    do
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v23 != v7) {
          objc_enumerationMutation(obj);
        }
        id v9 = *(void **)(*((void *)&v22 + 1) + 8 * i);
        uint64_t v10 = [v9 objectForKeyedSubscript:@"objectID" v19];
        uint64_t v11 = [v9 objectForKeyedSubscript:*(void *)(a1 + 40)];
        long long v12 = (void *)v11;
        if (v10) {
          BOOL v13 = v11 == 0;
        }
        else {
          BOOL v13 = 1;
        }
        if (!v13)
        {
          id v14 = [v3 objectForKeyedSubscript:v11];
          if (v14)
          {
            if (!os_log_GKGeneral) {
              id v15 = (id)GKOSLoggers();
            }
            id v16 = (void *)os_log_GKCache;
            if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG))
            {
              cls = *(objc_class **)(*(void *)(a1 + 48) + 8);
              id v17 = v16;
              Name = class_getName(cls);
              *(_DWORD *)buf = v19;
              uint64_t v27 = Name;
              __int16 v28 = 2112;
              uint64_t v29 = v10;
              __int16 v30 = 2112;
              uint64_t v31 = v14;
              __int16 v32 = 2112;
              id v33 = v12;
              _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "UNIQUENESS FAILURE for %s:%@ and %@ found for %@", buf, 0x2Au);
            }
            [*(id *)(a1 + 56) addObject:v14];
          }
          [v3 setObject:v10 forKeyedSubscript:v12];
        }
      }
      id v6 = [obj countByEnumeratingWithState:&v22 objects:v34 count:16];
    }
    while (v6);
  }

  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_1000E0770(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v11 + 1) + 8 * i);
        uint64_t v10 = [v3 objectForKeyedSubscript:v9];
        if (v10) {
          [*(id *)(a1 + 40) setObject:v10 forKeyedSubscript:v9];
        }
      }
      id v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v6);
  }
}

void sub_1000E08A4(id *a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  id v6 = [a1[4] objectRegisteredForID:v5];
  if (v6)
  {
    [a1[5] setObject:v6 forKeyedSubscript:v7];
    [a1[6] removeObject:v5];
  }
}

void sub_1000E0938(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = [v4 valueForKeyPath:*(void *)(a1 + 32)];
  if (v3) {
    [*(id *)(a1 + 40) setObject:v4 forKeyedSubscript:v3];
  }
}

void sub_1000E09A4(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = [[*(id *)(a1 + 32) objectForKeyedSubscript:];
  if (v3) {
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4)
  {
    uint64_t v5 = (*(void (**)(uint64_t, id))(v4 + 16))(v4, v6);
    if (v5)
    {
      id v3 = (void *)v5;
      [*(id *)(a1 + 40) addObject:v5];
LABEL_5:
      [*(id *)(a1 + 48) addObject:v3];
    }
  }
}

void sub_1000E0A40(uint64_t a1, void *a2)
{
  [a2 addEntriesFromDictionary:*(void *)(a1 + 32)];
  id v3 = *(NSObject **)(a1 + 40);

  dispatch_group_leave(v3);
}

intptr_t sub_1000E0A80(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 32) + 32));
}

uint64_t sub_1000E0D8C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1000E0D9C(uint64_t a1, void *a2)
{
  return [a2 addEntriesFromDictionary:*(void *)(a1 + 32)];
}

id sub_1000E20E0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) objectForKeyedSubscript:a2];
}

void sub_1000E2254(id a1)
{
  id v1 = (void *)qword_100329770;
  qword_100329770 = (uint64_t)&off_1002F2D40;
}

void sub_1000E2564(id *a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  id v6 = [a1[4] objectForKeyedSubscript:v9];
  id v7 = [a1[5] valueForKeyPath:v5];
  uint64_t v8 = v7;
  if (v7 != v6 && ([v7 isEqualToString:v6] & 1) == 0)
  {
    [a1[6] addObject:v9];
    [a1[5] setValue:v6 forKeyPath:v5];
    [a1[5] deleteCachedImage:v8];
  }
}

void sub_1000E28E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E2900(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000E2910(uint64_t a1)
{
}

void sub_1000E2918(uint64_t a1, void *a2, uint64_t a3)
{
  id v10 = a2;
  id v5 = [*(id *)(a1 + 32) valueForKeyPath:a3];
  if (v5)
  {
    id v6 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    if (!v6)
    {
      id v7 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:4];
      uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
      id v9 = *(void **)(v8 + 40);
      *(void *)(v8 + 40) = v7;

      id v6 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    }
    [v6 setObject:v5 forKeyedSubscript:v10];
  }
}

void sub_1000E2DE0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void **)(a1 + 32);
  id v6 = a3;
  id v5 = [v4 valueForKeyPath:v6];
  [v4 deleteCachedImage:v5];

  [*(id *)(a1 + 32) setValue:0 forKeyPath:v6];
}

void sub_1000E30D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000E30F0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  id v6 = [*(id *)(a1 + 32) valueForKeyPath:];

  if (v6)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    *a4 = 1;
  }
}

id sub_1000E4274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) setValue:0 forKeyPath:a3];
}

id sub_1000E4BEC(id a1, GKPlayerInternal *a2, unint64_t a3)
{
  return [(GKPlayerInternal *)a2 playerID];
}

id sub_1000E4E28(uint64_t a1, void *a2)
{
  id v3 = *(objc_class **)(a1 + 40);
  id v4 = a2;
  id v5 = [[v3 alloc] initWithManagedObjectContext:*(void *)(a1 + 32)];
  [v5 setPlayerID:v4];

  return v5;
}

void sub_1000E5A90(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  +[NSURL URLWithString:](NSURL, "URLWithString:");
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  id v6 = +[NSFileManager defaultManager];
  id v7 = [v9 path];
  unsigned __int8 v8 = [v6 fileExistsAtPath:v7];

  if ((v8 & 1) == 0)
  {
    [*(id *)(a1 + 32) setPhotoPending:0];
    *a4 = 1;
  }
}

uint64_t sub_1000E5B48(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ([v2 isEqualToString:@"everyone"])
  {
    uint64_t v3 = 0;
  }
  else if ([v2 isEqualToString:@"friends"])
  {
    uint64_t v3 = 1;
  }
  else
  {
    [v2 isEqualToString:@"me"];
    uint64_t v3 = 2;
  }

  return v3;
}

uint64_t sub_1000E5BBC(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ([v2 isEqualToString:GKGlobalFriendListAccessAllowed])
  {
    uint64_t v3 = 0;
  }
  else if ([v2 isEqualToString:GKGlobalFriendListAccessDenied])
  {
    uint64_t v3 = 1;
  }
  else
  {
    [v2 isEqualToString:GKGlobalFriendListAccessUndetermined];
    uint64_t v3 = 2;
  }

  return v3;
}

void sub_1000E66D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [*(id *)(a1 + 32) removeObject:v3];
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v4 = *(void **)(a1 + 32);
      id v5 = [v3 playerID];
      [v4 removeObject:v5];
    }
    else
    {
      if (!os_log_GKGeneral) {
        id v6 = (id)GKOSLoggers();
      }
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
        sub_1000FB83C();
      }
    }
  }
}

void sub_1000E6970(uint64_t a1, void *a2)
{
  id v5 = a2;
  if ([v5 isEqualToString:*(void *)(a1 + 32)])
  {
    id v3 = (id *)(a1 + 40);
  }
  else if ([*(id *)(a1 + 48) containsObject:v5])
  {
    id v3 = (id *)(a1 + 56);
  }
  else if ([*(id *)(a1 + 64) containsObject:v5])
  {
    id v3 = (id *)(a1 + 72);
  }
  else
  {
    unsigned int v4 = [*(id *)(a1 + 80) containsObject:v5];
    id v3 = (id *)(a1 + 96);
    if (v4) {
      id v3 = (id *)(a1 + 88);
    }
  }
  [*v3 addObject:v5];
}

id sub_1000E6BC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) containsObject:v3]) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }

  return v4;
}

void sub_1000E7318(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = [v4 objectForKeyedSubscript:@"bundle-id"];
  if (v3) {
    [*(id *)(a1 + 32) setObject:v4 forKeyedSubscript:v3];
  }
}

id sub_1000E7388(uint64_t a1, void *a2)
{
  id v3 = *(objc_class **)(a1 + 48);
  id v4 = a2;
  id v5 = [[v3 alloc] initWithManagedObjectContext:*(void *)(a1 + 32)];
  id v6 = [*(id *)(a1 + 40) objectForKeyedSubscript:v4];

  [v5 updateWithGameDescriptor:v6];

  return v5;
}

id sub_1000E740C(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v5 = [v4 objectForKeyedSubscript:@"bundle-id"];
  id v6 = [*(id *)(a1 + 32) objectForKeyedSubscript:v5];
  id v7 = [v4 objectForKeyedSubscript:@"short-bundle-version"];
  uint64_t v8 = [v4 objectForKeyedSubscript:@"bundle-version"];
  id v9 = (void *)v8;
  if (v7)
  {
    id v2 = [v6 shortBundleVersion];
    if (([v2 isEqualToString:v7] & 1) == 0)
    {

LABEL_11:
      [v6 updateWithGameDescriptor:v4];
      [v6 expire];
      [v6 invalidate];
      goto LABEL_12;
    }
    if (!v9)
    {

      goto LABEL_12;
    }
  }
  else if (!v8)
  {
    goto LABEL_12;
  }
  id v10 = [v6 bundleVersion];
  unsigned __int8 v11 = [v10 isEqualToString:v9];

  if (v7) {
  if ((v11 & 1) == 0)
  }
    goto LABEL_11;
LABEL_12:
  long long v12 = [v6 managedObjectContext];
  long long v13 = *(void **)(a1 + 40);

  if (v12 != v13)
  {
    long long v14 = +[NSString stringWithFormat:@"The managed object context (moc) that requested a cached game object did not match the moc owned by the game. This is an illegal state and execution cannot continue."];
    id v15 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKCacheObject.m"];
    id v16 = [v15 lastPathComponent];
    id v17 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@ (game.managedObjectContext == moc)\n[%s (%s:%d)]", v14, "+[GKGameCacheObject _gamesForFullGameDescriptors:context:]_block_invoke_3", [v16 UTF8String], 1389);

    +[NSException raise:@"GameKit Exception", @"%@", v17 format];
  }

  return v6;
}

id sub_1000E8BB8(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = [a2 objectForKeyedSubscript:@"achievement-id"];
  id v7 = [v6 isEqualToString:*(void *)(a1 + 32)];

  if (v7) {
    *a4 = 1;
  }
  return v7;
}

id sub_1000E8D94(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 managedObjectContext];
  id v5 = +[GKPlayerProfileCacheObject playerProfileWithPlayerID:v3 inManagedObjectContext:v4];

  return v5;
}

GKListEntryCacheObject *__cdecl sub_1000E8E10(id a1, id a2, NSManagedObjectContext *a3)
{
  id v3 = a3;
  id v4 = [(GKCacheObject *)[GKAchievementThatAFriendHasCacheObject alloc] initWithManagedObjectContext:v3];

  return (GKListEntryCacheObject *)v4;
}

GKListEntryCacheObject *__cdecl sub_1000E90D0(id a1, id a2, NSManagedObjectContext *a3)
{
  id v3 = a3;
  id v4 = [(GKCacheObject *)[GKAchievementDescriptionCacheObject alloc] initWithManagedObjectContext:v3];

  return (GKListEntryCacheObject *)v4;
}

GKListEntryCacheObject *__cdecl sub_1000E99E4(id a1, id a2, NSManagedObjectContext *a3)
{
  id v3 = a3;
  id v4 = [(GKCacheObject *)[GKAchievementCacheObject alloc] initWithManagedObjectContext:v3];

  return (GKListEntryCacheObject *)v4;
}

void sub_1000E9D14(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = [v5 identifier];
  if (v3) {
    [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:v3];
  }
  id v4 = [v5 groupIdentifier];

  if (v4) {
    [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:v4];
  }
}

id sub_1000E9DAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 identifier];
  if (v4)
  {
  }
  else
  {
    id v5 = [v3 groupIdentifier];

    if (!v5) {
      goto LABEL_9;
    }
  }
  id v5 = [v3 internalRepresentation];
  uint64_t v6 = [v3 identifier];
  if (v6)
  {
    id v7 = (void *)v6;
    uint64_t v8 = *(void **)(a1 + 32);
    id v9 = [v3 identifier];
    id v10 = [v8 objectForKeyedSubscript:v9];

    if (v10) {
      goto LABEL_8;
    }
  }
  uint64_t v11 = [v3 groupIdentifier];
  if (v11)
  {
    long long v12 = (void *)v11;
    long long v13 = *(void **)(a1 + 32);
    long long v14 = [v3 groupIdentifier];
    id v10 = [v13 objectForKeyedSubscript:v14];

    if (v10)
    {
LABEL_8:
      id v15 = [v10 lastReportedDate];
      [v5 setLastReportedDate:v15];

      [v10 percentComplete];
      [v5 setPercentComplete:v16];
      id v17 = +[GKPlayerInternal internalRepresentation];
      [v17 setPlayerID:*(void *)(a1 + 40)];
      [v5 setPlayer:v17];
    }
  }
LABEL_9:

  return v5;
}

GKGameRecordCacheObject *sub_1000EA3A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 bundleID];
  if (!v4) {
    goto LABEL_5;
  }
  id v5 = [*(id *)(a1 + 32) objectForKeyedSubscript:v4];
  if (v5) {
    goto LABEL_6;
  }
  if (*(void *)(a1 + 40))
  {
    id v5 = [(GKCacheObject *)[GKGameRecordCacheObject alloc] initWithManagedObjectContext:*(void *)(a1 + 40)];
    [(GKGameRecordCacheObject *)v5 setGame:v3];
    [(GKGameRecordCacheObject *)v5 setPlayer:*(void *)(a1 + 48)];
  }
  else
  {
LABEL_5:
    id v5 = 0;
  }
LABEL_6:

  return v5;
}

GKListEntryCacheObject *__cdecl sub_1000EB18C(id a1, id a2, NSManagedObjectContext *a3)
{
  id v3 = a3;
  id v4 = [(GKCacheObject *)[GKLeaderboardSetCacheObject alloc] initWithManagedObjectContext:v3];

  return (GKListEntryCacheObject *)v4;
}

GKLeaderboardTitleMapCacheObject *sub_1000EB5CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 objectForKeyedSubscript:@"category-name"];
  if (v4)
  {
    id v5 = [*(id *)(a1 + 32) objectForKey:v4];
    if (!v5)
    {
      uint64_t v6 = [GKLeaderboardTitleMapCacheObject alloc];
      id v7 = [*(id *)(a1 + 40) managedObjectContext];
      id v5 = [(GKCacheObject *)v6 initWithManagedObjectContext:v7];

      uint64_t v8 = [v3 objectForKeyedSubscript:@"category-name"];
      [(GKLeaderboardTitleMapCacheObject *)v5 setIdentifier:v8];

      id v9 = [v3 objectForKeyedSubscript:@"category-title"];
      [(GKLeaderboardTitleMapCacheObject *)v5 setLocalizedTitle:v9];

      [*(id *)(a1 + 32) setObject:v5 forKey:v4];
    }
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

GKListEntryCacheObject *__cdecl sub_1000EB9D8(id a1, id a2, NSManagedObjectContext *a3)
{
  id v3 = a3;
  id v4 = [(GKCacheObject *)[GKLeaderboardTitleMapCacheObject alloc] initWithManagedObjectContext:v3];

  return (GKListEntryCacheObject *)v4;
}

GKListEntryCacheObject *__cdecl sub_1000EBED0(id a1, id a2, NSManagedObjectContext *a3)
{
  id v3 = a3;
  id v4 = [(GKCacheObject *)[GKLeaderboardListEntryCacheObject alloc] initWithManagedObjectContext:v3];

  return (GKListEntryCacheObject *)v4;
}

uint64_t sub_1000ECD00(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if (result) {
    *a4 = 1;
  }
  return result;
}

GKFriendListEntryCacheObject *sub_1000ED538(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v7 = v5;
    if ([v7 isEqual:&stru_1002E4F58])
    {
      if (!os_log_GKGeneral) {
        id v8 = (id)GKOSLoggers();
      }
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
        sub_1000FBAB0();
      }
    }
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v9 = v5;
      id v7 = [v9 objectForKeyedSubscript:@"player-id"];
      if (v7)
      {
        [*(id *)(a1 + 32) setObject:v9 forKey:v7];
      }
      else
      {
        if (!os_log_GKGeneral) {
          id v11 = (id)GKOSLoggers();
        }
        if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
          sub_1000FBAF0();
        }
      }
    }
    else
    {
      if (!os_log_GKGeneral) {
        id v10 = (id)GKOSLoggers();
      }
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
        sub_1000FBB58();
      }
      id v7 = 0;
    }
  }
  long long v12 = [(GKCacheObject *)[GKFriendListEntryCacheObject alloc] initWithManagedObjectContext:v6];

  [(GKFriendListEntryCacheObject *)v12 setPlayerID:v7];

  return v12;
}

void sub_1000ED920(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v5 = [v3 playerID];
  id v6 = [v4 objectForKey:v5];

  if (!os_log_GKGeneral) {
    id v7 = (id)GKOSLoggers();
  }
  id v8 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    long long v39 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "populating friend profile cache info with info from server:%@", buf, 0xCu);
  }
  if (v6)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      id v10 = GKStackTraceWithFrameLimit();
      id v11 = +[NSString stringWithFormat:@"got %@ from %@ %@", v6, v9, v10];
      long long v12 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKCacheObject.m"];
      id v13 = [v12 lastPathComponent];
      long long v14 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@ ([playerInfo isKindOfClass:[NSDictionary class]])\n[%s (%s:%d)]", v11, "-[GKFriendListCacheObject populateFriendNamesFromServerRepresentationDictionary:]_block_invoke", [v13 UTF8String], 2504);

      +[NSException raise:@"GameKit Exception", @"%@", v14 format];
    }
    uint64_t v15 = [v6 objectForKey:@"alias"];
    float v16 = [v6 objectForKey:@"bi-directional"];
    id v17 = [v6 objectForKey:@"played-with"];
    id v18 = [v6 objectForKey:@"played-nearby"];
    uint64_t v19 = [v6 objectForKey:@"accepted-game-invitation"];
    long long v37 = [v6 objectForKey:@"initiated-game-invitation"];
    uint64_t v20 = [v6 objectForKey:@"automatched-together"];
    id v21 = [v6 objectForKey:@"last-played-game"];
    long long v22 = [v6 objectForKey:@"last-played-timestamp"];
    [v3 setContactsAssociationID:0];
    if (v16) {
      [v3 setFriendBiDirectional:v16];
    }
    if (v17) {
      [v3 setFriendPlayedWith:v17];
    }
    if (v18) {
      [v3 setFriendPlayedNearby:v18];
    }
    if (v19) {
      [v3 setAcceptedGameInviteFromThisFriend:v19];
    }
    if (v37) {
      [v3 setInitiatedGameInviteToThisFriend];
    }
    if (v20) {
      [v3 setAutomatchedTogether:v20];
    }
    if (v15) {
      [v3 setAlias:v15];
    }
    id v35 = (void *)v19;
    long long v36 = (void *)v15;
    if (v21) {
      [v3 setLastPlayedGame:v21];
    }
    if (v22)
    {
      long long v23 = +[NSDate _gkDateFromServerTimestamp:v22];
      [v3 setLastPlayedDate:v23];
    }
    long long v24 = [v6 objectForKey:@"challenged-together"];
    [v3 setChallengedTogether:[v24 BOOLValue]];

    long long v25 = [v6 objectForKey:@"last-challenged-timestamp"];
    uint64_t v26 = +[NSDate _gkDateFromServerTimestamp:v25];
    [v3 setLastChallengedDate:v26];

    uint64_t v27 = [v6 objectForKey:@"last-challenged-game"];
    [v3 setLastChallengedGame:v27];

    if (v16)
    {
      __int16 v28 = +[NSNumber numberWithLong:](NSNumber, "numberWithLong:", (unint64_t)[v16 integerValue] | (2 * [v17 integerValue]) | (4 * [v18 integerValue]));
      [v3 setFriendLevel:v28];

      [v3 setAvailablePieces:[v3 availablePieces] | 0x20];
    }
    else
    {
      if (!os_log_GKGeneral) {
        id v31 = (id)GKOSLoggers();
      }
      __int16 v32 = os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "a friend list came back with no info on friend relationship. Tracking by assigning a friend level of 512", buf, 2u);
      }
      [v3 setFriendLevel:&off_1002F2240];
    }
    id v33 = os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      id v34 = (id)GKOSLoggers();
      id v33 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
      sub_1000FBC54(v33, v3);
    }
  }
  else
  {
    uint64_t v29 = os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      id v30 = (id)GKOSLoggers();
      uint64_t v29 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG)) {
      sub_1000FBBC0(v29, v3);
    }
  }
}

GKListEntryCacheObject *__cdecl sub_1000EE9A0(id a1, id a2, NSManagedObjectContext *a3)
{
  id v3 = a3;
  id v4 = [(GKCacheObject *)[GKCompatibilityEntryCacheObject alloc] initWithManagedObjectContext:v3];

  return (GKListEntryCacheObject *)v4;
}

GKFriendRecommendationListEntryCacheObject *sub_1000EF698(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v5;
  id v8 = [v7 objectForKeyedSubscript:GKPlayerIDKey];
  if (v8)
  {
    [*(id *)(a1 + 32) setObject:v7 forKey:v8];
    uint64_t v9 = [*(id *)(a1 + 40) objectForKeyedSubscript:v8];
    if (!v9)
    {
      uint64_t v9 = [(GKCacheObject *)[GKFriendRecommendationListEntryCacheObject alloc] initWithManagedObjectContext:v6];
      [(GKFriendRecommendationListEntryCacheObject *)v9 setPlayerID:v8];
    }
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v10 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000FBAF0();
    }
    uint64_t v9 = 0;
  }

  return v9;
}

GKFriendRequestListEntryCacheObject *sub_1000F0348(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = [a2 objectForKeyedSubscript:@"player-id"];
  if (v6)
  {
    id v7 = [*(id *)(a1 + 32) objectForKeyedSubscript:v6];
    if (!v7)
    {
      id v7 = [(GKCacheObject *)[GKFriendRequestListEntryCacheObject alloc] initWithManagedObjectContext:v5];
      [(GKFriendRequestListEntryCacheObject *)v7 setWasViewed:0];
    }
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

GKGameListEntryCacheObject *sub_1000F11F8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = [a2 objectForKeyedSubscript:@"game"];
  id v7 = [v6 objectForKeyedSubscript:@"bundle-id"];
  if (v7)
  {
    id v8 = [*(id *)(a1 + 32) objectForKeyedSubscript:v7];
    if (!v8) {
      id v8 = [(GKCacheObject *)[GKGameListEntryCacheObject alloc] initWithManagedObjectContext:v5];
    }
    [(GKGameListEntryCacheObject *)v8 setBundleID:v7];
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

int64_t sub_1000F1644(id a1, id a2, id a3)
{
  id v4 = a2;
  id v5 = a3;
  id v6 = v4;
  id v7 = v5;
  id v8 = [v6 game];
  uint64_t v9 = [v8 softwareType];
  unsigned int v10 = [v9 isEqualToString:@"iOS"];

  id v11 = [v7 game];
  long long v12 = [v11 softwareType];
  unsigned int v13 = [v12 isEqualToString:@"iOS"];

  if (v10 == v13)
  {
    uint64_t v15 = [v6 lastPlayedDate];
    if (v15) {
      [v6 lastPlayedDate];
    }
    else {
    float v16 = [v6 purchaseDate];
    }

    id v17 = [v7 lastPlayedDate];
    if (v17) {
      [v7 lastPlayedDate];
    }
    else {
    id v18 = [v7 purchaseDate];
    }

    int64_t v14 = (int64_t)[v16 compare:v18];
  }
  else if (v10)
  {
    int64_t v14 = -1;
  }
  else
  {
    int64_t v14 = 1;
  }

  return v14;
}

GKListEntryCacheObject *__cdecl sub_1000F24C8(id a1, id a2, NSManagedObjectContext *a3)
{
  id v3 = a3;
  id v4 = [(GKCacheObject *)[GKRecentPlayerListEntryCacheObject alloc] initWithManagedObjectContext:v3];

  return (GKListEntryCacheObject *)v4;
}

id sub_1000F2770(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v4 playerID];
  id v6 = [v3 objectForKeyedSubscript:v5];

  id v7 = +[GKRecentMatchInternal internalRepresentation];
  id v8 = [v6 internalRepresentation];
  [v7 setPlayer:v8];

  uint64_t v9 = [v4 date];

  [v7 setDate:v9];
  unsigned int v10 = [*(id *)(a1 + 40) game];
  if (v10)
  {
    id v11 = +[GKGameRecordCacheObject recordForGame:v10 playerProfile:v6];
    long long v12 = [v11 internalRepresentation];
    [v7 setGame:v12];
  }

  return v7;
}

GKListEntryCacheObject *__cdecl sub_1000F2D64(id a1, id a2, NSManagedObjectContext *a3)
{
  id v3 = a3;
  id v4 = [(GKCacheObject *)[GKRecentGameListEntryCacheObject alloc] initWithManagedObjectContext:v3];

  return (GKListEntryCacheObject *)v4;
}

id sub_1000F3078(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v4 bundleID];
  id v6 = [v3 objectForKeyedSubscript:v5];

  id v7 = +[GKRecentMatchInternal internalRepresentation];
  [v7 setPlayer:*(void *)(a1 + 40)];
  id v8 = [v6 internalRepresentation];
  [v7 setGame:v8];

  uint64_t v9 = [v4 date];

  [v7 setDate:v9];

  return v7;
}

GKListEntryCacheObject *__cdecl sub_1000F34D8(id a1, NSDictionary *a2, NSManagedObjectContext *a3)
{
  id v4 = a3;
  id v5 = [(NSDictionary *)a2 objectForKeyedSubscript:@"game"];
  id v6 = [v5 objectForKeyedSubscript:@"bundle-id"];
  id v7 = [(GKCacheObject *)[GKTopGamesListEntryCacheObject alloc] initWithManagedObjectContext:v4];

  [(GKTopGamesListEntryCacheObject *)v7 setBundleID:v6];

  return (GKListEntryCacheObject *)v7;
}

id sub_1000F37E8(id a1, GKOnDeviceMultiplayerGameListEntryCacheObject *a2, unint64_t a3)
{
  return [(GKOnDeviceMultiplayerGameListEntryCacheObject *)a2 bundleID];
}

void sub_1000F38CC(uint64_t a1, void *a2)
{
  id v5 = a2;
  if ([v5 supportsMultiplayer])
  {
    id v3 = *(void **)(a1 + 32);
    id v4 = [v5 bundleID];
    [v3 addObject:v4];
  }
}

GKListEntryCacheObject *__cdecl sub_1000F3AE4(id a1, NSDictionary *a2, NSManagedObjectContext *a3)
{
  id v4 = a3;
  id v5 = [(NSDictionary *)a2 objectForKeyedSubscript:@"bundle-id"];
  id v6 = [(GKCacheObject *)[GKOnDeviceMultiplayerGameListEntryCacheObject alloc] initWithManagedObjectContext:v4];

  [(GKOnDeviceMultiplayerGameListEntryCacheObject *)v6 setBundleID:v5];

  return (GKListEntryCacheObject *)v6;
}

GKAchievementPointsEntryCacheObject *sub_1000F45CC(id *a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = [a2 objectForKey:@"game"];
  id v7 = [v6 objectForKey:@"bundle-id"];
  id v8 = [a1[4] objectForKey:v7];
  if (v8)
  {
    uint64_t v9 = [a1[5] objectForKeyedSubscript:v7];
    if (!v9)
    {
      uint64_t v9 = [(GKCacheObject *)[GKAchievementPointsEntryCacheObject alloc] initWithManagedObjectContext:v5];
      unsigned int v10 = [a1[6] objectForKey:v7];
      [(GKAchievementPointsEntryCacheObject *)v9 setGameRecord:v10];
    }
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id sub_1000F540C(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = [a2 playerID];
  id v7 = [v6 isEqualToString:*(void *)(a1 + 32)];

  if (v7) {
    *a4 = 1;
  }
  return v7;
}

void sub_1000F5E54(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a2;
  id v6 = +[NSNumber numberWithUnsignedInteger:a3];
  [v4 setObject:v5 forKey:v6];
}

void sub_1000F5ED4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v8 = +[NSNumber numberWithUnsignedInteger:a3];
  uint64_t v6 = [[*(id *)(a1 + 32) objectForKeyedSubscript:];
  if (v6)
  {
    id v7 = (GKTurnBasedParticipantCacheObject *)v6;
    [*(id *)(a1 + 32) removeObjectForKey:v8];
  }
  else
  {
    id v7 = [(GKCacheObject *)[GKTurnBasedParticipantCacheObject alloc] initWithManagedObjectContext:*(void *)(a1 + 40)];
  }
  [(GKTurnBasedParticipantCacheObject *)v7 updateWithServerRepresentation:v5];

  [*(id *)(a1 + 48) insertObject:v7 atIndex:a3];
}

void sub_1000F5FA4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v8 = [v5 objectForKeyedSubscript:@"request-id"];
  uint64_t v6 = [[*(id *)(a1 + 32) objectForKeyedSubscript:];
  if (v6)
  {
    id v7 = (GKTurnBasedExchangeCacheObject *)v6;
    [*(id *)(a1 + 32) removeObjectForKey:v8];
  }
  else
  {
    id v7 = [(GKCacheObject *)[GKTurnBasedExchangeCacheObject alloc] initWithManagedObjectContext:*(void *)(a1 + 40)];
  }
  [(GKTurnBasedExchangeCacheObject *)v7 updateWithServerRepresentation:v5 participants:*(void *)(a1 + 48)];

  [*(id *)(a1 + 56) insertObject:v7 atIndex:a3];
}

id sub_1000F639C(uint64_t a1, void *a2)
{
  id v3 = *(objc_class **)(a1 + 40);
  id v4 = a2;
  id v5 = [[v3 alloc] initWithManagedObjectContext:*(void *)(a1 + 32)];
  [v5 setSessionID:v4];

  return v5;
}

GKTurnBasedSessionEntryCacheObject *sub_1000F7AE0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [v5 objectForKey:@"session-id"];
  if (v7)
  {
    [*(id *)(a1 + 32) setObject:v5 forKey:v7];
    id v8 = [*(id *)(a1 + 40) objectForKeyedSubscript:v7];
    if (!v8)
    {
      id v8 = [(GKCacheObject *)[GKTurnBasedSessionEntryCacheObject alloc] initWithManagedObjectContext:v6];
      [(GKTurnBasedSessionEntryCacheObject *)v8 setSessionID:v7];
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1000F7D58(id a1, GKTurnBasedSessionEntryCacheObject *a2, unint64_t a3, BOOL *a4)
{
  id v4 = [(GKTurnBasedSessionEntryCacheObject *)a2 list];
  [v4 expire];
}

GKListEntryCacheObject *__cdecl sub_1000F82C8(id a1, id a2, NSManagedObjectContext *a3)
{
  id v3 = a3;
  id v4 = [(GKCacheObject *)[GKPlayerEntryCacheObject alloc] initWithManagedObjectContext:v3];

  return (GKListEntryCacheObject *)v4;
}

id sub_1000F8568(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[GKRecentMatchInternal internalRepresentation];
  id v5 = *(void **)(a1 + 32);
  id v6 = [v3 playerID];
  id v7 = [v5 objectForKeyedSubscript:v6];
  id v8 = [v7 internalRepresentation];
  [v4 setPlayer:v8];

  uint64_t v9 = [v3 date];

  [v4 setDate:v9];

  return v4;
}

id sub_1000F8BEC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v5;
  id v8 = [v7 objectForKeyedSubscript:@"challenge-id"];
  if (v8)
  {
    uint64_t v9 = [*(id *)(a1 + 32) objectForKey:v8];
    if (!v9)
    {
      uint64_t v9 = +[GKChallengeCacheObject challengeWithServerRepresentation:v7 context:v6];
      [*(id *)(a1 + 32) setObject:v9 forKey:v8];
    }
    [v9 setReceivingPlayerID:*(void *)(a1 + 40)];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id sub_1000F90CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 objectForKeyedSubscript:@"challenge-type"];
  id v5 = [v4 integerValue];

  if (v5 == (id)1)
  {
    id v6 = &off_1002D2AE8;
    goto LABEL_5;
  }
  if (v5 == (id)2)
  {
    id v6 = &off_1002D27F8;
LABEL_5:
    id v7 = [objc_alloc(*v6) initWithManagedObjectContext:*(void *)(a1 + 32)];
    goto LABEL_7;
  }
  id v7 = 0;
LABEL_7:
  [v7 updateWithServerRepresentation:v3];

  return v7;
}

GKListEntryCacheObject *__cdecl sub_1000FB00C(id a1, id a2, NSManagedObjectContext *a3)
{
  id v3 = a3;
  id v4 = [(GKCacheObject *)[GKCompatiblePlayerEntryCacheObject alloc] initWithManagedObjectContext:v3];

  return (GKListEntryCacheObject *)v4;
}

void sub_1000FB070()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Fetch error: %@", v2, v3, v4, v5, v6);
}

void sub_1000FB0D8()
{
  sub_100011064();
  sub_100011084((void *)&_mh_execute_header, v0, v1, "Fetching unique objects for IDs %@", v2, v3, v4, v5, v6);
}

void sub_1000FB140()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "GKCacheObject: uniqueObjectsForKeys:", v2, v3, v4, v5, v6);
}

void sub_1000FB174()
{
  sub_100011064();
  sub_100011084((void *)&_mh_execute_header, v0, v1, "Inserting newObjects into lookup %@", v2, v3, v4, v5, v6);
}

void sub_1000FB1DC()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "GKCacheObject: entityInManagedObjectContext called with nil moc", v2, v3, v4, v5, v6);
}

void sub_1000FB210()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "GKCacheObject: entityInManagedObjectContext", v2, v3, v4, v5, v6);
}

void sub_1000FB244()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "GKCacheObject: initWithManagedObjectContext:", v2, v3, v4, v5, v6);
}

void sub_1000FB278()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "GKCacheObject: fetchRequestForContext", v2, v3, v4, v5, v6);
}

void sub_1000FB2AC()
{
  sub_100011064();
  sub_100011084((void *)&_mh_execute_header, v0, v1, "Deleting objects %@", v2, v3, v4, v5, v6);
}

void sub_1000FB314()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "GKCacheObject: uniqueObjectIDLookupWithContext:", v2, v3, v4, v5, v6);
}

void sub_1000FB348()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "GKCacheObject: updateImagesWithImageURLs:", v2, v3, v4, v5, v6);
}

void sub_1000FB37C()
{
  sub_100011064();
  __int16 v3 = 2112;
  uint64_t v4 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "Error deleting cached image (%@): %@", v2, 0x16u);
}

void sub_1000FB400()
{
  sub_100011064();
  sub_100011084((void *)&_mh_execute_header, v0, v1, "Deleted image: %@", v2, v3, v4, v5, v6);
}

void sub_1000FB468()
{
  sub_100011064();
  sub_100011084((void *)&_mh_execute_header, v0, v1, "Attempting to delete image at path: %@", v2, v3, v4, v5, v6);
}

void sub_1000FB4D0()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "GKCacheObject: deleteCachedImage:", v2, v3, v4, v5, v6);
}

void sub_1000FB504()
{
  sub_100011064();
  sub_100011084((void *)&_mh_execute_header, v0, v1, "UNABLE TO PURGE OBJECT: %@", v2, v3, v4, v5, v6);
}

void sub_1000FB56C()
{
  sub_100011064();
  sub_100011084((void *)&_mh_execute_header, v0, v1, "EXPIRED %@", v2, v3, v4, v5, v6);
}

void sub_1000FB5D4()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "GKCacheObject: updateWithServerRepresentation:", v2, v3, v4, v5, v6);
}

void sub_1000FB608()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "GKCacheObject: expireObjectsMatchingPredicate", v2, v3, v4, v5, v6);
}

void sub_1000FB63C()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "GKPlayerProfileCacheObject: deleteCachedAvatars", v2, v3, v4, v5, v6);
}

void sub_1000FB670()
{
  sub_100011064();
  sub_100011084((void *)&_mh_execute_header, v0, v1, "Attempting to delete image at URL: %@", v2, v3, v4, v5, v6);
}

void sub_1000FB6D8()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "GKPlayerProfileCacheObject: deleteCachedImage:", v2, v3, v4, v5, v6);
}

void sub_1000FB70C()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "GKCacheObject: playerProfilesWithPlayerIDs:", v2, v3, v4, v5, v6);
}

void sub_1000FB740()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "GKPlayerProfileCacheObject: updateImagesWithImageURLs:", v2, v3, v4, v5, v6);
}

void sub_1000FB774(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = [a2 friendLevel];
  sub_100011064();
  sub_100017260((void *)&_mh_execute_header, v5, v6, "Updated the friend level based on the server response. New friendLevel:%@", v7, v8, v9, v10, v11);
}

void sub_1000FB808()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "No playerID in response", v2, v3, v4, v5, v6);
}

void sub_1000FB83C()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "unsupported object class passed to removeFamiliarPlayerIDs:%@", v2, v3, v4, v5, v6);
}

void sub_1000FB8A4(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = GKStackTraceWithFrameLimit();
  sub_100011064();
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "gameForBunDleID:context: was called with no bundleID. Stack trace:%@", v3, 0xCu);
}

void sub_1000FB944()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "GKCacheObject: gamesForBundleIDs:", v2, v3, v4, v5, v6);
}

void sub_1000FB978()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "GKCacheObject: gamesForGameDescriptors:", v2, v3, v4, v5, v6);
}

void sub_1000FB9AC()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "GKCacheObject: updateWithGameDescriptor:", v2, v3, v4, v5, v6);
}

void sub_1000FB9E0()
{
  sub_100011064();
  sub_100011084((void *)&_mh_execute_header, v0, v1, "Skipping remaining cache update due to status: %ld", v2, v3, v4, v5, v6);
}

void sub_1000FBA48()
{
  sub_100011064();
  sub_100011084((void *)&_mh_execute_header, v0, v1, "GKFriendCache:cached friend list:%@", v2, v3, v4, v5, v6);
}

void sub_1000FBAB0()
{
  sub_100010D10();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "received an empty playerID while updating a player friend's cache", v1, 2u);
}

void sub_1000FBAF0()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "player ID missing from info dictionary:%@", v2, v3, v4, v5, v6);
}

void sub_1000FBB58()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "unexpected result class in server friend list:%@", v2, v3, v4, v5, v6);
}

void sub_1000FBBC0(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = [a2 playerID];
  sub_100011064();
  sub_100017260((void *)&_mh_execute_header, v5, v6, "%@ missing from dictionary", v7, v8, v9, v10, v11);
}

void sub_1000FBC54(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = [a2 alias];
  uint64_t v5 = [a2 contactsAssociationID];
  int v6 = 138412546;
  uint64_t v7 = v4;
  __int16 v8 = 2112;
  uint64_t v9 = v5;
  _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "GKFriendCache:populated player pieces with server info: player alias:%@ and contactsAssociationID:%@", (uint8_t *)&v6, 0x16u);
}

void sub_1000FBD24()
{
  sub_100011064();
  sub_100011084((void *)&_mh_execute_header, v0, v1, "Deleted game data: %@", v2, v3, v4, v5, v6);
}

void sub_1000FBD8C()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "GKCacheObject: sessionsWithSessionIDs", v2, v3, v4, v5, v6);
}

void sub_1000FC018(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1000FC098;
  v2[3] = &unk_1002DA3F8;
  id v3 = v1;
  GKIncrementContextTransactionCount(v3, 0, v2);
}

void sub_1000FC098(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    if (!os_log_GKGeneral) {
      id v3 = (id)GKOSLoggers();
    }
    uint64_t v4 = os_log_GKCache;
    if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
      sub_1000FC3E4(a1, v4);
    }
  }
}

void sub_1000FC10C(uint64_t a1, void *a2)
{
  id v2 = a2;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      uint8_t v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v8 + 1) + 8 * (void)v6);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          [v7 sanitize];
        }
        uint8_t v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v4);
  }
}

void sub_1000FC2FC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1000FC318(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained stripGKPlayerInternalPIIs];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000FC374(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000FC3AC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000FC3E4(uint64_t a1, NSObject *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Context reached a count of 0: %@", (uint8_t *)&v3, 0xCu);
}

void sub_1000FC460(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000FCAEC(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[GKService serviceWithTransport:0 forClient:a1[4] localPlayer:0];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1000FCBB8;
  void v7[3] = &unk_1002D4F38;
  uint64_t v5 = a1[5];
  void v7[4] = a1[6];
  id v8 = v3;
  id v6 = v3;
  [v4 getProfilesForPlayerIDs:v5 handler:v7];
}

void sub_1000FCBB8(uint64_t a1, void *a2)
{
  id v5 = a2;
  if ([v5 count] == (id)2)
  {
    id v3 = [v5 objectAtIndex:0];
    [*(id *)(a1 + 32) setReceivingPlayer:v3];

    uint64_t v4 = [v5 objectAtIndex:1];
    [*(id *)(a1 + 32) setIssuingPlayer:v4];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000FCC60(uint64_t a1)
{
  uint64_t v2 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKChallengeInvite.m", 124, "-[GKChallengeInvite loadDetailsWithHandler:]_block_invoke_3");
  id v3 = +[GKDispatchGroup dispatchGroupWithName:v2];

  uint64_t v4 = [*(id *)(a1 + 32) challenge];
  id v5 = [v4 bundleID];

  if (v5)
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_1000FCE54;
    void v12[3] = &unk_1002D3A70;
    id v6 = *(void **)(a1 + 40);
    void v12[4] = *(void *)(a1 + 32);
    id v13 = v6;
    [v3 perform:v12];
  }
  else
  {
    uint64_t v7 = os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      id v8 = (id)GKOSLoggers();
      uint64_t v7 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      sub_1000FD7E8(v7);
    }
    [*(id *)(a1 + 32) setGoalText:&stru_1002E4F58];
  }
  if (*(void *)(a1 + 56))
  {
    long long v9 = [*(id *)(a1 + 48) replyQueue];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1000FCF58;
    v10[3] = &unk_1002D3A20;
    id v11 = *(id *)(a1 + 56);
    [v3 notifyOnQueue:v9 block:v10];
  }
}

void sub_1000FCE54(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = [*(id *)(a1 + 40) gameDescriptor];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1000FCF10;
  void v7[3] = &unk_1002DA4C0;
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v3;
  id v6 = v3;
  [v4 loadGoalTextForGameDescriptor:v5 handler:v7];
}

uint64_t sub_1000FCF10(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setGoalText:a2];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

uint64_t sub_1000FCF58(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000FD274(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000FD294(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000FD2A4(uint64_t a1)
{
}

void sub_1000FD2AC(uint64_t a1, void *a2)
{
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v3 = a2;
  id v4 = [v3 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v21;
    while (2)
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v21 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        long long v9 = [v8 identifier:v20];
        long long v10 = [*(id *)(a1 + 32) achievement];
        id v11 = [v10 identifier];
        unsigned int v12 = [v9 isEqualToString:v11];

        if (v12) {
          goto LABEL_11;
        }
        id v13 = [v8 groupIdentifier];
        int64_t v14 = [*(id *)(a1 + 32) achievement];
        uint64_t v15 = [v14 groupIdentifier];
        unsigned int v16 = [v13 isEqualToString:v15];

        if (v16)
        {
LABEL_11:
          uint64_t v17 = [v8 unachievedDescription];
          uint64_t v18 = *(void *)(*(void *)(a1 + 48) + 8);
          uint64_t v19 = *(void **)(v18 + 40);
          *(void *)(v18 + 40) = v17;

          goto LABEL_12;
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v20 objects:v24 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
LABEL_12:

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1000FD470(uint64_t a1, void *a2)
{
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v3 = a2;
  id v4 = [v3 countByEnumeratingWithState:&v24 objects:v28 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v25;
    while (2)
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v25 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v24 + 1) + 8 * i);
        long long v9 = [v8 identifier];
        long long v10 = [*(id *)(a1 + 32) score];
        id v11 = [v10 leaderboardIdentifier];
        unsigned int v12 = [v9 isEqualToString:v11];

        if (v12) {
          goto LABEL_11;
        }
        id v13 = [v8 groupIdentifier];
        int64_t v14 = [*(id *)(a1 + 32) score];
        uint64_t v15 = [v14 groupLeaderboardIdentifier];
        unsigned int v16 = [v13 isEqualToString:v15];

        if (v16)
        {
LABEL_11:
          uint64_t v17 = +[GCFLocalizedStrings SCORE_CHALLENGE_RECEIVED_ALERT_GOAL_FORMAT];
          uint64_t v18 = [*(id *)(a1 + 32) score];
          uint64_t v19 = [v18 formattedValue];
          long long v20 = [v8 localizedTitle];
          uint64_t v21 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v17, v19, v20, (void)v24);
          uint64_t v22 = *(void *)(*(void *)(a1 + 48) + 8);
          long long v23 = *(void **)(v22 + 40);
          *(void *)(v22 + 40) = v21;

          goto LABEL_12;
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v24 objects:v28 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
LABEL_12:

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t sub_1000FD694(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
  }
  return result;
}

void sub_1000FD7E8(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "no bundleID found for challenge, causing us to display empty goal text", v1, 2u);
}

void sub_1000FDA98(id a1)
{
  qword_100329780 = (uint64_t)dispatch_queue_create("com.apple.GameKit.friendSuggester.serialQueue", 0);

  _objc_release_x1();
}

void sub_1000FDC9C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  uint64_t v7 = [*(id *)(a1 + 32) cachedContactAssocicationIDsWithContext:v5];
  if (v7)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG)) {
      sub_1000FF598();
    }
    long long v9 = +[GKContactsIntegrationController sharedController];
    long long v10 = +[NSSet setWithArray:v7];
    id v11 = [v9 contactAssociationIDMapForContactAssociationIDs:v10 withContext:v5];

    unsigned int v12 = [v11 allKeys];
    id v13 = +[NSSet setWithArray:v12];

    int64_t v14 = +[GKCDContactInfo _gkObjectsMatchingHandles:v13 withContext:v5];
    uint64_t v15 = [v14 _gkMapWithBlock:&stru_1002DA570];
    if (!os_log_GKGeneral) {
      id v16 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG)) {
      sub_1000FF530();
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  objc_initWeak(&location, *(id *)(a1 + 32));
  uint64_t v17 = *(void **)(a1 + 32);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  void v20[2] = sub_1000FE040;
  v20[3] = &unk_1002DA598;
  objc_copyWeak(&v26, &location);
  id v21 = *(id *)(a1 + 40);
  id v18 = v15;
  id v22 = v18;
  id v19 = v7;
  id v23 = v19;
  id v24 = *(id *)(a1 + 48);
  id v25 = *(id *)(a1 + 56);
  [v17 modifyCachedSuggestions:v18 modifiers:v20 handler:*(void *)(a1 + 64)];
  v6[2](v6);

  objc_destroyWeak(&v26);
  objc_destroyWeak(&location);
}

void sub_1000FDF58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1000FDF78(id a1, GKCDContactInfo *a2, unint64_t a3)
{
  id v3 = a2;
  id v4 = [GKFriendSuggestion alloc];
  id v5 = [(GKCDContactInfo *)v3 contactID];
  uint64_t v6 = [(GKCDContactInfo *)v3 handle];
  uint64_t v7 = [v6 _stripFZIDPrefix];
  id v8 = [(GKCDContactInfo *)v3 handle];

  long long v9 = [(GKFriendSuggestion *)v4 initWithContactID:v5 handle:v7 prefixedHandle:v8 contactAssociationID:0];

  return v9;
}

id sub_1000FE040(uint64_t a1, void *a2)
{
  id v3 = (id *)(a1 + 72);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  uint64_t v6 = [WeakRetained modifiersWithSettings:v4 contactsIntegrationController:*(void *)(a1 + 32) hasCachedSuggestions:*(void *)(a1 + 40) != 0 cachedSortedAssociationIDs:*(void *)(a1 + 48) rerankRequester:*(void *)(a1 + 56) transactionGroupProvider:*(void *)(a1 + 64)];

  return v6;
}

void sub_1000FE4F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) settingsProvider];
  id v5 = [(id)objc_opt_class() serialQueue];
  CFStringRef v11 = @"gk-friend-rerank-overall-limit";
  uint64_t v6 = +[NSArray arrayWithObjects:&v11 count:1];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000FE640;
  void v8[3] = &unk_1002DA5E8;
  id v9 = *(id *)(a1 + 40);
  id v10 = v3;
  id v7 = v3;
  [v4 fetchSettingsWithQueue:v5 valuesForKeys:v6 handler:v8];
}

uint64_t sub_1000FE640(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setResult:a2];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_1000FE688(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) result];
  uint64_t v2 = [*(id *)(a1 + 40) peopleSuggesterGameInviteSuggestionsWithLimit:[v5 suggestionsLimit]];
  id v3 = [[GKTrimSuggestionsModifier alloc] initWithSettings:v5];
  id v4 = [(GKTrimSuggestionsModifier *)v3 trimSuggestions:v2];

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

id sub_1000FE908(id a1, _PSSuggestion *a2, unint64_t a3)
{
  id v3 = a2;
  id v4 = [[GKFriendSuggestion alloc] initWithSuggestion:v3];

  return v4;
}

void sub_1000FEB38(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) settingsProvider];
  id v5 = [(id)objc_opt_class() serialQueue];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1000FEC18;
  void v7[3] = &unk_1002DA5E8;
  id v8 = *(id *)(a1 + 40);
  id v9 = v3;
  id v6 = v3;
  [v4 fetchSettingsWithQueue:v5 handler:v7];
}

uint64_t sub_1000FEC18(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setResult:a2];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_1000FEC60(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) result];
  if (!os_log_GKGeneral) {
    id v3 = (id)GKOSLoggers();
  }
  if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG)) {
    sub_1000FF668();
  }
  if ([*(id *)(a1 + 40) count])
  {
    id v4 = *(id *)(a1 + 40);
  }
  else
  {
    [*(id *)(a1 + 48) peopleSuggesterConvertedFriendSuggestionsWithLimit:[v2 suggestionsLimit]];
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    if (![v4 count])
    {
      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
      goto LABEL_20;
    }
  }
  uint64_t v14 = a1;
  uint64_t v15 = v2;
  id v5 = (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v6 = [v5 countByEnumeratingWithState:&v16 objects:v24 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v17;
    do
    {
      id v9 = 0;
      id v10 = v4;
      do
      {
        if (*(void *)v17 != v8) {
          objc_enumerationMutation(v5);
        }
        CFStringRef v11 = *(void **)(*((void *)&v16 + 1) + 8 * (void)v9);
        id v4 = [v11 modifySuggestions:v10];

        if (!os_log_GKGeneral) {
          id v12 = (id)GKOSLoggers();
        }
        id v13 = os_log_GKContacts;
        if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412546;
          id v21 = v11;
          __int16 v22 = 2112;
          id v23 = v4;
          _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%@ finished modifying suggestions with results: %@", buf, 0x16u);
        }
        id v9 = (char *)v9 + 1;
        id v10 = v4;
      }
      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v16 objects:v24 count:16];
    }
    while (v7);
  }
  (*(void (**)(void))(*(void *)(v14 + 56) + 16))();

  uint64_t v2 = v15;
LABEL_20:
}

BOOL sub_1000FF13C(id a1)
{
  return _os_feature_enabled_impl();
}

id sub_1000FF150(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *(void *)(a1 + 32);
  id v4 = +[NSArray arrayWithObjects:&v27 count:1];
  id v5 = [*(id *)(a1 + 40) peopleSuggesterConvertedFriendSuggestionsWithLimit:a2];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v6 = v4;
  id v7 = [v6 countByEnumeratingWithState:&v18 objects:v26 count:16];
  if (v7)
  {
    id v9 = v7;
    uint64_t v10 = *(void *)v19;
    *(void *)&long long v8 = 138412546;
    long long v17 = v8;
    do
    {
      CFStringRef v11 = 0;
      id v12 = v5;
      do
      {
        if (*(void *)v19 != v10) {
          objc_enumerationMutation(v6);
        }
        id v13 = *(void **)(*((void *)&v18 + 1) + 8 * (void)v11);
        id v5 = [v13 modifySuggestions:v12 v17 (void)v18];

        if (!os_log_GKGeneral) {
          id v14 = (id)GKOSLoggers();
        }
        uint64_t v15 = os_log_GKContacts;
        if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = v17;
          id v23 = v13;
          __int16 v24 = 2112;
          id v25 = v5;
          _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "%@ as part of appending, finished modifying suggestions with results: %@", buf, 0x16u);
        }
        CFStringRef v11 = (char *)v11 + 1;
        id v12 = v5;
      }
      while (v9 != v11);
      id v9 = [v6 countByEnumeratingWithState:&v18 objects:v26 count:16];
    }
    while (v9);
  }

  return v5;
}

void sub_1000FF530()
{
  sub_100011064();
  sub_100011084((void *)&_mh_execute_header, v0, v1, "Converted contact association IDs into suggestions: %@", v2, v3, v4, v5, v6);
}

void sub_1000FF598()
{
  sub_100011064();
  sub_100011084((void *)&_mh_execute_header, v0, v1, "Will use cached contact association IDs: %@", v2, v3, v4, v5, v6);
}

void sub_1000FF600()
{
  sub_100011064();
  sub_100011084((void *)&_mh_execute_header, v0, v1, "Found and converted the following suggestions from people suggester: %@", v2, v3, v4, v5, v6);
}

void sub_1000FF668()
{
  sub_100011064();
  sub_100011084((void *)&_mh_execute_header, v0, v1, "Got back friend suggestions settings: %@", v2, v3, v4, v5, v6);
}

id sub_1000FFC94(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers();
  }
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_DEBUG)) {
    sub_10010C8F0();
  }
  return [*(id *)(a1 + 32) leave];
}

id sub_1000FFD00(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers();
  }
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_DEBUG)) {
    sub_10010C924();
  }
  return [*(id *)(a1 + 32) leave];
}

void sub_1000FFF34(id a1)
{
  qword_100329790 = +[NSSet setWithObject:@"com.apple.Magellan"];

  _objc_release_x1();
}

void sub_10010097C(id a1)
{
  qword_1003297A0 = (uint64_t)dispatch_queue_create("com.apple.GameKit.GKClient.sync", 0);

  _objc_release_x1();
}

void sub_100100C6C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[GKNetworkRequestManager commonNetworkRequestManager];
  CFStringRef v18 = @"rid";
  uint64_t v5 = [*(id *)(a1 + 32) rid];
  long long v19 = v5;
  uint8_t v6 = +[NSDictionary dictionaryWithObjects:&v19 forKeys:&v18 count:1];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_100100DDC;
  void v12[3] = &unk_1002DA738;
  int v17 = *(_DWORD *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 40);
  id v8 = *(id *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void **)(a1 + 48);
  id v13 = v8;
  uint64_t v14 = v9;
  id v15 = v10;
  id v16 = v3;
  id v11 = v3;
  [v4 issueRequest:v6 bagKey:@"gk-check-match-status" clientProxy:v7 handler:v12];
}

void sub_100100DDC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = *(_DWORD *)(a1 + 64);
  if (v7 == [*(id *)(a1 + 32) sequence])
  {
    if (v6)
    {
      id v8 = [v6 userInfo];
      uint64_t v9 = [v8 objectForKey:GKServerStatusCode];

      if ([v6 gkIsNotConnectedToInternetError])
      {
        [*(id *)(a1 + 32) transitionToState:7];
      }
      else if ([v9 integerValue] == (id)5067)
      {
        [*(id *)(a1 + 40) processMatchResponse:v5];
      }
      else if ([*(id *)(a1 + 32) transitionToState:2])
      {
        dispatch_time_t v10 = dispatch_time(0, 3000000000);
        v12[0] = _NSConcreteStackBlock;
        v12[1] = 3221225472;
        void v12[2] = sub_100100F50;
        void v12[3] = &unk_1002D4460;
        id v11 = *(void **)(a1 + 48);
        void v12[4] = *(void *)(a1 + 40);
        void v12[5] = v10;
        [v11 perform:v12];
      }
    }
    else
    {
      [*(id *)(a1 + 40) processMatchResponse:v5];
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_100100F50(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100100FF0;
  void v6[3] = &unk_1002D3C38;
  dispatch_time_t v4 = *(void *)(a1 + 40);
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v3;
  id v5 = v3;
  dispatch_after(v4, (dispatch_queue_t)&_dispatch_main_q, v6);
}

uint64_t sub_100100FF0(uint64_t a1)
{
  [*(id *)(a1 + 32) checkMatchStatus];
  id v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v2();
}

void sub_10010163C(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_time_t v4 = [*(id *)(a1 + 32) checkMatchStatusQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001016F8;
  block[3] = &unk_1002DA788;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  id v9 = v3;
  uint64_t v10 = v6;
  void block[4] = v5;
  id v7 = v3;
  dispatch_async(v4, block);
}

void sub_1001016F8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) checkMatchStatusQueue];
  dispatch_source_t v3 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v2);
  [*(id *)(a1 + 32) setCheckMatchStatusTimer:v3];

  dispatch_time_t v4 = [*(id *)(a1 + 32) checkMatchStatusTimer];
  dispatch_source_set_timer(v4, *(void *)(a1 + 48), 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);

  uint64_t v5 = [*(id *)(a1 + 32) checkMatchStatusTimer];
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_10010182C;
  handler[3] = &unk_1002D40E0;
  handler[4] = *(void *)(a1 + 32);
  dispatch_source_set_event_handler(v5, handler);

  uint64_t v6 = [*(id *)(a1 + 32) checkMatchStatusTimer];
  dispatch_source_set_cancel_handler(v6, *(dispatch_block_t *)(a1 + 40));

  id v7 = [*(id *)(a1 + 32) checkMatchStatusTimer];
  dispatch_resume(v7);
}

id sub_10010182C(uint64_t a1)
{
  [*(id *)(a1 + 32) checkMatchStatus];
  id v2 = *(void **)(a1 + 32);

  return [v2 setCheckMatchStatusTimer:0];
}

void sub_10010186C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) context];
  id v7 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:v2];

  dispatch_source_t v3 = [*(id *)(a1 + 40) bundleIdentifier];
  dispatch_time_t v4 = [*(id *)(a1 + 32) context];
  uint64_t v5 = +[GKGameCacheObject gameForBundleID:v3 context:v4];

  [v7 expireRecentMatchesWithGame:v5];
  uint64_t v6 = [v7 friendList];
  [v6 invalidate];
}

id sub_100101B68(uint64_t a1)
{
  return [*(id *)(a1 + 32) setCheckMatchStatusTimer:0];
}

void sub_100101F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100101F84(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100101F94(uint64_t a1)
{
}

void sub_100101F9C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
  id v6 = a3;
  id v7 = (id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  id obj = 0;
  id v8 = +[NSDictionary _gkDictionaryWithServerData:v5 error:&obj];
  objc_storeStrong(v7, obj);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_10010203C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
  }
  return result;
}

void sub_1001023FC(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v3 dataType];
  id v5 = [v3 userInfo];

  [v2 refreshContentsForDataType:v4 userInfo:v5];
}

GKGameInternal *__cdecl sub_100102930(GKClientProxy *self, SEL a2)
{
  return self->_currentGame;
}

void sub_100102C1C(id a1)
{
  qword_1003297B0 = (uint64_t)dispatch_queue_create("com.apple.GameKit.GKClient.sync", 0);

  _objc_release_x1();
}

void sub_100102C5C(id a1)
{
  qword_1003297C0 = (uint64_t)[objc_alloc((Class)NSMutableDictionary) initWithCapacity:0];

  _objc_release_x1();
}

void sub_100102D38(id a1)
{
  v4[0] = GKGameCenterDashboardIdentifier;
  v4[1] = GKMatchmakerExtensionIdentifier;
  v4[2] = GKTurnBasedMatchmakerExtensionIdentifier;
  v4[3] = GKChallengeIssueExtensionIdentifier;
  void v4[4] = GKFriendRequestExtensionIdentifier;
  void v4[5] = GKAuthenticateExtensionIdentifier;
  uint64_t v1 = +[NSArray arrayWithObjects:v4 count:6];
  uint64_t v2 = +[NSSet setWithArray:v1];
  id v3 = (void *)qword_1003297D0;
  qword_1003297D0 = v2;
}

void sub_100102F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100102F2C(uint64_t a1, void *a2, unsigned char *a3)
{
  id v6 = a2;
  if ([v6 applicationState] == 8)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
    *a3 = 1;
  }
}

void sub_100103098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001030B0(uint64_t a1, void *a2, unsigned char *a3)
{
  id v7 = a2;
  unsigned int v6 = [v7 applicationState];
  if (([v7 isGameCenter] & 1) == 0 && v6 == 8)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
    *a3 = 1;
  }
}

void sub_1001032A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001032B8(uint64_t a1, void *a2, unsigned char *a3)
{
  id v5 = a2;
  unsigned int v6 = [v5 bundleIdentifier];
  unsigned int v7 = [v6 isEqualToString:GKGameCenterDashboardIdentifier];

  if (v7)
  {
    id v8 = +[RBSProcessIdentifier identifierWithPid:](RBSProcessIdentifier, "identifierWithPid:", [v5 pid]);
    id v20 = 0;
    id v9 = +[RBSProcessHandle handleForIdentifier:v8 error:&v20];
    id v10 = v20;

    id v11 = [v9 currentState];
    [v11 taskState];
    if (RBSTaskStateIsRunning())
    {
      id v12 = [v9 currentState];
      id v13 = [v12 endowmentNamespaces];
      unsigned int v14 = [v13 containsObject:FBSSceneVisibilityEndowmentNamespace];
    }
    else
    {
      unsigned int v14 = 0;
    }

    if (!os_log_GKGeneral) {
      id v15 = (id)GKOSLoggers();
    }
    id v16 = (void *)os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      int v17 = v16;
      unsigned int v18 = [v5 pid];
      unsigned int v19 = [v5 applicationState];
      *(_DWORD *)buf = 67109890;
      unsigned int v22 = v18;
      __int16 v23 = 1024;
      unsigned int v24 = v19;
      __int16 v25 = 1024;
      unsigned int v26 = v14;
      __int16 v27 = 2112;
      id v28 = v10;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "isGameCenterDashboardForegroundRunning: (pid=%d applicationState=%d) => isVisible=%d error=%@", buf, 0x1Eu);
    }
    if (v14)
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v14;
      *a3 = 1;
    }
  }
}

void sub_100103694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001036B4(uint64_t a1, void *a2, unsigned char *a3)
{
  id v6 = a2;
  if (!os_log_GKGeneral) {
    id v7 = (id)GKOSLoggers();
  }
  id v8 = (void *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    id v9 = v8;
    id v10 = [v6 inviteSession];
    id v11 = [v10 sessionToken];
    int v15 = 138412290;
    id v16 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Client candidate session token %@", (uint8_t *)&v15, 0xCu);
  }
  id v12 = *(void **)(a1 + 32);
  id v13 = [v6 inviteSession];
  unsigned int v14 = [v13 sessionToken];
  LODWORD(v12) = [v12 isEqualToData:v14];

  if (v12)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
    *a3 = 1;
  }
}

void sub_100103934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10010394C(uint64_t a1, void *a2, unsigned char *a3)
{
  id v9 = a2;
  id v6 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) currentMatchResponse];
  id v7 = [v6 rid];
  unsigned int v8 = [v7 isEqualToString:*(void *)(a1 + 32)];

  if (v8)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
    *a3 = 1;
  }
}

void sub_100103B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100103B30(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 40) _clientLookup];
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  _DWORD v3[2] = sub_100103BC0;
  v3[3] = &unk_1002DA900;
  void v3[4] = *(void *)(a1 + 32);
  [v2 enumerateKeysAndObjectsUsingBlock:v3];
}

id sub_100103BC0(uint64_t a1, uint64_t a2, void *a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100103C38;
  v4[3] = &unk_1002DA8D8;
  void v4[4] = *(void *)(a1 + 32);
  return [a3 enumerateKeysAndObjectsUsingBlock:v4];
}

id sub_100103C38(uint64_t a1)
{
  return [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:];
}

uint64_t sub_100103CF4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100103DEC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 48) _clientLookup];
  id v4 = [v2 objectForKeyedSubscript:*(void *)(a1 + 32)];

  id v3 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 40) pid]);
  [v4 removeObjectForKey:v3];
}

void sub_1001044F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_10010462C;
  v11[3] = &unk_1002DA978;
  id v12 = *(id *)(a1 + 32);
  if (([v3 _gkContainsObjectPassingTest:v11] & 1) == 0)
  {
    id v6 = _NSConcreteStackBlock;
    uint64_t v7 = 3221225472;
    unsigned int v8 = sub_100104670;
    id v9 = &unk_1002DA978;
    id v10 = *(id *)(a1 + 40);
    if ([v3 _gkContainsObjectPassingTest:&v6]) {
      uint64_t v4 = 8;
    }
    else {
      uint64_t v4 = 3;
    }
    id v5 = +[GKAMPController controller];
    [v5 reportFriendInviteActivityEventAtStage:v4 hostApp:0];
  }
}

id sub_10010462C(uint64_t a1, void *a2)
{
  id v3 = [a2 playerID];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

id sub_100104670(uint64_t a1, void *a2)
{
  id v3 = [a2 playerID];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_1001046B4(id a1, GKClientProxy *a2, BOOL *a3)
{
}

uint64_t sub_100104760(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100104978(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100104990(uint64_t a1, void *a2)
{
  id v10 = a2;
  id v3 = +[GKPlayerCredentialController sharedController];
  id v4 = [v3 primaryCredentialForEnvironment:[*(id *)(a1 + 32) environment]];

  if (v4)
  {
    id v5 = objc_alloc_init((Class)GKAuthenticateResponse);
    uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    unsigned int v8 = [v4 playerInternal];
    id v9 = [v8 playerID];
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) setPlayerID:v9];

    [*(id *)(a1 + 40) setObject:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) forKeyedSubscript:@"response"];
  }
  v10[2]();
}

void sub_100104A98(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"response"];
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0);
}

void sub_100104D04(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100104D1C(uint64_t a1, void *a2)
{
  id v12 = a2;
  id v3 = +[GKPlayerCredentialController sharedController];
  id v4 = [v3 primaryCredentialForEnvironment:[*(id *)(a1 + 32) environment]];

  if (v4)
  {
    id v5 = objc_alloc_init((Class)GKAuthenticateCredential);
    uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    unsigned int v8 = [v4 accountName];
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) setAccountName:v8];

    id v9 = [v4 authenticationToken];
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) setAuthenticationToken:v9];

    id v10 = [v4 playerInternal];
    id v11 = [v10 playerID];
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) setPlayerID:v11];

    [*(id *)(a1 + 40) setObject:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) forKeyedSubscript:@"response"];
  }
  v12[2]();
}

void sub_100104E74(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"response"];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t sub_10010505C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

id sub_100105388(void *a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = [v3 isEqual:a1[4]];
  unint64_t v5 = (unint64_t)[v3 scope] & 8;
  uint64_t v6 = a1[6];
  if ((v6 & 1) != 0 || (v4 & (v6 >> 2) & 1) != 0 || (id v7 = 0, (v6 & 8) != 0) && v5)
  {
    unsigned int v8 = [v3 playerInternal];
    id v9 = objc_alloc((Class)GKLocalPlayerInternal);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    void v19[2] = sub_100105568;
    void v19[3] = &unk_1002DAA38;
    void v19[4] = a1[5];
    id v7 = [v9 initWithSanitizeBeforeEncodingBlock:v19];
    uint64_t v10 = 5;
    if (!v4) {
      uint64_t v10 = 1;
    }
    unint64_t v11 = v10 | v5;
    id v12 = [v8 alias];
    [v7 setAlias:v12];

    id v13 = [v8 playerID];
    [v7 setPlayerID:v13];

    unsigned int v14 = [v3 accountName];
    [v7 setAccountName:v14];

    [v7 setLoginStatus:v11];
    int v15 = [v8 firstName];
    [v7 setFirstName:v15];

    id v16 = [v8 lastName];
    [v7 setLastName:v16];

    int v17 = [v8 compositeName];
    [v7 setCompositeName:v17];
  }

  return v7;
}

uint64_t sub_100105568(uint64_t a1)
{
  return [*(id *)(a1 + 32) clientHasAnyPrivateEntitlement] ^ 1;
}

void sub_100105588(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)GKPlayerInternalOnboarding);
  unint64_t v5 = [v3 playerID];
  id v6 = [v4 initWithPlayerID:v5];
  [v3 setOnboarding:v6];

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_100105670;
  v9[3] = &unk_1002D3A70;
  id v7 = *(void **)(a1 + 32);
  void v9[4] = *(void *)(a1 + 40);
  id v10 = v3;
  id v8 = v3;
  [v7 perform:v9];
}

void sub_100105670(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  unint64_t v5 = [*(id *)(a1 + 40) playerID];
  id v6 = [v4 transactionGroupIfCacheExistsForPlayerID:v5];

  if (v6)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_100105768;
    v9[3] = &unk_1002D69F0;
    id v7 = *(id *)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 32);
    id v10 = v7;
    uint64_t v11 = v8;
    id v12 = v3;
    [v6 performOnManagedObjectContext:v9];
  }
  else
  {
    v3[2](v3);
  }
}

void sub_100105768(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:v5];
  if ([v7 isValid]) {
    [a1[4] updateWithCacheObject:v7];
  }
  uint64_t v8 = [a1[5] bundleIdentifier];
  id v9 = [a1[4] playerID];
  if (v9 && ([v8 isEqualToString:GKGameCenterIdentifier] & 1) == 0)
  {
    uint64_t v11 = [a1[5] originalBundleIdentifier];
    if (([v11 isEqualToString:GKGameCenterToolIdentifier] & 1) != 0
      || GKGetApplicationStateForBundleID(v8) == 8)
    {
      id v10 = +[GKGameCacheObject gameForBundleID:v8 context:v5];
    }
    else
    {
      id v10 = 0;
    }
  }
  else
  {
    id v10 = 0;
  }
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  void v22[2] = sub_100105A70;
  v22[3] = &unk_1002DAA88;
  id v12 = v8;
  id v23 = v12;
  id v24 = a1[4];
  id v13 = v6;
  id v25 = v13;
  id v26 = a1[6];
  unsigned int v14 = objc_retainBlock(v22);
  int v15 = v14;
  if (v10)
  {
    id v16 = +[GKService serviceForBundleID:v12 localPlayer:a1[4]];
    id v28 = v9;
    int v17 = +[NSArray arrayWithObjects:&v28 count:1];
    id v27 = v12;
    unsigned int v18 = +[NSArray arrayWithObjects:&v27 count:1];
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    void v19[2] = sub_100105B60;
    void v19[3] = &unk_1002D4F38;
    id v20 = a1[4];
    id v21 = v15;
    [v16 loadScopedPlayerIDs:v17 gameBundleIDs:v18 handler:v19];
  }
  else
  {
    ((void (*)(void *))v14[2])(v14);
  }
}

uint64_t sub_100105A70(void *a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers();
  }
  id v3 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = a1[4];
    uint64_t v5 = a1[5];
    int v7 = 138412546;
    uint64_t v8 = v4;
    __int16 v9 = 2112;
    uint64_t v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "For bundleID: %@ we are returning playerInternal: %@ in auth reponse", (uint8_t *)&v7, 0x16u);
  }
  (*(void (**)(void))(a1[6] + 16))();
  return (*(uint64_t (**)(void))(a1[7] + 16))();
}

uint64_t sub_100105B60(uint64_t a1, void *a2)
{
  id v3 = [a2 firstObject];
  uint64_t v4 = *(void **)(a1 + 32);
  if (v3)
  {
    [v4 setScopedIDs:v3];
  }
  else
  {
    uint64_t v5 = [v4 scopedIDs];
    [*(id *)(a1 + 32) setScopedIDs:v5];
  }
  id v6 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v6();
}

void sub_100105BE8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"players"];
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0);
}

void sub_100105DF4(uint64_t a1, void *a2)
{
  uint64_t v5 = a2;
  id v3 = +[GKPlayerCredentialController sharedController];
  uint64_t v4 = [v3 suggestedUsername];
  [*(id *)(a1 + 32) setObject:v4 forKeyedSubscript:@"accountName"];

  v5[2]();
}

void sub_100105E90(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"accountName"];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100105F8C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [a2 playerID];
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

uint64_t sub_1001060D8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

id sub_10010632C(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers();
  }
  id v3 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Received CloudKit share metadata from Messages for multiplayer invite.", v5, 2u);
  }
  return +[GKCloudKitMultiplayer handleCloudKitShareMetadata:*(void *)(a1 + 32) completionHandler:*(void *)(a1 + 40)];
}

void sub_1001063D0(id a1, GKClientProxy *a2, BOOL *a3)
{
}

void sub_1001064FC(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  _DWORD v3[2] = sub_1001065A8;
  v3[3] = &unk_1002D53D8;
  void v3[4] = v2;
  id v4 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  [v2 getAuthenticatedLocalPlayersWithStatus:1 handler:v3];
}

void sub_1001065A8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10010CB88();
    }
  }
  [*(id *)(a1 + 32) authenticatedPlayersDidChange:v5 authenticatingBundleID:*(void *)(a1 + 40) reply:*(void *)(a1 + 48)];
}

void sub_100106848(id a1)
{
  qword_1003297E0 = (uint64_t)dispatch_queue_create("com.apple.gamed.GKSavedAppInitState", 0);

  _objc_release_x1();
}

void sub_10010695C(uint64_t a1)
{
  id v2 = +[NSUserDefaults standardUserDefaults];
  id v3 = v2;
  if (*(__CFString **)(a1 + 32) == @"GKAppInitUnknown")
  {
    id v6 = [v2 objectForKey:@"GKSavedAppInitState"];
    uint64_t v11 = *(void **)(a1 + 40);
    id v12 = [v6 objectForKeyedSubscript:@"bundleID"];
    LODWORD(v11) = [v11 isEqualToString:v12];

    if (v11)
    {
      [v3 removeObjectForKey:@"GKSavedAppInitState"];
      if (!os_log_GKGeneral) {
        id v13 = (id)GKOSLoggers();
      }
      unsigned int v14 = os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        int v15 = *(void **)(a1 + 40);
        int v20 = 138412290;
        id v21 = v15;
        __int16 v9 = "saveAppInitState: cleared for client %@";
        uint64_t v10 = v14;
        goto LABEL_11;
      }
    }
    else
    {
      if (!os_log_GKGeneral) {
        id v17 = (id)GKOSLoggers();
      }
      unsigned int v18 = os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        uint64_t v19 = *(void *)(a1 + 40);
        int v20 = 138412546;
        id v21 = v6;
        __int16 v22 = 2112;
        uint64_t v23 = v19;
        __int16 v9 = "saveAppInitState: ignoring old state -- %@ does not match client %@";
        uint64_t v10 = v18;
        uint32_t v16 = 22;
        goto LABEL_12;
      }
    }
  }
  else
  {
    v25[0] = *(void *)(a1 + 40);
    v24[0] = @"bundleID";
    v24[1] = @"pid";
    id v4 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
    void v24[2] = @"state";
    uint64_t v5 = *(void *)(a1 + 32);
    v25[1] = v4;
    v25[2] = v5;
    id v6 = +[NSDictionary dictionaryWithObjects:v25 forKeys:v24 count:3];

    [v3 setValue:v6 forKey:@"GKSavedAppInitState"];
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers();
    }
    uint64_t v8 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      int v20 = 138412290;
      id v21 = v6;
      __int16 v9 = "saveAppInitState: saved: %@";
      uint64_t v10 = v8;
LABEL_11:
      uint32_t v16 = 12;
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, v9, (uint8_t *)&v20, v16);
    }
  }
}

id sub_100106C18(uint64_t a1)
{
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v2 = [*(id *)(a1 + 32) responses];
  id v3 = [v2 countByEnumeratingWithState:&v18 objects:v24 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v19;
    *(void *)&long long v4 = 138412290;
    long long v17 = v4;
    do
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v19 != v6) {
          objc_enumerationMutation(v2);
        }
        uint64_t v8 = *(void **)(*((void *)&v18 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          id v9 = v8;
          if (!os_log_GKGeneral) {
            id v10 = (id)GKOSLoggers();
          }
          uint64_t v11 = os_log_GKDaemon;
          if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = v17;
            id v23 = v9;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Sending notification with bulletin %@", buf, 0xCu);
          }
          id v12 = [[*(id *)(a1 + 40) bundleIdentifier:v17];
          id v13 = +[GKClientProxy clientForBundleID:v12];

          unsigned int v14 = [v9 isAccept];
          int v15 = [v9 clientNotification];
          if (v14) {
            [v13 acceptInviteWithNotification:v15];
          }
          else {
            [v13 declineInviteWithNotification:v15];
          }
        }
      }
      id v5 = [v2 countByEnumeratingWithState:&v18 objects:v24 count:16];
    }
    while (v5);
  }

  [*(id *)(a1 + 32) removeAllResponses];
  id result = [*(id *)(a1 + 32) shouldBeCleared];
  if (result) {
    return [*(id *)(a1 + 40) deleteInviteSession];
  }
  return result;
}

void sub_100106F0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    id v5 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10010CC58(a1, (uint64_t)v3, v5);
    }
  }
}

uint64_t sub_1001070F4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100107644(id a1, id a2, GKExtensionClientProxy *a3, BOOL *a4)
{
}

id sub_100107740(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 acceptInviteWithNotification:*(void *)(a1 + 32)];
}

id sub_100107844(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 declineInviteWithNotification:*(void *)(a1 + 32)];
}

void sub_100107910(id a1, NSError *a2)
{
  id v2 = a2;
  if (v2)
  {
    if (!os_log_GKGeneral) {
      id v3 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10010CD3C();
    }
  }
}

id sub_100107A78(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 cancelInviteWithNotification:*(void *)(a1 + 32)];
}

id sub_100107B7C(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 cancelGameInvite:*(void *)(a1 + 32)];
}

id sub_100107E34(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 relayPushNotification:*(void *)(a1 + 32)];
}

id sub_1001082D0(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 refreshContentsForDataType:*(unsigned int *)(a1 + 40) userInfo:*(void *)(a1 + 32)];
}

id sub_1001083E4(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 setPreferencesValues:*(void *)(a1 + 32)];
}

void sub_100108754(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10010CDA4();
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1001087E4(uint64_t a1)
{
}

id sub_1001087F0(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 setCurrentGame:*(void *)(a1 + 32) serverEnvironment:*(void *)(a1 + 40) reply:&stru_1002DACA0];
}

uint64_t sub_10010880C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100108B28(id *a1)
{
  dispatch_group_t v2 = dispatch_group_create();
  id v3 = a1 + 4;
  id v4 = [a1[4] connection];
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_100108E54;
  void v25[3] = &unk_1002DAB88;
  id v5 = v2;
  id v26 = v5;
  uint64_t v6 = [v4 remoteObjectProxyWithErrorHandler:v25];

  id v7 = os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    id v8 = (id)GKOSLoggers();
    id v7 = os_log_GKGeneral;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "authenticatedPlayersDidChange: sent to Client", buf, 2u);
  }
  id v9 = os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    id v10 = (id)GKOSLoggers();
    id v9 = os_log_GKGeneral;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    sub_10010CE0C(a1 + 4, v9);
    if (!v6) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (v6)
  {
LABEL_9:
    dispatch_group_enter(v5);
    id v11 = a1[5];
    id v12 = a1[6];
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    void v22[2] = sub_100108EDC;
    v22[3] = &unk_1002D40E0;
    id v23 = v5;
    [v6 authenticatedPlayersDidChange:v11 authenticatingBundleID:v12 reply:v22];
  }
LABEL_10:
  if ([*v3 applicationState] != 2
    && [*v3 applicationState] != 4)
  {
    id v13 = [*v3 viewService];
    unsigned int v14 = v13;
    if (v13) {
      [v13 authenticatedPlayersDidChange:a1[5] authenticatingBundleID:a1[6] reply:&stru_1002DACE8];
    }
    int v15 = [a1[4] extensionProxies];
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    void v19[2] = sub_100108EE8;
    void v19[3] = &unk_1002DAD30;
    id v20 = a1[5];
    id v21 = a1[6];
    [v15 _gkEnumerateKeysAndObjectsUsingBlock:v19];
  }
  if (a1[7])
  {
    uint32_t v16 = [a1[4] replyQueue];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    void v17[2] = sub_100108F04;
    void v17[3] = &unk_1002D3A20;
    id v18 = a1[7];
    dispatch_group_notify(v5, v16, v17);
  }
}

void sub_100108E54(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10010CEF0();
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100108EDC(uint64_t a1)
{
}

id sub_100108EE8(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 authenticatedPlayersDidChange:*(void *)(a1 + 32) authenticatingBundleID:*(void *)(a1 + 40) reply:&stru_1002DAD08];
}

uint64_t sub_100108F04(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100109204(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = [a3 objectAtIndexedSubscript:1];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1001092DC;
  void v8[3] = &unk_1002D48B0;
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 48);
  void v8[4] = *(void *)(a1 + 40);
  id v9 = v4;
  id v10 = v6;
  id v11 = *(id *)(a1 + 32);
  id v7 = v4;
  [v5 perform:v8];
}

void sub_1001092DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) transportWithCredential:*(void *)(a1 + 40)];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1001093C8;
  void v7[3] = &unk_1002DAD58;
  void v7[4] = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 48);
  id v8 = *(id *)(a1 + 56);
  id v9 = *(id *)(a1 + 40);
  id v10 = v3;
  id v6 = v3;
  [v4 postRequest:v5 forBagKey:@"gk-app-terminate" response:v7];
}

uint64_t sub_1001093C8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = a2;
  [v5 setInitialized:0];
  [*(id *)(a1 + 40) setResult:v7];

  id v8 = [*(id *)(a1 + 32) appSessions];
  id v9 = [*(id *)(a1 + 48) playerInternal];
  id v10 = [v9 playerID];
  [v8 removeObjectForKey:v10];

  [*(id *)(a1 + 40) setError:v6];
  if (!os_log_GKGeneral) {
    id v11 = (id)GKOSLoggers();
  }
  id v12 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = *(void *)(a1 + 32);
    int v15 = 138412290;
    uint64_t v16 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Terminated (exiting) client %@", (uint8_t *)&v15, 0xCu);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_100109534(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_100109770(uint64_t a1, void *a2)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100109814;
  void v7[3] = &unk_1002DAD80;
  id v4 = *(id *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = *(void **)(a1 + 48);
  id v8 = v4;
  uint64_t v9 = v5;
  id v10 = v6;
  [a2 enumerateKeysAndObjectsUsingBlock:v7];
}

void sub_100109814(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = [a3 objectAtIndexedSubscript:1];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1001098EC;
  void v8[3] = &unk_1002D48B0;
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = *(void **)(a1 + 48);
  void v8[4] = *(void *)(a1 + 40);
  id v9 = v4;
  id v10 = v6;
  id v11 = *(id *)(a1 + 32);
  id v7 = v4;
  [v5 perform:v8];
}

void sub_1001098EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) transportWithCredential:*(void *)(a1 + 40)];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1001099D8;
  void v8[3] = &unk_1002DAD58;
  uint64_t v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  void v8[4] = *(void *)(a1 + 32);
  id v9 = v5;
  id v10 = *(id *)(a1 + 56);
  id v11 = v3;
  id v7 = v3;
  [v4 postRequest:v6 forBagKey:@"gk-app-terminate" response:v8];
}

uint64_t sub_1001099D8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = a2;
  [v5 setInitialized:0];
  id v8 = [*(id *)(a1 + 32) appSessions];
  id v9 = [*(id *)(a1 + 40) playerInternal];
  id v10 = [v9 playerID];
  [v8 removeObjectForKey:v10];

  [*(id *)(a1 + 48) setResult:v7];
  [*(id *)(a1 + 48) setError:v6];

  if (!os_log_GKGeneral) {
    id v11 = (id)GKOSLoggers();
  }
  id v12 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = *(void *)(a1 + 32);
    int v15 = 138412290;
    uint64_t v16 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Terminated (backgrounding) client %@", (uint8_t *)&v15, 0xCu);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_100109B44(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_100109FF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) transportWithCredential:*(void *)(a1 + 40)];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_10010A0DC;
  v10[3] = &unk_1002DAD58;
  uint64_t v5 = *(void *)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(void **)(a1 + 40);
  id v11 = v6;
  uint64_t v12 = v7;
  id v13 = v8;
  id v14 = v3;
  id v9 = v3;
  [v4 postRequest:v5 forBagKey:@"gk-app-init" response:v10];
}

void sub_10010A0DC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 32);
  id v7 = a3;
  [v6 setResult:v5];
  [*(id *)(a1 + 32) setError:v7];

  if (v7)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    [*(id *)(a1 + 40) setInitialized:1];
    id v8 = [v5 representedItem];
    id v9 = [v8 objectForKeyedSubscript:@"app-session"];

    [*(id *)(a1 + 40) addAppSession:v9 forCredential:*(void *)(a1 + 48)];
    id v10 = +[GKClientProxy gameCenterClient];
    id v11 = +[GKService serviceWithTransport:0 forClient:v10 localPlayer:0];

    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_10010A24C;
    void v12[3] = &unk_1002D45D8;
    id v13 = *(id *)(a1 + 56);
    [v11 checkAndUpdateArcadeSubscriberStatusWithHandler:v12];
  }
}

uint64_t sub_10010A24C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10010A25C(uint64_t a1)
{
  [*(id *)(a1 + 32) refreshPendingDataTypes];
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    id v4 = [*(id *)(a1 + 40) result];
    id v3 = [*(id *)(a1 + 40) error];
    (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
  }
}

void sub_10010A534(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) transportWithCredential:*(void *)(a1 + 40)];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_10010A618;
  v10[3] = &unk_1002DAD58;
  uint64_t v5 = *(void *)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(void **)(a1 + 40);
  id v11 = v6;
  uint64_t v12 = v7;
  id v13 = v8;
  id v14 = v3;
  id v9 = v3;
  [v4 postRequest:v5 forBagKey:@"gk-bg-init" response:v10];
}

void sub_10010A618(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setResult:v9];
  [*(id *)(a1 + 32) setError:v6];

  if (!v6)
  {
    uint64_t v7 = [v9 representedItem];
    id v8 = [v7 objectForKeyedSubscript:@"app-session"];

    [*(id *)(a1 + 40) addAppSession:v8 forCredential:*(void *)(a1 + 48)];
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_10010A6DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_10010B0BC(uint64_t a1)
{
  [*(id *)(a1 + 32) _setupDelayedRequestsWriters];
  char v2 = objc_opt_respondsToSelector();
  id v3 = *(void **)(a1 + 64);
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = v4[35];
  if (v2)
  {
    id v6 = [v4 gameDescriptor];
    uint64_t v7 = [v3 writerWithDatabaseConnection:v5 gameDescriptor:v6];
  }
  else
  {
    uint64_t v7 = [*(id *)(a1 + 64) writerWithDatabaseConnection:v5];
  }
  char v8 = objc_opt_respondsToSelector();
  id v9 = *(void **)(a1 + 72);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(v10 + 280);
  if (v8) {
    [v9 readerWithDatabaseConnection:v11 bundleID:*(void *)(v10 + 96)];
  }
  else {
  uint64_t v12 = [v9 readerWithDatabaseConnection:v11];
  }
  id v13 = [*(id *)(a1 + 32) transportWithCredential:*(void *)(a1 + 40)];
  id v14 = [*(id *)(a1 + 80) writerWithTransport:v13 forBagKey:*(void *)(a1 + 48)];
  uint64_t v15 = [v12 databaseConnection];
  if (v15
    && (uint64_t v16 = (void *)v15,
        [v7 databaseConnection],
        long long v17 = objc_claimAutoreleasedReturnValue(),
        v17,
        v16,
        v17))
  {
    uint64_t v18 = +[GKDelayedRequestWriter writerWithCacheWriter:v7 cacheReader:v12 networkWriter:v14 batchSubmissionInterval:(double)*(uint64_t *)(a1 + 88)];
    uint64_t v19 = *(void *)(*(void *)(a1 + 56) + 8);
    id v20 = *(void **)(v19 + 40);
    *(void *)(v19 + 40) = v18;
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v21 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10010D034();
    }
  }
}

void sub_10010B624(uint64_t a1)
{
  char v2 = +[NSFileManager defaultManager];
  id v3 = +[GKClientProxy storeAndForwardDirectoryPathForEnvironment:*(void *)(a1 + 32)];
  id v4 = +[GKNetworkRequestManager commonNetworkRequestManager];
  [v4 issuePending];

  id v20 = 0;
  uint64_t v5 = [v2 contentsOfDirectoryAtPath:v3 error:&v20];
  id v6 = v20;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v7 = v5;
  id v8 = [v7 countByEnumeratingWithState:&v16 objects:v21 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v17;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v17 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = +[GKClientProxy clientForBundleID:*(void *)(*((void *)&v16 + 1) + 8 * (void)v11) pid:0 createIfNecessary:1];
        [v12 performDelayedRequestsForEnvironment:*(void *)(a1 + 32)];

        uint64_t v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      id v9 = [v7 countByEnumeratingWithState:&v16 objects:v21 count:16];
    }
    while (v9);
  }

  if ((GKAtomicCompareAndSwap32Barrier() & 1) == 0)
  {
    if (!os_log_GKGeneral) {
      id v13 = (id)GKOSLoggers();
    }
    id v14 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "store and forward reentry count out of sync", v15, 2u);
    }
  }
}

id sub_10010B8EC(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) performDelayedRequestsForCredential:a2];
}

void sub_10010B9B0(uint64_t a1)
{
  char v2 = [*(id *)(a1 + 32) playerInternal];
  id v3 = [v2 playerID];
  id v4 = dispatch_group_create();
  v51[0] = 0;
  v51[1] = v51;
  v51[2] = 0x3032000000;
  v51[3] = sub_100101F84;
  v51[4] = sub_100101F94;
  id v52 = 0;
  uint64_t v5 = [*(id *)(a1 + 40) appSessionForPlayer:v2];
  if (!v5)
  {
    dispatch_group_enter(v4);
    uint64_t v7 = *(void *)(a1 + 32);
    id v6 = *(void **)(a1 + 40);
    v47[0] = _NSConcreteStackBlock;
    v47[1] = 3221225472;
    v47[2] = sub_10010C00C;
    v47[3] = &unk_1002DAE40;
    __int16 v50 = v51;
    void v47[4] = v6;
    id v48 = v2;
    id v8 = v4;
    id v49 = v8;
    [v6 bgInitializeWithCredential:v7 completionHandler:v47];
    dispatch_time_t v9 = dispatch_time(0, 30000000000);
    dispatch_group_wait(v8, v9);
  }
  v46[0] = 0;
  v46[1] = v46;
  void v46[2] = 0x2020000000;
  v46[3] = 0;
  dispatch_group_enter(v4);
  uint64_t v10 = [*(id *)(a1 + 40) setPlayerStatusWriterWithCredential:*(void *)(a1 + 32)];
  if (v10)
  {
    v42[0] = _NSConcreteStackBlock;
    v42[1] = 3221225472;
    v42[2] = sub_10010C064;
    v42[3] = &unk_1002DAE68;
    long long v44 = v46;
    long long v43 = v4;
    [v10 submitDelayedRequestsForPlayer:v3 handler:v42];
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v11 = (id)GKOSLoggers();
    }
    uint64_t v12 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "setStatusWriter is nil. Do not call submitDelayedRequest.", buf, 2u);
    }
    dispatch_group_leave(v4);
  }
  dispatch_group_enter(v4);
  id v13 = [*(id *)(a1 + 40) setPlayerPhotoWriterWithCredential:*(void *)(a1 + 32)];
  if (v13)
  {
    v39[0] = _NSConcreteStackBlock;
    v39[1] = 3221225472;
    v39[2] = sub_10010C15C;
    void v39[3] = &unk_1002DAE68;
    long long v41 = v46;
    long long v40 = v4;
    [v13 submitDelayedRequestsForPlayer:v3 handler:v39];
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v14 = (id)GKOSLoggers();
    }
    uint64_t v15 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "setPlayerPhotoWriter is nil. Do not call submitDelayedRequest.", buf, 2u);
    }
    dispatch_group_leave(v4);
  }
  dispatch_group_enter(v4);
  long long v16 = [*(id *)(a1 + 40) deletePlayerPhotoWriterWithCredential:*(void *)(a1 + 32)];
  id v27 = (void *)v5;
  if (v16)
  {
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472;
    void v36[2] = sub_10010C254;
    v36[3] = &unk_1002DAE68;
    long long v38 = v46;
    long long v37 = v4;
    [v16 submitDelayedRequestsForPlayer:v3 handler:v36];
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v17 = (id)GKOSLoggers();
    }
    long long v18 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "deletePlayerPhotoWriter is nil. Do not call submitDelayedRequest.", buf, 2u);
    }
    dispatch_group_leave(v4);
  }
  dispatch_group_enter(v4);
  long long v19 = [*(id *)(a1 + 40) removeGameWriterWithCredential:*(void *)(a1 + 32)];
  if (v19)
  {
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_10010C34C;
    v33[3] = &unk_1002DAE68;
    id v35 = v46;
    id v34 = v4;
    [v19 submitDelayedRequestsForPlayer:v3 handler:v33];
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v20 = (id)GKOSLoggers();
    }
    id v21 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "removeGameWriter is nil. Do not call submitDelayedRequest.", buf, 2u);
    }
    dispatch_group_leave(v4);
  }
  dispatch_semaphore_t v22 = dispatch_semaphore_create(0);
  uint64_t v23 = *(void *)(a1 + 40);
  id v24 = *(NSObject **)(v23 + 272);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10010C444;
  block[3] = &unk_1002DAE90;
  id v31 = v46;
  __int16 v32 = v51;
  void block[4] = v23;
  id v29 = v2;
  dispatch_semaphore_t v30 = v22;
  id v25 = v22;
  id v26 = v2;
  dispatch_group_notify(v4, v24, block);
  dispatch_semaphore_wait(v25, 0xFFFFFFFFFFFFFFFFLL);

  _Block_object_dispose(v46, 8);
  _Block_object_dispose(v51, 8);
}

void sub_10010BFD4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_10010C00C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) appSessionForPlayer:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  uint64_t v5 = *(NSObject **)(a1 + 48);

  dispatch_group_leave(v5);
}

void sub_10010C064(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (v5)
  {
    if (!os_log_GKGeneral) {
      id v6 = (id)GKOSLoggers();
    }
    uint64_t v7 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      int v8 = 138412290;
      id v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Error submitting delayed requests for set player status %@", (uint8_t *)&v8, 0xCu);
    }
  }
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += a3;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10010C15C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (v5)
  {
    if (!os_log_GKGeneral) {
      id v6 = (id)GKOSLoggers();
    }
    uint64_t v7 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      int v8 = 138412290;
      id v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Error submitting delayed requests for set player photo %@", (uint8_t *)&v8, 0xCu);
    }
  }
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += a3;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10010C254(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (v5)
  {
    if (!os_log_GKGeneral) {
      id v6 = (id)GKOSLoggers();
    }
    uint64_t v7 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      int v8 = 138412290;
      id v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Error submitting delayed requests for delete player photo %@", (uint8_t *)&v8, 0xCu);
    }
  }
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += a3;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10010C34C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (v5)
  {
    if (!os_log_GKGeneral) {
      id v6 = (id)GKOSLoggers();
    }
    uint64_t v7 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      int v8 = 138412290;
      id v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Error submitting delayed requests for remove game %@", (uint8_t *)&v8, 0xCu);
    }
  }
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += a3;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

intptr_t sub_10010C444(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) delayedRequestsDBConnection];
  [v2 close];

  if (!*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)) {
    [*(id *)(a1 + 32) _removeDelayedRequestStore];
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)) {
    [*(id *)(a1 + 32) removeAppSessionForPlayer:*(void *)(a1 + 40)];
  }
  uint64_t v3 = *(NSObject **)(a1 + 48);

  return dispatch_semaphore_signal(v3);
}

void sub_10010C4C0(uint64_t a1, NSObject *a2)
{
  int v2 = 138412546;
  uint64_t v3 = a1;
  __int16 v4 = 2112;
  uint64_t v5 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "[%@]Current game not supporting nearby advertising since we cannot find the bundle for it. Bundle: %@.", (uint8_t *)&v2, 0x16u);
}

void sub_10010C544()
{
  sub_100011030();
  sub_1000110B8((void *)&_mh_execute_header, v0, v1, "[%@]Current game supports nearby advertising. Bundle: %@.");
}

void sub_10010C5AC()
{
  sub_100011030();
  sub_1000110B8((void *)&_mh_execute_header, v0, v1, "[%@]Current game not supporting nearby advertising. Bundle: %@.");
}

void sub_10010C614(void *a1)
{
  id v2 = a1;
  uint64_t v3 = [(id)sub_100010D1C() currentGame];
  sub_100011064();
  sub_100017260((void *)&_mh_execute_header, v4, v5, "Setting up nearbyDiscovery for game: %@", v6, v7, v8, v9, v10);
}

void sub_10010C6A4(void *a1)
{
  id v2 = a1;
  uint64_t v3 = [(id)sub_100010D1C() currentGame];
  sub_100011064();
  sub_100017260((void *)&_mh_execute_header, v4, v5, "Skipping nearbyDiscovery setup since current game not supporting multiplayer: %@", v6, v7, v8, v9, v10);
}

void sub_10010C734()
{
  sub_100010D10();
  sub_100010D34((void *)&_mh_execute_header, v0, v1, "Push token is nil or no valid playerID. We cannot have peer discovery setup.", v2, v3, v4, v5, v6);
}

void sub_10010C768(void *a1)
{
  id v2 = a1;
  uint64_t v3 = [(id)sub_100010D1C() currentGame];
  sub_100011064();
  sub_100017260((void *)&_mh_execute_header, v4, v5, "Setting up peerDiscovery for game: %@", v6, v7, v8, v9, v10);
}

void sub_10010C7F8(void *a1)
{
  id v2 = a1;
  uint64_t v3 = [(id)sub_100010D1C() currentGame];
  sub_100011064();
  sub_100017260((void *)&_mh_execute_header, v4, v5, "Skipping peerDiscovery setup since current game not supporting multiplayer: %@", v6, v7, v8, v9, v10);
}

void sub_10010C888()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "clearDiscoveryInfo - peerDiscovery", v2, v3, v4, v5, v6);
}

void sub_10010C8BC()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "clearDiscoveryInfo - nearbyDiscovery", v2, v3, v4, v5, v6);
}

void sub_10010C8F0()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "clearDiscoveryInfo - peerDiscovery listener stopped.", v2, v3, v4, v5, v6);
}

void sub_10010C924()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "clearDiscoveryInfo - peerDiscovery browsing stopped.", v2, v3, v4, v5, v6);
}

void sub_10010C958()
{
  sub_100011064();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "The source app %@ has been allow-listed such that this app will appear as though it were downloaded from the App Store", v1, 0xCu);
}

void sub_10010C9CC()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "This app was not downloaded from the App Store.", v2, v3, v4, v5, v6);
}

void sub_10010CA00()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "Could not processMatchResponse from result because it's nil", v2, v3, v4, v5, v6);
}

void sub_10010CA34()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "Could not processMatchResponse from result because it's finished", v2, v3, v4, v5, v6);
}

void sub_10010CA68()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "Invalidate caches after matched", v2, v3, v4, v5, v6);
}

void sub_10010CA9C()
{
  sub_100010D10();
  sub_100010D34((void *)&_mh_execute_header, v0, v1, "in clientForBundleID:bundle:pid:createIfNecessary: with no bundleID. Cannot get GKClientProxy without a bundleID", v2, v3, v4, v5, v6);
}

void sub_10010CAD0(void *a1, double a2)
{
  uint64_t v3 = a1;
  int v4 = 136315394;
  uint64_t v5 = "clientInit";
  __int16 v6 = 2048;
  double v7 = CFAbsoluteTimeGetCurrent() - a2;
  _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "%s elapsed seconds:%g", (uint8_t *)&v4, 0x16u);
}

void sub_10010CB88()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "sendAuthenticationDidChangeNotification:Failed to get authenticated Local players with status. error: %@", v2, v3, v4, v5, v6);
}

void sub_10010CBF0()
{
  sub_100011030();
  sub_1000110B8((void *)&_mh_execute_header, v0, v1, "INVALID TRANSITION from %@ to %@");
}

void sub_10010CC58(uint64_t a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)uint64_t v3 = 138412546;
  *(void *)&void v3[4] = *(void *)(a1 + 32);
  *(_WORD *)&v3[12] = 2112;
  *(void *)&v3[14] = a2;
  sub_100011010((void *)&_mh_execute_header, a2, a3, "%@ encountered an error:%@", *(void *)v3, *(void *)&v3[8], *(void *)&v3[16]);
}

void sub_10010CCD4()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "updateInviteWithNotification cannot find proxy for: %@", v2, v3, v4, v5, v6);
}

void sub_10010CD3C()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "updateInviteWithNotification encountered an error:%@", v2, v3, v4, v5, v6);
}

void sub_10010CDA4()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "setCurrentGame:serverEnvrionment:reply: encountered an error:%@", v2, v3, v4, v5, v6);
}

void sub_10010CE0C(void **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a2;
  uint64_t v5 = [v3 bundleIdentifier];
  uint8_t v6 = objc_opt_class();
  double v7 = *a1;
  int v9 = 138412802;
  uint8_t v10 = v5;
  __int16 v11 = 2112;
  uint64_t v12 = v6;
  __int16 v13 = 2048;
  id v14 = v7;
  id v8 = v6;
  _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "authenticatedPlayersDidChange: sent to client:%@ <%@ %p>)", (uint8_t *)&v9, 0x20u);
}

void sub_10010CEF0()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "authenticatedPlayersDidChange: proxy send failed due to error: %@", v2, v3, v4, v5, v6);
}

void sub_10010CF58()
{
  sub_100011030();
  sub_100011010((void *)&_mh_execute_header, v0, v1, "Failed to remove delayed requests store \"%@\". ERROR: %@");
}

void sub_10010CFC0()
{
  sub_100011064();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Removing delayed request store \"%@\".", v1, 0xCu);
}

void sub_10010D034()
{
  sub_100010D10();
  sub_100010D34((void *)&_mh_execute_header, v0, v1, "cacheReader or cacheWriter has nil databaseConnection.", v2, v3, v4, v5, v6);
}

void sub_10010D0DC(id a1)
{
  qword_1003297F8 = (uint64_t)[objc_alloc((Class)GKThreadsafeDictionary) initWithName:@"com.apple.gamed.per-player-context"];

  _objc_release_x1();
}

id sub_10010D124(uint64_t a1)
{
  uint64_t v2 = [(id)objc_opt_class() gameCenterClient];
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = [v2 bundleIdentifier];
  uint8_t v6 = [v2 language];
  id v7 = [v3 newManagedObjectContextForPlayerID:v4 bundleID:v5 language:v6 environment:[v2 environment]];

  return v7;
}

id sub_10010D710(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers();
  }
  uint64_t v3 = os_log_GKCache;
  if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
    sub_10010EE84(a1, v3, v4, v5, v6, v7, v8, v9);
  }
  [*(id *)(a1 + 48) closeDatabaseFromManagedObjectContextForPlayerID:*(void *)(a1 + 32)];
  return [(id)qword_1003297F8 removeObjectForKey:*(void *)(a1 + 40)];
}

void sub_10010D794(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10010D848;
  block[3] = &unk_1002D4888;
  id v2 = *(NSObject **)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  dispatch_async(v2, block);
}

void sub_10010D848(uint64_t a1)
{
  id v4 = [[GKSecureFileLocator alloc] initWithFileManager:*(void *)(a1 + 32)];
  id v2 = [*(id *)(a1 + 40) bundleIdentifier];
  uint64_t v3 = [*(id *)(a1 + 40) language];
  [(GKSecureFileLocator *)v4 removeCacheDirectoryWithBundleID:v2 language:v3 contextID:*(void *)(a1 + 48)];
}

void sub_10010D8E0(uint64_t a1)
{
  id v2 = GKImageCacheRoot();
  if (!os_log_GKGeneral) {
    id v3 = (id)GKOSLoggers();
  }
  if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
    sub_10010EF68();
  }
  id v4 = *(void **)(a1 + 32);
  id v8 = 0;
  unsigned __int8 v5 = [v4 removeItemAtPath:v2 error:&v8];
  id v6 = v8;
  if ((v5 & 1) == 0)
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10010EEF4();
    }
  }
}

void sub_10010DAF4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 48) cacheFileQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10010DBB4;
  block[3] = &unk_1002DA788;
  id v6 = *(id *)(a1 + 32);
  long long v4 = *(_OWORD *)(a1 + 40);
  id v3 = (id)v4;
  long long v7 = v4;
  dispatch_async(v2, block);
}

void sub_10010DBB4(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers();
  }
  id v3 = os_log_GKCache;
  if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
    sub_10010F0AC(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  __int16 v11 = [*(id *)(a1 + 32) allValues];
  id v12 = [v11 countByEnumeratingWithState:&v25 objects:v29 count:16];
  if (v12)
  {
    id v13 = v12;
    uint64_t v14 = *(void *)v26;
    do
    {
      uint64_t v15 = 0;
      do
      {
        if (*(void *)v26 != v14) {
          objc_enumerationMutation(v11);
        }
        [*(id *)(a1 + 48) closeDatabaseFromManagedObjectContextForMOC:*(void *)(*((void *)&v25 + 1) + 8 * (void)v15)];
        uint64_t v15 = (char *)v15 + 1;
      }
      while (v13 != v15);
      id v13 = [v11 countByEnumeratingWithState:&v25 objects:v29 count:16];
    }
    while (v13);
  }

  long long v16 = +[NSFileManager defaultManager];
  id v17 = [[GKSecureFileLocator alloc] initWithFileManager:v16];
  [(GKSecureFileLocator *)v17 removeCaches];
  long long v18 = [*(id *)(a1 + 48) cacheDirectoryForBundleID:0];
  if (!os_log_GKGeneral) {
    id v19 = (id)GKOSLoggers();
  }
  if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
    sub_10010F044();
  }
  id v20 = +[NSURL fileURLWithPath:v18 isDirectory:1];
  id v24 = 0;
  unsigned __int8 v21 = [v16 removeItemAtURL:v20 error:&v24];
  id v22 = v24;

  if ((v21 & 1) == 0)
  {
    if (!os_log_GKGeneral) {
      id v23 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_ERROR)) {
      sub_10010EFD0();
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10010DE3C(id a1)
{
  if (!os_log_GKGeneral) {
    id v1 = (id)GKOSLoggers();
  }
  id v2 = os_log_GKCache;
  if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
    sub_10010F0E4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
}

void sub_10010DEF0(id a1)
{
  id v1 = +[NSBundle mainBundle];
  id v2 = [v1 URLForResource:@"GKCentralCache" withExtension:@"momd"];

  if (!os_log_GKGeneral) {
    id v3 = (id)GKOSLoggers();
  }
  uint64_t v4 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    int v7 = 138412290;
    uint64_t v8 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Loading CoreData model from URL: %@", (uint8_t *)&v7, 0xCu);
  }
  id v5 = [objc_alloc((Class)NSManagedObjectModel) initWithContentsOfURL:v2];
  uint64_t v6 = (void *)qword_100329810;
  qword_100329810 = (uint64_t)v5;
}

void sub_10010E05C(id a1)
{
  qword_100329820 = (uint64_t)dispatch_queue_create("com.apple.gamed.GKClientProxy.cache.file.queue", 0);

  _objc_release_x1();
}

void sub_10010E490(uint64_t a1)
{
  CFAbsoluteTimeGetCurrent();
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers();
  }
  id v3 = os_log_GKCache;
  if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
    sub_10010F394(a1, v3, v4, v5, v6, v7, v8, v9);
  }
  uint64_t v10 = *(void **)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 48);
  id v46 = 0;
  id v13 = [v10 addPersistentStoreWithType:NSSQLiteStoreType configuration:0 URL:v11 options:v12 error:&v46];
  id v14 = v46;

  if (!v13)
  {
    if (!os_log_GKGeneral) {
      id v15 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10010F328();
    }

    if (!os_log_GKGeneral) {
      id v16 = (id)GKOSLoggers();
    }
    id v17 = os_log_GKCache;
    if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
      sub_10010F2F0(v17, v18, v19, v20, v21, v22, v23, v24);
    }
    long long v25 = *(void **)(a1 + 56);
    uint64_t v26 = *(void *)(a1 + 32);
    id v45 = 0;
    unsigned int v27 = [v25 removeItemAtURL:v26 error:&v45];
    id v28 = v45;
    id v14 = v28;
    if (v27)
    {

      uint64_t v30 = *(void *)(a1 + 32);
      id v29 = *(void **)(a1 + 40);
      uint64_t v31 = *(void *)(a1 + 48);
      id v44 = 0;
      id v32 = [v29 addPersistentStoreWithType:NSSQLiteStoreType configuration:0 URL:v30 options:v31 error:&v44];
      id v14 = v44;
    }
    else
    {
      if (!os_log_GKGeneral) {
        id v33 = (id)GKOSLoggers();
      }
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
        sub_10010F284();
      }
    }
  }
  if (!os_log_GKGeneral) {
    id v34 = (id)GKOSLoggers();
  }
  id v35 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG)) {
    sub_10010F1E8(v35);
  }
  long long v36 = [*(id *)(a1 + 40) persistentStores];
  id v37 = [v36 count];

  if (!v37)
  {
    long long v38 = +[NSString stringWithFormat:@"FATAL: Failed to add persistent store at %@ : %@", *(void *)(a1 + 32), v14];
    +[GKProcessExiter cleanExitWith:v38];
  }
  long long v39 = dispatch_get_current_queue();
  dispatch_queue_set_specific(v39, @"com.apple.gamed.cachequeue", @"com.apple.gamed.cachequeue", 0);

  if (!os_log_GKGeneral) {
    id v40 = (id)GKOSLoggers();
  }
  long long v41 = (void *)os_log_GKCache;
  if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
    sub_10010F11C((void **)(a1 + 40), v41);
  }
  [*(id *)(a1 + 64) setPersistentStoreCoordinator:*(void *)(a1 + 40)];
  [*(id *)(a1 + 64) setMergePolicy:NSMergeByPropertyObjectTrumpMergePolicy];
  [*(id *)(a1 + 64) setRetainsRegisteredObjects:0];
  uint64_t v42 = *(void *)(a1 + 72);
  if (v42)
  {
    long long v43 = +[GKPlayerProfileCacheObject playerProfileWithPlayerID:v42 inManagedObjectContext:*(void *)(a1 + 64)];
    if (v43) {
      +[GKPlayerProfileCacheObject buildFamiliarilyLookupForProfile:v43];
    }
  }
}

void sub_10010E964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10010E97C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10010E98C(uint64_t a1)
{
}

void sub_10010E994(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 64) createPersistentStoreCoordinator];
  v9[0] = NSPersistentStoreFileProtectionKey;
  v9[1] = NSSQLitePragmasOption;
  v10[0] = NSFileProtectionCompleteUntilFirstUserAuthentication;
  v10[1] = &off_1002F2D68;
  void v9[2] = NSMigratePersistentStoresAutomaticallyOption;
  v9[3] = NSInferMappingModelAutomaticallyOption;
  void v10[2] = &__kCFBooleanTrue;
  v10[3] = &__kCFBooleanTrue;
  id v3 = +[NSDictionary dictionaryWithObjects:v10 forKeys:v9 count:4];
  uint64_t v4 = +[NSFileManager defaultManager];
  uint64_t v5 = [*(id *)(a1 + 64) gameCenterCacheDatabaseURLForPlayerID:*(void *)(a1 + 32) language:*(void *)(a1 + 40) name:@"database.sqlite3" fileManager:v4];
  [*(id *)(a1 + 64) migrateInsecureDatabaseToSecureDatabaseURL:v5 usingPersistantStoreCoordinator:v2 fileManager:v4 options:v3 playerID:*(void *)(a1 + 32) bundleID:*(void *)(a1 + 48) language:*(void *)(a1 + 40) name:@"database.sqlite3"];
  id v6 = [*(id *)(a1 + 64) _newManagedObjectContextWithCacheURL:v5 environment:*(void *)(a1 + 72) psc:v2 storeOptions:v3];
  uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

void sub_10010EDA0(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) persistentStoreCoordinator];
  id v2 = [v1 persistentStores];
  id v3 = [v2 firstObject];
  id v7 = 0;
  unsigned __int8 v4 = [v1 removePersistentStore:v3 error:&v7];
  id v5 = v7;

  if ((v4 & 1) == 0)
  {
    if (!os_log_GKGeneral) {
      id v6 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10010F4A0();
    }
  }
}

void sub_10010EE84(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10010EEF4()
{
  sub_100011064();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Error removing images cache directory: %@", v1, 0xCu);
}

void sub_10010EF68()
{
  sub_100011064();
  sub_100011084((void *)&_mh_execute_header, v0, v1, "Deleting image cache directory %@", v2, v3, v4, v5, v6);
}

void sub_10010EFD0()
{
  sub_100011064();
  sub_100011010((void *)&_mh_execute_header, v0, v1, "Unable to remove cache directory %@ : %@");
}

void sub_10010F044()
{
  sub_100011064();
  sub_100011084((void *)&_mh_execute_header, v0, v1, "Deleting cache dir %@", v2, v3, v4, v5, v6);
}

void sub_10010F0AC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10010F0E4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10010F11C(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a2;
  uint64_t v4 = [v2 persistentStores];
  uint64_t v5 = [v4 firstObject];
  uint8_t v6 = [v5 URL];
  sub_100011064();
  _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Creating managed object context with persistent store %@", v7, 0xCu);
}

void sub_10010F1E8(void *a1)
{
  id v1 = a1;
  CFAbsoluteTimeGetCurrent();
  sub_100011070();
  sub_1000110D8((void *)&_mh_execute_header, v2, v3, "%s elapsed seconds:%g", v4, v5, v6, v7, 2u);
}

void sub_10010F284()
{
  sub_1000110A0();
  sub_100011010((void *)&_mh_execute_header, v0, v1, "Error removing cache file at %@ : %@");
}

void sub_10010F2F0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10010F328()
{
  sub_1000110A0();
  sub_100011010((void *)&_mh_execute_header, v0, v1, "Error adding persistent store at %@ : %@");
}

void sub_10010F394(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10010F404(void *a1)
{
  id v1 = a1;
  CFAbsoluteTimeGetCurrent();
  sub_100011070();
  sub_1000110D8((void *)&_mh_execute_header, v2, v3, "%s elapsed seconds:%g", v4, v5, v6, v7, 2u);
}

void sub_10010F4A0()
{
  sub_100011064();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Unable to remove persistent store while removing cache for player due to error:%@", v1, 0xCu);
}

uint64_t sub_10010F938(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10010FF9C(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "setTestGame: rejected non-allowed bundleID: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100110240(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!os_log_GKGeneral) {
    id v4 = (id)GKOSLoggers();
  }
  uint64_t v5 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    id v19 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "got localized name for game:%@", buf, 0xCu);
  }
  uint64_t v6 = +[GKPlayerCredentialController sharedController];
  uint64_t v7 = [v6 pushCredentialForEnvironment:[*(id *)(a1 + 32) currentEnvironment]];
  uint64_t v8 = [v7 playerInternal];

  uint64_t v9 = +[GKService serviceForBundleID:*(void *)(a1 + 40) localPlayer:v8];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  void v14[2] = sub_100110404;
  void v14[3] = &unk_1002DAF88;
  id v15 = v3;
  uint64_t v10 = *(void **)(a1 + 48);
  id v11 = v10;
  uint64_t v12 = *(void *)(a1 + 32);
  id v16 = v11;
  uint64_t v17 = v12;
  id v13 = v3;
  [v9 updateCacheWithNearbyProfileDictionary:v10 handler:v14];
}

void sub_100110404(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [[GKBulletinNearbyInvite alloc] initWithPlayer:v3 localizedGameName:*(void *)(a1 + 32) inviteDictionary:*(void *)(a1 + 40)];

  uint64_t v5 = +[GKBulletinController sharedController];
  [v5 presentBulletin:v4];

  if (!os_log_GKGeneral) {
    id v6 = (id)GKOSLoggers();
  }
  uint64_t v7 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    LOWORD(v14) = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "GKDataRequestManager+Nearby: presentNearbyInvite - Presented Nearby Invite", (uint8_t *)&v14, 2u);
  }
  if (!os_log_GKGeneral) {
    id v8 = (id)GKOSLoggers();
  }
  uint64_t v9 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    int v14 = 138412290;
    id v15 = v4;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "presented nearby invite:%@", (uint8_t *)&v14, 0xCu);
  }
  if (!os_log_GKGeneral) {
    id v10 = (id)GKOSLoggers();
  }
  id v11 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    LOWORD(v14) = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "end presentNearbyInvite:", (uint8_t *)&v14, 2u);
  }
  [*(id *)(a1 + 48) endTransaction:@"presentNearbyInvite"];
  if (!os_log_GKGeneral) {
    id v12 = (id)GKOSLoggers();
  }
  id v13 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    LOWORD(v14) = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "GKDataRequestManager+Nearby: presentNearbyInvite - Ended Nearby Invite", (uint8_t *)&v14, 2u);
  }
}

void sub_100110C78(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "GKDataRequestManager+Nearby: handleNearbyInviteResponse: - No Client Proxy Found for incoming dictionary:%@", (uint8_t *)&v2, 0xCu);
}

void sub_100110CF0(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 134218242;
  uint64_t v4 = a2;
  __int16 v5 = 2112;
  uint64_t v6 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "GKDataRequestManager+Nearby - Nearby invite NC response type not handled: %ld for incoming dictionary:%@", (uint8_t *)&v3, 0x16u);
}

id GKDaemonRun()
{
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.gamed.clientQueue", 0);
  id v1 = (void *)qword_100329828;
  qword_100329828 = (uint64_t)v0;

  int v2 = objc_alloc_init(GKDataRequestManager);
  int v3 = (void *)qword_100329830;
  qword_100329830 = (uint64_t)v2;

  [(id)qword_100329830 finishStartup];
  [(id)qword_100329830 updateActivePushEnvironment];

  return +[GKClientProxy checkGameCenterEnabledForegroundClients];
}

void sub_100110F0C(id a1)
{
  qword_100329838 = (uint64_t)dispatch_queue_create("com.apple.GameKit.GKDataRequestManager.push", 0);

  _objc_release_x1();
}

void sub_100110FA0(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.GameKit.GKDataRequestManager.sync", 0);
  int v2 = (void *)qword_100329848;
  qword_100329848 = (uint64_t)v1;

  int v3 = qword_100329848;

  dispatch_queue_set_specific(v3, &off_100325A20, "com.apple.GameKit.GKDataRequestManager.sync", 0);
}

void sub_100111290(uint64_t a1)
{
  id v2 = [objc_alloc((Class)NSXPCListener) initWithMachServiceName:@"com.apple.gamed"];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 8);
  *(void *)(v3 + 8) = v2;

  [*(id *)(*(void *)(a1 + 32) + 8) setDelegate:];
  [*(id *)(*(void *)(a1 + 32) + 8) setOptions:256];
  [*(id *)(a1 + 32) setNatType:+[GKViceroyNATTypeHelper initialNATType](GKViceroyNATTypeHelper, "initialNATType")];
  __int16 v5 = +[GKReachability _gkReachabilityForInternetConnection];
  [*(id *)(a1 + 32) setReachability:v5];

  [*(id *)(*(void *)(a1 + 32) + 120) _gkStartNotifier];
  uint64_t v6 = +[NSNotificationCenter defaultCenter];
  [v6 addObserver:*(void *)(a1 + 32) selector:"reachabilityDidChange:" name:@"GKNetworkReachabilityChangedNotification" object:0];

  [*(id *)(a1 + 32) iCloudAccountAvailabilityChanged:0];
  uint64_t v7 = +[NSNotificationCenter defaultCenter];
  [v7 addObserver:*(void *)(a1 + 32) selector:"iCloudAccountAvailabilityChanged:" name:CKAccountChangedNotification object:0];

  id v8 = objc_alloc_init((Class)NSMutableDictionary);
  [*(id *)(a1 + 32) setTransactionBag:v8];

  id v9 = objc_alloc_init((Class)NSCountedSet);
  [*(id *)(a1 + 32) setTransactionCounts:v9];
}

void sub_100111560(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  CFAbsoluteTimeGetCurrent();
  long long v66 = +[NSUserDefaults standardUserDefaults];
  if (!os_log_GKGeneral) {
    id v3 = (id)GKOSLoggers();
  }
  uint64_t v4 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG)) {
    sub_100118234(v4);
  }
  CFAbsoluteTimeGetCurrent();
  __int16 v5 = +[GKPreferences shared];
  if (!os_log_GKGeneral) {
    id v6 = (id)GKOSLoggers();
  }
  uint64_t v7 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG)) {
    sub_100118194(v7);
  }
  +[GKImageRestrictions setForCurrentProcess];
  id v8 = +[GKContactsIntegrationController sharedController];
  id v9 = +[GKPreferences shared];
  [v9 setUseTestProtocols:_os_feature_enabled_impl()];

  +[GKPlayerCredentialController migrateOldAccountInformation];
  CFAbsoluteTimeGetCurrent();
  id v10 = [*(id *)(a1 + 32) preferredEnvironment];
  if (([v5 isStoreDemoModeEnabled] & 1) == 0)
  {
    uint64_t v11 = GKCurrentEnvironmentKey;
    if (v10 != [v66 integerForKey:GKCurrentEnvironmentKey]) {
      [v66 setInteger:v10 forKey:v11];
    }
  }
  *(void *)(*(void *)(a1 + 32) + 16) = v10;
  if (!os_log_GKGeneral) {
    id v12 = (id)GKOSLoggers();
  }
  id v13 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG)) {
    sub_1001180F4(v13);
  }
  int v14 = +[NSBundle _gkPreferredSystemLanguage];
  if (v14) {
    GKSetPreferredLanguage();
  }
  CFAbsoluteTimeGetCurrent();
  id v65 = [objc_alloc((Class)NSURLCache) initWithMemoryCapacity:0 diskCapacity:0 diskPath:&stru_1002E4F58];
  +[NSURLCache setSharedURLCache:v65];
  if (!os_log_GKGeneral) {
    id v15 = (id)GKOSLoggers();
  }
  id v16 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG)) {
    sub_100118054(v16);
  }
  CFAbsoluteTimeGetCurrent();
  uint64_t v17 = +[NSUserDefaults standardUserDefaults];
  uint64_t v18 = GKPushTokenKey;
  id v19 = [v17 objectForKey:GKPushTokenKey];
  uint64_t v20 = a1 + 32;
  [*(id *)(a1 + 32) setPushToken:v19];

  uint64_t v21 = [v66 objectForKey:v18];
  uint64_t v22 = *(void **)(*(void *)(a1 + 32) + 24);
  *(void *)(*(void *)v20 + 24) = v21;

  id v23 = objc_alloc((Class)APSConnection);
  uint64_t v24 = +[GKDataRequestManager pushQueue];
  id v25 = [v23 initWithEnvironmentName:APSEnvironmentProduction namedDelegatePort:@"com.apple.gamed.aps" queue:v24];
  uint64_t v26 = *(void **)(*(void *)(a1 + 32) + 72);
  *(void *)(*(void *)v20 + 72) = v25;

  unsigned int v27 = *(void **)(a1 + 32);
  v71[0] = _NSConcreteStackBlock;
  v71[1] = 3221225472;
  v71[2] = sub_100111E7C;
  v71[3] = &unk_1002D40E0;
  v71[4] = v27;
  [v27 performAsync:v71];
  if ([v5 isStoreDemoModeEnabled]) {
    id v28 = 0;
  }
  else {
    id v28 = [v66 integerForKey:GKPushEnvironmentKey];
  }
  [*(id *)(a1 + 32) setActivePushEnvironment:v28];
  if (!os_log_GKGeneral) {
    id v29 = (id)GKOSLoggers();
  }
  uint64_t v30 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG)) {
    sub_100117FB4(v30);
  }
  CFAbsoluteTimeGetCurrent();
  uint64_t v31 = +[NSNotificationCenter defaultCenter];
  [v31 addObserver:*(void *)(a1 + 32) selector:"credentialsDidChange:" name:GKPrimaryCredentialDidChangeNotification object:0];

  id v32 = +[GKPreferences shared];
  unsigned int v33 = [v32 isGameCenterRestricted];

  if (v33) {
    [*(id *)(a1 + 32) gameCenterDidBecomeRestricted];
  }
  id v34 = +[GKPreferences shared];
  [v34 setPreferencesDelegate:*(void *)(a1 + 32)];

  [*(id *)(a1 + 32) setUpCloudKitNotificationTopics];
  if (!os_log_GKGeneral) {
    id v35 = (id)GKOSLoggers();
  }
  long long v36 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG)) {
    sub_100117F14(v36);
  }
  double v37 = CFAbsoluteTimeGetCurrent();
  long long v38 = +[NSNotificationCenter defaultCenter];
  long long v39 = objc_alloc_init(GKApplicationStateMonitor);
  uint64_t v40 = *(void *)(a1 + 32);
  long long v41 = *(void **)(v40 + 104);
  *(void *)(v40 + 104) = v39;

  objc_initWeak(&location, *(id *)(a1 + 32));
  v68[0] = _NSConcreteStackBlock;
  v68[1] = 3221225472;
  v68[2] = sub_100006238;
  v68[3] = &unk_1002DB018;
  objc_copyWeak(&v69, &location);
  uint64_t v42 = [*(id *)(a1 + 32) applicationStateMonitor];
  [v42 setHandler:v68];

  long long v43 = *(void **)(a1 + 32);
  v67[0] = _NSConcreteStackBlock;
  v67[1] = 3221225472;
  v67[2] = sub_100111F5C;
  v67[3] = &unk_1002D40E0;
  void v67[4] = v43;
  [v43 performAsync:v67];
  id v44 = objc_alloc_init(GKWidgetEventListener);
  uint64_t v45 = *(void *)(a1 + 32);
  id v46 = *(void **)(v45 + 136);
  *(void *)(v45 + 136) = v44;

  [*(id *)(*(void *)(a1 + 32) + 136) activateListener];
  [v38 addObserver:*(void *)(a1 + 32) selector:"storeBagChanged:" name:@"GKStoreBagUpdatedNotification" object:0];
  [*(id *)(a1 + 32) performAsync:&stru_1002DB038];
  [*(id *)(a1 + 32) setReceivesMemoryWarnings:1];
  if (!os_log_GKGeneral) {
    id v47 = (id)GKOSLoggers();
  }
  id v48 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_INFO, "Installing language change notification", buf, 2u);
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, @"GKLanguageObserver", (CFNotificationCallback)sub_100112008, @"com.apple.language.changed", 0, CFNotificationSuspensionBehaviorCoalesce);
  CFNotificationCenterAddObserver(DarwinNotifyCenter, @"GKApplicationObserver", (CFNotificationCallback)sub_1001120AC, GKApplicationsChangeNotificationName, 0, CFNotificationSuspensionBehaviorCoalesce);
  if (!os_log_GKGeneral) {
    id v50 = (id)GKOSLoggers();
  }
  id v51 = os_log_GKPerf;
  if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
  {
    double v52 = CFAbsoluteTimeGetCurrent();
    sub_100117ED0(v52, v37);
  }

  [*(id *)(*(void *)(a1 + 32) + 8) resume];
  id v53 = [*(id *)(a1 + 32) ampController];
  __int16 v54 = [*(id *)(a1 + 32) storeBag];
  [v53 setupAsyncWithStoreBag:v54 withCompletion:&stru_1002DB058];

  [*(id *)(a1 + 32) synchronizeBagWithPreferences];
  double v55 = CFAbsoluteTimeGetCurrent();
  if (!os_log_GKGeneral) {
    id v56 = (id)GKOSLoggers();
  }
  id v57 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v72 = 0;
    _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_INFO, "Setting up Game Mode listener", v72, 2u);
  }
  __int16 v58 = [[_TtC14GameDaemonCore18GKGameModeListener alloc] initWithHandler:&stru_1002DB098];
  [*(id *)(a1 + 32) setGameModeListener:v58];

  if (!os_log_GKGeneral) {
    id v59 = (id)GKOSLoggers();
  }
  id v60 = os_log_GKPerf;
  if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
  {
    double v61 = CFAbsoluteTimeGetCurrent();
    sub_100117E8C(v61, v55);
  }

  if (!os_log_GKGeneral) {
    id v62 = (id)GKOSLoggers();
  }
  id v63 = os_log_GKPerf;
  if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
  {
    double v64 = CFAbsoluteTimeGetCurrent();
    sub_100117E48(v64, Current);
  }

  objc_destroyWeak(&v69);
  objc_destroyWeak(&location);
}

void sub_100111E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100111E7C(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 72) setDelegate:];
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers();
  }
  id v3 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(v4 + 72);
    uint64_t v5 = *(void *)(v4 + 80);
    int v7 = 138412546;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    uint64_t v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "PROD CONNECTION: %@ DEV: %@", (uint8_t *)&v7, 0x16u);
  }
}

id sub_100111F5C(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers();
  }
  id v3 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Installing startObservingApplicationWorkspaceChanges observer", v5, 2u);
  }
  [*(id *)(*(void *)(a1 + 32) + 104) setDelegate:];
  return [*(id *)(*(void *)(a1 + 32) + 104) startObservingApplicationWorkspaceChanges];
}

void sub_100111FFC(id a1)
{
}

uint64_t sub_100112008()
{
  if (!os_log_GKGeneral) {
    id v0 = (id)GKOSLoggers();
  }
  dispatch_queue_t v1 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "Terminating due to language change notification", v4, 2u);
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, @"GKLanguageObserver", @"com.apple.language.changed", 0);
  return xpc_transaction_exit_clean();
}

void sub_1001120AC()
{
  if (!os_log_GKGeneral) {
    id v0 = (id)GKOSLoggers();
  }
  dispatch_queue_t v1 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "Applications changed.", buf, 2u);
  }
  id v3 = +[GKClientProxy gameCenterClient];
  uint64_t v4 = +[GKPlayerCredentialController sharedController];
  uint64_t v5 = [v4 pushCredentialForEnvironment:[v3 environment]];

  uint64_t v6 = +[NSString stringWithFormat:@"%s:%d %s", "GKDataRequestManager.m", 253, "void GKObserveApplicationsChanged(CFNotificationCenterRef, void *, CFStringRef, const void *, CFDictionaryRef)"];
  int v7 = [v5 playerInternal];
  uint64_t v8 = [v7 playerID];
  __int16 v9 = [v3 transactionGroupWithName:v6 forPlayerID:v8];

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_100117D60;
  v11[3] = &unk_1002D51F8;
  id v12 = v3;
  id v10 = v3;
  [v9 performOnManagedObjectContext:v11];
}

void sub_100112288(id a1)
{
  if (!os_log_GKGeneral) {
    id v1 = (id)GKOSLoggers();
  }
  id v2 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Finished setting up metrics controller during initial launch phase.", v3, 2u);
  }
}

void sub_10011230C(id a1, BOOL a2)
{
  if (!a2)
  {
    if (!os_log_GKGeneral) {
      id v2 = (id)GKOSLoggers();
    }
    id v3 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Game Mode Listener: Game Mode became deactivated, attempting widget refresh", v6, 2u);
    }
    id v4 = [objc_alloc((Class)CHSTimelineController) initForAvocadoIdentifier:@"ContinuePlayingWidget" inBundleIdentifier:@"com.apple.gamecenter.widgets.extension"];
    id v5 = [v4 reloadTimelineWithReason:@"Game Mode deactivated"];
  }
}

void sub_1001124D4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) object];
  id v3 = [*(id *)(a1 + 40) storeBag];

  if (v2 == v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    id v5 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Updating connectivity and push environment", v6, 2u);
    }
    [*(id *)(a1 + 40) updateCachedNATSettingsIfNeededWithCompletionHandler:&stru_1002DB0B8];
    [*(id *)(a1 + 40) updateActivePushEnvironment];
    [*(id *)(a1 + 40) synchronizeBagWithPreferences];
  }
}

id sub_100112BBC(uint64_t a1)
{
  id v2 = dispatch_get_current_queue();
  id v3 = v2;
  id v4 = *(NSObject **)(a1 + 32);
  if (v2 != v4)
  {
    label = dispatch_queue_get_label(v2);
    uint64_t v6 = dispatch_queue_get_label(v4);
    int v7 = +[NSThread callStackSymbols];
    uint64_t v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s invoked on the wrong queue (got:%s expected:%s) at %@", "-[GKDataRequestManager _updateNotificationTopicsForcefully:]_block_invoke", label, v6, v7);
    __int16 v9 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKDataRequestManager.m"];
    id v10 = [v9 lastPathComponent];
    uint64_t v11 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@ (_actualCurrentQueue == syncQueue)\n[%s (%s:%d)]", v8, "-[GKDataRequestManager _updateNotificationTopicsForcefully:]_block_invoke", [v10 UTF8String], 585);

    +[NSException raise:@"GameKit Exception", @"%@", v11 format];
  }

  id v12 = *(void **)(a1 + 40);

  return [v12 setPushUpdatesBusy:0];
}

id sub_100112EA8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateNotificationTopicsForcefully:*(unsigned __int8 *)(a1 + 40)];
}

void sub_100113074(uint64_t a1)
{
  [*(id *)(a1 + 32) _clearPushConnections];
  id v2 = +[NSUserDefaults standardUserDefaults];
  [v2 removeObjectForKey:GKPushTokenKey];
  [v2 removeObjectForKey:GKPushEnvironmentKey];
  [*(id *)(a1 + 32) _setActivePushEnvironment:0];
}

void sub_100113318(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    id v5 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_ERROR)) {
      sub_100118348(a1, v5, (uint64_t)v3);
    }
  }
  [*(id *)(a1 + 32) updateCachedNATSettingsIfNeededWithCompletionHandler:&stru_1002DB0D8];
  [*(id *)(a1 + 32) updateActivePushEnvironment];
  uint64_t v6 = +[GKBulletinController sharedController];
  [v6 removeAllBulletins];

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100113448;
  void v7[3] = &unk_1002D3A20;
  id v8 = *(id *)(a1 + 40);
  +[GKClientProxy removeAllCachesWithHandler:v7];
}

uint64_t sub_100113448(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100113464(id a1)
{
  if (!os_log_GKGeneral) {
    id v1 = (id)GKOSLoggers();
  }
  id v2 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "The environment has been reset", v3, 2u);
  }
}

id sub_1001134E8(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers();
  }
  id v3 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    id v4 = v3;
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v6 = *(void *)(a1 + 32);
    int v8 = 138412546;
    id v9 = WeakRetained;
    __int16 v10 = 2112;
    uint64_t v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Connection (%@) to client (%@) INTERRUPTED.", (uint8_t *)&v8, 0x16u);
  }
  return [*(id *)(a1 + 32) setConnection:0];
}

void sub_1001135EC(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers();
  }
  id v3 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    id v4 = v3;
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    uint64_t v6 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412546;
    id v11 = WeakRetained;
    __int16 v12 = 2112;
    uint64_t v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Connection (%@) to client (%@) INVALID.", buf, 0x16u);
  }
  [*(id *)(a1 + 32) setConnection:0];
  int v7 = *(void **)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10011375C;
  void v8[3] = &unk_1002D3B38;
  void v8[4] = v7;
  id v9 = *(id *)(a1 + 32);
  [v7 performAsync:v8];
}

id sub_10011375C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) terminateClient:*(void *)(a1 + 40)];
}

id sub_100113AE4(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateCachedNATSettingsIfNeededWithCompletionHandler:*(void *)(a1 + 40)];
}

void sub_100113AF0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = dispatch_get_current_queue();
  int v8 = [(id)objc_opt_class() syncQueue];

  if (v7 != v8)
  {
    id v23 = v6;
    label = dispatch_queue_get_label(v7);
    __int16 v10 = [(id)objc_opt_class() syncQueue];
    id v11 = dispatch_queue_get_label(v10);
    __int16 v12 = +[NSThread callStackSymbols];
    uint64_t v13 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s invoked on the wrong queue (got:%s expected:%s) at %@", "-[GKDataRequestManager updateCachedNATSettingsIfNeededWithCompletionHandler:]_block_invoke", label, v11, v12);
    int v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKDataRequestManager.m"];
    id v15 = [v14 lastPathComponent];
    id v16 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@ (_actualCurrentQueue == [[self class] syncQueue])\n[%s (%s:%d)]", v13, "-[GKDataRequestManager updateCachedNATSettingsIfNeededWithCompletionHandler:]_block_invoke", [v15 UTF8String], 878);

    +[NSException raise:@"GameKit Exception", @"%@", v16 format];
    id v6 = v23;
  }

  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v17 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
      sub_100118530();
    }
  }
  if ([v5 count])
  {
    uint64_t v18 = [*(id *)(a1 + 32) storeBag];
    id v19 = *(void **)(a1 + 40);

    if (v18 == v19)
    {
      [*(id *)(a1 + 32) setCommonNATSettings:v5];
    }
    else
    {
      if (!os_log_GKGeneral) {
        id v20 = (id)GKOSLoggers();
      }
      uint64_t v21 = os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "[NAT] Bag has changed, not updating NAT settings", buf, 2u);
      }
    }
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v22 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1001184C8();
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_100113EDC(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) natType];
  if (v3)
  {
    id v1 = [*(id *)(a1 + 32) lastNATTypeCheckDate];
    BOOL v4 = v1 != 0;
  }
  else
  {
    BOOL v4 = 0;
  }
  if (+[GKViceroyNATTypeHelper isUnknown:v4])
  {
    BOOL v5 = 0;
    if (!v3) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v13 = +[NSDate date];
  int v14 = [*(id *)(a1 + 32) lastNATTypeCheckDate];
  [v13 timeIntervalSinceDate:v14];
  BOOL v5 = v15 <= 60.0;

  if (v3) {
LABEL_6:
  }

LABEL_7:
  if (v5)
  {
    if (!os_log_GKGeneral) {
      id v6 = (id)GKOSLoggers();
    }
    int v7 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      int v8 = *(void **)(a1 + 32);
      id v9 = v7;
      __int16 v10 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v8 natType]);
      *(_DWORD *)buf = 138412290;
      id v23 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "[NAT] Returning cached NAT type: %@.", buf, 0xCu);
    }
    id v11 = dispatch_get_global_queue(0, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001141D0;
    block[3] = &unk_1002D3930;
    id v12 = *(id *)(a1 + 40);
    void block[4] = *(void *)(a1 + 32);
    id v21 = v12;
    dispatch_async(v11, block);
  }
  else
  {
    objc_initWeak((id *)buf, *(id *)(a1 + 32));
    id v16 = *(void **)(a1 + 32);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    void v17[2] = sub_100114214;
    void v17[3] = &unk_1002DB1C0;
    void v17[4] = v16;
    objc_copyWeak(&v19, (id *)buf);
    id v18 = *(id *)(a1 + 40);
    [v16 awaitNATSettingsAndUpdateIfNeededWithCompletionHandler:v17];

    objc_destroyWeak(&v19);
    objc_destroyWeak((id *)buf);
  }
}

void sub_1001141AC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 80));
  _Unwind_Resume(a1);
}

uint64_t sub_1001141D0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) natType];
  id v3 = *(uint64_t (**)(uint64_t, id))(v1 + 16);

  return v3(v1, v2);
}

void sub_100114214(uint64_t a1)
{
  id v2 = dispatch_get_current_queue();
  id v3 = [(id)objc_opt_class() syncQueue];

  if (v2 != v3)
  {
    label = dispatch_queue_get_label(v2);
    BOOL v5 = [(id)objc_opt_class() syncQueue];
    id v6 = dispatch_queue_get_label(v5);
    int v7 = +[NSThread callStackSymbols];
    int v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s invoked on the wrong queue (got:%s expected:%s) at %@", "-[GKDataRequestManager getValidNATTypeWithForceRelay:withHandler:]_block_invoke_2", label, v6, v7);
    id v9 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKDataRequestManager.m"];
    id v10 = [v9 lastPathComponent];
    id v11 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@ (_actualCurrentQueue == [[self class] syncQueue])\n[%s (%s:%d)]", v8, "-[GKDataRequestManager getValidNATTypeWithForceRelay:withHandler:]_block_invoke_2", [v10 UTF8String], 921);

    +[NSException raise:@"GameKit Exception", @"%@", v11 format];
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v13 = [WeakRetained commonNATSettings];

  if (v13)
  {
    int v14 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKDataRequestManager.m", 933, "-[GKDataRequestManager getValidNATTypeWithForceRelay:withHandler:]_block_invoke_2");
    double v15 = +[GKDispatchGroup dispatchGroupWithName:v14];

    +[GKViceroyNATObserverFactory makeObserver];
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    v26[2] = sub_100114698;
    void v26[3] = &unk_1002DB198;
    id v16 = (id)objc_claimAutoreleasedReturnValue();
    id v27 = v16;
    id v28 = WeakRetained;
    objc_copyWeak(&v29, (id *)(a1 + 48));
    [v15 perform:v26];
    if ([v15 waitWithTimeout:3.0])
    {
      if (!os_log_GKGeneral) {
        id v17 = (id)GKOSLoggers();
      }
      id v18 = os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
        sub_100118598(v18);
      }
    }
    id v19 = dispatch_get_global_queue(0, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001148F0;
    block[3] = &unk_1002D3930;
    id v20 = *(id *)(a1 + 40);
    void block[4] = WeakRetained;
    id v25 = v20;
    dispatch_async(v19, block);

    objc_destroyWeak(&v29);
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v21 = (id)GKOSLoggers();
    }
    id v22 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "[NAT] Returning unknown NAT type since common NAT settings are not available yet.", buf, 2u);
    }
    id v23 = dispatch_get_global_queue(0, 0);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_10011464C;
    void v30[3] = &unk_1002D3A20;
    id v31 = *(id *)(a1 + 40);
    dispatch_async(v23, v30);

    double v15 = v31;
  }
}

void sub_100114634(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10011464C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[GKViceroyNATTypeHelper initialNATType];
  id v3 = *(uint64_t (**)(uint64_t, id))(v1 + 16);

  return v3(v1, v2);
}

void sub_100114698(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = *(void **)(a1 + 32);
  BOOL v5 = [*(id *)(a1 + 40) commonNATSettings];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100114784;
  void v7[3] = &unk_1002DB170;
  objc_copyWeak(&v9, (id *)(a1 + 48));
  id v6 = v3;
  id v8 = v6;
  [v4 getNATTypeWithNATSettings:v5 completionHandler:v7];

  objc_destroyWeak(&v9);
}

void sub_100114770(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100114784(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained setNatType:a2];
  BOOL v5 = +[NSDate date];
  [WeakRetained setLastNATTypeCheckDate:v5];

  if (!os_log_GKGeneral) {
    id v6 = (id)GKOSLoggers();
  }
  int v7 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    id v8 = v7;
    id v9 = +[NSNumber numberWithUnsignedInteger:a2];
    id v10 = [WeakRetained lastNATTypeCheckDate];
    int v11 = 138412546;
    id v12 = v9;
    __int16 v13 = 2112;
    int v14 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[NAT] Returning NAT type: %@. Updating last check date to: %@.", (uint8_t *)&v11, 0x16u);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1001148F0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) natType];
  id v3 = *(uint64_t (**)(uint64_t, id))(v1 + 16);

  return v3(v1, v2);
}

void sub_100114A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100114A24(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(void *)(*(void *)(result + 32) + 40);
  return result;
}

id sub_100114DF0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setActivePushEnvironment:*(void *)(a1 + 40)];
}

void sub_100114EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100114EFC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100114F0C(uint64_t a1)
{
}

void sub_100114F14(uint64_t a1)
{
}

id sub_10011524C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setPushToken:*(void *)(a1 + 40)];
}

void sub_1001154C8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = dispatch_get_current_queue();
  id v8 = [(id)objc_opt_class() syncQueue];

  if (v7 != v8)
  {
    id v20 = v6;
    label = dispatch_queue_get_label(v7);
    id v10 = [(id)objc_opt_class() syncQueue];
    int v11 = dispatch_queue_get_label(v10);
    id v12 = +[NSThread callStackSymbols];
    __int16 v13 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s invoked on the wrong queue (got:%s expected:%s) at %@", "-[GKDataRequestManager updateActivePushEnvironment]_block_invoke", label, v11, v12);
    int v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKDataRequestManager.m"];
    id v15 = [v14 lastPathComponent];
    id v16 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@ (_actualCurrentQueue == [[self class] syncQueue])\n[%s (%s:%d)]", v13, "-[GKDataRequestManager updateActivePushEnvironment]_block_invoke", [v15 UTF8String], 1066);

    +[NSException raise:@"GameKit Exception", @"%@", v16 format];
    id v6 = v20;
  }

  if (![v5 count])
  {
    if (!os_log_GKGeneral) {
      id v17 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1001185DC();
    }
  }
  id v18 = [*(id *)(a1 + 32) storeBag];
  id v19 = *(void **)(a1 + 40);

  if (v18 == v19) {
    [*(id *)(a1 + 32) _updatePushEnvironmentWithStoreBag:v5];
  }
}

void sub_10011580C(uint64_t a1, void *a2)
{
  id v3 = [a2 objectForKeyedSubscript:@"gk-push-token-ttl"];
  double v4 = (double)(uint64_t)[v3 integerValue];

  id v5 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1001158EC;
  void v6[3] = &unk_1002DB258;
  void v6[4] = v5;
  long long v9 = *(_OWORD *)(a1 + 56);
  id v8 = *(id *)(a1 + 48);
  double v10 = v4;
  id v7 = *(id *)(a1 + 40);
  [v5 performAsync:v6];
}

void sub_1001158EC(uint64_t a1)
{
  id v2 = +[GKPlayerCredentialController sharedController];
  id v3 = [v2 pushCredentialForEnvironment:*(void *)(a1 + 56)];

  double v4 = [v3 playerInternal];
  id v5 = [v4 playerID];

  uint64_t v6 = *(void *)(a1 + 32);
  if (*(void *)(v6 + 16) == *(void *)(a1 + 56) && *(void *)(v6 + 40) == *(void *)(a1 + 64))
  {
    id v7 = *(id *)(v6 + 24);
    if ([v7 length])
    {
      if (v3)
      {
        id v8 = +[NSUserDefaults standardUserDefaults];
        long long v9 = [v8 objectForKey:@"GKLastPushTokenPlayerID"];
        long long v41 = [v8 objectForKey:@"GKLastPreferredSystemLanguage"];
        id v10 = [v8 integerForKey:@"GKLastPushTokenEnvironment"];
        int v11 = [v8 objectForKey:@"GKLastPushTokenKey"];
        long long v38 = v8;
        uint64_t v12 = [v8 objectForKey:@"GKLastPushTokenDateKey"];
        uint64_t v13 = +[NSBundle _gkPreferredSystemLanguage];
        id v14 = *(id *)(a1 + 56);
        uint64_t v40 = v9;
        unsigned int v15 = [v9 isEqualToString:v5];
        unsigned int v16 = [v11 isEqualToData:v7];
        long long v39 = v11;
        uint64_t v42 = (void *)v12;
        if (v11) {
          BOOL v17 = v12 == 0;
        }
        else {
          BOOL v17 = 1;
        }
        if (!v17 && v10 == v14) {
          int v19 = v15 & v16 ^ 1;
        }
        else {
          int v19 = 1;
        }
        double v20 = *(double *)(a1 + 72);
        if (v20 > 0.0)
        {
          id v21 = +[NSDate date];
          [v21 timeIntervalSinceDate:v12];
          if (v20 < v22) {
            int v19 = 1;
          }
        }
        id v23 = (void *)v13;
        if (![v41 isEqualToString:v13] || v19)
        {
          CFStringRef v52 = @"apns-token";
          id v53 = v7;
          unsigned int v33 = +[NSDictionary dictionaryWithObjects:&v53 forKeys:&v52 count:1];
          id v34 = [*(id *)(a1 + 32) storeBag];
          id v35 = [v33 _gkPlistXMLDataForClient:0 player:0];
          v43[0] = _NSConcreteStackBlock;
          v43[1] = 3221225472;
          v43[2] = sub_100115DE4;
          v43[3] = &unk_1002DB230;
          uint64_t v24 = v38;
          id v44 = v38;
          id v36 = v5;
          uint64_t v37 = *(void *)(a1 + 56);
          id v45 = v36;
          uint64_t v50 = v37;
          id v46 = v7;
          id v47 = v23;
          id v48 = *(id *)(a1 + 40);
          id v49 = *(id *)(a1 + 48);
          [v34 writeDataForBagKey:@"gk-set-apns-token" postData:v35 client:0 credential:v3 completion:v43];

          id v25 = v39;
          id v28 = v40;
        }
        else
        {
          uint64_t v24 = v38;
          id v25 = v39;
          if (!os_log_GKGeneral) {
            id v26 = (id)GKOSLoggers();
          }
          id v27 = os_log_GKDaemon;
          id v28 = v40;
          if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "Not sending push token, last one sent is still good", buf, 2u);
          }
          (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
        }

        goto LABEL_37;
      }
    }
    else
    {
      if (!os_log_GKGeneral) {
        id v31 = (id)GKOSLoggers();
      }
      id v32 = os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "Not sending push token, NO PUSH TOKEN.", buf, 2u);
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
LABEL_37:

    goto LABEL_38;
  }
  if (!os_log_GKGeneral) {
    id v29 = (id)GKOSLoggers();
  }
  uint64_t v30 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "Not sending push token, environment changed", buf, 2u);
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
LABEL_38:
}

void sub_100115DE4(uint64_t a1, uint64_t a2)
{
  id v11 = 0;
  id v3 = +[NSDictionary _gkDictionaryWithServerData:a2 error:&v11];
  id v4 = v11;
  if (v4)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100118644();
    }
  }
  else
  {
    [*(id *)(a1 + 32) setObject:*(void *)(a1 + 40) forKey:@"GKLastPushTokenPlayerID"];
    [*(id *)(a1 + 32) setInteger:*(void *)(a1 + 80) forKey:@"GKLastPushTokenEnvironment"];
    [*(id *)(a1 + 32) setObject:*(void *)(a1 + 48) forKey:@"GKLastPushTokenKey"];
    uint64_t v6 = *(void **)(a1 + 32);
    id v7 = +[NSDate date];
    [v6 setObject:v7 forKey:@"GKLastPushTokenDateKey"];

    [*(id *)(a1 + 32) setObject:*(void *)(a1 + 56) forKey:@"GKLastPreferredSystemLanguage"];
    [*(id *)(a1 + 32) synchronize];
  }
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_100115F78;
  v9[3] = &unk_1002D3A20;
  id v8 = *(NSObject **)(a1 + 64);
  id v10 = *(id *)(a1 + 72);
  dispatch_async(v8, v9);
}

uint64_t sub_100115F78(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10011606C(id a1, NSDictionary *a2, NSError *a3)
{
  id v8 = a2;
  id v3 = +[GKPreferences shared];
  id v4 = [(NSDictionary *)v8 objectForKeyedSubscript:GKMaxRecentPlayersCount];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v5 = [v4 unsignedIntegerValue];
    if (v5) {
      [v3 setMaxRecentPlayersCount:v5];
    }
  }
  uint64_t v6 = [(NSDictionary *)v8 objectForKeyedSubscript:GKMaxRecentPlayersTime];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v7 = [v6 unsignedIntegerValue];
    if (v7) {
      [v3 setMaxRecentPlayersTime:(double)(unint64_t)v7];
    }
  }
}

id sub_1001163E8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) terminateClient:*(void *)(a1 + 40)];
}

void sub_1001165B0(uint64_t a1, void *a2)
{
  id v4 = [a2 lastObject];
  id v3 = [v4 name];
  if (!v3)
  {
    id v3 = GKCopyLocalizedApplicationNameForDisplayIdentifier();
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1001167A8(id a1, NSArray *a2)
{
  id v2 = a2;
  if (!os_log_GKGeneral) {
    id v3 = (id)GKOSLoggers();
  }
  id v4 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    int v19 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Got bulletins from invite data : %@", buf, 0xCu);
  }
  if (![(NSArray *)v2 count])
  {
    id v5 = +[GKApplicationWorkspace defaultWorkspace];
    [v5 openGameCenterSettings];
  }
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v6 = v2;
  id v7 = [(NSArray *)v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v14 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        uint64_t v12 = [v11 acceptAction:v13];
        if (!v12)
        {
          uint64_t v12 = [v11 defaultAction];
          if (!v12) {
            continue;
          }
        }
        [v11 handleAction:@"GKAccepted"];
      }
      id v8 = [(NSArray *)v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v8);
  }
}

uint64_t sub_100116B44(uint64_t a1)
{
  if (*(void *)(a1 + 40) = [*(id *)(a1 + 32) pushConnectionForEnvironment:*(void *)(*(void *)(a1 + 32) + 40)];
  {
    id v2 = +[GKPlayerCredentialController sharedController];
    uint64_t v3 = [v2 pushCredentialForEnvironment:[*(id *)(a1 + 32) currentEnvironment]];
    if (v3)
    {
      id v4 = (void *)v3;
      unsigned __int8 v5 = [*(id *)(*(void *)(a1 + 32) + 24) isEqualToData:*(void *)(a1 + 48)];

      if ((v5 & 1) == 0)
      {
        [*(id *)(a1 + 32) _setPushToken:*(void *)(a1 + 48)];
        if ([*(id *)(a1 + 48) length]) {
          [*(id *)(a1 + 32) sendPushTokenWithReplyQueue:0];
        }
      }
    }
    else
    {
    }
  }

  return _objc_release_x1();
}

id sub_100117038(uint64_t a1)
{
  return +[GKBulletin bulletinsForPushNotification:*(void *)(a1 + 32) withHandler:&stru_1002DB3C0];
}

void sub_100117054(id a1, NSArray *a2)
{
  id v2 = a2;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v3 = [(NSArray *)v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v9 + 1) + 8 * (void)v6);
        id v8 = +[GKBulletinController sharedController];
        [v7 executeBulletinWithBulletinController:v8];

        uint64_t v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [(NSArray *)v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v4);
  }
}

void sub_100117264(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) transactionCounts];
  [v2 removeObject:*(void *)(a1 + 40)];

  id v3 = [*(id *)(a1 + 32) transactionCounts];
  id v4 = [v3 countForObject:*(void *)(a1 + 40)];

  if (!v4)
  {
    id v5 = [*(id *)(a1 + 32) transactionBag];
    [v5 removeObjectForKey:*(void *)(a1 + 40)];
  }
}

uint64_t sub_100117440(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) transactionCounts];
  id v3 = [v2 countForObject:*(void *)(a1 + 40)];

  if (!v3)
  {
    id v4 = +[NSString stringWithFormat:@"com.apple.gamed.%@", *(void *)(a1 + 40)];
    [v4 UTF8String];
    id v5 = (void *)os_transaction_create();

    uint64_t v6 = [*(id *)(a1 + 32) transactionBag];
    [v6 setObject:v5 forKeyedSubscript:*(void *)(a1 + 40)];
  }
  id v7 = [*(id *)(a1 + 32) transactionCounts];
  [v7 addObject:*(void *)(a1 + 40)];

  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    long long v9 = *(uint64_t (**)(void))(result + 16);
    return v9();
  }
  return result;
}

void sub_100117690(id a1)
{
  qword_100329858 = (uint64_t)dispatch_queue_create("com.apple.gamecenter.statsQueue", 0);

  _objc_release_x1();
}

void sub_100117724(id a1)
{
  qword_100329868 = (uint64_t)dispatch_queue_create("com.apple.gamecenter.ratingsQueue", 0);

  _objc_release_x1();
}

void sub_100117D60(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v7 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:a2];
  uint64_t v6 = [v7 gameList];
  [v6 expire];

  [*(id *)(a1 + 32) refreshContentsForDataType:5 userInfo:0];
  v5[2](v5);
}

void sub_100117E04(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Received notification that iCloud account availability changed", v1, 2u);
}

void sub_100117E48(double a1, double a2)
{
  double v2 = sub_1000172B8(a1, a2);
  *id v3 = 136315394;
  sub_100011B80((uint64_t)v3, (uint64_t)"finishStartup", v2);
  sub_100017978((void *)&_mh_execute_header, v4, v5, "%s elapsed seconds:%g", v6);
}

void sub_100117E8C(double a1, double a2)
{
  double v2 = sub_1000172B8(a1, a2);
  *id v3 = 136315394;
  sub_100011B80((uint64_t)v3, (uint64_t)"setupGameModeListener", v2);
  sub_100017978((void *)&_mh_execute_header, v4, v5, "%s elapsed seconds:%g", v6);
}

void sub_100117ED0(double a1, double a2)
{
  double v2 = sub_1000172B8(a1, a2);
  *id v3 = 136315394;
  sub_100011B80((uint64_t)v3, (uint64_t)"finishStartupMoreNotifications", v2);
  sub_100017978((void *)&_mh_execute_header, v4, v5, "%s elapsed seconds:%g", v6);
}

void sub_100117F14(void *a1)
{
  id v1 = a1;
  CFAbsoluteTimeGetCurrent();
  sub_100011070();
  sub_1000110D8((void *)&_mh_execute_header, v2, v3, "%s elapsed seconds:%g", v4, v5, v6, v7, 2u);
}

void sub_100117FB4(void *a1)
{
  id v1 = a1;
  CFAbsoluteTimeGetCurrent();
  sub_100011070();
  sub_1000110D8((void *)&_mh_execute_header, v2, v3, "%s elapsed seconds:%g", v4, v5, v6, v7, 2u);
}

void sub_100118054(void *a1)
{
  id v1 = a1;
  CFAbsoluteTimeGetCurrent();
  sub_100011070();
  sub_1000110D8((void *)&_mh_execute_header, v2, v3, "%s elapsed seconds:%g", v4, v5, v6, v7, 2u);
}

void sub_1001180F4(void *a1)
{
  id v1 = a1;
  CFAbsoluteTimeGetCurrent();
  sub_100011070();
  sub_1000110D8((void *)&_mh_execute_header, v2, v3, "%s elapsed seconds:%g", v4, v5, v6, v7, 2u);
}

void sub_100118194(void *a1)
{
  id v1 = a1;
  CFAbsoluteTimeGetCurrent();
  sub_100011070();
  sub_1000110D8((void *)&_mh_execute_header, v2, v3, "%s elapsed seconds:%g", v4, v5, v6, v7, 2u);
}

void sub_100118234(void *a1)
{
  id v1 = a1;
  CFAbsoluteTimeGetCurrent();
  sub_100011070();
  sub_1000110D8((void *)&_mh_execute_header, v2, v3, "%s elapsed seconds:%g", v4, v5, v6, v7, 2u);
}

void sub_1001182D4()
{
  sub_100010D50();
  uint64_t v3 = v0;
  sub_100017978((void *)&_mh_execute_header, v1, (uint64_t)v1, "connection: %@ publicToken: %@", v2);
}

void sub_100118348(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = a2;
  uint64_t v6 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v4 currentEnvironment]);
  sub_100010D50();
  uint64_t v8 = a3;
  _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Failed to remove all credentials for environment: %@, error: %@", v7, 0x16u);
}

void sub_100118410(double a1, double a2)
{
  double v2 = sub_1000172B8(a1, a2);
  *uint64_t v3 = 136315394;
  sub_100011B80((uint64_t)v3, (uint64_t)"acceptConnection", v2);
  sub_100017978((void *)&_mh_execute_header, v4, v5, "%s elapsed seconds:%g", v6);
}

void sub_100118454()
{
  sub_100011064();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "shouldAcceptNewConnection: creating GKClientProxy for bundleID=%@", v1, 0xCu);
}

void sub_1001184C8()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "[NAT] NO CommNAT settings in bag, error = %@", v2, v3, v4, v5, v6);
}

void sub_100118530()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "[NAT] Error loading common NAT settings due to error: %@", v2, v3, v4, v5, v6);
}

void sub_100118598(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[NAT] Timed out waiting for a valid NAT type from observer.", v1, 2u);
}

void sub_1001185DC()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "no apns environment in bag, error = %@", v2, v3, v4, v5, v6);
}

void sub_100118644()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "error sending push token: %@", v2, v3, v4, v5, v6);
}

void sub_1001186AC()
{
  sub_100011064();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Terminating client: %@", v1, 0xCu);
}

void sub_100118B7C(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (!os_log_GKGeneral) {
    id v3 = (id)GKOSLoggers();
  }
  uint64_t v4 = os_log_GKContacts;
  if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG)) {
    sub_100118C94((uint64_t)v2, v4);
  }
}

void sub_100118C0C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Migrating credentials", v1, 2u);
}

void sub_100118C50(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "The currently cached version of the list is old, will perform full sync.", v1, 2u);
}

void sub_100118C94(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Migrated contacts integration info credentials. error: %@", (uint8_t *)&v2, 0xCu);
}

CFDataRef sub_100119014(const UInt8 *a1, unsigned int a2)
{
  *(_OWORD *)&v7.reallocate = unk_1002DB4C8;
  v7.preferredSize = 0;
  memset(&v7, 0, 48);
  CFAllocatorRef v4 = CFAllocatorCreate(0, &v7);
  CFDataRef v5 = CFDataCreateWithBytesNoCopy(0, a1, a2, v4);
  CFRelease(v4);
  return v5;
}

void sub_100119500(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Fairplay could not get the the FairPlayHWInfo", v1, 2u);
}

void sub_100119728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10011974C(uint64_t a1, void *a2)
{
  id v3 = a2;
  CFAllocatorRef v4 = +[RBSProcessStateDescriptor descriptor];
  [v4 setValues:1];
  uint64_t v8 = FBSSceneVisibilityEndowmentNamespace;
  CFDataRef v5 = +[NSArray arrayWithObjects:&v8 count:1];
  [v4 setEndowmentNamespaces:v5];

  [v3 setStateDescriptor:v4];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_10000AD28;
  void v6[3] = &unk_1002DB4E8;
  objc_copyWeak(&v7, (id *)(a1 + 32));
  [v3 setUpdateHandler:v6];
  objc_destroyWeak(&v7);
}

void sub_100119884(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100119CF4(id a1)
{
  v4[0] = GKGameCenterIdentifier;
  v4[1] = GKGameCenterMessageExtensionIdentifier;
  v4[2] = GKGameCenterDashboardIdentifier;
  uint64_t v1 = +[NSArray arrayWithObjects:v4 count:3];
  uint64_t v2 = +[NSSet setWithArray:v1];
  id v3 = (void *)qword_100329878;
  qword_100329878 = v2;
}

void GKLaunchApplicationWithIdentifier(void *a1, uint64_t a2)
{
  id v3 = a1;
  CFAllocatorRef v4 = +[GKReporter reporter];
  [v4 reportAppLaunchDuration];

  v8[0] = FBSOpenApplicationOptionKeyActivateSuspended;
  CFDataRef v5 = +[NSNumber numberWithBool:a2];
  v8[1] = FBSOpenApplicationOptionKeyPromptUnlockDevice;
  v9[0] = v5;
  v9[1] = &__kCFBooleanTrue;
  uint8_t v6 = +[NSDictionary dictionaryWithObjects:v9 forKeys:v8 count:2];

  id v7 = +[FBSSystemService sharedService];
  [v7 openApplication:v3 options:v6 withResult:0];
}

id GKApplicationWithIdentifierIsInstalled(void *a1)
{
  if (!a1) {
    return 0;
  }
  id v1 = a1;
  uint64_t v2 = +[NSMutableArray array];
  id v3 = +[LSApplicationWorkspace defaultWorkspace];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100119FC8;
  void v7[3] = &unk_1002D6AB8;
  id v8 = v2;
  id v4 = v2;
  [v3 enumerateBundlesOfType:1 block:v7];

  id v5 = [v4 containsObject:v1];
  return v5;
}

id sub_100119FC8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addObject:a2];
}

uint64_t sub_10011B13C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a4);
  }
  return result;
}

void sub_10011B274(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v4 = +[CKContainer containerWithIdentifier:@"com.apple.socialgaming.sessions"];
  uint64_t v2 = [v1 cloudKitOperationConfigurationForContainer:v4];
  id v3 = (void *)qword_100329888;
  qword_100329888 = v2;
}

void sub_10011B7A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_10011B8AC;
  v9[3] = &unk_1002DB5F8;
  id v10 = *(id *)(a1 + 40);
  id v11 = *(id *)(a1 + 48);
  id v4 = *(id *)(a1 + 56);
  uint8_t v6 = *(void **)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 72);
  id v12 = v4;
  uint64_t v15 = v5;
  int v16 = *(_DWORD *)(a1 + 80);
  id v13 = v6;
  id v14 = v3;
  id v7 = *(void **)(a1 + 32);
  id v8 = v3;
  [v7 setModifyRecordsCompletionBlock:v9];
  [*(id *)(a1 + 56) addOperation:*(void *)(a1 + 32)];
}

void sub_10011B8AC(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  id v7 = *(void **)(a1 + 32);
  id v8 = a2;
  [v7 setError:v6];
  long long v9 = [v8 firstObject];

  [*(id *)(a1 + 32) setResult:v9];
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v10 = (id)GKOSLoggers();
    }
    id v11 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10011C29C((uint64_t)v6, v11);
    }
    if ([v6 code] == (id)2)
    {
      id v12 = [v6 userInfo];
      id v13 = [v12 objectForKeyedSubscript:CKPartialErrorsByItemIDKey];

      id v14 = [*(id *)(a1 + 40) recordID];
      uint64_t v15 = [v13 objectForKeyedSubscript:v14];

      if ([v15 code] == (id)14)
      {
        if (!os_log_GKGeneral) {
          id v16 = (id)GKOSLoggers();
        }
        BOOL v17 = os_log_GKError;
        if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
          sub_10011C258(v17);
        }
        id v18 = *(void **)(a1 + 32);
        v39[0] = _NSConcreteStackBlock;
        v39[1] = 3221225472;
        v39[2] = sub_10011BCB0;
        void v39[3] = &unk_1002DB5A8;
        id v40 = *(id *)(a1 + 48);
        id v19 = *(id *)(a1 + 40);
        uint64_t v20 = *(void *)(a1 + 72);
        id v41 = v19;
        uint64_t v43 = v20;
        int v44 = *(_DWORD *)(a1 + 80);
        id v42 = *(id *)(a1 + 32);
        [v18 perform:v39];
      }
      id v6 = v15;
    }
  }
  if (+[GKCloudKitMultiplayerUtils shouldRetryForError:v6 andRetryCount:*(unsigned int *)(a1 + 80)])
  {
    if (!os_log_GKGeneral) {
      id v24 = (id)GKOSLoggers();
    }
    id v25 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
    {
      uint64_t v31 = *(void *)(a1 + 40);
      int v32 = *(_DWORD *)(a1 + 80);
      *(_DWORD *)buf = 138412802;
      uint64_t v46 = v31;
      __int16 v47 = 2112;
      id v48 = v6;
      __int16 v49 = 1024;
      int v50 = v32;
      _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Error save invite record: %@ due to: %@. Will retry at most %d times.", buf, 0x1Cu);
    }
    id v26 = [v6 userInfo];
    id v27 = [v26 valueForKey:CKErrorRetryAfterKey];
    [v27 doubleValue];
    double v29 = v28;

    dispatch_time_t v30 = dispatch_time(0, 1000000000 * (uint64_t)v29);
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_10011BED4;
    v33[3] = &unk_1002DB5D0;
    uint64_t v37 = *(void *)(a1 + 72);
    id v34 = *(id *)(a1 + 40);
    id v35 = *(id *)(a1 + 48);
    int v38 = *(_DWORD *)(a1 + 80);
    id v36 = *(id *)(a1 + 56);
    dispatch_after(v30, (dispatch_queue_t)&_dispatch_main_q, v33);
  }
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 64) + 16))(*(void *)(a1 + 64), v21, v22, v23);
}

void sub_10011BCB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = [*(id *)(a1 + 40) recordID];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_10011BD9C;
  void v7[3] = &unk_1002DB580;
  uint64_t v11 = *(void *)(a1 + 56);
  id v8 = *(id *)(a1 + 32);
  int v12 = *(_DWORD *)(a1 + 64);
  id v9 = *(id *)(a1 + 48);
  id v10 = v3;
  id v6 = v3;
  [v4 fetchRecordWithID:v5 completionHandler:v7];
}

void sub_10011BD9C(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)(a1 + 56);
  uint64_t v5 = *(unsigned int *)(a1 + 64);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_10011BE64;
  void v7[3] = &unk_1002D8E40;
  uint64_t v6 = *(void *)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  [v4 saveInviteRecord:a2 database:v6 retryCount:v5 completionHandler:v7];
}

uint64_t sub_10011BE64(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a2;
  [v5 setError:a3];
  [*(id *)(a1 + 32) setResult:v6];

  id v7 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v7();
}

id sub_10011BED4(uint64_t a1)
{
  return [*(id *)(a1 + 56) saveInviteRecord:*(void *)(a1 + 32) database:*(void *)(a1 + 40) retryCount:(*(_DWORD *)(a1 + 64) - 1) completionHandler:*(void *)(a1 + 48)];
}

void sub_10011BEEC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_10011C258(os_log_t log)
{
  *(_WORD *)id v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Error saving CKRecord (for Messages Invite) because server record changed. Will fetch updated record from CloudKit and retry save.", v1, 2u);
}

void sub_10011C29C(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error saving CKRecord (for Messages Invite) because of: %@", (uint8_t *)&v2, 0xCu);
}

id sub_10011DDA8(uint64_t a1, void *a2, unsigned __int8 a3)
{
  id v5 = a2;
  id v6 = +[GKTurnBasedParticipantInternal internalRepresentationForCacheObject:v5];
  [v6 setSlot:a3];
  id v7 = [v5 playerID];
  id v8 = [v5 guestID];
  if ([v7 length])
  {
    id v9 = [*(id *)(a1 + 32) objectForKeyedSubscript:v7];
    if ([v8 length])
    {
      if (!os_log_GKGeneral) {
        id v10 = (id)GKOSLoggers();
      }
      uint64_t v11 = os_log_GKCache;
      if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
        sub_10011E8B8((uint64_t)v8, v11);
      }
      id v12 = [objc_alloc((Class)GKAnonymousGuestPlayerInternal) initWithHostPlayerInternal:v9 guestIdentifier:v8];
      [v6 setPlayer:v12];
    }
    else
    {
      [v6 setPlayer:v9];
    }
  }
  id v13 = [v5 invitedBy];

  if ([v13 length])
  {
    id v14 = [*(id *)(a1 + 32) objectForKeyedSubscript:v13];
    [v6 setInvitedBy:v14];
  }

  return v6;
}

id sub_10011DF44(id a1, GKTurnBasedExchangeCacheObject *a2, unint64_t a3)
{
  return +[GKTurnBasedExchangeInternal internalRepresentationForCacheObject:a2];
}

id sub_10011E4D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10011E668;
  void v13[3] = &unk_1002DB6B0;
  id v5 = v3;
  id v14 = v5;
  id v6 = [v4 indexOfObjectPassingTest:v13];
  if (v6 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v7 = +[NSString stringWithFormat:@"invalid recipientIndex %ld encountered %@ searching in participants:%@", 0x7FFFFFFFFFFFFFFFLL, v5, *(void *)(a1 + 32)];
    id v8 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/GKInternalRepresentation+Cache.m"];
    id v9 = [v8 lastPathComponent];
    id v10 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@ (index != NSNotFound)\n[%s (%s:%d)]", v7, "-[GKTurnBasedExchangeInternal(Cache) updateWithCacheObject:]_block_invoke", [v9 UTF8String], 416);

    +[NSException raise:@"GameKit Exception", @"%@", v10 format];
  }
  uint64_t v11 = +[NSNumber numberWithInteger:v6];

  return v11;
}

BOOL sub_10011E668(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  BOOL result = *(void *)(a1 + 32) == a2;
  *a4 = result;
  return result;
}

id sub_10011E67C(id a1, GKTurnBasedExchangeReplyCacheObject *a2, unint64_t a3)
{
  return +[GKTurnBasedExchangeReplyInternal internalRepresentationForCacheObject:a2];
}

void sub_10011E878(uint8_t *buf, unsigned char *a2, os_log_t log)
{
  *buf = 0;
  *a2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Your device is able to use fastsync transport for this game, but the fast_sync_transport feature flag has not been turned on.", buf, 2u);
}

void sub_10011E8B8(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "participant is a guest with identifier = %@", (uint8_t *)&v2, 0xCu);
}

void sub_10011EAA0(id a1)
{
  qword_100329898 = (uint64_t)dispatch_queue_create("com.apple.GameKit.GKStoreBag.lookup", 0);
  qword_1003298A0 = (uint64_t)[objc_alloc((Class)NSMutableDictionary) initWithCapacity:0];
}

void sub_10011EAE8(uint64_t a1, uint64_t a2)
{
}

void sub_10011EAF8(uint64_t a1)
{
}

id sub_10011EB04(void *a1)
{
  *(void *)(*(void *)(a1[6] + 8) + 40) = [(id)qword_1003298A0 objectForKey:a1[4]];
  int v2 = *(void **)(*(void *)(a1[6] + 8) + 40);
  if (!v2)
  {
    *(void *)(*(void *)(a1[6] + 8) + 40) = [[GKStoreBag alloc] initWithURL:a1[4] dataRequestManager:a1[5]];
    [(id)qword_1003298A0 setObject:*(void *)(*(void *)(a1[6] + 8) + 40) forKey:a1[4]];
    int v2 = *(void **)(*(void *)(a1[6] + 8) + 40);
  }

  return v2;
}

uint64_t sub_10011F024(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10011F034(uint64_t a1)
{
  unsigned __int8 v2 = [objc_msgSend(*(id *)(a1 + 32), "internalBag") isEqualToDictionary:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) setInternalBag:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) setExpiration:*(void *)(a1 + 48)];
  [*(id *)(a1 + 32) setError:*(void *)(a1 + 56)];
  [*(id *)(a1 + 32) _updatePlayerIDHashParameters];
  if ((v2 & 1) == 0) {
    [+[NSNotificationCenter defaultCenter] postNotificationName:@"GKStoreBagUpdatedNotification" object:*(void *)(a1 + 32) userInfo:0];
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(a1 + 64) + 16);

  return v3();
}

id sub_10011F2BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_10011F338;
  void v6[3] = &unk_1002DB7C8;
  void v6[4] = a2;
  void v6[5] = a4;
  v6[6] = a3;
  long long v4 = *(_OWORD *)(a1 + 48);
  long long v7 = *(_OWORD *)(a1 + 32);
  long long v8 = v4;
  return [(id)v7 performAsync:v6];
}

uint64_t sub_10011F338(uint64_t a1)
{
  uint64_t v3 = *(void **)(a1 + 32);
  unsigned __int8 v2 = *(void **)(a1 + 40);
  uint64_t v21 = v2;
  if (*(void *)(a1 + 48)) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4
    && [v3 statusCode] == (id)200
    && ([v3 _maxAge],
        double v6 = v5,
        id v7 = [*(id *)(a1 + 56) _storeBagForData:*(void *)(a1 + 48) error:&v21],
        long long v8 = +[NSDate dateWithTimeIntervalSinceNow:v6],
        v7)
    && !v21)
  {
    id v9 = v8;
    id v10 = [[[*(id *)(a1 + 56) url] cacheKeyRepresentation];
    id v11 = [(id)GKInsecureCacheRoot() stringByAppendingPathComponent:@"StoreBag"];
    id v12 = [v11 stringByAppendingPathComponent:v10];
    id v13 = objc_alloc_init((Class)NSFileManager);
    [v13 createDirectoryAtPath:v11 withIntermediateDirectories:1 attributes:0 error:0];
    [*(id *)(a1 + 48) writeToFile:v12 atomically:1];
    [v13 _gkSetExpirationInterval:v12 ofFileAtPath:v6];

    id v14 = +[NSUserDefaults standardUserDefaults];
    [(NSUserDefaults *)v14 setValue:*(void *)(a1 + 64) forKey:GKLastProtocolVersionUsedKey];
    if (!os_log_GKGeneral) {
      GKOSLoggers();
    }
    uint64_t v15 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v23 = v7;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Loaded new store bag %@", buf, 0xCu);
    }
    [*(id *)(a1 + 56) _setupAPNSRequired:v7];
    [*(id *)(a1 + 56) _setupSignatureRequired:v7];
    [*(id *)(a1 + 56) _setupResponseSignatureRequired:v7];
    [*(id *)(a1 + 56) _metricsThrottleThreshold:v7];
    [+[NSNotificationCenter defaultCenter] postNotificationName:@"GKStoreBagUpdatedNotification" object:*(void *)(a1 + 56) userInfo:0];
    [*(id *)(a1 + 56) setInternalBag:v7];
    [*(id *)(a1 + 56) setExpiration:v9];
    id v16 = 0;
  }
  else
  {
    if (!os_log_GKGeneral) {
      GKOSLoggers();
    }
    BOOL v17 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
    {
      id v19 = *(void **)(a1 + 72);
      id v20 = [v3 statusCode];
      *(_DWORD *)buf = 138412802;
      id v23 = v19;
      __int16 v24 = 2048;
      id v25 = v20;
      __int16 v26 = 2112;
      id v27 = v21;
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Game Center store bag couldn't be loaded with url:%@, status code returned:%ld with error:%@", buf, 0x20u);
    }
    [*(id *)(a1 + 56) setExpiration:+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", 60.0)];
    id v16 = v21;
    if (!v21) {
      id v16 = +[NSError userErrorForCode:3 underlyingError:0];
    }
  }
  [*(id *)(a1 + 56) setError:v16];
  return (*(uint64_t (**)(void))(*(void *)(a1 + 80) + 16))();
}

uint64_t sub_10011F94C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(*(void *)(a1 + 32) + 80));
  }
  return result;
}

id sub_10011F970(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = *(void **)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10011F9E0;
  void v4[3] = &unk_1002DB778;
  void v4[4] = a2;
  return [v2 _fetchFromServerWithHandler:v4];
}

uint64_t sub_10011F9E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_10011F9F0(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  _DWORD v3[2] = sub_10011FA68;
  v3[3] = &unk_1002DB868;
  long long v4 = *(_OWORD *)(a1 + 32);
  uint64_t v5 = a2;
  return [(id)v4 _fetchFromCacheWithHandler:v3];
}

uint64_t sub_10011FA68(uint64_t a1)
{
  if (([*(id *)(a1 + 32) _isValidAndNotExpired] & 1) == 0)
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_10011FB00;
    void v4[3] = &unk_1002DB840;
    unsigned __int8 v2 = *(void **)(a1 + 40);
    void v4[4] = *(void *)(a1 + 32);
    [v2 perform:v4];
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
}

id sub_10011FB00(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = *(void **)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10011FB70;
  void v4[3] = &unk_1002DB778;
  void v4[4] = a2;
  return [v2 _fetchFromServerWithHandler:v4];
}

uint64_t sub_10011FB70(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_10011FB80(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 16) = 0;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(uint64_t, void))(v2 + 16))(v2, *(void *)(*(void *)(a1 + 32) + 80));
  }
  uint64_t v3 = *(void **)(a1 + 32);

  return _[v3 updateURLPatternCache];
}

void sub_10011FBD8(uint64_t a1)
{
}

id sub_10011FF24(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10011FFA4;
  void v4[3] = &unk_1002DB930;
  uint64_t v2 = *(void *)(a1 + 56);
  long long v5 = *(_OWORD *)(a1 + 40);
  double v6 = v1;
  uint64_t v7 = v2;
  return [v1 getValuesWithCompletion:v4];
}

void sub_10011FFA4(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 56))
  {
    uint64_t v3 = (NSURL *)[a2 objectForKey:*(void *)(a1 + 32)];
    if (v3) {
      uint64_t v3 = +[NSURL URLWithString:v3];
    }
    long long v4 = *(NSObject **)(a1 + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100120054;
    block[3] = &unk_1002DB908;
    void block[4] = v3;
    long long v6 = *(_OWORD *)(a1 + 48);
    dispatch_async(v4, block);
  }
}

uint64_t sub_100120054(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], *(void *)(a1[5] + 40));
}

void sub_100120164(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 56))
  {
    id v3 = [a2 _gkSubDictionaryWithKeys:*(void *)(a1 + 32)];
    long long v4 = *(NSObject **)(a1 + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100120200;
    block[3] = &unk_1002DB908;
    void block[4] = v3;
    long long v6 = *(_OWORD *)(a1 + 48);
    dispatch_async(v4, block);
  }
}

uint64_t sub_100120200(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], *(void *)(a1[5] + 40));
}

void sub_1001202F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100120308(void *a1)
{
  id result = [*(id *)(a1[4] + 80) objectForKey:a1[5]];
  *(void *)(*(void *)(a1[6] + 8) + 40) = result;
  return result;
}

void sub_100120430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100120448(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _shouldUseHTTPPipelining];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_100120584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10012059C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _gkSessionRateLimiting];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1001206AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1001206C4(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _achievementsThrottleThreshold];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1001207D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1001207EC(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _scoresThrottleThreshold];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1001213C8(id a1)
{
  qword_1003298B0 = (uint64_t)[objc_alloc((Class)AKAppleIDSession) initWithIdentifier:@"gamed"];
}

void sub_100121440(id a1)
{
  id v1 = objc_alloc_init((Class)AADeviceInfo);
  qword_1003298C0 = (uint64_t)[[v1 clientInfoHeader] copy];
}

id sub_100121610(uint64_t a1, void *a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 40)
    || (id result = [a2 isEqualToString:@"X-Apple-I-TimeZone"], (result & 1) == 0))
  {
    uint64_t v7 = *(void **)(a1 + 32);
    return [v7 setValue:a3 forHTTPHeaderField:a2];
  }
  return result;
}

id sub_100121764(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) dataRequestManager];
  [v2 beginTransaction:@"sendAsynchronousRequest"];
  id v3 = +[GKStoreBag appleIdSession];
  +[GKStoreBag addAuthHeadersToRequest:*(void *)(a1 + 40)];
  long long v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_10012182C;
  v9[3] = &unk_1002DBA10;
  uint64_t v7 = *(void *)(a1 + 48);
  void v9[4] = v2;
  void v9[5] = v7;
  return [v4 _sendOneAsyncTryWithRequest:v5 responseMustBeSigned:v6 session:v3 retryCount:4 completionHandler:v9];
}

id sub_10012182C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  id v3 = *(void **)(a1 + 32);

  return [v3 endTransaction:@"sendAsynchronousRequest"];
}

void sub_100121A7C(uint64_t a1, void *a2, void *a3, id a4)
{
  char v49 = 0;
  [*(id *)(a1 + 32) handleResponse:a2 forRequest:*(void *)(a1 + 40) shouldRetry:&v49];
  if (v49)
  {
    int v7 = *(_DWORD *)(a1 + 64);
    if (v7 > 0)
    {
      [*(id *)(a1 + 48) _sendOneAsyncTryWithRequest:*(void *)(a1 + 40) responseMustBeSigned:*(unsigned __int8 *)(a1 + 68) session:*(void *)(a1 + 32) retryCount:(v7 - 1) completionHandler:*(void *)(a1 + 56)];
      return;
    }
    NSErrorUserInfoKey v62 = NSLocalizedFailureReasonErrorKey;
    CFStringRef v63 = @"Exhausted retry count for _sendOneAsyncTryWithRequest.";
    a4 = +[NSError userErrorForCode:userInfo:](NSError, "userErrorForCode:userInfo:", 3, +[NSDictionary dictionaryWithObjects:&v63 forKeys:&v62 count:1]);
  }
  if (a4)
  {
    if (!os_log_GKGeneral) {
      GKOSLoggers();
    }
    long long v8 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100123CA0((uint64_t)a4, v8, v9, v10, v11, v12, v13, v14);
    }
  }
  if ((uint64_t)[a2 statusCode] >= 400)
  {
    uint64_t v16 = (uint64_t)[a2 statusCode];
    if (!a4 && v16 <= 599)
    {
      double v17 = 0.0;
      if ([a2 statusCode] == (id)503)
      {
        [objc_msgSend(objc_msgSend(objc_msgSend(a2, "allHeaderFields"), "objectForKey:", @"Retry-After"), "doubleValue");
        double v17 = v18;
      }
      v60[0] = @"statusCode";
      id v19 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [a2 statusCode]);
      v60[1] = @"retryTime";
      v61[0] = v19;
      v61[1] = +[NSNumber numberWithDouble:v17];
      id v20 = (NSError *)+[NSError userErrorForCode:userInfo:](NSError, "userErrorForCode:userInfo:", 3, +[NSDictionary dictionaryWithObjects:v61 forKeys:v60 count:2]);
      goto LABEL_18;
    }
  }
  if (a4)
  {
    id v20 = [NSError errorWithDomain:[a4 domain] code:[a4 code] userInfo:0];
LABEL_18:
    uint64_t v21 = v20;
    goto LABEL_20;
  }
  uint64_t v21 = 0;
LABEL_20:
  if (os_log_type_enabled(os_log_GKHTTP, OS_LOG_TYPE_INFO) && *(void *)(a1 + 40))
  {
    id v22 = [*(id *)(a1 + 40) HTTPBody];
    uint64_t v46 = v15;
    if (objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "valueForHTTPHeaderField:", @"content-encoding"), "isEqualToString:", @"gzip"))
    {
      id v23 = [v22 _gkUnzippedData];
      if (v23) {
        id v22 = v23;
      }
    }
    __int16 v24 = os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      GKOSLoggers();
      __int16 v24 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "_sendAsynchronousRequest:Received HTTP Response", buf, 2u);
      __int16 v24 = os_log_GKGeneral;
    }
    if (!v24) {
      GKOSLoggers();
    }
    id v25 = os_log_GKHTTP;
    if (os_log_type_enabled(os_log_GKHTTP, OS_LOG_TYPE_INFO))
    {
      __int16 v26 = *(void **)(a1 + 40);
      id v27 = [v26 loggableHeaders];
      CFStringRef v28 = sub_10012219C(v22);
      *(_DWORD *)buf = 138412802;
      id v51 = v26;
      __int16 v52 = 2112;
      id v53 = v27;
      __int16 v54 = 2112;
      *(void *)double v55 = v28;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "%@\nREQUEST {\nheader: %@\nbody: %@}", buf, 0x20u);
    }
    if (!os_log_GKGeneral) {
      GKOSLoggers();
    }
    double v29 = os_log_GKHTTP;
    if (os_log_type_enabled(os_log_GKHTTP, OS_LOG_TYPE_INFO))
    {
      unsigned int v44 = [a2 statusCode];
      dispatch_time_t v30 = +[NSHTTPURLResponse localizedStringForStatusCode:](NSHTTPURLResponse, "localizedStringForStatusCode:", [a2 statusCode]);
      id v31 = [a2 allHeaderFields];
      CFStringRef v32 = sub_10012219C(a3);
      *(_DWORD *)buf = 138413570;
      id v51 = a2;
      __int16 v52 = 2112;
      id v53 = a4;
      __int16 v54 = 1024;
      *(_DWORD *)double v55 = v44;
      *(_WORD *)&v55[4] = 2112;
      *(void *)&v55[6] = v30;
      __int16 v56 = 2112;
      id v57 = v31;
      __int16 v58 = 2112;
      CFStringRef v59 = v32;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "%@\nRESPONSE (error:%@) {\nstatus: (%d) %@\nheader: %@\nbody: %@ }", buf, 0x3Au);
    }
    uint64_t v15 = v46;
  }
  if (*(unsigned char *)(a1 + 68))
  {
    id v33 = [a2 getSAPSignature];
    id v48 = 0;
    if (v33)
    {
      id v34 = [objc_alloc((Class)NSData) initWithBase64EncodedString:v33 options:0];
      if (!os_log_GKGeneral) {
        GKOSLoggers();
      }
      id v35 = os_log_GKTrace;
      if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "_sendAsynchronousRequest:HTTP Response was signed and logged", buf, 2u);
      }
      if (!os_log_GKGeneral) {
        GKOSLoggers();
      }
      id v36 = os_log_GKHTTP;
      if (os_log_type_enabled(os_log_GKHTTP, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v51 = v34;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "\nRESPONSE was signed:%@}", buf, 0xCu);
      }
      [objc_msgSend(*(id *)(a1 + 40), "_gkSAPSession") processSignedData:a3 withSignature:v34 error:&v48];
      if (v48)
      {
        if (!os_log_GKGeneral) {
          GKOSLoggers();
        }
        uint64_t v37 = os_log_GKHTTP;
        if (os_log_type_enabled(os_log_GKHTTP, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          id v51 = v48;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "\nSIGNATURE ERROR:%@}", buf, 0xCu);
        }
        if (!os_log_GKGeneral) {
          GKOSLoggers();
        }
        if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
          sub_100123C34();
        }
        uint64_t v21 = (NSError *)+[NSError userErrorForCode:3 userInfo:0];
        a3 = 0;
      }
    }
    else
    {
      if (!os_log_GKGeneral) {
        GKOSLoggers();
      }
      int v38 = os_log_GKHTTP;
      if (os_log_type_enabled(os_log_GKHTTP, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "\nSIGNATURE ERROR: A SIGNED RESPONSE WAS EXPECTED BUT NONE WAS AVAILABLE}", buf, 2u);
      }
      if (!os_log_GKGeneral) {
        GKOSLoggers();
      }
      long long v39 = os_log_GKError;
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
        sub_100123BF0(v39);
      }
    }
  }
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  v41.n128_u64[0] = 0;
  if (isKindOfClass) {
    [a2 _maxAge];
  }
  uint64_t v42 = *(void *)(a1 + 56);
  if (v42)
  {
    if (a4) {
      uint64_t v43 = 0;
    }
    else {
      uint64_t v43 = a3;
    }
    (*(void (**)(uint64_t, void *, NSError *, __n128))(v42 + 16))(v42, v43, v21, v41);
  }
}

CFStringRef sub_10012219C(void *a1)
{
  if (!a1) {
    return @"(null: empty body)";
  }
  uint64_t v2 = (unsigned __int8 *)[a1 bytes];
  uint64_t v3 = (uint64_t)[a1 length];
  uint64_t v4 = v3;
  if (v3 >= 5)
  {
    int v5 = *v2;
    if (v5 == 255)
    {
      if (v2[1] == 216) {
        return @"(probably JPEG data)";
      }
    }
    else if ((unint64_t)v3 >= 9 && v5 == 137 && v2[1] == 80 && v2[2] == 78 && v2[3] == 71)
    {
      return @"(probably PNG data)";
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 100;
  id v7 = +[NSPropertyListSerialization propertyListWithData:a1 options:0 format:&v14 error:&v13];
  if (v7)
  {
    uint64_t v6 = v7;
    if (![v7 objectForKeyedSubscript:@"password"]) {
      return (const __CFString *)v6;
    }
    id v8 = [v6 mutableCopy];
    [v8 setObject:@"PASSWORD REDACTED" forKeyedSubscript:@"password"];
    id v9 = v8;
    return (const __CFString *)v9;
  }
  if (v4 >= 128) {
    size_t v10 = 128;
  }
  else {
    size_t v10 = v4;
  }
  if (memmem(v2, v10, "<html", 5uLL) || memmem(v2, v10, "<xml", 4uLL))
  {
    id v9 = [objc_alloc((Class)NSString) initWithBytes:v2 length:v4 encoding:4];
    return (const __CFString *)v9;
  }
  if (!os_log_GKGeneral) {
    GKOSLoggers();
  }
  uint64_t v12 = os_log_GKHTTP;
  if (os_log_type_enabled(os_log_GKHTTP, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134218242;
    uint64_t v16 = v4;
    __int16 v17 = 2112;
    double v18 = a1;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "(couldn't decode data of length:%ld as plist/html or xml) %@", buf, 0x16u);
  }
  return 0;
}

void sub_100122414(id a1)
{
  qword_1003298D0 = (uint64_t)[objc_alloc((Class)GKThreadsafeDictionary) initWithName:@"com.apple.GameKit.invalidationDates"];
}

id sub_1001224E4(uint64_t a1, void *a2)
{
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v4 = *(void **)(a1 + 32);
  id result = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (result)
  {
    id v6 = result;
    uint64_t v7 = *(void *)v10;
    do
    {
      id v8 = 0;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v4);
        }
        [a2 setObject:*(void *)(a1 + 40) forKey:*(void *)(*((void *)&v9 + 1) + 8 * (void)v8)];
        id v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id result = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
      id v6 = result;
    }
    while (result);
  }
  return result;
}

void sub_100122674(id a1)
{
  qword_1003298E0 = (uint64_t)dispatch_queue_create("com.apple.GameKit.networkSynchronization", (dispatch_queue_attr_t)&_dispatch_queue_attr_concurrent);
}

uint64_t sub_1001226A4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100122968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_100122998(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    GKOSLoggers();
  }
  uint64_t v2 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "_loadDataForBagKey:Starting GKDataRequestManager transaction", buf, 2u);
  }
  id v3 = [*(id *)(a1 + 32) dataRequestManager];
  [v3 beginTransaction:@"loadDataForBagKey"];
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  int8x16_t v4 = *(int8x16_t *)(a1 + 32);
  long long v5 = *(_OWORD *)(a1 + 48);
  int8x16_t v18 = vextq_s8(v4, v4, 8uLL);
  void v17[2] = sub_100122B60;
  void v17[3] = &unk_1002DBBB0;
  long long v19 = v5;
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 96);
  uint64_t v6 = *(void *)(a1 + 112);
  void v17[4] = v3;
  uint64_t v22 = v6;
  [(id)v4.i64[0] performAsync:v17];
  uint64_t v7 = *(NSObject **)(a1 + 40);
  global_queue = dispatch_get_global_queue(0, 0);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1001231A4;
  void v13[3] = &unk_1002DBBD8;
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  void v13[4] = *(void *)(a1 + 32);
  void v13[5] = v9;
  uint64_t v11 = *(void *)(a1 + 88);
  uint64_t v15 = *(void *)(a1 + 96);
  uint64_t v12 = *(void *)(a1 + 80);
  int8x16_t v14 = vextq_s8(*(int8x16_t *)(a1 + 104), *(int8x16_t *)(a1 + 104), 8uLL);
  v13[6] = v12;
  v13[7] = v3;
  char v16 = *(unsigned char *)(a1 + 120);
  v13[8] = v10;
  v13[9] = v11;
  dispatch_group_notify(v7, global_queue, v13);
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
}

void sub_100122B60(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) pushToken];
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
  id v3 = *(void **)(a1 + 48);
  v18[0] = *(void *)(a1 + 56);
  v18[1] = @"gk-allowed-pregdpr-requests";
  int8x16_t v4 = +[NSArray arrayWithObjects:v18 count:2];
  v10[0] = _NSConcreteStackBlock;
  long long v5 = *(_OWORD *)(a1 + 48);
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  v10[1] = 3221225472;
  void v10[2] = sub_100122C7C;
  v10[3] = &unk_1002DBB88;
  long long v11 = v5;
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 72);
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = v7;
  uint64_t v14 = v8;
  id v15 = v2;
  long long v9 = *(_OWORD *)(a1 + 96);
  long long v16 = *(_OWORD *)(a1 + 80);
  long long v17 = v9;
  [v3 getValuesForKeys:v4 queue:v6 completion:v10];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_100122C7C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = (void *)(a1 + 40);
  id v7 = [*(id *)(a1 + 32) verifyEligibilityForBagKey:*(void *)(a1 + 40) checkingAllowedRequestKeys:[a2 objectForKeyedSubscript:@"gk-allowed-pregdpr-requests"] client:*(void *)(a1 + 48)];
  if (!v7)
  {
    id v9 = [a2 objectForKey:*v6];
    if (v9)
    {
      uint64_t v10 = +[NSURL URLWithString:v9];
      long long v11 = v10;
      if (!a3)
      {
        if (!v10) {
          goto LABEL_16;
        }
LABEL_15:
        dispatch_group_enter(*(dispatch_group_t *)(a1 + 56));
        id v12 = +[GKNetworkRequestManager commonNetworkRequestManager];
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472;
        void v16[2] = sub_100122E7C;
        void v16[3] = &unk_1002DBB60;
        long long v17 = *(_OWORD *)(a1 + 32);
        int8x16_t v18 = v11;
        long long v19 = *(_OWORD *)(a1 + 64);
        uint64_t v13 = *(void *)(a1 + 80);
        uint64_t v14 = *(void *)(a1 + 56);
        uint64_t v20 = *(void *)(a1 + 48);
        uint64_t v21 = v13;
        uint64_t v22 = v14;
        int8x16_t v23 = vextq_s8(*(int8x16_t *)(a1 + 88), *(int8x16_t *)(a1 + 88), 8uLL);
        uint64_t v24 = *(void *)(a1 + 104);
        [v12 getFairPlaySession:v16];
LABEL_20:
        dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
        return;
      }
    }
    else
    {
      if (!a3)
      {
LABEL_16:
        id v15 = +[NSError userErrorForCode:3 userInfo:0];
LABEL_19:
        *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) = v15;
        goto LABEL_20;
      }
      long long v11 = 0;
    }
    if (!os_log_GKGeneral) {
      GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
    {
      sub_100123D0C();
      if (v11) {
        goto LABEL_15;
      }
    }
    else if (v11)
    {
      goto LABEL_15;
    }
    id v15 = a3;
    goto LABEL_19;
  }
  *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) = v7;
  uint64_t v8 = *(NSObject **)(a1 + 56);

  dispatch_group_leave(v8);
}