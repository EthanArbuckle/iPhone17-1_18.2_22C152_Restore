void sub_100122E7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  void *v15;
  long long v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned __int8 v21;
  void v22[6];
  long long v23;
  long long v24;

  v4 = *(void *)(a1 + 32);
  v5 = *(void **)(v4 + 56);
  if (v5)
  {
    if (![v5 containsObject:*(void *)(a1 + 40)]) {
      a2 = 0;
    }
    v4 = *(void *)(a1 + 32);
  }
  v21 = [*(id *)(v4 + 48) containsObject:*(void *)(a1 + 40)];
  v20 = [*(id *)(*(void *)(a1 + 32) + 64) containsObject:*(void *)(a1 + 40)];
  v6 = *(void **)(a1 + 32);
  v7 = *(void *)(a1 + 48);
  v8 = [(*(id *)(a1 + 56)) playerInternal playerID];
  v9 = [*(id *)(a1 + 56) authenticationToken];
  v11 = *(void *)(a1 + 64);
  v10 = *(void *)(a1 + 72);
  v12 = *(void *)(a1 + 80);
  BYTE1(v19) = +[GKStoreBag shouldIncludeClientInfoAuthHeaderForBagKey:*(void *)(a1 + 40)];
  LOBYTE(v19) = 1;
  BYTE1(v18) = v21;
  LOBYTE(v18) = 0;
  v13 = [v6 requestWithURL:v7 playerID:v8 authToken:v9 pushToken:v11 client:v10 postData:v12 includeUDID:a2 includeAPNS:v18 sapSession:v19];
  if (v13)
  {
    v14 = v13;
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 88));
    [*(id *)(a1 + 72) beginNetworkActivity];
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_100123074;
    v22[3] = &unk_1002DBB38;
    v15 = *(void **)(a1 + 32);
    v16 = *(_OWORD *)(a1 + 104);
    v17 = *(void *)(a1 + 72);
    v22[4] = *(void *)(a1 + 40);
    v22[5] = v17;
    v23 = *(_OWORD *)(a1 + 88);
    v24 = v16;
    [v15 _sendAsynchronousRequest:v14 responseMustBeSigned:v20 completion:v22];
  }
  else
  {
    if (!os_log_GKGeneral) {
      GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100123D74();
    }
    *(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) = +[NSError userErrorForCode:3 userInfo:0];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 88));
}

void sub_100123074(uint64_t a1, void *a2, void *a3, double a4)
{
  if (a3)
  {
    if (!os_log_GKGeneral) {
      GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100123DE0();
    }
  }
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) = a2;
  *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) = a3;
  if (qword_1003298F8 != -1) {
    dispatch_once(&qword_1003298F8, &stru_1002DBB10);
  }
  double v8 = *(double *)&qword_1003298F0;
  if (*(double *)&qword_1003298F0 > 30.0 || *(double *)&qword_1003298F0 <= 0.0) {
    double v8 = a4;
  }
  *(double *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = v8;
  [*(id *)(a1 + 40) endNetworkActivity];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_100123178(id a1)
{
  [+[GKPreferences shared](GKPreferences, "shared") cacheTTLOverride];
  qword_1003298F0 = v1;
}

void sub_1001231A4(uint64_t a1)
{
  if (([*(id *)(a1 + 32) isLoadValidForBagKey:*(void *)(a1 + 40) date:*(void *)(a1 + 48)] & 1) == 0)
  {
    if (!os_log_GKGeneral) {
      GKOSLoggers();
    }
    v3 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      uint64_t v4 = *(void *)(a1 + 48);
      id v6 = [[objc_msgSend(*(id *)(a1 + 32), "_bagKeyValidationDict") objectForKey:v5];
      int v8 = 138412802;
      uint64_t v9 = v5;
      __int16 v10 = 2112;
      uint64_t v11 = v4;
      __int16 v12 = 2112;
      id v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "STALE LOAD(%@) started: %@ invalidated: %@", (uint8_t *)&v8, 0x20u);
    }
    *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 0xBFF0000000000000;
  }
  uint64_t v7 = *(void *)(a1 + 72);
  if (v7) {
    (*(void (**)(uint64_t, void, void, double))(v7 + 16))(v7, *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40), *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40), *(double *)(*(void *)(*(void *)(a1 + 80) + 8) + 24));
  }

  [*(id *)(a1 + 56) endTransaction:@"loadDataForBagKey"];
  if (*(unsigned char *)(a1 + 104)) {
}
  }

id sub_100123444(void *a1)
{
  v2 = (void *)a1[4];
  uint64_t v1 = a1[5];
  uint64_t v3 = a1[6];
  uint64_t v4 = a1[7];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1001234C0;
  v7[3] = &unk_1002DBC28;
  uint64_t v5 = a1[8];
  v7[4] = a1[9];
  return [v2 _loadDataForBagKey:v1 postData:v3 client:v4 credential:v5 completion:v7];
}

uint64_t sub_1001234C0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1001235C4(uint64_t a1)
{
  v2 = [*(id *)(a1 + 32) _networkSynchonizationQueue];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100123650;
  v4[3] = &unk_1002DBC50;
  long long v3 = *(_OWORD *)(a1 + 48);
  long long v5 = *(_OWORD *)(a1 + 32);
  long long v6 = v3;
  long long v7 = *(_OWORD *)(a1 + 64);
  dispatch_barrier_async(v2, v4);
}

id sub_100123650(uint64_t a1)
{
  return [*(id *)(a1 + 32) _loadDataForBagKey:*(void *)(a1 + 40) postData:*(void *)(a1 + 48) client:*(void *)(a1 + 56) credential:*(void *)(a1 + 64) completion:*(void *)(a1 + 72)];
}

void sub_100123878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v32 - 200), 8);
  _Block_object_dispose((const void *)(v32 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1001238A8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) dataRequestManager];
  long long v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = [objc_msgSend(*(id *)(a1 + 48), "playerInternal") playerID];
  id v6 = [*(id *)(a1 + 48) authenticationToken];
  id v7 = [v2 pushToken];
  LOWORD(v12) = *(_WORD *)(a1 + 104);
  id v8 = [v3 requestWithURL:v4 playerID:v5 authToken:v6 pushToken:v7 client:v12 postData:v13 includeUDID:v14 includeAPNS:v15 sapSession:0];
  if (v8)
  {
    id v9 = v8;
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 72));
    [*(id *)(a1 + 56) beginNetworkActivity];
    __int16 v10 = *(void **)(a1 + 32);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100123A3C;
    v13[3] = &unk_1002DBC78;
    long long v11 = *(_OWORD *)(a1 + 88);
    v13[4] = *(void *)(a1 + 56);
    long long v14 = *(_OWORD *)(a1 + 72);
    long long v15 = v11;
    [v10 _sendAsynchronousRequest:v9 responseMustBeSigned:0 completion:v13];
  }
  else
  {
    *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) = +[NSError userErrorForCode:3 userInfo:0];
    if (!os_log_GKGeneral) {
      GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100123E4C();
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
}

void sub_100123A3C(uint64_t a1, void *a2, void *a3, double a4)
{
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = a2;
  *(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = a4;
  *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) = a3;
  [*(id *)(a1 + 32) endNetworkActivity];
  id v7 = *(NSObject **)(a1 + 40);

  dispatch_group_leave(v7);
}

void sub_100123AB4(void *a1)
{
  uint64_t v2 = a1[4];
  if (v2) {
    (*(void (**)(uint64_t, void, void, double))(v2 + 16))(v2, *(void *)(*(void *)(a1[5] + 8) + 40), *(void *)(*(void *)(a1[7] + 8) + 40), *(double *)(*(void *)(a1[6] + 8) + 24));
  }

  long long v3 = *(void **)(*(void *)(a1[7] + 8) + 40);
}

void sub_100123BF0(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "_sendAsynchronousRequest:Signature Error: A signed response was expected but non was available", v1, 2u);
}

void sub_100123C34()
{
  sub_10009BB04(__stack_chk_guard);
  sub_100011048((void *)&_mh_execute_header, v0, v1, "_sendAsynchronousRequest:Signature error:%@", v2, v3, v4, v5, 2u);
}

void sub_100123CA0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100123D0C()
{
  sub_10009BB04(__stack_chk_guard);
  sub_1000110A0();
  sub_100011010((void *)&_mh_execute_header, v0, v1, "_loadDataForBagKey:Failed to get URL from bag for bagKey:%@.Error is: %@");
}

void sub_100123D74()
{
  sub_10009BB04(__stack_chk_guard);
  sub_100011048((void *)&_mh_execute_header, v0, v1, "_loadDataForBagKey:No request for NSURLRequest, likely due to invalid URL. This will result to an alert showing '...error communicating with the server'. bagKey was:%@", v2, v3, v4, v5, 2u);
}

void sub_100123DE0()
{
  sub_1000110A0();
  sub_100011010((void *)&_mh_execute_header, v0, v1, "_loadDataForBagKey:Failed to send Asynchronous Request for bagKey:%@. Error: %@");
}

void sub_100123E4C()
{
  sub_10009BB04(__stack_chk_guard);
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Error - This will result showing an alert '...error communicating with the server'. Invalid request when reading data for url: %@", v2, v3, v4, v5, 2u);
}

void sub_1001243E4(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) context];
  id v2 = [v1 executeCommandsWithContext:v3];
}

void sub_100124918(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = [*(id *)(a1 + 40) context];
  [v1 finishWithContext:v2];
}

void sub_100124B10(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Nothing to do, no commands to execute.", v1, 2u);
}

void sub_100124B54(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Executing contacts change commands", v1, 2u);
}

void sub_100124B98(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = [a2 error];
  int v5 = 138412290;
  id v6 = v4;
  _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Will not proceed to execute commands due to error: %@", (uint8_t *)&v5, 0xCu);
}

uint64_t sub_100124E48(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001251A8(uint64_t a1)
{
}

void sub_1001251B0(uint64_t a1, uint64_t a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100125244;
  v4[3] = &unk_1002D40E0;
  id v3 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  [v3 authenticatedPlayersDidChange:a2 authenticatingBundleID:0 reply:v4];
}

void sub_100125244(uint64_t a1)
{
}

uint64_t sub_10012524C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100125600(uint64_t a1)
{
  id v2 = +[NSError errorWithDomain:GKInternalErrorDomain code:400 userInfo:0];
  (*(void (**)(void, void *, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), v2, 0, 0);
}

void sub_1001256F0(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Unable to find host with pid %d", (uint8_t *)v2, 8u);
}

void sub_100125768(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "getPrivateServicesForPID: Missing a host client", v1, 2u);
}

void sub_100125BC4(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "SUCCESFULLY SAVED(%@)", (uint8_t *)&v2, 0xCu);
}

void sub_100125C3C(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "we will rollback to last known good state because we FAILED TO SAVE(%@), ERROR: %@", (uint8_t *)&v3, 0x16u);
}

void sub_100125CC4(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to remove existing entries", v1, 2u);
}

void sub_100125D08(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Error fetching count", v1, 2u);
}

void sub_100125DA0(id a1)
{
  uint64_t v1 = [[GKAMPController alloc] initWithHasAcknowledgedLatestGDPRBlock:&stru_1002DBD18 bagChanged:&stru_1002DBD38];
  int v2 = (void *)qword_100329900;
  qword_100329900 = (uint64_t)v1;

  +[AMSMetrics setDisableBackgroundMetrics:0];
}

BOOL sub_100125E00(id a1)
{
  uint64_t v1 = objc_alloc_init(GKPlayerInternalProvider);
  int v2 = [(GKPlayerInternalProvider *)v1 localPlayer];
  unsigned __int8 v3 = [v2 hasAcknowledgedLatestGDPR];

  return v3;
}

void sub_100125E54(id a1)
{
}

void sub_100125E68(id a1, GKClientProxy *a2, BOOL *a3)
{
}

void sub_100125FF0(uint64_t a1)
{
  int v2 = [*(id *)(a1 + 32) hasAcknowledgedLatestGDPRBlock];
  int v3 = v2[2]();

  if (v3) {
    [*(id *)(a1 + 32) createBagIfNecessary];
  }
  uint64_t v4 = dispatch_get_global_queue(0, 0);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1001260D0;
  v6[3] = &unk_1002D3930;
  id v5 = *(id *)(a1 + 40);
  v6[4] = *(void *)(a1 + 32);
  id v7 = v5;
  dispatch_async(v4, v6);
}

void sub_1001260D0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) bag];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t sub_10012642C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) mafEventFilter];
  if (!v2)
  {
    if (!*(void *)(a1 + 40)) {
      goto LABEL_5;
    }
    id v2 = objc_alloc_init(GKMultiplayerActivityEventFilter);
    [*(id *)(a1 + 32) setMafEventFilter:v2];
  }

LABEL_5:
  int v3 = [*(id *)(a1 + 32) hasAcknowledgedLatestGDPRBlock];
  char v4 = v3[2]();

  id v5 = *(void **)(a1 + 32);
  if (v4)
  {
    if (![v5 isSetup])
    {
      [*(id *)(a1 + 32) createBagIfNecessary];
      uint64_t v6 = os_log_GKGeneral;
      if (!os_log_GKGeneral)
      {
        id v7 = (id)GKOSLoggers();
        uint64_t v6 = os_log_GKGeneral;
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v17 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Setting up metrics", v17, 2u);
      }
      id v8 = [_TtC14GameDaemonCore17GKMetricsPipeline alloc];
      id v9 = [*(id *)(a1 + 32) bag];
      __int16 v10 = [(GKMetricsPipeline *)v8 initWithBag:v9];
      [*(id *)(a1 + 32) setMetricsPipeline:v10];

      id v11 = objc_alloc((Class)AMSMetrics);
      uint64_t v12 = [*(id *)(a1 + 32) bag];
      id v13 = [v11 initWithContainerID:@"com.apple.game-center-client" bag:v12];
      [*(id *)(a1 + 32) setMetrics:v13];

      long long v14 = [*(id *)(a1 + 32) metrics];
      [v14 setFlushTimerEnabled:1];

      return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
    }
  }
  else
  {
    [v5 tearDown];
  }
  v16 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);

  return v16();
}

void sub_100126BB8(id a1)
{
  uint64_t v1 = os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    id v2 = (id)GKOSLoggers();
    uint64_t v1 = os_log_GKGeneral;
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "Metrics event finished processing", v3, 2u);
  }
}

void sub_100126D3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    char v4 = [*(id *)(a1 + 32) metricsPipeline];
    [v4 processMultiplayerActivityEventWithMetricsFields:v3 hostAppBundleId:*(void *)(a1 + 40) completionHandler:&stru_1002DBD98];
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers();
    }
    uint64_t v6 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Not emitting MAF event", v7, 2u);
    }
  }
}

void sub_100126E08(id a1)
{
  if (!os_log_GKGeneral) {
    id v1 = (id)GKOSLoggers();
  }
  id v2 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "MAF event finished processing", v3, 2u);
  }
}

void sub_100127258(id a1)
{
  qword_100329910 = objc_alloc_init(GKContactsIntegrationController);

  _objc_release_x1();
}

void sub_1001277E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001277F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = [*(id *)(a1 + 48) context];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v3 isEligibleAllowingIneligibility:v2 usingSettings:v4 withContext:v5];
}

void sub_1001279E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) serialQueue];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100127A9C;
  v6[3] = &unk_1002D3C38;
  v6[4] = *(void *)(a1 + 32);
  id v7 = v3;
  id v5 = v3;
  dispatch_async(v4, v6);
}

id sub_100127A9C(uint64_t a1)
{
  return [*(id *)(a1 + 32) startContactsSyncAllowingChangeHistory:1 completion:*(void *)(a1 + 40)];
}

id sub_100127AAC(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) startIDSSyncWithCompletion:a2];
}

void sub_100128128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  objc_destroyWeak(v39);
  objc_destroyWeak(v40);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose((const void *)(v41 - 224), 8);
  _Block_object_dispose((const void *)(v41 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100128190(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1001281A8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001281B8(uint64_t a1)
{
}

void sub_1001281C0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = [*(id *)(a1 + 48) context];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v2 isEligibleAllowingIneligibility:8 usingSettings:v3 withContext:v4];

  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
  {
    id v5 = [*(id *)(a1 + 48) context];
    id v11 = +[GKCDContactInfoList _gkPrimaryListWithContext:v5];

    uint64_t v6 = [*(id *)(a1 + 32) migrator];
    id v7 = [*(id *)(a1 + 48) context];
    [v6 performMigrationsWithContext:v7 list:v11];

    uint64_t v8 = [v11 changeHistoryToken];
    uint64_t v9 = *(void *)(*(void *)(a1 + 64) + 8);
    __int16 v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;
  }
}

void sub_1001282E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v5 = [WeakRetained contactsBatchQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001283E8;
  block[3] = &unk_1002DBE30;
  objc_copyWeak(&v14, (id *)(a1 + 56));
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 40);
  id v7 = v6;
  uint64_t v13 = *(void *)(a1 + 48);
  id v10 = v7;
  id v11 = v3;
  id v8 = v3;
  dispatch_async(v5, block);

  objc_destroyWeak(&v14);
}

void sub_1001283E8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  uint64_t v2 = [WeakRetained contactStore];
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  uint64_t v4 = [WeakRetained playerProvider];
  [v2 _gkSyncContactsWithChangeHistoryToken:v3 playerProvider:v4 batchSize:[*(id *)(a1 + 32) localBatchFetchSize] changeHistoryLimit:[*(id *)(a1 + 32) localSyncLimit] cachedListVersion:*(*(__int16 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))]

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1001284B8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained setContactsUpdateGroup:0];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100128890(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) context];
  if ([*(id *)(a1 + 40) isEligibleAllowingIneligibility:*(void *)(a1 + 64) usingSettings:*(void *)(a1 + 48) withContext:v2])
  {
    uint64_t v3 = (char *)[*(id *)(a1 + 40) calculateRemainingIDSHandleQueryCountUsingSettings:*(void *)(a1 + 48) withContext:v2];
    uint64_t v4 = [[*(id *)(a1 + 40) expiredIDSEntriesWithFetchLimit:&v3[[(void)objc_msgSend(*(id *)(a1 + 48), "idsV2BatchFetchSize")] matchingHandles:0 usingSettings:*(void *)(a1 + 48) withContext:v2];
    if ([v4 count])
    {
      v20 = [v4 _gkMapDictionaryWithKeyPath:@"handle"];
      id v5 = [v20 allKeys];
      uint64_t v6 = +[NSPredicate predicateWithFormat:@"handle IN %@", v5];

      v19 = (void *)v6;
      id v7 = +[GKCDContactInfo _gkObjectsMatchingPredicate:v6 withContext:v2];
      id v8 = [v7 _gkDistinctValuesForKeyPath:@"handle"];

      uint64_t v9 = +[NSMutableSet setWithCapacity:](NSMutableSet, "setWithCapacity:", [v4 count]);
      char v10 = 0;
      if (![v4 count]) {
        goto LABEL_19;
      }
      unint64_t v11 = 0;
      do
      {
        uint64_t v12 = [v4 objectAtIndexedSubscript:v11];
        uint64_t v13 = [v12 handle];

        if ([v8 containsObject:v13])
        {
          if ([v9 count] >= v3) {
            char v10 = 1;
          }
          else {
            [v9 addObject:v13];
          }
        }
        else if ([v13 length])
        {
          id v14 = [v20 objectForKeyedSubscript:v13];
          [v2 deleteObject:v14];
        }
        ++v11;
      }
      while (v11 < (unint64_t)[v4 count]);
      if (((v3 == 0) & v10) != 0)
      {
        if (!os_log_GKGeneral) {
          id v15 = (id)GKOSLoggers();
        }
        if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG)) {
          sub_1001312DC();
        }
        [*(id *)(a1 + 40) updateIntervalHasFinishedExceedingIDSLimit:1 allowingIneligibility:*(void *)(a1 + 64) usingSettings:*(void *)(a1 + 48)];
        (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
      }
      else
      {
LABEL_19:
        objc_initWeak(&location, *(id *)(a1 + 40));
        uint64_t v16 = *(void *)(a1 + 64);
        v17 = *(void **)(a1 + 40);
        uint64_t v18 = *(void *)(a1 + 48);
        v21[0] = _NSConcreteStackBlock;
        v21[1] = 3221225472;
        v21[2] = sub_100128C44;
        v21[3] = &unk_1002DBE80;
        objc_copyWeak(v24, &location);
        char v25 = v10 & 1;
        v24[1] = *(id *)(a1 + 64);
        id v22 = *(id *)(a1 + 48);
        id v23 = *(id *)(a1 + 56);
        [v17 fetchIDSDataAndUpdateCacheForHandles:v9 allowingIneligibility:v16 usingSettings:v18 withDelay:1 completion:v21];

        objc_destroyWeak(v24);
        objc_destroyWeak(&location);
      }
    }
    else
    {
      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    }
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_100128C28(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_100128C44(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (!a2 && *(unsigned char *)(a1 + 64)) {
    [WeakRetained updateIntervalHasFinishedExceedingIDSLimit:1 allowingIneligibility:*(void *)(a1 + 56) usingSettings:*(void *)(a1 + 32)];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100128E74(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  id v7 = *(void **)(a1 + 40);
  uint64_t v12 = a3;
  id v8 = a2;
  uint64_t v9 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v7 isEligibleAllowingIneligibility:v5 usingSettings:v6 withContext:v8]);
  [*(id *)(a1 + 32) setObject:v9 forKeyedSubscript:@"isEligible"];

  char v10 = +[GKCDIDSInfoList _gkPrimaryListWithContext:v8];

  unint64_t v11 = [v10 updateIntervalStartTimeStamp];
  [*(id *)(a1 + 32) setObject:v11 forKeyedSubscript:@"updateIntervalStartTime"];

  v12[2]();
}

void sub_100128F7C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"isEligible"];
  unsigned __int8 v3 = [v2 BOOLValue];

  uint64_t v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"updateIntervalStartTime"];
  uint64_t v5 = (void *)v4;
  if (v3)
  {
    if (v4)
    {
      uint64_t v6 = +[NSDate date];
      [v6 timeIntervalSinceDate:v5];
      double v8 = v7;
      uint64_t v9 = [*(id *)(a1 + 40) settings];
      [v9 idsUpdateInterval];
      double v11 = v10 - v8;

      double v12 = 0.0;
      if (v11 >= 0.0) {
        double v12 = v11;
      }
      [*(id *)(a1 + 40) setupIDSCacheUpdateTimerWithStartTime:v12];
    }
    else
    {
      if (!os_log_GKGeneral) {
        id v14 = (id)GKOSLoggers();
      }
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
        sub_100131344();
      }
    }
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v13 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG)) {
      sub_100131378();
    }
    [*(id *)(a1 + 40) stopCacheUpdates];
  }
}

void sub_100129634(uint64_t a1)
{
  unsigned __int8 v2 = [*(id *)(a1 + 32) isAlreadyWaitingOnLimitTimer];
  unsigned __int8 v3 = [*(id *)(a1 + 32) playerProvider];
  uint64_t v4 = [v3 localPlayerCacheGroup];

  uint64_t v5 = [*(id *)(a1 + 32) settings];
  objc_initWeak(&location, *(id *)(a1 + 32));
  uint64_t v36 = 0;
  v37 = &v36;
  uint64_t v38 = 0x3032000000;
  v39 = sub_1001281A8;
  v40 = sub_1001281B8;
  id v41 = 0;
  uint64_t v32 = 0;
  v33 = &v32;
  uint64_t v34 = 0x2020000000;
  char v35 = 0;
  uint64_t v6 = [v4 context];
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_100129A9C;
  v22[3] = &unk_1002DBEA8;
  objc_copyWeak(&v29, &location);
  char v30 = *(unsigned char *)(a1 + 56);
  v27 = &v36;
  id v23 = *(id *)(a1 + 40);
  unsigned __int8 v31 = v2;
  id v7 = v5;
  id v24 = v7;
  id v8 = v4;
  id v25 = v8;
  id v26 = *(id *)(a1 + 48);
  v28 = &v32;
  [v6 performBlockAndWait:v22];

  if (!*((unsigned char *)v33 + 24))
  {
    if (*(unsigned char *)(a1 + 56) || ([*(id *)(a1 + 32) canSyncWithIDS] & 1) != 0)
    {
      uint64_t v9 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKContactsIntegrationController.m", 552, "-[GKContactsIntegrationController syncIDSDataForHandles:forcefully:completion:]_block_invoke");
      double v10 = +[GKDispatchGroup dispatchGroupWithName:v9];

      [v10 enter];
      double v11 = *(void **)(a1 + 32);
      uint64_t v12 = v37[5];
      id v13 = [v11 settings];
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_100129C60;
      v20[3] = &unk_1002DAB88;
      id v14 = v10;
      id v21 = v14;
      [v11 fetchIDSDataAndUpdateCacheForHandles:v12 allowingIneligibility:0 usingSettings:v13 withDelay:1 completion:v20];

      if ([v14 waitWithTimeout:60.0])
      {
        if (!os_log_GKGeneral) {
          id v15 = (id)GKOSLoggers();
        }
        if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
          sub_1001315D0();
        }
        uint64_t v16 = [v14 error];

        if (!v16)
        {
          v17 = +[NSError errorWithDomain:GKContactsIntegrationErrorDomain code:9 userInfo:0];
          [v14 setError:v17];
        }
      }
      uint64_t v18 = *(void *)(a1 + 48);
      v19 = [v14 error];
      (*(void (**)(uint64_t, void *))(v18 + 16))(v18, v19);
    }
    else
    {
      id v14 = +[NSError errorWithDomain:GKContactsIntegrationErrorDomain code:7 userInfo:0];
      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    }
  }
  objc_destroyWeak(&v29);
  _Block_object_dispose(&v32, 8);
  _Block_object_dispose(&v36, 8);

  objc_destroyWeak(&location);
}

void sub_100129A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  objc_destroyWeak(v30);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v31 - 152), 8);
  objc_destroyWeak((id *)(v31 - 104));
  _Unwind_Resume(a1);
}

void sub_100129A9C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(unsigned char *)(a1 + 88))
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), *(id *)(a1 + 32));
  }
  else
  {
    uint64_t v8 = *(unsigned __int8 *)(a1 + 89);
    uint64_t v9 = *(void *)(a1 + 40);
    double v10 = [*(id *)(a1 + 48) context];
    id v14 = 0;
    uint64_t v11 = [WeakRetained handlesExcludingNoneExpiredFromHandles:v3 isAlreadyWaitingOnLimitTimer:v8 settings:v9 moc:v10 error:&v14];
    id v7 = v14;
    uint64_t v12 = *(void *)(*(void *)(a1 + 64) + 8);
    id v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;

    if (v7)
    {
      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
      *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
      goto LABEL_8;
    }
  }
  if (![*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) count])
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
    goto LABEL_10;
  }
  uint64_t v4 = [WeakRetained settings];
  uint64_t v5 = [*(id *)(a1 + 48) context];
  unsigned __int8 v6 = [WeakRetained isEligibleAllowingIneligibility:0 usingSettings:v4 withContext:v5];

  if ((v6 & 1) == 0)
  {
    id v7 = +[NSError errorWithDomain:GKContactsIntegrationErrorDomain code:1 userInfo:0];
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
LABEL_8:
  }
LABEL_10:
}

id sub_100129C60(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setError:a2];
  uint64_t v3 = *(void **)(a1 + 32);

  return [v3 leave];
}

id sub_100129E84(uint64_t a1)
{
  LOBYTE(v2) = *(unsigned char *)(a1 + 104);
  return [*(id *)(a1 + 32) fetchIDSDataAndUpdateCacheForHandles:*(void *)(a1 + 40) rangeToFetch:*(void *)(a1 + 64) maxBatchSize:*(void *)(a1 + 72) numberOfHandlesLeft:*(void *)(a1 + 80) allowingIneligibility:*(void *)(a1 + 88) settings:*(void *)(a1 + 96) withDelay:*(void *)(a1 + 48) completion:v2];
}

void sub_10012A334(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_10012A358(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100131854();
    }
    if (!os_log_GKGeneral) {
      id v9 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG)) {
      sub_1001317E8();
    }
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else if ([v5 count])
  {
    if (!os_log_GKGeneral) {
      id v10 = (id)GKOSLoggers();
    }
    uint64_t v11 = (void *)os_log_GKContacts;
    if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG)) {
      sub_100131744(v11);
    }
    LOBYTE(v14) = *(unsigned char *)(a1 + 104);
    [WeakRetained handleIDSFetchResult:v5 handlesToQuery:*(void *)(a1 + 32) rangeToFetch:*(void *)(a1 + 64) maxBatchSize:*(void *)(a1 + 72) numberOfHandlesLeft:*(void *)(a1 + 80) allowingIneligibility:*(void *)(a1 + 88) settings:*(void *)(a1 + 96) withDelay:*(void *)(a1 + 40) completion:v14];
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v12 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100131710();
    }
    id v13 = +[NSError errorWithDomain:GKContactsIntegrationErrorDomain code:3 userInfo:0];
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_10012A774(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = objc_alloc_init(GKContactsCacheUpdateBatchStartCommand);
  id v8 = [(GKContactsCacheUpdateBatchStartCommand *)v7 executeWithContext:v5];
  if (v8)
  {
    if (!os_log_GKGeneral) {
      id v9 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG)) {
      sub_10013195C();
    }
    [*(id *)(a1 + 32) setObject:&__kCFBooleanTrue forKeyedSubscript:@"fetchingFinished"];
    [*(id *)(a1 + 32) setError:v8];
    v6[2](v6);
  }
  else
  {
    id v10 = +[GKCDIDSInfoList _gkPrimaryListWithContext:v5];
    uint64_t v11 = [v10 updateIntervalStartTimeStamp];

    if (!v11)
    {
      id v12 = +[NSDate date];
      [v10 setUpdateIntervalStartTimeStamp:v12];
    }
    id v13 = [v10 updateIntervalHandlesCount];
    uint64_t v14 = (char *)[v13 unsignedIntegerValue];

    id v15 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", &v14[(void)[*(id *)(a1 + 40) count]]);
    [v10 setUpdateIntervalHandlesCount:v15];

    if ([*(id *)(a1 + 48) isEligibleAllowingIneligibility:*(void *)(a1 + 64) usingSettings:*(void *)(a1 + 56) withContext:v5])
    {
      uint64_t v16 = [*(id *)(a1 + 40) allKeys];
      v17 = +[NSSet setWithArray:v16];

      uint64_t v18 = +[GKCDIDSInfo _gkObjectsMatchingHandles:v17 withContext:v5];
      v19 = [v18 _gkMapDictionaryWithKeyPath:@"handle"];

      if (os_log_is_debug_enabled(os_log_GKContacts)) {
        id v20 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:[*(id *)(a1 + 40) count]];
      }
      else {
        id v20 = 0;
      }
      id v22 = [v19 count];
      if (v22 != [*(id *)(a1 + 40) count])
      {
        if (!os_log_GKGeneral) {
          id v23 = (id)GKOSLoggers();
        }
        if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG)) {
          sub_1001318F4();
        }
      }
      id v24 = *(void **)(a1 + 40);
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472;
      v28[2] = sub_10012ABAC;
      v28[3] = &unk_1002DBF20;
      id v25 = v19;
      id v29 = v25;
      id v30 = v5;
      id v26 = v20;
      id v31 = v26;
      [v24 enumerateKeysAndObjectsUsingBlock:v28];
      if ([v26 count])
      {
        if (!os_log_GKGeneral) {
          id v27 = (id)GKOSLoggers();
        }
        if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG)) {
          sub_100131888();
        }
      }
      v6[2](v6);
    }
    else
    {
      if (!os_log_GKGeneral) {
        id v21 = (id)GKOSLoggers();
      }
      if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG)) {
        sub_100131928();
      }
      [*(id *)(a1 + 32) setObject:&__kCFBooleanTrue forKeyedSubscript:@"fetchingFinished"];
      v6[2](v6);
    }
  }
}

void sub_10012ABAC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [*(id *)(a1 + 32) objectForKeyedSubscript:v5];
  if (v7) {
    goto LABEL_6;
  }
  id v8 = [GKCDIDSInfo alloc];
  id v9 = +[GKCDIDSInfo entity];
  id v7 = [(GKCDIDSInfo *)v8 initWithEntity:v9 insertIntoManagedObjectContext:*(void *)(a1 + 40)];

  if (!os_log_GKGeneral) {
    id v10 = (id)GKOSLoggers();
  }
  if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG))
  {
    sub_100131990();
    if (!v7) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v7)
  {
LABEL_6:
    [(GKCDIDSInfo *)v7 _gkUpdateEntryWithHandle:v5 idsInfoResult:v6];
    uint64_t v11 = [v6 gameCenterData];
    [*(id *)(a1 + 48) setObject:v11 forKeyedSubscript:v5];
  }
LABEL_7:
}

void sub_10012ACCC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"fetchingFinished"];
  unsigned __int8 v3 = [v2 BOOLValue];

  if ((v3 & 1) != 0
    || ([*(id *)(a1 + 32) error], uint64_t v4 = objc_claimAutoreleasedReturnValue(), v4, v4))
  {
    uint64_t v5 = *(void *)(a1 + 64);
    id v17 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, id))(v5 + 16))(v5, v17);
  }
  else
  {
    [*(id *)(a1 + 40) idsBatchFetchDelayInterval];
    double v7 = v6;
    [*(id *)(a1 + 40) idsBatchFetchJitterInterval];
    uint32_t v9 = arc4random_uniform(v8);
    objc_initWeak(&location, *(id *)(a1 + 48));
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_10012B050;
    v23[3] = &unk_1002DBF48;
    objc_copyWeak(&v27, &location);
    long long v28 = *(_OWORD *)(a1 + 72);
    uint64_t v29 = *(void *)(a1 + 88);
    id v24 = *(id *)(a1 + 56);
    long long v30 = *(_OWORD *)(a1 + 96);
    id v25 = *(id *)(a1 + 40);
    char v31 = *(unsigned char *)(a1 + 112);
    id v26 = *(id *)(a1 + 64);
    id v10 = objc_retainBlock(v23);
    uint64_t v11 = v10;
    if (*(unsigned char *)(a1 + 112))
    {
      id v12 = [*(id *)(a1 + 48) idsFetchDelayTimer];
      [v12 cancel];

      id v13 = objc_alloc_init(GKContactsIntegrationTimer);
      [*(id *)(a1 + 48) setIdsFetchDelayTimer:v13];

      uint64_t v14 = [*(id *)(a1 + 48) idsFetchDelayTimer];
      dispatch_time_t v15 = dispatch_walltime(0, (uint64_t)((v7 + (double)v9) * 1000000000.0));
      uint64_t v16 = [*(id *)(a1 + 48) idsBatchQueue];
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_10012B0C4;
      v20[3] = &unk_1002DA498;
      objc_copyWeak(&v22, &location);
      id v21 = v11;
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = sub_10012B154;
      v18[3] = &unk_1002D3A20;
      id v19 = *(id *)(a1 + 64);
      [v14 startWithStartTime:v15 updateInterval:v16 queue:v20 updateBlock:v18 cancelBlock:1.84467441e19];

      objc_destroyWeak(&v22);
    }
    else
    {
      ((void (*)(void *))v10[2])(v10);
    }

    objc_destroyWeak(&v27);
    objc_destroyWeak(&location);
  }
}

void sub_10012B024(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void sub_10012B050(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  LOBYTE(v2) = *(unsigned char *)(a1 + 104);
  [WeakRetained fetchIDSDataAndUpdateCacheForHandles:*(void *)(a1 + 32) rangeToFetch:*(void *)(a1 + 80) + *(void *)(a1 + 64) maxBatchSize:*(void *)(a1 + 72) numberOfHandlesLeft:*(void *)(a1 + 80) allowingIneligibility:*(void *)(a1 + 88) - *(void *)(a1 + 80) settings:*(void *)(a1 + 40) withDelay:v2 completion:*(void *)(a1 + 48)];
}

void sub_10012B0C4(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers();
  }
  if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG)) {
    sub_1001319C4();
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  [WeakRetained setIdsFetchDelayTimer:0];
}

void sub_10012B154(uint64_t a1)
{
  id v2 = +[NSError errorWithDomain:GKContactsIntegrationErrorDomain code:4 userInfo:0];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  if (!os_log_GKGeneral) {
    id v3 = (id)GKOSLoggers();
  }
  if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG)) {
    sub_1001319F8();
  }
}

void sub_10012B4AC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) settings];
  if ([*(id *)(a1 + 32) isEligibleAllowingIneligibility:*(void *)(a1 + 56) usingSettings:v2])
  {
    id v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKContactsIntegrationController.m", 846, "-[GKContactsIntegrationController getRelationshipsForContacts:updateExistingContactEntries:completionHandler:]_block_invoke");
    uint64_t v4 = +[GKDispatchGroup dispatchGroupWithName:v3];

    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10012B648;
    v8[3] = &unk_1002DBFC0;
    uint64_t v5 = *(void **)(a1 + 40);
    v8[4] = *(void *)(a1 + 32);
    id v9 = v5;
    id v6 = *(id *)(a1 + 48);
    char v13 = *(unsigned char *)(a1 + 64);
    uint64_t v7 = *(void *)(a1 + 56);
    id v11 = v6;
    uint64_t v12 = v7;
    id v10 = v2;
    [v4 perform:v8];
    [v4 wait];
  }
  else
  {
    uint64_t v4 = +[NSError errorWithDomain:GKContactsIntegrationErrorDomain code:1 userInfo:0];
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_10012B648(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) contactStore];
  uint64_t v5 = [v4 _gkMeContact];
  id v6 = [v5 identifier];

  if ([*(id *)(a1 + 40) count] == (id)1
    && ([*(id *)(a1 + 40) firstObject],
        uint64_t v7 = objc_claimAutoreleasedReturnValue(),
        [v7 identifier],
        double v8 = objc_claimAutoreleasedReturnValue(),
        unsigned int v9 = [v8 isEqualToString:v6],
        v8,
        v7,
        v9))
  {
    uint64_t v10 = [*(id *)(a1 + 32) relationshipForMeContact];
    id v11 = (void *)v10;
    if (v10)
    {
      uint64_t v23 = v10;
      uint64_t v12 = +[NSArray arrayWithObjects:&v23 count:1];
    }
    else
    {
      uint64_t v12 = 0;
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    v3[2](v3);
  }
  else
  {
    objc_initWeak(&location, *(id *)(a1 + 32));
    char v13 = *(void **)(a1 + 32);
    BOOL v14 = *(unsigned char *)(a1 + 72) != 0;
    uint64_t v15 = *(void *)(a1 + 64);
    uint64_t v17 = *(void *)(a1 + 40);
    uint64_t v16 = *(void *)(a1 + 48);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_10012B8A8;
    v18[3] = &unk_1002DBF98;
    objc_copyWeak(&v21, &location);
    id v19 = *(id *)(a1 + 56);
    id v20 = v3;
    [v13 relationshipsForContacts:v17 updateExistingContactEntries:v14 allowingIneligibility:v15 usingSettings:v16 meContactID:v6 completionHandler:v18];

    objc_destroyWeak(&v21);
    objc_destroyWeak(&location);
  }
}

void sub_10012B884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10012B8A8(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7 = (id *)(a1 + 48);
  id v8 = a4;
  id v9 = a3;
  id v10 = a2;
  id WeakRetained = objc_loadWeakRetained(v7);
  id v11 = [WeakRetained metricsHandler];
  [v11 recordContactRelationshipsFromResults:v10];

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10012BB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10012BB90(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) context];
  id v6 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:v2];

  id v3 = [v6 contactsAssociationID];
  id v4 = [v3 length];
  if (v4)
  {
    uint64_t v5 = [v6 internalRepresentation];
  }
  else
  {
    uint64_t v5 = 0;
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v5);
  if (v4) {
}
  }

void sub_10012BF60(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) contactStore];
  uint64_t v3 = *(unsigned __int8 *)(a1 + 88);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  id v6 = [*(id *)(a1 + 56) context];
  uint64_t v7 = [v2 _gkSyncAndCollectHandlesForContacts:v4 updateExistingEntries:v3 meContactID:v5 context:v6];

  id v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 64);
  id v10 = [*(id *)(a1 + 56) context];
  id v11 = [v8 calculateRemainingIDSHandleQueryCountUsingSettings:v9 withContext:v10];

  if (v11 && !*(unsigned char *)(a1 + 89))
  {
    id v19 = *(void **)(a1 + 32);
    id v20 = [*(id *)(a1 + 64) idsV2FetchSize];
    uint64_t v21 = *(void *)(a1 + 64);
    id v22 = [*(id *)(a1 + 56) context];
    uint64_t v15 = [v19 expiredIDSEntriesWithFetchLimit:v20 matchingHandles:v7 usingSettings:v21 withContext:v22];

    if (!os_log_GKGeneral) {
      id v23 = (id)GKOSLoggers();
    }
    id v24 = (void *)os_log_GKContacts;
    if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG)) {
      sub_100131BF8(v24, v15);
    }
    id v25 = [v15 count];
    if (v25 >= v11) {
      id v26 = v11;
    }
    else {
      id v26 = v25;
    }
    uint64_t v18 = [v15 subarrayWithRange:0, v26];
    id v27 = [v18 _gkDistinctValuesForKeyPath:@"handle"];
    long long v28 = [*(id *)(a1 + 56) context];
    uint64_t v29 = +[GKCDContactInfoList _gkPrimaryListWithContext:v28];

    if (!os_log_GKGeneral) {
      id v30 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG)) {
      sub_100131B8C();
    }
    objc_initWeak(&location, *(id *)(a1 + 32));
    char v31 = *(void **)(a1 + 32);
    uint64_t v32 = *(void *)(a1 + 80);
    uint64_t v33 = *(void *)(a1 + 64);
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472;
    v34[2] = sub_10012C32C;
    v34[3] = &unk_1002DC010;
    objc_copyWeak(&v38, &location);
    v34[4] = *(void *)(a1 + 32);
    id v35 = v7;
    id v36 = *(id *)(a1 + 56);
    id v37 = *(id *)(a1 + 72);
    [v31 fetchIDSDataAndUpdateCacheForHandles:v27 allowingIneligibility:v32 usingSettings:v33 withDelay:0 completion:v34];

    objc_destroyWeak(&v38);
    objc_destroyWeak(&location);
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v12 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG)) {
      sub_100131B58();
    }
    char v13 = *(void **)(a1 + 32);
    BOOL v14 = [*(id *)(a1 + 56) context];
    uint64_t v15 = [v13 contactAssociationIDMapForHandles:v7 withContext:v14];

    uint64_t v16 = *(void **)(a1 + 32);
    uint64_t v17 = [*(id *)(a1 + 56) context];
    uint64_t v18 = [v16 relationshipsForHandles:v7 contactAssociationIDMap:v15 withContext:v17];

    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
}

void sub_10012C310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10012C32C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  uint64_t v3 = [WeakRetained playerProvider];
  uint64_t v4 = [v3 localPlayerCacheGroup];

  uint64_t v5 = [v4 context];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10012C444;
  v8[3] = &unk_1002D6CE8;
  id v6 = *(void **)(a1 + 40);
  v8[4] = *(void *)(a1 + 32);
  id v9 = v6;
  id v10 = *(id *)(a1 + 48);
  id v11 = WeakRetained;
  id v12 = v4;
  id v13 = *(id *)(a1 + 56);
  id v7 = v4;
  [v5 performBlock:v8];
}

void sub_10012C444(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = [*(id *)(a1 + 48) context];
  uint64_t v5 = [v2 contactAssociationIDMapForHandles:v3 withContext:v4];

  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = *(void **)(a1 + 56);
  id v8 = [*(id *)(a1 + 64) context];
  id v9 = [v7 relationshipsForHandles:v6 contactAssociationIDMap:v5 withContext:v8];

  if (!os_log_GKGeneral) {
    id v10 = (id)GKOSLoggers();
  }
  id v11 = (void *)os_log_GKContacts;
  if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG)) {
    sub_100131CB4(v11);
  }
  (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
}

id sub_10012C628(uint64_t a1)
{
  return [*(id *)(a1 + 32) startContactsSyncAllowingChangeHistory:0 completion:0];
}

void sub_10012C6C0(uint64_t a1)
{
  objc_initWeak(&location, *(id *)(a1 + 32));
  id v2 = [*(id *)(a1 + 32) contactsChangedCoalescingTimer];
  [v2 cancel];

  uint64_t v3 = objc_alloc_init(GKContactsIntegrationTimer);
  [*(id *)(a1 + 32) setContactsChangedCoalescingTimer:v3];

  uint64_t v4 = [*(id *)(a1 + 32) contactsChangedCoalescingTimer];
  uint64_t v5 = [*(id *)(a1 + 32) settings];
  [v5 notificationCoalescingWaitTime];
  dispatch_time_t v7 = dispatch_walltime(0, (uint64_t)(v6 * 1000000000.0));
  id v8 = [*(id *)(a1 + 32) serialQueue];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10012C840;
  v9[3] = &unk_1002DC060;
  objc_copyWeak(&v10, &location);
  [v4 startWithStartTime:v7 updateInterval:v8 queue:v9 updateBlock:0 cancelBlock:1.84467441e19];

  objc_destroyWeak(&v10);
  objc_destroyWeak(&location);
}

void sub_10012C81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10012C840(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers();
  }
  if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG)) {
    sub_100131D8C();
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained startContactsSyncAllowingChangeHistory:1 completion:0];
  [WeakRetained setContactsChangedCoalescingTimer:0];
}

void sub_10012C980(uint64_t a1)
{
  objc_initWeak(&location, *(id *)(a1 + 32));
  id v2 = [*(id *)(a1 + 32) reachabilityChangedCoalescingTimer];
  [v2 cancel];

  uint64_t v3 = objc_alloc_init(GKContactsIntegrationTimer);
  [*(id *)(a1 + 32) setReachabilityChangedCoalescingTimer:v3];

  uint64_t v4 = [*(id *)(a1 + 32) reachabilityChangedCoalescingTimer];
  uint64_t v5 = [*(id *)(a1 + 32) settings];
  [v5 notificationCoalescingWaitTime];
  dispatch_time_t v7 = dispatch_walltime(0, (uint64_t)(v6 * 1000000000.0));
  id v8 = [*(id *)(a1 + 32) serialQueue];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10012CB14;
  v9[3] = &unk_1002DB120;
  objc_copyWeak(&v11, &location);
  id v10 = *(id *)(a1 + 40);
  [v4 startWithStartTime:v7 updateInterval:v8 queue:v9 updateBlock:0 cancelBlock:1.84467441e19];

  objc_destroyWeak(&v11);
  objc_destroyWeak(&location);
}

void sub_10012CAF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10012CB14(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers();
  }
  if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG)) {
    sub_100131DC0();
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v4 = [*(id *)(a1 + 32) object];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && [v4 _gkCurrentReachabilityStatus]) {
    [WeakRetained handleReachabilityChanged];
  }
  [WeakRetained setContactsChangedCoalescingTimer:0];
}

void sub_10012CCE0(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) context];
  id v7 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:v1];

  if (([v7 expired] & 1) == 0)
  {
    id v2 = +[GKClientProxy gameCenterClient];
    uint64_t v3 = +[GKPlayerCredentialController sharedController];
    uint64_t v4 = [v7 contactsAssociationID];
    id v5 = [v7 contactsIntegrationConsent];
    double v6 = [v7 serviceLastUpdatedTimestamp];
    [v3 setContactAssociationID:v4 contactIntegrationConsent:v5 serviceLastUpdateTimestamp:v6 forEnvironment:[v2 environment] forcefully:0 completionHandler:&stru_1002DC080];
  }
}

void sub_10012CDF4(id a1, NSError *a2)
{
  id v2 = a2;
  if (!os_log_GKGeneral) {
    id v3 = (id)GKOSLoggers();
  }
  if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG)) {
    sub_100131E28();
  }
}

void sub_10012CF7C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100131F68();
    }
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG)) {
      sub_100131EFC();
    }
  }
  else if (![v5 count])
  {
    if (!os_log_GKGeneral) {
      id v9 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100131EC8();
    }
  }
  id v10 = [[GKContactsIntegrationControllerSettings alloc] initWithBagValues:v5];
  id v11 = [*(id *)(a1 + 32) settings];
  [v11 idsUpdateInterval];
  double v13 = v12;
  [(GKContactsIntegrationControllerSettings *)v10 idsUpdateInterval];
  double v15 = v14;

  [*(id *)(a1 + 32) setSettings:v10];
  if ([*(id *)(a1 + 32) isEligibleAllowingIneligibility:0 usingSettings:v10])
  {
    if (v13 == v15
      || ([*(id *)(a1 + 32) idsCacheUpdateTimer],
          uint64_t v16 = objc_claimAutoreleasedReturnValue(),
          v16,
          !v16))
    {
      [*(id *)(a1 + 32) startContactsSyncAllowingChangeHistory:0 completion:0];
    }
    else
    {
      uint64_t v17 = *(void **)(a1 + 32);
      uint64_t v18 = [v17 settings];
      [v18 idsUpdateInterval];
      [v17 setupIDSCacheUpdateTimerWithStartTime:];
    }
  }
  else
  {
    [*(id *)(a1 + 32) stopCacheUpdates];
  }
}

void sub_10012D48C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) canSyncWithIDS])
  {
    id v2 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKContactsIntegrationController.m", 1142, "-[GKContactsIntegrationController startIDSSyncWithCompletion:]_block_invoke");
    id v3 = +[GKDispatchGroup dispatchGroupWithName:v2];
    [*(id *)(a1 + 32) setIdsUpdateGroup:v3];

    objc_initWeak(&location, *(id *)(a1 + 32));
    uint64_t v4 = [*(id *)(a1 + 32) contactsUpdateGroup];

    [*(id *)(a1 + 32) idsUpdateGroup];
    if (v4) {
      id v5 = {;
    }
      id v6 = [*(id *)(a1 + 32) contactsUpdateGroup];
      id v7 = [*(id *)(a1 + 32) serialQueue];
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_10012D704;
      v14[3] = &unk_1002DA498;
      id v8 = &v16;
      objc_copyWeak(&v16, &location);
      id v15 = *(id *)(a1 + 40);
      [v5 join:v6 queue:v7 block:v14];
      id v9 = &v15;
    }
    else {
      id v5 = {;
    }
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_10012D890;
      v11[3] = &unk_1002DC0D0;
      id v8 = &v13;
      objc_copyWeak(&v13, &location);
      id v12 = *(id *)(a1 + 40);
      [v5 perform:v11];
      id v9 = &v12;
    }

    objc_destroyWeak(v8);
    objc_destroyWeak(&location);
  }
  else
  {
    id v10 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    v10();
  }
}

void sub_10012D6DC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_10012D704(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10012D7A4;
  v3[3] = &unk_1002D3C38;
  v3[4] = WeakRetained;
  id v4 = *(id *)(a1 + 32);
  [WeakRetained refetchIDSHandlesInPriorityOrderWithCompletion:v3];
}

void sub_10012D7A4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) serialQueue];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10012D848;
  v4[3] = &unk_1002D3C38;
  id v3 = *(void **)(a1 + 40);
  void v4[4] = *(void *)(a1 + 32);
  id v5 = v3;
  dispatch_async(v2, v4);
}

uint64_t sub_10012D848(uint64_t a1)
{
  [*(id *)(a1 + 32) setIdsUpdateGroup:0];
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v2();
}

void sub_10012D890(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10012D954;
  v6[3] = &unk_1002D9840;
  v6[4] = WeakRetained;
  id v7 = *(id *)(a1 + 32);
  id v8 = v3;
  id v5 = v3;
  [WeakRetained refetchIDSHandlesInPriorityOrderWithCompletion:v6];
}

void sub_10012D954(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) serialQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10012DA0C;
  block[3] = &unk_1002D9840;
  id v3 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  id v5 = v3;
  id v6 = *(id *)(a1 + 48);
  dispatch_async(v2, block);
}

uint64_t sub_10012DA0C(uint64_t a1)
{
  [*(id *)(a1 + 32) setIdsUpdateGroup:0];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);

  return v2();
}

id sub_10012DB34(uint64_t a1)
{
  return [*(id *)(a1 + 32) stopCacheUpdates];
}

void sub_10012DE08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10012DE2C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (!os_log_GKGeneral) {
    id v3 = (id)GKOSLoggers();
  }
  if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG)) {
    sub_1001320E0();
  }
  id v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKContactsIntegrationController.m", 1201, "-[GKContactsIntegrationController setupIDSCacheUpdateTimerWithStartTime:]_block_invoke");
  id v5 = +[GKDispatchGroup dispatchGroupWithName:v4];
  [*(id *)(a1 + 32) setIdsUpdateGroup:v5];

  objc_initWeak(&location, *(id *)(a1 + 32));
  id v6 = [*(id *)(a1 + 32) idsUpdateGroup];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10012E08C;
  v11[3] = &unk_1002DC0F8;
  objc_copyWeak(&v12, &location);
  [v6 perform:v11];

  id v7 = [*(id *)(a1 + 32) idsUpdateGroup];
  id v8 = [*(id *)(a1 + 32) serialQueue];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10012E0E8;
  v9[3] = &unk_1002DC060;
  objc_copyWeak(&v10, &location);
  [v7 notifyOnQueue:v8 block:v9];

  [WeakRetained setIdsCacheUpdateTimer:0];
  objc_destroyWeak(&v10);
  objc_destroyWeak(&v12);
  objc_destroyWeak(&location);
}

void sub_10012E050(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_10012E08C(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained refetchIDSHandlesInPriorityOrderWithCompletion:v3];
}

void sub_10012E0E8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setIdsUpdateGroup:0];
}

void sub_10012E12C(id a1)
{
  if (!os_log_GKGeneral) {
    id v1 = (id)GKOSLoggers();
  }
  if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG)) {
    sub_100132114();
  }
}

id sub_10012E378(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) idsFetchDelayTimer];
  [v2 cancel];

  id v3 = *(void **)(a1 + 32);

  return [v3 setIdsFetchDelayTimer:0];
}

void sub_10012E520(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  [v2 stopCacheUpdates];
  v3[2]();
}

void sub_10012E57C(id a1, NSManagedObjectContext *a2, id a3)
{
  id v5 = (void (**)(void))a3;
  id v4 = a2;
  [(NSManagedObjectContext *)v4 _gkClearAllEntriesOfEntity:@"ContactInfo"];
  [(NSManagedObjectContext *)v4 _gkClearAllEntriesOfEntity:@"ContactInfoList"];
  [(NSManagedObjectContext *)v4 _gkClearAllEntriesOfEntity:@"IDSInfo"];
  [(NSManagedObjectContext *)v4 _gkClearAllEntriesOfEntity:@"IDSInfoList"];

  v5[2]();
}

uint64_t sub_10012E618(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10012EF78(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = a3;
  [v5 populateContactInfoForProfiles:v6 withContext:a2];
  dispatch_async(*(dispatch_queue_t *)(a1 + 48), *(dispatch_block_t *)(a1 + 56));
  v7[2]();
}

id sub_10012FEC4(uint64_t a1)
{
  return [*(id *)(a1 + 32) startContactsSyncAllowingChangeHistory:0 completion:0];
}

void sub_100130DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100130E14(id *a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    id v5 = (void *)os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
      sub_100132710((uint64_t)a1, v5, (uint64_t)v3);
    }
    [a1[5] setError:v3];
    [a1[5] leave];
  }
  else
  {
    id WeakRetained = objc_loadWeakRetained(a1 + 6);
    id v7 = [WeakRetained playerProvider];
    id v8 = [v7 localPlayerCacheGroup];

    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100130F68;
    v9[3] = &unk_1002D4078;
    id v10 = a1[4];
    id v11 = a1[5];
    [v8 performOnManagedObjectContext:v9];
  }
}

void sub_100130F68(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v21 = a3;
  id v5 = +[GKCDIDSInfo _gkObjectsMatchingHandles:*(void *)(a1 + 32) withContext:a2];
  uint64_t v6 = +[NSMutableArray array];
  id v7 = +[NSMutableArray array];
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v8 = v5;
  id v9 = [v8 countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v23;
    while (2)
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(void *)v23 != v11) {
          objc_enumerationMutation(v8);
        }
        id v13 = *(void **)(*((void *)&v22 + 1) + 8 * i);
        double v14 = [v13 handle];

        if (!v14)
        {
          if (!os_log_GKGeneral) {
            id v19 = (id)GKOSLoggers();
          }
          if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
            sub_1001327C0();
          }
          id v20 = +[NSError errorWithDomain:GKContactsIntegrationErrorDomain code:8 userInfo:0];
          [*(id *)(a1 + 40) setError:v20];

          goto LABEL_18;
        }
        id v15 = [v13 supportsMessageTransportV2];
        id v16 = [v15 integerValue];

        uint64_t v17 = [v13 handle];
        if (v16 == (id)1) {
          uint64_t v18 = v6;
        }
        else {
          uint64_t v18 = v7;
        }
        [v18 addObject:v17];
      }
      id v10 = [v8 countByEnumeratingWithState:&v22 objects:v26 count:16];
      if (v10) {
        continue;
      }
      break;
    }
  }
LABEL_18:

  [*(id *)(a1 + 40) setObject:v6 forKeyedSubscript:@"availablePlayerHandles"];
  [*(id *)(a1 + 40) setObject:v7 forKeyedSubscript:@"unavailablePlayerHandles"];
  [*(id *)(a1 + 40) leave];
  v21[2](v21);
}

void sub_1001311D8()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "Will not perform contacts sync due to eligibility state", v2, v3, v4, v5, v6);
}

void sub_10013120C()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "Syncing contacts", v2, v3, v4, v5, v6);
}

void sub_100131240()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "Will not perform contacts sync since a change history token exists", v2, v3, v4, v5, v6);
}

void sub_100131274()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "Contacts sync already in progress, skipping.", v2, v3, v4, v5, v6);
}

void sub_1001312A8()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "IDS refetch beginning", v2, v3, v4, v5, v6);
}

void sub_1001312DC()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "We have already synced the max count of handles for IDS during this interval. Skipping.", v2, v3, v4, v5, v6);
}

void sub_100131310()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "No additional IDS handles to query. Stopping any existing timers.", v2, v3, v4, v5, v6);
}

void sub_100131344()
{
  sub_100010D10();
  sub_100010D34((void *)&_mh_execute_header, v0, v1, "Attempting to setup a timer but we don't have a current interval start time.", v2, v3, v4, v5, v6);
}

void sub_100131378()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "No longer eligible for cache updates, will not setup timer.", v2, v3, v4, v5, v6);
}

void sub_1001313AC()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "Will not fetch handles for contact since cache updates are busy or IDS limit breached.", v2, v3, v4, v5, v6);
}

void sub_1001313E0(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = +[NSNumber numberWithUnsignedInteger:a2];
  sub_100011064();
  sub_100011B94((void *)&_mh_execute_header, v5, v6, "IDS limit reached, limiting fetch size to: %@", v7, v8, v9, v10, v11);
}

void sub_100131488(void *a1)
{
  id v2 = a1;
  sub_100010D64();
  id v3 = [sub_1000172C4() numberWithUnsignedInteger:];
  sub_100011064();
  sub_100011B94((void *)&_mh_execute_header, v4, v5, "None expired handles excluded, fetch count: %@", v6, v7, v8, v9, v10);
}

void sub_10013152C(void *a1)
{
  id v2 = a1;
  sub_100010D64();
  id v3 = [sub_1000172C4() numberWithUnsignedInteger:];
  sub_100011064();
  sub_100011B94((void *)&_mh_execute_header, v4, v5, "Existing matching entries count: %@", v6, v7, v8, v9, v10);
}

void sub_1001315D0()
{
  sub_100010D10();
  sub_100010D34((void *)&_mh_execute_header, v0, v1, "Timeout waiting for handle sync to complete.", v2, v3, v4, v5, v6);
}

void sub_100131604()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "Will not fetch handles with IDS since batch size is currently 0", v2, v3, v4, v5, v6);
}

void sub_100131638(void *a1)
{
  id v2 = a1;
  sub_100010D64();
  uint64_t v3 = [[(id)sub_1000172C4() numberWithUnsignedInteger:];
  sub_100011064();
  sub_100011B94((void *)&_mh_execute_header, v4, v5, "Beginning fetches with IDS with a handle count of: %@", v6, v7, v8, v9, v10);
}

void sub_1001316DC()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "IDS fetching stopping since we have reached the of end of all batches", v2, v3, v4, v5, v6);
}

void sub_100131710()
{
  sub_100010D10();
  sub_100010D34((void *)&_mh_execute_header, v0, v1, "No results found for IDS request.", v2, v3, v4, v5, v6);
}

void sub_100131744(void *a1)
{
  id v2 = a1;
  sub_100010D64();
  uint64_t v3 = [[(id)sub_1000172C4() numberWithUnsignedInteger:];
  sub_100011064();
  sub_100011B94((void *)&_mh_execute_header, v4, v5, "Will handle updating batch results with count: %@", v6, v7, v8, v9, v10);
}

void sub_1001317E8()
{
  sub_100011064();
  sub_1000179A0((void *)&_mh_execute_header, v0, v1, "IDS fetch error: %@", v2);
}

void sub_100131854()
{
  sub_100010D10();
  sub_100010D34((void *)&_mh_execute_header, v0, v1, "Error retrieving batch of IDS results", v2, v3, v4, v5, v6);
}

void sub_100131888()
{
  sub_100011064();
  sub_1000179A0((void *)&_mh_execute_header, v0, v1, "Updated with results: %@", v2);
}

void sub_1001318F4()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "Not all fetched IDS entries match what is cached.", v2, v3, v4, v5, v6);
}

void sub_100131928()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "Eligibility changed while performing a batch update interval. Will not continue.", v2, v3, v4, v5, v6);
}

void sub_10013195C()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "No contact list currently exist. Likely due to a clear cache event. Stopping.", v2, v3, v4, v5, v6);
}

void sub_100131990()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "Created a new GKCDIDSInfo entry as part of the fetching process.", v2, v3, v4, v5, v6);
}

void sub_1001319C4()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "IDS delay timer firing.", v2, v3, v4, v5, v6);
}

void sub_1001319F8()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "IDS delay timer stopped.", v2, v3, v4, v5, v6);
}

void sub_100131A2C(char a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1 & 1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Getting relationships for contact with updateExistingContactEntries: %d", (uint8_t *)v2, 8u);
}

void sub_100131AA8()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "Loading relationships for the me contact", v2, v3, v4, v5, v6);
}

void sub_100131ADC(char a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1 & 1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Proceeding to relationships for contact with updateExistingContactEntries: %d", (uint8_t *)v2, 8u);
}

void sub_100131B58()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "Will not fetch handles for contact since cache updates are busy or IDS limit breached", v2, v3, v4, v5, v6);
}

void sub_100131B8C()
{
  sub_100011064();
  sub_1000179A0((void *)&_mh_execute_header, v0, v1, "Currently cached contact list created if one didn't exist. %@", v2);
}

void sub_100131BF8(void *a1, void *a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [a2 count]);
  sub_100011064();
  sub_1000179A0((void *)&_mh_execute_header, v3, v5, "Expired handle count for contact: %@", v6);
}

void sub_100131CB4(void *a1)
{
  id v2 = a1;
  sub_100010D64();
  uint64_t v3 = [[sub_1000172C4() numberWithUnsignedInteger:];
  sub_100011064();
  sub_100011B94((void *)&_mh_execute_header, v4, v5, "Found relationship with count: %@", v6, v7, v8, v9, v10);
}

void sub_100131D58()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "Received player authenticated changed notification.", v2, v3, v4, v5, v6);
}

void sub_100131D8C()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "Firing contacts changed coalescing timer.", v2, v3, v4, v5, v6);
}

void sub_100131DC0()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "Firing reachability changed coalescing timer.", v2, v3, v4, v5, v6);
}

void sub_100131DF4()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "Handling reachability notification", v2, v3, v4, v5, v6);
}

void sub_100131E28()
{
  sub_100011064();
  sub_1000179A0((void *)&_mh_execute_header, v0, v1, "Attempted to update contacts integration info credentials as part of reachability. error: %@", v2);
}

void sub_100131E94()
{
  sub_100010D10();
  sub_100010D34((void *)&_mh_execute_header, v0, v1, "No store bag found after receiving update notification.", v2, v3, v4, v5, v6);
}

void sub_100131EC8()
{
  sub_100010D10();
  sub_100010D34((void *)&_mh_execute_header, v0, v1, "No values found while retrieving bag key values for contacts integration", v2, v3, v4, v5, v6);
}

void sub_100131EFC()
{
  sub_100011064();
  sub_1000179A0((void *)&_mh_execute_header, v0, v1, "Bag fetch error: %@", v2);
}

void sub_100131F68()
{
  sub_100010D10();
  sub_100010D34((void *)&_mh_execute_header, v0, v1, "Error retrieving bag key values for contacts integration", v2, v3, v4, v5, v6);
}

void sub_100131F9C()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "Cache update timer already setup, will not trigger another update now.", v2, v3, v4, v5, v6);
}

void sub_100131FD0()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "Cache updates already in progress, skipping.", v2, v3, v4, v5, v6);
}

void sub_100132004()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "Will begin cache updates.", v2, v3, v4, v5, v6);
}

void sub_100132038()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "Will stop cache updates.", v2, v3, v4, v5, v6);
}

void sub_10013206C(NSObject *a1, double a2, uint64_t a3, uint64_t a4)
{
  int v4 = 134217984;
  double v5 = a2;
  sub_1000179A0((void *)&_mh_execute_header, a1, a4, "Setting up a one time IDS timer with startTime: %f", (uint8_t *)&v4);
}

void sub_1001320E0()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "IDS timer is firing", v2, v3, v4, v5, v6);
}

void sub_100132114()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "IDS timer stopped", v2, v3, v4, v5, v6);
}

void sub_100132148()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "No contact association IDs were provided.", v2, v3, v4, v5, v6);
}

void sub_10013217C()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "No friends found matching the provided contact associationIDs", v2, v3, v4, v5, v6);
}

void sub_1001321B0()
{
  sub_100010D10();
  sub_100010D34((void *)&_mh_execute_header, v0, v1, "No profiles found matching the provided friend IDs", v2, v3, v4, v5, v6);
}

void sub_1001321E4()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "Attempting to populate contact info without any profiles.", v2, v3, v4, v5, v6);
}

void sub_100132218()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "Attempting to populate contact info for the local player. Skipping.", v2, v3, v4, v5, v6);
}

void sub_10013224C(void *a1)
{
  id v2 = a1;
  sub_100010D64();
  uint64_t v3 = [[(id)sub_1000172C4() numberWithUnsignedInteger:];
  sub_100011064();
  sub_100011B94((void *)&_mh_execute_header, v4, v5, "Will attempt to populate contact info for %@ profiles", v6, v7, v8, v9, v10);
}

void sub_1001322F0()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "Will not populate profiles since the feature is not supported.", v2, v3, v4, v5, v6);
}

void sub_100132324()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "No contacts found matching the provided contact IDs.", v2, v3, v4, v5, v6);
}

void sub_100132358()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "Will not filter handles since the feature is not supported.", v2, v3, v4, v5, v6);
}

void sub_10013238C()
{
  sub_100011064();
  sub_1000179A0((void *)&_mh_execute_header, v0, v1, "Received callback that connection manager is ready: %@", v2);
}

void sub_1001323F8()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "No old friend entries to check against, will not update new friends list.", v2, v3, v4, v5, v6);
}

void sub_10013242C()
{
  sub_100010D10();
  sub_100011B2C((void *)&_mh_execute_header, v0, v1, "No contact association IDs to clear, skipping.", v2, v3, v4, v5, v6);
}

void sub_100132460()
{
  sub_100011064();
  sub_1000179A0((void *)&_mh_execute_header, v0, v1, "Batch delete error: %@", v2);
}

void sub_1001324CC()
{
  sub_100010D10();
  sub_100010D34((void *)&_mh_execute_header, v0, v1, "Failed to remove existing contacts entries.", v2, v3, v4, v5, v6);
}

void sub_100132500()
{
  sub_100011064();
  sub_1000179A0((void *)&_mh_execute_header, v0, v1, "Will clear the following contact association IDs: %@", v2);
}

void sub_10013256C(void *a1, void *a2, void *a3)
{
  uint64_t v5 = a1;
  [a2 count];
  uint8_t v6 = [sub_1000172C4() numberWithUnsignedInteger:];
  uint64_t v7 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [a3 count]);
  int v8 = 138412546;
  uint64_t v9 = v6;
  __int16 v10 = 2112;
  uint8_t v11 = v7;
  _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Failed to convert unprefixedHandles(count: %@) to ids handles(converted: %@).", (uint8_t *)&v8, 0x16u);
}

void sub_10013266C(void *a1, void *a2, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 138412546;
  *(void *)(buf + 4) = a1;
  *((_WORD *)buf + 6) = 2112;
  *(void *)(buf + 14) = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Done waiting for message v2 query. Available handles: %@, Unavailable handles: %@", buf, 0x16u);
}

void sub_1001326DC()
{
  sub_100010D10();
  sub_100010D34((void *)&_mh_execute_header, v0, v1, "Timeout waiting for handle fetch to complete.", v2, v3, v4, v5, v6);
}

void sub_100132710(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = a2;
  [v4 count];
  sub_100011064();
  __int16 v7 = 2112;
  uint64_t v8 = a3;
  _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Failed to sync %lu handles due to %@", v6, 0x16u);
}

void sub_1001327C0()
{
  sub_100010D10();
  sub_100010D34((void *)&_mh_execute_header, v0, v1, "Corrupted contact found in cache.", v2, v3, v4, v5, v6);
}

void sub_1001330D4(void *a1, void *a2)
{
  uint64_t v3 = a1;
  int v4 = 134217984;
  id v5 = [a2 status];
  _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Unrecognized IDS status value: %ld", (uint8_t *)&v4, 0xCu);
}

void sub_100133170(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Received unrecognized IDS status", v1, 2u);
}

void sub_1001331B4(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Received an unrecognized consent value from IDS.", v1, 2u);
}

void sub_1001336AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100133750;
  v7[3] = &unk_1002D3A20;
  id v8 = v3;
  id v6 = v3;
  [v5 beginTransaction:v4 completion:v7];
}

uint64_t sub_100133750(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100133F30(uint64_t a1)
{
  uint64_t v4 = objc_alloc_init(GKContactsChangedClearCommand);
  uint64_t v2 = [*(id *)(a1 + 32) context];
  id v3 = [(GKContactsChangedClearCommand *)v4 executeWithContext:v2];
}

void sub_1001342DC(uint64_t a1)
{
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v16;
LABEL_3:
    uint64_t v6 = 0;
    while (1)
    {
      if (*(void *)v16 != v5) {
        objc_enumerationMutation(v2);
      }
      uint64_t v7 = *(void *)(*((void *)&v15 + 1) + 8 * v6);
      id v8 = [GKContactsChangedAddOrUpdateCommand alloc];
      uint64_t v9 = -[GKContactsChangedAddOrUpdateCommand initWithContact:meContactID:](v8, "initWithContact:meContactID:", v7, *(void *)(a1 + 40), (void)v15);
      __int16 v10 = *(void **)(a1 + 48);
      uint8_t v11 = [*(id *)(a1 + 56) context];
      [v10 addCommand:v9 withContext:v11];

      id v12 = [*(id *)(a1 + 48) error];

      if (v12) {
        break;
      }
      if (v4 == (id)++v6)
      {
        id v4 = [v2 countByEnumeratingWithState:&v15 objects:v19 count:16];
        if (v4) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:

    id v13 = *(void **)(a1 + 48);
    id v2 = [*(id *)(a1 + 56) context];
    id v14 = [v13 executeCommandsWithContext:v2];
  }
}

void sub_1001347D0()
{
  sub_100011030();
  sub_1000110B8((void *)&_mh_execute_header, v0, v1, "Will perform full sync due to fetch count result: %@, error: %@");
}

void sub_100134838()
{
  sub_100011030();
  sub_1000110B8((void *)&_mh_execute_header, v0, v1, "Will not perform sync due to change history result: %@, error: %@");
}

void sub_1001348A0(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Me contact error: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100134918()
{
  sub_100010D10();
  sub_100010D34((void *)&_mh_execute_header, v0, v1, "Error retrieving me contact for contact integration", v2, v3, v4, v5, v6);
}

void sub_10013494C(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Contacts enumeration error: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1001349C4()
{
  sub_100010D10();
  sub_100010D34((void *)&_mh_execute_header, v0, v1, "Error retrieving contacts for contact integration", v2, v3, v4, v5, v6);
}

void sub_1001349F8()
{
  sub_100010D10();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "No contactIDs to sync during this batch, skipping.", v1, 2u);
}

void sub_100134A38()
{
  sub_100011030();
  sub_1000110B8((void *)&_mh_execute_header, v0, v1, "Enumerator fetch failed with result: %@, error: %@");
}

void sub_100134AA0()
{
  sub_100010D10();
  sub_100010D34((void *)&_mh_execute_header, v0, v1, "Error retrieving enumerator for contact fetch request", v2, v3, v4, v5, v6);
}

void sub_100134AD4(uint8_t *a1, void *a2, void *a3, void *a4)
{
  uint64_t v7 = a2;
  id v8 = [a3 identifier];
  *(_DWORD *)a1 = 138412290;
  *a4 = v8;
  _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Manually grabbing the handles in memory since can be cached for the contact identifier: %@", a1, 0xCu);
}

void sub_100134FB4(id a1)
{
  v3[0] = @"gk-contactid-ids-update-interval-sec";
  v3[1] = @"gk-contactid-ids-v2-batch-fetch-size";
  v3[2] = @"gk-contactid-local-batch-fetch-size";
  v3[3] = @"gk-contactid-ids-v2-fetch-size";
  v3[4] = @"gk-contactid-ids-expiration-opted-in-sec";
  void v3[5] = @"gk-contactid-ids-expiration-opted-out-sec";
  v3[6] = @"gk-contactid-ids-expiration-not-set-sec";
  v3[7] = @"gk-contactid-ids-expiration-unknown-sec";
  v3[8] = @"gk-contactid-allow-updates";
  v3[9] = @"gk-contactid-ids-v2-batch-fetch-delay-sec";
  v3[10] = @"gk-contactid-ids-v2-batch-fetch-jitter-sec";
  v3[11] = @"gk-contactid-local-sync-limit";
  v3[12] = @"gk-contactid-allow-updates-without-friends";
  uint64_t v1 = +[NSArray arrayWithObjects:v3 count:13];
  uint64_t v2 = (void *)qword_100329920;
  qword_100329920 = v1;
}

void sub_100135CE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) contactsController];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100135DB0;
  v7[3] = &unk_1002D5270;
  uint64_t v5 = *(void *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v6 = v3;
  [v4 getRelationshipsForContacts:v5 updateExistingContactEntries:0 completionHandler:v7];
}

void sub_100135DB0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setObject:a2 forKeyedSubscript:@"relationships"];
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:@"contactAssociationIDMap"];

  id v7 = [*(id *)(a1 + 32) error];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

id sub_100135E50(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 handle];
  uint64_t v5 = [v4 lowercaseString];

  if ([v5 length] && objc_msgSend(*(id *)(a1 + 32), "containsObject:", v5)) {
    id v6 = v3;
  }
  else {
    id v6 = 0;
  }

  return v6;
}

void sub_1001361F4(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Received error attempting to get relationships for suggestions: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100136330(id a1)
{
  qword_100329930 = [[_TtC14GameDaemonCore10GKLRUCache alloc] initWithCapacity:3];

  _objc_release_x1();
}

void sub_1001368BC()
{
  sub_1001368B0();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Error %d when calling csops_audittoken to determine the application's ops status.", v1, 8u);
}

void sub_100136930()
{
  sub_1001368B0();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Error %d when calling csops_audittoken to determine the application's signing status.", v1, 8u);
}

void sub_1001369A4()
{
  sub_1001368B0();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Cache miss for signing status for pid-> %d", v1, 8u);
}

void sub_100136A18()
{
  sub_1001368B0();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Cache hit for signing status for pid-> %d", v1, 8u);
}

uint64_t sub_100136C10(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100136C20(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100136E0C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Resetting cached IDS list", v1, 2u);
}

void sub_1001370FC(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Contacts integration ineligible for reasons: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1001376C8(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Error writing new local player avatar image (%@) to image cache: %@", (uint8_t *)&v3, 0x16u);
}

void sub_100137750(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "error while creating cache directory:%@", (uint8_t *)&v2, 0xCu);
}

void sub_10013781C(id a1)
{
  uint64_t v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.GameKit.GKBulletin.sync", v3);
  int v2 = (void *)qword_100329940;
  qword_100329940 = (uint64_t)v1;
}

void sub_100137A24(id a1)
{
  v3[0] = &off_1002F23C0;
  v4[0] = objc_opt_class();
  v3[1] = &off_1002F23D8;
  v4[1] = objc_opt_class();
  v3[2] = &off_1002F23F0;
  v4[2] = objc_opt_class();
  v3[3] = &off_1002F2408;
  v4[3] = objc_opt_class();
  v3[4] = &off_1002F2420;
  void v4[4] = objc_opt_class();
  void v3[5] = &off_1002F2438;
  void v4[5] = objc_opt_class();
  v3[6] = &off_1002F2450;
  v4[6] = objc_opt_class();
  v3[7] = &off_1002F2468;
  v4[7] = objc_opt_class();
  v3[8] = &off_1002F2480;
  v4[8] = objc_opt_class();
  v3[9] = &off_1002F2498;
  v4[9] = objc_opt_class();
  v3[10] = &off_1002F24B0;
  v4[10] = objc_opt_class();
  v3[11] = &off_1002F24C8;
  v4[11] = objc_opt_class();
  v3[12] = &off_1002F24E0;
  v4[12] = objc_opt_class();
  void v3[13] = &off_1002F24F8;
  v4[13] = objc_opt_class();
  v3[14] = &off_1002F2510;
  v4[14] = objc_opt_class();
  v3[15] = &off_1002F2528;
  v4[15] = objc_opt_class();
  uint8_t v3[16] = &off_1002F2540;
  v4[16] = objc_opt_class();
  v3[17] = &off_1002F2558;
  v4[17] = objc_opt_class();
  v3[18] = &off_1002F2570;
  v4[18] = objc_opt_class();
  v3[19] = &off_1002F2588;
  v4[19] = objc_opt_class();
  v3[20] = &off_1002F25A0;
  v4[20] = objc_opt_class();
  v3[21] = &off_1002F25B8;
  v4[21] = objc_opt_class();
  v3[22] = &off_1002F25D0;
  v4[22] = objc_opt_class();
  v3[23] = &off_1002F25E8;
  v4[23] = objc_opt_class();
  v3[24] = &off_1002F2600;
  v4[24] = objc_opt_class();
  v3[25] = &off_1002F2618;
  v4[25] = objc_opt_class();
  v3[26] = &off_1002F2630;
  v4[26] = objc_opt_class();
  v3[27] = &off_1002F2648;
  v4[27] = objc_opt_class();
  v3[28] = &off_1002F2660;
  v4[28] = objc_opt_class();
  v3[29] = &off_1002F2678;
  v4[29] = objc_opt_class();
  v3[30] = &off_1002F2690;
  v4[30] = objc_opt_class();
  v3[31] = &off_1002F26A8;
  v4[31] = objc_opt_class();
  v3[32] = &off_1002F26C0;
  v4[32] = objc_opt_class();
  v3[33] = &off_1002F26D8;
  v4[33] = objc_opt_class();
  v3[34] = &off_1002F26F0;
  v4[34] = objc_opt_class();
  v3[35] = &off_1002F2708;
  v4[35] = objc_opt_class();
  uint64_t v1 = +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:36];
  int v2 = (void *)qword_100329950;
  qword_100329950 = v1;
}

void sub_100138CBC(uint64_t a1, void *a2)
{
  int v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (a2)
  {
    CFStringRef v6 = @"targetId";
    id v7 = a2;
    id v4 = a2;
    id v5 = +[NSDictionary dictionaryWithObjects:&v7 forKeys:&v6 count:1];
    [v2 reportMetricsForActionID:v3 withAdditionalFields:v5];
  }
  else
  {
    id v5 = 0;
    [v2 reportMetricsForActionID:v3 withAdditionalFields:0];
  }
}

void sub_1001391E4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v7)
  {
    if (!os_log_GKGeneral) {
      id v10 = (id)GKOSLoggers();
    }
    uint8_t v11 = (void *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100139E18(v11, v7);
    }
    id v12 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
  }
  else
  {
    id v12 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
  }
  v12();
}

void sub_100139C84(void *a1, uint64_t a2, const char *a3)
{
  id v4 = a1;
  id v5 = objc_opt_class();
  id v6 = v5;
  id v7 = NSStringFromSelector(a3);
  int v8 = 138412546;
  id v9 = v5;
  __int16 v10 = 2112;
  uint8_t v11 = v7;
  _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%@ doesn't implement %@; Will not load or process information in the bulletin",
    (uint8_t *)&v8,
    0x16u);
}

void sub_100139D5C(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error: No Action: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100139DD4(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Could not launch trampoline, action.appLaunchTrampolineURL is unexpectedly nil.", v1, 2u);
}

void sub_100139E18(void *a1, void *a2)
{
  uint64_t v3 = a1;
  id v4 = [a2 localizedDescription];
  int v5 = 138412290;
  id v6 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "invokeASCAppLaunchTrampoline failed with error: %@", (uint8_t *)&v5, 0xCu);
}

void sub_10013AAD8(void *a1, void *a2)
{
  uint64_t v3 = a1;
  id v4 = [a2 adamID];
  int v5 = [a2 bundleID];
  int v6 = 138412546;
  id v7 = v4;
  __int16 v8 = 2112;
  id v9 = v5;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Could not create appLaunchTrampolineURL with adamID: %@, bundleID: %@", (uint8_t *)&v6, 0x16u);
}

void sub_10013B108(uint64_t a1, void *a2, void *a3)
{
  int v5 = a3;
  id v6 = a2;
  id v8 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:v6];
  id v7 = [v8 playerID];
  +[GKCachingUtils ensureGameInGamesPlayed:v6 playerID:v7 bundleID:*(void *)(a1 + 32) gameDescriptor:*(void *)(a1 + 40) updateWidget:1];

  v5[2](v5);
}

void sub_10013B1CC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [*(id *)(a1 + 32) objectForKey:GKCacheInvialidationKey];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v8 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v15;
    uint64_t v11 = GKCacheInvialidationStoreBagKey;
    do
    {
      id v12 = 0;
      do
      {
        if (*(void *)v15 != v10) {
          objc_enumerationMutation(v7);
        }
        id v13 = [*(id *)(*((void *)&v14 + 1) + 8 * (void)v12) objectForKey:v11];
        +[GKSystemBulletin expireCachesForBagKey:v13 payload:*(void *)(a1 + 32) context:v5 group:*(void *)(a1 + 40)];

        id v12 = (char *)v12 + 1;
      }
      while (v9 != v12);
      id v9 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v9);
  }
  v6[2](v6);
}

void sub_10013B33C(void *a1, void *a2, void *a3)
{
  uint64_t v5 = a1[4];
  id v6 = a3;
  id v7 = a2;
  id v10 = +[GKPlayerProfileCacheObject playerProfileWithPlayerID:v5 inManagedObjectContext:v7];
  +[GKSystemBulletin expireFriendCodeDetails:a1[5] payload:a1[6] context:v7];

  uint64_t v8 = a1[6];
  id v9 = [v10 alias];
  +[GKSystemBulletin presentGameCenterInviteUpdate:v8 playerAlias:v9];

  v6[2](v6);
}

void sub_10013C188(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = *(void **)(a1 + 32);
  id v4 = *(void **)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10013C240;
  v7[3] = &unk_1002D3BC8;
  id v8 = v4;
  id v9 = v3;
  id v6 = v3;
  [v5 clearEntityCacheForBagKey:v8 completionHandler:v7];
}

void sub_10013C240(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    uint64_t v5 = os_log_GKCache;
    if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
      sub_10013DBF4(a1, (uint64_t)v3, v5);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10013C978(uint64_t a1)
{
  id v1 = +[GKService serviceWithTransport:0 forClient:*(void *)(a1 + 32) localPlayer:*(void *)(a1 + 40)];
  [v1 sendRefreshContentsForDataTypeToAllClientProxy:2];
}

void sub_10013CC28(uint64_t a1)
{
  v1[0] = _NSConcreteStackBlock;
  v1[1] = 3221225472;
  v1[2] = sub_10013CCB8;
  v1[3] = &unk_1002D3DF8;
  id v2 = *(id *)(a1 + 32);
  +[GKClientProxy enumerateClientsUsingBlock:v1];
}

void sub_10013CCB8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 relayPushNotification:v3];
  id v9 = [v4 currentMatchResponse];

  uint64_t v5 = v9;
  if (v9)
  {
    id v6 = [v9 relayPushes];
    if (v6)
    {
      id v7 = [v9 relayPushes];
      id v8 = [v7 mutableCopy];
    }
    else
    {
      id v8 = [objc_alloc((Class)NSMutableArray) initWithCapacity:0];
    }

    [v8 addObject:*(void *)(a1 + 32)];
    [v9 setRelayPushes:v8];

    uint64_t v5 = v9;
  }
}

void sub_10013CF70(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = a3;
  id v7 = a2;
  id v8 = +[GKPlayerProfileCacheObject playerProfileWithPlayerID:v5 inManagedObjectContext:v7];
  [v8 expire];
  id v9 = +[GKClientProxy gameCenterClient];
  id v10 = +[GKService serviceWithTransport:0 forClient:v9 localPlayer:0];
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v11 = +[NSArray arrayWithObjects:&v12 count:1];
  [v10 getProfilesForPlayerIDs:v11 handler:&stru_1002DC3A0];

  +[GKSystemBulletin expireGetPerGameFriendPlayerIDsCache:0 payload:*(void *)(a1 + 40) context:v7];
  v6[2](v6);
}

void sub_10013D0C8(id a1, NSArray *a2, NSError *a3)
{
  id v4 = [(NSArray *)a2 _gkMapDictionaryWithKeyPath:@"playerID"];
  uint64_t v3 = +[GKClientProxy foregroundClient];
  [v3 refreshContentsForDataType:6 userInfo:v4];
}

void sub_10013D560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10013D584(uint64_t a1, void *a2, unsigned char *a3)
{
  id v9 = a2;
  uint64_t v5 = [v9 currentMatchResponse];
  id v6 = [v5 rid];
  id v7 = [*(id *)(a1 + 32) matchID];
  unsigned int v8 = [v6 isEqualToString:v7];

  if (v8)
  {
    [v9 checkMatchStatus];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    *a3 = 1;
  }
}

void sub_10013DB04(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Invalid system push (%d)", (uint8_t *)v2, 8u);
}

void sub_10013DB7C(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Expiring caches for store bag key %@", (uint8_t *)&v2, 0xCu);
}

void sub_10013DBF4(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = 138412546;
  uint64_t v5 = v3;
  __int16 v6 = 2112;
  uint64_t v7 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Failed to clear entity cache for bagKey: %@, error: %@", (uint8_t *)&v4, 0x16u);
}

void sub_10013DC80(os_log_t log)
{
  *(_WORD *)id v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Profile Update Push Notification has no player.", v1, 2u);
}

void sub_10013E3E8(id a1, GKClientProxy *a2, BOOL *a3)
{
  uint64_t v5 = a2;
  uint64_t v3 = [(GKClientProxy *)v5 originalBundleIdentifier];
  int v4 = [v3 _gkSHA256Hash];

  if ([v4 isEqual:@"BKN3YPrkowJshOfzYN9kxtu/zEFYrAWOeXV3rzu9h1k="]) {
    [(GKClientProxy *)v5 refreshContentsForDataType:20 userInfo:0];
  }
}

void sub_100140010(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = [*(id *)(a1 + 32) gameDescriptor];
  uint64_t v5 = [v4 dictionaryForRequest];

  __int16 v6 = +[GKService serviceWithTransport:0 forClient:*(void *)(a1 + 40) localPlayer:0];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100140124;
  v10[3] = &unk_1002D5338;
  uint64_t v7 = *(void *)(a1 + 32);
  id v11 = v5;
  uint64_t v12 = v7;
  id v13 = *(id *)(a1 + 48);
  id v14 = v3;
  id v8 = v3;
  id v9 = v5;
  [v6 getCompatibilityMatrix:v9 handler:v10];
}

void sub_100140124(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers();
    }
    id v8 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100141298((uint64_t)v6, v8, v9, v10, v11, v12, v13, v14);
    }
    [*(id *)(a1 + 48) setError:v6];
  }
  else if ([v5 count])
  {
    if (!os_log_GKGeneral) {
      id v15 = (id)GKOSLoggers();
    }
    long long v16 = os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      long long v17 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      id v43 = v17;
      __int16 v44 = 2112;
      id v45 = v5;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "GKGameplayBulletin - checking compatibility for app %@, compatibility matrix = %@", buf, 0x16u);
    }
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    id v18 = v5;
    id v19 = [v18 countByEnumeratingWithState:&v37 objects:v41 count:16];
    if (v19)
    {
      id v20 = v19;
      uint64_t v21 = *(void *)v38;
LABEL_14:
      uint64_t v22 = 0;
      while (1)
      {
        if (*(void *)v38 != v21) {
          objc_enumerationMutation(v18);
        }
        long long v23 = *(void **)(*((void *)&v37 + 1) + 8 * v22);
        id v24 = +[GKGameDescriptor currentPlatform];
        if (v24 == [v23 platform]) {
          break;
        }
        if (v20 == (id)++v22)
        {
          id v20 = [v18 countByEnumeratingWithState:&v37 objects:v41 count:16];
          if (v20) {
            goto LABEL_14;
          }
          goto LABEL_20;
        }
      }
      if (!os_log_GKGeneral) {
        id v25 = (id)GKOSLoggers();
      }
      id v26 = (void *)os_log_GKTrace;
      if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
      {
        id v27 = v26;
        id v28 = +[GKGameDescriptor currentPlatform];
        *(_DWORD *)buf = 134218242;
        id v43 = v28;
        __int16 v44 = 2112;
        id v45 = v23;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "GKGameplayBulletin - found compatible game of this current platform (%ld). compatibleGame: %@", buf, 0x16u);
      }
      unsigned __int8 v29 = [*(id *)(a1 + 40) setInstalledGameLocationFor:v23 descriptor:*(void *)(a1 + 32)];

      if (v29) {
        goto LABEL_31;
      }
    }
    else
    {
LABEL_20:
    }
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472;
    v35[2] = sub_1001404DC;
    v35[3] = &unk_1002DC3E8;
    int8x16_t v34 = *(int8x16_t *)(a1 + 32);
    id v30 = (id)v34.i64[0];
    int8x16_t v36 = vextq_s8(v34, v34, 8uLL);
    [v18 enumerateObjectsUsingBlock:v35];
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v31 = (id)GKOSLoggers();
    }
    uint64_t v32 = os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      uint64_t v33 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      id v43 = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "GKGameplayBulletin - skip checking compatibility for app %@, since compatibility matrix is empty.", buf, 0xCu);
    }
  }
LABEL_31:
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

id sub_1001404DC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  id result = [*(id *)(a1 + 32) setInstalledGameLocationFor:a2 descriptor:*(void *)(a1 + 40)];
  *a4 = (_BYTE)result;
  return result;
}

void sub_100140510(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }
}

void sub_100140890(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100140948;
  v6[3] = &unk_1002D3DD0;
  v6[4] = v4;
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  id v5 = v3;
  [v4 determineGameLocationViaCompatibilityMatrixWithCompletionHandler:v6];
}

void sub_100140948(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    id v5 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100141304((uint64_t)v3, v5, v6, v7, v8, v9, v10, v11);
    }
    [*(id *)(a1 + 40) setError:v3];
    goto LABEL_26;
  }
  if ([*(id *)(a1 + 32) gameLocation] == 1)
  {
    if (!os_log_GKGeneral) {
      id v12 = (id)GKOSLoggers();
    }
    uint64_t v13 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      __int16 v23 = 0;
      uint64_t v14 = "determineGameLocationOnDeviceOrInStoreWithCompletionHandler - Compatible App Installed";
      id v15 = (uint8_t *)&v23;
LABEL_25:
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, v14, v15, 2u);
    }
  }
  else if ([*(id *)(a1 + 32) gameLocation] == 2)
  {
    if (!os_log_GKGeneral) {
      id v16 = (id)GKOSLoggers();
    }
    uint64_t v13 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      __int16 v22 = 0;
      uint64_t v14 = "determineGameLocationOnDeviceOrInStoreWithCompletionHandler - Compatible App In Store";
      id v15 = (uint8_t *)&v22;
      goto LABEL_25;
    }
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v17 = (id)GKOSLoggers();
    }
    id v18 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "determineGameLocationOnDeviceOrInStoreWithCompletionHandler - No compatible App Installed", buf, 2u);
    }
    if (!os_log_GKGeneral) {
      id v19 = (id)GKOSLoggers();
    }
    uint64_t v13 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      __int16 v20 = 0;
      uint64_t v14 = "No compatible app installed";
      id v15 = (uint8_t *)&v20;
      goto LABEL_25;
    }
  }
LABEL_26:
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48));
}

void sub_100140B64(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100140DDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[GKClientProxy gameCenterClient];
  id v5 = +[GKService serviceWithTransport:0 forClient:v4 localPlayer:0];
  uint64_t v6 = [*(id *)(a1 + 32) originatorPlayerID];
  uint64_t v13 = v6;
  uint64_t v7 = +[NSArray arrayWithObjects:&v13 count:1];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100140F40;
  v10[3] = &unk_1002D53D8;
  uint64_t v8 = *(void **)(a1 + 40);
  void v10[4] = *(void *)(a1 + 32);
  id v11 = v8;
  id v12 = v3;
  id v9 = v3;
  [v5 getProfilesForPlayerIDs:v7 handler:v10];
}

void sub_100140F40(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers();
    }
    uint64_t v8 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100141370((uint64_t)v6, v8, v9, v10, v11, v12, v13, v14);
    }
    [*(id *)(a1 + 40) setError:v6];
  }
  else
  {
    id v15 = [v5 lastObject];
    [*(id *)(a1 + 32) setOriginatorPlayer:v15];
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_100141010(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100141298(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100141304(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100141370(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100141C38(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers();
    }
    uint64_t v8 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100142144(a1, (uint64_t)v6, v8);
    }
  }
  else
  {
    uint64_t v9 = [v5 lastObject];
    uint64_t v10 = [v9 name];
    if (!v10)
    {
      uint64_t v10 = GKCopyLocalizedApplicationNameForDisplayIdentifier();
    }
    [*(id *)(a1 + 40) setGameName:v10];
  }
  uint64_t v11 = *(void *)(a1 + 48);
  if (v11) {
    (*(void (**)(uint64_t, id))(v11 + 16))(v11, v6);
  }
}

void sub_1001420CC(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "loadLocalizedGameNameForBundleID was called with no handler - returning -bundleID was:%@", (uint8_t *)&v2, 0xCu);
}

void sub_100142144(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = 138412546;
  uint64_t v5 = v3;
  __int16 v6 = 2112;
  uint64_t v7 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "loadLocalizedGameNameForBundleID (%@) - Error getting localized game name: %@", (uint8_t *)&v4, 0x16u);
}

void sub_100142320(id a1)
{
  qword_100329960 = (uint64_t)dispatch_queue_create("com.apple.GameKit.GKAcceptedInviteManager.sync", 0);

  _objc_release_x1();
}

id sub_10014263C(uint64_t a1)
{
  return [*(id *)(a1 + 32) addObject:*(void *)(a1 + 40)];
}

id sub_100142768(uint64_t a1)
{
  return [*(id *)(a1 + 32) insertObject:*(void *)(a1 + 40) atIndex:0];
}

void sub_100142910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100142928(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100142938(uint64_t a1)
{
}

void sub_100142940(uint64_t a1)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1001429FC;
  v7[3] = &unk_1002DA080;
  int v2 = *(void **)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v3 = [v2 indexOfObjectPassingTest:v7];
  if (v3 != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v4 = [*(id *)(a1 + 32) objectAtIndexedSubscript:v3];
    uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
    __int16 v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;
  }
}

uint64_t sub_1001429FC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  *a4 = result;
  return result;
}

void sub_100142BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100142BE0(uint64_t a1)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100142CAC;
  v8[3] = &unk_1002DA080;
  int v2 = *(void **)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  id v3 = [v2 indexOfObjectPassingTest:v8];
  if (v3 != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v4 = v3;
    uint64_t v5 = [*(id *)(a1 + 32) objectAtIndexedSubscript:v3];
    uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    [*(id *)(a1 + 32) removeObjectAtIndex:v4];
  }
}

uint64_t sub_100142CAC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  *a4 = result;
  return result;
}

id sub_100142EA4(uint64_t a1, void *a2)
{
  int v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 sessionToken];
  id v5 = [v3 isEqualToData:v4];

  return v5;
}

id sub_100143298(uint64_t a1, void *a2)
{
  id v3 = [a2 sessionToken];
  id v4 = [v3 isEqualToData:*(void *)(a1 + 32)];

  return v4;
}

id sub_1001433F8(uint64_t a1, void *a2)
{
  return [a2 isEqualToData:*(void *)(a1 + 32)];
}

id sub_100143528(uint64_t a1, void *a2)
{
  id v3 = [a2 matchID];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

id sub_100143804(uint64_t a1, void *a2)
{
  return _[a2 isCompatibleWithGameDescriptor:*(void *)(a1 + 32)];
}

id sub_100143A14(uint64_t a1, void *a2)
{
  return _[a2 isCompatibleWithGameDescriptor:*(void *)(a1 + 32)];
}

void sub_100143B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100143B20(uint64_t a1)
{
  v6.receiver = *(id *)(a1 + 32);
  v6.super_class = (Class)GKAcceptedInviteManager;
  int v2 = [super description];
  uint64_t v3 = [v2 stringByAppendingFormat:@"AcceptedInvites: \n\tMultiplayerInvites: %@ \n\tTurnBased: %@", *(void *)(*(void *)(a1 + 32) + 8), *(void *)(*(void *)(a1 + 32) + 24)];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_100143EDC(uint64_t a1, NSObject *a2)
{
  int v2 = 134217984;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Encountered an unsupported IDS URI type: %ld", (uint8_t *)&v2, 0xCu);
}

void sub_100144070(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers();
  }
  uint64_t v3 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "GKTurnBasedMultiplayerBulletin loadBulletinsForPushNotification:", buf, 2u);
  }
  uint64_t v4 = +[GKReporter reporter];
  uint64_t v5 = GKReporterDomainPushCount;
  [v4 reportEvent:GKReporterDomainPushCount type:GKReporterPushCountTurnBased];

  id v6 = [objc_alloc((Class)NSMutableArray) initWithCapacity:1];
  uint64_t v7 = +[GKClientProxy gameCenterClient];
  id v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKTurnBasedMultiplayerBulletin.m", 53, "+[GKTurnBasedMultiplayerBulletin loadBulletinsForPushNotification:withHandler:]_block_invoke");
  id v9 = +[GKDispatchGroup dispatchGroupWithName:v8];

  id v10 = [objc_alloc(*(Class *)(a1 + 48)) initWithPushNotification:*(void *)(a1 + 32)];
  uint64_t v11 = +[GKReporter reporter];
  uint64_t v12 = [v10 aggregateDictionaryKey];
  [v11 reportEvent:v5 type:v12];

  if ([v10 isPushForLocalPlayers])
  {
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    v26[2] = sub_100144390;
    v26[3] = &unk_1002D3980;
    id v27 = v10;
    id v28 = v9;
    id v29 = v6;
    [v28 perform:v26];
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v13 = (id)GKOSLoggers();
    }
    uint64_t v14 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10014A00C(v14, v15, v16, v17, v18, v19, v20, v21);
    }
  }
  if (*(void *)(a1 + 40))
  {
    __int16 v22 = [v7 replyQueue];
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_1001448BC;
    v23[3] = &unk_1002D3930;
    id v25 = *(id *)(a1 + 40);
    id v24 = v6;
    [v9 notifyOnQueue:v22 block:v23];
  }
}

void sub_100144390(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10014446C;
  v6[3] = &unk_1002DC4F8;
  id v7 = v4;
  id v8 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  id v10 = v3;
  id v5 = v3;
  [v7 determineGameLocationOnDeviceOrInStoreWithCompletionHandler:v6];
}

void sub_10014446C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10014A044();
    }
  }
  else if ([*(id *)(a1 + 32) gameLocation])
  {
    [*(id *)(a1 + 32) update];
    id v8 = [*(id *)(a1 + 32) gameDescriptor];
    id v9 = [v8 bundleIdentifier];

    if (GKGetApplicationStateForBundleID(v9) <= 3
      && ([(id)objc_opt_class() displayNotification] & 1) != 0)
    {
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_1001446D4;
      v16[3] = &unk_1002D3A70;
      id v10 = *(void **)(a1 + 40);
      id v17 = *(id *)(a1 + 32);
      id v18 = *(id *)(a1 + 48);
      [v10 perform:v16];

      uint64_t v11 = v17;
    }
    else
    {
      if (!os_log_GKGeneral) {
        id v12 = (id)GKOSLoggers();
      }
      id v13 = os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Notify the App, do not display bulletin", buf, 2u);
      }
      [*(id *)(a1 + 32) saveTurnBasedEvent];
      [*(id *)(a1 + 32) invalidateTurnCache];
      uint64_t v11 = +[GKClientProxy clientForBundleID:v9];
      [v11 fetchTurnBasedData];
    }
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v14 = (id)GKOSLoggers();
    }
    uint64_t v15 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "GKTurnBasedMultiplayerBulletin Declining invite due to no compatible game found", buf, 2u);
    }
    [*(id *)(a1 + 32) declineTurnBasedInviteWithReason:2];
  }
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 56) + 16))(*(void *)(a1 + 56), v5, v6, v7);
}

void sub_1001446D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10014479C;
  v6[3] = &unk_1002D3DD0;
  id v7 = v4;
  id v8 = *(id *)(a1 + 40);
  id v9 = v3;
  id v5 = v3;
  [v7 loadDataWithHandler:v6];
}

void sub_10014479C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10014A0AC();
    }
  }
  else if ([(id)objc_opt_class() displayNotification])
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers();
    }
    uint64_t v6 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Assemble Bulletin", v7, 2u);
    }
    [*(id *)(a1 + 32) assembleBulletin];
    [*(id *)(a1 + 32) saveTurnBasedEvent];
    [*(id *)(a1 + 40) addObject:*(void *)(a1 + 32)];
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

uint64_t sub_1001448BC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10014521C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v5 = [v4 gameDescriptor];
  uint64_t v6 = [v5 bundleIdentifier];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100145300;
  v8[3] = &unk_1002D3BC8;
  id v9 = *(id *)(a1 + 40);
  id v10 = v3;
  id v7 = v3;
  [v4 loadLocalizedGameNameForBundleID:v6 handler:v8];
}

void sub_100145300(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10014A114();
    }
    [*(id *)(a1 + 32) setError:v3];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10014539C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100145454;
  v6[3] = &unk_1002D3DD0;
  void v6[4] = v4;
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  id v5 = v3;
  [v4 loadOriginatorPlayerWithCompletionHandler:v6];
}

void sub_100145454(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    id v5 = (void *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10014A17C(a1, v5, (uint64_t)v3);
    }
    [*(id *)(a1 + 40) setError:v3];
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1001454F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) gameDescriptor];
  id v5 = [v4 bundleIdentifier];
  uint64_t v6 = +[GKService serviceForBundleID:v5 localPlayer:0];
  id v7 = [*(id *)(a1 + 32) matchID];
  id v14 = v7;
  id v8 = +[NSArray arrayWithObjects:&v14 count:1];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10014566C;
  v11[3] = &unk_1002D53D8;
  id v9 = *(void **)(a1 + 40);
  void v11[4] = *(void *)(a1 + 32);
  id v12 = v9;
  id v13 = v3;
  id v10 = v3;
  [v6 getDetailsForTurnBasedMatchIDs:v8 includeGameData:1 handler:v11];
}

void sub_10014566C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers();
    }
    id v8 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      int v16 = 138412290;
      id v17 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "loadBulletinMessageWithHandler - Error getting expiration date for match: %@", (uint8_t *)&v16, 0xCu);
    }
    [*(id *)(a1 + 40) setError:v6];
  }
  else
  {
    id v9 = [v5 lastObject];
    unsigned __int8 v10 = [v9 currentParticipant];
    uint64_t v11 = [v9 participants];
    id v12 = [v11 count];

    if ((unint64_t)v12 > v10)
    {
      id v13 = [v9 participants];
      id v14 = [v13 objectAtIndexedSubscript:[v9 currentParticipant]];

      uint64_t v15 = [v14 timeoutDate];
      [*(id *)(a1 + 32) setExpirationDate:v15];
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_100145818(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }
}

void sub_100145C4C(uint64_t a1, void *a2, void *a3)
{
  id v13 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = [*(id *)(a1 + 40) gameDescriptor];
  id v8 = [v7 adamID];
  id v9 = +[NSPredicate predicateWithFormat:@"game.bundleID = %@ OR game.adamID = %@", v6, v8];
  +[GKExpiringCacheObject expireObjectsMatchingPredicate:v9 context:v13];

  unsigned __int8 v10 = [*(id *)(a1 + 40) matchID];

  if (v10)
  {
    uint64_t v11 = [*(id *)(a1 + 40) matchID];
    id v12 = +[NSPredicate predicateWithFormat:@"sessionID = %@", v11];
    +[GKExpiringCacheObject expireObjectsMatchingPredicate:v12 context:v13];
  }
  v5[2](v5);
}

void sub_100146BF0(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  unsigned int v7 = [(id)objc_opt_class() shouldLoadCacheList];
  unsigned int v8 = [(id)objc_opt_class() shouldLoadCacheDetails];
  id v9 = [(id)objc_opt_class() shouldLoadCacheData];
  if (![(id)objc_opt_class() shouldExpirePlayerList])
  {
    if (!v7) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v20 = [a1[4] gameDescriptor];
    uint64_t v21 = [v20 bundleIdentifier];
    __int16 v22 = +[NSPredicate predicateWithFormat:@"game.bundleID = %@", v21];
    +[GKExpiringCacheObject expireObjectsMatchingPredicate:v22 context:v5];

    __int16 v23 = [a1[5] bundleIdentifier];
    id v24 = +[NSPredicate predicateWithFormat:@"game.bundleID = %@", v23];
    +[GKExpiringCacheObject expireObjectsMatchingPredicate:v24 context:v5];

    [a1[6] getTurnBasedMatchesAndCompatibleBundleID:0 handler:0];
    [a1[7] getTurnBasedMatchesAndCompatibleBundleID:1 handler:0];
    if (!v8) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  CFStringRef v26 = @"bundle-id";
  uint64_t v15 = [a1[4] gameDescriptor];
  int v16 = [v15 bundleIdentifier];
  id v27 = v16;
  id v17 = +[NSDictionary dictionaryWithObjects:&v27 forKeys:&v26 count:1];

  id v18 = +[GKGameCacheObject gameForGameDescriptor:v17 context:v5];
  uint64_t v19 = +[NSPredicate predicateWithFormat:@"game = %@ AND type = %d", v18, 1];
  +[GKExpiringCacheObject expireObjectsMatchingPredicate:v19 context:v5];

  if (v7) {
    goto LABEL_7;
  }
LABEL_3:
  if (v8)
  {
LABEL_4:
    unsigned __int8 v10 = [a1[4] matchID];
    uint64_t v11 = +[NSPredicate predicateWithFormat:@"sessionID = %@", v10];
    +[GKExpiringCacheObject expireObjectsMatchingPredicate:v11 context:v5];

    id v12 = a1[6];
    id v13 = [a1[4] matchID];
    id v25 = v13;
    id v14 = +[NSArray arrayWithObjects:&v25 count:1];
    [v12 getDetailsForTurnBasedMatchIDs:v14 includeGameData:v9 handler:0];
  }
LABEL_5:
  v6[2](v6);
}

void sub_100147430(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers();
  }
  id v3 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "GKTurnBasedMultiplayerInviteBulletin loadBulletinsForPushNotification: withHandler:", buf, 2u);
  }
  id v4 = +[GKReporter reporter];
  [v4 reportEvent:GKReporterDomainPushCount type:GKReporterPushCountTurnBasedInitiate];

  id v5 = [objc_alloc((Class)NSMutableArray) initWithCapacity:1];
  uint64_t v6 = +[GKClientProxy gameCenterClient];
  unsigned int v7 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKTurnBasedMultiplayerBulletin.m", 493, "+[GKTurnBasedMultiplayerInviteBulletin loadBulletinsForPushNotification:withHandler:]_block_invoke");
  unsigned int v8 = +[GKDispatchGroup dispatchGroupWithName:v7];

  id v9 = [(GKTurnBasedMultiplayerBulletin *)[GKTurnBasedMultiplayerInviteBulletin alloc] initWithPushNotification:*(void *)(a1 + 32)];
  unsigned __int8 v10 = [*(id *)(a1 + 32) objectForKeyedSubscript:GKInviteIsFromMessageKey];
  unsigned int v11 = [v10 BOOLValue];

  id v12 = +[GKReporter reporter];
  id v13 = v12;
  if (v11)
  {
    [v12 reportEvent:GKReporterDomainInviteInitiateType type:GKMessageInviteInitiate];
  }
  else
  {
    [v12 reportEvent:GKReporterDomainInviteInitiateType type:GKPushInviteInitiate];

    if (![(GKGameplayBulletin *)v9 isPushForLocalPlayers]) {
      goto LABEL_9;
    }
  }
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100147750;
  v18[3] = &unk_1002D3FB8;
  uint64_t v19 = v9;
  id v20 = v8;
  char v22 = v11;
  id v21 = v5;
  [v20 perform:v18];

LABEL_9:
  if (*(void *)(a1 + 40))
  {
    id v14 = [v6 replyQueue];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100147BEC;
    v15[3] = &unk_1002D3930;
    id v17 = *(id *)(a1 + 40);
    id v16 = v5;
    [v8 notifyOnQueue:v14 block:v15];
  }
}

void sub_100147750(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100147834;
  v6[3] = &unk_1002DC548;
  id v7 = v4;
  id v8 = *(id *)(a1 + 40);
  char v11 = *(unsigned char *)(a1 + 56);
  id v9 = *(id *)(a1 + 48);
  id v10 = v3;
  id v5 = v3;
  [v7 determineGameLocationOnDeviceOrInStoreWithCompletionHandler:v6];
}

void sub_100147834(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10014A238();
    }
  }
  else
  {
    if ([*(id *)(a1 + 32) gameLocation])
    {
      [*(id *)(a1 + 32) updateBadgeCount];
      [*(id *)(a1 + 32) expireAndLoadCaches];
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_100147A0C;
      v10[3] = &unk_1002D8A20;
      id v5 = *(void **)(a1 + 40);
      id v11 = *(id *)(a1 + 32);
      char v13 = *(unsigned char *)(a1 + 64);
      id v12 = *(id *)(a1 + 48);
      [v5 perform:v10];
    }
    else
    {
      if (!os_log_GKGeneral) {
        id v6 = (id)GKOSLoggers();
      }
      id v7 = os_log_GKTrace;
      if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)id v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "GKTurnBasedMultiplayerInviteBulletin Declining invite due to no compatible game found", v9, 2u);
      }
      [*(id *)(a1 + 32) declineTurnBasedInviteWithReason:2];
    }
    id v8 = +[GKReporter reporter];
    [v8 reportEvent:GKReporterDomainPushCount type:GKReporterPushCountTurnBasedTurn];
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_100147A0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100147ADC;
  v6[3] = &unk_1002DC520;
  id v7 = v4;
  char v10 = *(unsigned char *)(a1 + 48);
  id v8 = *(id *)(a1 + 40);
  id v9 = v3;
  id v5 = v3;
  [v7 loadDataWithHandler:v6];
}

void sub_100147ADC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 code] == (id)10)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    id v5 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10014A2A0(v5, v6, v7, v8, v9, v10, v11, v12);
    }
    [*(id *)(a1 + 32) declineTurnBasedInviteWithReason:1];
  }
  else if (!v3 || *(unsigned char *)(a1 + 56))
  {
    [*(id *)(a1 + 32) setGameInviteMessage];
    [*(id *)(a1 + 32) assembleBulletin];
    [*(id *)(a1 + 40) addObject:*(void *)(a1 + 32)];
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v13 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10014A2D8();
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

uint64_t sub_100147BEC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100148530(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v5 = [v4 gameDescriptor];
  uint64_t v6 = [v5 bundleIdentifier];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100148614;
  v8[3] = &unk_1002D3BC8;
  id v9 = *(id *)(a1 + 40);
  id v10 = v3;
  id v7 = v3;
  [v4 loadLocalizedGameNameForBundleID:v6 handler:v8];
}

void sub_100148614(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10014A340();
    }
    [*(id *)(a1 + 32) setError:v3];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1001486B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100148768;
  v8[3] = &unk_1002D3DD0;
  id v4 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  id v9 = v5;
  uint64_t v10 = v6;
  id v11 = v3;
  id v7 = v3;
  [v4 loadOriginatorPlayerWithCompletionHandler:v8];
}

void sub_100148768(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
    id v5 = +[GKPreferences shared];
    if ([v5 multiplayerAllowedPlayerType] == (id)1)
    {
      uint64_t v6 = [*(id *)(a1 + 40) originatorPlayer];
      id v7 = [v6 friendBiDirectional];
      unsigned __int8 v8 = [v7 isEqualToNumber:&off_1002F2720];

      if (v8) {
        goto LABEL_15;
      }
      if (!os_log_GKGeneral) {
        id v9 = (id)GKOSLoggers();
      }
      uint64_t v10 = os_log_GKError;
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
        sub_10014A3A8(v10, v11, v12, v13, v14, v15, v16, v17);
      }
      id v5 = +[NSError userErrorForCode:10 underlyingError:0];
      [*(id *)(a1 + 32) setError:v5];
    }

    goto LABEL_15;
  }
  if (!os_log_GKGeneral) {
    id v4 = (id)GKOSLoggers();
  }
  if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
    sub_10014A3E0();
  }
  [*(id *)(a1 + 32) setError:v3];
LABEL_15:
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1001488DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }
}

void sub_10014961C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v5 = [v4 gameDescriptor];
  uint64_t v6 = [v5 bundleIdentifier];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100149700;
  v8[3] = &unk_1002D3BC8;
  id v9 = *(id *)(a1 + 40);
  id v10 = v3;
  id v7 = v3;
  [v4 loadLocalizedGameNameForBundleID:v6 handler:v8];
}

void sub_100149700(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10014A340();
    }
    [*(id *)(a1 + 32) setError:v3];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10014979C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10014984C;
  v6[3] = &unk_1002D3BC8;
  id v4 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  id v5 = v3;
  [v4 loadBulletinMessageWithHandler:v6];
}

void sub_10014984C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10014A448();
    }
    [*(id *)(a1 + 32) setError:v3];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1001498E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }
}

void sub_100149AE8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) gameDescriptor];
  id v5 = [v4 bundleIdentifier];
  uint64_t v6 = +[GKService serviceForBundleID:v5 localPlayer:0];
  id v7 = [*(id *)(a1 + 32) matchID];
  uint64_t v14 = v7;
  id v8 = +[NSArray arrayWithObjects:&v14 count:1];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100149C60;
  v11[3] = &unk_1002D53D8;
  id v9 = *(void **)(a1 + 40);
  void v11[4] = *(void *)(a1 + 32);
  id v12 = v9;
  id v13 = v3;
  id v10 = v3;
  [v6 getDetailsForTurnBasedMatchIDs:v8 includeGameData:1 handler:v11];
}

void sub_100149C60(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    [*(id *)(a1 + 40) setError:v5];
    if (!os_log_GKGeneral) {
      id v6 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10014A4B0();
    }
  }
  else
  {
    id v28 = [a2 lastObject];
    id v7 = [v28 exchanges];
    id v29 = +[NSMutableOrderedSet orderedSet];
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    id v8 = v7;
    id v9 = [v8 countByEnumeratingWithState:&v34 objects:v39 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v35;
      while (2)
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(void *)v35 != v11) {
            objc_enumerationMutation(v8);
          }
          id v13 = *(void **)(*((void *)&v34 + 1) + 8 * i);
          uint64_t v14 = [v13 exchangeID];
          uint64_t v15 = [*(id *)(a1 + 32) exchangeID];
          unsigned int v16 = [v14 isEqual:v15];

          if (v16)
          {
            uint64_t v17 = [v13 replies];
            long long v30 = 0u;
            long long v31 = 0u;
            long long v32 = 0u;
            long long v33 = 0u;
            id v18 = [v17 countByEnumeratingWithState:&v30 objects:v38 count:16];
            if (v18)
            {
              id v19 = v18;
              uint64_t v20 = *(void *)v31;
              do
              {
                for (j = 0; j != v19; j = (char *)j + 1)
                {
                  if (*(void *)v31 != v20) {
                    objc_enumerationMutation(v17);
                  }
                  char v22 = [*(id *)(*((void *)&v30 + 1) + 8 * (void)j) localizableMessage];
                  __int16 v23 = [*(id *)(a1 + 32) gameDescriptor];
                  id v24 = [v23 bundleIdentifier];
                  id v25 = +[NSBundle _gkLocalizedMessageFromPushDictionary:v22 forBundleID:v24];

                  if (v25 && [v25 length]) {
                    [v29 addObject:v25];
                  }
                }
                id v19 = [v17 countByEnumeratingWithState:&v30 objects:v38 count:16];
              }
              while (v19);
            }

            id v5 = 0;
            goto LABEL_26;
          }
        }
        id v10 = [v8 countByEnumeratingWithState:&v34 objects:v39 count:16];
        if (v10) {
          continue;
        }
        break;
      }
    }
LABEL_26:

    if ([v29 count])
    {
      CFStringRef v26 = [v29 array];
      id v27 = [v26 componentsJoinedByString:@"\n"];
      [*(id *)(a1 + 32) setMessage:v27];
    }
    else
    {
      [*(id *)(a1 + 32) setMessage:0];
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_100149FB0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10014A00C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10014A044()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Error determining game location: %@", v2, v3, v4, v5, v6);
}

void sub_10014A0AC()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Error loading data for turn based bulletin: %@", v2, v3, v4, v5, v6);
}

void sub_10014A114()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Error getting localized game name: %@", v2, v3, v4, v5, v6);
}

void sub_10014A17C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = a2;
  uint8_t v6 = [v4 originatorPlayerID];
  sub_100011064();
  __int16 v8 = 2112;
  uint64_t v9 = a3;
  _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "loadDataWithHandler - Error loading info about originator player (%@): %@", v7, 0x16u);
}

void sub_10014A238()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "GKTurnBasedMultiplayerInviteBulletin - Error determining game location: %@", v2, v3, v4, v5, v6);
}

void sub_10014A2A0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10014A2D8()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "loadLocalizedGameNameForBundleID - Error loading data for the bulletin: %@", v2, v3, v4, v5, v6);
}

void sub_10014A340()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "loadLocalizedGameNameForBundleID - Error getting localized game name: %@", v2, v3, v4, v5, v6);
}

void sub_10014A3A8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10014A3E0()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "loadOriginatorPlayerWithCompletionHandler - Error getting originator player: %@", v2, v3, v4, v5, v6);
}

void sub_10014A448()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "loadLocalizedGameNameForBundleID - Error getting bulletin message: %@", v2, v3, v4, v5, v6);
}

void sub_10014A4B0()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "loadBulletinMessageWithHandler - Error getting details for match: %@", v2, v3, v4, v5, v6);
}

void sub_10014C0B4(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers();
  }
  uint64_t v3 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "GKRealTimeMultiplayerInitiateBulletin loadBulletinsForPushNotification:", buf, 2u);
  }
  uint64_t v4 = +[GKReporter reporter];
  [v4 reportMessageInviteProcessingDuration];

  uint64_t v5 = +[GKReporter reporter];
  [v5 recordAppLaunchAndTotalTimestamp];

  uint8_t v6 = +[GKReporter reporter];
  [v6 reportEvent:GKReporterDomainPushCount type:GKReporterPushCountInviteInitiate];

  id v7 = [objc_alloc((Class)NSMutableArray) initWithCapacity:1];
  __int16 v8 = +[GKClientProxy gameCenterClient];
  uint64_t v9 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKRealTimeMultiplayerBulletin.m", 313, "+[GKRealTimeMultiplayerInitiateBulletin loadBulletinsForPushNotification:withHandler:]_block_invoke");
  id v10 = +[GKDispatchGroup dispatchGroupWithName:v9];

  uint64_t v11 = [[GKRealTimeMultiplayerInitiateBulletin alloc] initWithPushNotification:*(void *)(a1 + 32)];
  id v12 = [*(id *)(a1 + 32) objectForKeyedSubscript:GKInviteIsFromMessageKey];
  id v13 = [v12 BOOLValue];

  [(GKRealTimeMultiplayerBulletin *)v11 setIsMessageBasedInvite:v13];
  uint64_t v14 = [*(id *)(a1 + 32) objectForKeyedSubscript:GKPushCommandKey];
  BOOL v15 = [v14 unsignedIntValue] == 9;

  [(GKRealTimeMultiplayerBulletin *)v11 setIsSharePlayInvite:v15];
  uint64_t v16 = GKInviteIsFromNearbyKey;
  uint64_t v17 = [*(id *)(a1 + 32) objectForKeyedSubscript:GKInviteIsFromNearbyKey];

  if (v17)
  {
    id v18 = [*(id *)(a1 + 32) objectForKeyedSubscript:v16];
    -[GKRealTimeMultiplayerBulletin setIsNearbyInvite:](v11, "setIsNearbyInvite:", [v18 BOOLValue]);
  }
  id v19 = +[GKReporter reporter];
  uint64_t v20 = v19;
  if (v13)
  {
    [v19 reportEvent:GKReporterDomainInviteInitiateType type:GKMessageInviteInitiate];

LABEL_11:
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_10014C5F4;
    v33[3] = &unk_1002D3FB8;
    long long v34 = v11;
    id v35 = v10;
    char v37 = (char)v13;
    id v36 = v7;
    [v35 perform:v33];

    goto LABEL_12;
  }
  [v19 reportEvent:GKReporterDomainInviteInitiateType type:GKPushInviteInitiate];

  if ([(GKRealTimeMultiplayerInitiateBulletin *)v11 isReconnect]
    || [(GKGameplayBulletin *)v11 isPushForLocalPlayers])
  {
    goto LABEL_11;
  }
  if (!os_log_GKGeneral) {
    id v22 = (id)GKOSLoggers();
  }
  __int16 v23 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "GKRealTimeMultiplayerInitiateBulletin loadBulletinsForPushNotification: push is not for local players", buf, 2u);
  }
  if (!os_log_GKGeneral) {
    id v24 = (id)GKOSLoggers();
  }
  id v25 = (void *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    CFStringRef v26 = v25;
    id v27 = [(GKGameplayBulletin *)v11 receiverPlayerID];
    id v28 = +[GKPlayerCredentialController sharedController];
    id v29 = [v28 pushCredentialForEnvironment:[v8 environment]];
    *(_DWORD *)buf = 138412546;
    long long v39 = v27;
    __int16 v40 = 2112;
    id v41 = v29;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Ignoring initiate push not intended for this player. InviteID: %@ LocalPlayer: %@", buf, 0x16u);
  }
LABEL_12:
  if (*(void *)(a1 + 40))
  {
    id v21 = [v8 replyQueue];
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_10014CE48;
    v30[3] = &unk_1002D3930;
    id v32 = *(id *)(a1 + 40);
    id v31 = v7;
    [v10 notifyOnQueue:v21 block:v30];
  }
}

void sub_10014C5F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10014C6D8;
  v6[3] = &unk_1002DC548;
  id v7 = v4;
  id v8 = *(id *)(a1 + 40);
  char v11 = *(unsigned char *)(a1 + 56);
  id v9 = *(id *)(a1 + 48);
  id v10 = v3;
  id v5 = v3;
  [v7 determineGameLocationOnDeviceOrInStoreWithCompletionHandler:v6];
}

void sub_10014C6D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
      sub_100152DE8();
    }
  }
  else if ([*(id *)(a1 + 32) gameLocation])
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10014C86C;
    v9[3] = &unk_1002D8A20;
    id v5 = *(void **)(a1 + 40);
    id v10 = *(id *)(a1 + 32);
    char v12 = *(unsigned char *)(a1 + 64);
    id v11 = *(id *)(a1 + 48);
    [v5 perform:v9];
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v6 = (id)GKOSLoggers();
    }
    id v7 = os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "GKRealTimeMultiplayerInitiateBulletin Declining invite due to no compatible game found", v8, 2u);
    }
    [*(id *)(a1 + 32) declineInviteWithReason:2];
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_10014C86C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10014C93C;
  v6[3] = &unk_1002DC520;
  id v7 = v4;
  char v10 = *(unsigned char *)(a1 + 48);
  id v8 = *(id *)(a1 + 40);
  id v9 = v3;
  id v5 = v3;
  [v7 loadDataWithHandler:v6];
}

void sub_10014C93C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 code] == (id)10)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100152E50();
    }
    [*(id *)(a1 + 32) declineInviteWithReason:1];
  }
  else if (!v3 || *(unsigned char *)(a1 + 56))
  {
    id v6 = +[GKDataRequestManager sharedManager];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10014CAE4;
    v7[3] = &unk_1002D8360;
    id v8 = *(id *)(a1 + 32);
    id v9 = *(id *)(a1 + 40);
    id v10 = *(id *)(a1 + 48);
    [v6 getValidNATTypeWithForceRelay:0 withHandler:v7];
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100152E84();
    }
  }
}

uint64_t sub_10014CAE4(uint64_t a1, void *a2)
{
  id v4 = [*(id *)(a1 + 32) peerNatType];
  id v5 = [v4 integerValue];

  if (!os_log_GKGeneral) {
    id v6 = (id)GKOSLoggers();
  }
  id v7 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    int v27 = 134218240;
    id v28 = a2;
    __int16 v29 = 2048;
    id v30 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "NAT types before generating bulletins: localNATType = %tu, peerNatType = %tu", (uint8_t *)&v27, 0x16u);
  }
  if (([*(id *)(a1 + 32) serverHosted] & 1) == 0
    && ((+[GKViceroyNATTypeHelper isClosed:a2] & 1) != 0
     || +[GKViceroyNATTypeHelper isClosed:v5]))
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers();
    }
    id v9 = os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      int v27 = 134218240;
      id v28 = a2;
      __int16 v29 = 2048;
      id v30 = v5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "NAT types might not connect: own is %tu and inviter has %tu", (uint8_t *)&v27, 0x16u);
    }
  }
  [*(id *)(a1 + 32) setGameInviteMessage];
  [*(id *)(a1 + 32) assembleBulletin];
  if (!os_log_GKGeneral) {
    id v10 = (id)GKOSLoggers();
  }
  id v11 = (void *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    char v12 = *(void **)(a1 + 32);
    id v13 = v11;
    uint64_t v14 = [v12 sessionToken];
    int v27 = 138412290;
    id v28 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "GKRealTimeMultiplayerInitiateBulletin - assembled bulletin with sessionToken %@", (uint8_t *)&v27, 0xCu);
  }
  +[GKMatchReporter onInviteReceivedWithBulletin:*(void *)(a1 + 32)];
  if ([*(id *)(a1 + 32) isSharePlayInvite])
  {
    if (!os_log_GKGeneral) {
      id v15 = (id)GKOSLoggers();
    }
    uint64_t v16 = (void *)os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      uint64_t v17 = *(void **)(a1 + 32);
      id v18 = v16;
      id v19 = [v17 gameDescriptor];
      uint64_t v20 = [v19 bundleIdentifier];
      int v27 = 138412290;
      id v28 = v20;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Launching app (%@) automatically and accept the game invite from SharePlay", (uint8_t *)&v27, 0xCu);
    }
    if ([*(id *)(a1 + 32) gameLocation] == 1)
    {
      id v21 = [*(id *)(a1 + 32) gameDescriptor];
      id v22 = [v21 bundleIdentifier];
      int v23 = GKGetApplicationStateForBundleID(v22);

      if (v23 != 8)
      {
        id v24 = [*(id *)(a1 + 32) gameDescriptor];
        id v25 = [v24 bundleIdentifier];
        GKLaunchApplicationWithIdentifier(v25, 0);
      }
    }
    [*(id *)(a1 + 32) handleAcceptAction];
  }
  else
  {
    [*(id *)(a1 + 40) addObject:*(void *)(a1 + 32)];
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
}

uint64_t sub_10014CE48(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10014DE8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v5 = [v4 gameDescriptor];
  id v6 = [v5 bundleIdentifier];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10014DF70;
  v8[3] = &unk_1002D3BC8;
  id v9 = *(id *)(a1 + 40);
  id v10 = v3;
  id v7 = v3;
  [v4 loadLocalizedGameNameForBundleID:v6 handler:v8];
}

void sub_10014DF70(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100152EEC();
    }
    [*(id *)(a1 + 32) setError:v3];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10014E00C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10014E0C4;
  v8[3] = &unk_1002D3DD0;
  id v4 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  id v9 = v5;
  uint64_t v10 = v6;
  id v11 = v3;
  id v7 = v3;
  [v4 loadOriginatorPlayerWithCompletionHandler:v8];
}

void sub_10014E0C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
    id v5 = +[GKPreferences shared];
    if ([v5 multiplayerAllowedPlayerType] == (id)1)
    {
      uint64_t v6 = [*(id *)(a1 + 40) originatorPlayer];
      id v7 = [v6 friendBiDirectional];
      unsigned __int8 v8 = [v7 isEqualToNumber:&off_1002F2738];

      if (v8) {
        goto LABEL_15;
      }
      if (!os_log_GKGeneral) {
        id v9 = (id)GKOSLoggers();
      }
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
        sub_100152F54();
      }
      id v5 = +[NSError userErrorForCode:10 underlyingError:0];
      [*(id *)(a1 + 32) setError:v5];
    }

    goto LABEL_15;
  }
  if (!os_log_GKGeneral) {
    id v4 = (id)GKOSLoggers();
  }
  if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
    sub_100152F88();
  }
  [*(id *)(a1 + 32) setError:v3];
LABEL_15:
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10014E238(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }
}

void sub_10014E3E4(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers();
  }
  id v3 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "GKRealTimeMultiplayerActionBulletin loadBulletinsForPushNotification withHandler:", (uint8_t *)buf, 2u);
  }
  id v4 = [objc_alloc(*(Class *)(a1 + 48)) initWithPushNotification:*(void *)(a1 + 32)];
  id v5 = [objc_alloc((Class)NSMutableArray) initWithCapacity:1];
  uint64_t v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKRealTimeMultiplayerBulletin.m", 630, "+[GKRealTimeMultiplayerActionBulletin loadBulletinsForPushNotification:withHandler:]_block_invoke");
  id v7 = +[GKDispatchGroup dispatchGroupWithName:v6];

  objc_initWeak(buf, v4);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10014E648;
  v14[3] = &unk_1002DC5C0;
  id v8 = v4;
  id v15 = v8;
  objc_copyWeak(&v17, buf);
  id v9 = v5;
  id v16 = v9;
  [v7 perform:v14];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10014EA20;
  v11[3] = &unk_1002D3930;
  id v13 = *(id *)(a1 + 40);
  id v10 = v9;
  id v12 = v10;
  [v7 notifyOnMainQueueWithBlock:v11];

  objc_destroyWeak(&v17);
  objc_destroyWeak(buf);
}

void sub_10014E628(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 80));
  _Unwind_Resume(a1);
}

void sub_10014E648(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10014E740;
  v6[3] = &unk_1002DC598;
  id v7 = v4;
  objc_copyWeak(&v10, (id *)(a1 + 48));
  id v8 = *(id *)(a1 + 40);
  id v5 = v3;
  id v9 = v5;
  [v7 loadDataWithHandler:v6];

  objc_destroyWeak(&v10);
}

void sub_10014E72C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10014E740(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100152FF0();
    }
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    id v5 = *(void **)(a1 + 32);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10014E884;
    v6[3] = &unk_1002DC570;
    objc_copyWeak(&v9, (id *)(a1 + 56));
    id v7 = *(id *)(a1 + 40);
    id v8 = *(id *)(a1 + 48);
    [v5 setInvitedPlayerRespondedWithCompletionHandler:v6];

    objc_destroyWeak(&v9);
  }
}

void sub_10014E870(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10014E884(uint64_t a1, int a2)
{
  if (a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      if (!os_log_GKGeneral) {
        id v4 = (id)GKOSLoggers();
      }
      id v5 = (void *)os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = v5;
        id v7 = objc_loadWeakRetained((id *)(a1 + 48));
        id v8 = [v7 debugLine];
        int v16 = 138412290;
        id v17 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Will post bulletin: %@", (uint8_t *)&v16, 0xCu);
      }
      id v9 = +[GKReporter reporter];
      uint64_t v10 = GKReporterDomainPushCount;
      id v11 = objc_loadWeakRetained((id *)(a1 + 48));
      id v12 = [v11 aggregateDictionaryKey];
      [v9 reportEvent:v10 type:v12];

      id v13 = *(void **)(a1 + 32);
      id v14 = objc_loadWeakRetained((id *)(a1 + 48));
      [v13 addObject:v14];
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_10014EA20(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_10014ED84(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v5 = [v4 gameDescriptor];
  uint64_t v6 = [v5 bundleIdentifier];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10014EE68;
  v8[3] = &unk_1002D3BC8;
  id v9 = *(id *)(a1 + 40);
  id v10 = v3;
  id v7 = v3;
  [v4 loadLocalizedGameNameForBundleID:v6 handler:v8];
}

void sub_10014EE68(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10015308C();
    }
    [*(id *)(a1 + 32) setError:v3];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10014EF04(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10014EFB4;
  v6[3] = &unk_1002D3BC8;
  id v4 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  id v5 = v3;
  [v4 loadOriginatorPlayerWithCompletionHandler:v6];
}

void sub_10014EFB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1001530F4();
    }
    [*(id *)(a1 + 32) setError:v3];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10014F050(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }
}

void sub_10014F2E0(id *a1, void *a2)
{
  id v3 = a2;
  if (a1[4])
  {
    id v4 = [a1[5] originatorPlayer];
    id v5 = v4;
    if (v4)
    {
      id v6 = a1[6];
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = sub_10014F518;
      v18[3] = &unk_1002D7580;
      id v19 = v4;
      id v7 = a1[4];
      id v8 = a1[5];
      id v20 = v7;
      id v21 = v8;
      long long v17 = *((_OWORD *)a1 + 3);
      id v9 = (id)v17;
      long long v22 = v17;
      [v6 perform:v18];
    }
    v3[2](v3);
  }
  else
  {
    id v10 = os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      id v11 = (id)GKOSLoggers();
      id v10 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "setInvitedPlayerRespondedWithCompletionHandler: Received Accept for unkown Session Token", buf, 2u);
    }
    if (!os_log_GKGeneral) {
      id v12 = (id)GKOSLoggers();
    }
    id v13 = (void *)os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      id v14 = a1[5];
      id v15 = v13;
      int v16 = [v14 sessionToken];
      *(_DWORD *)buf = 138412290;
      id v24 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Received accept for unknown sessionToken %@", buf, 0xCu);
    }
    [a1[6] setResult:&__kCFBooleanFalse];
    v3[2](v3);
  }
}

void sub_10014F518(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!os_log_GKGeneral) {
    id v4 = (id)GKOSLoggers();
  }
  id v5 = (void *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    id v6 = *(void **)(a1 + 32);
    id v7 = v5;
    id v8 = [v6 debugDescription];
    *(_DWORD *)buf = 138412290;
    int v23 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "setInvitedPlayerRespondedWithCompletionHandler: starting invite session for player: %@", buf, 0xCu);
  }
  id v9 = [*(id *)(a1 + 40) inviteSession];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10014F6D8;
  v15[3] = &unk_1002DC658;
  void v15[4] = *(void *)(a1 + 48);
  id v16 = v9;
  id v17 = *(id *)(a1 + 32);
  id v10 = *(id *)(a1 + 40);
  id v12 = *(void **)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 64);
  id v18 = v10;
  uint64_t v21 = v11;
  id v19 = v12;
  id v20 = v3;
  id v13 = v3;
  id v14 = v9;
  [v14 performAsync:v15];
}

void sub_10014F6D8(uint64_t a1)
{
  id v2 = (id *)(a1 + 32);
  id v3 = [*(id *)(a1 + 32) originatorPlayerID];
  id v4 = [*v2 peerPushToken];
  id v5 = [*(id *)(a1 + 40) referencesForInvitee:*(void *)(a1 + 48)];
  uint64_t v38 = 0;
  long long v39 = &v38;
  uint64_t v40 = 0x3032000000;
  id v41 = sub_10014FC08;
  v42 = sub_10014FC18;
  id v43 = 0;
  if ([v5 containsObject:v4])
  {
    if (!os_log_GKGeneral) {
      id v6 = (id)GKOSLoggers();
    }
    id v7 = os_log_GKMatch;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v8 = [*(id *)(a1 + 48) debugDescription];
      *(_DWORD *)buf = 138412546;
      id v45 = v8;
      __int16 v46 = 2112;
      v47 = v4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Have a push token for peer(%@): %@", buf, 0x16u);
    }
    [*(id *)(a1 + 40) removeInvitee:*(void *)(a1 + 48) reference:v4];
    id v9 = [*(id *)(a1 + 40) referencesForInvitee:*(void *)(a1 + 48)];

    id v10 = [v9 count];
    if ([*(id *)(a1 + 32) isAccept])
    {
      if (v10)
      {
LABEL_8:
        uint64_t v11 = *(void **)(a1 + 56);
        id v12 = [*(id *)(a1 + 40) sessionToken];
        [v11 cancelInvitationForSession:v12 playerID:v3 pushTokens:v9 handler:&stru_1002DC5E0];

        [*(id *)(a1 + 40) removeInvitee:*(void *)(a1 + 48) reference:0];
LABEL_17:
        id v24 = [*(id *)(a1 + 56) bundleIdentifier];
        id v25 = [*(id *)(a1 + 32) gameDescriptor];
        [v25 setBundleIdentifier:v24];

        CFStringRef v26 = [*(id *)(a1 + 56) bundleIdentifier];
        LODWORD(v25) = GKGetApplicationStateForBundleID(v26);

        if (v25 != 8)
        {
          [*(id *)(a1 + 40) addResponse:*(void *)(a1 + 32)];
          [*(id *)(a1 + 32) assembleBulletin];
          uint64_t v31 = 1;
LABEL_25:
          id v5 = v9;
          goto LABEL_26;
        }
        unsigned int v27 = [*(id *)(a1 + 32) isAccept];
        id v28 = *(void **)(a1 + 56);
        __int16 v29 = *(void **)(a1 + 32);
        if (v27)
        {
          id v30 = [v29 clientNotificationWithiCloudID:v39[5]];
          [v28 acceptInviteWithNotification:v30];
        }
        else
        {
          id v30 = [v29 clientNotification];
          [v28 declineInviteWithNotification:v30];
        }

LABEL_24:
        uint64_t v31 = 0;
        goto LABEL_25;
      }
    }
    else
    {
      long long v22 = [*(id *)(a1 + 32) declineReason];
      BOOL v23 = [v22 integerValue] != (id)1;

      if (!v23 && v10 != 0) {
        goto LABEL_8;
      }
    }
    if ([v9 count]) {
      goto LABEL_24;
    }
    goto LABEL_17;
  }
  id v13 = [*(id *)(a1 + 40) shareInvitees];
  BOOL v14 = [v13 count] == 0;

  if (!v14)
  {
    if (!os_log_GKGeneral) {
      id v15 = (id)GKOSLoggers();
    }
    id v16 = os_log_GKMatch;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      id v17 = [*(id *)(a1 + 40) shareInvitees];
      *(_DWORD *)buf = 138412290;
      id v45 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Have share invitees %@", buf, 0xCu);
    }
    id v18 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKRealTimeMultiplayerBulletin.m", 763, "-[GKRealTimeMultiplayerActionBulletin setInvitedPlayerRespondedWithCompletionHandler:]_block_invoke");
    id v19 = +[GKDispatchGroup dispatchGroupWithName:v18];

    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_10014FC94;
    v33[3] = &unk_1002DC630;
    id v20 = *(id *)(a1 + 40);
    uint64_t v21 = *(void *)(a1 + 80);
    id v34 = v20;
    uint64_t v37 = v21;
    id v35 = *(id *)(a1 + 48);
    id v36 = &v38;
    [v19 perform:v33];
    [v19 wait];

    id v9 = v5;
    goto LABEL_17;
  }
  uint64_t v31 = 0;
LABEL_26:
  id v32 = +[NSNumber numberWithBool:v31];
  [*(id *)(a1 + 64) setResult:v32];

  (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  _Block_object_dispose(&v38, 8);
}

void sub_10014FBD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10014FC08(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10014FC18(uint64_t a1)
{
}

void sub_10014FC20(id a1, NSError *a2)
{
  id v2 = a2;
  if (v2)
  {
    if (!os_log_GKGeneral) {
      id v3 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10015315C();
    }
  }
}

void sub_10014FC94(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) shareRecordID];
  id v18 = v4;
  id v5 = +[NSArray arrayWithObjects:&v18 count:1];
  id v6 = +[GKCloudKitMultiplayerUtils privateDatabase];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10014FDF8;
  v12[3] = &unk_1002DC608;
  id v7 = *(id *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 56);
  id v13 = v7;
  uint64_t v17 = v8;
  id v9 = *(id *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  id v15 = v3;
  uint64_t v16 = v10;
  id v14 = v9;
  id v11 = v3;
  +[GKCloudKitMultiplayerUtils fetchShareRecordsWithRecordIDs:v5 inDatabase:v6 handler:v12];
}

void sub_10014FDF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) shareRecordID];
  id v5 = [v3 objectForKeyedSubscript:v4];

  if (v5)
  {
    id v6 = [v5 objectForKeyedSubscript:@"invitedPlayers"];

    if (v6)
    {
      id v35 = v3;
      v46[0] = objc_opt_class();
      v46[1] = objc_opt_class();
      v46[2] = objc_opt_class();
      v46[3] = objc_opt_class();
      id v7 = +[NSArray arrayWithObjects:v46 count:4];
      uint64_t v8 = +[NSSet setWithArray:v7];
      id v9 = [v5 objectForKeyedSubscript:@"invitedPlayers"];
      id v40 = 0;
      uint64_t v10 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v8 fromData:v9 error:&v40];
      id v11 = v40;

      if (v11)
      {
        if (!os_log_GKGeneral) {
          id v12 = (id)GKOSLoggers();
        }
        id v13 = (void *)os_log_GKError;
        if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
          sub_1001531C4((uint64_t)v11, a1, v13);
        }
      }
      id v34 = v11;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      id v14 = v10;
      id v15 = [v14 countByEnumeratingWithState:&v36 objects:v45 count:16];
      if (v15)
      {
        id v16 = v15;
        uint64_t v17 = *(void *)v37;
        while (2)
        {
          for (i = 0; i != v16; i = (char *)i + 1)
          {
            if (*(void *)v37 != v17) {
              objc_enumerationMutation(v14);
            }
            id v19 = *(void **)(*((void *)&v36 + 1) + 8 * i);
            id v20 = [v14 objectForKeyedSubscript:v19];
            uint64_t v21 = [*(id *)(a1 + 40) playerID];
            unsigned int v22 = [v20 isEqualToString:v21];

            if (v22)
            {
              if (!os_log_GKGeneral) {
                id v23 = (id)GKOSLoggers();
              }
              id v24 = (void *)os_log_GKMatch;
              if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
              {
                id v25 = *(void **)(a1 + 32);
                CFStringRef v26 = v24;
                unsigned int v27 = [v25 shareInvitees];
                *(_DWORD *)buf = 138412546;
                v42 = v19;
                __int16 v43 = 2112;
                __int16 v44 = v27;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Remove %@ from shareInvitees %@", buf, 0x16u);
              }
              id v28 = [*(id *)(a1 + 32) shareInvitees];
              [v28 removeObject:v19];

              objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v19);
              goto LABEL_22;
            }
          }
          id v16 = [v14 countByEnumeratingWithState:&v36 objects:v45 count:16];
          if (v16) {
            continue;
          }
          break;
        }
      }
LABEL_22:

      if (!os_log_GKGeneral) {
        id v29 = (id)GKOSLoggers();
      }
      id v30 = (void *)os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        uint64_t v31 = *(void **)(a1 + 32);
        id v32 = v30;
        long long v33 = [v31 shareInvitees];
        *(_DWORD *)buf = 138412290;
        v42 = v33;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "Remaining share invitees after response %@", buf, 0xCu);
      }
      id v3 = v35;
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_100150230(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) result];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, [v2 BOOLValue]);
}

void sub_100151570(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers();
  }
  id v3 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    LOWORD(v34) = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "GKRealTimeMultiplayerCancelBulletin loadBulletinsForPushNotification withHandler:", (uint8_t *)&v34, 2u);
  }
  if (!os_log_GKGeneral) {
    id v4 = (id)GKOSLoggers();
  }
  id v5 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    LOWORD(v34) = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "invitation cancel push", (uint8_t *)&v34, 2u);
  }
  id v6 = +[GKReporter reporter];
  [v6 reportEvent:GKReporterDomainPushCount type:GKReporterPushCountInviteCancel];

  id v7 = [objc_alloc((Class)NSMutableArray) initWithCapacity:1];
  uint64_t v8 = [(GKRealTimeMultiplayerBulletin *)[GKRealTimeMultiplayerCancelBulletin alloc] initWithPushNotification:*(void *)(a1 + 32)];
  if ([(GKGameplayBulletin *)v8 isPushForLocalPlayers])
  {
    id v9 = +[GKBulletinController sharedController];
    uint64_t v10 = [(GKRealTimeMultiplayerCancelBulletin *)v8 removeAndReturnAssociatedInvite];
    id v11 = [v9 acceptedInviteManager];
    if (v10) {
      goto LABEL_16;
    }
    id v12 = [(GKRealTimeMultiplayerBulletin *)v8 sessionToken];
    uint64_t v10 = [v11 removeAndReturnInviteWithSessionToken:v12];

    if (!os_log_GKGeneral) {
      id v13 = (id)GKOSLoggers();
    }
    id v14 = os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      int v34 = 138412290;
      id v35 = v10;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Did Removed Invite from inviteManager?: %@", (uint8_t *)&v34, 0xCu);
    }
    if (v10)
    {
LABEL_16:
      if (!os_log_GKGeneral) {
        id v15 = (id)GKOSLoggers();
      }
      id v16 = os_log_GKTrace;
      if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
      {
        LOWORD(v34) = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "GKRealTimeMultiplayerCancelBulletin: loadBulletinsForPushNotification - attempting to display bulletin", (uint8_t *)&v34, 2u);
      }
      [(GKRealTimeMultiplayerCancelBulletin *)v8 copyDataFromAssociatedBulletin:v10];
      [(GKRealTimeMultiplayerCancelBulletin *)v8 assembleBulletin];
      if (!os_log_GKGeneral) {
        id v17 = (id)GKOSLoggers();
      }
      id v18 = os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        int v34 = 138412290;
        id v35 = v8;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Cancel Bulletin: %@", (uint8_t *)&v34, 0xCu);
      }
      [v7 addObject:v8];
      [v9 withdrawBulletin:v10];
    }
    id v19 = [(GKRealTimeMultiplayerBulletin *)v8 sessionToken];
    [v11 queueCancelledMultiplayerInviteSessionToken:v19];

    if (!os_log_GKGeneral) {
      id v20 = (id)GKOSLoggers();
    }
    uint64_t v21 = (void *)os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      unsigned int v22 = v21;
      id v23 = [(GKRealTimeMultiplayerBulletin *)v8 sessionToken];
      int v34 = 138412290;
      id v35 = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "queued canceled invite session token: %@", (uint8_t *)&v34, 0xCu);
    }
    uint64_t v24 = *(void *)(a1 + 40);
    if (v24)
    {
      (*(void (**)(uint64_t, id))(v24 + 16))(v24, v7);
      id v25 = [(GKRealTimeMultiplayerBulletin *)v8 clientNotification];
      CFStringRef v26 = [v25 objectForKeyedSubscript:@"x-gk-bundle-id"];

      unsigned int v27 = +[GKClientProxy clientForBundleID:v26];
      id v28 = [(GKRealTimeMultiplayerBulletin *)v8 clientNotification];
      [v27 cancelInviteWithNotification:v28];
    }
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v29 = (id)GKOSLoggers();
    }
    id v30 = (void *)os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      uint64_t v31 = v30;
      id v32 = [(GKGameplayBulletin *)v8 originatorPlayerID];
      long long v33 = [(GKGameplayBulletin *)v8 receiverPlayerID];
      int v34 = 138412546;
      id v35 = v32;
      __int16 v36 = 2112;
      long long v37 = v33;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "Ignoring cancel push not intended for this local player. inviter: %@, intendedReceiverPlayer: %@", (uint8_t *)&v34, 0x16u);
    }
  }
}

void sub_1001523B0(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers();
  }
  id v3 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "GKRealTimeMultiplayerSendBulletin loadBulletinsForPushNotification: withHandler:", buf, 2u);
  }
  id v4 = [*(id *)(a1 + 32) objectForKey:@"y"];
  int v5 = [v4 intValue];

  id v6 = objc_alloc((Class)NSData);
  id v7 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"s"];
  id v8 = [v6 initWithBase64EncodedString:v7 options:0];

  if (v5 > 2)
  {
    if (v5 == 3)
    {
      if (!os_log_GKGeneral) {
        id v51 = (id)GKOSLoggers();
      }
      v52 = os_log_GKTrace;
      if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_INFO, "GKRealTimeMultiplayerSendBulletin GKUpdateInvitationReason", buf, 2u);
      }
      v53 = [[GKRealTimeMultiplayerSendBulletin alloc] initWithPushNotification:*(void *)(a1 + 32)];
      v58[0] = _NSConcreteStackBlock;
      v58[1] = 3221225472;
      v58[2] = sub_100152B64;
      v58[3] = &unk_1002DC680;
      v59 = v53;
      id v60 = *(id *)(a1 + 32);
      id v32 = v53;
      +[GKClientProxy enumerateClientsUsingBlock:v58];
    }
    else
    {
      if (v5 != 100) {
        goto LABEL_46;
      }
      if (!os_log_GKGeneral) {
        id v30 = (id)GKOSLoggers();
      }
      uint64_t v31 = os_log_GKTrace;
      if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "GKRealTimeMultiplayerSendBulletin GKTTRMultiplayerLogRequestReason", buf, 2u);
      }
      id v32 = [[GKRealTimeMultiplayerSendBulletin alloc] initWithPushNotification:*(void *)(a1 + 32)];
      long long v33 = [(GKRealTimeMultiplayerBulletin *)v32 clientDictionary];
      int v34 = [v33 objectForKeyedSubscript:GKTTRBulletinKeyRadarID];
      uint64_t v35 = [v33 objectForKeyedSubscript:GKTTRBulletinKeyRequesterPlayerAlias];
      __int16 v36 = (void *)v35;
      if (v34 && v35)
      {
        long long v37 = [(GKRealTimeMultiplayerSendBulletin *)v32 bundleIdentifier];
        long long v38 = [(GKGameplayBulletin *)v32 receiverPlayer];
        long long v39 = +[GKService serviceForBundleID:v37 localPlayer:v38];
        v55[0] = _NSConcreteStackBlock;
        v55[1] = 3221225472;
        v55[2] = sub_100152CC0;
        v55[3] = &unk_1002D3B38;
        id v56 = v34;
        id v57 = v36;
        [v39 uploadLogsForRadar:v56 from:v57 handler:v55];
      }
    }

    goto LABEL_48;
  }
  if (v5 == 1)
  {
    if (!os_log_GKGeneral) {
      id v40 = (id)GKOSLoggers();
    }
    id v41 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "GKRealTimeMultiplayerSendBulletin GKClearInvitationReason", buf, 2u);
    }
    id v11 = +[GKBulletinController sharedController];
    v42 = [v11 getBulletinsOfType:objc_opt_class()];
    long long v61 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    id v43 = [v42 countByEnumeratingWithState:&v61 objects:v68 count:16];
    if (v43)
    {
      id v44 = v43;
      uint64_t v45 = *(void *)v62;
      do
      {
        __int16 v46 = 0;
        do
        {
          if (*(void *)v62 != v45) {
            objc_enumerationMutation(v42);
          }
          v47 = [v42 objectForKey:*(void *)(*((void *)&v61 + 1) + 8 * (void)v46)];
          v48 = [v47 sessionToken];
          unsigned int v49 = [v48 isEqualToData:v8];

          if (v49) {
            [v11 withdrawBulletin:v47];
          }

          __int16 v46 = (char *)v46 + 1;
        }
        while (v44 != v46);
        id v44 = [v42 countByEnumeratingWithState:&v61 objects:v68 count:16];
      }
      while (v44);
    }
    uint64_t v50 = *(void *)(a1 + 40);
    if (v50) {
      (*(void (**)(uint64_t, void))(v50 + 16))(v50, 0);
    }

    goto LABEL_39;
  }
  if (v5 == 2)
  {
    if (!os_log_GKGeneral) {
      id v9 = (id)GKOSLoggers();
    }
    uint64_t v10 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "GKRealTimeMultiplayerSendBulletin GKReconnectInvitationReason", buf, 2u);
    }
    id v11 = [*(id *)(a1 + 32) mutableCopy];
    [v11 setObject:&off_1002F2738 forKeyedSubscript:GKPushCommandKey];
    uint64_t v12 = GKInviteGameIDKey;
    v66[0] = GKInviteGameIDKey;
    uint64_t v13 = GKClientDataKey;
    id v14 = [v11 objectForKeyedSubscript:GKClientDataKey];
    id v15 = [v14 objectForKeyedSubscript:v12];
    v67[0] = v15;
    uint64_t v16 = GKInviteGameVersionKey;
    v66[1] = GKInviteGameVersionKey;
    id v17 = [v11 objectForKeyedSubscript:v13];
    id v18 = [v17 objectForKeyedSubscript:v16];
    v67[1] = v18;
    id v19 = +[NSDictionary dictionaryWithObjects:v67 forKeys:v66 count:2];
    [v11 setObject:v19 forKeyedSubscript:GKPushDataKey];

    id v20 = [v11 objectForKeyedSubscript:v13];
    uint64_t v21 = GKInvitePeerNATIPKey;
    unsigned int v22 = [v20 objectForKeyedSubscript:GKInvitePeerNATIPKey];
    [v11 setObject:v22 forKeyedSubscript:v21];

    id v23 = [v11 objectForKeyedSubscript:v13];
    uint64_t v24 = GKInvitePeerNATTypeKey;
    id v25 = [v23 objectForKeyedSubscript:GKInvitePeerNATTypeKey];
    [v11 setObject:v25 forKeyedSubscript:v24];

    CFStringRef v26 = [v11 objectForKeyedSubscript:v13];
    uint64_t v27 = GKInvitePeerBlobKey;
    id v28 = [v26 objectForKeyedSubscript:GKInvitePeerBlobKey];
    [v11 setObject:v28 forKeyedSubscript:v27];

    id v29 = +[NSNumber numberWithBool:1];
    [v11 setObject:v29 forKeyedSubscript:GKInviteIsReinvite];

    +[GKRealTimeMultiplayerInitiateBulletin loadBulletinsForPushNotification:v11 withHandler:*(void *)(a1 + 40)];
LABEL_39:

    goto LABEL_48;
  }
LABEL_46:
  uint64_t v54 = *(void *)(a1 + 40);
  if (v54) {
    (*(void (**)(uint64_t, void))(v54 + 16))(v54, 0);
  }
LABEL_48:
}

void sub_100152B64(uint64_t a1, void *a2, unsigned char *a3)
{
  id v5 = a2;
  uint64_t v6 = [v5 connection];
  if (v6)
  {
    id v7 = (void *)v6;
    id v8 = [v5 bundleIdentifier];
    id v9 = [*(id *)(a1 + 32) bundleIdentifier];
    unsigned int v10 = [v8 isEqualToString:v9];

    if (v10)
    {
      if (!os_log_GKGeneral) {
        id v11 = (id)GKOSLoggers();
      }
      uint64_t v12 = os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        uint64_t v13 = *(void *)(a1 + 32);
        int v14 = 138412546;
        id v15 = v5;
        __int16 v16 = 2112;
        uint64_t v17 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Found a matching client proxy(%@) for the update bulletin: %@", (uint8_t *)&v14, 0x16u);
      }
      [v5 updateInviteWithNotification:*(void *)(a1 + 40)];
      *a3 = 1;
    }
  }
}

void sub_100152CC0(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers();
  }
  id v3 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_DEBUG)) {
    sub_100153284(a1, v3);
  }
}

void sub_100152DB4()
{
  sub_100010D10();
  sub_100010D34((void *)&_mh_execute_header, v0, v1, "Invitation declined automatically because of incompatible invite version.", v2, v3, v4, v5, v6);
}

void sub_100152DE8()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "GKRealTimeMultiplayerInitiateBulletin - Error determining game location: %@", v2, v3, v4, v5, v6);
}

void sub_100152E50()
{
  sub_100010D10();
  sub_100010D34((void *)&_mh_execute_header, v0, v1, "Cannot create GKRealTimeMultiplayerInitiateBulletin - multiplayer allowed player restriction", v2, v3, v4, v5, v6);
}

void sub_100152E84()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "GKRealTimeMultiplayerInitiateBulletin - Error loading data: %@", v2, v3, v4, v5, v6);
}

void sub_100152EEC()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "loadLocalizedGameNameForBundleID - Error getting localized game name for bulletin: %@", v2, v3, v4, v5, v6);
}

void sub_100152F54()
{
  sub_100010D10();
  sub_100010D34((void *)&_mh_execute_header, v0, v1, "Multiplayer restricted to friends only and originatorPlayer is not a bi directional friend", v2, v3, v4, v5, v6);
}

void sub_100152F88()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "loadOriginatorPlayerWithCompletionHandler - Error getting originator player of bulletin: %@", v2, v3, v4, v5, v6);
}

void sub_100152FF0()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "Error loading data for GKRealTimeMultiplayerActionBulletin: %@", v2, v3, v4, v5, v6);
}

void sub_100153058()
{
  sub_100010D10();
  sub_100010D34((void *)&_mh_execute_header, v0, v1, "No Game Client found for sessionToken", v2, v3, v4, v5, v6);
}

void sub_10015308C()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "loadDataWithHandler - Error getting localized game name: %@", v2, v3, v4, v5, v6);
}

void sub_1001530F4()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "loadDataWithHandler - Error getting originator player: %@", v2, v3, v4, v5, v6);
}

void sub_10015315C()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "setInvitedPlayerRespondedWithCompletionHandler - failed to cancel invitation for session: %@", v2, v3, v4, v5, v6);
}

void sub_1001531C4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(const char **)(a2 + 64);
  uint64_t v5 = a3;
  uint8_t v6 = NSStringFromSelector(v4);
  int v7 = 138412546;
  uint64_t v8 = a1;
  __int16 v9 = 2112;
  unsigned int v10 = v6;
  _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "error:%@ while decoding invitedPlayers archive in %@", (uint8_t *)&v7, 0x16u);
}

void sub_100153284(uint64_t a1, NSObject *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  int v4 = 138412546;
  uint64_t v5 = v2;
  __int16 v6 = 2112;
  uint64_t v7 = v3;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Done uploadLogsForRadar: %@, from: %@", (uint8_t *)&v4, 0x16u);
}

void sub_1001535F0(id a1, NSManagedObjectContext *a2, id a3)
{
  int v4 = (void (**)(void))a3;
  id v6 = +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:a2];
  uint64_t v5 = [v6 challengeList];
  [v5 invalidate];

  v4[2](v4);
}

void sub_100153A40(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100153AF0;
  v6[3] = &unk_1002D3BC8;
  int v4 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  id v5 = v3;
  [v4 determineGameLocationViaCompatibilityMatrixWithCompletionHandler:v6];
}

void sub_100153AF0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10015759C();
    }
    [*(id *)(a1 + 32) setError:v3];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100153B8C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100155334(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!os_log_GKGeneral) {
    id v7 = (id)GKOSLoggers();
  }
  id v8 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "GKChallengeCompletedBulletin clearing challenge cache", buf, 2u);
  }
  __int16 v9 = +[NSPredicate predicateWithFormat:@"challengeID IN %@", *(void *)(a1 + 32)];
  unsigned int v10 = +[GKCacheObject objectsMatchingPredicate:v9 context:v5];

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1001554A8;
  v11[3] = &unk_1002DC6F8;
  id v12 = *(id *)(a1 + 40);
  [v10 enumerateObjectsUsingBlock:v11];
  v6[2](v6);
}

void sub_1001554A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 bundleID];

  if (v4)
  {
    id v5 = [v3 bundleID];
    id v6 = +[GKClientProxy clientForBundleID:v5];

    id v7 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKChallengeBulletin.m", 342, "+[GKChallengeCompletedBulletin loadBulletinsForPushNotification:withHandler:]_block_invoke");
    id v8 = +[GKPlayerCredentialController sharedController];
    __int16 v9 = [v8 pushCredentialForEnvironment:[*(id *)(a1 + 32) environment]];
    unsigned int v10 = [v9 playerInternal];
    id v11 = [v10 playerID];
    id v12 = [v6 transactionGroupWithName:v7 forPlayerID:v11];

    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10015565C;
    v13[3] = &unk_1002D51F8;
    id v14 = v3;
    [v12 performOnManagedObjectContext:v13];
    [v6 refreshContentsForDataType:1 userInfo:0];
  }
}

void sub_10015565C(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 challengeID];
  id v5 = +[NSPredicate predicateWithFormat:@"challengeID = %@", v4];
  id v6 = +[GKCacheObject objectsMatchingPredicate:v5 context:v3];

  [v6 makeObjectsPerformSelector:"invalidate"];
}

void sub_100155718(id *a1)
{
  [a1[4] refreshContentsForDataType:1 userInfo:0];
  id v2 = +[GKClientProxy gameCenterClient];
  id v3 = +[GKService serviceWithTransport:0 forClient:v2 localPlayer:0];

  id v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s:%d %s", "GKChallengeBulletin.m", 358, "+[GKChallengeCompletedBulletin loadBulletinsForPushNotification:withHandler:]_block_invoke_3");
  id v5 = +[GKDispatchGroup dispatchGroupWithName:v4];

  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id obj = a1[5];
  id v6 = [obj countByEnumeratingWithState:&v30 objects:v34 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v31;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v31 != v8) {
          objc_enumerationMutation(obj);
        }
        unsigned int v10 = *(void **)(*((void *)&v30 + 1) + 8 * i);
        id v11 = [a1[5] objectForKey:v10];
        id v12 = +[NSNull null];

        if (v10) {
          BOOL v13 = v10 == v12;
        }
        else {
          BOOL v13 = 1;
        }
        if (v13) {
          id v14 = 0;
        }
        else {
          id v14 = v10;
        }
        v23[0] = _NSConcreteStackBlock;
        v23[1] = 3221225472;
        v23[2] = sub_100155A78;
        v23[3] = &unk_1002D6E50;
        id v24 = v3;
        id v25 = v11;
        id v26 = v14;
        id v27 = a1[6];
        id v15 = v5;
        id v28 = v15;
        id v29 = a1[7];
        id v16 = v14;
        id v17 = v11;
        [v15 perform:v23];
      }
      id v7 = [obj countByEnumeratingWithState:&v30 objects:v34 count:16];
    }
    while (v7);
  }

  if (a1[8])
  {
    id v18 = [a1[4] replyQueue];
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_100155FF0;
    v20[3] = &unk_1002D3930;
    id v22 = a1[8];
    id v21 = a1[7];
    [v5 notifyOnQueue:v18 block:v20];
  }
}

void sub_100155A78(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100155B78;
  v8[3] = &unk_1002DC720;
  uint64_t v6 = *(void *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  id v10 = *(id *)(a1 + 64);
  id v11 = *(id *)(a1 + 72);
  id v12 = *(id *)(a1 + 32);
  id v13 = v3;
  id v7 = v3;
  [v4 getChallengeDetailsForChallengeIDs:v5 receiverID:v6 handler:v8];
}

void sub_100155B78(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v17 = a3;
  if (v17)
  {
    if (!os_log_GKGeneral) {
      id v6 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1001576DC();
    }
  }
  else
  {
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    id v7 = [v5 countByEnumeratingWithState:&v21 objects:v27 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v22;
      do
      {
        id v10 = 0;
        do
        {
          if (*(void *)v22 != v9) {
            objc_enumerationMutation(v5);
          }
          id v11 = *(void **)(*((void *)&v21 + 1) + 8 * (void)v10);
          id v12 = [(GKBulletin *)[GKChallengeCompletedBulletin alloc] initWithPushNotification:*(void *)(a1 + 32)];
          id v13 = [v11 challengeID];

          if (!v13)
          {
            if (!os_log_GKGeneral) {
              id v14 = (id)GKOSLoggers();
            }
            id v15 = os_log_GKError;
            if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              id v26 = v11;
              _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "We received a challenge with a nil ID back from getChallengeDetailsForChallengeIDs, and we're going to crash because of it. %@", buf, 0xCu);
            }
          }
          [(GKChallengeBulletin *)v12 setChallenge:v11];
          if ([(GKGameplayBulletin *)v12 isPushFromLocalPlayers])
          {
            id v16 = *(void **)(a1 + 40);
            v18[0] = _NSConcreteStackBlock;
            v18[1] = 3221225472;
            v18[2] = sub_100155E58;
            v18[3] = &unk_1002D3A70;
            id v19 = v12;
            id v20 = *(id *)(a1 + 48);
            [v16 perform:v18];
          }
          else if ([(GKGameplayBulletin *)v12 isPushForLocalPlayers])
          {
            [(GKChallengeBulletin *)v12 notifyApp];
          }

          id v10 = (char *)v10 + 1;
        }
        while (v8 != v10);
        id v8 = [v5 countByEnumeratingWithState:&v21 objects:v27 count:16];
      }
      while (v8);
    }
  }
  [*(id *)(a1 + 56) getChallengesForGameDescriptor:0 handler:0];
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_100155E58(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100155F20;
  v6[3] = &unk_1002D3DD0;
  id v7 = v4;
  id v8 = *(id *)(a1 + 40);
  id v9 = v3;
  id v5 = v3;
  [v7 determineGameLocationOnDeviceOrInStoreWithCompletionHandler:v6];
}

void sub_100155F20(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100157744();
    }
  }
  else
  {
    [*(id *)(a1 + 32) refreshData];
    if ([*(id *)(a1 + 32) gameLocation])
    {
      unsigned int v5 = [*(id *)(a1 + 32) isAppRunning];
      id v6 = *(void **)(a1 + 32);
      if (v5)
      {
        [v6 notifyApp];
      }
      else
      {
        [v6 assembleBulletin];
        [*(id *)(a1 + 40) addObject:*(void *)(a1 + 32)];
      }
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

uint64_t sub_100155FF0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100156850(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  unsigned int v5 = [*(id *)(a1 + 40) allObjects];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100156940;
  v7[3] = &unk_1002D5338;
  id v8 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  id v10 = *(id *)(a1 + 64);
  id v11 = v3;
  id v6 = v3;
  [v4 getChallengeDetailsForChallengeIDs:v5 handler:v7];
}

void sub_100156940(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v21 = a3;
  if (v21)
  {
    if (!os_log_GKGeneral) {
      id v6 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1001577AC();
    }
  }
  else
  {
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    id v7 = [v5 countByEnumeratingWithState:&v27 objects:v33 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v28;
      long long v22 = v24;
      do
      {
        id v10 = 0;
        do
        {
          if (*(void *)v28 != v9) {
            objc_enumerationMutation(v5);
          }
          id v11 = *(void **)(*((void *)&v27 + 1) + 8 * (void)v10);
          id v12 = [(GKBulletin *)[GKChallengeReceivedBulletin alloc] initWithPushNotification:*(void *)(a1 + 32)];
          id v13 = [v11 challengeID];

          if (!v13)
          {
            if (!os_log_GKGeneral) {
              id v14 = (id)GKOSLoggers();
            }
            id v15 = os_log_GKError;
            if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              long long v32 = v11;
              _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "We received a challenge with a nil ID back from getChallengeDetailsForChallengeIDs, and we're going to crash because of it. %@", buf, 0xCu);
            }
          }
          id v16 = [v11 game:v21, v22];
          unsigned __int8 v17 = [v16 supportsChallenges];

          if (v17)
          {
            [(GKChallengeBulletin *)v12 setChallenge:v11];
            if ([(GKGameplayBulletin *)v12 isPushForLocalPlayers])
            {
              id v18 = *(void **)(a1 + 40);
              v23[0] = _NSConcreteStackBlock;
              v23[1] = 3221225472;
              v24[0] = sub_100156C8C;
              v24[1] = &unk_1002D3A70;
              id v25 = v12;
              id v26 = *(id *)(a1 + 48);
              [v18 perform:v23];
            }
          }
          else
          {
            if (!os_log_GKGeneral) {
              id v19 = (id)GKOSLoggers();
            }
            id v20 = os_log_GKTrace;
            if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              long long v32 = v11;
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "We received a challenge from a game that developers did not opt in. So we are going to ignore it. Challenge: %@", buf, 0xCu);
            }
          }

          id v10 = (char *)v10 + 1;
        }
        while (v8 != v10);
        id v8 = [v5 countByEnumeratingWithState:&v27 objects:v33 count:16];
      }
      while (v8);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_100156C8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100156D54;
  v6[3] = &unk_1002D3DD0;
  id v7 = v4;
  id v8 = *(id *)(a1 + 40);
  id v9 = v3;
  id v5 = v3;
  [v7 determineGameLocationOnDeviceOrInStoreWithCompletionHandler:v6];
}

void sub_100156D54(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100157814();
    }
  }
  else if ([*(id *)(a1 + 32) gameLocation])
  {
    [*(id *)(a1 + 32) refreshData];
    unsigned int v5 = [*(id *)(a1 + 32) isAppRunning];
    id v6 = *(void **)(a1 + 32);
    if (v5)
    {
      [v6 notifyApp];
    }
    else
    {
      [v6 assembleBulletin];
      [*(id *)(a1 + 40) addObject:*(void *)(a1 + 32)];
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

uint64_t sub_100156E24(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10015759C()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "GKChallengeBulletin - determineGameLocationOnDeviceOrInStoreWithCompletionHandler - Error loading store item: %@", v2, v3, v4, v5, v6);
}

void sub_100157604(void *a1, uint64_t a2, const char *a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = objc_opt_class();
  id v6 = v5;
  id v7 = NSStringFromSelector(a3);
  int v8 = 138412546;
  id v9 = v5;
  __int16 v10 = 2112;
  id v11 = v7;
  _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%@ doesn't implement %@; Subclasses should set launch event",
    (uint8_t *)&v8,
    0x16u);
}

void sub_1001576DC()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "loadBulletinsForPushNotification - failed to load challenge details: %@", v2, v3, v4, v5, v6);
}

void sub_100157744()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "loadBulletinsForPushNotification - Error getting game location: %@", v2, v3, v4, v5, v6);
}

void sub_1001577AC()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "loadBulletinsForPushNotification: failed to load challenge details: %@", v2, v3, v4, v5, v6);
}

void sub_100157814()
{
  sub_100011064();
  sub_100011048((void *)&_mh_execute_header, v0, v1, "loadBulletinsForPushNotification - Error determining game location: %@", v2, v3, v4, v5, v6);
}

void sub_100157CE8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6 || ![v5 count])
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers();
    }
    int v8 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100157E30((uint64_t)v6, v8);
    }
    id v9 = objc_alloc_init(GKFriendSuggesterSettings);
  }
  else
  {
    id v9 = [[GKFriendSuggesterSettings alloc] initWithBagValues:v5];
  }
  __int16 v10 = v9;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100157E30(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to fetch suggestion settings: %@", (uint8_t *)&v2, 0xCu);
}

void sub_10015867C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_1001588FC;
  v21[3] = &unk_1002DC750;
  id v22 = *(id *)(a1 + 32);
  id v23 = *(id *)(a1 + 40);
  id v4 = v3;
  id v24 = v4;
  id v5 = objc_retainBlock(v21);
  id v6 = [*(id *)(a1 + 32) getRelationshipGameImage];
  if (v6)
  {
    id v7 = v6;
    int v8 = [v6 stringByReplacingOccurrencesOfString:@"{w}" withString:@"128"];

    id v9 = [v8 stringByReplacingOccurrencesOfString:@"{h}" withString:@"128"];

    id v10 = [objc_alloc((Class)NSURL) initWithString:v9];
    id v11 = [*(id *)(a1 + 32) getRelationshipGameAdamId];
    id v12 = [v9 _gkSHA256Hash];
    id v13 = +[NSString stringWithFormat:@"%@_%@", v11, v12];
    id v14 = +[GKService serviceWithTransport:0 forClient:*(void *)(a1 + 48) credential:0];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_100158A24;
    v17[3] = &unk_1002DC778;
    id v18 = v10;
    id v19 = v13;
    id v20 = v5;
    id v15 = v13;
    id v16 = v10;
    [v14 requestImageDataForURL:v16 subdirectory:@"GKBulletins" fileName:v15 handler:v17];
  }
  else
  {
    ((void (*)(void *, void))v5[2])(v5, 0);
  }
}

void sub_1001588FC(id *a1, uint64_t a2)
{
  [a1[4] setGameIcon:a2];
  [a1[4] assembleBulletin];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1001589D4;
  v4[3] = &unk_1002D3A48;
  id v5 = a1[4];
  id v6 = a1[5];
  id v7 = a1[6];
  id v3 = objc_retainBlock(v4);
  ((void (*)(void))v3[2])();
}

uint64_t sub_1001589D4(uint64_t a1)
{
  if (([*(id *)(a1 + 32) isMalformed] & 1) == 0) {
    [*(id *)(a1 + 40) addObject:*(void *)(a1 + 32)];
  }
  int v2 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);

  return v2();
}

void sub_100158A24(void *a1, void *a2)
{
  id v3 = a2;
  id v7 = v3;
  if (v3
    && +[GKImageRestrictions isAuthorizedForGamesWithImageData:v3])
  {
    id v4 = objc_alloc((Class)NSURL);
    id v5 = +[NSData _gkImageCachePathForURL:a1[4] subdirectory:@"GKBulletins" filename:a1[5]];
    id v6 = [v4 initWithString:v5];
  }
  else
  {
    id v6 = 0;
  }
  (*(void (**)(void))(a1[6] + 16))();
}

uint64_t sub_100158AF4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

id sub_100159790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4) {
    [*(id *)(a1 + 32) setObject:a4 forKeyedSubscript:@"targetId"];
  }
  id v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 32);

  return [v5 reportMetricsForActionID:v6 withAdditionalFields:v7];
}

void sub_100159978(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6 && [v5 count] == (id)1)
  {
    uint64_t v7 = [v5 objectAtIndexedSubscript:0];
    if ([v7 isArcadeGame]) {
      CFStringRef v8 = @"arcade";
    }
    else {
      CFStringRef v8 = 0;
    }
    [*(id *)(a1 + 32) setObject:v8 forKeyedSubscript:@"targetType"];
    goto LABEL_11;
  }
  if (!os_log_GKGeneral) {
    id v9 = (id)GKOSLoggers();
  }
  id v10 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = v10;
    id v11 = [v5 count];
    id v12 = [v6 localizedDescription];
    *(_DWORD *)buf = 134218242;
    id v17 = v11;
    __int16 v18 = 2112;
    id v19 = v12;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "GKActivityFeedBulletin getGameMetadataForBundleIDs returned %lu games and error: %@", buf, 0x16u);

LABEL_11:
  }
  uint64_t v13 = *(void *)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 32);
  v15.receiver = *(id *)(a1 + 48);
  v15.super_class = (Class)GKActivityFeedBulletin;
  [super reportMetricsForActionID:v13 withAdditionalFields:v14];
}

void sub_10015A20C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10015A238(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7 = a2;
  id v8 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v10 = [v7 count];
  if (v8 || !v10)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    id v11 = [v7 objectForKey:@"contact-association-ids"];
    id v12 = +[NSDate dateWithTimeIntervalSinceNow:a4];
    if (!os_log_GKGeneral) {
      id v13 = (id)GKOSLoggers();
    }
    uint64_t v14 = os_log_GKContacts;
    if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG)) {
      sub_10015B088(a1, v14);
    }
    objc_super v15 = [WeakRetained transactionGroupProvider];
    id v16 = v15[2]();

    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_10015A418;
    v20[3] = &unk_1002DC7F0;
    id v21 = v11;
    id v22 = v12;
    id v17 = *(id *)(a1 + 40);
    id v23 = 0;
    id v24 = v17;
    id v18 = v12;
    id v19 = v11;
    [v16 performOnManagedObjectContext:v20];
  }
}

void sub_10015A418(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  [v6 _gkClearAllEntriesOfEntity:@"SuggestedFriends"];
  id v7 = [[GKCDSuggestedFriends alloc] initWithContext:v6];

  [(GKCDSuggestedFriends *)v7 setContactAssociationIDs:a1[4]];
  [(GKCDSuggestedFriends *)v7 setExpirationDate:a1[5]];
  (*(void (**)(void))(a1[7] + 16))();
  v5[2](v5);
}

void sub_10015AAEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) networkRequester];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10015ABB8;
  v7[3] = &unk_1002DC840;
  id v9 = v3;
  uint64_t v5 = *(void *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  id v6 = v3;
  [v4 requestSortedContactAssociationIDs:v5 handler:v7];
}

void sub_10015ABB8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = [v5 count];
  if (a3 || !v6)
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers();
    }
    id v8 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10015B1AC(v8);
    }
  }
  else
  {
    [*(id *)(a1 + 32) setResult:v5];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10015B010(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Will rerank the following contact assocication IDs with the service: %@", (uint8_t *)&v2, 0xCu);
}

void sub_10015B088(uint64_t a1, NSObject *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Received reranked contact assocication IDs from service: %@", (uint8_t *)&v3, 0xCu);
}

void sub_10015B104(void *a1, void *a2)
{
  int v3 = a1;
  uint64_t v4 = [a2 cachedSortedAssociationIDs];
  int v5 = 138412290;
  id v6 = v4;
  _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Will not rerank contact association IDs with service since we have cached values: %@", (uint8_t *)&v5, 0xCu);
}

void sub_10015B1AC(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "No sorted contact association IDs found, falling back to original suggestions.", v1, 2u);
}

void sub_10015B8EC(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "GKBulletinNearbyInvite: initWithPlayer: - No message in Nearby Invite. Dropping on the floor", v1, 2u);
}

void sub_10015BBC8(id a1)
{
  qword_100329978 = (uint64_t)dispatch_queue_create("com.apple.gamed.GKBulletinController.file.queue", 0);

  _objc_release_x1();
}

void sub_10015BDB4(uint64_t a1)
{
  uint64_t v2 = +[NSFileManager defaultManager];
  int v3 = *(void **)(a1 + 32);
  uint64_t v4 = +[GKClientProxy gameCenterClient];
  int v5 = [v3 bulletinStorageFilePathForEnvironment:[v4 environment]];

  id v6 = [v5 stringByAppendingString:@".doomed"];
  if (!os_log_GKGeneral) {
    id v7 = (id)GKOSLoggers();
  }
  id v8 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    id v20 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Removing bulletin store \"%@\".", buf, 0xCu);
  }
  id v18 = 0;
  unsigned int v9 = [v2 moveItemAtPath:v5 toPath:v6 error:&v18];
  id v10 = v18;
  id v11 = v10;
  if (v9)
  {
    id v17 = v10;
    unsigned __int8 v12 = [v2 removeItemAtPath:v6 error:&v17];
    id v13 = v17;

    if ((v12 & 1) == 0)
    {
      if (!os_log_GKGeneral) {
        id v14 = (id)GKOSLoggers();
      }
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
        sub_10015D024();
      }
    }
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v15 = (id)GKOSLoggers();
    }
    id v16 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412802;
      id v20 = v5;
      __int16 v21 = 2112;
      id v22 = v6;
      __int16 v23 = 2112;
      id v24 = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Failed to move delayed requests store \"%@\" to \"%@\". ERROR: %@", buf, 0x20u);
    }
    id v13 = v11;
  }
}

void sub_10015C108(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  int v3 = +[GKClientProxy gameCenterClient];
  uint64_t v4 = [v2 bulletinStorageFilePathForEnvironment:[v3 environment]];

  if (!os_log_GKGeneral) {
    id v5 = (id)GKOSLoggers();
  }
  id v6 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "GKBulletinController+Common: updateSavedBulletins - Writing Bulletin Store", buf, 2u);
  }
  if (!os_log_GKGeneral) {
    id v7 = (id)GKOSLoggers();
  }
  id v8 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    id v19 = v4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "writing bulletin store \"%@\".", buf, 0xCu);
  }
  unsigned int v9 = [*(id *)(a1 + 32) bulletins];
  id v10 = +[NSDictionary dictionaryWithDictionary:v9];

  id v17 = 0;
  id v11 = +[NSKeyedArchiver archivedDataWithRootObject:v10 requiringSecureCoding:1 error:&v17];
  id v12 = v17;
  if (v12)
  {
    if (!os_log_GKGeneral) {
      id v13 = (id)GKOSLoggers();
    }
    id v14 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10015D114(v14);
    }
    id v15 = os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      id v16 = (id)GKOSLoggers();
      id v15 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
      sub_10015D09C();
    }
  }
  [v11 writeToFile:v4 atomically:1];
}

void sub_10015C45C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = +[GKClientProxy gameCenterClient];
  uint64_t v3 = [v1 bulletinStorageFilePathForEnvironment:[v2 environment]];

  if (!os_log_GKGeneral) {
    id v4 = (id)GKOSLoggers();
  }
  id v5 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v50 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Reading bulletin store \"%@\".", buf, 0xCu);
  }
  +[NSKeyedUnarchiver setClass:objc_opt_class() forClassName:@"GKGameInviteBulletinMultiplayerTurnBased"];
  +[NSKeyedUnarchiver setClass:objc_opt_class() forClassName:@"GKPlayerTurnTurnBasedMultiplayerBulletin"];
  +[NSKeyedUnarchiver setClass:objc_opt_class() forClassName:@"GKCompletedGameTurnBasedMultiplayerBulletinBased"];
  +[NSKeyedUnarchiver setClass:objc_opt_class() forClassName:@"GKUpdateTurnCountTurnBasedMultiplayerBulletin"];
  +[NSKeyedUnarchiver setClass:objc_opt_class() forClassName:@"GKClearTurnBasedMultiplayerBulletin"];
  uint64_t v42 = v3;
  +[NSKeyedUnarchiver setClass:objc_opt_class() forClassName:@"GKMatchChangedTurnBasedMultiplayerBulletin"];
  +[NSKeyedUnarchiver setClass:objc_opt_class() forClassName:@"GKRequestedExchangeTurnBasedMultiplayerBulletin"];
  +[NSKeyedUnarchiver setClass:objc_opt_class() forClassName:@"GKCompletedExchangeTurnBasedMultiplayerBulletin"];
  +[NSKeyedUnarchiver setClass:objc_opt_class() forClassName:@"GKCanceledExchangeTurnBasedMultiplayerBulletin"];
  +[NSKeyedUnarchiver setClass:objc_opt_class() forClassName:@"GKTurnReminderTurnBasedMultiplayerBulletin"];
  +[NSKeyedUnarchiver setClass:objc_opt_class() forClassName:@"GKBulletinChallengeReceive"];
  +[NSKeyedUnarchiver setClass:objc_opt_class() forClassName:@"GKBulletinChallengeComplete"];
  +[NSKeyedUnarchiver setClass:objc_opt_class() forClassName:@"GKBulletinMultiplayerTurnBasedInvite"];
  +[NSKeyedUnarchiver setClass:objc_opt_class() forClassName:@"GKBulletinMultiplayerTurnBasedTurn"];
  +[NSKeyedUnarchiver setClass:objc_opt_class() forClassName:@"GKBulletinMultiplayerTurnBasedCompleted"];
  +[NSKeyedUnarchiver setClass:objc_opt_class() forClassName:@"GKBulletinMultiplayerTurnBasedTurnCount"];
  +[NSKeyedUnarchiver setClass:objc_opt_class() forClassName:@"GKBulletinMultiplayerTurnBasedClear"];
  +[NSKeyedUnarchiver setClass:objc_opt_class() forClassName:@"GKBulletinMultiplayerTurnBasedMatchChanged"];
  +[NSKeyedUnarchiver setClass:objc_opt_class() forClassName:@"GKBulletinMultiplayerTurnBasedExchangeRequested"];
  +[NSKeyedUnarchiver setClass:objc_opt_class() forClassName:@"GKBulletinMultiplayerTurnBasedExchangeCompleted"];
  +[NSKeyedUnarchiver setClass:objc_opt_class() forClassName:@"GKBulletinMultiplayerTurnBasedExchangeCanceled"];
  +[NSKeyedUnarchiver setClass:objc_opt_class() forClassName:@"GKBulletinMultiplayerTurnBasedReminder"];
  +[NSKeyedUnarchiver setClass:objc_opt_class() forClassName:@"GKBulletinMultiplayerInviteInitiate"];
  +[NSKeyedUnarchiver setClass:objc_opt_class() forClassName:@"GKBulletinMultiplayerInviteAccept"];
  +[NSKeyedUnarchiver setClass:objc_opt_class() forClassName:@"GKBulletinMultiplayerInviteDecline"];
  +[NSKeyedUnarchiver setClass:objc_opt_class() forClassName:@"GKBulletinMultiplayerInviteCancel"];
  +[NSKeyedUnarchiver setClass:objc_opt_class() forClassName:@"GKFriendRequestReceivedBulletin"];
  +[NSKeyedUnarchiver setClass:objc_opt_class() forClassName:@"GKFriendRequestBulletin"];
  +[NSKeyedUnarchiver setClass:objc_opt_class() forClassName:@"GKFriendRequestAcceptedBulletin"];
  +[NSKeyedUnarchiver setClass:objc_opt_class() forClassName:@"GKFriendRequestCancelBulletin"];
  uint64_t v41 = objc_opt_class();
  uint64_t v40 = objc_opt_class();
  uint64_t v39 = objc_opt_class();
  uint64_t v38 = objc_opt_class();
  uint64_t v37 = objc_opt_class();
  uint64_t v36 = objc_opt_class();
  uint64_t v35 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  uint64_t v9 = objc_opt_class();
  uint64_t v10 = objc_opt_class();
  uint64_t v11 = objc_opt_class();
  uint64_t v12 = objc_opt_class();
  uint64_t v13 = objc_opt_class();
  uint64_t v14 = objc_opt_class();
  uint64_t v33 = v12;
  id v15 = (void *)v42;
  +[NSSet setWithObjects:](NSSet, "setWithObjects:", v41, v40, v39, v38, v37, v36, v35, v6, v7, v8, v9, v10, v11, v33, v13, v14, objc_opt_class(),
  id v16 = 0);
  id v17 = +[NSData dataWithContentsOfFile:v42];
  id v47 = 0;
  id v18 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v16 fromData:v17 error:&v47];
  id v19 = v47;
  if (!v19) {
    goto LABEL_9;
  }
  if (!os_log_GKGeneral) {
    id v20 = (id)GKOSLoggers();
  }
  __int16 v21 = (void *)os_log_GKError;
  if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
  {
    sub_10015D1D0((uint64_t)v19, a1, v21);
    if (v18) {
      goto LABEL_10;
    }
  }
  else
  {
LABEL_9:
    if (v18)
    {
LABEL_10:
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        id v22 = [v18 mutableCopy];

        id v18 = v22;
      }
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      __int16 v23 = [v18 allValues];
      id v24 = [v23 countByEnumeratingWithState:&v43 objects:v48 count:16];
      if (v24)
      {
        id v25 = v24;
        uint64_t v26 = *(void *)v44;
        do
        {
          for (i = 0; i != v25; i = (char *)i + 1)
          {
            if (*(void *)v44 != v26) {
              objc_enumerationMutation(v23);
            }
            long long v28 = *(void **)(*((void *)&v43 + 1) + 8 * i);
            if ([v28 conformsToProtocol:&OBJC_PROTOCOL___GKDeprecated])
            {
              long long v29 = [v28 recordID];
              [v18 removeObjectForKey:v29];
            }
          }
          id v25 = [v23 countByEnumeratingWithState:&v43 objects:v48 count:16];
        }
        while (v25);
      }

      long long v30 = [*(id *)(a1 + 32) bulletins];
      [v30 addEntriesFromDictionary:v18];

      id v15 = (void *)v42;
      goto LABEL_27;
    }
  }
  long long v31 = os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    id v32 = (id)GKOSLoggers();
    long long v31 = os_log_GKGeneral;
  }
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG)) {
    sub_10015D158(v42, v31);
  }
LABEL_27:
}

void sub_10015CE00(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  id v4 = [v6 matchID];
  unsigned int v5 = [v4 isEqualToString:*(void *)(a1 + 32)];

  if (v5) {
    [*(id *)(a1 + 40) withdrawBulletin:v6];
  }
}

void sub_10015CF9C(uint64_t a1, uint64_t a2, void *a3)
{
  id v7 = a3;
  id v4 = [v7 challenge];
  unsigned int v5 = [v4 challengeID];
  unsigned int v6 = [v5 isEqualToString:*(void *)(a1 + 32)];

  if (v6) {
    [*(id *)(a1 + 40) withdrawBulletin:v7];
  }
}

void sub_10015D024()
{
  sub_100011030();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Failed to remove delayed requests store \"%@\". ERROR: %@", v1, 0x16u);
}

void sub_10015D09C()
{
  sub_100011030();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Failed to write bulletin store at: \"%@\" with error:%@", v1, 0x16u);
}

void sub_10015D114(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "GKBulletinController+Common updateSavedBulletins - Failed to write bulletin store", v1, 2u);
}

void sub_10015D158(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "No result after unarchiving file at \"%@\".", (uint8_t *)&v2, 0xCu);
}

void sub_10015D1D0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = *(const char **)(a2 + 40);
  unsigned int v5 = a3;
  unsigned int v6 = NSStringFromSelector(v4);
  int v7 = 138412546;
  uint64_t v8 = a1;
  __int16 v9 = 2112;
  uint64_t v10 = v6;
  _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "error:%@ while decoding result archive in %@", (uint8_t *)&v7, 0x16u);
}

id sub_10015D418(uint64_t a1)
{
  return [*(id *)(a1 + 32) sharedController];
}

void sub_10015D500(id a1)
{
  qword_100329980 = objc_alloc_init(GKBulletinController);

  _objc_release_x1();
}

void sub_10015D770(uint64_t a1)
{
  id v2 = +[NSMutableDictionary dictionary];
  [*(id *)(a1 + 32) setBulletins:v2];
}

void sub_10015D7CC(id a1, BOOL a2, NSError *a3)
{
  id v4 = a3;
  if (v4)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers();
    }
    unsigned int v6 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      int v7 = v6;
      uint64_t v8 = [(NSError *)v4 description];
      int v11 = 138412290;
      uint64_t v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Error requesting authorization\nPlease make sure you read instructions in DEDUserNotificationNotifier.h\n[error info] %@", (uint8_t *)&v11, 0xCu);
    }
  }
  else if (!a2)
  {
    if (!os_log_GKGeneral) {
      id v9 = (id)GKOSLoggers();
    }
    uint64_t v10 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      LOWORD(v11) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "The user denied notification privileges.", (uint8_t *)&v11, 2u);
    }
  }
}

void sub_10015E8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10015E908(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10015E918(uint64_t a1)
{
}

void sub_10015E920(uint64_t a1)
{
  id v8 = [*(id *)(a1 + 32) bulletins];
  id v2 = [*(id *)(a1 + 40) notification];
  uint64_t v3 = [v2 request];
  id v4 = [v3 identifier];
  uint64_t v5 = [v8 objectForKey:v4];
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  int v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_10015EBCC(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) bulletins];
  id v2 = [*(id *)(a1 + 40) recordID];
  [v3 removeObjectForKey:v2];
}

void sub_10015F490(uint64_t a1, void *a2)
{
  uint64_t v13 = UNNotificationAttachmentOptionsHiddenFromDefaultExpandedViewKey;
  id v3 = a2;
  id v4 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v3 hiddenFromDefaultExpandedView]);
  uint64_t v14 = v4;
  uint64_t v5 = +[NSDictionary dictionaryWithObjects:&v14 forKeys:&v13 count:1];

  uint64_t v6 = [v3 identifier];
  int v7 = [v3 url];

  id v12 = 0;
  id v8 = +[UNNotificationAttachment attachmentWithIdentifier:v6 URL:v7 options:v5 error:&v12];
  id v9 = v12;

  if (v8)
  {
    [*(id *)(a1 + 32) addObject:v8];
  }
  else
  {
    if (!os_log_GKGeneral) {
      id v10 = (id)GKOSLoggers();
    }
    int v11 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10015FB90((uint64_t)v9, v11);
    }
  }
}

void sub_10015F91C(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) bulletins];
  id v2 = *(void **)(a1 + 40);
  id v3 = [v2 recordID];
  [v4 setObject:v2 forKey:v3];
}

void sub_10015FAA0(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) bulletins];
  [v1 removeAllObjects];
}

void sub_10015FB90(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to create UNNotificationAttachment: %@", (uint8_t *)&v2, 0xCu);
}

void sub_10015FD90(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers();
    }
    uint64_t v5 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10015FEE4((uint64_t)v3, v5);
    }
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    (*(void (**)(uint64_t, void))(v6 + 16))(v6, 0);
  }
}

void sub_10015FE28(os_log_t log)
{
  *(_WORD *)id v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Handling clear cache push notification", v1, 2u);
}

void sub_10015FE6C(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Unrecognized command sent to contacts integration bulletin: %d", (uint8_t *)v2, 8u);
}

void sub_10015FEE4(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Received error when attempting to clear caches: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100160088(uint64_t a1)
{
  int v2 = [*(id *)(a1 + 32) objectAtIndexedSubscript:1];
  unint64_t v3 = (unint64_t)[v2 integerValue];
  id v4 = +[PRMonogramColor availableColors];
  unint64_t v5 = v3 % (unint64_t)[v4 count];

  uint64_t v6 = +[UIApplication sharedApplication];
  BOOL v7 = [v6 userInterfaceLayoutDirection] == (id)1;

  double v8 = *(double *)(a1 + 72);
  id v9 = +[PRMonogramColor availableColors];
  id v10 = [v9 objectAtIndexedSubscript:v5];
  int v11 = +[CNAvatarImageRenderingScope scopeWithPointSize:scale:rightToLeft:style:color:](CNAvatarImageRenderingScope, "scopeWithPointSize:scale:rightToLeft:style:color:", v7, 0, v10, *(double *)(a1 + 56), *(double *)(a1 + 64), v8);

  id v12 = objc_alloc((Class)CNAvatarImageRenderer);
  uint64_t v13 = +[CNAvatarImageRendererSettings defaultSettings];
  id v14 = [v12 initWithSettings:v13];

  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_10016023C;
  v17[3] = &unk_1002DC960;
  uint64_t v15 = *(void *)(a1 + 40);
  id v18 = *(id *)(a1 + 48);
  id v16 = [v14 renderMonogramForString:v15 scope:v11 imageHandler:v17];
}

uint64_t sub_10016023C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100160388(id a1)
{
  qword_100329990 = +[NSSet setWithArray:&off_1002F2F78];

  _objc_release_x1();
}

void sub_100160F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a49, 8);
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose(&a67, 8);
  _Block_object_dispose(&STACK[0x200], 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100160FB4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100160FC4(uint64_t a1)
{
}

void sub_100160FCC(void *a1, void *a2)
{
  id v28 = a2;
  unint64_t v3 = [v28 name];
  unsigned int v4 = [v3 isEqualToString:GKActivityFeedMarkdownURLFormulationQueryIds];

  if (v4)
  {
    unint64_t v5 = [v28 value];
    uint64_t v6 = [v5 componentsSeparatedByString:@","];
    uint64_t v7 = *(void *)(a1[4] + 8);
    double v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;
  }
  else
  {
    id v9 = [v28 name];
    unsigned int v10 = [v9 isEqualToString:GKActivityFeedMarkdownURLFormulationQueryAdamId];

    if (v10)
    {
      uint64_t v11 = [v28 value];
      uint64_t v12 = a1[5];
    }
    else
    {
      uint64_t v13 = [v28 name];
      unsigned int v14 = [v13 isEqualToString:GKActivityFeedMarkdownURLFormulationQueryBundleId];

      if (v14)
      {
        uint64_t v11 = [v28 value];
        uint64_t v12 = a1[6];
      }
      else
      {
        uint64_t v15 = [v28 name];
        unsigned int v16 = [v15 isEqualToString:GKActivityFeedMarkdownURLFormulationQueryPlayerId];

        if (v16)
        {
          uint64_t v11 = [v28 value];
          uint64_t v12 = a1[7];
        }
        else
        {
          id v17 = [v28 name];
          unsigned int v18 = [v17 isEqualToString:GKActivityFeedMarkdownURLFormulationQueryName];

          if (v18)
          {
            uint64_t v11 = [v28 value];
            uint64_t v12 = a1[8];
          }
          else
          {
            id v19 = [v28 name];
            unsigned int v20 = [v19 isEqualToString:GKActivityFeedMarkdownURLFormulationQueryActivityId];

            if (v20)
            {
              uint64_t v11 = [v28 value];
              uint64_t v12 = a1[9];
            }
            else
            {
              __int16 v21 = [v28 name];
              unsigned int v22 = [v21 isEqualToString:GKActivityFeedMarkdownURLFormulationQueryActivityType];

              if (v22)
              {
                uint64_t v11 = [v28 value];
                uint64_t v12 = a1[10];
              }
              else
              {
                __int16 v23 = [v28 name];
                unsigned int v24 = [v23 isEqualToString:GKActivityFeedMarkdownURLFormulationQueryWidgetFamily];

                if (v24)
                {
                  uint64_t v11 = [v28 value];
                  uint64_t v12 = a1[11];
                }
                else
                {
                  id v25 = [v28 name];
                  unsigned int v26 = [v25 isEqualToString:GKMarkdownURLFormulationQueryWidgetId];

                  if (!v26) {
                    goto LABEL_21;
                  }
                  uint64_t v11 = [v28 value];
                  uint64_t v12 = a1[12];
                }
              }
            }
          }
        }
      }
    }
    uint64_t v27 = *(void *)(v12 + 8);
    unint64_t v5 = *(void **)(v27 + 40);
    *(void *)(v27 + 40) = v11;
  }

LABEL_21:
}

void sub_100162034(uint64_t a1, void *a2)
{
  id v7 = a2;
  unint64_t v3 = [v7 name];

  if (v3)
  {
    unsigned int v4 = [v7 value];
    unint64_t v5 = *(void **)(a1 + 32);
    uint64_t v6 = [v7 name];
    [v5 setObject:v4 forKeyedSubscript:v6];
  }
}

void sub_1001620D0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v7)
  {
    if (!os_log_GKGeneral) {
      id v10 = (id)GKOSLoggers();
    }
    uint64_t v11 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = v11;
      uint64_t v13 = [v7 localizedDescription];
      *(_DWORD *)buf = 138412290;
      uint64_t v40 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "GKWidgetEventListener: Not reporting metric because invokeASCAppLaunchTrampoline failed with error: %@", buf, 0xCu);
    }
  }
  else
  {
    uint64_t v14 = *(void *)(a1 + 32);
    v43[0] = @"widgetId";
    v43[1] = @"size";
    long long v45 = *(_OWORD *)(a1 + 40);
    v43[2] = @"name";
    v43[3] = @"targetId";
    uint64_t v15 = *(void *)(a1 + 56);
    uint64_t v44 = v14;
    uint64_t v46 = v15;
    unsigned int v16 = +[NSDictionary dictionaryWithObjects:&v44 forKeys:v43 count:4];
    id v17 = [v16 mutableCopy];

    if (v9)
    {
      [v17 setObject:v9 forKeyedSubscript:@"targetId"];
    }
    else
    {
      if (!os_log_GKGeneral) {
        id v18 = (id)GKOSLoggers();
      }
      id v19 = os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        unsigned int v20 = *(void **)(a1 + 32);
        uint64_t v21 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 138412546;
        uint64_t v40 = v20;
        __int16 v41 = 2112;
        uint64_t v42 = v21;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "GKWidgetEventListener: Unexpected nil value returned in targetId for widgetId: %@, size: %@", buf, 0x16u);
      }
    }
    v30[0] = @"eventType";
    v30[1] = @"actionType";
    v31[0] = @"click";
    v31[1] = @"navigate";
    v30[2] = @"pageType";
    v30[3] = @"widgetContext";
    uint64_t v22 = *(void *)(a1 + 40);
    uint64_t v32 = *(void *)(a1 + 32);
    id v33 = v17;
    void v30[4] = @"widgetId";
    v30[5] = @"size";
    uint64_t v34 = v32;
    uint64_t v35 = v22;
    v30[6] = @"targetId";
    v30[7] = @"destinationUrl";
    uint64_t v23 = *(void *)(a1 + 48);
    uint64_t v36 = *(void *)(a1 + 56);
    id v37 = v9;
    v30[8] = @"location";
    CFStringRef v27 = @"name";
    uint64_t v28 = v23;
    unsigned int v24 = +[NSDictionary dictionaryWithObjects:&v28 forKeys:&v27 count:1];
    long long v29 = v24;
    id v25 = +[NSArray arrayWithObjects:&v29 count:1];
    uint64_t v38 = v25;
    unsigned int v26 = +[NSDictionary dictionaryWithObjects:v31 forKeys:v30 count:9];

    [*(id *)(a1 + 64) reportMetricsEventWithTopic:GKReporterCSTopic shouldFlush:&__kCFBooleanFalse metricsFields:v26];
  }
}

void sub_100162418(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v7)
  {
    if (!os_log_GKGeneral) {
      id v10 = (id)GKOSLoggers();
    }
    uint64_t v11 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = v11;
      uint64_t v13 = [v7 localizedDescription];
      *(_DWORD *)buf = 138412290;
      CFStringRef v27 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "GKWidgetEventListener: Not reporting metric because invokeASCAppLaunchTrampoline failed with error: %@", buf, 0xCu);
    }
  }
  else
  {
    v20[0] = @"eventType";
    v20[1] = @"actionType";
    v21[0] = @"click";
    v21[1] = @"navigate";
    uint64_t v14 = *(void *)(a1 + 40);
    uint64_t v22 = *(void *)(a1 + 32);
    v20[2] = @"pageType";
    v20[3] = @"widgetContext";
    v18[0] = @"widgetId";
    v18[1] = @"size";
    v19[0] = v22;
    v19[1] = v14;
    v18[2] = @"targetId";
    v19[2] = *(void *)(a1 + 48);
    uint64_t v15 = +[NSDictionary dictionaryWithObjects:v19 forKeys:v18 count:3];
    long long v24 = *(_OWORD *)(a1 + 32);
    void v20[4] = @"widgetId";
    v20[5] = @"size";
    v20[6] = @"targetId";
    uint64_t v16 = *(void *)(a1 + 48);
    uint64_t v23 = v15;
    uint64_t v25 = v16;
    id v17 = +[NSDictionary dictionaryWithObjects:v21 forKeys:v20 count:7];

    [*(id *)(a1 + 56) reportMetricsEventWithTopic:GKReporterCSTopic shouldFlush:&__kCFBooleanFalse metricsFields:v17];
  }
}

uint64_t sub_100162BB4()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14GameDaemonCore18GKFilterableFriend_playerID);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100162C18()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14GameDaemonCore18GKFilterableFriend_friendBiDirectional);
}

uint64_t sub_100162C50()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14GameDaemonCore18GKFilterableFriend_friendPlayedWith);
}

id sub_100162C60()
{
  id v0 = objc_allocWithZone((Class)sub_1000179B8());
  return sub_100162CAC();
}

id sub_100162CAC()
{
  sub_1000179B8();
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v6 = &v1[OBJC_IVAR____TtC14GameDaemonCore18GKFilterableFriend_playerID];
  *uint64_t v6 = v4;
  v6[1] = v3;
  v1[OBJC_IVAR____TtC14GameDaemonCore18GKFilterableFriend_friendBiDirectional] = v2;
  v1[OBJC_IVAR____TtC14GameDaemonCore18GKFilterableFriend_friendPlayedWith] = v0;
  v8.receiver = v1;
  v8.super_class = ObjectType;
  return [super init];
}

uint64_t sub_100162D6C(void *a1)
{
  uint64_t result = sub_100163C38(a1);
  if (v4)
  {
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v6 = [v1 initWithPlayerID:v5 friendBiDirectional:[a1 friendBiDirectional] friendPlayedWith:[a1 friendPlayedWith]];

    return (uint64_t)v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100162E2C()
{
}

id MultiplayerActivityEventFilter.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return [super dealloc];
}

void *sub_100162F18()
{
  id v1 = [v0 entries];
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  objc_super v2 = v1;
  if ((uint64_t)[v1 count] < 1)
  {
LABEL_12:

    return _swiftEmptyArrayStorage;
  }
  unint64_t v3 = sub_100163084(v2);
  unint64_t v4 = v3;
  if (!(v3 >> 62))
  {
    uint64_t v5 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v5) {
      goto LABEL_5;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
  if (!v5) {
    goto LABEL_11;
  }
LABEL_5:
  uint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
  if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v7 = 0;
    do
    {
      if ((v4 & 0xC000000000000001) != 0) {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v8 = *(id *)(v4 + 8 * v7 + 32);
      }
      id v9 = v8;
      ++v7;
      id v10 = objc_allocWithZone((Class)type metadata accessor for GKFilterableFriend());
      sub_100162D6C(v9);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v5 != v7);
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

unint64_t sub_100163084(void *a1)
{
  unint64_t v14 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v2 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v8 = *(void *)(v2 - 8);
  __chkstk_darwin();
  unint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = a1;
  NSOrderedSet.makeIterator()();

  sub_100163C9C(&qword_100325FD0, (void (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator);
  dispatch thunk of IteratorProtocol.next()();
  while (v13)
  {
    sub_1000074D0(&v12, v11);
    sub_1000074E0((uint64_t)v11, (uint64_t)v9);
    sub_100163CE4(0, &qword_100325FD8);
    if ((swift_dynamicCast() & 1) == 0) {
      uint64_t v10 = 0;
    }
    sub_100016C38((uint64_t)v11);
    if (v10)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    dispatch thunk of IteratorProtocol.next()();
  }
  (*(void (**)(char *, uint64_t))(v8 + 8))(v4, v2);
  return v14;
}

void *sub_1001632A0(unint64_t a1, unsigned int a2)
{
  uint64_t v2 = (void *)a1;
  if (!a1) {
    goto LABEL_7;
  }
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_4;
    }
    goto LABEL_6;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v4)
  {
LABEL_6:
    swift_bridgeObjectRelease();
LABEL_7:
    swift_bridgeObjectRetain();
    return v2;
  }
LABEL_4:
  id v5 = sub_10016335C(a2);
  uint64_t v2 = sub_1001634F8((unint64_t)v2, (uint64_t (*)(id))v5, v6);
  swift_release();
  return v2;
}

uint64_t (*sub_10016335C(unsigned int a1))()
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  id v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 < 3) {
    return off_1002DCD98[a1];
  }
  static GKLog.daemon.getter();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v9 = 67109120;
    v10[3] = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Ignoring unsupported friends filter: %d", v9, 8u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return sub_100163730;
}

void *sub_1001634F8(unint64_t a1, uint64_t (*a2)(id), void *a3)
{
  unint64_t v6 = a1;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v7)
  {
    while (1)
    {
      unint64_t v8 = 0;
      uint64_t v16 = v6 & 0xFFFFFFFFFFFFFF8;
      unint64_t v17 = v6 & 0xC000000000000001;
      unint64_t v15 = v6;
      while (v17)
      {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_7:
        uint64_t v10 = v9;
        unint64_t v11 = v8 + 1;
        if (__OFADD__(v8, 1)) {
          goto LABEL_17;
        }
        long long v12 = a3;
        char v13 = a2(v9);
        if (v3)
        {
          swift_bridgeObjectRelease();

          swift_release();
          return v12;
        }
        if (v13)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          unint64_t v6 = v15;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
        ++v8;
        if (v11 == v7)
        {
          long long v12 = _swiftEmptyArrayStorage;
          goto LABEL_20;
        }
      }
      if (v8 < *(void *)(v16 + 16)) {
        break;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      if (!v7) {
        goto LABEL_19;
      }
    }
    id v9 = *(id *)(v6 + 8 * v8 + 32);
    goto LABEL_7;
  }
LABEL_19:
  long long v12 = _swiftEmptyArrayStorage;
LABEL_20:
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_100163730()
{
  return 1;
}

uint64_t sub_100163738(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC14GameDaemonCore18GKFilterableFriend_friendBiDirectional);
}

uint64_t sub_100163748(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC14GameDaemonCore18GKFilterableFriend_friendPlayedWith);
}

uint64_t variable initialization expression of GKLRUCache.cache()
{
  type metadata accessor for GKLRUDequeNode();

  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t variable initialization expression of OverlayServiceUtils.dashboardClientProxy()
{
  type metadata accessor for GameOverlayUIConfig.ServiceKind();
  sub_100163E90();
  __chkstk_darwin();
  sub_1000110F8();
  (*(void (**)(uint64_t, void))(v2 + 104))(v1 - v0, enum case for GameOverlayUIConfig.ServiceKind.dashboard(_:));
  id v3 = objc_allocWithZone((Class)type metadata accessor for DashboardClientProxy());
  return DashboardClientProxy.init(serviceKind:)();
}

void *variable initialization expression of PeerDiscovery.acceptedInBoundConnections()
{
  return &_swiftEmptyDictionarySingleton;
}

uint64_t variable initialization expression of GKMetricsPipeline.$__lazy_storage_$_metricsPipeline@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for MetricsPipeline();

  return sub_10000D97C(a1, 1, 1, v2);
}

uint64_t ArcadeStateMetricsFieldsProvider.category.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for MetricsFieldsProviderCategory.timeSensitive(_:);
  uint64_t v3 = type metadata accessor for MetricsFieldsProviderCategory();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t variable initialization expression of MatchReporter.matchQueue()
{
  return sub_1001639F0((void (*)(void))&static DispatchQoS.unspecified.getter);
}

unint64_t sub_100163934()
{
  unint64_t result = qword_100325F28;
  if (!qword_100325F28)
  {
    sub_100163988(&qword_100325F20);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100325F28);
  }
  return result;
}

uint64_t sub_100163988(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t variable initialization expression of MultiplayerActivityEventFilter.serialQueue()
{
  return sub_100011BB4((void (*)(void))&static DispatchQoS.default.getter);
}

uint64_t sub_1001639F0(void (*a1)(void))
{
  sub_100163CE4(0, (unint64_t *)&qword_100325F10);
  type metadata accessor for DispatchQoS();
  __chkstk_darwin();
  sub_1000110F8();
  a1();
  type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin();
  sub_1000110F8();
  sub_100163C9C((unint64_t *)&qword_100325F18, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000D938(&qword_100325F20);
  sub_100163934();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  sub_100163E90();
  __chkstk_darwin();
  sub_1000110F8();
  (*(void (**)(uint64_t, void))(v4 + 104))(v3 - v2, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:));
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t variable initialization expression of GKGameModeListener.gameModeNotificationToken()
{
  return 0xFFFFFFFFLL;
}

uint64_t variable initialization expression of GKGameModeListener.gameModeNotificationQueue()
{
  return sub_100011BB4((void (*)(void))&static DispatchQoS.default.getter);
}

uint64_t type metadata accessor for GKFilterableFriend()
{
  return self;
}

uint64_t sub_100163C0C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AppMetadataNetworkFetcher.init(batchTask:)(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_100163C38(void *a1)
{
  id v1 = [a1 playerID];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_100163C9C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100163CE4(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

__n128 initializeWithTake for AppMetadataNetworkFetcher(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for PlayerAndGameID(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 initializeWithTake for EntityCacheProvider.EntityCacheKey(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_100163D84(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100163DA4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

uint64_t sub_100163DE4(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100163E04(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

void sub_100163E40(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t _s14GameDaemonCore13PeerDiscoveryC8listener33_674604DC109586124CDCDC3171C542DDLLAA0D8ListenerCSgvpfi_0()
{
  return 0;
}

id sub_100163EB8()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for BiomeManager()) init];
  static BiomeManager.shared = (uint64_t)result;
  return result;
}

uint64_t *BiomeManager.shared.unsafeMutableAddressor()
{
  if (qword_100325E80 != -1) {
    swift_once();
  }
  return &static BiomeManager.shared;
}

id static BiomeManager.shared.getter()
{
  if (qword_100325E80 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static BiomeManager.shared;

  return v0;
}

id sub_100163FB8()
{
  id v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType();
  id v3 = v1;
  id v4 = [(id)BiomeLibrary() GameCenter];
  swift_unknownObjectRelease();
  id v5 = [v4 AchievementEarned];
  swift_unknownObjectRelease();
  id v6 = [v5 source];

  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v6;
  unint64_t v8 = (char *)objc_allocWithZone(ObjectType);
  id v9 = (id (**)(uint64_t))&v8[OBJC_IVAR___GKBiomeManager_achievementHandler];
  *id v9 = sub_100164448;
  v9[1] = (id (*)(uint64_t))v7;
  v12.receiver = v8;
  v12.super_class = ObjectType;
  id v10 = [super init];
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v10;
}

id BiomeManager.__allocating_init(achievementHandler:)(uint64_t a1, uint64_t a2)
{
  id v5 = (char *)objc_allocWithZone(v2);
  id v6 = &v5[OBJC_IVAR___GKBiomeManager_achievementHandler];
  *(void *)id v6 = a1;
  *((void *)v6 + 1) = a2;
  v8.receiver = v5;
  v8.super_class = v2;
  return [super init];
}

id BiomeManager.init(achievementHandler:)(uint64_t a1, uint64_t a2)
{
  ObjectType = (objc_class *)swift_getObjectType();
  id v6 = &v2[OBJC_IVAR___GKBiomeManager_achievementHandler];
  *(void *)id v6 = a1;
  *((void *)v6 + 1) = a2;
  v8.receiver = v2;
  v8.super_class = ObjectType;
  return [super init];
}

void BiomeManager.logEarned(achievement:)(void *a1)
{
  uint64_t v2 = v1;
  id v4 = [a1 rarityPercent];
  if (v4)
  {
    id v5 = v4;
    [v4 doubleValue];
    id v7 = [objc_allocWithZone((Class)NSNumber) initWithDouble:v6 / 100.0];
  }
  else
  {
    id v7 = 0;
  }
  id v8 = [a1 identifier];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  id v12 = objc_allocWithZone((Class)BMGameCenterAchievementEarned);
  id v13 = v7;
  id v14 = sub_10016437C(v9, v11, v7);
  (*(void (**)(void))(v2 + OBJC_IVAR___GKBiomeManager_achievementHandler))();
}

id sub_10016437C(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2)
  {
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v5 = 0;
  }
  id v6 = [v3 initWithAchievementID:v5 achievementRarityPercent:a3];

  return v6;
}

uint64_t type metadata accessor for BiomeManager()
{
  return self;
}

uint64_t sub_100164410()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_100164448(uint64_t a1)
{
  return [*(id *)(v1 + 16) sendEvent:a1];
}

uint64_t sub_10016459C(uint64_t a1, _OWORD *a2)
{
  *(void *)(v2 + 88) = 0;
  swift_weakInit();
  long long v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v2 + 32) = v5;
  *(void *)(v2 + 48) = *(void *)(a1 + 32);
  sub_1000074D0(a2, (_OWORD *)(v2 + 56));
  return v2;
}

uint64_t sub_100164654()
{
  sub_1001658C4(v0 + 16);
  sub_100016C38(v0 + 56);
  swift_weakDestroy();
  uint64_t v1 = *(void *)(v0 + 88);
  *(void *)(v0 + 88) = 0;
  if (v1)
  {
    do
    {
      if (!swift_isUniquelyReferenced_native()) {
        break;
      }
      uint64_t v2 = *(void *)(v1 + 88);
      swift_retain();
      swift_release();
      uint64_t v1 = v2;
    }
    while (v2);
  }
  swift_release();
  return v0;
}

uint64_t sub_1001646D0()
{
  uint64_t v0 = sub_100164654();

  return _swift_deallocClassInstance(v0, 104, 7);
}

id GKLRUCache.__allocating_init(capacity:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return GKLRUCache.init(capacity:)(a1);
}

id GKLRUCache.init(capacity:)(uint64_t a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v1[OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_mostRecentNode] = 0;
  *(void *)&v1[OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_leastRecentNode] = 0;
  uint64_t v4 = OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_cache;
  type metadata accessor for GKLRUDequeNode();
  long long v5 = v1;
  *(void *)&v1[v4] = Dictionary.init(dictionaryLiteral:)();
  *(void *)&v5[OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_capacity] = a1;
  sub_1001649A0();
  type metadata accessor for DispatchQoS();
  __chkstk_darwin();
  sub_1000110F8();
  static DispatchQoS.default.getter();
  type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin();
  sub_1000110F8();
  uint64_t v11 = _swiftEmptyArrayStorage;
  sub_1001649E0();
  sub_10000D938(&qword_100325F20);
  sub_100163934();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  sub_100011108();
  __chkstk_darwin();
  sub_1000110F8();
  (*(void (**)(uint64_t, void))(v8 + 104))(v7 - v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:));
  *(void *)&v5[OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_dispatchQueue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();

  v10.receiver = v5;
  v10.super_class = ObjectType;
  return [super init];
}

uint64_t type metadata accessor for GKLRUDequeNode()
{
  return self;
}

unint64_t sub_1001649A0()
{
  unint64_t result = qword_100325F10;
  if (!qword_100325F10)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100325F10);
  }
  return result;
}

unint64_t sub_1001649E0()
{
  unint64_t result = qword_100325F18;
  if (!qword_100325F18)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100325F18);
  }
  return result;
}

Swift::Void __swiftcall GKLRUCache.clear()()
{
  uint64_t v1 = *(NSObject **)&v0[OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_dispatchQueue];
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v0;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_100164CA0;
  *(void *)(v3 + 24) = v2;
  void v7[4] = sub_100164CB8;
  void v7[5] = v3;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_100164CE0;
  v7[3] = &unk_1002DCE28;
  uint64_t v4 = _Block_copy(v7);
  long long v5 = v0;
  swift_retain();
  swift_release();
  dispatch_sync(v1, v4);
  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
}

uint64_t sub_100164BA0(uint64_t a1)
{
  uint64_t v2 = OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_mostRecentNode;
  uint64_t v3 = *(void *)(a1 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_mostRecentNode);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 88);
    swift_retain_n();
    if (v4)
    {
      do
      {
        swift_release();
        uint64_t v5 = *(void *)(v4 + 88);
        swift_retain_n();
        swift_release();
        uint64_t v4 = v5;
      }
      while (v5);
    }
  }
  *(void *)(a1 + v2) = 0;
  swift_release();
  swift_beginAccess();
  sub_10000D938(&qword_100326198);
  Dictionary._Variant.removeAll(keepingCapacity:)(0);
  return swift_endAccess();
}

uint64_t sub_100164C68()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100164CA0()
{
  return sub_100164BA0(*(void *)(v0 + 16));
}

uint64_t sub_100164CA8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100164CB8()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100164CE0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t GKLRUCache.insertValue(_:forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  sub_100011108();
  uint64_t v7 = v6;
  __chkstk_darwin();
  sub_1000110F8();
  uint64_t v10 = v9 - v8;
  static DispatchWorkItemFlags.barrier.getter();
  sub_10000753C(a2, (uint64_t)v24);
  sub_1000074E0(a1, (uint64_t)v23);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v2;
  long long v12 = v24[1];
  *(_OWORD *)(v11 + 24) = v24[0];
  *(_OWORD *)(v11 + 40) = v12;
  *(void *)(v11 + 56) = v25;
  sub_1000074D0(v23, (_OWORD *)(v11 + 64));
  aBlock[4] = sub_10016516C;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100006530;
  aBlock[3] = &unk_1002DCE78;
  id v13 = _Block_copy(aBlock);
  uint64_t v14 = type metadata accessor for DispatchQoS();
  sub_100011108();
  uint64_t v16 = v15;
  __chkstk_darwin();
  sub_1000110F8();
  uint64_t v19 = v18 - v17;
  id v20 = v2;
  static DispatchQoS.unspecified.getter();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v19, v14);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v5);
  return swift_release();
}

uint64_t sub_100164F60(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = (uint64_t *)(a1 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_cache);
  swift_beginAccess();
  uint64_t v7 = sub_100169954(a2, *v6);
  if (v7)
  {
    uint64_t v8 = v7;
    swift_endAccess();
    sub_10016517C(v8);
    swift_beginAccess();
    sub_10016595C((uint64_t *)(v8 + 56), a3);
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    sub_10000753C(a2, (uint64_t)v13);
    sub_1000074E0((uint64_t)a3, (uint64_t)v12);
    type metadata accessor for GKLRUDequeNode();
    swift_allocObject();
    uint64_t v9 = sub_10016459C((uint64_t)v13, v12);
    swift_beginAccess();
    swift_retain();
    sub_1001DD25C();
    swift_endAccess();
    sub_1001652E4(v9);
    if (*(void *)(a1 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_capacity) < *(void *)(*v6 + 16))
    {
      uint64_t v10 = *(void *)(a1 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_leastRecentNode);
      if (v10)
      {
        swift_beginAccess();
        swift_retain();
        sub_10019BDB0(v10 + 16);
        swift_endAccess();
        swift_release();
        sub_100165384();
        swift_release();
      }
    }
  }
  return swift_release();
}

uint64_t sub_100165124()
{
  sub_100016C38(v0 + 24);
  sub_100016C38(v0 + 64);

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_10016516C()
{
  return sub_100164F60(*(void *)(v0 + 16), v0 + 24, (uint64_t *)(v0 + 64));
}

uint64_t sub_10016517C(uint64_t result)
{
  uint64_t v2 = OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_mostRecentNode;
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_mostRecentNode);
  if (v3) {
    BOOL v4 = v3 == result;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4) {
    return result;
  }
  uint64_t v5 = result;
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t v7 = Strong;
  uint64_t v8 = *(void *)(v5 + 88);
  if (!Strong)
  {
    swift_retain();
    if (!v8) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  *(void *)(Strong + 88) = v8;
  swift_retain_n();
  swift_release();
  if (v8) {
LABEL_7:
  }
    swift_weakAssign();
LABEL_8:
  swift_weakAssign();
  *(void *)(v5 + 88) = *(void *)(v1 + v2);
  swift_retain();
  swift_release();
  if (*(void *)(v1 + v2)) {
    swift_weakAssign();
  }
  *(void *)(v1 + v2) = v5;
  swift_release();
  uint64_t v9 = OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_leastRecentNode;
  uint64_t v10 = *(void *)(v1 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_leastRecentNode);
  if (v10)
  {
    swift_retain();
    swift_release();
    if (v10 == v5) {
      *(void *)(v1 + v9) = v7;
    }
  }
  else
  {
    swift_retain();
    swift_release();
  }

  return swift_release();
}

uint64_t sub_1001652E4(uint64_t a1)
{
  uint64_t v3 = OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_mostRecentNode;
  *(void *)(a1 + 88) = *(void *)(v1 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_mostRecentNode);
  swift_retain();
  swift_release();
  if (*(void *)(v1 + v3)) {
    swift_weakAssign();
  }
  *(void *)(v1 + v3) = a1;
  swift_release();
  if (!*(void *)(v1 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_leastRecentNode))
  {
    *(void *)(v1 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_leastRecentNode) = a1;
    swift_retain();
  }

  return swift_retain();
}

void sub_100165384()
{
  uint64_t v1 = OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_leastRecentNode;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_leastRecentNode);
  if (v2)
  {
    uint64_t Strong = swift_weakLoadStrong();
    uint64_t v4 = Strong;
    if (Strong)
    {
      *(void *)(Strong + 88) = 0;
      swift_retain();
      swift_release();
    }
    else
    {
      swift_retain();
    }
    swift_weakAssign();
    uint64_t v5 = OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_mostRecentNode;
    uint64_t v6 = *(void *)(v0 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_mostRecentNode);
    swift_release();
    if (v6) {
      BOOL v7 = v2 == v6;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      *(void *)(v0 + v5) = 0;
      swift_release();
    }
    *(void *)(v0 + v1) = v4;
    swift_release();
  }
}

uint64_t GKLRUCache.getValue(forKey:)()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

double sub_10016556C@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_cache);
  swift_beginAccess();
  uint64_t v4 = *v3;
  if (*(void *)(v4 + 16) && (unint64_t v5 = sub_10018EE34(), (v6 & 1) != 0))
  {
    uint64_t v7 = *(void *)(*(void *)(v4 + 56) + 8 * v5);
    swift_endAccess();
    uint64_t v8 = swift_retain();
    sub_10016517C(v8);
    swift_beginAccess();
    sub_1000074E0(v7 + 56, (uint64_t)a2);
    swift_release();
  }
  else
  {
    swift_endAccess();
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

double sub_10016564C@<D0>(_OWORD *a1@<X8>)
{
  return sub_10016556C(*(void *)(v1 + 16), a1);
}

id NetworkRequestEligibiltyChecker.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

void GKLRUCache.init()()
{
}

uint64_t type metadata accessor for GKLRUCache()
{
  return self;
}

uint64_t sub_1001658C4(uint64_t a1)
{
  return a1;
}

void *sub_100165918(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t *sub_10016595C(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        double result = (uint64_t *)swift_release();
        uint64_t *v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *double result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          uint64_t *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t sub_100165B8C(void *a1)
{
  long long v62 = a1;
  Dictionary.init(dictionaryLiteral:)();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v66.receiver = v1;
  v66.super_class = (Class)type metadata accessor for ScoreSubmissionBulletin();
  id v3 = [super initWithPushNotification:isa];

  if (!v3)
  {
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void **)(v4 - 8);
  uint64_t v6 = v5[8];
  __chkstk_darwin(v4, v7);
  unint64_t v8 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  int v9 = (char *)&v55 - v8;
  id v10 = v3;
  Date.init()();
  Class v11 = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v12 = (void (*)(char *, uint64_t))v5[1];
  id v60 = v5 + 1;
  long long v61 = v12;
  v12((char *)&v55 - v8, v4);
  [v10 setDate:v11];

  v59 = &v55;
  __chkstk_darwin(v13, v14);
  long long v63 = v10;
  id v15 = [v10 date];
  uint64_t v16 = sub_10000D938(&qword_1003261C8);
  __chkstk_darwin(v16 - 8, v17);
  sub_1001667B4();
  if (!v15)
  {
LABEL_20:
    sub_100011124();
    goto LABEL_21;
  }
  __chkstk_darwin(v18, v19);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v58 = (void (*)(char *, char *, uint64_t))v5[4];
  v58(v9, (char *)&v55 - v8, v4);
  sub_10000D97C((uint64_t)v9, 0, 1, v4);
  if (sub_10000DB14((uint64_t)v9, 1, v4) == 1)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    uint64_t result = sub_100011124();
    goto LABEL_23;
  }
  Date.advanced(by:)();
  id v20 = v61;
  v61(v9, v4);
  Class v21 = Date._bridgeToObjectiveC()().super.isa;
  v20((char *)&v55 - v8, v4);
  uint64_t v22 = v63;
  [v63 setExpirationDate:v21];

  sub_1001DD4AC(0x75532065726F6353, 0xEF64657474696D62, v22);
  uint64_t v23 = v62;
  uint64_t v24 = sub_100166714(v62, (SEL *)&selRef_formattedValue);
  if (!v25)
  {
    uint64_t v64 = (uint64_t)[v23 value];
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
  }
  v56._countAndFlagsBits = v24;
  v56._object = v25;
  id v26 = [v23 player];
  if (!v26)
  {
    id v27 = [self localPlayer];
    id v26 = [v27 internal];
  }
  id v57 = v26;
  v59 = (uint64_t *)sub_100166714(v26, (SEL *)&selRef_alias);
  long long v29 = v28;
  if (qword_100325E88 != -1) {
    swift_once();
  }
  long long v30 = (void *)qword_10032DA50;
  id v31 = [v63 date];
  __chkstk_darwin(v31, v32);
  sub_1001667B4();
  if (!v33) {
    goto LABEL_22;
  }
  __chkstk_darwin(v33, v34);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v58((char *)v26, (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  sub_10000D97C((uint64_t)v26, 0, 1, v4);
  uint64_t result = sub_10000DB14((uint64_t)v26, 1, v4);
  if (result == 1)
  {
LABEL_23:
    __break(1u);
    return result;
  }
  if (v29) {
    uint64_t v36 = v29;
  }
  else {
    uint64_t v36 = (void *)0xE90000000000003ELL;
  }
  if (v29) {
    uint64_t v37 = (uint64_t)v59;
  }
  else {
    uint64_t v37 = 0x6E776F6E6B6E753CLL;
  }
  Class v38 = Date._bridgeToObjectiveC()().super.isa;
  v61((char *)v26, v4);
  id v39 = [v30 stringFromDate:v38];

  uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v42 = v41;

  uint64_t v64 = 0;
  uint64_t v65 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  uint64_t v64 = 0x206465726F6353;
  uint64_t v65 = 0xE700000000000000;
  String.append(_:)(v56);
  swift_bridgeObjectRelease();
  v43._countAndFlagsBits = 544108320;
  v43._object = (void *)0xE400000000000000;
  String.append(_:)(v43);
  uint64_t v44 = v62;
  id v45 = [v62 leaderboardIdentifier];
  uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v48 = v47;

  v49._countAndFlagsBits = v46;
  v49._object = v48;
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  v50._countAndFlagsBits = 544825888;
  v50._object = (void *)0xE400000000000000;
  String.append(_:)(v50);
  v51._countAndFlagsBits = v37;
  v51._object = v36;
  String.append(_:)(v51);
  swift_bridgeObjectRelease();
  v52._countAndFlagsBits = 544497952;
  v52._object = (void *)0xE400000000000000;
  String.append(_:)(v52);
  v53._countAndFlagsBits = v40;
  v53._object = v42;
  String.append(_:)(v53);
  swift_bridgeObjectRelease();
  uint64_t v54 = v63;
  sub_1001DD4B8(v64, v65, v63);
  [v54 setHasSound:0];

  return (uint64_t)v54;
}

void sub_10016625C()
{
  id v0 = [objc_allocWithZone((Class)NSDateFormatter) init];
  sub_1001666B0(0x73733A6D6D3A4848, 0xEC0000005353532ELL, v0);
  qword_10032DA50 = (uint64_t)v0;
}

id sub_1001662C0()
{
  if (qword_100325E88 != -1) {
    swift_once();
  }
  id v0 = (void *)qword_10032DA50;

  return v0;
}

void sub_100166344()
{
}

void sub_1001663B0(unint64_t a1)
{
  id v2 = [self shared];
  if (!v2)
  {
LABEL_20:
    __break(1u);
    return;
  }
  id v3 = v2;
  unsigned int v4 = [v2 notifyAboutScoreSubmissions];

  if (v4)
  {
    if (a1 >> 62)
    {
LABEL_17:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      if (v5)
      {
LABEL_5:
        uint64_t v6 = self;
        uint64_t v7 = 4;
        while (1)
        {
          if ((a1 & 0xC000000000000001) != 0) {
            id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v8 = *(id *)(a1 + 8 * v7);
          }
          int v9 = v8;
          uint64_t v10 = v7 - 3;
          if (__OFADD__(v7 - 4, 1))
          {
            __break(1u);
            goto LABEL_17;
          }
          id v11 = objc_allocWithZone((Class)type metadata accessor for ScoreSubmissionBulletin());
          id v12 = v9;
          uint64_t v13 = (void *)sub_100165B8C(v12);
          id v14 = [v6 sharedController];
          if (!v14) {
            break;
          }
          id v15 = v14;
          [v14 presentBulletin:v13];

          ++v7;
          if (v10 == v5) {
            goto LABEL_12;
          }
        }
        __break(1u);
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v5) {
        goto LABEL_5;
      }
    }
LABEL_12:
    swift_bridgeObjectRelease();
  }
}

void sub_1001665A8()
{
}

void sub_100166614()
{
}

id sub_100166654()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ScoreSubmissionBulletin();
  return [super dealloc];
}

uint64_t type metadata accessor for ScoreSubmissionBulletin()
{
  return self;
}

void sub_1001666B0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a3 setDateFormat:v4];
}

uint64_t sub_100166714(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0;
  }
  id v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

unint64_t sub_100166774()
{
  unint64_t result = qword_1003261D0;
  if (!qword_1003261D0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1003261D0);
  }
  return result;
}

uint64_t sub_1001667CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a4) {
    return 0;
  }
  sub_100166A7C();
  if (sub_100011144()) {
    return 0;
  }
  uint64_t v8 = sub_100011144();
  if (v8) {
    return 0;
  }
  uint64_t v12 = sub_100166B1C(v8, v9, v10, v11, a3, a4);
  uint64_t result = sub_100166B1C(v12, v13, v14, v15, a1, a2);
  uint64_t v17 = result;
  unint64_t v18 = *(void *)(v12 + 16);
  if (!v18)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  unint64_t v19 = 0;
  unint64_t v20 = 0;
  unint64_t v21 = 0;
  unint64_t v22 = *(void *)(result + 16);
  do
  {
    if (v21 >= v18)
    {
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    if (v20 >= v22) {
      goto LABEL_32;
    }
    uint64_t v23 = (uint64_t *)(v12 + 32 + 16 * v21);
    uint64_t result = *v23;
    uint64_t v24 = v23[1];
    uint64_t v25 = (void *)(v17 + 32 + 16 * v20);
    BOOL v26 = result == *v25 && v24 == v25[1];
    if (v26 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      ++v21;
      ++v20;
    }
    else
    {
      BOOL v26 = v20 == 0;
      unint64_t v20 = 0;
      if (v26) {
        unint64_t v19 = v21 + 1;
      }
      else {
        unint64_t v19 = v21;
      }
      unint64_t v21 = v19;
    }
  }
  while ((uint64_t)v21 < (uint64_t)v18);
  uint64_t result = swift_bridgeObjectRelease();
  if ((uint64_t)v19 >= (uint64_t)v18)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((v19 & 0x8000000000000000) != 0) {
    goto LABEL_33;
  }
  unint64_t v27 = *(void *)(v12 + 16);
  if (v27 >= v19 && v27 >= v18)
  {
    sub_10000D938(&qword_1003261E0);
    sub_100166AC8();
    uint64_t v29 = BidirectionalCollection<>.joined(separator:)();
    swift_bridgeObjectRelease();
    return v29;
  }
LABEL_34:
  __break(1u);
  return result;
}

unint64_t sub_100166A7C()
{
  unint64_t result = qword_1003261D8;
  if (!qword_1003261D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003261D8);
  }
  return result;
}

unint64_t sub_100166AC8()
{
  unint64_t result = qword_1003261E8;
  if (!qword_1003261E8)
  {
    sub_100163988(&qword_1003261E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003261E8);
  }
  return result;
}

uint64_t sub_100166B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  return StringProtocol.components<A>(separatedBy:)(va, v5, v5, v4, v4);
}

uint64_t sub_100166B44(uint64_t a1)
{
  v2[10] = a1;
  v2[11] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  v2[16] = swift_task_alloc();
  v2[17] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for NWError();
  v2[18] = v4;
  v2[19] = *(void *)(v4 - 8);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for NWBrowser.State();
  v2[22] = v5;
  v2[23] = *(void *)(v5 - 8);
  uint8_t v2[24] = swift_task_alloc();
  return _swift_task_switch(sub_100166CF4, 0, 0);
}

uint64_t sub_100166CF4()
{
  objc_super v66 = v0;
  unint64_t v1 = *(void *)(v0[11] + 32);
  v0[25] = v1;
  if (!v1) {
    goto LABEL_28;
  }
  uint64_t v3 = v0[23];
  uint64_t v2 = v0[24];
  uint64_t v4 = v0[22];
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 16))(v2, v0[10], v4);
  int v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v2, v4);
  if (v5 != enum case for NWBrowser.State.failed(_:))
  {
    if (v5 == enum case for NWBrowser.State.ready(_:))
    {
      swift_retain();
      os_log_type_t v23 = static os_log_type_t.info.getter();
      static GKLog.match.getter();
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = v23;
      BOOL v26 = os_log_type_enabled(v24, v23);
      uint64_t v27 = v0[15];
      uint64_t v29 = v0[12];
      uint64_t v28 = v0[13];
      if (v26)
      {
        uint64_t v61 = v0[12];
        uint64_t v59 = v0[15];
        long long v30 = (uint8_t *)sub_100016FF0();
        uint64_t v64 = sub_100011BBC();
        *(_DWORD *)long long v30 = 136315138;
        v0[7] = sub_100174CE4(0x20726573776F7242, 0xEE002E7964616572, &v64);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Nearby - %s", v30, 0xCu);
        sub_1000172D0();
        sub_100010D7C();
        sub_100010D7C();

        (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v59, v61);
      }
      else
      {

        (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
      }
LABEL_27:
      swift_release();
      goto LABEL_28;
    }
    if (v5 == enum case for NWBrowser.State.cancelled(_:))
    {
      swift_retain();
      os_log_type_t v39 = static os_log_type_t.info.getter();
      static GKLog.match.getter();
      uint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = v39;
      BOOL v42 = os_log_type_enabled(v40, v39);
      uint64_t v44 = v0[13];
      uint64_t v43 = v0[14];
      uint64_t v45 = v0[12];
      if (v42)
      {
        uint64_t v62 = v0[14];
        uint64_t v46 = (uint8_t *)sub_100016FF0();
        uint64_t v64 = sub_100011BBC();
        *(_DWORD *)uint64_t v46 = 136315138;
        v0[6] = sub_100174CE4(0xD000000000000011, 0x80000001002AF7E0, &v64);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "Nearby - %s", v46, 0xCu);
        sub_1000172D0();
        sub_100010D7C();
        sub_100010D7C();

        (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v62, v45);
      }
      else
      {

        (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
      }
      goto LABEL_27;
    }
    (*(void (**)(void, void))(v0[23] + 8))(v0[24], v0[22]);
LABEL_28:
    sub_100017008();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    Swift::String v56 = (uint64_t (*)(void))v0[1];
    return v56();
  }
  uint64_t v6 = v0[24];
  uint64_t v7 = v0[21];
  uint64_t v8 = v0[19];
  uint64_t v9 = (_DWORD *)v0[20];
  uint64_t v10 = v0[18];
  (*(void (**)(uint64_t, void))(v0[23] + 96))(v6, v0[22]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v7, v6, v10);
  *uint64_t v9 = -65569;
  (*(void (**)(_DWORD *, void, uint64_t))(v8 + 104))(v9, enum case for NWError.dns(_:), v10);
  swift_retain();
  LOBYTE(v6) = static NWError.== infix(_:_:)();
  uint64_t v11 = *(void (**)(_DWORD *, uint64_t))(v8 + 8);
  v0[26] = v11;
  v0[27] = (v8 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v11(v9, v10);
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (v6)
  {
    uint64_t v64 = 0;
    unint64_t v65 = 0xE000000000000000;
    _StringGuts.grow(_:)(34);
    v0[4] = 0;
    v0[5] = 0xE000000000000000;
    v13._countAndFlagsBits = sub_1001687AC();
    String.append(_:)(v13);
    _print_unlocked<A, B>(_:_:)();
    v14._countAndFlagsBits = 0x726174736572202CLL;
    v14._object = (void *)0xEC000000676E6974;
    String.append(_:)(v14);
    uint64_t v15 = (void (*)(void, void))v0[5];
    uint64_t v63 = v0[4];
    static GKLog.match.getter();
    swift_bridgeObjectRetain_n();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = v12;
    BOOL v18 = os_log_type_enabled(v16, v12);
    uint64_t v19 = v0[17];
    uint64_t v21 = v0[12];
    uint64_t v20 = v0[13];
    if (v18)
    {
      uint64_t v58 = v0[12];
      unint64_t v22 = (uint8_t *)sub_100016FF0();
      uint64_t v64 = sub_100011BBC();
      *(_DWORD *)unint64_t v22 = 136315138;
      swift_bridgeObjectRetain();
      v0[9] = sub_100174CE4(v63, (unint64_t)v15, &v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Nearby - %s", v22, 0xCu);
      swift_arrayDestroy();
      sub_100010D7C();
      sub_100010D7C();

      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v58);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    }
    swift_bridgeObjectRelease();
    uint64_t v47 = v0[11];
    NWBrowser.cancel()();
    uint64_t v48 = v47;
    sub_100167798();
    goto LABEL_25;
  }
  uint64_t v64 = 0;
  unint64_t v65 = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  v0[2] = 0;
  v0[3] = 0xE000000000000000;
  v31._countAndFlagsBits = sub_1001687AC();
  String.append(_:)(v31);
  _print_unlocked<A, B>(_:_:)();
  v32._countAndFlagsBits = 0x6970706F7473202CLL;
  v32._object = (void *)0xEA0000000000676ELL;
  String.append(_:)(v32);
  uint64_t v33 = v0[2];
  unint64_t v1 = v0[3];
  static GKLog.match.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v34 = Logger.logObject.getter();
  BOOL v35 = os_log_type_enabled(v34, v12);
  uint64_t v36 = v0[16];
  uint64_t v15 = (void (*)(void, void))v0[12];
  uint64_t v37 = v0[13];
  if (v35)
  {
    uint64_t v60 = v0[16];
    Class v38 = (uint8_t *)sub_100016FF0();
    id v57 = v15;
    uint64_t v64 = sub_100011BBC();
    uint64_t v15 = (void (*)(void, void))v33;
    *(_DWORD *)Class v38 = 136315138;
    swift_bridgeObjectRetain();
    v0[8] = sub_100174CE4(v33, v1, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v34, v12, "Nearby - %s", v38, 0xCu);
    sub_1000172D0();
    sub_100010D7C();
    sub_100010D7C();

    (*(void (**)(uint64_t, void))(v37 + 8))(v60, v57);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, void))(v37 + 8))(v36, v15);
  }
  swift_bridgeObjectRelease();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  v0[28] = Strong;
  if (!Strong)
  {
    uint64_t v48 = v0[25];
    NWBrowser.cancel()();
LABEL_25:
    sub_1000184C8();
    v15(v48, v1);
    goto LABEL_28;
  }
  uint64_t v50 = v0[21];
  uint64_t v51 = v0[18];
  uint64_t v52 = v0[19];
  sub_100168740();
  v0[29] = swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v53, v50, v51);
  uint64_t v54 = (void *)swift_task_alloc();
  v0[30] = v54;
  *uint64_t v54 = v0;
  v54[1] = sub_1001675E0;
  return sub_100180CB4();
}

uint64_t sub_1001675E0()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  swift_task_dealloc();
  swift_unknownObjectRelease();
  swift_errorRelease();
  return _swift_task_switch(sub_1001676E4, 0, 0);
}

uint64_t sub_1001676E4()
{
  uint64_t v3 = *(void *)(v1 + 200);
  NWBrowser.cancel()();
  sub_1000184C8();
  v2(v3, v0);
  sub_100017008();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v1 + 8);
  return v4();
}

uint64_t sub_100167798()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for NWBrowser.Descriptor();
  sub_100011108();
  uint64_t v4 = v3;
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (uint64_t *)((char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for Logger();
  sub_100011108();
  uint64_t v11 = v10;
  __chkstk_darwin(v12, v13);
  os_log_type_t v14 = sub_10001762C();
  static GKLog.match.getter();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = v14;
  if (os_log_type_enabled(v15, v14))
  {
    uint64_t v25 = v2;
    os_log_type_t v17 = (uint8_t *)sub_100016FF0();
    uint64_t v18 = sub_100011BBC();
    uint64_t v26 = v0;
    uint64_t v27 = v18;
    uint64_t v24 = v9;
    *(_DWORD *)os_log_type_t v17 = 136315138;
    uint64_t v19 = sub_100174CE4(0xD000000000000011, 0x80000001002AF7C0, &v27);
    sub_1001687C0(v19);
    uint64_t v2 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Nearby - %s", v17, 0xCu);
    swift_arrayDestroy();
    uint64_t v1 = v26;
    sub_100010D7C();
    sub_100010D7C();

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v0, v24);
  }
  else
  {

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v0, v9);
  }
  type metadata accessor for NWParameters();
  swift_allocObject();
  NWParameters.init()();
  NWParameters.includePeerToPeer.setter();
  *uint64_t v8 = 0x5F2E64656D61675FLL;
  v8[1] = 0xEB00000000706374;
  v8[2] = 0;
  v8[3] = 0;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v8, enum case for NWBrowser.Descriptor.bonjourWithTXTRecord(_:), v2);
  type metadata accessor for NWBrowser();
  swift_allocObject();
  swift_retain();
  uint64_t v20 = NWBrowser.init(for:using:)();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  sub_100168384((uint64_t)sub_1001683CC);
  NWBrowser.stateUpdateHandler.setter();
  swift_release_n();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  sub_100168384((uint64_t)sub_1001683D4);
  NWBrowser.browseResultsChangedHandler.setter();
  swift_release_n();
  *(void *)(v1 + 32) = v20;
  swift_retain();
  swift_release();
  sub_1001649A0();
  uint64_t v21 = (void *)static OS_dispatch_queue.main.getter();
  NWBrowser.start(queue:)();

  swift_release();
  return swift_release();
}

uint64_t sub_100167B44(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NWBrowser.State();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2, v5);
  uint64_t v6 = sub_10000D938(&qword_100326298);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v11 = result;
    uint64_t v12 = type metadata accessor for TaskPriority();
    sub_10000D97C((uint64_t)v9, 1, 1, v12);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
    unint64_t v13 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    os_log_type_t v14 = (char *)swift_allocObject();
    *((void *)v14 + 2) = 0;
    *((void *)v14 + 3) = 0;
    *((void *)v14 + 4) = v11;
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(&v14[v13], (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
    sub_100006CBC();
    return swift_release();
  }
  return result;
}

uint64_t sub_100167D18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_100168790;
  return sub_100166B44(a5);
}

uint64_t sub_100167DB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D938(&qword_100326298);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v9 = result;
    uint64_t v10 = type metadata accessor for TaskPriority();
    sub_10000D97C((uint64_t)v7, 1, 1, v10);
    uint64_t v11 = (void *)swift_allocObject();
    _OWORD v11[2] = 0;
    v11[3] = 0;
    void v11[4] = v9;
    void v11[5] = a1;
    v11[6] = a2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1001D9DDC();
    return swift_release();
  }
  return result;
}

uint64_t sub_100167ED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[4] = a5;
  void v6[5] = a6;
  v6[2] = a1;
  v6[3] = a4;
  return _swift_task_switch(sub_100167EFC, 0, 0);
}

uint64_t sub_100167EFC()
{
  sub_100010DA4();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  *(void *)(v0 + 48) = Strong;
  if (Strong)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 56) = v2;
    void *v2 = v0;
    v2[1] = sub_100167FE8;
    return sub_10017F51C();
  }
  else
  {
    **(unsigned char **)(v0 + 16) = 1;
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
}

uint64_t sub_100167FE8()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  swift_task_dealloc();
  swift_unknownObjectRelease();
  return _swift_task_switch(sub_1001680D0, 0, 0);
}

uint64_t sub_1001680D0()
{
  **(unsigned char **)(v0 + 16) = *(void *)(v0 + 48) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001680F8()
{
  uint64_t v1 = type metadata accessor for Logger();
  sub_100011108();
  uint64_t v3 = v2;
  __chkstk_darwin(v4, v5);
  os_log_type_t v6 = sub_10001762C();
  static GKLog.match.getter();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = v6;
  if (os_log_type_enabled(v7, v6))
  {
    uint64_t v9 = (uint8_t *)sub_100016FF0();
    uint64_t v12 = sub_100011BBC();
    *(_DWORD *)uint64_t v9 = 136315138;
    uint64_t v10 = sub_100174CE4(0xD000000000000015, 0x80000001002AF7A0, &v12);
    sub_1001687C0(v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Nearby - %s", v9, 0xCu);
    swift_arrayDestroy();
    sub_100010D7C();
    sub_100010D7C();
  }

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
  if (*(void *)(v0 + 32))
  {
    swift_retain();
    sub_100168384(0);
    NWBrowser.stateUpdateHandler.setter();
    swift_release();
    if (*(void *)(v0 + 32))
    {
      swift_retain();
      sub_100168384(0);
      NWBrowser.browseResultsChangedHandler.setter();
      swift_release();
      if (*(void *)(v0 + 32))
      {
        swift_retain();
        NWBrowser.cancel()();
        swift_release();
      }
    }
  }
  *(void *)(v0 + 32) = 0;
  return swift_release();
}

uint64_t sub_1001682F8()
{
  sub_10016835C(v0 + 16);
  swift_release();

  return _swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for PeerBrowser()
{
  return self;
}

uint64_t sub_10016835C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100168384(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_100168394()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001683CC(uint64_t a1)
{
  return sub_100167B44(a1);
}

uint64_t sub_1001683D4(uint64_t a1, uint64_t a2)
{
  return sub_100167DB4(a1, a2);
}

uint64_t sub_1001683DC()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10016842C()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100168790;
  uint64_t v5 = sub_100168794();
  return sub_100167ED8(v5, v6, v7, v8, v2, v3);
}

uint64_t sub_1001684E4()
{
  uint64_t v1 = type metadata accessor for NWBrowser.State();
  sub_100011108();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = (v6 + 40) & ~v6;
  uint64_t v8 = v7 + *(void *)(v5 + 64);
  uint64_t v9 = v6 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v7, v1);

  return _swift_deallocObject(v0, v8, v9);
}

uint64_t sub_100168590()
{
  uint64_t v2 = *(void *)(type metadata accessor for NWBrowser.State() - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10016867C;
  uint64_t v5 = sub_100168794();
  return sub_100167D18(v5, v6, v7, v8, v3);
}

uint64_t sub_10016867C()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

unint64_t sub_100168740()
{
  unint64_t result = qword_1003262C8;
  if (!qword_1003262C8)
  {
    type metadata accessor for NWError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003262C8);
  }
  return result;
}

uint64_t sub_100168794()
{
  return v0;
}

unint64_t sub_1001687AC()
{
  return 0xD000000000000014;
}

uint64_t sub_1001687C0(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return v1 - 96;
}

void static OverlayServiceUtils.showDashboard(game:deepLink:launchContext:)()
{
  sub_100011BD4();
  uint64_t v0 = type metadata accessor for GameOverlayUIConfig.ServiceKind();
  sub_100011108();
  uint64_t v2 = v1;
  __chkstk_darwin(v3, v4);
  sub_1000110F8();
  uint64_t v7 = v6 - v5;
  swift_bridgeObjectRetain();
  sub_10000D938(&qword_1003262D0);
  if (sub_100169934())
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;
    swift_unknownObjectRetain();
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v10 = sub_100010DC8();
    sub_100169138(v10, v11, v9, v12);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_10000D938(&qword_1003262D8);
  if (sub_100169934())
  {
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;
    swift_unknownObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_100169138(v19, v13, v15, isUniquelyReferenced_nonNull_native);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v7, enum case for GameOverlayUIConfig.ServiceKind.dashboard(_:), v0);
  id v17 = objc_allocWithZone((Class)type metadata accessor for DashboardClientProxy());
  uint64_t v18 = (void *)DashboardClientProxy.init(serviceKind:)();
  dispatch thunk of DashboardClientProxy.showDashboard(initialState:sceneIdentifier:usingLocalEndPoint:canDismissWithGesture:)();

  swift_bridgeObjectRelease();
  sub_100010DB0();
}

Swift::Void __swiftcall OverlayServiceUtils.emitMultiplayerEvent(message:)(Swift::String message)
{
  sub_100011BD4();
  type metadata accessor for Logger();
  sub_100011108();
  uint64_t v37 = v2;
  uint64_t v38 = v1;
  __chkstk_darwin(v1, v3);
  sub_1000110F8();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = type metadata accessor for InGameBannerData.BannerType();
  sub_100011108();
  uint64_t v9 = v8;
  __chkstk_darwin(v10, v11);
  sub_1000110F8();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = type metadata accessor for InGameBannerData();
  sub_100011108();
  uint64_t v39 = v16;
  __chkstk_darwin(v17, v18);
  sub_1000110F8();
  uint64_t v21 = v20 - v19;
  unint64_t v22 = self;
  id v23 = [v22 shared];
  if (v23)
  {
    uint64_t v24 = v23;
    unsigned int v25 = [v23 multiplayerInGameOverlayEnabled];

    if (!v25)
    {
LABEL_11:
      sub_100010DB0();
      return;
    }
    id v26 = [v22 shared];
    if (v26)
    {
      uint64_t v27 = v26;
      unsigned int v28 = [v26 isInternalBuild];

      if (v28)
      {
        (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))(v14, enum case for InGameBannerData.BannerType.general(_:), v7);
        swift_bridgeObjectRetain();
        InGameBannerData.init(type:title:body:image:clipData:)();
        uint64_t v29 = static InGameBannerData.encode(bannerData:)();
        if (v30 >> 60 == 15)
        {
          static GKLog.general.getter();
          Swift::String v31 = Logger.logObject.getter();
          os_log_type_t v32 = static os_log_type_t.error.getter();
          uint64_t v33 = v39;
          if (os_log_type_enabled(v31, v32))
          {
            uint64_t v34 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v34 = 0;
            _os_log_impl((void *)&_mh_execute_header, v31, v32, "emitMultiplayerEvent: InGameBannerData could not be encoded", v34, 2u);
            swift_slowDealloc();
          }

          (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v6, v38);
        }
        else
        {
          uint64_t v35 = v29;
          unint64_t v36 = v30;
          DashboardClientProxy.showInGameBanner(data:sceneIdentifier:)();
          sub_100169260(v35, v36);
          uint64_t v33 = v39;
        }
        (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v21, v15);
      }
      goto LABEL_11;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

id OverlayServiceUtils.init()()
{
  ObjectType = (objc_class *)swift_getObjectType();
  type metadata accessor for GameOverlayUIConfig.ServiceKind();
  sub_100011108();
  __chkstk_darwin(v2, v3);
  sub_1000110F8();
  uint64_t v6 = OBJC_IVAR___GKOverlayServiceUtils_dashboardClientProxy;
  (*(void (**)(uint64_t, void))(v7 + 104))(v5 - v4, enum case for GameOverlayUIConfig.ServiceKind.dashboard(_:));
  objc_allocWithZone((Class)type metadata accessor for DashboardClientProxy());
  uint64_t v8 = v0;
  *(void *)&v0[v6] = DashboardClientProxy.init(serviceKind:)();

  v10.receiver = v8;
  v10.super_class = ObjectType;
  return [super init];
}

uint64_t sub_100168F2C(uint64_t result, unsigned char **a2)
{
  uint64_t v2 = *a2;
  unsigned char *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_100168F3C(uint64_t a1, uint64_t a2, char a3)
{
  sub_10018EE34();
  sub_100011180();
  if (v9)
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v10 = v7;
  char v11 = v8;
  sub_10000D938(&qword_1003272F0);
  if (!sub_100017028(a3 & 1)) {
    goto LABEL_5;
  }
  unint64_t v12 = sub_10018EE34();
  if ((v11 & 1) != (v13 & 1))
  {
LABEL_10:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v12;
LABEL_5:
  uint64_t v14 = *v3;
  if (v11)
  {
    uint64_t v15 = *(void *)(v14 + 56);
    uint64_t result = swift_release();
    *(void *)(v15 + 8 * v10) = a1;
  }
  else
  {
    sub_10000753C(a2, (uint64_t)v17);
    return sub_10018F480(v10, (uint64_t)v17, a1, v14);
  }
  return result;
}

uint64_t sub_100169030(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_1000087B0(a2, a3);
  sub_100011180();
  if (v11)
  {
    __break(1u);
LABEL_12:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  uint64_t v12 = v9;
  char v13 = v10;
  sub_10000D938(&qword_100326330);
  if (sub_100017028(a4 & 1))
  {
    sub_1000087B0(a2, a3);
    sub_100017650();
    if (!v15) {
      goto LABEL_12;
    }
    uint64_t v12 = v14;
  }
  if (v13)
  {
    uint64_t v16 = *(void *)(*(void *)v4 + 56);
    uint64_t result = swift_release();
    *(void *)(v16 + 8 * v12) = a1;
  }
  else
  {
    unint64_t v18 = sub_100010DC8();
    sub_10018F4D0(v18, v19, a3, a1, v20);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100169138(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v11 = sub_1000087B0(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  sub_10000D938(&qword_100326338);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_1000087B0(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_11:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v18;
LABEL_5:
  uint64_t v20 = *v5;
  if (v17)
  {
    uint64_t v21 = *(void *)(v20 + 56);
    uint64_t result = swift_unknownObjectRelease();
    *(void *)(v21 + 8 * v16) = a1;
  }
  else
  {
    sub_10018F4D0(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100169260(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100169274(a1, a2);
  }
  return a1;
}

uint64_t sub_100169274(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t type metadata accessor for OverlayServiceUtils()
{
  return self;
}

void sub_1001692F0()
{
  sub_100011BD4();
  char v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for NWEndpoint();
  sub_100011108();
  uint64_t v9 = v8;
  __chkstk_darwin(v10, v11);
  sub_1000110F8();
  uint64_t v14 = v13 - v12;
  sub_10018EE74();
  sub_100011180();
  if (v17)
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v18 = v15;
  char v19 = v16;
  sub_10000D938(&qword_100326328);
  if (sub_100017028(v2 & 1))
  {
    unint64_t v20 = sub_10018EE74();
    if ((v19 & 1) == (v21 & 1))
    {
      unint64_t v18 = v20;
      goto LABEL_5;
    }
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
LABEL_5:
  uint64_t v22 = *v0;
  if (v19)
  {
    uint64_t v23 = *(void *)(v22 + 56);
    swift_release();
    *(void *)(v23 + 8 * v18) = v6;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v14, v4, v7);
    sub_10018F4E8(v18, v14, v6, v22);
  }
  sub_100010DB0();
}

void sub_10016942C()
{
  sub_100011BD4();
  char v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = sub_1000172EC(v12, v10);
  sub_10018EEF4(v13, v14, v15, v16);
  sub_100011180();
  if (v19)
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v20 = v17;
  char v21 = v18;
  sub_10000D938(&qword_1003270C0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(v3 & 1, (Swift::Int)v0)) {
    goto LABEL_5;
  }
  uint64_t v22 = sub_100010DC8();
  unint64_t v24 = sub_10018EEF4(v22, v23, v7, v5);
  if ((v21 & 1) != (v25 & 1))
  {
LABEL_11:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v20 = v24;
LABEL_5:
  uint64_t v26 = *v0;
  if (v21)
  {
    uint64_t v27 = *(void *)(v26 + 56);
    swift_unknownObjectRelease();
    *(void *)(v27 + 8 * v20) = v1;
    sub_100010DB0();
  }
  else
  {
    sub_10018F5D8(v20, v11, v9, v7, v5, v1, v26);
    swift_bridgeObjectRetain();
    sub_100010DB0();
    swift_bridgeObjectRetain();
  }
}

uint64_t sub_100169554(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v9 = sub_1000172EC(a1, a2);
  sub_1000087B0(v9, v10);
  sub_100011180();
  if (v13)
  {
    __break(1u);
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  uint64_t v14 = v11;
  char v15 = v12;
  sub_10000D938((uint64_t *)&unk_1003272D0);
  if (sub_100017028(a4 & 1))
  {
    sub_1000087B0(a2, a3);
    sub_100017650();
    if (!v17) {
      goto LABEL_14;
    }
    uint64_t v14 = v16;
  }
  if (v15)
  {
    uint64_t v18 = *(void *)(*(void *)v4 + 56) + 40 * v14;
    return sub_1001698D8(v5, v18);
  }
  else
  {
    unint64_t v20 = sub_100010DC8();
    sub_10018F61C(v20, v21, a3, v5, v22);
    return swift_bridgeObjectRetain();
  }
}

id sub_100169660(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v9 = *v4;
  sub_10018EFB4();
  sub_100011180();
  if (v12)
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v13 = v10;
  char v14 = v11;
  sub_10000D938(&qword_100326318);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v9)) {
    goto LABEL_5;
  }
  unint64_t v15 = sub_10018EFB4();
  if ((v14 & 1) != (v16 & 1))
  {
LABEL_11:
    sub_100169898();
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v13 = v15;
LABEL_5:
  char v17 = (void *)*v5;
  if (v14)
  {
    uint64_t v18 = (uint64_t *)(v17[7] + 16 * v13);
    id result = (id)swift_bridgeObjectRelease();
    *uint64_t v18 = a1;
    v18[1] = a2;
  }
  else
  {
    sub_10018F674(v13, (uint64_t)a3, a1, a2, v17);
    return a3;
  }
  return result;
}

void sub_100169784()
{
  sub_100011BD4();
  uint64_t v1 = v0;
  char v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  Swift::Int v12 = *v0;
  sub_1000087B0(v6, v4);
  sub_100011180();
  if (v15)
  {
    __break(1u);
LABEL_12:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v16 = v13;
  char v17 = v14;
  sub_10000D938(&qword_100326310);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v3 & 1, v12))
  {
    sub_1000087B0(v7, v5);
    sub_100017650();
    if (!v19) {
      goto LABEL_12;
    }
    unint64_t v16 = v18;
  }
  uint64_t v20 = *v1;
  if (v17)
  {
    uint64_t v21 = (uint64_t *)(*(void *)(v20 + 56) + 16 * v16);
    swift_bridgeObjectRelease();
    *uint64_t v21 = v11;
    v21[1] = v9;
    sub_100010DB0();
  }
  else
  {
    sub_10018F6B8(v16, v7, v5, v11, v9, v20);
    sub_100010DB0();
    swift_bridgeObjectRetain();
  }
}

unint64_t sub_100169898()
{
  unint64_t result = qword_100326320;
  if (!qword_100326320)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100326320);
  }
  return result;
}

uint64_t sub_1001698D8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100169934()
{
  return swift_dynamicCast();
}

uint64_t sub_100169954(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (sub_10018EE34(), (v2 & 1) != 0)) {
    return swift_retain();
  }
  else {
    return 0;
  }
}

uint64_t sub_100169998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (sub_1000087B0(a1, a2), (v3 & 1) != 0)) {
    return swift_retain();
  }
  else {
    return 0;
  }
}

double sub_1001699DC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = sub_1000087B0(a1, a2), (v7 & 1) != 0))
  {
    uint64_t v8 = *(void *)(a3 + 56) + 32 * v6;
    sub_1000074E0(v8, (uint64_t)a4);
  }
  else
  {
    double result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

double sub_100169A40@<D0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  if (*(void *)(a1 + 16) && (unint64_t v4 = sub_10018EE34(), (v5 & 1) != 0))
  {
    uint64_t v6 = *(void *)(a1 + 56) + 32 * v4;
    sub_1000074E0(v6, (uint64_t)a2);
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_100169AA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  unint64_t v4 = sub_1000087B0(a1, a2);
  if ((v5 & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(void *)(*(void *)(a3 + 56) + 16 * v4);
  swift_bridgeObjectRetain();
  return v6;
}

uint64_t sub_100169AFC(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (sub_10018EE74(), (v2 & 1) != 0)) {
    return swift_retain();
  }
  else {
    return 0;
  }
}

BOOL static GameIdentifierType.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void GameIdentifierType.hash(into:)(uint64_t a1, char a2)
{
}

BOOL sub_100169B7C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static GameIdentifierType.__derived_enum_equals(_:_:)(*a1, *a2);
}

uint64_t sub_100169B88()
{
  return AppMetadataFetcher.FetcherError.hashValue.getter(*v0);
}

void sub_100169B90(uint64_t a1)
{
  GameIdentifierType.hash(into:)(a1, *v1);
}

Swift::Int _s14GameDaemonCore18AppMetadataFetcherC0F5ErrorO9hashValueSivg_0(char a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_100169BE4()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

id sub_100169C38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for AppMetadataCache();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id result = (id)sub_1001CFE3C(a1, a2, a3, a4);
  if (!v5)
  {
    uint64_t v12 = (uint64_t)result;
    unint64_t v13 = sub_100171748();
    char v14 = (void *)swift_allocObject();
    v14[2] = a5;
    v14[3] = v12;
    void v14[4] = v13;
    char v15 = (char *)objc_allocWithZone((Class)type metadata accessor for AppMetadataFetcher());
    swift_retain();
    swift_unknownObjectRetain();
    return sub_100170DA0(v12, (uint64_t)&unk_1003264C8, (uint64_t)v14, v15);
  }
  return result;
}

uint64_t AppMetadataFetcher.__allocating_init(cache:network:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100169E58(a1, a2, a3, (uint64_t (*)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100170C20);
}

uint64_t AppMetadataFetcher.init(cache:network:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100169E58(a1, a2, a3, (uint64_t (*)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100170E44);
}

uint64_t sub_100169E58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v10 = *(void *)(a3 + 24);
  uint64_t v11 = *(void *)(a3 + 32);
  uint64_t v12 = sub_100170D50(a3, v10);
  __chkstk_darwin(v12, v12);
  char v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v15 + 16))(v14);
  uint64_t v16 = a4(a1, v14, v4, ObjectType, v10, a2, v11);
  sub_100016C38(a3);
  return v16;
}

uint64_t AppMetadataFetcher.fetch(bundleIDs:adamIDs:batchSize:ttl:refreshExpiredCompletion:)()
{
  sub_100010DA4();
  uint8_t v1[8] = v2;
  v1[9] = v0;
  v1[7] = v3;
  v1[6] = v4;
  void v1[4] = v5;
  v1[5] = v6;
  v1[3] = v7;
  uint64_t v8 = type metadata accessor for Logger();
  v1[10] = v8;
  sub_1000111CC(v8);
  v1[11] = v9;
  v1[12] = swift_task_alloc();
  sub_100017040();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_10016A020()
{
  sub_100016980();
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  if (*(void *)(v2 + 16) || *(void *)(v1 + 16))
  {
    uint64_t v3 = *(void *)(v0 + 72);
    uint64_t v4 = *(void *)(v0 + 48);
    uint64_t v5 = *(void *)(v0 + 40);
    sub_10000D938(&qword_100326350);
    sub_10000D938(&qword_100326358);
    uint64_t v6 = swift_task_alloc();
    *(void *)(v0 + 104) = v6;
    long long v7 = *(_OWORD *)(v0 + 56);
    *(void *)(v6 + 16) = v2;
    *(void *)(v6 + 24) = v3;
    *(void *)(v6 + 32) = v5;
    *(void *)(v6 + 40) = v4;
    *(_OWORD *)(v6 + 48) = v7;
    *(void *)(v6 + 64) = v1;
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 112) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_10016A228;
    sub_100017F34();
    sub_100171EA0();
    return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
  }
  else
  {
    static GKLog.general.getter();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "No IDs to fetch, returning nil.", v12, 2u);
      swift_slowDealloc();
    }
    uint64_t v14 = *(void *)(v0 + 88);
    uint64_t v13 = *(void *)(v0 + 96);
    uint64_t v15 = *(void *)(v0 + 80);

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    swift_task_dealloc();
    uint64_t v16 = sub_100172010();
    return v17(v16);
  }
}

uint64_t sub_10016A228()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v3 = v2;
  sub_1000111B4();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_100010D94();
  *uint64_t v6 = v5;
  *(void *)(v3 + 120) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  sub_100017040();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_10016A30C()
{
  sub_100010DA4();
  swift_task_dealloc();
  uint64_t v0 = sub_10001823C();
  return v1(v0);
}

uint64_t sub_10016A368()
{
  sub_100010DA4();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000112AC();
  return v0();
}

uint64_t sub_10016A3CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  *(void *)(v9 + 192) = a7;
  *(void *)(v9 + 200) = a8;
  *(void *)(v9 + 184) = a6;
  *(double *)(v9 + 176) = a9;
  *(void *)(v9 + 160) = a4;
  *(void *)(v9 + 168) = a5;
  *(void *)(v9 + 144) = a2;
  *(void *)(v9 + 152) = a3;
  *(void *)(v9 + 136) = a1;
  uint64_t v10 = sub_10000D938(&qword_100326510);
  *(void *)(v9 + 208) = v10;
  *(void *)(v9 + 216) = *(void *)(v10 - 8);
  *(void *)(v9 + 224) = swift_task_alloc();
  sub_10000D938(&qword_100326298);
  *(void *)(v9 + 232) = swift_task_alloc();
  return _swift_task_switch(sub_10016A4D4, 0, 0);
}

uint64_t sub_10016A4D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100171EE8();
  sub_100016980();
  if (*(void *)(v13[19] + 16))
  {
    uint64_t v15 = sub_100171F3C();
    sub_100171FDC(v15);
    uint64_t v16 = (void *)swift_allocObject();
    sub_100017BB4(v16);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_10016AE80(v12, (uint64_t)&unk_100326520, v14);
    sub_1000185A8(v12, &qword_100326298);
  }
  if (*(void *)(v13[25] + 16))
  {
    uint64_t v17 = sub_100171F3C();
    sub_100171FDC(v17);
    uint64_t v18 = (void *)swift_allocObject();
    sub_100017BB4(v18);
    swift_retain();
    swift_bridgeObjectRetain();
    sub_10016AE80(v12, (uint64_t)&unk_100326530, v14);
    sub_1000185A8(v12, &qword_100326298);
  }
  sub_10000D938(&qword_100326350);
  sub_10000D938(&qword_100326538);
  ThrowingTaskGroup.makeAsyncIterator()();
  v13[30] = &_swiftEmptyDictionarySingleton;
  sub_100171D84();
  uint64_t v19 = (void *)swift_task_alloc();
  v13[31] = v19;
  void *v19 = v13;
  v19[1] = sub_10016A6B0;
  sub_100171EA0();
  return dispatch thunk of AsyncIteratorProtocol.next()(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10, a11, a12);
}

uint64_t sub_10016A6B0()
{
  sub_1000112E8();
  sub_100011168();
  uint64_t v3 = v2;
  sub_1000111B4();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_100010D94();
  *uint64_t v6 = v5;
  v3[32] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v8 = v3[27];
    uint64_t v7 = v3[28];
    uint64_t v9 = v3[26];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }
  sub_100017040();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_10016A7BC()
{
  uint64_t v1 = v0[15];
  if (v1 == 1)
  {
    uint64_t v2 = v0[30];
    uint64_t v3 = (void *)v0[17];
    sub_100010F20();
    v4();
    sub_100171BFC(v0[15]);
    void *v3 = v2;
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100017860();
    sub_100017460();
    __asm { BRAA            X1, X16 }
  }
  if (v1)
  {
    uint64_t v7 = v0[30];
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v0[16] = v7;
    sub_100171BC0(v1, (uint64_t)sub_100171B7C, 0, v0 + 2);
    uint64_t v47 = v0[2];
    uint64_t v48 = v0[5];
    uint64_t v9 = v0[6];
    uint64_t v46 = (void (*)(void *))v0[7];
    uint64_t v43 = v1;
    uint64_t v44 = v0[3];
    int64_t v45 = (unint64_t)(v0[4] + 64) >> 6;
    uint64_t v10 = (void *)v0[30];
    swift_bridgeObjectRetain();
    while (1)
    {
      if (v9)
      {
        sub_100010A50();
        uint64_t v12 = v11 | (v48 << 6);
      }
      else
      {
        int64_t v13 = v48 + 1;
        if (__OFADD__(v48, 1)) {
          goto LABEL_44;
        }
        if (v13 >= v45) {
          goto LABEL_35;
        }
        if (!*(void *)(v44 + 8 * v13))
        {
          if (v48 + 2 >= v45) {
            goto LABEL_35;
          }
          if (!*(void *)(v44 + 8 * (v48 + 2)))
          {
            if (v48 + 3 >= v45) {
              goto LABEL_35;
            }
            if (!*(void *)(v44 + 8 * (v48 + 3)))
            {
              if (v48 + 4 >= v45) {
                goto LABEL_35;
              }
              if (!*(void *)(v44 + 8 * (v48 + 4)))
              {
                if (v48 + 5 >= v45) {
                  goto LABEL_35;
                }
                if (!*(void *)(v44 + 8 * (v48 + 5)))
                {
                  int64_t v14 = v48 + 6;
                  while (v14 < v45)
                  {
                    if (*(void *)(v44 + 8 * v14++)) {
                      goto LABEL_23;
                    }
                  }
LABEL_35:
                  sub_100171BFC(v43);
                  sub_10001A088();
                  swift_release();
                  swift_bridgeObjectRelease();
                  sub_100171BFC(v43);
                  goto LABEL_36;
                }
              }
            }
          }
        }
LABEL_23:
        sub_100171F74();
        uint64_t v48 = v16;
      }
      uint64_t v17 = (void *)(*(void *)(v47 + 48) + 16 * v12);
      uint64_t v18 = v17[1];
      uint64_t v19 = *(void **)(*(void *)(v47 + 56) + 8 * v12);
      v0[9] = *v17;
      v0[10] = v18;
      v0[11] = v19;
      swift_bridgeObjectRetain();
      id v20 = v19;
      v46(v0 + 9);
      swift_bridgeObjectRelease();

      uint64_t v22 = v0[12];
      uint64_t v21 = v0[13];
      uint64_t v23 = (void *)v0[14];
      unint64_t v25 = sub_1000087B0(v22, v21);
      uint64_t v26 = v10[2];
      BOOL v27 = (v24 & 1) == 0;
      uint64_t v28 = v26 + v27;
      if (__OFADD__(v26, v27)) {
        break;
      }
      char v29 = v24;
      if (v10[3] >= v28)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10000D938(&qword_100326438);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        sub_10016FF54(v28, isUniquelyReferenced_nonNull_native & 1);
        unint64_t v30 = sub_1000087B0(v22, v21);
        if ((v29 & 1) != (v31 & 1))
        {
          sub_100017460();
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        }
        unint64_t v25 = v30;
      }
      uint64_t v10 = (void *)v0[16];
      if (v29)
      {
        id v32 = *(id *)(v10[7] + 8 * v25);

        swift_bridgeObjectRelease();
        uint64_t v33 = v10[7];
        uint64_t v34 = *(void **)(v33 + 8 * v25);
        *(void *)(v33 + 8 * v25) = v32;

        char isUniquelyReferenced_nonNull_native = 1;
      }
      else
      {
        sub_100171F64((uint64_t)&v10[v25 >> 6]);
        uint64_t v35 = (uint64_t *)(v10[6] + 16 * v25);
        *uint64_t v35 = v22;
        v35[1] = v21;
        *(void *)(v10[7] + 8 * v25) = v23;
        uint64_t v36 = v10[2];
        BOOL v37 = __OFADD__(v36, 1);
        uint64_t v38 = v36 + 1;
        if (v37) {
          goto LABEL_43;
        }
        v10[2] = v38;
        char isUniquelyReferenced_nonNull_native = 1;
      }
    }
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
  }
  else
  {
    sub_100171BFC(0);
    uint64_t v10 = (void *)v0[30];
LABEL_36:
    v0[30] = v10;
    sub_100171D84();
    uint64_t v39 = (void *)swift_task_alloc();
    v0[31] = v39;
    void *v39 = v0;
    v39[1] = sub_10016A6B0;
    sub_100017460();
  }
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

uint64_t sub_10016AC58()
{
  sub_100010DA4();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000112AC();
  return v0();
}

uint64_t sub_10016ACBC(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 + 56) = a8;
  *(void *)(v9 + 64) = a9;
  *(double *)(v9 + 48) = a2;
  *(void *)(v9 + 32) = a6;
  *(void *)(v9 + 40) = a7;
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a5;
  return _swift_task_switch(sub_10016ACE8, 0, 0);
}

uint64_t sub_10016ACE8()
{
  sub_100010DA4();
  uint64_t v1 = swift_bridgeObjectRetain();
  *(void *)(v0 + 72) = sub_1000118C8(v1);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v2;
  void *v2 = v0;
  v2[1] = sub_10016AD88;
  uint64_t v3 = sub_100017B48();
  return sub_10016B700(v3, 1, v4, v5, v6, v7);
}

uint64_t sub_10016AD88()
{
  sub_1000112E8();
  uint64_t v3 = v2;
  sub_100011168();
  uint64_t v5 = v4;
  sub_1000111B4();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  sub_100010D94();
  *uint64_t v8 = v7;
  *(void *)(v5 + 88) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_bridgeObjectRelease();
    *(void *)(v5 + 96) = v3;
  }
  sub_100017040();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_10016AE80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = sub_10000D938(&qword_100326298);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100171B1C(a1, (uint64_t)v10, &qword_100326298);
  uint64_t v11 = type metadata accessor for TaskPriority();
  if (sub_10000DB14((uint64_t)v10, 1, v11) == 1)
  {
    sub_1000185A8((uint64_t)v10, &qword_100326298);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v14 = v13;
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v14 = 0;
  }
  uint64_t v15 = *v4;
  sub_10000D938(&qword_100326350);
  uint64_t v16 = (void *)(v14 | v12);
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    uint64_t v16 = v19;
    v19[2] = v12;
    void v19[3] = v14;
  }
  v18[1] = 1;
  v18[2] = v16;
  void v18[3] = v15;
  swift_task_create();
  return swift_release();
}

uint64_t sub_10016B03C(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 + 56) = a8;
  *(void *)(v9 + 64) = a9;
  *(double *)(v9 + 48) = a2;
  *(void *)(v9 + 32) = a6;
  *(void *)(v9 + 40) = a7;
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a5;
  return _swift_task_switch(sub_10016B068, 0, 0);
}

uint64_t sub_10016B068()
{
  sub_100010DA4();
  uint64_t v1 = swift_bridgeObjectRetain();
  *(void *)(v0 + 72) = sub_1000118C8(v1);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v2;
  void *v2 = v0;
  v2[1] = sub_10016B108;
  uint64_t v3 = sub_100017B48();
  return sub_10016B700(v3, 0, v4, v5, v6, v7);
}

uint64_t sub_10016B108()
{
  sub_1000112E8();
  uint64_t v3 = v2;
  sub_100011168();
  uint64_t v5 = v4;
  sub_1000111B4();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  sub_100010D94();
  *uint64_t v8 = v7;
  *(void *)(v5 + 88) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_bridgeObjectRelease();
    *(void *)(v5 + 96) = v3;
  }
  sub_100017040();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_10016B200()
{
  return sub_100171E80(*(void *)(v0 + 96));
}

uint64_t sub_10016B208()
{
  sub_100010DA4();
  swift_bridgeObjectRelease();
  sub_1000112AC();
  return v0();
}

uint64_t sub_10016B330(int a1, int a2, int a3, void *aBlock, const void *a5, void *a6)
{
  v6[2] = a6;
  uint64_t v9 = _Block_copy(aBlock);
  v6[3] = _Block_copy(a5);
  void v6[4] = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  void v6[5] = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = swift_allocObject();
  v6[6] = v10;
  *(void *)(v10 + 16) = v9;
  a6;
  uint64_t v11 = (void *)swift_task_alloc();
  v6[7] = v11;
  *uint64_t v11 = v6;
  v11[1] = sub_10016B490;
  return AppMetadataFetcher.fetch(bundleIDs:adamIDs:batchSize:ttl:refreshExpiredCompletion:)();
}

void sub_10016B490()
{
  sub_100017D24();
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  sub_100011168();
  uint64_t v6 = v5;
  sub_1000111B4();
  *uint64_t v7 = v6;
  uint64_t v9 = *(void **)(v8 + 16);
  uint64_t v10 = *v1;
  sub_100010D94();
  *uint64_t v11 = v10;
  swift_task_dealloc();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v2)
  {
    uint64_t v4 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v13 = (void *)v4;
  }
  else if (v4)
  {
    sub_100163CE4(0, &qword_100326450);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v4 = 0;
    uint64_t v13 = isa;
  }
  else
  {
    Class isa = 0;
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(void (***)(void, void, void))(v6 + 24);
  ((void (**)(void, Class, uint64_t))v14)[2](v14, isa, v4);

  _Block_release(v14);
  sub_1000112AC();
  sub_100018250();
  __asm { BRAA            X1, X16 }
}

void sub_10016B674(uint64_t a1, uint64_t a2)
{
  sub_100163CE4(0, &qword_100326450);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, objc_class *))(a2 + 16))(a2, isa);
}

uint64_t sub_10016B700(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  *(void *)(v7 + 56) = a5;
  *(void *)(v7 + 64) = v6;
  *(void *)(v7 + 48) = a4;
  *(double *)(v7 + 40) = a6;
  *(unsigned char *)(v7 + 152) = a2;
  *(void *)(v7 + 24) = a1;
  *(void *)(v7 + 32) = a3;
  return sub_1000111C0((uint64_t)sub_10016B728);
}

uint64_t sub_10016B728()
{
  sub_100010DA4();
  uint64_t v1 = (void *)(v0[8] + OBJC_IVAR___GKAppMetadataFetcher_cache);
  v0[9] = *v1;
  uint64_t v2 = v1[1];
  v0[10] = v2;
  v0[11] = swift_getObjectType();
  v0[12] = *(void *)(v2 + 16);
  v0[13] = (v2 + 16) & 0xFFFFFFFFFFFFLL | 0x778D000000000000;
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10016B7D0, v4, v3);
}

uint64_t sub_10016B7D0()
{
  sub_1000112E8();
  *(void *)(v0 + 112) = (*(uint64_t (**)(void, void, void, void, double))(v0 + 96))(*(void *)(v0 + 24), *(unsigned char *)(v0 + 152) & 1, *(void *)(v0 + 88), *(void *)(v0 + 80), *(double *)(v0 + 40));
  sub_100017040();
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_10016B890()
{
  sub_100016980();
  *(void *)(v0 + 16) = *(void *)(v0 + 24);
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v3 = (unsigned __int8 *)(v1 + 56);
    uint64_t v4 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v6 = *((void *)v3 - 3);
      uint64_t v5 = *((void *)v3 - 2);
      int v7 = *v3;
      id v8 = *((id *)v3 - 1);
      swift_bridgeObjectRetain_n();
      sub_10017029C(v6, v5);
      swift_bridgeObjectRelease();
      if (v7 == 1)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1001B734C(0, v4[2] + 1, 1, (uint64_t)v4);
          uint64_t v4 = v12;
        }
        unint64_t v10 = v4[2];
        unint64_t v9 = v4[3];
        if (v10 >= v9 >> 1)
        {
          sub_1001B734C(v9 > 1, v10 + 1, 1, (uint64_t)v4);
          uint64_t v4 = v13;
        }
        v4[2] = v10 + 1;
        uint64_t v11 = &v4[2 * v10];
        void v11[4] = v6;
        void v11[5] = v5;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();

      v3 += 32;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _swiftEmptyArrayStorage;
  }
  if (v4[2]) {
    sub_10016C2C8((uint64_t)v4, *(unsigned char *)(v0 + 152) & 1, *(void *)(v0 + 32), *(void *)(v0 + 48), *(void *)(v0 + 56));
  }
  char v14 = *(unsigned char *)(v0 + 152);
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(v0 + 16);
  *(void *)(v0 + 120) = v15;
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_10016BA98;
  uint64_t v17 = *(void *)(v0 + 112);
  uint64_t v18 = *(void *)(v0 + 32);
  return sub_10016BC28(v15, v14 & 1, v18, v17);
}

uint64_t sub_10016BA98()
{
  sub_100010F2C();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_100010D94();
  *uint64_t v5 = v4;
  *uint64_t v5 = *v1;
  *(void *)(v4 + 136) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 144) = v3;
  }
  sub_100017040();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_10016BBFC()
{
  return sub_100018018(*(void *)(v0 + 144), v0 + 8, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10016BC0C()
{
  sub_1000112AC();
  return v0();
}

uint64_t sub_10016BC28(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 32) = a4;
  *(void *)(v5 + 40) = v4;
  *(unsigned char *)(v5 + 80) = a2;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a3;
  return sub_1000111C0((uint64_t)sub_10016BC48);
}

void sub_10016BC48()
{
  if (*(void *)(v0[2] + 16))
  {
    sub_100165918((void *)(v0[5] + OBJC_IVAR___GKAppMetadataFetcher_network), *(void *)(v0[5] + OBJC_IVAR___GKAppMetadataFetcher_network + 24));
    swift_bridgeObjectRetain();
    sub_10018EBE4();
    v0[6] = v1;
    swift_bridgeObjectRelease();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[7] = v2;
    void *v2 = v0;
    v2[1] = sub_10016BF88;
    sub_1000112F4();
    __asm { BRAA            X6, X16 }
  }
  uint64_t v5 = *(void *)(v0[4] + 16);
  if (!v5)
  {
LABEL_22:
    sub_10001823C();
    sub_1000112F4();
    __asm { BRAA            X2, X16 }
  }
  uint64_t v6 = 0;
  uint64_t v7 = swift_bridgeObjectRetain() + 48;
  uint64_t v8 = &selRef_allBagKeys;
  while (2)
  {
    unint64_t v9 = (id *)(v7 + 32 * v6);
    uint64_t v10 = v6;
    while (1)
    {
      uint64_t v6 = v10 + 1;
      if (__OFADD__(v10, 1))
      {
        __break(1u);
        goto LABEL_26;
      }
      if (*v9) {
        break;
      }
      v9 += 4;
      ++v10;
      if (v6 == v5) {
        goto LABEL_21;
      }
    }
    uint64_t v28 = v7;
    id v11 = *v9;
    swift_bridgeObjectRetain();
    id v12 = [v11 v8[144]];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_100017538();
    sub_1000175D0();
    if (v16)
    {
      __break(1u);
      goto LABEL_30;
    }
    unint64_t v17 = v14;
    char v18 = v15;
    sub_10000D938(&qword_100326438);
    if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, (Swift::Int)v12)) {
      goto LABEL_16;
    }
    unint64_t v19 = sub_100017538();
    if ((v18 & 1) == (v20 & 1))
    {
      unint64_t v17 = v19;
LABEL_16:
      if (v18)
      {
        uint64_t v21 = *((void *)&_swiftEmptyDictionarySingleton + 7);

        *(void *)(v21 + 8 * v17) = v11;
        goto LABEL_20;
      }
      sub_1000112B8();
      *(void *)(v22 + 8 * v17) = v11;
      uint64_t v23 = *((void *)&_swiftEmptyDictionarySingleton + 2);
      BOOL v16 = __OFADD__(v23, 1);
      uint64_t v24 = v23 + 1;
      if (!v16)
      {
        *((void *)&_swiftEmptyDictionarySingleton + 2) = v24;
        swift_bridgeObjectRetain();
LABEL_20:
        uint64_t v8 = &selRef_allBagKeys;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        uint64_t v7 = v28;
        if (v6 == v5)
        {
LABEL_21:
          swift_bridgeObjectRelease();
          goto LABEL_22;
        }
        continue;
      }
LABEL_30:
      __break(1u);
      return;
    }
    break;
  }
LABEL_26:
  sub_1000112F4();
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_10016BF88()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v3 = v2;
  sub_1000111B4();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 64) = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_release();
  }
  sub_100017040();
  return _swift_task_switch(v6, v7, v8);
}

void sub_10016C074()
{
  uint64_t v1 = *(void *)(v0 + 32);
  if (!*(void *)(v1 + 16)) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v4 = (id *)(swift_bridgeObjectRetain() + 48);
  uint64_t v5 = v2;
  while (1)
  {
    if (!*v4) {
      goto LABEL_13;
    }
    id v6 = *v4;
    swift_bridgeObjectRetain();
    id v7 = [v6 bundleID];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v8 = v6;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_100017538();
    sub_1000175D0();
    if (v12) {
      break;
    }
    unint64_t v13 = v10;
    char v14 = v11;
    sub_10000D938(&qword_100326438);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, (Swift::Int)v6))
    {
      unint64_t v15 = sub_100017538();
      if ((v14 & 1) != (v16 & 1))
      {
        sub_100010F04();
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        return;
      }
      unint64_t v13 = v15;
    }
    if (v14)
    {
      uint64_t v17 = *(void *)(v3 + 56);

      *(void *)(v17 + 8 * v13) = v8;
    }
    else
    {
      sub_1000112B8();
      *(void *)(v18 + 8 * v13) = v8;
      uint64_t v19 = *(void *)(v3 + 16);
      BOOL v12 = __OFADD__(v19, 1);
      uint64_t v20 = v19 + 1;
      if (v12) {
        goto LABEL_22;
      }
      *(void *)(v3 + 16) = v20;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

LABEL_13:
    v4 += 4;
    if (!--v5)
    {
      swift_bridgeObjectRelease();
LABEL_15:
      sub_10001823C();
      sub_100010F04();
      __asm { BRAA            X2, X16 }
    }
  }
  __break(1u);
LABEL_22:
  __break(1u);
}

uint64_t sub_10016C268()
{
  sub_100010DA4();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10016C2C8(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v10 = a2 & 1;
  uint64_t v11 = sub_10000D938(&qword_100326298);
  __chkstk_darwin(v11 - 8, v12);
  char v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for TaskPriority();
  sub_10000D97C((uint64_t)v14, 1, 1, v15);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = 0;
  *(void *)(v16 + 24) = 0;
  *(void *)(v16 + 32) = v5;
  *(void *)(v16 + 40) = a1;
  *(unsigned char *)(v16 + 48) = v10;
  *(void *)(v16 + 56) = a3;
  *(void *)(v16 + 64) = a4;
  *(void *)(v16 + 72) = a5;
  id v17 = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10019DE34((uint64_t)v14, (uint64_t)&unk_100326428, v16);
  swift_release();
  return sub_1000185A8((uint64_t)v14, &qword_100326298);
}

uint64_t sub_10016C3F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 48) = a8;
  *(void *)(v8 + 56) = v12;
  *(void *)(v8 + 32) = a5;
  *(void *)(v8 + 40) = a7;
  *(unsigned char *)(v8 + 112) = a6;
  *(void *)(v8 + 24) = a4;
  uint64_t v9 = type metadata accessor for Logger();
  *(void *)(v8 + 64) = v9;
  *(void *)(v8 + 72) = *(void *)(v9 - 8);
  *(void *)(v8 + 80) = swift_task_alloc();
  return _swift_task_switch(sub_10016C4C8, 0, 0);
}

uint64_t sub_10016C4C8()
{
  sub_100010F2C();
  char v1 = *(unsigned char *)(v0 + 112);
  uint64_t v2 = (void *)(*(void *)(v0 + 24) + OBJC_IVAR___GKAppMetadataFetcher_network);
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[4];
  sub_100165918(v2, v3);
  uint64_t v9 = (uint64_t (*)(uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)(v4 + 8) + **(int **)(v4 + 8));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10016C5E8;
  uint64_t v7 = *(void *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 40);
  return v9(v7, v1 & 1, v6, v3, v4);
}

uint64_t sub_10016C5E8()
{
  sub_1000112E8();
  uint64_t v3 = v2;
  sub_100011168();
  uint64_t v5 = v4;
  sub_1000111B4();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  sub_100010D94();
  *uint64_t v8 = v7;
  *(void *)(v5 + 96) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 104) = v3;
  }
  sub_100017040();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_10016C6D8()
{
  sub_100010DA4();
  (*(void (**)(void))(v0 + 48))(*(void *)(v0 + 104));
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  sub_1000112AC();
  return v1();
}

uint64_t sub_10016C74C()
{
  sub_100017D24();
  static GKLog.general.getter();
  swift_errorRetain();
  swift_errorRetain();
  char v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to refresh expired adamIDs with error: %@", v3, 0xCu);
    sub_10000D938(&qword_100326430);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_100010F20();
  v6();
  swift_task_dealloc();
  sub_1000112AC();
  return v7();
}

void AppMetadataFetcher.init()()
{
}

id AppMetadataFetcher.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppMetadataFetcher();
  return [super dealloc];
}

uint64_t sub_10016C9E0(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 32) = a4;
  *(void *)(v5 + 40) = a5;
  *(unsigned char *)(v5 + 80) = a2;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a3;
  return _swift_task_switch(sub_10016CA08, 0, 0);
}

uint64_t sub_10016CA08()
{
  sub_100010DA4();
  uint64_t v1 = *(void *)(v0 + 24);
  char v2 = *(unsigned char *)(v0 + 80);
  sub_100163CE4(0, &qword_1003264D0);
  id v3 = sub_10016CC98(v1);
  *(void *)(v0 + 48) = v3;
  uint64_t v4 = *(void *)(v0 + 16);
  if (v2) {
    sub_100170BC0(v4, v3);
  }
  else {
    sub_100170B60(v4, v3);
  }
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10016CAE8;
  uint64_t v7 = *(void *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 40);
  return sub_10016CD34(v7, v6);
}

uint64_t sub_10016CAE8()
{
  sub_1000112E8();
  uint64_t v3 = v2;
  sub_100011168();
  uint64_t v5 = v4;
  sub_1000111B4();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  sub_100010D94();
  *uint64_t v8 = v7;
  *(void *)(v5 + 64) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 72) = v3;
  }
  sub_100017040();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_10016CBD8()
{
  sub_100010DA4();

  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 72);
  return v1(v2);
}

uint64_t sub_10016CC3C()
{
  sub_100010DA4();

  sub_1000112AC();
  return v1();
}

id sub_10016CC98(uint64_t a1)
{
  id v2 = objc_allocWithZone((Class)AMSMediaTask);
  swift_unknownObjectRetain();
  id v3 = sub_10016FD1C(0, 0x6C7070612E6D6F63, 0xEF64656D61672E65, 49, 0xE100000000000000, a1);
  uint64_t v4 = Dictionary.init(dictionaryLiteral:)();
  sub_100170A28(v4, v3);
  return v3;
}

uint64_t sub_10016CD34(uint64_t a1, uint64_t a2)
{
  v3[18] = a2;
  v3[19] = v2;
  v3[17] = a1;
  return _swift_task_switch(sub_10016CD58, 0, 0);
}

uint64_t sub_10016CD58()
{
  sub_100010F2C();
  uint64_t v1 = sub_100170AA0(*(void **)(v0 + 152), (SEL *)&selRef_itemIdentifiers);
  if (v1)
  {
    if (*(void *)(v1 + 16))
    {
      char v2 = 1;
LABEL_8:
      *(unsigned char *)(v0 + 336) = v2;
      *(void *)(v0 + 160) = v1;
      id v3 = *(void **)(v0 + 152);
      uint64_t v4 = type metadata accessor for Date();
      *(void *)(v0 + 168) = v4;
      sub_1000111CC(v4);
      *(void *)(v0 + 176) = v5;
      *(void *)(v0 + 184) = swift_task_alloc();
      Date.init()();
      id v6 = [v3 perform];
      *(void *)(v0 + 192) = v6;
      *(void *)(v0 + 16) = v0;
      *(void *)(v0 + 56) = v0 + 120;
      *(void *)(v0 + 24) = sub_10016CF70;
      uint64_t v7 = swift_continuation_init();
      *(void *)(v0 + 80) = _NSConcreteStackBlock;
      *(void *)(v0 + 88) = 0x40000000;
      *(void *)(v0 + 96) = sub_10016ED38;
      *(void *)(v0 + 104) = &unk_1002DD168;
      *(void *)(v0 + 112) = v7;
      [v6 resultWithCompletion:v0 + 80];
      return _swift_continuation_await(v0 + 16);
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v1 = sub_100170AA0(*(void **)(v0 + 152), (SEL *)&selRef_bundleIdentifiers);
  if (v1)
  {
    if (*(void *)(v1 + 16))
    {
      char v2 = 0;
      goto LABEL_8;
    }
    swift_bridgeObjectRelease();
  }
  sub_1001719C4();
  swift_allocError();
  *uint64_t v8 = 1;
  swift_willThrow();
  sub_1000112AC();
  return v9();
}

uint64_t sub_10016CF70()
{
  sub_100010DA4();
  sub_1000111B4();
  void *v2 = v1;
  void *v2 = *v0;
  uint64_t v4 = *(void *)(v3 + 48);
  *(void *)(v1 + 200) = v4;
  if (v4) {
    swift_bridgeObjectRelease();
  }
  sub_100017040();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_10016D07C()
{
  uint64_t v1 = *(void **)(v0 + 192);
  uint64_t v2 = sub_100170AF4(*(void **)(v0 + 120));

  if (v2)
  {
    uint64_t v45 = *(void *)(v2 + 16);
    if (v45)
    {
      *(void *)(v46 + 128) = sub_1000118C8(*(void *)(v46 + 160));
      sub_100163CE4(0, &qword_100326450);
      uint64_t v3 = 0;
      uint64_t v4 = &_swiftEmptyDictionarySingleton;
      while (1)
      {
        swift_bridgeObjectRetain();
        id v5 = GKAppMetadata.init(responseDataItem:)();
        if (v5)
        {
          uint64_t v6 = v5;
          uint64_t v7 = v2;
          id v8 = [v5 bundleID];
          uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v11 = v10;

          id v12 = v6;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v47 = v4;
          unint64_t v14 = sub_1000087B0(v9, v11);
          uint64_t v17 = v4[2];
          BOOL v18 = (v15 & 1) == 0;
          Swift::Int v19 = v17 + v18;
          if (__OFADD__(v17, v18))
          {
            __break(1u);
LABEL_28:
            __break(1u);
            return _swift_task_switch(v14, v15, v16);
          }
          unint64_t v20 = v14;
          char v21 = v15;
          sub_10000D938(&qword_100326438);
          Swift::Bool v22 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v19);
          uint64_t v4 = v47;
          if (v22)
          {
            unint64_t v23 = sub_1000087B0(v9, v11);
            if ((v21 & 1) != (v24 & 1))
            {
              return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            }
            unint64_t v20 = v23;
          }
          if (v21)
          {
            uint64_t v25 = v47[7];

            *(void *)(v25 + 8 * v20) = v12;
          }
          else
          {
            sub_100171F64((uint64_t)&v47[v20 >> 6]);
            uint64_t v26 = (uint64_t *)(v47[6] + 16 * v20);
            *uint64_t v26 = v9;
            v26[1] = v11;
            *(void *)(v47[7] + 8 * v20) = v12;
            uint64_t v27 = v47[2];
            BOOL v28 = __OFADD__(v27, 1);
            uint64_t v29 = v27 + 1;
            if (v28) {
              goto LABEL_28;
            }
            v47[2] = v29;
            swift_bridgeObjectRetain();
          }
          int v30 = *(unsigned __int8 *)(v46 + 336);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v30 == 1) {
            id v31 = [v12 adamID];
          }
          else {
            id v31 = [v12 bundleID];
          }
          id v32 = v31;
          uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v35 = v34;

          sub_10017029C(v33, v35);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v2 = v7;
        }
        ++v3;
        *(void *)(v46 + 208) = v4;
        if (v45 == v3)
        {
          uint64_t v36 = *(void *)(v46 + 144);
          swift_bridgeObjectRelease();
          *(void *)(v46 + 216) = swift_getObjectType();
          sub_10018EBE4();
          *(void *)(v46 + 224) = v37;
          swift_bridgeObjectRelease();
          *(void *)(v46 + 232) = *(void *)(v36 + 32);
          *(void *)(v46 + 240) = (v36 + 32) & 0xFFFFFFFFFFFFLL | 0xD331000000000000;
          uint64_t v38 = dispatch thunk of Actor.unownedExecutor.getter();
          uint64_t v16 = v39;
          *(void *)(v46 + 248) = v38;
          *(void *)(v46 + 256) = v39;
          unint64_t v14 = (unint64_t)sub_10016D43C;
          uint64_t v15 = v38;
          goto LABEL_21;
        }
      }
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v40 = *(void *)(v46 + 144);
  *(void *)(v46 + 304) = swift_getObjectType();
  *(void *)(v46 + 312) = *(void *)(v40 + 32);
  *(void *)(v46 + 320) = (v40 + 32) & 0xFFFFFFFFFFFFLL | 0xD331000000000000;
  uint64_t v41 = dispatch thunk of Actor.unownedExecutor.getter();
  uint64_t v43 = v42;
  unint64_t v14 = (unint64_t)sub_10016D664;
  uint64_t v15 = v41;
  uint64_t v16 = v43;
LABEL_21:
  return _swift_task_switch(v14, v15, v16);
}

uint64_t sub_10016D43C()
{
  sub_1000112E8();
  (*(void (**)(void, void, void, void, void))(v0 + 232))(*(void *)(v0 + 224), *(unsigned __int8 *)(v0 + 336), *(void *)(v0 + 184), *(void *)(v0 + 216), *(void *)(v0 + 144));
  *(void *)(v0 + 264) = 0;
  swift_release();
  sub_100017040();
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_10016D4D8()
{
  sub_100010DA4();
  uint64_t v1 = v0[18];
  swift_bridgeObjectRetain();
  sub_10018EC74();
  v0[34] = v2;
  swift_bridgeObjectRelease();
  v0[35] = *(void *)(v1 + 24);
  v0[36] = (v1 + 24) & 0xFFFFFFFFFFFFLL | 0xF9D5000000000000;
  uint64_t v3 = v0[31];
  uint64_t v4 = v0[32];
  return _swift_task_switch(sub_10016D55C, v3, v4);
}

uint64_t sub_10016D55C()
{
  sub_1000112E8();
  uint64_t v1 = *(void *)(v0 + 264);
  (*(void (**)(void, void, void, void))(v0 + 280))(*(void *)(v0 + 272), *(void *)(v0 + 184), *(void *)(v0 + 216), *(void *)(v0 + 144));
  *(void *)(v0 + 296) = v1;
  swift_release();
  sub_100017040();
  return _swift_task_switch(v2, v3, v4);
}

uint64_t sub_10016D5F4()
{
  sub_100010DA4();
  sub_100010F20();
  v0();
  swift_task_dealloc();
  uint64_t v1 = sub_10001823C();
  return v2(v1);
}

uint64_t sub_10016D664()
{
  sub_1000112E8();
  (*(void (**)(void, void, void, void, void))(v0 + 312))(*(void *)(v0 + 160), *(unsigned __int8 *)(v0 + 336), *(void *)(v0 + 184), *(void *)(v0 + 304), *(void *)(v0 + 144));
  *(void *)(v0 + 328) = 0;
  swift_bridgeObjectRelease();
  sub_100017040();
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_10016D704()
{
  sub_100010DA4();
  sub_100010F20();
  v0();
  swift_task_dealloc();
  uint64_t v1 = sub_100172010();
  return v2(v1);
}

uint64_t sub_10016D770()
{
  sub_100010DA4();
  sub_100010F20();
  v0();
  swift_task_dealloc();
  sub_1000112AC();
  return v1();
}

uint64_t sub_10016D7E4()
{
  sub_100010F2C();
  uint64_t v1 = (void *)v0[24];
  uint64_t v3 = v0[22];
  uint64_t v2 = v0[23];
  uint64_t v4 = v0[21];
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);

  swift_task_dealloc();
  sub_1000112AC();
  return v5();
}

uint64_t sub_10016D87C()
{
  sub_100010DA4();
  sub_100010F20();
  v0();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  sub_1000112AC();
  return v1();
}

uint64_t sub_10016D8FC()
{
  sub_100010DA4();
  sub_100010F20();
  v0();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  sub_1000112AC();
  return v1();
}

uint64_t AppMetadataNetworkFetcher.fetch(ids:type:batchSize:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 40) = a4;
  *(void *)(v5 + 48) = a5;
  *(unsigned char *)(v5 + 80) = a2;
  *(void *)(v5 + 24) = a1;
  *(void *)(v5 + 32) = a3;
  return sub_1000111C0((uint64_t)sub_10016D9A0);
}

uint64_t sub_10016D9A0()
{
  sub_100017D24();
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v1 = *(void *)(v0 + 32);
  char v3 = *(unsigned char *)(v0 + 80) & 1;
  sub_10000D938(&qword_100326350);
  sub_10000D938(&qword_100326358);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 56) = v4;
  long long v5 = *(_OWORD *)(v0 + 40);
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v1;
  *(_OWORD *)(v4 + 32) = v5;
  *(unsigned char *)(v4 + 48) = v3;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10016DAAC;
  sub_100017F34();
  sub_100018250();
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_10016DAAC()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v3 = v2;
  sub_1000111B4();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_100010D94();
  *uint64_t v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  sub_100017040();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_10016DB90()
{
  return sub_100018018(*(void *)(v0 + 16), v0 + 8, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10016DBA0()
{
  sub_100010DA4();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10016DC00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  *(unsigned char *)(v7 + 296) = a7;
  *(void *)(v7 + 224) = a5;
  *(void *)(v7 + 232) = a6;
  *(void *)(v7 + 208) = a3;
  *(void *)(v7 + 216) = a4;
  *(void *)(v7 + 192) = a1;
  *(void *)(v7 + 200) = a2;
  sub_10000D938(&qword_100326298);
  *(void *)(v7 + 240) = swift_task_alloc();
  *(void *)(v7 + 248) = swift_task_alloc();
  return _swift_task_switch(sub_10016DCB0, 0, 0);
}

void sub_10016DCB0()
{
  uint64_t v4 = *(void *)(v1 + 216);
  unint64_t v5 = *(void *)(*(void *)(v1 + 208) + 16);
  *(void *)(v1 + 256) = v5;
  if (v4)
  {
    if (v4 < 1 || v5 == 0)
    {
      **(void **)(v1 + 192) = &_swiftEmptyDictionarySingleton;
      swift_task_dealloc();
      swift_task_dealloc();
      sub_100017860();
      sub_100010F04();
      __asm { BRAA            X1, X16 }
    }
    if (v5 >= v4) {
      uint64_t v0 = v4;
    }
    else {
      uint64_t v0 = v5;
    }
    *(void *)(v1 + 264) = &_swiftEmptyDictionarySingleton;
    *(void *)(v1 + 272) = v4;
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain_n();
    uint64_t v9 = (void *)swift_dynamicCastClass();
    if (!v9)
    {
      swift_bridgeObjectRelease();
      uint64_t v9 = _swiftEmptyArrayStorage;
    }
    uint64_t v10 = v9[2];
    swift_release();
    if (v10 == v0)
    {
      uint64_t v11 = swift_dynamicCastClass();
      LODWORD(v12) = v11;
      if (!v11)
      {
        swift_bridgeObjectRelease();
        id v12 = _swiftEmptyArrayStorage;
      }
      goto LABEL_18;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRelease();
  sub_10000D938(&qword_100326500);
  id v12 = (void *)swift_allocObject();
  size_t v24 = j__malloc_size(v12);
  sub_100171F8C(v24);
  unint64_t v25 = *(void *)(v1 + 208) + 32;
  if (v25 < (unint64_t)&v12[2 * v0 + 4] && (unint64_t)(v12 + 4) < v25 + 16 * v0)
  {
    sub_1000111E4();
    _fatalErrorMessage(_:_:file:line:flags:)();
    sub_100010F04();
    return;
  }
  swift_arrayInitWithCopy();
LABEL_18:
  sub_10001747C();
  uint64_t v13 = type metadata accessor for TaskPriority();
  sub_100171FA4(v13);
  uint64_t v14 = swift_allocObject();
  sub_100171F04(v14);
  sub_100171B1C(v0, v2, &qword_100326298);
  sub_1000174CC();
  if (v12 == 1)
  {
    sub_1000185A8(*(void *)(v1 + 240), &qword_100326298);
    uint64_t v15 = 0;
    uint64_t v16 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    sub_100017C80();
    uint64_t v17 = sub_100171FFC();
    v18(v17);
    if (*v3)
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v15 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v16 = v19;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
    }
  }
  uint64_t v20 = **(void **)(v1 + 200);
  sub_10000D938(&qword_100326350);
  if (v16 | v15)
  {
    *(void *)(v1 + 72) = 0;
    *(void *)(v1 + 80) = 0;
    *(void *)(v1 + 88) = v15;
    *(void *)(v1 + 96) = v16;
  }
  sub_100017594();
  *(void *)(v1 + 112) = v21;
  *(void *)(v1 + 120) = v20;
  swift_task_create();
  swift_release();
  sub_1000185A8(v15, &qword_100326298);
  Swift::Bool v22 = (void *)swift_task_alloc();
  *(void *)(v1 + 280) = v22;
  sub_10000D938(&qword_1003264F8);
  *Swift::Bool v22 = v1;
  v22[1] = sub_10016E070;
  sub_100017040();
  sub_100010F04();
  ThrowingTaskGroup.next(isolation:)();
}

uint64_t sub_10016E070()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v3 = v2;
  sub_1000111B4();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_100010D94();
  *uint64_t v6 = v5;
  *(void *)(v3 + 288) = v0;
  swift_task_dealloc();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  sub_100017040();
  return _swift_task_switch(v7, v8, v9);
}

void sub_10016E154()
{
  unint64_t v4 = *(void *)(v1 + 184);
  if (v4 < 2)
  {
    uint64_t v2 = *(void *)(v1 + 272);
    uint64_t v5 = *(void *)(v1 + 256);
    BOOL v6 = v5 >= v2;
    if (v2 < v5)
    {
      uint64_t v67 = v1 + 184;
      goto LABEL_34;
    }
    uint64_t v11 = *(void **)(v1 + 264);
LABEL_44:
    **(void **)(v1 + 192) = v11;
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100017860();
    sub_100171ECC();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v0 = v1 + 16;
  uint64_t v67 = v1 + 184;
  v73 = (uint64_t *)(v1 + 176);
  uint64_t v7 = *(void *)(v1 + 264);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v1 + 176) = v7;
  sub_100171BC0(v4, (uint64_t)sub_100171B7C, 0, (void *)(v1 + 16));
  uint64_t v71 = *(void *)(v1 + 16);
  uint64_t v69 = *(void *)(v1 + 24);
  uint64_t v72 = *(void *)(v1 + 40);
  uint64_t v9 = *(void *)(v1 + 48);
  v70 = *(void (**)(uint64_t))(v1 + 56);
  int64_t v68 = (unint64_t)(*(void *)(v1 + 32) + 64) >> 6;
  unint64_t v10 = v4;
  uint64_t v11 = *(void **)(v1 + 264);
  uint64_t v66 = v10;
  swift_bridgeObjectRetain();
  while (1)
  {
    if (v9)
    {
      sub_100010A50();
      uint64_t v13 = v12 | (v72 << 6);
      goto LABEL_22;
    }
    int64_t v14 = v72 + 1;
    if (__OFADD__(v72, 1)) {
      goto LABEL_76;
    }
    if (v14 >= v68) {
      goto LABEL_32;
    }
    if (!*(void *)(v69 + 8 * v14))
    {
      if (v72 + 2 >= v68) {
        goto LABEL_32;
      }
      if (!*(void *)(v69 + 8 * (v72 + 2)))
      {
        if (v72 + 3 >= v68) {
          goto LABEL_32;
        }
        if (!*(void *)(v69 + 8 * (v72 + 3)))
        {
          if (v72 + 4 >= v68) {
            goto LABEL_32;
          }
          if (!*(void *)(v69 + 8 * (v72 + 4)))
          {
            if (v72 + 5 >= v68) {
              goto LABEL_32;
            }
            if (!*(void *)(v69 + 8 * (v72 + 5))) {
              break;
            }
          }
        }
      }
    }
LABEL_21:
    sub_100171F74();
    uint64_t v72 = v17;
LABEL_22:
    BOOL v18 = (void *)(*(void *)(v71 + 48) + 16 * v13);
    uint64_t v19 = v18[1];
    uint64_t v20 = *(void **)(*(void *)(v71 + 56) + 8 * v13);
    *(void *)(v1 + 152) = *v18;
    *(void *)(v1 + 160) = v19;
    *(void *)(v1 + 168) = v20;
    swift_bridgeObjectRetain();
    id v21 = v20;
    v70(v1 + 152);
    swift_bridgeObjectRelease();

    uint64_t v2 = *(void *)(v1 + 128);
    uint64_t v22 = *(void *)(v1 + 136);
    uint64_t v23 = *(void **)(v1 + 144);
    uint64_t v0 = (uint64_t)v11;
    unint64_t v3 = sub_1000087B0(v2, v22);
    uint64_t v25 = v11[2];
    BOOL v26 = (v24 & 1) == 0;
    uint64_t v27 = v25 + v26;
    if (__OFADD__(v25, v26))
    {
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
      goto LABEL_78;
    }
    char v28 = v24;
    if (v11[3] >= v27)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10000D938(&qword_100326438);
        uint64_t v0 = v1 + 176;
        _NativeDictionary.copy()();
      }
    }
    else
    {
      sub_10016FF54(v27, isUniquelyReferenced_nonNull_native & 1);
      uint64_t v0 = *v73;
      unint64_t v29 = sub_1000087B0(v2, v22);
      if ((v28 & 1) != (v30 & 1))
      {
        sub_100171ECC();
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        return;
      }
      unint64_t v3 = v29;
    }
    uint64_t v11 = (void *)*v73;
    if (v28)
    {
      uint64_t v0 = (uint64_t)*(id *)(v11[7] + 8 * v3);

      swift_bridgeObjectRelease();
      uint64_t v31 = v11[7];
      id v32 = *(void **)(v31 + 8 * v3);
      *(void *)(v31 + 8 * v3) = v0;

      char isUniquelyReferenced_nonNull_native = 1;
    }
    else
    {
      sub_100171F64((uint64_t)&v11[v3 >> 6]);
      uint64_t v33 = (uint64_t *)(v11[6] + 16 * v3);
      uint64_t *v33 = v2;
      v33[1] = v22;
      *(void *)(v11[7] + 8 * v3) = v23;
      uint64_t v34 = v11[2];
      BOOL v35 = __OFADD__(v34, 1);
      uint64_t v36 = v34 + 1;
      if (v35) {
        goto LABEL_75;
      }
      _OWORD v11[2] = v36;
      char isUniquelyReferenced_nonNull_native = 1;
    }
  }
  int64_t v15 = v72 + 6;
  while (v15 < v68)
  {
    if (*(void *)(v69 + 8 * v15++)) {
      goto LABEL_21;
    }
  }
LABEL_32:
  uint64_t v0 = *(void *)(v1 + 272);
  uint64_t v37 = *(void *)(v1 + 256);
  sub_100171BFC(v66);
  sub_10001A088();
  swift_release();
  swift_bridgeObjectRelease();
  if (v0 >= v37) {
    goto LABEL_44;
  }
  uint64_t v2 = *(void *)(v1 + 272);
  *(void *)(v1 + 264) = v11;
  BOOL v6 = 1;
  uint64_t v5 = *(void *)(v1 + 256);
LABEL_34:
  unint64_t v38 = *(void *)(v1 + 216);
  unint64_t v39 = v5 - v2;
  BOOL v40 = __OFSUB__(v5, v2);
  uint64_t v9 = v2 + v38;
  if (__OFADD__(v2, v38))
  {
    if (!v40)
    {
      if ((v39 & 0x8000000000000000) == 0 && v39 < v38)
      {
        uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_53;
      }
      __break(1u);
      goto LABEL_95;
    }
    __break(1u);
    goto LABEL_85;
  }
  if (v40)
  {
LABEL_85:
    __break(1u);
LABEL_86:
    if ((v0 & 0x8000000000000000) == 0)
    {
      uint64_t v48 = _swiftEmptyArrayStorage;
LABEL_88:
      uint64_t v62 = *(void *)(v1 + 208) + 32;
      unint64_t v63 = v62 + 16 * v2;
      unint64_t v64 = v62 + 16 * v9;
      if (v63 >= (unint64_t)&v48[2 * v0 + 4] || (unint64_t)(v48 + 4) >= v64)
      {
        swift_arrayInitWithCopy();
        goto LABEL_64;
      }
    }
LABEL_95:
    sub_1000111E4();
    _fatalErrorMessage(_:_:file:line:flags:)();
    sub_100171ECC();
    return;
  }
  uint64_t v44 = v2 + v38;
  if ((v39 & 0x8000000000000000) == 0 && v39 < v38)
  {
LABEL_53:
    uint64_t v44 = v9;
    uint64_t v9 = v5;
  }
  *(void *)(v1 + 272) = v44;
  uint64_t v0 = v9 - v2;
  if (v9 < v2) {
    goto LABEL_77;
  }
  if (!v6)
  {
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  if (v2 < 0)
  {
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  if (v5 < v9)
  {
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  uint64_t v45 = (void *)swift_dynamicCastClass();
  if (!v45)
  {
    swift_bridgeObjectRelease();
    uint64_t v45 = _swiftEmptyArrayStorage;
  }
  uint64_t v46 = v45[2];
  swift_release();
  if (v46 != v0)
  {
LABEL_81:
    swift_bridgeObjectRelease();
    if (v9 == v2)
    {
LABEL_63:
      uint64_t v48 = _swiftEmptyArrayStorage;
      goto LABEL_64;
    }
    if (v0 >= 1)
    {
      sub_10000D938(&qword_100326500);
      uint64_t v48 = (void *)swift_allocObject();
      size_t v61 = j__malloc_size(v48);
      sub_100171F8C(v61);
      goto LABEL_88;
    }
    goto LABEL_86;
  }
  uint64_t v47 = swift_dynamicCastClass();
  LODWORD(v48) = v47;
  if (!v47)
  {
    swift_bridgeObjectRelease();
    goto LABEL_63;
  }
LABEL_64:
  sub_10001747C();
  uint64_t v49 = type metadata accessor for TaskPriority();
  sub_100171FA4(v49);
  uint64_t v50 = swift_allocObject();
  sub_100171F04(v50);
  sub_100171B1C(v0, v2, &qword_100326298);
  sub_1000174CC();
  if (v48 == 1)
  {
    sub_1000185A8(*(void *)(v1 + 240), &qword_100326298);
    uint64_t v51 = 0;
    uint64_t v52 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    sub_100017C80();
    uint64_t v53 = sub_100171FFC();
    v54(v53);
    if (*(void *)v3)
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v51 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v52 = v55;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v51 = 0;
      uint64_t v52 = 0;
    }
  }
  uint64_t v56 = **(void **)(v1 + 200);
  sub_10000D938(&qword_100326350);
  if (v52 | v51)
  {
    id v57 = (void *)(v67 - 112);
    *id v57 = 0;
    v57[1] = 0;
    *(void *)(v1 + 88) = v51;
    *(void *)(v1 + 96) = v52;
  }
  sub_100017594();
  *(void *)(v1 + 112) = v58;
  *(void *)(v1 + 120) = v56;
  swift_task_create();
  swift_release();
  sub_1000185A8(v51, &qword_100326298);
  uint64_t v59 = (void *)swift_task_alloc();
  *(void *)(v1 + 280) = v59;
  sub_10000D938(&qword_1003264F8);
  void *v59 = v1;
  v59[1] = sub_10016E070;
  sub_100017040();
  sub_100171ECC();
  ThrowingTaskGroup.next(isolation:)();
}

uint64_t sub_10016E93C()
{
  sub_100010DA4();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000112AC();
  return v0();
}

uint64_t sub_10016E9A0(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, char a7)
{
  *(void *)(v7 + 16) = a1;
  uint64_t v9 = a7 & 1;
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))((char *)a4 + *a4);
  unint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v7 + 24) = v10;
  *unint64_t v10 = v7;
  v10[1] = sub_10016EA8C;
  return v12(a6, v9);
}

uint64_t sub_10016EA8C()
{
  sub_1000112E8();
  uint64_t v3 = v2;
  sub_100011168();
  uint64_t v5 = v4;
  sub_1000111B4();
  *BOOL v6 = v5;
  uint64_t v7 = *v1;
  sub_100010D94();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v9 = *(uint64_t (**)(void))(v7 + 8);
    return v9();
  }
  else
  {
    *(void *)(v5 + 32) = v3;
    sub_100017040();
    return _swift_task_switch(v11, v12, v13);
  }
}

uint64_t sub_10016EBA0()
{
  return sub_100171E80(*(void *)(v0 + 32));
}

uint64_t sub_10016EBA8(uint64_t a1, char a2, uint64_t a3)
{
  char v7 = a2 & 1;
  uint64_t v9 = *v3;
  uint64_t v8 = v3[1];
  unint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v10;
  *unint64_t v10 = v4;
  v10[1] = sub_10016EC68;
  return AppMetadataNetworkFetcher.fetch(ids:type:batchSize:)(a1, v7, a3, v9, v8);
}

uint64_t sub_10016EC68()
{
  sub_100010DA4();
  uint64_t v3 = v2;
  sub_100011168();
  uint64_t v4 = *v1;
  sub_100010D94();
  *uint64_t v5 = v4;
  uint64_t v6 = swift_task_dealloc();
  char v7 = *(uint64_t (**)(uint64_t))(v4 + 8);
  if (!v0) {
    uint64_t v6 = v3;
  }
  return v7(v6);
}

uint64_t sub_10016ED38(uint64_t result, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 32);
  if (a3)
  {
    id v4 = a3;
    return sub_1000189E4(v3, v4);
  }
  else if (a2)
  {
    id v5 = a2;
    return sub_1001CE290(v3, v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id GKAppMetadata.init(responseDataItem:)()
{
  v83[0] = 25705;
  v83[1] = 0xE200000000000000;
  sub_100171E68();
  sub_100010DD4();
  sub_1001658C4((uint64_t)v84);
  if (*((void *)&v87 + 1))
  {
    if ((sub_100011194() & 1) == 0) {
      goto LABEL_58;
    }
    strcpy((char *)v83, "attributes");
    BYTE3(v83[1]) = 0;
    HIDWORD(v83[1]) = -369098752;
    sub_100171E68();
    sub_100010DD4();
    swift_bridgeObjectRelease();
    sub_1001658C4((uint64_t)v84);
    if (*((void *)&v87 + 1))
    {
      sub_10000D938((uint64_t *)&unk_100326390);
      if ((sub_100017660() & 1) == 0)
      {
LABEL_58:
        swift_bridgeObjectRelease();
        return 0;
      }
      sub_100017D94(0xD000000000000012);
      sub_100171E68();
      sub_1000180A8();
      sub_1001658C4((uint64_t)v84);
      if (!*((void *)&v87 + 1)) {
        goto LABEL_47;
      }
      if ((sub_100017660() & 1) == 0) {
        goto LABEL_57;
      }
      v83[0] = 7565161;
      v83[1] = 0xE300000000000000;
      sub_100171E68();
      sub_100010DD4();
      swift_bridgeObjectRelease();
      sub_1001658C4((uint64_t)v84);
      if (!*((void *)&v87 + 1))
      {
LABEL_47:
        swift_bridgeObjectRelease();
        goto LABEL_48;
      }
      if ((sub_100017660() & 1) == 0)
      {
LABEL_57:
        swift_bridgeObjectRelease();
        goto LABEL_58;
      }
      strcpy((char *)v83, "shortName");
      WORD1(v83[1]) = 0;
      HIDWORD(v83[1]) = -385875968;
      sub_100171E68();
      sub_100010DD4();
      sub_1001658C4((uint64_t)v84);
      if (!*((void *)&v87 + 1))
      {
LABEL_46:
        swift_bridgeObjectRelease();
        goto LABEL_47;
      }
      if ((sub_100011194() & 1) == 0)
      {
LABEL_56:
        swift_bridgeObjectRelease();
        goto LABEL_57;
      }
      uint64_t v0 = v83[0];
      uint64_t v1 = v83[1];
      v83[0] = 1701667182;
      v83[1] = 0xE400000000000000;
      sub_100171E68();
      sub_1000180A8();
      sub_1001658C4((uint64_t)v84);
      if (!*((void *)&v87 + 1))
      {
LABEL_45:
        swift_bridgeObjectRelease();
        goto LABEL_46;
      }
      if ((sub_100011194() & 1) == 0) {
        goto LABEL_55;
      }
      uint64_t v82 = v1;
      uint64_t v2 = (void *)v83[0];
      uint64_t v81 = v83[1];
      strcpy((char *)v83, "bundleId");
      BYTE1(v83[1]) = 0;
      WORD1(v83[1]) = 0;
      HIDWORD(v83[1]) = -402653184;
      sub_100171E68();
      sub_100010DD4();
      sub_1001658C4((uint64_t)v84);
      if (!*((void *)&v87 + 1))
      {
LABEL_44:
        swift_bridgeObjectRelease();
        goto LABEL_45;
      }
      if ((sub_100011194() & 1) == 0)
      {
LABEL_54:
        swift_bridgeObjectRelease();
LABEL_55:
        swift_bridgeObjectRelease();
        goto LABEL_56;
      }
      NSString v79 = (NSString)v83[0];
      NSString v80 = (NSString)v83[1];
      sub_100017D94(0xD000000000000013);
      sub_100171E68();
      sub_100010DD4();
      sub_1001658C4((uint64_t)v84);
      if (*((void *)&v87 + 1))
      {
        NSString v77 = v2;
        uint64_t v78 = v0;
        if ((sub_100011194() & 1) == 0) {
          goto LABEL_53;
        }
        unsigned int v76 = LOBYTE(v83[0]);
        strcpy((char *)v83, "supportsArcade");
        HIBYTE(v83[1]) = -18;
        sub_100171E68();
        sub_1000180A8();
        sub_1001658C4((uint64_t)v84);
        if (*((void *)&v87 + 1))
        {
          if ((sub_100011194() & 1) == 0) {
            goto LABEL_53;
          }
          char v3 = v83[0];
          sub_100017D94(0xD000000000000016);
          sub_100171E68();
          sub_100010DD4();
          sub_1001658C4((uint64_t)v84);
          if (*((void *)&v87 + 1))
          {
            if ((sub_100011194() & 1) == 0) {
              goto LABEL_53;
            }
            int v75 = LOBYTE(v83[0]);
            strcpy((char *)v83, "deviceFamilies");
            HIBYTE(v83[1]) = -18;
            sub_100171E68();
            sub_1000180A8();
            sub_1001658C4((uint64_t)v84);
            if (*((void *)&v87 + 1))
            {
              sub_10000D938(&qword_100326FC0);
              if (sub_100011194())
              {
                strcpy((char *)v83, "artwork");
                v83[1] = 0xE700000000000000;
                sub_100171E68();
                sub_100010DD4();
                sub_1001658C4((uint64_t)v84);
                if (*((void *)&v87 + 1))
                {
                  if ((sub_100017660() & 1) == 0)
                  {
LABEL_52:
                    swift_bridgeObjectRelease();
                    goto LABEL_53;
                  }
                  id v4 = (void *)v83[0];
                  v83[0] = 7107189;
                  v83[1] = 0xE300000000000000;
                  sub_100171E68();
                  id v74 = v4;
                  sub_100169A40((uint64_t)v4, &v86);
                  sub_1001658C4((uint64_t)v84);
                  if (*((void *)&v87 + 1))
                  {
                    if ((sub_100011194() & 1) == 0)
                    {
LABEL_51:
                      swift_bridgeObjectRelease();
                      goto LABEL_52;
                    }
                    id v72 = (id)v83[0];
                    id v73 = (id)v83[1];
                    v83[0] = 0x6874646977;
                    v83[1] = 0xE500000000000000;
                    sub_100171E68();
                    sub_1000183F0();
                    sub_1001658C4((uint64_t)v84);
                    if (*((void *)&v87 + 1))
                    {
                      uint64_t v5 = sub_100163CE4(0, (unint64_t *)&qword_1003263A0);
                      if ((sub_100017660() & 1) == 0)
                      {
LABEL_50:
                        swift_bridgeObjectRelease();
                        goto LABEL_51;
                      }
                      id v71 = (id)v83[0];
                      v83[0] = 0x746867696568;
                      v83[1] = 0xE600000000000000;
                      sub_100171E68();
                      sub_1000183F0();
                      sub_1001658C4((uint64_t)v84);
                      if (*((void *)&v87 + 1))
                      {
                        if (sub_100017660())
                        {
                          id v66 = (id)v83[0];
                          uint64_t v6 = sub_10000D938(&qword_1003261C8);
                          uint64_t v67 = &v57;
                          __chkstk_darwin(v6 - 8, v7);
                          uint64_t v68 = v8;
                          sub_100171FC8();
                          uint64_t v9 = type metadata accessor for Date();
                          uint64_t v70 = v5;
                          uint64_t v69 = v9;
                          sub_10000D97C(v5, 1, 1, v9);
                          sub_100017D94(0xD000000000000011);
                          sub_100171E68();
                          sub_100010DD4();
                          swift_bridgeObjectRelease();
                          sub_1001658C4((uint64_t)v84);
                          if (*((void *)&v87 + 1))
                          {
                            sub_100163CE4(0, &qword_1003263B0);
                            if ((sub_100011194() & 1) == 0) {
                              goto LABEL_71;
                            }
                            unint64_t v10 = (void *)v83[0];
                            *(void *)&long long v86 = 0xD000000000000010;
                            *((void *)&v86 + 1) = 0x80000001002AF950;
                            uint64_t v11 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
                            id v65 = v10;
                            id v12 = [v10 objectForKeyedSubscript:v11];
                            swift_unknownObjectRelease();
                            if (v12)
                            {
                              _bridgeAnyObjectToAny(_:)();
                              swift_unknownObjectRelease();
                            }
                            else
                            {
                              long long v86 = 0u;
                              long long v87 = 0u;
                            }
                            sub_10001A2B4((uint64_t)&v86, (uint64_t)v84, &qword_100326FD0);
                            if (v85)
                            {
                              if (swift_dynamicCast())
                              {
                                if (qword_100325E90 != -1) {
                                  swift_once();
                                }
                                unint64_t v64 = (uint64_t *)qword_100326340;
                                NSString v16 = String._bridgeToObjectiveC()();
                                swift_bridgeObjectRelease();
                                id v17 = [v64 dateFromString:v16];

                                unint64_t v64 = &v57;
                                __chkstk_darwin(v18, v19);
                                sub_100171FC8();
                                if (v17)
                                {
                                  static Date._unconditionallyBridgeFromObjectiveC(_:)();

                                  LODWORD(v63) = 0;
                                }
                                else
                                {
                                  LODWORD(v63) = 1;
                                }

                                uint64_t v54 = v70;
                                sub_1000185A8(v70, &qword_1003261C8);
                                sub_10000D97C((uint64_t)v16, v63, 1, v69);
                                sub_10001A2B4((uint64_t)v16, v54, &qword_1003261C8);
                              }
                              else
                              {
                              }
LABEL_71:
                              *(void *)&long long v86 = 0x6F6C6F4374786574;
                              *((void *)&v86 + 1) = 0xEA00000000003172;
                              sub_10001779C();
                              sub_1000183F0();
                              sub_1001658C4((uint64_t)v84);
                              if (*((void *)&v87 + 1))
                              {
                                sub_100011194();
                                sub_1000181A0();
                                id v65 = v21;
                                if (v22) {
                                  uint64_t v23 = 0;
                                }
                                else {
                                  uint64_t v23 = v20;
                                }
                                unint64_t v64 = v23;
                              }
                              else
                              {
                                sub_1000185A8((uint64_t)&v86, &qword_100326FD0);
                                id v65 = 0;
                                unint64_t v64 = 0;
                              }
                              *(void *)&long long v86 = 0x6F6C6F4374786574;
                              *((void *)&v86 + 1) = 0xEA00000000003272;
                              sub_10001779C();
                              sub_1000183F0();
                              sub_1001658C4((uint64_t)v84);
                              if (*((void *)&v87 + 1))
                              {
                                sub_100011194();
                                sub_1000181A0();
                                uint64_t v63 = v25;
                                if (v22) {
                                  uint64_t v26 = 0;
                                }
                                else {
                                  uint64_t v26 = v24;
                                }
                                uint64_t v62 = v26;
                              }
                              else
                              {
                                sub_1000185A8((uint64_t)&v86, &qword_100326FD0);
                                uint64_t v63 = 0;
                                uint64_t v62 = 0;
                              }
                              *(void *)&long long v86 = 0x6F6C6F4374786574;
                              *((void *)&v86 + 1) = 0xEA00000000003372;
                              sub_10001779C();
                              sub_1000183F0();
                              sub_1001658C4((uint64_t)v84);
                              if (*((void *)&v87 + 1))
                              {
                                sub_100011194();
                                sub_1000181A0();
                                uint64_t v61 = v28;
                                if (v22) {
                                  uint64_t v29 = 0;
                                }
                                else {
                                  uint64_t v29 = v27;
                                }
                                uint64_t v60 = v29;
                              }
                              else
                              {
                                sub_1000185A8((uint64_t)&v86, &qword_100326FD0);
                                uint64_t v61 = 0;
                                uint64_t v60 = 0;
                              }
                              *(void *)&long long v86 = 0x6F6C6F4374786574;
                              *((void *)&v86 + 1) = 0xEA00000000003472;
                              sub_10001779C();
                              sub_1000183F0();
                              sub_1001658C4((uint64_t)v84);
                              if (*((void *)&v87 + 1))
                              {
                                sub_100011194();
                                sub_1000181A0();
                                uint64_t v59 = v31;
                                if (v22) {
                                  uint64_t v32 = 0;
                                }
                                else {
                                  uint64_t v32 = v30;
                                }
                                uint64_t v58 = v32;
                              }
                              else
                              {
                                sub_1000185A8((uint64_t)&v86, &qword_100326FD0);
                                uint64_t v59 = 0;
                                uint64_t v58 = 0;
                              }
                              *(void *)&long long v86 = 0x726F6C6F436762;
                              *((void *)&v86 + 1) = 0xE700000000000000;
                              sub_10001779C();
                              sub_100169A40((uint64_t)v74, &v86);
                              swift_bridgeObjectRelease();
                              sub_1001658C4((uint64_t)v84);
                              if (*((void *)&v87 + 1))
                              {
                                sub_100011194();
                                sub_1000181A0();
                                id v74 = v34;
                                if (v22) {
                                  uint64_t v35 = 0;
                                }
                                else {
                                  uint64_t v35 = v33;
                                }
                                uint64_t v57 = v35;
                              }
                              else
                              {
                                sub_1000185A8((uint64_t)&v86, &qword_100326FD0);
                                id v74 = 0;
                                uint64_t v57 = 0;
                              }
                              id v36 = objc_allocWithZone((Class)GKArtworkMetadata);
                              id v37 = v66;
                              id v38 = v71;
                              uint64_t v56 = (uint64_t)v74;
                              uint64_t v39 = (uint64_t)v73;
                              id v73 = v38;
                              id v74 = v37;
                              id v72 = sub_10016FDCC((uint64_t)v72, v39, v38, v37, (uint64_t)v65, (uint64_t)v64, v63, v62, v61, v60, v59, v58, v56, v57);
                              NSString v79 = String._bridgeToObjectiveC()();
                              swift_bridgeObjectRelease();
                              NSString v80 = String._bridgeToObjectiveC()();
                              swift_bridgeObjectRelease();
                              NSString v77 = String._bridgeToObjectiveC()();
                              swift_bridgeObjectRelease();
                              NSString v40 = String._bridgeToObjectiveC()();
                              swift_bridgeObjectRelease();
                              v41.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
                              uint64_t v42 = swift_bridgeObjectRelease();
                              __chkstk_darwin(v42, v43);
                              uint64_t v45 = (char *)&v57 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
                              sub_100171B1C(v70, (uint64_t)v45, &qword_1003261C8);
                              if (sub_10000DB14((uint64_t)v45, 1, v69) == 1)
                              {
                                Class isa = 0;
                              }
                              else
                              {
                                Class isa = Date._bridgeToObjectiveC()().super.isa;
                                sub_100017C80();
                                (*(void (**)(char *))(v47 + 8))(v45);
                              }
                              v83[0] = 0xD000000000000010;
                              v83[1] = 0x80000001002AF930;
                              sub_100171E68();
                              sub_1000180A8();
                              swift_bridgeObjectRelease();
                              sub_1001658C4((uint64_t)v84);
                              if (*((void *)&v87 + 1))
                              {
                                if (sub_100011194())
                                {
                                  NSString v48 = String._bridgeToObjectiveC()();
                                  swift_bridgeObjectRelease();
LABEL_109:
                                  id v49 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
                                  BYTE1(v55) = v75;
                                  LOBYTE(v55) = v3;
                                  uint64_t v50 = v79;
                                  uint64_t v51 = v80;
                                  uint64_t v52 = v77;
                                  id v53 = v72;
                                  id v13 = [v49 initWithBundleID:v79 adamID:v80 name:v77 shortName:v40 artwork:v72 supportsGameCenter:v76 supportsArcade:v72 supportsGameController:v41.super.isa isa:v48];

                                  sub_1000185A8(v70, &qword_1003261C8);
                                  return v13;
                                }
                              }
                              else
                              {
                                sub_1000185A8((uint64_t)&v86, &qword_100326FD0);
                              }
                              NSString v48 = 0;
                              goto LABEL_109;
                            }

                            int64_t v15 = (long long *)v84;
                          }
                          else
                          {
                            int64_t v15 = &v86;
                          }
                          sub_1000185A8((uint64_t)v15, &qword_100326FD0);
                          goto LABEL_71;
                        }

                        goto LABEL_50;
                      }
                    }
                    swift_bridgeObjectRelease();
                  }
                  swift_bridgeObjectRelease();
                }
                swift_bridgeObjectRelease();
                goto LABEL_43;
              }
LABEL_53:
              swift_bridgeObjectRelease();
              goto LABEL_54;
            }
          }
        }
      }
LABEL_43:
      swift_bridgeObjectRelease();
      goto LABEL_44;
    }
  }
LABEL_48:
  swift_bridgeObjectRelease();
  sub_1000185A8((uint64_t)&v86, &qword_100326FD0);
  return 0;
}

id sub_10016FCE8()
{
  id result = [objc_allocWithZone((Class)NSISO8601DateFormatter) init];
  qword_100326340 = (uint64_t)result;
  return result;
}

id sub_10016FD1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v11 = [v6 initWithType:a1 clientIdentifier:v9 clientVersion:v10 bag:a6];

  swift_unknownObjectRelease();
  return v11;
}

id sub_10016FDCC(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int64_t v15 = v14;
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a6)
  {
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v21 = 0;
  }
  if (a8)
  {
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v22 = 0;
  }
  if (a10)
  {
    NSString v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v23 = 0;
  }
  if (!a12)
  {
    NSString v24 = 0;
    if (a14) {
      goto LABEL_12;
    }
LABEL_14:
    NSString v25 = 0;
    goto LABEL_15;
  }
  NSString v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (!a14) {
    goto LABEL_14;
  }
LABEL_12:
  NSString v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
LABEL_15:
  id v26 = [v15 initWithTemplateURL:v20 width:a3 height:a4 textColor1:v21 textColor2:v22 textColor3:v23 textColor4:v24 backgroundColor:v25];

  return v26;
}

uint64_t sub_10016FF54(uint64_t a1, char a2)
{
  char v3 = v2;
  uint64_t v5 = *v2;
  sub_10000D938(&qword_100326508);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_39;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  if (!v10) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v13 << 6))
  {
    NSString v20 = (uint64_t *)(*(void *)(v5 + 48) + 16 * i);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    NSString v23 = *(void **)(*(void *)(v5 + 56) + 8 * i);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v24 = v23;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v26 = result & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) == 0)
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v25) >> 6;
      while (++v27 != v30 || (v29 & 1) == 0)
      {
        BOOL v31 = v27 == v30;
        if (v27 == v30) {
          unint64_t v27 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v11 + 8 * v27);
        if (v32 != -1)
        {
          unint64_t v28 = __clz(__rbit64(~v32)) + (v27 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    unint64_t v28 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v11 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
    uint64_t v33 = (void *)(*(void *)(v7 + 48) + 16 * v28);
    void *v33 = v22;
    v33[1] = v21;
    *(void *)(*(void *)(v7 + 56) + 8 * v28) = v23;
    ++*(void *)(v7 + 16);
    if (v10) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      goto LABEL_41;
    }
    if (v16 >= v36)
    {
      swift_release();
      char v3 = v35;
      id v17 = (void *)(v5 + 64);
      goto LABEL_34;
    }
    id v17 = (void *)(v5 + 64);
    unint64_t v18 = *(void *)(v37 + 8 * v16);
    ++v13;
    if (!v18)
    {
      int64_t v13 = v16 + 1;
      if (v16 + 1 >= v36) {
        goto LABEL_32;
      }
      unint64_t v18 = *(void *)(v37 + 8 * v13);
      if (!v18) {
        break;
      }
    }
LABEL_18:
    unint64_t v10 = (v18 - 1) & v18;
  }
  int64_t v19 = v16 + 2;
  if (v19 < v36)
  {
    unint64_t v18 = *(void *)(v37 + 8 * v19);
    if (!v18)
    {
      while (1)
      {
        int64_t v13 = v19 + 1;
        if (__OFADD__(v19, 1)) {
          goto LABEL_42;
        }
        if (v13 >= v36) {
          goto LABEL_32;
        }
        unint64_t v18 = *(void *)(v37 + 8 * v13);
        ++v19;
        if (v18) {
          goto LABEL_18;
        }
      }
    }
    int64_t v13 = v19;
    goto LABEL_18;
  }
LABEL_32:
  swift_release();
  char v3 = v35;
LABEL_34:
  if (v38)
  {
    uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
    if (v34 >= 64) {
      sub_10017779C(0, (unint64_t)(v34 + 63) >> 6, v17);
    }
    else {
      void *v17 = -1 << v34;
    }
    *(void *)(v5 + 16) = 0;
  }
LABEL_39:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_100170254(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  *a1 = a4;
  swift_bridgeObjectRetain();
  id v6 = a4;
  return a2;
}

uint64_t sub_10017029C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  unint64_t v10 = (void *)(v9 + 16 * v8);
  BOOL v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v15 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v15;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      int64_t v16 = (void *)(v9 + 16 * v8);
      BOOL v17 = *v16 == a1 && v16[1] == a2;
    }
    while (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v2;
  uint64_t v19 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100178228();
    uint64_t v13 = v19;
  }
  uint64_t v14 = *(void *)(*(void *)(v13 + 48) + 16 * v8);
  sub_10017062C(v8);
  uint64_t *v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

void sub_10017042C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v12 = v10 & ~v11;
  uint64_t v13 = v5 + 56;
  if ((*(void *)(v5 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    uint64_t v22 = a2;
    a1 = ~v11;
    uint64_t v5 = *(void *)(v5 + 48);
    while (1)
    {
      uint64_t v14 = (void *)(v5 + 40 * v12);
      uint64_t v15 = v14[2];
      uint64_t v16 = v14[3];
      BOOL v17 = *v14 == v6 && v14[1] == v7;
      if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        BOOL v18 = v15 == v8 && v16 == v9;
        if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
      }
      unint64_t v12 = (v12 + 1) & a1;
      if (((*(void *)(v13 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        sub_100017814();
        a2 = v22;
        goto LABEL_19;
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = *v23;
    uint64_t v24 = *v23;
    *NSString v23 = 0x8000000000000000;
    a2 = v22;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100178398();
      uint64_t v20 = v24;
    }
    uint64_t v21 = *(void *)(v20 + 48) + 40 * v12;
    a1 = *(void *)v21;
    uint64_t v13 = *(void *)(v21 + 8);
    uint64_t v5 = *(void *)(v21 + 16);
    uint64_t v6 = *(void *)(v21 + 24);
    uint64_t v7 = *(void *)(v21 + 32);
    sub_1001707E8(v12);
    *NSString v23 = v24;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_100017814();
  }
LABEL_19:
  *a2 = a1;
  a2[1] = v13;
  a2[2] = v5;
  a2[3] = v6;
  a2[4] = v7;
}

unint64_t sub_10017062C(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        Swift::Int v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 >= v9 && v2 >= v11)
          {
LABEL_15:
            uint64_t v14 = *(void *)(v3 + 48);
            uint64_t v15 = (_OWORD *)(v14 + 16 * v2);
            uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
            BOOL v17 = v2 != v6 || v15 >= v16 + 1;
            int64_t v2 = v6;
            if (v17)
            {
              *uint64_t v15 = *v16;
              int64_t v2 = v6;
            }
          }
        }
        else if (v11 >= v9 || v2 >= v11)
        {
          goto LABEL_15;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v18 = *(void *)(v3 + 16);
  BOOL v19 = __OFSUB__(v18, 1);
  uint64_t v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_1001707E8(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      uint64_t v9 = (v8 + 1) & v7;
      uint64_t v27 = v4;
      do
      {
        uint64_t v10 = v3;
        Swift::Int v11 = *(void **)(*(void *)(v3 + 48) + 40 * v6 + 32);
        unint64_t v12 = v9;
        Hasher.init(_seed:)();
        id v13 = v11;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        Swift::Int v14 = Hasher._finalize()();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v9 = v12;
        Swift::Int v15 = v14 & v7;
        if (v2 >= (uint64_t)v12)
        {
          if (v15 >= v12 && v2 >= v15)
          {
LABEL_9:
            uint64_t v3 = v10;
            uint64_t v17 = *(void *)(v10 + 48);
            unint64_t v18 = v17 + 40 * v2;
            BOOL v19 = (long long *)(v17 + 40 * v6);
            BOOL v20 = v2 != v6 || v18 >= (unint64_t)v19 + 40;
            int64_t v2 = v6;
            uint64_t v4 = v27;
            if (v20)
            {
              long long v21 = *v19;
              long long v22 = v19[1];
              *(void *)(v18 + 32) = *((void *)v19 + 4);
              *(_OWORD *)unint64_t v18 = v21;
              *(_OWORD *)(v18 + 16) = v22;
              int64_t v2 = v6;
            }
            goto LABEL_21;
          }
        }
        else if (v15 >= v12 || v2 >= v15)
        {
          goto LABEL_9;
        }
        uint64_t v4 = v27;
        uint64_t v3 = v10;
LABEL_21:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v24 = *(void *)(v3 + 16);
  BOOL v25 = __OFSUB__(v24, 1);
  uint64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v26;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

void sub_100170A28(uint64_t a1, void *a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a2 setAdditionalQueryParams:isa];
}

uint64_t sub_100170AA0(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t sub_100170AF4(void *a1)
{
  id v2 = [a1 responseDataItems];

  if (!v2) {
    return 0;
  }
  sub_10000D938((uint64_t *)&unk_100326390);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void sub_100170B60(uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [a2 setBundleIdentifiers:isa];
}

void sub_100170BC0(uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [a2 setItemIdentifiers:isa];
}

id sub_100170C20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *(void *)(a5 - 8);
  __chkstk_darwin(a1, a2);
  Swift::Int v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (char *)objc_allocWithZone((Class)type metadata accessor for AppMetadataFetcher());
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, a5);
  id v17 = sub_100170E44(a1, (uint64_t)v15, v16, a4, a5, a6, a7);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a2, a5);
  return v17;
}

uint64_t sub_100170D50(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

id sub_100170DA0(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  unint64_t v8 = sub_100171748();
  v13[3] = &type metadata for AppMetadataNetworkFetcher;
  void v13[4] = &protocol witness table for AppMetadataNetworkFetcher;
  v13[0] = a2;
  v13[1] = a3;
  uint64_t v9 = &a4[OBJC_IVAR___GKAppMetadataFetcher_cache];
  *(void *)uint64_t v9 = a1;
  *((void *)v9 + 1) = v8;
  sub_100171960((uint64_t)v13, (uint64_t)&a4[OBJC_IVAR___GKAppMetadataFetcher_network]);
  v12.receiver = a4;
  v12.super_class = (Class)type metadata accessor for AppMetadataFetcher();
  id v10 = [super init];
  sub_100016C38((uint64_t)v13);
  return v10;
}

id sub_100170E44(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v17[3] = a5;
  void v17[4] = a7;
  objc_super v12 = sub_100171DD8(v17);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(v12, a2, a5);
  uint64_t v13 = &a3[OBJC_IVAR___GKAppMetadataFetcher_cache];
  *(void *)uint64_t v13 = a1;
  *((void *)v13 + 1) = a6;
  sub_100171960((uint64_t)v17, (uint64_t)&a3[OBJC_IVAR___GKAppMetadataFetcher_network]);
  v16.receiver = a3;
  v16.super_class = (Class)type metadata accessor for AppMetadataFetcher();
  id v14 = [super init];
  sub_100016C38((uint64_t)v17);
  return v14;
}

uint64_t sub_100170F14()
{
  sub_100171EE8();
  sub_100016980();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100171EBC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100171E3C;
  sub_100171F20();
  sub_100171EA0();
  return sub_10016A3CC(v3, v4, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t type metadata accessor for AppMetadataFetcher()
{
  return self;
}

uint64_t sub_100170FF0()
{
  sub_100017D24();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100171EBC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100171E3C;
  sub_100171F20();
  sub_100018250();
  return sub_10016DC00(v3, v4, v5, v6, v7, v8, v9);
}

unint64_t sub_1001710A4()
{
  unint64_t result = qword_1003263B8;
  if (!qword_1003263B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003263B8);
  }
  return result;
}

unint64_t sub_1001710F4()
{
  unint64_t result = qword_1003263C0;
  if (!qword_1003263C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003263C0);
  }
  return result;
}

unsigned char *initializeBufferWithCopyOfBuffer for GameIdentifierType(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t sub_100171154(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_10017115C(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

void type metadata accessor for GameIdentifierType()
{
}

uint64_t getEnumTagSinglePayload for BulletinHelpers.BulletinRelationships.LeaderboardRelationship.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *_s14GameDaemonCore18GameIdentifierTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001712C8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for AppMetadataFetcher.FetcherError()
{
}

void *initializeBufferWithCopyOfBuffer for AppMetadataNetworkFetcher(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for AppMetadataNetworkFetcher()
{
  return swift_release();
}

void *assignWithCopy for AppMetadataNetworkFetcher(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for AppMetadataNetworkFetcher(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AppMetadataNetworkFetcher(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppMetadataNetworkFetcher(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for AppMetadataNetworkFetcher()
{
}

uint64_t sub_100171430()
{
  sub_100016980();
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 40);
  char v7 = *(unsigned char *)(v0 + 48);
  uint64_t v8 = *(void *)(v0 + 56);
  uint64_t v9 = *(void *)(v0 + 64);
  uint64_t v10 = swift_task_alloc();
  double v11 = (void *)sub_100171EBC(v10);
  *double v11 = v12;
  v11[1] = sub_100171E3C;
  return sub_10016C3F4(v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_100171514()
{
  _Block_release(*(const void **)(v0 + 48));
  _Block_release(*(const void **)(v0 + 56));

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10017156C()
{
  sub_100017D24();
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)v0[6];
  uint64_t v6 = (const void *)v0[7];
  char v7 = (void *)v0[8];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v8;
  *uint64_t v8 = v1;
  v8[1] = sub_100171648;
  uint64_t v9 = (uint64_t (*)(int, int, int, void *, const void *, void *))((char *)&dword_100326440 + dword_100326440);
  return v9(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_100171648()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  swift_task_dealloc();
  sub_1000112AC();
  return v3();
}

uint64_t sub_100171708()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100171740(uint64_t a1)
{
  sub_10016B674(a1, *(void *)(v1 + 16));
}

unint64_t sub_100171748()
{
  unint64_t result = qword_100326458;
  if (!qword_100326458)
  {
    type metadata accessor for AppMetadataCache();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100326458);
  }
  return result;
}

uint64_t sub_100171798()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001717D8()
{
  sub_100010F2C();
  uint64_t v3 = v2;
  char v5 = v4 & 1;
  uint64_t v6 = v0[2];
  uint64_t v7 = v0[3];
  uint64_t v8 = v0[4];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v9;
  *uint64_t v9 = v1;
  v9[1] = sub_100171894;
  return sub_10016C9E0(v3, v5, v6, v7, v8);
}

uint64_t sub_100171894()
{
  sub_100010DA4();
  uint64_t v2 = v1;
  sub_100011168();
  uint64_t v3 = *v0;
  sub_100010D94();
  *char v4 = v3;
  swift_task_dealloc();
  char v5 = *(uint64_t (**)(uint64_t))(v3 + 8);
  return v5(v2);
}

uint64_t sub_100171960(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_1001719C4()
{
  unint64_t result = qword_1003264E0;
  if (!qword_1003264E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1003264E0);
  }
  return result;
}

uint64_t sub_100171A10()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 57, 7);
}

uint64_t sub_100171A58()
{
  sub_100017D24();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100171EBC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100171E3C;
  sub_100018250();
  return sub_10016E9A0(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_100171B1C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10000D938(a3);
  sub_100017C80();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_100171B7C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100170254(&v6, *(void *)a1, *(void *)(a1 + 8), *(void **)(a1 + 16));
  uint64_t v4 = v6;
  *a2 = result;
  a2[1] = v5;
  a2[2] = v4;
  return result;
}

uint64_t sub_100171BC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  *a4 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v6 = v7;
  a4[1] = result;
  a4[2] = ~v4;
  if (-v4 < 64) {
    uint64_t v8 = ~(-1 << -(char)v4);
  }
  else {
    uint64_t v8 = -1;
  }
  a4[3] = 0;
  a4[4] = v8 & v6;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

uint64_t sub_100171BFC(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100171C10()
{
  sub_100171EE8();
  sub_100016980();
  sub_100017D08();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100171EBC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100171E3C;
  sub_1000182FC();
  sub_100171EA0();
  return sub_10016ACBC(v3, v11, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_100171CA4()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100171CF4()
{
  sub_100171EE8();
  sub_100016980();
  sub_100017D08();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100171EBC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100171648;
  sub_1000182FC();
  sub_100171EA0();
  return sub_10016B03C(v3, v11, v4, v5, v6, v7, v8, v9, v10);
}

unint64_t sub_100171D84()
{
  unint64_t result = qword_100326540;
  if (!qword_100326540)
  {
    sub_100163988(&qword_100326510);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100326540);
  }
  return result;
}

uint64_t *sub_100171DD8(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_100171E68()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t sub_100171E80@<X0>(uint64_t a1@<X8>)
{
  **(void **)(v1 + 16) = a1;
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100171EBC(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t sub_100171F04(uint64_t result)
{
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = v3;
  *(void *)(result + 40) = v2;
  *(void *)(result + 48) = v1;
  *(unsigned char *)(result + 56) = v4;
  return result;
}

uint64_t sub_100171F20()
{
  return v0;
}

uint64_t sub_100171F3C()
{
  return type metadata accessor for TaskPriority();
}

void sub_100171F64(uint64_t a1@<X8>)
{
  *(void *)(a1 + 64) |= v1;
}

uint64_t sub_100171F8C(uint64_t result)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = 2 * ((result - 32) / 16);
  return result;
}

uint64_t sub_100171FA4(uint64_t a1)
{
  return sub_10000D97C(v1, 1, 1, a1);
}

uint64_t sub_100171FDC(uint64_t a1)
{
  return sub_10000D97C(v1, 1, 1, a1);
}

uint64_t sub_100171FFC()
{
  return v0;
}

uint64_t sub_100172010()
{
  return 0;
}

unint64_t sub_100172024(char a1)
{
  unint64_t result = 0xD000000000000014;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x64656D6167;
      break;
    case 2:
      unint64_t result = 0x746E6543656D6147;
      break;
    case 3:
      unint64_t result = 0x7265764F656D6167;
      break;
    case 4:
      unint64_t result = 0x616C7069746C754DLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001720F0(char a1)
{
  return *(void *)&a1688540[8 * a1];
}

unint64_t sub_100172108(unsigned __int8 a1)
{
  int v2 = a1;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = sub_100172024(a1);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 2570;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  if (v2 == 4) {
    unint64_t v5 = 0xD0000000000000C5;
  }
  else {
    unint64_t v5 = 0xD000000000000065;
  }
  if (v2 == 4) {
    unint64_t v6 = 0x80000001002AFD90;
  }
  else {
    unint64_t v6 = 0x80000001002AFD20;
  }
  unint64_t v7 = v6;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
  return 0xD000000000000010;
}

id GameDaemonTTR.__allocating_init(clientProxyBundleIdentifier:localPlayer:)(uint64_t a1, void *a2, void *a3)
{
  id v7 = objc_allocWithZone(v3);
  return GameDaemonTTR.init(clientProxyBundleIdentifier:localPlayer:)(a1, a2, a3);
}

id GameDaemonTTR.init(clientProxyBundleIdentifier:localPlayer:)(uint64_t a1, void *a2, void *a3)
{
  id v7 = (uint64_t *)&v3[OBJC_IVAR____TtC14GameDaemonCore13GameDaemonTTR_clientProxyBundleIdentifier];
  *id v7 = a1;
  v7[1] = (uint64_t)a2;
  *(void *)&v3[OBJC_IVAR____TtC14GameDaemonCore13GameDaemonTTR_localPlayer] = a3;
  v39.receiver = v3;
  v39.Class super_class = (Class)type metadata accessor for GameDaemonTTR();
  Class super_class = v39.super_class;
  swift_bridgeObjectRetain();
  id v8 = a3;
  id v9 = [super init];
  os_log_type_t v10 = static os_log_type_t.default.getter();
  v38[0] = 0;
  v38[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(64);
  v11._countAndFlagsBits = 0xD000000000000029;
  v11._object = (void *)0x80000001002AFB00;
  String.append(_:)(v11);
  v12._countAndFlagsBits = a1;
  v12._object = a2;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._object = (void *)0x80000001002AFB30;
  v13._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v13);
  id v14 = [v8 description];
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v17 = v16;

  v18._countAndFlagsBits = v15;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  uint64_t v19 = type metadata accessor for Logger();
  sub_100011108();
  uint64_t v21 = v20;
  __chkstk_darwin(v22, v23);
  sub_1000110F8();
  uint64_t v26 = v25 - v24;
  static GKLog.daemon.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v27 = Logger.logObject.getter();
  if (os_log_type_enabled(v27, v10))
  {
    uint64_t v36 = v19;
    unint64_t v28 = (uint8_t *)sub_100016FF0();
    v38[0] = sub_100011BBC();
    *(_DWORD *)unint64_t v28 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v29 = sub_100174CE4(0, 0xE000000000000000, v38);
    sub_100011BEC(v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v27, v10, "TTR - %s", v28, 0xCu);
    swift_arrayDestroy();
    sub_100010D7C();
    sub_100010D7C();

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v26, v36);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v26, v19);
  }
  swift_bridgeObjectRelease();
  if (&class metadata base offset for TapToRadarService) {
    BOOL v30 = &type metadata accessor for TapToRadarService == 0;
  }
  else {
    BOOL v30 = 1;
  }
  if (v30 || &type metadata for TapToRadarService == 0 || &nominal type descriptor for TapToRadarService == 0)
  {
  }
  else
  {
    type metadata accessor for TapToRadarService();
    uint64_t v33 = (void *)static TapToRadarService.shared.getter();
    v38[3] = (uint64_t)super_class;
    v38[4] = sub_1001725B8();
    v38[0] = (uint64_t)v9;
    id v34 = v9;
    TapToRadarService.draftObserver.setter();
  }
  return v9;
}

uint64_t type metadata accessor for GameDaemonTTR()
{
  return self;
}

unint64_t sub_1001725B8()
{
  unint64_t result = qword_1003265C0;
  if (!qword_1003265C0)
  {
    type metadata accessor for GameDaemonTTR();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003265C0);
  }
  return result;
}

Swift::String_optional __swiftcall GameDaemonTTR.getURLForNewMultiplayerRadar(callbackIdentifier:descriptionAddition:)(Swift::String_optional callbackIdentifier, Swift::String_optional descriptionAddition)
{
  object = descriptionAddition.value._object;
  uint64_t countAndFlagsBits = descriptionAddition.value._countAndFlagsBits;
  Swift::String v4 = callbackIdentifier.value._object;
  uint64_t v5 = callbackIdentifier.value._countAndFlagsBits;
  uint64_t v6 = sub_10000D938(&qword_100327E70);
  __chkstk_darwin(v6 - 8, v7);
  sub_1000110F8();
  uint64_t v10 = v9 - v8;
  sub_100172778(4, v5, (unint64_t)v4, countAndFlagsBits, (uint64_t)object, v9 - v8);
  uint64_t v11 = type metadata accessor for URL();
  if (sub_10000DB14(v10, 1, v11) == 1)
  {
    sub_10000DB3C(v10, &qword_100327E70);
    uint64_t v12 = 0;
    Swift::String v13 = 0;
  }
  else
  {
    uint64_t v12 = URL.absoluteString.getter();
    Swift::String v13 = v14;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  }
  uint64_t v15 = v12;
  objc_super v16 = v13;
  result.value._object = v16;
  result.value._uint64_t countAndFlagsBits = v15;
  return result;
}

uint64_t sub_100172778@<X0>(int a1@<W0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v92 = a4;
  uint64_t v93 = a2;
  unint64_t v94 = a3;
  uint64_t v95 = a6;
  int v98 = a1;
  uint64_t v7 = type metadata accessor for URLQueryItem();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7, v10);
  unint64_t v11 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  URLQueryItem.init(name:value:)();
  uint64_t v12 = sub_1001B742C(0, 1, 1, (uint64_t)_swiftEmptyArrayStorage);
  unint64_t v14 = *(void *)(v12 + 16);
  unint64_t v13 = *(void *)(v12 + 24);
  if (v14 >= v13 >> 1) {
    uint64_t v12 = sub_1001B742C(v13 > 1, v14 + 1, 1, v12);
  }
  *(void *)(v12 + 16) = v14 + 1;
  id v17 = *(uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32);
  uint64_t v15 = v8 + 32;
  objc_super v16 = v17;
  unint64_t v100 = (*(unsigned __int8 *)(v15 + 48) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 48);
  uint64_t v99 = *(void *)(v15 + 40);
  uint64_t v18 = v17(v12 + v100 + v99 * v14, (char *)&v91 - v11, v7);
  __chkstk_darwin(v18, v19);
  uint64_t v20 = (char *)&v91 - v11;
  URLQueryItem.init(name:value:)();
  swift_bridgeObjectRelease();
  unint64_t v22 = *(void *)(v12 + 16);
  unint64_t v21 = *(void *)(v12 + 24);
  if (v22 >= v21 >> 1) {
    uint64_t v12 = sub_1001B742C(v21 > 1, v22 + 1, 1, v12);
  }
  *(void *)(v12 + 16) = v22 + 1;
  v97 = v16;
  uint64_t v23 = v16(v12 + v100 + v22 * v99, v20, v7);
  __chkstk_darwin(v23, v24);
  unint64_t v25 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  URLQueryItem.init(name:value:)();
  unint64_t v27 = *(void *)(v12 + 16);
  unint64_t v26 = *(void *)(v12 + 24);
  if (v27 >= v26 >> 1) {
    uint64_t v12 = sub_1001B742C(v26 > 1, v27 + 1, 1, v12);
  }
  *(void *)(v12 + 16) = v27 + 1;
  unint64_t v28 = v12 + v100 + v27 * v99;
  uint64_t v29 = v97;
  uint64_t v30 = v97(v28, (char *)&v91 - v25, v7);
  __chkstk_darwin(v30, v31);
  uint64_t v32 = (char *)&v91 - v25;
  URLQueryItem.init(name:value:)();
  swift_bridgeObjectRelease();
  unint64_t v34 = *(void *)(v12 + 16);
  unint64_t v33 = *(void *)(v12 + 24);
  if (v34 >= v33 >> 1) {
    uint64_t v12 = sub_1001B742C(v33 > 1, v34 + 1, 1, v12);
  }
  *(void *)(v12 + 16) = v34 + 1;
  uint64_t v96 = v7;
  uint64_t v35 = v29(v12 + v100 + v34 * v99, v32, v7);
  __chkstk_darwin(v35, v36);
  unint64_t v37 = sub_100172108(v98);
  unint64_t v39 = v38;
  unint64_t v103 = 0;
  unint64_t v104 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  unint64_t v103 = 0xD000000000000019;
  unint64_t v104 = 0x80000001002AFC80;
  if (a5)
  {
    uint64_t v101 = v92;
    uint64_t v102 = a5;
    swift_bridgeObjectRetain();
    uint64_t v40 = String.init<A>(reflecting:)();
    unint64_t v42 = v41;
  }
  else
  {
    unint64_t v42 = 0xE300000000000000;
    uint64_t v40 = 7104878;
  }
  unint64_t v43 = v42;
  String.append(_:)(*(Swift::String *)&v40);
  swift_bridgeObjectRelease();
  uint64_t v45 = v103;
  uint64_t v44 = (void *)v104;
  unint64_t v103 = v37;
  unint64_t v104 = v39;
  swift_bridgeObjectRetain();
  v46._uint64_t countAndFlagsBits = v45;
  v46._object = v44;
  String.append(_:)(v46);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  URLQueryItem.init(name:value:)();
  swift_bridgeObjectRelease();
  unint64_t v48 = *(void *)(v12 + 16);
  unint64_t v47 = *(void *)(v12 + 24);
  if (v48 >= v47 >> 1) {
    uint64_t v12 = sub_1001B742C(v47 > 1, v48 + 1, 1, v12);
  }
  uint64_t v49 = v96;
  uint64_t v50 = v97;
  *(void *)(v12 + 16) = v48 + 1;
  uint64_t v51 = v50(v12 + v100 + v48 * v99, (char *)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v49);
  __chkstk_darwin(v51, v52);
  unint64_t v53 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  URLQueryItem.init(name:value:)();
  unint64_t v55 = *(void *)(v12 + 16);
  unint64_t v54 = *(void *)(v12 + 24);
  if (v55 >= v54 >> 1) {
    uint64_t v12 = sub_1001B742C(v54 > 1, v55 + 1, 1, v12);
  }
  *(void *)(v12 + 16) = v55 + 1;
  uint64_t v56 = v96;
  uint64_t v57 = v50(v12 + v100 + v55 * v99, (char *)&v91 - v53, v96);
  __chkstk_darwin(v57, v58);
  uint64_t v59 = (char *)&v91 - v53;
  sub_1001720F0(v98);
  URLQueryItem.init(name:value:)();
  swift_bridgeObjectRelease();
  unint64_t v61 = *(void *)(v12 + 16);
  unint64_t v60 = *(void *)(v12 + 24);
  if (v61 >= v60 >> 1) {
    uint64_t v12 = sub_1001B742C(v60 > 1, v61 + 1, 1, v12);
  }
  *(void *)(v12 + 16) = v61 + 1;
  uint64_t v62 = v50(v12 + v100 + v61 * v99, v59, v56);
  __chkstk_darwin(v62, v63);
  URLQueryItem.init(name:value:)();
  unint64_t v65 = *(void *)(v12 + 16);
  unint64_t v64 = *(void *)(v12 + 24);
  if (v65 >= v64 >> 1) {
    uint64_t v12 = sub_1001B742C(v64 > 1, v65 + 1, 1, v12);
  }
  *(void *)(v12 + 16) = v65 + 1;
  uint64_t v66 = v50(v12 + v100 + v65 * v99, (char *)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v56);
  if (v94)
  {
    uint64_t v68 = HIBYTE(v94) & 0xF;
    if ((v94 & 0x2000000000000000) == 0) {
      uint64_t v68 = v93 & 0xFFFFFFFFFFFFLL;
    }
    if (v68)
    {
      __chkstk_darwin(v66, v67);
      URLQueryItem.init(name:value:)();
      unint64_t v70 = *(void *)(v12 + 16);
      unint64_t v69 = *(void *)(v12 + 24);
      if (v70 >= v69 >> 1) {
        uint64_t v12 = sub_1001B742C(v69 > 1, v70 + 1, 1, v12);
      }
      *(void *)(v12 + 16) = v70 + 1;
      v50(v12 + v100 + v70 * v99, (char *)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v56);
    }
  }
  id v71 = [objc_allocWithZone((Class)NSDateFormatter) init];
  sub_1001666B0(0xD000000000000013, 0x80000001002AFCC0, v71);
  uint64_t v72 = type metadata accessor for Date();
  uint64_t v73 = *(void *)(v72 - 8);
  __chkstk_darwin(v72, v74);
  unsigned int v76 = (char *)&v91 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v73 + 8))(v76, v72);
  id v78 = [v71 stringFromDate:isa];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  __chkstk_darwin(v79, v80);
  uint64_t v81 = (char *)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLQueryItem.init(name:value:)();
  swift_bridgeObjectRelease();
  unint64_t v83 = *(void *)(v12 + 16);
  unint64_t v82 = *(void *)(v12 + 24);
  if (v83 >= v82 >> 1) {
    uint64_t v12 = sub_1001B742C(v82 > 1, v83 + 1, 1, v12);
  }
  v84 = (void (*)(unint64_t, char *, uint64_t))v97;
  *(void *)(v12 + 16) = v83 + 1;
  v84(v12 + v100 + v83 * v99, v81, v56);
  uint64_t v85 = type metadata accessor for URLComponents();
  uint64_t v86 = *(void *)(v85 - 8);
  __chkstk_darwin(v85, v87);
  v89 = (char *)&v91 - ((v88 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init()();
  URLComponents.scheme.setter();
  URLComponents.host.setter();
  URLComponents.queryItems.setter();
  URLComponents.url.getter();

  return (*(uint64_t (**)(char *, uint64_t))(v86 + 8))(v89, v85);
}

Swift::String_optional __swiftcall GameDaemonTTR.getURLForExistingMultiplayerRadar(radarID:)(Swift::String radarID)
{
  type metadata accessor for URLComponents();
  sub_100011108();
  __chkstk_darwin(v1, v2);
  sub_1000110F8();
  URLComponents.init()();
  URLComponents.scheme.setter();
  swift_bridgeObjectRetain();
  URLComponents.host.setter();
  uint64_t v3 = sub_10000D938(&qword_100327E70);
  __chkstk_darwin(v3 - 8, v4);
  sub_1000110F8();
  uint64_t v7 = v6 - v5;
  URLComponents.url.getter();
  uint64_t v8 = type metadata accessor for URL();
  if (sub_10000DB14(v7, 1, v8) == 1)
  {
    uint64_t v9 = sub_1001755E0();
    v10(v9);
    sub_10000DB3C(v7, &qword_100327E70);
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v11 = URL.absoluteString.getter();
    uint64_t v12 = v13;
    uint64_t v14 = sub_1001755E0();
    v15(v14);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  uint64_t v16 = v11;
  id v17 = v12;
  result.value._object = v17;
  result.value._uint64_t countAndFlagsBits = v16;
  return result;
}

void GameDaemonTTR.init()()
{
}

id GameDaemonTTR.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for GameDaemonTTR();
  return [super dealloc];
}

Swift::Void __swiftcall GameDaemonTTR.tapToRadarDidFileRadar(_:callbackIdentifier:)(Swift::Int64 _, Swift::String callbackIdentifier)
{
  object = callbackIdentifier._object;
  uint64_t countAndFlagsBits = callbackIdentifier._countAndFlagsBits;
  uint64_t v5 = type metadata accessor for Logger();
  sub_100011108();
  uint64_t v7 = v6;
  uint64_t v10 = __chkstk_darwin(v8, v9);
  v116 = (char *)&v110 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v12);
  sub_1000184E8();
  uint64_t v118 = v13;
  __chkstk_darwin(v14, v15);
  sub_1000184E8();
  sub_100010DF0();
  uint64_t v18 = __chkstk_darwin(v16, v17);
  uint64_t v20 = (char *)&v110 - v19;
  __chkstk_darwin(v18, v21);
  sub_1000184E8();
  sub_100010DF0();
  __chkstk_darwin(v22, v23);
  sub_1000184E8();
  sub_100010DF0();
  __chkstk_darwin(v24, v25);
  unint64_t v27 = (char *)&v110 - v26;
  os_log_type_t v28 = static os_log_type_t.default.getter();
  uint64_t aBlock = 0;
  unint64_t v125 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease();
  uint64_t aBlock = 0xD00000000000001ALL;
  unint64_t v125 = 0x80000001002AFB70;
  uint64_t v117 = _;
  *(void *)&long long v130 = _;
  v29._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._uint64_t countAndFlagsBits = 0x61626C6C6163202CLL;
  v30._object = (void *)0xEE00203A44496B63;
  String.append(_:)(v30);
  unint64_t v119 = countAndFlagsBits;
  uint64_t v120 = (uint64_t)object;
  v31._uint64_t countAndFlagsBits = countAndFlagsBits;
  v31._object = object;
  String.append(_:)(v31);
  uint64_t v32 = aBlock;
  unint64_t v33 = v125;
  static GKLog.daemon.getter();
  swift_bridgeObjectRetain_n();
  unint64_t v34 = Logger.logObject.getter();
  BOOL v35 = os_log_type_enabled(v34, v28);
  uint64_t v121 = v7;
  v112 = v20;
  if (v35)
  {
    uint64_t v36 = sub_100016FF0();
    uint64_t v114 = v5;
    unint64_t v37 = (uint8_t *)v36;
    uint64_t aBlock = sub_100011BBC();
    *(_DWORD *)unint64_t v37 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v38 = sub_100174CE4(v32, v33, &aBlock);
    sub_100011BEC(v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v34, v28, "TTR - %s", v37, 0xCu);
    swift_arrayDestroy();
    sub_100010D7C();
    uint64_t v5 = v114;
    uint64_t v7 = v121;
    sub_100010D7C();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  unint64_t v39 = *(void (**)(char *, uint64_t))(v7 + 8);
  v39(v27, v5);
  swift_bridgeObjectRelease();
  uint64_t v40 = Data.init(base64Encoded:options:)();
  if (v41 >> 60 == 15)
  {
    uint64_t v42 = v118;
    static GKLog.general.getter();
    unint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (sub_100017300(v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, (os_log_type_t)v42, "Failed to convert callbackIdentifier to data.", v45, 2u);
      sub_100010D7C();
    }

    Swift::String v46 = (char *)v42;
LABEL_17:
    v39(v46, v5);
    return;
  }
  uint64_t v47 = v40;
  unint64_t v48 = v41;
  uint64_t aBlock = v117;
  uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v51 = v50;
  sub_100163CE4(0, (unint64_t *)&unk_100327280);
  sub_10000D938(&qword_1003265C8);
  uint64_t v52 = swift_allocObject();
  *(_OWORD *)(v52 + 16) = xmmword_10024F6F0;
  *(void *)(v52 + 32) = sub_100163CE4(0, &qword_1003265D0);
  *(void *)(v52 + 40) = sub_100163CE4(0, &qword_1003263B0);
  *(void *)(v52 + 48) = sub_100163CE4(0, &qword_1003265D8);
  *(void *)(v52 + 56) = sub_100163CE4(0, &qword_1003265E0);
  uint64_t v120 = v47;
  static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)();
  uint64_t v118 = v49;
  uint64_t v111 = v51;
  swift_bridgeObjectRelease();
  if (!v127)
  {
    swift_bridgeObjectRelease();
    sub_10000DB3C((uint64_t)&aBlock, &qword_100326FD0);
LABEL_14:
    uint64_t v63 = (char *)v115;
    static GKLog.general.getter();
    unint64_t v64 = (void *)Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.error.getter();
    if (sub_100017300(v65))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      sub_100011310((void *)&_mh_execute_header, v66, v67, "Unarchived but it's empty.");
      sub_100010D7C();
    }
    sub_100169260(v120, v48);

    Swift::String v46 = v63;
    goto LABEL_17;
  }
  sub_10000D938(&qword_1003265E8);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  v115 = v39;
  unint64_t v53 = v130;
  unint64_t v54 = (uint8_t *)static os_log_type_t.default.getter();
  uint64_t aBlock = 0;
  unint64_t v125 = 0xE000000000000000;
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease();
  uint64_t aBlock = 0xD00000000000002ELL;
  unint64_t v125 = 0x80000001002AFB90;
  unint64_t v119 = v53;
  v55._uint64_t countAndFlagsBits = Array.description.getter();
  String.append(_:)(v55);
  swift_bridgeObjectRelease();
  uint64_t v57 = aBlock;
  unint64_t v56 = v125;
  static GKLog.daemon.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v58 = Logger.logObject.getter();
  os_log_type_t v59 = v54;
  BOOL v60 = os_log_type_enabled(v58, (os_log_type_t)v54);
  unint64_t v110 = v48;
  uint64_t v61 = v120;
  if (v60)
  {
    unint64_t v54 = (uint8_t *)sub_100016FF0();
    uint64_t aBlock = sub_100011BBC();
    *(_DWORD *)unint64_t v54 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v62 = sub_100174CE4(v57, v56, &aBlock);
    sub_100011BEC(v62);
    unint64_t v48 = v110;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v58, v59, "TTR - %s", v54, 0xCu);
    swift_arrayDestroy();
    uint64_t v61 = v120;
    sub_100010D7C();
    sub_100010D7C();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_1001755F8();
  sub_1001755CC();
  v68();
  swift_bridgeObjectRelease();
  if (!(v119 >> 62))
  {
    uint64_t v69 = *(void *)((v119 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v69) {
      goto LABEL_21;
    }
LABEL_60:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    os_log_type_t v103 = static os_log_type_t.default.getter();
    static GKLog.daemon.getter();
    unint64_t v104 = Logger.logObject.getter();
    if (os_log_type_enabled(v104, v103))
    {
      v105 = (uint8_t *)sub_100016FF0();
      uint64_t aBlock = sub_100011BBC();
      *(_DWORD *)v105 = 136315138;
      uint64_t v106 = sub_100174CE4(0xD000000000000023, 0x80000001002AFBE0, &aBlock);
      sub_100011BEC(v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v104, v103, "TTR - %s", v105, 0xCu);
      swift_arrayDestroy();
      sub_100010D7C();
      sub_100010D7C();

      sub_1001755CC();
      v107();
      uint64_t v108 = v120;
    }
    else
    {

      sub_1001755CC();
      v109();
      uint64_t v108 = v61;
    }
    sub_100169260(v108, v48);
    return;
  }
LABEL_59:
  swift_bridgeObjectRetain();
  uint64_t v69 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v69) {
    goto LABEL_60;
  }
LABEL_21:
  uint64_t v114 = v5;
  uint64_t v132 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v117 = v119 & 0xC000000000000001;
  uint64_t v70 = 4;
  sub_1000179D0();
  id v71 = &type metadata for String;
  v116 = (char *)&type metadata for Any + 8;
  do
  {
    if (v117) {
      id v72 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v72 = *(id *)(v119 + 8 * v70);
    }
    uint64_t v73 = v72;
    uint64_t v74 = v70 - 3;
    if (__OFADD__(v70 - 4, 1))
    {
      __break(1u);
      goto LABEL_59;
    }
    *(void *)&long long v130 = v54;
    *((void *)&v130 + 1) = 0xE800000000000000;
    uint64_t v5 = (uint64_t)v71;
    id v75 = [v72 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
    swift_unknownObjectRelease();
    if (v75)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v130 = 0u;
      long long v131 = 0u;
    }
    sub_100174DB8((uint64_t)&v130, (uint64_t)&aBlock);
    if (v127)
    {
      if (swift_dynamicCast())
      {
        uint64_t v77 = (uint64_t)v122;
        uint64_t v76 = v123;
        *(void *)&long long v130 = 0x656B6F5468737570;
        *((void *)&v130 + 1) = 0xE90000000000006ELL;
        unint64_t v54 = (uint8_t *)[v73 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
        swift_unknownObjectRelease();
        if (v54)
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          long long v130 = 0u;
          long long v131 = 0u;
        }
        sub_100174DB8((uint64_t)&v130, (uint64_t)&aBlock);
        uint64_t v61 = v120;
        sub_1000179D0();
        if (v78)
        {
          if (swift_dynamicCast())
          {
            unint64_t v54 = v122;
            unint64_t v79 = v123;
            objc_allocWithZone((Class)GKTTRMultiplayerParticipant);
            sub_100175574((uint64_t)v54, v79);
            if (!sub_1001749D8(v77, v76, (uint64_t)v54, v79))
            {
              __break(1u);
              return;
            }
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v132 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v132 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            sub_100169274((uint64_t)v54, v79);

            unint64_t v48 = v110;
            uint64_t v61 = v120;
            sub_1000179D0();
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          swift_bridgeObjectRelease();

          sub_10000DB3C((uint64_t)&aBlock, &qword_100326FD0);
        }
        id v71 = (void *)v5;
      }
      else
      {
      }
    }
    else
    {

      sub_10000DB3C((uint64_t)&aBlock, &qword_100326FD0);
    }
    ++v70;
    BOOL v80 = v74 == v69;
    uint64_t v81 = v118;
  }
  while (!v80);
  swift_bridgeObjectRelease();
  sub_100163CE4(0, &qword_1003265F0);
  uint64_t v82 = v113;
  uint64_t v83 = *(void *)(v113 + OBJC_IVAR____TtC14GameDaemonCore13GameDaemonTTR_clientProxyBundleIdentifier);
  uint64_t v84 = *(void *)(v113 + OBJC_IVAR____TtC14GameDaemonCore13GameDaemonTTR_clientProxyBundleIdentifier + 8);
  uint64_t v85 = OBJC_IVAR____TtC14GameDaemonCore13GameDaemonTTR_localPlayer;
  uint64_t v86 = *(void **)(v113 + OBJC_IVAR____TtC14GameDaemonCore13GameDaemonTTR_localPlayer);
  swift_bridgeObjectRetain();
  id v87 = v86;
  id v88 = sub_100174694(v83, v84, v86);
  if (v88)
  {
    v89 = v88;
    uint64_t v90 = sub_100175504(*(id *)(v82 + v85));
    if (v91) {
      uint64_t v92 = v90;
    }
    else {
      uint64_t v92 = 0x6C5065746F6D6552;
    }
    if (v91) {
      uint64_t v93 = v91;
    }
    else {
      uint64_t v93 = 0xEC00000072657961;
    }
    uint64_t v94 = v132;
    id v95 = objc_allocWithZone((Class)GKTTRLogRequestInfo);
    id v96 = sub_100174A84(v94, v81, v111, v92, v93);
    v128 = sub_100174714;
    uint64_t v129 = 0;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    unint64_t v125 = 1107296256;
    v126 = sub_100174948;
    v127 = &unk_1002DD1F8;
    v97 = _Block_copy(&aBlock);
    [v89 requestTTRLogsWith:v96 handler:v97];
    sub_100169260(v61, v48);
    _Block_release(v97);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    static GKLog.general.getter();
    int v98 = (void *)Logger.logObject.getter();
    os_log_type_t v99 = static os_log_type_t.error.getter();
    if (sub_100017300(v99))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      sub_100011310((void *)&_mh_execute_header, v100, v101, "Failed to find match service.");
      sub_100010D7C();
    }
    sub_100169260(v61, v48);

    sub_1001755F8();
    sub_1001755CC();
    v102();
  }
}

id sub_100174694(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2)
  {
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v4 = 0;
  }
  id v5 = [(id)swift_getObjCClassFromMetadata() serviceForBundleID:v4 localPlayer:a3];

  return v5;
}

uint64_t sub_100174714(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static GKLog.general.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    if (a1)
    {
      uint64_t v14 = a1;
      swift_errorRetain();
      sub_10000D938(&qword_100326538);
      uint64_t v10 = String.init<A>(reflecting:)();
      unint64_t v12 = v11;
    }
    else
    {
      unint64_t v12 = 0xE300000000000000;
      uint64_t v10 = 7104878;
    }
    uint64_t v14 = sub_100174CE4(v10, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to requestTTRLogs due to error: %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

void sub_100174948(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

void sub_1001749B4(Swift::Int64 a1, uint64_t a2, uint64_t a3)
{
}

id sub_1001749D8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a2)
  {
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v7 = 0;
  }
  if (a4 >> 60 == 15)
  {
    Class isa = 0;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100169260(a3, a4);
  }
  id v9 = [v4 initWithPlayerID:v7 pushToken:isa];

  return v9;
}

id sub_100174A84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1)
  {
    sub_100163CE4(0, &qword_100326620);
    v8.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    if (a3) {
      goto LABEL_3;
    }
LABEL_6:
    NSString v9 = 0;
    if (a5) {
      goto LABEL_4;
    }
LABEL_7:
    NSString v10 = 0;
    goto LABEL_8;
  }
  v8.super.Class isa = 0;
  if (!a3) {
    goto LABEL_6;
  }
LABEL_3:
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (!a5) {
    goto LABEL_7;
  }
LABEL_4:
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
LABEL_8:
  id v11 = [v5 initWithPlayersAndPushTokens:v8.super.isa radarID:v9 requesterAlias:v10];

  return v11;
}

uint64_t sub_100174B80(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_100174BBC(void (*a1)(void))
{
  a1();

  return _swift_stdlib_bridgeErrorToNSError();
}

uint64_t sub_100174BF4(uint64_t (*a1)(void))
{
  return a1();
}

unsigned char **sub_100174C1C(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  id v4 = *result;
  *id v4 = a4;
  *Swift::String_optional result = v4 + 1;
  return result;
}

void sub_100174C2C(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = (void *)a4();
  uint64_t v7 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v7;
  NSArray v8 = *a2;
  if (*a2)
  {
    *NSArray v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {
  }
}

uint64_t sub_100174CE4(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100174E20(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_1000074E0((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_1000074E0((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_100016C38((uint64_t)v12);
  return v7;
}

uint64_t sub_100174DB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D938(&qword_100326FD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100174E20(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_100174F78((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter();
      uint64_t result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    uint64_t result = (uint64_t)sub_100175050(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter();
    if (!v8)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

void *sub_100174F78(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

void *sub_100175050(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_1001750E8(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1001752C4(0, v2[2] + 1, 1, (uint64_t)v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1001752C4((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  }
  _DWORD v2[2] = v4 + 1;
  *((unsigned char *)v2 + v4 + 32) = 0;
  return v2;
}

void *sub_1001750E8(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int v2 = String.UTF8View._foreignCount()();
    if (v2) {
      goto LABEL_6;
    }
    return _swiftEmptyArrayStorage;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    Swift::Int v2 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
LABEL_6:
  unint64_t v3 = sub_10017525C(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    unint64_t v4 = v3;
    uint64_t v5 = _StringGuts.copyUTF8(into:)();
    if ((v6 & 1) != 0 || v5 != v2) {
      goto LABEL_14;
    }
    return v4;
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_14:
  uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_10017525C(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000D938(&qword_100326628);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

char *sub_1001752C4(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000D938(&qword_100326628);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_100175474(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_10017539C(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_10017539C(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

char *sub_100175474(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

uint64_t sub_100175504(void *a1)
{
  id v2 = [a1 alias];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_100175574(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_1001755E0()
{
  return v0;
}

void *sub_100175604(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (v5)
  {
    unint64_t v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v10 = v9 | (v8 << 6);
LABEL_22:
    uint64_t v14 = *(void **)(*(void *)(a1 + 48) + 40 * v10 + 32);
    if (v14)
    {
      id v15 = v14;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = (void *)specialized Array._endMutation()();
    }
  }
  int64_t v11 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v11 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v11);
  ++v8;
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 1;
  if (v11 + 1 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 2;
  if (v11 + 2 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 3;
  if (v11 + 3 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12)
  {
LABEL_21:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
    goto LABEL_22;
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_26:
    swift_release();
    return _swiftEmptyArrayStorage;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v13);
  if (v12)
  {
    int64_t v8 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_26;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_21;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001757D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    unint64_t v5 = (uint64_t *)(a1 + 32);
    int64_t v6 = (objc_class *)type metadata accessor for ScopedIDsBatchRequest();
    do
    {
      uint64_t v7 = *v5++;
      objc_allocWithZone(v6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100176078(v7, a2);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v3;
    }
    while (v3);
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void *sub_1001758E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = (uint64_t *)(a1 + 32);
    uint64_t v4 = (objc_class *)type metadata accessor for ScopedIDsBatchRequest();
    do
    {
      uint64_t v5 = *v3++;
      objc_allocWithZone(v4);
      swift_bridgeObjectRetain();
      uint64_t v6 = swift_bridgeObjectRetain();
      sub_100176078(v6, v5);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v1;
    }
    while (v1);
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void *sub_1001759E8(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100018B68(0, v1, 0);
  uint64_t result = (void *)sub_1001A3F10(a1);
  uint64_t v4 = (uint64_t)result;
  uint64_t v6 = v5;
  char v8 = v7 & 1;
  while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(unsigned char *)(a1 + 32))
  {
    if (((*(void *)(a1 + 56 + (((unint64_t)v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
      goto LABEL_13;
    }
    if (*(_DWORD *)(a1 + 36) != v6) {
      goto LABEL_14;
    }
    char v17 = v8;
    unint64_t v9 = (uint64_t *)(*(void *)(a1 + 48) + 40 * v4);
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    unint64_t v13 = _swiftEmptyArrayStorage[2];
    unint64_t v12 = _swiftEmptyArrayStorage[3];
    swift_bridgeObjectRetain();
    if (v13 >= v12 >> 1) {
      sub_100018B68((char *)(v12 > 1), v13 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v13 + 1;
    uint64_t v14 = &_swiftEmptyArrayStorage[2 * v13];
    void v14[4] = v10;
    v14[5] = v11;
    uint64_t result = (void *)sub_1001A3E28(v4, v6, v17 & 1, a1);
    uint64_t v4 = (uint64_t)result;
    uint64_t v6 = v15;
    char v8 = v16 & 1;
    if (!--v1)
    {
      sub_100179D00((uint64_t)result, v15, v8);
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_100175B64(uint64_t a1)
{
  sub_100179EB0();
  uint64_t v2 = Set.init(minimumCapacity:)();
  uint64_t v14 = v2;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = (void **)(a1 + 64);
    do
    {
      uint64_t v5 = (uint64_t)*(v4 - 4);
      uint64_t v6 = (uint64_t)*(v4 - 3);
      uint64_t v7 = (uint64_t)*(v4 - 2);
      uint64_t v8 = (uint64_t)*(v4 - 1);
      unint64_t v9 = *v4;
      v4 += 5;
      v15[0] = v5;
      v15[1] = v6;
      v15[2] = v7;
      v15[3] = v8;
      void v15[4] = v9;
      id v10 = v9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1001777B8(v13, v15);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v14;
  }
  else
  {
    uint64_t v11 = v2;
    swift_bridgeObjectRelease();
  }
  return v11;
}

uint64_t sub_100175C44(uint64_t a1)
{
  uint64_t v18 = Set.init(minimumCapacity:)();
  uint64_t result = sub_100018B64(a1, v19);
  uint64_t v3 = v19[0];
  uint64_t v4 = v19[1];
  int64_t v5 = v19[3];
  unint64_t v6 = v20;
  int64_t v7 = (unint64_t)(v19[2] + 64) >> 6;
  if (!v20) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v8 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v9 = v8 | (v5 << 6);
  while (1)
  {
    uint64_t v14 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    swift_bridgeObjectRetain();
    sub_100011974(&v17, v15, v16);
    uint64_t result = swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v10 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      break;
    }
    if (v10 >= v7) {
      goto LABEL_21;
    }
    unint64_t v11 = *(void *)(v4 + 8 * v10);
    int64_t v12 = v5 + 1;
    if (!v11)
    {
      int64_t v12 = v5 + 2;
      if (v5 + 2 >= v7) {
        goto LABEL_21;
      }
      unint64_t v11 = *(void *)(v4 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v5 + 3;
        if (v5 + 3 >= v7) {
          goto LABEL_21;
        }
        unint64_t v11 = *(void *)(v4 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v5 + 4;
          if (v5 + 4 >= v7) {
            goto LABEL_21;
          }
          unint64_t v11 = *(void *)(v4 + 8 * v12);
          if (!v11)
          {
            int64_t v12 = v5 + 5;
            if (v5 + 5 >= v7) {
              goto LABEL_21;
            }
            unint64_t v11 = *(void *)(v4 + 8 * v12);
            if (!v11)
            {
              int64_t v13 = v5 + 6;
              while (v13 < v7)
              {
                unint64_t v11 = *(void *)(v4 + 8 * v13++);
                if (v11)
                {
                  int64_t v12 = v13 - 1;
                  goto LABEL_18;
                }
              }
LABEL_21:
              swift_release();
              return v18;
            }
          }
        }
      }
    }
LABEL_18:
    unint64_t v6 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
    int64_t v5 = v12;
  }
  __break(1u);
  return result;
}

uint64_t sub_100175DC4(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    if (a1[2] == a2[2] && a1[3] == a2[3])
    {
      return 1;
    }
    else
    {
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

uint64_t sub_100175E4C()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100175EC8()
{
  return Hasher._finalize()();
}

Swift::Int sub_100175F58()
{
  return Hasher._finalize()();
}

uint64_t ScopedIDsBatchRequest.playerIDs.getter()
{
  return sub_10017A1E4();
}

id sub_10017601C(void *a1, uint64_t a2, void (*a3)(void))
{
  a3();
  Array._bridgeToObjectiveC()();
  sub_100010E00();

  return a1;
}

uint64_t ScopedIDsBatchRequest.gameBundleIDs.getter()
{
  return sub_10017A1E4();
}

id sub_100176078(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v2[OBJC_IVAR___GKScopedIDsBatchRequest_playerIDs] = a1;
  *(void *)&v2[OBJC_IVAR___GKScopedIDsBatchRequest_gameBundleIDs] = a2;
  v7.receiver = v2;
  v7.Class super_class = ObjectType;
  return [super init];
}

void ScopedIDsBatchRequest.init()()
{
}

void *static ScopedIDsUtils.filterUnsupportedGameBundleIDs(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    do
    {
      uint64_t v4 = *(v2 - 1);
      uint64_t v3 = *v2;
      BOOL v6 = v4 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v3 == v5;
      if (v6
        || (char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(),
            swift_bridgeObjectRetain(),
            swift_bridgeObjectRelease(),
            (v7 & 1) != 0))
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_100018B68(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v9 = _swiftEmptyArrayStorage[2];
        unint64_t v8 = _swiftEmptyArrayStorage[3];
        if (v9 >= v8 >> 1) {
          sub_100018B68((char *)(v8 > 1), v9 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v9 + 1;
        int64_t v10 = &_swiftEmptyArrayStorage[2 * v9];
        _DWORD v10[4] = v4;
        void v10[5] = v3;
      }
      v2 += 2;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  return _swiftEmptyArrayStorage;
}

void *static ScopedIDsUtils.batchRequest(playerIDs:gameBundleIDs:desiredSize:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return _swiftEmptyArrayStorage;
  }
  unint64_t v5 = *(void *)(a2 + 16);
  if (!v5 || (uint64_t)a3 < 1) {
    return _swiftEmptyArrayStorage;
  }
  if (v5 >= v3)
  {
    if ((uint64_t)(a3 / v3) <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = a3 / v3;
    }
    swift_bridgeObjectRetain();
    uint64_t v13 = sub_100176CEC(0, v5, v12, a2, v12);
    swift_bridgeObjectRetain();
    unint64_t v11 = sub_1001758E0(v13);
  }
  else
  {
    if ((uint64_t)(a3 / v5) <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = a3 / v5;
    }
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_100176CEC(0, v3, v9, a1, v9);
    swift_bridgeObjectRetain();
    unint64_t v11 = sub_1001757D4(v10, a2);
  }
  char v7 = v11;
  swift_bridgeObjectRelease();
  return v7;
}

char *static ScopedIDsUtils.incomplete(playerIDs:gameBundleIDs:scopedIDs:)(void *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v37) {
      goto LABEL_3;
    }
LABEL_25:
    swift_bridgeObjectRetain();
    return (char *)a1;
  }
  if (!*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_25;
  }
LABEL_3:
  uint64_t v7 = a1[2];
  if (!v7) {
    return (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v42 = *(void *)(a2 + 16);
  if (!v42) {
    return (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v38 = v6;
  unint64_t v39 = a3;
  os_log_type_t v44 = &_swiftEmptySetSingleton;
  uint64_t v40 = a1 + 4;
  swift_bridgeObjectRetain();
  for (uint64_t i = 0; i != v7; ++i)
  {
    uint64_t v9 = &v40[2 * i];
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v12 = (uint64_t *)(a2 + 40);
    uint64_t v13 = v42;
    do
    {
      uint64_t v14 = *(v12 - 1);
      uint64_t v15 = *v12;
      v45[0] = v10;
      v45[1] = v11;
      v45[2] = v14;
      v45[3] = v15;
      v45[4] = 0;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_1001777B8(v43, v45);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v16 = (void *)v43[4];
      swift_bridgeObjectRelease();

      v12 += 2;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v17 = (uint64_t)v44;
  unint64_t v18 = v39;
  if (v38)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v19 = *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v20 = _swiftEmptyArrayStorage;
  if (!v19)
  {
LABEL_23:
    uint64_t v36 = sub_100175B64((uint64_t)v20);
    sub_100176828(v36, v17);
    sub_100010E00();
    a1 = sub_1001759E8((uint64_t)v20);
    swift_bridgeObjectRelease();
    return (char *)a1;
  }
  uint64_t v41 = v17;
  v43[0] = _swiftEmptyArrayStorage;
  uint64_t result = sub_10017734C(0, v19 & ~(v19 >> 63), 0);
  if ((v19 & 0x8000000000000000) == 0)
  {
    uint64_t v22 = 0;
    unint64_t v20 = (void *)v43[0];
    do
    {
      if ((v39 & 0xC000000000000001) != 0) {
        id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v23 = *(id *)(v18 + 8 * v22 + 32);
      }
      uint64_t v24 = v23;
      id v25 = [v23 playerID:v38];
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v28 = v27;

      id v29 = [v24 gameBundleID];
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v32 = v31;

      v43[0] = v20;
      unint64_t v34 = v20[2];
      unint64_t v33 = v20[3];
      if (v34 >= v33 >> 1)
      {
        sub_10017734C((char *)(v33 > 1), v34 + 1, 1);
        unint64_t v20 = (void *)v43[0];
      }
      ++v22;
      v20[2] = v34 + 1;
      BOOL v35 = &v20[5 * v34];
      void v35[4] = v26;
      v35[5] = v28;
      v35[6] = v30;
      v35[7] = v32;
      v35[8] = v24;
      unint64_t v18 = v39;
    }
    while (v19 != v22);
    uint64_t v17 = v41;
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

void *sub_100176828(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) <= *(void *)(a2 + 16) >> 3)
  {
    sub_100178B00(a1);
    return (void *)a2;
  }
  else
  {
    return sub_100178CE8(a1, a2);
  }
}

char *static ScopedIDsUtils.merge(scopedIDs:with:)(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = a1;
  if (!((unint64_t)a1 >> 62))
  {
    if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
LABEL_20:
    swift_bridgeObjectRetain();
    return (char *)a2;
  }
  if (a1 < 0) {
    uint64_t v22 = a1;
  }
  else {
    uint64_t v22 = a1 & 0xFFFFFFFFFFFFFF8;
  }
  swift_bridgeObjectRetain();
  _CocoaArrayWrapper.endIndex.getter();
  sub_100010E00();
  if (!v22) {
    goto LABEL_20;
  }
LABEL_3:
  if (!(a2 >> 62))
  {
    if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
  sub_100017684();
  uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v23)
  {
LABEL_22:
    swift_bridgeObjectRetain();
    return (char *)v3;
  }
LABEL_5:
  swift_bridgeObjectRetain();
  uint64_t v4 = swift_bridgeObjectRetain();
  sub_100179828(v4);
  unint64_t v5 = v3;
  if (!(v3 >> 62))
  {
    uint64_t v6 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v6) {
      goto LABEL_7;
    }
LABEL_24:
    swift_bridgeObjectRelease();
    uint64_t v24 = sub_100175B64((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v3 = (unint64_t)sub_100175604(v24);
    swift_bridgeObjectRelease();
    return (char *)v3;
  }
  sub_100017684();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v6) {
    goto LABEL_24;
  }
LABEL_7:
  uint64_t result = sub_10017734C(0, v6 & ~(v6 >> 63), 0);
  if ((v6 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = 0;
    unint64_t v25 = v5 & 0xC000000000000001;
    unint64_t v26 = v5;
    do
    {
      if (v25) {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v9 = *(id *)(v5 + 8 * v8 + 32);
      }
      uint64_t v10 = v9;
      id v11 = [v9 playerID:v25];
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v13;

      id v15 = [v10 gameBundleID];
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v18 = v17;

      unint64_t v20 = _swiftEmptyArrayStorage[2];
      unint64_t v19 = _swiftEmptyArrayStorage[3];
      if (v20 >= v19 >> 1) {
        sub_10017734C((char *)(v19 > 1), v20 + 1, 1);
      }
      ++v8;
      _swiftEmptyArrayStorage[2] = v20 + 1;
      uint64_t v21 = &_swiftEmptyArrayStorage[5 * v20];
      void v21[4] = v12;
      v21[5] = v14;
      v21[6] = v16;
      v21[7] = v18;
      v21[8] = v10;
      unint64_t v5 = v26;
    }
    while (v6 != v8);
    goto LABEL_24;
  }
  __break(1u);
  return result;
}

id ScopedIDsUtils.init()()
{
  v2.receiver = v0;
  v2.Class super_class = (Class)swift_getObjectType();
  return [super init];
}

uint64_t sub_100176CEC(int64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a3;
  int64_t v7 = a1;
  uint64_t v8 = sub_100179EFC(a1, a2, a3);
  sub_1001772FC(0, v8 & ~(v8 >> 63), 0);
  if ((v8 & 0x8000000000000000) == 0)
  {
    id v9 = _swiftEmptyArrayStorage;
    if (v8)
    {
      uint64_t v35 = a4 + 32;
      while (1)
      {
        BOOL v10 = v7 <= a2;
        if (v6 > 0) {
          BOOL v10 = v7 >= a2;
        }
        if (v10) {
          break;
        }
        if (__OFADD__(v7, v6)) {
          int64_t v11 = ((v7 + v6) >> 63) ^ 0x8000000000000000;
        }
        else {
          int64_t v11 = v7 + v6;
        }
        if (__OFADD__(v7, a5)) {
          goto LABEL_72;
        }
        if (*(void *)(a4 + 16) >= v7 + a5) {
          uint64_t v12 = v7 + a5;
        }
        else {
          uint64_t v12 = *(void *)(a4 + 16);
        }
        uint64_t v13 = v12 - v7;
        if (v12 < v7) {
          goto LABEL_73;
        }
        if (v7 < 0) {
          goto LABEL_74;
        }
        uint64_t v38 = v9;
        uint64_t v14 = v6;
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain_n();
        id v15 = (void *)swift_dynamicCastClass();
        if (!v15)
        {
          swift_bridgeObjectRelease();
          id v15 = _swiftEmptyArrayStorage;
        }
        uint64_t v16 = v15[2];
        swift_release();
        if (v16 == v13)
        {
          uint64_t v17 = (void *)swift_dynamicCastClass();
          uint64_t v6 = v14;
          id v9 = v38;
          if (!v17)
          {
            swift_bridgeObjectRelease();
            uint64_t v17 = _swiftEmptyArrayStorage;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v17 = _swiftEmptyArrayStorage;
          uint64_t v6 = v14;
          id v9 = v38;
          if (v12 != v7)
          {
            if (v13 < 1)
            {
              if (v13 < 0) {
                goto LABEL_79;
              }
            }
            else
            {
              sub_10000D938(&qword_100326500);
              uint64_t v17 = (void *)swift_allocObject();
              size_t v20 = j__malloc_size(v17);
              v17[2] = v13;
              v17[3] = 2 * ((uint64_t)(v20 - 32) / 16);
            }
            if (v35 + 16 * v7 < (unint64_t)&v17[2 * v13 + 4] && (unint64_t)(v17 + 4) < v35 + 16 * v12) {
              goto LABEL_79;
            }
            swift_arrayInitWithCopy();
          }
        }
        swift_bridgeObjectRelease();
        unint64_t v19 = v9[2];
        unint64_t v18 = v9[3];
        if (v19 >= v18 >> 1) {
          sub_1001772FC((void *)(v18 > 1), v19 + 1, 1);
        }
        v9[2] = v19 + 1;
        v9[v19 + 4] = v17;
        int64_t v7 = v11;
        if (!--v8) {
          goto LABEL_36;
        }
      }
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
    }
    else
    {
      int64_t v11 = v7;
LABEL_36:
      BOOL v22 = v11 <= a2;
      if (v6 > 0) {
        BOOL v22 = v11 >= a2;
      }
      if (v22)
      {
LABEL_39:
        swift_bridgeObjectRelease();
        return (uint64_t)v9;
      }
      uint64_t v39 = a4 + 32;
      while (1)
      {
        int64_t v24 = __OFADD__(v11, v6) ? ((v11 + v6) >> 63) ^ 0x8000000000000000 : v11 + v6;
        if (__OFADD__(v11, a5)) {
          break;
        }
        if (*(void *)(a4 + 16) >= v11 + a5) {
          uint64_t v25 = v11 + a5;
        }
        else {
          uint64_t v25 = *(void *)(a4 + 16);
        }
        uint64_t v26 = v25 - v11;
        if (v25 < v11) {
          goto LABEL_76;
        }
        if (v11 < 0) {
          goto LABEL_77;
        }
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain_n();
        uint64_t v27 = (void *)swift_dynamicCastClass();
        if (!v27)
        {
          swift_bridgeObjectRelease();
          uint64_t v27 = _swiftEmptyArrayStorage;
        }
        uint64_t v28 = v27[2];
        swift_release();
        if (v28 == v26)
        {
          id v29 = (void *)swift_dynamicCastClass();
          if (!v29)
          {
            swift_bridgeObjectRelease();
            id v29 = _swiftEmptyArrayStorage;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          id v29 = _swiftEmptyArrayStorage;
          if (v25 != v11)
          {
            if (v26 < 1)
            {
              if (v26 < 0) {
                goto LABEL_79;
              }
            }
            else
            {
              sub_10000D938(&qword_100326500);
              id v29 = (void *)swift_allocObject();
              size_t v33 = j__malloc_size(v29);
              v29[2] = v26;
              v29[3] = 2 * ((uint64_t)(v33 - 32) / 16);
            }
            if (v39 + 16 * v11 < (unint64_t)&v29[2 * v26 + 4] && (unint64_t)(v29 + 4) < v39 + 16 * v25) {
              goto LABEL_79;
            }
            swift_arrayInitWithCopy();
          }
        }
        swift_bridgeObjectRelease();
        unint64_t v31 = v9[2];
        unint64_t v30 = v9[3];
        if (v31 >= v30 >> 1) {
          sub_1001772FC((void *)(v30 > 1), v31 + 1, 1);
        }
        v9[2] = v31 + 1;
        v9[v31 + 4] = v29;
        BOOL v32 = v24 <= a2;
        if (v6 > 0) {
          BOOL v32 = v24 >= a2;
        }
        int64_t v11 = v24;
        if (v32) {
          goto LABEL_39;
        }
      }
    }
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
  }
  __break(1u);
LABEL_79:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_1001771C0(uint64_t a1)
{
  return sub_10017726C(a1);
}

uint64_t sub_1001771CC(uint64_t a1)
{
  if (a1 < 0)
  {
    sub_1000179E4();
    uint64_t result = sub_100011C00();
    __break(1u);
  }
  else if (a1)
  {
    sub_100163CE4(0, &qword_1003266B8);
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10) = a1;
  }
  else
  {
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_100177260(uint64_t a1)
{
  return sub_10017726C(a1);
}

void *sub_10017726C(uint64_t a1)
{
  if (a1 < 0)
  {
    sub_1000179E4();
    uint64_t result = (void *)sub_100011C00();
    __break(1u);
  }
  else if (a1)
  {
    uint64_t result = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    result[2] = a1;
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

char *sub_1001772DC(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001773BC(a1, a2, a3, *v3);
  uint64_t *v3 = (uint64_t)result;
  return result;
}

void *sub_1001772FC(void *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001776A4(a1, a2, a3, *v3, &qword_1003266E0, (void (*)(uint64_t, uint64_t, void *))sub_1001B7ED4, (void (*)(uint64_t, uint64_t, void *))sub_1001B834C);
  uint64_t *v3 = (uint64_t)result;
  return result;
}

char *sub_10017734C(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_100177584(a1, a2, a3, *v3);
  uint64_t *v3 = (uint64_t)result;
  return result;
}

void *sub_10017736C(void *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001776A4(a1, a2, a3, *v3, &qword_100326690, (void (*)(uint64_t, uint64_t, void *))sub_1001B7ED4, (void (*)(uint64_t, uint64_t, void *))sub_1001B8420);
  uint64_t *v3 = (uint64_t)result;
  return result;
}

char *sub_1001773BC(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000D938(&qword_1003266A8);
    BOOL v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 32);
  }
  else
  {
    BOOL v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_1001B7ED8(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1001B8288((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

char *sub_1001774A0(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000D938(&qword_100326500);
    BOOL v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    BOOL v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_1001B7F34(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000191F0((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

char *sub_100177584(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000D938(&qword_1003266D8);
    BOOL v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    BOOL v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_1001B7F90(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1001B8358((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

void *sub_100177670(void *a1, int64_t a2, char a3, uint64_t a4)
{
  return sub_1001776A4(a1, a2, a3, a4, &qword_1003266B0, (void (*)(uint64_t, uint64_t, void *))sub_1001B8090, (void (*)(uint64_t, uint64_t, void *))sub_1001B87A4);
}

void *sub_1001776A4(void *result, int64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, uint64_t, void *), void (*a7)(uint64_t, uint64_t, void *))
{
  char v10 = (char)result;
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    int64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v12 = a2;
      }
    }
  }
  else
  {
    int64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (v14)
  {
    sub_10000D938(a5);
    id v15 = (void *)swift_allocObject();
    size_t v16 = j__malloc_size(v15);
    v15[2] = v13;
    v15[3] = 2 * ((uint64_t)(v16 - 32) / 8);
  }
  else
  {
    id v15 = _swiftEmptyArrayStorage;
  }
  uint64_t v17 = v15 + 4;
  uint64_t v18 = a4 + 32;
  if (v10)
  {
    a6(v18, v13, v17);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    a7(v18, v13, v17);
  }
  swift_release();
  return v15;
}

uint64_t sub_10017779C(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

uint64_t sub_1001777B8(void *a1, void *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v5 = a2[3];
  sub_100179D0C((uint64_t)(a2 + 4), (uint64_t)&v33);
  unint64_t v30 = v2;
  uint64_t v7 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  uint64_t v11 = v7 + 56;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v12 = ~v9;
    uint64_t v13 = *(void *)(v7 + 48);
    while (1)
    {
      uint64_t v14 = (void *)(v13 + 40 * v10);
      uint64_t v16 = v14[2];
      uint64_t v15 = v14[3];
      BOOL v17 = *v14 == v4 && v14[1] == v3;
      if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        BOOL v18 = v16 == v6 && v15 == v5;
        if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
      }
      unint64_t v10 = (v10 + 1) & v12;
      if (((*(void *)(v11 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100179E84(&v33);
    BOOL v22 = (uint64_t *)(*(void *)(*v30 + 48) + 40 * v10);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    uint64_t v25 = v22[2];
    uint64_t v26 = v22[3];
    uint64_t v27 = (void *)v22[4];
    *a1 = v23;
    a1[1] = v24;
    a1[2] = v25;
    a1[3] = v26;
    a1[4] = v27;
    id v28 = v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return 0;
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v32 = *v30;
    *unint64_t v30 = 0x8000000000000000;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100179DA0(&v33);
    sub_100178034(a2, v10, isUniquelyReferenced_nonNull_native);
    *unint64_t v30 = v32;
    swift_bridgeObjectRelease();
    long long v20 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v20;
    a1[4] = a2[4];
    return 1;
  }
}

uint64_t sub_100177A0C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000D938(&qword_100326698);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    unint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    if (!v7) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v12 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
    {
      BOOL v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
      uint64_t v18 = *v17;
      uint64_t v19 = v17[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) == 0)
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v20) >> 6;
        while (++v22 != v25 || (v24 & 1) == 0)
        {
          BOOL v26 = v22 == v25;
          if (v22 == v25) {
            unint64_t v22 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v9 + 8 * v22);
          if (v27 != -1)
          {
            unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      id v28 = (void *)(*(void *)(v4 + 48) + 16 * v23);
      void *v28 = v18;
      v28[1] = v19;
      ++*(void *)(v4 + 16);
      if (v7) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v14 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_38;
      }
      if (v14 >= v8) {
        goto LABEL_32;
      }
      unint64_t v15 = v30[v14];
      ++v11;
      if (!v15)
      {
        int64_t v11 = v14 + 1;
        if (v14 + 1 >= v8) {
          goto LABEL_32;
        }
        unint64_t v15 = v30[v11];
        if (!v15)
        {
          int64_t v11 = v14 + 2;
          if (v14 + 2 >= v8) {
            goto LABEL_32;
          }
          unint64_t v15 = v30[v11];
          if (!v15)
          {
            int64_t v16 = v14 + 3;
            if (v16 >= v8)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v0;
              uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
              if (v29 > 63) {
                sub_10017779C(0, (unint64_t)(v29 + 63) >> 6, v30);
              }
              else {
                *unint64_t v30 = -1 << v29;
              }
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v15 = v30[v16];
            if (!v15)
            {
              while (1)
              {
                int64_t v11 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_39;
                }
                if (v11 >= v8) {
                  goto LABEL_32;
                }
                unint64_t v15 = v30[v11];
                ++v16;
                if (v15) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v11 = v16;
          }
        }
      }
LABEL_20:
      unint64_t v7 = (v15 - 1) & v15;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100177CE8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000D938(&qword_1003266C0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    id v33 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v32 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    uint64_t v34 = v2;
    if (!v7) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (unint64_t i = v11 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v10 << 6))
    {
      int64_t v16 = (uint64_t *)(*(void *)(v2 + 48) + 40 * i);
      uint64_t v17 = *v16;
      uint64_t v18 = v16[1];
      uint64_t v19 = v16[2];
      uint64_t v20 = v16[3];
      uint64_t v21 = v16[4];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v8 + 8 * (v23 >> 6))) == 0)
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v22) >> 6;
        while (++v24 != v27 || (v26 & 1) == 0)
        {
          BOOL v28 = v24 == v27;
          if (v24 == v27) {
            unint64_t v24 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v8 + 8 * v24);
          if (v29 != -1)
          {
            unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v25 = __clz(__rbit64((-1 << v23) & ~*(void *)(v8 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v8 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
      unint64_t v30 = (void *)(*(void *)(v4 + 48) + 40 * v25);
      *unint64_t v30 = v17;
      v30[1] = v18;
      v30[2] = v19;
      v30[3] = v20;
      void v30[4] = v21;
      ++*(void *)(v4 + 16);
      uint64_t v2 = v34;
      if (v7) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v13 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        goto LABEL_38;
      }
      if (v13 >= v32) {
        goto LABEL_32;
      }
      unint64_t v14 = v33[v13];
      ++v10;
      if (!v14)
      {
        int64_t v10 = v13 + 1;
        if (v13 + 1 >= v32) {
          goto LABEL_32;
        }
        unint64_t v14 = v33[v10];
        if (!v14)
        {
          int64_t v10 = v13 + 2;
          if (v13 + 2 >= v32) {
            goto LABEL_32;
          }
          unint64_t v14 = v33[v10];
          if (!v14)
          {
            int64_t v15 = v13 + 3;
            if (v15 >= v32)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v0;
              uint64_t v31 = 1 << *(unsigned char *)(v2 + 32);
              if (v31 > 63) {
                sub_10017779C(0, (unint64_t)(v31 + 63) >> 6, v33);
              }
              else {
                void *v33 = -1 << v31;
              }
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v14 = v33[v15];
            if (!v14)
            {
              while (1)
              {
                int64_t v10 = v15 + 1;
                if (__OFADD__(v15, 1)) {
                  goto LABEL_39;
                }
                if (v10 >= v32) {
                  goto LABEL_32;
                }
                unint64_t v14 = v33[v10];
                ++v15;
                if (v14) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v10 = v15;
          }
        }
      }
LABEL_20:
      unint64_t v7 = (v14 - 1) & v14;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

void sub_100178034(void *a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_21;
  }
  if (a3)
  {
    sub_100177CE8();
  }
  else
  {
    if (v7 > v6)
    {
      sub_100178398();
      goto LABEL_21;
    }
    sub_1001787E0();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v11 = a1[2];
  uint64_t v12 = a1[3];
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v13 = Hasher._finalize()();
  uint64_t v14 = -1 << *(unsigned char *)(v8 + 32);
  a2 = v13 & ~v14;
  uint64_t v15 = v8 + 56;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    uint64_t v17 = *(void *)(v8 + 48);
    do
    {
      uint64_t v18 = (void *)(v17 + 40 * a2);
      uint64_t v19 = v18[2];
      uint64_t v20 = v18[3];
      BOOL v21 = *v18 == v9 && v18[1] == v10;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        BOOL v22 = v19 == v11 && v20 == v12;
        if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_24;
        }
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_21:
  uint64_t v23 = *v29;
  *(void *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t v24 = *(void *)(v23 + 48) + 40 * a2;
  long long v25 = *((_OWORD *)a1 + 1);
  *(_OWORD *)uint64_t v24 = *(_OWORD *)a1;
  *(_OWORD *)(v24 + 16) = v25;
  *(void *)(v24 + 32) = a1[4];
  uint64_t v26 = *(void *)(v23 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v23 + 16) = v28;
    return;
  }
  __break(1u);
LABEL_24:
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

void sub_100178228()
{
  uint64_t v2 = v0;
  sub_10000D938(&qword_100326698);
  uint64_t v3 = *v0;
  uint64_t v4 = static _SetStorage.copy(original:)();
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    swift_release();
    uint64_t *v2 = v4;
    return;
  }
  uint64_t v5 = (void *)sub_1000111F8();
  if (v8) {
    BOOL v9 = (unint64_t)v5 >= v7;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    memmove(v5, v1, 8 * v6);
  }
  int64_t v10 = 0;
  sub_10017A1B8();
  unint64_t v13 = v12 & v11;
  int64_t v15 = (unint64_t)(v14 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v16 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v16 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v10 << 6))
  {
    BOOL v21 = (void *)(*(void *)(v3 + 48) + 16 * i);
    uint64_t v22 = v21[1];
    uint64_t v23 = (void *)(*(void *)(v4 + 48) + 16 * i);
    *uint64_t v23 = *v21;
    v23[1] = v22;
    swift_bridgeObjectRetain();
    if (v13) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v15) {
      goto LABEL_26;
    }
    unint64_t v19 = *((void *)v1 + v18);
    ++v10;
    if (!v19)
    {
      int64_t v10 = v18 + 1;
      if (v18 + 1 >= v15) {
        goto LABEL_26;
      }
      unint64_t v19 = *((void *)v1 + v10);
      if (!v19)
      {
        int64_t v10 = v18 + 2;
        if (v18 + 2 >= v15) {
          goto LABEL_26;
        }
        unint64_t v19 = *((void *)v1 + v10);
        if (!v19) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v13 = (v19 - 1) & v19;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v15) {
    goto LABEL_26;
  }
  unint64_t v19 = *((void *)v1 + v20);
  if (v19)
  {
    int64_t v10 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v10 >= v15) {
      goto LABEL_26;
    }
    unint64_t v19 = *((void *)v1 + v10);
    ++v20;
    if (v19) {
      goto LABEL_23;
    }
  }
LABEL_28:
  __break(1u);
}

void sub_100178398()
{
  uint64_t v2 = v0;
  sub_10000D938(&qword_1003266C0);
  uint64_t v3 = *v0;
  uint64_t v4 = static _SetStorage.copy(original:)();
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    swift_release();
    uint64_t *v2 = v4;
    return;
  }
  uint64_t v5 = (void *)sub_1000111F8();
  if (v8) {
    BOOL v9 = (unint64_t)v5 >= v7;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    memmove(v5, v1, 8 * v6);
  }
  int64_t v10 = 0;
  sub_10017A1B8();
  unint64_t v13 = v12 & v11;
  int64_t v15 = (unint64_t)(v14 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v16 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v16 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v10 << 6))
  {
    uint64_t v21 = 5 * i;
    uint64_t v22 = (uint64_t *)(*(void *)(v3 + 48) + 8 * v21);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    uint64_t v25 = v22[2];
    uint64_t v26 = v22[3];
    BOOL v27 = (void *)v22[4];
    uint64_t v28 = (void *)(*(void *)(v4 + 48) + 8 * v21);
    void *v28 = v23;
    v28[1] = v24;
    v28[2] = v25;
    v28[3] = v26;
    void v28[4] = v27;
    id v29 = v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v13) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v15) {
      goto LABEL_26;
    }
    unint64_t v19 = *((void *)v1 + v18);
    ++v10;
    if (!v19)
    {
      int64_t v10 = v18 + 1;
      if (v18 + 1 >= v15) {
        goto LABEL_26;
      }
      unint64_t v19 = *((void *)v1 + v10);
      if (!v19)
      {
        int64_t v10 = v18 + 2;
        if (v18 + 2 >= v15) {
          goto LABEL_26;
        }
        unint64_t v19 = *((void *)v1 + v10);
        if (!v19) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v13 = (v19 - 1) & v19;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v15) {
    goto LABEL_26;
  }
  unint64_t v19 = *((void *)v1 + v20);
  if (v19)
  {
    int64_t v10 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v10 >= v15) {
      goto LABEL_26;
    }
    unint64_t v19 = *((void *)v1 + v10);
    ++v20;
    if (v19) {
      goto LABEL_23;
    }
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_100178534()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000D938(&qword_100326698);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  if (!v8) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v9 + 8 * v22);
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t v28 = (void *)(*(void *)(v4 + 48) + 16 * v23);
    void *v28 = v18;
    v28[1] = v19;
    ++*(void *)(v4 + 16);
    if (v8) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_36;
    }
    if (v14 >= v29) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v29) {
        goto LABEL_32;
      }
      unint64_t v15 = *(void *)(v6 + 8 * v11);
      if (!v15)
      {
        int64_t v11 = v14 + 2;
        if (v14 + 2 >= v29) {
          goto LABEL_32;
        }
        unint64_t v15 = *(void *)(v6 + 8 * v11);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_34;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
    int64_t v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1001787E0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000D938(&qword_1003266C0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v32 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v33 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  uint64_t v34 = v2;
  if (!v7) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v11 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v11 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    int64_t v16 = (uint64_t *)(*(void *)(v2 + 48) + 40 * i);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    uint64_t v20 = v16[3];
    unint64_t v21 = (void *)v16[4];
    Hasher.init(_seed:)();
    id v22 = v21;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v23 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v8 + 8 * (v24 >> 6))) == 0)
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v23) >> 6;
      while (++v25 != v28 || (v27 & 1) == 0)
      {
        BOOL v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v8 + 8 * v25);
        if (v30 != -1)
        {
          unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v8 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v8 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    uint64_t v31 = (void *)(*(void *)(v4 + 48) + 40 * v26);
    *uint64_t v31 = v17;
    v31[1] = v18;
    void v31[2] = v19;
    v31[3] = v20;
    v31[4] = v21;
    ++*(void *)(v4 + 16);
    uint64_t v2 = v34;
    if (v7) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_36;
    }
    if (v13 >= v33) {
      goto LABEL_32;
    }
    unint64_t v14 = *(void *)(v32 + 8 * v13);
    ++v10;
    if (!v14)
    {
      int64_t v10 = v13 + 1;
      if (v13 + 1 >= v33) {
        goto LABEL_32;
      }
      unint64_t v14 = *(void *)(v32 + 8 * v10);
      if (!v14)
      {
        int64_t v10 = v13 + 2;
        if (v13 + 2 >= v33) {
          goto LABEL_32;
        }
        unint64_t v14 = *(void *)(v32 + 8 * v10);
        if (!v14) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v7 = (v14 - 1) & v14;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v33)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v32 + 8 * v15);
  if (v14)
  {
    int64_t v10 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= v33) {
      goto LABEL_32;
    }
    unint64_t v14 = *(void *)(v32 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100178B00(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  if (!v6) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    uint64_t v14 = *(void *)(v2 + 48) + 40 * i;
    long long v16 = *(_OWORD *)v14;
    long long v15 = *(_OWORD *)(v14 + 16);
    uint64_t v19 = *(void *)(v14 + 32);
    v18[0] = v16;
    v18[1] = v15;
    long long v20 = *(_OWORD *)v14;
    long long v21 = v15;
    sub_100179D0C((uint64_t)&v19, (uint64_t)&v22);
    sub_100179D74((uint64_t)&v20);
    sub_100179D74((uint64_t)&v21);
    sub_100179DA0(&v22);
    sub_10017042C((uint64_t)v18, v17);
    sub_100179DCC((uint64_t)v17);
    sub_100179E58((uint64_t)&v20);
    sub_100179E58((uint64_t)&v21);
    uint64_t result = (uint64_t)sub_100179E84(&v22);
    if (v6) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v7) {
      return swift_release();
    }
    unint64_t v12 = *(void *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v7) {
        return swift_release();
      }
      unint64_t v12 = *(void *)(v3 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v7) {
          return swift_release();
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v7) {
            return swift_release();
          }
          unint64_t v12 = *(void *)(v3 + 8 * v8);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v6 = (v12 - 1) & v12;
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v7) {
    return swift_release();
  }
  unint64_t v12 = *(void *)(v3 + 8 * v13);
  if (v12)
  {
    int64_t v8 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v8 >= v7) {
      return swift_release();
    }
    unint64_t v12 = *(void *)(v3 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_21;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100178CE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (*(void *)(a2 + 16))
  {
    uint64_t v3 = *(void *)(a1 + 56);
    uint64_t v46 = a1 + 56;
    uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v43 = ~v4;
    if (-v4 < 64) {
      uint64_t v5 = ~(-1 << -(char)v4);
    }
    else {
      uint64_t v5 = -1;
    }
    unint64_t v6 = v5 & v3;
    int64_t v44 = (unint64_t)(63 - v4) >> 6;
    int64_t v7 = (char *)(a2 + 56);
    uint64_t v8 = swift_bridgeObjectRetain();
    int64_t v9 = 0;
    uint64_t v50 = v2;
    uint64_t v45 = v8;
    if (!v6) {
      goto LABEL_7;
    }
LABEL_6:
    uint64_t v48 = (v6 - 1) & v6;
    int64_t v49 = v9;
    for (unint64_t i = __clz(__rbit64(v6)) | (v9 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v13 << 6))
    {
      long long v15 = (uint64_t *)(*(void *)(v8 + 48) + 40 * i);
      uint64_t v16 = *v15;
      uint64_t v17 = v15[1];
      uint64_t v18 = v15[2];
      uint64_t v19 = v15[3];
      long long v20 = (void *)v15[4];
      Hasher.init(_seed:)();
      id v47 = v20;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Swift::Int v21 = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v2 + 32);
      unint64_t v23 = v21 & ~v22;
      if ((*(void *)&v7[(v23 >> 3) & 0xFFFFFFFFFFFFFF8] >> v23)) {
        break;
      }
LABEL_36:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      int64_t v9 = v49;
      uint64_t v2 = v50;
      uint64_t v8 = v45;
      unint64_t v6 = v48;
      if (v48) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v11 = v9 + 1;
      if (__OFADD__(v9, 1))
      {
        __break(1u);
        goto LABEL_46;
      }
      if (v11 >= v44) {
        goto LABEL_44;
      }
      unint64_t v12 = *(void *)(v46 + 8 * v11);
      int64_t v13 = v9 + 1;
      if (!v12)
      {
        int64_t v13 = v9 + 2;
        if (v9 + 2 >= v44) {
          goto LABEL_44;
        }
        unint64_t v12 = *(void *)(v46 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v9 + 3;
          if (v9 + 3 >= v44) {
            goto LABEL_44;
          }
          unint64_t v12 = *(void *)(v46 + 8 * v13);
          if (!v12)
          {
            int64_t v13 = v9 + 4;
            if (v9 + 4 >= v44) {
              goto LABEL_44;
            }
            unint64_t v12 = *(void *)(v46 + 8 * v13);
            if (!v12)
            {
              uint64_t v14 = v9 + 5;
              if (v9 + 5 >= v44)
              {
LABEL_44:
                sub_10001A088();
                return (void *)v2;
              }
              unint64_t v12 = *(void *)(v46 + 8 * v14);
              if (!v12)
              {
                while (1)
                {
                  int64_t v13 = v14 + 1;
                  if (__OFADD__(v14, 1)) {
                    break;
                  }
                  if (v13 >= v44) {
                    goto LABEL_44;
                  }
                  unint64_t v12 = *(void *)(v46 + 8 * v13);
                  ++v14;
                  if (v12) {
                    goto LABEL_22;
                  }
                }
LABEL_46:
                __break(1u);
              }
              int64_t v13 = v9 + 5;
            }
          }
        }
      }
LABEL_22:
      uint64_t v48 = (v12 - 1) & v12;
      int64_t v49 = v13;
    }
    uint64_t v24 = ~v22;
    uint64_t v25 = *(void *)(v50 + 48);
    while (1)
    {
      unint64_t v26 = (void *)(v25 + 40 * v23);
      uint64_t v28 = v26[2];
      uint64_t v27 = v26[3];
      BOOL v29 = *v26 == v16 && v26[1] == v17;
      if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        BOOL v30 = v28 == v18 && v27 == v19;
        if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
      }
      unint64_t v23 = (v23 + 1) & v24;
      if (((*(void *)&v7[(v23 >> 3) & 0xFFFFFFFFFFFFFF8] >> v23) & 1) == 0) {
        goto LABEL_36;
      }
    }
    v51[0] = v45;
    v51[1] = v46;
    v51[2] = v43;
    v51[3] = v49;
    v51[4] = v48;

    swift_bridgeObjectRelease();
    uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
    uint64_t v33 = v50;
    char v34 = *(unsigned char *)(v50 + 32);
    unint64_t v35 = (unint64_t)((1 << v34) + 63) >> 6;
    size_t v36 = 8 * v35;
    if ((v34 & 0x3Fu) <= 0xD
      || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe, v32);
      memcpy((char *)&v42 - ((v36 + 15) & 0x3FFFFFFFFFFFFFF0), v7, v36);
      sub_100179200((unint64_t *)((char *)&v42 - ((v36 + 15) & 0x3FFFFFFFFFFFFFF0)), v35, v33, v23, v51);
      uint64_t v38 = v37;
      swift_release();
      sub_10001A088();
      return (void *)v38;
    }
    else
    {
      uint64_t v39 = (void *)swift_slowAlloc();
      memcpy(v39, v7, v36);
      sub_100179200((unint64_t *)v39, v35, v50, v23, v51);
      uint64_t v2 = v40;
      swift_release();
      sub_10001A088();
      swift_slowDealloc();
    }
  }
  else
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
  return (void *)v2;
}

void sub_100179200(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v5 = a3;
  uint64_t v6 = *(void *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v7 = v6 - 1;
  uint64_t v41 = a3 + 56;
  uint64_t v38 = a5;
  while (2)
  {
    uint64_t v36 = v7;
    do
    {
      while (1)
      {
        int64_t v8 = a5[3];
        unint64_t v9 = a5[4];
        if (v9)
        {
          uint64_t v10 = (v9 - 1) & v9;
          unint64_t v11 = __clz(__rbit64(v9)) | (v8 << 6);
          goto LABEL_21;
        }
        int64_t v12 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
          __break(1u);
          goto LABEL_45;
        }
        int64_t v13 = (unint64_t)(a5[2] + 64) >> 6;
        if (v12 >= v13) {
          goto LABEL_43;
        }
        uint64_t v14 = a5[1];
        unint64_t v15 = *(void *)(v14 + 8 * v12);
        if (!v15)
        {
          if (v8 + 2 >= v13)
          {
            ++v8;
          }
          else
          {
            unint64_t v15 = *(void *)(v14 + 8 * (v8 + 2));
            if (v15)
            {
              int64_t v12 = v8 + 2;
              goto LABEL_20;
            }
            if (v8 + 3 >= v13)
            {
              v8 += 2;
            }
            else
            {
              unint64_t v15 = *(void *)(v14 + 8 * (v8 + 3));
              if (v15)
              {
                int64_t v12 = v8 + 3;
                goto LABEL_20;
              }
              int64_t v12 = v8 + 4;
              if (v8 + 4 >= v13)
              {
                v8 += 3;
              }
              else
              {
                unint64_t v15 = *(void *)(v14 + 8 * v12);
                if (v15) {
                  goto LABEL_20;
                }
                int64_t v16 = v8 + 5;
                while (v16 < v13)
                {
                  unint64_t v15 = *(void *)(v14 + 8 * v16++);
                  if (v15)
                  {
                    int64_t v12 = v16 - 1;
                    goto LABEL_20;
                  }
                }
                int64_t v8 = v13 - 1;
              }
            }
          }
LABEL_43:
          a5[3] = v8;
          a5[4] = 0;
          swift_retain();
          sub_100179538(a1, a2, v36, v5);
          return;
        }
LABEL_20:
        uint64_t v10 = (v15 - 1) & v15;
        unint64_t v11 = __clz(__rbit64(v15)) + (v12 << 6);
        int64_t v8 = v12;
LABEL_21:
        uint64_t v17 = (uint64_t *)(*(void *)(*a5 + 48) + 40 * v11);
        uint64_t v18 = *v17;
        uint64_t v19 = v17[1];
        uint64_t v20 = v17[2];
        uint64_t v21 = v17[3];
        uint64_t v22 = (void *)v17[4];
        a5[3] = v8;
        a5[4] = v10;
        Hasher.init(_seed:)();
        id v40 = v22;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        Swift::Int v23 = Hasher._finalize()();
        uint64_t v24 = -1 << *(unsigned char *)(v5 + 32);
        unint64_t v25 = v23 & ~v24;
        if ((*(void *)(v41 + ((v25 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v25)) {
          break;
        }
LABEL_34:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        a5 = v38;
        uint64_t v5 = a3;
      }
      uint64_t v26 = ~v24;
      uint64_t v27 = *(void *)(v5 + 48);
      while (1)
      {
        uint64_t v28 = (void *)(v27 + 40 * v25);
        uint64_t v29 = v28[2];
        uint64_t v30 = v28[3];
        BOOL v31 = *v28 == v18 && v28[1] == v19;
        if (v31 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          BOOL v32 = v29 == v20 && v30 == v21;
          if (v32 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
        }
        unint64_t v25 = (v25 + 1) & v26;
        if (((*(void *)(v41 + ((v25 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v25) & 1) == 0) {
          goto LABEL_34;
        }
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v33 = (v25 >> 3) & 0x1FFFFFFFFFFFFFF8;
      a5 = v38;
      uint64_t v34 = *(unint64_t *)((char *)a1 + v33);
      *(unint64_t *)((char *)a1 + v33) = v34 & ~(1 << v25);
      uint64_t v5 = a3;
    }
    while ((v34 & (1 << v25)) == 0);
    uint64_t v7 = v36 - 1;
    if (__OFSUB__(v36, 1))
    {
LABEL_45:
      __break(1u);
      return;
    }
    if (v36 != 1) {
      continue;
    }
    break;
  }
}

uint64_t sub_100179538(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    int64_t v8 = &_swiftEmptySetSingleton;
LABEL_35:
    swift_release();
    return (uint64_t)v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_10000D938(&qword_1003266C0);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  int64_t v8 = (unsigned char *)result;
  uint64_t v35 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  uint64_t v37 = v4;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      uint64_t v38 = v10;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v35) {
      goto LABEL_35;
    }
    unint64_t v15 = a1[v14];
    uint64_t v16 = v10 + 1;
    if (!v15)
    {
      uint64_t v16 = v10 + 2;
      if (v10 + 2 >= v35) {
        goto LABEL_35;
      }
      unint64_t v15 = a1[v16];
      if (!v15)
      {
        uint64_t v16 = v10 + 3;
        if (v10 + 3 >= v35) {
          goto LABEL_35;
        }
        unint64_t v15 = a1[v16];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    uint64_t v38 = v16;
    unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
LABEL_24:
    uint64_t v18 = (uint64_t *)(*(void *)(v4 + 48) + 40 * v13);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    uint64_t v21 = v18[2];
    uint64_t v22 = v18[3];
    Swift::Int v23 = (void *)v18[4];
    Hasher.init(_seed:)();
    id v24 = v23;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v25 = -1 << v8[32];
    unint64_t v26 = result & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) == 0)
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v25) >> 6;
      while (++v27 != v30 || (v29 & 1) == 0)
      {
        BOOL v31 = v27 == v30;
        if (v27 == v30) {
          unint64_t v27 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v11 + 8 * v27);
        if (v32 != -1)
        {
          unint64_t v28 = __clz(__rbit64(~v32)) + (v27 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    unint64_t v28 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(void *)(v11 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
    uint64_t v33 = (void *)(*((void *)v8 + 6) + 40 * v28);
    void *v33 = v19;
    v33[1] = v20;
    v33[2] = v21;
    v33[3] = v22;
    void v33[4] = v23;
    ++*((void *)v8 + 2);
    if (__OFSUB__(v5--, 1)) {
      goto LABEL_38;
    }
    uint64_t v4 = v37;
    uint64_t v10 = v38;
    if (!v5) {
      goto LABEL_35;
    }
  }
  uint64_t v17 = v10 + 4;
  if (v10 + 4 >= v35) {
    goto LABEL_35;
  }
  unint64_t v15 = a1[v17];
  if (v15)
  {
    uint64_t v16 = v10 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v16 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v16 >= v35) {
      goto LABEL_35;
    }
    unint64_t v15 = a1[v16];
    ++v17;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

#error "100179908: call analysis failed (funcsize=114)"

void sub_1001799F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v5 > *(void *)(v3 + 24) >> 1)
  {
    if (v4 <= v5) {
      uint64_t v8 = v4 + v2;
    }
    else {
      uint64_t v8 = v4;
    }
    sub_1001B762C(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    uint64_t v3 = v9;
  }
  if (!*(void *)(a1 + 16))
  {
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  sub_1001B87A4(a1 + 32, v2);
  if (!v2)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return;
  }
  uint64_t v10 = *(void *)(v3 + 16);
  BOOL v11 = __OFADD__(v10, v2);
  uint64_t v12 = v10 + v2;
  if (!v11)
  {
    *(void *)(v3 + 16) = v12;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
}

uint64_t (*sub_100179ACC())()
{
  uint64_t v1 = sub_10017A1EC();
  uint64_t v2 = (void *)sub_10001731C((uint64_t)v1);
  *(void *)(v0 + 32) = sub_100179BB0(v2, v3, v4);
  return sub_100179B18;
}

uint64_t (*sub_100179B1C())()
{
  uint64_t v1 = sub_10017A1EC();
  uint64_t v2 = (void *)sub_10001731C((uint64_t)v1);
  *(void *)(v0 + 32) = sub_100179C80(v2, v3, v4);
  return sub_100179B18;
}

void sub_100179B68(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

void (*sub_100179BB0(void *a1, uint64_t a2, uint64_t a3))(id *a1)
{
  unint64_t v6 = a3 & 0xC000000000000001;
  sub_10019BD88(a2, (a3 & 0xC000000000000001) == 0);
  if (v6) {
    id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v7 = *(id *)(a3 + 8 * a2 + 32);
  }
  *a1 = v7;
  return sub_100179C30;
}

void sub_100179C30(id *a1)
{
}

uint64_t type metadata accessor for ScopedIDsBatchRequest()
{
  return self;
}

uint64_t type metadata accessor for ScopedIDsUtils()
{
  return self;
}

void (*sub_100179C80(void *a1, uint64_t a2, uint64_t a3))(id *)
{
  unint64_t v6 = a3 & 0xC000000000000001;
  sub_10019BD88(a2, (a3 & 0xC000000000000001) == 0);
  if (v6) {
    id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v7 = *(id *)(a3 + 8 * a2 + 32);
  }
  *a1 = v7;
  return sub_10017A1B4;
}

uint64_t sub_100179D00(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100179D0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D938(&qword_1003266C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100179D74(uint64_t a1)
{
  return a1;
}

id *sub_100179DA0(id *a1)
{
  id v2 = *a1;
  return a1;
}

uint64_t sub_100179DCC(uint64_t a1)
{
  return a1;
}

void sub_100179E00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100179E58(uint64_t a1)
{
  return a1;
}

id *sub_100179E84(id *a1)
{
  return a1;
}

unint64_t sub_100179EB0()
{
  unint64_t result = qword_1003266D0;
  if (!qword_1003266D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003266D0);
  }
  return result;
}

uint64_t sub_100179EFC(int64_t a1, int64_t a2, uint64_t a3)
{
  uint64_t result = 0;
  while (1)
  {
    BOOL v5 = a1 <= a2;
    if (a3 > 0) {
      BOOL v5 = a1 >= a2;
    }
    if (v5) {
      break;
    }
    BOOL v6 = __OFADD__(a1, a3);
    a1 += a3;
    if (v6) {
      a1 = (a1 >> 63) ^ 0x8000000000000000;
    }
    BOOL v6 = __OFADD__(result++, 1);
    if (v6)
    {
      __break(1u);
      return result;
    }
  }
  return result;
}

void destroy for PlayerAndGameID(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v2 = *(void **)(a1 + 32);
}

void *initializeWithCopy for PlayerAndGameID(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  BOOL v5 = (void *)a2[4];
  a1[4] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v6 = v5;
  return a1;
}

void *assignWithCopy for PlayerAndGameID(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a1[4];
  BOOL v5 = (void *)a2[4];
  a1[4] = v5;
  id v6 = v5;

  return a1;
}

__n128 initializeWithTake for PlayerAndGameID(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for PlayerAndGameID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  BOOL v5 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for PlayerAndGameID(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlayerAndGameID(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlayerAndGameID()
{
  return &type metadata for PlayerAndGameID;
}

unint64_t sub_10017A164()
{
  unint64_t result = qword_1003266E8;
  if (!qword_1003266E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003266E8);
  }
  return result;
}

void sub_10017A1B8()
{
  *(void *)(v0 + 16) = *(void *)(v1 + 16);
}

uint64_t sub_10017A1E4()
{
  return swift_bridgeObjectRetain();
}

void *sub_10017A1EC()
{
  return malloc(0x28uLL);
}

uint64_t sub_10017A20C(uint64_t a1, uint64_t a2)
{
  uint64_t v60 = a2;
  uint64_t v3 = sub_10000D938(&qword_100326298);
  __chkstk_darwin(v3 - 8, v4);
  id v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for NWBrowser.Result();
  uint64_t v9 = __chkstk_darwin(v7, v8);
  uint64_t v57 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v14 = (char *)&v48 - v13;
  uint64_t v58 = v15;
  __chkstk_darwin(v12, v16);
  unint64_t v56 = (char *)&v48 - v18;
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v49 = a1 + 56;
  uint64_t v20 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v21 = -1;
  if (v20 < 64) {
    uint64_t v21 = ~(-1 << v20);
  }
  unint64_t v22 = v21 & v19;
  int64_t v50 = (unint64_t)(v20 + 63) >> 6;
  uint64_t v54 = v17 + 32;
  uint64_t v55 = v17 + 16;
  uint64_t v59 = v17;
  unint64_t v53 = (uint64_t (**)(char *, uint64_t))(v17 + 8);
  uint64_t v61 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v24 = 0;
  uint64_t v51 = v14;
  uint64_t v52 = (char *)&type metadata for () + 8;
  if (!v22) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v68 = (v22 - 1) & v22;
  int64_t v62 = v24;
  for (unint64_t i = __clz(__rbit64(v22)) | (v24 << 6); ; unint64_t i = __clz(__rbit64(v27)) + (v28 << 6))
  {
    uint64_t v30 = v59;
    BOOL v31 = *(void (**)(char *, unint64_t, uint64_t))(v59 + 16);
    uint64_t v32 = v56;
    v31(v56, *(void *)(v61 + 48) + *(void *)(v59 + 72) * i, v7);
    uint64_t v63 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
    v63(v14, v32, v7);
    uint64_t v33 = type metadata accessor for TaskPriority();
    sub_10000D97C((uint64_t)v6, 1, 1, v33);
    uint64_t v34 = v7;
    uint64_t v35 = v57;
    v31(v57, (unint64_t)v14, v34);
    uint64_t v37 = sub_100186D8C(&qword_100326870, v36, (void (*)(uint64_t))type metadata accessor for PeerDiscovery);
    unint64_t v38 = (*(unsigned __int8 *)(v30 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
    uint64_t v39 = (char *)swift_allocObject();
    uint64_t v40 = (uint64_t)v6;
    uint64_t v41 = v60;
    *((void *)v39 + 2) = v60;
    *((void *)v39 + 3) = v37;
    *((void *)v39 + 4) = v41;
    uint64_t v42 = v35;
    uint64_t v7 = v34;
    v63(&v39[v38], v42, v34);
    int v43 = sub_10000DB14(v40, 1, v33);
    swift_retain_n();
    if (v43 == 1)
    {
      sub_100018600(v40, &qword_100326298);
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v33 - 8) + 8))(v40, v33);
    }
    id v6 = (char *)v40;
    uint64_t v14 = v51;
    int64_t v24 = v62;
    if (*((void *)v39 + 2))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v44 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v46 = v45;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v44 = 0;
      uint64_t v46 = 0;
    }
    uint64_t v47 = swift_allocObject();
    *(void *)(v47 + 16) = &unk_100326878;
    *(void *)(v47 + 24) = v39;
    if (v46 | v44)
    {
      uint64_t v64 = 0;
      uint64_t v65 = 0;
      uint64_t v66 = v44;
      uint64_t v67 = v46;
    }
    swift_task_create();
    swift_release();
    uint64_t result = (*v53)(v14, v7);
    unint64_t v22 = v68;
    if (v68) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v26 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v26 >= v50) {
      goto LABEL_31;
    }
    unint64_t v27 = *(void *)(v49 + 8 * v26);
    int64_t v28 = v24 + 1;
    if (!v27)
    {
      int64_t v28 = v24 + 2;
      if (v24 + 2 >= v50) {
        goto LABEL_31;
      }
      unint64_t v27 = *(void *)(v49 + 8 * v28);
      if (!v27)
      {
        int64_t v28 = v24 + 3;
        if (v24 + 3 >= v50) {
          goto LABEL_31;
        }
        unint64_t v27 = *(void *)(v49 + 8 * v28);
        if (!v27)
        {
          int64_t v28 = v24 + 4;
          if (v24 + 4 >= v50) {
            goto LABEL_31;
          }
          unint64_t v27 = *(void *)(v49 + 8 * v28);
          if (!v27) {
            break;
          }
        }
      }
    }
LABEL_20:
    uint64_t v68 = (v27 - 1) & v27;
    int64_t v62 = v28;
  }
  uint64_t v29 = v24 + 5;
  if (v24 + 5 >= v50)
  {
LABEL_31:
    swift_release();
    return swift_release();
  }
  unint64_t v27 = *(void *)(v49 + 8 * v29);
  if (v27)
  {
    int64_t v28 = v24 + 5;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v28 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v28 >= v50) {
      goto LABEL_31;
    }
    unint64_t v27 = *(void *)(v49 + 8 * v28);
    ++v29;
    if (v27) {
      goto LABEL_20;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_10017A77C(uint64_t a1, unint64_t a2)
{
  sub_10000D938(&qword_1003267F0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10024F830;
  long long v6 = v2[1];
  long long v16 = *v2;
  long long v7 = v16;
  long long v17 = v6;
  *(_OWORD *)(inited + 48) = v6;
  *(_OWORD *)(inited + 96) = v7;
  long long v15 = v2[2];
  *(_OWORD *)(inited + 192) = v15;
  *(void *)(inited + 32) = 101;
  *(void *)(inited + 40) = 0xE100000000000000;
  sub_1001878E4();
  *(void *)(v8 + 72) = &type metadata for String;
  *(void *)(v8 + 80) = v9;
  *(void *)(v8 + 88) = 0xE800000000000000;
  *(void *)(v8 + 120) = &type metadata for String;
  *(void *)(v8 + 128) = 0x7550656369766564;
  *(void *)(v8 + 136) = 0xEF6E656B6F546873;
  *(void *)(v8 + 144) = a1;
  *(void *)(v8 + 152) = a2;
  *(void *)(v8 + 168) = &type metadata for Data;
  *(void *)(v8 + 176) = 104;
  *(void *)(v8 + 184) = v10;
  *(void *)(v8 + 216) = &type metadata for String;
  *(void *)(v8 + 224) = 28776;
  *(void *)(v8 + 232) = 0xE200000000000000;
  *(_OWORD *)(v8 + 240) = v11;
  *(void *)(v8 + 264) = &type metadata for String;
  *(void *)(v8 + 272) = 0x4449726579616C70;
  *(void *)(v8 + 280) = 0xE800000000000000;
  long long v13 = v2[4];
  long long v14 = v11;
  *(_OWORD *)(v8 + 288) = v13;
  *(void *)(v8 + 312) = &type metadata for String;
  *(void *)(v8 + 320) = 0xD000000000000010;
  *(void *)(v8 + 328) = 0x80000001002B0A20;
  *(void *)(v8 + 360) = &type metadata for Bool;
  *(unsigned char *)(v8 + 336) = 1;
  sub_100179D74((uint64_t)&v17);
  sub_100179D74((uint64_t)&v16);
  sub_100175574(a1, a2);
  sub_100179D74((uint64_t)&v15);
  sub_100179D74((uint64_t)&v14);
  sub_100179D74((uint64_t)&v13);
  sub_1001875F4();
  return Dictionary.init(dictionaryLiteral:)();
}

id PeerDiscovery.__allocating_init(delegate:localPlayerID:localPushToken:)()
{
  return PeerDiscovery.init(delegate:localPlayerID:localPushToken:)();
}

id PeerDiscovery.init(delegate:localPlayerID:localPushToken:)()
{
  sub_100187340();
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  swift_defaultActor_initialize();
  swift_unknownObjectWeakInit();
  v1[15] = 0;
  uint8_t v1[16] = 0;
  v1[21] = _swiftEmptyDictionarySingleton;
  v1[22] = _swiftEmptyDictionarySingleton;
  v1[23] = _swiftEmptyDictionarySingleton;
  v1[17] = v4;
  v1[18] = v3;
  v1[19] = v2;
  v1[20] = v0;
  v8.receiver = v1;
  v8.Class super_class = ObjectType;
  id v6 = [super init];
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  return v6;
}

uint64_t PeerDiscovery.startBrowsing()()
{
  sub_100010DA4();
  void v1[4] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[5] = v2;
  sub_1000111CC(v2);
  v1[6] = v3;
  v1[7] = sub_100186FD4();
  uint8_t v1[8] = swift_task_alloc();
  sub_100186FC8();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_10017AB40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24)
{
  sub_100010F38();
  a23 = v27;
  a24 = v28;
  sub_1000171C8();
  a22 = v24;
  uint64_t v29 = v24 + 4;
  if (*(void *)(v24[4] + 120))
  {
    static os_log_type_t.debug.getter();
    sub_100187714();
    uint64_t v30 = Logger.logObject.getter();
    BOOL v31 = sub_100017200(v30);
    uint64_t v32 = v24[8];
    uint64_t v34 = v24[5];
    uint64_t v33 = v24[6];
    if (v31)
    {
      uint64_t v57 = v24[8];
      uint64_t v56 = v24[5];
      uint64_t v35 = (uint8_t *)sub_100016FF0();
      a13 = sub_100011BBC();
      *(_DWORD *)uint64_t v35 = 136315138;
      v24[3] = sub_100174CE4(0xD00000000000002ELL, 0x80000001002B0230, &a13);
      sub_100018344();
      sub_100187454();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Nearby - %s", v35, 0xCu);
      sub_100187054();
      sub_100010D7C();
      sub_100010D7C();

      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v57, v56);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
    }
    uint64_t v40 = (void *)swift_task_alloc();
    v24[9] = v40;
    void *v40 = v24;
    v40[1] = sub_10017AE60;
    sub_1000112F4();
    return PeerDiscovery.stopBrowsing()();
  }
  else
  {
    static os_log_type_t.info.getter();
    sub_100187714();
    uint64_t v36 = Logger.logObject.getter();
    BOOL v37 = sub_100017200(v36);
    uint64_t v38 = v24[6];
    if (v37)
    {
      a10 = v24 + 2;
      a12 = v24[5];
      a11 = v24[7];
      uint64_t v39 = (_DWORD *)sub_100016FF0();
      a13 = sub_100011BBC();
      _DWORD *v39 = 136315138;
      _OWORD v24[2] = sub_100174CE4(0xD00000000000001ALL, 0x80000001002B0210, &a13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100010F60((void *)&_mh_execute_header, v25, v26, "Nearby - %s");
      sub_1000172D0();
      sub_100010D7C();
      sub_100010D7C();

      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(a11, a12);
    }
    else
    {

      uint64_t v43 = sub_1001877B0();
      v45(v43, v44);
    }
    uint64_t v46 = *v29;
    type metadata accessor for PeerBrowser();
    uint64_t v47 = sub_10001715C();
    sub_100187938(v47);
    v24[7] = &off_1002DD2A8;
    v24[8] = 0;
    swift_unknownObjectWeakAssign();
    *(void *)(v46 + 120) = v29;
    swift_release();
    if (*(void *)(v46 + 120))
    {
      swift_retain();
      sub_100167798();
      swift_release();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000112AC();
    sub_1000112F4();
    return v49(v48, v49, v50, v51, v52, v53, v54, v55, a9, a10, a11, a12, a13, a14, a15, a16);
  }
}

uint64_t sub_10017AE60()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  swift_task_dealloc();
  sub_100186FC8();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10017AF3C()
{
  uint64_t v17 = v1;
  static os_log_type_t.info.getter();
  sub_100187280();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = v0;
  if (os_log_type_enabled(v2, v0))
  {
    uint64_t v4 = *(void *)(v1 + 56);
    uint64_t v5 = (_DWORD *)sub_100016FF0();
    uint64_t v16 = sub_100011BBC();
    *uint64_t v5 = 136315138;
    sub_100010A64();
    uint64_t v7 = sub_100174CE4(0xD00000000000001ALL, v6, &v16);
    sub_100187868(v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100017C8C((void *)&_mh_execute_header, v2, v3, "Nearby - %s");
    sub_100187600();
    sub_100010D7C();
    sub_100010D7C();

    sub_100017130();
    sub_10018735C();
    v9(v8);
  }
  else
  {
    uint64_t v4 = *(void *)(v1 + 56);

    uint64_t v10 = sub_1001877DC();
    v11(v10);
  }
  uint64_t v12 = *(void *)(v1 + 32);
  type metadata accessor for PeerBrowser();
  uint64_t v13 = sub_10001715C();
  sub_100187938(v13);
  *(void *)(v4 + 24) = &off_1002DD2A8;
  *(void *)(v4 + 32) = 0;
  swift_unknownObjectWeakAssign();
  *(void *)(v12 + 120) = v4;
  swift_release();
  if (*(void *)(v12 + 120))
  {
    swift_retain();
    sub_100167798();
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000112AC();
  return v14();
}

uint64_t PeerDiscovery.stopBrowsing()()
{
  sub_100010DA4();
  v1[9] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[10] = v2;
  sub_1000111CC(v2);
  v1[11] = v3;
  v1[12] = sub_1000171A0();
  sub_100186FC8();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_10017B188()
{
  uint64_t v19 = v0;
  os_log_type_t v1 = static os_log_type_t.info.getter();
  static GKLog.match.getter();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = v1;
  if (os_log_type_enabled(v2, v1))
  {
    uint64_t v4 = (_DWORD *)sub_100016FF0();
    uint64_t v5 = v0 + 5;
    uint64_t v18 = sub_100011BBC();
    *uint64_t v4 = 136315138;
    sub_100010A64();
    v0[8] = sub_100174CE4(0xD00000000000001ALL, v6, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100187178((void *)&_mh_execute_header, v2, v1, "Nearby - %s");
    sub_100187054();
    sub_100010D7C();
    sub_100010D7C();

    sub_10018757C();
    v7();
  }
  else
  {
    uint64_t v8 = v0[11];
    uint64_t v9 = v0[12];
    uint64_t v5 = (void *)v0[10];

    (*(void (**)(uint64_t, void *))(v8 + 8))(v9, v5);
  }
  uint64_t v10 = (void *)(v0[9] + 184);
  sub_10018782C();
  sub_10018774C();
  uint64_t v11 = *v10 + 64;
  sub_1001870C8();
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v13 = 0;
  if (!v3) {
    goto LABEL_6;
  }
LABEL_5:
  sub_10018749C();
  while (1)
  {
    swift_retain();
    sub_1001A5390();
    uint64_t result = swift_release();
    if (v3) {
      goto LABEL_5;
    }
LABEL_6:
    uint64_t v14 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
LABEL_28:
      __break(1u);
      return result;
    }
    if (v14 >= (uint64_t)v5) {
      goto LABEL_22;
    }
    ++v13;
    if (!*(void *)(v11 + 8 * v14))
    {
      uint64_t v13 = v14 + 1;
      if (v14 + 1 >= (uint64_t)v5) {
        goto LABEL_22;
      }
      if (!*(void *)(v11 + 8 * v13))
      {
        uint64_t v13 = v14 + 2;
        if (v14 + 2 >= (uint64_t)v5) {
          goto LABEL_22;
        }
        if (!*(void *)(v11 + 8 * v13)) {
          break;
        }
      }
    }
LABEL_19:
    sub_100187484();
  }
  uint64_t v15 = v14 + 3;
  if (v15 < (uint64_t)v5)
  {
    if (!*(void *)(v11 + 8 * v15))
    {
      while (1)
      {
        uint64_t v13 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          goto LABEL_28;
        }
        if (v13 >= (uint64_t)v5) {
          goto LABEL_22;
        }
        ++v15;
        if (*(void *)(v11 + 8 * v13)) {
          goto LABEL_19;
        }
      }
    }
    uint64_t v13 = v15;
    goto LABEL_19;
  }
LABEL_22:
  uint64_t v16 = v0[9];
  swift_release();
  sub_10001749C();
  sub_10000D938(&qword_100326700);
  Dictionary._Variant.removeAll(keepingCapacity:)(0);
  swift_endAccess();
  if (*(void *)(v16 + 120))
  {
    swift_retain();
    sub_1001680F8();
    swift_release();
  }
  *(void *)(v16 + 120) = 0;
  swift_release();
  swift_task_dealloc();
  sub_1000112AC();
  return v17();
}

uint64_t sub_10017B49C(const void *a1, uint64_t a2)
{
  _DWORD v2[2] = a2;
  v2[3] = _Block_copy(a1);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[4] = v3;
  void *v3 = v2;
  v3[1] = sub_100186FC0;
  return PeerDiscovery.startBrowsing()();
}

uint64_t sub_10017B564(const void *a1, uint64_t a2)
{
  _DWORD v2[2] = a2;
  v2[3] = _Block_copy(a1);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[4] = v3;
  void *v3 = v2;
  v3[1] = sub_10017B60C;
  return PeerDiscovery.stopBrowsing()();
}

uint64_t sub_10017B60C()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v2 = *(void (***)(void))(v1 + 24);
  uint64_t v3 = *v0;
  sub_100010D94();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  swift_release();
  v2[2](v2);
  _Block_release(v2);
  sub_1000112AC();
  return v5();
}

uint64_t PeerDiscovery.startListening(_:)()
{
  sub_100010DA4();
  void v1[4] = v2;
  v1[5] = v0;
  uint64_t v3 = type metadata accessor for Logger();
  v1[6] = v3;
  sub_1000111CC(v3);
  v1[7] = v4;
  uint8_t v1[8] = sub_100186FD4();
  v1[9] = swift_task_alloc();
  sub_100186FC8();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_10017B7AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26)
{
  sub_1000184F4();
  a25 = v28;
  a26 = v29;
  sub_1001871B4();
  a24 = v26;
  uint64_t v30 = v26 + 3;
  if (*(void *)(v26[5] + 128))
  {
    os_log_type_t v31 = static os_log_type_t.debug.getter();
    static GKLog.match.getter();
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = v31;
    BOOL v34 = os_log_type_enabled(v32, v31);
    uint64_t v35 = v26[9];
    uint64_t v37 = v26[6];
    uint64_t v36 = v26[7];
    if (v34)
    {
      uint64_t v38 = (_DWORD *)sub_100016FF0();
      a14 = sub_100011BBC();
      *uint64_t v38 = 136315138;
      sub_100010A64();
      v26[3] = sub_100174CE4(0xD00000000000002FLL, v39, &a14);
      sub_1001876DC();
      sub_100187178((void *)&_mh_execute_header, v32, v33, "Nearby - %s");
      sub_100186FF0();
      sub_100010D7C();
      sub_100010D7C();
    }

    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
    uint64_t v50 = (void *)swift_task_alloc();
    v26[10] = v50;
    *uint64_t v50 = v26;
    v50[1] = sub_10017BB8C;
    sub_100011220();
    return PeerDiscovery.stopListening()();
  }
  else
  {
    static os_log_type_t.info.getter();
    sub_100011330();
    _StringGuts.grow(_:)(52);
    v40._uint64_t countAndFlagsBits = 0xD000000000000032;
    v40._object = (void *)0x80000001002B0280;
    String.append(_:)(v40);
    v41._uint64_t countAndFlagsBits = Dictionary.description.getter();
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    uint64_t v43 = a14;
    unint64_t v42 = a15;
    static GKLog.match.getter();
    sub_100187814();
    uint64_t v44 = Logger.logObject.getter();
    BOOL v45 = sub_1001876B8(v44);
    uint64_t v46 = v26[7];
    uint64_t v47 = v26[8];
    uint64_t v48 = (_DWORD *)v26[6];
    if (v45)
    {
      a11 = v43;
      a13 = v26[6];
      uint64_t v48 = (_DWORD *)sub_100016FF0();
      a12 = v47;
      uint64_t v47 = sub_100011BBC();
      a14 = v47;
      a10 = v26 + 3;
      _DWORD *v48 = 136315138;
      uint64_t v30 = v48 + 3;
      swift_bridgeObjectRetain();
      v26[2] = sub_100174CE4(v43, v42, &a14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100187850();
      sub_100017C8C((void *)&_mh_execute_header, v44, (os_log_type_t)v27, "Nearby - %s");
      sub_10001698C();
      sub_100010D7C();
      sub_100010D7C();

      uint64_t v49 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
      v46 += 8;
      v49(a12, a13);
    }
    else
    {

      sub_1001877FC();
      uint64_t v53 = sub_10018756C();
      v55(v53, v54);
    }
    swift_bridgeObjectRelease();
    sub_1001878C4();
    uint64_t v56 = swift_allocObject();
    sub_100187778(v56);
    v27[5] = v47;
    v27[6] = v42;
    v27[7] = v48;
    v27[8] = v30;
    v27[9] = v44;
    v27[3] = &off_1002DD2C0;
    v27[4] = 0;
    swift_unknownObjectWeakAssign();
    sub_100187838();
    sub_100187838();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1001BBBA4();
    sub_100169274(v42, (unint64_t)v48);
    *(void *)(v46 + 128) = v27;
    swift_release();
    if (*(void *)(v46 + 128))
    {
      swift_retain();
      sub_1001BAFA0();
      swift_release();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000112AC();
    sub_100011220();
    return v58(v57, v58, v59, v60, v61, v62, v63, v64, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  }
}

uint64_t sub_10017BB8C()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  swift_task_dealloc();
  sub_100186FC8();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10017BC68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24)
{
  sub_100010F38();
  a23 = v26;
  a24 = v27;
  sub_1000171C8();
  a22 = v25;
  static os_log_type_t.info.getter();
  sub_1001875C4();
  a12 = 0;
  a13 = v28;
  _StringGuts.grow(_:)(52);
  v29._object = (void *)0x80000001002B0280;
  v29._uint64_t countAndFlagsBits = 0xD000000000000032;
  String.append(_:)(v29);
  v55._uint64_t countAndFlagsBits = Dictionary.description.getter();
  sub_1001873A8(v55);
  swift_bridgeObjectRelease();
  uint64_t v31 = a12;
  uint64_t v30 = a13;
  static GKLog.match.getter();
  sub_100017DA4();
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = (void *)v24;
  if (os_log_type_enabled(v32, v24))
  {
    uint64_t v34 = v25[7];
    a10 = v25[6];
    a11 = v25[8];
    uint64_t v35 = (uint8_t *)sub_100016FF0();
    a12 = sub_100011BBC();
    *(_DWORD *)uint64_t v35 = 136315138;
    uint64_t v36 = (uint64_t)(v35 + 4);
    uint64_t v37 = swift_bridgeObjectRetain();
    uint64_t v39 = sub_100187400(v37, v38, &a12);
    sub_100187868(v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100017D30();
    _os_log_impl((void *)&_mh_execute_header, v32, (os_log_type_t)v33, "Nearby - %s", v35, 0xCu);
    sub_100187054();
    sub_100010D7C();
    sub_100010D7C();

    Swift::String v41 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
    unint64_t v40 = v34 + 8;
    v41(a11, a10);
  }
  else
  {
    uint64_t v42 = v25[7];
    uint64_t v36 = v25[8];
    unint64_t v40 = v25[6];

    sub_100017E0C();
    uint64_t v35 = (uint8_t *)(v42 + 8);
    uint64_t v43 = sub_10018700C();
    v44(v43);
  }
  swift_bridgeObjectRelease();
  sub_1001878C4();
  uint64_t v45 = swift_allocObject();
  sub_100187778(v45);
  v33[5] = v32;
  v33[6] = v36;
  v33[7] = v40;
  v33[8] = v31;
  v33[9] = v35;
  v33[3] = &off_1002DD2C0;
  void v33[4] = 0;
  swift_unknownObjectWeakAssign();
  sub_100187838();
  sub_100187838();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1001BBBA4();
  sub_100169274(v36, v40);
  *(void *)(v30 + 128) = v33;
  swift_release();
  if (*(void *)(v30 + 128))
  {
    swift_retain();
    sub_1001BAFA0();
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000112AC();
  sub_1000112F4();
  return v47(v46, v47, v48, v49, v50, v51, v52, v53, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t PeerDiscovery.stopListening()()
{
  sub_100010DA4();
  v1[15] = v0;
  sub_10000D938(&qword_100326718);
  uint8_t v1[16] = sub_100186FD4();
  v1[17] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for Logger();
  v1[18] = v2;
  sub_1000111CC(v2);
  v1[19] = v3;
  v1[20] = sub_1000171A0();
  sub_100186FC8();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_10017BF94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26)
{
  sub_1000184F4();
  a25 = v28;
  a26 = v29;
  sub_1001871B4();
  a24 = v26;
  static os_log_type_t.info.getter();
  sub_100187714();
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = v27;
  if (os_log_type_enabled(v30, v27))
  {
    uint64_t v32 = v26[19];
    uint64_t v75 = v26[20];
    uint64_t v33 = v26[18];
    uint64_t v34 = (uint8_t *)sub_100016FF0();
    a15 = sub_100011BBC();
    *(_DWORD *)uint64_t v34 = 136315138;
    v26[14] = sub_100174CE4(0xD00000000000001BLL, 0x80000001002B02F0, &a15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Nearby - %s", v34, 0xCu);
    swift_arrayDestroy();
    sub_100010D7C();
    sub_100010D7C();

    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v75, v33);
  }
  else
  {
    uint64_t v35 = v26[19];
    uint64_t v36 = v26[20];
    uint64_t v37 = v26[18];

    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v36, v37);
  }
  uint64_t v74 = v26[15] + 168;
  sub_10018774C();
  uint64_t v38 = *(void *)v74;
  uint64_t v76 = *(void *)v74 + 64;
  uint64_t v39 = -1;
  uint64_t v40 = -1 << *(unsigned char *)(*(void *)v74 + 32);
  if (-v40 < 64) {
    uint64_t v39 = ~(-1 << -(char)v40);
  }
  int64_t v41 = v39 & *(void *)(*(void *)v74 + 64);
  int64_t v42 = (unint64_t)(63 - v40) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v44 = 0;
  if (!v41) {
    goto LABEL_9;
  }
LABEL_7:
  unint64_t v45 = __clz(__rbit64(v41));
  v41 &= v41 - 1;
  unint64_t v46 = v45 | (v44 << 6);
LABEL_8:
  uint64_t v47 = v26[16];
  uint64_t v48 = *(void *)(v38 + 48);
  type metadata accessor for NWEndpoint();
  sub_100187764();
  (*(void (**)(uint64_t, unint64_t))(v49 + 16))(v47, v48 + *(void *)(v49 + 72) * v46);
  uint64_t v50 = *(void *)(v38 + 56);
  uint64_t v51 = sub_10000D938(&qword_100326720);
  *(void *)(v47 + *(int *)(v51 + 48)) = *(void *)(v50 + 8 * v46);
  sub_10000D97C(v47, 0, 1, v51);
  swift_retain();
  while (1)
  {
    uint64_t v57 = v26[17];
    sub_100186A5C(v26[16], v57, &qword_100326718);
    uint64_t v58 = sub_10000D938(&qword_100326720);
    if (sub_10000DB14(v57, 1, v58) == 1) {
      break;
    }
    sub_1001A5390();
    swift_release();
    type metadata accessor for NWEndpoint();
    sub_1000180C4();
    sub_100011C3C();
    uint64_t result = v59();
    if (v41) {
      goto LABEL_7;
    }
LABEL_9:
    int64_t v52 = v44 + 1;
    if (__OFADD__(v44, 1))
    {
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    if (v52 < v42)
    {
      unint64_t v53 = *(void *)(v76 + 8 * v52);
      if (v53) {
        goto LABEL_12;
      }
      int64_t v54 = v44 + 2;
      ++v44;
      if (v52 + 1 < v42)
      {
        unint64_t v53 = *(void *)(v76 + 8 * v54);
        if (v53) {
          goto LABEL_15;
        }
        int64_t v44 = v52 + 1;
        if (v52 + 2 < v42)
        {
          unint64_t v53 = *(void *)(v76 + 8 * (v52 + 2));
          if (v53)
          {
            v52 += 2;
            goto LABEL_12;
          }
          int64_t v54 = v52 + 3;
          int64_t v44 = v52 + 2;
          if (v52 + 3 < v42)
          {
            unint64_t v53 = *(void *)(v76 + 8 * v54);
            if (!v53)
            {
              while (1)
              {
                int64_t v52 = v54 + 1;
                if (__OFADD__(v54, 1)) {
                  goto LABEL_56;
                }
                if (v52 >= v42)
                {
                  int64_t v44 = v42 - 1;
                  goto LABEL_26;
                }
                unint64_t v53 = *(void *)(v76 + 8 * v52);
                ++v54;
                if (v53) {
                  goto LABEL_12;
                }
              }
            }
LABEL_15:
            int64_t v52 = v54;
LABEL_12:
            int64_t v41 = (v53 - 1) & v53;
            unint64_t v46 = __clz(__rbit64(v53)) + (v52 << 6);
            int64_t v44 = v52;
            goto LABEL_8;
          }
        }
      }
    }
LABEL_26:
    uint64_t v55 = v26[16];
    uint64_t v56 = sub_10000D938(&qword_100326720);
    sub_10000D97C(v55, 1, 1, v56);
    int64_t v41 = 0;
  }
  uint64_t v60 = v26[15];
  swift_release();
  sub_10001749C();
  sub_10000D938(&qword_100326728);
  Dictionary._Variant.removeAll(keepingCapacity:)(0);
  swift_endAccess();
  sub_10018774C();
  uint64_t v61 = *(void *)(v60 + 176) + 64;
  sub_1001870C8();
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v62 = 0;
  if (!&qword_100326720) {
    goto LABEL_32;
  }
LABEL_31:
  sub_10018749C();
  while (1)
  {
    swift_retain();
    sub_1001A5390();
    uint64_t result = swift_release();
    if (&qword_100326720) {
      goto LABEL_31;
    }
LABEL_32:
    int64_t v63 = v62 + 1;
    if (__OFADD__(v62, 1))
    {
      __break(1u);
      goto LABEL_54;
    }
    if (v63 >= v41)
    {
LABEL_48:
      uint64_t v65 = v26[15];
      swift_release();
      sub_10001749C();
      sub_10000D938(&qword_100326700);
      Dictionary._Variant.removeAll(keepingCapacity:)(0);
      swift_endAccess();
      if (*(void *)(v65 + 128))
      {
        swift_retain();
        sub_1001BB458();
        swift_release();
      }
      *(void *)(v65 + 128) = 0;
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_1000112AC();
      sub_100011220();
      return v67(v66, v67, v68, v69, v70, v71, v72, v73, v42 - 1, v26 + 11, v74, v26 + 5, v26 + 8, v76, a15, a16, a17, a18);
    }
    ++v62;
    if (!*(void *)(v61 + 8 * v63))
    {
      int64_t v62 = v63 + 1;
      if (v63 + 1 >= v41) {
        goto LABEL_48;
      }
      if (!*(void *)(v61 + 8 * v62))
      {
        int64_t v62 = v63 + 2;
        if (v63 + 2 >= v41) {
          goto LABEL_48;
        }
        if (!*(void *)(v61 + 8 * v62)) {
          break;
        }
      }
    }
LABEL_45:
    sub_100187484();
  }
  int64_t v64 = v63 + 3;
  if (v64 >= v41) {
    goto LABEL_48;
  }
  if (*(void *)(v61 + 8 * v64))
  {
    int64_t v62 = v64;
    goto LABEL_45;
  }
  while (1)
  {
    int64_t v62 = v64 + 1;
    if (__OFADD__(v64, 1)) {
      break;
    }
    if (v62 >= v41) {
      goto LABEL_48;
    }
    ++v64;
    if (*(void *)(v61 + 8 * v62)) {
      goto LABEL_45;
    }
  }
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
  return result;
}

uint64_t sub_10017C5D8(int a1, void *aBlock, uint64_t a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v3[4] = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  void v3[5] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_10017C6B8;
  return PeerDiscovery.startListening(_:)();
}

uint64_t sub_10017C6B8()
{
  sub_1000112E8();
  sub_100011168();
  uint64_t v2 = *(void (***)(void))(v1 + 24);
  uint64_t v3 = *v0;
  sub_100010D94();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  v2[2](v2);
  _Block_release(v2);
  sub_1000112AC();
  return v5();
}

uint64_t sub_10017C804(uint64_t a1, int a2, void *aBlock)
{
  uint64_t v4 = _Block_copy(aBlock);
  sub_100018350();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = a1;
  swift_retain();
  uint64_t v6 = sub_100010F54();

  return sub_10000D83C(v6, v7);
}

uint64_t sub_10017C86C(const void *a1, uint64_t a2)
{
  _DWORD v2[2] = a2;
  v2[3] = _Block_copy(a1);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[4] = v3;
  void *v3 = v2;
  v3[1] = sub_100186FC0;
  return PeerDiscovery.stopListening()();
}

uint64_t PeerDiscovery.sendDataToParticipant(_:deviceID:data:)()
{
  sub_100010DA4();
  v1[15] = v2;
  uint8_t v1[16] = v0;
  v1[13] = v3;
  v1[14] = v4;
  v1[11] = v5;
  v1[12] = v6;
  v1[10] = v7;
  uint64_t v8 = type metadata accessor for Logger();
  v1[17] = v8;
  sub_1000111CC(v8);
  v1[18] = v9;
  v1[19] = sub_100186FD4();
  v1[20] = swift_task_alloc();
  sub_100186FC8();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_10017C9B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26)
{
  sub_1000184F4();
  a25 = v27;
  a26 = v28;
  sub_1001871B4();
  a24 = v26;
  uint64_t v29 = v26[16];
  uint64_t v30 = v26[12];
  uint64_t v31 = v26[13];
  sub_1001872B8();
  uint64_t v32 = *(void *)(v29 + 184);
  swift_bridgeObjectRetain();
  uint64_t v33 = sub_100169998(v30, v31, v32);
  swift_endAccess();
  swift_bridgeObjectRelease();
  uint64_t v81 = v26 + 9;
  if (v33) {
    goto LABEL_3;
  }
  uint64_t v34 = v26[16];
  uint64_t v35 = v26[12];
  uint64_t v36 = v26[13];
  sub_1001872B8();
  uint64_t v37 = *(void *)(v34 + 176);
  swift_bridgeObjectRetain();
  uint64_t v33 = sub_100169998(v35, v36, v37);
  swift_endAccess();
  swift_bridgeObjectRelease();
  if (v33)
  {
LABEL_3:
    uint64_t v38 = v26[10];
    v26[21] = v33;
    uint64_t v40 = v26[12];
    uint64_t v39 = (void *)v26[13];
    int64_t v41 = (void *)v26[11];
    os_log_type_t v42 = static os_log_type_t.info.getter();
    sub_100011330();
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    a14 = 0xD000000000000018;
    a15 = 0x80000001002B0350;
    v43._uint64_t countAndFlagsBits = v38;
    v43._object = v41;
    String.append(_:)(v43);
    sub_100017E24();
    v44._uint64_t countAndFlagsBits = v40;
    v44._object = v39;
    String.append(_:)(v44);
    uint64_t v46 = a14;
    unint64_t v45 = a15;
    static GKLog.match.getter();
    sub_100187634();
    uint64_t v47 = Logger.logObject.getter();
    if (os_log_type_enabled(v47, v42))
    {
      uint64_t v48 = (_DWORD *)sub_100016FF0();
      a14 = sub_100011BBC();
      _DWORD *v48 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v49 = sub_100174CE4(v46, v45, &a14);
      sub_100017550(v49, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_10018764C();
      sub_100010F60((void *)&_mh_execute_header, v47, v42, "Nearby - %s");
      sub_1001871EC();
      sub_100010D7C();
      sub_100010D7C();
    }
    else
    {
      sub_10018761C();
    }

    sub_10018757C();
    v50();
    swift_bridgeObjectRelease();
    type metadata accessor for NWProtocolFramer.Message();
    uint64_t v51 = sub_10018CA08();
    v26[22] = v51;
    sub_10000D938(&qword_100326738);
    uint64_t v52 = sub_10001715C();
    *(_OWORD *)(v52 + 16) = xmmword_10024F840;
    *(void *)(v52 + 32) = v51;
    a14 = v52;
    specialized Array._endMutation()();
    type metadata accessor for NWConnection.ContentContext();
    swift_allocObject();
    swift_retain();
    v26[23] = NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)();
    unint64_t v53 = (void *)swift_task_alloc();
    v26[24] = v53;
    void *v53 = v26;
    v53[1] = sub_10017CF28;
    sub_100017B64(v26[14]);
    sub_100011220();
    return sub_1001A57B0();
  }
  else
  {
    uint64_t v56 = v26[19];
    uint64_t v58 = v26[10];
    uint64_t v57 = (void *)v26[11];
    static os_log_type_t.debug.getter();
    sub_100011330();
    _StringGuts.grow(_:)(55);
    sub_100010A64();
    v59._uint64_t countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v59);
    v60._uint64_t countAndFlagsBits = sub_100018344();
    String.append(_:)(v60);
    v61._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
    v61._object = (void *)0x80000001002B0330;
    String.append(_:)(v61);
    v62._uint64_t countAndFlagsBits = v58;
    v62._object = v57;
    String.append(_:)(v62);
    uint64_t v64 = a14;
    unint64_t v63 = a15;
    static GKLog.match.getter();
    sub_100017DA4();
    uint64_t v65 = Logger.logObject.getter();
    BOOL v66 = sub_100017200(v65);
    uint64_t v67 = v26[18];
    if (v66)
    {
      a10 = v26 + 8;
      a13 = v26[17];
      a11 = v26[19];
      uint64_t v68 = (_DWORD *)sub_100016FF0();
      a14 = sub_100011BBC();
      *uint64_t v68 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v69 = sub_100174CE4(v64, v63, &a14);
      sub_100017550(v69, v26 + 8);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100017D30();
      sub_100010F60((void *)&_mh_execute_header, v56, (os_log_type_t)v57, "Nearby - %s");
      sub_1000172D0();
      sub_100010D7C();
      sub_100010D7C();

      (*(void (**)(uint64_t, uint64_t))(v67 + 8))(a11, a13);
    }
    else
    {
      sub_100017E0C();

      uint64_t v70 = sub_1001877B0();
      v72(v70, v71);
    }
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100011220();
    return v75(v73, v74, v75, v76, v77, v78, v79, v80, a9, a10, a11, v81, a13, a14, a15, a16, a17, a18);
  }
}

uint64_t sub_10017CF28()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  swift_task_dealloc();
  sub_100186FC8();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10017D004()
{
  sub_100010DA4();
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_10017D130(int a1, int a2, void *a3, void *aBlock, uint64_t a5)
{
  v5[2] = a5;
  v5[3] = _Block_copy(aBlock);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5[4] = v7;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5[5] = v8;
  id v9 = a3;
  swift_retain();
  uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  v5[6] = v10;
  v5[7] = v12;
  uint64_t v13 = (void *)swift_task_alloc();
  v5[8] = v13;
  *uint64_t v13 = v5;
  v13[1] = sub_10017D25C;
  return PeerDiscovery.sendDataToParticipant(_:deviceID:data:)();
}

uint64_t sub_10017D25C(uint64_t a1)
{
  sub_100011168();
  uint64_t v4 = v3;
  sub_1001875B4();
  *uint64_t v5 = v4;
  unint64_t v7 = *(void *)(v6 + 56);
  uint64_t v8 = *(void *)(v6 + 48);
  uint64_t v9 = *v1;
  sub_100010D94();
  *uint64_t v10 = v9;
  swift_task_dealloc();
  sub_100169274(v8, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  if (a1)
  {
    uint64_t v11 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(void (***)(void, void))(v4 + 24);
  ((void (**)(void, void *))v12)[2](v12, v11);

  _Block_release(v12);
  sub_1000112AC();
  return v13();
}

void PeerDiscovery.__allocating_init()()
{
}

void PeerDiscovery.init()()
{
}

uint64_t PeerDiscovery.deinit()
{
  sub_10016835C(v0 + 112);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_100169274(*(void *)(v0 + 152), *(void *)(v0 + 160));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t PeerDiscovery.__deallocating_deinit()
{
  PeerDiscovery.deinit();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t PeerDiscovery.unownedExecutor.getter()
{
  return v0;
}

uint64_t sub_10017D52C()
{
  return PeerDiscovery.unownedExecutor.getter();
}

uint64_t sub_10017D548@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v71 = *(void *)(v2 - 8);
  uint64_t v72 = v2;
  uint64_t v4 = __chkstk_darwin(v2, v3);
  uint64_t v6 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  uint64_t v70 = (void (*)(char *, uint64_t))((char *)&v64 - v8);
  uint64_t v9 = type metadata accessor for NWTXTRecord();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for NWBrowser.Result.Metadata();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v17 = __chkstk_darwin(v14, v16);
  uint64_t v19 = (char *)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v20);
  unint64_t v22 = (char *)&v64 - v21;
  NWBrowser.Result.metadata.getter();
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v19, v22, v14);
  if ((*(unsigned int (**)(char *, uint64_t))(v15 + 88))(v19, v14) != enum case for NWBrowser.Result.Metadata.bonjour(_:))
  {
    uint64_t v49 = *(void (**)(char *, uint64_t))(v15 + 8);
    v49(v19, v14);
    os_log_type_t v50 = static os_log_type_t.info.getter();
    static GKLog.match.getter();
    uint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = v50;
    if (os_log_type_enabled(v51, v50))
    {
      uint64_t v70 = v49;
      unint64_t v53 = (uint8_t *)swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      uint64_t v69 = v22;
      uint64_t v73 = v54;
      *(_DWORD *)unint64_t v53 = 136315138;
      uint64_t v75 = sub_100174CE4(0xD000000000000021, 0x80000001002B0C80, &v73);
      uint64_t v49 = v70;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Nearby - %s", v53, 0xCu);
      swift_arrayDestroy();
      unint64_t v22 = v69;
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v71 + 8))(v6, v72);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v49)(v22, v14);
    goto LABEL_29;
  }
  (*(void (**)(char *, uint64_t))(v15 + 96))(v19, v14);
  uint64_t v68 = v10;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v19, v9);
  uint64_t v23 = NWTXTRecord.subscript.getter();
  if (!v24)
  {
    os_log_type_t v55 = static os_log_type_t.info.getter();
    uint64_t v73 = 0;
    unint64_t v74 = 0xE000000000000000;
    _StringGuts.grow(_:)(34);
    v56._object = (void *)0x80000001002B0CB0;
    v56._uint64_t countAndFlagsBits = 0xD000000000000020;
    String.append(_:)(v56);
    BOOL v66 = v13;
    uint64_t v67 = v9;
    _print_unlocked<A, B>(_:_:)();
    uint64_t v57 = v73;
    unint64_t v58 = v74;
    Swift::String v59 = (char *)v70;
    static GKLog.match.getter();
    swift_bridgeObjectRetain_n();
    Swift::String v60 = Logger.logObject.getter();
    os_log_type_t v61 = v55;
    if (os_log_type_enabled(v60, v55))
    {
      uint64_t v69 = v22;
      Swift::String v62 = (uint8_t *)swift_slowAlloc();
      uint64_t v63 = swift_slowAlloc();
      uint64_t v65 = v14;
      uint64_t v73 = v63;
      *(_DWORD *)Swift::String v62 = 136315138;
      uint64_t v64 = v62 + 4;
      swift_bridgeObjectRetain();
      uint64_t v75 = sub_100174CE4(v57, v58, &v73);
      unint64_t v22 = v69;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "Nearby - %s", v62, 0xCu);
      swift_arrayDestroy();
      uint64_t v14 = v65;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v71 + 8))(v59, v72);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v68 + 8))(v66, v67);
    goto LABEL_24;
  }
  uint64_t v25 = v24;
  uint64_t v72 = v23;
  id v26 = [self currentDevice];
  if (v26)
  {
    uint64_t v27 = sub_1001BDCF0(v26);
    if (!v28)
    {
LABEL_10:
      uint64_t v69 = v22;
      uint64_t v31 = NWTXTRecord.subscript.getter();
      if (v32)
      {
        uint64_t v33 = v31;
        uint64_t v34 = v32;
        uint64_t v67 = v9;
        uint64_t v35 = v13;
        uint64_t v36 = NWTXTRecord.subscript.getter();
        if (v37)
        {
          uint64_t v38 = v36;
          uint64_t v39 = v37;
          uint64_t v65 = v14;
          BOOL v66 = v35;
          uint64_t v40 = NWTXTRecord.subscript.getter();
          if (v41)
          {
            uint64_t v42 = v40;
            uint64_t v43 = v41;
            uint64_t v44 = NWTXTRecord.subscript.getter();
            uint64_t v71 = v15;
            uint64_t v46 = v45;
            (*(void (**)(char *, uint64_t))(v68 + 8))(v66, v67);
            uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v69, v65);
            if (v46)
            {
              uint64_t v48 = v72;
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t result = swift_bridgeObjectRelease();
              uint64_t v48 = 0;
              uint64_t v25 = 0;
              uint64_t v33 = 0;
              uint64_t v34 = 0;
              uint64_t v38 = 0;
              uint64_t v39 = 0;
              uint64_t v42 = 0;
              uint64_t v43 = 0;
              uint64_t v44 = 0;
            }
            goto LABEL_30;
          }
          uint64_t v35 = v66;
          swift_bridgeObjectRelease();
          uint64_t v14 = v65;
        }
        uint64_t v9 = v67;
        swift_bridgeObjectRelease();
        uint64_t v13 = v35;
      }
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v68 + 8))(v13, v9);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v69, v14);
LABEL_29:
      uint64_t v48 = 0;
      uint64_t v25 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      uint64_t v44 = 0;
      uint64_t v46 = 0;
LABEL_30:
      *a1 = v48;
      a1[1] = v25;
      a1[2] = v33;
      a1[3] = v34;
      a1[4] = v38;
      a1[5] = v39;
      a1[6] = v42;
      a1[7] = v43;
      a1[8] = v44;
      a1[9] = v46;
      return result;
    }
    if (v72 == v27 && v25 == v28)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v30 & 1) == 0) {
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v68 + 8))(v13, v9);
LABEL_24:
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v22, v14);
    goto LABEL_29;
  }
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_10017DD9C(uint64_t a1)
{
  v2[54] = a1;
  v2[55] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[56] = v3;
  v2[57] = *(void *)(v3 - 8);
  v2[58] = swift_task_alloc();
  v2[59] = swift_task_alloc();
  type metadata accessor for NWEndpoint();
  v2[60] = swift_task_alloc();
  return _swift_task_switch(sub_10017DE98, v1, 0);
}

uint64_t sub_10017DE98()
{
  uint64_t v57 = v0;
  sub_10017D548(v0 + 22);
  sub_100186A5C((uint64_t)(v0 + 22), (uint64_t)(v0 + 12), &qword_100326848);
  if (!v0[13])
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000112AC();
    sub_100011C48();
    __asm { BRAA            X1, X16 }
  }
  os_log_type_t v1 = (_BYTE)v0 + 80;
  uint64_t v2 = v0[55];
  memcpy(v0 + 2, v0 + 12, 0x50uLL);
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  swift_bridgeObjectRetain();
  NWBrowser.Result.endpoint.getter();
  type metadata accessor for PeerConnection();
  uint64_t v5 = swift_allocObject();
  swift_retain();
  sub_100186CB0(v0 + 22, (void (*)(void, void, void, void, void, void, void, void, void, void))sub_10018697C);
  uint64_t v6 = sub_100187368();
  v0[61] = sub_100186AB0(v6, v7, v2, v5);
  sub_1001872B8();
  uint64_t v8 = *(void *)(v2 + 184);
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_100169998(v3, v4, v8);
  swift_bridgeObjectRelease();
  if (v9)
  {
    swift_endAccess();
    static os_log_type_t.debug.getter();
    sub_10018772C();
    uint64_t v55 = 0;
    unint64_t v56 = v10;
    _StringGuts.grow(_:)(109);
    v11._object = (void *)0x80000001002B0C10;
    v11._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v11);
    swift_bridgeObjectRetain();
    v12._uint64_t countAndFlagsBits = sub_10018782C();
    String.append(_:)(v12);
    sub_100186CB0(v0 + 22, (void (*)(void, void, void, void, void, void, void, void, void, void))sub_1001869EC);
    swift_bridgeObjectRelease();
    v13._uint64_t countAndFlagsBits = 0x656369766564202CLL;
    v13._object = (void *)0xEB000000005B4449;
    String.append(_:)(v13);
    uint64_t v14 = *(void *)(v9 + 48);
    if (v14)
    {
      v0[50] = *(void *)(v9 + 40);
      v0[51] = v14;
      swift_bridgeObjectRetain();
      uint64_t v15 = String.init<A>(reflecting:)();
      unint64_t v17 = v16;
    }
    else
    {
      unint64_t v17 = 0xE300000000000000;
      uint64_t v15 = 7104878;
    }
    unint64_t v34 = v17;
    String.append(_:)(*(Swift::String *)&v15);
    swift_bridgeObjectRelease();
    v35._uint64_t countAndFlagsBits = 0xD000000000000030;
    v35._object = (void *)0x80000001002B0C40;
    String.append(_:)(v35);
    swift_bridgeObjectRetain();
    v36._uint64_t countAndFlagsBits = Dictionary.description.getter();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v37 = v55;
    unint64_t v38 = v56;
    static GKLog.match.getter();
    swift_bridgeObjectRetain_n();
    uint64_t v39 = Logger.logObject.getter();
    BOOL v40 = os_log_type_enabled(v39, (os_log_type_t)((_BYTE)v0 + 16));
    uint64_t v42 = v0[56];
    uint64_t v41 = v0[57];
    if (v40)
    {
      uint64_t v54 = v0[59];
      uint64_t v43 = (_DWORD *)sub_100016FF0();
      uint64_t v55 = sub_100011BBC();
      *uint64_t v43 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v44 = sub_100174CE4(v37, v38, &v55);
      sub_100017550(v44, v0 + 53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      sub_100010F60((void *)&_mh_execute_header, v39, (os_log_type_t)((_BYTE)v0 + 16), "Nearby - %s");
      sub_100187600();
      sub_100010D7C();
      sub_100010D7C();

      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v54, v42);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      uint64_t v45 = sub_10018756C();
      v47(v45, v46);
    }
    swift_bridgeObjectRelease();
    sub_1001A5390();
    swift_release();
  }
  else
  {
    swift_endAccess();
    static os_log_type_t.info.getter();
    sub_1001875C4();
    uint64_t v55 = 0;
    unint64_t v56 = v20;
    _StringGuts.grow(_:)(49);
    unint64_t v21 = v56;
    v0[48] = 0;
    v0[49] = v21;
    sub_100010A64();
    String.append(_:)(v22);
    uint64_t v23 = (void *)sub_100187368();
    memcpy(v23, v24, 0x50uLL);
    _print_unlocked<A, B>(_:_:)();
    sub_100186CB0(v0 + 22, (void (*)(void, void, void, void, void, void, void, void, void, void))sub_1001869EC);
    v25._uint64_t countAndFlagsBits = 46;
    v25._object = (void *)0xE100000000000000;
    String.append(_:)(v25);
    uint64_t v26 = v0[48];
    unint64_t v27 = v0[49];
    static GKLog.match.getter();
    swift_bridgeObjectRetain_n();
    uint64_t v28 = Logger.logObject.getter();
    BOOL v29 = os_log_type_enabled(v28, v1);
    uint64_t v30 = v0[57];
    uint64_t v31 = v0[58];
    uint64_t v32 = v0[56];
    if (v29)
    {
      uint64_t v33 = (_DWORD *)sub_100016FF0();
      uint64_t v55 = sub_100011BBC();
      _DWORD *v33 = 136315138;
      swift_bridgeObjectRetain();
      v0[52] = sub_100174CE4(v26, v27, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      sub_1001872F0((void *)&_mh_execute_header, v28, v1, "Nearby - %s");
      sub_10001698C();
      sub_100010D7C();
      sub_100010D7C();

      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v31, v32);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      uint64_t v48 = sub_10018756C();
      v50(v48, v49);
    }
    swift_bridgeObjectRelease();
  }
  sub_10001749C();
  swift_retain();
  sub_1001DD2A8();
  swift_endAccess();
  swift_bridgeObjectRelease();
  uint64_t v51 = (void *)swift_task_alloc();
  v0[62] = (uint64_t)v51;
  *uint64_t v51 = v0;
  v51[1] = sub_10017E544;
  sub_100011C48();
  return sub_1001A5DB0();
}

uint64_t sub_10017E544()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  swift_task_dealloc();
  sub_100186FC8();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10017E620()
{
  sub_100010DA4();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000112AC();
  return v0();
}

uint64_t sub_10017E694(uint64_t a1)
{
  v2[16] = a1;
  v2[17] = v1;
  uint64_t v3 = type metadata accessor for NWBrowser.Result.Metadata();
  v2[18] = v3;
  v2[19] = *(void *)(v3 - 8);
  v2[20] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[21] = v4;
  v2[22] = *(void *)(v4 - 8);
  v2[23] = swift_task_alloc();
  uint8_t v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  return _swift_task_switch(sub_10017E7CC, v1, 0);
}

uint64_t sub_10017E7CC()
{
  unint64_t v56 = v0;
  os_log_type_t v1 = static os_log_type_t.info.getter();
  uint64_t v54 = 0;
  unint64_t v55 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  v0[11] = 0;
  v0[12] = 0xE000000000000000;
  v2._uint64_t countAndFlagsBits = 0xD000000000000019;
  v2._object = (void *)0x80000001002B0CE0;
  String.append(_:)(v2);
  type metadata accessor for NWBrowser.Result();
  _print_unlocked<A, B>(_:_:)();
  uint64_t v3 = v0[11];
  unint64_t v4 = v0[12];
  static GKLog.match.getter();
  sub_100187634();
  uint64_t v5 = Logger.logObject.getter();
  if (os_log_type_enabled(v5, v1))
  {
    uint64_t v52 = v0[22];
    uint64_t v6 = (_DWORD *)sub_100016FF0();
    uint64_t v54 = sub_100011BBC();
    *uint64_t v6 = 136315138;
    swift_bridgeObjectRetain();
    v0[15] = sub_100174CE4(v3, v4, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_10018764C();
    sub_100187268((void *)&_mh_execute_header, v5, v1, "Nearby - %s");
    sub_100186FF0();
    sub_100010D7C();
    sub_100010D7C();

    uint64_t v7 = *(void (**)(void))(v52 + 8);
    sub_100010F20();
    v7();
  }
  else
  {
    uint64_t v8 = v0[25];
    uint64_t v10 = v0[21];
    uint64_t v9 = v0[22];
    sub_10018761C();

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  swift_bridgeObjectRelease();
  uint64_t v11 = v0[16];
  Swift::String v12 = (uint64_t *)(v0[17] + 184);
  sub_10018774C();
  uint64_t v13 = *v12;
  uint64_t v14 = swift_task_alloc();
  *(void *)(v14 + 16) = v11;
  swift_bridgeObjectRetain();
  sub_10017F2FC((uint64_t (*)(void *))sub_100186D04, v14, v13);
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  if (v16)
  {
    if (v18[6])
    {
      uint64_t v20 = v18[13];
      uint64_t v19 = (void *)v18[14];
      uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
      swift_bridgeObjectRetain();
      if (Strong)
      {
        NSString v22 = String._bridgeToObjectiveC()();
        uint64_t v18 = String._bridgeToObjectiveC()();
        [Strong playerLost:v22 deviceID:v18];
        swift_unknownObjectRelease();
      }
      static os_log_type_t.info.getter();
      sub_1001875C4();
      uint64_t v54 = 0;
      unint64_t v55 = v23;
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      uint64_t v54 = 0xD00000000000001FLL;
      unint64_t v55 = 0x80000001002B0D00;
      v24._uint64_t countAndFlagsBits = v20;
      v24._object = v19;
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      v25._uint64_t countAndFlagsBits = 46;
      v25._object = (void *)0xE100000000000000;
      String.append(_:)(v25);
      uint64_t v26 = v54;
      unint64_t v27 = v55;
      static GKLog.match.getter();
      swift_bridgeObjectRetain_n();
      uint64_t v28 = Logger.logObject.getter();
      if (os_log_type_enabled(v28, (os_log_type_t)v18))
      {
        uint64_t v51 = v26;
        BOOL v29 = (_DWORD *)sub_100016FF0();
        uint64_t v54 = sub_100011BBC();
        *BOOL v29 = 136315138;
        swift_bridgeObjectRetain();
        v0[14] = sub_100174CE4(v51, v27, &v54);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        sub_1001872F0((void *)&_mh_execute_header, v28, (os_log_type_t)v18, "Nearby - %s");
        sub_1001871EC();
        sub_100010D7C();
        sub_100010D7C();
      }
      else
      {
        swift_bridgeObjectRelease_n();

        sub_1001875F4();
      }
      sub_100010F20();
      v30();
      swift_bridgeObjectRelease();
      sub_1001872B8();
      uint64_t v31 = *v12;
      swift_bridgeObjectRetain();
      uint64_t v32 = sub_100187368();
      uint64_t v34 = sub_100169998(v32, v33, v31);
      swift_bridgeObjectRelease();
      if (v34)
      {
        uint64_t v35 = v0[19];
        uint64_t v36 = v0[20];
        uint64_t v53 = v0[18];
        swift_endAccess();
        sub_1001A5390();
        sub_1001877A4();
        sub_10001749C();
        uint64_t v37 = sub_100187368();
        sub_10019BE6C(v37);
        swift_endAccess();
        swift_bridgeObjectRelease();
        swift_release();
        static os_log_type_t.info.getter();
        sub_10018772C();
        uint64_t v54 = 0;
        unint64_t v55 = v38;
        _StringGuts.grow(_:)(26);
        swift_bridgeObjectRelease();
        uint64_t v54 = 0xD000000000000018;
        unint64_t v55 = 0x80000001002B0D20;
        NWBrowser.Result.metadata.getter();
        uint64_t v39 = NWBrowser.Result.Metadata.debugDescription.getter();
        uint64_t v41 = v40;
        (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v36, v53);
        v42._uint64_t countAndFlagsBits = v39;
        v42._object = v41;
        String.append(_:)(v42);
        swift_bridgeObjectRelease();
        uint64_t v44 = v54;
        unint64_t v43 = v55;
        static GKLog.match.getter();
        swift_bridgeObjectRetain_n();
        uint64_t v45 = Logger.logObject.getter();
        if (os_log_type_enabled(v45, (os_log_type_t)v16))
        {
          uint64_t v46 = (_DWORD *)sub_100016FF0();
          uint64_t v54 = sub_100011BBC();
          *uint64_t v46 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v47 = sub_100174CE4(v44, v43, &v54);
          sub_100187514(v47);
          swift_bridgeObjectRelease_n();
          sub_100017C8C((void *)&_mh_execute_header, v45, (os_log_type_t)v16, "Nearby - %s");
          sub_1000172D0();
          sub_100010D7C();
          sub_100010D7C();
        }
        else
        {
          swift_bridgeObjectRelease_n();

          sub_1001875F4();
        }
        sub_100010F20();
        v48();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_19;
      }
      swift_endAccess();
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
LABEL_19:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000112AC();
  return v49();
}

uint64_t sub_10017EF28(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NWEndpoint();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v31 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000D938(&qword_100326850);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000D938(&qword_100326858);
  uint64_t v12 = __chkstk_darwin(v10 - 8, v11);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v12, v15);
  uint64_t v18 = (char *)&v30 - v17;
  __chkstk_darwin(v16, v19);
  unint64_t v21 = (char *)&v30 - v20;
  if (*(void *)(*(void *)(a1 + 16) + 32))
  {
    swift_retain();
    NWConnection.endpoint.getter();
    swift_release();
    uint64_t v22 = 0;
  }
  else
  {
    uint64_t v22 = 1;
  }
  sub_10000D97C((uint64_t)v21, v22, 1, v2);
  NWBrowser.Result.endpoint.getter();
  sub_10000D97C((uint64_t)v18, 0, 1, v2);
  uint64_t v23 = (uint64_t)&v9[*(int *)(v6 + 48)];
  sub_100186D24((uint64_t)v21, (uint64_t)v9);
  sub_100186D24((uint64_t)v18, v23);
  if (sub_10000DB14((uint64_t)v9, 1, v2) == 1)
  {
    Swift::String v24 = &qword_100326858;
    sub_100018600((uint64_t)v18, &qword_100326858);
    sub_100018600((uint64_t)v21, &qword_100326858);
    if (sub_10000DB14(v23, 1, v2) == 1)
    {
      char v25 = -1;
    }
    else
    {
      Swift::String v24 = &qword_100326850;
      char v25 = 0;
    }
  }
  else
  {
    uint64_t v26 = v14;
    sub_100186D24((uint64_t)v9, (uint64_t)v14);
    if (sub_10000DB14(v23, 1, v2) == 1)
    {
      sub_100018600((uint64_t)v18, &qword_100326858);
      sub_100018600((uint64_t)v21, &qword_100326858);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v14, v2);
      char v25 = 0;
      Swift::String v24 = &qword_100326850;
    }
    else
    {
      unint64_t v27 = v31;
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v31, v23, v2);
      sub_100186D8C(&qword_100326860, 255, (void (*)(uint64_t))&type metadata accessor for NWEndpoint);
      uint64_t v30 = v26;
      char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v28 = *(void (**)(char *, uint64_t))(v3 + 8);
      v28(v27, v2);
      Swift::String v24 = &qword_100326858;
      sub_100018600((uint64_t)v18, &qword_100326858);
      sub_100018600((uint64_t)v21, &qword_100326858);
      v28(v30, v2);
    }
  }
  sub_100018600((uint64_t)v9, v24);
  return v25 & 1;
}

uint64_t sub_10017F2FC(uint64_t (*a1)(void *), uint64_t a2, uint64_t a3)
{
  sub_100018B64(a3, v22);
  uint64_t v5 = v22[0];
  uint64_t v20 = v22[1];
  int64_t v6 = v22[3];
  unint64_t v7 = v22[4];
  int64_t v23 = (unint64_t)(v22[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  if (!v7) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  unint64_t v10 = v9 | (v6 << 6);
  while (1)
  {
    uint64_t v14 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v10);
    uint64_t v16 = *v14;
    uint64_t v15 = v14[1];
    uint64_t v17 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
    v21[0] = *v14;
    v21[1] = v15;
    void v21[2] = v17;
    swift_bridgeObjectRetain();
    swift_retain();
    char v18 = a1(v21);
    if (v3)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return v16;
    }
    if (v18)
    {
      swift_release();
      return v16;
    }
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v11 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      break;
    }
    if (v11 >= v23) {
      goto LABEL_26;
    }
    unint64_t v12 = *(void *)(v20 + 8 * v11);
    if (!v12)
    {
      int64_t v13 = v6 + 2;
      if (v6 + 2 >= v23) {
        goto LABEL_26;
      }
      unint64_t v12 = *(void *)(v20 + 8 * v13);
      if (v12) {
        goto LABEL_12;
      }
      int64_t v13 = v6 + 3;
      if (v6 + 3 >= v23) {
        goto LABEL_26;
      }
      unint64_t v12 = *(void *)(v20 + 8 * v13);
      if (v12) {
        goto LABEL_12;
      }
      int64_t v13 = v6 + 4;
      if (v6 + 4 >= v23) {
        goto LABEL_26;
      }
      unint64_t v12 = *(void *)(v20 + 8 * v13);
      if (v12)
      {
LABEL_12:
        int64_t v11 = v13;
        goto LABEL_13;
      }
      int64_t v11 = v6 + 5;
      if (v6 + 5 >= v23) {
        goto LABEL_26;
      }
      unint64_t v12 = *(void *)(v20 + 8 * v11);
      if (!v12)
      {
        int64_t v19 = v6 + 6;
        while (v19 < v23)
        {
          unint64_t v12 = *(void *)(v20 + 8 * v19++);
          if (v12)
          {
            int64_t v11 = v19 - 1;
            goto LABEL_13;
          }
        }
LABEL_26:
        swift_release();
        return 0;
      }
    }
LABEL_13:
    unint64_t v7 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v11 << 6);
    int64_t v6 = v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_10017F51C()
{
  sub_100010DA4();
  v1[9] = v2;
  v1[10] = v0;
  uint8_t v1[8] = v3;
  uint64_t v4 = type metadata accessor for NWBrowser.Result();
  v1[11] = v4;
  sub_1000111CC(v4);
  v1[12] = v5;
  v1[13] = sub_100186FD4();
  v1[14] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for NWBrowser.Result.Change();
  v1[15] = v6;
  sub_1000111CC(v6);
  uint8_t v1[16] = v7;
  v1[17] = sub_100186FD4();
  v1[18] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v1[19] = v8;
  sub_1000111CC(v8);
  v1[20] = v9;
  v1[21] = sub_100186FD4();
  v1[22] = swift_task_alloc();
  v1[23] = swift_task_alloc();
  sub_100186FC8();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_10017F63C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(void), uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  sub_100187538();
  a27 = v29;
  a28 = v30;
  a26 = v28;
  uint64_t v135 = v28 + 48;
  uint64_t v31 = *(void **)(v28 + 72);
  static os_log_type_t.debug.getter();
  a15 = 0;
  a16 = 0xE000000000000000;
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  a15 = 0xD00000000000001BLL;
  a16 = 0x80000001002B0B10;
  *(void *)(v28 + 192) = sub_100186D8C(&qword_100326818, 255, (void (*)(uint64_t))&type metadata accessor for NWBrowser.Result);
  sub_100018344();
  v32._uint64_t countAndFlagsBits = Set.description.getter();
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  v33._uint64_t countAndFlagsBits = 0x65676E616863202CLL;
  v33._object = (void *)0xEB00000000203A73;
  String.append(_:)(v33);
  v136 = v31;
  if (v31)
  {
    *(void *)(v28 + 56) = *(void *)(v28 + 72);
    swift_bridgeObjectRetain();
    sub_10000D938(&qword_100326840);
    uint64_t v34 = String.init<A>(reflecting:)();
    unint64_t v36 = v35;
  }
  else
  {
    unint64_t v36 = 0xE300000000000000;
    uint64_t v34 = 7104878;
  }
  unint64_t v37 = v36;
  String.append(_:)(*(Swift::String *)&v34);
  swift_bridgeObjectRelease();
  uint64_t v39 = a15;
  unint64_t v38 = a16;
  static GKLog.match.getter();
  sub_100187814();
  BOOL v40 = Logger.logObject.getter();
  BOOL v41 = sub_1001876B8(v40);
  uint64_t v42 = *(void *)(v28 + 184);
  uint64_t v43 = *(void *)(v28 + 152);
  uint64_t v44 = *(void *)(v28 + 160);
  if (v41)
  {
    a12 = *(void *)(v28 + 184);
    uint64_t v45 = (_DWORD *)sub_100016FF0();
    uint64_t v46 = sub_100011BBC();
    a11 = v43;
    LOBYTE(v43) = v46;
    a15 = v46;
    *uint64_t v45 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v28 + 48) = sub_100174CE4(v39, v38, &a15);
    sub_100187454();
    sub_100187850();
    sub_1001872F0((void *)&_mh_execute_header, v40, (os_log_type_t)v31, "Nearby - %s");
    sub_1001871EC();
    sub_100010D7C();
    sub_100010D7C();

    uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
    v47(a12, a11);
  }
  else
  {
    sub_1001877FC();

    uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
    v47(v42, v43);
  }
  swift_bridgeObjectRelease();
  *(void *)(v28 + 200) = v47;
  if (!v31)
  {
    static os_log_type_t.info.getter();
    sub_100187280();
    uint64_t v73 = Logger.logObject.getter();
    BOOL v74 = os_log_type_enabled(v73, (os_log_type_t)v43);
    uint64_t v75 = *(void *)(v28 + 160);
    uint64_t v76 = *(void *)(v28 + 152);
    if (v74)
    {
      uint64_t v135 = *(void *)(v28 + 168);
      v136 = *(void **)(v28 + 152);
      uint64_t v77 = (_DWORD *)sub_100016FF0();
      a15 = sub_100011BBC();
      a12 = v75;
      *uint64_t v77 = 136315138;
      *(void *)(v28 + 32) = sub_100174CE4(0xD00000000000002FLL, 0x80000001002B0B30, &a15);
      sub_10018782C();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100187178((void *)&_mh_execute_header, v73, (os_log_type_t)v43, "Nearby - %s");
      sub_100186FF0();
      sub_100010D7C();
      sub_100010D7C();

      uint64_t v78 = v135;
      uint64_t v79 = v76;
    }
    else
    {

      uint64_t v78 = sub_100017130();
    }
    v47(v78, v79);
    swift_retain();
    uint64_t v90 = sub_100010F54();
    sub_10017A20C(v90, v91);
    goto LABEL_38;
  }
  uint64_t v48 = *(void *)(v28 + 128);
  uint64_t v49 = *(void *)(v28 + 72);
  char v50 = *(unsigned char *)(v49 + 32);
  *(unsigned char *)(v28 + 268) = v50;
  uint64_t v51 = -1;
  uint64_t v52 = -1 << v50;
  if (-(-1 << v50) < 64) {
    uint64_t v51 = ~(-1 << -(char)(-1 << v50));
  }
  unint64_t v53 = v51 & *(void *)(v49 + 56);
  int v54 = enum case for NWBrowser.Result.Change.added(_:);
  *(_DWORD *)(v28 + 256) = enum case for NWBrowser.Result.Change.added(_:);
  *(_DWORD *)(v28 + 260) = enum case for NWBrowser.Result.Change.removed(_:);
  *(_DWORD *)(v28 + 264) = enum case for NWBrowser.Result.Change.changed(_:);
  unint64_t v55 = (void *)swift_bridgeObjectRetain();
  if (v53)
  {
    uint64_t v56 = 0;
    unint64_t v57 = __clz(__rbit64(v53));
    uint64_t v58 = (v53 - 1) & v53;
    goto LABEL_12;
  }
  unint64_t v88 = 63 - v52;
  if ((unint64_t)(63 - v52) <= 0x7F) {
    goto LABEL_37;
  }
  unint64_t v89 = v55[8];
  if (!v89)
  {
    if (v88 >= 0xC0)
    {
      unint64_t v89 = v55[9];
      if (v89)
      {
        uint64_t v56 = 2;
        goto LABEL_23;
      }
      if (v88 >= 0x100)
      {
        unint64_t v89 = v55[10];
        if (v89)
        {
          uint64_t v56 = 3;
          goto LABEL_23;
        }
        if (v88 > 0x13F)
        {
          unint64_t v89 = v55[11];
          if (!v89)
          {
            unint64_t v133 = v88 >> 6;
            uint64_t v134 = 12;
            while (v134 - 7 < v133)
            {
              unint64_t v89 = v55[v134++];
              if (v89)
              {
                uint64_t v56 = v134 - 8;
                goto LABEL_23;
              }
            }
            goto LABEL_37;
          }
          uint64_t v56 = 4;
          goto LABEL_23;
        }
      }
    }
LABEL_37:
    swift_release();
LABEL_38:
    sub_1001871C0();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000112AC();
    sub_100018328();
    return v120(v119, v120, v121, v122, v123, v124, v125, v126, a9, a10, a11, a12, v135, v136, a15, a16, a17, a18, a19,
             a20);
  }
  uint64_t v56 = 1;
LABEL_23:
  uint64_t v58 = (v89 - 1) & v89;
  unint64_t v57 = __clz(__rbit64(v89)) + (v56 << 6);
LABEL_12:
  uint64_t v59 = v48 + 32;
  uint64_t v60 = v48 + 88;
  *(void *)(v28 + 208) = v56;
  *(void *)(v28 + 216) = v58;
  uint64_t v61 = *(void *)(v28 + 136);
  uint64_t v62 = *(void *)(v28 + 144);
  uint64_t v63 = *(void *)(v28 + 120);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v48 + 16))(v62, v55[6] + *(void *)(v48 + 72) * v57, v63);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 32))(v61, v62, v63);
  uint64_t v64 = sub_1001875F4();
  int v66 = v65(v64);
  if (v66 == v54)
  {
    v136 = (void *)(v28 + 40);
    uint64_t v67 = *(void *)(v28 + 136);
    uint64_t v68 = *(void *)(v28 + 112);
    uint64_t v70 = *(void *)(v28 + 88);
    uint64_t v69 = *(void *)(v28 + 96);
    uint64_t v71 = sub_10001840C();
    v72(v71);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 32))(v68, v67, v70);
  }
  else
  {
    if (v66 == *(_DWORD *)(v28 + 260))
    {
      uint64_t v80 = sub_10001840C();
      v81(v80);
      uint64_t v82 = sub_100187080();
      v83(v82);
      uint64_t v84 = (void *)swift_task_alloc();
      *(void *)(v28 + 248) = v84;
      *uint64_t v84 = v28;
      v84[1] = sub_100180684;
      sub_100187070(*(void *)(v28 + 104));
      sub_100018328();
      return sub_10017E694(v85);
    }
    uint64_t v92 = *(void *)(v28 + 136);
    if (v66 != *(_DWORD *)(v28 + 264))
    {
      swift_release();
      sub_10018757C();
      v127();
      goto LABEL_38;
    }
    v136 = (void *)(v28 + 40);
    uint64_t v93 = *(void *)(v28 + 112);
    uint64_t v94 = *(void *)(v28 + 88);
    uint64_t v95 = *(void *)(v28 + 96);
    (*(void (**)(uint64_t, void))(*(void *)(v28 + 128) + 96))(v92, *(void *)(v28 + 120));
    uint64_t v96 = sub_10000D938(&qword_100326828);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v95 + 32))(v93, v92 + *(int *)(v96 + 48), v94);
    type metadata accessor for NWBrowser.Result.Change.Flags();
    sub_1000180C4();
    sub_100011C3C();
    v97();
    uint64_t v59 = v95 + 8;
    uint64_t v98 = sub_1001877B0();
    v99(v98);
  }
  uint64_t v100 = *(void *)(v28 + 64);
  if (!*(void *)(v100 + 16)
    || (unint64_t v101 = sub_100187248() & ~(-1 << *(unsigned char *)(v100 + 32)),
        ((*(void *)(v100 + ((v101 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v101) & 1) == 0))
  {
LABEL_33:
    static os_log_type_t.info.getter();
    sub_10018772C();
    a15 = 0;
    a16 = v106;
    _StringGuts.grow(_:)(112);
    unint64_t v107 = a16;
    *(void *)(v28 + 16) = a15;
    *(void *)(v28 + 24) = v107;
    v108._uint64_t countAndFlagsBits = 0xD000000000000035;
    v108._object = (void *)0x80000001002B0B60;
    String.append(_:)(v108);
    _print_unlocked<A, B>(_:_:)();
    sub_1001877F0();
    sub_10018757C();
    v109();
    sub_100187390(0xD000000000000039, (uint64_t)", but result is not present in full results set. Ignoring");
    uint64_t v111 = *(void *)(v28 + 16);
    unint64_t v110 = *(void *)(v28 + 24);
    static GKLog.match.getter();
    sub_100187634();
    v112 = Logger.logObject.getter();
    BOOL v113 = os_log_type_enabled(v112, (os_log_type_t)v59);
    uint64_t v114 = *(void (**)(void))(v28 + 200);
    uint64_t v115 = *(void *)(v28 + 176);
    if (v113)
    {
      a11 = *(void *)(v28 + 152);
      a12 = *(void *)(v28 + 72);
      v116 = (_DWORD *)sub_100016FF0();
      a10 = v115;
      a15 = sub_100011BBC();
      a9 = v114;
      _DWORD *v116 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v117 = sub_100174CE4(v111, v110, &a15);
      sub_100017550(v117, v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_10018764C();
      sub_100010F60((void *)&_mh_execute_header, v112, (os_log_type_t)v59, "Nearby - %s");
      swift_arrayDestroy();
      sub_100010D7C();
      sub_100010D7C();

      sub_100010F20();
      v118();
    }
    else
    {
      sub_10018761C();

      sub_100010F20();
      v114();
    }
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  sub_1000175E4();
  while (1)
  {
    uint64_t v103 = *(void *)(v28 + 96);
    ((void (*)(void, unint64_t, void))(v28 + 40))(*(void *)(v28 + 104), *(void *)(v102 + 48) + v101 * v60, *(void *)(v28 + 88));
    sub_100186D8C(&qword_100326830, 255, (void (*)(uint64_t))&type metadata accessor for NWBrowser.Result);
    sub_100010F54();
    char v104 = dispatch thunk of static Equatable.== infix(_:_:)();
    *(void *)(v28 + 224) = *(void *)(v103 + 8);
    *(void *)(v28 + 232) = (v103 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    sub_10018735C();
    v105();
    if (v104) {
      break;
    }
    uint64_t v102 = *(void *)(v28 + 64);
    unint64_t v101 = (v101 + 1) & v59;
    if (((*(void *)(v102 + ((v101 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v101) & 1) == 0) {
      goto LABEL_33;
    }
  }
  uint64_t v128 = swift_task_alloc();
  uint64_t v129 = (void *)sub_100187918(v128);
  *uint64_t v129 = v130;
  v129[1] = sub_100180094;
  sub_100187070(*(void *)(v28 + 112));
  sub_100018328();
  return sub_10017DD9C(v131);
}

uint64_t sub_100180094()
{
  sub_100010F2C();
  sub_100011168();
  uint64_t v2 = (void (*)(uint64_t, uint64_t))v1[28];
  uint64_t v3 = v1[14];
  uint64_t v4 = v1[11];
  uint64_t v5 = v1[10];
  uint64_t v6 = *v0;
  sub_100010D94();
  *uint64_t v7 = v6;
  swift_task_dealloc();
  v2(v3, v4);
  return _swift_task_switch(sub_1001801E0, v5, 0);
}

void sub_1001801E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(void), uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_1000184F4();
  a25 = v34;
  a26 = v35;
  sub_1001871B4();
  a24 = v28;
  if (*(void *)(v28 + 216))
  {
    sub_100187324();
    goto LABEL_3;
  }
  if (__OFADD__(*(void *)(v28 + 208), 1))
  {
    __break(1u);
    goto LABEL_45;
  }
  uint64_t v70 = sub_100187308();
  if (v73 == v74) {
    goto LABEL_23;
  }
  uint64_t v75 = v70 + 56;
  if (!*(void *)(v70 + 56 + 8 * v72))
  {
    int64_t v99 = v71 >> 6;
    if (v72 + 1 >= v99) {
      goto LABEL_23;
    }
    if (*(void *)(v75 + 8 * (v72 + 1))) {
      goto LABEL_21;
    }
    if (v72 + 2 >= v99) {
      goto LABEL_23;
    }
    if (*(void *)(v75 + 8 * (v72 + 2))) {
      goto LABEL_21;
    }
    uint64_t v100 = v72 + 3;
    if (v100 >= v99)
    {
LABEL_23:
      swift_release();
LABEL_24:
      sub_1001871C0();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_1000112AC();
      sub_100011220();
      v77(v76, v77, v78, v79, v80, v81, v82, v83, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
      return;
    }
    if (*(void *)(v75 + 8 * v100)) {
      goto LABEL_21;
    }
    while (1)
    {
      uint64_t v101 = v100 + 1;
      if (__OFADD__(v100, 1)) {
        break;
      }
      if (v101 >= v99) {
        goto LABEL_23;
      }
      ++v100;
      if (*(void *)(v75 + 8 * v101)) {
        goto LABEL_21;
      }
    }
LABEL_45:
    __break(1u);
    return;
  }
LABEL_21:
  sub_10018746C();
LABEL_3:
  uint64_t v37 = sub_100017D48(v36);
  v38(v37);
  uint64_t v39 = sub_100187298();
  v40(v39);
  uint64_t v41 = sub_1001874B4();
  int v43 = v42(v41);
  if (v43 == v29)
  {
    uint64_t v26 = *(void *)(v28 + 136);
    uint64_t v27 = *(void *)(v28 + 88);
    uint64_t v29 = *(void (**)(void))(v28 + 96);
    uint64_t v44 = sub_10001840C();
    v45(v44);
    uint64_t v46 = sub_1001876A0();
    v47(v46);
  }
  else
  {
    if (v43 == *(_DWORD *)(v28 + 260))
    {
      uint64_t v63 = sub_10001840C();
      v64(v63);
      uint64_t v65 = sub_100187080();
      v66(v65);
      uint64_t v67 = (void *)swift_task_alloc();
      *(void *)(v28 + 248) = v67;
      *uint64_t v67 = v28;
      v67[1] = sub_100180684;
      sub_100187070(*(void *)(v28 + 104));
      sub_100011220();
      sub_10017E694(v68);
      return;
    }
    sub_1001878B0();
    if (!v84)
    {
      swift_release();
      uint64_t v92 = sub_1001873E8();
      v93(v92);
      goto LABEL_24;
    }
    uint64_t v85 = sub_10000DBEC();
    v86(v85);
    sub_10000D938(&qword_100326828);
    uint64_t v87 = sub_10018709C();
    v88(v87);
    type metadata accessor for NWBrowser.Result.Change.Flags();
    sub_1000180C4();
    sub_100011C3C();
    v89();
    uint64_t v90 = sub_100187688();
    v91(v90);
  }
  if (!*(void *)(*(void *)(v28 + 64) + 16) || (sub_100187248(), sub_100187150(), (v48 & 1) == 0))
  {
LABEL_10:
    sub_1001877BC();
    sub_100187430();
    uint64_t v53 = a15;
    *(void *)(v28 + 16) = a14;
    *(void *)(v28 + 24) = v53;
    sub_10018721C((uint64_t)"Received bonjour notification to add / change result ");
    _print_unlocked<A, B>(_:_:)();
    uint64_t v54 = sub_100187554();
    v55(v54);
    sub_100187390((uint64_t)v32 + 4, (uint64_t)", but result is not present in full results set. Ignoring");
    static GKLog.match.getter();
    sub_100017DA4();
    uint64_t v56 = v27;
    unint64_t v57 = Logger.logObject.getter();
    sub_1001876B8(v57);
    sub_100187738();
    if (v58)
    {
      a12 = v30;
      a13 = v33;
      a11 = v29;
      sub_100016FF0();
      a10 = v56;
      a14 = sub_100011BBC();
      uint64_t v59 = sub_1001875D0(4.8149e-34);
      uint64_t v61 = sub_100187400(v59, v60, &a14);
      sub_1001874CC(v61);
      sub_100017D30();
      sub_100017C8C((void *)&_mh_execute_header, v57, v31, "Nearby - %s");
      sub_10001698C();
      sub_100010D7C();
      sub_100010D7C();

      sub_100010F20();
      v62();
    }
    else
    {
      sub_100017E0C();

      sub_100010F20();
      v29();
    }
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  sub_1000175E4();
  while (1)
  {
    uint64_t v49 = sub_1000178C8();
    v32(v49);
    sub_100186D8C(&qword_100326830, 255, (void (*)(uint64_t))&type metadata accessor for NWBrowser.Result);
    sub_1001874F0();
    uint64_t v50 = sub_100187128();
    v51(v50);
    if (v26) {
      break;
    }
    sub_100187190();
    if ((v52 & 1) == 0) {
      goto LABEL_10;
    }
  }
  uint64_t v94 = swift_task_alloc();
  uint64_t v95 = (void *)sub_100187918(v94);
  *uint64_t v95 = v96;
  v95[1] = sub_100180094;
  sub_100187070(*(void *)(v28 + 112));
  sub_100011220();
  sub_10017DD9C(v97);
}

uint64_t sub_100180684()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  swift_task_dealloc();
  sub_100186FC8();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100180760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(void), uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_1000184F4();
  a25 = v34;
  a26 = v35;
  sub_1001871B4();
  a24 = v28;
  sub_100010F20();
  uint64_t result = v36();
  if (*(void *)(v28 + 216))
  {
    sub_100187324();
    goto LABEL_3;
  }
  if (__OFADD__(*(void *)(v28 + 208), 1))
  {
    __break(1u);
    goto LABEL_45;
  }
  uint64_t result = sub_100187308();
  if (v74 == v75) {
    goto LABEL_23;
  }
  uint64_t v76 = result + 56;
  if (!*(void *)(result + 56 + 8 * v73))
  {
    int64_t v100 = v72 >> 6;
    if (v73 + 1 >= v100) {
      goto LABEL_23;
    }
    if (*(void *)(v76 + 8 * (v73 + 1))) {
      goto LABEL_21;
    }
    if (v73 + 2 >= v100) {
      goto LABEL_23;
    }
    if (*(void *)(v76 + 8 * (v73 + 2))) {
      goto LABEL_21;
    }
    uint64_t v101 = v73 + 3;
    if (v101 >= v100)
    {
LABEL_23:
      swift_release();
LABEL_24:
      sub_1001871C0();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_1000112AC();
      sub_100011220();
      return v78(v77, v78, v79, v80, v81, v82, v83, v84, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
    }
    if (*(void *)(v76 + 8 * v101)) {
      goto LABEL_21;
    }
    while (1)
    {
      uint64_t v102 = v101 + 1;
      if (__OFADD__(v101, 1)) {
        break;
      }
      if (v102 >= v100) {
        goto LABEL_23;
      }
      ++v101;
      if (*(void *)(v76 + 8 * v102)) {
        goto LABEL_21;
      }
    }
LABEL_45:
    __break(1u);
    return result;
  }
LABEL_21:
  sub_10018746C();
LABEL_3:
  uint64_t v39 = sub_100017D48(v38);
  v40(v39);
  uint64_t v41 = sub_100187298();
  v42(v41);
  uint64_t v43 = sub_1001874B4();
  int v45 = v44(v43);
  if (v45 == v29)
  {
    uint64_t v26 = *(void *)(v28 + 136);
    uint64_t v27 = *(void *)(v28 + 88);
    uint64_t v29 = *(void (**)(void))(v28 + 96);
    uint64_t v46 = sub_10001840C();
    v47(v46);
    uint64_t v48 = sub_1001876A0();
    v49(v48);
  }
  else
  {
    if (v45 == *(_DWORD *)(v28 + 260))
    {
      uint64_t v65 = sub_10001840C();
      v66(v65);
      uint64_t v67 = sub_100187080();
      v68(v67);
      uint64_t v69 = (void *)swift_task_alloc();
      *(void *)(v28 + 248) = v69;
      *uint64_t v69 = v28;
      v69[1] = sub_100180684;
      sub_100187070(*(void *)(v28 + 104));
      sub_100011220();
      return sub_10017E694(v70);
    }
    sub_1001878B0();
    if (!v85)
    {
      swift_release();
      uint64_t v93 = sub_1001873E8();
      v94(v93);
      goto LABEL_24;
    }
    uint64_t v86 = sub_10000DBEC();
    v87(v86);
    sub_10000D938(&qword_100326828);
    uint64_t v88 = sub_10018709C();
    v89(v88);
    type metadata accessor for NWBrowser.Result.Change.Flags();
    sub_1000180C4();
    sub_100011C3C();
    v90();
    uint64_t v91 = sub_100187688();
    v92(v91);
  }
  if (!*(void *)(*(void *)(v28 + 64) + 16) || (sub_100187248(), sub_100187150(), (v50 & 1) == 0))
  {
LABEL_10:
    sub_1001877BC();
    sub_100187430();
    uint64_t v55 = a15;
    *(void *)(v28 + 16) = a14;
    *(void *)(v28 + 24) = v55;
    sub_10018721C((uint64_t)"Received bonjour notification to add / change result ");
    _print_unlocked<A, B>(_:_:)();
    uint64_t v56 = sub_100187554();
    v57(v56);
    sub_100187390((uint64_t)v32 + 4, (uint64_t)", but result is not present in full results set. Ignoring");
    static GKLog.match.getter();
    sub_100017DA4();
    uint64_t v58 = v27;
    uint64_t v59 = Logger.logObject.getter();
    sub_1001876B8(v59);
    sub_100187738();
    if (v60)
    {
      a12 = v30;
      a13 = v33;
      a11 = v29;
      sub_100016FF0();
      a10 = v58;
      a14 = sub_100011BBC();
      uint64_t v61 = sub_1001875D0(4.8149e-34);
      uint64_t v63 = sub_100187400(v61, v62, &a14);
      sub_1001874CC(v63);
      sub_100017D30();
      sub_100017C8C((void *)&_mh_execute_header, v59, v31, "Nearby - %s");
      sub_10001698C();
      sub_100010D7C();
      sub_100010D7C();

      sub_100010F20();
      v64();
    }
    else
    {
      sub_100017E0C();

      sub_100010F20();
      v29();
    }
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  sub_1000175E4();
  while (1)
  {
    uint64_t v51 = sub_1000178C8();
    v32(v51);
    sub_100186D8C(&qword_100326830, 255, (void (*)(uint64_t))&type metadata accessor for NWBrowser.Result);
    sub_1001874F0();
    uint64_t v52 = sub_100187128();
    v53(v52);
    if (v26) {
      break;
    }
    sub_100187190();
    if ((v54 & 1) == 0) {
      goto LABEL_10;
    }
  }
  uint64_t v95 = swift_task_alloc();
  uint64_t v96 = (void *)sub_100187918(v95);
  *uint64_t v96 = v97;
  v96[1] = sub_100180094;
  sub_100187070(*(void *)(v28 + 112));
  sub_100011220();
  return sub_10017DD9C(v98);
}

uint64_t sub_100180C18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_100171E3C;
  return sub_10017DD9C(a5);
}

uint64_t sub_100180CB4()
{
  sub_100010DA4();
  v0[7] = v1;
  uint64_t v2 = type metadata accessor for Logger();
  v0[8] = v2;
  sub_1000111CC(v2);
  v0[9] = v3;
  v0[10] = sub_1000171A0();
  sub_100186FC8();
  return _swift_task_switch(v4, v5, v6);
}

#error "100180E48: call analysis failed (funcsize=89)"

uint64_t sub_100180EB4()
{
  uint64_t v1 = type metadata accessor for NWEndpoint();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v4 = __chkstk_darwin(v1, v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v14 - v8;
  NWConnection.endpoint.getter();
  uint64_t v10 = (uint64_t *)(v0 + 168);
  swift_beginAccess();
  uint64_t v11 = sub_100169AFC((uint64_t)v9, *(void *)(v0 + 168));
  swift_endAccess();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v2 + 8);
  v12(v9, v1);
  uint64_t result = swift_release();
  if (v11)
  {
    NWConnection.endpoint.getter();
    swift_beginAccess();
    if (sub_100169AFC((uint64_t)v6, *v10))
    {
      swift_endAccess();
      v12(v6, v1);
      sub_1001A5390();
      swift_release();
    }
    else
    {
      swift_endAccess();
      v12(v6, v1);
    }
    NWConnection.endpoint.getter();
    swift_beginAccess();
    sub_10019BF40(v9);
    swift_endAccess();
    v12(v9, v1);
    return swift_release();
  }
  return result;
}

uint64_t sub_1001810C0()
{
  sub_100010DA4();
  v1[3] = v2;
  void v1[4] = v0;
  uint64_t v3 = type metadata accessor for Logger();
  v1[5] = v3;
  sub_1000111CC(v3);
  v1[6] = v4;
  v1[7] = sub_1000171A0();
  sub_100186FC8();
  return _swift_task_switch(v5, v6, v7);
}

#error "100181250: call analysis failed (funcsize=91)"

uint64_t sub_1001812C8()
{
  sub_100010DA4();
  uint8_t v1[8] = v2;
  v1[9] = v0;
  uint64_t v3 = type metadata accessor for Logger();
  v1[10] = v3;
  sub_1000111CC(v3);
  v1[11] = v4;
  v1[12] = sub_100186FD4();
  v1[13] = swift_task_alloc();
  sub_100186FC8();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_100181360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_100010F38();
  sub_1000171C8();
  uint64_t v17 = (void *)v16[13];
  static os_log_type_t.info.getter();
  sub_1000181B0();
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  sub_100187924();
  v40._uint64_t countAndFlagsBits = sub_1001A6204();
  sub_1001873A8(v40);
  swift_bridgeObjectRelease();
  sub_100187418();
  sub_100017DA4();
  char v18 = v17;
  int64_t v19 = Logger.logObject.getter();
  if (sub_10018710C(v19))
  {
    a9 = v16[11];
    a10 = v16[10];
    a11 = v16[13];
    sub_100016FF0();
    sub_100011BBC();
    sub_1001876D0();
    uint64_t v20 = sub_100018268(4.8149e-34);
    v16[7] = sub_1000177B4(v20, v21, v22);
    sub_100017DBC();
    sub_100017D30();
    sub_10018701C((void *)&_mh_execute_header, v23, v24, "Nearby - %s");
    sub_1000172D0();
    sub_100010D7C();
    sub_100010D7C();

    char v25 = *(void (**)(void))(a9 + 8);
    sub_100010F20();
    v25();
  }
  else
  {
    uint64_t v26 = v16[11];
    sub_100017E0C();

    char v25 = *(void (**)(void))(v26 + 8);
    uint64_t v27 = sub_10018700C();
    ((void (*)(uint64_t))v25)(v27);
  }
  swift_bridgeObjectRelease();
  v16[14] = v25;
  if (*(void *)(v16[8] + 48))
  {
    uint64_t v28 = (void *)swift_task_alloc();
    v16[15] = v28;
    void *v28 = v16;
    v28[1] = sub_100181560;
    sub_100017B64(v16[8]);
    sub_1000112F4();
    return sub_1001818CC(v29);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000112AC();
    sub_1000112F4();
    return v33(v32, v33, v34, v35, v36, v37, v38, v39, a9, a10, a11, a12, a13, a14, a15, a16);
  }
}

uint64_t sub_100181560()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v3 = v2;
  sub_1001875B4();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_100010D94();
  *uint64_t v6 = v5;
  *(void *)(v3 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 72);
    return _swift_task_switch(sub_100181668, v7, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000112AC();
    return v8();
  }
}

uint64_t sub_100181668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26)
{
  sub_1000184F4();
  a25 = v27;
  a26 = v28;
  sub_1001871B4();
  a24 = v26;
  os_log_type_t v29 = static os_log_type_t.debug.getter();
  sub_100011330();
  _StringGuts.grow(_:)(49);
  swift_bridgeObjectRelease();
  a14 = 0xD000000000000024;
  a15 = 0x80000001002B0590;
  v30._uint64_t countAndFlagsBits = sub_1001A6204();
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._uint64_t countAndFlagsBits = 0x3A726F727245202ELL;
  v31._object = (void *)0xE900000000000020;
  String.append(_:)(v31);
  swift_getErrorValue();
  v32._uint64_t countAndFlagsBits = Error.localizedDescription.getter();
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  uint64_t v34 = a14;
  unint64_t v33 = a15;
  static GKLog.match.getter();
  sub_100017DA4();
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = v29;
  if (os_log_type_enabled(v35, v29))
  {
    a12 = v26[14];
    a13 = v26[16];
    a10 = v26[10];
    a11 = v26[12];
    uint64_t v37 = (_DWORD *)sub_100016FF0();
    a14 = sub_100011BBC();
    _DWORD *v37 = 136315138;
    swift_bridgeObjectRetain();
    v26[6] = sub_100174CE4(v34, v33, &a14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100017D30();
    sub_100187268((void *)&_mh_execute_header, v35, v36, "Nearby - %s");
    sub_1000172D0();
    sub_100010D7C();
    sub_100010D7C();

    sub_100010F20();
    v38();
  }
  else
  {
    uint64_t v39 = (void (*)(void))v26[14];
    sub_100017E0C();

    sub_100010F20();
    v39();
  }
  swift_bridgeObjectRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000112AC();
  sub_100011220();
  return v41(v40, v41, v42, v43, v44, v45, v46, v47, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

uint64_t sub_1001818CC(uint64_t a1)
{
  v2[10] = a1;
  v2[11] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  v2[16] = swift_task_alloc();
  v2[17] = swift_task_alloc();
  return _swift_task_switch(sub_1001819E8, v1, 0);
}

uint64_t sub_1001819E8()
{
  uint64_t v80 = v0;
  uint64_t v2 = *(void *)(*(void *)(v0 + 88) + 128);
  *(void *)(v0 + 144) = v2;
  if (!v2)
  {
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    static GKLog.match.getter();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = v22;
    BOOL v25 = os_log_type_enabled(v23, v22);
    uint64_t v26 = *(void *)(v0 + 104);
    if (v25)
    {
      uint64_t v72 = *(void *)(v0 + 112);
      uint64_t v69 = *(void *)(v0 + 96);
      uint64_t v27 = (_DWORD *)sub_100016FF0();
      uint64_t v78 = sub_100011BBC();
      _DWORD *v27 = 136315138;
      uint64_t v28 = sub_100187664((uint64_t)"No listener. Cannot send hello message.", v64, v65, v66, v67, v68, v69, v72, v77);
      sub_100187798(v28);
      sub_100187454();
      sub_100187178((void *)&_mh_execute_header, v23, v24, "Nearby - %s");
      sub_100187054();
      sub_100010D7C();
      sub_100010D7C();

      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v73, v70);
    }
    else
    {

      uint64_t v42 = sub_100187588();
      v44(v42, v43);
    }
    goto LABEL_24;
  }
  swift_retain();
  sub_1001BB704();
  if (!v3)
  {
    static os_log_type_t.debug.getter();
    sub_10018772C();
    uint64_t v78 = 0;
    unint64_t v79 = v29;
    _StringGuts.grow(_:)(49);
    unint64_t v30 = v79;
    *(void *)(v0 + 16) = 0;
    *(void *)(v0 + 24) = v30;
    sub_100010A64();
    String.append(_:)(v31);
    *(void *)(v0 + 40) = v2;
    type metadata accessor for PeerListener();
    sub_1001877F0();
    _print_unlocked<A, B>(_:_:)();
    uint64_t v33 = *(void *)(v0 + 16);
    unint64_t v32 = *(void *)(v0 + 24);
    static GKLog.match.getter();
    sub_100187634();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = v1;
    BOOL v36 = os_log_type_enabled(v34, v1);
    uint64_t v37 = *(void *)(v0 + 120);
    uint64_t v39 = *(void *)(v0 + 96);
    uint64_t v38 = *(void *)(v0 + 104);
    if (v36)
    {
      uint64_t v74 = *(void *)(v0 + 120);
      uint64_t v40 = (_DWORD *)sub_100016FF0();
      uint64_t v78 = sub_100011BBC();
      _DWORD *v40 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v41 = sub_100174CE4(v33, v32, &v78);
      sub_100017550(v41, (void *)(v0 + 48));
      sub_1001876DC();
      sub_10018764C();
      sub_100187268((void *)&_mh_execute_header, v34, v35, "Nearby - %s");
      sub_100187600();
      sub_100010D7C();
      sub_100010D7C();

      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v74, v39);
    }
    else
    {
      sub_10018761C();

      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
    }
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  uint64_t v4 = *(void *)(*(void *)(v0 + 80) + 32);
  *(void *)(v0 + 152) = v4;
  if (!v4)
  {
    swift_bridgeObjectRelease();
    os_log_type_t v45 = static os_log_type_t.debug.getter();
    static GKLog.match.getter();
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = v45;
    BOOL v48 = os_log_type_enabled(v46, v45);
    uint64_t v50 = *(void *)(v0 + 96);
    uint64_t v49 = *(void *)(v0 + 104);
    if (v48)
    {
      uint64_t v75 = *(void *)(v0 + 128);
      uint64_t v51 = (_DWORD *)sub_100016FF0();
      uint64_t v78 = sub_100011BBC();
      *uint64_t v51 = 136315138;
      *(void *)(v0 + 56) = sub_100187664((uint64_t)"Cannot send hello without nwConnection.", v64, v65, v66, v67, (uint64_t)(v51 + 1), v50, v75, v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100010F60((void *)&_mh_execute_header, v46, v47, "Nearby - %s");
      sub_1000172D0();
      sub_100010D7C();
      sub_100010D7C();

      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v76, v71);
    }
    else
    {

      uint64_t v59 = sub_100187588();
      v61(v59, v60);
    }
LABEL_23:
    swift_release();
LABEL_24:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
LABEL_25:
    sub_100011C48();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v5 = self;
  swift_retain();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 64) = 0;
  id v7 = [v5 archivedDataWithRootObject:isa requiringSecureCoding:1 error:v0 + 64];

  id v8 = *(id *)(v0 + 64);
  if (!v7)
  {
    uint64_t v52 = v8;
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    goto LABEL_25;
  }
  uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  *(void *)(v0 + 160) = v9;
  *(void *)(v0 + 168) = v11;
  type metadata accessor for NWProtocolFramer.Message();
  uint64_t v12 = sub_10018CA08();
  *(void *)(v0 + 176) = v12;
  sub_10000D938(&qword_100326738);
  uint64_t v13 = sub_10001715C();
  *(_OWORD *)(v13 + 16) = xmmword_10024F840;
  *(void *)(v13 + 32) = v12;
  specialized Array._endMutation()();
  type metadata accessor for NWConnection.ContentContext();
  swift_allocObject();
  swift_retain();
  sub_100017BDC();
  *(void *)(v0 + 184) = NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  uint64_t v78 = 0;
  unint64_t v79 = 0xE000000000000000;
  _StringGuts.grow(_:)(69);
  v15._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
  v15._object = (void *)0x80000001002B0650;
  String.append(_:)(v15);
  v16._uint64_t countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17._uint64_t countAndFlagsBits = 0xD000000000000012;
  v17._object = (void *)0x80000001002B0680;
  String.append(_:)(v17);
  v18._uint64_t countAndFlagsBits = NWConnection.debugDescription.getter();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  static GKLog.match.getter();
  swift_bridgeObjectRetain_n();
  int64_t v19 = Logger.logObject.getter();
  if (os_log_type_enabled(v19, v14))
  {
    uint64_t v20 = (_DWORD *)sub_100016FF0();
    uint64_t v78 = sub_100011BBC();
    _DWORD *v20 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v21 = sub_100174CE4(0, 0xE000000000000000, &v78);
    sub_100017550(v21, (void *)(v0 + 72));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    sub_1001872F0((void *)&_mh_execute_header, v19, v14, "Nearby - %s");
    sub_10001698C();
    sub_100010D7C();
    sub_100010D7C();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  sub_10018757C();
  v53();
  swift_bridgeObjectRelease();
  uint64_t v54 = sub_100017130();
  sub_100175574(v54, v55);
  uint64_t v56 = (void *)swift_task_alloc();
  *(void *)(v0 + 192) = v56;
  *uint64_t v56 = v0;
  v56[1] = sub_100182284;
  sub_100017130();
  sub_100011C48();
  return sub_1001A57B0();
}

uint64_t sub_100182284()
{
  sub_1000112E8();
  sub_100011168();
  unint64_t v2 = *(void *)(v1 + 168);
  uint64_t v3 = *(void *)(v1 + 160);
  uint64_t v4 = *v0;
  sub_100010D94();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  sub_100169274(v3, v2);
  sub_100186FC8();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_1001823C8()
{
  sub_100010F2C();
  uint64_t v2 = *(void *)(v0 + 160);
  unint64_t v1 = *(void *)(v0 + 168);
  swift_release();
  swift_release();
  sub_100169274(v2, v1);
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000112AC();
  return v3();
}

uint64_t sub_1001824B0()
{
  sub_100010DA4();
  v1[7] = v2;
  uint8_t v1[8] = v0;
  uint64_t v3 = type metadata accessor for Logger();
  v1[9] = v3;
  sub_1000111CC(v3);
  v1[10] = v4;
  v1[11] = sub_1000171A0();
  sub_100186FC8();
  return _swift_task_switch(v5, v6, v7);
}

#error "100182644: call analysis failed (funcsize=101)"

uint64_t sub_1001826E4()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000112AC();
  return v3();
}

uint64_t sub_1001827C0()
{
  sub_100010DA4();
  v1[3] = v2;
  void v1[4] = v0;
  uint64_t v3 = type metadata accessor for Logger();
  v1[5] = v3;
  sub_1000111CC(v3);
  v1[6] = v4;
  v1[7] = sub_1000171A0();
  sub_100186FC8();
  return _swift_task_switch(v5, v6, v7);
}

#error "100182960: call analysis failed (funcsize=95)"

uint64_t sub_1001829D8()
{
  sub_100010DA4();
  v1[19] = v2;
  v1[20] = v0;
  uint64_t v3 = type metadata accessor for Logger();
  v1[21] = v3;
  sub_1000111CC(v3);
  v1[22] = v4;
  v1[23] = sub_100186FD4();
  uint8_t v1[24] = swift_task_alloc();
  v1[25] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for NWEndpoint();
  v1[26] = v5;
  sub_1000111CC(v5);
  v1[27] = v6;
  v1[28] = sub_1000171A0();
  sub_100186FC8();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100182AAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28)
{
  sub_100187538();
  a27 = v29;
  a28 = v30;
  a26 = v28;
  NWConnection.endpoint.getter();
  os_log_type_t v31 = static os_log_type_t.info.getter();
  sub_1001872E0();
  _StringGuts.grow(_:)(49);
  uint64_t v32 = a17;
  v28[10] = a16;
  uint64_t v91 = (void (*)(void))(v28 + 5);
  v28[11] = v32;
  v33._uint64_t countAndFlagsBits = 0xD000000000000019;
  v33._object = (void *)0x80000001002B04F0;
  String.append(_:)(v33);
  v34._uint64_t countAndFlagsBits = NWConnection.debugDescription.getter();
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  sub_100187890((uint64_t)". Remote endpoint: ");
  _print_unlocked<A, B>(_:_:)();
  v35._uint64_t countAndFlagsBits = 46;
  v35._object = (void *)0xE100000000000000;
  String.append(_:)(v35);
  uint64_t v36 = v28[10];
  unint64_t v37 = v28[11];
  static GKLog.match.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = v31;
  if (os_log_type_enabled(v38, v31))
  {
    a10 = v36;
    a11 = v28[22];
    a12 = v28[21];
    a13 = v28[25];
    uint64_t v40 = (_DWORD *)sub_100016FF0();
    a16 = sub_100011BBC();
    _DWORD *v40 = 136315138;
    swift_bridgeObjectRetain();
    v28[18] = sub_100174CE4(v36, v37, &a16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    sub_1001872F0((void *)&_mh_execute_header, v38, v39, "Nearby - %s");
    sub_100186FF0();
    sub_100010D7C();
    sub_100010D7C();

    uint64_t v41 = *(void (**)(void))(a11 + 8);
    sub_100010F20();
    v41();
  }
  else
  {
    uint64_t v42 = v28[22];
    swift_bridgeObjectRelease_n();

    uint64_t v41 = *(void (**)(void))(v42 + 8);
    uint64_t v43 = sub_10018700C();
    ((void (*)(uint64_t))v41)(v43);
  }
  swift_bridgeObjectRelease();
  uint64_t v44 = v28[28];
  uint64_t v45 = v28[20];
  sub_1001872B8();
  uint64_t v46 = sub_100169AFC(v44, *(void *)(v45 + 168));
  swift_endAccess();
  swift_release();
  uint64_t v47 = v28[19];
  if (v46)
  {
    os_log_type_t v48 = static os_log_type_t.debug.getter();
    sub_1001872E0();
    _StringGuts.grow(_:)(25);
    uint64_t v49 = a17;
    v28[8] = a16;
    v28[9] = v49;
    sub_100187708();
    v51._uint64_t countAndFlagsBits = v50 + 4;
    v51._object = (void *)0x80000001002B0530;
    String.append(_:)(v51);
    v28[16] = v47;
    type metadata accessor for NWConnection();
    _print_unlocked<A, B>(_:_:)();
    static GKLog.match.getter();
    sub_100187634();
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = v48;
    BOOL v54 = os_log_type_enabled(v52, v48);
    uint64_t v56 = v28[22];
    uint64_t v55 = v28[23];
    uint64_t v57 = v28[21];
    if (v54)
    {
      uint64_t v91 = v41;
      a13 = v28[21];
      a12 = v28[23];
      uint64_t v58 = (uint8_t *)sub_100016FF0();
      a11 = v56;
      a16 = sub_100011BBC();
      *(_DWORD *)uint64_t v58 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v59 = sub_10018782C();
      uint64_t v62 = sub_100174CE4(v59, v60, v61);
      sub_100187514(v62);
      sub_10018764C();
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Nearby - %s", v58, 0xCu);
      sub_1000172D0();
      sub_100010D7C();
      sub_100010D7C();

      sub_100010F20();
      v63();
    }
    else
    {
      sub_10018761C();

      ((void (*)(uint64_t, uint64_t))v41)(v55, v57);
    }
    swift_bridgeObjectRelease();
    NWConnection.cancel()();
    sub_100010F20();
    v75();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000112AC();
    sub_100018328();
    return v77(v76, v77, v78, v79, v80, v81, v82, v83, a9, a10, a11, a12, a13, v28 + 15, v91, a16, a17, a18, a19, a20);
  }
  else
  {
    static os_log_type_t.info.getter();
    sub_1001872E0();
    _StringGuts.grow(_:)(26);
    uint64_t v64 = a17;
    v28[12] = a16;
    v28[13] = v64;
    sub_100187708();
    v66._uint64_t countAndFlagsBits = v65 + 5;
    v66._object = (void *)0x80000001002B0550;
    String.append(_:)(v66);
    v28[15] = v47;
    type metadata accessor for NWConnection();
    _print_unlocked<A, B>(_:_:)();
    uint64_t v68 = v28[12];
    unint64_t v67 = v28[13];
    static GKLog.match.getter();
    sub_100187814();
    uint64_t v69 = Logger.logObject.getter();
    BOOL v70 = sub_1001876B8(v69);
    uint64_t v71 = v28[24];
    uint64_t v72 = v28[21];
    if (v70)
    {
      uint64_t v73 = (_DWORD *)sub_100016FF0();
      a16 = sub_100011BBC();
      _DWORD *v73 = 136315138;
      swift_bridgeObjectRetain();
      v28[17] = sub_100174CE4(v68, v67, &a16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100187850();
      sub_100017C8C((void *)&_mh_execute_header, v69, (os_log_type_t)v37, "Nearby - %s");
      sub_1000172D0();
      sub_100010D7C();
      sub_100010D7C();

      sub_100010F20();
      v74();
    }
    else
    {
      sub_1001877FC();

      ((void (*)(uint64_t, uint64_t))v41)(v71, v72);
    }
    swift_bridgeObjectRelease();
    uint64_t v85 = v28[19];
    type metadata accessor for PeerConnection();
    uint64_t v86 = swift_allocObject();
    v28[29] = v86;
    *(void *)(v86 + 24) = 0;
    swift_unknownObjectWeakInit();
    *(_OWORD *)(v86 + 96) = 0u;
    *(_OWORD *)(v86 + 112) = 0u;
    *(_OWORD *)(v86 + 64) = 0u;
    *(_OWORD *)(v86 + 80) = 0u;
    *(_OWORD *)(v86 + 32) = 0u;
    *(_OWORD *)(v86 + 48) = 0u;
    *(void *)(v86 + 24) = &off_1002DD2C0;
    swift_unknownObjectWeakAssign();
    *(void *)(v86 + 32) = v85;
    swift_retain();
    swift_release();
    uint64_t v87 = swift_task_alloc();
    uint64_t v88 = (void *)sub_100187918(v87);
    *uint64_t v88 = v89;
    v88[1] = sub_100183174;
    sub_100018328();
    return sub_1001A5DB0();
  }
}

uint64_t sub_100183174()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  swift_task_dealloc();
  sub_100186FC8();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100183250()
{
  sub_1000112E8();
  sub_10001749C();
  swift_retain();
  sub_1001DD2FC();
  swift_endAccess();
  swift_release();
  sub_100010F20();
  v0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000112AC();
  return v1();
}

uint64_t sub_100183324()
{
  sub_100010DA4();
  uint8_t v1[24] = v2;
  v1[25] = v0;
  v1[22] = v3;
  v1[23] = v4;
  v1[21] = v5;
  uint64_t v6 = type metadata accessor for Logger();
  v1[26] = v6;
  sub_1000111CC(v6);
  v1[27] = v7;
  v1[28] = sub_100186FD4();
  v1[29] = swift_task_alloc();
  v1[30] = swift_task_alloc();
  v1[31] = swift_task_alloc();
  v1[32] = swift_task_alloc();
  sub_100186FC8();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_1001833E8()
{
  uint64_t v118 = v0;
  unint64_t v1 = *(void *)(v0 + 176);
  os_log_type_t v2 = static os_log_type_t.info.getter();
  sub_1001872D0();
  _StringGuts.grow(_:)(54);
  uint64_t v3 = v117;
  *(void *)(v0 + 80) = v116;
  *(void *)(v0 + 88) = v3;
  v4._uint64_t countAndFlagsBits = sub_10018787C();
  String.append(_:)(v4);
  unint64_t v115 = v1 >> 60;
  if (v1 >> 60 == 15)
  {
    unint64_t v5 = 0xE300000000000000;
    uint64_t v6 = 7104878;
  }
  else
  {
    *(Swift::String *)(v0 + 64) = Data.base64EncodedString(options:)(0);
    uint64_t v6 = String.init<A>(reflecting:)();
    unint64_t v5 = v7;
  }
  uint64_t v8 = *(void *)(v0 + 184);
  unint64_t v9 = v5;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 0x67617373656D202CLL;
  v10._object = (void *)0xEB00000000203A65;
  String.append(_:)(v10);
  *(void *)(v0 + 136) = v8;
  type metadata accessor for NWProtocolFramer.Message();
  _print_unlocked<A, B>(_:_:)();
  sub_100187390(0xD000000000000013, (uint64_t)", from connection: ");
  v11._uint64_t countAndFlagsBits = sub_1001A6204();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  unint64_t v12 = *(void *)(v0 + 88);
  id v108 = *(id *)(v0 + 80);
  static GKLog.match.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  BOOL v14 = os_log_type_enabled(v13, v2);
  uint64_t v15 = *(void *)(v0 + 256);
  uint64_t v17 = *(void *)(v0 + 208);
  uint64_t v16 = *(void *)(v0 + 216);
  if (v14)
  {
    uint64_t v106 = *(void *)(v0 + 256);
    Swift::String v18 = (_DWORD *)sub_100016FF0();
    uint64_t v116 = sub_100011BBC();
    *Swift::String v18 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v19 = sub_100174CE4((uint64_t)v108, v12, &v116);
    sub_100017550(v19, (void *)(v0 + 152));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    sub_100010F60((void *)&_mh_execute_header, v13, v2, "Nearby - %s");
    swift_arrayDestroy();
    sub_100010D7C();
    sub_100010D7C();

    uint64_t v20 = *(void (**)(void))(v16 + 8);
    ((void (*)(uint64_t, uint64_t))v20)(v106, v17);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    uint64_t v20 = *(void (**)(void))(v16 + 8);
    ((void (*)(uint64_t, uint64_t))v20)(v15, v17);
  }
  swift_bridgeObjectRelease();
  os_log_type_t v21 = v0 + 0x80;
  if (v115 > 0xE)
  {
    static os_log_type_t.info.getter();
    sub_100187280();
    os_log_type_t v22 = Logger.logObject.getter();
    if (os_log_type_enabled(v22, v21))
    {
      uint64_t v23 = (_DWORD *)sub_100016FF0();
      uint64_t v116 = sub_100011BBC();
      *uint64_t v23 = 136315138;
      sub_1001871E0();
      *(void *)(v0 + 120) = sub_100017E9C(v24 + 13, (uint64_t)"Invalid content received. Drop.");
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100187178((void *)&_mh_execute_header, v22, v21, "Nearby - %s");
      sub_100186FF0();
      sub_100010D7C();
      sub_100010D7C();

      sub_100010F20();
      v25();
    }
    else
    {

      sub_100010F20();
      v20();
    }
    goto LABEL_31;
  }
  sub_100175574(*(void *)(v0 + 168), *(void *)(v0 + 176));
  switch(sub_10018CAB4())
  {
    case 1u:
      uint64_t v29 = (void *)swift_task_alloc();
      *(void *)(v0 + 264) = v29;
      *uint64_t v29 = v0;
      v29[1] = sub_100184000;
      sub_100017B64(*(void *)(v0 + 168));
      sub_100187598();
      return sub_100184308(v30, v31, v32);
    case 2u:
      Swift::String v35 = (void *)swift_task_alloc();
      *(void *)(v0 + 280) = v35;
      *Swift::String v35 = v0;
      v35[1] = sub_10018418C;
      sub_100017B64(*(void *)(v0 + 168));
      sub_100187598();
      return sub_100185390(v36, v37, v38);
    case 3u:
      uint64_t Strong = swift_unknownObjectWeakLoadStrong();
      if (Strong)
      {
        id v110 = (id)Strong;
        uint64_t v41 = *(void **)(v0 + 192);
        uint64_t v42 = v41[6];
        if (v42)
        {
          uint64_t v107 = v41[5];
          uint64_t v43 = v41[13];
          uint64_t v44 = v41[14];
          uint64_t v45 = *(void *)(v0 + 200);
          sub_1001872B8();
          uint64_t v46 = *(void *)(v45 + 184);
          swift_bridgeObjectRetain();
          uint64_t v47 = sub_100187208();
          sub_10018697C(v47, v48);
          uint64_t v49 = sub_100169998(v107, v42, v46);
          swift_endAccess();
          swift_bridgeObjectRelease();
          swift_release();
          if (v49)
          {
            uint64_t v50 = *(void *)(v0 + 168);
            unint64_t v112 = *(void *)(v0 + 176);
            sub_100017130();
            NSString v113 = String._bridgeToObjectiveC()();
            NSString v51 = String._bridgeToObjectiveC()();
            uint64_t v52 = sub_100187208();
            sub_1001869EC(v52, v53);
            Class isa = Data._bridgeToObjectiveC()().super.isa;
            [v110 receivedData:v113 deviceID:v51 data:isa, v43, v44];
            sub_100169260(v50, v112);
            swift_unknownObjectRelease();

            goto LABEL_31;
          }
          uint64_t v67 = sub_100187208();
          sub_1001869EC(v67, v68);
          uint64_t v69 = v41[6];
          if (v69)
          {
            uint64_t v105 = v41[5];
            uint64_t v71 = v41[13];
            uint64_t v70 = v41[14];
            uint64_t v72 = *(void *)(v0 + 200);
            sub_1001872B8();
            uint64_t v73 = *(void *)(v72 + 176);
            swift_bridgeObjectRetain();
            sub_10018697C(v105, v69);
            uint64_t v74 = sub_100169998(v105, v69, v73);
            swift_endAccess();
            swift_bridgeObjectRelease();
            swift_release();
            if (v74)
            {
              NSString v114 = String._bridgeToObjectiveC()();
              NSString v75 = String._bridgeToObjectiveC()();
              uint64_t v76 = sub_100187374();
              sub_1001869EC(v76, v77);
              sub_100018344();
              Class v78 = Data._bridgeToObjectiveC()().super.isa;
              [v110 receivedData:v114 deviceID:v75 data:v78];
              uint64_t v79 = sub_100018344();
              sub_100169260(v79, v80);

              swift_unknownObjectRelease();
              goto LABEL_31;
            }
            uint64_t v81 = sub_100187374();
            sub_1001869EC(v81, v82);
          }
        }
        uint64_t v83 = *(void *)(v0 + 192);
        os_log_type_t v84 = static os_log_type_t.debug.getter();
        sub_1001872D0();
        _StringGuts.grow(_:)(52);
        uint64_t v85 = v117;
        *(void *)(v0 + 96) = v116;
        *(void *)(v0 + 104) = v85;
        sub_1001871E0();
        v87._uint64_t countAndFlagsBits = v86 + 32;
        v87._object = (void *)0x80000001002B0780;
        String.append(_:)(v87);
        *(void *)(v0 + 160) = v83;
        type metadata accessor for PeerConnection();
        _print_unlocked<A, B>(_:_:)();
        uint64_t v89 = *(void *)(v0 + 96);
        unint64_t v88 = *(void *)(v0 + 104);
        static GKLog.match.getter();
        sub_100187814();
        uint64_t v90 = Logger.logObject.getter();
        os_log_type_t v91 = v84;
        BOOL v92 = os_log_type_enabled(v90, v84);
        uint64_t v93 = *(void *)(v0 + 168);
        unint64_t v94 = *(void *)(v0 + 176);
        if (v92)
        {
          uint64_t v95 = (_DWORD *)sub_100016FF0();
          uint64_t v116 = sub_100011BBC();
          *uint64_t v95 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v96 = sub_100174CE4(v89, v88, &v116);
          sub_100017550(v96, (void *)(v0 + 128));
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          sub_100187850();
          sub_1001872F0((void *)&_mh_execute_header, v90, v91, "Nearby - %s");
          sub_10001698C();
          sub_100010D7C();
          sub_100010D7C();

          sub_100010F20();
          v99(v97, v98);
          uint64_t v100 = v93;
          unint64_t v101 = v94;
        }
        else
        {
          sub_1001877FC();

          sub_100010F20();
          v104(v102, v103);
          uint64_t v100 = sub_100010F54();
        }
        sub_100169260(v100, v101);
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
LABEL_31:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        sub_100017860();
        sub_100187598();
        __asm { BRAA            X1, X16 }
      }
      static os_log_type_t.info.getter();
      sub_100187280();
      uint64_t v55 = Logger.logObject.getter();
      BOOL v56 = os_log_type_enabled(v55, v21);
      uint64_t v57 = *(void **)(v0 + 176);
      if (v56)
      {
        uint64_t v111 = *(void *)(v0 + 168);
        uint64_t v58 = (uint8_t *)sub_100016FF0();
        id v109 = v57;
        uint64_t v116 = sub_100011BBC();
        *(_DWORD *)uint64_t v58 = 136315138;
        sub_1001871E0();
        uint64_t v60 = sub_100017E9C(v59 + 47, (uint64_t)"Cannot handle message without a valid delegate. Dropping message.");
        sub_100187798(v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v55, (os_log_type_t)(v0 + 0x80), "Nearby - %s", v58, 0xCu);
        sub_10001698C();
        sub_100010D7C();
        sub_100010D7C();

        goto LABEL_27;
      }

      break;
    default:
      static os_log_type_t.info.getter();
      sub_100187280();
      uint64_t v26 = Logger.logObject.getter();
      if (os_log_type_enabled(v26, v21))
      {
        uint64_t v111 = *(void *)(v0 + 168);
        id v109 = *(id *)(v0 + 176);
        uint64_t v27 = (_DWORD *)sub_100016FF0();
        uint64_t v116 = sub_100011BBC();
        _DWORD *v27 = 136315138;
        sub_1001871E0();
        *(void *)(v0 + 144) = sub_100017E9C(v28 + 23, (uint64_t)"Unknown types of messages received. Drop.");
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_100010F60((void *)&_mh_execute_header, v26, v21, "Nearby - %s");
        swift_arrayDestroy();
        sub_100010D7C();
        sub_100010D7C();

LABEL_27:
        sub_100010F20();
        v61();
        unint64_t v63 = (unint64_t)v109;
        uint64_t v62 = v111;
LABEL_30:
        sub_100169260(v62, v63);
        goto LABEL_31;
      }

      sub_1001877F0();
      break;
  }
  sub_100010F20();
  v64();
  uint64_t v62 = sub_100010F54();
  goto LABEL_30;
}

uint64_t sub_100184000()
{
  sub_1000112E8();
  sub_100011C24();
  sub_1001875B4();
  *Swift::String v4 = v3;
  *Swift::String v4 = *v2;
  *(void *)(v3 + 272) = v0;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v1 + 200);
  if (v0) {
    uint64_t v6 = sub_100184268;
  }
  else {
    uint64_t v6 = sub_1001840FC;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1001840FC()
{
  sub_1000112E8();
  sub_100169260(*(void *)(v0 + 168), *(void *)(v0 + 176));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100017860();
  return v1();
}

uint64_t sub_10018418C()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  swift_task_dealloc();
  sub_100186FC8();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100184268()
{
  sub_100010F2C();
  sub_100169260(*(void *)(v0 + 168), *(void *)(v0 + 176));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000112AC();
  return v1();
}

uint64_t sub_100184308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[105] = v3;
  v4[104] = a3;
  v4[103] = a2;
  v4[102] = a1;
  uint64_t v5 = type metadata accessor for NWEndpoint();
  v4[106] = v5;
  v4[107] = *(void *)(v5 - 8);
  v4[108] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v4[109] = v6;
  v4[110] = *(void *)(v6 - 8);
  v4[111] = swift_task_alloc();
  v4[112] = swift_task_alloc();
  v4[113] = swift_task_alloc();
  v4[114] = swift_task_alloc();
  return _swift_task_switch(sub_100184458, v3, 0);
}

uint64_t sub_100184458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_1000184F4();
  a25 = v28;
  a26 = v29;
  sub_1001871B4();
  a24 = v27;
  uint64_t v30 = *(void *)(v27 + 832);
  static os_log_type_t.info.getter();
  sub_1001875C4();
  a13 = 0;
  a14 = v31;
  _StringGuts.grow(_:)(41);
  uint64_t v32 = a14;
  *(void *)(v27 + 744) = a13;
  *(void *)(v27 + 752) = v32;
  sub_100010A64();
  v33._uint64_t countAndFlagsBits = 0xD000000000000027;
  String.append(_:)(v33);
  *(void *)(v27 + 776) = v30;
  type metadata accessor for PeerConnection();
  sub_1001877A4();
  _print_unlocked<A, B>(_:_:)();
  static GKLog.match.getter();
  sub_100017DA4();
  Swift::String v34 = Logger.logObject.getter();
  if (os_log_type_enabled(v34, v26))
  {
    uint64_t v73 = *(void *)(v27 + 912);
    uint64_t v35 = *(void *)(v27 + 880);
    a9 = v27 + 808;
    a10 = *(void *)(v27 + 872);
    sub_100016FF0();
    a13 = sub_100011BBC();
    uint64_t v36 = sub_1001878F8(4.8149e-34);
    *(void *)(v27 + 808) = sub_100187400(v36, v37, &a13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100017D30();
    sub_100187268((void *)&_mh_execute_header, v34, v26, "Nearby - %s");
    swift_arrayDestroy();
    sub_100010D7C();
    sub_100010D7C();

    uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
    v38(v73, a10);
  }
  else
  {
    uint64_t v39 = *(void *)(v27 + 880);
    sub_100017E0C();

    uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    uint64_t v40 = sub_10018700C();
    ((void (*)(uint64_t))v38)(v40);
  }
  swift_bridgeObjectRelease();
  *(void *)(v27 + 920) = v38;
  sub_100163CE4(0, (unint64_t *)&unk_100327280);
  sub_10000D938(&qword_1003265C8);
  uint64_t v41 = sub_10001715C();
  uint64_t v74 = 1;
  *(_OWORD *)(v41 + 16) = xmmword_10024F850;
  uint64_t v42 = sub_100163CE4(0, &qword_1003265D8);
  *(void *)(v41 + 32) = v42;
  uint64_t v43 = sub_10001715C();
  *(_OWORD *)(v43 + 16) = xmmword_10024F850;
  *(void *)(v43 + 32) = v42;
  uint64_t v44 = static NSKeyedUnarchiver.unarchivedDictionary(keysOfClasses:objectsOfClasses:from:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v44)
  {
    static os_log_type_t.debug.getter();
    sub_100187280();
    uint64_t v62 = Logger.logObject.getter();
    if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
    {
      a10 = v27 + 792;
      uint64_t v74 = *(void *)(v27 + 888);
      unint64_t v63 = (uint8_t *)sub_100016FF0();
      a13 = sub_100011BBC();
      *(_DWORD *)unint64_t v63 = 136315138;
      *(void *)(v27 + 792) = sub_100174CE4(0xD000000000000029, 0x80000001002B07F0, &a13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "Nearby - %s", v63, 0xCu);
      sub_100186FF0();
      sub_100010D7C();
      sub_100010D7C();
    }

    sub_100010F20();
    ((void (*)(void))v38)();
    goto LABEL_34;
  }
  sub_1001878E4();
  *(void *)(v27 + 696) = v45;
  *(void *)(v27 + 704) = 0xE800000000000000;
  AnyHashable.init<A>(_:)();
  sub_100018344();
  sub_100169A40(v46, v47);
  sub_1001658C4(v27 + 296);
  if (*(void *)(v27 + 432))
  {
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_33;
    }
    uint64_t v48 = *(void *)(v27 + 680);
    *(void *)(v27 + 928) = v48;
    uint64_t v49 = *(void *)(v27 + 688);
    *(void *)(v27 + 936) = v49;
    *(void *)(v27 + 632) = 101;
    *(void *)(v27 + 640) = 0xE100000000000000;
    AnyHashable.init<A>(_:)();
    sub_100169A40(v44, (_OWORD *)(v27 + 440));
    sub_1001658C4(v27 + 256);
    if (*(void *)(v27 + 464))
    {
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_32;
      }
      uint64_t v50 = *(void *)(v27 + 616);
      uint64_t v51 = *(void *)(v27 + 624);
      *(void *)(v27 + 944) = v51;
      *(void *)(v27 + 584) = 104;
      *(void *)(v27 + 592) = 0xE100000000000000;
      AnyHashable.init<A>(_:)();
      sub_1001877A4();
      sub_100169A40(v52, v53);
      sub_1001658C4(v27 + 176);
      if (*(void *)(v27 + 528))
      {
        if ((swift_dynamicCast() & 1) == 0)
        {
          swift_bridgeObjectRelease();
LABEL_32:
          swift_bridgeObjectRelease();
LABEL_33:
          swift_bridgeObjectRelease();
          goto LABEL_34;
        }
        uint64_t v74 = *(void *)(v27 + 600);
        uint64_t v54 = *(void *)(v27 + 608);
        *(void *)(v27 + 952) = v54;
        *(void *)(v27 + 648) = 28776;
        *(void *)(v27 + 656) = 0xE200000000000000;
        AnyHashable.init<A>(_:)();
        sub_100169A40(v44, (_OWORD *)(v27 + 472));
        sub_1001658C4(v27 + 216);
        if (*(void *)(v27 + 496))
        {
          if ((swift_dynamicCast() & 1) == 0)
          {
LABEL_31:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_32;
          }
          a10 = *(void *)(v27 + 664);
          uint64_t v55 = *(void *)(v27 + 672);
          *(void *)(v27 + 960) = v55;
          *(void *)(v27 + 712) = 0x4449726579616C70;
          *(void *)(v27 + 720) = 0xE800000000000000;
          AnyHashable.init<A>(_:)();
          sub_100169A40(v44, (_OWORD *)(v27 + 376));
          swift_bridgeObjectRelease();
          sub_1001658C4(v27 + 336);
          if (*(void *)(v27 + 400))
          {
            if (swift_dynamicCast())
            {
              uint64_t v56 = *(void *)(v27 + 728);
              uint64_t v57 = *(void *)(v27 + 736);
              *(void *)(v27 + 968) = v57;
              *(void *)(v27 + 16) = v48;
              *(void *)(v27 + 24) = v49;
              *(void *)(v27 + 32) = v50;
              *(void *)(v27 + 40) = v51;
              *(void *)(v27 + 48) = v74;
              *(void *)(v27 + 56) = v54;
              *(void *)(v27 + 64) = a10;
              *(void *)(v27 + 72) = v55;
              *(void *)(v27 + 80) = v56;
              *(void *)(v27 + 88) = v57;
              swift_bridgeObjectRetain();
              uint64_t v58 = (void *)swift_task_alloc();
              *(void *)(v27 + 976) = v58;
              *uint64_t v58 = v27;
              v58[1] = sub_100184CFC;
              sub_100011220();
              return sub_1001A6358(v59);
            }
            goto LABEL_31;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v64 = v27 + 376;
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v64 = v27 + 472;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v64 = v27 + 504;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v64 = v27 + 440;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v64 = v27 + 408;
  }
  sub_100018600(v64, &qword_100326FD0);
LABEL_34:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100017860();
  sub_100011220();
  return v66(v65, v66, v67, v68, v69, v70, v71, v72, a9, a10, v74, 2, a13, a14, a15, a16, a17, a18);
}

uint64_t sub_100184CFC()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  swift_task_dealloc();
  sub_100186FC8();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100184DD8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__src, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28)
{
  sub_100187538();
  a27 = v29;
  a28 = v30;
  a26 = v28;
  uint64_t v31 = v28 + 12;
  uint64_t v32 = v28[104];
  sub_10001749C();
  swift_retain();
  sub_1001DD2A8();
  swift_endAccess();
  swift_bridgeObjectRelease();
  if (*(void *)(v32 + 32))
  {
    swift_retain();
    os_log_type_t v33 = static os_log_type_t.info.getter();
    static GKLog.match.getter();
    Swift::String v34 = Logger.logObject.getter();
    BOOL v35 = os_log_type_enabled(v34, v33);
    uint64_t v36 = (void (*)(uint64_t, uint64_t))v28[115];
    uint64_t v37 = v28[113];
    uint64_t v38 = v28[109];
    if (v35)
    {
      uint64_t v39 = (_DWORD *)sub_100016FF0();
      a16 = sub_100011BBC();
      _DWORD *v39 = 136315138;
      sub_100010A64();
      v28[100] = sub_100174CE4(v40, v41, &a16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100187268((void *)&_mh_execute_header, v34, v33, "Nearby - %s");
      sub_1001871EC();
      sub_100010D7C();
      sub_100010D7C();

      sub_100010F20();
      v42();
    }
    else
    {

      v36(v37, v38);
    }
    uint64_t v43 = v28[108];
    NWConnection.endpoint.getter();
    sub_10001749C();
    sub_10019BF40(v43);
    swift_endAccess();
    swift_release();
    uint64_t v44 = sub_1001877DC();
    v45(v44);
    swift_release();
    uint64_t v31 = v28 + 12;
  }
  os_log_type_t v46 = static os_log_type_t.info.getter();
  sub_1001872E0();
  _StringGuts.grow(_:)(64);
  uint64_t v47 = a17;
  v28[95] = a16;
  v28[96] = v47;
  sub_100010A64();
  v48._uint64_t countAndFlagsBits = 0xD00000000000003ELL;
  String.append(_:)(v48);
  memcpy(v31, v28 + 2, 0x50uLL);
  _print_unlocked<A, B>(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static GKLog.match.getter();
  sub_100017DA4();
  uint64_t v49 = Logger.logObject.getter();
  BOOL v50 = os_log_type_enabled(v49, v46);
  uint64_t v51 = (void (*)(uint64_t))v28[115];
  if (v50)
  {
    sub_100016FF0();
    a16 = sub_100011BBC();
    uint64_t v52 = sub_1001878F8(4.8149e-34);
    v28[98] = sub_100187400(v52, v53, &a16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100017D30();
    sub_100187268((void *)&_mh_execute_header, v49, v46, "Nearby - %s");
    sub_1000172D0();
    sub_100010D7C();
    sub_100010D7C();

    sub_100010F20();
    v54();
  }
  else
  {
    sub_100017E0C();

    uint64_t v55 = sub_100187368();
    v51(v55);
  }
  swift_bridgeObjectRelease();
  uint64_t v56 = (void *)swift_task_alloc();
  v28[123] = v56;
  *uint64_t v56 = v28;
  v56[1] = sub_100185230;
  sub_100017B64(v28[104]);
  sub_100018328();
  return sub_100185A98(v57);
}

uint64_t sub_100185230()
{
  sub_100010F2C();
  sub_100011C24();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t sub_100185390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[17] = a3;
  v4[18] = v3;
  v4[15] = a1;
  v4[16] = a2;
  uint64_t v5 = type metadata accessor for Logger();
  v4[19] = v5;
  v4[20] = *(void *)(v5 - 8);
  v4[21] = swift_task_alloc();
  v4[22] = swift_task_alloc();
  v4[23] = swift_task_alloc();
  return _swift_task_switch(sub_100185470, v3, 0);
}

uint64_t sub_100185470()
{
  uint64_t v62 = v1;
  os_log_type_t v2 = v1;
  uint64_t v3 = v1 + 13;
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = (void *)v2[17];
    uint64_t v5 = (void *)v4[6];
    if (v5)
    {
      uint64_t v6 = v4[5];
      uint64_t v7 = v4[7];
      uint64_t v8 = v4[8];
      uint64_t v9 = v4[9];
      uint64_t v10 = v4[10];
      uint64_t v11 = v4[11];
      uint64_t v12 = v4[12];
      uint64_t v13 = v4[13];
      BOOL v14 = (void *)v4[14];
      _DWORD v2[2] = v6;
      v2[3] = v5;
      v2[4] = v7;
      v2[5] = v8;
      v2[6] = v9;
      v2[7] = v10;
      v2[8] = v11;
      v2[9] = v12;
      v2[10] = v13;
      v2[11] = v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      os_log_type_t v15 = static os_log_type_t.info.getter();
      sub_1001872D0();
      _StringGuts.grow(_:)(88);
      sub_100187708();
      sub_100187390(v16 + 16, (uint64_t)"Handle hello response from player: ");
      swift_bridgeObjectRetain();
      uint64_t v55 = v13;
      v17._uint64_t countAndFlagsBits = v13;
      v17._object = v14;
      String.append(_:)(v17);
      uint64_t v54 = v14;
      swift_bridgeObjectRelease();
      sub_100017E24();
      swift_bridgeObjectRetain();
      uint64_t v56 = v6;
      v18._uint64_t countAndFlagsBits = v6;
      v18._object = v5;
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      sub_100187890((uint64_t)", from connection: ");
      v19._uint64_t countAndFlagsBits = sub_1001A6204();
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v20._uint64_t countAndFlagsBits = 0x742068737550202ELL;
      v20._object = (void *)0xEE00203A6E656B6FLL;
      String.append(_:)(v20);
      v21._uint64_t countAndFlagsBits = Data.description.getter();
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      unint64_t v22 = v61[1];
      uint64_t v53 = v61[0];
      static GKLog.match.getter();
      swift_bridgeObjectRetain_n();
      uint64_t v23 = Logger.logObject.getter();
      if (os_log_type_enabled(v23, v15))
      {
        uint64_t v24 = (uint8_t *)sub_100016FF0();
        v61[0] = sub_100011BBC();
        *(_DWORD *)uint64_t v24 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v25 = sub_100174CE4(v53, v22, v61);
        sub_100017550(v25, v2 + 14);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v23, v15, "Nearby - %s", v24, 0xCu);
        swift_arrayDestroy();
        sub_100010D7C();
        sub_100010D7C();

        sub_10018735C();
        v26();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease_n();

        sub_1001877F0();
        sub_10018735C();
        v42();
        swift_bridgeObjectRelease();
      }
      uint64_t v44 = v2[15];
      unint64_t v43 = v2[16];
      NSString v45 = String._bridgeToObjectiveC()();
      NSString v46 = String._bridgeToObjectiveC()();
      sub_10017A77C(v44, v43);
      sub_1001869EC(v56, (uint64_t)v5);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [Strong playerFound:v45 deviceID:v46 isa:v55 discoveryInfo:v54];
    }
    else
    {
      static os_log_type_t.debug.getter();
      sub_100187280();
      BOOL v35 = Logger.logObject.getter();
      BOOL v36 = os_log_type_enabled(v35, v0);
      uint64_t v37 = v2[22];
      uint64_t v39 = v2[19];
      uint64_t v38 = v2[20];
      if (v36)
      {
        uint64_t v58 = v2[22];
        uint64_t v40 = (_DWORD *)sub_100016FF0();
        uint64_t v41 = sub_100011BBC();
        _DWORD *v40 = 136315138;
        v61[0] = v41;
        uint64_t *v3 = sub_100017E9C(0xD000000000000037, (uint64_t)"Cannot handle hello response without valid remote info.");
        sub_1001876DC();
        sub_100187178((void *)&_mh_execute_header, v35, v0, "Nearby - %s");
        sub_100186FF0();
        sub_100010D7C();
        sub_100010D7C();

        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v58, v39);
      }
      else
      {

        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
      }
    }
    swift_unknownObjectRelease();
  }
  else
  {
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    static GKLog.match.getter();
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = v27;
    BOOL v30 = os_log_type_enabled(v28, v27);
    uint64_t v31 = v2[20];
    if (v30)
    {
      uint64_t v60 = v2[21];
      uint64_t v57 = v2[19];
      uint64_t v32 = (_DWORD *)sub_100016FF0();
      v61[0] = sub_100011BBC();
      *uint64_t v32 = 136315138;
      sub_100187708();
      uint64_t v34 = sub_100017E9C(v33 + 27, (uint64_t)"Cannot handle hello response without delegate.");
      sub_100187798(v34);
      sub_100187454();
      sub_100187178((void *)&_mh_execute_header, v28, v29, "Nearby - %s");
      sub_100187054();
      sub_100010D7C();
      sub_100010D7C();

      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v60, v57);
    }
    else
    {

      uint64_t v48 = sub_100187588();
      v50(v48, v49);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v51 = (uint64_t (*)(void))v2[1];
  return v51();
}

uint64_t sub_100185A98(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[7] = v3;
  v2[8] = *(void *)(v3 - 8);
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  v2[11] = swift_task_alloc();
  return _swift_task_switch(sub_100185B74, v1, 0);
}

uint64_t sub_100185B74()
{
  os_log_type_t v2 = (void *)v0[5];
  if (v2[4])
  {
    uint64_t v3 = (void *)v2[6];
    if (v3)
    {
      uint64_t v4 = (void *)v2[14];
      uint64_t v46 = v2[13];
      uint64_t v5 = v2[5];
      type metadata accessor for NWProtocolFramer.Message();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v6 = sub_10018CA08();
      v0[12] = v6;
      sub_10000D938(&qword_100326738);
      uint64_t v7 = sub_10001715C();
      *(_OWORD *)(v7 + 16) = xmmword_10024F840;
      *(void *)(v7 + 32) = v6;
      specialized Array._endMutation()();
      type metadata accessor for NWConnection.ContentContext();
      swift_allocObject();
      swift_retain();
      sub_100017BDC();
      v0[13] = NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)();
      os_log_type_t v45 = static os_log_type_t.info.getter();
      sub_1001872D0();
      _StringGuts.grow(_:)(70);
      sub_1001871E0();
      sub_100187390(v8 + 16, (uint64_t)"Sending hello response to player: ");
      swift_bridgeObjectRetain();
      v9._uint64_t countAndFlagsBits = v46;
      v9._object = v4;
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      sub_100017E24();
      swift_bridgeObjectRetain();
      v10._uint64_t countAndFlagsBits = v5;
      v10._object = v3;
      String.append(_:)(v10);
      sub_1001869EC(v5, (uint64_t)v3);
      swift_bridgeObjectRelease();
      v11._uint64_t countAndFlagsBits = sub_10018787C();
      String.append(_:)(v11);
      v12._uint64_t countAndFlagsBits = sub_1001A6204();
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      static GKLog.match.getter();
      sub_100017DA4();
      uint64_t v13 = Logger.logObject.getter();
      BOOL v14 = os_log_type_enabled(v13, v45);
      uint64_t v15 = v0[8];
      if (v14)
      {
        uint64_t v48 = v0[7];
        uint64_t v47 = v0[11];
        uint64_t v16 = (_DWORD *)sub_100016FF0();
        sub_100011BBC();
        *uint64_t v16 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v17 = sub_1001877A4();
        v0[4] = sub_100174CE4(v17, v18, v19);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_100017D30();
        sub_100010F60((void *)&_mh_execute_header, v13, v45, "Nearby - %s");
        sub_1000172D0();
        sub_100010D7C();
        sub_100010D7C();

        (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v47, v48);
      }
      else
      {
        sub_100017E0C();

        uint64_t v36 = sub_1001877B0();
        v38(v36, v37);
      }
      swift_bridgeObjectRelease();
      uint64_t v39 = (void *)swift_task_alloc();
      v0[14] = v39;
      void *v39 = v0;
      v39[1] = sub_10018613C;
      sub_100018344();
      return sub_1001A57B0();
    }
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    static GKLog.match.getter();
    os_log_type_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = v28;
    BOOL v31 = os_log_type_enabled(v29, v28);
    uint64_t v32 = v0[10];
    uint64_t v33 = v0[8];
    if (v31)
    {
      uint64_t v50 = v0[7];
      uint64_t v34 = (_DWORD *)sub_100016FF0();
      sub_100011BBC();
      *uint64_t v34 = 136315138;
      sub_1001871E0();
      v0[3] = sub_100017E9C(v35 + 35, (uint64_t)"Cannot send hello response without valid remote info.");
      sub_1001875F4();
      sub_1001876DC();
      sub_100187178((void *)&_mh_execute_header, v29, v30, "Nearby - %s");
      sub_100186FF0();
      sub_100010D7C();
      sub_100010D7C();

      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v50);
    }
    else
    {

      uint64_t v41 = sub_100187368();
      v43(v41, v42);
    }
  }
  else
  {
    static os_log_type_t.debug.getter();
    sub_100187714();
    Swift::String v20 = Logger.logObject.getter();
    BOOL v21 = sub_100017200(v20);
    uint64_t v23 = v0[8];
    uint64_t v22 = v0[9];
    uint64_t v24 = v0[7];
    if (v21)
    {
      uint64_t v49 = v0[9];
      uint64_t v25 = (_DWORD *)sub_100016FF0();
      sub_100011BBC();
      *uint64_t v25 = 136315138;
      sub_1001871E0();
      uint64_t v27 = sub_100017E9C(v26 + 30, (uint64_t)"Cannot send hello response without nwConnection.");
      sub_100187798(v27);
      sub_100187454();
      sub_100187268((void *)&_mh_execute_header, v1, (os_log_type_t)v2, "Nearby - %s");
      sub_100187054();
      sub_100010D7C();
      sub_100010D7C();

      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v49, v24);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100017860();
  return v44();
}

uint64_t sub_10018613C()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  swift_task_dealloc();
  sub_100186FC8();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100186218()
{
  sub_100010DA4();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100017860();
  return v0();
}

uint64_t type metadata accessor for PeerDiscovery()
{
  return self;
}

uint64_t destroy for PeerDiscoveryInfo()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for PeerDiscoveryInfo(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PeerDiscoveryInfo(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for PeerDiscoveryInfo(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x50uLL);
}

void *assignWithTake for PeerDiscoveryInfo(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PeerDiscoveryInfo(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 80))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PeerDiscoveryInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PeerDiscoveryInfo()
{
  return &type metadata for PeerDiscoveryInfo;
}

uint64_t sub_100186580()
{
  _Block_release(*(const void **)(v0 + 40));
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001865D8()
{
  sub_100010F2C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100008DC0(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100171E3C;
  sub_100187958();
  return v3();
}

uint64_t sub_100186690()
{
  sub_1000112E8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100008DC0(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100171E3C;
  uint64_t v3 = sub_1001870F4();
  return v4(v3);
}

uint64_t sub_100186724()
{
  _Block_release(*(const void **)(v0 + 24));
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10018676C()
{
  sub_1000112E8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100008DC0(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100171E3C;
  uint64_t v3 = sub_100017130();
  return v4(v3);
}

uint64_t sub_100186818()
{
  sub_1000112E8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100008DC0(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100171648;
  uint64_t v3 = sub_1001870F4();
  return v4(v3);
}

uint64_t sub_1001868B0()
{
  _Block_release(*(const void **)(v0 + 16));
  swift_release();
  uint64_t v1 = sub_100018350();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1001868E8()
{
  sub_1000112E8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100008DC0(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100171E3C;
  uint64_t v3 = sub_1001870F4();
  return v4(v3);
}

uint64_t sub_10018697C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1001869EC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100186A5C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10000D938(a3);
  sub_100187764();
  uint64_t v4 = sub_100010F54();
  v5(v4);
  return a2;
}

uint64_t sub_100186AB0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = *a2;
  long long v6 = *(_OWORD *)(a2 + 1);
  uint64_t v7 = a2[3];
  long long v20 = *((_OWORD *)a2 + 2);
  long long v21 = v6;
  uint64_t v8 = a2[6];
  long long v19 = *(_OWORD *)(a2 + 7);
  uint64_t v9 = a2[9];
  uint64_t v10 = type metadata accessor for NWEndpoint();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  BOOL v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(a4 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(void *)(a4 + 24) = &off_1002DD2C0;
  swift_unknownObjectWeakAssign();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a1, v10);
  type metadata accessor for NWParameters();
  sub_1001C3B6C();
  type metadata accessor for NWConnection();
  swift_allocObject();
  uint64_t v15 = NWConnection.init(to:using:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
  *(void *)(a4 + 32) = v15;
  swift_release();
  uint64_t v16 = *(void *)(a4 + 40);
  uint64_t v17 = *(void *)(a4 + 48);
  *(void *)(a4 + 40) = v22;
  *(_OWORD *)(a4 + 48) = v21;
  *(void *)(a4 + 64) = v7;
  *(_OWORD *)(a4 + 72) = v20;
  *(void *)(a4 + 88) = v8;
  *(_OWORD *)(a4 + 96) = v19;
  *(void *)(a4 + 112) = v9;
  sub_1001869EC(v16, v17);
  return a4;
}

void *sub_100186CB0(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_100186D04(uint64_t a1)
{
  return sub_10017EF28(a1) & 1;
}

uint64_t sub_100186D24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D938(&qword_100326858);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100186D8C(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100186DD4()
{
  uint64_t v1 = type metadata accessor for NWBrowser.Result();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100186EA8()
{
  sub_100010F2C();
  type metadata accessor for NWBrowser.Result();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100008DC0(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100171E3C;
  sub_100187958();
  return sub_100180C18(v3, v4, v5, v6, v7);
}

uint64_t sub_100186F90()
{
  swift_release();
  uint64_t v0 = sub_100018350();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100186FD4()
{
  return swift_task_alloc();
}

uint64_t sub_100186FF0()
{
  return swift_arrayDestroy();
}

uint64_t sub_10018700C()
{
  return v0;
}

void sub_10018701C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_10018703C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return a11;
}

uint64_t sub_100187054()
{
  return swift_arrayDestroy();
}

uint64_t sub_100187070@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_100187080()
{
  return v0;
}

uint64_t sub_10018709C()
{
  return v0;
}

uint64_t sub_1001870F4()
{
  return v0;
}

BOOL sub_10018710C(NSObject *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_100187128()
{
  *(void *)(v1 + 224) = *(void *)(v2 + 8);
  *(void *)(v1 + 232) = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  return v0;
}

void sub_100187178(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t sub_1001871C0()
{
  return swift_task_dealloc();
}

uint64_t sub_1001871EC()
{
  return swift_arrayDestroy();
}

uint64_t sub_100187208()
{
  return v0;
}

void sub_10018721C(uint64_t a1@<X8>)
{
  unint64_t v3 = 0xD000000000000035;
  unint64_t v2 = (a1 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&v3);
}

uint64_t sub_100187248()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

void sub_100187268(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t sub_100187280()
{
  return static GKLog.match.getter();
}

uint64_t sub_100187298()
{
  return v0;
}

uint64_t sub_1001872B8()
{
  return swift_beginAccess();
}

void sub_1001872D0()
{
  *(void *)(v0 - 88) = 0;
  *(void *)(v0 - 80) = 0xE000000000000000;
}

void sub_1001872F0(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t sub_100187308()
{
  return *(void *)(v0 + 72);
}

uint64_t sub_100187324()
{
  return *(void *)(v0 + 72);
}

uint64_t sub_100187340()
{
  return v0;
}

uint64_t sub_100187368()
{
  return v0;
}

uint64_t sub_100187374()
{
  return v0;
}

void sub_100187390(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

void sub_1001873A8(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t sub_1001873C0()
{
  return swift_getErrorValue();
}

uint64_t sub_1001873E8()
{
  return v0;
}

uint64_t sub_100187400(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_100174CE4(v4, v3, a3);
}

uint64_t sub_100187418()
{
  return static GKLog.match.getter();
}

void sub_100187430()
{
  _StringGuts.grow(_:)(112);
}

uint64_t sub_100187454()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1001874B4()
{
  return v0;
}

uint64_t sub_1001874CC(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1001874F0()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t sub_100187514(uint64_t a1)
{
  *uint64_t v1 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100187554()
{
  return v0;
}

uint64_t sub_10018756C()
{
  return v0;
}

uint64_t sub_100187588()
{
  return v0;
}

uint64_t sub_1001875D0(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1001875F4()
{
  return v0;
}

uint64_t sub_100187600()
{
  return swift_arrayDestroy();
}

uint64_t sub_10018761C()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100187634()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_10018764C()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100187664@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  return sub_100174CE4(0xD000000000000027, (a1 - 32) | 0x8000000000000000, (uint64_t *)va);
}

uint64_t sub_100187688()
{
  return v0;
}

uint64_t sub_1001876A0()
{
  return v0;
}

BOOL sub_1001876B8(NSObject *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_1001876DC()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100187714()
{
  return static GKLog.match.getter();
}

uint64_t sub_10018774C()
{
  return swift_beginAccess();
}

uint64_t sub_100187778(uint64_t a1)
{
  *(void *)(a1 + 24) = 0;
  return swift_unknownObjectWeakInit();
}

void *sub_100187798(uint64_t a1)
{
  *uint64_t v1 = a1;
  return v1;
}

uint64_t sub_1001877A4()
{
  return v0;
}

uint64_t sub_1001877B0()
{
  return v0;
}

uint64_t sub_1001877BC()
{
  return static os_log_type_t.info.getter();
}

uint64_t sub_1001877DC()
{
  return v0;
}

uint64_t sub_1001877F0()
{
  return v0;
}

uint64_t sub_1001877FC()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100187814()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_10018782C()
{
  return v0;
}

uint64_t sub_100187838()
{
  return sub_100175574(v0, v1);
}

uint64_t sub_100187850()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100187868(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1 + 16;
}

unint64_t sub_10018787C()
{
  return 0xD000000000000012;
}

void sub_100187890(uint64_t a1@<X8>)
{
  unint64_t v3 = 0xD000000000000013;
  unint64_t v2 = (a1 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&v3);
}

uint64_t sub_1001878C4()
{
  return type metadata accessor for PeerListener();
}

uint64_t sub_1001878F8(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100187918(uint64_t result)
{
  *(void *)(v1 + 240) = result;
  return result;
}

uint64_t sub_100187938(uint64_t a1)
{
  *(void *)(a1 + 24) = 0;
  return swift_unknownObjectWeakInit();
}

void sub_10018796C(uint64_t a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v55 = a2;
  uint64_t v57 = a1;
  uint64_t v4 = sub_10000D938(&qword_100326298);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v54 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v10, v13);
  uint64_t v16 = (char *)&v53 - v15;
  uint64_t v18 = __chkstk_darwin(v14, v17);
  long long v20 = (char *)&v53 - v19;
  __chkstk_darwin(v18, v21);
  uint64_t v23 = (char *)&v53 - v22;
  uint64_t v56 = swift_allocObject();
  *(void *)(v56 + 16) = a3;
  _Block_copy(a3);
  _Block_copy(a3);
  static GKLog.daemon.getter();
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "FriendBulletin loadBulletinsForPushNotification:", v26, 2u);
    swift_slowDealloc();
  }

  uint64_t v27 = *(void (**)(char *, uint64_t))(v8 + 8);
  v27(v23, v7);
  uint64_t v58 = 99;
  unint64_t v59 = 0xE100000000000000;
  AnyHashable.init<A>(_:)();
  uint64_t v28 = v57;
  sub_100169A40(v57, &v61);
  sub_1001658C4((uint64_t)v60);
  if (!v62)
  {
    sub_10000DB3C((uint64_t)&v61, &qword_100326FD0);
LABEL_15:
    static GKLog.daemon.getter();
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "FriendBulletin loadBulletinsForPushNotification: failed to get category", v34, 2u);
      swift_slowDealloc();
    }

    v27(v12, v7);
    goto LABEL_18;
  }
  if ((swift_dynamicCast() & 1) == 0 || v58 != 52) {
    goto LABEL_15;
  }
  uint64_t v58 = 116;
  unint64_t v59 = 0xE100000000000000;
  AnyHashable.init<A>(_:)();
  sub_100169A40(v28, &v61);
  sub_1001658C4((uint64_t)v60);
  if (v62)
  {
    if (swift_dynamicCast())
    {
      uint64_t v30 = v58;
      unint64_t v29 = v59;
      BOOL v31 = v58 == 0x64657469766E69 && v59 == 0xE700000000000000;
      if (v31 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v41 = v56;
        uint64_t v40 = v57;
        uint64_t v43 = (uint64_t)v54;
        uint64_t v42 = v55;
        id v44 = [self controller];
        [v44 reportFriendInviteActivityEventAtStage:2 hostApp:0];
        char v45 = 1;
LABEL_25:

        uint64_t v46 = type metadata accessor for TaskPriority();
        sub_10000D97C(v43, 1, 1, v46);
        uint64_t v47 = swift_allocObject();
        *(void *)(v47 + 16) = 0;
        *(void *)(v47 + 24) = 0;
        *(void *)(v47 + 32) = v42;
        *(void *)(v47 + 40) = v40;
        *(unsigned char *)(v47 + 48) = v45;
        *(void *)(v47 + 56) = sub_10018C300;
        *(void *)(v47 + 64) = v41;
        swift_bridgeObjectRetain();
        swift_retain();
        sub_100006CBC();
        swift_release();
        goto LABEL_19;
      }
      if (v30 == 0x6465747065636361 && v29 == 0xE800000000000000)
      {
        swift_bridgeObjectRelease();
        uint64_t v40 = v57;
      }
      else
      {
        char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t v40 = v57;
        if ((v49 & 1) == 0)
        {
          static GKLog.daemon.getter();
          uint64_t v50 = Logger.logObject.getter();
          os_log_type_t v51 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v50, v51))
          {
            uint64_t v52 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v52 = 0;
            _os_log_impl((void *)&_mh_execute_header, v50, v51, "FriendBulletin loadBulletinsForPushNotification: unknown type", v52, 2u);
            swift_slowDealloc();
          }

          v27(v20, v7);
LABEL_18:
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          ((void (**)(void, Class))a3)[2](a3, isa);

          goto LABEL_19;
        }
      }
      id v44 = [self controller];
      [v44 reportFriendInviteActivityEventAtStage:8 hostApp:0];
      char v45 = 0;
      uint64_t v42 = v55;
      uint64_t v41 = v56;
      uint64_t v43 = (uint64_t)v54;
      goto LABEL_25;
    }
  }
  else
  {
    sub_10000DB3C((uint64_t)&v61, &qword_100326FD0);
  }
  uint64_t v36 = v55;
  static GKLog.daemon.getter();
  uint64_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "FriendBulletin loadBulletinsForPushNotification: failed to get type, attempting to parse using the old protocol", v39, 2u);
    uint64_t v28 = v57;
    swift_slowDealloc();
  }

  v27(v16, v7);
  _Block_copy(a3);
  sub_100189BE4(v28, v36, a3);
LABEL_19:
  swift_release();
  _Block_release(a3);
  _Block_release(a3);
}

uint64_t sub_10018809C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  v8[3] = a7;
  void v8[4] = a8;
  char v10 = a6 & 1;
  uint64_t v11 = type metadata accessor for Logger();
  void v8[5] = v11;
  v8[6] = *(void *)(v11 - 8);
  v8[7] = swift_task_alloc();
  uint64_t v12 = (void *)swift_task_alloc();
  uint8_t v8[8] = v12;
  *uint64_t v12 = v8;
  v12[1] = sub_1001881B0;
  return sub_1001886A0(a5, v10, (uint64_t)(v8 + 10));
}

uint64_t sub_1001881B0()
{
  sub_1000112E8();
  uint64_t v3 = v2;
  sub_100011168();
  uint64_t v5 = v4;
  uint64_t v6 = *v1;
  sub_100010D94();
  *uint64_t v7 = v6;
  swift_task_dealloc();
  if (v0) {
    *(unsigned char *)(v5 + 81) = *(unsigned char *)(v5 + 80);
  }
  else {
    *(void *)(v5 + 72) = v3;
  }
  sub_100017040();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_1001882A8()
{
  char v1 = *(unsigned char *)(v0 + 81);
  sub_10018BFCC();
  swift_allocError();
  unsigned char *v2 = v1;
  swift_errorRetain();
  static GKLog.daemon.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)sub_100016FF0();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138412290;
    swift_errorRetain();
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v7;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "FriendBulletin Unable to parse bulletin, bailing. Reason: %@", v5, 0xCu);
    sub_10000D938(&qword_100326430);
    swift_arrayDestroy();
    sub_100010D7C();
    sub_100010D7C();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v9 = *(void *)(v0 + 48);
  uint64_t v8 = *(void *)(v0 + 56);
  uint64_t v10 = *(void *)(v0 + 40);
  uint64_t v11 = *(void (**)(void *))(v0 + 24);

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  v11(_swiftEmptyArrayStorage);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  sub_1000112AC();
  return v12();
}

uint64_t sub_1001884A8()
{
  sub_1000112E8();
  char v1 = *(void **)(v0 + 72);
  uint64_t v2 = *(void (**)(uint64_t))(v0 + 24);
  sub_10000D938(&qword_1003268F0);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_10024F850;
  *(void *)(v3 + 56) = type metadata accessor for FriendBulletin();
  *(void *)(v3 + 32) = v1;
  id v4 = v1;
  v2(v3);

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  sub_1000112AC();
  return v5();
}

BOOL sub_100188604(char a1, char a2)
{
  return a1 == a2;
}

void sub_100188614(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int sub_10018863C(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL sub_100188684(char *a1, char *a2)
{
  return sub_100188604(*a1, *a2);
}

Swift::Int sub_100188690()
{
  return sub_10018863C(*v0);
}

void sub_100188698(uint64_t a1)
{
  sub_100188614(a1, *v1);
}

uint64_t sub_1001886A0(uint64_t a1, char a2, uint64_t a3)
{
  *(void *)(v4 + 1376) = a3;
  *(void *)(v4 + 1368) = v3;
  *(unsigned char *)(v4 + 1508) = a2;
  *(void *)(v4 + 1360) = a1;
  return sub_1000111C0((uint64_t)sub_1001886C4);
}

uint64_t sub_1001886C4()
{
  sub_100017D24();
  sub_1001AF298(*(void *)(v0 + 1360));
  sub_10001A314(v0 + 320, v0 + 168, &qword_1003268C8);
  if (sub_10018BFA8(v0 + 168) == 1)
  {
    *(unsigned char *)(v0 + 1506) = 0;
    sub_10018BFCC();
    swift_willThrowTypedImpl();
    char v1 = 0;
    goto LABEL_29;
  }
  memcpy((void *)(v0 + 16), (const void *)(v0 + 168), 0x98uLL);
  sub_100017EB8();
  sub_10001A314(v2, v3, v4);
  sub_10001A314(v0 + 520, v0 + 472, &qword_1003268D8);
  if (!*(void *)(v0 + 480))
  {
    sub_10018C018((uint64_t *)(v0 + 320));
    char v1 = 1;
    *(unsigned char *)(v0 + 1507) = 1;
    sub_10018BFCC();
LABEL_17:
    swift_willThrowTypedImpl();
    goto LABEL_29;
  }
  uint64_t v5 = (_OWORD *)(v0 + 568);
  long long v6 = *(_OWORD *)(v0 + 488);
  *(_OWORD *)(v0 + 568) = *(_OWORD *)(v0 + 472);
  *(_OWORD *)(v0 + 584) = v6;
  *(_OWORD *)(v0 + 600) = *(_OWORD *)(v0 + 504);
  sub_10018C1D8((uint64_t *)(v0 + 520));
  sub_10018C018((uint64_t *)(v0 + 320));
  type metadata accessor for FriendBulletin();
  uint64_t v7 = swift_bridgeObjectRetain();
  id v8 = sub_100189778(v7);
  *(void *)(v0 + 1384) = v8;
  if (!v8)
  {
    *(_OWORD *)(v0 + 1264) = *v5;
    sub_100179E58(v0 + 1264);
    sub_10001A314(v0 + 584, v0 + 1312, &qword_1003262D0);
    sub_100179E58(v0 + 1312);
    sub_1000169A8(v0 + 600);
    sub_100179E58(v0 + 1328);
    char v1 = 2;
    *(unsigned char *)(v0 + 1505) = 2;
    sub_10018BFCC();
    goto LABEL_17;
  }
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v0 + 1360);
  *(void *)(v0 + 1200) = 0x656C746974;
  *(void *)(v0 + 1208) = 0xE500000000000000;
  AnyHashable.init<A>(_:)();
  sub_100169A40(v10, (_OWORD *)(v0 + 800));
  sub_1001658C4(v0 + 656);
  if (!*(void *)(v0 + 824))
  {
    *(_OWORD *)(v0 + 1168) = *v5;
    sub_100179E58(v0 + 1168);
    sub_10001A314(v0 + 584, v0 + 1184, &qword_1003262D0);
    sub_100179E58(v0 + 1184);
    sub_10001A314(v0 + 600, v0 + 1248, &qword_1003262D0);
    sub_100179E58(v0 + 1248);
    uint64_t v22 = v0 + 800;
LABEL_24:
    sub_10000DB3C(v22, &qword_100326FD0);
LABEL_28:
    char v1 = 3;
    *(unsigned char *)(v0 + 1504) = 3;
    sub_10018BFCC();
    swift_willThrowTypedImpl();

LABEL_29:
    **(unsigned char **)(v0 + 1376) = v1;
    sub_1000112AC();
    sub_10018C70C();
    __asm { BRAA            X1, X16 }
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    *(_OWORD *)(v0 + 992) = *v5;
    sub_100179E58(v0 + 992);
    sub_10001A314(v0 + 584, v0 + 976, &qword_1003262D0);
    sub_100179E58(v0 + 976);
    sub_1000169A8(v0 + 600);
    uint64_t v23 = v0 + 960;
LABEL_27:
    sub_100179E58(v23);
    goto LABEL_28;
  }
  uint64_t v11 = v0 + 736;
  uint64_t v12 = *(void *)(v0 + 1360);
  *(void *)(v0 + 1392) = *(void *)(v0 + 1232);
  *(void *)(v0 + 1400) = *(void *)(v0 + 1240);
  *(void *)(v0 + 1280) = 0x6567617373656DLL;
  *(void *)(v0 + 1288) = 0xE700000000000000;
  AnyHashable.init<A>(_:)();
  sub_100169A40(v12, (_OWORD *)(v0 + 736));
  sub_1001658C4(v0 + 696);
  if (!*(void *)(v0 + 760))
  {
    swift_bridgeObjectRelease();
    *(_OWORD *)(v0 + 1072) = *v5;
    sub_100179E58(v0 + 1072);
    sub_10001A314(v0 + 584, v0 + 1088, &qword_1003262D0);
    sub_100179E58(v0 + 1088);
    sub_10001A314(v0 + 600, v0 + 1104, &qword_1003262D0);
    uint64_t v24 = v0 + 1104;
LABEL_23:
    sub_100179E58(v24);
    uint64_t v22 = v11;
    goto LABEL_24;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v25 = v0 + 912;
    swift_bridgeObjectRelease();
    *(_OWORD *)(v0 + 944) = *v5;
    sub_100179E58(v0 + 944);
    sub_10001A314(v0 + 584, v0 + 928, &qword_1003262D0);
    uint64_t v26 = v0 + 928;
LABEL_26:
    sub_100179E58(v26);
    sub_10001A314(v0 + 600, v25, &qword_1003262D0);
    uint64_t v23 = v25;
    goto LABEL_27;
  }
  uint64_t v11 = v0 + 768;
  uint64_t v13 = *(void *)(v0 + 1360);
  *(void *)(v0 + 1408) = *(void *)(v0 + 1296);
  uint64_t v14 = *(void *)(v0 + 1304);
  *(void *)(v0 + 1416) = v14;
  *(void *)(v0 + 1344) = 0xD000000000000010;
  *(void *)(v0 + 1352) = 0x80000001002B0EA0;
  AnyHashable.init<A>(_:)();
  sub_100169A40(v13, (_OWORD *)(v0 + 768));
  sub_1001658C4(v0 + 616);
  if (!*(void *)(v0 + 792))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_OWORD *)(v0 + 832) = *v5;
    sub_100179E58(v0 + 832);
    sub_10001A314(v0 + 584, v0 + 1040, &qword_1003262D0);
    sub_100179E58(v0 + 1040);
    sub_10001A314(v0 + 600, v0 + 1056, &qword_1003262D0);
    uint64_t v24 = v0 + 1056;
    goto LABEL_23;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v25 = v0 + 864;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_OWORD *)(v0 + 896) = *v5;
    sub_100179E58(v0 + 896);
    sub_10001A314(v0 + 584, v0 + 880, &qword_1003262D0);
    uint64_t v26 = v0 + 880;
    goto LABEL_26;
  }
  *(void *)(v0 + 1424) = *(void *)(v0 + 1216);
  *(void *)(v0 + 1432) = *(void *)(v0 + 1224);
  uint64_t v15 = *(void *)(v0 + 584);
  uint64_t v16 = *(void *)(v0 + 592);
  *(void *)(v0 + 1440) = v16;
  if (v16)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 1448) = v17;
    void *v17 = v0;
    v17[1] = sub_100188EE8;
    sub_100017DDC();
    sub_10018C70C();
    return sub_1001897FC(v18, v19);
  }
  else
  {
    sub_1001DD4AC(*(void *)(v0 + 1392), *(void *)(v0 + 1400), *(void **)(v0 + 1384));
    sub_100018028();
    sub_1001DD4B8(v14, v15, (void *)(v0 + 616));
    sub_10018C790();
    if (v29) {
      sub_10018A4B8();
    }
    else {
      sub_10018A82C();
    }
    *(void *)(v0 + 1472) = *(void *)(*(void *)(sub_10000D938(&qword_100327E70) - 8) + 64);
    *(void *)(v0 + 1480) = swift_task_alloc();
    sub_1000169A8(v0 + 600);
    sub_10001A314(v0 + 1008, v0 + 1024, &qword_1003262D0);
    if (*(void *)(v0 + 1032))
    {
      uint64_t v30 = (void *)swift_task_alloc();
      *(void *)(v0 + 1488) = v30;
      *uint64_t v30 = v0;
      v30[1] = sub_1001892AC;
      sub_10018C774();
      sub_10018C70C();
      return sub_1001B49B8();
    }
    else
    {
      uint64_t v32 = (void *)swift_task_alloc();
      *(void *)(v0 + 1496) = v32;
      *uint64_t v32 = v0;
      v32[1] = sub_1001893F8;
      sub_100017EB8();
      sub_10018C70C();
      return sub_1001B5078();
    }
  }
}

uint64_t sub_100188EE8()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  *(void *)(v4 + 1456) = v3;
  *(void *)(v4 + 1464) = v5;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_100017040();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_100188FD8()
{
  unint64_t v3 = *(void *)(v1 + 1464);
  uint64_t v4 = *(void *)(v1 + 1456);
  sub_1001DD4AC(*(void *)(v1 + 1392), *(void *)(v1 + 1400), *(void **)(v1 + 1384));
  if (v3)
  {
    uint64_t v5 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0) {
      uint64_t v5 = v4 & 0xFFFFFFFFFFFFLL;
    }
    if (v5)
    {
      uint64_t v6 = *(void *)(v1 + 1416);
      uint64_t v7 = *(void *)(v1 + 1408);
      uint64_t v8 = *(void **)(v1 + 1384);
      swift_bridgeObjectRelease();
      *(void *)(v1 + 1152) = v7;
      *(void *)(v1 + 1160) = v6;
      *(void *)(v1 + 1120) = 0xD000000000000014;
      *(void *)(v1 + 1128) = 0x80000001002B0EC0;
      *(void *)(v1 + 1136) = v4;
      *(void *)(v1 + 1144) = v3;
      sub_100166A7C();
      id v9 = v8;
      uint64_t v10 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      uint64_t v12 = v11;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1001DD4B8(v10, v12, v9);

      goto LABEL_8;
    }
    swift_bridgeObjectRelease();
  }
  sub_100018028();
  sub_1001DD4B8(v3, v0, v2);
LABEL_8:
  sub_10018C790();
  if (v13) {
    sub_10018A4B8();
  }
  else {
    sub_10018A82C();
  }
  *(void *)(v1 + 1472) = *(void *)(*(void *)(sub_10000D938(&qword_100327E70) - 8) + 64);
  *(void *)(v1 + 1480) = swift_task_alloc();
  sub_1000169A8(v1 + 600);
  sub_10001A314(v1 + 1008, v1 + 1024, &qword_1003262D0);
  if (*(void *)(v1 + 1032))
  {
    uint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v1 + 1488) = v14;
    *uint64_t v14 = v1;
    v14[1] = sub_1001892AC;
    sub_10018C774();
    return sub_1001B49B8();
  }
  else
  {
    uint64_t v16 = (void *)swift_task_alloc();
    *(void *)(v1 + 1496) = v16;
    *uint64_t v16 = v1;
    v16[1] = sub_1001893F8;
    sub_100017EB8();
    return sub_1001B5078();
  }
}

uint64_t sub_1001892AC()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  swift_task_dealloc();
  sub_100017040();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100189374()
{
  sub_100010DA4();
  *(_OWORD *)(v0 + 848) = *(_OWORD *)(v0 + 568);
  sub_100179E58(v0 + 848);
  swift_bridgeObjectRelease();
  sub_100179E58(v0 + 1008);
  sub_100017040();
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_1001893F8()
{
  uint64_t v1 = *v0;
  sub_100010D94();
  uint64_t *v2 = v1;
  uint64_t *v2 = *v0;
  swift_task_dealloc();
  *(_OWORD *)(v1 + 848) = *(_OWORD *)(v1 + 568);
  sub_100179E58(v1 + 848);
  swift_bridgeObjectRelease();
  sub_100179E58(v1 + 1008);
  sub_100017040();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100189538()
{
  uint64_t v1 = v0[185];
  uint64_t v2 = type metadata accessor for URL();
  sub_100011108();
  uint64_t v4 = v3;
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = swift_task_alloc();
  sub_10018C260(v1, v6);
  int v7 = sub_10000DB14(v6, 1, v2);
  uint64_t v8 = v0[185];
  if (v7 == 1)
  {
    sub_10000DB3C(v0[185], &qword_100327E70);
    sub_10000DB3C(v6, &qword_100327E70);
    swift_task_dealloc();
  }
  else
  {
    id v9 = (void *)v0[173];
    sub_100017C0C();
    v10();
    swift_task_dealloc();
    sub_10000D938(&qword_100326738);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_10024F840;
    uint64_t v12 = swift_task_alloc();
    sub_100017EB8();
    v13();
    id v14 = objc_allocWithZone((Class)type metadata accessor for BulletinAttachment());
    id v15 = v9;
    id v16 = sub_1001C4118(0x656D686361747461, 0xEC000000315F746ELL, v12, 1);
    swift_task_dealloc();
    *(void *)(v11 + 32) = v16;
    specialized Array._endMutation()();
    sub_1001DD4C4(v11, v15);

    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v2);
    sub_10000DB3C(v8, &qword_100327E70);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v18 = v0[173];
  return v17(v18);
}

id sub_100189778(uint64_t a1)
{
  if (a1)
  {
    v2.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v2.super.Class isa = 0;
  }
  id v3 = [objc_allocWithZone(v1) initWithPushNotification:v2.super.isa];

  return v3;
}

uint64_t sub_1001897FC(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 176) = a1;
  *(void *)(v2 + 184) = a2;
  return sub_1000111C0((uint64_t)sub_100189814);
}

uint64_t sub_100189814()
{
  sub_100017D24();
  uint64_t v2 = v0[22];
  uint64_t v1 = v0[23];
  id v3 = [self proxyForLocalPlayer];
  id v4 = [v3 profileServicePrivate];
  v0[24] = v4;

  sub_10000D938(&qword_100326500);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10024F850;
  *(void *)(inited + 32) = v2;
  *(void *)(inited + 40) = v1;
  swift_bridgeObjectRetain();
  sub_1001C7BE4(inited);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  v0[25] = isa;
  swift_bridgeObjectRelease();
  v0[2] = v0;
  v0[7] = v0 + 21;
  v0[3] = sub_1001899C4;
  uint64_t v7 = swift_continuation_init();
  v0[16] = _NSConcreteStackBlock;
  v0[17] = 0x40000000;
  v0[18] = sub_100189B84;
  v0[19] = &unk_1002DD4F0;
  v0[20] = v7;
  [v4 getContactsForContactAssociationIDs:isa completionHandler:v0 + 16];
  sub_10018C70C();
  return _swift_continuation_await(v8);
}

uint64_t sub_1001899C4()
{
  sub_100010DA4();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  sub_100017040();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100189A94()
{
  sub_1000112E8();
  uint64_t v1 = (void *)v0[25];
  uint64_t v2 = v0[21];
  swift_unknownObjectRelease();

  if (*(void *)(v2 + 16) == 1)
  {
    sub_1001AFC18(v2);
    uint64_t v4 = v3;
    uint64_t v6 = v5;
    swift_bridgeObjectRelease();
    if (v4)
    {
      swift_bridgeObjectRelease();
      id v7 = [v6 _gkCompositeName];
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v4 = v9;
    }
    else
    {
      uint64_t v8 = 0;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v8 = 0;
    uint64_t v4 = 0;
  }
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v10(v8, v4);
}

uint64_t sub_100189B84(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_100169898();
  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return sub_1001AFB94(v1, v2);
}

void sub_100189BE4(uint64_t a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v8 = __chkstk_darwin(v5, v7);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v11);
  char v13 = (char *)&v35 - v12;
  uint64_t v14 = sub_10000D938(&qword_100326298);
  __chkstk_darwin(v14 - 8, v15);
  uint64_t v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a3;
  type metadata accessor for FriendBulletin();
  _Block_copy(a3);
  uint64_t v19 = swift_bridgeObjectRetain();
  uint64_t v20 = (objc_class *)sub_100189778(v19);
  if (!v20) {
    goto LABEL_11;
  }
  Class isa = v20;
  uint64_t v36 = 0x656C746974;
  unint64_t v37 = 0xE500000000000000;
  AnyHashable.init<A>(_:)();
  sub_100169A40(a1, &v39);
  sub_1001658C4((uint64_t)v38);
  if (!v40)
  {

    sub_10000DB3C((uint64_t)&v39, &qword_100326FD0);
LABEL_11:
    static GKLog.daemon.getter();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "FriendBulletin loadBulletinsForPushNotification: failed to create bulletin", v28, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    ((void (**)(void, Class))a3)[2](a3, isa);
    goto LABEL_14;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {

    goto LABEL_11;
  }
  uint64_t v23 = v36;
  uint64_t v22 = v37;
  uint64_t v36 = 26991;
  unint64_t v37 = 0xE200000000000000;
  AnyHashable.init<A>(_:)();
  sub_100169A40(a1, &v39);
  sub_1001658C4((uint64_t)v38);
  if (v40)
  {
    if (swift_dynamicCast())
    {
      sub_1001DD4AC(v23, v22, isa);
      uint64_t v36 = 2036625250;
      unint64_t v37 = 0xE400000000000000;
      uint64_t v24 = isa;
      AnyHashable.init<A>(_:)();
      sub_100169A40(a1, &v39);
      sub_1001658C4((uint64_t)v38);
      if (v40)
      {
        if (swift_dynamicCast())
        {
          NSString v25 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
LABEL_22:
          [(objc_class *)v24 setMessage:v25];

          sub_10018A4B8();
          swift_bridgeObjectRelease();
          uint64_t v33 = type metadata accessor for TaskPriority();
          sub_10000D97C((uint64_t)v17, 1, 1, v33);
          uint64_t v34 = (void *)swift_allocObject();
          v34[2] = 0;
          v34[3] = 0;
          v34[4] = v24;
          void v34[5] = a1;
          v34[6] = sub_10018C6FC;
          v34[7] = v18;
          swift_bridgeObjectRetain();
          Class isa = v24;
          swift_retain();
          sub_100006CBC();
          swift_release();
          goto LABEL_14;
        }
      }
      else
      {
        sub_10000DB3C((uint64_t)&v39, &qword_100326FD0);
      }
      NSString v25 = 0;
      goto LABEL_22;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_10000DB3C((uint64_t)&v39, &qword_100326FD0);
  }
  static GKLog.daemon.getter();
  char v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "FriendBulletin loadBulletinsForPushNotification: failed to get player id", v31, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v13, v5);
  Class v32 = Array._bridgeToObjectiveC()().super.isa;
  ((void (**)(void, Class))a3)[2](a3, v32);

LABEL_14:
  swift_release();
  _Block_release(a3);
}

uint64_t sub_10018A194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint8_t v7[16] = a6;
  v7[17] = a7;
  v7[14] = a4;
  v7[15] = a5;
  return _swift_task_switch(sub_10018A1B8, 0, 0);
}

uint64_t sub_10018A1B8()
{
  sub_1000112E8();
  *(void *)(v0 + 88) = 0x656D686361747461;
  uint64_t v1 = *(void *)(v0 + 120);
  *(void *)(v0 + 96) = 0xEB0000000073746ELL;
  AnyHashable.init<A>(_:)();
  sub_100169A40(v1, (_OWORD *)(v0 + 56));
  sub_1001658C4(v0 + 16);
  if (*(void *)(v0 + 80))
  {
    sub_10000D938(&qword_100326908);
    if (swift_dynamicCast())
    {
      uint64_t v2 = *(void **)(v0 + 104);
      goto LABEL_6;
    }
  }
  else
  {
    sub_10000DB3C(v0 + 56, &qword_100326FD0);
  }
  uint64_t v2 = _swiftEmptyArrayStorage;
LABEL_6:
  *(void *)(v0 + 144) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v3;
  void *v3 = v0;
  v3[1] = sub_10018A314;
  return sub_1001AFDF0();
}

uint64_t sub_10018A314()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  *(void *)(v4 + 160) = v3;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_100017040();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_10018A400()
{
  sub_1000112E8();
  uint64_t v1 = (void (*)(uint64_t))v0[16];
  uint64_t v2 = (void *)v0[14];
  sub_1001DD4C4(v0[20], v2);
  sub_10000D938(&qword_1003268F0);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_10024F850;
  *(void *)(v3 + 56) = type metadata accessor for FriendBulletin();
  *(void *)(v3 + 32) = v2;
  id v4 = v2;
  v1(v3);
  swift_bridgeObjectRelease();
  sub_1000112AC();
  return v5();
}

void sub_10018A4B8()
{
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_10018BE28(v1, v2, v0);
  sub_10018A6C0(v21);
  id v3 = [objc_allocWithZone((Class)GKBulletinAction) init];
  sub_10018C7A4(v3);
  uint64_t v4 = v21[8];
  uint64_t v5 = v21[9];
  swift_bridgeObjectRetain();
  sub_10018BE8C(v4, v5, v3);
  swift_bridgeObjectRelease();
  [v0 setDefaultAction:v3];
  id v6 = [objc_allocWithZone((Class)GKBulletinAction) init];
  sub_10018C7A4(v6);
  uint64_t v7 = v21[0];
  uint64_t v8 = v21[1];
  swift_bridgeObjectRetain();
  sub_10018BE8C(v7, v8, v6);
  swift_bridgeObjectRelease();
  uint64_t v9 = sub_100018344();
  sub_10018BEE4(v9, v10, v6);
  [v0 setAcceptAction:v6];
  id v11 = [objc_allocWithZone((Class)GKBulletinAction) init];
  sub_10018C7A4(v11);
  uint64_t v12 = v21[2];
  uint64_t v13 = v21[3];
  swift_bridgeObjectRetain();
  sub_10018BE8C(v12, v13, v11);
  swift_bridgeObjectRelease();
  uint64_t v14 = sub_100018344();
  sub_10018BEE4(v14, v15, v11);
  [v0 setDeclineAction:v11];
  id v16 = [objc_allocWithZone((Class)GKBulletinAction) init];
  sub_10018C7A4(v16);
  uint64_t v17 = v21[6];
  uint64_t v18 = v21[7];
  swift_bridgeObjectRetain();
  sub_10018BF3C((uint64_t)v21);
  sub_10018BE8C(v17, v18, v16);
  swift_bridgeObjectRelease();
  uint64_t v19 = sub_100018344();
  sub_10018BEE4(v19, v20, v16);
  [v0 setViewAction:v16];
}

uint64_t sub_10018A6C0@<X0>(void *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CharacterSet();
  sub_100011108();
  uint64_t v5 = v4;
  __chkstk_darwin(v6, v7);
  sub_100010E18();
  static CharacterSet.alphanumerics.getter();
  sub_100166A7C();
  uint64_t v8 = StringProtocol.addingPercentEncoding(withAllowedCharacters:)();
  uint64_t v10 = v9;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v1, v3);
  if (v10)
  {
    unint64_t v12 = 0xD000000000000043;
    v13._uint64_t countAndFlagsBits = v8;
    v13._object = v10;
    String.append(_:)(v13);
    unint64_t v14 = 0xD000000000000043;
    unint64_t v15 = 0x80000001002B0D90;
    v16._uint64_t countAndFlagsBits = v8;
    v16._object = v10;
    String.append(_:)(v16);
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v17 = 0xD000000000000047;
    unint64_t v18 = 0x80000001002B0E30;
    unint64_t v19 = 0x80000001002B0DE0;
  }
  else
  {
    unint64_t v14 = 0;
    unint64_t v17 = 0;
    unint64_t v12 = 0;
    unint64_t v15 = 0xE000000000000000;
    unint64_t v18 = 0xE000000000000000;
    unint64_t v19 = 0xE000000000000000;
  }
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[4] = v14;
  a1[5] = v15;
  a1[6] = v17;
  a1[7] = v18;
  a1[8] = v12;
  a1[9] = v19;
  return result;
}

void sub_10018A82C()
{
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_10018BE28(v1, v2, v0);
  sub_10018A6C0(v8);
  id v3 = [objc_allocWithZone((Class)GKBulletinAction) init];
  [v3 setType:0];
  uint64_t v4 = v8[4];
  uint64_t v5 = v8[5];
  swift_bridgeObjectRetain();
  sub_10018BF3C((uint64_t)v8);
  sub_10018BE8C(v4, v5, v3);
  swift_bridgeObjectRelease();
  uint64_t v6 = sub_100018344();
  sub_10018BEE4(v6, v7, v3);
  [v0 setDefaultAction:v3];
}

void sub_10018A90C()
{
  sub_100011BD4();
  uint64_t v1 = v0;
  type metadata accessor for Logger();
  sub_100011108();
  uint64_t v3 = v2;
  uint64_t v6 = __chkstk_darwin(v4, v5);
  __chkstk_darwin(v6, v7);
  static GKLog.trace.getter();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "FriendBulletin handleAction:", v10, 2u);
    sub_100010D7C();
  }

  id v11 = *(void (**)(uint64_t))(v3 + 8);
  uint64_t v12 = sub_100017DDC();
  v11(v12);
  NSString v13 = String._bridgeToObjectiveC()();
  unint64_t v14 = (objc_class *)type metadata accessor for FriendBulletin();
  v35.receiver = v1;
  v35.Class super_class = v14;
  [super handleAction:v13];

  uint64_t v15 = sub_100166714(v1, (SEL *)&selRef_categoryIdentifier);
  uint64_t v17 = v16;
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (v17)
  {
    if (v18 == v15 && v17 == v19)
    {
      swift_bridgeObjectRelease();
LABEL_19:
      swift_bridgeObjectRelease();
      sub_10018ACFC();
LABEL_28:
      sub_100010DB0();
      return;
    }
    uint64_t v33 = v11;
    char v21 = sub_100017F58();
    swift_bridgeObjectRelease();
    if (v21) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v33 = v11;
    swift_bridgeObjectRelease();
  }
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (v17)
  {
    if (v22 == v15 && v17 == v23)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_25:
      sub_10018B5BC();
      goto LABEL_28;
    }
    char v25 = sub_100017F58();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v25) {
      goto LABEL_25;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  static GKLog.daemon.getter();
  id v26 = v1;
  os_log_type_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.info.getter();
  if (!os_log_type_enabled(v27, v28))
  {

    goto LABEL_27;
  }
  char v29 = (uint8_t *)sub_100016FF0();
  uint64_t v34 = sub_100011BBC();
  *(_DWORD *)char v29 = 136315138;
  uint64_t v30 = sub_100166714(v26, (SEL *)&selRef_categoryIdentifier);
  if (v31)
  {
    sub_100174CE4(v30, v31, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v27, v28, "FriendBulleting handleAction invalid categoryIdentifier %s", v29, 0xCu);
    swift_arrayDestroy();
    sub_100010D7C();
    sub_100010D7C();
LABEL_27:

    uint64_t v32 = sub_100018344();
    v33(v32);
    goto LABEL_28;
  }

  __break(1u);
}

void sub_10018ACFC()
{
  sub_100011BD4();
  unint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = (void *)type metadata accessor for Logger();
  sub_100011108();
  uint64_t v9 = v8;
  __chkstk_darwin(v10, v11);
  sub_100010F78();
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v41 - v14;
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v6 && v16 == v4)
  {
    uint64_t v18 = &selRef_defaultAction;
LABEL_8:
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  sub_1000176A4();
  sub_1000181C4();
  if (v2)
  {
    uint64_t v18 = &selRef_defaultAction;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v6 && v27 == v4)
  {
    uint64_t v18 = &selRef_acceptAction;
    goto LABEL_8;
  }
  sub_1000176A4();
  sub_1000181C4();
  if (v2)
  {
    uint64_t v18 = &selRef_acceptAction;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v6 && v33 == v4)
  {
    uint64_t v18 = &selRef_declineAction;
    goto LABEL_8;
  }
  sub_1000176A4();
  sub_1000181C4();
  if (v2)
  {
    uint64_t v18 = &selRef_declineAction;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v6 && v35 == v4)
  {
    uint64_t v18 = &selRef_viewAction;
    goto LABEL_8;
  }
  sub_1000176A4();
  sub_1000181C4();
  if ((v2 & 1) == 0) {
    goto LABEL_38;
  }
  uint64_t v18 = &selRef_viewAction;
LABEL_9:
  id v19 = [v0 *v18];
  if (!v19)
  {
LABEL_38:
    static GKLog.daemon.getter();
    swift_bridgeObjectRetain_n();
    unint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v37, v38))
    {
      id v42 = v7;
      long long v39 = (uint8_t *)sub_100016FF0();
      uint64_t v43 = sub_100011BBC();
      *(_DWORD *)long long v39 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v40 = sub_100174CE4(v6, v4, &v43);
      sub_100011340(v40);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "FriendBulletin handleFriendRequestAction invalid actionid %s", v39, 0xCu);
      swift_arrayDestroy();
      sub_100010D7C();
      sub_100010D7C();

      (*(void (**)(char *, id))(v9 + 8))(v1, v42);
LABEL_42:
      sub_100010DB0();
      return;
    }

    swift_bridgeObjectRelease_n();
    unint64_t v31 = *(void (**)(char *, void *))(v9 + 8);
    uint64_t v32 = v1;
LABEL_41:
    v31(v32, v7);
    goto LABEL_42;
  }
  id v42 = v19;
  if ([v19 type])
  {
    static GKLog.daemon.getter();
    uint64_t v20 = v42;
    char v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (float *)sub_100016FF0();
      sub_100017CA4(v23, 3.852e-34);
      sub_10018C74C((uint64_t)[v20 v24]);

      sub_100017E50((void *)&_mh_execute_header, v25, v26, "FriendBulletin handleFriendRequestAction invalid action type %ld");
      sub_100010D7C();
    }
    else
    {

      char v21 = v20;
    }

    unint64_t v31 = *(void (**)(char *, void *))(v9 + 8);
    uint64_t v32 = v15;
    goto LABEL_41;
  }
  sub_10018B8B0();
  sub_10018B0BC(v6, v4);
  sub_100010DB0();
}

void sub_10018B0BC(uint64_t a1, uint64_t a2)
{
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == a1 && v4 == a2)
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  char v6 = sub_10018C724();
  swift_bridgeObjectRelease();
  if (v6)
  {
LABEL_13:
    sub_10018B17C();
    return;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == a1 && v7 == a2)
  {
    swift_bridgeObjectRelease();
LABEL_16:
    sub_10018B1B8();
    return;
  }
  char v9 = sub_10018C724();
  swift_bridgeObjectRelease();
  if (v9) {
    goto LABEL_16;
  }
}

void sub_10018B17C()
{
}

void sub_10018B1AC()
{
}

void sub_10018B1B8()
{
}

void sub_10018B1E8()
{
  sub_100011BD4();
  char v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v11 = type metadata accessor for Logger();
  sub_100011108();
  uint64_t v13 = v12;
  __chkstk_darwin(v14, v15);
  sub_100010E18();
  sub_100166714(v10, (SEL *)&selRef_playerID);
  if (v16)
  {
    id v17 = [self proxyForLocalPlayer];
    id v18 = [v17 friendServicePrivate];

    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v24[4] = v8;
    v24[5] = 0;
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 1107296256;
    _OWORD v24[2] = sub_100174948;
    v24[3] = v6;
    uint64_t v20 = _Block_copy(v24);
    [v18 *v4:v19:v20];
    _Block_release(v20);
    swift_unknownObjectRelease();
  }
  else
  {
    static GKLog.daemon.getter();
    char v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, v2, v23, 2u);
      sub_100010D7C();
    }

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v0, v11);
  }
  sub_100010DB0();
}

void sub_10018B3E0()
{
}

void sub_10018B3EC()
{
  sub_100011BD4();
  char v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for Logger();
  sub_100011108();
  uint64_t v7 = v6;
  __chkstk_darwin(v8, v9);
  sub_10001123C();
  if (v4)
  {
    swift_errorRetain();
    static GKLog.friending.getter();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v14 = v2;
      uint64_t v12 = (uint8_t *)sub_100016FF0();
      uint64_t v13 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 138412290;
      swift_errorRetain();
      uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v13 = v15;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, v14, v12, 0xCu);
      sub_10000D938(&qword_100326430);
      swift_arrayDestroy();
      sub_100010D7C();
      sub_100010D7C();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0, v5);
  }
  sub_100010DB0();
}

void sub_10018B5BC()
{
  sub_100011BD4();
  unint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = (void *)type metadata accessor for Logger();
  sub_100011108();
  uint64_t v9 = v8;
  __chkstk_darwin(v10, v11);
  sub_100010F78();
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v34 - v14;
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v6 && v16 == v4)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    _stringCompareWithSmolCheck(_:_:expecting:)();
    sub_1000181C4();
    if ((v2 & 1) == 0) {
      goto LABEL_12;
    }
  }
  id v18 = [v0 defaultAction];
  if (!v18)
  {
LABEL_12:
    static GKLog.daemon.getter();
    swift_bridgeObjectRetain_n();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      id v35 = v7;
      os_log_type_t v28 = (uint8_t *)sub_100016FF0();
      uint64_t v36 = sub_100011BBC();
      *(_DWORD *)os_log_type_t v28 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v29 = sub_100174CE4(v6, v4, &v36);
      sub_100011340(v29);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "FriendBulletin handleAcceptedRequestAction invalid actionid %s", v28, 0xCu);
      swift_arrayDestroy();
      sub_100010D7C();
      sub_100010D7C();

      (*(void (**)(char *, id))(v9 + 8))(v1, v35);
LABEL_21:
      sub_100010DB0();
      return;
    }

    swift_bridgeObjectRelease_n();
    uint64_t v30 = *(void (**)(char *, void *))(v9 + 8);
    unint64_t v31 = v1;
LABEL_20:
    v30(v31, v7);
    goto LABEL_21;
  }
  id v35 = v18;
  if ([v18 type])
  {
    static GKLog.daemon.getter();
    NSString v19 = v35;
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v20, v21))
    {
      os_log_type_t v22 = (float *)sub_100016FF0();
      sub_100017CA4(v22, 3.852e-34);
      sub_10018C74C((uint64_t)[v19 v23]);

      sub_100017E50((void *)&_mh_execute_header, v24, v25, "FriendBulletin handleAcceptedRequestAction invalid action type %ld");
      sub_100010D7C();
    }
    else
    {

      uint64_t v20 = v19;
    }

    uint64_t v30 = *(void (**)(char *, void *))(v9 + 8);
    unint64_t v31 = v15;
    goto LABEL_20;
  }
  sub_10018B8B0();
  sub_100010DB0();
}

void sub_10018B8B0()
{
  sub_100011BD4();
  char v2 = v1;
  type metadata accessor for Logger();
  sub_100011108();
  uint64_t v4 = v3;
  __chkstk_darwin(v5, v6);
  sub_10001123C();
  uint64_t v7 = type metadata accessor for URL();
  sub_100011108();
  uint64_t v9 = v8;
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000D938(&qword_100327E70);
  __chkstk_darwin(v14 - 8, v15);
  sub_100010E18();
  sub_100166714(v2, (SEL *)&selRef_info);
  if (v16)
  {
    URL.init(string:)();
    swift_bridgeObjectRelease();
    if (sub_10000DB14(v0, 1, v7) == 1)
    {
      sub_10000DB3C(v0, &qword_100327E70);
      static GKLog.daemon.getter();
      id v17 = v2;
      id v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v18, v19))
      {
        v34[1] = v4;
        uint64_t v20 = (uint8_t *)sub_100016FF0();
        uint64_t v35 = sub_100011BBC();
        *(_DWORD *)uint64_t v20 = 136315138;
        uint64_t v21 = sub_100166714(v17, (SEL *)&selRef_info);
        if (v22)
        {
          unint64_t v23 = v22;
        }
        else
        {
          uint64_t v21 = 7104878;
          unint64_t v23 = 0xE300000000000000;
        }
        v34[2] = sub_100174CE4(v21, v23, &v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "FriendBulletin openSettings invalid url %s", v20, 0xCu);
        swift_arrayDestroy();
        sub_100010D7C();
        sub_100010D7C();

        uint64_t v24 = sub_100017DDC();
        v25(v24);
      }
      else
      {

        uint64_t v32 = sub_100017DDC();
        v33(v32);
      }
      goto LABEL_11;
    }
    sub_100017C0C();
    v26();
    id v27 = [self defaultWorkspace];
    if (v27)
    {
      uint64_t v29 = v27;
      URL._bridgeToObjectiveC()(v28);
      unint64_t v31 = v30;
      [v29 openURL:v30];

      (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v7);
LABEL_11:
      sub_100010DB0();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

id sub_10018BBD8(uint64_t a1)
{
  if (a1)
  {
    v2.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v2.super.Class isa = 0;
  }
  v5.receiver = v1;
  v5.Class super_class = (Class)type metadata accessor for FriendBulletin();
  id v3 = [v5 initWithPushNotification:v2.super.isa];

  if (v3) {
  return v3;
  }
}

id sub_10018BCD0()
{
  v2.receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for FriendBulletin();
  return [super init];
}

id sub_10018BD28(void *a1)
{
  v5.receiver = v1;
  v5.Class super_class = (Class)type metadata accessor for FriendBulletin();
  id v3 = [super initWithCoder:a1];

  return v3;
}

id sub_10018BDA0()
{
  v2.receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for FriendBulletin();
  return [super dealloc];
}

uint64_t type metadata accessor for FriendBulletin()
{
  return self;
}

uint64_t sub_10018BDF8@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

void sub_10018BE28(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a3 setCategoryIdentifier:v4];
}

void sub_10018BE8C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setInfo:v4];
}

void sub_10018BEE4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setPlayerID:v4];
}

uint64_t sub_10018BF3C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10018BFA8(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

unint64_t sub_10018BFCC()
{
  unint64_t result = qword_1003268D0;
  if (!qword_1003268D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003268D0);
  }
  return result;
}

uint64_t *sub_10018C018(uint64_t *a1)
{
  return a1;
}

uint64_t sub_10018C07C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2 != 1)
  {
    sub_10018C144(result, a2);
    swift_bridgeObjectRelease();
    sub_10018C144(a8, a9);
    swift_bridgeObjectRelease();
    return sub_10018C194(a16, a17);
  }
  return result;
}

uint64_t sub_10018C144(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10018C194(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *sub_10018C1D8(uint64_t *a1)
{
  return a1;
}

uint64_t sub_10018C210(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10018C260(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D938(&qword_100327E70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10018C2C8()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10018C300(uint64_t a1)
{
  sub_1001D9F34(a1, *(void *)(v1 + 16));
}

uint64_t sub_10018C308()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10018C350()
{
  sub_100017D24();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100171E3C;
  sub_100018420();
  sub_10018C70C();
  return sub_10018809C(v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_10018C40C()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10018C45C()
{
  sub_100017D24();
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100171648;
  uint64_t v5 = sub_100018420();
  return sub_10018A194(v5, v6, v7, v8, v9, v3, v2);
}

uint64_t getEnumTagSinglePayload for FriendBulletin.FriendBulletinError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 3) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v5 = v6 - 4;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for FriendBulletin.FriendBulletinError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10018C66CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

unsigned char *sub_10018C694(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for FriendBulletin.FriendBulletinError()
{
  return &type metadata for FriendBulletin.FriendBulletinError;
}

unint64_t sub_10018C6B0()
{
  unint64_t result = qword_100326910;
  if (!qword_100326910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100326910);
  }
  return result;
}

uint64_t sub_10018C724()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_10018C74C(uint64_t a1)
{
  *(void *)(v1 - 88) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_10018C774()
{
  return v0;
}

uint64_t sub_10018C790()
{
  return *(void *)(v0 + 568);
}

id sub_10018C7A4(void *a1)
{
  int v3 = *(const char **)(v1 + 3512);
  return [a1 v3];
}

void sub_10018C7BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static GKLog.daemon.getter();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "URLSessionTask finished collecting metrics", v12, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  id v13 = [self controller];
  [v13 reportURLSessionEventWithTask:a2 metrics:a3];
}

uint64_t type metadata accessor for GKInstrumentedURLSessionDelegate()
{
  return self;
}

uint64_t sub_10018CA08()
{
  if (qword_100325E98 != -1) {
    swift_once();
  }
  swift_retain();
  uint64_t v0 = dispatch thunk of NWProtocolFramer.Message.__allocating_init(definition:)();
  swift_retain();
  dispatch thunk of NWProtocolFramer.Message.subscript.setter();
  swift_release();
  return v0;
}

uint64_t sub_10018CAB4()
{
  dispatch thunk of NWProtocolFramer.Message.subscript.getter();
  if (v3)
  {
    uint64_t result = swift_dynamicCast();
    if (result) {
      return v1;
    }
  }
  else
  {
    sub_10001869C((uint64_t)v2);
    return 0;
  }
  return result;
}

uint64_t sub_10018CB34(uint64_t result)
{
  if (result >= 4) {
    return 4;
  }
  else {
    return result;
  }
}

uint64_t sub_10018CB44(uint64_t result)
{
  return result;
}

Swift::Int sub_10018CB4C()
{
  return sub_10018CB54(*v0);
}

Swift::Int sub_10018CB54(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

void sub_10018CB9C(uint64_t a1)
{
  sub_10018CBA4(a1, *v1);
}

void sub_10018CBA4(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int sub_10018CBCC(uint64_t a1)
{
  return sub_10018CBD4(a1, *v1);
}

Swift::Int sub_10018CBD4(uint64_t a1, unsigned __int8 a2)
{
  return Hasher._finalize()();
}

uint64_t sub_10018CC18@<X0>(unsigned int *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10018CB34(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10018CC44@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = sub_10018CB44(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_10018CC70()
{
  type metadata accessor for PeerDiscoveryFramer();
  sub_10018D46C();
  type metadata accessor for NWProtocolFramer.Definition();
  swift_allocObject();
  uint64_t result = NWProtocolFramer.Definition.init(implementation:)();
  qword_10032DA58 = result;
  return result;
}

unint64_t sub_10018CCCC()
{
  return 0xD000000000000017;
}

uint64_t sub_10018CCE8()
{
  swift_release();

  return swift_allocObject();
}

uint64_t sub_10018CD1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for NWProtocolFramer.StartResult.ready(_:);
  uint64_t started = type metadata accessor for NWProtocolFramer.StartResult();
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(started - 8) + 104);

  return v4(a1, v2, started);
}

void sub_10018CD90(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018CAB4();
  if ((a3 & 0x8000000000000000) != 0 || HIDWORD(a3))
  {
    sub_1000111E4();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v9 = sub_10018D0F4();
    unint64_t v11 = v10;
    NWProtocolFramer.Instance.writeOutput(data:)();
    sub_100169274(v9, v11);
    NWProtocolFramer.Instance.writeOutputNoCopy(length:)(a3);
    if (v12)
    {
      os_log_type_t v13 = static os_log_type_t.error.getter();
      uint64_t v24 = 0;
      unint64_t v25 = 0xE000000000000000;
      _StringGuts.grow(_:)(20);
      v14._object = (void *)0x80000001002B0F70;
      v14._uint64_t countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v14);
      uint64_t v23 = v12;
      sub_10000D938(&qword_100326538);
      _print_unlocked<A, B>(_:_:)();
      uint64_t v16 = v24;
      unint64_t v15 = v25;
      static GKLog.match.getter();
      swift_bridgeObjectRetain_n();
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = v13;
      if (os_log_type_enabled(v17, v13))
      {
        uint64_t v22 = v4;
        os_log_type_t v19 = (uint8_t *)swift_slowAlloc();
        uint64_t v20 = swift_slowAlloc();
        uint64_t v21 = v5;
        uint64_t v24 = v20;
        *(_DWORD *)os_log_type_t v19 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v23 = sub_100174CE4(v16, v15, &v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Nearby - %s", v19, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v22);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      }
      swift_bridgeObjectRelease();
      swift_errorRelease();
    }
  }
}

uint64_t sub_10018D0F4()
{
  uint64_t v4 = Data.init(bytes:count:)();
  uint64_t v0 = Data.init(bytes:count:)();
  unint64_t v2 = v1;
  Data.append(_:)();
  sub_100169274(v0, v2);
  return v4;
}

uint64_t sub_10018D190()
{
  return 8;
}

uint64_t sub_10018D2E0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a5;
    if (a1)
    {
      if (a2 - a1 >= a5)
      {
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
LABEL_7:
        *(void *)a6 = 0;
        *(unsigned char *)(a6 + 8) = 0;
        return v7;
      }
    }
    else if (a5 <= 0)
    {
      goto LABEL_7;
    }
  }
  return 0;
}

uint64_t sub_10018D3BC()
{
  return _swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for PeerDiscoveryFramer()
{
  return self;
}

unint64_t sub_10018D3F0()
{
  return 0xD000000000000017;
}

uint64_t sub_10018D414@<X0>(uint64_t a1@<X8>)
{
  return sub_10018CD1C(a1);
}

uint64_t sub_10018D42C()
{
  return sub_10018D190();
}

void sub_10018D444(uint64_t a1, uint64_t a2, unint64_t a3)
{
}

uint64_t sub_10018D460(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_10018D2E0(a1, a2, a3 & 1, a4, *(void *)(v4 + 16), *(void *)(v4 + 24));
}

unint64_t sub_10018D46C()
{
  unint64_t result = qword_100326A48;
  if (!qword_100326A48)
  {
    type metadata accessor for PeerDiscoveryFramer();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100326A48);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PeerDiscoveryMessageType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10018D584);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PeerDiscoveryMessageType()
{
  return &type metadata for PeerDiscoveryMessageType;
}

unint64_t sub_10018D5C0()
{
  unint64_t result = qword_100326A50;
  if (!qword_100326A50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100326A50);
  }
  return result;
}

id GameActivityStore.__allocating_init()()
{
  return GameActivityStore.init()();
}

id GameActivityStore.init()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  swift_defaultActor_initialize();
  swift_retain();
  sub_10000D938(&qword_100326A58);
  v0[14] = Dictionary.init(dictionaryLiteral:)();
  swift_release();
  v3.receiver = v0;
  v3.Class super_class = ObjectType;
  return [super init];
}

uint64_t GameActivityStore.add(_:)(uint64_t a1)
{
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return sub_100010F94((uint64_t)sub_10018D710, v1);
}

unint64_t sub_10018D710()
{
  uint64_t v1 = *(void **)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  id v3 = [v1 bundleID];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  uint64_t v7 = (void **)(v2 + 112);
  swift_beginAccess();
  id v8 = v1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v10 = *(void **)(v2 + 112);
  *(void *)(v2 + 112) = 0x8000000000000000;
  unint64_t result = sub_1000087B0(v4, v6);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    return result;
  }
  unint64_t v16 = result;
  char v17 = v12;
  sub_10000D938(&qword_100326A68);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v15))
  {
    unint64_t v18 = sub_1000087B0(v4, v6);
    if ((v17 & 1) != (v19 & 1))
    {
      return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    }
    unint64_t v16 = v18;
  }
  *uint64_t v7 = v10;
  swift_bridgeObjectRelease();
  uint64_t v20 = (uint64_t)*v7;
  if ((v17 & 1) == 0)
  {
    sub_10018F590(v16, v4, v6, (uint64_t)_swiftEmptyArrayStorage, *v7);
    swift_bridgeObjectRetain();
  }
  uint64_t v21 = (void *)(*(void *)(v20 + 56) + 8 * v16);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  sub_10018EB78(*(void *)((*v21 & 0xFFFFFFFFFFFFFF8) + 0x10));
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  swift_bridgeObjectRelease();
  sub_1000112AC();
  return v22();
}

uint64_t sub_10018D938(void *a1, void *aBlock, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v5 = a1;
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc();
  void v3[5] = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_10018D9FC;
  return GameActivityStore.add(_:)((uint64_t)v5);
}

uint64_t sub_10018D9FC()
{
  sub_1000112E8();
  sub_100011168();
  uint64_t v2 = *(void (***)(void))(v1 + 32);
  id v3 = *(void **)(v1 + 16);
  uint64_t v4 = *v0;
  sub_100010D94();
  *id v5 = v4;
  swift_task_dealloc();
  swift_release();

  v2[2](v2);
  _Block_release(v2);
  sub_1000112AC();
  return v6();
}

uint64_t GameActivityStore.fetchAndRemoveLatestActivity(bundleID:)(uint64_t a1, uint64_t a2)
{
  v3[10] = a2;
  v3[11] = v2;
  v3[9] = a1;
  return sub_100010F94((uint64_t)sub_10018DB44, v2);
}

uint64_t sub_10018DB44()
{
  sub_100010F2C();
  sub_100017330();
  swift_bridgeObjectRetain();
  uint64_t v1 = sub_100191330();
  if (*v2) {
    uint64_t v3 = sub_10018DCC0();
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = sub_1001912F8();
  v1((void **)v4);
  swift_endAccess();
  swift_bridgeObjectRelease();
  id v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v5(v3);
}

void (*sub_10018DBF8(void *a1, uint64_t a2, uint64_t a3))(void **a1)
{
  uint64_t v6 = malloc(0x30uLL);
  *a1 = v6;
  void v6[4] = a3;
  swift_bridgeObjectRetain();
  void v6[5] = sub_10018F6FC(v6, a2, a3);
  return sub_10018DC78;
}

void sub_10018DC78(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = sub_100018288();
  v3(v2);
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t sub_10018DCC0()
{
  if (!(*v0 >> 62))
  {
    if (*(void *)((*v0 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v3) {
    return 0;
  }
LABEL_3:
  uint64_t result = sub_100191144();
  if (!result)
  {
    if (*v0 >> 62) {
      goto LABEL_12;
    }
    uint64_t v2 = *(void *)((*v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (__OFSUB__(v2, 1))
    {
      __break(1u);
LABEL_12:
      swift_bridgeObjectRetain();
      uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    return sub_1001910B0(v2 - 1);
  }
  return result;
}

uint64_t sub_10018DDA8(int a1, void *aBlock, uint64_t a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;
  v3[4] = v5;
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  void v3[5] = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10018DE7C;
  return GameActivityStore.fetchAndRemoveLatestActivity(bundleID:)(v4, v6);
}

uint64_t sub_10018DE7C()
{
  sub_1000112E8();
  uint64_t v2 = v1;
  sub_100011168();
  uint64_t v4 = *(void (***)(void, void))(v3 + 24);
  uint64_t v5 = *v0;
  sub_100010D94();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  ((void (**)(void, void *))v4)[2](v4, v2);
  _Block_release(v4);

  sub_1000112AC();
  return v7();
}

uint64_t GameActivityStore.deinit()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t GameActivityStore.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t GameActivityStore.fetchActivities(bundleID:ascending:)(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 48) = a2;
  *(void *)(v4 + 56) = v3;
  *(unsigned char *)(v4 + 64) = a3;
  *(void *)(v4 + 40) = a1;
  return sub_100010F94((uint64_t)sub_10018E038, v3);
}

uint64_t sub_10018E038()
{
  sub_100010F2C();
  uint64_t v15 = v0;
  uint64_t v1 = *(void *)(v0 + 56);
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 112);
  if (!*(void *)(v2 + 16)) {
    goto LABEL_10;
  }
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  unint64_t v5 = sub_1000087B0(v4, v3);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_10:
    swift_endAccess();
    uint64_t v13 = _swiftEmptyArrayStorage;
    goto LABEL_11;
  }
  uint64_t v7 = *(void *)(*(void *)(v2 + 56) + 8 * v5);
  swift_bridgeObjectRetain();
  swift_endAccess();
  swift_bridgeObjectRelease();
  if (v7 < 0 || (v7 & 0x4000000000000000) != 0)
  {
    uint64_t v8 = sub_10018ED08(v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFF8;
  }
  swift_bridgeObjectRetain();
  if (v8 < 0 || (uint64_t v9 = v8, (v8 & 0x4000000000000000) != 0))
  {
    uint64_t v9 = sub_10018ED08(v8);
    swift_release();
  }
  char v10 = *(unsigned char *)(v0 + 64);
  BOOL v14 = (void *)v9;
  sub_10018FAA4((uint64_t *)&v14, v10);
  swift_release();
  uint64_t v13 = v14;
LABEL_11:
  unint64_t v11 = *(uint64_t (**)(void *))(v0 + 8);
  return v11(v13);
}

uint64_t static GKGameActivityInternal.< infix(_:_:)(void *a1, void *a2)
{
  id v3 = [a1 createdAt];
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4, v7);
  unint64_t v8 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  id v9 = [a2 createdAt];
  __chkstk_darwin(v9, v10);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  LOBYTE(v9) = static Date.< infix(_:_:)();
  unint64_t v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11((char *)&v13 - v8, v4);
  v11((char *)&v13 - v8, v4);
  return v9 & 1;
}

uint64_t sub_10018E3C0(int a1, char a2, void *aBlock, uint64_t a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  void v4[4] = v7;
  swift_retain();
  id v9 = (void *)swift_task_alloc();
  void v4[5] = v9;
  *id v9 = v4;
  v9[1] = sub_10018E4A4;
  return GameActivityStore.fetchActivities(bundleID:ascending:)(v6, v8, a2);
}

uint64_t sub_10018E4A4()
{
  sub_1000112E8();
  sub_100011168();
  uint64_t v2 = *(void (***)(void, void))(v1 + 24);
  uint64_t v3 = *v0;
  sub_100010D94();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  sub_100163CE4(0, &qword_1003266B8);
  sub_100191324();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  ((void (**)(void, Class))v2)[2](v2, isa);

  _Block_release(v2);
  sub_1000112AC();
  return v6();
}

uint64_t GameActivityStore.removeActivities(forBundleID:)(uint64_t a1, uint64_t a2)
{
  v3[10] = a2;
  v3[11] = v2;
  v3[9] = a1;
  return sub_100010F94((uint64_t)sub_10018E628, v2);
}

uint64_t sub_10018E628()
{
  sub_100010F2C();
  sub_100017330();
  swift_bridgeObjectRetain();
  sub_100191330();
  if (*v0)
  {
    void *v0 = _swiftEmptyArrayStorage;
    uint64_t v1 = sub_1001912F8();
    v2(v1);
    swift_endAccess();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = sub_1001912F8();
    v4(v3);
    swift_endAccess();
  }
  swift_bridgeObjectRelease();
  sub_1000112AC();
  return v5();
}

uint64_t sub_10018E708(uint64_t a1, int a2, void *a3, void *aBlock, uint64_t a5, uint64_t a6)
{
  id v9 = _Block_copy(aBlock);
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = a3;
  v10[3] = v9;
  _DWORD v10[4] = a1;
  id v11 = a3;
  swift_retain();

  return sub_10000D83C(a6, (uint64_t)v10);
}

uint64_t sub_10018E790(int a1, void *aBlock, uint64_t a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;
  v3[4] = v5;
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  void v3[5] = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10017C6B8;
  return GameActivityStore.removeActivities(forBundleID:)(v4, v6);
}

uint64_t GameActivityStore.removeAllActivities()()
{
  *(void *)(v1 + 40) = v0;
  return sub_100010F94((uint64_t)sub_10018E880, v0);
}

uint64_t sub_10018E880()
{
  swift_beginAccess();
  sub_10000D938(&qword_100326A90);
  Dictionary._Variant.removeAll(keepingCapacity:)(0);
  swift_endAccess();
  sub_1000112AC();
  return v0();
}

uint64_t sub_10018E994(const void *a1, uint64_t a2)
{
  _DWORD v2[2] = a2;
  v2[3] = _Block_copy(a1);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[4] = v3;
  void *v3 = v2;
  v3[1] = sub_10018EA3C;
  return GameActivityStore.removeAllActivities()();
}

uint64_t sub_10018EA3C()
{
  sub_100011168();
  uint64_t v2 = *(void (***)(void))(v1 + 24);
  uint64_t v3 = *v0;
  sub_100010D94();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  swift_release();
  v2[2](v2);
  _Block_release(v2);
  sub_1000112AC();
  return v5();
}

uint64_t sub_10018EB48(void **a1, void **a2)
{
  return static GKGameActivityInternal.< infix(_:_:)(*a1, *a2) & 1;
}

uint64_t sub_10018EB78(uint64_t result)
{
  if (result + 1 > *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  return result;
}

uint64_t sub_10018EBA4(uint64_t result)
{
  unint64_t v2 = *(void *)(*v1 + 24);
  if (result + 1 > (uint64_t)(v2 >> 1))
  {
    uint64_t result = sub_1001B7788(v2 > 1, result + 1, 1, *v1);
    *uint64_t v1 = result;
  }
  return result;
}

void sub_10018EBE4()
{
  sub_100018510();
  if (*(void *)(v0 + 16))
  {
    sub_10000D938(&qword_100326500);
    uint64_t v1 = (const void *)swift_allocObject();
    size_t v2 = j__malloc_size(v1);
    sub_1001912C4(2 * ((uint64_t)(v2 - 32) / 16));
    sub_1001907EC(v3, v4, v5, v6);
    sub_100010E30();
    sub_1000176C4();
    if (!v7) {
      __break(1u);
    }
  }
  sub_1001912DC();
}

void sub_10018EC74()
{
  sub_100018510();
  if (*(void *)(v0 + 16))
  {
    sub_10000D938(&qword_100326738);
    uint64_t v1 = (const void *)swift_allocObject();
    size_t v2 = j__malloc_size(v1);
    sub_1001912C4((2 * ((uint64_t)(v2 - 32) / 8)) | 1);
    sub_1001909EC(v3, v4, v5, v6);
    sub_100010E30();
    sub_1000176C4();
    if (!v7) {
      __break(1u);
    }
  }
  sub_1001912DC();
}

#error "10018EDD4: call analysis failed (funcsize=70)"

unint64_t sub_10018EE34()
{
  AnyHashable._rawHashValue(seed:)(*(void *)(v0 + 40));
  uint64_t v1 = sub_100191324();

  return sub_10018EFF4(v1, v2);
}

unint64_t sub_10018EE74()
{
  type metadata accessor for NWEndpoint();
  sub_100191230((unint64_t *)&unk_1003272E0);
  dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v0 = sub_100191324();

  return sub_10018F0BC(v0, v1);
}

unint64_t sub_10018EEF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v8 = Hasher._finalize()();

  return sub_10018F268(a1, a2, a3, a4, v8);
}

unint64_t sub_10018EFB4()
{
  NSObject._rawHashValue(seed:)(*(void *)(v0 + 40));
  uint64_t v1 = sub_100191324();

  return sub_10018F364(v1, v2);
}

unint64_t sub_10018EFF4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_10000753C(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_1001658C4((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_10018F0BC(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = a1;
  uint64_t v4 = type metadata accessor for NWEndpoint();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  Swift::Int v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = v2;
  uint64_t v9 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v10 = a2 & ~v9;
  uint64_t v19 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    BOOL v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v13 = v5 + 16;
    char v12 = v14;
    uint64_t v15 = *(void *)(v13 + 56);
    do
    {
      v12(v8, *(void *)(v21 + 48) + v15 * v10, v4);
      sub_100191230(&qword_100326860);
      char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v13 - 8))(v8, v4);
      if (v16) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
    }
    while (((*(void *)(v19 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_10018F268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = a5 & ~v7;
  if ((*(void *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    uint64_t v13 = ~v7;
    uint64_t v14 = *(void *)(v5 + 48);
    do
    {
      uint64_t v15 = (void *)(v14 + 32 * v8);
      uint64_t v16 = v15[2];
      uint64_t v17 = v15[3];
      BOOL v18 = *v15 == a1 && v15[1] == a2;
      if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        BOOL v19 = v16 == a3 && v17 == a4;
        if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
      }
      unint64_t v8 = (v8 + 1) & v13;
    }
    while (((*(void *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  return v8;
}

unint64_t sub_10018F364(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_100163CE4(0, (unint64_t *)&qword_100326320);
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

uint64_t sub_10018F480(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_10019130C(a1, a4 + 8 * (a1 >> 6));
  uint64_t v6 = v5[6] + 40 * result;
  long long v8 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)uint64_t v6 = *(_OWORD *)v7;
  *(_OWORD *)(v6 + 16) = v8;
  *(void *)(v6 + 32) = *(void *)(v7 + 32);
  *(void *)(v5[7] + 8 * result) = v9;
  uint64_t v10 = v5[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    v5[2] = v12;
  }
  return result;
}

void sub_10018F4D0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1000179FC(a1, a2, a3, a4, a5);
  if (v7) {
    __break(1u);
  }
  else {
    sub_100010F9C(v5, v6);
  }
}

uint64_t sub_10018F4E8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10019130C(a1, a4 + 8 * (a1 >> 6));
  uint64_t v9 = *(void *)(v8 + 48);
  uint64_t v10 = type metadata accessor for NWEndpoint();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, a2, v10);
  *(void *)(*(void *)(a4 + 56) + 8 * a1) = a3;
  uint64_t v12 = *(void *)(a4 + 16);
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    *(void *)(a4 + 16) = v14;
  }
  return result;
}

unint64_t sub_10018F590(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

uint64_t sub_10018F5D8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = sub_10019130C(a1, a7 + 8 * (a1 >> 6));
  uint64_t v9 = (void *)(v8[6] + 32 * result);
  *uint64_t v9 = v10;
  v9[1] = v11;
  v9[2] = v12;
  v9[3] = v13;
  *(void *)(v8[7] + 8 * result) = v14;
  uint64_t v15 = v8[2];
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    v8[2] = v17;
  }
  return result;
}

void sub_10018F61C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v5 = (void *)(a5[6] + 16 * a1);
  *uint64_t v5 = a2;
  v5[1] = a3;
  uint64_t v6 = a5[7] + 40 * a1;
  long long v7 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)uint64_t v6 = *(_OWORD *)a4;
  *(_OWORD *)(v6 + 16) = v7;
  *(void *)(v6 + 32) = *(void *)(a4 + 32);
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    sub_100010F9C((uint64_t)a5, v10);
  }
}

void sub_10018F674(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a5[6] + 8 * a1) = a2;
  uint64_t v5 = (void *)(a5[7] + 16 * a1);
  *uint64_t v5 = a3;
  v5[1] = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    sub_100010F9C((uint64_t)a5, v8);
  }
}

uint64_t sub_10018F6B8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = sub_10019130C(a1, a6 + 8 * (a1 >> 6));
  uint64_t v8 = (void *)(v7[6] + 16 * result);
  *uint64_t v8 = v9;
  v8[1] = v10;
  uint64_t v11 = (void *)(v7[7] + 16 * result);
  *uint64_t v11 = v12;
  v11[1] = v13;
  uint64_t v14 = v7[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    v7[2] = v16;
  }
  return result;
}

void (*sub_10018F6FC(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v6 = malloc(0x58uLL);
  *a1 = v6;
  v6[8] = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  v6[9] = sub_10018F994(v6);
  v6[10] = sub_10018F810(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_10018F7A8;
}

void sub_10018F7A8(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(uint64_t))(*(void *)a1 + 72);
  (*(void (**)(void))(*(void *)a1 + 80))();
  swift_bridgeObjectRelease();
  uint64_t v3 = sub_100018288();
  v2(v3);

  free(v1);
}

void (*sub_10018F810(void *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t v5 = v4;
  uint64_t v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  v10[3] = v4;
  v10[1] = a2;
  uint64_t v11 = *v4;
  unint64_t v12 = sub_1000087B0(a2, a3);
  *((unsigned char *)v10 + 40) = v13 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v13 & 1) == 0;
  Swift::Int v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v17 = v12;
  char v18 = v13;
  sub_10000D938(&qword_100326A68);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v16))
  {
    unint64_t v19 = sub_1000087B0(a2, a3);
    if ((v18 & 1) == (v20 & 1))
    {
      unint64_t v17 = v19;
      goto LABEL_5;
    }
LABEL_10:
    uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_5:
  _DWORD v10[4] = v17;
  if (v18) {
    uint64_t v21 = *(void *)(*(void *)(*v5 + 56) + 8 * v17);
  }
  else {
    uint64_t v21 = 0;
  }
  *uint64_t v10 = v21;
  return sub_10018F944;
}

void sub_10018F944(uint64_t **a1)
{
  uint64_t v1 = *a1;
  sub_10018F9D0(*a1, *((unsigned char *)*a1 + 40), (void **)(*a1)[3], (*a1)[4], (*a1)[1], (*a1)[2]);
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t (*sub_10018F994(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  *uint64_t v1 = 0x8000000000000000;
  return sub_10018F9C4;
}

uint64_t sub_10018F9C4(uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

uint64_t sub_10018F9D0(uint64_t *a1, char a2, void **a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    if (a2)
    {
      *(void *)((*a3)[7] + 8 * a4) = v6;
    }
    else
    {
      sub_10018F590(a4, a5, a6, v6, *a3);
      swift_bridgeObjectRetain();
    }
  }
  else if (a2)
  {
    swift_arrayDestroy();
    sub_10000D938(&qword_100326A58);
    _NativeDictionary._delete(at:)();
  }

  return swift_bridgeObjectRetain();
}

uint64_t sub_10018FAA4(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v4 = sub_10019C674(v4);
    *a1 = v4;
  }
  uint64_t v6 = *(void *)(v4 + 16);
  v8[0] = v4 + 32;
  v8[1] = v6;
  sub_10018FBA4(v8, a2 & 1);
  return specialized ContiguousArray._endMutation()();
}

unint64_t sub_10018FB2C()
{
  unint64_t result = qword_100326A98;
  if (!qword_100326A98)
  {
    sub_100163CE4(255, &qword_1003266B8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100326A98);
  }
  return result;
}

uint64_t type metadata accessor for GameActivityStore()
{
  return self;
}

void sub_10018FBA4(uint64_t *a1, char a2)
{
  Swift::Int v4 = a1[1];
  Swift::Int v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      if (v4) {
        sub_1001902B4(0, v4, 1, a1, a2 & 1);
      }
      return;
    }
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
    goto LABEL_144;
  }
  Swift::Int v6 = v5;
  uint64_t v7 = sub_1001771CC(v4 / 2);
  uint64_t v115 = v4;
  uint64_t v116 = v8;
  uint64_t v119 = v7;
  unint64_t v112 = a1;
  if (v4 <= 0)
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
    unint64_t v53 = _swiftEmptyArrayStorage[2];
LABEL_102:
    if (v53 < 2) {
      goto LABEL_116;
    }
    uint64_t v103 = *v112;
    while (1)
    {
      unint64_t v104 = v53 - 2;
      if (v53 < 2) {
        break;
      }
      if (!v103) {
        goto LABEL_148;
      }
      uint64_t v105 = v11;
      uint64_t v106 = *(void *)&v11[16 * v104 + 32];
      uint64_t v107 = *(void *)&v11[16 * v53 + 24];
      sub_1001903B0((void **)(v103 + 8 * v106), (id *)(v103 + 8 * *(void *)&v11[16 * v53 + 16]), v103 + 8 * v107, v116, a2 & 1);
      if (v2) {
        goto LABEL_114;
      }
      if (v107 < v106) {
        goto LABEL_135;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v105 = sub_10019C55C((uint64_t)v105);
      }
      if (v104 >= *((void *)v105 + 2)) {
        goto LABEL_136;
      }
      id v108 = &v105[16 * v104 + 32];
      *(void *)id v108 = v106;
      *((void *)v108 + 1) = v107;
      unint64_t v109 = *((void *)v105 + 2);
      if (v53 > v109) {
        goto LABEL_137;
      }
      memmove(&v105[16 * v53 + 16], &v105[16 * v53 + 32], 16 * (v109 - v53));
      uint64_t v11 = v105;
      *((void *)v105 + 2) = v109 - 1;
      unint64_t v53 = v109 - 1;
      if (v109 <= 2) {
        goto LABEL_116;
      }
    }
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
    goto LABEL_140;
  }
  Swift::Int v113 = v6;
  Swift::Int v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v111 = *a1 - 8;
  uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  uint64_t v117 = *a1;
  while (1)
  {
    Swift::Int v12 = v9++;
    if (v9 < v4)
    {
      char v13 = v11;
      uint64_t v14 = *(void **)(v10 + 8 * v9);
      BOOL v15 = *(void **)(v10 + 8 * v12);
      sub_100163CE4(0, &qword_1003266B8);
      id v16 = v14;
      id v17 = v15;
      char v18 = v17;
      if (a2)
      {
        id v17 = v16;
        unint64_t v19 = v18;
      }
      else
      {
        unint64_t v19 = v16;
      }
      int v20 = static GKGameActivityInternal.< infix(_:_:)(v17, v19);

      Swift::Int v9 = v12 + 2;
      if (v12 + 2 < v4)
      {
        Swift::Int v21 = v12;
        uint64_t v22 = v117;
        while (1)
        {
          uint64_t v23 = v22 + 8 * v21;
          uint64_t v24 = *(void **)(v23 + 8);
          id v25 = *(id *)(v23 + 16);
          id v26 = v24;
          id v27 = v26;
          if (a2)
          {
            id v26 = v25;
            os_log_type_t v28 = v27;
          }
          else
          {
            os_log_type_t v28 = v25;
          }
          int v29 = static GKGameActivityInternal.< infix(_:_:)(v26, v28);

          if ((v20 ^ v29)) {
            break;
          }
          Swift::Int v30 = v21 + 3;
          ++v21;
          uint64_t v22 = v117;
          if (v30 >= v4)
          {
            Swift::Int v9 = v4;
            goto LABEL_18;
          }
        }
        Swift::Int v9 = v21 + 2;
      }
      uint64_t v22 = v117;
LABEL_18:
      uint64_t v11 = v13;
      if (v20)
      {
        if (v9 < v12) {
          goto LABEL_141;
        }
        if (v12 < v9)
        {
          unint64_t v31 = (uint64_t *)(v111 + 8 * v9);
          Swift::Int v32 = v9;
          Swift::Int v33 = v12;
          uint64_t v34 = (uint64_t *)(v22 + 8 * v12);
          do
          {
            if (v33 != --v32)
            {
              if (!v22) {
                goto LABEL_147;
              }
              uint64_t v35 = *v34;
              *uint64_t v34 = *v31;
              *unint64_t v31 = v35;
            }
            ++v33;
            --v31;
            ++v34;
          }
          while (v33 < v32);
        }
      }
    }
    if (v9 < v4)
    {
      if (__OFSUB__(v9, v12)) {
        goto LABEL_139;
      }
      if (v9 - v12 < v113)
      {
        if (__OFADD__(v12, v113)) {
          goto LABEL_142;
        }
        if (v12 + v113 >= v4) {
          Swift::Int v36 = v4;
        }
        else {
          Swift::Int v36 = v12 + v113;
        }
        if (v36 < v12) {
          goto LABEL_143;
        }
        if (v9 != v36)
        {
          Swift::Int v114 = v12;
          id v110 = v11;
          sub_100163CE4(0, &qword_1003266B8);
          uint64_t v37 = v117;
          uint64_t v38 = v111 + 8 * v9;
          do
          {
            Swift::Int v39 = v36;
            uint64_t v40 = *(void **)(v37 + 8 * v9);
            Swift::Int v41 = v114;
            uint64_t v42 = v38;
            while (1)
            {
              uint64_t v43 = *(void **)v42;
              id v44 = v40;
              id v45 = v43;
              uint64_t v46 = v45;
              if (a2)
              {
                id v45 = v44;
                uint64_t v47 = v46;
              }
              else
              {
                uint64_t v47 = v44;
              }
              char v48 = static GKGameActivityInternal.< infix(_:_:)(v45, v47);

              if ((v48 & 1) == 0) {
                break;
              }
              uint64_t v37 = v117;
              if (!v117) {
                goto LABEL_145;
              }
              char v49 = *(void **)v42;
              uint64_t v40 = *(void **)(v42 + 8);
              *(void *)uint64_t v42 = v40;
              *(void *)(v42 + 8) = v49;
              v42 -= 8;
              if (v9 == ++v41) {
                goto LABEL_45;
              }
            }
            uint64_t v37 = v117;
LABEL_45:
            ++v9;
            v38 += 8;
            Swift::Int v36 = v39;
          }
          while (v9 != v39);
          Swift::Int v9 = v39;
          Swift::Int v12 = v114;
          Swift::Int v4 = v115;
          uint64_t v11 = v110;
        }
      }
    }
    if (v9 < v12) {
      goto LABEL_138;
    }
    uint64_t v50 = v11;
    if (swift_isUniquelyReferenced_nonNull_native()) {
      uint64_t v11 = v50;
    }
    else {
      uint64_t v11 = sub_10019C464(0, *((void *)v50 + 2) + 1, 1, v50);
    }
    unint64_t v52 = *((void *)v11 + 2);
    unint64_t v51 = *((void *)v11 + 3);
    unint64_t v53 = v52 + 1;
    uint64_t v10 = v117;
    if (v52 >= v51 >> 1)
    {
      uint64_t v102 = sub_10019C464((char *)(v51 > 1), v52 + 1, 1, v11);
      uint64_t v10 = v117;
      uint64_t v11 = v102;
    }
    *((void *)v11 + 2) = v53;
    uint64_t v54 = v11 + 32;
    uint64_t v55 = &v11[16 * v52 + 32];
    *(void *)uint64_t v55 = v12;
    *((void *)v55 + 1) = v9;
    if (v52) {
      break;
    }
    unint64_t v53 = 1;
LABEL_95:
    if (v9 >= v4) {
      goto LABEL_102;
    }
  }
  while (1)
  {
    unint64_t v56 = v53 - 1;
    if (v53 >= 4)
    {
      long long v61 = &v54[16 * v53];
      uint64_t v62 = *((void *)v61 - 8);
      uint64_t v63 = *((void *)v61 - 7);
      BOOL v67 = __OFSUB__(v63, v62);
      uint64_t v64 = v63 - v62;
      if (v67) {
        goto LABEL_123;
      }
      uint64_t v66 = *((void *)v61 - 6);
      uint64_t v65 = *((void *)v61 - 5);
      BOOL v67 = __OFSUB__(v65, v66);
      uint64_t v59 = v65 - v66;
      char v60 = v67;
      if (v67) {
        goto LABEL_124;
      }
      unint64_t v68 = v53 - 2;
      uint64_t v69 = &v54[16 * v53 - 32];
      uint64_t v71 = *(void *)v69;
      uint64_t v70 = *((void *)v69 + 1);
      BOOL v67 = __OFSUB__(v70, v71);
      uint64_t v72 = v70 - v71;
      if (v67) {
        goto LABEL_125;
      }
      BOOL v67 = __OFADD__(v59, v72);
      uint64_t v73 = v59 + v72;
      if (v67) {
        goto LABEL_127;
      }
      if (v73 >= v64)
      {
        os_log_type_t v91 = &v54[16 * v56];
        uint64_t v93 = *(void *)v91;
        uint64_t v92 = *((void *)v91 + 1);
        BOOL v67 = __OFSUB__(v92, v93);
        uint64_t v94 = v92 - v93;
        if (v67) {
          goto LABEL_133;
        }
        BOOL v84 = v59 < v94;
        goto LABEL_84;
      }
    }
    else
    {
      if (v53 != 3)
      {
        uint64_t v85 = *((void *)v11 + 4);
        uint64_t v86 = *((void *)v11 + 5);
        BOOL v67 = __OFSUB__(v86, v85);
        uint64_t v78 = v86 - v85;
        char v79 = v67;
        goto LABEL_78;
      }
      uint64_t v58 = *((void *)v11 + 4);
      uint64_t v57 = *((void *)v11 + 5);
      BOOL v67 = __OFSUB__(v57, v58);
      uint64_t v59 = v57 - v58;
      char v60 = v67;
    }
    if (v60) {
      goto LABEL_126;
    }
    unint64_t v68 = v53 - 2;
    uint64_t v74 = &v54[16 * v53 - 32];
    uint64_t v76 = *(void *)v74;
    uint64_t v75 = *((void *)v74 + 1);
    BOOL v77 = __OFSUB__(v75, v76);
    uint64_t v78 = v75 - v76;
    char v79 = v77;
    if (v77) {
      goto LABEL_128;
    }
    unint64_t v80 = &v54[16 * v56];
    uint64_t v82 = *(void *)v80;
    uint64_t v81 = *((void *)v80 + 1);
    BOOL v67 = __OFSUB__(v81, v82);
    uint64_t v83 = v81 - v82;
    if (v67) {
      goto LABEL_130;
    }
    if (__OFADD__(v78, v83)) {
      goto LABEL_132;
    }
    if (v78 + v83 >= v59)
    {
      BOOL v84 = v59 < v83;
LABEL_84:
      if (v84) {
        unint64_t v56 = v68;
      }
      goto LABEL_86;
    }
LABEL_78:
    if (v79) {
      goto LABEL_129;
    }
    Swift::String v87 = &v54[16 * v56];
    uint64_t v89 = *(void *)v87;
    uint64_t v88 = *((void *)v87 + 1);
    BOOL v67 = __OFSUB__(v88, v89);
    uint64_t v90 = v88 - v89;
    if (v67) {
      goto LABEL_131;
    }
    if (v90 < v78) {
      goto LABEL_95;
    }
LABEL_86:
    unint64_t v95 = v56 - 1;
    if (v56 - 1 >= v53)
    {
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
      goto LABEL_134;
    }
    if (!v10) {
      goto LABEL_146;
    }
    uint64_t v96 = v11;
    uint64_t v97 = &v54[16 * v95];
    uint64_t v98 = *(void *)v97;
    uint64_t v99 = &v54[16 * v56];
    uint64_t v100 = *((void *)v99 + 1);
    sub_1001903B0((void **)(v10 + 8 * *(void *)v97), (id *)(v10 + 8 * *(void *)v99), v10 + 8 * v100, v116, a2 & 1);
    if (v2) {
      break;
    }
    if (v100 < v98) {
      goto LABEL_120;
    }
    if (v56 > *((void *)v96 + 2)) {
      goto LABEL_121;
    }
    *(void *)uint64_t v97 = v98;
    *(void *)&v54[16 * v95 + 8] = v100;
    unint64_t v101 = *((void *)v96 + 2);
    if (v56 >= v101) {
      goto LABEL_122;
    }
    unint64_t v53 = v101 - 1;
    memmove(&v54[16 * v56], v99 + 16, 16 * (v101 - 1 - v56));
    uint64_t v11 = v96;
    *((void *)v96 + 2) = v101 - 1;
    Swift::Int v4 = v115;
    uint64_t v10 = v117;
    if (v101 <= 2) {
      goto LABEL_95;
    }
  }
LABEL_114:
  swift_bridgeObjectRelease();
  if (v115 >= -1) {
    goto LABEL_117;
  }
  __break(1u);
LABEL_116:
  swift_bridgeObjectRelease();
  if (v115 >= -1)
  {
LABEL_117:
    *(void *)((v119 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
    specialized Array._endMutation()();
    swift_bridgeObjectRelease();
    return;
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
}

void sub_1001902B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5)
{
  if (a3 != a2)
  {
    uint64_t v6 = a3;
    uint64_t v7 = *a4;
    sub_100163CE4(0, &qword_1003266B8);
    uint64_t v8 = v7 + 8 * v6 - 8;
    while (2)
    {
      Swift::Int v9 = *(void **)(v7 + 8 * v6);
      uint64_t v10 = a1;
      uint64_t v11 = v8;
      do
      {
        Swift::Int v12 = *(void **)v11;
        id v13 = v9;
        id v14 = v12;
        BOOL v15 = v14;
        if (a5)
        {
          id v14 = v13;
          id v16 = v15;
        }
        else
        {
          id v16 = v13;
        }
        char v17 = static GKGameActivityInternal.< infix(_:_:)(v14, v16);

        if ((v17 & 1) == 0) {
          break;
        }
        if (!v7)
        {
          __break(1u);
          return;
        }
        char v18 = *(void **)v11;
        Swift::Int v9 = *(void **)(v11 + 8);
        *(void *)uint64_t v11 = v9;
        *(void *)(v11 + 8) = v18;
        v11 -= 8;
        ++v10;
      }
      while (v6 != v10);
      ++v6;
      v8 += 8;
      if (v6 != a2) {
        continue;
      }
      break;
    }
  }
}

uint64_t sub_1001903B0(void **a1, id *a2, unint64_t a3, void **a4, char a5)
{
  uint64_t v7 = a2;
  uint64_t v8 = a1;
  uint64_t v9 = (char *)a2 - (char *)a1;
  uint64_t v10 = a2 - a1;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = (uint64_t)(a3 - (void)a2) / 8;
  if (v10 >= v12)
  {
    sub_1001B7ED4(a2, (uint64_t)(a3 - (void)a2) / 8, a4);
    id v44 = a4;
    id v13 = &a4[v12];
    if (v8 >= v7 || v11 < 8)
    {
      BOOL v15 = a4;
      goto LABEL_47;
    }
    sub_100163CE4(0, &qword_1003266B8);
    id v27 = (id *)(a3 - 8);
    while (1)
    {
      os_log_type_t v28 = v7;
      int v29 = v27 + 1;
      Swift::Int v30 = v13 - 1;
      id v45 = v28;
      Swift::Int v32 = *(v28 - 1);
      unint64_t v31 = v28 - 1;
      id v33 = *(v13 - 1);
      id v34 = v32;
      uint64_t v35 = v34;
      unint64_t v36 = (unint64_t)v13;
      if (a5)
      {
        id v34 = v33;
        uint64_t v37 = v35;
      }
      else
      {
        uint64_t v37 = v33;
      }
      char v38 = static GKGameActivityInternal.< infix(_:_:)(v34, v37);

      if (v38)
      {
        Swift::Int v39 = v44;
        BOOL v40 = v29 != v45 || v27 >= v45;
        uint64_t v7 = v31;
        id v13 = (void **)v36;
        if (!v40) {
          goto LABEL_42;
        }
      }
      else
      {
        BOOL v41 = v29 != (id *)v36 || (unint64_t)v27 >= v36;
        unint64_t v31 = v30;
        id v13 = v30;
        Swift::Int v39 = v44;
        uint64_t v7 = v45;
        if (!v41) {
          goto LABEL_42;
        }
      }
      id *v27 = *v31;
LABEL_42:
      --v27;
      if (v7 <= v8 || v13 <= v39)
      {
        BOOL v15 = v44;
        goto LABEL_47;
      }
    }
  }
  sub_1001B7ED4(a1, a2 - a1, a4);
  id v13 = &a4[v10];
  BOOL v14 = (unint64_t)v7 >= a3 || v9 < 8;
  BOOL v15 = a4;
  if (!v14)
  {
    sub_100163CE4(0, &qword_1003266B8);
    do
    {
      unint64_t v16 = (unint64_t)v13;
      char v17 = *v15;
      id v18 = *v7;
      id v19 = v17;
      int v20 = v19;
      if (a5)
      {
        id v19 = v18;
        Swift::Int v21 = v20;
      }
      else
      {
        Swift::Int v21 = v18;
      }
      char v22 = static GKGameActivityInternal.< infix(_:_:)(v19, v21);

      if (v22)
      {
        uint64_t v23 = v7;
        BOOL v24 = v8 == v7++;
      }
      else
      {
        uint64_t v23 = v15;
        BOOL v24 = v8 == v15++;
      }
      id v13 = (void **)v16;
      if (!v24) {
        *uint64_t v8 = *v23;
      }
      ++v8;
    }
    while ((unint64_t)v15 < v16 && (unint64_t)v7 < a3);
  }
  uint64_t v7 = v8;
LABEL_47:
  sub_1001B7ED4(v15, v13 - v15, v7);
  return 1;
}

void sub_100190618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_100190654(a1, a2, a3, (uint64_t)sub_1001B840C, (uint64_t)&unk_100326B28, (uint64_t)&unk_100326B20, (uint64_t)sub_100179ACC, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26);
}

void sub_100190654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_100018510();
  a25 = v26;
  a26 = v28;
  Swift::Int v30 = v29;
  Swift::Int v32 = v31;
  id v34 = v33;
  unint64_t v36 = v35;
  unint64_t v37 = v27;
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  unint64_t v42 = v27 >> 62;
  if (v27 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v43) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v43 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v43)
    {
LABEL_13:
      sub_1001912DC();
      return;
    }
  }
  if (v41)
  {
    if (v42)
    {
      swift_bridgeObjectRetain();
      uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v44 <= v39)
      {
        if (v43 >= 1)
        {
          uint64_t v45 = sub_100191270(v34, v32);
          swift_bridgeObjectRetain();
          for (uint64_t i = 0; i != v43; ++i)
          {
            uint64_t v47 = sub_10000D938(v32);
            char v48 = (void (*)(char *, void))v30(&a11, i, v37, v47, v45);
            id v50 = *v49;
            v48(&a11, 0);
            *(void *)(v41 + 8 * i) = v50;
          }
          swift_bridgeObjectRelease();
          goto LABEL_13;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10) <= v39)
      {
        v36((v37 & 0xFFFFFFFFFFFFFF8) + 32, *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10), v41);
        goto LABEL_13;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_1001907EC(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  Swift::Int v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *Swift::Int v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    int v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    unint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void *sub_1001909EC(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  Swift::Int v5 = result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *Swift::Int v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (void *)v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    int v20 = *(void **)(*(void *)(a4 + 56) + 8 * v16);
    *uint64_t v11 = v20;
    if (v13 == v10)
    {
      id v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    unint64_t result = v20;
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100190BE8()
{
  _Block_release(*(const void **)(v0 + 16));
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100190C28()
{
  sub_1000112E8();
  uint64_t v1 = *(const void **)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = swift_task_alloc();
  Swift::Int v4 = (void *)sub_100008DC0(v3);
  *Swift::Int v4 = v5;
  v4[1] = sub_1001912C0;
  uint64_t v6 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_100326AC8 + dword_100326AC8);
  return v6(v1, v2);
}

uint64_t sub_100190CD0()
{
  sub_1000112E8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100008DC0(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_1001912C0;
  uint64_t v3 = sub_100017CB8();
  return v4(v3);
}

uint64_t sub_100190D68()
{
  _Block_release(*(const void **)(v0 + 32));
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100190DB0()
{
  sub_100010F2C();
  uint64_t v1 = *(void *)(v0 + 16);
  char v2 = *(unsigned char *)(v0 + 24);
  Swift::Int v4 = *(void **)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = (void *)sub_100008DC0(v5);
  *uint64_t v6 = v7;
  v6[1] = sub_1001912C0;
  uint64_t v8 = (uint64_t (*)(int, char, void *, uint64_t))((char *)&dword_100326AE8 + dword_100326AE8);
  return v8(v1, v2, v4, v3);
}

uint64_t sub_100190E70()
{
  sub_1000112E8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100008DC0(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100190F08;
  uint64_t v3 = sub_100017CB8();
  return v4(v3);
}

uint64_t sub_100190F08()
{
  sub_100011168();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  swift_task_dealloc();
  sub_1000112AC();
  return v3();
}

uint64_t sub_100190FD0()
{
  _Block_release(*(const void **)(v0 + 24));
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100191018()
{
  sub_1000112E8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100008DC0(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_1001912C0;
  uint64_t v3 = sub_100017CB8();
  return v4(v3);
}

uint64_t sub_1001910B0(unint64_t a1)
{
  unint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v3;
  if (!result || (v3 & 0x8000000000000000) != 0 || (v3 & 0x4000000000000000) != 0)
  {
    uint64_t result = sub_1001911B4(v3);
    unint64_t v3 = result;
    *uint64_t v1 = result;
  }
  uint64_t v5 = v3 & 0xFFFFFFFFFFFFFF8;
  unint64_t v6 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    unint64_t v8 = v6 - 1 - a1;
    uint64_t v9 = v5 + 8 * a1;
    uint64_t v10 = *(void *)(v9 + 32);
    sub_1001B7ED4(v9 + 40, v8, v9 + 32);
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v7;
    specialized Array._endMutation()();
    return v10;
  }
  return result;
}

uint64_t sub_100191144()
{
  unint64_t v1 = *v0;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v0 = v1;
  if (!result || (v1 & 0x8000000000000000) != 0 || (v1 & 0x4000000000000000) != 0)
  {
    uint64_t result = sub_1001911B4(v1);
    unint64_t v1 = result;
    unint64_t *v0 = result;
  }
  uint64_t v3 = v1 & 0xFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    uint64_t v5 = v4 - 1;
    uint64_t v6 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 8 * v5 + 0x20);
    *(void *)(v3 + 16) = v5;
    specialized Array._endMutation()();
    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001911B4(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t sub_100191230(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for NWEndpoint();
    sub_100191324();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100191270(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100163988(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1001912C4(uint64_t a1@<X8>)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = a1;
}

uint64_t sub_1001912F8()
{
  return v0;
}

uint64_t sub_10019130C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 64) |= 1 << result;
  return result;
}

uint64_t sub_100191324()
{
  return v0;
}

void (*sub_100191330())(void **a1)
{
  return sub_10018DBF8(v1, v2, v0);
}

uint64_t sub_100191350()
{
  uint64_t result = sub_1001C7BE4((uint64_t)&off_1002DCBB8);
  qword_100326B30 = result;
  return result;
}

id NetworkRequestEligibiltyChecker.__allocating_init(hasAcknowledgedLatestGDPR:alwaysAllowedBagKeysObject:isAppUnlistedAndDisallowed:)(char a1, uint64_t a2, char a3)
{
  id v7 = objc_allocWithZone(v3);
  return NetworkRequestEligibiltyChecker.init(hasAcknowledgedLatestGDPR:alwaysAllowedBagKeysObject:isAppUnlistedAndDisallowed:)(a1, a2, a3);
}

void NetworkRequestEligibiltyChecker.init()()
{
}

id NetworkRequestEligibiltyChecker.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for NetworkRequestEligibiltyChecker();
  return [super dealloc];
}

id sub_100191438(uint64_t a1, uint64_t a2, void *a3)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v6 = [a3 userErrorForCode:a1 userInfo:isa];

  return v6;
}

void sub_1001914C4(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  unint64_t v8 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v7 << 6);
      goto LABEL_22;
    }
    int64_t v11 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v11 >= v6) {
      goto LABEL_30;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v11);
    ++v7;
    if (!v12)
    {
      int64_t v7 = v11 + 1;
      if (v11 + 1 >= v6) {
        goto LABEL_30;
      }
      unint64_t v12 = *(void *)(v2 + 8 * v7);
      if (!v12)
      {
        int64_t v7 = v11 + 2;
        if (v11 + 2 >= v6) {
          goto LABEL_30;
        }
        unint64_t v12 = *(void *)(v2 + 8 * v7);
        if (!v12)
        {
          int64_t v7 = v11 + 3;
          if (v11 + 3 >= v6) {
            goto LABEL_30;
          }
          unint64_t v12 = *(void *)(v2 + 8 * v7);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v7 << 6);
LABEL_22:
    sub_10000753C(*(void *)(a1 + 48) + 40 * v10, (uint64_t)v22);
    v20[0] = v22[0];
    v20[1] = v22[1];
    uint64_t v21 = v23;
    sub_10000753C((uint64_t)v20, (uint64_t)v19);
    sub_10000D938(&qword_100327298);
    if ((swift_dynamicCast() & 1) == 0) {
      uint64_t v24 = 0;
    }
    sub_1001658C4((uint64_t)v20);
    uint64_t v14 = v24;
    if (v24)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1001B762C(0, v8[2] + 1, 1, (uint64_t)v8);
        unint64_t v8 = v17;
      }
      unint64_t v16 = v8[2];
      unint64_t v15 = v8[3];
      if (v16 >= v15 >> 1)
      {
        sub_1001B762C(v15 > 1, v16 + 1, 1, (uint64_t)v8);
        unint64_t v8 = v18;
      }
      uint64_t v8[2] = v16 + 1;
      v8[v16 + 4] = v14;
    }
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_30:
    swift_release();
    return;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v13);
  if (v12)
  {
    int64_t v7 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v7 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v7 >= v6) {
      goto LABEL_30;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v7);
    ++v13;
    if (v12) {
      goto LABEL_21;
    }
  }
LABEL_32:
  __break(1u);
}

uint64_t sub_100191708()
{
  sub_10000D938(&qword_1003272F8);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10024F850;
  unint64_t v1 = sub_10019DA68();
  *(void *)(v0 + 32) = &type metadata for EntityCacheSchemaV1;
  *(void *)(v0 + 40) = v1;
  return v0;
}

void *sub_100191760()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_100191774()
{
  sub_10000D938(&qword_100326FB8);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10024F850;
  uint64_t v1 = type metadata accessor for EntityCacheSchemaV1.CachedEntity();
  unint64_t v2 = sub_10001A43C((uint64_t)&unk_100326F90);
  *(void *)(v0 + 32) = v1;
  *(void *)(v0 + 40) = v2;
  return v0;
}

uint64_t sub_100191800()
{
  return Schema.Version.init(_:_:_:)(1, 0, 0);
}

void sub_100191810()
{
}

uint64_t sub_10019181C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100171960(a3, (uint64_t)v4);
  sub_100165918(v4, v4[3]);
  swift_getKeyPath();
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_bridgeObjectRelease();
  swift_release();
  return sub_100016C38((uint64_t)v4);
}

void sub_1001918C8()
{
}

void sub_1001918D4()
{
}

uint64_t sub_1001919C8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  sub_100171960(a3, (uint64_t)v6);
  sub_100165918(v6, v6[3]);
  swift_getKeyPath();
  sub_10019D400();
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_100169274(a1, a2);
  return sub_100016C38((uint64_t)v6);
}

uint64_t sub_100191A78()
{
  swift_getKeyPath();
  sub_10001A43C((uint64_t)&unk_100326F70);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_10001A43C((uint64_t)&unk_100326F90);
  sub_10019BC54();
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  return v0;
}

void sub_100191B80()
{
}

uint64_t sub_100191B8C(uint64_t a1, uint64_t a2)
{
  sub_100171960(a2, (uint64_t)v4);
  sub_100165918(v4, v4[3]);
  swift_getKeyPath();
  type metadata accessor for Date();
  sub_10019D3C4((uint64_t)&unk_100327250);
  sub_100017130();
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_100011C3C();
  v2();
  return sub_100016C38((uint64_t)v4);
}

void sub_100191C74()
{
}

void sub_100191C80()
{
}

uint64_t sub_100191D90()
{
  uint64_t v25 = 0;
  unint64_t v26 = 0xE000000000000000;
  _StringGuts.grow(_:)(78);
  v0._object = (void *)0x80000001002B1680;
  v0._uint64_t countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v0);
  sub_100191810();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 0x203A6469202CLL;
  v2._object = (void *)0xE600000000000000;
  String.append(_:)(v2);
  sub_1001918C8();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 0x632065747962202CLL;
  v4._object = (void *)0xEE00203A746E756FLL;
  String.append(_:)(v4);
  uint64_t v5 = sub_100191A78();
  unint64_t v7 = v6;
  uint64_t v8 = Data.count.getter();
  sub_100169274(v5, v7);
  v24[1] = v8;
  v9._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 0x646568636163202CLL;
  v10._object = (void *)0xED0000203A746120;
  String.append(_:)(v10);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11, v14);
  unint64_t v15 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_100191B80();
  sub_10019D3C4((uint64_t)&unk_100326F88);
  v16._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  int64_t v17 = *(void (**)(char *, uint64_t))(v12 + 8);
  v17((char *)v24 - v15, v11);
  v18._uint64_t countAndFlagsBits = 0x657269707865202CLL;
  v18._object = (void *)0xED0000203A746120;
  String.append(_:)(v18);
  __chkstk_darwin(v19, v20);
  sub_100191C74();
  v21._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v17((char *)v24 - v15, v11);
  v22._uint64_t countAndFlagsBits = 41;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  return v25;
}

BOOL sub_100192070()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = *(void *)(v1 + 64);
  __chkstk_darwin(v0, v3);
  uint64_t v4 = static Date.now.getter();
  __chkstk_darwin(v4, v5);
  unint64_t v6 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100191C74();
  sub_10019D3C4((uint64_t)&unk_1003271F8);
  char v7 = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v6, v0);
  v8(v6, v0);
  return (v7 & 1) == 0;
}

uint64_t *sub_1001921B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  Swift::String v9 = v8;
  uint64_t v30 = a8;
  uint64_t v31 = a7;
  uint64_t v16 = *v8;
  v9[5] = sub_10000D938(&qword_100327268);
  uint64_t v32 = v16;
  uint64_t v33 = v16;
  unint64_t v34 = sub_10001A43C((uint64_t)&unk_100326F90);
  unint64_t v35 = v34;
  v9[6] = swift_getOpaqueTypeConformance2();
  sub_100171DD8(v9 + 2);
  static PersistentModel.createBackingData<A>()();
  ObservationRegistrar.init()();
  sub_10019181C(a1, a2, (uint64_t)(v9 + 2));
  sub_10019181C(a3, a4, (uint64_t)(v9 + 2));
  uint64_t v28 = a5;
  unint64_t v29 = a6;
  sub_100175574(a5, a6);
  sub_1001919C8(a5, a6, (uint64_t)(v9 + 2));
  uint64_t v17 = type metadata accessor for Date();
  Swift::String v18 = *(void **)(v17 - 8);
  uint64_t v19 = v18[8];
  __chkstk_darwin(v17, v20);
  unint64_t v21 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  Swift::String v22 = (void (*)(char *, uint64_t, uint64_t))v18[2];
  v22((char *)&v28 - v21, v31, v17);
  uint64_t v23 = sub_100191B8C((uint64_t)&v28 - v21, (uint64_t)(v9 + 2));
  __chkstk_darwin(v23, v24);
  uint64_t v25 = v30;
  v22((char *)&v28 - v21, v30, v17);
  sub_100191B8C((uint64_t)&v28 - v21, (uint64_t)(v9 + 2));
  sub_100169274(v28, v29);
  unint64_t v26 = (void (*)(uint64_t, uint64_t))v18[1];
  v26(v25, v17);
  v26(v31, v17);
  return v9;
}

uint64_t sub_1001924A8@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return sub_100171960(v1 + 16, a1);
}

uint64_t sub_1001924F4(long long *a1)
{
  uint64_t v3 = v1 + 16;
  swift_beginAccess();
  sub_100016C38(v3);
  sub_10019BCEC(a1, v3);
  return swift_endAccess();
}

uint64_t sub_100192550()
{
  sub_10000D938(&qword_100326FB0);
  type metadata accessor for Schema.PropertyMetadata();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10024FCC0;
  swift_getKeyPath();
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
  swift_getKeyPath();
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
  swift_getKeyPath();
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
  swift_getKeyPath();
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
  swift_getKeyPath();
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
  return v0;
}

uint64_t *sub_100192760(uint64_t a1)
{
  return sub_10019279C(a1);
}

uint64_t *sub_10019279C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  v2[5] = sub_10000D938(&qword_100327268);
  *(void *)&long long v6 = v4;
  *((void *)&v6 + 1) = v4;
  unint64_t v7 = sub_10001A43C((uint64_t)&unk_100326F90);
  unint64_t v8 = v7;
  v2[6] = swift_getOpaqueTypeConformance2();
  sub_100171DD8(v2 + 2);
  static PersistentModel.createBackingData<A>()();
  ObservationRegistrar.init()();
  sub_100171960(a1, (uint64_t)&v6);
  swift_beginAccess();
  sub_100016C38((uint64_t)(v2 + 2));
  sub_10019BCEC(&v6, (uint64_t)(v2 + 2));
  swift_endAccess();
  sub_100016C38(a1);
  return v2;
}

uint64_t sub_1001928F0()
{
  sub_100016C38(v0 + 16);
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14GameDaemonCoreP33_1FC4D10440B9DF42E57D244557C7E23B19EntityCacheSchemaV112CachedEntity___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v3, v4);
}

uint64_t sub_100192998()
{
  return type metadata accessor for EntityCacheSchemaV1.CachedEntity();
}

uint64_t type metadata accessor for EntityCacheSchemaV1.CachedEntity()
{
  uint64_t result = qword_100326BB8;
  if (!qword_100326BB8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001929E8()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100192A98()
{
  return sub_100191D90();
}

uint64_t sub_100192ADC()
{
  sub_100017174();
  _StringGuts.grow(_:)(31);
  v1._uint64_t countAndFlagsBits = 0x4564656863746546;
  v1._object = (void *)0xEE0020797469746ELL;
  String.append(_:)(v1);
  sub_10000D938(&qword_1003270B0);
  _print_unlocked<A, B>(_:_:)();
  v2._uint64_t countAndFlagsBits = 0x697078457369202CLL;
  v2._object = (void *)0xED0000203A646572;
  String.append(_:)(v2);
  if (*(unsigned char *)(v0 + OBJC_IVAR___GKFetchedEntity_isExpired)) {
    uint64_t v3 = 1702195828;
  }
  else {
    uint64_t v3 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + OBJC_IVAR___GKFetchedEntity_isExpired)) {
    unint64_t v4 = 0xE400000000000000;
  }
  else {
    unint64_t v4 = 0xE500000000000000;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  return v7;
}

id sub_100192BEC(uint64_t a1, char a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v2[OBJC_IVAR___GKFetchedEntity_entity] = a1;
  v2[OBJC_IVAR___GKFetchedEntity_isExpired] = a2;
  v7.receiver = v2;
  v7.Class super_class = ObjectType;
  return [super init];
}

void sub_100192C54()
{
}

uint64_t type metadata accessor for FetchedEntity()
{
  return self;
}

uint64_t sub_100192CC8()
{
  uint64_t result = sub_100192CE8();
  qword_100326B80 = result;
  return result;
}

uint64_t sub_100192CE8()
{
  sub_10000D938(&qword_1003265C8);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10024F850;
  *(void *)(v0 + 32) = sub_100163CE4(0, &qword_100327290);
  id v1 = [self secureCodedJsonTypes];
  uint64_t v2 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1001914C4(v2);
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  sub_1001799F0(v4);
  return v0;
}

uint64_t sub_100192DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)&long long v93 = a4;
  uint64_t v90 = a1;
  uint64_t v91 = a3;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v89 = (char *)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ModelConfiguration.CloudKitDatabase();
  __chkstk_darwin(v12 - 8, v13);
  unint64_t v15 = ((char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = type metadata accessor for ModelConfiguration();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v19 = __chkstk_darwin(v16, v18);
  uint64_t v86 = (char *)&v79 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v21);
  uint64_t v23 = (char *)&v79 - v22;
  uint64_t v87 = v9;
  uint64_t v88 = v8;
  uint64_t v92 = v5;
  if (a5)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    ModelConfiguration.init(isStoredInMemoryOnly:)();
    goto LABEL_6;
  }
  os_log_t v81 = v15;
  uint64_t v82 = (char *)&v79 - v22;
  uint64_t v85 = v17;
  uint64_t v83 = v16;
  uint64_t v24 = type metadata accessor for URL();
  BOOL v84 = &v79;
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(void *)(v25 + 64);
  __chkstk_darwin(v24, v27);
  unint64_t v28 = (v26 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v80 = (char *)&v79 - v28;
  unint64_t v29 = self;
  id v30 = [self defaultManager];
  id v31 = sub_1001D8DEC(v90, a2, v91, v93, 0xD000000000000026, 0x80000001002B18C0, (uint64_t)v30, v29);

  uint64_t v32 = sub_10000D938(&qword_100327E70);
  uint64_t v34 = __chkstk_darwin(v32 - 8, v33);
  unint64_t v37 = (v36 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v38 = (char *)&v79 - v37;
  if (!v31)
  {
    sub_10000D97C((uint64_t)&v79 - v37, 1, 1, v24);
    goto LABEL_11;
  }
  __chkstk_darwin(v34, v35);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
  v39(v38, (char *)&v79 - v28, v24);
  sub_10000D97C((uint64_t)v38, 0, 1, v24);
  if (sub_10000DB14((uint64_t)v38, 1, v24) == 1)
  {
LABEL_11:
    sub_10001864C((uint64_t)v38, &qword_100327E70);
    sub_10019CC70();
    swift_allocError();
    *uint64_t v78 = 0x8000000000000000;
    return swift_willThrow();
  }
  uint64_t v40 = v80;
  uint64_t v41 = ((uint64_t (*)(char *, char *, uint64_t))v39)(v80, v38, v24);
  __chkstk_darwin(v41, v42);
  uint64_t v43 = v25;
  (*(void (**)(char *, char *, uint64_t))(v25 + 16))((char *)&v79 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0), v40, v24);
  static ModelConfiguration.CloudKitDatabase.none.getter();
  uint64_t v23 = v82;
  ModelConfiguration.init(_:schema:url:allowsSave:cloudKitDatabase:)();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v40, v24);
  uint64_t v16 = v83;
  uint64_t v17 = v85;
LABEL_6:
  type metadata accessor for ModelContainer();
  sub_10000D938(&qword_100326FB8);
  uint64_t v44 = swift_allocObject();
  long long v93 = xmmword_10024F850;
  *(_OWORD *)(v44 + 16) = xmmword_10024F850;
  uint64_t v45 = type metadata accessor for EntityCacheSchemaV1.CachedEntity();
  unint64_t v46 = sub_10001A43C((uint64_t)&unk_100326F90);
  *(void *)(v44 + 32) = v45;
  *(void *)(v44 + 40) = v46;
  sub_10019CCBC();
  sub_10000D938(&qword_1003270F0);
  uint64_t v47 = v17;
  unint64_t v48 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v49 = swift_allocObject();
  *(_OWORD *)(v49 + 16) = v93;
  id v50 = *(void (**)(unint64_t, char *, uint64_t))(v47 + 16);
  v50(v49 + v48, v23, v16);
  uint64_t v51 = v92;
  uint64_t v52 = ModelContainer.__allocating_init(for:migrationPlan:configurations:)();
  uint64_t v53 = v16;
  if (v51) {
    return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v23, v16);
  }
  uint64_t v55 = v52;
  uint64_t v85 = v47;
  type metadata accessor for EntityCache();
  swift_allocObject();
  uint64_t v56 = swift_retain();
  uint64_t v92 = v55;
  *(void *)&long long v93 = sub_100196ACC(v56);
  uint64_t v57 = v89;
  static GKLog.cache.getter();
  uint64_t v58 = v86;
  v50((unint64_t)v86, v23, v16);
  uint64_t v59 = Logger.logObject.getter();
  os_log_type_t v60 = static os_log_type_t.debug.getter();
  int v61 = v60;
  if (os_log_type_enabled(v59, v60))
  {
    uint64_t v62 = swift_slowAlloc();
    uint64_t v82 = v23;
    uint64_t v63 = v58;
    uint64_t v64 = v62;
    uint64_t v91 = swift_slowAlloc();
    uint64_t v95 = v91;
    *(_DWORD *)uint64_t v64 = 136315394;
    uint64_t v94 = sub_100174CE4(0xD000000000000020, 0x80000001002B18F0, &v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v64 + 12) = 2080;
    BOOL v84 = (uint64_t *)(v64 + 14);
    uint64_t v65 = type metadata accessor for URL();
    LODWORD(v90) = v61;
    uint64_t v66 = v65;
    unint64_t v80 = (char *)&v79;
    uint64_t v67 = *(void *)(v65 - 8);
    uint64_t v83 = v16;
    uint64_t v68 = v67;
    __chkstk_darwin(v65, v69);
    uint64_t v71 = (char *)&v79 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
    ModelConfiguration.url.getter();
    uint64_t v72 = URL.absoluteString.getter();
    os_log_t v81 = v59;
    unint64_t v74 = v73;
    (*(void (**)(char *, uint64_t))(v68 + 8))(v71, v66);
    uint64_t v94 = sub_100174CE4(v72, v74, &v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v75 = *(void (**)(char *, uint64_t))(v85 + 8);
    uint64_t v53 = v83;
    v75(v63, v83);
    os_log_t v76 = v81;
    _os_log_impl((void *)&_mh_execute_header, v81, (os_log_type_t)v90, "%s initialized at: %s", (uint8_t *)v64, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();

    (*(void (**)(char *, uint64_t))(v87 + 8))(v89, v88);
    BOOL v77 = v82;
  }
  else
  {

    uint64_t v75 = *(void (**)(char *, uint64_t))(v85 + 8);
    v75(v58, v16);
    swift_release();
    (*(void (**)(char *, uint64_t))(v87 + 8))(v57, v88);
    BOOL v77 = v23;
  }
  v75(v77, v53);
  return v93;
}

uint64_t sub_1001936D0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  long long v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static GKLog.cache.getter();
  objc_super v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    uint64_t v11 = sub_100174CE4(0xD000000000000020, 0x80000001002B18F0, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s is deinitializing", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  swift_unknownObjectRelease();
  swift_release();
  return v1;
}

uint64_t sub_1001938BC()
{
  uint64_t v0 = sub_1001936D0();

  return _swift_deallocClassInstance(v0, 40, 7);
}

uint64_t sub_1001938EC(uint64_t a1, uint64_t a2)
{
  void v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  uint64_t v4 = type metadata accessor for Logger();
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  v3[10] = swift_task_alloc();
  v3[11] = type metadata accessor for EntityCache();
  sub_10001A43C((uint64_t)&unk_100326F60);
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100193A18, v6, v5);
}

uint64_t sub_100193A18()
{
  unint64_t v28 = v0;
  unint64_t v1 = v0[5];
  sub_10000D938(&qword_100327178);
  uint64_t v2 = swift_task_alloc();
  if (v1)
  {
    uint64_t v3 = v0 + 2;
    uint64_t v4 = v0 + 4;
    static GKLog.cache.getter();
    swift_bridgeObjectRetain_n();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    uint64_t v8 = v0[10];
    uint64_t v9 = v0[8];
    if (v7)
    {
      uint64_t v24 = *v4;
      uint64_t v25 = v0[7];
      uint64_t v26 = v2;
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = sub_100011BBC();
      *(_DWORD *)uint64_t v10 = 136315138;
      swift_bridgeObjectRetain();
      v0[3] = sub_100174CE4(v24, v1, &v27);
      uint64_t v4 = v0 + 4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Deleting entities for bagKey: %s", v10, 0xCu);
      swift_arrayDestroy();
      uint64_t v3 = v0 + 2;
      sub_100010D7C();
      uint64_t v2 = v26;
      sub_100010D7C();

      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v25);
    }
    else
    {
      uint64_t v17 = v0[7];

      swift_bridgeObjectRelease_n();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v17);
    }
    uint64_t v18 = *v4;
    uint64_t v19 = swift_task_alloc();
    uint64_t v20 = swift_task_alloc();
    *(void *)(v20 + 16) = v18;
    *(void *)(v20 + 24) = v1;
    uint64_t *v3 = type metadata accessor for EntityCacheSchemaV1.CachedEntity();
    Predicate.init(_:)();
    uint64_t v21 = sub_10000D938(&qword_100327180);
    sub_10000D97C(v19, 0, 1, v21);
    sub_10019D454(v19, v2);
    swift_task_dealloc();
    swift_task_dealloc();
  }
  else
  {
    static GKLog.cache.getter();
    uint64_t v11 = Logger.logObject.getter();
    uint64_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, (os_log_type_t)v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, (os_log_type_t)v12, "Deleting all entities", v13, 2u);
      sub_100010D7C();
    }

    uint64_t v14 = sub_100018048();
    v15(v14);
    uint64_t v16 = sub_10000D938(&qword_100327180);
    sub_10000D97C(v2, 1, 1, v16);
  }
  sub_10001A43C((uint64_t)&unk_100326FA8);
  ModelActor.modelContext.getter();
  type metadata accessor for EntityCacheSchemaV1.CachedEntity();
  sub_10001A43C((uint64_t)&unk_100326F90);
  dispatch thunk of ModelContext.delete<A>(model:where:includeSubclasses:)();
  swift_release();
  ModelActor.modelContext.getter();
  dispatch thunk of ModelContext.save()();
  sub_10001864C(v2, &qword_100327178);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = (uint64_t (*)(void))v0[1];
  return v23();
}

uint64_t sub_100193ECC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v5 = sub_10000D938(&qword_100327198);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000D938(&qword_1003271A0);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100019D1C((uint64_t)&unk_1003271A8);
  static PredicateExpressions.build_Arg<A>(_:)();
  swift_getKeyPath();
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  uint64_t v15 = sub_10000D938(&qword_1003271B0);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  uint64_t v19 = (char *)&v21 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = a1;
  uint64_t v24 = v22;
  static PredicateExpressions.build_Arg<A>(_:)();
  a3[3] = sub_10000D938(&qword_100327190);
  a3[4] = sub_10019D144();
  sub_100171DD8(a3);
  sub_100019D1C((uint64_t)&unk_1003271B8);
  sub_100019D1C((uint64_t)&unk_1003271C0);
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_100194204(uint64_t a1, void *aBlock, uint64_t a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  if (a1)
  {
    a1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v6 = 0;
  }
  v3[4] = v6;
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  void v3[5] = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_1001942E4;
  return sub_1001938EC(a1, v6);
}

uint64_t sub_1001942E4()
{
  sub_100010F2C();
  uint64_t v2 = v0;
  sub_100011C24();
  uint64_t v4 = v3;
  sub_100010D94();
  *uint64_t v5 = v4;
  *uint64_t v5 = *v1;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10000DC0C();
  if (v2)
  {
    uint64_t v6 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    uint64_t v7 = sub_100017E70();
    v8(v7);
  }
  else
  {
    uint64_t v9 = sub_100017DE8();
    v10(v9);
  }
  _Block_release(*(const void **)(v4 + 24));
  sub_100018360();
  return v11();
}

uint64_t sub_100194434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[19] = a4;
  v5[20] = v4;
  v5[17] = a2;
  v5[18] = a3;
  v5[16] = a1;
  uint64_t v6 = sub_10000D938(&qword_100327278);
  v5[21] = v6;
  v5[22] = *(void *)(v6 - 8);
  v5[23] = swift_task_alloc();
  v5[24] = type metadata accessor for EntityCache();
  sub_10001A43C((uint64_t)&unk_100326F60);
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100194558, v8, v7);
}

void sub_100194558()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 152);
  long long v31 = *(_OWORD *)(v0 + 128);
  sub_10000D938(&qword_100327178);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = sub_10000D938(&qword_100327180);
  sub_10000D97C(v3, 1, 1, v4);
  uint64_t v5 = type metadata accessor for EntityCacheSchemaV1.CachedEntity();
  uint64_t v6 = (_OWORD *)sub_10001A43C((uint64_t)&unk_100326F90);
  FetchDescriptor.init(predicate:sortBy:)();
  uint64_t v7 = swift_task_alloc();
  uint64_t v8 = swift_task_alloc();
  *(_OWORD *)(v8 + 16) = v31;
  *(void *)(v8 + 32) = v1;
  *(void *)(v8 + 40) = v2;
  *(void *)(v0 + 112) = v5;
  Predicate.init(_:)();
  sub_10000D97C(v7, 0, 1, v4);
  FetchDescriptor.predicate.setter();
  FetchDescriptor.fetchLimit.setter();
  sub_10001A43C((uint64_t)&unk_100326FA8);
  ModelActor.modelContext.getter();
  unint64_t v9 = dispatch thunk of ModelContext.fetch<A>(_:)();
  swift_release();
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v26)
    {
LABEL_3:
      if ((v9 & 0xC000000000000001) != 0)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_23;
        }
        swift_retain();
      }
      uint64_t v6 = (_OWORD *)(v0 + 48);
      swift_bridgeObjectRelease();
      sub_100163CE4(0, (unint64_t *)&unk_100327280);
      if (qword_100325EA8 == -1)
      {
LABEL_7:
        uint64_t v10 = sub_100191A78();
        unint64_t v12 = v11;
        static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)();
        sub_100169274(v10, v12);
        if (*(void *)(v0 + 72))
        {
          sub_1000074D0(v6, (_OWORD *)(v0 + 16));
          uint64_t v17 = sub_100010F54();
          sub_1000074E0(v17, v18);
          sub_10000D938(&qword_1003270B0);
          if (swift_dynamicCast())
          {
            uint64_t v19 = *(void *)(v0 + 120);
            BOOL v20 = sub_100192070();
            id v21 = objc_allocWithZone((Class)type metadata accessor for FetchedEntity());
            sub_100192BEC(v19, v20);
            swift_release();
            sub_100016C38(v0 + 16);
            sub_10019DC14();
            v22();
            goto LABEL_18;
          }
          sub_10019CC70();
          uint64_t v23 = sub_1000169D0();
          *uint64_t v25 = 0x8000000000000010;
          swift_willThrow();
          sub_100016C38(v0 + 16);
        }
        else
        {
          sub_10001864C((uint64_t)v6, &qword_100326FD0);
          sub_10019CC70();
          uint64_t v23 = sub_1000169D0();
          *uint64_t v24 = 0x8000000000000008;
          swift_willThrow();
        }
        sub_10019CC70();
        sub_1000169D0();
        *uint64_t v13 = v23;
        swift_errorRetain();
        swift_willThrow();
        swift_release();
        swift_errorRelease();
        sub_10019DC14();
        v14();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        sub_1000112AC();
        sub_100011220();
        __asm { BRAA            X1, X16 }
      }
LABEL_23:
      swift_once();
      goto LABEL_7;
    }
  }
  else if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  swift_bridgeObjectRelease();
  uint64_t v27 = sub_100018048();
  v28(v27);
LABEL_18:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10001823C();
  sub_100011220();
  __asm { BRAA            X2, X16 }
}

uint64_t sub_100194AF0@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  unint64_t v58 = a4;
  unint64_t v59 = a5;
  unint64_t v51 = a2;
  unint64_t v52 = a3;
  os_log_type_t v60 = a6;
  uint64_t v49 = *a1;
  uint64_t v6 = sub_10000D938(&qword_100327190);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v61 = v6;
  uint64_t v62 = v7;
  uint64_t v56 = *(void *)(v7 + 64);
  __chkstk_darwin(v6, v8);
  unint64_t v57 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v63 = (char *)&v44 - v57;
  uint64_t v50 = sub_10000D938(&qword_100327198);
  uint64_t v64 = *(void *)(v50 - 8);
  uint64_t v54 = *(void *)(v64 + 64);
  __chkstk_darwin(v50, v10);
  unint64_t v55 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v12 = (char *)&v44 - v55;
  uint64_t v13 = sub_10000D938(&qword_1003271A0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13, v16);
  unint64_t v53 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v17 = (char *)&v44 - v53;
  sub_100019D1C((uint64_t)&unk_1003271A8);
  static PredicateExpressions.build_Arg<A>(_:)();
  swift_getKeyPath();
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)();
  swift_release();
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t))(v14 + 8);
  uint64_t v47 = v14 + 8;
  unint64_t v48 = v18;
  v18(v17, v13);
  uint64_t v19 = sub_10000D938(&qword_1003271B0);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(void *)(v20 + 64);
  __chkstk_darwin(v19, v22);
  unint64_t v46 = (v21 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v23 = (char *)&v44 - v46;
  unint64_t v65 = v51;
  unint64_t v66 = v52;
  static PredicateExpressions.build_Arg<A>(_:)();
  unint64_t v52 = sub_100019D1C((uint64_t)&unk_1003271B8);
  unint64_t v51 = sub_100019D1C((uint64_t)&unk_1003271C0);
  uint64_t v24 = v50;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)();
  uint64_t v45 = *(void (**)(char *, uint64_t))(v20 + 8);
  v45(v23, v19);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v64 + 8);
  v64 += 8;
  uint64_t v44 = v25;
  uint64_t v26 = ((uint64_t (*)(char *, uint64_t))v25)(v12, v24);
  uint64_t v28 = __chkstk_darwin(v26, v27);
  uint64_t v29 = (char *)&v44 - v57;
  uint64_t v31 = __chkstk_darwin(v28, v30);
  uint64_t v32 = (char *)&v44 - v55;
  __chkstk_darwin(v31, v33);
  uint64_t v34 = (char *)&v44 - v53;
  static PredicateExpressions.build_Arg<A>(_:)();
  swift_getKeyPath();
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)();
  swift_release();
  uint64_t v35 = v48(v34, v13);
  __chkstk_darwin(v35, v36);
  unint64_t v37 = (char *)&v44 - v46;
  unint64_t v65 = v58;
  unint64_t v66 = v59;
  static PredicateExpressions.build_Arg<A>(_:)();
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)();
  v45(v37, v19);
  v44(v32, v24);
  uint64_t v38 = sub_10000D938(&qword_100327188);
  uint64_t v39 = v60;
  v60[3] = v38;
  v39[4] = sub_10019D0DC();
  sub_100171DD8(v39);
  sub_100019D1C((uint64_t)&unk_1003271C8);
  uint64_t v40 = v63;
  uint64_t v41 = v61;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)();
  uint64_t v42 = *(void (**)(char *, uint64_t))(v62 + 8);
  v42(v29, v41);
  return ((uint64_t (*)(char *, uint64_t))v42)(v40, v41);
}

uint64_t sub_1001950D0(int a1, int a2, void *aBlock, uint64_t a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  void v4[4] = v6;
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;
  void v4[5] = v9;
  swift_retain();
  uint64_t v11 = (void *)swift_task_alloc();
  v4[6] = v11;
  *uint64_t v11 = v4;
  v11[1] = sub_1001951CC;
  return sub_100194434(v5, v7, v8, v10);
}

uint64_t sub_1001951CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1000181DC();
  sub_100017D24();
  uint64_t v12 = v10;
  uint64_t v14 = v13;
  sub_100011C24();
  uint64_t v15 = *v11;
  sub_100010D94();
  *uint64_t v16 = v15;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000DC0C();
  uint64_t v18 = *(const void **)(v17 + 24);
  if (v12)
  {
    _convertErrorToNSError(_:)();
    sub_10019DC80();
    uint64_t v19 = sub_1000180D8();
    v20(v19);

    _Block_release(v18);
  }
  else
  {
    uint64_t v21 = sub_10019DB14();
    v22(v21);
    _Block_release(v18);
  }
  sub_100018360();
  sub_100018250();
  return v24(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10);
}

uint64_t sub_10019533C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[11] = a6;
  uint8_t v7[12] = v6;
  v7[9] = a4;
  v7[10] = a5;
  v7[7] = a2;
  v7[8] = a3;
  void v7[6] = a1;
  uint64_t v8 = type metadata accessor for Logger();
  v7[13] = v8;
  v7[14] = *(void *)(v8 - 8);
  v7[15] = swift_task_alloc();
  uint8_t v7[16] = type metadata accessor for EntityCache();
  sub_10001A43C((uint64_t)&unk_100326F60);
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100195494, v10, v9);
}

uint64_t sub_100195494()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = self;
  *(void *)(v0 + 16) = 0;
  id v3 = [v2 archivedDataWithRootObject:v1 requiringSecureCoding:1 error:v0 + 16];
  id v4 = *(id *)(v0 + 16);
  if (v3)
  {
    uint64_t v34 = v0;
    uint64_t v32 = *(void *)(v0 + 48);
    uint64_t v28 = *(void *)(v0 + 88);
    uint64_t v30 = *(void *)(v0 + 72);
    uint64_t v5 = *(void *)(v0 + 56);
    uint64_t v31 = *(void *)(v0 + 64);
    uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v8 = v7;

    uint64_t v9 = type metadata accessor for Date();
    sub_100011108();
    uint64_t v11 = v10;
    uint64_t v12 = swift_task_alloc();
    sub_100175574(v6, v8);
    static Date.now.getter();
    uint64_t v13 = swift_task_alloc();
    uint64_t v33 = v12;
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    v14(v13, v12, v9);
    uint64_t v15 = swift_task_alloc();
    v14(v15, v28, v9);
    uint64_t v16 = type metadata accessor for EntityCacheSchemaV1.CachedEntity();
    swift_allocObject();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1001921B4(v32, v5, v31, v30, v6, v8, v13, v15);
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10001A43C((uint64_t)&unk_100326FA8);
    ModelActor.modelContext.getter();
    sub_10001A43C((uint64_t)&unk_100326F90);
    dispatch thunk of ModelContext.insert<A>(_:)();
    swift_release();
    ModelActor.modelContext.getter();
    dispatch thunk of ModelContext.save()();
    uint64_t v29 = *(void *)(v34 + 72);
    uint64_t v27 = *(void *)(v34 + 64);
    long long v26 = *(_OWORD *)(v34 + 48);
    swift_release();
    ModelActor.modelContext.getter();
    sub_10000D938(&qword_100327178);
    uint64_t v20 = sub_1000171A0();
    uint64_t v21 = swift_task_alloc();
    *(_OWORD *)(v21 + 16) = v26;
    *(void *)(v21 + 32) = v27;
    *(void *)(v21 + 40) = v29;
    *(void *)(v21 + 48) = v33;
    *(void *)(v34 + 24) = v16;
    Predicate.init(_:)();
    uint64_t v22 = sub_10000D938(&qword_100327180);
    sub_10000D97C(v20, 0, 1, v22);
    dispatch thunk of ModelContext.delete<A>(model:where:includeSubclasses:)();
    sub_10001864C(v20, &qword_100327178);
    swift_release();
    ModelActor.modelContext.getter();
    dispatch thunk of ModelContext.save()();
    sub_100169274(v6, v8);
    swift_release();
    swift_release();
    sub_100011C3C();
    v23();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = *(uint64_t (**)(void))(v34 + 8);
  }
  else
  {
    uint64_t v17 = v4;
    uint64_t v18 = _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_10019CC70();
    sub_1000169D0();
    uint64_t *v19 = v18 | 0x4000000000000000;
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v24();
}

uint64_t sub_100195C4C@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, char *a3@<X2>, void *a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v95 = a3;
  uint64_t v96 = a6;
  uint64_t v90 = a4;
  uint64_t v91 = a5;
  uint64_t v94 = a2;
  uint64_t v97 = a7;
  uint64_t v7 = *a1;
  uint64_t v8 = sub_10000D938(&qword_100327188);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v98 = v8;
  uint64_t v99 = v9;
  __chkstk_darwin(v8, v10);
  unint64_t v104 = (char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000D938(&qword_100327190);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v92 = v12;
  uint64_t v93 = v13;
  uint64_t v88 = *(void *)(v13 + 64);
  __chkstk_darwin(v12, v14);
  unint64_t v89 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v101 = (char *)&v77 - v89;
  uint64_t v85 = sub_10000D938(&qword_100327198);
  uint64_t v105 = *(void *)(v85 - 8);
  uint64_t v16 = *(void *)(v105 + 64);
  __chkstk_darwin(v85, v17);
  unint64_t v87 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v18 = (char *)&v77 - v87;
  uint64_t v19 = sub_10000D938(&qword_1003271A0);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v103 = *(void *)(v20 + 64);
  __chkstk_darwin(v19, v21);
  unint64_t v102 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v23 = (char *)&v77 - v102;
  unint64_t v24 = sub_100019D1C((uint64_t)&unk_1003271A8);
  uint64_t v86 = v7;
  unint64_t v100 = v24;
  static PredicateExpressions.build_Arg<A>(_:)();
  swift_getKeyPath();
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)();
  swift_release();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v20 + 8);
  uint64_t v83 = v20 + 8;
  BOOL v84 = v25;
  v25(v23, v19);
  uint64_t v26 = sub_10000D938(&qword_1003271B0);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(void *)(v27 + 64);
  __chkstk_darwin(v26, v29);
  unint64_t v82 = (v28 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v30 = (char *)&v77 - v82;
  uint64_t v106 = v94;
  uint64_t v107 = v95;
  static PredicateExpressions.build_Arg<A>(_:)();
  uint64_t v95 = (char *)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>;
  unint64_t v81 = sub_100019D1C((uint64_t)&unk_1003271B8);
  uint64_t v94 = &protocol conformance descriptor for PredicateExpressions.Value<A>;
  unint64_t v80 = sub_100019D1C((uint64_t)&unk_1003271C0);
  uint64_t v31 = v85;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)();
  uint64_t v79 = *(void (**)(char *, uint64_t))(v27 + 8);
  v79(v30, v26);
  uint64_t v32 = *(void (**)(char *, uint64_t))(v105 + 8);
  v105 += 8;
  uint64_t v78 = v32;
  uint64_t v33 = ((uint64_t (*)(char *, uint64_t))v32)(v18, v31);
  uint64_t v35 = __chkstk_darwin(v33, v34);
  uint64_t v36 = (char *)&v77 - v89;
  uint64_t v38 = __chkstk_darwin(v35, v37);
  uint64_t v39 = (char *)&v77 - v87;
  __chkstk_darwin(v38, v40);
  uint64_t v41 = (char *)&v77 - v102;
  static PredicateExpressions.build_Arg<A>(_:)();
  swift_getKeyPath();
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)();
  swift_release();
  uint64_t v42 = v41;
  uint64_t v43 = v84;
  uint64_t v44 = ((uint64_t (*)(char *, uint64_t))v84)(v42, v19);
  __chkstk_darwin(v44, v45);
  unint64_t v46 = (char *)&v77 - v82;
  uint64_t v106 = v90;
  uint64_t v107 = v91;
  static PredicateExpressions.build_Arg<A>(_:)();
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)();
  v79(v46, v26);
  v78(v39, v31);
  sub_100019D1C((uint64_t)&unk_1003271C8);
  uint64_t v47 = v101;
  uint64_t v48 = v92;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)();
  uint64_t v49 = *(void (**)(char *, uint64_t))(v93 + 8);
  v49(v36, v48);
  v49(v47, v48);
  unint64_t v101 = (char *)sub_10000D938(&qword_1003271D0);
  uint64_t v105 = *((void *)v101 - 1);
  __chkstk_darwin(v101, v50);
  uint64_t v91 = (char *)&v77 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = sub_10000D938(&qword_1003271D8);
  uint64_t v53 = *(void *)(v52 - 8);
  uint64_t v92 = v52;
  uint64_t v93 = v53;
  uint64_t v55 = __chkstk_darwin(v52, v54);
  unint64_t v57 = (char *)&v77 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v55, v58);
  unint64_t v59 = (char *)&v77 - v102;
  static PredicateExpressions.build_Arg<A>(_:)();
  swift_getKeyPath();
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)();
  swift_release();
  v43(v59, v19);
  uint64_t v60 = sub_10000D938(&qword_1003271E0);
  uint64_t v103 = *(void *)(v60 - 8);
  __chkstk_darwin(v60, v61);
  uint64_t v63 = (char *)&v77 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date();
  static PredicateExpressions.build_Arg<A>(_:)();
  uint64_t v64 = type metadata accessor for PredicateExpressions.ComparisonOperator();
  uint64_t v65 = *(void *)(v64 - 8);
  __chkstk_darwin(v64, v66);
  uint64_t v68 = (char *)&v77 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v65 + 104))(v68, enum case for PredicateExpressions.ComparisonOperator.lessThan(_:), v64);
  sub_100019D1C((uint64_t)&unk_1003271E8);
  sub_100019D1C((uint64_t)&unk_1003271F0);
  sub_10019D3C4((uint64_t)&unk_1003271F8);
  uint64_t v70 = v91;
  uint64_t v69 = v92;
  static PredicateExpressions.build_Comparison<A, B>(lhs:rhs:op:)();
  (*(void (**)(char *, uint64_t))(v65 + 8))(v68, v64);
  (*(void (**)(char *, uint64_t))(v103 + 8))(v63, v60);
  (*(void (**)(char *, uint64_t))(v93 + 8))(v57, v69);
  uint64_t v71 = sub_10000D938(&qword_100327200);
  uint64_t v72 = v97;
  v97[3] = v71;
  v72[4] = sub_10019D06C();
  sub_100171DD8(v72);
  sub_100019D1C((uint64_t)&unk_100327258);
  sub_100019D1C((uint64_t)&unk_100327260);
  unint64_t v73 = v104;
  uint64_t v74 = v98;
  uint64_t v75 = v101;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)();
  (*(void (**)(char *, char *))(v105 + 8))(v70, v75);
  return (*(uint64_t (**)(char *, uint64_t))(v99 + 8))(v73, v74);
}

uint64_t type metadata accessor for EntityCache()
{
  return self;
}

uint64_t sub_10019675C(int a1, int a2, uint64_t a3, int a4, void *aBlock, uint64_t a6)
{
  v6[2] = a3;
  v6[3] = a6;
  void v6[4] = _Block_copy(aBlock);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;
  void v6[5] = v9;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;
  v6[6] = v12;
  uint64_t v14 = type metadata accessor for Date();
  v6[7] = v14;
  v6[8] = *(void *)(v14 - 8);
  uint64_t v15 = swift_task_alloc();
  v6[9] = v15;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();
  swift_unknownObjectRetain();
  swift_retain();
  uint64_t v16 = (void *)swift_task_alloc();
  v6[10] = v16;
  *uint64_t v16 = v6;
  v16[1] = sub_1001968E4;
  return sub_10019533C(v8, v10, v11, v13, a3, v15);
}

uint64_t sub_1001968E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_100017870();
  sub_10019DC40();
  uint64_t v38 = v14;
  sub_10019DAFC();
  uint64_t v18 = v17;
  sub_100010D94();
  void *v19 = v18;
  uint64_t v37 = *(void *)(v16 + 40);
  uint64_t v20 = *v15;
  sub_100010D94();
  *uint64_t v21 = v20;
  swift_task_dealloc();
  sub_10019DC14();
  v22();
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v38)
  {
    uint64_t v23 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    uint64_t v24 = sub_100010A70();
    v25(v24, v23);
  }
  else
  {
    uint64_t v26 = sub_100017EC4();
    v27(v26);
  }
  _Block_release(*(const void **)(v18 + 32));
  swift_task_dealloc();
  sub_1000171B8();
  sub_100010F04();
  return v29(v28, v29, v30, v31, v32, v33, v34, v35, a9, v37, v38, a12, a13, a14);
}

void *sub_100196ACC(uint64_t a1)
{
  uint64_t v2 = v1;
  type metadata accessor for ModelContext();
  swift_allocObject();
  swift_retain();
  ModelContext.init(_:)();
  type metadata accessor for DefaultSerialModelExecutor();
  swift_allocObject();
  uint64_t v4 = DefaultSerialModelExecutor.init(modelContext:)();
  unint64_t v5 = sub_10001A43C((uint64_t)&unk_1003270F8);
  _DWORD v2[2] = v4;
  v2[3] = v5;
  v2[4] = a1;
  return v2;
}

uint64_t sub_100196B88()
{
  uint64_t v0 = type metadata accessor for EntityCache();
  unint64_t v1 = sub_10001A43C((uint64_t)&unk_100326FA8);

  return ModelActor.unownedExecutor.getter(v0, v1);
}

uint64_t sub_100196BFC()
{
  return sub_10019CFB0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100196C54(uint64_t a1, int a2, void *a3, void *aBlock)
{
  uint64_t v6 = _Block_copy(aBlock);
  sub_1000177D0();
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = a3;
  v7[3] = v6;
  void v7[4] = a1;
  id v8 = a3;
  swift_retain();
  uint64_t v9 = sub_100010F54();

  return sub_10000D83C(v9, v10);
}

uint64_t sub_100196CD0(uint64_t a1, void *aBlock)
{
  _DWORD v2[2] = _Block_copy(aBlock);
  if (a1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v5 = 0;
  }
  v2[3] = v5;
  uint64_t v6 = (void *)swift_task_alloc();
  v2[4] = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_100196DA0;
  return sub_100196BFC();
}

uint64_t sub_100196DA0()
{
  sub_100017F78();
  sub_100010F2C();
  uint64_t v2 = v0;
  sub_100011C24();
  uint64_t v4 = v3;
  sub_100010D94();
  *uint64_t v5 = v4;
  *uint64_t v5 = *v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_10000DC0C();
  if (v2)
  {
    uint64_t v6 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    uint64_t v7 = sub_100017E70();
    v8(v7);
  }
  else
  {
    uint64_t v9 = sub_100017DE8();
    v10(v9);
  }
  _Block_release(*(const void **)(v4 + 16));
  sub_100018360();
  sub_100017D80();
  return v12(v11, v12, v13, v14, v15, v16, v17, v18);
}

uint64_t sub_100196F08(uint64_t a1, int a2, void *a3, void *a4, uint64_t a5, void *a6, void *aBlock, int a8, uint64_t a9)
{
  uint64_t v14 = _Block_copy(aBlock);
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = a3;
  v15[3] = a4;
  void v15[4] = a5;
  void v15[5] = a6;
  v15[6] = v14;
  v15[7] = a1;
  id v16 = a3;
  id v17 = a4;
  swift_unknownObjectRetain();
  id v18 = a6;
  swift_retain();

  return sub_10000D83C(a9, (uint64_t)v15);
}

void sub_100196FB8(int a1, int a2, int a3, int a4, void *aBlock)
{
  v5[2] = _Block_copy(aBlock);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5[3] = v6;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5[4] = v7;
  uint64_t v8 = type metadata accessor for Date();
  v5[5] = v8;
  v5[6] = *(void *)(v8 - 8);
  v5[7] = swift_task_alloc();
  static Date._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = (void *)swift_task_alloc();
  v5[8] = v9;
  *uint64_t v9 = v5;
  v9[1] = sub_1001970E8;
  sub_1001970E8();
}

void sub_1001970E8()
{
  uint64_t v3 = v0;
  sub_10019DAFC();
  uint64_t v5 = v4;
  sub_100010D94();
  *uint64_t v6 = v5;
  uint64_t v7 = v2[7];
  uint64_t v8 = v2[6];
  uint64_t v9 = v2[5];
  *uint64_t v6 = *v1;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v3)
  {
    uint64_t v10 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    uint64_t v11 = sub_100010A70();
    v12(v11, v10);
  }
  else
  {
    uint64_t v13 = sub_100017EC4();
    v14(v13);
  }
  _Block_release(*(const void **)(v5 + 16));
  swift_task_dealloc();
  sub_1000171B8();
  sub_100017928();
  __asm { BRAA            X1, X16 }
}

unint64_t sub_1001972A8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v8._uint64_t countAndFlagsBits = a1;
  v8._object = a2;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 0x6175676E616C202CLL;
  v9._object = (void *)0xEC000000203A6567;
  String.append(_:)(v9);
  swift_bridgeObjectRetain();
  v10._uint64_t countAndFlagsBits = a3;
  v10._object = a4;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  return 0xD000000000000019;
}

uint64_t sub_10019738C()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100197418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v12 = a1 == a5 && a2 == a6;
  if (v12 || (char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v13 & 1) != 0))
  {
    if (a3 == a7 && a4 == a8)
    {
      return 1;
    }
    else
    {
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

Swift::Int sub_1001974B8()
{
  return Hasher._finalize()();
}

Swift::Int sub_100197548()
{
  return sub_1001974B8();
}

uint64_t sub_100197554()
{
  return sub_10019738C();
}

unint64_t sub_100197560()
{
  return sub_1001972A8(*(void *)v0, *(void **)(v0 + 8), *(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10019756C(uint64_t *a1, uint64_t *a2)
{
  return sub_100197418(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t sub_100197588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[13] = a4;
  v5[14] = v4;
  v5[11] = a2;
  v5[12] = a3;
  v5[10] = a1;
  uint64_t v6 = type metadata accessor for Logger();
  v5[15] = v6;
  v5[16] = *(void *)(v6 - 8);
  v5[17] = swift_task_alloc();
  return _swift_task_switch(sub_100197650, v4, 0);
}

void sub_100197650()
{
  uint64_t v1 = v0[14] + 120;
  swift_beginAccess();
  uint64_t v2 = *(void *)(*(void *)v1 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v2)
  {
    uint64_t v4 = v0[12];
    uint64_t v3 = v0[13];
    uint64_t v6 = v0[10];
    uint64_t v5 = v0[11];
    swift_bridgeObjectRetain();
    sub_10018EEF4(v6, v5, v4, v3);
    if (v7)
    {
      swift_unknownObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = v0[10];
  uint64_t v9 = v0[13];
  uint64_t v10 = v0[14];
  uint64_t v12 = v0[11];
  uint64_t v11 = v0[12];
  type metadata accessor for EntityCache();
  LOBYTE(v10) = *(unsigned char *)(v10 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100192DC4(v8, v12, v11, v9, v10);
  swift_beginAccess();
  swift_unknownObjectRetain();
  sub_1001DD348();
  swift_endAccess();
LABEL_6:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  sub_100017460();
  __asm { BRAA            X2, X16 }
}

uint64_t sub_100197AB0(int a1, int a2, void *aBlock, uint64_t a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  void v4[4] = v6;
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;
  void v4[5] = v9;
  swift_retain();
  uint64_t v11 = (void *)swift_task_alloc();
  v4[6] = v11;
  *uint64_t v11 = v4;
  v11[1] = sub_100197BAC;
  return sub_100197588(v5, v7, v8, v10);
}

uint64_t sub_100197BAC()
{
  sub_100017F78();
  sub_100010F2C();
  uint64_t v2 = v1;
  sub_100011168();
  uint64_t v4 = *(void (***)(void, void))(v3 + 24);
  uint64_t v5 = *v0;
  sub_100010D94();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v4[2](v4, v2);
  _Block_release(v4);
  swift_unknownObjectRelease();
  sub_1000112AC();
  sub_100017D80();
  return v8(v7, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_100197D04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[9] = a4;
  v5[10] = v4;
  v5[7] = a2;
  v5[8] = a3;
  v5[6] = a1;
  uint64_t v6 = type metadata accessor for Logger();
  v5[11] = v6;
  v5[12] = *(void *)(v6 - 8);
  v5[13] = swift_task_alloc();
  return _swift_task_switch(sub_100197DCC, v4, 0);
}

void sub_100197DCC()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 64);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_10019C054(v1, v4, v3, v2);
  swift_endAccess();
  if (v5) {
    swift_unknownObjectRelease();
  }
  static GKLog.cache.getter();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void *)(v0 + 96);
  uint64_t v10 = *(void *)(v0 + 104);
  uint64_t v11 = *(void *)(v0 + 88);
  uint64_t v12 = *(void **)(v0 + 72);
  if (v8)
  {
    os_log_type_t type = v7;
    BOOL v22 = v5 != 0;
    uint64_t v13 = *(void **)(v0 + 56);
    uint64_t v20 = *(void *)(v0 + 64);
    uint64_t v14 = *(void *)(v0 + 48);
    uint64_t v15 = swift_slowAlloc();
    uint64_t v23 = sub_100011BBC();
    *(_DWORD *)uint64_t v15 = 136315394;
    unint64_t v16 = sub_1001972A8(v14, v13, v20, v12);
    *(void *)(v0 + 40) = sub_100174CE4(v16, v17, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 1024;
    *(_DWORD *)(v0 + 112) = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v6, type, "Deleted entity cache: %s (wasRemoved? %{BOOL}d)", (uint8_t *)v15, 0x12u);
    swift_arrayDestroy();
    sub_100010D7C();
    sub_100010D7C();

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  }
  swift_task_dealloc();
  sub_1000112AC();
  sub_100011220();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_10019807C(int a1, int a2, void *aBlock, uint64_t a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  void v4[4] = v6;
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;
  void v4[5] = v9;
  swift_retain();
  uint64_t v11 = (void *)swift_task_alloc();
  v4[6] = v11;
  *uint64_t v11 = v4;
  v11[1] = sub_100198178;
  return sub_100197D04(v5, v7, v8, v10);
}

uint64_t sub_100198178()
{
  sub_1000112E8();
  sub_100011168();
  uint64_t v2 = *(void (***)(void))(v1 + 24);
  uint64_t v3 = *v0;
  sub_100010D94();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v2[2](v2);
  _Block_release(v2);
  sub_1000112AC();
  return v5();
}

uint64_t sub_1001982C0()
{
  v1[5] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[6] = v2;
  v1[7] = *(void *)(v2 - 8);
  uint8_t v1[8] = swift_task_alloc();
  return _swift_task_switch(sub_100198380, v0, 0);
}

uint64_t sub_100198380()
{
  sub_1000112E8();
  sub_100017DDC();
  swift_beginAccess();
  sub_10000D938(&qword_1003270B8);
  Dictionary._Variant.removeAll(keepingCapacity:)(0);
  swift_endAccess();
  static GKLog.cache.getter();
  uint64_t v0 = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v0, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, v1, "Deleted all entity caches", v2, 2u);
    sub_100010D7C();
  }

  uint64_t v3 = sub_100018048();
  v4(v3);
  swift_task_dealloc();
  sub_1000112AC();
  return v5();
}

uint64_t sub_100198520(const void *a1, uint64_t a2)
{
  _DWORD v2[2] = a2;
  v2[3] = _Block_copy(a1);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[4] = v3;
  void *v3 = v2;
  v3[1] = sub_10017B60C;
  return sub_1001982C0();
}

uint64_t sub_1001985C8()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for EntityCacheProvider()
{
  return self;
}

id sub_100198640(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4 = a1;
  a3();

  sub_100017130();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();

  return v5;
}

uint64_t sub_1001986AC()
{
  sub_100017174();
  _StringGuts.grow(_:)(56);
  v1._uint64_t countAndFlagsBits = 0xD000000000000016;
  v1._object = (void *)0x80000001002B1880;
  String.append(_:)(v1);
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC14GameDaemonCore17GKCacheableEntity_id);
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC14GameDaemonCore17GKCacheableEntity_id + 8);
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 0x797469746E65202CLL;
  v5._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v5);
  sub_10000D938(&qword_1003270B0);
  _print_unlocked<A, B>(_:_:)();
  v6._object = (void *)0x80000001002B18A0;
  v6._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v6);
  if (*(void *)(v0 + OBJC_IVAR____TtC14GameDaemonCore17GKCacheableEntity_bagKeyOverride + 8))
  {
    uint64_t v7 = *(void *)(v0 + OBJC_IVAR____TtC14GameDaemonCore17GKCacheableEntity_bagKeyOverride);
    uint64_t v8 = *(void **)(v0 + OBJC_IVAR____TtC14GameDaemonCore17GKCacheableEntity_bagKeyOverride + 8);
  }
  else
  {
    uint64_t v8 = (void *)0xE300000000000000;
    uint64_t v7 = 7104878;
  }
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = v7;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  return v11;
}

void sub_100198808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  sub_1000171D4();
  a16 = v23;
  a17 = v24;
  sub_100187340();
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v26 = &v18[OBJC_IVAR____TtC14GameDaemonCore17GKCacheableEntity_id];
  *(void *)uint64_t v26 = v22;
  *((void *)v26 + 1) = v21;
  *(void *)&v18[OBJC_IVAR____TtC14GameDaemonCore17GKCacheableEntity_entity] = v20;
  uint64_t v27 = &v18[OBJC_IVAR____TtC14GameDaemonCore17GKCacheableEntity_bagKeyOverride];
  *(void *)uint64_t v27 = v19;
  *((void *)v27 + 1) = v17;
  a9.receiver = v18;
  a9.Class super_class = ObjectType;
  [super init];
  sub_10019DBA0();
}

#error "1001988CC: call analysis failed (funcsize=25)"

#error "1001989B8: call analysis failed (funcsize=26)"

void sub_100198A88()
{
}

uint64_t type metadata accessor for GKCacheableEntity()
{
  return self;
}

uint64_t sub_100198B50(char a1)
{
  type metadata accessor for EntityCacheProvider();
  uint64_t v2 = swift_allocObject();
  swift_defaultActor_initialize();
  *(unsigned char *)(v2 + 112) = a1;
  *(void *)(v2 + 120) = _swiftEmptyDictionarySingleton;
  return v2;
}

id sub_100198BCC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  swift_getObjectType();
  id result = [a4 replyQueue];
  if (result)
  {
    unint64_t v16 = result;
    uint64_t v17 = (void *)swift_allocObject();
    v17[2] = v8;
    v17[3] = a1;
    void v17[4] = a2;
    uint64_t v17[5] = a3;
    v17[6] = a4;
    v17[7] = a7;
    v17[8] = a8;
    id v18 = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v19 = a4;
    swift_retain();
    sub_100009684(a5, a6, v16, (uint64_t)&unk_1003270A8, (uint64_t)v17);

    return (id)swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100198CE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[22] = a6;
  v7[23] = a7;
  v7[20] = a4;
  v7[21] = a5;
  v7[18] = a2;
  v7[19] = a3;
  v7[17] = a1;
  return _swift_task_switch(sub_100198D10, 0, 0);
}

uint64_t sub_100198D10()
{
  sub_100017870();
  sub_10019DC40();
  Swift::String v1 = v0;
  uint64_t v2 = v0 + 10;
  uint64_t v3 = v1[22];
  uint64_t v4 = v1[23];
  uint64_t v13 = v1[21];
  uint64_t v12 = (void *)v1[17];
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  uint8_t v1[24] = isa;
  NSString v6 = String._bridgeToObjectiveC()();
  v1[25] = v6;
  v1[14] = v3;
  v1[15] = v4;
  v1[10] = _NSConcreteStackBlock;
  v1[11] = 1107296256;
  v1[12] = sub_100198F30;
  v1[13] = &unk_1002DDBE8;
  uint64_t v7 = _Block_copy(v2);
  v1[26] = v7;
  swift_retain();
  swift_release();
  v1[2] = v1;
  v1[7] = v1 + 16;
  v1[3] = sub_1000194AC;
  uint64_t v8 = swift_continuation_init();
  v1[10] = _NSConcreteStackBlock;
  v1[11] = 0x40000000;
  v1[12] = sub_100019C8C;
  v1[13] = &unk_1002DDC10;
  v1[14] = v8;
  [v12 createEntityWithRequest:isa bagKey:v6 clientProxy:v13 entityMaker:v7 completionHandler:v2];
  sub_100010F04();
  return _swift_continuation_await(v9);
}

uint64_t sub_100198EC0()
{
  sub_1000112E8();
  Swift::String v1 = *(void **)(v0 + 200);
  uint64_t v2 = *(void **)(v0 + 192);
  _Block_release(*(const void **)(v0 + 208));

  uint64_t v3 = sub_10001823C();
  return v4(v3);
}

uint64_t sub_10019908C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[4] = a4;
  void v6[5] = a5;
  v6[2] = a2;
  v6[3] = a3;
  uint64_t v12 = swift_allocObject();
  v6[6] = v12;
  *(void *)(v12 + 16) = a6;
  uint64_t v13 = (void *)swift_task_alloc();
  v6[7] = v13;
  *uint64_t v13 = v6;
  v13[1] = sub_100199178;
  return sub_100019C64(a1, a2, a3, a4);
}

uint64_t sub_100199178()
{
  sub_100010F2C();
  double v3 = v2;
  uint64_t v5 = v4;
  sub_100011168();
  uint64_t v7 = v6;
  sub_1000111B4();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  sub_100010D94();
  *uint64_t v10 = v9;
  v7[8] = v5;
  v7[9] = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_100017040();
    return _swift_task_switch(v11, v12, v13);
  }
  else
  {
    uint64_t v14 = (void *)swift_task_alloc();
    v7[10] = (uint64_t)v14;
    *uint64_t v14 = v9;
    v14[1] = sub_1001992F4;
    uint64_t v15 = sub_100017B64(v7[2]);
    return sub_100199538(v15, v16, v5, v17, v18, v19, v3);
  }
}

uint64_t sub_1001992F4()
{
  sub_1000112E8();
  uint64_t v3 = v2;
  sub_100011168();
  uint64_t v5 = v4;
  sub_1000111B4();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  sub_100010D94();
  *uint64_t v8 = v7;
  *(void *)(v5 + 88) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 96) = v3;
  }
  sub_100017040();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_1001993E4()
{
  sub_100010DA4();
  swift_release();
  sub_1000112AC();
  return v0();
}

uint64_t sub_100199440()
{
  sub_100010DA4();
  swift_bridgeObjectRelease();
  swift_release();
  Swift::String v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 96);
  return v1(v2);
}

uint64_t sub_1001994B0()
{
  sub_100010DA4();
  swift_bridgeObjectRelease();
  swift_release();
  sub_1000112AC();
  return v0();
}

uint64_t sub_100199518()
{
  return (*(uint64_t (**)(void, double))(v0 + 8))(*(void *)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t sub_100199538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  *(void *)(v8 + 184) = a6;
  *(void *)(v8 + 192) = v7;
  *(void *)(v8 + 168) = a4;
  *(void *)(v8 + 176) = a5;
  *(double *)(v8 + 160) = a7;
  *(void *)(v8 + 144) = a2;
  *(void *)(v8 + 152) = a3;
  *(void *)(v8 + 136) = a1;
  uint64_t v9 = type metadata accessor for Logger();
  *(void *)(v8 + 200) = v9;
  *(void *)(v8 + 208) = *(void *)(v9 - 8);
  *(void *)(v8 + 216) = swift_task_alloc();
  return _swift_task_switch(sub_100199608, 0, 0);
}

uint64_t sub_100199608()
{
  sub_100010DA4();
  *(void *)(v0 + 224) = (*(uint64_t (**)(void))(v0 + 176))(*(void *)(v0 + 152));
  Swift::String v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 232) = v1;
  *Swift::String v1 = v0;
  v1[1] = sub_1001996AC;
  uint64_t v2 = sub_100017B64(*(void *)(v0 + 168));
  return sub_100006B40(v2);
}

uint64_t sub_1001996AC()
{
  sub_100010DA4();
  sub_100011168();
  sub_1000111B4();
  void *v2 = v1;
  void *v2 = *v0;
  *(void *)(v1 + 240) = v3;
  swift_task_dealloc();
  sub_100017040();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_10019977C()
{
  sub_10019DC40();
  uint64_t v1 = v0[28];
  if (!*(void *)(v1 + OBJC_IVAR____TtC14GameDaemonCore17GKCacheableEntity_bagKeyOverride + 8)) {
    swift_bridgeObjectRetain();
  }
  id v15 = (id)v0[30];
  swift_bridgeObjectRetain();
  NSString v2 = String._bridgeToObjectiveC()();
  v0[31] = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  NSString v3 = String._bridgeToObjectiveC()();
  v0[32] = v3;
  swift_bridgeObjectRelease();
  uint64_t v4 = OBJC_IVAR____TtC14GameDaemonCore17GKCacheableEntity_entity;
  v0[33] = OBJC_IVAR____TtC14GameDaemonCore17GKCacheableEntity_entity;
  uint64_t v5 = *(void *)(v1 + v4);
  v0[34] = v5;
  uint64_t v6 = type metadata accessor for Date();
  sub_100011108();
  uint64_t v8 = v7;
  uint64_t v9 = swift_task_alloc();
  uint64_t v10 = swift_task_alloc();
  swift_unknownObjectRetain();
  static Date.now.getter();
  Date.addingTimeInterval(_:)();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v11(v10, v6);
  swift_task_dealloc();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  v0[35] = isa;
  v11(v9, v6);
  swift_task_dealloc();
  v0[2] = v0;
  v0[3] = sub_1001999F4;
  uint64_t v13 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1001ADE84;
  v0[13] = &unk_1002DD938;
  v0[14] = v13;
  [v15 storeWithBagKey:v2 id:v3 entity:v5 expiresAt:isa completionHandler:];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1001999F4()
{
  sub_100010DA4();
  sub_100011168();
  sub_1000111B4();
  void *v2 = v1;
  void *v2 = *v0;
  *(void *)(v1 + 288) = *(void *)(v3 + 48);
  sub_100017040();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_100199AD4()
{
  sub_1000112E8();
  uint64_t v1 = (void *)v0[35];
  uint64_t v3 = (void *)v0[31];
  NSString v2 = (void *)v0[32];
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  sub_10019DC20();

  swift_task_dealloc();
  uint64_t v4 = sub_10019DC6C();
  return v5(v4);
}

uint64_t sub_100199B60(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_log_t log, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_100017870();
  sub_10019DC40();
  uint64_t v23 = (void *)v22[35];
  uint64_t v25 = (void *)v22[31];
  uint64_t v24 = (void *)v22[32];
  uint64_t v26 = (void *)v22[28];
  swift_willThrow();
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  static GKLog.cache.getter();
  id v27 = v26;
  swift_errorRetain();
  id v28 = v27;
  swift_errorRetain();
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled((os_log_t)v29, v30))
  {
    a9 = v22[36];
    uint64_t v31 = (void *)v22[28];
    log = (os_log_t)v29;
    uint64_t v29 = swift_slowAlloc();
    uint64_t v32 = (void *)swift_slowAlloc();
    v22[15] = v31;
    *(_DWORD *)uint64_t v29 = 138412546;
    id v33 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v32 = v31;

    *(_WORD *)(v29 + 12) = 2112;
    swift_errorRetain();
    uint64_t v34 = _swift_stdlib_bridgeErrorToNSError();
    v22[16] = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v32[1] = v34;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v30, "Failed to cache entity: %@, error: %@", (uint8_t *)v29, 0x16u);
    sub_10000D938(&qword_100326430);
    swift_arrayDestroy();
    sub_100010D7C();
    sub_100010D7C();

    swift_errorRelease();
  }
  else
  {
    uint64_t v35 = (void *)v22[28];
    swift_errorRelease();

    swift_errorRelease();
    swift_errorRelease();
  }
  sub_100017504();
  v36();
  sub_10019DC20();

  swift_task_dealloc();
  sub_10019DC6C();
  sub_100010F04();
  return v39(v37, v38, v39, v40, v41, v42, v43, v44, a9, log, a11, a12, a13, a14);
}

uint64_t sub_100199E6C(int a1, int a2, void *a3, void *aBlock, const void *a5, void *a6)
{
  v6[2] = a3;
  v6[3] = a6;
  uint64_t v10 = _Block_copy(aBlock);
  void v6[4] = v10;
  void v6[5] = _Block_copy(a5);
  uint64_t v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  v6[6] = v11;
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;
  v6[7] = v13;
  _Block_copy(v10);
  uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100327098
                                                                                     + dword_100327098);
  id v15 = a3;
  id v16 = a6;
  uint64_t v17 = (void *)swift_task_alloc();
  v6[8] = v17;
  void *v17 = v6;
  v17[1] = sub_100199FCC;
  return v19(v11, v12, v14, (uint64_t)v15, (uint64_t)v16, (uint64_t)v10);
}

uint64_t sub_100199FCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1000181DC();
  sub_100017D24();
  uint64_t v13 = v10;
  id v15 = v14;
  sub_100010E54();
  id v16 = *(void **)(v12 + 24);
  uint64_t v17 = *(void **)(v12 + 16);
  uint64_t v18 = *v11;
  sub_100010D94();
  void *v19 = v18;
  swift_task_dealloc();

  uint64_t v20 = *(const void **)(v12 + 40);
  _Block_release(*(const void **)(v12 + 32));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v13)
  {
    _convertErrorToNSError(_:)();
    sub_10019DC80();
    uint64_t v21 = sub_1000180D8();
    v22(v21);

    _Block_release(v20);
  }
  else
  {
    uint64_t v23 = sub_10019DB14();
    v24(v23);
    _Block_release(v20);
    swift_unknownObjectRelease();
  }
  sub_100018360();
  sub_100018250();
  return v26(v25, v26, v27, v28, v29, v30, v31, v32, a9, a10);
}

id sub_10019A170(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  uint64_t v3 = (void *)v1(v2);
  swift_release();
  swift_bridgeObjectRelease();

  return v3;
}

id sub_10019A200()
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  uint64_t v1 = sub_100010F54();
  id v3 = (id)v2(v1);

  return v3;
}

uint64_t sub_10019A268()
{
  sub_100010F2C();
  long long v12 = *(_OWORD *)(v0 + 272);
  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v3 = swift_allocObject();
  *(void *)(v0 + 368) = v3;
  *(_OWORD *)(v3 + 16) = v12;
  *(void *)(v3 + 32) = v2;
  *(void *)(v3 + 40) = v1;
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 376) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10019A364;
  uint64_t v5 = sub_100017B64(*(void *)(v0 + 184));
  return sub_100199538(v5, v6, v7, v8, v9, v3, v10);
}

uint64_t sub_10019A364()
{
  sub_100017F78();
  sub_100010F2C();
  uint64_t v3 = v2;
  sub_100010E54();
  uint64_t v5 = v4;
  sub_100010D94();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v1;
  *(void *)(v5 + 384) = v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v5 + 392) = v3;
  }
  sub_100017040();
  sub_100017D80();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_10019A488()
{
  sub_100010DA4();

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = sub_10001823C();
  return v2(v1);
}

uint64_t sub_10019A4F4()
{
  uint64_t v24 = v0;
  uint64_t v1 = (void *)v0[39];
  uint64_t v2 = (void *)v0[38];
  swift_willThrow();

  swift_unknownObjectRelease();
  static GKLog.cache.getter();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    unint64_t v5 = v0[24];
    uint64_t v21 = v0[23];
    uint64_t v6 = sub_100011BBC();
    uint64_t v22 = (void *)sub_10019DBCC();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315650;
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_100017130();
    v0[19] = sub_100174CE4(v7, v8, v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v6 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[20] = sub_100174CE4(v21, v5, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v6 + 22) = 2112;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    v0[21] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v22 = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to fetch entity ID: %s, bagKey: %s, from cache: %@", (uint8_t *)v6, 0x20u);
    sub_10000D938(&qword_100326430);
    swift_arrayDestroy();
    sub_100010D7C();
    swift_arrayDestroy();
    sub_100010D7C();
    sub_100010D7C();

    swift_errorRelease();
    sub_100011C3C();
    v11();
  }
  else
  {
    uint64_t v12 = v0[33];
    uint64_t v13 = v0[30];
    uint64_t v14 = v0[31];
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  }
  v0[41] = 0;
  id v15 = (void *)swift_task_alloc();
  v0[42] = v15;
  *id v15 = v0;
  v15[1] = sub_1000197DC;
  uint64_t v16 = sub_100017B64(v0[22]);
  return sub_100019C64(v16, v17, v18, v19);
}

uint64_t sub_10019A860()
{
  sub_1000112E8();

  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000112AC();
  return v1();
}

uint64_t sub_10019A8D8()
{
  sub_100010DA4();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  sub_100017040();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10019A9A8()
{
  sub_1000112E8();
  uint64_t v2 = (void *)v0[23];
  uint64_t v1 = (void *)v0[24];
  uint64_t v3 = v0[16];
  swift_unknownObjectRelease();

  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(uint64_t))v0[1];
  return v4(v3);
}

#error "10019AA8C: call analysis failed (funcsize=31)"

uint64_t sub_10019AAA4()
{
  sub_100010DA4();
  uint64_t v2 = v1;
  v0[15] = v3;
  v0[16] = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[17] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10019AB38;
  return sub_100006B40(v2);
}

uint64_t sub_10019AB38()
{
  sub_100010DA4();
  sub_100011168();
  sub_1000111B4();
  void *v2 = v1;
  void *v2 = *v0;
  *(void *)(v1 + 144) = v3;
  swift_task_dealloc();
  sub_100017040();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_10019AC08()
{
  sub_1000112E8();
  if (v0[16]) {
    NSString v1 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v1 = 0;
  }
  v0[19] = v1;
  uint64_t v2 = (void *)v0[18];
  v0[2] = v0;
  v0[3] = sub_10019AD1C;
  uint64_t v3 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1001ADE84;
  v0[13] = &unk_1002DD878;
  v0[14] = v3;
  [v2 deleteWithBagKey:v1 completionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10019AD1C()
{
  sub_100010DA4();
  sub_100011168();
  sub_1000111B4();
  void *v2 = v1;
  void *v2 = *v0;
  *(void *)(v1 + 160) = *(void *)(v3 + 48);
  sub_100017040();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_10019ADFC()
{
  sub_100010DA4();
  uint64_t v1 = *(void **)(v0 + 152);
  swift_unknownObjectRelease();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10019AE60()
{
  sub_1000112E8();
  uint64_t v1 = *(void **)(v0 + 152);
  swift_willThrow();
  swift_unknownObjectRelease();

  sub_1000112AC();
  return v2();
}

uint64_t sub_10019AF6C(uint64_t a1, void *a2, void *aBlock, void *a4)
{
  v4[2] = a2;
  v4[3] = a4;
  void v4[4] = _Block_copy(aBlock);
  if (a1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v9 = 0;
  }
  void v4[5] = v9;
  id v10 = a2;
  a4;
  uint64_t v11 = (void *)swift_task_alloc();
  v4[6] = v11;
  *uint64_t v11 = v4;
  v11[1] = sub_10019B064;
  return sub_10019AAA4();
}

uint64_t sub_10019B064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1000181DC();
  sub_100017D24();
  uint64_t v13 = v10;
  sub_100011C24();
  uint64_t v15 = v14;
  sub_100010D94();
  *uint64_t v16 = v15;
  uint64_t v17 = *(void **)(v11 + 24);
  uint64_t v18 = *(void **)(v11 + 16);
  *uint64_t v16 = *v12;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  sub_10000DC0C();
  if (v13)
  {
    uint64_t v19 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    uint64_t v20 = sub_100017E70();
    v21(v20);
  }
  else
  {
    uint64_t v22 = sub_100017DE8();
    v23(v22);
  }
  _Block_release(*(const void **)(v15 + 32));
  sub_100018360();
  sub_100018250();
  return v25(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

uint64_t destroy for EntityCacheProvider.EntityCacheKey()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for EntityCacheProvider.EntityCacheKey(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for EntityCacheProvider.EntityCacheKey(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for EntityCacheProvider.EntityCacheKey(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EntityCacheProvider.EntityCacheKey(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EntityCacheProvider.EntityCacheKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)id result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EntityCacheProvider.EntityCacheKey()
{
  return &type metadata for EntityCacheProvider.EntityCacheKey;
}

ValueMetadata *type metadata accessor for EntityCacheSchemaV1()
{
  return &type metadata for EntityCacheSchemaV1;
}

ValueMetadata *type metadata accessor for EntityCacheSchemaV1.CachedEntity._SwiftDataNoType()
{
  return &type metadata for EntityCacheSchemaV1.CachedEntity._SwiftDataNoType;
}

unint64_t sub_10019B46C()
{
  unint64_t result = qword_100326F58;
  if (!qword_100326F58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100326F58);
  }
  return result;
}

unint64_t sub_10019B4B8()
{
  return sub_10001A43C((uint64_t)&unk_100326F60);
}

uint64_t sub_10019B500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_100010F38();
  uint64_t v17 = v16[21];
  uint64_t v18 = v16[17];
  uint64_t v19 = v16[18];
  uint64_t v36 = v16[16];
  uint64_t v20 = (void *)swift_allocObject();
  _OWORD v20[2] = v18;
  v20[3] = v19;
  void v20[4] = v17;
  v16[12] = sub_10019C9B0;
  v16[13] = v20;
  v16[8] = _NSConcreteStackBlock;
  v16[9] = 1107296256;
  v16[10] = sub_100006530;
  v16[11] = &unk_1002DDAB8;
  uint64_t v34 = _Block_copy(v16 + 8);
  uint64_t v35 = type metadata accessor for DispatchQoS();
  sub_100011108();
  sub_1000171A0();
  swift_retain();
  swift_unknownObjectRetain();
  static DispatchQoS.unspecified.getter();
  type metadata accessor for DispatchWorkItemFlags();
  sub_100011108();
  sub_1000171A0();
  v16[15] = _swiftEmptyArrayStorage;
  sub_10019D3C4((uint64_t)&unk_100327070);
  sub_10000D938(&qword_100327078);
  sub_100019D1C((uint64_t)&unk_100327080);
  sub_10019DB4C();
  sub_10019DB78();
  _Block_release(&qword_100327078);
  swift_unknownObjectRelease();
  uint64_t v21 = sub_10019DBFC();
  v22(v21);
  uint64_t v23 = sub_10019DBB4();
  v24(v23);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_release();
  sub_1000112AC();
  sub_1000112F4();
  return v26(v25, v26, v27, v28, v29, v30, v31, v32, a9, v17, v34, v35, v36, a14, a15, a16);
}

uint64_t sub_10019B710(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  swift_unknownObjectRetain();

  return sub_1001AFB94(v3, a2);
}

Swift::Int sub_10019B754()
{
  return Hasher._finalize()();
}

void (*sub_10019B80C(void *a1))(long long **a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  sub_1001924A8((uint64_t)v3);
  return sub_10019B86C;
}

void sub_10019B86C(long long **a1, char a2)
{
  unint64_t v2 = *a1;
  if (a2)
  {
    uint64_t v3 = sub_100017130();
    sub_100171960(v3, v4);
    sub_1001924F4((long long *)((char *)v2 + 40));
    sub_100016C38((uint64_t)v2);
  }
  else
  {
    sub_1001924F4(*a1);
  }

  free(v2);
}

Swift::Int sub_10019B8E0()
{
  return sub_10019B754();
}

uint64_t sub_10019B904()
{
  return PersistentModel.hash(into:)();
}

Swift::Int sub_10019B978()
{
  return Hasher._finalize()();
}

void sub_10019B9D8(void *a1@<X8>)
{
  sub_1001918C8();
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_10019BA04(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  unint64_t v5 = sub_10001A43C((uint64_t)&unk_100326F90);

  return static PersistentModel.== infix(_:_:)(v3, v4, v2, v5);
}

uint64_t AppMetadataCache.modelContainer.getter()
{
  return swift_retain();
}

uint64_t AppMetadataCache.modelExecutor.getter()
{
  return swift_unknownObjectRetain();
}

void *sub_10019BAB4()
{
  return &protocol witness table for String;
}

unint64_t sub_10019BAC0()
{
  return sub_10001A43C((uint64_t)&unk_100326F68);
}

unint64_t sub_10019BB08()
{
  return sub_10001A43C((uint64_t)&unk_100326F70);
}

unint64_t sub_10019BB50()
{
  return sub_10001A43C((uint64_t)&unk_100326F78);
}

unint64_t sub_10019BB98()
{
  return sub_10001A43C((uint64_t)&unk_100326F80);
}

void sub_10019BBE0()
{
}

void sub_10019BC04()
{
}

uint64_t sub_10019BC28@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100191A78();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_10019BC54()
{
  unint64_t result = qword_100326FA0;
  if (!qword_100326FA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100326FA0);
  }
  return result;
}

void sub_10019BC94(void *a1@<X8>)
{
  sub_1001918C8();
  *a1 = v2;
  a1[1] = v3;
}

void sub_10019BCC0(void *a1@<X8>)
{
  sub_100191810();
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_10019BCEC(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_10019BD04@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_10019BD34(uint64_t (*a1)(void))
{
  return a1() & 1;
}

uint64_t sub_10019BD60(uint64_t (*a1)(void))
{
  return a1();
}

unint64_t sub_10019BD8C(unint64_t result, char a2, uint64_t a3)
{
  if (a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

#error "10019BDF8: call analysis failed (funcsize=46)"

#error "10019BECC: call analysis failed (funcsize=52)"

#error "10019BF88: call analysis failed (funcsize=67)"

uint64_t sub_10019C054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = v4;
  swift_bridgeObjectRetain();
  unint64_t v10 = sub_10018EEF4(a1, a2, a3, a4);
  LOBYTE(a4) = v11;
  swift_bridgeObjectRelease();
  if ((a4 & 1) == 0) {
    return 0;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v17 = *v5;
  uint64_t v13 = *v5;
  *unint64_t v5 = 0x8000000000000000;
  Swift::Int v14 = *(void *)(v13 + 24);
  sub_10000D938(&qword_1003270C0);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(*(void *)(v17 + 56) + 8 * v10);
  sub_10000D938(&qword_1003270C8);
  sub_10019CC24();
  _NativeDictionary._delete(at:)();
  *unint64_t v5 = v17;
  swift_bridgeObjectRelease();
  return v15;
}

void sub_10019C184()
{
  sub_1000171D4();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1000087B0(v5, v3);
  LOBYTE(v3) = v9;
  swift_bridgeObjectRelease();
  if (v3)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v16 = *v1;
    uint64_t v11 = *v1;
    *uint64_t v1 = 0x8000000000000000;
    Swift::Int v12 = *(void *)(v11 + 24);
    sub_10000D938((uint64_t *)&unk_1003272D0);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v12);
    swift_bridgeObjectRelease();
    uint64_t v13 = *(void *)(v16 + 56) + 40 * v8;
    long long v14 = *(_OWORD *)(v13 + 16);
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v13;
    *(_OWORD *)(v7 + 16) = v14;
    *(void *)(v7 + 32) = *(void *)(v13 + 32);
    _NativeDictionary._delete(at:)();
    *uint64_t v1 = v16;
    sub_10019DBA0();
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(v7 + 32) = 0;
    *(_OWORD *)uint64_t v7 = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
    sub_10019DBA0();
  }
}

uint64_t sub_10019C2BC(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 16;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 16;
  if (v9 >= v11)
  {
    sub_1001B7F34(a2, (uint64_t)(a3 - (void)a2) / 16, a4);
    unint64_t v12 = (unint64_t)&v4[16 * v11];
    if (v7 >= v6 || v10 < 16) {
      goto LABEL_47;
    }
    uint64_t v18 = (char *)(a3 - 16);
    while (1)
    {
      uint64_t v19 = v18 + 16;
      uint64_t v20 = (char *)(v12 - 16);
      BOOL v21 = *(void *)(v12 - 16) == *((void *)v6 - 2) && *(void *)(v12 - 8) == *((void *)v6 - 1);
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        BOOL v23 = v19 != (char *)v12 || (unint64_t)v18 >= v12;
        v12 -= 16;
        if (!v23) {
          goto LABEL_43;
        }
      }
      else
      {
        BOOL v22 = v19 != v6 || v18 >= v6;
        uint64_t v20 = v6 - 16;
        v6 -= 16;
        if (!v22) {
          goto LABEL_43;
        }
      }
      *(_OWORD *)uint64_t v18 = *(_OWORD *)v20;
LABEL_43:
      v18 -= 16;
      if (v6 <= v7 || v12 <= (unint64_t)v4) {
        goto LABEL_47;
      }
    }
  }
  sub_1001B7F34(a1, (a2 - a1) / 16, a4);
  unint64_t v12 = (unint64_t)&v4[16 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (1)
    {
      BOOL v14 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
      if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      uint64_t v15 = v4;
      BOOL v14 = v7 == v4;
      v4 += 16;
      if (!v14) {
        goto LABEL_15;
      }
LABEL_16:
      v7 += 16;
      if ((unint64_t)v4 >= v12 || (unint64_t)v6 >= a3) {
        goto LABEL_21;
      }
    }
    uint64_t v15 = v6;
    BOOL v14 = v7 == v6;
    v6 += 16;
    if (v14) {
      goto LABEL_16;
    }
LABEL_15:
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v15;
    goto LABEL_16;
  }
LABEL_21:
  uint64_t v6 = v7;
LABEL_47:
  sub_1001B7F34(v4, (uint64_t)(v12 - (void)v4) / 16, v6);
  return 1;
}

char *sub_10019C464(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000D938(&qword_100326FD8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  unint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || &v13[16 * v8] <= v12) {
      memmove(v12, v13, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_10019C55C(uint64_t a1)
{
  return sub_10019C464(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_10019C570(char *__src, uint64_t a2, char *__dst)
{
  if (__dst != __src || &__src[16 * a2] <= __dst) {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

uint64_t sub_10019C59C(void *a1)
{
  id v1 = [a1 language];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

id sub_10019C600(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v7 = [a4 userErrorForServerCode:a1 reason:v6];

  return v7;
}

uint64_t sub_10019C674(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

char *sub_10019C688(uint64_t a1)
{
  return sub_1001774A0(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_10019C69C()
{
  _Block_release(*(const void **)(v0 + 32));
  uint64_t v1 = sub_1000169C0();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10019C6E4()
{
  sub_100017F78();
  sub_100010F2C();
  sub_1000175A8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100008DC0(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100171E3C;
  sub_1000176F0();
  sub_100017D80();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10019C778()
{
  _Block_release(*(const void **)(v0 + 48));
  _Block_release(*(const void **)(v0 + 56));

  uint64_t v1 = sub_1000175FC();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10019C7D0()
{
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v0 = sub_1000169C0();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_10019C808(uint64_t a1)
{
  return sub_10019AA28(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10019C814()
{
  sub_10000D938(&qword_100327040);
  sub_100017A38();
  uint64_t v1 = *(unsigned __int8 *)(v0 + 80) | 7;
  sub_100011C3C();
  v2();
  uint64_t v3 = sub_100017DDC();

  return _swift_deallocObject(v3, v4, v1);
}

uint64_t sub_10019C898()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10019C8F0()
{
  swift_unknownObjectRelease();
  swift_release();

  swift_release();
  uint64_t v1 = sub_1000175FC();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10019C938()
{
  return sub_10019C968((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_10019C950()
{
  return sub_10019C968((void (*)(void))&_swift_unknownObjectRelease);
}

uint64_t sub_10019C968(void (*a1)(void))
{
  swift_release();
  a1(*(void *)(v1 + 32));
  uint64_t v3 = sub_1000177D0();

  return _swift_deallocObject(v3, v4, v5);
}

uint64_t sub_10019C9B0()
{
  return (*(uint64_t (**)(void, void))(v0 + 16))(*(void *)(v0 + 32), 0);
}

uint64_t sub_10019C9E4()
{
  _Block_release(*(const void **)(v0 + 40));
  _Block_release(*(const void **)(v0 + 48));

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10019CA44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1000181DC();
  sub_100017D24();
  sub_10001755C();
  uint64_t v10 = swift_task_alloc();
  size_t v11 = (void *)sub_100008DC0(v10);
  *size_t v11 = v12;
  v11[1] = sub_100171E3C;
  sub_100017060();
  sub_100018250();
  return v19(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

uint64_t sub_10019CAD8()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

id sub_10019CB10()
{
  return sub_10019A200();
}

uint64_t sub_10019CB2C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  uint64_t v1 = sub_1000175FC();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10019CB7C()
{
  sub_1000181DC();
  sub_100017D24();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100008DC0(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10019DAF8;
  sub_10019DBE4();
  sub_100018250();
  return sub_100198CE4(v3, v4, v5, v6, v7, v8, v9);
}

unint64_t sub_10019CC24()
{
  unint64_t result = qword_1003270D0;
  if (!qword_1003270D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003270D0);
  }
  return result;
}

unint64_t sub_10019CC70()
{
  unint64_t result = qword_1003270E0;
  if (!qword_1003270E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003270E0);
  }
  return result;
}

unint64_t sub_10019CCBC()
{
  unint64_t result = qword_1003270E8;
  if (!qword_1003270E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003270E8);
  }
  return result;
}

uint64_t sub_10019CD08()
{
  _Block_release(*(const void **)(v0 + 16));
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10019CD48()
{
  sub_1000112E8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100008DC0(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100171E3C;
  uint64_t v3 = sub_100010F54();
  return v4(v3);
}

uint64_t sub_10019CDEC()
{
  sub_100017F78();
  sub_100010F2C();
  sub_1000175A8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100008DC0(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100171E3C;
  sub_1000176F0();
  sub_100017D80();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10019CE84()
{
  sub_100017F78();
  sub_100010F2C();
  sub_1000175A8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100008DC0(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100171E3C;
  sub_1000176F0();
  sub_100017D80();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10019CF1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1000181DC();
  sub_100017D24();
  sub_10001755C();
  uint64_t v10 = swift_task_alloc();
  size_t v11 = (void *)sub_100008DC0(v10);
  *size_t v11 = v12;
  v11[1] = sub_100171E3C;
  sub_100017060();
  sub_100018250();
  return v19(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

uint64_t sub_10019CFB0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10019CFC4()
{
  sub_1000112E8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100008DC0(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100171E3C;
  uint64_t v3 = sub_100017CB8();
  return v4(v3);
}

uint64_t sub_10019D05C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100195C4C(a1, *(void **)(v2 + 16), *(char **)(v2 + 24), *(void **)(v2 + 32), *(char **)(v2 + 40), *(void *)(v2 + 48), a2);
}

unint64_t sub_10019D06C()
{
  unint64_t result = qword_100327208;
  if (!qword_100327208)
  {
    sub_100163988(&qword_100327200);
    sub_10019D0DC();
    sub_10019D22C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327208);
  }
  return result;
}

unint64_t sub_10019D0DC()
{
  unint64_t result = qword_100327210;
  if (!qword_100327210)
  {
    sub_100163988(&qword_100327188);
    sub_10019D144();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327210);
  }
  return result;
}

unint64_t sub_10019D144()
{
  unint64_t result = qword_100327218;
  if (!qword_100327218)
  {
    sub_100163988(&qword_100327190);
    sub_10019D2AC((uint64_t)&unk_100327220);
    sub_10019D1C4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327218);
  }
  return result;
}

unint64_t sub_10019D1C4()
{
  unint64_t result = qword_100327230;
  if (!qword_100327230)
  {
    sub_100163988(&qword_1003271B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327230);
  }
  return result;
}

unint64_t sub_10019D22C()
{
  unint64_t result = qword_100327238;
  if (!qword_100327238)
  {
    sub_100163988(&qword_1003271D0);
    sub_10019D2AC((uint64_t)&unk_100327240);
    sub_10019D31C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327238);
  }
  return result;
}

unint64_t sub_10019D2AC(uint64_t a1)
{
  unint64_t result = sub_10001843C(a1);
  if (!result)
  {
    sub_100163988(v3);
    sub_100019D1C((uint64_t)&unk_100327228);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_10019D31C()
{
  unint64_t result = qword_100327248;
  if (!qword_100327248)
  {
    sub_100163988(&qword_1003271E0);
    sub_10019D3C4((uint64_t)&unk_100326F98);
    sub_10019D3C4((uint64_t)&unk_100327250);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327248);
  }
  return result;
}

unint64_t sub_10019D3C4(uint64_t a1)
{
  unint64_t result = sub_10001843C(a1);
  if (!result)
  {
    v3(255);
    unint64_t result = sub_100008DCC();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_10019D400()
{
  unint64_t result = qword_100327270;
  if (!qword_100327270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327270);
  }
  return result;
}

uint64_t sub_10019D440@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100194AF0(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t sub_10019D44C@<X0>(uint64_t *a1@<X8>)
{
  return sub_100193ECC(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_10019D454(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D938(&qword_100327178);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10019D4C0()
{
  swift_unknownObjectRelease();
  _Block_release(*(const void **)(v0 + 48));
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10019D520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1000181DC();
  sub_100017D24();
  sub_10001755C();
  uint64_t v10 = swift_task_alloc();
  size_t v11 = (void *)sub_100008DC0(v10);
  *size_t v11 = v12;
  v11[1] = sub_100171E3C;
  sub_100017060();
  sub_100018250();
  return v19(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

uint64_t sub_10019D5B8()
{
  _Block_release(*(const void **)(v0 + 32));
  swift_release();
  uint64_t v1 = sub_1000169C0();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10019D600()
{
  sub_100017F78();
  sub_100010F2C();
  sub_1000175A8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100008DC0(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100171648;
  sub_1000176F0();
  sub_100017D80();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10019D698()
{
  _Block_release(*(const void **)(v0 + 24));
  swift_release();
  uint64_t v1 = sub_1000177D0();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10019D6D8()
{
  sub_1000112E8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100008DC0(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100171E3C;
  uint64_t v3 = sub_100017CB8();
  return v4(v3);
}

void *sub_10019D770(uint64_t a1)
{
  return sub_100177670(0, *(void *)(a1 + 16), 0, a1);
}

ValueMetadata *type metadata accessor for EntityCacheMigrationPlan()
{
  return &type metadata for EntityCacheMigrationPlan;
}

unint64_t *initializeBufferWithCopyOfBuffer for EntityCacheError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_10019D7C8(*a2);
  *a1 = v3;
  return a1;
}

unint64_t sub_10019D7C8(unint64_t result)
{
  if ((result >> 62) <= 1) {
    return swift_errorRetain();
  }
  return result;
}

unint64_t destroy for EntityCacheError(unint64_t *a1)
{
  return sub_10019D7EC(*a1);
}

unint64_t sub_10019D7EC(unint64_t result)
{
  if ((result >> 62) <= 1) {
    return swift_errorRelease();
  }
  return result;
}

unint64_t *assignWithCopy for EntityCacheError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_10019D7C8(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  sub_10019D7EC(v4);
  return a1;
}

void *initializeWithTake for EntityCacheError(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

unint64_t *assignWithTake for EntityCacheError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  sub_10019D7EC(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for EntityCacheError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7E && *(unsigned char *)(a1 + 8))
    {
      unsigned int v2 = *(_DWORD *)a1 + 125;
    }
    else
    {
      unsigned int v2 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
      if (v2 >= 0x7D) {
        unsigned int v2 = -1;
      }
    }
  }
  else
  {
    unsigned int v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for EntityCacheError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(void *)unint64_t result = a2 - 126;
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)unint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_10019D928(void *a1)
{
  uint64_t v1 = *a1 >> 62;
  if (v1 <= 1) {
    return v1;
  }
  else {
    return (*a1 >> 3) + 2;
  }
}

void *sub_10019D944(void *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_10019D954(unint64_t *result, uint64_t a2)
{
  if (a2 < 2)
  {
    uint64_t v2 = *result & 0xFFFFFFFFFFFFFF8;
    unint64_t v3 = a2 << 62;
  }
  else
  {
    uint64_t v2 = 8 * (a2 - 2);
    unint64_t v3 = 0x8000000000000000;
  }
  *unint64_t result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for EntityCacheError()
{
  return &type metadata for EntityCacheError;
}

void *initializeBufferWithCopyOfBuffer for ServerResponse(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for ServerResponse()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for ServerResponse(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

void *assignWithTake for ServerResponse(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for ServerResponse()
{
  return &type metadata for ServerResponse;
}

unint64_t sub_10019DA68()
{
  unint64_t result = qword_100327300;
  if (!qword_100327300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327300);
  }
  return result;
}

uint64_t sub_10019DB14()
{
  return v0;
}

BOOL sub_10019DB2C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

uint64_t sub_10019DB4C()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t sub_10019DB78()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t sub_10019DBB4()
{
  return v0;
}

uint64_t sub_10019DBCC()
{
  return swift_slowAlloc();
}

uint64_t sub_10019DBFC()
{
  return v0;
}

uint64_t sub_10019DC20()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_10019DC4C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10019DC6C()
{
  return v0;
}

uint64_t sub_10019DC80()
{
  return swift_errorRelease();
}

void *sub_10019DC98(void (*a1)(uint64_t *__return_ptr, void *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  unint64_t result = _swiftEmptyArrayStorage;
  if (v4)
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    unint64_t result = (void *)sub_1001A3F14(a3);
    int64_t v7 = (int64_t)result;
    int v9 = v8;
    char v11 = v10 & 1;
    while ((v7 & 0x8000000000000000) == 0 && v7 < 1 << *(unsigned char *)(a3 + 32))
    {
      if (((*(void *)(a3 + 56 + (((unint64_t)v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
        goto LABEL_13;
      }
      if (*(_DWORD *)(a3 + 36) != v9) {
        goto LABEL_14;
      }
      uint64_t v12 = (void *)(*(void *)(a3 + 48) + 16 * v7);
      uint64_t v13 = v12[1];
      v17[0] = *v12;
      v17[1] = v13;
      swift_bridgeObjectRetain();
      a1(&v18, v17);
      swift_bridgeObjectRelease();
      if (v3) {
        return (void *)swift_release();
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      unint64_t result = (void *)sub_1001A3E2C(v7, v9, v11 & 1, a3);
      int64_t v7 = (int64_t)result;
      int v9 = v14;
      char v11 = v15 & 1;
      if (!--v4)
      {
        sub_100179D00((uint64_t)result, v14, v15 & 1);
        return v19;
      }
    }
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
  }
  return result;
}

uint64_t sub_10019DE34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1001A3174(a1, 0, 0, 0, 1, 0, 0);
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a2;
  *(void *)(v5 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_10019DF44(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_11;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_retain();
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v3 = 4;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      uint64_t v4 = v3 - 3;
      if (__OFADD__(v3 - 4, 1)) {
        break;
      }
      type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion();
      sub_1001A3FE0(&qword_100327560, (void (*)(uint64_t))type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
      dispatch thunk of ModelContext.insert<A>(_:)();
      swift_release();
      ++v3;
      if (v4 == v2) {
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_11:
    swift_retain();
    swift_bridgeObjectRetain();
  }
LABEL_9:
  swift_bridgeObjectRelease();
  return swift_release_n();
}

uint64_t sub_10019E09C(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_13;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    for (uint64_t i = 4; ; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      uint64_t v5 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      sub_1001A0140();
      if (v1)
      {
        swift_bridgeObjectRelease();
        return swift_release();
      }
      swift_release();
      if (v5 == v3) {
        return swift_bridgeObjectRelease();
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_10019E1BC()
{
  sub_10000D938(&qword_1003272F8);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10024F850;
  unint64_t v1 = sub_1001A438C();
  *(void *)(v0 + 32) = &type metadata for DeniedSuggestionSchemaV1;
  *(void *)(v0 + 40) = v1;
  return v0;
}

uint64_t sub_10019E218()
{
  sub_10000D938(&qword_100326FB8);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10024F850;
  uint64_t v1 = type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion();
  uint64_t v2 = sub_1001A3FE0(&qword_100327560, (void (*)(uint64_t))type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
  *(void *)(v0 + 32) = v1;
  *(void *)(v0 + 40) = v2;
  return v0;
}

uint64_t sub_10019E2A4()
{
  return sub_10019E2BC();
}

uint64_t sub_10019E2B0()
{
  return sub_10019E2BC();
}

uint64_t sub_10019E2BC()
{
  swift_getKeyPath();
  sub_1001A3FE0(&qword_100327540, (void (*)(uint64_t))type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_1001A3FE0(&qword_100327560, (void (*)(uint64_t))type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  return v0;
}

uint64_t sub_10019E3B8(uint64_t a1, uint64_t a2)
{
  sub_100171960(a2, (uint64_t)v5);
  sub_100165918(v5, v5[3]);
  swift_getKeyPath();
  uint64_t v3 = type metadata accessor for Date();
  sub_1001A388C(&qword_100327250);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return sub_100016C38((uint64_t)v5);
}

uint64_t sub_10019E4A0()
{
  return swift_release();
}

uint64_t sub_10019E5B8()
{
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  v11[0] = 0xD000000000000012;
  v11[1] = 0x80000001002B1B90;
  v0._uint64_t countAndFlagsBits = sub_10019E2A4();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 32;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v2._uint64_t countAndFlagsBits = sub_10019E2B0();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 2113568;
  v3._object = (void *)0xE300000000000000;
  String.append(_:)(v3);
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  int v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10019E4A0();
  sub_1001A388C(&qword_100326F88);
  v9._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v11[0];
}

uint64_t *sub_10019E754(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  v5[5] = sub_10000D938(&qword_1003275B8);
  v19[0] = v10;
  v19[1] = v10;
  uint64_t v20 = sub_1001A3FE0(&qword_100327560, (void (*)(uint64_t))type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
  uint64_t v21 = v20;
  v5[6] = swift_getOpaqueTypeConformance2();
  sub_100171DD8(v5 + 2);
  static PersistentModel.createBackingData<A>()();
  ObservationRegistrar.init()();
  if (a1) {
    uint64_t v11 = 0x726579616C70;
  }
  else {
    uint64_t v11 = 0x746361746E6F63;
  }
  if (a1) {
    uint64_t v12 = 0xE600000000000000;
  }
  else {
    uint64_t v12 = 0xE700000000000000;
  }
  sub_10019181C(v11, v12, (uint64_t)(v5 + 2));
  sub_10019181C(a2, a3, (uint64_t)(v5 + 2));
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)v19 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a4, v13);
  sub_10019E3B8((uint64_t)v17, (uint64_t)(v5 + 2));
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a4, v13);
  return v5;
}

uint64_t sub_10019E9C0()
{
  sub_10000D938(&qword_100326FB0);
  type metadata accessor for Schema.PropertyMetadata();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100250230;
  swift_getKeyPath();
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
  swift_getKeyPath();
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
  swift_getKeyPath();
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
  return v0;
}

uint64_t *sub_10019EB34(uint64_t a1)
{
  return sub_10019EB70(a1);
}

uint64_t *sub_10019EB70(uint64_t a1)
{
  Swift::String v2 = v1;
  uint64_t v4 = *v1;
  v2[5] = sub_10000D938(&qword_1003275B8);
  *(void *)&long long v6 = v4;
  *((void *)&v6 + 1) = v4;
  uint64_t v7 = sub_1001A3FE0(&qword_100327560, (void (*)(uint64_t))type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
  uint64_t v8 = v7;
  v2[6] = swift_getOpaqueTypeConformance2();
  sub_100171DD8(v2 + 2);
  static PersistentModel.createBackingData<A>()();
  ObservationRegistrar.init()();
  sub_100171960(a1, (uint64_t)&v6);
  swift_beginAccess();
  sub_100016C38((uint64_t)(v2 + 2));
  sub_10019BCEC(&v6, (uint64_t)(v2 + 2));
  swift_endAccess();
  sub_100016C38(a1);
  return v2;
}

uint64_t sub_10019ECC4()
{
  sub_100016C38(v0 + 16);
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14GameDaemonCoreP33_59C5B83A364DDF4FB01D7B31902CAB5424DeniedSuggestionSchemaV116DeniedSuggestion___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v3, v4);
}

uint64_t sub_10019ED6C()
{
  return sub_10019E5B8();
}

uint64_t sub_10019ED94(char a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v6 = type metadata accessor for ModelConfiguration.CloudKitDatabase();
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v8 = type metadata accessor for ModelConfiguration.GroupContainer();
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v10 = type metadata accessor for ModelConfiguration();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v15 = (char *)v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = v13;
  if (a1)
  {
    char v16 = 1;
    ModelConfiguration.init(isStoredInMemoryOnly:)();
  }
  else
  {
    static ModelConfiguration.GroupContainer.identifier(_:)();
    static ModelConfiguration.CloudKitDatabase.none.getter();
    ModelConfiguration.init(_:schema:isStoredInMemoryOnly:allowsSave:groupContainer:cloudKitDatabase:)();
    *(void *)&long long v36 = [self defaultManager];
    uint64_t v17 = type metadata accessor for URL();
    v35[1] = v35;
    uint64_t v18 = *(void *)(v17 - 8);
    __chkstk_darwin(v17, v19);
    uint64_t v21 = (char *)v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
    ModelConfiguration.url.getter();
    URL.absoluteString.getter();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    NSString v22 = String._bridgeToObjectiveC()();
    uint64_t v3 = v2;
    swift_bridgeObjectRelease();
    BOOL v23 = (void *)v36;
    LOBYTE(v17) = [(id)v36 fileExistsAtPath:v22];

    char v16 = v17 ^ 1;
  }
  *(unsigned char *)(v4 + 16) = v16;
  type metadata accessor for ModelContainer();
  sub_10000D938(&qword_100326FB8);
  uint64_t v24 = swift_allocObject();
  long long v36 = xmmword_10024F850;
  *(_OWORD *)(v24 + 16) = xmmword_10024F850;
  uint64_t v25 = type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion();
  uint64_t v26 = sub_1001A3FE0(&qword_100327560, (void (*)(uint64_t))type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
  *(void *)(v24 + 32) = v25;
  *(void *)(v24 + 40) = v26;
  sub_1001A3F94();
  sub_10000D938(&qword_1003270F0);
  unint64_t v27 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = v36;
  unint64_t v29 = v28 + v27;
  uint64_t v30 = v37;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 16))(v29, v15, v37);
  uint64_t v31 = ModelContainer.__allocating_init(for:migrationPlan:configurations:)();
  if (v3)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v30);
    type metadata accessor for FriendSuggestionDenierStorage();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(void *)(v4 + 40) = v31;
    type metadata accessor for ModelContext();
    swift_allocObject();
    swift_retain();
    ModelContext.init(_:)();
    type metadata accessor for DefaultSerialModelExecutor();
    swift_allocObject();
    uint64_t v32 = DefaultSerialModelExecutor.init(modelContext:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v30);
    uint64_t v33 = sub_1001A3FE0(&qword_1003270F8, (void (*)(uint64_t))&type metadata accessor for DefaultSerialModelExecutor);
    *(void *)(v4 + 24) = v32;
    *(void *)(v4 + 32) = v33;
  }
  return v4;
}

uint64_t sub_10019F27C(uint64_t a1)
{
  uint64_t v2 = sub_10000D938(&qword_1003275E8);
  uint64_t v25 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000D938(&qword_1003275F0);
  uint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  __chkstk_darwin(v6 - 8, v8);
  unint64_t v9 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v23 = sub_10000D938(&qword_1003275F8);
  sub_10000D97C((uint64_t)v22 - v9, 1, 1, v23);
  uint64_t v10 = type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion();
  uint64_t v26 = sub_1001A3FE0(&qword_100327560, (void (*)(uint64_t))type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
  FetchDescriptor.init(predicate:sortBy:)();
  uint64_t v11 = sub_10019E2A4();
  uint64_t v13 = v12;
  _OWORD v22[2] = a1;
  uint64_t v14 = sub_10019E2B0();
  uint64_t v16 = v15;
  uint64_t v17 = __chkstk_darwin(v14, v15);
  uint64_t v27 = v11;
  uint64_t v28 = v13;
  uint64_t v29 = v17;
  uint64_t v30 = v16;
  uint64_t v31 = v10;
  Predicate.init(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000D97C((uint64_t)v22 - v9, 0, 1, v23);
  FetchDescriptor.predicate.setter();
  FetchDescriptor.fetchLimit.setter();
  uint64_t v23 = v2;
  FetchDescriptor.includePendingChanges.setter();
  type metadata accessor for FriendSuggestionDenierStorage();
  sub_1001A3FE0(&qword_100327558, (void (*)(uint64_t))type metadata accessor for FriendSuggestionDenierStorage);
  ModelActor.modelContext.getter();
  v22[1] = v10;
  uint64_t v18 = v24;
  uint64_t v19 = dispatch thunk of ModelContext.fetchCount<A>(_:)();
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v5, v23);
    return swift_release();
  }
  uint64_t v21 = v19;
  swift_release();
  if (!v21)
  {
    ModelActor.modelContext.getter();
    dispatch thunk of ModelContext.insert<A>(_:)();
    swift_release();
    ModelActor.modelContext.getter();
    dispatch thunk of ModelContext.save()();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v5, v23);
    return swift_release();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v5, v23);
}

uint64_t sub_10019F614@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v58 = a4;
  uint64_t v59 = a5;
  uint64_t v51 = a2;
  uint64_t v52 = a3;
  uint64_t v60 = a6;
  uint64_t v49 = *a1;
  uint64_t v6 = sub_10000D938(&qword_100327600);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v61 = v6;
  uint64_t v62 = v7;
  uint64_t v56 = *(void *)(v7 + 64);
  __chkstk_darwin(v6, v8);
  unint64_t v57 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v63 = (char *)&v44 - v57;
  uint64_t v50 = sub_10000D938(&qword_100327608);
  uint64_t v64 = *(void *)(v50 - 8);
  uint64_t v54 = *(void *)(v64 + 64);
  __chkstk_darwin(v50, v10);
  unint64_t v55 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v12 = (char *)&v44 - v55;
  uint64_t v13 = sub_10000D938(&qword_100327610);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13, v16);
  unint64_t v53 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v17 = (char *)&v44 - v53;
  sub_1001A3C80(&qword_100327618, &qword_100327610);
  static PredicateExpressions.build_Arg<A>(_:)();
  swift_getKeyPath();
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)();
  swift_release();
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t))(v14 + 8);
  uint64_t v47 = v14 + 8;
  uint64_t v48 = v18;
  v18(v17, v13);
  uint64_t v19 = sub_10000D938(&qword_1003271B0);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(void *)(v20 + 64);
  __chkstk_darwin(v19, v22);
  unint64_t v46 = (v21 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v23 = (char *)&v44 - v46;
  uint64_t v65 = v51;
  uint64_t v66 = v52;
  static PredicateExpressions.build_Arg<A>(_:)();
  uint64_t v52 = sub_1001A3C80(&qword_100327620, &qword_100327608);
  uint64_t v51 = sub_1001A3C80(&qword_1003271C0, &qword_1003271B0);
  uint64_t v24 = v50;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)();
  uint64_t v45 = *(void (**)(char *, uint64_t))(v20 + 8);
  v45(v23, v19);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v64 + 8);
  v64 += 8;
  uint64_t v44 = v25;
  uint64_t v26 = ((uint64_t (*)(char *, uint64_t))v25)(v12, v24);
  uint64_t v28 = __chkstk_darwin(v26, v27);
  uint64_t v29 = (char *)&v44 - v57;
  uint64_t v31 = __chkstk_darwin(v28, v30);
  uint64_t v32 = (char *)&v44 - v55;
  __chkstk_darwin(v31, v33);
  uint64_t v34 = (char *)&v44 - v53;
  static PredicateExpressions.build_Arg<A>(_:)();
  swift_getKeyPath();
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)();
  swift_release();
  uint64_t v35 = v48(v34, v13);
  __chkstk_darwin(v35, v36);
  uint64_t v37 = (char *)&v44 - v46;
  uint64_t v65 = v58;
  uint64_t v66 = v59;
  static PredicateExpressions.build_Arg<A>(_:)();
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)();
  v45(v37, v19);
  v44(v32, v24);
  uint64_t v38 = sub_10000D938(&qword_100327628);
  uint64_t v39 = v60;
  v60[3] = v38;
  v39[4] = sub_1001A3B28();
  sub_100171DD8(v39);
  sub_1001A3C80(&qword_100327650, &qword_100327600);
  uint64_t v40 = v63;
  uint64_t v41 = v61;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)();
  uint64_t v42 = *(void (**)(char *, uint64_t))(v62 + 8);
  v42(v29, v41);
  return ((uint64_t (*)(char *, uint64_t))v42)(v40, v41);
}

uint64_t sub_10019FBD4(unint64_t a1)
{
  return swift_release();
}

uint64_t sub_10019FCA4()
{
  type metadata accessor for FriendSuggestionDenierStorage();
  sub_1001A3FE0(&qword_100327558, (void (*)(uint64_t))type metadata accessor for FriendSuggestionDenierStorage);
  ModelActor.modelContext.getter();
  type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion();
  uint64_t v1 = sub_10000D938(&qword_1003275F0);
  __chkstk_darwin(v1 - 8, v2);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000D938(&qword_1003275F8);
  sub_10000D97C((uint64_t)v4, 1, 1, v5);
  sub_1001A3FE0(&qword_100327560, (void (*)(uint64_t))type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
  dispatch thunk of ModelContext.delete<A>(model:where:includeSubclasses:)();
  sub_10000DB3C((uint64_t)v4, &qword_1003275F0);
  uint64_t result = swift_release();
  if (!v0)
  {
    ModelActor.modelContext.getter();
    dispatch thunk of ModelContext.save()();
    return swift_release();
  }
  return result;
}

uint64_t sub_10019FE48()
{
  uint64_t v1 = sub_10000D938(&qword_1003275E8);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000D938(&qword_1003275F0);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000D938(&qword_1003275F8);
  sub_10000D97C((uint64_t)v9, 1, 1, v10);
  type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion();
  sub_1001A3FE0(&qword_100327560, (void (*)(uint64_t))type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
  FetchDescriptor.init(predicate:sortBy:)();
  FetchDescriptor.includePendingChanges.setter();
  uint64_t v17 = &_swiftEmptySetSingleton;
  uint64_t v18 = &_swiftEmptySetSingleton;
  type metadata accessor for FriendSuggestionDenierStorage();
  sub_1001A3FE0(&qword_100327558, (void (*)(uint64_t))type metadata accessor for FriendSuggestionDenierStorage);
  uint64_t v11 = ModelActor.modelContext.getter();
  uint64_t v12 = dispatch thunk of ModelContext.fetch<A>(_:)();
  if (v0)
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    swift_release();
  }
  else
  {
    unint64_t v13 = v12;
    swift_release();
    sub_10019E09C(v13);
    swift_bridgeObjectRelease();
    uint64_t v16 = (uint64_t)v17;
    uint64_t v15 = (uint64_t)v18;
    objc_allocWithZone((Class)type metadata accessor for FriendSuggestionDenyList());
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v11 = (uint64_t)sub_1001A0598(v15, v16);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_1001A0140()
{
  uint64_t v0 = sub_10019E2A4();
  BOOL v2 = v0 == 0x746361746E6F63 && v1 == 0xE700000000000000;
  if (v2 || (v3 = v0, uint64_t v4 = v1, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_10019E2B0();
    uint64_t v7 = v6;
    uint64_t v8 = v5;
    uint64_t v9 = v7;
LABEL_7:
    sub_100011974(v19, v8, v9);
    return swift_bridgeObjectRelease();
  }
  if (v3 == 0x726579616C70 && v4 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v12)
  {
LABEL_15:
    uint64_t v16 = sub_10019E2B0();
    uint64_t v18 = v17;
    uint64_t v8 = v16;
    uint64_t v9 = v18;
    goto LABEL_7;
  }
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)v19, "Unknown kind: ");
  HIBYTE(v19[1]) = -18;
  v13._uint64_t countAndFlagsBits = sub_10019E2A4();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  uint64_t v14 = v19[1];
  sub_1001A3840();
  swift_allocError();
  *uint64_t v15 = v19[0];
  v15[1] = v14;
  v15[2] = 0;
  return swift_willThrow();
}

uint64_t sub_1001A0330()
{
  swift_unknownObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_1001A0358()
{
  uint64_t v0 = sub_1001A0330();

  return _swift_deallocClassInstance(v0, 48, 7);
}

uint64_t sub_1001A0388()
{
  uint64_t v0 = type metadata accessor for FriendSuggestionDenierStorage();
  uint64_t v1 = sub_1001A3FE0(&qword_100327558, (void (*)(uint64_t))type metadata accessor for FriendSuggestionDenierStorage);

  return ModelActor.unownedExecutor.getter(v0, v1);
}

uint64_t sub_1001A03FC()
{
  return swift_retain();
}

uint64_t sub_1001A0404()
{
  return swift_unknownObjectRetain();
}

id sub_1001A042C()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for FriendSuggestionDenyList());
  id result = sub_1001A0598((uint64_t)&_swiftEmptySetSingleton, (uint64_t)&_swiftEmptySetSingleton);
  qword_10032DA60 = (uint64_t)result;
  return result;
}

id sub_1001A046C()
{
  if (qword_100325EB0 != -1) {
    swift_once();
  }
  id v0 = (void *)qword_10032DA60;

  return v0;
}

uint64_t FriendSuggestionDenyList.contactIDs.getter()
{
  return sub_10017A1E4();
}

Class sub_1001A052C(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3();
  v3.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();

  return v3.super.isa;
}

uint64_t FriendSuggestionDenyList.playerIDs.getter()
{
  return sub_10017A1E4();
}

id sub_1001A0598(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v2[OBJC_IVAR___GKFriendSuggestionDenyList_contactIDs] = a1;
  *(void *)&v2[OBJC_IVAR___GKFriendSuggestionDenyList_playerIDs] = a2;
  v7.receiver = v2;
  v7.Class super_class = ObjectType;
  return [super init];
}

void FriendSuggestionDenyList.init()()
{
}

id FriendSuggestionDenier.init()()
{
  id v1 = [objc_allocWithZone((Class)GKContactDenier) init];
  id v2 = [v0 initInMemory:0 legacyDenier:v1];

  return v2;
}

id FriendSuggestionDenier.__allocating_init(inMemory:legacyDenier:)(char a1, void *a2)
{
  id v5 = objc_allocWithZone(v2);
  return FriendSuggestionDenier.init(inMemory:legacyDenier:)(a1, a2);
}

id FriendSuggestionDenier.init(inMemory:legacyDenier:)(char a1, void *a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  type metadata accessor for FriendSuggestionDenierStorage();
  swift_allocObject();
  uint64_t v6 = v2;
  uint64_t v7 = sub_10019ED94(a1);
  *(void *)&v6[OBJC_IVAR___GKFriendSuggestionDenier_storage] = v7;
  swift_retain();

  if (*(unsigned char *)(v7 + 16) == 1) {
    sub_1001A08DC(a2, v7);
  }
  swift_release();
  v10.receiver = v6;
  v10.Class super_class = ObjectType;
  id v8 = [super init];

  return v8;
}

uint64_t type metadata accessor for FriendSuggestionDenierStorage()
{
  return self;
}

uint64_t sub_1001A08DC(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D938(&qword_100326298);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  char v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = [a1 deniedContactIdentifiers];
  sub_1001A3CC4();
  uint64_t v14 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v15 = sub_100175C44(v14);
  static GKLog.general.getter();
  swift_bridgeObjectRetain();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 134217984;
    v23[1] = *(void *)(v15 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Importing %ld denied contact IDs", v18, 0xCu);
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  if (!*(void *)(v15 + 16)) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v19 = type metadata accessor for TaskPriority();
  sub_10000D97C((uint64_t)v7, 1, 1, v19);
  uint64_t v20 = (void *)swift_allocObject();
  _OWORD v20[2] = 0;
  v20[3] = 0;
  void v20[4] = v15;
  v20[5] = a2;
  v20[6] = a1;
  swift_retain();
  id v21 = a1;
  sub_10019DE34((uint64_t)v7, (uint64_t)&unk_100327660, (uint64_t)v20);
  swift_release();
  return sub_10000DB3C((uint64_t)v7, &qword_100326298);
}

uint64_t sub_1001A0BDC()
{
  uint64_t v1 = sub_10000D938(&qword_100326298);
  __chkstk_darwin(v1 - 8, v2);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TaskPriority();
  sub_10000D97C((uint64_t)v4, 1, 1, v5);
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = 0;
  v6[3] = 0;
  void v6[4] = v0;
  id v7 = v0;
  sub_10019DE34((uint64_t)v4, (uint64_t)&unk_1003275E0, (uint64_t)v6);
  swift_release();
  return sub_10000DB3C((uint64_t)v4, &qword_100326298);
}

uint64_t sub_1001A0CC0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100171E3C;
  return FriendSuggestionDenier.deleteAll()();
}

uint64_t FriendSuggestionDenier.deleteAll()()
{
  sub_100010DA4();
  v1[3] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  void v1[4] = v2;
  sub_1000111CC(v2);
  v1[5] = v3;
  v1[6] = swift_task_alloc();
  v1[7] = swift_task_alloc();
  uint8_t v1[8] = swift_task_alloc();
  sub_100017040();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_1001A0E00()
{
  sub_1000112E8();
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) + OBJC_IVAR___GKFriendSuggestionDenier_storage);
  *(void *)(v0 + 72) = v1;
  if (v1)
  {
    type metadata accessor for FriendSuggestionDenierStorage();
    sub_1001A3FE0(&qword_100327330, (void (*)(uint64_t))type metadata accessor for FriendSuggestionDenierStorage);
    swift_retain();
    dispatch thunk of Actor.unownedExecutor.getter();
    sub_1001A4400();
    sub_100017F8C();
    return _swift_task_switch(v2, v3, v4);
  }
  else
  {
    static GKLog.general.getter();
    uint64_t v5 = (void *)Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (sub_100017088(v6))
    {
      id v7 = (_WORD *)sub_100018370();
      sub_100018060(v7);
      sub_100017364((void *)&_mh_execute_header, v8, v9, "Can not clear deny list because storage has failed to initialize");
      sub_100010D7C();
    }

    uint64_t v10 = sub_100018048();
    v11(v10);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000112AC();
    return v12();
  }
}

uint64_t sub_1001A0F78()
{
  sub_1000112E8();
  sub_10019FCA4();
  *(void *)(v0 + 80) = 0;
  sub_100017040();
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_1001A0FFC()
{
  sub_100010F2C();
  static GKLog.general.getter();
  uint64_t v1 = (void *)Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (sub_100017088(v2))
  {
    uint64_t v3 = (_WORD *)sub_100018370();
    sub_100018060(v3);
    sub_100017364((void *)&_mh_execute_header, v4, v5, "Friend suggestion deny list has been cleared");
    sub_100010D7C();
  }
  uint64_t v6 = v0[8];
  uint64_t v7 = v0[4];
  uint64_t v8 = v0[5];

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000112AC();
  return v9();
}

uint64_t sub_1001A10E8()
{
  static GKLog.general.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to clear deny list: %@", v3, 0xCu);
    sub_10000D938(&qword_100326430);
    swift_arrayDestroy();
    sub_100010D7C();
    sub_100010D7C();
    swift_release();

    swift_errorRelease();
  }
  else
  {
    swift_release();
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_100017504();
  v6();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000112AC();
  return v7();
}

uint64_t sub_1001A131C(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_1000111C0((uint64_t)sub_1001A1338);
}

uint64_t sub_1001A1338()
{
  sub_1000112E8();
  type metadata accessor for Date();
  swift_task_alloc();
  swift_bridgeObjectRetain();
  static Date.now.getter();
  type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion();
  swift_allocObject();
  uint64_t v1 = sub_1000180F0(0);
  *(void *)(v0 + 40) = v1;
  swift_task_dealloc();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  void *v2 = v0;
  v2[1] = sub_1001A1440;
  return sub_1001A1544((uint64_t)v1);
}

uint64_t sub_1001A1440()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_100010D94();
  *uint64_t v5 = v4;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_100017040();
    return _swift_task_switch(v6, v7, v8);
  }
  else
  {
    swift_release();
    sub_1000112AC();
    return v9();
  }
}

uint64_t sub_1001A1544(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(sub_1001A1564, 0, 0);
}

uint64_t sub_1001A1564()
{
  sub_1000112E8();
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) + OBJC_IVAR___GKFriendSuggestionDenier_storage);
  *(void *)(v0 + 32) = v1;
  if (v1)
  {
    type metadata accessor for FriendSuggestionDenierStorage();
    sub_1001A3FE0(&qword_100327330, (void (*)(uint64_t))type metadata accessor for FriendSuggestionDenierStorage);
    swift_retain();
    dispatch thunk of Actor.unownedExecutor.getter();
    sub_1001A4400();
    sub_100017F8C();
    return _swift_task_switch(v2, v3, v4);
  }
  else
  {
    sub_1001A3840();
    swift_allocError();
    *(_OWORD *)uint64_t v5 = xmmword_100250240;
    *(void *)(v5 + 16) = 0;
    swift_willThrow();
    sub_1000112AC();
    return v6();
  }
}

uint64_t sub_1001A16A0()
{
  sub_1000112E8();
  sub_10019F27C(*(void *)(v0 + 16));
  *(void *)(v0 + 40) = 0;
  sub_100017040();
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_1001A1728()
{
  sub_100010DA4();
  swift_release();
  sub_1000112AC();
  return v0();
}

uint64_t sub_1001A1784()
{
  sub_1000112E8();
  uint64_t v1 = *(void *)(v0 + 40);
  sub_1001A3840();
  swift_allocError();
  void *v2 = 0;
  v2[1] = 0;
  _DWORD v2[2] = v1;
  swift_willThrow();
  swift_release();
  sub_1000112AC();
  return v3();
}

uint64_t sub_1001A183C(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v3[4] = v6;
  a3;
  uint64_t v8 = (void *)swift_task_alloc();
  void v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_1001A43DC;
  return sub_1001A131C(v5, v7);
}

uint64_t sub_1001A1910(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_1000111C0((uint64_t)sub_1001A192C);
}

uint64_t sub_1001A192C()
{
  sub_1000112E8();
  type metadata accessor for Date();
  swift_task_alloc();
  swift_bridgeObjectRetain();
  static Date.now.getter();
  type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion();
  swift_allocObject();
  uint64_t v1 = sub_1000180F0(1);
  *(void *)(v0 + 40) = v1;
  swift_task_dealloc();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  void *v2 = v0;
  v2[1] = sub_1001A1A34;
  return sub_1001A1544((uint64_t)v1);
}

uint64_t sub_1001A1A34()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_100010D94();
  *uint64_t v5 = v4;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_100017040();
    return _swift_task_switch(v6, v7, v8);
  }
  else
  {
    swift_release();
    sub_1000112AC();
    return v9();
  }
}

uint64_t sub_1001A1B38()
{
  sub_100010DA4();
  swift_release();
  sub_1000112AC();
  return v0();
}

uint64_t sub_1001A1BB4(void *a1, int a2, void *a3, void *aBlock)
{
  uint64_t v6 = _Block_copy(aBlock);
  sub_1000177D0();
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = a3;
  v7[3] = v6;
  void v7[4] = a1;
  id v8 = a3;
  id v9 = a1;
  uint64_t v10 = sub_100010F54();

  return sub_10000D83C(v10, v11);
}

uint64_t sub_1001A1C2C(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v3[4] = v6;
  a3;
  id v8 = (void *)swift_task_alloc();
  void v3[5] = v8;
  *id v8 = v3;
  v8[1] = sub_1001A1D00;
  return sub_1001A1910(v5, v7);
}

uint64_t sub_1001A1D00()
{
  sub_100010F2C();
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  sub_100010D94();
  *uint64_t v5 = v4;
  uint64_t v6 = *(void **)(v3 + 16);
  uint64_t v7 = *v1;
  *uint64_t v5 = *v1;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(v3 + 24);
  if (v2)
  {
    id v9 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v9);
  }
  else
  {
    (*(void (**)(uint64_t, void))(v8 + 16))(v8, 0);
  }
  _Block_release(*(const void **)(v4 + 24));
  uint64_t v10 = *(uint64_t (**)(void))(v7 + 8);
  return v10();
}

uint64_t sub_1001A1E94()
{
  sub_100010DA4();
  v1[3] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  void v1[4] = v2;
  sub_1000111CC(v2);
  v1[5] = v3;
  v1[6] = swift_task_alloc();
  v1[7] = swift_task_alloc();
  sub_100017040();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_1001A1F38()
{
  sub_1000112E8();
  uint64_t v1 = *(void *)(v0[3] + OBJC_IVAR___GKFriendSuggestionDenier_storage);
  v0[8] = v1;
  if (v1)
  {
    type metadata accessor for FriendSuggestionDenierStorage();
    sub_1001A3FE0(&qword_100327330, (void (*)(uint64_t))type metadata accessor for FriendSuggestionDenierStorage);
    swift_retain();
    dispatch thunk of Actor.unownedExecutor.getter();
    sub_1001A4400();
    sub_100017F8C();
    return _swift_task_switch(v2, v3, v4);
  }
  else
  {
    static GKLog.general.getter();
    uint64_t v5 = (void *)Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (sub_100017088(v6))
    {
      uint64_t v7 = (_WORD *)sub_100018370();
      sub_100018060(v7);
      sub_100017364((void *)&_mh_execute_header, v8, v9, "Can not fetch deny list because storage has failed to initialize");
      sub_100010D7C();
    }

    uint64_t v10 = sub_100018048();
    v11(v10);
    if (qword_100325EB0 != -1) {
      swift_once();
    }
    id v12 = (id)qword_10032DA60;
    swift_task_dealloc();
    swift_task_dealloc();
    id v13 = (uint64_t (*)(id))v0[1];
    return v13(v12);
  }
}

uint64_t sub_1001A20F0()
{
  sub_1000112E8();
  *(void *)(v0 + 72) = sub_10019FE48();
  *(void *)(v0 + 80) = 0;
  sub_100017040();
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_1001A2174()
{
  sub_100010DA4();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 72);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_1001A21E8()
{
  static GKLog.general.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to fetch deny list: %@", v3, 0xCu);
    sub_10000D938(&qword_100326430);
    swift_arrayDestroy();
    sub_100010D7C();
    sub_100010D7C();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  sub_100017504();
  v6();
  if (qword_100325EB0 != -1) {
    swift_once();
  }
  id v7 = (id)qword_10032DA60;
  swift_errorRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(id))(v0 + 8);
  return v8(v7);
}

uint64_t sub_1001A2420(const void *a1, void *a2)
{
  _DWORD v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1001A24C8;
  return sub_1001A1E94();
}

uint64_t sub_1001A24C8()
{
  sub_1000112E8();
  os_log_type_t v2 = v1;
  sub_100011168();
  uint64_t v4 = *(const void **)(v3 + 24);
  uint64_t v5 = *(void **)(v3 + 16);
  uint64_t v6 = *v0;
  sub_100010D94();
  *id v7 = v6;
  swift_task_dealloc();

  uint64_t v8 = sub_100010F54();
  v9(v8);
  _Block_release(v4);

  sub_1000112AC();
  return v10();
}

uint64_t sub_1001A260C(void *a1, int a2, void *aBlock)
{
  uint64_t v4 = _Block_copy(aBlock);
  sub_100018350();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = a1;
  id v6 = a1;
  uint64_t v7 = sub_100010F54();

  return sub_10000D83C(v7, v8);
}

uint64_t sub_1001A2670(const void *a1, void *a2)
{
  _DWORD v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1001A2718;
  return FriendSuggestionDenier.deleteAll()();
}

uint64_t sub_1001A2718()
{
  sub_100010DA4();
  sub_100011168();
  os_log_type_t v2 = *(void (***)(void))(v1 + 24);
  uint64_t v3 = *(void **)(v1 + 16);
  uint64_t v4 = *v0;
  sub_100010D94();
  *uint64_t v5 = v4;
  swift_task_dealloc();

  v2[2](v2);
  _Block_release(v2);
  sub_1000112AC();
  return v6();
}

uint64_t sub_1001A281C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[5] = a5;
  v6[6] = a6;
  void v6[4] = a4;
  uint64_t v7 = type metadata accessor for Logger();
  v6[7] = v7;
  v6[8] = *(void *)(v7 - 8);
  v6[9] = swift_task_alloc();
  v6[10] = swift_task_alloc();
  return _swift_task_switch(sub_1001A28F0, 0, 0);
}

uint64_t sub_1001A28F0()
{
  sub_100010F2C();
  uint64_t v1 = v0[4];
  uint64_t v2 = type metadata accessor for Date();
  v0[11] = v2;
  sub_1000111CC(v2);
  v0[12] = v3;
  uint64_t v4 = swift_task_alloc();
  v0[13] = v4;
  static Date.now.getter();
  uint64_t v5 = swift_task_alloc();
  *(void *)(v5 + 16) = v4;
  v0[14] = sub_10019DC98((void (*)(uint64_t *__return_ptr, void *))sub_1001A3E08, v5, v1);
  v0[15] = 0;
  swift_task_dealloc();
  type metadata accessor for FriendSuggestionDenierStorage();
  sub_1001A3FE0(&qword_100327330, (void (*)(uint64_t))type metadata accessor for FriendSuggestionDenierStorage);
  dispatch thunk of Actor.unownedExecutor.getter();
  sub_1001A4400();
  sub_100017F8C();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_1001A2A38()
{
  sub_1000112E8();
  unint64_t v1 = v0[15];
  sub_10019FBD4(v0[14]);
  v0[16] = v1;
  swift_bridgeObjectRelease();
  sub_100017040();
  return _swift_task_switch(v2, v3, v4);
}

uint64_t sub_1001A2AC4()
{
  sub_100010F2C();
  static GKLog.general.getter();
  unint64_t v1 = (void *)Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (sub_100017088(v2))
  {
    uint64_t v3 = (_WORD *)sub_100018370();
    sub_100018060(v3);
    sub_100017364((void *)&_mh_execute_header, v4, v5, "Clearing legacy denier after successfully importing from it");
    sub_100010D7C();
  }
  uint64_t v6 = v0[10];
  uint64_t v7 = v0[7];
  uint64_t v8 = v0[8];
  uint64_t v9 = (void *)v0[6];

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  [v9 clearFriendSuggestionsDenyList];
  uint64_t v10 = sub_1001A43E0();
  v11(v10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000112AC();
  return v12();
}

uint64_t sub_1001A2BC0()
{
  static GKLog.general.getter();
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 24) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to import denied contact IDs: %@", v3, 0xCu);
    sub_10000D938(&qword_100326430);
    swift_arrayDestroy();
    sub_100010D7C();
    sub_100010D7C();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_100017504();
  v6();
  uint64_t v7 = sub_1001A43E0();
  v8(v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000112AC();
  return v9();
}

uint64_t *sub_1001A2D9C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = type metadata accessor for Date();
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v11 + 16))(v10, a2);
  type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion();
  swift_allocObject();
  swift_bridgeObjectRetain();
  id result = sub_10019E754(0, v5, v6, (uint64_t)v10);
  *a3 = result;
  return result;
}

Swift::Int sub_1001A2EA8()
{
  return Hasher._finalize()();
}

void (*sub_1001A2F58(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  sub_1001924A8((uint64_t)v3);
  return sub_1001A2FB8;
}

void sub_1001A2FB8(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    sub_100171960(*a1, v2 + 40);
    sub_1001924F4((long long *)(v2 + 40));
    sub_100016C38(v2);
  }
  else
  {
    sub_1001924F4((long long *)*a1);
  }

  free((void *)v2);
}

Swift::Int sub_1001A3030()
{
  return sub_1001A2EA8();
}

uint64_t sub_1001A3054()
{
  return PersistentModel.hash(into:)();
}

uint64_t sub_1001A30C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10019E2B0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1001A30F4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  uint64_t v5 = sub_1001A3FE0(&qword_100327560, (void (*)(uint64_t))type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);

  return static PersistentModel.== infix(_:_:)(v3, v4, v2, v5);
}

uint64_t sub_1001A3174(uint64_t a1, char a2, char a3, char a4, char a5, char a6, char a7)
{
  uint64_t v14 = sub_10000D938(&qword_100326298);
  __chkstk_darwin(v14 - 8, v15);
  os_log_type_t v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001A3AB4(a1, (uint64_t)v17);
  uint64_t v18 = type metadata accessor for TaskPriority();
  if (sub_10000DB14((uint64_t)v17, 1, v18) == 1)
  {
    sub_10000DB3C((uint64_t)v17, &qword_100326298);
    uint64_t result = 0;
    if ((a2 & 1) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    unsigned __int8 v20 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(*(void *)(v18 - 8) + 8))(v17, v18);
    uint64_t result = v20;
    if ((a2 & 1) == 0)
    {
LABEL_3:
      if (a3) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  result |= 0x100uLL;
  if (a3)
  {
LABEL_4:
    result |= 0x400uLL;
    if ((a4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  if ((a4 & 1) == 0)
  {
LABEL_5:
    if ((a5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_15:
  result |= 0x800uLL;
  if (a5) {
LABEL_6:
  }
    result |= 0x1000uLL;
LABEL_7:
  if (a6) {
    result |= 0x2000uLL;
  }
  if (a7) {
    return result | 0x4000;
  }
  return result;
}

uint64_t sub_1001A32DC()
{
  return type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion();
}

uint64_t type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion()
{
  uint64_t result = qword_100327368;
  if (!qword_100327368) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001A332C()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for FriendSuggestionDenyList()
{
  return self;
}

uint64_t type metadata accessor for FriendSuggestionDenier()
{
  return self;
}

ValueMetadata *type metadata accessor for DeniedSuggestionSchemaV1()
{
  return &type metadata for DeniedSuggestionSchemaV1;
}

ValueMetadata *type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion._SwiftDataNoType()
{
  return &type metadata for DeniedSuggestionSchemaV1.DeniedSuggestion._SwiftDataNoType;
}

uint64_t sub_1001A3440()
{
  return sub_1001A3FE0(&qword_100327538, (void (*)(uint64_t))type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
}

uint64_t sub_1001A3488()
{
  return sub_1001A3FE0(&qword_100327540, (void (*)(uint64_t))type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
}

uint64_t sub_1001A34D0()
{
  return sub_1001A3FE0(&qword_100327548, (void (*)(uint64_t))type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
}

uint64_t sub_1001A3518()
{
  return sub_1001A3FE0(&qword_100327550, (void (*)(uint64_t))type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
}

uint64_t sub_1001A3560()
{
  return sub_1001A3FE0(&qword_100327330, (void (*)(uint64_t))type metadata accessor for FriendSuggestionDenierStorage);
}

uint64_t sub_1001A35A8()
{
  return sub_10019E4A0();
}

uint64_t sub_1001A35CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10019E2B0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1001A35F8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10019E2A4();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1001A3628()
{
  sub_1000112E8();
  uint64_t v0 = swift_task_alloc();
  unint64_t v1 = (void *)sub_100008DC0(v0);
  *unint64_t v1 = v2;
  v1[1] = sub_100171E3C;
  uint64_t v3 = sub_100010F54();
  return v4(v3);
}

uint64_t sub_1001A36CC()
{
  _Block_release(*(const void **)(v0 + 16));

  uint64_t v1 = sub_100018350();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1001A3704()
{
  sub_1000112E8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100008DC0(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100171E3C;
  uint64_t v3 = sub_100010F54();
  return v4(v3);
}

uint64_t sub_1001A37A8()
{
  sub_1000112E8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100008DC0(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100171E3C;
  uint64_t v3 = sub_100017CB8();
  return v4(v3);
}

unint64_t sub_1001A3840()
{
  unint64_t result = qword_1003275B0;
  if (!qword_1003275B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003275B0);
  }
  return result;
}

uint64_t sub_1001A388C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Date();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001A38D4()
{
  _Block_release(*(const void **)(v0 + 24));
  uint64_t v1 = sub_1000177D0();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1001A3914()
{
  sub_1000112E8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100008DC0(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100171E3C;
  uint64_t v3 = sub_100017CB8();
  return v4(v3);
}

uint64_t sub_1001A39AC()
{
  swift_unknownObjectRelease();

  uint64_t v1 = sub_1000177D0();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1001A39E4()
{
  sub_1000112E8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100008DC0(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100171648;
  sub_1000181F4();
  return sub_1001A0CC0();
}

uint64_t sub_1001A3A84()
{
  swift_release();
  uint64_t v0 = sub_100018350();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1001A3AB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D938(&qword_100326298);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001A3B1C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10019F614(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

unint64_t sub_1001A3B28()
{
  unint64_t result = qword_100327630;
  if (!qword_100327630)
  {
    sub_100163988(&qword_100327628);
    sub_1001A3B90();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327630);
  }
  return result;
}

unint64_t sub_1001A3B90()
{
  unint64_t result = qword_100327638;
  if (!qword_100327638)
  {
    sub_100163988(&qword_100327600);
    sub_1001A3C00();
    sub_10019D1C4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327638);
  }
  return result;
}

unint64_t sub_1001A3C00()
{
  unint64_t result = qword_100327640;
  if (!qword_100327640)
  {
    sub_100163988(&qword_100327608);
    sub_1001A3C80(&qword_100327648, &qword_100327610);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327640);
  }
  return result;
}

uint64_t sub_1001A3C80(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100163988(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001A3CC4()
{
  unint64_t result = qword_1003263A0;
  if (!qword_1003263A0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1003263A0);
  }
  return result;
}

uint64_t sub_1001A3D04()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001A3D54()
{
  sub_100010F2C();
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_100008DC0(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_100171E3C;
  uint64_t v7 = sub_1000181F4();
  return sub_1001A281C(v7, v8, v9, v1, v2, v3);
}

uint64_t *sub_1001A3E08@<X0>(uint64_t *a1@<X0>, uint64_t **a2@<X8>)
{
  return sub_1001A2D9C(a1, *(void *)(v2 + 16), a2);
}

int64_t sub_1001A3E2C(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (unint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  if (v5 + 1 < (unint64_t)(result + 63) >> 6)
  {
    unint64_t v10 = *(void *)(v6 + 8 * v9);
    if (v10) {
      return __clz(__rbit64(v10)) + (v9 << 6);
    }
    unint64_t v11 = (unint64_t)(result + 63) >> 6;
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v11)
    {
      unint64_t v10 = *(void *)(v6 + 8 * v9);
      if (v10) {
        return __clz(__rbit64(v10)) + (v9 << 6);
      }
      while (v5 + 3 < v11)
      {
        unint64_t v10 = *(void *)(a4 + 80 + 8 * v5++);
        if (v10)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v10)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1001A3F14(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v2 = 64;
  for (uint64_t i = 9; i - 7 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

unint64_t sub_1001A3F94()
{
  unint64_t result = qword_100327668;
  if (!qword_100327668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327668);
  }
  return result;
}

uint64_t sub_1001A3FE0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for DeniedSuggestionMigrationPlan()
{
  return &type metadata for DeniedSuggestionMigrationPlan;
}

unint64_t destroy for FriendSuggestionDenierError(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  int v2 = -1;
  if (result < 0xFFFFFFFF) {
    int v2 = result;
  }
  if (v2 - 1 < 0)
  {
    swift_bridgeObjectRelease();
    return swift_errorRelease();
  }
  return result;
}

void *_s14GameDaemonCore27FriendSuggestionDenierErrorOwCP_0(void *a1, void *a2)
{
  unint64_t v3 = a2[1];
  LODWORD(v4) = -1;
  if (v3 < 0xFFFFFFFF) {
    uint64_t v4 = a2[1];
  }
  if ((int)v4 - 1 < 0)
  {
    *a1 = *a2;
    a1[1] = v3;
    uint64_t v5 = a2[2];
    swift_bridgeObjectRetain();
    swift_errorRetain();
    a1[2] = v5;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
  }
  return a1;
}

void *assignWithCopy for FriendSuggestionDenierError(void *a1, void *a2)
{
  LODWORD(v4) = -1;
  if (a1[1] >= 0xFFFFFFFFuLL) {
    LODWORD(v5) = -1;
  }
  else {
    uint64_t v5 = a1[1];
  }
  int v6 = v5 - 1;
  if (a2[1] < 0xFFFFFFFFuLL) {
    uint64_t v4 = a2[1];
  }
  int v7 = v4 - 1;
  if (v6 < 0)
  {
    if (v7 < 0)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v11 = a2[2];
      swift_errorRetain();
      a1[2] = v11;
      swift_errorRelease();
      return a1;
    }
    swift_bridgeObjectRelease();
    swift_errorRelease();
    goto LABEL_11;
  }
  if ((v7 & 0x80000000) == 0)
  {
LABEL_11:
    long long v9 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v9;
    return a1;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v8 = a2[2];
  swift_bridgeObjectRetain();
  swift_errorRetain();
  a1[2] = v8;
  return a1;
}

__n128 initializeWithTake for FriendSuggestionDenierError(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *assignWithTake for FriendSuggestionDenierError(void *a1, void *a2)
{
  unint64_t v4 = a1[1];
  int v5 = -1;
  if (v4 < 0xFFFFFFFF) {
    int v5 = v4;
  }
  if (v5 - 1 < 0)
  {
    unint64_t v6 = a2[1];
    LODWORD(v7) = -1;
    if (v6 < 0xFFFFFFFF) {
      uint64_t v7 = a2[1];
    }
    if ((int)v7 - 1 < 0)
    {
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRelease();
      a1[2] = a2[2];
      swift_errorRelease();
      return a1;
    }
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for FriendSuggestionDenierError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  if ((v4 + 1) >= 2) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for FriendSuggestionDenierError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)__n128 result = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)__n128 result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

void *sub_1001A434C(void *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    result[1] = 0;
    result[2] = 0;
    *__n128 result = a2 - 0x7FFFFFFF;
  }
  else if (a2)
  {
    result[1] = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FriendSuggestionDenierError()
{
  return &type metadata for FriendSuggestionDenierError;
}

unint64_t sub_1001A438C()
{
  unint64_t result = qword_100327670;
  if (!qword_100327670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327670);
  }
  return result;
}

uint64_t sub_1001A43E0()
{
  return *(void *)(v0 + 104);
}

id MetricsIntBucketer.__allocating_init(buckets:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return MetricsIntBucketer.init(buckets:)(a1);
}

id MetricsIntBucketer.init(buckets:)(void *a1)
{
  int v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  if (a1[2])
  {
    int v5 = (objc_class *)ObjectType;
    unint64_t v10 = a1;
    unint64_t v6 = v2;
    swift_bridgeObjectRetain();
    sub_1001A46A4(&v10);
    swift_bridgeObjectRelease();
    if (v10[2])
    {
      uint64_t v7 = v10[4];
      sub_1001A5128(0, 1);
      *(void *)&v6[OBJC_IVAR___GKMetricsIntBucketer_firstBucket] = v7;
      *(void *)&v6[OBJC_IVAR___GKMetricsIntBucketer_buckets] = v10;

      v9.receiver = v6;
      v9.Class super_class = v5;
      return [super init];
    }
    __break(1u);
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  id result = (id)swift_release();
  __break(1u);
  return result;
}

Swift::Int __swiftcall MetricsIntBucketer.clamp(_:)(Swift::Int a1)
{
  Swift::Int v2 = *(void *)(v1 + OBJC_IVAR___GKMetricsIntBucketer_firstBucket);
  if (v2 < a1)
  {
    id v3 = *(void **)(v1 + OBJC_IVAR___GKMetricsIntBucketer_buckets);
    uint64_t v4 = v3[2];
    if (v4)
    {
      Swift::Int v5 = v3[4];
      if (v5 == a1) {
        return a1;
      }
      if (v5 > a1) {
        return v2;
      }
      if (v4 == 1) {
        return v5;
      }
      Swift::Int v7 = v3[5];
      if (v7 == a1)
      {
        return a1;
      }
      else
      {
        uint64_t v8 = v3 + 6;
        for (uint64_t i = v4 - 2; ; --i)
        {
          Swift::Int v2 = v5;
          if (v7 > a1) {
            break;
          }
          Swift::Int v5 = v7;
          if (!i) {
            return v5;
          }
          Swift::Int v10 = *v8++;
          Swift::Int v7 = v10;
          if (v10 == a1) {
            return a1;
          }
        }
      }
    }
  }
  return v2;
}

void MetricsIntBucketer.init()()
{
}

uint64_t sub_1001A46A4(void **a1)
{
  Swift::Int v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    Swift::Int v2 = sub_10019D770((uint64_t)v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  uint64_t result = sub_1001A4710(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1001A4710(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3) {
        return sub_1001A4CE4(0, v3, 1, a1);
      }
      return result;
    }
    goto LABEL_124;
  }
  uint64_t v5 = result;
  uint64_t result = (uint64_t)sub_100177260(v3 / 2);
  uint64_t v83 = a1;
  uint64_t v84 = result;
  uint64_t v88 = v6;
  uint64_t v86 = v3;
  if (v3 <= 0)
  {
    objc_super v9 = (char *)_swiftEmptyArrayStorage;
    unint64_t v26 = _swiftEmptyArrayStorage[2];
LABEL_90:
    if (v26 < 2)
    {
LABEL_101:
      uint64_t result = swift_bridgeObjectRelease();
      if (v86 >= -1)
      {
        *(void *)(v84 + 16) = 0;
        return swift_bridgeObjectRelease();
      }
      goto LABEL_129;
    }
    uint64_t v76 = *v83;
    while (1)
    {
      unint64_t v77 = v26 - 2;
      if (v26 < 2) {
        break;
      }
      if (!v76) {
        goto LABEL_133;
      }
      uint64_t v78 = *(void *)&v9[16 * v77 + 32];
      uint64_t v79 = *(void *)&v9[16 * v26 + 24];
      uint64_t result = sub_1001A4D3C((char *)(v76 + 8 * v78), (char *)(v76 + 8 * *(void *)&v9[16 * v26 + 16]), v76 + 8 * v79, v88);
      if (v1) {
        goto LABEL_86;
      }
      if (v79 < v78) {
        goto LABEL_119;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_10019C55C((uint64_t)v9);
        objc_super v9 = (char *)result;
      }
      if (v77 >= *((void *)v9 + 2)) {
        goto LABEL_120;
      }
      unint64_t v80 = &v9[16 * v77 + 32];
      *(void *)unint64_t v80 = v78;
      *((void *)v80 + 1) = v79;
      unint64_t v81 = *((void *)v9 + 2);
      if (v26 > v81) {
        goto LABEL_121;
      }
      uint64_t result = (uint64_t)memmove(&v9[16 * v26 + 16], &v9[16 * v26 + 32], 16 * (v81 - v26));
      *((void *)v9 + 2) = v81 - 1;
      unint64_t v26 = v81 - 1;
      if (v81 <= 2) {
        goto LABEL_101;
      }
    }
LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
    return result;
  }
  Swift::Int v7 = 0;
  uint64_t v8 = *a1;
  uint64_t v82 = *a1 - 8;
  objc_super v9 = (char *)_swiftEmptyArrayStorage;
  uint64_t v85 = v5;
  uint64_t v87 = *a1;
  while (1)
  {
    Swift::Int v10 = v7++;
    if (v7 < v3)
    {
      uint64_t v11 = *(void *)(v8 + 8 * v7);
      uint64_t v12 = *(void *)(v8 + 8 * v10);
      Swift::Int v7 = v10 + 2;
      if (v10 + 2 < v3)
      {
        uint64_t v13 = v11;
        while (1)
        {
          uint64_t v14 = *(void *)(v8 + 8 * v7);
          if (v11 < v12 == v14 >= v13) {
            break;
          }
          ++v7;
          uint64_t v13 = v14;
          if (v7 >= v3)
          {
            Swift::Int v7 = v3;
            break;
          }
        }
      }
      if (v11 < v12)
      {
        if (v7 < v10) {
          goto LABEL_126;
        }
        if (v10 < v7)
        {
          Swift::Int v15 = v7 - 1;
          Swift::Int v16 = v10;
          do
          {
            if (v16 != v15)
            {
              if (!v8) {
                goto LABEL_132;
              }
              uint64_t v17 = *(void *)(v8 + 8 * v16);
              *(void *)(v8 + 8 * v16) = *(void *)(v8 + 8 * v15);
              *(void *)(v8 + 8 * v15) = v17;
            }
            BOOL v57 = ++v16 < v15--;
          }
          while (v57);
        }
      }
    }
    if (v7 < v3)
    {
      if (__OFSUB__(v7, v10)) {
        goto LABEL_123;
      }
      if (v7 - v10 < v5)
      {
        Swift::Int v18 = v10 + v5;
        if (__OFADD__(v10, v5)) {
          goto LABEL_127;
        }
        if (v18 >= v3) {
          Swift::Int v18 = v3;
        }
        if (v18 < v10) {
          goto LABEL_128;
        }
        if (v7 != v18)
        {
          uint64_t v19 = (uint64_t *)(v82 + 8 * v7);
          do
          {
            uint64_t v20 = *(void *)(v8 + 8 * v7);
            Swift::Int v21 = v10;
            uint64_t v22 = v19;
            do
            {
              uint64_t v23 = *v22;
              if (v20 >= *v22) {
                break;
              }
              if (!v8) {
                goto LABEL_130;
              }
              *uint64_t v22 = v20;
              v22[1] = v23;
              --v22;
              ++v21;
            }
            while (v7 != v21);
            ++v7;
            ++v19;
          }
          while (v7 != v18);
          Swift::Int v7 = v18;
        }
      }
    }
    if (v7 < v10) {
      goto LABEL_122;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_10019C464(0, *((void *)v9 + 2) + 1, 1, v9);
      objc_super v9 = (char *)result;
    }
    unint64_t v25 = *((void *)v9 + 2);
    unint64_t v24 = *((void *)v9 + 3);
    unint64_t v26 = v25 + 1;
    uint64_t v8 = v87;
    if (v25 >= v24 >> 1)
    {
      uint64_t result = (uint64_t)sub_10019C464((char *)(v24 > 1), v25 + 1, 1, v9);
      uint64_t v8 = v87;
      objc_super v9 = (char *)result;
    }
    *((void *)v9 + 2) = v26;
    uint64_t v27 = v9 + 32;
    uint64_t v28 = &v9[16 * v25 + 32];
    *(void *)uint64_t v28 = v10;
    *((void *)v28 + 1) = v7;
    if (v25) {
      break;
    }
    unint64_t v26 = 1;
LABEL_81:
    uint64_t v5 = v85;
    Swift::Int v3 = v86;
    if (v7 >= v86) {
      goto LABEL_90;
    }
  }
  while (1)
  {
    unint64_t v29 = v26 - 1;
    if (v26 >= 4)
    {
      uint64_t v34 = &v27[2 * v26];
      uint64_t v35 = *(v34 - 8);
      uint64_t v36 = *(v34 - 7);
      BOOL v40 = __OFSUB__(v36, v35);
      uint64_t v37 = v36 - v35;
      if (v40) {
        goto LABEL_107;
      }
      uint64_t v39 = *(v34 - 6);
      uint64_t v38 = *(v34 - 5);
      BOOL v40 = __OFSUB__(v38, v39);
      uint64_t v32 = v38 - v39;
      char v33 = v40;
      if (v40) {
        goto LABEL_108;
      }
      unint64_t v41 = v26 - 2;
      uint64_t v42 = &v27[2 * v26 - 4];
      uint64_t v44 = *v42;
      uint64_t v43 = v42[1];
      BOOL v40 = __OFSUB__(v43, v44);
      uint64_t v45 = v43 - v44;
      if (v40) {
        goto LABEL_109;
      }
      BOOL v40 = __OFADD__(v32, v45);
      uint64_t v46 = v32 + v45;
      if (v40) {
        goto LABEL_111;
      }
      if (v46 >= v37)
      {
        uint64_t v64 = &v27[2 * v29];
        uint64_t v66 = *v64;
        uint64_t v65 = v64[1];
        BOOL v40 = __OFSUB__(v65, v66);
        uint64_t v67 = v65 - v66;
        if (v40) {
          goto LABEL_117;
        }
        BOOL v57 = v32 < v67;
        goto LABEL_70;
      }
    }
    else
    {
      if (v26 != 3)
      {
        uint64_t v58 = *((void *)v9 + 4);
        uint64_t v59 = *((void *)v9 + 5);
        BOOL v40 = __OFSUB__(v59, v58);
        uint64_t v51 = v59 - v58;
        char v52 = v40;
        goto LABEL_64;
      }
      uint64_t v31 = *((void *)v9 + 4);
      uint64_t v30 = *((void *)v9 + 5);
      BOOL v40 = __OFSUB__(v30, v31);
      uint64_t v32 = v30 - v31;
      char v33 = v40;
    }
    if (v33) {
      goto LABEL_110;
    }
    unint64_t v41 = v26 - 2;
    uint64_t v47 = &v27[2 * v26 - 4];
    uint64_t v49 = *v47;
    uint64_t v48 = v47[1];
    BOOL v50 = __OFSUB__(v48, v49);
    uint64_t v51 = v48 - v49;
    char v52 = v50;
    if (v50) {
      goto LABEL_112;
    }
    unint64_t v53 = &v27[2 * v29];
    uint64_t v55 = *v53;
    uint64_t v54 = v53[1];
    BOOL v40 = __OFSUB__(v54, v55);
    uint64_t v56 = v54 - v55;
    if (v40) {
      goto LABEL_114;
    }
    if (__OFADD__(v51, v56)) {
      goto LABEL_116;
    }
    if (v51 + v56 >= v32)
    {
      BOOL v57 = v32 < v56;
LABEL_70:
      if (v57) {
        unint64_t v29 = v41;
      }
      goto LABEL_72;
    }
LABEL_64:
    if (v52) {
      goto LABEL_113;
    }
    uint64_t v60 = &v27[2 * v29];
    uint64_t v62 = *v60;
    uint64_t v61 = v60[1];
    BOOL v40 = __OFSUB__(v61, v62);
    uint64_t v63 = v61 - v62;
    if (v40) {
      goto LABEL_115;
    }
    if (v63 < v51) {
      goto LABEL_81;
    }
LABEL_72:
    uint64_t v68 = v9;
    unint64_t v69 = v29 - 1;
    if (v29 - 1 >= v26)
    {
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
      goto LABEL_118;
    }
    if (!v8) {
      goto LABEL_131;
    }
    uint64_t v70 = &v27[2 * v69];
    uint64_t v71 = *v70;
    uint64_t v72 = v27;
    unint64_t v73 = &v27[2 * v29];
    uint64_t v74 = v73[1];
    uint64_t result = sub_1001A4D3C((char *)(v8 + 8 * *v70), (char *)(v8 + 8 * *v73), v8 + 8 * v74, v88);
    if (v1) {
      break;
    }
    if (v74 < v71) {
      goto LABEL_104;
    }
    if (v29 > *((void *)v68 + 2)) {
      goto LABEL_105;
    }
    *uint64_t v70 = v71;
    v72[2 * v69 + 1] = v74;
    unint64_t v75 = *((void *)v68 + 2);
    if (v29 >= v75) {
      goto LABEL_106;
    }
    objc_super v9 = v68;
    unint64_t v26 = v75 - 1;
    uint64_t result = (uint64_t)memmove(v73, v73 + 2, 16 * (v75 - 1 - v29));
    uint64_t v27 = v72;
    *((void *)v68 + 2) = v75 - 1;
    uint64_t v8 = v87;
    if (v75 <= 2) {
      goto LABEL_81;
    }
  }
LABEL_86:
  uint64_t result = swift_bridgeObjectRelease();
  if (v86 < -1) {
    goto LABEL_125;
  }
  *(void *)(v84 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001A4CE4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = *a4;
    uint64_t v5 = *a4 + 8 * a3 - 8;
    while (2)
    {
      uint64_t v6 = *(void *)(v4 + 8 * a3);
      uint64_t v7 = result;
      uint64_t v8 = (uint64_t *)v5;
      do
      {
        uint64_t v9 = *v8;
        if (v6 >= *v8) {
          break;
        }
        if (!v4)
        {
          __break(1u);
          return result;
        }
        *uint64_t v8 = v6;
        v8[1] = v9;
        --v8;
        ++v7;
      }
      while (a3 != v7);
      ++a3;
      v5 += 8;
      if (a3 != a2) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t sub_1001A4D3C(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 8;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 8;
  if (v9 >= v11)
  {
    sub_1001B8090(a2, (uint64_t)(a3 - (void)a2) / 8, a4);
    uint64_t v12 = &v4[8 * v11];
    if (v7 >= v6 || v10 < 8) {
      goto LABEL_39;
    }
    Swift::Int v18 = (char *)(a3 - 8);
    while (1)
    {
      uint64_t v19 = v18 + 8;
      uint64_t v20 = *((void *)v6 - 1);
      if (*((void *)v12 - 1) >= v20)
      {
        BOOL v22 = v19 != v12 || v18 >= v12;
        uint64_t v20 = *((void *)v12 - 1);
        v12 -= 8;
        if (!v22) {
          goto LABEL_35;
        }
      }
      else
      {
        BOOL v21 = v19 != v6 || v18 >= v6;
        v6 -= 8;
        if (!v21) {
          goto LABEL_35;
        }
      }
      *(void *)Swift::Int v18 = v20;
LABEL_35:
      v18 -= 8;
      if (v6 <= v7 || v12 <= v4) {
        goto LABEL_39;
      }
    }
  }
  sub_1001B8090(a1, (a2 - a1) / 8, a4);
  uint64_t v12 = &v4[8 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 8)
  {
    while (1)
    {
      uint64_t v14 = *(void *)v6;
      if (*(void *)v6 < *(void *)v4) {
        break;
      }
      uint64_t v14 = *(void *)v4;
      BOOL v15 = v7 == v4;
      v4 += 8;
      if (!v15) {
        goto LABEL_11;
      }
LABEL_12:
      v7 += 8;
      if (v4 >= v12 || (unint64_t)v6 >= a3) {
        goto LABEL_17;
      }
    }
    BOOL v15 = v7 == v6;
    v6 += 8;
    if (v15) {
      goto LABEL_12;
    }
LABEL_11:
    *(void *)uint64_t v7 = v14;
    goto LABEL_12;
  }
LABEL_17:
  uint64_t v6 = v7;
LABEL_39:
  sub_1001B8090(v4, (v12 - v4) / 8, v6);
  return 1;
}

uint64_t sub_1001A4EB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = a3;
    uint64_t v5 = a2;
    uint64_t v6 = a1;
    if (!(*v4 >> 62))
    {
      uint64_t v8 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_4:
  if (v8 < v5)
  {
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v9 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v7 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (!(*v4 >> 62))
  {
    uint64_t v10 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_9;
  }
LABEL_32:
  swift_bridgeObjectRetain();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_9:
  uint64_t v11 = v10 + v7;
  if (__OFADD__(v10, v7))
  {
    __break(1u);
    goto LABEL_34;
  }
  unint64_t v12 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v4 = v12;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v12 & 0x8000000000000000) != 0
    || (v12 & 0x4000000000000000) != 0
    || (uint64_t v14 = v12 & 0xFFFFFFFFFFFFFF8, v11 > *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v12 >> 62))
    {
LABEL_15:
      swift_bridgeObjectRetain();
      unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      *uint64_t v4 = v12;
      uint64_t v14 = v12 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_16;
    }
LABEL_34:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
LABEL_16:
  BOOL v15 = (void *)(v14 + 32 + 8 * v6);
  type metadata accessor for NWProtocolOptions();
  swift_arrayDestroy();
  if (!v7) {
    goto LABEL_24;
  }
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v16 = *(void *)(v14 + 16);
  }
  if (__OFSUB__(v16, v5))
  {
    __break(1u);
    goto LABEL_37;
  }
  uint64_t result = sub_1001B7ED4(v14 + 32 + 8 * v5, v16 - v5, v15 + 1);
  if (v12 >> 62)
  {
LABEL_37:
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  uint64_t v18 = *(void *)(v14 + 16);
LABEL_22:
  if (__OFADD__(v18, v7))
  {
    __break(1u);
    return result;
  }
  *(void *)(v14 + 16) = v18 + v7;
LABEL_24:
  *BOOL v15 = v3;

  return specialized Array._endMutation()();
}

void sub_1001A5128(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v9 <= *(void *)(v4 + 24) >> 1)
  {
    if (!v8) {
      goto LABEL_17;
    }
  }
  else
  {
    if (v5 <= v9) {
      uint64_t v11 = v5 + v8;
    }
    else {
      uint64_t v11 = v5;
    }
    sub_1001B7754(isUniquelyReferenced_nonNull_native, v11, 1, v4);
    uint64_t v4 = v12;
    if (!v8) {
      goto LABEL_17;
    }
  }
  uint64_t v13 = *(void *)(v4 + 16);
  if (__OFSUB__(v13, a2)) {
    goto LABEL_23;
  }
  sub_1001B8090((char *)(v4 + 32 + 8 * a2), v13 - a2, (char *)(v4 + 32 + 8 * a1));
  uint64_t v14 = *(void *)(v4 + 16);
  BOOL v15 = __OFADD__(v14, v8);
  uint64_t v16 = v14 + v8;
  if (!v15)
  {
    *(void *)(v4 + 16) = v16;
LABEL_17:
    uint64_t *v2 = v4;
    return;
  }
LABEL_24:
  __break(1u);
}

uint64_t type metadata accessor for MetricsIntBucketer()
{
  return self;
}

void sub_1001A523C(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *(void *)(v4 + 24) >> 1)
  {
    if (v5 <= v9) {
      uint64_t v11 = v5 + v8;
    }
    else {
      uint64_t v11 = v5;
    }
    uint64_t v4 = sub_1001B7788(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t v12 = *(void *)(type metadata accessor for MultiplayerActivityEventFilter.TrackedSession(0) - 8);
  unint64_t v13 = v4 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  uint64_t v14 = *(void *)(v12 + 72);
  unint64_t v15 = v13 + v14 * a1;
  swift_arrayDestroy();
  if (!v7) {
    goto LABEL_16;
  }
  uint64_t v16 = *(void *)(v4 + 16);
  if (__OFSUB__(v16, a2)) {
    goto LABEL_22;
  }
  sub_1001B8180(v13 + v14 * a2, v16 - a2, v15);
  uint64_t v17 = *(void *)(v4 + 16);
  BOOL v18 = __OFADD__(v17, v8);
  uint64_t v19 = v17 - v7;
  if (!v18)
  {
    *(void *)(v4 + 16) = v19;
LABEL_16:
    uint64_t *v2 = v4;
    return;
  }
LABEL_23:
  __break(1u);
}

uint64_t sub_1001A5390()
{
  Swift::Int v2 = v0;
  uint64_t v3 = type metadata accessor for Logger();
  sub_100011108();
  uint64_t v5 = v4;
  uint64_t v8 = __chkstk_darwin(v6, v7);
  uint64_t v10 = (char *)v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v11);
  static os_log_type_t.info.getter();
  sub_1001A9EAC();
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  uint64_t v37 = 0xD00000000000001ELL;
  unint64_t v38 = 0x80000001002B1FC0;
  v12._uint64_t countAndFlagsBits = sub_1001A6204();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  uint64_t v14 = v37;
  unint64_t v13 = v38;
  static GKLog.match.getter();
  swift_bridgeObjectRetain_n();
  unint64_t v15 = Logger.logObject.getter();
  BOOL v16 = os_log_type_enabled(v15, v1);
  uint64_t v17 = &off_10024F000;
  uint64_t v36 = v10;
  if (v16)
  {
    uint64_t v34 = v5;
    BOOL v18 = (_DWORD *)sub_100016FF0();
    uint64_t v19 = sub_100011BBC();
    uint64_t v35 = v3;
    uint64_t v37 = v19;
    *BOOL v18 = 136315138;
    LOBYTE(v17) = (_BYTE)v18 + 12;
    swift_bridgeObjectRetain();
    uint64_t v20 = sub_100174CE4(v14, v13, &v37);
    sub_100018448(v20);
    uint64_t v5 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    sub_1001A9E8C((void *)&_mh_execute_header, v21, v22, "Nearby - %s");
    swift_arrayDestroy();
    uint64_t v3 = v35;
    sub_100010D7C();
    sub_100010D7C();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v23 = *(void (**)(void))(v5 + 8);
  sub_100010F20();
  v23();
  swift_bridgeObjectRelease();
  if (v2[15])
  {
    swift_retain();
    Task.cancel()();
    swift_release();
  }
  if (v2[4])
  {
    v33[1] = v23;
    swift_retain();
    static os_log_type_t.info.getter();
    sub_1001A9EAC();
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    uint64_t v37 = 0xD000000000000016;
    unint64_t v38 = 0x80000001002B1FE0;
    v24._uint64_t countAndFlagsBits = NWConnection.debugDescription.getter();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    uint64_t v26 = v37;
    unint64_t v25 = v38;
    static GKLog.match.getter();
    swift_bridgeObjectRetain_n();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = v17;
    if (os_log_type_enabled(v27, (os_log_type_t)v17))
    {
      uint64_t v34 = v5;
      unint64_t v29 = (uint8_t *)sub_100016FF0();
      uint64_t v37 = sub_100011BBC();
      uint64_t v35 = v3;
      *(_DWORD *)unint64_t v29 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v30 = sub_100174CE4(v26, v25, &v37);
      sub_100018448(v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Nearby - %s", v29, 0xCu);
      swift_arrayDestroy();
      sub_100010D7C();
      sub_100010D7C();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    sub_100010F20();
    v31();
    swift_bridgeObjectRelease();
    NWConnection.forceCancel()();
    swift_release();
  }
  v2[4] = 0;
  swift_release();
  v2[3] = 0;
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_1001A57B0()
{
  sub_100010DA4();
  v1[10] = v2;
  v1[11] = v0;
  uint8_t v1[8] = v3;
  v1[9] = v4;
  v1[6] = v5;
  v1[7] = v6;
  uint64_t v7 = type metadata accessor for Logger();
  v1[12] = v7;
  sub_1000111CC(v7);
  v1[13] = v8;
  v1[14] = swift_task_alloc();
  sub_100017040();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_1001A584C()
{
  sub_100010F2C();
  uint64_t v1 = *(void *)(*(void *)(v0 + 88) + 32);
  *(void *)(v0 + 120) = v1;
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 64);
    long long v13 = *(_OWORD *)(v0 + 48);
    uint64_t v3 = swift_task_alloc();
    *(void *)(v0 + 128) = v3;
    *(void *)(v3 + 16) = v1;
    *(_OWORD *)(v3 + 24) = v13;
    *(void *)(v3 + 40) = v2;
    swift_retain();
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1001A59A0;
    sub_100017040();
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v5, v6, v7, 0xD000000000000023, v8, v9, v3, v10);
  }
  else
  {
    swift_task_dealloc();
    sub_1000112AC();
    return v11();
  }
}

uint64_t sub_1001A59A0()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_100010D94();
  *uint64_t v5 = v4;
  *(void *)(v3 + 144) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  sub_100017040();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_1001A5A88()
{
  sub_100010DA4();
  swift_release();
  swift_task_dealloc();
  sub_1000112AC();
  return v0();
}

uint64_t sub_1001A5AE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26)
{
  sub_1000184F4();
  a25 = v27;
  a26 = v28;
  sub_1001871B4();
  a24 = v26;
  uint64_t v29 = v26[18];
  uint64_t v30 = (void *)v26[10];
  uint64_t v31 = v26[9];
  swift_task_dealloc();
  os_log_type_t v32 = static os_log_type_t.error.getter();
  sub_100011330();
  _StringGuts.grow(_:)(47);
  uint64_t v33 = a15;
  v26[2] = a14;
  v26[3] = v33;
  sub_100010A64();
  v34._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v34);
  v35._uint64_t countAndFlagsBits = sub_1001A6204();
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  v36._uint64_t countAndFlagsBits = 673197344;
  v36._object = (void *)0xE400000000000000;
  String.append(_:)(v36);
  v37._uint64_t countAndFlagsBits = v31;
  v37._object = v30;
  String.append(_:)(v37);
  sub_100010A64();
  String.append(_:)(v38);
  void v26[4] = v29;
  sub_10000D938(&qword_100326538);
  _print_unlocked<A, B>(_:_:)();
  uint64_t v39 = v26[2];
  unint64_t v40 = v26[3];
  static GKLog.match.getter();
  swift_bridgeObjectRetain_n();
  unint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = v32;
  if (os_log_type_enabled(v41, v32))
  {
    a12 = v26[15];
    a13 = v26[18];
    uint64_t v43 = v26[13];
    a10 = v26[12];
    a11 = v26[14];
    uint64_t v44 = (uint8_t *)sub_100016FF0();
    a14 = sub_100011BBC();
    *(_DWORD *)uint64_t v44 = 136315138;
    swift_bridgeObjectRetain();
    v26[5] = sub_100174CE4(v39, v40, &a14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Nearby - %s", v44, 0xCu);
    swift_arrayDestroy();
    sub_100010D7C();
    sub_100010D7C();

    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(a11, a10);
  }
  else
  {
    uint64_t v45 = v26[14];
    uint64_t v46 = v26[12];
    uint64_t v47 = v26[13];
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v45, v46);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  swift_task_dealloc();
  sub_1000112AC();
  sub_100011220();
  return v49(v48, v49, v50, v51, v52, v53, v54, v55, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

uint64_t sub_1001A5DB0()
{
  sub_100010DA4();
  void v1[4] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[5] = v2;
  sub_1000111CC(v2);
  v1[6] = v3;
  v1[7] = swift_task_alloc();
  uint8_t v1[8] = swift_task_alloc();
  sub_100017040();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_1001A5E54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26)
{
  sub_1000184F4();
  a25 = v27;
  a26 = v28;
  sub_1001871B4();
  a24 = v26;
  if (*(void *)(v26[4] + 32))
  {
    swift_allocObject();
    swift_weakInit();
    swift_retain();
    swift_retain();
    NWConnection.stateUpdateHandler.setter();
    swift_release();
    os_log_type_t v29 = static os_log_type_t.info.getter();
    sub_100011330();
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    v30._uint64_t countAndFlagsBits = sub_100018110();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    unint64_t v31 = a15;
    a13 = a14;
    static GKLog.match.getter();
    swift_bridgeObjectRetain_n();
    os_log_type_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = v29;
    BOOL v34 = os_log_type_enabled(v32, v29);
    uint64_t v35 = v26[8];
    if (v34)
    {
      a12 = v26[5];
      Swift::String v36 = (uint8_t *)sub_100016FF0();
      a10 = sub_100011BBC();
      a14 = a10;
      a11 = v35;
      *(_DWORD *)Swift::String v36 = 136315138;
      a9 = v36 + 4;
      swift_bridgeObjectRetain();
      v26[3] = sub_100174CE4(a13, v31, &a14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Nearby - %s", v36, 0xCu);
      swift_arrayDestroy();
      sub_100010D7C();
      sub_100010D7C();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    sub_10018757C();
    v44();
    swift_bridgeObjectRelease();
    sub_1001649A0();
    uint64_t v45 = (void *)static OS_dispatch_queue.main.getter();
    NWConnection.start(queue:)();

    swift_release();
  }
  else
  {
    os_log_type_t v37 = static os_log_type_t.info.getter();
    static GKLog.match.getter();
    Swift::String v38 = Logger.logObject.getter();
    BOOL v39 = os_log_type_enabled(v38, v37);
    uint64_t v40 = v26[6];
    uint64_t v41 = v26[7];
    uint64_t v42 = v26[5];
    if (v39)
    {
      a12 = v26[7];
      a13 = v26[5];
      uint64_t v43 = (uint8_t *)sub_100016FF0();
      a14 = sub_100011BBC();
      *(_DWORD *)uint64_t v43 = 136315138;
      v26[2] = sub_100174CE4(0xD00000000000002ELL, 0x80000001002B1DA0, &a14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v38, v37, "Nearby - %s", v43, 0xCu);
      swift_arrayDestroy();
      sub_100010D7C();
      sub_100010D7C();

      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(a12, v42);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v41, v42);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000112AC();
  sub_100011220();
  return v47(v46, v47, v48, v49, v50, v51, v52, v53, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

unint64_t sub_1001A6204()
{
  uint64_t v1 = 7104878;
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 32))
  {
    swift_retain();
    NWConnection.debugDescription.getter();
    swift_release();
    uint64_t v2 = String.init<A>(reflecting:)();
    unint64_t v4 = v3;
  }
  else
  {
    unint64_t v4 = 0xE300000000000000;
    uint64_t v2 = 7104878;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 0x6167656C6564202CLL;
  v6._object = (void *)0xEC000000203A6574;
  String.append(_:)(v6);
  if (swift_unknownObjectWeakLoadStrong())
  {
    sub_10000D938(&qword_100327770);
    uint64_t v1 = String.init<A>(reflecting:)();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v8 = (void *)0xE300000000000000;
  }
  v9._uint64_t countAndFlagsBits = v1;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  return 0xD00000000000001DLL;
}

uint64_t sub_1001A6358(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(v2 + 32) = *(void *)a1;
  *(void *)(v2 + 40) = v3;
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 16);
  *(void *)(v2 + 64) = *(void *)(a1 + 32);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 56);
  *(void *)(v2 + 104) = *(void *)(a1 + 72);
  sub_100017040();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_1001A63AC()
{
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v1 = *(void *)(v0 + 104);
  long long v4 = *(_OWORD *)(v0 + 64);
  long long v3 = *(_OWORD *)(v0 + 80);
  long long v5 = *(_OWORD *)(v0 + 48);
  uint64_t v7 = *(void *)(v0 + 16);
  uint64_t v6 = *(void *)(v0 + 24);
  uint64_t v8 = *(void *)(v6 + 40);
  uint64_t v9 = *(void *)(v6 + 48);
  *(_OWORD *)(v6 + 40) = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v6 + 56) = v5;
  *(_OWORD *)(v6 + 72) = v4;
  *(_OWORD *)(v6 + 88) = v3;
  *(void *)(v6 + 104) = v2;
  *(void *)(v6 + 112) = v1;
  sub_1001869EC(v8, v9);
  sub_1001A993C(v7);
  sub_1000112AC();
  return v10();
}

uint64_t sub_1001A6448(uint64_t a1)
{
  v2[9] = a1;
  v2[10] = v1;
  uint64_t v3 = type metadata accessor for NWError();
  v2[11] = v3;
  v2[12] = *(void *)(v3 - 8);
  v2[13] = swift_task_alloc();
  sub_10000D938(&qword_100326298);
  v2[14] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[15] = v4;
  v2[16] = *(void *)(v4 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for NWConnection.State();
  v2[20] = v5;
  v2[21] = *(void *)(v5 - 8);
  v2[22] = swift_task_alloc();
  return _swift_task_switch(sub_1001A660C, 0, 0);
}

uint64_t sub_1001A660C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26)
{
  sub_1000184F4();
  a25 = v27;
  a26 = v28;
  sub_1001871B4();
  a24 = v26;
  uint64_t v29 = *(void *)(v26[10] + 32);
  v26[23] = v29;
  if (!v29) {
    goto LABEL_30;
  }
  uint64_t v31 = v26[21];
  uint64_t v30 = v26[22];
  uint64_t v32 = v26[20];
  (*(void (**)(uint64_t, void, uint64_t))(v31 + 16))(v30, v26[9], v32);
  int v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 88))(v30, v32);
  if (v33 == enum case for NWConnection.State.failed(_:))
  {
    a12 = v26 + 8;
    uint64_t v34 = v26[22];
    uint64_t v35 = v26[12];
    uint64_t v36 = v26[13];
    uint64_t v37 = v26[11];
    (*(void (**)(uint64_t, void))(v26[21] + 96))(v34, v26[20]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 32))(v36, v34, v37);
    swift_retain();
    os_log_type_t v38 = static os_log_type_t.debug.getter();
    sub_100011330();
    _StringGuts.grow(_:)(130);
    uint64_t v39 = a15;
    void v26[4] = a14;
    v26[5] = v39;
    sub_100010A64();
    String.append(_:)(v40);
    _print_unlocked<A, B>(_:_:)();
    uint64_t v42 = v26[4];
    unint64_t v41 = v26[5];
    static GKLog.match.getter();
    swift_bridgeObjectRetain_n();
    uint64_t v43 = Logger.logObject.getter();
    BOOL v44 = os_log_type_enabled(v43, v38);
    uint64_t v45 = (void *)v26[15];
    if (v44)
    {
      a9 = (void *)v42;
      a11 = v26[18];
      uint64_t v46 = (uint8_t *)sub_100016FF0();
      a10 = v45;
      a13 = v29;
      a14 = sub_100011BBC();
      *(_DWORD *)uint64_t v46 = 136315138;
      swift_bridgeObjectRetain();
      v26[7] = sub_100174CE4(v42, v41, &a14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v43, v38, "Nearby - %s", v46, 0xCu);
      swift_arrayDestroy();
      sub_100010D7C();
      sub_100010D7C();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    sub_10018757C();
    v54();
    swift_bridgeObjectRelease();
    NWConnection.cancel()();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    v26[26] = Strong;
    if (Strong)
    {
      uint64_t v56 = (void *)swift_task_alloc();
      v26[27] = v56;
      *uint64_t v56 = v26;
      v56[1] = sub_1001A6FF0;
      sub_100011220();
      return sub_1001827C0();
    }
    swift_release();
    uint64_t v63 = v26[12];
    uint64_t v62 = v26[13];
    uint64_t v64 = v26[11];
    goto LABEL_29;
  }
  if (v33 == enum case for NWConnection.State.ready(_:))
  {
    swift_retain();
    os_log_type_t v47 = static os_log_type_t.info.getter();
    static GKLog.match.getter();
    uint64_t v48 = Logger.logObject.getter();
    BOOL v49 = os_log_type_enabled(v48, v47);
    uint64_t v50 = v26[19];
    uint64_t v51 = v26[15];
    uint64_t v52 = v26[16];
    if (v49)
    {
      a12 = (void *)v26[19];
      uint64_t v53 = (uint8_t *)sub_100016FF0();
      a13 = v29;
      a14 = sub_100011BBC();
      a11 = v51;
      *(_DWORD *)uint64_t v53 = 136315138;
      v26[8] = sub_100174CE4(0xD000000000000017, 0x80000001002B1EC0, &a14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v48, v47, "Nearby - %s", v53, 0xCu);
      swift_arrayDestroy();
      sub_100010D7C();
      sub_100010D7C();

      (*(void (**)(void *, uint64_t))(v52 + 8))(a12, v51);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v50, v51);
    }
    uint64_t v65 = v26[14];
    uint64_t v66 = v26[10];
    uint64_t v67 = type metadata accessor for TaskPriority();
    sub_10000D97C(v65, 1, 1, v67);
    uint64_t v68 = (void *)swift_allocObject();
    v68[2] = 0;
    v68[3] = 0;
    v68[4] = v66;
    swift_retain();
    *(void *)(v66 + 120) = sub_100006CBC();
    swift_release();
    uint64_t v69 = swift_unknownObjectWeakLoadStrong();
    v26[24] = v69;
    if (v69)
    {
      uint64_t v70 = (void *)swift_task_alloc();
      v26[25] = v70;
      *uint64_t v70 = v26;
      v70[1] = sub_1001A6E78;
      sub_100011220();
      return sub_1001812C8();
    }
    swift_release();
LABEL_30:
    sub_1001A9E6C();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000112AC();
    sub_100011220();
    return v86(v85, v86, v87, v88, v89, v90, v91, v92, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  }
  if (v33 != enum case for NWConnection.State.cancelled(_:))
  {
    swift_retain();
    os_log_type_t v72 = static os_log_type_t.info.getter();
    sub_100011330();
    _StringGuts.grow(_:)(38);
    uint64_t v73 = a15;
    v26[2] = a14;
    v26[3] = v73;
    v74._uint64_t countAndFlagsBits = sub_100017F98();
    String.append(_:)(v74);
    sub_100018388();
    _print_unlocked<A, B>(_:_:)();
    v75._uint64_t countAndFlagsBits = sub_100017F98();
    String.append(_:)(v75);
    v76._uint64_t countAndFlagsBits = NWConnection.debugDescription.getter();
    String.append(_:)(v76);
    swift_bridgeObjectRelease();
    uint64_t v78 = v26[2];
    unint64_t v77 = v26[3];
    static GKLog.match.getter();
    swift_bridgeObjectRetain_n();
    uint64_t v79 = Logger.logObject.getter();
    os_log_type_t v80 = v72;
    BOOL v81 = os_log_type_enabled(v79, v72);
    uint64_t v82 = v26[17];
    if (v81)
    {
      a9 = v26 + 6;
      a10 = v26 + 7;
      a13 = v29;
      a12 = (void *)v26[15];
      uint64_t v83 = (uint8_t *)sub_100016FF0();
      a11 = v82;
      a14 = sub_100011BBC();
      *(_DWORD *)uint64_t v83 = 136315138;
      swift_bridgeObjectRetain();
      v26[6] = sub_100174CE4(v78, v77, &a14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v79, v80, "Nearby - %s", v83, 0xCu);
      swift_arrayDestroy();
      sub_100010D7C();
      sub_100010D7C();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    sub_10018757C();
    v84();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v63 = v26[21];
    uint64_t v62 = v26[22];
    uint64_t v64 = v26[20];
LABEL_29:
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v62, v64);
    goto LABEL_30;
  }
  uint64_t v59 = swift_unknownObjectWeakLoadStrong();
  v26[28] = v59;
  if (!v59) {
    goto LABEL_30;
  }
  swift_retain();
  uint64_t v60 = (void *)swift_task_alloc();
  v26[29] = v60;
  *uint64_t v60 = v26;
  v60[1] = sub_1001A717C;
  sub_100011220();
  return sub_1001810C0();
}

uint64_t sub_1001A6E78()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  swift_task_dealloc();
  swift_unknownObjectRelease();
  sub_100017040();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1001A6F5C()
{
  sub_100010F2C();
  swift_release();
  sub_1001A9E6C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000112AC();
  return v0();
}

uint64_t sub_1001A6FF0()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  swift_task_dealloc();
  swift_unknownObjectRelease();
  sub_100017040();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1001A70D4()
{
  sub_100010F2C();
  swift_release();
  sub_100010F20();
  v0();
  sub_1001A9E6C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000112AC();
  return v1();
}

uint64_t sub_1001A717C()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  swift_task_dealloc();
  swift_unknownObjectRelease();
  sub_100017040();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1001A7260()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100171E3C;
  return sub_1001A72F0();
}

uint64_t sub_1001A72F0()
{
  v1[15] = v0;
  uint64_t v2 = sub_10000D938(&qword_1003277C8);
  uint8_t v1[16] = v2;
  v1[17] = *(void *)(v2 - 8);
  v1[18] = swift_task_alloc();
  uint64_t v3 = sub_10000D938(&qword_1003277D0);
  v1[19] = v3;
  v1[20] = *(void *)(v3 - 8);
  v1[21] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v1[22] = v4;
  v1[23] = *(void *)(v4 - 8);
  uint8_t v1[24] = swift_task_alloc();
  v1[25] = swift_task_alloc();
  return _swift_task_switch(sub_1001A7480, 0, 0);
}

uint64_t sub_1001A7480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26)
{
  sub_1000184F4();
  a25 = v27;
  a26 = v28;
  sub_1001871B4();
  a24 = v26;
  uint64_t v29 = *(void *)(v26[15] + 32);
  v26[26] = v29;
  if (v29)
  {
    swift_retain();
    os_log_type_t v30 = static os_log_type_t.info.getter();
    sub_100011330();
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    v31._uint64_t countAndFlagsBits = sub_100018110();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    uint64_t v33 = a14;
    unint64_t v32 = a15;
    static GKLog.match.getter();
    swift_bridgeObjectRetain_n();
    uint64_t v34 = Logger.logObject.getter();
    BOOL v35 = os_log_type_enabled(v34, v30);
    uint64_t v36 = v26[25];
    uint64_t v38 = v26[22];
    uint64_t v37 = v26[23];
    if (v35)
    {
      a10 = v26 + 14;
      a13 = v26[22];
      uint64_t v39 = (uint8_t *)sub_100016FF0();
      a11 = sub_100011BBC();
      a12 = v36;
      a14 = a11;
      *(_DWORD *)uint64_t v39 = 136315138;
      a9 = v39 + 4;
      swift_bridgeObjectRetain();
      v26[14] = sub_100174CE4(v33, v32, &a14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v34, v30, "Nearby - %s", v39, 0xCu);
      swift_arrayDestroy();
      sub_100010D7C();
      sub_100010D7C();

      uint64_t v42 = *(void (**)(void, void))(v37 + 8);
      uint64_t v40 = v37 + 8;
      unint64_t v41 = v42;
      v42(v36, a13);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      uint64_t v52 = *(void (**)(void, void))(v37 + 8);
      uint64_t v40 = v37 + 8;
      unint64_t v41 = v52;
      v52(v36, v38);
    }
    swift_bridgeObjectRelease();
    v26[27] = v40;
    v26[28] = v41;
    uint64_t v54 = v26[17];
    uint64_t v53 = v26[18];
    uint64_t v55 = v26[16];
    sub_1001A875C();
    AsyncStream.makeAsyncIterator()();
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v55);
    v26[29] = v41;
    uint64_t v56 = (void *)swift_task_alloc();
    v26[30] = v56;
    *uint64_t v56 = v26;
    v56[1] = sub_1001A777C;
    sub_100017040();
    sub_100011220();
    return AsyncStream.Iterator.next(isolation:)(v57, v58, v59, v60, v61, v62, v63, v64, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000112AC();
    sub_100011220();
    return v44(v43, v44, v45, v46, v47, v48, v49, v50, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  }
}

uint64_t sub_1001A777C()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  swift_task_dealloc();
  sub_100017040();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1001A7844(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_log_t log, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26)
{
  sub_1000184F4();
  a25 = v27;
  a26 = v28;
  sub_1001871B4();
  a24 = v26;
  uint64_t v29 = v26[3];
  v26[31] = v26[2];
  v26[32] = v29;
  uint64_t v30 = v26[4];
  uint64_t v31 = v26[5];
  v26[33] = v30;
  v26[34] = v31;
  if (v30 == 1)
  {
    sub_100010F20();
    v32();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000112AC();
    sub_100011220();
    return v34(v33, v34, v35, v36, v37, v38, v39, v40, a9, a10, log, a12, a13, a14, a15, a16, a17, a18);
  }
  else
  {
    if (v31)
    {
      swift_errorRetain();
      os_log_type_t v60 = static os_log_type_t.error.getter();
      v26[11] = 0;
      v26[12] = 0xE000000000000000;
      _StringGuts.grow(_:)(53);
      uint64_t v42 = v26[12];
      v26[9] = v26[11];
      v26[10] = v42;
      sub_100010A64();
      v43._uint64_t countAndFlagsBits = 0xD000000000000033;
      String.append(_:)(v43);
      swift_getErrorValue();
      v44._uint64_t countAndFlagsBits = Error.localizedDescription.getter();
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      unint64_t v45 = v26[10];
      uint64_t v58 = v26[9];
      static GKLog.match.getter();
      swift_bridgeObjectRetain_n();
      uint64_t v46 = Logger.logObject.getter();
      os_log_type_t v47 = v60;
      BOOL v48 = os_log_type_enabled(v46, v60);
      uint64_t v59 = v26[22];
      uint64_t v61 = v26[24];
      if (v48)
      {
        uint64_t v49 = v26 + 28;
        uint64_t v57 = (void (*)(uint64_t, uint64_t))v26[28];
        uint64_t v50 = sub_100016FF0();
        a15 = sub_100011BBC();
        *(_DWORD *)uint64_t v50 = 136315138;
        swift_bridgeObjectRetain();
        *(void *)(v50 + 4) = sub_100174CE4(v58, v45, &a15);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "Nearby - %s", (uint8_t *)v50, 0xCu);
        swift_arrayDestroy();
        sub_100010D7C();
        sub_100010D7C();

        v57(v61, v59);
      }
      else
      {
        uint64_t v49 = v26 + 29;
        uint64_t v51 = (void (*)(uint64_t, uint64_t))v26[29];
        swift_bridgeObjectRelease_n();

        v51(v61, v59);
      }
      swift_bridgeObjectRelease();
      swift_errorRelease();
    }
    else
    {
      uint64_t v49 = v26 + 29;
    }
    v26[35] = *v49;
    uint64_t v52 = (void *)swift_task_alloc();
    v26[36] = v52;
    void *v52 = v26;
    v52[1] = sub_1001A7B54;
    sub_100018388();
    sub_100011220();
    return sub_1001A7F44(v53, v54, v55);
  }
}

uint64_t sub_1001A7B54()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  swift_task_dealloc();
  sub_100017040();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1001A7C1C()
{
  sub_100010DA4();
  sub_1001A98EC(v0[31], v0[32], v0[33]);
  v0[29] = v0[35];
  uint64_t v1 = (void *)swift_task_alloc();
  v0[30] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001A777C;
  sub_100017040();
  return AsyncStream.Iterator.next(isolation:)();
}

uint64_t sub_1001A7CD4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NWConnection.State();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2, v5);
  uint64_t v6 = sub_10000D938(&qword_100326298);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v11 = result;
    uint64_t v12 = type metadata accessor for TaskPriority();
    sub_10000D97C((uint64_t)v9, 1, 1, v12);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
    unint64_t v13 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    uint64_t v14 = (char *)swift_allocObject();
    *((void *)v14 + 2) = 0;
    *((void *)v14 + 3) = 0;
    *((void *)v14 + 4) = v11;
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(&v14[v13], (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
    sub_100006CBC();
    return swift_release();
  }
  return result;
}

uint64_t sub_1001A7EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_100171E3C;
  return sub_1001A6448(a5);
}

uint64_t sub_1001A7F44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[11] = a3;
  v4[12] = v3;
  v4[9] = a1;
  v4[10] = a2;
  uint64_t v5 = type metadata accessor for Logger();
  v4[13] = v5;
  v4[14] = *(void *)(v5 - 8);
  v4[15] = swift_task_alloc();
  v4[16] = swift_task_alloc();
  return _swift_task_switch(sub_1001A8018, 0, 0);
}

uint64_t sub_1001A8018()
{
  uint64_t v22 = v0;
  uint64_t v1 = v0[12];
  os_log_type_t v2 = static os_log_type_t.info.getter();
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  uint64_t v20 = 0xD000000000000018;
  unint64_t v21 = 0x80000001002B1F40;
  v0[5] = *(void *)(v1 + 32);
  sub_10000D938(&qword_1003277E0);
  v3._uint64_t countAndFlagsBits = Optional.debugDescription.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  uint64_t v5 = v20;
  unint64_t v4 = v21;
  static GKLog.match.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v6 = Logger.logObject.getter();
  if (os_log_type_enabled(v6, v2))
  {
    uint64_t v7 = v0[14];
    uint64_t v18 = v0[13];
    uint64_t v19 = v0[16];
    uint64_t v8 = (uint8_t *)sub_100016FF0();
    uint64_t v20 = sub_100011BBC();
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_bridgeObjectRetain();
    v0[8] = sub_100174CE4(v5, v4, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v6, v2, "Nearby - %s", v8, 0xCu);
    swift_arrayDestroy();
    sub_100010D7C();
    sub_100010D7C();

    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v9(v19, v18);
  }
  else
  {
    uint64_t v10 = v0[16];
    uint64_t v11 = v0[13];
    uint64_t v12 = v0[14];
    swift_bridgeObjectRelease_n();

    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v9(v10, v11);
  }
  swift_bridgeObjectRelease();
  v0[17] = v9;
  if (v0[11])
  {
    if (qword_100325E98 != -1) {
      swift_once();
    }
    uint64_t v13 = dispatch thunk of NWConnection.ContentContext.protocolMetadata(definition:)();
    v0[18] = v13;
    if (v13)
    {
      type metadata accessor for NWProtocolFramer.Message();
      if (swift_dynamicCastClass())
      {
        uint64_t Strong = swift_unknownObjectWeakLoadStrong();
        v0[19] = Strong;
        if (Strong)
        {
          uint64_t v15 = (void *)swift_task_alloc();
          v0[20] = v15;
          *uint64_t v15 = v0;
          v15[1] = sub_1001A8378;
          return sub_100183324();
        }
      }
      swift_release();
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000112AC();
  return v17();
}

uint64_t sub_1001A8378()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v2 = *v1;
  sub_100010D94();
  void *v3 = v2;
  *(void *)(v4 + 168) = v0;
  swift_task_dealloc();
  sub_100017040();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1001A8458()
{
  sub_100010DA4();
  swift_unknownObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000112AC();
  return v0();
}

uint64_t sub_1001A84C8()
{
  uint64_t v12 = v0;
  os_log_type_t v1 = static os_log_type_t.error.getter();
  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease();
  v11[0] = 0xD00000000000002ALL;
  v11[1] = 0x80000001002B1F60;
  swift_getErrorValue();
  v2._uint64_t countAndFlagsBits = Error.localizedDescription.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  static GKLog.match.getter();
  swift_bridgeObjectRetain_n();
  Swift::String v3 = Logger.logObject.getter();
  if (os_log_type_enabled(v3, v1))
  {
    uint64_t v4 = (_DWORD *)sub_100016FF0();
    v11[0] = sub_100011BBC();
    *uint64_t v4 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 56) = sub_100174CE4(0xD00000000000002ALL, 0x80000001002B1F60, v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    sub_1001A9E8C((void *)&_mh_execute_header, v5, v6, "Nearby - %s");
    swift_arrayDestroy();
    sub_100010D7C();
    sub_100010D7C();

    sub_100010F20();
    v7();
    swift_release();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = *(void (**)(void))(v0 + 136);
    swift_bridgeObjectRelease_n();

    sub_100010F20();
    v8();
    swift_release();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000112AC();
  return v9();
}

uint64_t sub_1001A875C()
{
  sub_10000D938(&qword_1003277F0);
  sub_100011108();
  __chkstk_darwin(v0, v1);
  (*(void (**)(char *, void))(v3 + 104))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:));
  return AsyncStream.init(_:bufferingPolicy:_:)();
}

uint64_t sub_1001A882C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v18[1] = a4;
  _OWORD v18[2] = a5;
  void v18[3] = a2;
  uint64_t v6 = sub_10000D938(&qword_100327780);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6, v9);
  uint64_t v10 = type metadata accessor for NWConnection.SendCompletion();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (uint64_t (**)(uint64_t))((char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  unint64_t v15 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v16 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v16 + v15, (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  *uint64_t v14 = sub_1001A9520;
  v14[1] = (uint64_t (*)(uint64_t))v16;
  (*(void (**)(uint64_t (**)(uint64_t), void, uint64_t))(v11 + 104))(v14, enum case for NWConnection.SendCompletion.contentProcessed(_:), v10);
  NWConnection.send(content:contentContext:isComplete:completion:)();
  return (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(v11 + 8))(v14, v10);
}

uint64_t sub_1001A8A40(uint64_t a1)
{
  uint64_t v2 = sub_10000D938(&qword_100327788);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for NWError();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001A9574(a1, (uint64_t)v5);
  if (sub_10000DB14((uint64_t)v5, 1, v6) == 1)
  {
    sub_1001A95DC((uint64_t)v5);
    sub_10000D938(&qword_100327780);
    return CheckedContinuation.resume(returning:)();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v5, v6);
    sub_100168740();
    uint64_t v12 = swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(v13, v10, v6);
    v14[1] = v12;
    sub_10000D938(&qword_100327780);
    CheckedContinuation.resume(throwing:)();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
}

uint64_t sub_1001A8C10()
{
  sub_10016835C(v0 + 16);
  swift_release();
  sub_1001869EC(*(void *)(v0 + 40), *(void *)(v0 + 48));
  swift_release();
  return v0;
}

uint64_t sub_1001A8C64()
{
  sub_1001A8C10();

  return _swift_deallocClassInstance(v0, 128, 7);
}

uint64_t type metadata accessor for PeerConnection()
{
  return self;
}

unint64_t sub_1001A8CBC()
{
  return sub_1001A6204();
}

uint64_t sub_1001A8CE0(uint64_t a1)
{
  return sub_1001A882C(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1001A8CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D938(&qword_1003277F8);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  *(void *)(v9 + ((v6 + v8 + 7) & 0xFFFFFFFFFFFFFFF8)) = a2;
  swift_retain();
  NWConnection.receiveMessage(completion:)();
  return swift_release();
}

uint64_t sub_1001A8E44(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v54 = a7;
  uint64_t v63 = a6;
  uint64_t v58 = a3;
  uint64_t v59 = a1;
  unint64_t v60 = a2;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v55 = *(void *)(v8 - 8);
  uint64_t v56 = v8;
  __chkstk_darwin(v8, v9);
  uint64_t v57 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_10000D938(&qword_1003277F8);
  uint64_t v53 = *(void *)(v64 - 8);
  uint64_t v11 = *(void *)(v53 + 64);
  __chkstk_darwin(v64, v12);
  uint64_t v52 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for NWError();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  uint64_t v61 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000D938(&qword_100327788);
  uint64_t v19 = __chkstk_darwin(v17 - 8, v18);
  unint64_t v21 = (char *)&v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v22);
  Swift::String v24 = (char *)&v52 - v23;
  uint64_t v25 = sub_10000D938(&qword_100327800);
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin(v25, v27);
  uint64_t v29 = (char *)&v52 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = a5;
  sub_1001A9574(a5, (uint64_t)v24);
  int v31 = sub_10000DB14((uint64_t)v24, 1, v13);
  uint64_t v62 = v14;
  if (v31 == 1)
  {
    sub_1001A95DC((uint64_t)v24);
    uint64_t v32 = 0;
  }
  else
  {
    sub_100168740();
    uint64_t v32 = swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v33, v24, v13);
  }
  uint64_t v35 = v59;
  unint64_t v34 = v60;
  uint64_t v66 = v59;
  unint64_t v67 = v60;
  uint64_t v68 = v58;
  uint64_t v69 = v32;
  swift_retain();
  sub_1001A99B8(v35, v34);
  uint64_t v37 = v63;
  uint64_t v36 = v64;
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v29, v25);
  sub_1001A9574(v30, (uint64_t)v21);
  if (sub_10000DB14((uint64_t)v21, 1, v13) == 1)
  {
    sub_1001A95DC((uint64_t)v21);
    uint64_t v39 = v52;
    uint64_t v38 = v53;
    (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v52, v37, v36);
    unint64_t v40 = (*(unsigned __int8 *)(v38 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
    uint64_t v41 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v38 + 32))(v41 + v40, v39, v36);
    *(void *)(v41 + ((v11 + v40 + 7) & 0xFFFFFFFFFFFFFFF8)) = v54;
    swift_retain();
    NWConnection.receiveMessage(completion:)();
    return swift_release();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v61, v21, v13);
    os_log_type_t v43 = static os_log_type_t.info.getter();
    uint64_t v66 = 0;
    unint64_t v67 = 0xE000000000000000;
    _StringGuts.grow(_:)(42);
    v44._object = (void *)0x80000001002B1F90;
    v44._uint64_t countAndFlagsBits = 0xD000000000000027;
    String.append(_:)(v44);
    _print_unlocked<A, B>(_:_:)();
    v45._uint64_t countAndFlagsBits = 41;
    v45._object = (void *)0xE100000000000000;
    String.append(_:)(v45);
    uint64_t v47 = v66;
    unint64_t v46 = v67;
    BOOL v48 = v57;
    static GKLog.match.getter();
    swift_bridgeObjectRetain_n();
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = v43;
    if (os_log_type_enabled(v49, v43))
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      uint64_t v66 = swift_slowAlloc();
      *(_DWORD *)uint64_t v51 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v65 = sub_100174CE4(v47, v46, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "Nearby - %s", v51, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v55 + 8))(v57, v56);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v55 + 8))(v48, v56);
    }
    swift_bridgeObjectRelease();
    AsyncStream.Continuation.finish()();
    return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v61, v13);
  }
}

uint64_t sub_1001A9498()
{
  sub_10000D938(&qword_100327780);
  sub_1000180C4();
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_1001A9520(uint64_t a1)
{
  uint64_t v2 = sub_10000D938(&qword_100327780);
  sub_1001A9E58(v2);

  return sub_1001A8A40(a1);
}

uint64_t sub_1001A9574(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D938(&qword_100327788);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001A95DC(uint64_t a1)
{
  uint64_t v2 = sub_10000D938(&qword_100327788);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001A963C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001A9674(uint64_t a1)
{
  return sub_1001A7CD4(a1);
}

uint64_t sub_1001A967C()
{
  uint64_t v1 = type metadata accessor for NWConnection.State();
  sub_100011108();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = (v6 + 40) & ~v6;
  uint64_t v8 = v7 + *(void *)(v5 + 64);
  uint64_t v9 = v6 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v7, v1);

  return _swift_deallocObject(v0, v8, v9);
}

uint64_t sub_1001A9728()
{
  sub_100010F2C();
  uint64_t v2 = type metadata accessor for NWConnection.State();
  sub_1001A9E58(v2);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = v0 + ((*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100171648;
  sub_100018388();
  return sub_1001A7EA8(v7, v8, v9, v4, v5);
}

uint64_t sub_1001A97FC()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001A983C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100171E3C;
  sub_100018388();
  return sub_1001A7260();
}

uint64_t sub_1001A98EC(uint64_t result, unint64_t a2, uint64_t a3)
{
  if (a3 != 1)
  {
    sub_100169260(result, a2);
    swift_release();
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_1001A993C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001A99A8(uint64_t a1)
{
  return sub_1001A8CEC(a1, v1);
}

uint64_t sub_1001A99B8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100175574(a1, a2);
  }
  return a1;
}

uint64_t sub_1001A99D0()
{
  sub_10000D938(&qword_1003277F8);
  sub_1000180C4();
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_1001A9A6C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = sub_10000D938(&qword_1003277F8);
  sub_1000111CC(v11);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  unint64_t v16 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v17 = *(void *)(v5 + ((*(void *)(v15 + 64) + v16 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_1001A8E44(a1, a2, a3, a4, a5, v5 + v16, v17);
}

uint64_t _s7MessageVwxx(uint64_t *a1)
{
  unint64_t v1 = a1[1];
  if (v1 >> 60 != 15) {
    sub_100169274(*a1, v1);
  }
  swift_release();

  return swift_errorRelease();
}

uint64_t _s7MessageVwcp(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = a2[1];
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v5 = *a2;
    sub_100175574(*a2, a2[1]);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v4;
  }
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  *(void *)(a1 + 16) = v6;
  swift_retain();
  swift_errorRetain();
  *(void *)(a1 + 24) = v7;
  return a1;
}

uint64_t *_s7MessageVwca(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a2[1];
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      uint64_t v6 = *a2;
      sub_100175574(*a2, a2[1]);
      uint64_t v7 = *a1;
      unint64_t v8 = a1[1];
      *a1 = v6;
      a1[1] = v4;
      sub_100169274(v7, v8);
      goto LABEL_8;
    }
    sub_1001A9CBC((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  uint64_t v5 = *a2;
  sub_100175574(*a2, a2[1]);
  *a1 = v5;
  a1[1] = v4;
LABEL_8:
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  uint64_t v9 = a2[3];
  swift_errorRetain();
  a1[3] = v9;
  swift_errorRelease();
  return a1;
}

uint64_t sub_1001A9CBC(uint64_t a1)
{
  return a1;
}

uint64_t *_s7MessageVwta(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a1[1];
  if (v4 >> 60 != 15)
  {
    unint64_t v5 = a2[1];
    if (v5 >> 60 != 15)
    {
      uint64_t v6 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      sub_100169274(v6, v4);
      goto LABEL_6;
    }
    sub_1001A9CBC((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  a1[2] = a2[2];
  swift_release();
  a1[3] = a2[3];
  swift_errorRelease();
  return a1;
}

uint64_t _s7MessageVwet(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 32))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 16);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t _s7MessageVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *_s7MessageVMa()
{
  return &_s7MessageVN;
}

uint64_t sub_1001A9E58(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_1001A9E6C()
{
  return swift_task_dealloc();
}

void sub_1001A9E8C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

void sub_1001A9EAC()
{
  *(void *)(v0 - 96) = 0;
  *(void *)(v0 - 88) = 0xE000000000000000;
}

uint64_t sub_1001A9EC0()
{
  return NSPersistentStoreCoordinator.replacePersistentStore(at:destinationOptions:withPersistentStoreFrom:sourceOptions:type:)();
}

uint64_t sub_1001A9EE4()
{
  return NSPersistentStoreCoordinator.destroyPersistentStore(at:type:options:)();
}

id sub_1001A9F08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v44 = a6;
  uint64_t v47 = a3;
  uint64_t v48 = a5;
  uint64_t v49 = a2;
  Class ObjectType = (Class)swift_getObjectType();
  uint64_t v10 = type metadata accessor for URL();
  sub_100011254();
  uint64_t v46 = v11;
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v14, v15);
  unint64_t v16 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  Swift::String v45 = (char *)v39 - v16;
  uint64_t v17 = sub_10000D938(&qword_100327E70);
  uint64_t v18 = *(void *)(*(void *)(v17 - 8) + 64);
  __chkstk_darwin(v17 - 8, v19);
  unint64_t v20 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_10018C260(a1, (uint64_t)v39 - v20);
  if (sub_10000DB14((uint64_t)v39 - v20, 1, v10) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1001AC008((uint64_t)v39 - v20);
    type metadata accessor for ProcessExiter();
    sub_100017384((uint64_t)"Unable to locate old database URL. Exiting.");
  }
  uint64_t v40 = a7;
  uint64_t v41 = a4;
  uint64_t v42 = a1;
  unint64_t v21 = *(uint64_t (**)(char *, char *, uint64_t))(v46 + 32);
  uint64_t v22 = v21(v45, (char *)v39 - v20, v10);
  v39[3] = v39;
  uint64_t v24 = __chkstk_darwin(v22, v23);
  uint64_t v25 = (char *)v39 - v16;
  __chkstk_darwin(v24, v26);
  sub_10018C260(v49, (uint64_t)v39 - v20);
  if (sub_10000DB14((uint64_t)v39 - v20, 1, v10) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1001AC008((uint64_t)v39 - v20);
    type metadata accessor for ProcessExiter();
    sub_100017384((uint64_t)"Unable to locate new database URL. Exiting.");
  }
  uint64_t v27 = v21(v25, (char *)v39 - v20, v10);
  v39[2] = v39;
  __chkstk_darwin(v27, v28);
  unint64_t v29 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v30 = v45;
  uint64_t v31 = v46;
  uint64_t v32 = *(uint64_t (**)(char *, char *, uint64_t))(v46 + 16);
  uint64_t v33 = v32((char *)v39 - v29, v45, v10);
  v39[1] = v39;
  __chkstk_darwin(v33, v34);
  v32((char *)v39 - v29, v25, v10);
  uint64_t v35 = (char *)objc_allocWithZone(ObjectType);
  id v36 = sub_1001ABB4C((uint64_t)v39 - v29, (uint64_t)v39 - v29, v47, v41, v48, v44, v40, v35);
  sub_1001AC008(v49);
  sub_1001AC008(v42);
  uint64_t v37 = *(void (**)(char *, uint64_t))(v31 + 8);
  v37(v25, v10);
  v37(v30, v10);
  swift_getObjectType();
  sub_10001126C();
  swift_deallocPartialClassInstance();
  return v36;
}

uint64_t InsecureDatabaseMigrator.__allocating_init(insecureDatabaseURL:secureDatabaseURL:persistentStoreCoordinatorProtocol:options:fileManager:bundleID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1001AA508(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1001ABA0C);
}

uint64_t InsecureDatabaseMigrator.init(insecureDatabaseURL:secureDatabaseURL:persistentStoreCoordinatorProtocol:options:fileManager:bundleID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1001AA508(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1001ABCEC);
}

uint64_t sub_1001AA508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v25 = a8;
  uint64_t v16 = *(void *)(a3 + 24);
  uint64_t v15 = *(void *)(a3 + 32);
  sub_100170D50(a3, v16);
  sub_100011254();
  __chkstk_darwin(v17, v18);
  unint64_t v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v21 + 16))(v20);
  uint64_t v22 = v25(a1, a2, v20, a4, a5, a6, a7, v24, v16, v15);
  sub_100016C38(a3);
  return v22;
}

Swift::Void __swiftcall InsecureDatabaseMigrator.migrate()()
{
  uint64_t v66 = type metadata accessor for NSPersistentStore.StoreType();
  sub_100011254();
  uint64_t v69 = v1;
  uint64_t v4 = __chkstk_darwin(v2, v3);
  os_log_type_t v6 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  uint64_t v65 = (char *)&v59 - v8;
  uint64_t v73 = type metadata accessor for Logger();
  sub_100011254();
  uint64_t v10 = v9;
  uint64_t v13 = __chkstk_darwin(v11, v12);
  unint64_t v67 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13, v15);
  uint64_t v68 = (char *)&v59 - v17;
  uint64_t v19 = __chkstk_darwin(v16, v18);
  uint64_t v21 = (char *)&v59 - v20;
  __chkstk_darwin(v19, v22);
  uint64_t v24 = (char *)&v59 - v23;
  static GKLog.cache.getter();
  uint64_t v25 = v0;
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  BOOL v28 = os_log_type_enabled(v26, v27);
  uint64_t v71 = v10;
  os_log_type_t v72 = v25;
  uint64_t v63 = v6;
  uint64_t v64 = v21;
  if (v28)
  {
    unint64_t v29 = (uint8_t *)sub_100016FF0();
    v74[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v29 = 136315138;
    type metadata accessor for URL();
    sub_1001ABEB4();
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v32 = sub_100174CE4(v30, v31, v74);
    sub_100017710(v32);
    uint64_t v25 = v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "About to migrate: %s to secure location", v29, 0xCu);
    swift_arrayDestroy();
    sub_100010D7C();
    sub_100010D7C();

    uint64_t v70 = *(void (**)(char *, uint64_t))(v71 + 8);
    sub_100010F20();
    v33();
  }
  else
  {

    uint64_t v70 = *(void (**)(char *, uint64_t))(v10 + 8);
    v70(v24, v73);
  }
  uint64_t v34 = &v25[OBJC_IVAR___GKInsecureDatabaseMigrator_persistentStoreCoordinator];
  uint64_t v35 = *(void *)&v25[OBJC_IVAR___GKInsecureDatabaseMigrator_persistentStoreCoordinator + 24];
  uint64_t v36 = *(void *)&v25[OBJC_IVAR___GKInsecureDatabaseMigrator_persistentStoreCoordinator + 32];
  sub_100165918(&v25[OBJC_IVAR___GKInsecureDatabaseMigrator_persistentStoreCoordinator], v35);
  uint64_t v37 = &v25[OBJC_IVAR___GKInsecureDatabaseMigrator_secureDatabaseURL];
  uint64_t v38 = *(void *)&v25[OBJC_IVAR___GKInsecureDatabaseMigrator_options];
  uint64_t v39 = v25;
  uint64_t v40 = &v25[OBJC_IVAR___GKInsecureDatabaseMigrator_insecureDatabaseURL];
  uint64_t v41 = v65;
  static NSPersistentStore.StoreType.sqlite.getter();
  (*(void (**)(char *, uint64_t, char *, uint64_t, char *, uint64_t, uint64_t))(v36 + 8))(v37, v38, v40, v38, v41, v35, v36);
  uint64_t v62 = v38;
  uint64_t v42 = v69 + 8;
  uint64_t v65 = *(char **)(v69 + 8);
  ((void (*)(char *, uint64_t))v65)(v41, v66);
  static GKLog.cache.getter();
  id v43 = v39;
  uint64_t v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.debug.getter();
  BOOL v46 = os_log_type_enabled(v44, v45);
  uint64_t v69 = v42;
  if (v46)
  {
    uint64_t v47 = (uint8_t *)sub_100016FF0();
    uint64_t v61 = swift_slowAlloc();
    v74[0] = v61;
    *(_DWORD *)uint64_t v47 = 136315138;
    uint64_t v59 = v47 + 4;
    unint64_t v60 = v47;
    type metadata accessor for URL();
    sub_1001ABEB4();
    uint64_t v48 = v40;
    uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v51 = sub_100174CE4(v49, v50, v74);
    sub_100017710(v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "About to destroy: %s", v60, 0xCu);
    swift_arrayDestroy();
    sub_100010D7C();
    sub_100010D7C();

    sub_100010F20();
    v52();
  }
  else
  {

    sub_100010F20();
    v53();
    uint64_t v48 = v40;
  }
  uint64_t v54 = v62;
  uint64_t v55 = (void (*)(void))v65;
  uint64_t v56 = *((void *)v34 + 3);
  uint64_t v57 = *((void *)v34 + 4);
  sub_100165918(v34, v56);
  uint64_t v58 = v63;
  static NSPersistentStore.StoreType.sqlite.getter();
  (*(void (**)(char *, char *, uint64_t, uint64_t, uint64_t))(v57 + 16))(v48, v58, v54, v56, v57);
  sub_100010F20();
  v55();
  sub_1001AAE28();
}

uint64_t sub_1001AAE28()
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v81 = *(void *)(v2 - 8);
  uint64_t v82 = v2;
  uint64_t v4 = __chkstk_darwin(v2, v3);
  unint64_t v77 = (char *)v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)v74 - v7;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v80 = *(void *)(v9 - 8);
  uint64_t v10 = v80;
  uint64_t v11 = *(void **)(v80 + 64);
  __chkstk_darwin(v9, v12);
  uint64_t v13 = (char *)v74 - (((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = v0;
  URL.deletingLastPathComponent()();
  BOOL v15 = URL.pathExtension.getter() == 0x617461646367 && v14 == 0xE600000000000000;
  uint64_t v83 = (void *)v10;
  uint64_t v84 = (char *)v74 - (((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = v1;
  if (v15)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    id v17 = (id)swift_bridgeObjectRelease();
    if ((v16 & 1) == 0) {
      goto LABEL_13;
    }
  }
  uint64_t v19 = static GKLog.cache.getter();
  __chkstk_darwin(v19, v20);
  uint64_t v79 = v11;
  uint64_t v21 = (char *)v74 - (((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v21, v13, v9);
  uint64_t v22 = Logger.logObject.getter();
  uint64_t v23 = v9;
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = (void *)swift_slowAlloc();
    object = v74;
    id v87 = v26;
    *(_DWORD *)uint64_t v25 = 136315138;
    id v75 = v25 + 4;
    sub_1001ABEB4();
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v86 = sub_100174CE4(v27, v28, (uint64_t *)&v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v29 = (void (*)(char *, uint64_t))v83[1];
    v29(v21, v23);
    _os_log_impl((void *)&_mh_execute_header, v22, v24, "Removing old database folder: %s", v25, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    unint64_t v29 = *(void (**)(char *, uint64_t))(v10 + 8);
    v29(v21, v23);
  }

  (*(void (**)(char *, uint64_t))(v81 + 8))(v8, v82);
  uint64_t v9 = v23;
  uint64_t v13 = v84;
  uint64_t v30 = *(void **)((char *)v85 + OBJC_IVAR___GKInsecureDatabaseMigrator_fileManager);
  URL.path(percentEncoded:)(1);
  NSString v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v87 = 0;
  unsigned int v32 = [v30 removeItemAtPath:v31 error:&v87];

  uint64_t v11 = v79;
  if (!v32)
  {
    id v51 = v87;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return ((uint64_t (*)(char *, uint64_t))v29)(v13, v9);
  }
  id v17 = v87;
LABEL_13:
  __chkstk_darwin(v17, v18);
  unint64_t v33 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v34 = v11;
  uint64_t v35 = (char *)v74 - v33;
  URL.deletingLastPathComponent()();
  Swift::String v36 = URL.path(percentEncoded:)(1);
  uint64_t v37 = *(void **)((char *)v85 + OBJC_IVAR___GKInsecureDatabaseMigrator_fileManager);
  v74[3] = v36._countAndFlagsBits;
  NSString v38 = String._bridgeToObjectiveC()();
  id v87 = 0;
  id v75 = v37;
  id v39 = [v37 contentsOfDirectoryAtPath:v38 error:&v87];

  id v40 = v87;
  if (v39)
  {
    object = v36._object;
    uint64_t v79 = v74;
    uint64_t v41 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v42 = v40;

    uint64_t v43 = *(void *)(v41 + 16);
    uint64_t v44 = swift_bridgeObjectRelease();
    __chkstk_darwin(v44, v45);
    BOOL v46 = (char *)v74 - v33;
    uint64_t v47 = v83;
    uint64_t v48 = (void (*)(char *, char *, uint64_t))v83[2];
    v48((char *)v74 - v33, v35, v9);
    if (v43)
    {
      uint64_t v49 = (void (*)(char *, uint64_t))v47[1];
      v49(v46, v9);
LABEL_16:
      swift_bridgeObjectRelease();
      v49(v35, v9);
      return ((uint64_t (*)(char *, uint64_t))v49)(v84, v9);
    }
    uint64_t v74[2] = v74;
    uint64_t v54 = v34;
    if (URL.lastPathComponent.getter() == *(void *)((char *)v85 + OBJC_IVAR___GKInsecureDatabaseMigrator_bundleID)
      && v55 == *(void *)((char *)v85 + OBJC_IVAR___GKInsecureDatabaseMigrator_bundleID + 8))
    {
      swift_bridgeObjectRelease();
      uint64_t v49 = (void (*)(char *, uint64_t))v83[1];
      v49(v46, v9);
    }
    else
    {
      char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v49 = (void (*)(char *, uint64_t))v83[1];
      v49(v46, v9);
      if ((v57 & 1) == 0) {
        goto LABEL_16;
      }
    }
    uint64_t v58 = v9;
    uint64_t v59 = v77;
    uint64_t v60 = static GKLog.cache.getter();
    uint64_t v85 = v74;
    __chkstk_darwin(v60, v61);
    uint64_t v62 = (char *)v74 - (((unint64_t)v54 + 15) & 0xFFFFFFFFFFFFFFF0);
    v48(v62, v84, v58);
    uint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v65 = (uint8_t *)swift_slowAlloc();
      uint64_t v83 = (void *)swift_slowAlloc();
      id v87 = v83;
      *(_DWORD *)uint64_t v65 = 136315138;
      v74[1] = v65 + 4;
      sub_1001ABEB4();
      uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v86 = sub_100174CE4(v66, v67, (uint64_t *)&v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v49(v62, v58);
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "Removing old bundle folder: %s", v65, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v81 + 8))(v77, v82);
    }
    else
    {
      v49((char *)v74 - (((unint64_t)v54 + 15) & 0xFFFFFFFFFFFFFFF0), v58);

      (*(void (**)(char *, uint64_t))(v81 + 8))(v59, v82);
    }
    uint64_t v68 = v58;
    NSString v69 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v87 = 0;
    unsigned int v70 = [v75 removeItemAtPath:v69 error:&v87];

    uint64_t v71 = v84;
    if (v70)
    {
      id v72 = v87;
    }
    else
    {
      id v73 = v87;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
    v49(v35, v68);
    return ((uint64_t (*)(char *, uint64_t))v49)(v71, v68);
  }
  else
  {
    id v52 = v87;
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v53 = (void (*)(char *, uint64_t))v83[1];
    v53((char *)v74 - v33, v9);
    return ((uint64_t (*)(char *, uint64_t))v53)(v13, v9);
  }
}

void InsecureDatabaseMigrator.init()()
{
}

uint64_t sub_1001AB96C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1001AB994(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  sub_100174CE4(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

id sub_1001ABA0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v22 = a6;
  uint64_t v23 = a7;
  uint64_t v15 = *(void *)(a9 - 8);
  __chkstk_darwin(a1, a2);
  id v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (char *)objc_allocWithZone(v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a3, a9);
  id v20 = sub_1001ABCEC(a1, a2, (uint64_t)v17, a4, a5, v22, v23, v19, a9, a10);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a3, a9);
  return v20;
}

id sub_1001ABB4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8)
{
  Class ObjectType = (objc_class *)swift_getObjectType();
  v26[3] = sub_1001AC068();
  void v26[4] = &protocol witness table for NSPersistentStoreCoordinator;
  v26[0] = a3;
  uint64_t v14 = &a8[OBJC_IVAR___GKInsecureDatabaseMigrator_insecureDatabaseURL];
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  id v17 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v17(v14, a1, v15);
  v17(&a8[OBJC_IVAR___GKInsecureDatabaseMigrator_secureDatabaseURL], a2, v15);
  *(void *)&a8[OBJC_IVAR___GKInsecureDatabaseMigrator_fileManager] = a5;
  sub_100171960((uint64_t)v26, (uint64_t)&a8[OBJC_IVAR___GKInsecureDatabaseMigrator_persistentStoreCoordinator]);
  *(void *)&a8[OBJC_IVAR___GKInsecureDatabaseMigrator_options] = a4;
  Class v18 = &a8[OBJC_IVAR___GKInsecureDatabaseMigrator_bundleID];
  *(void *)Class v18 = a6;
  *((void *)v18 + 1) = a7;
  v25.receiver = a8;
  v25.Class super_class = ObjectType;
  id v19 = [super init];
  sub_100016C38((uint64_t)v26);
  id v20 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
  v20(a2, v15);
  v20(a1, v15);
  return v19;
}

id sub_1001ABCEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8, uint64_t a9, uint64_t a10)
{
  Class ObjectType = (objc_class *)swift_getObjectType();
  v29[3] = a9;
  v29[4] = a10;
  uint64_t v16 = sub_100171DD8(v29);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a9 - 8) + 32))(v16, a3, a9);
  id v17 = &a8[OBJC_IVAR___GKInsecureDatabaseMigrator_insecureDatabaseURL];
  uint64_t v18 = type metadata accessor for URL();
  uint64_t v19 = *(void *)(v18 - 8);
  id v20 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v20(v17, a1, v18);
  v20(&a8[OBJC_IVAR___GKInsecureDatabaseMigrator_secureDatabaseURL], a2, v18);
  *(void *)&a8[OBJC_IVAR___GKInsecureDatabaseMigrator_fileManager] = a5;
  sub_100171960((uint64_t)v29, (uint64_t)&a8[OBJC_IVAR___GKInsecureDatabaseMigrator_persistentStoreCoordinator]);
  *(void *)&a8[OBJC_IVAR___GKInsecureDatabaseMigrator_options] = a4;
  uint64_t v21 = &a8[OBJC_IVAR___GKInsecureDatabaseMigrator_bundleID];
  *(void *)uint64_t v21 = a6;
  *((void *)v21 + 1) = a7;
  v28.receiver = a8;
  v28.Class super_class = ObjectType;
  id v22 = [super init];
  sub_100016C38((uint64_t)v29);
  uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
  v23(a2, v18);
  v23(a1, v18);
  return v22;
}

unint64_t sub_1001ABEB4()
{
  unint64_t result = qword_100327828;
  if (!qword_100327828)
  {
    type metadata accessor for URL();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327828);
  }
  return result;
}

uint64_t sub_1001ABEF8()
{
  return type metadata accessor for InsecureDatabaseMigrator();
}

uint64_t type metadata accessor for InsecureDatabaseMigrator()
{
  uint64_t result = qword_100327868;
  if (!qword_100327868) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001ABF48()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1001AC008(uint64_t a1)
{
  uint64_t v2 = sub_10000D938(&qword_100327E70);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1001AC068()
{
  unint64_t result = qword_100327878;
  if (!qword_100327878)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100327878);
  }
  return result;
}

uint64_t sub_1001AC0A8()
{
  return 0x6C61626F6C67;
}

void sub_1001AC10C()
{
  sub_100011BD4();
  unint64_t v1 = v0;
  uint64_t v3 = v2;
  Class ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = type metadata accessor for URL();
  sub_100011108();
  uint64_t v6 = v5;
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v9, v10);
  unint64_t v11 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  id v42 = (char *)v39 - v11;
  uint64_t v12 = v1;
  NSString v13 = String._bridgeToObjectiveC()();
  id v14 = [v3 containerURLForSecurityApplicationGroupIdentifier:v13];

  uint64_t v15 = sub_10000D938(&qword_100327E70);
  __chkstk_darwin(v15 - 8, v16);
  sub_1001ADE58();
  if (v14)
  {
    __chkstk_darwin(v17, v18);
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v19 = (void (*)(NSString, char *, uint64_t))v6[4];
    v19(v13, (char *)v39 - v11, v4);
    sub_10000D97C((uint64_t)v13, 0, 1, v4);
    if (sub_10000DB14((uint64_t)v13, 1, v4) != 1)
    {
      id v20 = v42;
      v19(v42, (char *)v13, v4);
      *(void *)&v12[OBJC_IVAR___GKSecureFileLocator_fileManager] = v3;
      id v40 = (void (*)(char *, id *, uint64_t))v19;
      uint64_t v21 = &v12[OBJC_IVAR___GKSecureFileLocator_rootDirectory];
      id v22 = (uint64_t (*)(char *, char *, uint64_t))v6[2];
      uint64_t v23 = v22(&v12[OBJC_IVAR___GKSecureFileLocator_rootDirectory], v20, v4);
      void v39[4] = v39;
      uint64_t v25 = __chkstk_darwin(v23, v24);
      v39[3] = v6 + 4;
      v39[2] = v39;
      __chkstk_darwin(v25, v26);
      objc_super v28 = (char *)v39 - v27;
      v22((char *)v39 - v27, v21, v4);
      strcpy(v44, "Library/Caches");
      v44[15] = -18;
      uint64_t v29 = type metadata accessor for URL.DirectoryHint();
      v39[1] = v39;
      sub_100011108();
      uint64_t v30 = v12;
      uint64_t v32 = v31;
      __chkstk_darwin(v33, v34);
      sub_1000110F8();
      uint64_t v37 = v36 - v35;
      (*(void (**)(uint64_t, void, uint64_t))(v32 + 104))(v36 - v35, enum case for URL.DirectoryHint.isDirectory(_:), v29);
      sub_100166A7C();
      v39[0] = v3;
      URL.appending<A>(path:directoryHint:)();
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v37, v29);
      swift_bridgeObjectRelease();
      NSString v38 = (void (*)(char *, uint64_t))v6[1];
      v38(v28, v4);
      v38(v42, v4);
      v40(&v30[OBJC_IVAR___GKSecureFileLocator_parentCachesDirectory], v39, v4);

      v43.receiver = v30;
      v43.Class super_class = ObjectType;
      [super init];

      sub_100010DB0();
      return;
    }
  }
  else
  {
    sub_10000D97C((uint64_t)v13, 1, 1, v4);
  }
  sub_1001AC008((uint64_t)v13);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_1001AC5AC()
{
  sub_100011BD4();
  sub_1000173A4(v6);
  uint64_t v7 = v0 + OBJC_IVAR___GKSecureFileLocator_parentCachesDirectory;
  uint64_t v8 = type metadata accessor for URL();
  sub_100011108();
  uint64_t v10 = v9;
  __chkstk_darwin(v11, v12);
  sub_100017724();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v1, v7, v8);
  swift_bridgeObjectRetain();
  v13._uint64_t countAndFlagsBits = 47;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = v5;
  v14._object = v4;
  String.append(_:)(v14);
  v15._uint64_t countAndFlagsBits = 45;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  v16._uint64_t countAndFlagsBits = v3;
  v16._object = v2;
  String.append(_:)(v16);
  type metadata accessor for URL.DirectoryHint();
  sub_100011108();
  __chkstk_darwin(v17, v18);
  sub_100010E18();
  uint64_t v19 = sub_100010E8C();
  v20(v19);
  sub_100166A7C();
  URL.appending<A>(path:directoryHint:)();
  uint64_t v21 = sub_1000170A4();
  v22(v21);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v1, v8);
  sub_100010DB0();
}

void sub_1001AC750()
{
  sub_100011BD4();
  sub_1000173A4(v0);
  type metadata accessor for URL();
  sub_100011108();
  __chkstk_darwin(v1, v2);
  sub_100017A48();
  sub_1001AC5AC();
  type metadata accessor for URL.DirectoryHint();
  sub_100011108();
  __chkstk_darwin(v3, v4);
  sub_100010E18();
  uint64_t v5 = sub_100010E8C();
  v6(v5);
  sub_100166A7C();
  URL.appending<A>(path:directoryHint:)();
  uint64_t v7 = sub_1000170A4();
  v8(v7);
  swift_bridgeObjectRelease();
  uint64_t v9 = sub_1001ADE40();
  v10(v9);
  sub_100010DB0();
}

id sub_1001AC8B0()
{
  sub_100011BD4();
  uint64_t v21 = v0;
  uint64_t v2 = v1;
  type metadata accessor for URL();
  sub_100011108();
  __chkstk_darwin(v3, v4);
  sub_100017A48();
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;
  id v14 = v2;
  v21(v5, v7, v8, v10, v11, v13);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  URL._bridgeToObjectiveC()(v15);
  uint64_t v16 = sub_1001ADE40();
  v17(v16);
  sub_100010DB0();
  return v18;
}

void sub_1001AC9E0()
{
  sub_100011BD4();
  id v42 = v2;
  uint64_t v44 = v3;
  NSString v38 = v4;
  uint64_t v6 = v5;
  type metadata accessor for Logger();
  sub_100011108();
  uint64_t v40 = v8;
  uint64_t v41 = v7;
  __chkstk_darwin(v7, v9);
  sub_1001ADE58();
  uint64_t v10 = type metadata accessor for URL();
  sub_100011108();
  uint64_t v12 = v11;
  __chkstk_darwin(v13, v14);
  sub_1000110F8();
  uint64_t v17 = v16 - v15;
  sub_1001AC750();
  uint64_t v18 = *(void **)(v0 + OBJC_IVAR___GKSecureFileLocator_fileManager);
  URL._bridgeToObjectiveC()((NSURL *)OBJC_IVAR___GKSecureFileLocator_fileManager);
  id v20 = v19;
  v45[0] = 0;
  LODWORD(v18) = [v18 createDirectoryAtURL:v19 withIntermediateDirectories:1 attributes:0 error:v45];

  id v21 = v45[0];
  if (v18)
  {
    v45[0] = v38;
    v45[1] = v42;
    uint64_t v22 = type metadata accessor for URL.DirectoryHint();
    sub_100011108();
    uint64_t v24 = v23;
    __chkstk_darwin(v25, v26);
    sub_100017A48();
    (*(void (**)(uint64_t, void, uint64_t))(v24 + 104))(v6, enum case for URL.DirectoryHint.notDirectory(_:), v22);
    sub_100166A7C();
    id v27 = v21;
    URL.appending<A>(path:directoryHint:)();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v6, v22);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v17, v10);
    uint64_t v28 = 0;
    uint64_t v29 = v44;
    uint64_t v30 = v10;
  }
  else
  {
    uint64_t v39 = v12;
    uint64_t v43 = v10;
    id v31 = v45[0];
    uint64_t v32 = (uint8_t *)_convertNSErrorToError(_:)();

    swift_willThrow();
    static GKLog.cache.getter();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v33, v34))
    {
      swift_slowAlloc();
      uint64_t v35 = v17;
      uint64_t v36 = (void *)sub_10001852C();
      *(_DWORD *)uint64_t v32 = 138412290;
      swift_errorRetain();
      uint64_t v37 = (void *)_swift_stdlib_bridgeErrorToNSError();
      v45[0] = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v36 = v37;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Failed to create secure directory: %@", v32, 0xCu);
      sub_10000D938(&qword_100326430);
      swift_arrayDestroy();
      uint64_t v17 = v35;
      sub_100010D7C();
      sub_100010D7C();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v30 = v43;
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v1, v41);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v17, v43);
    uint64_t v28 = 1;
    uint64_t v29 = v44;
  }
  sub_10000D97C(v29, v28, 1, v30);
  sub_100010DB0();
}

void sub_1001ACF84()
{
}

void sub_1001AD120()
{
  sub_100011BD4();
  uint64_t v0 = type metadata accessor for URL();
  sub_100011108();
  uint64_t v2 = v1;
  __chkstk_darwin(v3, v4);
  sub_1000110F8();
  uint64_t v7 = v6 - v5;
  sub_1001AC5AC();
  sub_1001AD1FC();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v7, v0);
  sub_100010DB0();
}

void sub_1001AD1FC()
{
  sub_100011BD4();
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for Logger();
  sub_100011108();
  uint64_t v5 = v4;
  __chkstk_darwin(v6, v7);
  sub_100017724();
  URL._bridgeToObjectiveC()(v8);
  uint64_t v10 = v9;
  id v21 = 0;
  LODWORD(v2) = [v2 removeItemAtURL:v9 error:&v21];

  if (v2)
  {
    sub_100010DB0();
    id v13 = v11;
  }
  else
  {
    id v14 = v21;
    uint64_t v15 = (uint8_t *)_convertNSErrorToError(_:)();

    swift_willThrow();
    static GKLog.cache.getter();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      swift_slowAlloc();
      uint64_t v20 = v3;
      uint64_t v18 = (void *)sub_10001852C();
      *(_DWORD *)uint64_t v15 = 138412290;
      swift_errorRetain();
      uint64_t v19 = (void *)_swift_stdlib_bridgeErrorToNSError();
      id v21 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v18 = v19;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Failed to remove item: %@", v15, 0xCu);
      sub_10000D938(&qword_100326430);
      swift_arrayDestroy();
      uint64_t v3 = v20;
      sub_100010D7C();
      sub_100010D7C();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v3);
    sub_100010DB0();
  }
}

uint64_t sub_1001AD544()
{
  uint64_t v2 = v0 + OBJC_IVAR___GKSecureFileLocator_parentCachesDirectory;
  uint64_t v3 = type metadata accessor for URL();
  sub_100011108();
  uint64_t v5 = v4;
  __chkstk_darwin(v6, v7);
  sub_100017724();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, v2, v3);
  sub_1001AD618();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v1, v3);
}

void sub_1001AD618()
{
  sub_100011BD4();
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v53 = v5;
  uint64_t v6 = type metadata accessor for Logger();
  sub_100011108();
  uint64_t v8 = v7;
  __chkstk_darwin(v9, v10);
  sub_100010E18();
  URL._bridgeToObjectiveC()(v11);
  id v13 = v12;
  id v67 = 0;
  uint64_t v58 = v2;
  id v14 = [v2 contentsOfDirectoryAtURL:v12 includingPropertiesForKeys:0 options:0 error:&v67];

  id v15 = v67;
  if (v14)
  {
    uint64_t v16 = type metadata accessor for URL();
    uint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v18 = v15;

    uint64_t v19 = sub_10000D938(&qword_100327E70);
    v52[0] = v52;
    __chkstk_darwin(v19 - 8, v20);
    sub_100010E18();
    uint64_t v21 = *(void *)(v17 + 16);
    v52[1] = v17;
    if (v21)
    {
      uint64_t v22 = *(void *)(v16 - 8);
      unint64_t v23 = v17 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
      uint64_t v62 = *(void *)(v22 + 72);
      uint64_t v24 = *(void (**)(void))(v22 + 16);
      uint64_t v65 = v22 + 16;
      uint64_t v63 = v22;
      uint64_t v60 = (void (**)(char *, uint64_t))(v22 + 8);
      uint64_t v61 = v22 + 32;
      swift_bridgeObjectRetain();
      uint64_t v59 = v4;
      uint64_t v56 = v24;
      uint64_t v57 = v1;
      while (1)
      {
        sub_100010FA4();
        v24();
        sub_10000D97C(v1, 0, 1, v16);
        uint64_t v25 = sub_10000DB14(v1, 1, v16);
        if (v25 == 1) {
          goto LABEL_25;
        }
        uint64_t v66 = v52;
        uint64_t v27 = *(void *)(v63 + 64);
        __chkstk_darwin(v25, v26);
        unint64_t v28 = (v27 + 15) & 0xFFFFFFFFFFFFFFF0;
        uint64_t v29 = (char *)v52 - v28;
        (*(void (**)(char *, uint64_t, uint64_t))(v30 + 32))((char *)v52 - v28, v1, v16);
        if (v4) {
          break;
        }
        sub_1001AD1FC();
        (*v60)((char *)v52 - v28, v16);
LABEL_19:
        v23 += v62;
        if (!--v21) {
          goto LABEL_24;
        }
      }
      uint64_t v31 = URL.isFileURL.getter();
      os_log_type_t v64 = v52;
      __chkstk_darwin(v31, v32);
      sub_100010FA4();
      uint64_t v33 = ((uint64_t (*)(void))v24)();
      if ((v31 & 1) == 0)
      {
        uint64_t v41 = *v60;
        (*v60)((char *)v52 - v28, v16);
        uint64_t v1 = v57;
LABEL_18:
        v41(v29, v16);
        uint64_t v4 = v59;
        uint64_t v24 = v56;
        goto LABEL_19;
      }
      uint64_t v54 = (unint64_t)v60 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v55 = v52;
      __chkstk_darwin(v33, v34);
      uint64_t v36 = v35;
      uint64_t v37 = (char *)v52 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
      URL.deletingPathExtension()();
      uint64_t v38 = URL.lastPathComponent.getter();
      uint64_t v40 = v39;
      uint64_t v41 = *v36;
      (*v36)(v37, v16);
      if (v38 == v53 && v40 == v59)
      {
        swift_bridgeObjectRelease();
        uint64_t v45 = sub_1001ADE70();
        ((void (*)(uint64_t))v41)(v45);
      }
      else
      {
        char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t v44 = sub_1001ADE70();
        ((void (*)(uint64_t))v41)(v44);
        if ((v43 & 1) == 0) {
          goto LABEL_17;
        }
      }
      sub_1001AD1FC();
LABEL_17:
      uint64_t v1 = v57;
      goto LABEL_18;
    }
    swift_bridgeObjectRetain();
LABEL_24:
    sub_10000D97C(v1, 1, 1, v16);
LABEL_25:
    swift_bridgeObjectRelease_n();
  }
  else
  {
    id v46 = v67;
    uint64_t v47 = (uint8_t *)_convertNSErrorToError(_:)();

    swift_willThrow();
    static GKLog.cache.getter();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v48 = Logger.logObject.getter();
    uint64_t v49 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v48, (os_log_type_t)v49))
    {
      swift_slowAlloc();
      unint64_t v50 = (void *)sub_10001852C();
      uint64_t v66 = v8;
      *(_DWORD *)uint64_t v47 = 138412290;
      swift_errorRetain();
      id v51 = (void *)_swift_stdlib_bridgeErrorToNSError();
      id v67 = v51;
      uint64_t v8 = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v50 = v51;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v48, (os_log_type_t)v49, "Unable to retrieve contents of directory with error: %@", v47, 0xCu);
      sub_10000D938(&qword_100326430);
      swift_arrayDestroy();
      sub_100010D7C();
      sub_100010D7C();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    ((void (*)(uint64_t, uint64_t))v8[1])(v1, v6);
  }
  sub_100010DB0();
}

void SecureFileLocator.init()()
{
}

uint64_t sub_1001ADD50()
{
  return type metadata accessor for SecureFileLocator();
}

uint64_t type metadata accessor for SecureFileLocator()
{
  uint64_t result = qword_1003278C0;
  if (!qword_1003278C0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001ADDA0()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1001ADE40()
{
  return v0;
}

uint64_t sub_1001ADE70()
{
  return v0;
}

uint64_t sub_1001ADE84(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    id v3 = a2;
    return sub_1000189E4(v2, v3);
  }
  else
  {
    return j__swift_continuation_throwingResume();
  }
}

id PseudonymManager.init()()
{
  Class ObjectType = (objc_class *)swift_getObjectType();
  objc_allocWithZone((Class)IDSService);
  uint64_t v2 = v0;
  id result = sub_1001AED2C(0xD000000000000027, 0x80000001002B2250);
  if (result)
  {
    *(void *)&v2[OBJC_IVAR___GKPseudonymManager_service] = result;
    id result = [objc_allocWithZone((Class)GKFireworksPseudonymManager) initWithService:result];
    if (result)
    {
      *(void *)&v2[OBJC_IVAR___GKPseudonymManager_fwManager] = result;

      v4.receiver = v2;
      v4.Class super_class = ObjectType;
      return [super init];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t PseudonymManager.fetchPseudonym()()
{
  *(void *)(v1 + 128) = v0;
  return sub_1000111C0((uint64_t)sub_1001ADFF0);
}

uint64_t sub_1001ADFF0()
{
  sub_1000112E8();
  uint64_t v1 = *(void **)(v0[16] + OBJC_IVAR___GKPseudonymManager_fwManager);
  v0[17] = v1;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_1001AE0F8;
  uint64_t v2 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1001AE3C4;
  v0[13] = &unk_1002DE268;
  v0[14] = v2;
  [v1 provisionPseudonymIfNeeded:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1001AE0F8()
{
  sub_100010DA4();
  sub_100011168();
  sub_1000111B4();
  void *v2 = v1;
  void *v2 = *v0;
  uint64_t v4 = *(void *)(v3 + 48);
  *(void *)(v1 + 144) = v4;
  if (v4) {
    uint64_t v5 = sub_1001AE334;
  }
  else {
    uint64_t v5 = sub_1001AE1DC;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1001AE1DC()
{
  sub_100010F2C();
  uint64_t v1 = *(void **)(v0 + 120);

  if (v1)
  {
    id v2 = [v1 URI];
    id v3 = [v2 prefixedURI];

    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;

    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v7(v4, v6);
  }
  else
  {
    sub_1001AED90();
    uint64_t v9 = sub_1000169D0();
    *(void *)uint64_t v10 = 0;
    *(unsigned char *)(v10 + 8) = 2;
    swift_willThrow();
    sub_1000169D0();
    *(void *)uint64_t v11 = v9;
    *(unsigned char *)(v11 + 8) = 0;
    swift_willThrow();
    sub_1000112AC();
    return v12();
  }
}

uint64_t sub_1001AE334()
{
  sub_1000112E8();
  uint64_t v1 = *(void **)(v0 + 136);
  swift_willThrow();

  uint64_t v2 = *(void *)(v0 + 144);
  sub_1001AED90();
  sub_1000169D0();
  *(void *)uint64_t v3 = v2;
  *(unsigned char *)(v3 + 8) = 0;
  swift_willThrow();
  sub_1000112AC();
  return v4();
}

uint64_t sub_1001AE3C4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    id v4 = a3;
    return sub_1000189E4(v3, v4);
  }
  else
  {
    id v7 = a2;
    return sub_1001CE2B8(v3, (uint64_t)a2);
  }
}

uint64_t sub_1001AE4AC(const void *a1, void *a2)
{
  _DWORD v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  id v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *id v4 = v2;
  v4[1] = sub_1001AE554;
  return PseudonymManager.fetchPseudonym()();
}

uint64_t sub_1001AE554()
{
  sub_100010F2C();
  uint64_t v2 = v0;
  sub_100011168();
  uint64_t v4 = v3;
  sub_1000111B4();
  *uint64_t v5 = v4;
  id v7 = *(void **)(v6 + 16);
  uint64_t v8 = *v1;
  sub_1000111B4();
  *uint64_t v9 = v8;
  swift_task_dealloc();

  if (v2)
  {
    uint64_t v10 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    NSString v11 = 0;
    uint64_t v12 = (void *)v10;
  }
  else
  {
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v10 = 0;
    uint64_t v12 = v11;
  }
  uint64_t v13 = *(void (***)(void, void, void))(v4 + 24);
  ((void (**)(void, NSString, uint64_t))v13)[2](v13, v11, v10);

  _Block_release(v13);
  sub_1000112AC();
  return v14();
}

uint64_t PseudonymManager.revokePseudonym(_:)(uint64_t a1, uint64_t a2)
{
  uint8_t v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  return sub_1000111C0((uint64_t)sub_1001AE6D0);
}

uint64_t sub_1001AE6D0()
{
  sub_100010F2C();
  uint64_t v1 = *(void **)(v0[17] + OBJC_IVAR___GKPseudonymManager_fwManager);
  v0[18] = v1;
  id v2 = v1;
  NSString v3 = String._bridgeToObjectiveC()();
  v0[19] = v3;
  v0[2] = v0;
  v0[3] = sub_1001AE800;
  uint64_t v4 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1001ADE84;
  v0[13] = &unk_1002DE280;
  v0[14] = v4;
  [v2 revokePseudonym:v3 withCompletionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1001AE800()
{
  sub_100010DA4();
  sub_100011168();
  sub_1000111B4();
  void *v2 = v1;
  void *v2 = *v0;
  uint64_t v4 = *(void *)(v3 + 48);
  *(void *)(v1 + 160) = v4;
  if (v4) {
    uint64_t v5 = sub_1001AE944;
  }
  else {
    uint64_t v5 = sub_1001AE8E4;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1001AE8E4()
{
  sub_100010DA4();
  uint64_t v1 = *(void **)(v0 + 152);

  sub_1000112AC();
  return v2();
}

uint64_t sub_1001AE944()
{
  sub_100010F2C();
  uint64_t v1 = (void *)v0[19];
  uint64_t v2 = v0[20];
  uint64_t v3 = (void *)v0[18];
  swift_willThrow();

  sub_1001AED90();
  sub_1000169D0();
  *(void *)uint64_t v4 = v2;
  *(unsigned char *)(v4 + 8) = 1;
  swift_willThrow();
  sub_1000112AC();
  return v5();
}

uint64_t sub_1001AEA74(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v3[4] = v6;
  a3;
  uint64_t v8 = (void *)swift_task_alloc();
  void v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_1001AEB48;
  return PseudonymManager.revokePseudonym(_:)(v5, v7);
}

uint64_t sub_1001AEB48()
{
  sub_100010F2C();
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  sub_1000111B4();
  *uint64_t v5 = v4;
  uint64_t v6 = *(void **)(v3 + 16);
  uint64_t v7 = *v1;
  *uint64_t v5 = *v1;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(v3 + 24);
  if (v2)
  {
    uint64_t v9 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v9);
  }
  else
  {
    (*(void (**)(uint64_t, void))(v8 + 16))(v8, 0);
  }
  _Block_release(*(const void **)(v4 + 24));
  uint64_t v10 = *(uint64_t (**)(void))(v7 + 8);
  return v10();
}

id sub_1001AED2C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    NSString v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v3 = 0;
  }
  id v4 = [v2 initWithService:v3];

  return v4;
}

unint64_t sub_1001AED90()
{
  unint64_t result = qword_1003278E8;
  if (!qword_1003278E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003278E8);
  }
  return result;
}

uint64_t type metadata accessor for PseudonymManager()
{
  return self;
}

uint64_t initializeBufferWithCopyOfBuffer for PseudonymManagerError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  sub_1001AEE48(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_1001AEE48(uint64_t a1, unsigned __int8 a2)
{
  if (a2 <= 1u) {
    return swift_errorRetain();
  }
  return result;
}

uint64_t destroy for PseudonymManagerError(uint64_t a1)
{
  return sub_1001AEE6C(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t sub_1001AEE6C(uint64_t a1, unsigned __int8 a2)
{
  if (a2 <= 1u) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t assignWithCopy for PseudonymManagerError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  sub_1001AEE48(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = v3;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  sub_1001AEE6C(v5, v6);
  return a1;
}

uint64_t initializeWithTake for PseudonymManagerError(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t assignWithTake for PseudonymManagerError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  unsigned __int8 v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  sub_1001AEE6C(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for PseudonymManagerError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(unsigned char *)(a1 + 9))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PseudonymManagerError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1001AEFAC(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_1001AEFC4(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PseudonymManagerError()
{
  return &type metadata for PseudonymManagerError;
}

uint64_t sub_1001AEFEC()
{
  _Block_release(*(const void **)(v0 + 24));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001AF034()
{
  sub_1000112E8();
  uint64_t v2 = v0[2];
  unsigned int v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  unsigned __int8 v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *unsigned __int8 v5 = v1;
  v5[1] = sub_1001AF294;
  unsigned __int8 v6 = (uint64_t (*)(int, void *, void *))((char *)&dword_100327920 + dword_100327920);
  return v6(v2, v3, v4);
}

uint64_t sub_1001AF0E4()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001AF124()
{
  sub_1000112E8();
  uint64_t v2 = *(const void **)(v0 + 16);
  unsigned int v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1001AF1CC;
  unsigned __int8 v5 = (uint64_t (*)(const void *, void *))((char *)&dword_100327930 + dword_100327930);
  return v5(v2, v3);
}

uint64_t sub_1001AF1CC()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v1 = *v0;
  sub_1000111B4();
  void *v2 = v1;
  swift_task_dealloc();
  sub_1000112AC();
  return v3();
}

uint64_t sub_1001AF298(uint64_t a1)
{
  strcpy((char *)&v57, "relationships");
  HIWORD(v57) = -4864;
  AnyHashable.init<A>(_:)();
  sub_100169A40(a1, &v77);
  sub_1001658C4((uint64_t)&v79);
  if (v78)
  {
    sub_10000D938(&qword_100327940);
    if (swift_dynamicCast())
    {
      uint64_t v2 = v57;
      uint64_t v3 = sub_1001BAD5C();
      sub_1001699DC(v3, 0xE600000000000000, v57, v4);
      if (v80)
      {
        if (sub_1001BAB44())
        {
          sub_1001B3480(v57, v75);
          uint64_t v51 = v75[1];
          uint64_t v52 = v75[0];
          uint64_t v49 = v75[3];
          uint64_t v50 = v75[2];
          uint64_t v47 = v75[5];
          uint64_t v48 = v75[4];
          swift_bridgeObjectRelease();
          goto LABEL_10;
        }
      }
      else
      {
        sub_10001864C((uint64_t)&v79, &qword_100326FD0);
      }
      uint64_t v51 = 0;
      uint64_t v52 = 0;
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      uint64_t v47 = 0;
      uint64_t v48 = 0;
LABEL_10:
      uint64_t v5 = sub_1001BAD5C();
      sub_1001699DC(v5 & 0xFFFFFFFFFFFFLL | 0x73000000000000, 0xE700000000000000, v57, v6);
      if (v80)
      {
        sub_10000D938(&qword_100327948);
        if (sub_100010EA8())
        {
          uint64_t v45 = v57;
          uint64_t v7 = *(void *)(v57 + 16);
          if (v7)
          {
            uint64_t v8 = v57 + 32;
            swift_bridgeObjectRetain();
            uint64_t v9 = (char *)_swiftEmptyArrayStorage;
            do
            {
              sub_1000074E0(v8, (uint64_t)&v79);
              sub_1000074E0((uint64_t)&v79, (uint64_t)&v57);
              if ((swift_dynamicCast() & 1) == 0) {
                *(void *)&long long v77 = 0;
              }
              sub_100016C38((uint64_t)&v79);
              uint64_t v10 = v77;
              if ((void)v77)
              {
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v9 = sub_1001B753C(0, *((void *)v9 + 2) + 1, 1, (uint64_t)v9);
                }
                unint64_t v12 = *((void *)v9 + 2);
                unint64_t v11 = *((void *)v9 + 3);
                if (v12 >= v11 >> 1) {
                  uint64_t v9 = sub_1001B753C((char *)(v11 > 1), v12 + 1, 1, (uint64_t)v9);
                }
                *((void *)v9 + 2) = v12 + 1;
                *(void *)&v9[8 * v12 + 32] = v10;
              }
              v8 += 32;
              --v7;
            }
            while (v7);
            swift_bridgeObjectRelease_n();
          }
          else
          {
            swift_bridgeObjectRelease();
            uint64_t v9 = (char *)_swiftEmptyArrayStorage;
          }
          uint64_t v53 = *((void *)v9 + 2);
          if (v53)
          {
            swift_bridgeObjectRetain();
            uint64_t v13 = 0;
            uint64_t v56 = (char *)_swiftEmptyArrayStorage;
            do
            {
              uint64_t v14 = swift_bridgeObjectRetain();
              sub_1001B3480(v14, v76);
              uint64_t v15 = v76[0];
              uint64_t v16 = v76[1];
              uint64_t v17 = v76[2];
              uint64_t v18 = v76[3];
              uint64_t v19 = v76[4];
              uint64_t v20 = v76[5];
              swift_bridgeObjectRelease();
              sub_10001A378();
              if (*((void *)&v77 + 1))
              {
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v56 = sub_1001B7444(0, *((void *)v56 + 2) + 1, 1, (uint64_t)v56);
                }
                unint64_t v22 = *((void *)v56 + 2);
                unint64_t v21 = *((void *)v56 + 3);
                if (v22 >= v21 >> 1) {
                  uint64_t v56 = sub_1001B7444((char *)(v21 > 1), v22 + 1, 1, (uint64_t)v56);
                }
                *((void *)v56 + 2) = v22 + 1;
                unint64_t v23 = &v56[48 * v22];
                *((void *)v23 + 4) = v15;
                *((void *)v23 + 5) = v16;
                *((void *)v23 + 6) = v17;
                *((void *)v23 + 7) = v18;
                *((void *)v23 + 8) = v19;
                *((void *)v23 + 9) = v20;
              }
              ++v13;
            }
            while (v53 != v13);
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v56 = (char *)_swiftEmptyArrayStorage;
          }
          swift_bridgeObjectRelease();
          uint64_t v2 = v45;
LABEL_39:
          sub_1001699DC(1701667175, 0xE400000000000000, v2, &v79);
          if (v80)
          {
            if (sub_1001BAB44())
            {
              uint64_t v24 = v57;
              sub_1001BAA20();
              if (v80)
              {
                if (sub_100010EA8())
                {
                  uint64_t v26 = *((void *)&v57 + 1);
                  uint64_t v25 = v57;
                  goto LABEL_76;
                }
              }
              else
              {
                sub_10001864C((uint64_t)&v79, &qword_100326FD0);
              }
              sub_1001BAA20();
              if (v80)
              {
                if (sub_100010EA8())
                {
                  *(void *)&long long v79 = v57;
                  uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
                  uint64_t v26 = v39;
                  goto LABEL_76;
                }
              }
              else
              {
                sub_10001864C((uint64_t)&v79, &qword_100326FD0);
              }
              uint64_t v25 = 0;
              uint64_t v26 = 0;
LABEL_76:
              sub_1001BAD70();
              if (v80)
              {
                if (sub_100010EA8())
                {
                  uint64_t v28 = *((void *)&v57 + 1);
                  uint64_t v27 = v57;
                  goto LABEL_88;
                }
              }
              else
              {
                sub_10001864C((uint64_t)&v79, &qword_100326FD0);
              }
              sub_1001699DC(0x6449656C646E7562, 0xE800000000000000, v24, &v79);
              if (v80)
              {
                int v41 = sub_100010EA8();
                if (v41) {
                  uint64_t v28 = *((void *)&v57 + 1);
                }
                else {
                  uint64_t v28 = 0;
                }
                if (v41) {
                  uint64_t v27 = v57;
                }
                else {
                  uint64_t v27 = 0;
                }
              }
              else
              {
                sub_10001864C((uint64_t)&v79, &qword_100326FD0);
                uint64_t v28 = 0;
                uint64_t v27 = 0;
              }
LABEL_88:
              sub_1001699DC(0x6567616D69, 0xE500000000000000, v24, &v79);
              if (v80)
              {
                if (sub_100010EA8())
                {
                  uint64_t v55 = v25;
                  uint64_t v29 = *((void *)&v57 + 1);
                  uint64_t v42 = v57;
                  swift_bridgeObjectRelease();
                  uint64_t v43 = v42;
                  uint64_t v25 = v55;
                  if (!v26) {
                    goto LABEL_104;
                  }
                  goto LABEL_100;
                }
              }
              else
              {
                sub_10001864C((uint64_t)&v79, &qword_100326FD0);
              }
              sub_1001699DC(0x6C72556567616D69, 0xE800000000000000, v24, &v79);
              swift_bridgeObjectRelease();
              if (v80)
              {
                int v44 = sub_100010EA8();
                uint64_t v43 = v57;
                if (v44) {
                  uint64_t v29 = *((void *)&v57 + 1);
                }
                else {
                  uint64_t v29 = 0;
                }
                if (!v44) {
                  uint64_t v43 = 0;
                }
                if (!v26) {
                  goto LABEL_104;
                }
              }
              else
              {
                sub_10001864C((uint64_t)&v79, &qword_100326FD0);
                uint64_t v29 = 0;
                uint64_t v43 = 0;
                if (!v26)
                {
LABEL_104:
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t v25 = 0;
                  goto LABEL_46;
                }
              }
LABEL_100:
              if (v28)
              {
                if (v29)
                {
                  uint64_t v46 = v43;
                }
                else
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t v25 = 0;
                  uint64_t v26 = 0;
                  uint64_t v27 = 0;
                  uint64_t v28 = 0;
                  uint64_t v46 = 0;
                }
LABEL_48:
                sub_1001699DC(0x676E656C6C616863, 0xE900000000000065, v2, &v79);
                uint64_t v54 = v29;
                if (v80)
                {
                  uint64_t v30 = v26;
                  if ((sub_1001BAB68() & 1) == 0) {
                    goto LABEL_55;
                  }
                  sub_1001BAD70();
                  swift_bridgeObjectRelease();
                  if (v80)
                  {
                    if (sub_100010EA8())
                    {
                      uint64_t v31 = *((void *)&v57 + 1);
                      uint64_t v32 = v57;
                      goto LABEL_56;
                    }
LABEL_55:
                    uint64_t v32 = 0;
                    uint64_t v31 = 0;
LABEL_56:
                    sub_1001699DC(0x6F6272656461656CLL, 0xEB00000000647261, v2, &v79);
                    swift_bridgeObjectRelease();
                    if (v80)
                    {
                      if ((sub_1001BAB68() & 1) == 0) {
                        goto LABEL_69;
                      }
                      uint64_t v33 = v57;
                      sub_1001699DC(25705, 0xE200000000000000, v57, &v79);
                      if (v80)
                      {
                        if (sub_100010EA8())
                        {
                          uint64_t v34 = *((void *)&v57 + 1);
                          uint64_t v35 = v57;
                          sub_1001699DC(1701667182, 0xE400000000000000, v33, &v79);
                          swift_bridgeObjectRelease();
                          if (v80)
                          {
                            int v36 = swift_dynamicCast();
                            uint64_t v38 = *((void *)&v57 + 1);
                            uint64_t v37 = v57;
                            if (!v36)
                            {
                              uint64_t v37 = 0;
                              uint64_t v38 = 0;
                            }
                            goto LABEL_71;
                          }
                          sub_10001864C((uint64_t)&v79, &qword_100326FD0);
LABEL_70:
                          uint64_t v37 = 0;
                          uint64_t v38 = 0;
LABEL_71:
                          *(void *)&long long v57 = v52;
                          *((void *)&v57 + 1) = v51;
                          uint64_t v58 = v50;
                          uint64_t v59 = v49;
                          uint64_t v60 = v48;
                          uint64_t v61 = v47;
                          uint64_t v62 = v56;
                          uint64_t v63 = v25;
                          uint64_t v64 = v30;
                          uint64_t v65 = v27;
                          uint64_t v66 = v28;
                          uint64_t v67 = v46;
                          uint64_t v68 = v54;
                          uint64_t v69 = v32;
                          uint64_t v70 = v31;
                          uint64_t v71 = v35;
                          uint64_t v72 = v34;
                          uint64_t v73 = v37;
                          uint64_t v74 = v38;
                          AppMetadataNetworkFetcher.init(batchTask:)(&v57);
                          goto LABEL_72;
                        }
                        swift_bridgeObjectRelease();
LABEL_69:
                        uint64_t v35 = 0;
                        uint64_t v34 = 0;
                        goto LABEL_70;
                      }
                      swift_bridgeObjectRelease();
                    }
                    sub_10001864C((uint64_t)&v79, &qword_100326FD0);
                    goto LABEL_69;
                  }
                }
                else
                {
                  uint64_t v30 = v26;
                }
                sub_10001864C((uint64_t)&v79, &qword_100326FD0);
                goto LABEL_55;
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v25 = 0;
              uint64_t v26 = 0;
              uint64_t v27 = 0;
LABEL_47:
              uint64_t v46 = 0;
              uint64_t v29 = 0;
              goto LABEL_48;
            }
          }
          else
          {
            sub_10001864C((uint64_t)&v79, &qword_100326FD0);
          }
          uint64_t v25 = 0;
          uint64_t v26 = 0;
LABEL_46:
          uint64_t v27 = 0;
          uint64_t v28 = 0;
          goto LABEL_47;
        }
      }
      else
      {
        sub_10001864C((uint64_t)&v79, &qword_100326FD0);
      }
      uint64_t v56 = 0;
      goto LABEL_39;
    }
  }
  else
  {
    sub_10001864C((uint64_t)&v77, &qword_100326FD0);
  }
  sub_1001AFB80(&v57);
LABEL_72:
  sub_10001A378();
  return sub_10001A378();
}

void sub_1001AFB80(_OWORD *a1)
{
  *a1 = xmmword_100250240;
  bzero(a1 + 1, 0x88uLL);
}

uint64_t sub_1001AFB98(uint64_t a1, uint64_t a2)
{
  **(void **)(*(void *)(a1 + 64) + 40) = a2;
  return swift_continuation_resume();
}

uint64_t sub_1001AFBB8()
{
  return sub_1001AFBC4();
}

uint64_t sub_1001AFBC4()
{
  return swift_continuation_resume();
}

void sub_1001AFC18(uint64_t a1)
{
  uint64_t v2 = sub_1001B8AB8(a1);
  if (v4) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return;
  }
  if (v2 == 1 << *(unsigned char *)(a1 + 32)) {
    sub_100017040();
  }
  else {
    sub_1001B8B38(&v5, v2, v3, 0, a1);
  }
}

uint64_t sub_1001AFCA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = v5;
  if (v4)
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1+ ((*(unsigned __int8 *)(*(void *)(v5 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80)), v5);
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 1;
  }

  return sub_10000D97C(a2, v7, 1, v6);
}

uint64_t sub_1001AFD48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = type metadata accessor for MultiplayerActivityEventFilter.TrackedSession(0);
  uint64_t v6 = v5;
  if (v4)
  {
    sub_1001B8C10(a1+ ((*(unsigned __int8 *)(*(void *)(v5 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80)), a2);
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 1;
  }

  return sub_10000D97C(a2, v7, 1, v6);
}

uint64_t sub_1001AFDF0()
{
  sub_100010DA4();
  v0[30] = v1;
  uint64_t v2 = type metadata accessor for Logger();
  v0[31] = v2;
  sub_1000111CC(v2);
  v0[32] = v3;
  v0[33] = sub_100008DE4();
  v0[34] = swift_task_alloc();
  sub_100017040();
  return _swift_task_switch(v4, v5, v6);
}

#error "1001AFFFC: call analysis failed (funcsize=469)"

uint64_t sub_1001B062C()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100017040();
  return _swift_task_switch(v3, v4, v5);
}

#error "1001B0988: call analysis failed (funcsize=352)"

uint64_t sub_1001B0CDC()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_100017040();
  return _swift_task_switch(v3, v4, v5);
}

#error "1001B101C: call analysis failed (funcsize=352)"

uint64_t sub_1001B1370(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4449726579616C70 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x4143726579616C70 && a2 == 0xEA00000000004449;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x5255726174617661 && a2 == 0xE90000000000004CLL)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_1001B14D8(char a1)
{
  if (!a1) {
    return 0x4449726579616C70;
  }
  if (a1 == 1) {
    return 0x4143726579616C70;
  }
  return 0x5255726174617661;
}

#error "1001B157C: call analysis failed (funcsize=17)"

void sub_1001B1588()
{
  sub_100010FB8();
  uint64_t v2 = v1;
  sub_10000D938(&qword_1003279D0);
  sub_100011254();
  __chkstk_darwin(v3, v4);
  sub_1001BAD90();
  sub_1001B97C8();
  sub_100017514();
  if (v0)
  {
    sub_100016C38(v2);
  }
  else
  {
    sub_1001BAA7C();
    sub_1001BAA60();
    sub_1001BAC30();
    uint64_t v5 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    sub_1001BAC10(v5);
    sub_1001BAA48();
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v6 = sub_1000170BC();
    v7(v6);
    swift_bridgeObjectRetain();
    sub_100016C38(v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000174B4();
  }
  sub_1001BAC58();
  sub_1001BA86C();
}

uint64_t sub_1001B173C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x44496D616461 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x4449656C646E7562 && a2 == 0xE800000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x4C52556567616D69 && a2 == 0xE800000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_1001B188C()
{
  return 3;
}

uint64_t sub_1001B1894()
{
  return 0;
}

uint64_t sub_1001B18A0(char a1)
{
  if (!a1) {
    return 0x44496D616461;
  }
  if (a1 == 1) {
    return 0x4449656C646E7562;
  }
  return 0x4C52556567616D69;
}

#error "1001B1938: call analysis failed (funcsize=17)"

void sub_1001B1944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100010FB8();
  a23 = v26;
  a24 = v27;
  uint64_t v43 = v28;
  uint64_t v30 = v29;
  uint64_t v31 = v24;
  uint64_t v33 = v32;
  uint64_t v35 = sub_10000D938(v34);
  sub_100011254();
  __chkstk_darwin(v36, v37);
  sub_1000171E8();
  sub_100165918(v33, v33[3]);
  v30();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  a14 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v25)
  {
    uint64_t v38 = v31[2];
    uint64_t v39 = v31[3];
    a13 = 1;
    v43(v38, v39, &a13, v35);
    uint64_t v40 = v31[4];
    uint64_t v41 = v31[5];
    a12 = 2;
    v43(v40, v41, &a12, v35);
  }
  sub_10019DC14();
  v42();
  sub_1001BA86C();
}

void sub_1001B1A9C()
{
  sub_100010FB8();
  uint64_t v2 = v1;
  sub_10000D938(&qword_1003279B8);
  sub_100011254();
  __chkstk_darwin(v3, v4);
  sub_1001BAD90();
  sub_1001B977C();
  sub_100017514();
  if (v0)
  {
    sub_100016C38(v2);
  }
  else
  {
    sub_1001BAA7C();
    sub_1001BAA60();
    sub_1001BAC30();
    uint64_t v5 = KeyedDecodingContainer.decode(_:forKey:)();
    sub_1001BAC10(v5);
    sub_1001BAA48();
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v6 = sub_1000170BC();
    v7(v6);
    swift_bridgeObjectRetain();
    sub_100016C38(v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000174B4();
  }
  sub_1001BAC58();
  sub_1001BA86C();
}

void sub_1001B1C50()
{
}

uint64_t sub_1001B1C78(uint64_t a1, uint64_t a2)
{
  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

Swift::Int sub_1001B1CE8()
{
  return Hasher._finalize()();
}

uint64_t sub_1001B1D2C()
{
  return 25705;
}

void sub_1001B1D38()
{
  sub_100010FB8();
  uint64_t v1 = v0;
  sub_10000D938(&qword_1003279F8);
  sub_100011254();
  __chkstk_darwin(v2, v3);
  sub_1001ADE58();
  sub_100165918(v1, v1[3]);
  sub_1001B9814();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  sub_10018735C();
  v4();
  sub_1001BA86C();
}

uint64_t sub_1001B1E2C(uint64_t a1)
{
  sub_10000D938(&qword_1003279E8);
  sub_100011254();
  __chkstk_darwin(v4, v5);
  sub_100010E18();
  sub_1001BAD90();
  sub_1001B9814();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v1 = KeyedDecodingContainer.decode(_:forKey:)();
    sub_10019DC14();
    v6();
  }
  sub_100016C38(a1);
  return v1;
}

uint64_t sub_1001B1F40(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1001B2008()
{
  return 2;
}

uint64_t sub_1001B2010(char a1)
{
  if (a1) {
    return 1701667182;
  }
  else {
    return 25705;
  }
}

void sub_1001B2034()
{
  sub_100010FB8();
  BOOL v2 = v1;
  sub_10000D938(&qword_100327AA0);
  sub_100011254();
  __chkstk_darwin(v3, v4);
  sub_100010E18();
  sub_100165918(v2, v2[3]);
  sub_1001B9D90();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v0) {
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  uint64_t v5 = sub_1001877A4();
  v6(v5);
  sub_1001BA86C();
}

void sub_1001B2160()
{
  sub_100010FB8();
  BOOL v2 = v1;
  sub_10000D938(&qword_100327A90);
  sub_100011254();
  __chkstk_darwin(v3, v4);
  sub_1001ADE58();
  sub_100165918(v2, v2[3]);
  sub_1001B9D90();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    sub_100016C38((uint64_t)v2);
  }
  else
  {
    KeyedDecodingContainer.decode(_:forKey:)();
    sub_1001BAA60();
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    sub_10018735C();
    v5();
    swift_bridgeObjectRetain();
    sub_100016C38((uint64_t)v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_1001BA86C();
}

uint64_t sub_1001B2310(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x726579616C70 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x73726579616C70 && a2 == 0xE700000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 1701667175 && a2 == 0xE400000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x676E656C6C616863 && a2 == 0xE900000000000065;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else if (a1 == 0x6F6272656461656CLL && a2 == 0xEB00000000647261)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v10) {
            return 4;
          }
          else {
            return 5;
          }
        }
      }
    }
  }
}

uint64_t sub_1001B252C()
{
  return 5;
}

uint64_t sub_1001B2534(char a1)
{
  uint64_t result = 0x726579616C70;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x73726579616C70;
      break;
    case 2:
      uint64_t result = 1701667175;
      break;
    case 3:
      uint64_t result = 0x676E656C6C616863;
      break;
    case 4:
      uint64_t result = 0x6F6272656461656CLL;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1001B25E4()
{
  sub_100010FB8();
  BOOL v2 = v1;
  sub_10000D938(&qword_100327A40);
  sub_100011254();
  __chkstk_darwin(v3, v4);
  sub_100017724();
  sub_100165918(v2, v2[3]);
  sub_1001B9860();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_10001A378();
  sub_1001BAB2C();
  sub_1001B9BF0();
  sub_100018460();
  if (!v0)
  {
    sub_10001A378();
    sub_1001BAB2C();
    sub_1001BACF0(1);
    sub_10000D938(&qword_100327A18);
    sub_1001B9C3C(&qword_100327A58, (void (*)(void))sub_1001B9BF0);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_10001A378();
    sub_1001BAB2C();
    sub_1001BACF0(2);
    sub_1001B9CAC();
    sub_100018460();
    sub_10001A378();
    sub_1001BAB2C();
    sub_1001BACF0(3);
    sub_1001B9CF8();
    sub_100018460();
    sub_10001A378();
    sub_1001BAB2C();
    sub_1001BACF0(4);
    sub_1001B9D44();
    sub_100018460();
  }
  sub_10019DC14();
  v5();
  sub_1001BAC58();
  sub_1001BA86C();
}

void sub_1001B2858()
{
  sub_100010FB8();
  BOOL v2 = v1;
  uint64_t v52 = v3;
  uint64_t v53 = sub_10000D938(&qword_100327A00);
  sub_100011254();
  uint64_t v5 = v4;
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100165918(v2, v2[3]);
  sub_1001B9860();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    sub_100016C38((uint64_t)v2);
  }
  else
  {
    uint64_t v50 = v2;
    uint64_t v51 = v5;
    LOBYTE(v54[0]) = 0;
    sub_1001B98AC();
    sub_1001BACC4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v11 = v55;
    uint64_t v10 = v56;
    uint64_t v12 = v57;
    uint64_t v47 = v58;
    uint64_t v48 = v9;
    uint64_t v14 = v59;
    uint64_t v13 = v60;
    sub_10000D938(&qword_100327A18);
    LOBYTE(v54[0]) = 1;
    uint64_t v44 = v11;
    uint64_t v45 = v10;
    uint64_t v49 = v13;
    sub_10018C210(v11, v10);
    sub_1001B9C3C(&qword_100327A20, (void (*)(void))sub_1001B98AC);
    sub_1001BACC4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v46 = v14;
    uint64_t v36 = v12;
    uint64_t v15 = v55;
    LOBYTE(v54[0]) = 2;
    sub_1001B98F8();
    swift_bridgeObjectRetain();
    sub_1001BACC4();
    uint64_t v35 = 0;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v37 = v15;
    uint64_t v16 = v56;
    uint64_t v17 = v58;
    uint64_t v18 = v59;
    uint64_t v19 = v60;
    LOBYTE(v54[0]) = 3;
    uint64_t v43 = v55;
    uint64_t v20 = v57;
    sub_1001B9944(v55, v56);
    sub_1001B9994();
    sub_1001BACC4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v34 = v16;
    uint64_t v41 = v17;
    uint64_t v42 = v20;
    uint64_t v39 = v19;
    uint64_t v40 = v18;
    uint64_t v22 = v55;
    uint64_t v21 = v56;
    sub_1001B99E0();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v38 = v21;
    uint64_t v23 = sub_1000182B8();
    v24(v23);
    uint64_t v51 = v75;
    uint64_t v48 = (char *)v76;
    uint64_t v35 = v77;
    uint64_t v25 = v43;
    uint64_t v53 = v74;
    v54[0] = v44;
    v54[1] = v45;
    uint64_t v33 = v22;
    v54[2] = v36;
    v54[3] = v47;
    v54[4] = v46;
    v54[5] = v49;
    v54[6] = v37;
    v54[7] = v43;
    v54[8] = v16;
    v54[9] = v42;
    v54[10] = v41;
    v54[11] = v40;
    v54[12] = v39;
    v54[13] = v22;
    v54[14] = v21;
    v54[15] = v74;
    v54[16] = v75;
    v54[17] = v76;
    v54[18] = v77;
    sub_1001B9A2C(v54);
    swift_bridgeObjectRelease();
    sub_10018C144(v25, v16);
    uint64_t v26 = v37;
    swift_bridgeObjectRelease();
    uint64_t v28 = v44;
    uint64_t v27 = v45;
    uint64_t v29 = v36;
    uint64_t v31 = v46;
    uint64_t v30 = v47;
    uint64_t v32 = v49;
    sub_10018C144(v44, v45);
    sub_100016C38((uint64_t)v50);
    uint64_t v55 = v28;
    uint64_t v56 = v27;
    uint64_t v57 = v29;
    uint64_t v58 = v30;
    uint64_t v59 = v31;
    uint64_t v60 = v32;
    uint64_t v61 = v26;
    uint64_t v62 = v43;
    uint64_t v63 = v34;
    uint64_t v64 = v42;
    uint64_t v65 = v41;
    uint64_t v66 = v40;
    uint64_t v67 = v39;
    uint64_t v68 = v33;
    uint64_t v69 = v38;
    uint64_t v70 = v53;
    uint64_t v71 = v51;
    uint64_t v72 = v48;
    uint64_t v73 = v35;
    sub_1001B9B30(&v55);
    memcpy(v52, v54, 0x98uLL);
  }
  sub_1001BAC58();
  sub_1001BA86C();
}

uint64_t sub_1001B2E28()
{
  return sub_1001B14D8(*v0);
}

uint64_t sub_1001B2E30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001B1370(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001B2E58(uint64_t a1)
{
  unint64_t v2 = sub_1001B97C8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B2E94(uint64_t a1)
{
  unint64_t v2 = sub_1001B97C8();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1001B2ED0@<D0>(_OWORD *a1@<X8>)
{
  sub_1001B1588();
  if (!v1)
  {
    *a1 = v4;
    a1[1] = v5;
    double result = *(double *)&v6;
    a1[2] = v6;
  }
  return result;
}

Swift::Int sub_1001B2F14()
{
  return sub_10018863C(*v0);
}

uint64_t sub_1001B2F30()
{
  return sub_1001B18A0(*v0);
}

uint64_t sub_1001B2F38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001B173C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001B2F60()
{
  return sub_1001B1894();
}

uint64_t sub_1001B2F80@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1001B188C();
  *a1 = result;
  return result;
}

uint64_t sub_1001B2FA8(uint64_t a1)
{
  unint64_t v2 = sub_1001B977C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B2FE4(uint64_t a1)
{
  unint64_t v2 = sub_1001B977C();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1001B3020@<D0>(_OWORD *a1@<X8>)
{
  sub_1001B1A9C();
  if (!v1)
  {
    *a1 = v4;
    a1[1] = v5;
    double result = *(double *)&v6;
    a1[2] = v6;
  }
  return result;
}

Swift::Int sub_1001B3070()
{
  return Hasher._finalize()();
}

uint64_t sub_1001B30B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001B1C78(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1001B30E0()
{
  return sub_1001B1894();
}

uint64_t sub_1001B30FC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100163730();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1001B3128(uint64_t a1)
{
  unint64_t v2 = sub_1001B9814();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B3164(uint64_t a1)
{
  unint64_t v2 = sub_1001B9814();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001B31A0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1001B1E2C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

void sub_1001B31CC()
{
}

Swift::Int sub_1001B31E8()
{
  return _s14GameDaemonCore18AppMetadataFetcherC0F5ErrorO9hashValueSivg_0(*v0);
}

uint64_t sub_1001B31F0()
{
  return sub_1001B2010(*v0);
}

uint64_t sub_1001B31F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001B1F40(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001B3220@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1001B2008();
  *a1 = result;
  return result;
}

uint64_t sub_1001B3248(uint64_t a1)
{
  unint64_t v2 = sub_1001B9D90();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B3284(uint64_t a1)
{
  unint64_t v2 = sub_1001B9D90();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1001B32C0(void *a1@<X8>)
{
  sub_1001B2160();
  if (!v1)
  {
    *a1 = v3;
    a1[1] = v4;
    a1[2] = v5;
    a1[3] = v6;
  }
}

void sub_1001B32F0()
{
}

uint64_t sub_1001B3310()
{
  return sub_1001B2534(*v0);
}

uint64_t sub_1001B3318@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001B2310(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001B3340@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1001B252C();
  *a1 = result;
  return result;
}

uint64_t sub_1001B3368(uint64_t a1)
{
  unint64_t v2 = sub_1001B9860();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B33A4(uint64_t a1)
{
  unint64_t v2 = sub_1001B9860();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1001B33E0(void *a1@<X8>)
{
  sub_1001B2858();
  if (!v1) {
    memcpy(a1, __src, 0x98uLL);
  }
}

void sub_1001B342C()
{
  memcpy(__dst, v0, sizeof(__dst));
  sub_1001B25E4();
}

uint64_t sub_1001B3480@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_1001699DC(25705, 0xE200000000000000, a1, &v13);
  if (!v14)
  {
    sub_10001864C((uint64_t)&v13, &qword_100326FD0);
LABEL_5:
    sub_1001699DC(0x6449726579616C70, 0xE800000000000000, a1, &v13);
    if (v14)
    {
      int v6 = swift_dynamicCast();
      if (v6) {
        uint64_t v4 = v16;
      }
      else {
        uint64_t v4 = 0;
      }
      if (v6) {
        uint64_t v5 = v15;
      }
      else {
        uint64_t v5 = 0;
      }
    }
    else
    {
      sub_10001864C((uint64_t)&v13, &qword_100326FD0);
      uint64_t v4 = 0;
      uint64_t v5 = 0;
    }
    goto LABEL_13;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t v5 = v15;
  uint64_t v4 = v16;
LABEL_13:
  sub_1001699DC(0x4143726579616C70, 0xEA00000000004449, a1, &v13);
  if (v14)
  {
    int v7 = swift_dynamicCast();
    if (v7) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = 0;
    }
    if (v7) {
      uint64_t v9 = v16;
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    sub_10001864C((uint64_t)&v13, &qword_100326FD0);
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  sub_1001699DC(0x7255726174617661, 0xE90000000000006CLL, a1, &v13);
  if (!v14)
  {
    sub_10001864C((uint64_t)&v13, &qword_100326FD0);
    uint64_t v11 = 0;
    uint64_t result = 0;
    if (v4) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  int v10 = swift_dynamicCast();
  uint64_t v11 = v15;
  if (v10)
  {
    uint64_t result = v16;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t result = 0;
  }
  if (!v4)
  {
LABEL_26:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v11 = 0;
    uint64_t result = 0;
  }
LABEL_27:
  *a2 = v5;
  a2[1] = v4;
  a2[2] = v8;
  a2[3] = v9;
  a2[4] = v11;
  a2[5] = result;
  return result;
}

uint64_t sub_1001B36AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[17] = a4;
  v5[18] = a5;
  v5[15] = a2;
  v5[16] = a3;
  v5[14] = a1;
  sub_100017040();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_1001B36D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v23 = v22[16];
  _OWORD v22[2] = v22[15];
  void v22[3] = v23;
  void v22[4] = 8222587;
  void v22[5] = 0xE300000000000000;
  v22[6] = 3682865;
  v22[7] = 0xE300000000000000;
  unint64_t v24 = sub_100166A7C();
  v22[8] = sub_1001BA9F8();
  v22[10] = 8218747;
  v22[9] = v25;
  v22[11] = 0xE300000000000000;
  v22[12] = 3682865;
  v22[13] = 0xE300000000000000;
  sub_1001BA9F8();
  swift_bridgeObjectRelease();
  uint64_t v26 = type metadata accessor for URL();
  v22[19] = v26;
  sub_100011254();
  uint64_t v28 = v27;
  v22[20] = v27;
  uint64_t v29 = sub_1000171A0();
  v22[21] = v29;
  uint64_t v30 = sub_10000D938(&qword_100327E70);
  sub_100017A38();
  uint64_t v31 = sub_1000171A0();
  URL.init(string:)();
  sub_1001BABE4(v31, 1, v26);
  if (v32)
  {
    swift_bridgeObjectRelease();
    sub_10001864C(v31, &qword_100327E70);
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100017FD0();
    sub_10000D97C(v33, v34, v35, v26);
    sub_1000112AC();
    return v36();
  }
  else
  {
    uint64_t v38 = v22[18];
    uint64_t v54 = v22[17];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 32))(v29, v31, v26);
    swift_task_dealloc();
    id v39 = [self gameCenterClient:v24 v24 v24];
    v22[22] = v39;
    NSString v40 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v41 = [v40 _gkSHA256Hash];

    uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v44 = v43;

    swift_bridgeObjectRetain();
    v45._uint64_t countAndFlagsBits = 95;
    v45._object = (void *)0xE100000000000000;
    String.append(_:)(v45);
    v46._uint64_t countAndFlagsBits = v42;
    v46._object = v44;
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    v22[23] = v38;
    uint64_t v47 = (void *)swift_task_alloc();
    v22[24] = v47;
    v47[2] = v39;
    v47[3] = v29;
    v47[4] = v54;
    v47[5] = v38;
    uint64_t v48 = (void *)swift_task_alloc();
    v22[25] = v48;
    void *v48 = v22;
    v48[1] = sub_1001B3A6C;
    sub_100017040();
    return withCheckedContinuation<A>(isolation:function:_:)(v49, v50, v51, 0xD000000000000028, v52, v53, v47, v30, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22);
  }
}

uint64_t sub_1001B3A6C()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  sub_100017040();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1001B3B6C()
{
  uint64_t v1 = sub_1000173E8();
  v2(v1);
  swift_task_dealloc();
  sub_1000112AC();
  return v3();
}

void sub_1001B3BE4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_100163CE4(0, &qword_100327960);
  id v10 = a2;
  id v43 = sub_1001B3F48(0, a2, 0);
  if (v43)
  {
    URL._bridgeToObjectiveC()(v11);
    uint64_t v42 = v12;
    id v41 = @"GKBulletins";
    NSString v40 = String._bridgeToObjectiveC()();
    id v39 = &v34;
    uint64_t v37 = type metadata accessor for URL();
    uint64_t v13 = *(void *)(v37 - 8);
    uint64_t v14 = *(void *)(v13 + 64);
    __chkstk_darwin(v37, v15);
    uint64_t v16 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, uint64_t))(v13 + 16))(v16, a3);
    uint64_t v17 = sub_10000D938(&qword_100327968);
    uint64_t v38 = &v34;
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v19 = v18;
    uint64_t v36 = a4;
    uint64_t v20 = *(void *)(v18 + 64);
    __chkstk_darwin(v17, v21);
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))((char *)&v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v17);
    uint64_t v22 = *(unsigned __int8 *)(v13 + 80);
    uint64_t v35 = a5;
    uint64_t v23 = (v22 + 16) & ~v22;
    unint64_t v24 = (v14 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v25 = (*(unsigned __int8 *)(v19 + 80) + v24 + 16) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
    uint64_t v26 = swift_allocObject();
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v26 + v23, v16, v37);
    uint64_t v27 = (void *)(v26 + v24);
    uint64_t v28 = v35;
    void *v27 = v36;
    v27[1] = v28;
    (*(void (**)(unint64_t, char *, uint64_t))(v19 + 32))(v26 + v25, (char *)&v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), v17);
    aBlock[4] = sub_1001B8604;
    aBlock[5] = v26;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001B4198;
    aBlock[3] = &unk_1002DE3A0;
    uint64_t v29 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t v30 = v40;
    char v32 = v42;
    id v31 = v43;
    uint64_t v33 = v41;
    [v43 requestImageDataForURL:v42 subdirectory:v41 fileName:v40 handler:v29];
    _Block_release(v29);
  }
  else
  {
    __break(1u);
  }
}

id sub_1001B3F48(void *a1, void *a2, void *a3)
{
  id v6 = [(id)swift_getObjCClassFromMetadata() serviceWithTransport:a1 forClient:a2 credential:a3];

  return v6;
}

uint64_t sub_1001B3FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  unsigned int v9 = [v7 isAuthorizedForGamesWithImageData:isa];

  if (v9
    && (id v10 = self,
        URL._bridgeToObjectiveC()(v11),
        uint64_t v13 = v12,
        uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(),
        sub_1001B8840((uint64_t)v13, v14, v15, a4, a5, v10),
        uint64_t v17 = v16,
        v13,
        v17))
  {
    uint64_t v18 = sub_10000D938(&qword_100327E70);
    __chkstk_darwin(v18 - 8, v19);
    URL.init(string:)();
    swift_bridgeObjectRelease();
    sub_10000D938(&qword_100327968);
  }
  else
  {
    uint64_t v20 = sub_10000D938(&qword_100327E70);
    __chkstk_darwin(v20 - 8, v21);
    uint64_t v23 = (char *)&v26 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v24 = type metadata accessor for URL();
    sub_10000D97C((uint64_t)v23, 1, 1, v24);
    sub_10000D938(&qword_100327968);
  }
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_1001B4198(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(uint64_t, unint64_t))(a1 + 32);
  swift_retain();
  id v4 = a2;
  uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v7 = v6;

  v3(v5, v7);
  sub_100169274(v5, v7);

  return swift_release();
}

uint64_t sub_1001B4220@<X0>(uint64_t a1@<X0>, void (*a2)(char *, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v70 = type metadata accessor for Logger();
  sub_100011254();
  uint64_t v7 = v6;
  uint64_t v10 = __chkstk_darwin(v8, v9);
  uint64_t v12 = (char *)v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v10, v13);
  uint64_t v16 = (char *)v64 - v15;
  __chkstk_darwin(v14, v17);
  uint64_t v19 = (char *)v64 - v18;
  id v20 = [self configurationWithPointSize:4 weight:3 scale:40.0];
  sub_100163CE4(0, &qword_100327978);
  id v21 = v20;
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_1001877A4();
  id v24 = sub_1001B5870(v22, v23, v20);
  if (!v24)
  {
    uint64_t v28 = 0;
LABEL_9:
    static GKLog.daemon.getter();
    swift_bridgeObjectRetain_n();
    uint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v69 = a3;
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      uint64_t v50 = swift_slowAlloc();
      uint64_t v67 = v28;
      uint64_t v71 = v50;
      id v68 = v21;
      *(_DWORD *)uint64_t v49 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v51 = sub_1001877A4();
      uint64_t v73 = sub_100174CE4(v51, v52, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "BulletinHelpers assembleSymbolAttachmentURL failed to create symbol: %s", v49, 0xCu);
      swift_arrayDestroy();
      sub_100010D7C();
      sub_100010D7C();

      sub_10019DC14();
      v54();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v70);
    }
    type metadata accessor for URL();
    sub_100017FD0();
    return sub_10000D97C(v55, v56, v57, v58);
  }
  unint64_t v25 = v24;
  uint64_t v66 = v7;
  id v26 = [self labelColor];
  id v27 = [v25 imageWithTintColor:v26];

  uint64_t v28 = (UIImage *)sub_1001B58F0(8.0, 8.0);
  uint64_t v29 = UIImagePNGRepresentation(v28);
  if (!v29)
  {
    uint64_t v7 = v66;
    goto LABEL_9;
  }
  uint64_t v30 = v29;
  v64[3] = v12;
  uint64_t v67 = v28;
  id v68 = v21;
  uint64_t v69 = a3;
  uint64_t v65 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v32 = v31;

  uint64_t v33 = type metadata accessor for URL();
  sub_100011254();
  uint64_t v35 = v34;
  __chkstk_darwin(v36, v37);
  sub_100017724();
  uint64_t v38 = sub_10000D938(&qword_100327E70);
  uint64_t v39 = sub_1000170D0(v38);
  __chkstk_darwin(v39, v40);
  sub_1000171E8();
  uint64_t v71 = a1;
  uint64_t v72 = a2;
  swift_bridgeObjectRetain();
  v41._uint64_t countAndFlagsBits = 1735290926;
  v41._object = (void *)0xE400000000000000;
  String.append(_:)(v41);
  sub_1001B5AEC(v71, v72, (uint64_t)v28);
  swift_bridgeObjectRelease();
  sub_1001BABE4((uint64_t)v28, 1, v33);
  if (!v42)
  {
    v64[1] = v35;
    v64[2] = v64;
    uint64_t v59 = *(void (**)(uint64_t, UIImage *, uint64_t))(v35 + 32);
    v59(a3, v28, v33);
    uint64_t v60 = v65;
    Data.write(to:options:)();

    sub_100169274(v60, v32);
    uint64_t v62 = v69;
    v59(v69, (UIImage *)a3, v33);
    return sub_10000D97C(v62, 0, 1, v33);
  }
  uint64_t v43 = v65;
  sub_10001864C((uint64_t)v28, &qword_100327E70);
  static GKLog.daemon.getter();
  uint64_t v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v44, v45))
  {
    Swift::String v46 = (uint8_t *)sub_100018370();
    *(_WORD *)Swift::String v46 = 0;
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "BulletinHelpers assembleSymbolAttachmentURL failed to create disk path", v46, 2u);
    sub_100010D7C();
    sub_100169274(v43, v32);
  }
  else
  {

    sub_100169274(v43, v32);
  }
  uint64_t v61 = v66;

  (*(void (**)(char *, uint64_t))(v61 + 8))(v19, v70);
  sub_100017FD0();
  uint64_t v58 = v33;
  return sub_10000D97C(v55, v56, v57, v58);
}

uint64_t sub_1001B49B8()
{
  sub_100010DA4();
  v0[17] = v1;
  v0[18] = v2;
  v0[15] = v3;
  v0[16] = v4;
  v0[14] = v5;
  uint64_t v6 = type metadata accessor for Logger();
  v0[19] = v6;
  sub_1000111CC(v6);
  v0[20] = v7;
  v0[21] = sub_100008DE4();
  v0[22] = swift_task_alloc();
  sub_100017040();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_1001B4A58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_1001BA914();
  sub_1001BACD0();
  uint64_t v74 = v22 + 10;
  uint64_t v72 = v22 + 2;
  uint64_t v73 = v22 + 12;
  static GKLog.daemon.getter();
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v23, v24))
  {
    unint64_t v25 = (uint8_t *)sub_100018370();
    *(_WORD *)unint64_t v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "BulletinHelpers assemblePlayerAvatarURL", v25, 2u);
    sub_100010D7C();
  }
  uint64_t v26 = v22[20];
  uint64_t v28 = v22[15];
  uint64_t v27 = v22[16];

  uint64_t v71 = *(void (**)(void))(v26 + 8);
  sub_1001BAAB0();
  v29();
  _OWORD v22[2] = v28;
  void v22[3] = v27;
  void v22[4] = 8222587;
  void v22[5] = 0xE300000000000000;
  v22[6] = 3682865;
  v22[7] = 0xE300000000000000;
  unint64_t v30 = sub_100166A7C();
  sub_100010A80();
  v22[8] = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v22[9] = v31;
  v22[10] = 8218747;
  v22[11] = 0xE300000000000000;
  v22[12] = 3682865;
  v22[13] = 0xE300000000000000;
  sub_100010A80();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  uint64_t v32 = type metadata accessor for URL();
  v22[23] = v32;
  sub_100011254();
  uint64_t v34 = v33;
  v22[24] = v33;
  uint64_t v35 = sub_1000171A0();
  v22[25] = v35;
  sub_10000D938(&qword_100327E70);
  sub_100017A38();
  uint64_t v36 = sub_1000171A0();
  URL.init(string:)();
  sub_1001BABE4(v36, 1, v32);
  if (v37)
  {
    swift_bridgeObjectRelease();
    sub_10001864C(v36, &qword_100327E70);
    swift_task_dealloc();
    swift_task_dealloc();
    static GKLog.daemon.getter();
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)sub_100018370();
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "BulletinHelpers assemblePlayerAvatarURL invalid url", v40, 2u);
      sub_100010D7C();
    }
    uint64_t v41 = v22[14];

    sub_1001BAAB0();
    v71();
    sub_10000D97C(v41, 1, 1, v32);
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000112AC();
    sub_100011C48();
    return v43(v42, v43, v44, v45, v46, v47, v48, v49, &type metadata for String, v30, v30, v30, v71, v72, v73, v74, v22 + 8, a18, a19,
             a20,
             a21,
             a22);
  }
  else
  {
    uint64_t v51 = v22[18];
    uint64_t v75 = v22[17];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32))(v35, v36, v32);
    swift_task_dealloc();
    id v52 = [self gameCenterClient];
    v22[26] = v52;
    NSString v53 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v54 = [v53 _gkSHA256Hash];

    uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v57 = v56;

    swift_bridgeObjectRetain();
    v58._uint64_t countAndFlagsBits = 95;
    v58._object = (void *)0xE100000000000000;
    String.append(_:)(v58);
    v59._uint64_t countAndFlagsBits = v55;
    v59._object = v57;
    String.append(_:)(v59);
    swift_bridgeObjectRelease();
    v22[27] = v51;
    uint64_t v60 = (void *)swift_task_alloc();
    v22[28] = v60;
    v60[2] = v52;
    v60[3] = v35;
    v60[4] = v75;
    v60[5] = v51;
    v60[6] = v75;
    v60[7] = v51;
    uint64_t v61 = (void *)swift_task_alloc();
    v22[29] = v61;
    *uint64_t v61 = v22;
    v61[1] = sub_1001B4EF0;
    sub_100017040();
    sub_100011C48();
    return withCheckedContinuation<A>(isolation:function:_:)(v62, v63, v64, v65, v66, v67, v68, v69, &type metadata for String, v30, v30, v30, v71, v72, v73, v74, v75, v75, v51,
             a20,
             a21,
             a22);
  }
}

uint64_t sub_1001B4EF0()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  sub_100017040();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1001B4FF0()
{
  uint64_t v1 = sub_1000173E8();
  v2(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000112AC();
  return v3();
}

uint64_t sub_1001B5078()
{
  sub_100010DA4();
  v0[18] = v1;
  v0[19] = v2;
  v0[17] = v3;
  uint64_t v4 = type metadata accessor for Logger();
  v0[20] = v4;
  sub_1000111CC(v4);
  v0[21] = v5;
  v0[22] = sub_100008DE4();
  v0[23] = swift_task_alloc();
  v0[24] = swift_task_alloc();
  sub_100017040();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_1001B5120()
{
  uint64_t v2 = v0[18];
  uint64_t v1 = (void (*)(char *, uint64_t))v0[19];
  uint64_t v3 = type metadata accessor for URL();
  v0[25] = v3;
  sub_100011254();
  uint64_t v5 = v4;
  v0[26] = v4;
  uint64_t v6 = sub_1000171A0();
  v0[27] = v6;
  uint64_t v7 = sub_10000D938(&qword_100327E70);
  sub_1000170D0(v7);
  uint64_t v8 = sub_1000171A0();
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = 1735290926;
  v9._object = (void *)0xE400000000000000;
  String.append(_:)(v9);
  sub_1001B5AEC(v2, v1, v8);
  swift_bridgeObjectRelease();
  sub_1001BABE4(v8, 1, v3);
  if (v10)
  {
    sub_10001864C(v8, &qword_100327E70);
    swift_task_dealloc();
    swift_task_dealloc();
    static GKLog.daemon.getter();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)sub_100018370();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "BulletinHelpers assemblePlayerMonogramAttachmentURL failed to create disk path", v13, 2u);
      sub_100010D7C();
    }

    sub_1001BAAB0();
    v14();
    sub_100017FD0();
    sub_10000D97C(v15, v16, v17, v3);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000112AC();
    return v18();
  }
  else
  {
    id v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
    v0[28] = v20;
    v0[29] = (v5 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v20(v6, v8, v3);
    swift_task_dealloc();
    id v21 = self;
    NSString v22 = String._bridgeToObjectiveC()();
    v0[30] = v22;
    v0[2] = v0;
    v0[7] = v0 + 15;
    v0[3] = sub_1001B5450;
    uint64_t v23 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_1001B70C4;
    v0[13] = &unk_1002DE490;
    v0[14] = v23;
    [v21 monogramImageForPlayerID:v22 withCompletion:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
}

uint64_t sub_1001B5450()
{
  sub_100010DA4();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  sub_100017040();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1001B5520()
{
  uint64_t v1 = *(UIImage **)(v0 + 120);

  if (v1 && (uint64_t v2 = UIImagePNGRepresentation(v1)) != 0)
  {
    uint64_t v3 = v2;
    uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v6 = v5;

    Data.write(to:options:)();
    os_log_type_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 224);
    uint64_t v13 = *(void *)(v0 + 216);
    uint64_t v14 = *(void *)(v0 + 200);
    uint64_t v15 = *(void *)(v0 + 136);
    sub_100169274(v4, v6);
    v12(v15, v13, v14);
    uint64_t v16 = v15;
    uint64_t v17 = 0;
    uint64_t v18 = v14;
  }
  else
  {
    static GKLog.daemon.getter();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v7, v8))
    {
      Swift::String v9 = (uint8_t *)sub_100018370();
      *(_WORD *)Swift::String v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "BulletinHelpers assemblePlayerMonogramAttachmentURL failed to create image", v9, 2u);
      sub_100010D7C();
    }
    uint64_t v10 = *(void *)(v0 + 200);
    uint64_t v11 = *(void *)(v0 + 136);

    sub_10018735C();
    v19();
    sub_10019DC14();
    v20();
    uint64_t v16 = v11;
    uint64_t v17 = 1;
    uint64_t v18 = v10;
  }
  sub_10000D97C(v16, v17, 1, v18);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000112AC();
  return v21();
}

id sub_1001B5870(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2)
  {
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v4 = 0;
  }
  id v5 = [(id)swift_getObjCClassFromMetadata() _systemImageNamed:v4 withConfiguration:a3];

  return v5;
}

uint64_t sub_1001B58F0(double a1, double a2)
{
  [v2 size];
  double v6 = a1 + a1 + v5;
  [v2 size];
  double v8 = a2 + a2 + v7;
  id v9 = [objc_allocWithZone((Class)UIGraphicsImageRendererFormat) init];
  id v10 = [objc_allocWithZone((Class)UIGraphicsImageRenderer) initWithSize:v9 format:v6];
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v2;
  *(double *)(v11 + 24) = a1;
  *(double *)(v11 + 32) = a2;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = sub_1001B8C00;
  *(void *)(v12 + 24) = v11;
  void v17[4] = sub_1001BA824;
  uint64_t v17[5] = v12;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256;
  void v17[2] = sub_1001B716C;
  v17[3] = &unk_1002DE4F8;
  uint64_t v13 = _Block_copy(v17);
  id v14 = v2;
  swift_retain();
  swift_release();
  id v15 = [v10 imageWithActions:v13];

  _Block_release(v13);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if ((v9 & 1) == 0) {
    return (uint64_t)v15;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001B5AEC@<X0>(uint64_t a1@<X0>, void (*a2)(char *, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v90 = a1;
  uint64_t v91 = a2;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v89 = (char *)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v75 - v10;
  id v12 = [self defaultManager];
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13, v16);
  unint64_t v17 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  id v94 = v12;
  uint64_t v95 = (char *)&v75 - v17;
  id v18 = [v12 URLsForDirectory:13 inDomains:1];
  uint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v20 = sub_10000D938(&qword_100327E70);
  __chkstk_darwin(v20 - 8, v21);
  uint64_t v23 = (char *)&v75 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001AFCA0(v19, (uint64_t)v23);
  swift_bridgeObjectRelease();
  if (sub_10000DB14((uint64_t)v23, 1, v13) == 1)
  {
    uint64_t v24 = a3;
    id v25 = v94;
    sub_10001864C((uint64_t)v23, &qword_100327E70);
    static GKLog.daemon.getter();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "BulletinHelpers getImageDirectory failed to get cache directory", v28, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
    return sub_10000D97C(v24, 1, 1, v13);
  }
  uint64_t v76 = v5;
  uint64_t v77 = v4;
  uint64_t v88 = a3;
  uint64_t v30 = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 32))(v95, v23, v13);
  id v87 = &v75;
  uint64_t v32 = __chkstk_darwin(v30, v31);
  uint64_t v85 = (char *)&v75 - v17;
  uint64_t v86 = &v75;
  __chkstk_darwin(v32, v33);
  uint64_t v83 = (char *)&v75 - v17;
  uint64_t v96 = 0x6C7070612E6D6F63;
  unint64_t v97 = 0xEF64656D61672E65;
  uint64_t v34 = type metadata accessor for URL.DirectoryHint();
  uint64_t v84 = &v75;
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v92 = v13;
  uint64_t v93 = v14;
  uint64_t v36 = v35;
  uint64_t v37 = *(void *)(v35 + 64);
  __chkstk_darwin(v34, v38);
  unint64_t v39 = (v37 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v40 = enum case for URL.DirectoryHint.isDirectory(_:);
  uint64_t v41 = *(void (**)(char *, void, uint64_t))(v36 + 104);
  v41((char *)&v75 - v39, enum case for URL.DirectoryHint.isDirectory(_:), v34);
  unint64_t v42 = sub_100166A7C();
  URL.appending<A>(path:directoryHint:)();
  uint64_t v43 = *(void (**)(char *, uint64_t))(v36 + 8);
  v43((char *)&v75 - v39, v34);
  uint64_t v44 = swift_bridgeObjectRelease();
  uint64_t v84 = &v75;
  uint64_t v96 = 0x736567616D49;
  unint64_t v97 = 0xE600000000000000;
  uint64_t v80 = v37;
  __chkstk_darwin(v44, v45);
  unint64_t v79 = v39;
  uint64_t v46 = v40;
  uint64_t v47 = v85;
  uint64_t v82 = v41;
  v41((char *)&v75 - v39, v46, v34);
  unint64_t v81 = v42;
  uint64_t v48 = v43;
  uint64_t v49 = v83;
  URL.appending<A>(path:directoryHint:)();
  uint64_t v78 = v36 + 8;
  v43((char *)&v75 - v39, v34);
  swift_bridgeObjectRelease();
  uint64_t v50 = *(void (**)(char *, uint64_t))(v93 + 8);
  v93 += 8;
  v50(v49, v92);
  URL.path.getter();
  NSString v51 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v52 = v94;
  LOBYTE(v49) = [v94 fileExistsAtPath:v51];

  if (v49)
  {
LABEL_8:
    uint64_t v96 = v90;
    unint64_t v97 = (unint64_t)v91;
    __chkstk_darwin(v53, v54);
    Swift::String v59 = v50;
    uint64_t v60 = v48;
    uint64_t v61 = (char *)&v75 - v79;
    v82((char *)&v75 - v79, enum case for URL.DirectoryHint.notDirectory(_:), v34);
    uint64_t v62 = v47;
    uint64_t v63 = v88;
    URL.appending<A>(path:directoryHint:)();

    v60(v61, v34);
    uint64_t v64 = v92;
    v59(v62, v92);
    v59(v95, v64);
    return sub_10000D97C(v63, 0, 1, v64);
  }
  URL._bridgeToObjectiveC()(v55);
  uint64_t v57 = v56;
  uint64_t v96 = 0;
  unsigned int v58 = [v52 createDirectoryAtURL:v56 withIntermediateDirectories:1 attributes:0 error:&v96];

  if (v58)
  {
    id v53 = (id)v96;
    goto LABEL_8;
  }
  uint64_t v91 = v50;
  id v65 = (id)v96;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  static GKLog.daemon.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v66 = Logger.logObject.getter();
  int v67 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v66, (os_log_type_t)v67))
  {
    uint64_t v68 = (uint8_t *)swift_slowAlloc();
    uint64_t v69 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v68 = 138412290;
    swift_errorRetain();
    uint64_t v70 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v96 = v70;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v69 = v70;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v66, (os_log_type_t)v67, "BulletinHelpers getImageDirectory failed to create directory: %@", v68, 0xCu);
    sub_10000D938(&qword_100326430);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v71 = v76;
  uint64_t v72 = v92;
  uint64_t v73 = v95;
  swift_errorRelease();
  (*(void (**)(char *, uint64_t))(v71 + 8))(v89, v77);
  uint64_t v74 = v91;
  v91(v47, v72);
  v74(v73, v72);
  return sub_10000D97C(v88, 1, 1, v72);
}

void sub_1001B63FC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v27 = a6;
  uint64_t v28 = a7;
  sub_100163CE4(0, &qword_100327960);
  id v9 = a2;
  id v10 = sub_1001B3F48(0, a2, 0);
  if (v10)
  {
    id v12 = v10;
    URL._bridgeToObjectiveC()(v11);
    uint64_t v14 = v13;
    uint64_t v15 = @"GKBulletins";
    NSString v16 = String._bridgeToObjectiveC()();
    uint64_t v17 = sub_10000D938(&qword_100327968);
    v26[1] = v26;
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v19 = *(void *)(v18 + 64);
    __chkstk_darwin(v17, v20);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))((char *)v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v17);
    unint64_t v21 = (*(unsigned __int8 *)(v18 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
    uint64_t v22 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v18 + 32))(v22 + v21, (char *)v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v17);
    uint64_t v23 = (void *)(v22 + ((v19 + v21 + 7) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v24 = v28;
    *uint64_t v23 = v27;
    v23[1] = v24;
    aBlock[4] = sub_1001B89B4;
    aBlock[5] = v22;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001B4198;
    aBlock[3] = &unk_1002DE3F0;
    id v25 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    swift_release();
    [v12 requestImageDataForURL:v14 subdirectory:v15 fileName:v16 handler:v25];
    _Block_release(v25);
  }
  else
  {
    __break(1u);
  }
}

void sub_1001B667C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(char *, uint64_t))
{
  uint64_t v66 = a3;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v14 = (char *)v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v12, v15);
  uint64_t v18 = (char *)v59 - v17;
  __chkstk_darwin(v16, v19);
  unint64_t v21 = (char *)v59 - v20;
  sub_100163CE4(0, &qword_100327978);
  sub_100175574(a1, a2);
  id v22 = sub_1001B6E90(a1, a2);
  if (v22)
  {
    uint64_t v23 = (UIImage *)sub_1001B6F08();
    uint64_t v24 = UIImagePNGRepresentation(v23);
    if (v24)
    {
      id v25 = v24;
      v59[5] = v14;
      uint64_t v61 = v9;
      id v63 = v22;
      uint64_t v64 = v23;
      uint64_t v65 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v27 = v26;

      uint64_t v28 = type metadata accessor for URL();
      uint64_t v60 = *(void *)(v28 - 8);
      __chkstk_darwin(v28, v29);
      uint64_t v31 = (char *)v59 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v32 = sub_10000D938(&qword_100327E70);
      __chkstk_darwin(v32 - 8, v33);
      uint64_t v62 = v34;
      uint64_t v35 = (char *)v59 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v67 = a4;
      uint64_t v68 = a5;
      uint64_t v36 = v28;
      swift_bridgeObjectRetain();
      v37._uint64_t countAndFlagsBits = 1735290926;
      v37._object = (void *)0xE400000000000000;
      String.append(_:)(v37);
      sub_1001B5AEC(v67, v68, (uint64_t)v35);
      swift_bridgeObjectRelease();
      if (sub_10000DB14((uint64_t)v35, 1, v28) == 1)
      {
        uint64_t v38 = v65;
        sub_10001864C((uint64_t)v35, &qword_100327E70);
        static GKLog.daemon.getter();
        unint64_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v39, v40))
        {
          uint64_t v41 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v41 = 0;
          _os_log_impl((void *)&_mh_execute_header, v39, v40, "BulletinHelpers assemblePlayerAvatarURL failed to create disk path", v41, 2u);
          swift_slowDealloc();
        }

        uint64_t v42 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v18, v61);
        __chkstk_darwin(v42, v43);
        sub_10000D97C((uint64_t)v59 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v36);
        sub_10000D938(&qword_100327968);
        CheckedContinuation.resume(returning:)();

        sub_100169274(v38, v27);
      }
      else
      {
        v59[4] = v59;
        uint64_t v53 = v60;
        (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v31, v35, v36);
        uint64_t v54 = v65;
        uint64_t v55 = Data.write(to:options:)();
        __chkstk_darwin(v55, v56);
        unsigned int v58 = (char *)v59 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v58, v31, v36);
        sub_10000D97C((uint64_t)v58, 0, 1, v36);
        sub_10000D938(&qword_100327968);
        CheckedContinuation.resume(returning:)();
        sub_100169274(v54, v27);

        (*(void (**)(char *, uint64_t))(v53 + 8))(v31, v36);
      }
      return;
    }
  }
  else
  {
    uint64_t v23 = 0;
  }
  static GKLog.daemon.getter();
  uint64_t v45 = Logger.logObject.getter();
  os_log_type_t v46 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v45, v46))
  {
    uint64_t v47 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v47 = 0;
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "BulletinHelpers assemblePlayerAvatarURL failed to create image", v47, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v10 + 8))(v21, v9);
  uint64_t v48 = sub_10000D938(&qword_100327E70);
  __chkstk_darwin(v48 - 8, v49);
  NSString v51 = (char *)v59 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for URL();
  sub_10000D97C((uint64_t)v51, 1, 1, v52);
  sub_10000D938(&qword_100327968);
  CheckedContinuation.resume(returning:)();
}

id sub_1001B6E90(uint64_t a1, unint64_t a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v6 = [v4 initWithData:isa];
  sub_100169274(a1, a2);

  return v6;
}

uint64_t sub_1001B6F08()
{
  [v0 size];
  double v2 = v1;
  [v0 size];
  double v4 = v3;
  id v5 = [objc_allocWithZone((Class)UIGraphicsImageRenderer) initWithSize:v2, v3];
  id v6 = (double *)swift_allocObject();
  v6[2] = 0.0;
  v6[3] = 0.0;
  void v6[4] = v2;
  void v6[5] = v4;
  *((void *)v6 + 6) = v0;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_1001B8A7C;
  *(void *)(v7 + 24) = v6;
  void v12[4] = sub_1001B8A90;
  v12[5] = v7;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  _OWORD v12[2] = sub_1001B716C;
  void v12[3] = &unk_1002DE468;
  uint64_t v8 = _Block_copy(v12);
  id v9 = v0;
  swift_retain();
  swift_release();
  id v10 = [v5 imageWithActions:v8];

  _Block_release(v8);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if ((v5 & 1) == 0) {
    return (uint64_t)v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001B70C4(uint64_t a1, void *a2)
{
  id v2 = a2;
  return sub_1001AFBC4();
}

id sub_1001B7100(int a1, id a2, double a3, double a4)
{
  [a2 size];

  return [a2 drawInRect:a3, a4, v7, v8];
}

void sub_1001B716C(uint64_t a1, void *a2)
{
  id v2 = *(void (**)(void))(a1 + 32);
  id v3 = a2;
  v2();
}

void sub_1001B71B8(double a1, double a2, double a3, double a4, uint64_t a5, void *a6)
{
  id v20 = [self bezierPathWithOvalInRect:a1, a2, a3, a4];
  [v20 addClip];
  uint64_t v11 = (CGImage *)[a6 CGImage];
  if (v11)
  {
    uint64_t v12 = v11;
    [a6 size];
    CGFloat v14 = v13;
    [a6 size];
    v22.size.height = v15;
    v22.origin.x = 0.0;
    v22.origin.y = 0.0;
    v22.size.width = v14;
    CGImageRef v16 = CGImageCreateWithImageInRect(v12, v22);

    if (v16)
    {
      uint64_t v17 = v16;
      [a6 scale];
      id v19 = [objc_allocWithZone((Class)UIImage) initWithCGImage:v17 scale:objc_msgSend(a6, "imageOrientation") orientation:v18];

      [v19 drawInRect:a1, a2, a3, a4];
    }
  }
}

void sub_1001B734C(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if (a3)
  {
    sub_1001BAAA0();
    if (v7 != v8)
    {
      if (v6 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return;
      }
      sub_100017238();
    }
  }
  else
  {
    uint64_t v6 = a2;
  }
  uint64_t v9 = *(void *)(a4 + 16);
  if (v6 <= v9) {
    uint64_t v10 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v10 = v6;
  }
  if (v10)
  {
    sub_10000D938(&qword_100326500);
    uint64_t v11 = (char *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 16);
  }
  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  double v13 = v11 + 32;
  if (a1)
  {
    sub_1001B7F34((char *)(a4 + 32), v9, v13);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1001B79A0(0, v9, (unint64_t)v13, a4);
  }
}

uint64_t sub_1001B742C(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_1001B77AC(a1, a2, a3, a4, &qword_1003279B0, (uint64_t (*)(uint64_t))&type metadata accessor for URLQueryItem, (void (*)(uint64_t))&type metadata accessor for URLQueryItem);
}

char *sub_1001B7444(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000D938(&qword_100327950);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  size_t v12 = v10 + 32;
  if (v5)
  {
    sub_1001B7FF4((char *)(a4 + 32), v8, v12);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1001B7A98(0, v8, (unint64_t)v12, a4);
  }
  return v10;
}

char *sub_1001B753C(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000D938(&qword_100326690);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 8);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  size_t v12 = v10 + 32;
  if (v5)
  {
    sub_1001B8090((char *)(a4 + 32), v8, v12);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1001B7B98(0, v8, (unint64_t)v12, a4);
  }
  return v10;
}

void sub_1001B762C(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_1001B7660(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(void, uint64_t, void *, uint64_t), void (*a7)(uint64_t, uint64_t, void *))
{
  if (a3)
  {
    sub_1001BAAA0();
    if (v12 != v13)
    {
      if (v11 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return;
      }
      sub_100017238();
    }
  }
  else
  {
    uint64_t v11 = a2;
  }
  uint64_t v14 = *(void *)(a4 + 16);
  if (v11 <= v14) {
    uint64_t v15 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v15 = v11;
  }
  if (v15)
  {
    sub_10000D938(a5);
    CGImageRef v16 = (void *)swift_allocObject();
    size_t v17 = j__malloc_size(v16);
    v16[2] = v14;
    v16[3] = 2 * ((uint64_t)(v17 - 32) / 8);
  }
  else
  {
    CGImageRef v16 = _swiftEmptyArrayStorage;
  }
  double v18 = v16 + 4;
  if (a1)
  {
    a7(a4 + 32, v14, v18);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    a6(0, v14, v18, a4);
  }
}

void sub_1001B7754(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

uint64_t sub_1001B7788(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_1001B77AC(a1, a2, a3, a4, &qword_1003279A0, type metadata accessor for MultiplayerActivityEventFilter.TrackedSession, (void (*)(uint64_t))type metadata accessor for MultiplayerActivityEventFilter.TrackedSession);
}

uint64_t sub_1001B77AC(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(uint64_t), void (*a7)(uint64_t))
{
  if (a3)
  {
    sub_1001BAAA0();
    if (v12 != v13)
    {
      if (v11 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_23;
      }
      sub_100017238();
    }
  }
  else
  {
    uint64_t v11 = a2;
  }
  uint64_t v14 = *(void *)(a4 + 16);
  if (v11 <= v14) {
    uint64_t v15 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v15 = v11;
  }
  if (!v15)
  {
    CGRect v22 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  sub_10000D938(a5);
  uint64_t v16 = sub_1001BAB8C();
  uint64_t v17 = a6(v16);
  sub_1000111CC(v17);
  uint64_t v19 = *(void *)(v18 + 72);
  unint64_t v21 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  CGRect v22 = (void *)swift_allocObject();
  size_t v23 = j__malloc_size(v22);
  if (!v19 || (v23 - v21 == 0x8000000000000000 ? (BOOL v24 = v19 == -1) : (BOOL v24 = 0), v24))
  {
LABEL_23:
    sub_1000111E4();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  _OWORD v22[2] = v14;
  void v22[3] = 2 * ((uint64_t)(v23 - v21) / v19);
LABEL_18:
  uint64_t v25 = sub_1001BAB8C();
  uint64_t v26 = *(void *)(a6(v25) - 8);
  unint64_t v27 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  unint64_t v28 = (unint64_t)v22 + v27;
  if (a1)
  {
    sub_1001B8198(a4 + v27, v14, v28, a7);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1001B7DA4(0, v14, v28, a4);
  }
  return (uint64_t)v22;
}

uint64_t sub_1001B79A0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001B7A98(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001B7B98(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      sub_10000D938(&qword_100327940);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1001B7CB0(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    unint64_t v6 = &__dst[8 * v4];
    if (v5 >= v6 || &v5[8 * v4] <= __dst)
    {
      memcpy(__dst, v5, 8 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001B7DA4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    sub_1000111E4();
    sub_1001BA82C();
    goto LABEL_11;
  }
  uint64_t v8 = sub_1001BAB8C();
  uint64_t v10 = *(void *)(v9(v8) - 8);
  uint64_t v11 = a4 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  uint64_t v12 = *(void *)(v10 + 72);
  unint64_t v13 = v11 + v12 * a1;
  unint64_t v14 = a3 + v12 * v4;
  if (v13 >= v14 || v13 + v12 * v4 <= a3)
  {
    swift_arrayInitWithCopy();
    swift_bridgeObjectRelease();
    return v14;
  }
  sub_1000111E4();
  sub_100018548();
LABEL_11:
  uint64_t result = sub_100011368();
  __break(1u);
  return result;
}

char *sub_1001B7ED8(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_1000111E4();
    uint64_t result = (char *)sub_1000173C4();
    __break(1u);
  }
  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)sub_10001773C(a3, result);
  }
  return result;
}

char *sub_1001B7F34(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_1000111E4();
    uint64_t result = (char *)sub_1000173C4();
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_10001773C(a3, result);
  }
  return result;
}

char *sub_1001B7F90(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_1000111E4();
    uint64_t result = (char *)sub_1000173C4();
    __break(1u);
  }
  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)sub_10001773C(a3, result);
  }
  return result;
}

char *sub_1001B7FF4(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[48 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 48 * a2);
  }
  return __src;
}

char *sub_1001B8090(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_1000111E4();
    uint64_t result = (char *)sub_1000173C4();
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)sub_10001773C(a3, result);
  }
  return result;
}

char *sub_1001B80EC(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[8 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 8 * a2);
  }
  return __src;
}

void sub_1001B8180(uint64_t a1, uint64_t a2, unint64_t a3)
{
}

void sub_1001B8198(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(uint64_t))
{
  if (a2 < 0)
  {
    sub_1000111E4();
    uint64_t v12 = sub_1000173C4();
    __break(1u);
_swift_arrayInitWithTakeBackToFront:
    _swift_arrayInitWithTakeBackToFront(v12);
    return;
  }
  sub_1001BAD10();
  if (v9 < v8 || (uint64_t v10 = sub_1001BAB8C(), a4(v10), sub_100017A38(), v5 + *(void *)(v11 + 72) * v4 <= a3))
  {
    uint64_t v13 = sub_1001BAB8C();
    a4(v13);
    uint64_t v14 = sub_1001BACDC();
    _swift_arrayInitWithTakeFrontToBack(v14);
  }
  else if (a3 != v5)
  {
    uint64_t v12 = sub_1001BACDC();
    goto _swift_arrayInitWithTakeBackToFront;
  }
}

uint64_t sub_1001B8288(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_1000111E4();
    sub_1001BA82C();
LABEL_11:
    uint64_t result = sub_100011368();
    __break(1u);
    return result;
  }
  if (a3 + 32 * a2 > a1 && a1 + 32 * a2 > a3)
  {
    sub_1000111E4();
    sub_100018548();
    goto LABEL_11;
  }
  sub_10000D938(&qword_1003279A8);
  sub_1001BA9A8();

  return swift_arrayInitWithCopy();
}

uint64_t sub_1001B834C(uint64_t a1, uint64_t a2)
{
  return sub_1001B842C(a1, a2);
}

uint64_t sub_1001B8358(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_1000111E4();
    sub_1001BA82C();
LABEL_11:
    uint64_t result = sub_100011368();
    __break(1u);
    return result;
  }
  if (a3 + 40 * a2 > a1 && a1 + 40 * a2 > a3)
  {
    sub_1000111E4();
    sub_100018548();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

uint64_t sub_1001B840C(uint64_t a1, uint64_t a2)
{
  return sub_1001B86F0(a1, a2);
}

uint64_t sub_1001B8420(uint64_t a1, uint64_t a2)
{
  return sub_1001B842C(a1, a2);
}

uint64_t sub_1001B842C(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_1000111E4();
    sub_1001BA82C();
LABEL_11:
    uint64_t result = sub_100011368();
    __break(1u);
    return result;
  }
  sub_1000175B4();
  if (!v6 & v5) {
    BOOL v7 = v4 > v2;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    sub_1000111E4();
    sub_100018548();
    goto LABEL_11;
  }
  sub_10000D938(v3);
  sub_1001BA9A8();

  return swift_arrayInitWithCopy();
}

void sub_1001B84D8(uint64_t a1)
{
  sub_1001B3BE4(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1001B84E4()
{
  uint64_t v1 = type metadata accessor for URL();
  sub_100011254();
  uint64_t v3 = v2;
  uint64_t v4 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  unint64_t v7 = (*(void *)(v6 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10000D938(&qword_100327968);
  sub_100011254();
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v13 = ((v7 + v12 + 16) & ~v12) + *(void *)(v11 + 64);
  uint64_t v14 = v4 | v12 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v5, v1);
  swift_bridgeObjectRelease();
  sub_10019DC14();
  v15();

  return _swift_deallocObject(v0, v13, v14);
}

uint64_t sub_1001B8604(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for URL();
  sub_1000111CC(v5);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v9 = (*(void *)(v8 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10000D938(&qword_100327968);
  uint64_t v10 = *(void *)(v2 + v9);
  uint64_t v11 = *(void *)(v2 + v9 + 8);

  return sub_1001B3FB4(a1, a2, v2 + v7, v10, v11);
}

uint64_t sub_1001B86DC(uint64_t a1, uint64_t a2)
{
  return sub_1001B86F0(a1, a2);
}

uint64_t sub_1001B86F0(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_1000111E4();
    sub_1001BA82C();
LABEL_11:
    uint64_t result = sub_100011368();
    __break(1u);
    return result;
  }
  sub_1000175B4();
  if (!v6 & v5) {
    BOOL v7 = v4 > v2;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    sub_1000111E4();
    sub_100018548();
    goto LABEL_11;
  }
  sub_100163CE4(0, v3);
  sub_1001BA9A8();

  return swift_arrayInitWithCopy();
}

void *sub_1001B87A4(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_1000111E4();
    sub_1001BA82C();
LABEL_11:
    uint64_t result = (void *)sub_100011368();
    __break(1u);
    return result;
  }
  sub_100017188();
  if (!v8 & v7) {
    BOOL v9 = v6 > v3;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    sub_1000111E4();
    sub_100018548();
    goto LABEL_11;
  }

  return memcpy(v5, v4, 8 * v2);
}

uint64_t sub_1001B8840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [a6 _gkImageCachePathForURL:a1 subdirectory:v8 filename:v9];

  if (!v10) {
    return 0;
  }
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v11;
}

void sub_1001B8904(uint64_t a1)
{
  sub_1001B63FC(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_1001B8914()
{
  sub_10000D938(&qword_100327968);
  sub_100017A38();
  v1 += 8;
  uint64_t v2 = *(unsigned __int8 *)(v1 + 72);
  uint64_t v3 = v2 | 7;
  unint64_t v4 = ((*(void *)(v1 + 56) + ((v2 + 16) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  sub_100011C3C();
  v5();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v3);
}

void sub_1001B89B4(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = sub_10000D938(&qword_100327968);
  sub_1000111CC(v5);
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = v2 + v10;
  uint64_t v12 = (uint64_t *)(v2 + ((*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v13 = *v12;
  uint64_t v14 = (void (*)(char *, uint64_t))v12[1];

  sub_1001B667C(a1, a2, v11, v13, v14);
}

uint64_t sub_1001B8A44()
{
  return _swift_deallocObject(v0, 56, 7);
}

void sub_1001B8A7C(uint64_t a1)
{
  sub_1001B71B8(*(double *)(v1 + 16), *(double *)(v1 + 24), *(double *)(v1 + 32), *(double *)(v1 + 40), a1, *(void **)(v1 + 48));
}

uint64_t sub_1001B8A90()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1001B8AB8(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v2 = 64;
  for (uint64_t i = 10; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

void *sub_1001B8B38(void *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    uint64_t v5 = *(void *)(*(void *)(a5 + 48) + 16 * a2);
    unsigned int v6 = *(void **)(*(void *)(a5 + 56) + 8 * a2);
    *uint64_t result = v6;
    swift_bridgeObjectRetain();
    id v7 = v6;
    return (void *)v5;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_1001B8BC8()
{
  return _swift_deallocObject(v0, 40, 7);
}

id sub_1001B8C00(int a1)
{
  return sub_1001B7100(a1, *(id *)(v1 + 16), *(double *)(v1 + 24), *(double *)(v1 + 32));
}

uint64_t sub_1001B8C10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MultiplayerActivityEventFilter.TrackedSession(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

__n128 sub_1001B8C80(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void type metadata accessor for BulletinHelpers.BulletinRelationships.GameRelationship()
{
}

uint64_t sub_1001B8CAC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_1001B8CF0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1001B8D48()
{
  sub_1001BAD10();
  void *v3 = *v2;
  v1[1] = v2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v1[2] = v0[2];
  v1[3] = v0[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  void v1[4] = v0[4];
  v1[5] = v0[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v1;
}

void *sub_1001B8DD4()
{
  sub_1001BAD10();
  uint64_t v3 = v2[1];
  *uint64_t v1 = *v2;
  v1[1] = v3;
  swift_bridgeObjectRelease();
  uint64_t v4 = v0[3];
  v1[2] = v0[2];
  v1[3] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = v0[5];
  void v1[4] = v0[4];
  v1[5] = v5;
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1001B8E28(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1001B8E68(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for BulletinHelpers.BulletinRelationships.PlayerRelationship()
{
}

void *sub_1001B8EC0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1001B8EF0()
{
  return swift_bridgeObjectRelease();
}

void *sub_1001B8EF8(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_1001B8F3C(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001B8F70(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1001B8FB0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for BulletinHelpers.BulletinRelationships.ChallengeRelationship()
{
}

void type metadata accessor for BulletinHelpers()
{
}

uint64_t sub_1001B9004(void *a1)
{
  if (a1[1])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (a1[8])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t result = a1[16];
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *sub_1001B9098(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  if (v4)
  {
    *a1 = *a2;
    a1[1] = v4;
    uint64_t v5 = a2[3];
    a1[2] = a2[2];
    a1[3] = v5;
    uint64_t v6 = a2[5];
    a1[4] = a2[4];
    a1[5] = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v7;
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  }
  a1[6] = a2[6];
  uint64_t v8 = a2[8];
  swift_bridgeObjectRetain();
  if (v8)
  {
    a1[7] = a2[7];
    a1[8] = v8;
    uint64_t v9 = a2[10];
    a1[9] = a2[9];
    a1[10] = v9;
    uint64_t v10 = a2[12];
    a1[11] = a2[11];
    a1[12] = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 9);
    *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 7);
    *(_OWORD *)(a1 + 9) = v11;
    *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
  }
  uint64_t v12 = a2[14];
  a1[13] = a2[13];
  a1[14] = v12;
  uint64_t v13 = a2[16];
  swift_bridgeObjectRetain();
  if (v13)
  {
    a1[15] = a2[15];
    a1[16] = v13;
    uint64_t v14 = a2[17];
    uint64_t v15 = a2[18];
    a1[17] = v14;
    a1[18] = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v16 = *(_OWORD *)(a2 + 17);
    *(_OWORD *)(a1 + 15) = *(_OWORD *)(a2 + 15);
    *(_OWORD *)(a1 + 17) = v16;
  }
  return a1;
}

void *sub_1001B91C0(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  if (a1[1])
  {
    if (v4)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[4] = a2[4];
      a1[5] = a2[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1001B94B0((uint64_t)a1);
      long long v6 = *((_OWORD *)a2 + 1);
      long long v5 = *((_OWORD *)a2 + 2);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v6;
      *((_OWORD *)a1 + 2) = v5;
    }
  }
  else if (v4)
  {
    *a1 = *a2;
    a1[1] = a2[1];
    a1[2] = a2[2];
    a1[3] = a2[3];
    a1[4] = a2[4];
    a1[5] = a2[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v7 = *(_OWORD *)a2;
    long long v8 = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    *((_OWORD *)a1 + 2) = v8;
    *(_OWORD *)a1 = v7;
  }
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = a1 + 7;
  uint64_t v10 = a2 + 7;
  uint64_t v11 = a2[8];
  if (a1[8])
  {
    if (v11)
    {
      a1[7] = a2[7];
      a1[8] = a2[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[9] = a2[9];
      a1[10] = a2[10];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[11] = a2[11];
      a1[12] = a2[12];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1001B94E0((uint64_t)(a1 + 7));
      long long v13 = *(_OWORD *)(a2 + 9);
      long long v12 = *(_OWORD *)(a2 + 11);
      *uint64_t v9 = *v10;
      *(_OWORD *)(a1 + 9) = v13;
      *(_OWORD *)(a1 + 11) = v12;
    }
  }
  else if (v11)
  {
    a1[7] = a2[7];
    a1[8] = a2[8];
    a1[9] = a2[9];
    a1[10] = a2[10];
    a1[11] = a2[11];
    a1[12] = a2[12];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v14 = *v10;
    long long v15 = *(_OWORD *)(a2 + 11);
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
    *(_OWORD *)(a1 + 11) = v15;
    *uint64_t v9 = v14;
  }
  a1[13] = a2[13];
  a1[14] = a2[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v16 = a1 + 15;
  uint64_t v17 = a2 + 15;
  uint64_t v18 = a2[16];
  if (a1[16])
  {
    if (v18)
    {
      a1[15] = a2[15];
      a1[16] = a2[16];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[17] = a2[17];
      a1[18] = a2[18];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1001B9510((uint64_t)(a1 + 15));
      long long v19 = *(_OWORD *)(a2 + 17);
      *long long v16 = *v17;
      *(_OWORD *)(a1 + 17) = v19;
    }
  }
  else if (v18)
  {
    a1[15] = a2[15];
    a1[16] = a2[16];
    a1[17] = a2[17];
    a1[18] = a2[18];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v20 = *(_OWORD *)(a2 + 17);
    *long long v16 = *v17;
    *(_OWORD *)(a1 + 17) = v20;
  }
  return a1;
}

uint64_t sub_1001B94B0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001B94E0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001B9510(uint64_t a1)
{
  return a1;
}

void *sub_1001B9540(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x98uLL);
}

uint64_t sub_1001B9548(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v4 = *(void *)(a2 + 8);
    if (v4)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v4;
      swift_bridgeObjectRelease();
      uint64_t v5 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v5;
      swift_bridgeObjectRelease();
      uint64_t v6 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v6;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1001B94B0(a1);
  }
  long long v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
LABEL_6:
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 64))
  {
    uint64_t v8 = *(void *)(a2 + 64);
    if (v8)
    {
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = v8;
      swift_bridgeObjectRelease();
      uint64_t v9 = *(void *)(a2 + 80);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = v9;
      swift_bridgeObjectRelease();
      uint64_t v10 = *(void *)(a2 + 96);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = v10;
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    sub_1001B94E0(a1 + 56);
  }
  long long v11 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = v11;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
LABEL_11:
  uint64_t v12 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v12;
  swift_bridgeObjectRelease();
  if (!*(void *)(a1 + 128))
  {
LABEL_15:
    long long v15 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v15;
    return a1;
  }
  uint64_t v13 = *(void *)(a2 + 128);
  if (!v13)
  {
    sub_1001B9510(a1 + 120);
    goto LABEL_15;
  }
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v14;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001B9698(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 152))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1001B96EC(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 152) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 152) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

void type metadata accessor for BulletinHelpers.BulletinRelationships()
{
}

void type metadata accessor for BulletinHelpers.BulletinRelationships.LeaderboardRelationship()
{
}

unint64_t sub_1001B977C()
{
  unint64_t result = qword_1003279C0;
  if (!qword_1003279C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003279C0);
  }
  return result;
}

unint64_t sub_1001B97C8()
{
  unint64_t result = qword_1003279D8;
  if (!qword_1003279D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003279D8);
  }
  return result;
}

unint64_t sub_1001B9814()
{
  unint64_t result = qword_1003279F0;
  if (!qword_1003279F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003279F0);
  }
  return result;
}

unint64_t sub_1001B9860()
{
  unint64_t result = qword_100327A08;
  if (!qword_100327A08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327A08);
  }
  return result;
}

unint64_t sub_1001B98AC()
{
  unint64_t result = qword_100327A10;
  if (!qword_100327A10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327A10);
  }
  return result;
}

unint64_t sub_1001B98F8()
{
  unint64_t result = qword_100327A28;
  if (!qword_100327A28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327A28);
  }
  return result;
}

uint64_t sub_1001B9944(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_1001B9994()
{
  unint64_t result = qword_100327A30;
  if (!qword_100327A30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327A30);
  }
  return result;
}

unint64_t sub_1001B99E0()
{
  unint64_t result = qword_100327A38;
  if (!qword_100327A38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327A38);
  }
  return result;
}

uint64_t *sub_1001B9A2C(uint64_t *a1)
{
  uint64_t v2 = a1[7];
  uint64_t v3 = a1[8];
  uint64_t v4 = a1[15];
  uint64_t v6 = a1[16];
  sub_10018C210(*a1, a1[1]);
  swift_bridgeObjectRetain();
  sub_1001B9944(v2, v3);
  swift_bridgeObjectRetain();
  sub_1001B9AEC(v4, v6);
  return a1;
}

uint64_t sub_1001B9AEC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t *sub_1001B9B30(uint64_t *a1)
{
  uint64_t v2 = a1[7];
  uint64_t v3 = a1[8];
  uint64_t v4 = a1[15];
  uint64_t v6 = a1[16];
  sub_10018C144(*a1, a1[1]);
  swift_bridgeObjectRelease();
  sub_10018C144(v2, v3);
  swift_bridgeObjectRelease();
  sub_10018C194(v4, v6);
  return a1;
}

unint64_t sub_1001B9BF0()
{
  unint64_t result = qword_100327A48;
  if (!qword_100327A48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327A48);
  }
  return result;
}

uint64_t sub_1001B9C3C(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100163988(&qword_100327A18);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001B9CAC()
{
  unint64_t result = qword_100327A68;
  if (!qword_100327A68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327A68);
  }
  return result;
}

unint64_t sub_1001B9CF8()
{
  unint64_t result = qword_100327A78;
  if (!qword_100327A78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327A78);
  }
  return result;
}

unint64_t sub_1001B9D44()
{
  unint64_t result = qword_100327A88;
  if (!qword_100327A88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327A88);
  }
  return result;
}

unint64_t sub_1001B9D90()
{
  unint64_t result = qword_100327A98;
  if (!qword_100327A98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327A98);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for BulletinHelpers.BulletinRelationships.LeaderboardRelationship.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001B9EA8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BulletinHelpers.BulletinRelationships.LeaderboardRelationship.CodingKeys()
{
  return &type metadata for BulletinHelpers.BulletinRelationships.LeaderboardRelationship.CodingKeys;
}

uint64_t getEnumTagSinglePayload for BulletinHelpers.BulletinRelationships.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 4) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v5 = v6 - 5;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for BulletinHelpers.BulletinRelationships.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001BA034);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BulletinHelpers.BulletinRelationships.CodingKeys()
{
  return &type metadata for BulletinHelpers.BulletinRelationships.CodingKeys;
}

uint64_t getEnumTagSinglePayload for BulletinHelpers.BulletinRelationships.ChallengeRelationship.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for BulletinHelpers.BulletinRelationships.ChallengeRelationship.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1001BA15CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001BA184()
{
  return 0;
}

ValueMetadata *type metadata accessor for BulletinHelpers.BulletinRelationships.ChallengeRelationship.CodingKeys()
{
  return &type metadata for BulletinHelpers.BulletinRelationships.ChallengeRelationship.CodingKeys;
}

ValueMetadata *type metadata accessor for BulletinHelpers.BulletinRelationships.PlayerRelationship.CodingKeys()
{
  return &type metadata for BulletinHelpers.BulletinRelationships.PlayerRelationship.CodingKeys;
}

uint64_t getEnumTagSinglePayload for FairPlaySessionError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *_s14GameDaemonCore15BulletinHelpersO21BulletinRelationshipsV18PlayerRelationshipV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001BA308);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BulletinHelpers.BulletinRelationships.GameRelationship.CodingKeys()
{
  return &type metadata for BulletinHelpers.BulletinRelationships.GameRelationship.CodingKeys;
}

unint64_t sub_1001BA344()
{
  unint64_t result = qword_100327AA8;
  if (!qword_100327AA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327AA8);
  }
  return result;
}

unint64_t sub_1001BA394()
{
  unint64_t result = qword_100327AB0;
  if (!qword_100327AB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327AB0);
  }
  return result;
}

unint64_t sub_1001BA3E4()
{
  unint64_t result = qword_100327AB8;
  if (!qword_100327AB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327AB8);
  }
  return result;
}

unint64_t sub_1001BA434()
{
  unint64_t result = qword_100327AC0;
  if (!qword_100327AC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327AC0);
  }
  return result;
}

unint64_t sub_1001BA484()
{
  unint64_t result = qword_100327AC8;
  if (!qword_100327AC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327AC8);
  }
  return result;
}

unint64_t sub_1001BA4D4()
{
  unint64_t result = qword_100327AD0;
  if (!qword_100327AD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327AD0);
  }
  return result;
}

unint64_t sub_1001BA524()
{
  unint64_t result = qword_100327AD8;
  if (!qword_100327AD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327AD8);
  }
  return result;
}

unint64_t sub_1001BA574()
{
  unint64_t result = qword_100327AE0;
  if (!qword_100327AE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327AE0);
  }
  return result;
}

unint64_t sub_1001BA5C4()
{
  unint64_t result = qword_100327AE8;
  if (!qword_100327AE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327AE8);
  }
  return result;
}

unint64_t sub_1001BA614()
{
  unint64_t result = qword_100327AF0;
  if (!qword_100327AF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327AF0);
  }
  return result;
}

unint64_t sub_1001BA664()
{
  unint64_t result = qword_100327AF8;
  if (!qword_100327AF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327AF8);
  }
  return result;
}

unint64_t sub_1001BA6B4()
{
  unint64_t result = qword_100327B00;
  if (!qword_100327B00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327B00);
  }
  return result;
}

unint64_t sub_1001BA704()
{
  unint64_t result = qword_100327B08;
  if (!qword_100327B08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327B08);
  }
  return result;
}

unint64_t sub_1001BA754()
{
  unint64_t result = qword_100327B10;
  if (!qword_100327B10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327B10);
  }
  return result;
}

unint64_t sub_1001BA7A4()
{
  unint64_t result = qword_100327B18;
  if (!qword_100327B18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327B18);
  }
  return result;
}

uint64_t sub_1001BA83C()
{
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 96);
  return sub_10018C144(v2, v3);
}

void sub_1001BA8B8()
{
  v0[22] = 0x656D686361747461;
  v0[23] = 0xEB000000005F746ELL;
  v0[28] = v1;
}

uint64_t sub_1001BA8E8()
{
  return v0;
}

uint64_t sub_1001BA930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v17 = *(void *)(v15 + 56) + 32 * a1;
  return sub_1000074E0(v17, a15);
}

uint64_t sub_1001BA950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15 = *(void *)(v13 + 56) + 32 * a1;
  return sub_1000074E0(v15, a13);
}

uint64_t sub_1001BA970(uint64_t a1)
{
  *(void *)(v2 + 312) = a1;
  return sub_10000D97C(v1, 1, 1, a1);
}

uint64_t sub_1001BA9A8()
{
  return v0;
}

uint64_t sub_1001BA9BC()
{
  return sub_10001A378();
}

unint64_t sub_1001BA9D8()
{
  return sub_1000087B0(7107189, 0xE300000000000000);
}

uint64_t sub_1001BA9F8()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

double sub_1001BAA20()
{
  return sub_1001699DC(0x64496D616461, 0xE600000000000000, v0, (_OWORD *)(v1 - 240));
}

uint64_t sub_1001BAA48()
{
  uint64_t result = v1 - 67;
  *(void *)(v1 - 96) = v0;
  return result;
}

uint64_t sub_1001BAA60()
{
  *(unsigned char *)(v0 - 66) = 1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1001BAA7C()
{
  *(unsigned char *)(v0 - 65) = 0;
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t sub_1001BAABC()
{
  return swift_dynamicCast();
}

uint64_t sub_1001BAAE0()
{
  return v0;
}

uint64_t sub_1001BAAF8()
{
  return v0;
}

uint64_t sub_1001BAB10()
{
  return swift_task_alloc();
}

uint64_t sub_1001BAB2C()
{
  return sub_10001A378();
}

uint64_t sub_1001BAB44()
{
  return swift_dynamicCast();
}

uint64_t sub_1001BAB68()
{
  return swift_dynamicCast();
}

uint64_t sub_1001BAB8C()
{
  return 0;
}

uint64_t sub_1001BAB98()
{
  return v0;
}

uint64_t sub_1001BABA8(uint64_t a1)
{
  return sub_10018C260(v1, a1);
}

uint64_t sub_1001BABC4(uint64_t result)
{
  *(void *)(v1 + 344) = result;
  return result;
}

uint64_t sub_1001BABD4(uint64_t result)
{
  *(void *)(v1 + 360) = result;
  return result;
}

uint64_t sub_1001BABE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10000DB14(a1, a2, a3);
}

uint64_t sub_1001BAC10(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  *(unsigned char *)(v1 - 67) = 2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1001BAC30()
{
  return v0 - 66;
}

uint64_t sub_1001BAC44()
{
  return v0;
}

uint64_t sub_1001BAC64@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 296) = a1;
  return swift_task_alloc();
}

uint64_t sub_1001BAC84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v13 = *(void *)(v11 + 56) + 32 * a1;
  return sub_1000074E0(v13, a11);
}

uint64_t sub_1001BACA4()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t sub_1001BACDC()
{
  return v0;
}

void sub_1001BACF0(char a1@<W8>)
{
  *(unsigned char *)(v1 - 273) = a1;
}

uint64_t sub_1001BACFC()
{
  return v0;
}

uint64_t sub_1001BAD1C()
{
  *(void *)(v0 + 320) = *(void *)(v0 + 168);
  return static GKLog.daemon.getter();
}

void sub_1001BAD3C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_1001BAD5C()
{
  return 0x726579616C70;
}

double sub_1001BAD70()
{
  return sub_1001699DC(25705, 0xE200000000000000, v0, (_OWORD *)(v1 - 240));
}

void *sub_1001BAD90()
{
  return sub_100165918(v0, v1);
}

uint64_t sub_1001BADB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1001B4220(a9, v9, a1);
}

uint64_t sub_1001BADE4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NWEndpoint.Port();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  uint64_t v10 = (char *)&v17 - v9;
  uint64_t v11 = sub_10000D938(&qword_100327C10);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001BDF4C(a1, (uint64_t)v14);
  if (sub_10000DB14((uint64_t)v14, 1, v2) == 1) {
    return 7104878;
  }
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v10, v14, v2);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v7, v10, v2);
  uint64_t v15 = String.init<A>(reflecting:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
  return v15;
}

void sub_1001BAFA0()
{
  sub_100011BD4();
  uint64_t v1 = v0;
  sub_100011C80();
  uint64_t v2 = type metadata accessor for Logger();
  sub_100011108();
  uint64_t v4 = v3;
  __chkstk_darwin(v5, v6);
  sub_1001BDFB4();
  uint64_t v9 = v7 - v8;
  __chkstk_darwin(v10, v11);
  if (*(void *)(v1 + 32))
  {
    if (swift_unknownObjectWeakLoadStrong())
    {
      swift_retain();
      os_log_type_t v25 = static os_log_type_t.info.getter();
      v26[0] = 0;
      v26[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(38);
      sub_100187890((uint64_t)"Starting Listener: ");
      _print_unlocked<A, B>(_:_:)();
      v12._uint64_t countAndFlagsBits = 0x6167656C6544202ELL;
      v12._object = (void *)0xEF203A7369206574;
      String.append(_:)(v12);
      sub_10000D938(&qword_100327770);
      _print_unlocked<A, B>(_:_:)();
      static GKLog.match.getter();
      swift_bridgeObjectRetain_n();
      uint64_t v13 = Logger.logObject.getter();
      if (os_log_type_enabled(v13, v25))
      {
        uint64_t v14 = (uint8_t *)sub_100016FF0();
        v26[0] = sub_100011BBC();
        *(_DWORD *)uint64_t v14 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v15 = sub_100174CE4(0, 0xE000000000000000, v26);
        sub_100017EF0(v15);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v13, v25, "Nearby - %s", v14, 0xCu);
        sub_1001BE048();
        sub_100010D7C();
        sub_100010D7C();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      sub_100011C3C();
      v23();
      swift_bridgeObjectRelease();
      swift_allocObject();
      swift_weakInit();
      swift_retain();
      sub_100168384((uint64_t)sub_1001BDBEC);
      NWListener.stateUpdateHandler.setter();
      swift_release_n();
      swift_allocObject();
      swift_weakInit();
      swift_retain();
      sub_100168384((uint64_t)sub_1001BDBF4);
      NWListener.newConnectionHandler.setter();
      swift_release_n();
      sub_100163CE4(0, (unint64_t *)&qword_100325F10);
      BOOL v24 = (void *)static OS_dispatch_queue.main.getter();
      NWListener.start(queue:)();

      swift_unknownObjectRelease();
      swift_release();
    }
  }
  else
  {
    os_log_type_t v16 = static os_log_type_t.info.getter();
    static GKLog.match.getter();
    uint64_t v17 = Logger.logObject.getter();
    if (os_log_type_enabled(v17, v16))
    {
      uint64_t v18 = v2;
      long long v19 = (_DWORD *)sub_100016FF0();
      uint64_t v20 = sub_100011BBC();
      _DWORD *v19 = 136315138;
      v26[0] = v20;
      uint64_t v21 = sub_100174CE4(0xD000000000000037, 0x80000001002B2500, v26);
      sub_100017EF0(v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100018394((void *)&_mh_execute_header, v17, v22, "Nearby - %s");
      swift_arrayDestroy();
      sub_100010D7C();
      sub_100010D7C();

      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v9, v18);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v9, v2);
    }
  }
  sub_100010DB0();
}

void sub_1001BB458()
{
  sub_100011BD4();
  uint64_t v1 = v0;
  sub_100011C80();
  uint64_t v2 = type metadata accessor for Logger();
  sub_100011108();
  uint64_t v4 = v3;
  __chkstk_darwin(v5, v6);
  sub_1000110F8();
  uint64_t v9 = v8 - v7;
  os_log_type_t v10 = static os_log_type_t.info.getter();
  v15[0] = 0;
  v15[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  sub_100187890((uint64_t)"Stopping listener: ");
  _print_unlocked<A, B>(_:_:)();
  static GKLog.match.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = v10;
  if (os_log_type_enabled(v11, v10))
  {
    uint64_t v13 = (uint8_t *)sub_100016FF0();
    v15[0] = sub_100011BBC();
    *(_DWORD *)uint64_t v13 = 136315138;
    swift_bridgeObjectRetain();
    sub_100174CE4(0, 0xE000000000000000, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Nearby - %s", v13, 0xCu);
    swift_arrayDestroy();
    sub_100010D7C();
    sub_100010D7C();

    sub_100011C3C();
    v14();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v9, v2);
  }
  swift_bridgeObjectRelease();
  if (*(void *)(v1 + 32))
  {
    swift_retain();
    sub_100168384(0);
    NWListener.stateUpdateHandler.setter();
    swift_release();
    if (*(void *)(v1 + 32))
    {
      swift_retain();
      sub_100168384(0);
      NWListener.newConnectionHandler.setter();
      swift_release();
      if (*(void *)(v1 + 32))
      {
        swift_retain();
        NWListener.cancel()();
        swift_release();
      }
    }
  }
  *(void *)(v1 + 32) = 0;
  swift_release();
  sub_100010DB0();
}

void sub_1001BB704()
{
  sub_100011BD4();
  uint64_t v1 = type metadata accessor for Logger();
  sub_100011108();
  uint64_t v3 = v2;
  __chkstk_darwin(v4, v5);
  sub_1001BDFB4();
  uint64_t v8 = v6 - v7;
  __chkstk_darwin(v9, v10);
  os_log_type_t v12 = ((char *)v43 - v11 + 184);
  id v13 = [self currentDevice];
  if (v13)
  {
    uint64_t v14 = sub_1001BDCF0(v13);
    if (!v15)
    {
      os_log_type_t v32 = static os_log_type_t.info.getter();
      static GKLog.match.getter();
      uint64_t v33 = Logger.logObject.getter();
      if (os_log_type_enabled(v33, v32))
      {
        uint64_t v34 = (_DWORD *)sub_100016FF0();
        v43[0] = sub_100011BBC();
        *uint64_t v34 = 136315138;
        uint64_t v35 = sub_100174CE4(0xD00000000000001DLL, 0x80000001002B2560, v43);
        sub_1001BDFC4(v35);
        sub_100017C40((void *)&_mh_execute_header, v36, v37, "Nearby - %s");
        swift_arrayDestroy();
        sub_100010D7C();
        sub_100010D7C();
      }

      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v8, v1);
      goto LABEL_17;
    }
    uint64_t v16 = v14;
    uint64_t v17 = v15;
    uint64_t v18 = v0 + 5;
    sub_1000170DC();
    uint64_t v19 = sub_100169AA4(101, 0xE100000000000000, v0[5]);
    if (v20)
    {
      uint64_t v21 = v19;
      uint64_t v22 = v20;
      swift_endAccess();
      sub_1000170DC();
      uint64_t v23 = sub_100169AA4(104, 0xE100000000000000, *v18);
      if (v24)
      {
        uint64_t v25 = v24;
        uint64_t v42 = v23;
        swift_endAccess();
        sub_1000170DC();
        uint64_t v26 = sub_100169AA4(28776, 0xE200000000000000, *v18);
        if (v27)
        {
          uint64_t v28 = v27;
          uint64_t v29 = v26;
          swift_endAccess();
          sub_10000D938(&qword_100327BF0);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_10024FCC0;
          *(void *)(inited + 32) = 0x4449656369766564;
          *(void *)(inited + 40) = 0xE800000000000000;
          *(void *)(inited + 48) = v16;
          *(void *)(inited + 56) = v17;
          *(void *)(inited + 64) = 101;
          *(void *)(inited + 72) = 0xE100000000000000;
          *(void *)(inited + 80) = v21;
          *(void *)(inited + 88) = v22;
          *(void *)(inited + 96) = 104;
          *(void *)(inited + 104) = 0xE100000000000000;
          *(void *)(inited + 112) = v42;
          *(void *)(inited + 120) = v25;
          *(void *)(inited + 128) = 28776;
          *(void *)(inited + 136) = 0xE200000000000000;
          *(void *)(inited + 144) = v29;
          *(void *)(inited + 152) = v28;
          *(void *)(inited + 160) = 0x4449726579616C70;
          *(void *)(inited + 168) = 0xE800000000000000;
          uint64_t v31 = v0[9];
          *(void *)(inited + 176) = v0[8];
          *(void *)(inited + 184) = v31;
          swift_bridgeObjectRetain();
          Dictionary.init(dictionaryLiteral:)();
LABEL_17:
          sub_100010DB0();
          return;
        }
        swift_endAccess();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_endAccess();
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_endAccess();
    }
    swift_bridgeObjectRelease();
    static os_log_type_t.info.getter();
    static GKLog.match.getter();
    uint64_t v38 = Logger.logObject.getter();
    if (sub_1000182D4(v38))
    {
      unint64_t v39 = (_DWORD *)sub_100016FF0();
      v43[0] = sub_100011BBC();
      _DWORD *v39 = 136315138;
      uint64_t v40 = sub_100174CE4(0xD00000000000001ALL, 0x80000001002B2580, v43);
      sub_1001BDFC4(v40);
      sub_100018394((void *)&_mh_execute_header, v12, v41, "Nearby - %s");
      swift_arrayDestroy();
      sub_100010D7C();
      sub_100010D7C();
    }

    (*(void (**)(NSObject *, uint64_t))(v3 + 8))(v12, v1);
    goto LABEL_17;
  }
  __break(1u);
}

id sub_1001BBAE8()
{
  id result = [self currentDevice];
  if (result)
  {
    id result = (id)sub_1001BDCF0(result);
    if (v2)
    {
      id v7 = result;
      swift_bridgeObjectRetain();
      v3._uint64_t countAndFlagsBits = 36;
      v3._object = (void *)0xE100000000000000;
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      uint64_t v5 = *(void *)(v0 + 64);
      uint64_t v4 = *(void **)(v0 + 72);
      swift_bridgeObjectRetain();
      v6._uint64_t countAndFlagsBits = v5;
      v6._object = v4;
      String.append(_:)(v6);
      swift_bridgeObjectRelease();
      return v7;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_1001BBBA4()
{
  sub_100011BD4();
  sub_100011C80();
  uint64_t v113 = v1;
  uint64_t v2 = sub_10000D938(&qword_100327C18);
  __chkstk_darwin(v2 - 8, v3);
  sub_1000110F8();
  uint64_t v116 = v5 - v4;
  uint64_t v6 = type metadata accessor for NWTXTRecord();
  sub_100011108();
  uint64_t v117 = v7;
  __chkstk_darwin(v8, v9);
  sub_1001BDFB4();
  uint64_t v115 = v10 - v11;
  __chkstk_darwin(v12, v13);
  uint64_t v118 = (char *)v110 - v14;
  type metadata accessor for Logger();
  sub_100011108();
  uint64_t v119 = v16;
  uint64_t v120 = v15;
  __chkstk_darwin(v15, v17);
  sub_1001BDFB4();
  uint64_t v20 = v18 - v19;
  uint64_t v23 = __chkstk_darwin(v21, v22);
  uint64_t v25 = __chkstk_darwin(v23, v24);
  uint64_t v27 = __chkstk_darwin(v25, v26);
  unint64_t v112 = ((char *)v110 - v28);
  uint64_t v30 = __chkstk_darwin(v27, v29);
  Swift::Int v114 = ((char *)v110 - v31);
  uint64_t v33 = __chkstk_darwin(v30, v32);
  uint64_t v35 = ((char *)v110 - v34);
  __chkstk_darwin(v33, v36);
  uint64_t v37 = type metadata accessor for NWEndpoint.Port();
  __chkstk_darwin(v37 - 8, v38);
  sub_1000110F8();
  id v39 = sub_1001BBAE8();
  if (!v40)
  {
    os_log_type_t v43 = static os_log_type_t.error.getter();
    static GKLog.match.getter();
    uint64_t v44 = Logger.logObject.getter();
    if (os_log_type_enabled(v44, v43))
    {
      uint64_t v45 = (_DWORD *)sub_100016FF0();
      uint64_t v123 = sub_100011BBC();
      *uint64_t v45 = 136315138;
      sub_100017CE4();
      uint64_t v47 = sub_100174CE4(v46 + 14, 0x80000001002B2610, &v123);
      sub_100010EC8(v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100010F60((void *)&_mh_execute_header, v44, v43, "Nearby - %s");
      swift_arrayDestroy();
      sub_100010D7C();
      sub_100010D7C();
    }

    sub_100016A0C();
    v48(v20);
    goto LABEL_11;
  }
  v110[3] = v39;
  uint64_t v111 = v6;
  type metadata accessor for NWParameters();
  uint64_t v41 = sub_1001C3BE0();
  swift_retain();
  static NWEndpoint.Port.any.getter();
  type metadata accessor for NWListener();
  swift_allocObject();
  uint64_t v42 = NWListener.init(using:on:)();
  v110[1] = v41;
  v0[4] = v42;
  v110[2] = v42;
  swift_retain();
  swift_release();
  uint64_t v49 = self;
  id v50 = [v49 currentDevice];
  if (v50)
  {
    uint64_t v51 = sub_1001BDCF0(v50);
    if (v52)
    {
      uint64_t v53 = v52;
      uint64_t v54 = v51;
      sub_1001BB704();
      if (v55)
      {
        NWTXTRecord.init(_:)();
        static os_log_type_t.info.getter();
        sub_100017400();
        _StringGuts.grow(_:)(39);
        swift_bridgeObjectRelease();
        uint64_t v123 = 0xD000000000000025;
        unint64_t v124 = 0x80000001002B26E0;
        v56._uint64_t countAndFlagsBits = v54;
        v56._object = v53;
        String.append(_:)(v56);
        swift_bridgeObjectRelease();
        uint64_t v57 = v123;
        unint64_t v58 = v124;
        static GKLog.match.getter();
        swift_bridgeObjectRetain_n();
        Swift::String v59 = Logger.logObject.getter();
        if (sub_1000182D4(v59))
        {
          uint64_t v60 = (uint8_t *)sub_100016FF0();
          uint64_t v123 = sub_100011BBC();
          *(_DWORD *)uint64_t v60 = 136315138;
          v110[0] = v60 + 4;
          swift_bridgeObjectRetain();
          uint64_t v61 = sub_100174CE4(v57, v58, &v123);
          sub_100010EC8(v61);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v35, (os_log_type_t)0x28u, "Nearby - %s", v60, 0xCu);
          swift_arrayDestroy();
          sub_100010D7C();
          sub_100010D7C();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v72 = (void (*)(NSObject *, uint64_t))*((void *)v119 + 1);
        uint64_t v73 = v35;
        uint64_t v74 = v120;
        v72(v73, v120);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, char *, uint64_t))(v117 + 16))(v115, v118, v111);
        uint64_t v75 = v116;
        NWListener.Service.init(name:type:domain:txtRecord:)();
        uint64_t v76 = type metadata accessor for NWListener.Service();
        sub_10000D97C(v75, 0, 1, v76);
        NWListener.service.setter();
        uint64_t Strong = swift_unknownObjectWeakLoadStrong();
        if (Strong)
        {
          uint64_t v78 = Strong;
          uint64_t v119 = v72;
          uint64_t v79 = v0[3];
          static os_log_type_t.info.getter();
          sub_100017400();
          _StringGuts.grow(_:)(43);
          sub_100017CE4();
          v81._uint64_t countAndFlagsBits = v80 - 13;
          v81._object = (void *)0x80000001002B2750;
          String.append(_:)(v81);
          uint64_t v121 = (uint64_t)v0;
          _print_unlocked<A, B>(_:_:)();
          v82._uint64_t countAndFlagsBits = 0x6167656C6564202CLL;
          v82._object = (void *)0xEC000000203A6574;
          String.append(_:)(v82);
          uint64_t v121 = v78;
          uint64_t v122 = v79;
          sub_10000D938(&qword_100327770);
          _print_unlocked<A, B>(_:_:)();
          uint64_t v84 = v123;
          unint64_t v83 = v124;
          uint64_t v85 = v114;
          static GKLog.match.getter();
          swift_bridgeObjectRetain_n();
          uint64_t v86 = Logger.logObject.getter();
          if (sub_1000182D4(v86))
          {
            id v87 = (_DWORD *)sub_100016FF0();
            uint64_t v123 = sub_100011BBC();
            *id v87 = 136315138;
            swift_bridgeObjectRetain();
            uint64_t v88 = sub_100174CE4(v84, v83, &v123);
            sub_1001BDFEC(v88);
            swift_bridgeObjectRelease_n();
            sub_100018394((void *)&_mh_execute_header, v85, v89, "Nearby - %s");
            swift_arrayDestroy();
            sub_100010D7C();
            sub_100010D7C();

            v119(v114, v120);
          }
          else
          {

            swift_bridgeObjectRelease_n();
            uint64_t v108 = sub_100018558();
            v109(v108);
          }
          sub_100017B90();
          swift_release();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          os_log_type_t v90 = static os_log_type_t.error.getter();
          uint64_t v91 = v112;
          static GKLog.match.getter();
          uint64_t v92 = Logger.logObject.getter();
          if (os_log_type_enabled(v92, v90))
          {
            uint64_t v93 = (_DWORD *)sub_100016FF0();
            uint64_t v94 = sub_100011BBC();
            uint64_t v119 = v72;
            uint64_t v123 = v94;
            *uint64_t v93 = 136315138;
            sub_100017CE4();
            uint64_t v96 = sub_100174CE4(v95 + 8, 0x80000001002B2710, &v123);
            sub_1001BE014(v96);
            sub_100010F60((void *)&_mh_execute_header, v92, v90, "Nearby - %s");
            sub_1001BE048();
            sub_100010D7C();
            sub_100010D7C();

            uint64_t v97 = sub_100018558();
            v98(v97);
          }
          else
          {

            v72(v91, v74);
          }
          sub_100017B90();
          swift_release();
        }
        (*(void (**)(char *))(v117 + 8))(v118);
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        os_log_type_t v67 = static os_log_type_t.error.getter();
        static GKLog.match.getter();
        uint64_t v68 = Logger.logObject.getter();
        if (os_log_type_enabled(v68, v67))
        {
          uint64_t v69 = (_DWORD *)sub_100016FF0();
          uint64_t v123 = sub_100011BBC();
          *uint64_t v69 = 136315138;
          uint64_t v70 = sub_100174CE4(0xD000000000000028, 0x80000001002B26B0, &v123);
          sub_1001BE014(v70);
          sub_100010F60((void *)&_mh_execute_header, v68, v67, "Nearby - %s");
          sub_1001BE048();
          sub_100010D7C();
          sub_100010D7C();
        }

        sub_100016A0C();
        sub_100011C3C();
        v71();
        sub_100017B90();
        swift_release();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      os_log_type_t v62 = static os_log_type_t.error.getter();
      sub_100017400();
      _StringGuts.grow(_:)(42);
      swift_bridgeObjectRelease();
      uint64_t v123 = 0xD000000000000028;
      unint64_t v124 = 0x80000001002B2680;
      id v63 = [v49 currentDevice];
      if (v63)
      {
        uint64_t v121 = (uint64_t)v63;
        sub_100163CE4(0, &qword_100327C20);
        uint64_t v64 = String.init<A>(reflecting:)();
        unint64_t v66 = v65;
      }
      else
      {
        unint64_t v66 = 0xE300000000000000;
        uint64_t v64 = 7104878;
      }
      unint64_t v99 = v66;
      String.append(_:)(*(Swift::String *)&v64);
      swift_bridgeObjectRelease();
      uint64_t v101 = v123;
      unint64_t v100 = v124;
      static GKLog.match.getter();
      sub_100017DA4();
      unint64_t v102 = Logger.logObject.getter();
      if (os_log_type_enabled(v102, v62))
      {
        uint64_t v103 = (_DWORD *)sub_100016FF0();
        uint64_t v123 = sub_100011BBC();
        *uint64_t v103 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v104 = sub_100174CE4(v101, v100, &v123);
        sub_1001BDFEC(v104);
        sub_100017D30();
        sub_100017C40((void *)&_mh_execute_header, v105, v106, "Nearby - %s");
        swift_arrayDestroy();
        sub_100010D7C();
        sub_100010D7C();
      }
      else
      {

        sub_100017E0C();
      }
      sub_100016A0C();
      sub_100011C3C();
      v107();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
LABEL_11:
    sub_100010DB0();
    return;
  }
  __break(1u);
}

uint64_t sub_1001BC87C(uint64_t a1)
{
  v2[10] = a1;
  v2[11] = v1;
  uint64_t v3 = type metadata accessor for NWError();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[16] = v4;
  v2[17] = *(void *)(v4 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  sub_10000D938(&qword_100327C10);
  v2[22] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for NWListener.State();
  v2[23] = v5;
  unsigned char v2[24] = *(void *)(v5 - 8);
  v2[25] = swift_task_alloc();
  return _swift_task_switch(sub_1001BCA5C, 0, 0);
}

uint64_t sub_1001BCA5C()
{
  uint64_t v73 = v0;
  uint64_t v1 = v0[11];
  uint64_t v2 = *(void *)(v1 + 32);
  v0[26] = v2;
  if (!v2) {
    goto LABEL_29;
  }
  (*(void (**)(void, void, void))(v0[24] + 16))(v0[25], v0[10], v0[23]);
  uint64_t v3 = sub_1001BE03C();
  int v5 = v4(v3);
  if (v5 != enum case for NWListener.State.failed(_:))
  {
    if (v5 == enum case for NWListener.State.ready(_:))
    {
      uint64_t v22 = v0[22];
      swift_retain();
      os_log_type_t v23 = static os_log_type_t.info.getter();
      sub_100011330();
      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease();
      uint64_t v71 = 0xD000000000000012;
      unint64_t v72 = 0x80000001002B25F0;
      NWListener.port.getter();
      uint64_t v24 = sub_1001BADE4(v22);
      uint64_t v26 = v25;
      sub_1001BDEEC(v22);
      v27._uint64_t countAndFlagsBits = v24;
      v27._object = v26;
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      static GKLog.match.getter();
      swift_bridgeObjectRetain_n();
      uint64_t v28 = Logger.logObject.getter();
      BOOL v29 = os_log_type_enabled(v28, v23);
      uint64_t v30 = v0[21];
      uint64_t v32 = v0[16];
      uint64_t v31 = v0[17];
      if (v29)
      {
        uint64_t v66 = v0[16];
        uint64_t v33 = (uint8_t *)sub_100016FF0();
        uint64_t v71 = sub_100011BBC();
        *(_DWORD *)uint64_t v33 = 136315138;
        swift_bridgeObjectRetain();
        v0[9] = sub_100174CE4(0xD000000000000012, 0x80000001002B25F0, &v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v28, v23, "Nearby - %s", v33, 0xCu);
        swift_arrayDestroy();
        sub_100010D7C();
        sub_100010D7C();

        (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v66);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
      }
      swift_bridgeObjectRelease();
LABEL_28:
      swift_release();
      goto LABEL_29;
    }
    if (v5 == enum case for NWListener.State.cancelled(_:))
    {
      swift_retain();
      os_log_type_t v42 = static os_log_type_t.info.getter();
      static GKLog.match.getter();
      os_log_type_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = v42;
      BOOL v45 = os_log_type_enabled(v43, v42);
      uint64_t v47 = v0[17];
      uint64_t v46 = v0[18];
      uint64_t v48 = v0[16];
      if (v45)
      {
        uint64_t v70 = v0[18];
        uint64_t v49 = (_DWORD *)sub_100016FF0();
        uint64_t v71 = sub_100011BBC();
        *uint64_t v49 = 136315138;
        v0[6] = sub_100174CE4(0xD000000000000025, 0x80000001002B25A0, &v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_100010F60((void *)&_mh_execute_header, v43, v44, "Nearby - %s");
        swift_arrayDestroy();
        sub_100010D7C();
        sub_100010D7C();

        (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v70, v48);
      }
      else
      {

        (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v48);
      }
      swift_release();
      *(void *)(v1 + 32) = 0;
      goto LABEL_28;
    }
    (*(void (**)(void, void))(v0[24] + 8))(v0[25], v0[23]);
LABEL_29:
    sub_100018130();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v64 = (uint64_t (*)(void))v0[1];
    return v64();
  }
  uint64_t v6 = v0[25];
  uint64_t v8 = (_DWORD *)v0[14];
  uint64_t v7 = v0[15];
  uint64_t v10 = v0[12];
  uint64_t v9 = v0[13];
  (*(void (**)(uint64_t, void))(v0[24] + 96))(v6, v0[23]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v7, v6, v10);
  *uint64_t v8 = -65569;
  (*(void (**)(_DWORD *, void, uint64_t))(v9 + 104))(v8, enum case for NWError.dns(_:), v10);
  swift_retain();
  LOBYTE(v6) = static NWError.== infix(_:_:)();
  uint64_t v11 = *(void (**)(_DWORD *, uint64_t))(v9 + 8);
  v0[27] = v11;
  v0[28] = (v9 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v11(v8, v10);
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (v6)
  {
    sub_100011330();
    _StringGuts.grow(_:)(35);
    unint64_t v13 = v72;
    v0[4] = v71;
    v0[5] = v13;
    v14._uint64_t countAndFlagsBits = sub_1001BE084();
    String.append(_:)(v14);
    _print_unlocked<A, B>(_:_:)();
    v15._uint64_t countAndFlagsBits = 0x726174736572202CLL;
    v15._object = (void *)0xEC000000676E6974;
    String.append(_:)(v15);
    uint64_t v17 = (uint8_t *)v0[4];
    unint64_t v16 = v0[5];
    static GKLog.match.getter();
    sub_100017DA4();
    uint64_t v18 = Logger.logObject.getter();
    BOOL v19 = os_log_type_enabled(v18, v12);
    uint64_t v20 = v0[16];
    uint64_t v21 = v0[17];
    if (v19)
    {
      uint64_t v68 = v0[20];
      uint64_t v65 = (uint64_t)v17;
      uint64_t v17 = (uint8_t *)sub_100016FF0();
      uint64_t v71 = sub_100011BBC();
      *(_DWORD *)uint64_t v17 = 136315138;
      swift_bridgeObjectRetain();
      v0[8] = sub_100174CE4(v65, v16, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100017D30();
      _os_log_impl((void *)&_mh_execute_header, v18, v12, "Nearby - %s", v17, 0xCu);
      swift_arrayDestroy();
      sub_100010D7C();
      sub_100010D7C();

      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v68, v20);
    }
    else
    {

      sub_100017E0C();
      uint64_t v50 = sub_1001BE03C();
      v52(v50, v51);
    }
    swift_bridgeObjectRelease();
    uint64_t v53 = v0[11];
    sub_1001BB458();
    sub_1001BBBA4();
    sub_1001BAFA0();
    goto LABEL_25;
  }
  sub_100011330();
  _StringGuts.grow(_:)(33);
  unint64_t v34 = v72;
  v0[2] = v71;
  v0[3] = v34;
  v35._uint64_t countAndFlagsBits = sub_1001BE084();
  String.append(_:)(v35);
  _print_unlocked<A, B>(_:_:)();
  v36._uint64_t countAndFlagsBits = 0x6970706F7473202CLL;
  v36._object = (void *)0xEA0000000000676ELL;
  String.append(_:)(v36);
  uint64_t v17 = (uint8_t *)v0[2];
  unint64_t v16 = v0[3];
  static GKLog.match.getter();
  sub_100017DA4();
  uint64_t v37 = Logger.logObject.getter();
  BOOL v38 = os_log_type_enabled(v37, v12);
  uint64_t v39 = v0[17];
  if (v38)
  {
    uint64_t v69 = v0[16];
    uint64_t v67 = v0[19];
    uint64_t v40 = (_DWORD *)sub_100016FF0();
    uint64_t v41 = (uint64_t)v17;
    uint64_t v17 = (uint8_t *)sub_100011BBC();
    uint64_t v71 = (uint64_t)v17;
    _DWORD *v40 = 136315138;
    swift_bridgeObjectRetain();
    v0[7] = sub_100174CE4(v41, v16, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100017D30();
    sub_100010F60((void *)&_mh_execute_header, v37, v12, "Nearby - %s");
    swift_arrayDestroy();
    sub_100010D7C();
    sub_100010D7C();

    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v67, v69);
  }
  else
  {

    sub_100017E0C();
    uint64_t v54 = sub_1001BE03C();
    v56(v54, v55);
  }
  swift_bridgeObjectRelease();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  v0[29] = Strong;
  if (!Strong)
  {
    uint64_t v53 = v0[11];
    sub_1001BB458();
LABEL_25:
    sub_1001BE064();
    ((void (*)(uint64_t, unint64_t))v17)(v53, v16);
    goto LABEL_29;
  }
  uint64_t v58 = v0[15];
  uint64_t v59 = v0[12];
  uint64_t v60 = v0[13];
  sub_100168740();
  v0[30] = swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 16))(v61, v58, v59);
  os_log_type_t v62 = (void *)swift_task_alloc();
  v0[31] = v62;
  *os_log_type_t v62 = v0;
  v62[1] = sub_1001BD3C0;
  return sub_1001824B0();
}

uint64_t sub_1001BD3C0()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  swift_task_dealloc();
  swift_unknownObjectRelease();
  swift_errorRelease();
  return _swift_task_switch(sub_1001BD4C4, 0, 0);
}

uint64_t sub_1001BD4C4()
{
  uint64_t v3 = *(void *)(v1 + 88);
  sub_1001BB458();
  sub_1001BE064();
  v2(v3, v0);
  sub_100018130();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v1 + 8);
  return v4();
}

uint64_t sub_1001BD588(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NWListener.State();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2, v5);
  uint64_t v6 = sub_10000D938(&qword_100326298);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v11 = result;
    uint64_t v12 = type metadata accessor for TaskPriority();
    sub_10000D97C((uint64_t)v9, 1, 1, v12);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
    unint64_t v13 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    Swift::String v14 = (char *)swift_allocObject();
    *((void *)v14 + 2) = 0;
    *((void *)v14 + 3) = 0;
    *((void *)v14 + 4) = v11;
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(&v14[v13], (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
    sub_100006CBC();
    return swift_release();
  }
  return result;
}

uint64_t sub_1001BD75C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_100168790;
  return sub_1001BC87C(a5);
}

uint64_t sub_1001BD7F8(uint64_t a1)
{
  uint64_t v2 = sub_10000D938(&qword_100326298);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = type metadata accessor for TaskPriority();
    sub_10000D97C((uint64_t)v5, 1, 1, v8);
    uint64_t v9 = (void *)swift_allocObject();
    v9[2] = 0;
    v9[3] = 0;
    void v9[4] = v7;
    v9[5] = a1;
    swift_retain();
    sub_1001D9DDC();
    return swift_release();
  }
  return result;
}

uint64_t sub_1001BD904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  void v5[4] = a5;
  uint64_t v5[2] = a1;
  return _swift_task_switch(sub_1001BD928, 0, 0);
}

uint64_t sub_1001BD928()
{
  sub_100010DA4();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  *(void *)(v0 + 40) = Strong;
  if (Strong)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 48) = v2;
    void *v2 = v0;
    v2[1] = sub_1001BDA0C;
    return sub_1001829D8();
  }
  else
  {
    **(unsigned char **)(v0 + 16) = 1;
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
}

uint64_t sub_1001BDA0C()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  swift_task_dealloc();
  swift_unknownObjectRelease();
  return _swift_task_switch(sub_1001BDAF4, 0, 0);
}

uint64_t sub_1001BDAF4()
{
  **(unsigned char **)(v0 + 16) = *(void *)(v0 + 40) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001BDB1C()
{
  sub_10016835C(v0 + 16);
  swift_release();
  swift_bridgeObjectRelease();
  sub_100169274(*(void *)(v0 + 48), *(void *)(v0 + 56));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1001BDB5C()
{
  sub_1001BDB1C();

  return _swift_deallocClassInstance(v0, 80, 7);
}

uint64_t type metadata accessor for PeerListener()
{
  return self;
}

uint64_t sub_1001BDBB4()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001BDBEC(uint64_t a1)
{
  return sub_1001BD588(a1);
}

uint64_t sub_1001BDBF4(uint64_t a1)
{
  return sub_1001BD7F8(a1);
}

uint64_t sub_1001BDBFC()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001BDC44()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100168790;
  uint64_t v2 = sub_100011380();
  return sub_1001BD904(v2, v3, v4, v5, v6);
}

uint64_t sub_1001BDCF0(void *a1)
{
  id v2 = [a1 udid];

  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return sub_1001BE03C();
}

uint64_t sub_1001BDD5C()
{
  uint64_t v1 = type metadata accessor for NWListener.State();
  sub_100011108();
  uint64_t v3 = v2;
  uint64_t v4 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = (v4 + 40) & ~v4;
  uint64_t v6 = v4 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v5, v1);
  uint64_t v7 = sub_1001BE03C();

  return _swift_deallocObject(v7, v8, v6);
}

uint64_t sub_1001BDE04()
{
  type metadata accessor for NWListener.State();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10016867C;
  uint64_t v2 = sub_100011380();
  return sub_1001BD75C(v2, v3, v4, v5, v6);
}

uint64_t sub_1001BDEEC(uint64_t a1)
{
  uint64_t v2 = sub_10000D938(&qword_100327C10);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001BDF4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D938(&qword_100327C10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001BDFC4(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1001BDFEC(uint64_t a1)
{
  *(void *)(v1 - 160) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1001BE014(uint64_t a1)
{
  *(void *)(v1 - 160) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1001BE03C()
{
  return v0;
}

uint64_t sub_1001BE048()
{
  return swift_arrayDestroy();
}

uint64_t sub_1001BE064()
{
  return swift_release();
}

unint64_t sub_1001BE084()
{
  return 0xD000000000000015;
}

uint64_t sub_1001BE098(uint64_t a1)
{
  *(void *)(v1 + 112) = a1;
  return swift_release();
}

id sub_1001BE0A8(uint64_t a1)
{
  swift_defaultActor_initialize();
  v1[14] = 0;
  v1[15] = a1;
  v4.receiver = v1;
  v4.Class super_class = (Class)type metadata accessor for FairPlaySessionProvider();
  return [super init];
}

uint64_t sub_1001BE11C()
{
  sub_100010DA4();
  v1[5] = v2;
  v1[6] = v0;
  void v1[4] = v3;
  uint64_t v4 = sub_10000D938(&qword_100326298);
  sub_1000170D0(v4);
  v1[7] = sub_1000171A0();
  return _swift_task_switch(sub_1001BE1A4, v0, 0);
}

uint64_t sub_1001BE1A4()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = *(void *)(v1 + 112);
  v0[8] = v2;
  if (v2)
  {
    swift_retain();
    uint64_t v3 = (void *)swift_task_alloc();
    v0[9] = v3;
    unint64_t v4 = sub_1001C138C();
    uint64_t v5 = sub_10000D938(&qword_100326538);
    void *v3 = v0;
    v3[1] = sub_1001BE47C;
    uint64_t v6 = v0 + 3;
    uint64_t v7 = v2;
  }
  else
  {
    uint64_t v8 = v0[7];
    uint64_t v28 = v8;
    uint64_t v9 = (void *)v0[4];
    BOOL v29 = (void *)v0[5];
    uint64_t v10 = type metadata accessor for Date();
    v0[11] = v10;
    sub_100011108();
    uint64_t v12 = v11;
    v0[12] = v11;
    uint64_t v14 = *(void *)(v13 + 64);
    uint64_t v15 = swift_task_alloc();
    v0[13] = v15;
    Date.init()();
    uint64_t v16 = type metadata accessor for TaskPriority();
    sub_10000D97C(v8, 1, 1, v16);
    uint64_t v17 = swift_task_alloc();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v17, v15, v10);
    unint64_t v18 = sub_1001C114C();
    unint64_t v19 = (*(unsigned __int8 *)(v12 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    unint64_t v20 = (v14 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v21 = (char *)swift_allocObject();
    *((void *)v21 + 2) = v1;
    *((void *)v21 + 3) = v18;
    *((void *)v21 + 4) = v9;
    *((void *)v21 + 5) = v1;
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(&v21[v19], v17, v10);
    *(void *)&v21[v20] = v29;
    swift_task_dealloc();
    swift_retain_n();
    id v22 = v9;
    id v23 = v29;
    uint64_t v24 = sub_1001BFDEC(v28, (uint64_t)&unk_100327C88, (uint64_t)v21);
    v0[14] = v24;
    uint64_t v25 = swift_retain();
    sub_1001BE098(v25);
    uint64_t v26 = (void *)swift_task_alloc();
    v0[15] = v26;
    unint64_t v4 = sub_1001C138C();
    uint64_t v5 = sub_10000D938(&qword_100326538);
    *uint64_t v26 = v0;
    v26[1] = sub_1001BE5EC;
    uint64_t v6 = v0 + 2;
    uint64_t v7 = v24;
  }
  return Task.value.getter(v6, v7, v4, v5, &protocol self-conformance witness table for Error);
}

uint64_t sub_1001BE47C()
{
  sub_1000112E8();
  sub_100011C24();
  sub_1000111B4();
  *unint64_t v4 = v3;
  *unint64_t v4 = *v2;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v1 + 48);
  if (v0) {
    uint64_t v6 = sub_1001BE778;
  }
  else {
    uint64_t v6 = sub_1001BE57C;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1001BE57C()
{
  sub_100010DA4();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 24);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_1001BE5EC()
{
  sub_1000112E8();
  sub_100011C24();
  sub_1000111B4();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v2;
  *(void *)(v3 + 128) = v0;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v1 + 48);
  if (v0) {
    uint64_t v6 = sub_1001BE7DC;
  }
  else {
    uint64_t v6 = sub_1001BE6EC;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1001BE6EC()
{
  sub_1000112E8();
  swift_release();
  uint64_t v1 = sub_1000173E8();
  v2(v1);
  uint64_t v3 = *(void *)(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v4(v3);
}

uint64_t sub_1001BE778()
{
  sub_100010DA4();
  swift_release();
  swift_task_dealloc();
  sub_1000112AC();
  return v0();
}

uint64_t sub_1001BE7DC()
{
  sub_1000112E8();
  swift_release();
  uint64_t v0 = sub_1000173E8();
  v1(v0);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000112AC();
  return v2();
}

uint64_t sub_1001BE85C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[46] = a6;
  v7[47] = a7;
  v7[44] = a4;
  v7[45] = a5;
  v7[43] = a1;
  uint64_t v8 = type metadata accessor for Logger();
  v7[48] = v8;
  v7[49] = *(void *)(v8 - 8);
  v7[50] = swift_task_alloc();
  v7[51] = swift_task_alloc();
  v7[52] = swift_task_alloc();
  uint64_t v9 = (void *)swift_task_alloc();
  v7[53] = v9;
  *uint64_t v9 = v7;
  v9[1] = sub_1001BE9AC;
  return sub_1001BF9BC((uint64_t)(v7 + 2));
}

uint64_t sub_1001BE9AC()
{
  sub_1000112E8();
  sub_100011168();
  uint64_t v3 = v2;
  sub_1000111B4();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_100010D94();
  *uint64_t v6 = v5;
  v3[54] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = v3[45];
    return _swift_task_switch(sub_1001BF780, v7, 0);
  }
  else
  {
    uint64_t v8 = (void *)swift_task_alloc();
    v3[55] = v8;
    *uint64_t v8 = v5;
    v8[1] = sub_1001BEB3C;
    uint64_t v9 = v3[44];
    return sub_1001C0244((uint64_t)(v3 + 2), v9);
  }
}

uint64_t sub_1001BEB3C()
{
  sub_100011168();
  uint64_t v3 = v2;
  sub_1000111B4();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 448) = v5;
  *(void *)(v3 + 456) = v6;
  *(void *)(v3 + 464) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 360);
    *(_OWORD *)(v3 + 232) = *(_OWORD *)(v3 + 16);
    sub_100179E58(v3 + 232);
    *(_OWORD *)(v3 + 296) = *(_OWORD *)(v3 + 32);
    sub_100179E58(v3 + 296);
    *(_OWORD *)(v3 + 280) = *(_OWORD *)(v3 + 48);
    sub_100179E58(v3 + 280);
    uint64_t v8 = sub_1001BF834;
    uint64_t v9 = v7;
  }
  else
  {
    uint64_t v9 = *(void *)(v3 + 360);
    uint64_t v8 = sub_1001BECC4;
  }
  return _swift_task_switch(v8, v9, 0);
}

uint64_t sub_1001BECC4()
{
  uint64_t v2 = *(void *)(v0 + 448);
  uint64_t v1 = *(void *)(v0 + 456);
  id v3 = [objc_allocWithZone((Class)GKFairPlaySAPSession) init];
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  *(void *)(v0 + 472) = v3;
  *(void *)(v0 + 480) = v4;
  swift_bridgeObjectRetain();
  sub_1001C13CC(v5, v4, v3);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 320) = 0;
  id v6 = sub_1001C1424(v2, v1, v0 + 320, v3, (SEL *)&selRef_exchangeData_error_);
  uint64_t v7 = *(void **)(v0 + 320);
  if (!v6)
  {
    uint64_t v22 = *(void *)(v0 + 448);
    unint64_t v21 = *(void *)(v0 + 456);
    id v23 = v7;
    swift_bridgeObjectRelease();
    *(_OWORD *)(v0 + 136) = *(_OWORD *)(v0 + 32);
    sub_100179E58(v0 + 136);
    *(_OWORD *)(v0 + 152) = *(_OWORD *)(v0 + 48);
    sub_100179E58(v0 + 152);
    _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_100169274(v22, v21);

    sub_100017A60();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10001139C();
    sub_1000113AC();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v8 = v6;
  id v9 = v7;
  *(void *)(v0 + 488) = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 496) = v10;

  static GKLog.daemon.getter();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "MESCAL:did exchange initialize cert data", v13, 2u);
    swift_slowDealloc();
  }
  uint64_t v14 = *(void *)(v0 + 416);
  uint64_t v15 = *(void *)(v0 + 384);
  uint64_t v16 = *(void *)(v0 + 392);

  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
  *(void *)(v0 + 504) = v17;
  *(void *)(v0 + 512) = (v16 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v17(v14, v15);
  unint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v0 + 520) = v18;
  *unint64_t v18 = v0;
  v18[1] = sub_1001BEFA4;
  sub_1000113AC();
  return sub_1001C075C();
}

uint64_t sub_1001BEFA4()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  sub_100010D94();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1000111B4();
  *id v6 = v5;
  *(void *)(v3 + 528) = v7;
  *(void *)(v3 + 536) = v8;
  *(void *)(v3 + 544) = v0;
  swift_task_dealloc();
  uint64_t v9 = *(void *)(v2 + 360);
  swift_bridgeObjectRelease();
  uint64_t v10 = (_OWORD *)(v3 + 32);
  uint64_t v11 = (_OWORD *)(v3 + 48);
  if (v0)
  {
    *(_OWORD *)(v3 + 168) = *v10;
    sub_100179E58(v3 + 168);
    *(_OWORD *)(v3 + 184) = *v11;
    sub_100179E58(v3 + 184);
    os_log_type_t v12 = sub_1001BF8E8;
  }
  else
  {
    *(_OWORD *)(v3 + 200) = *v10;
    sub_100179E58(v3 + 200);
    *(_OWORD *)(v3 + 216) = *v11;
    sub_100179E58(v3 + 216);
    os_log_type_t v12 = sub_1001BF174;
  }
  return _swift_task_switch(v12, v9, 0);
}

uint64_t sub_1001BF174()
{
  uint64_t v1 = *(void *)(v0 + 536);
  uint64_t v2 = *(void *)(v0 + 528);
  uint64_t v3 = self;
  *(void *)(v0 + 312) = 0;
  id v4 = sub_1001C1424(v2, v1, v0 + 312, v3, (SEL *)&selRef__gkDictionaryWithServerData_error_);
  uint64_t v5 = *(void **)(v0 + 312);
  if (!v4)
  {
    uint64_t v46 = *(void *)(v0 + 488);
    unint64_t v75 = *(void *)(v0 + 496);
    uint64_t v47 = *(void **)(v0 + 472);
    id v48 = v5;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_1001C17C8();
    uint64_t v49 = sub_100017F04();
    sub_100169274(v49, v50);

    uint64_t v51 = v46;
    unint64_t v52 = v75;
    goto LABEL_14;
  }
  id v6 = v4;
  uint64_t v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = v5;

  static GKLog.daemon.getter();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "MESCAL:got the setup data from the server", v11, 2u);
    swift_slowDealloc();
  }
  os_log_type_t v12 = *(void (**)(uint64_t, uint64_t))(v0 + 504);
  uint64_t v13 = *(void *)(v0 + 408);
  uint64_t v14 = *(void *)(v0 + 384);

  v12(v13, v14);
  *(void *)(v0 + 264) = 0xD000000000000010;
  *(void *)(v0 + 272) = 0x80000001002B2800;
  AnyHashable.init<A>(_:)();
  sub_100169A40(v7, (_OWORD *)(v0 + 104));
  swift_bridgeObjectRelease();
  sub_1001658C4(v0 + 64);
  if (!*(void *)(v0 + 128))
  {
    sub_10000DB3C(v0 + 104, &qword_100326FD0);
    goto LABEL_13;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_13:
    unint64_t v53 = *(void *)(v0 + 536);
    uint64_t v54 = *(void *)(v0 + 528);
    uint64_t v56 = *(void *)(v0 + 488);
    unint64_t v55 = *(void *)(v0 + 496);
    uint64_t v57 = *(void **)(v0 + 472);
    uint64_t v59 = *(void *)(v0 + 448);
    unint64_t v58 = *(void *)(v0 + 456);
    sub_1001C1100();
    uint64_t v60 = sub_1000169D0();
    sub_100018154(v60, v61);
    sub_100169274(v54, v53);
    sub_100169274(v56, v55);

    uint64_t v51 = v59;
    unint64_t v52 = v58;
    goto LABEL_14;
  }
  uint64_t v15 = Data.init(base64Encoded:options:)();
  unint64_t v17 = v16;
  swift_bridgeObjectRelease();
  Class isa = 0;
  if (v17 >> 60 != 15)
  {
    uint64_t v19 = sub_100017F04();
    sub_100175574(v19, v20);
    sub_100017F04();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v21 = sub_100017F04();
    sub_100169260(v21, v22);
  }
  uint64_t v74 = v15;
  id v23 = *(void **)(v0 + 472);
  *(void *)(v0 + 328) = 0;
  id v24 = [v23 exchangeData:isa error:v0 + 328];

  id v25 = *(id *)(v0 + 328);
  if (v24)
  {
    uint64_t v26 = *(void **)(v0 + 376);
    uint64_t v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100169274(v27, v28);

    Date.timeIntervalSinceNow.getter();
    double v30 = v29;
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v33 = v32;
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v36 = v35;
    Class v37 = Date._bridgeToObjectiveC()().super.isa;
    sub_1001C1484(v31, v33, v34, v36, (uint64_t)v37, v26);

    static GKLog.daemon.getter();
    BOOL v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.info.getter();
    BOOL v40 = os_log_type_enabled(v38, v39);
    uint64_t v42 = *(void *)(v0 + 488);
    unint64_t v41 = *(void *)(v0 + 496);
    uint64_t v44 = *(void *)(v0 + 448);
    unint64_t v43 = *(void *)(v0 + 456);
    if (v40)
    {
      unint64_t v72 = *(void *)(v0 + 456);
      uint64_t v71 = *(void *)(v0 + 448);
      BOOL v45 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)BOOL v45 = 134217984;
      *(double *)(v0 + 336) = -v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "MESCAL:did finish exchanging cert data after %f seconds", v45, 0xCu);
      swift_slowDealloc();
      sub_1001C17C8();
      sub_100169274(v42, v41);
      sub_100169274(v71, v72);

      sub_100169260(v74, v17);
    }
    else
    {
      sub_1001C17C8();
      sub_100169274(v42, v41);
      sub_100169274(v44, v43);
      sub_100169260(v74, v17);
    }
    uint64_t v69 = *(void *)(v0 + 472);
    uint64_t v70 = *(void **)(v0 + 344);
    (*(void (**)(void, void))(v0 + 504))(*(void *)(v0 + 400), *(void *)(v0 + 384));
    *uint64_t v70 = v69;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v62 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_15;
  }
  uint64_t v64 = v25;
  unint64_t v65 = *(void *)(v0 + 536);
  uint64_t v66 = *(void *)(v0 + 528);
  uint64_t v67 = *(void *)(v0 + 488);
  unint64_t v73 = *(void *)(v0 + 496);
  uint64_t v68 = *(void **)(v0 + 472);
  _convertNSErrorToError(_:)();

  swift_willThrow();
  sub_1001C17C8();
  sub_100169274(v66, v65);

  sub_100169260(v74, v17);
  uint64_t v51 = v67;
  unint64_t v52 = v73;
LABEL_14:
  sub_100169274(v51, v52);
  sub_1001BE098(0);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v62 = *(uint64_t (**)(void))(v0 + 8);
LABEL_15:
  return v62();
}

uint64_t sub_1001BF780()
{
  sub_100017D24();
  sub_100017A60();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10001139C();
  return v0();
}

uint64_t sub_1001BF834()
{
  sub_100017D24();
  sub_100017A60();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10001139C();
  return v0();
}

uint64_t sub_1001BF8E8()
{
  sub_100017D24();
  uint64_t v1 = (void *)v0[59];
  uint64_t v2 = v0[56];
  unint64_t v3 = v0[57];
  sub_100169274(v0[61], v0[62]);

  sub_100169274(v2, v3);
  sub_100017A60();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10001139C();
  return v4();
}

uint64_t sub_1001BF9BC(uint64_t a1)
{
  *(void *)(v2 + 168) = a1;
  *(void *)(v2 + 176) = v1;
  return sub_100010F94((uint64_t)sub_1001BF9D8, 0);
}

uint64_t sub_1001BF9D8()
{
  sub_1000112E8();
  uint64_t v1 = (void *)v0[22];
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_1001BFAD0;
  uint64_t v2 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1001C0FE0;
  v0[13] = &unk_1002DEB50;
  v0[14] = v2;
  [v1 getValuesWithCompletion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1001BFAD0()
{
  sub_100010DA4();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  return _swift_task_switch(sub_1001BFBA4, 0, 0);
}

void sub_1001BFBA4()
{
  if (!*(void *)(v0 + 120)) {
    goto LABEL_11;
  }
  strcpy((char *)(v0 + 152), "gk-sap-version");
  *(unsigned char *)(v0 + 167) = -18;
  AnyHashable.init<A>(_:)();
  sub_1000183B0();
  sub_1001658C4(v0 + 80);
  if (!*(void *)(v0 + 144)) {
    goto LABEL_9;
  }
  if (sub_1001C178C())
  {
    uint64_t v1 = *(void *)(v0 + 152);
    *(void *)(v0 + 152) = 0xD000000000000015;
    *(void *)(v0 + 160) = 0x80000001002B2820;
    AnyHashable.init<A>(_:)();
    sub_1000183B0();
    sub_1001658C4(v0 + 80);
    if (!*(void *)(v0 + 144)) {
      goto LABEL_9;
    }
    if (sub_1001C178C())
    {
      uint64_t v3 = *(void *)(v0 + 152);
      uint64_t v2 = *(void *)(v0 + 160);
      strcpy((char *)(v0 + 152), "gk-sap-setup");
      *(unsigned char *)(v0 + 165) = 0;
      *(_WORD *)(v0 + 166) = -5120;
      AnyHashable.init<A>(_:)();
      sub_1000183B0();
      swift_bridgeObjectRelease();
      sub_1001658C4(v0 + 80);
      if (*(void *)(v0 + 144))
      {
        if (sub_1001C178C())
        {
          uint64_t v5 = *(void *)(v0 + 160);
          uint64_t v4 = *(uint64_t **)(v0 + 168);
          uint64_t v6 = *(void *)(v0 + 152);
          *(void *)(v0 + 80) = v1;
          *uint64_t v4 = dispatch thunk of CustomStringConvertible.description.getter();
          v4[1] = v7;
          v4[2] = v3;
          v4[3] = v2;
          void v4[4] = v6;
          void v4[5] = v5;
          sub_1000112AC();
          goto LABEL_12;
        }
        goto LABEL_10;
      }
LABEL_9:
      swift_bridgeObjectRelease();
      sub_10000DB3C(v0 + 120, &qword_100326FD0);
LABEL_11:
      sub_1001C1100();
      sub_1000169D0();
      *id v8 = 0;
      swift_willThrow();
      sub_1000112AC();
LABEL_12:
      sub_1000113AC();
      __asm { BRAA            X1, X16 }
    }
  }
LABEL_10:
  swift_bridgeObjectRelease();
  goto LABEL_11;
}

uint64_t sub_1001BFDEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  if (sub_10000DB14(a1, 1, v5) == 1)
  {
    sub_10000DB3C(a1, &qword_100326298);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  sub_1001C138C();
  return swift_task_create();
}

uint64_t sub_1001BFFD0(void *a1, void *a2, void *aBlock, uint64_t a4)
{
  v4[3] = a2;
  void v4[4] = a4;
  v4[2] = a1;
  void v4[5] = _Block_copy(aBlock);
  id v7 = a1;
  id v8 = a2;
  swift_retain();
  uint64_t v9 = (void *)swift_task_alloc();
  v4[6] = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_1001C00A8;
  return sub_1001BE11C();
}

uint64_t sub_1001C00A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1000181DC();
  sub_100017D24();
  uint64_t v13 = v10;
  uint64_t v15 = v14;
  sub_100011C24();
  unint64_t v16 = (void *)v11[3];
  unint64_t v17 = (void *)v11[2];
  uint64_t v18 = *v12;
  sub_100010D94();
  void *v19 = v18;
  swift_task_dealloc();

  swift_release();
  unint64_t v20 = (void (**)(void, void, void))v11[5];
  if (v13)
  {
    uint64_t v21 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    ((void (**)(void, void, void *))v20)[2](v20, 0, v21);

    _Block_release(v20);
  }
  else
  {
    ((void (**)(void, void *, void))v20)[2](v20, v15, 0);
    _Block_release(v20);
  }
  sub_100018250();
  return v23(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10);
}

uint64_t sub_1001C0244(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100010F94((uint64_t)sub_1001C0264, v2);
}

uint64_t sub_1001C0264()
{
  uint64_t v1 = type metadata accessor for URLRequest();
  v0[5] = v1;
  sub_100011108();
  uint64_t v3 = v2;
  v0[6] = v2;
  uint64_t v4 = swift_task_alloc();
  v0[7] = v4;
  uint64_t v5 = sub_10000D938(&qword_100327E70);
  sub_1000170D0(v5);
  uint64_t v6 = sub_1000171A0();
  URL.init(string:)();
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = sub_10001806C();
  uint64_t v11 = 0;
  if (sub_10000DB14(v8, v9, v7) != 1)
  {
    URL._bridgeToObjectiveC()(v10);
    uint64_t v11 = v12;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  uint64_t v13 = (void *)v0[3];
  swift_task_dealloc();
  LOWORD(v27) = 0;
  id v14 = [v13 requestWithURL:v11 playerID:0 authToken:0 pushToken:0 client:0 postData:0 includeUDID:0 includeAPNS:0 sapSession:v27];

  uint64_t v15 = sub_10000D938(&qword_100327C68);
  sub_1000170D0(v15);
  uint64_t v16 = sub_1000171A0();
  uint64_t v17 = v16;
  if (v14)
  {
    uint64_t v18 = swift_task_alloc();
    static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
    v19(v17, v18, v1);
    sub_10000D97C(v17, 0, 1, v1);
    swift_task_dealloc();
    uint64_t v20 = sub_10001806C();
    if (sub_10000DB14(v20, v21, v1) != 1)
    {
      v19(v4, v17, v1);
      swift_task_dealloc();
      uint64_t v22 = (void *)swift_task_alloc();
      v0[8] = v22;
      *uint64_t v22 = v0;
      v22[1] = sub_1001C0578;
      return NSURLSession.data(for:delegate:)(v4, 0);
    }
  }
  else
  {
    sub_10000D97C(v16, 1, 1, v1);
  }
  sub_10000DB3C(v17, &qword_100327C68);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1001C1100();
  uint64_t v23 = sub_1000169D0();
  sub_100018154(v23, v24);
  sub_1000112AC();
  return v25();
}

uint64_t sub_1001C0578()
{
  sub_1000181DC();
  sub_100017D24();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  sub_100010E54();
  uint64_t v9 = v8;
  sub_100010D94();
  *uint64_t v10 = v9;
  *uint64_t v10 = *v1;
  v9[9] = v0;
  swift_task_dealloc();
  if (!v0)
  {

    v9[10] = v5;
    v9[11] = v7;
  }
  sub_100018250();
  return _swift_task_switch(v11, v12, v13);
}

uint64_t sub_1001C068C()
{
  sub_100010DA4();
  uint64_t v1 = sub_1001C17AC();
  v2(v1);
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  uint64_t v5 = v0[10];
  uint64_t v4 = v0[11];
  return v3(v4, v5);
}

uint64_t sub_1001C06F8()
{
  sub_100010DA4();
  uint64_t v0 = sub_1001C17AC();
  v1(v0);
  swift_task_dealloc();
  sub_1000112AC();
  return v2();
}

uint64_t sub_1001C075C()
{
  sub_100010DA4();
  v1[18] = v2;
  v1[19] = v0;
  uint8_t v1[16] = v3;
  v1[17] = v4;
  v1[15] = v5;
  return _swift_task_switch(sub_1001C07F0, v0, 0);
}

uint64_t sub_1001C07F0()
{
  uint64_t v1 = *(void **)(v0 + 120);
  sub_10000D938(&qword_100327BF0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1002510E0;
  *(void *)(inited + 32) = 0x737265762D706173;
  *(void *)(inited + 40) = 0xEB000000006E6F69;
  uint64_t v3 = v1[1];
  *(void *)(inited + 48) = *v1;
  *(void *)(inited + 56) = v3;
  *(void *)(inited + 64) = 0xD000000000000010;
  *(void *)(inited + 72) = 0x80000001002B2800;
  swift_bridgeObjectRetain();
  *(Swift::String *)(inited + 80) = Data.base64EncodedString(options:)(0);
  sub_1001C17E0();
  Dictionary.init(dictionaryLiteral:)();
  uint64_t v4 = self;
  sub_1001C17E0();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 112) = 0;
  id v6 = [v4 dataWithPropertyList:isa format:100 options:0 error:v0 + 112];

  id v7 = *(id *)(v0 + 112);
  if (v6)
  {
    uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;

    *(void *)(v0 + 160) = v8;
    *(void *)(v0 + 168) = v10;
    uint64_t v11 = type metadata accessor for URLRequest();
    *(void *)(v0 + 176) = v11;
    sub_100011108();
    uint64_t v13 = v12;
    *(void *)(v0 + 184) = v12;
    uint64_t v14 = swift_task_alloc();
    *(void *)(v0 + 192) = v14;
    uint64_t v15 = sub_10000D938(&qword_100327E70);
    sub_1000170D0(v15);
    uint64_t v16 = sub_1000171A0();
    URL.init(string:)();
    uint64_t v17 = type metadata accessor for URL();
    uint64_t v18 = sub_10001806C();
    uint64_t v21 = 0;
    if (sub_10000DB14(v18, v19, v17) != 1)
    {
      URL._bridgeToObjectiveC()(v20);
      uint64_t v21 = v22;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
    }
    uint64_t v23 = *(void **)(v0 + 128);
    swift_task_dealloc();
    id v24 = sub_1001C1044((uint64_t)v21, 0, 0, 0, 0, v8, v10, 0, 0, 0, v23);

    uint64_t v25 = sub_10000D938(&qword_100327C68);
    sub_1000170D0(v25);
    uint64_t v26 = sub_1000171A0();
    uint64_t v27 = v26;
    if (v24)
    {
      uint64_t v28 = swift_task_alloc();
      static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32);
      v29(v27, v28, v11);
      sub_10000D97C(v27, 0, 1, v11);
      swift_task_dealloc();
      uint64_t v30 = sub_10001806C();
      if (sub_10000DB14(v30, v31, v11) != 1)
      {
        v29(v14, v27, v11);
        swift_task_dealloc();
        uint64_t v32 = (void *)swift_task_alloc();
        *(void *)(v0 + 200) = v32;
        *uint64_t v32 = v0;
        v32[1] = sub_1001C0C98;
        return NSURLSession.data(for:delegate:)(v14, 0);
      }
    }
    else
    {
      sub_10000D97C(v26, 1, 1, v11);
    }
    sub_10000DB3C(v27, &qword_100327C68);
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1001C1100();
    uint64_t v34 = sub_1000169D0();
    sub_100018154(v34, v35);
    sub_100169274(v8, v10);
  }
  else
  {
    uint64_t v33 = v7;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  sub_1000112AC();
  return v36();
}

uint64_t sub_1001C0C98()
{
  sub_1000181DC();
  sub_100017D24();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  sub_100010E54();
  unint64_t v9 = v8;
  sub_100010D94();
  *unint64_t v10 = v9;
  *unint64_t v10 = *v1;
  v9[26] = v0;
  swift_task_dealloc();
  if (!v0)
  {

    v9[27] = v5;
    v9[28] = v7;
  }
  sub_100018250();
  return _swift_task_switch(v11, v12, v13);
}

uint64_t sub_1001C0DD8()
{
  sub_1000112E8();
  sub_100017FDC();
  uint64_t v1 = sub_1000173E8();
  v2(v1);
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  uint64_t v5 = v0[27];
  uint64_t v4 = v0[28];
  return v3(v4, v5);
}

uint64_t sub_1001C0E78()
{
  sub_1000112E8();
  sub_100017FDC();
  uint64_t v0 = sub_1000173E8();
  v1(v0);
  swift_task_dealloc();
  sub_1000112AC();
  return v2();
}

void sub_1001C0F10()
{
}

uint64_t sub_1001C0F60()
{
  swift_release();

  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_1001C0F90()
{
  sub_1001C0F60();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for FairPlaySessionProvider()
{
  return self;
}

uint64_t sub_1001C0FE0(uint64_t a1, uint64_t a2)
{
  if (a2) {
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }

  return sub_1001AFBB8();
}

id sub_1001C1044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9, uint64_t a10, void *a11)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  BYTE1(v20) = a9;
  LOBYTE(v20) = a8;
  id v18 = [a11 requestWithURL:a1 playerID:a2 authToken:a3 pushToken:a4 client:isa postData:v20 includeUDID:a10];

  return v18;
}

unint64_t sub_1001C1100()
{
  unint64_t result = qword_100327C70;
  if (!qword_100327C70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100327C70);
  }
  return result;
}

unint64_t sub_1001C114C()
{
  unint64_t result = qword_100327C80;
  if (!qword_100327C80)
  {
    type metadata accessor for FairPlaySessionProvider();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327C80);
  }
  return result;
}

uint64_t sub_1001C1198()
{
  uint64_t v1 = type metadata accessor for Date();
  sub_100011108();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = (v6 + 48) & ~v6;
  uint64_t v8 = v6 | 7;
  unint64_t v9 = (*(void *)(v5 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v7, v1);

  return _swift_deallocObject(v0, v9 + 8, v8);
}

uint64_t sub_1001C1268()
{
  sub_1000181DC();
  sub_100017D24();
  type metadata accessor for Date();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100171648;
  sub_100018250();
  return sub_1001BE85C(v2, v3, v4, v5, v6, v7, v8);
}

unint64_t sub_1001C138C()
{
  unint64_t result = qword_100327C90;
  if (!qword_100327C90)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, &qword_100327C90);
  }
  return result;
}

void sub_1001C13CC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setSAPVersion:v4];
}

id sub_1001C1424(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, SEL *a5)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v9 = [a4 *a5 isa:a3];

  return v9;
}

void sub_1001C1484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a6 reportEvent:v8 type:v9 startTime:a5];
}

uint64_t sub_1001C1528()
{
  _Block_release(*(const void **)(v0 + 32));
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001C1578()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100171648;
  uint64_t v7 = (uint64_t (*)(void *, void *, void *, uint64_t))((char *)&dword_100327CA0 + dword_100327CA0);
  return v7(v2, v3, v5, v4);
}

unsigned char *storeEnumTagSinglePayload for FairPlaySessionError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001C1704);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FairPlaySessionError()
{
  return &type metadata for FairPlaySessionError;
}

unint64_t sub_1001C1740()
{
  unint64_t result = qword_100327CB0;
  if (!qword_100327CB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327CB0);
  }
  return result;
}

uint64_t sub_1001C178C()
{
  return swift_dynamicCast();
}

uint64_t sub_1001C17AC()
{
  return *(void *)(v0 + 56);
}

uint64_t sub_1001C17C8()
{
  return sub_100169274(v1, v0);
}

uint64_t sub_1001C17E0()
{
  return v0;
}

void *sub_1001C17F4(unint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v5)
  {
    while (1)
    {
      uint64_t v17 = _swiftEmptyArrayStorage;
      unint64_t result = sub_10017736C(0, v5 & ~(v5 >> 63), 0);
      if (v5 < 0) {
        break;
      }
      uint64_t v7 = 0;
      NSString v8 = v17;
      while (v5 != v7)
      {
        if ((a1 & 0xC000000000000001) != 0) {
          id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v9 = *(id *)(a1 + 8 * v7 + 32);
        }
        unint64_t v10 = v9;
        uint64_t v15 = v9;
        sub_1001C1D3C(&v15, (uint64_t)&v16);
        if (v3)
        {

          swift_release();
          return v8;
        }
        uint64_t v3 = 0;

        uint64_t v11 = v16;
        uint64_t v17 = v8;
        unint64_t v13 = v8[2];
        unint64_t v12 = v8[3];
        if (v13 >= v12 >> 1)
        {
          sub_10017736C((void *)(v12 > 1), v13 + 1, 1);
          NSString v8 = v17;
        }
        ++v7;
        uint64_t v8[2] = v13 + 1;
        v8[v13 + 4] = v11;
        if (v5 == v7)
        {

          return v8;
        }
      }
      __break(1u);
LABEL_16:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v5) {
        goto LABEL_17;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_17:

    return _swiftEmptyArrayStorage;
  }
  return result;
}

void sub_1001C19A0()
{
  type metadata accessor for AppPurchaseHistoryFetcher();
  id v1 = [self ams_sharedAccountStoreForMediaType:AMSAccountMediaTypeProduction];
  id v2 = [self sharedInstance];
  sub_1001C2F20(v1, v2);
  if (!v0) {
    sub_1001C2744(v3);
  }
}

uint64_t sub_1001C1AC8(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return _swift_task_switch(sub_1001C1AE8, 0, 0);
}

uint64_t sub_1001C1AE8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001C1B8C;
  uint64_t v2 = *(void *)(v0 + 24);
  return sub_1001C3100(v2);
}

uint64_t sub_1001C1B8C()
{
  sub_100011168();
  sub_1000111B4();
  void *v3 = v2;
  uint64_t v4 = *v1;
  void *v3 = v4;
  *(void *)(v2 + 48) = v5;
  *(void *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    unsigned int v6 = *(uint64_t (**)(void))(v4 + 8);
    return v6();
  }
  else
  {
    return _swift_task_switch(sub_1001C1C98, 0, 0);
  }
}

uint64_t sub_1001C1C98()
{
  unint64_t v1 = *(void *)(v0 + 48);
  if (v1)
  {
    uint64_t v2 = sub_1001C17F4(v1, *(id *)(v0 + 32));
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(uint64_t (**)(void *))(v0 + 8);
  return v3(v2);
}

uint64_t sub_1001C1D3C@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  v26[0] = a2;
  uint64_t v3 = *a1;
  sub_10000D938(&qword_1003267F0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10024F6F0;
  *(void *)(inited + 32) = 0x4449656C646E7562;
  *(void *)(inited + 40) = 0xE800000000000000;
  id v5 = [v3 bundleID];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  *(void *)(inited + 48) = v6;
  *(void *)(inited + 56) = v8;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 80) = 0x44496D616461;
  *(void *)(inited + 88) = 0xE600000000000000;
  v26[31] = [v3 storeItemID];
  *(void *)(inited + 96) = dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)(inited + 104) = v9;
  *(void *)(inited + 120) = &type metadata for String;
  strcpy((char *)(inited + 128), "datePurchased");
  *(_WORD *)(inited + 142) = -4864;
  id v10 = [v3 datePurchased];
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  *(void *)(inited + 168) = v11;
  uint64_t v16 = sub_100171DD8((uint64_t *)(inited + 144));
  (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 32))(v16, v15, v11);
  *(void *)(inited + 176) = 0x6C6174736E497369;
  *(void *)(inited + 184) = 0xEB0000000064656CLL;
  id v17 = [v3 bundleID];
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = v19;

  id v21 = objc_allocWithZone((Class)LSApplicationRecord);
  swift_bridgeObjectRetain();
  id v22 = sub_1001C241C(v18, v20, 0);
  if (v2)
  {
    swift_errorRelease();
    swift_bridgeObjectRelease();
    char v23 = 0;
  }
  else
  {
    id v24 = v22;
    swift_bridgeObjectRelease();
    if (v24)
    {

      char v23 = 1;
    }
    else
    {
      char v23 = 0;
    }
  }
  *(void *)(inited + 216) = &type metadata for Bool;
  *(unsigned char *)(inited + 192) = v23;
  uint64_t result = Dictionary.init(dictionaryLiteral:)();
  *(void *)v26[0] = result;
  return result;
}

void sub_1001C20C4()
{
}

uint64_t sub_1001C20F4(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  if (a1) {
    a1 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  v3[4] = a1;
  a3;
  uint64_t v6 = (void *)swift_task_alloc();
  void v3[5] = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_1001C21CC;
  return sub_1001C1AC8(a1);
}

uint64_t sub_1001C21CC(uint64_t a1)
{
  uint64_t v3 = v1;
  sub_100011168();
  uint64_t v6 = v5;
  sub_1000111B4();
  *uint64_t v7 = v6;
  uint64_t v9 = *(void **)(v8 + 16);
  uint64_t v10 = *v2;
  sub_1000111B4();
  *uint64_t v11 = v10;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  if (v3)
  {
    a1 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v13 = (void *)a1;
  }
  else if (a1)
  {
    sub_10000D938(&qword_100327940);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    a1 = 0;
    uint64_t v13 = isa;
  }
  else
  {
    Class isa = 0;
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(void (***)(void, void, void))(v6 + 24);
  ((void (**)(void, Class, uint64_t))v14)[2](v14, isa, a1);

  _Block_release(v14);
  uint64_t v15 = *(uint64_t (**)(void))(v10 + 8);
  return v15();
}

id sub_1001C2378()
{
  v2.receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for GameInstallDataFetcher();
  return [super dealloc];
}

uint64_t type metadata accessor for GameInstallDataFetcher()
{
  return self;
}

id sub_1001C241C(uint64_t a1, uint64_t a2, char a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = 0;
  id v6 = [v3 initWithBundleIdentifier:v5 allowPlaceholder:a3 & 1 error:&v10];

  if (v6)
  {
    id v7 = v10;
  }
  else
  {
    id v8 = v10;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

uint64_t sub_1001C24F8()
{
  _Block_release(*(const void **)(v0 + 24));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001C2540()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  NSString v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *NSString v5 = v1;
  v5[1] = sub_1001C25F4;
  id v6 = (uint64_t (*)(uint64_t, void *, void *))((char *)&dword_100327CF8 + dword_100327CF8);
  return v6(v2, v3, v4);
}

uint64_t sub_1001C25F4()
{
  sub_100011168();
  uint64_t v1 = *v0;
  sub_1000111B4();
  void *v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

id sub_1001C26C0(uint64_t a1, char *a2)
{
  id v7 = &type metadata for AppInstallHistoryFetcher;
  uint64_t v8 = &off_1002DEC68;
  *(void *)&a2[OBJC_IVAR___GKGameInstallDataFetcher_appPurchaseHistoryFetcher] = a1;
  sub_100171960((uint64_t)v6, (uint64_t)&a2[OBJC_IVAR___GKGameInstallDataFetcher_appInstallHistoryFetcher]);
  v5.receiver = a2;
  v5.Class super_class = (Class)type metadata accessor for GameInstallDataFetcher();
  id v3 = [super init];
  sub_100016C38((uint64_t)v6);
  return v3;
}

id sub_1001C2744(uint64_t a1)
{
  uint64_t v8 = &type metadata for AppInstallHistoryFetcher;
  uint64_t v9 = &off_1002DEC68;
  uint64_t v2 = (char *)objc_allocWithZone((Class)type metadata accessor for GameInstallDataFetcher());
  uint64_t v3 = sub_100170D50((uint64_t)v7, (uint64_t)&type metadata for AppInstallHistoryFetcher);
  __chkstk_darwin(v3, v3);
  (*(void (**)(void))(v4 + 16))();
  id v5 = sub_1001C26C0(a1, v2);
  sub_100016C38((uint64_t)v7);
  return v5;
}

ValueMetadata *type metadata accessor for AppInstallHistoryFetcher()
{
  return &type metadata for AppInstallHistoryFetcher;
}

void *ArcadeStateMetricsFieldsProvider.fieldName.unsafeMutableAddressor()
{
  return &static ArcadeStateMetricsFieldsProvider.fieldName;
}

unint64_t static ArcadeStateMetricsFieldsProvider.fieldName.getter()
{
  return 0xD000000000000011;
}

uint64_t ArcadeStateMetricsFieldsProvider.addMetricsFields(into:using:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  id v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = [self shared];
  if (!v8)
  {
    __break(1u);
    JUMPOUT(0x1001C2C08);
  }
  uint64_t v9 = v8;
  unint64_t v10 = (unint64_t)[v8 arcadeSubscriptionState];

  if (v10 >= 4) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = v10;
  }
  static GKLog.daemon.getter();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v19 = a1;
    uint64_t v22 = v1;
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    v23[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315138;
    unint64_t v14 = 0xE700000000000000;
    unint64_t v20 = v10;
    uint64_t v21 = v3;
    uint64_t v15 = 0x6E776F6E6B6E75;
    switch((char)v10)
    {
      case 1:
        uint64_t v15 = 0x7263736275736E75;
        unint64_t v14 = 0xEC00000064656269;
        break;
      case 2:
        unint64_t v14 = 0x80000001002B2970;
        uint64_t v15 = 0xD000000000000013;
        break;
      case 3:
        uint64_t v15 = 0x6269726373627573;
        unint64_t v14 = 0xEA00000000006465;
        break;
      default:
        break;
    }
    v23[5] = sub_100174CE4(v15, v14, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Arcade subscription state = %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v21);
    a1 = v19;
    LOBYTE(v10) = v20;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
  uint64_t v16 = 0xE700000000000000;
  uint64_t v17 = 0x6E776F6E6B6E75;
  switch((char)v10)
  {
    case 1:
      uint64_t v17 = 0x7263736275736E75;
      uint64_t v16 = 0xEC00000064656269;
      break;
    case 2:
      uint64_t v16 = 0x80000001002B2970;
      uint64_t v17 = 0xD000000000000013;
      break;
    case 3:
      uint64_t v17 = 0x6269726373627573;
      uint64_t v16 = 0xEA00000000006465;
      break;
    default:
      break;
  }
  v23[3] = (uint64_t)&type metadata for String;
  v23[0] = v17;
  v23[1] = v16;
  sub_100170D50(a1, *(void *)(a1 + 24));
  dispatch thunk of MetricsFieldsBuilder.addValue(_:forField:)();
  return sub_100016C38((uint64_t)v23);
}

uint64_t sub_1001C2C28()
{
  return MetricsFieldsProvider.addTimeSensitiveMetricsFields(into:using:)();
}

uint64_t sub_1001C2C40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_1001C2D00;
  return MetricsFieldsProvider.addExpensiveMetricsFields(into:using:)(a1, a2, a3, a4);
}

uint64_t sub_1001C2D00()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1001C2DF8(uint64_t a1)
{
  return ArcadeStateMetricsFieldsProvider.addMetricsFields(into:using:)(a1);
}

uint64_t sub_1001C2E10()
{
  uint64_t v0 = type metadata accessor for MetricsFieldExclusionRequest();
  sub_1001C2E84(v0, qword_10032DA68);
  sub_1001C2EE8(v0, (uint64_t)qword_10032DA68);
  return MetricsFieldExclusionRequest.init(rawValue:)();
}

ValueMetadata *type metadata accessor for ArcadeStateMetricsFieldsProvider()
{
  return &type metadata for ArcadeStateMetricsFieldsProvider;
}

uint64_t *sub_1001C2E84(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_1001C2EE8(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

void sub_1001C2F20(void *a1, void *a2)
{
  id v4 = [a1 ams_activeiTunesAccount];
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = [v4 ams_DSID];
    if (v6)
    {
      id v7 = v6;
      id v8 = [v6 longLongValue];

      type metadata accessor for AppPurchaseHistoryFetcher();
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = v8;
      *(void *)(v9 + 24) = a2;
      return;
    }
    sub_1001C39CC();
    swift_allocError();
    *uint64_t v11 = 1;
    swift_willThrow();
  }
  else
  {
    sub_1001C39CC();
    swift_allocError();
    *unint64_t v10 = 0;
    swift_willThrow();
  }
}

id sub_1001C3034(uint64_t a1)
{
  id v3 = [objc_allocWithZone((Class)ASDPurchaseHistoryQuery) init];
  [v3 setAccountID:*(void *)(v1 + 16)];
  [v3 setIsHidden:0];
  [v3 setIsFirstParty:2];
  [v3 setIsPreorder:2];
  if (a1) {
    v4.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else {
    v4.super.Class isa = 0;
  }
  [v3 setBundleIDs:v4.super.isa];

  return v3;
}

uint64_t sub_1001C3100(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return _swift_task_switch(sub_1001C3120, 0, 0);
}

uint64_t sub_1001C3120()
{
  uint64_t v1 = v0[4];
  id v2 = sub_1001C3034(v0[3]);
  v0[5] = (uint64_t)v2;
  uint64_t v3 = swift_task_alloc();
  v0[6] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  NSArray v4 = (void *)swift_task_alloc();
  v0[7] = (uint64_t)v4;
  uint64_t v5 = sub_10000D938(&qword_100327DD0);
  *NSArray v4 = v0;
  v4[1] = sub_1001C3230;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD00000000000001DLL, 0x80000001002B29F0, sub_1001C386C, v3, v5);
}

uint64_t sub_1001C3230()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = sub_1001C33B4;
  }
  else
  {
    swift_task_dealloc();
    id v2 = sub_1001C334C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001C334C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  id v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_1001C33B4()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1001C3420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000D938(&qword_100327DD8);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6, v9);
  unint64_t v10 = *(void **)(a2 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v12 + v11, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = sub_1001C3908;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001C377C;
  aBlock[3] = &unk_1002DECD0;
  uint64_t v13 = _Block_copy(aBlock);
  swift_release();
  [v10 executeQuery:a3 withResultHandler:v13];
  _Block_release(v13);
}

uint64_t sub_1001C35D4(unint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_errorRetain();
    sub_10000D938(&qword_100327DD8);
    return CheckedContinuation.resume(throwing:)();
  }
  if (!a1) {
    goto LABEL_19;
  }
  if (!(a1 >> 62))
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_6;
    }
LABEL_18:
    swift_bridgeObjectRelease();
LABEL_19:
    sub_10000D938(&qword_100327DD8);
    return CheckedContinuation.resume(returning:)();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v4 = result;
  if (!result) {
    goto LABEL_18;
  }
LABEL_6:
  if (v4 >= 1)
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v6 = *(id *)(a1 + 8 * i + 32);
      }
      uint64_t v7 = v6;
      if ([v6 genreID] == (id)6014)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
      }
    }
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001C377C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_1001C398C();
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001C3810()
{
  return _swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for AppPurchaseHistoryFetcher()
{
  return self;
}

void sub_1001C386C(uint64_t a1)
{
  sub_1001C3420(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1001C3874()
{
  uint64_t v1 = sub_10000D938(&qword_100327DD8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001C3908(unint64_t a1, uint64_t a2)
{
  sub_10000D938(&qword_100327DD8);

  return sub_1001C35D4(a1, a2);
}

unint64_t sub_1001C398C()
{
  unint64_t result = qword_100327DE0;
  if (!qword_100327DE0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100327DE0);
  }
  return result;
}

unint64_t sub_1001C39CC()
{
  unint64_t result = qword_100327DE8;
  if (!qword_100327DE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327DE8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AppPurchaseHistoryFetcher.AppPurchaseHistoryError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001C3AE4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppPurchaseHistoryFetcher.AppPurchaseHistoryError()
{
  return &type metadata for AppPurchaseHistoryFetcher.AppPurchaseHistoryError;
}

unint64_t sub_1001C3B20()
{
  unint64_t result = qword_100327DF0;
  if (!qword_100327DF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327DF0);
  }
  return result;
}

uint64_t sub_1001C3B6C()
{
  type metadata accessor for NWProtocolTLS.Options();
  swift_allocObject();
  NWProtocolTLS.Options.init()();
  uint64_t v0 = dispatch thunk of NWProtocolTLS.Options.securityProtocolOptions.getter();
  sec_protocol_options_set_peer_authentication_required(v0, 0);
  swift_unknownObjectRelease();

  return sub_1001C3D28();
}

uint64_t sub_1001C3BE0()
{
  uint64_t v0 = sub_1001C3C64();
  type metadata accessor for NWProtocolTLS.Options();
  swift_allocObject();
  NWProtocolTLS.Options.init()();
  uint64_t v1 = dispatch thunk of NWProtocolTLS.Options.securityProtocolOptions.getter();
  sec_protocol_options_set_local_identity(v1, v0);
  swift_unknownObjectRelease();
  uint64_t v2 = sub_1001C3D28();
  swift_unknownObjectRelease();
  return v2;
}

uint64_t sub_1001C3C64()
{
  NSString v0 = String._bridgeToObjectiveC()();
  SelfSignedIdentity = (__SecIdentity *)_CFHTTPServerCreateSelfSignedIdentity();
  if (SelfSignedIdentity)
  {
    uint64_t v2 = SelfSignedIdentity;
    sec_identity_t v3 = sec_identity_create(SelfSignedIdentity);
    if (v3)
    {
      sec_identity_t v4 = v3;

      return (uint64_t)v4;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001C3D28()
{
  type metadata accessor for NWProtocolTCP.Options();
  swift_allocObject();
  NWProtocolTCP.Options.init()();
  dispatch thunk of NWProtocolTCP.Options.enableKeepalive.setter();
  dispatch thunk of NWProtocolTCP.Options.keepaliveIdle.setter();
  swift_retain();
  swift_retain();
  uint64_t v0 = NWParameters.__allocating_init(tls:tcp:)();
  swift_retain();
  NWParameters.includePeerToPeer.setter();
  if (qword_100325E98 != -1) {
    swift_once();
  }
  type metadata accessor for NWProtocolFramer.Options();
  swift_allocObject();
  swift_retain();
  uint64_t v1 = NWProtocolFramer.Options.init(definition:)();
  NWParameters.defaultProtocolStack.getter();
  swift_retain();
  uint64_t v2 = (void (*)(uint64_t *, void))dispatch thunk of NWParameters.ProtocolStack.applicationProtocols.modify();
  if (*v3 >> 62
    && (swift_bridgeObjectRetain(),
        uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(),
        uint64_t result = swift_bridgeObjectRelease(),
        v5 < 0))
  {
    __break(1u);
  }
  else
  {
    sub_1001A4EB8(0, 0, v1);
    v2(&v6, 0);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return v0;
  }
  return result;
}

uint64_t sub_1001C3F44()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___GKBulletinAttachment_identifier);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1001C4064@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR___GKBulletinAttachment_url;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_1001C4100()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___GKBulletinAttachment_hiddenFromDefaultExpandedView);
}

id sub_1001C4118(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = &v4[OBJC_IVAR___GKBulletinAttachment_identifier];
  *uint64_t v7 = a1;
  v7[1] = a2;
  uint64_t v8 = &v4[OBJC_IVAR___GKBulletinAttachment_url];
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v8, a3, v9);
  v4[OBJC_IVAR___GKBulletinAttachment_hiddenFromDefaultExpandedView] = a4;
  v13.receiver = v4;
  v13.Class super_class = (Class)type metadata accessor for BulletinAttachment();
  id v11 = [super init];
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a3, v9);
  return v11;
}

void sub_1001C42C4(void *a1)
{
  uint64_t v2 = v1;
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  sub_100011C94();

  URL._bridgeToObjectiveC()((NSURL *)OBJC_IVAR___GKBulletinAttachment_url);
  uint64_t v7 = v6;
  NSString v8 = String._bridgeToObjectiveC()();
  sub_100011C94();

  uint64_t v9 = *(unsigned __int8 *)(v2 + OBJC_IVAR___GKBulletinAttachment_hiddenFromDefaultExpandedView);
  id v10 = sub_100017A98();
  [a1 encodeBool:v9 forKey:v10];
}

uint64_t sub_1001C442C(void *a1)
{
  sub_100163CE4(0, &qword_1003265D8);
  id v3 = v1;
  uint64_t v4 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v4)
  {
    NSString v5 = (void *)v4;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    static String._conditionallyBridgeFromObjectiveC(_:result:)();
  }
  type metadata accessor for BulletinAttachment();
  swift_deallocPartialClassInstance();
  return 0;
}

void sub_1001C4848()
{
}

uint64_t sub_1001C4888(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 7107189 && a2 == 0xE300000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD00000000000001DLL && a2 == 0x80000001002B2B20)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v7) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_1001C49D4(char a1)
{
  if (!a1) {
    return 0x696669746E656469;
  }
  if (a1 == 1) {
    return 7107189;
  }
  return 0xD00000000000001DLL;
}

uint64_t sub_1001C4A2C()
{
  return sub_1001C49D4(*v0);
}

uint64_t sub_1001C4A34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001C4888(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001C4A5C(uint64_t a1)
{
  unint64_t v2 = sub_1001C51EC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C4A98(uint64_t a1)
{
  unint64_t v2 = sub_1001C51EC();

  return CodingKey.debugDescription.getter(a1, v2);
}

id sub_1001C4AD4()
{
  v2.receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for BulletinAttachment();
  return [super dealloc];
}

uint64_t sub_1001C4B90()
{
  return type metadata accessor for BulletinAttachment();
}

uint64_t type metadata accessor for BulletinAttachment()
{
  uint64_t result = qword_100327E30;
  if (!qword_100327E30) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001C4BE0()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1001C4C84(void *a1)
{
  uint64_t v3 = sub_10000D938(&qword_100327E58);
  sub_100011108();
  uint64_t v5 = v4;
  __chkstk_darwin(v6, v7);
  sub_1000110F8();
  uint64_t v10 = v9 - v8;
  sub_100165918(a1, a1[3]);
  sub_1001C51EC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for URL();
    sub_1001C5238((unint64_t *)&unk_100327E60);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v10, v3);
}

char *sub_1001C4E24(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return sub_1001C4E68(a1);
}

char *sub_1001C4E68(void *a1)
{
  sub_10000D938(&qword_100327E40);
  sub_100011108();
  v24[1] = v5;
  void v24[2] = v4;
  __chkstk_darwin(v4, v6);
  sub_1000110F8();
  uint64_t v7 = a1[3];
  uint64_t v25 = a1;
  sub_100165918(a1, v7);
  sub_1001C51EC();
  uint64_t v8 = v1;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    sub_100016C38((uint64_t)v25);

    type metadata accessor for BulletinAttachment();
    swift_deallocPartialClassInstance();
  }
  else
  {
    char v27 = 0;
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    id v11 = (uint64_t *)&v8[OBJC_IVAR___GKBulletinAttachment_identifier];
    *id v11 = v9;
    v11[1] = v12;
    uint64_t v13 = type metadata accessor for URL();
    v24[0] = v24;
    sub_100011108();
    uint64_t v15 = v14;
    __chkstk_darwin(v16, v17);
    sub_1000110F8();
    uint64_t v20 = v19 - v18;
    char v27 = 1;
    sub_1001C5238(&qword_100327E50);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(&v8[OBJC_IVAR___GKBulletinAttachment_url], v20, v13);
    char v27 = 2;
    v8[OBJC_IVAR___GKBulletinAttachment_hiddenFromDefaultExpandedView] = KeyedDecodingContainer.decode(_:forKey:)() & 1;

    uint64_t v21 = (objc_class *)type metadata accessor for BulletinAttachment();
    v26.receiver = v8;
    v26.Class super_class = v21;
    uint64_t v8 = (char *)[super init];
    uint64_t v22 = sub_1001C5470();
    v23(v22);
    sub_100016C38((uint64_t)v25);
  }
  return v8;
}

char *sub_1001C519C@<X0>(void *a1@<X0>, char **a2@<X8>)
{
  uint64_t result = sub_1001C4E24(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1001C51C8(void *a1)
{
  return sub_1001C4C84(a1);
}

unint64_t sub_1001C51EC()
{
  unint64_t result = qword_100327E48;
  if (!qword_100327E48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327E48);
  }
  return result;
}

uint64_t sub_1001C5238(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for URL();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for BulletinAttachment.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001C5348);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BulletinAttachment.CodingKeys()
{
  return &type metadata for BulletinAttachment.CodingKeys;
}

unint64_t sub_1001C5384()
{
  unint64_t result = qword_100327E88;
  if (!qword_100327E88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327E88);
  }
  return result;
}

unint64_t sub_1001C53D4()
{
  unint64_t result = qword_100327E90;
  if (!qword_100327E90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327E90);
  }
  return result;
}

unint64_t sub_1001C5424()
{
  unint64_t result = qword_100327E98;
  if (!qword_100327E98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327E98);
  }
  return result;
}

uint64_t sub_1001C5470()
{
  return v0;
}

uint64_t sub_1001C5488()
{
  sub_10000D938(&qword_100326500);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100250230;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v1;
  *(void *)(inited + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 56) = v2;
  *(void *)(inited + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 72) = v3;
  uint64_t result = sub_1000118C8(inited);
  qword_100327EA0 = result;
  return result;
}

uint64_t sub_1001C551C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10000D938(&qword_100327F40);
  uint64_t v5 = __chkstk_darwin(v3 - 8, v4);
  uint64_t v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5, v8);
  uint64_t v10 = &v14[-v9];
  uint64_t v11 = v1 + OBJC_IVAR____TtC14GameDaemonCore17GKMetricsPipeline____lazy_storage___metricsPipeline;
  swift_beginAccess();
  sub_1001C885C(v11, (uint64_t)v10);
  uint64_t v12 = type metadata accessor for MetricsPipeline();
  if (sub_10000DB14((uint64_t)v10, 1, v12) != 1) {
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, v10, v12);
  }
  sub_1001C87FC((uint64_t)v10);
  sub_1001C56C8(v1, a1);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v7, a1, v12);
  sub_10000D97C((uint64_t)v7, 0, 1, v12);
  swift_beginAccess();
  sub_1001C88C4((uint64_t)v7, v11);
  return swift_endAccess();
}

uint64_t sub_1001C56C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v89 = a2;
  uint64_t v79 = type metadata accessor for MetricsFieldExclusionRequest();
  uint64_t v80 = *(void **)(v79 - 8);
  __chkstk_darwin(v79, v3);
  uint64_t v5 = (char *)&v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000D938(&qword_100327F68);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v78 = (uint64_t)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Bag();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = type metadata accessor for MetricsFieldsAggregator();
  uint64_t v93 = *(void *)(v90 - 8);
  uint64_t v15 = __chkstk_darwin(v90, v14);
  uint64_t v17 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v15, v18);
  uint64_t v21 = (char *)&v75 - v20;
  uint64_t v23 = __chkstk_darwin(v19, v22);
  uint64_t v91 = (char *)&v75 - v24;
  uint64_t v26 = __chkstk_darwin(v23, v25);
  Swift::String v81 = (char *)&v75 - v27;
  uint64_t v29 = __chkstk_darwin(v26, v28);
  Swift::String v82 = (char *)&v75 - v30;
  uint64_t v32 = __chkstk_darwin(v29, v31);
  uint64_t v92 = (char *)&v75 - v33;
  __chkstk_darwin(v32, v34);
  uint64_t v85 = (char *)&v75 - v35;
  uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v84 = a1 + OBJC_IVAR____TtC14GameDaemonCore17GKMetricsPipeline_bag;
  uint64_t v87 = v10 + 16;
  unint64_t v83 = v36;
  ((void (*)(char *))v36)(v13);
  Class v37 = self;
  id v38 = [v37 ams_sharedAccountStore];
  unint64_t v39 = sub_1001C892C();
  uint64_t v98 = (ValueMetadata *)v39;
  unint64_t v99 = &protocol witness table for ACAccountStore;
  v97[0] = (uint64_t)v38;
  id v40 = [self mainBundle];
  uint64_t v86 = v13;
  unint64_t v41 = v21;
  MetricsFieldsAggregator.init(bag:accountProvider:bundle:)();
  id v42 = [v37 ams_sharedAccountStore];
  unint64_t v95 = v39;
  uint64_t v96 = &protocol witness table for ACAccountStore;
  uint64_t v94 = (uint64_t)v42;
  uint64_t v88 = v9;
  uint64_t v43 = v9;
  uint64_t v44 = v90;
  uint64_t v45 = v79;
  sub_10000D97C(v78, 1, 1, v43);
  id v46 = [self currentProcess];
  static AMSMetricsIdentifierFieldsProvider.metricsResetInterval.getter();
  static AMSMetricsIdentifierFieldsProvider.metricsKeys.getter();
  uint64_t v98 = (ValueMetadata *)type metadata accessor for AMSMetricsIdentifierFieldsProvider();
  unint64_t v99 = &protocol witness table for AMSMetricsIdentifierFieldsProvider;
  sub_100171DD8(v97);
  uint64_t v47 = v80;
  AMSMetricsIdentifierFieldsProvider.init(accountProvider:process:bag:shouldMigrate:resetInterval:keys:activeITunesAccountRequired:)();
  static MetricsFieldExclusionRequest.amsMetricsID.getter();
  MetricsFieldsAggregator.addingOptOutProvider(_:forRequest:)();
  uint64_t v80 = (void *)v47[1];
  ((void (*)(char *, uint64_t))v80)(v5, v45);
  id v48 = (char *)(v93 + 8);
  uint64_t v49 = *(void (**)(char *, uint64_t))(v93 + 8);
  v49(v17, v44);
  sub_100016C38((uint64_t)v97);
  uint64_t v98 = (ValueMetadata *)type metadata accessor for GKDaemonHostAppFieldsProvider();
  unint64_t v99 = (void *)sub_1001C8A0C(&qword_100327F78, (void (*)(uint64_t))type metadata accessor for GKDaemonHostAppFieldsProvider);
  unint64_t v50 = sub_100171DD8(v97);
  uint64_t v51 = enum case for MetricsFieldsProviderCategory.timeSensitive(_:);
  uint64_t v52 = type metadata accessor for MetricsFieldsProviderCategory();
  uint64_t v53 = *(void *)(v52 - 8);
  uint64_t v54 = *(void (**)(uint64_t, void, uint64_t))(v53 + 104);
  LODWORD(v78) = v51;
  uint64_t v77 = v52;
  uint64_t v76 = v54;
  uint64_t v75 = v53 + 104;
  ((void (*)(uint64_t *, uint64_t))v54)(v50, v51);
  if (qword_100325ED0 != -1) {
    swift_once();
  }
  sub_1001C2EE8(v45, (uint64_t)qword_10032DAA8);
  MetricsFieldsAggregator.addingOptOutProvider(_:forRequest:)();
  v49(v41, v44);
  sub_100016C38((uint64_t)v97);
  uint64_t v98 = &type metadata for ArcadeStateMetricsFieldsProvider;
  unint64_t v99 = (void *)sub_1001C896C();
  if (qword_100325EB8 != -1) {
    swift_once();
  }
  sub_1001C2EE8(v45, (uint64_t)qword_10032DA68);
  unint64_t v55 = v81;
  uint64_t v56 = v91;
  MetricsFieldsAggregator.addingOptOutProvider(_:forRequest:)();
  v49(v56, v44);
  sub_100016C38((uint64_t)v97);
  static MetricsFieldExclusionRequest.page.getter();
  uint64_t v57 = v82;
  MetricsFieldsAggregator.removingOptOutProvider(forRequest:)();
  unint64_t v58 = (void (*)(char *, uint64_t))v80;
  ((void (*)(char *, uint64_t))v80)(v5, v45);
  v49(v55, v44);
  static MetricsFieldExclusionRequest.app.getter();
  uint64_t v59 = v92;
  MetricsFieldsAggregator.removingOptOutProvider(forRequest:)();
  v58(v5, v45);
  v49(v57, v44);
  uint64_t v60 = type metadata accessor for MultiplayerActivityFieldsProvider(0);
  uint64_t v61 = v44;
  uint64_t v62 = swift_allocObject();
  v76(v62 + OBJC_IVAR____TtC14GameDaemonCore33MultiplayerActivityFieldsProvider_category, v78, v77);
  uint64_t v98 = (ValueMetadata *)v60;
  unint64_t v99 = (void *)sub_1001C8A0C(&qword_100327F88, (void (*)(uint64_t))type metadata accessor for MultiplayerActivityFieldsProvider);
  v97[0] = v62;
  if (qword_100325EF0 != -1) {
    swift_once();
  }
  uint64_t v63 = type metadata accessor for MetricsFieldInclusionRequest();
  sub_1001C2EE8(v63, (uint64_t)qword_10032DAC8);
  uint64_t v64 = v85;
  MetricsFieldsAggregator.addingOptInProvider(_:forRequest:)();
  v49(v59, v61);
  sub_100016C38((uint64_t)v97);
  uint64_t v65 = sub_10000D938(&qword_100327F90);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v66 = v86;
  uint64_t v67 = v84;
  uint64_t v91 = v48;
  uint64_t v68 = v88;
  Swift::String v82 = (char *)v49;
  uint64_t v69 = v83;
  v83(v86, v84, v88);
  uint64_t v70 = LowMemoryMetricsEventLinter.__allocating_init(defaultTopic:bag:rules:)();
  uint64_t v71 = type metadata accessor for AMSMetricsEventRecorder();
  v69(v66, v67, v68);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v72 = AMSMetricsEventRecorder.__allocating_init(bag:defaultTopic:)();
  type metadata accessor for StandardMetricsFieldsBuilder();
  uint64_t v73 = v90;
  (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v92, v64, v90);
  uint64_t v98 = (ValueMetadata *)v65;
  unint64_t v99 = (void *)sub_1001C89B8();
  v97[0] = v70;
  unint64_t v95 = v71;
  uint64_t v96 = &protocol witness table for AMSMetricsEventRecorder;
  uint64_t v94 = v72;
  MetricsPipeline.init(builderType:aggregator:linter:recorder:)();
  return ((uint64_t (*)(char *, uint64_t))v82)(v64, v73);
}

id GKMetricsPipeline.__allocating_init(bag:)()
{
  id v1 = objc_allocWithZone(v0);
  return GKMetricsPipeline.init(bag:)();
}

id GKMetricsPipeline.init(bag:)()
{
  id v1 = v0;
  Class ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = type metadata accessor for Bag();
  sub_100011108();
  uint64_t v5 = v4;
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (uint64_t)v1 + OBJC_IVAR____TtC14GameDaemonCore17GKMetricsPipeline____lazy_storage___metricsPipeline;
  uint64_t v11 = type metadata accessor for MetricsPipeline();
  sub_10000D97C(v10, 1, 1, v11);
  id v12 = v1;
  swift_unknownObjectRetain();
  Bag.init(from:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))((uint64_t)v12 + OBJC_IVAR____TtC14GameDaemonCore17GKMetricsPipeline_bag, v9, v3);

  v15.receiver = v12;
  v15.Class super_class = ObjectType;
  id v13 = [super init];
  swift_unknownObjectRelease();
  return v13;
}

uint64_t GKMetricsPipeline.processEvent(topic:shouldFlush:metricsFields:hostAppBundleId:)()
{
  sub_100010DA4();
  *(void *)(v1 + 56) = v2;
  *(void *)(v1 + 64) = v0;
  *(void *)(v1 + 40) = v3;
  *(void *)(v1 + 48) = v4;
  *(unsigned char *)(v1 + 128) = v5;
  *(void *)(v1 + 24) = v6;
  *(void *)(v1 + 32) = v7;
  uint64_t v8 = type metadata accessor for Logger();
  *(void *)(v1 + 72) = v8;
  sub_1000111CC(v8);
  *(void *)(v1 + 80) = v9;
  *(void *)(v1 + 88) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for MetricsData();
  *(void *)(v1 + 96) = v10;
  sub_1000111CC(v10);
  *(void *)(v1 + 104) = v11;
  *(void *)(v1 + 112) = swift_task_alloc();
  sub_100017040();
  return _swift_task_switch(v12, v13, v14);
}

uint64_t sub_1001C62BC()
{
  uint64_t v21 = v0;
  if (qword_100325EC0 != -1) {
    swift_once();
  }
  sub_100006124(v0[3], v0[4], qword_100327EA0);
  if (v1)
  {
    sub_10000D938(&qword_100327EC0);
    uint64_t v2 = type metadata accessor for MetricsFieldInclusionRequest();
    sub_1000111CC(v2);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_10024F850;
    swift_bridgeObjectRetain();
    static MetricsFieldInclusionRequest.pageFields.getter();
    sub_1001C8100(v3);
    swift_bridgeObjectRetain();
    MetricsData.init(topic:shouldFlush:fields:includingFields:excludingFields:)();
    uint64_t v4 = (void *)swift_task_alloc();
    v0[15] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1001C6628;
    uint64_t v5 = v0[14];
    uint64_t v6 = v0[7];
    uint64_t v7 = v0[6];
    return sub_1001C676C(v5, v7, v6);
  }
  else
  {
    static GKLog.general.getter();
    swift_bridgeObjectRetain_n();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    uint64_t v13 = v0[10];
    uint64_t v12 = v0[11];
    uint64_t v14 = v0[9];
    unint64_t v15 = v0[4];
    if (v11)
    {
      uint64_t v18 = v0[3];
      uint64_t v19 = v0[9];
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315138;
      swift_bridgeObjectRetain();
      v0[2] = sub_100174CE4(v18, v15, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Topic %s is not an allowed topic", v16, 0xCu);
      swift_arrayDestroy();
      sub_100010D7C();
      sub_100010D7C();

      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v19);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000112AC();
    return v17();
  }
}

uint64_t sub_1001C6628()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  swift_task_dealloc();
  sub_100017040();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1001C66F0()
{
  sub_100010DA4();
  (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000112AC();
  return v1();
}

uint64_t sub_1001C676C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[7] = a3;
  v4[8] = v3;
  void v4[5] = a1;
  v4[6] = a2;
  uint64_t v5 = type metadata accessor for Logger();
  v4[9] = v5;
  v4[10] = *(void *)(v5 - 8);
  v4[11] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for MetricsPipeline();
  v4[12] = v6;
  v4[13] = *(void *)(v6 - 8);
  v4[14] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for LintedMetricsEvent();
  v4[15] = v7;
  v4[16] = *(void *)(v7 - 8);
  v4[17] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for MetricsFieldsContext();
  v4[18] = v8;
  v4[19] = *(void *)(v8 - 8);
  v4[20] = swift_task_alloc();
  v4[21] = swift_task_alloc();
  v4[22] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[23] = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[24] = v10;
  v4[25] = v9;
  return _swift_task_switch(sub_1001C6994, v10, v9);
}

uint64_t sub_1001C6994()
{
  uint64_t v1 = v0[7];
  MetricsFieldsContext.init()();
  if (v1)
  {
    uint64_t v3 = v0[6];
    uint64_t v2 = v0[7];
    (*(void (**)(void, void, void))(v0[19] + 16))(v0[20], v0[22], v0[18]);
    v0[2] = v3;
    v0[3] = v2;
    if (qword_100325EC8 != -1) {
      swift_once();
    }
    uint64_t v5 = v0[21];
    uint64_t v4 = v0[22];
    uint64_t v7 = v0[19];
    uint64_t v6 = v0[20];
    uint64_t v8 = v0[18];
    uint64_t v9 = sub_10000D938(&qword_100327F60);
    sub_1001C2EE8(v9, (uint64_t)static GKDaemonHostAppFieldsProvider.HostAppKey);
    MetricsFieldsContext.addingValue<A>(_:forProperty:)();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v10(v6, v8);
    v10(v4, v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v4, v5, v8);
  }
  sub_1001C551C(v0[14]);
  BOOL v11 = (void *)swift_task_alloc();
  v0[26] = v11;
  *BOOL v11 = v0;
  v11[1] = sub_1001C6B50;
  uint64_t v12 = v0[22];
  uint64_t v13 = v0[17];
  uint64_t v14 = v0[5];
  return MetricsPipeline.process(_:using:)(v13, v14, v12);
}

uint64_t sub_1001C6B50()
{
  sub_100010F2C();
  sub_100011168();
  uint64_t v3 = v2;
  uint64_t v5 = v4[14];
  uint64_t v6 = v4[13];
  uint64_t v7 = v4[12];
  uint64_t v8 = *v1;
  sub_100010D94();
  *uint64_t v9 = v8;
  v3[27] = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  if (v0)
  {
    uint64_t v10 = v3[24];
    uint64_t v11 = v3[25];
    uint64_t v12 = sub_1001C6D50;
  }
  else
  {
    (*(void (**)(void, void))(v3[16] + 8))(v3[17], v3[15]);
    uint64_t v10 = v3[24];
    uint64_t v11 = v3[25];
    uint64_t v12 = sub_1001C6CB0;
  }
  return _swift_task_switch(v12, v10, v11);
}

uint64_t sub_1001C6CB0()
{
  sub_100010F2C();
  swift_release();
  uint64_t v0 = sub_100017AB8();
  v1(v0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000112AC();
  return v2();
}

uint64_t sub_1001C6D50()
{
  swift_release();
  static GKLog.general.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[4] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to process metric event with error: %@", v3, 0xCu);
    sub_10000D938(&qword_100326430);
    swift_arrayDestroy();
    sub_100010D7C();
    sub_100010D7C();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = v0[10];
  uint64_t v6 = v0[11];
  uint64_t v8 = v0[9];
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  uint64_t v9 = sub_100017AB8();
  v10(v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000112AC();
  return v11();
}

uint64_t sub_1001C7008(int a1, int a2, int a3, uint64_t a4, void *aBlock, void *a6)
{
  v6[2] = a6;
  v6[3] = _Block_copy(aBlock);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;
  void v6[4] = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  if (a4)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;
  }
  else
  {
    uint64_t v12 = 0;
  }
  void v6[5] = v12;
  v6[6] = v10;
  a6;
  uint64_t v13 = (void *)swift_task_alloc();
  v6[7] = v13;
  *uint64_t v13 = v6;
  v13[1] = sub_1001C7154;
  return GKMetricsPipeline.processEvent(topic:shouldFlush:metricsFields:hostAppBundleId:)();
}

uint64_t sub_1001C7154()
{
  sub_100010F2C();
  sub_100011168();
  os_log_type_t v2 = *(void (***)(void))(v1 + 24);
  uint64_t v3 = *(void **)(v1 + 16);
  uint64_t v4 = *v0;
  sub_100010D94();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  v2[2](v2);
  _Block_release(v2);
  sub_1000112AC();
  return v6();
}

uint64_t GKMetricsPipeline.processMultiplayerActivityEvent(metricsFields:hostAppBundleId:)()
{
  sub_100010DA4();
  void v1[4] = v2;
  v1[5] = v0;
  v1[2] = v3;
  v1[3] = v4;
  uint64_t v5 = type metadata accessor for MetricsData();
  v1[6] = v5;
  sub_1000111CC(v5);
  v1[7] = v6;
  uint8_t v1[8] = swift_task_alloc();
  sub_100017040();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1001C7354()
{
  sub_10000D938(&qword_100327ED8);
  uint64_t v1 = type metadata accessor for MetricsFieldExclusionRequest();
  sub_100011108();
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v4 + 72);
  unint64_t v6 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1002510E0;
  static MetricsFieldExclusionRequest.amsMetricsID.getter();
  uint64_t v8 = v7 + v6 + v5;
  if (qword_100325EB8 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_1001C2EE8(v1, (uint64_t)qword_10032DA68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v8, v9, v1);
  if (*(void *)(v7 + 16))
  {
    sub_1001C7DB4(v7);
  }
  else
  {
    swift_setDeallocating();
    sub_1001C7B60((void (*)(void))&type metadata accessor for MetricsFieldExclusionRequest);
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_10000D938(&qword_100327EC0);
  uint64_t v10 = type metadata accessor for MetricsFieldInclusionRequest();
  sub_100011108();
  uint64_t v12 = v11;
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_10024F850;
  unint64_t v15 = v14 + v13;
  uint64_t v16 = qword_100325EF0;
  swift_bridgeObjectRetain();
  if (v16 != -1) {
    swift_once();
  }
  uint64_t v17 = sub_1001C2EE8(v10, (uint64_t)qword_10032DAC8);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v12 + 16))(v15, v17, v10);
  if (*(void *)(v14 + 16))
  {
    sub_1001C8100(v14);
  }
  else
  {
    swift_setDeallocating();
    sub_1001C7B60((void (*)(void))&type metadata accessor for MetricsFieldInclusionRequest);
  }
  uint64_t v18 = v0[4];
  MetricsData.init(topic:shouldFlush:fields:includingFields:excludingFields:)();
  uint64_t v19 = (void *)swift_task_alloc();
  v0[9] = v19;
  void *v19 = v0;
  v19[1] = sub_1001C7674;
  uint64_t v20 = v0[8];
  uint64_t v21 = v0[3];
  return sub_1001C676C(v20, v21, v18);
}

uint64_t sub_1001C7674()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  swift_task_dealloc();
  sub_100017040();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1001C773C()
{
  sub_100010DA4();
  (*(void (**)(void, void))(v0[7] + 8))(v0[8], v0[6]);
  swift_task_dealloc();
  sub_1000112AC();
  return v1();
}

uint64_t sub_1001C7848(int a1, int a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  void v4[4] = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  void v4[5] = v6;
  a4;
  uint64_t v7 = (void *)swift_task_alloc();
  v4[6] = v7;
  *uint64_t v7 = v4;
  v7[1] = sub_1001C7958;
  return GKMetricsPipeline.processMultiplayerActivityEvent(metricsFields:hostAppBundleId:)();
}

uint64_t sub_1001C7958()
{
  sub_100011168();
  uint64_t v2 = *(void (***)(void))(v1 + 24);
  uint64_t v3 = *(void **)(v1 + 16);
  uint64_t v4 = *v0;
  sub_100010D94();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v2[2](v2);
  _Block_release(v2);
  sub_1000112AC();
  return v6();
}

void GKMetricsPipeline.init()()
{
}

uint64_t sub_1001C7B60(void (*a1)(void))
{
  a1(0);
  swift_arrayDestroy();

  return _swift_deallocClassInstance(v1, 32, 7);
}

uint64_t sub_1001C7BE4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptySetSingleton;
    goto LABEL_25;
  }
  sub_10000D938(&qword_100326698);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v3 = (unsigned char *)result;
  uint64_t v24 = *(void *)(a1 + 16);
  if (!v24)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    return (uint64_t)v3;
  }
  unint64_t v4 = 0;
  uint64_t v5 = result + 56;
  while (v4 < *(void *)(a1 + 16))
  {
    uint64_t v6 = (uint64_t *)(a1 + 32 + 16 * v4);
    uint64_t v8 = *v6;
    uint64_t v7 = v6[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v9 = -1 << v3[32];
    unint64_t v10 = result & ~v9;
    unint64_t v11 = v10 >> 6;
    uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
    uint64_t v13 = 1 << v10;
    if (((1 << v10) & v12) != 0)
    {
      uint64_t v14 = *((void *)v3 + 6);
      unint64_t v15 = (void *)(v14 + 16 * v10);
      BOOL v16 = *v15 == v8 && v15[1] == v7;
      if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
LABEL_11:
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_22;
      }
      uint64_t v17 = ~v9;
      while (1)
      {
        unint64_t v10 = (v10 + 1) & v17;
        unint64_t v11 = v10 >> 6;
        uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
        uint64_t v13 = 1 << v10;
        if ((v12 & (1 << v10)) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * v10);
        if (*v18 != v8 || v18[1] != v7)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_11;
      }
    }
    *(void *)(v5 + 8 * v11) = v13 | v12;
    uint64_t v20 = (void *)(*((void *)v3 + 6) + 16 * v10);
    void *v20 = v8;
    v20[1] = v7;
    uint64_t v21 = *((void *)v3 + 2);
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_27;
    }
    *((void *)v3 + 2) = v23;
LABEL_22:
    if (++v4 == v24) {
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1001C7DB4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MetricsFieldExclusionRequest();
  uint64_t v33 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2, v3);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  Class v37 = (char *)&v28 - v8;
  if (!*(void *)(a1 + 16))
  {
    unint64_t v10 = &_swiftEmptySetSingleton;
    goto LABEL_16;
  }
  sub_10000D938(&qword_100327F48);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  unint64_t v10 = (unsigned char *)result;
  uint64_t v32 = *(void *)(a1 + 16);
  if (!v32)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
  unint64_t v11 = 0;
  uint64_t v31 = a1 + ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80));
  uint64_t v35 = v33 + 16;
  uint64_t v36 = result + 56;
  uint64_t v12 = (void (**)(char *, uint64_t))(v33 + 8);
  uint64_t v29 = a1;
  uint64_t v30 = (uint64_t (**)(unint64_t, char *, uint64_t))(v33 + 32);
  while (v11 < *(void *)(a1 + 16))
  {
    uint64_t v13 = *(void *)(v33 + 72);
    uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v33 + 16);
    v14(v37, v31 + v13 * v11, v2);
    sub_1001C8A0C(&qword_100327F50, (void (*)(uint64_t))&type metadata accessor for MetricsFieldExclusionRequest);
    uint64_t v15 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v16 = -1 << v10[32];
    unint64_t v17 = v15 & ~v16;
    unint64_t v18 = v17 >> 6;
    uint64_t v19 = *(void *)(v36 + 8 * (v17 >> 6));
    uint64_t v20 = 1 << v17;
    if (((1 << v17) & v19) != 0)
    {
      unint64_t v34 = v11;
      uint64_t v21 = ~v16;
      while (1)
      {
        v14(v6, *((void *)v10 + 6) + v17 * v13, v2);
        sub_1001C8A0C(&qword_100327F58, (void (*)(uint64_t))&type metadata accessor for MetricsFieldExclusionRequest);
        char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v23 = *v12;
        (*v12)(v6, v2);
        if (v22) {
          break;
        }
        unint64_t v17 = (v17 + 1) & v21;
        unint64_t v18 = v17 >> 6;
        uint64_t v19 = *(void *)(v36 + 8 * (v17 >> 6));
        uint64_t v20 = 1 << v17;
        if ((v19 & (1 << v17)) == 0)
        {
          a1 = v29;
          unint64_t v11 = v34;
          goto LABEL_10;
        }
      }
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v23)(v37, v2);
      a1 = v29;
      unint64_t v11 = v34;
    }
    else
    {
LABEL_10:
      uint64_t v24 = v37;
      *(void *)(v36 + 8 * v18) = v20 | v19;
      uint64_t result = (*v30)(*((void *)v10 + 6) + v17 * v13, v24, v2);
      uint64_t v25 = *((void *)v10 + 2);
      BOOL v26 = __OFADD__(v25, 1);
      uint64_t v27 = v25 + 1;
      if (v26) {
        goto LABEL_18;
      }
      *((void *)v10 + 2) = v27;
    }
    if (++v11 == v32) {
      goto LABEL_16;
    }
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1001C8100(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MetricsFieldInclusionRequest();
  uint64_t v33 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2, v3);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  Class v37 = (char *)&v28 - v8;
  if (!*(void *)(a1 + 16))
  {
    unint64_t v10 = &_swiftEmptySetSingleton;
    goto LABEL_16;
  }
  sub_10000D938(&qword_100327FA0);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  unint64_t v10 = (unsigned char *)result;
  uint64_t v32 = *(void *)(a1 + 16);
  if (!v32)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
  unint64_t v11 = 0;
  uint64_t v31 = a1 + ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80));
  uint64_t v35 = v33 + 16;
  uint64_t v36 = result + 56;
  uint64_t v12 = (void (**)(char *, uint64_t))(v33 + 8);
  uint64_t v29 = a1;
  uint64_t v30 = (uint64_t (**)(unint64_t, char *, uint64_t))(v33 + 32);
  while (v11 < *(void *)(a1 + 16))
  {
    uint64_t v13 = *(void *)(v33 + 72);
    uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v33 + 16);
    v14(v37, v31 + v13 * v11, v2);
    sub_1001C8A0C(&qword_100327FA8, (void (*)(uint64_t))&type metadata accessor for MetricsFieldInclusionRequest);
    uint64_t v15 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v16 = -1 << v10[32];
    unint64_t v17 = v15 & ~v16;
    unint64_t v18 = v17 >> 6;
    uint64_t v19 = *(void *)(v36 + 8 * (v17 >> 6));
    uint64_t v20 = 1 << v17;
    if (((1 << v17) & v19) != 0)
    {
      unint64_t v34 = v11;
      uint64_t v21 = ~v16;
      while (1)
      {
        v14(v6, *((void *)v10 + 6) + v17 * v13, v2);
        sub_1001C8A0C((unint64_t *)&unk_100327FB0, (void (*)(uint64_t))&type metadata accessor for MetricsFieldInclusionRequest);
        char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v23 = *v12;
        (*v12)(v6, v2);
        if (v22) {
          break;
        }
        unint64_t v17 = (v17 + 1) & v21;
        unint64_t v18 = v17 >> 6;
        uint64_t v19 = *(void *)(v36 + 8 * (v17 >> 6));
        uint64_t v20 = 1 << v17;
        if ((v19 & (1 << v17)) == 0)
        {
          a1 = v29;
          unint64_t v11 = v34;
          goto LABEL_10;
        }
      }
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v23)(v37, v2);
      a1 = v29;
      unint64_t v11 = v34;
    }
    else
    {
LABEL_10:
      uint64_t v24 = v37;
      *(void *)(v36 + 8 * v18) = v20 | v19;
      uint64_t result = (*v30)(*((void *)v10 + 6) + v17 * v13, v24, v2);
      uint64_t v25 = *((void *)v10 + 2);
      BOOL v26 = __OFADD__(v25, 1);
      uint64_t v27 = v25 + 1;
      if (v26) {
        goto LABEL_18;
      }
      *((void *)v10 + 2) = v27;
    }
    if (++v11 == v32) {
      goto LABEL_16;
    }
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1001C844C()
{
  return type metadata accessor for GKMetricsPipeline();
}

uint64_t type metadata accessor for GKMetricsPipeline()
{
  uint64_t result = qword_100327F08;
  if (!qword_100327F08) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1001C849C()
{
  type metadata accessor for Bag();
  if (v0 <= 0x3F)
  {
    sub_1001C8568();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_1001C8568()
{
  if (!qword_100327F18)
  {
    type metadata accessor for MetricsPipeline();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100327F18);
    }
  }
}

uint64_t sub_1001C85C0()
{
  _Block_release(*(const void **)(v0 + 32));

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001C8610()
{
  sub_100010F2C();
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = (void *)v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100171E3C;
  uint64_t v7 = (uint64_t (*)(int, int, void *, void *))((char *)&dword_100327F20 + dword_100327F20);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_1001C86CC()
{
  _Block_release(*(const void **)(v0 + 48));

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1001C8724()
{
  uint64_t v2 = *(void *)(v0 + 16);
  int v3 = *(unsigned __int8 *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v7 = *(void **)(v0 + 48);
  uint64_t v6 = *(void **)(v0 + 56);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v8;
  *uint64_t v8 = v1;
  v8[1] = sub_100171648;
  uint64_t v9 = (uint64_t (*)(int, int, int, uint64_t, void *, void *))((char *)&dword_100327F30 + dword_100327F30);
  return v9(v2, v3, v4, v5, v7, v6);
}

uint64_t sub_1001C87FC(uint64_t a1)
{
  uint64_t v2 = sub_10000D938(&qword_100327F40);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001C885C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D938(&qword_100327F40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001C88C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D938(&qword_100327F40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001C892C()
{
  unint64_t result = qword_100327F70;
  if (!qword_100327F70)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100327F70);
  }
  return result;
}

unint64_t sub_1001C896C()
{
  unint64_t result = qword_100327F80;
  if (!qword_100327F80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327F80);
  }
  return result;
}

unint64_t sub_1001C89B8()
{
  unint64_t result = qword_100327F98;
  if (!qword_100327F98)
  {
    sub_100163988(&qword_100327F90);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100327F98);
  }
  return result;
}

uint64_t sub_1001C8A0C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t GKDaemonHostAppFieldsProvider.HostAppKey.unsafeMutableAddressor()
{
  if (qword_100325EC8 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_10000D938(&qword_100327F60);

  return sub_1001C2EE8(v0, (uint64_t)static GKDaemonHostAppFieldsProvider.HostAppKey);
}

uint64_t sub_1001C8ABC()
{
  uint64_t v0 = sub_10000D938(&qword_100327F60);
  sub_1001C2E84(v0, static GKDaemonHostAppFieldsProvider.HostAppKey);
  sub_1001C2EE8(v0, (uint64_t)static GKDaemonHostAppFieldsProvider.HostAppKey);
  return MetricsFieldsContext.Property.init(_:)();
}

uint64_t static GKDaemonHostAppFieldsProvider.HostAppKey.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_100325EC8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000D938(&qword_100327F60);
  uint64_t v3 = sub_1001C2EE8(v2, (uint64_t)static GKDaemonHostAppFieldsProvider.HostAppKey);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t GKDaemonHostAppFieldsProvider.category.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MetricsFieldsProviderCategory();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t GKDaemonHostAppFieldsProvider.addMetricsFields(into:using:)(void *a1)
{
  sub_100165918(a1, a1[3]);
  uint64_t v2 = dispatch thunk of MetricsFieldsBuilder.allMetricsFields.getter();
  uint64_t v3 = sub_1001C91E0();
  sub_1001699DC(v3, v4, v2, v5);
  swift_bridgeObjectRelease();
  uint64_t v6 = v10;
  uint64_t result = sub_10001869C((uint64_t)v9);
  if (!v6)
  {
    if (qword_100325EC8 != -1) {
      swift_once();
    }
    uint64_t v8 = sub_10000D938(&qword_100327F60);
    sub_1001C2EE8(v8, (uint64_t)static GKDaemonHostAppFieldsProvider.HostAppKey);
    uint64_t v10 = sub_10000D938(&qword_1003262D0);
    MetricsFieldsContext.subscript.getter();
    sub_100170D50((uint64_t)a1, a1[3]);
    dispatch thunk of MetricsFieldsBuilder.addValue(_:forField:)();
    return sub_100016C38((uint64_t)v9);
  }
  return result;
}

uint64_t sub_1001C8D88(void *a1)
{
  return GKDaemonHostAppFieldsProvider.addMetricsFields(into:using:)(a1);
}

uint64_t initializeBufferWithCopyOfBuffer for GKDaemonHostAppFieldsProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MetricsFieldsProviderCategory();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t destroy for GKDaemonHostAppFieldsProvider(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MetricsFieldsProviderCategory();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t initializeWithCopy for GKDaemonHostAppFieldsProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MetricsFieldsProviderCategory();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for GKDaemonHostAppFieldsProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MetricsFieldsProviderCategory();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for GKDaemonHostAppFieldsProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MetricsFieldsProviderCategory();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for GKDaemonHostAppFieldsProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MetricsFieldsProviderCategory();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for GKDaemonHostAppFieldsProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001C9014);
}

uint64_t sub_1001C9014(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MetricsFieldsProviderCategory();

  return sub_10000DB14(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for GKDaemonHostAppFieldsProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001C9070);
}

uint64_t sub_1001C9070(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MetricsFieldsProviderCategory();

  return sub_10000D97C(a1, a2, a2, v4);
}

uint64_t type metadata accessor for GKDaemonHostAppFieldsProvider()
{
  uint64_t result = qword_100328018;
  if (!qword_100328018) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001C9104()
{
  uint64_t result = type metadata accessor for MetricsFieldsProviderCategory();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1001C9190()
{
  uint64_t v0 = type metadata accessor for MetricsFieldExclusionRequest();
  sub_1001C2E84(v0, qword_10032DAA8);
  sub_1001C2EE8(v0, (uint64_t)qword_10032DAA8);
  sub_1001C91E0();
  return MetricsFieldExclusionRequest.init(rawValue:)();
}

uint64_t sub_1001C91E0()
{
  return 0x70704174736F68;
}

uint64_t sub_1001C91F8(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    long long v1 = *(_OWORD *)(a1 + 16);
    v3[0] = *(_OWORD *)a1;
    v3[1] = v1;
    uint64_t v4 = *(void *)(a1 + 32);
    sub_1001DD3D8();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_1001CC574(a1);
    sub_10019C184();
    swift_bridgeObjectRelease();
    return sub_1001CC574((uint64_t)v3);
  }
}

id sub_1001C9284()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for MatchReporter()) init];
  static MatchReporter.shared = (uint64_t)result;
  return result;
}

uint64_t *MatchReporter.shared.unsafeMutableAddressor()
{
  if (qword_100325ED8 != -1) {
    swift_once();
  }
  return &static MatchReporter.shared;
}

id static MatchReporter.shared.getter()
{
  if (qword_100325ED8 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static MatchReporter.shared;

  return v0;
}

id sub_1001C9384()
{
  Class ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v0[OBJC_IVAR___GKMatchReporter_matchRecording] = 0;
  uint64_t v1 = OBJC_IVAR___GKMatchReporter_matchQueue;
  sub_100163CE4(0, (unint64_t *)&qword_100325F10);
  uint64_t v2 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v4 = v0;
  static DispatchQoS.unspecified.getter();
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v5, v6);
  uint64_t v14 = _swiftEmptyArrayStorage;
  sub_1001CC488((unint64_t *)&qword_100325F18, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000D938(&qword_100325F20);
  sub_1001CC4D0((unint64_t *)&qword_100325F28, &qword_100325F20);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  __chkstk_darwin(v7, v8);
  (*(void (**)(char *, void))(v10 + 104))((char *)&ObjectType - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:));
  *(void *)&v0[v1] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();

  v13.receiver = v4;
  v13.Class super_class = ObjectType;
  return [super init];
}

uint64_t sub_1001C9628(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  sub_10000D938(&qword_100328230);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10024F6F0;
  *(void *)(inited + 32) = 0x707954746E657665;
  *(void *)(inited + 40) = 0xE900000000000065;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 88) = 0x707954686374616DLL;
  *(void *)(inited + 96) = 0xE900000000000065;
  v27[1] = a2;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 144) = 0x6579616C506E696DLL;
  *(void *)(inited + 152) = 0xEA00000000007372;
  sub_100163CE4(0, (unint64_t *)&qword_1003263A0);
  sub_1001CC520();
  id v17 = a3;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 200) = 0x6579616C5078616DLL;
  *(void *)(inited + 208) = 0xEA00000000007372;
  v27[0] = a4;
  id v18 = a4;
  AnyHashable.init<A>(_:)();
  uint64_t v28 = Dictionary.init(dictionaryLiteral:)();
  if (a6)
  {
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    sub_1001C91F8((uint64_t)v27);
  }
  if (a8)
  {
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    sub_1001C91F8((uint64_t)v27);
  }
  if (a9)
  {
    id v19 = a9;
    AnyHashable.init<A>(_:)();
    sub_1001C91F8((uint64_t)v27);
  }
  if (a10)
  {
    id v20 = a10;
    AnyHashable.init<A>(_:)();
    sub_1001C91F8((uint64_t)v27);
  }
  if (a11)
  {
    id v21 = a11;
    AnyHashable.init<A>(_:)();
    sub_1001C91F8((uint64_t)v27);
  }
  if (a12)
  {
    id v22 = a12;
    AnyHashable.init<A>(_:)();
    sub_1001C91F8((uint64_t)v27);
  }
  sub_1001D9F98(v28);
  uint64_t v24 = v23;
  swift_bridgeObjectRelease();
  return v24;
}

uint64_t sub_1001C99DC()
{
  *(void *)(v0 + OBJC_IVAR___GKMatchReporter_matchRecording) = 0;
  return swift_release();
}

Swift::Void __swiftcall MatchReporter.recordMatchStart(type:minPlayers:maxPlayers:)(Swift::String type, NSNumber minPlayers, NSNumber maxPlayers)
{
  sub_100011BD4();
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  sub_100010FD0(OBJC_IVAR___GKMatchReporter_matchQueue);
  sub_1000113C8();
  sub_1000170FC();
  uint64_t v12 = (void *)swift_allocObject();
  _OWORD v12[2] = v3;
  void v12[3] = v11;
  void v12[4] = v9;
  v12[5] = v7;
  void v12[6] = v5;
  void v23[4] = sub_1001C9D54;
  v23[5] = v12;
  v23[0] = _NSConcreteStackBlock;
  sub_1001CC634(COERCE_DOUBLE(1107296256));
  void v23[2] = sub_100006530;
  v23[3] = &unk_1002DEEB8;
  _Block_copy(v23);
  sub_1001CC640();
  sub_100011108();
  __chkstk_darwin(v13, v14);
  sub_1001CC60C();
  swift_bridgeObjectRetain();
  id v15 = v7;
  id v16 = v5;
  static DispatchQoS.unspecified.getter();
  type metadata accessor for DispatchWorkItemFlags();
  sub_100011108();
  sub_1001CC658();
  __chkstk_darwin(v17, v18);
  sub_100011CB4();
  sub_1001CC488(&qword_100327070, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000D938(&qword_100327078);
  sub_1001CC4D0(&qword_100327080, &qword_100327078);
  sub_100011280();
  sub_100017AE0();
  _Block_release(v11);
  uint64_t v19 = sub_100017410();
  v20(v19);
  uint64_t v21 = sub_100017758();
  v22(v21);
  sub_100018574();
  swift_release();
  sub_100010DB0();
}

uint64_t sub_1001C9BDC()
{
  swift_unknownObjectUnownedDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1001C9C14(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t Strong = (char *)swift_unknownObjectUnownedLoadStrong();
  uint64_t v10 = *(void *)&Strong[OBJC_IVAR___GKMatchReporter_matchRecording];

  if (!v10)
  {
    uint64_t v11 = (char *)swift_unknownObjectUnownedLoadStrong();
    type metadata accessor for MultiplayerRecording();
    swift_allocObject();
    swift_bridgeObjectRetain();
    *(void *)&v11[OBJC_IVAR___GKMatchReporter_matchRecording] = sub_1001CC328(a2, a3, (uint64_t)a4, (uint64_t)a5);

    swift_release();
  }
}

uint64_t sub_1001C9D04()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_1001C9D54()
{
  sub_1001C9C14(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40), *(void **)(v0 + 48));
}

Swift::Void __swiftcall MatchReporter.recordMatchServer(type:)(Swift::String type)
{
  sub_100011BD4();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_100010FD0(OBJC_IVAR___GKMatchReporter_matchQueue);
  sub_1000113C8();
  sub_1000170FC();
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = v1;
  v6[3] = v5;
  void v6[4] = v3;
  void v15[4] = sub_1001CA098;
  void v15[5] = v6;
  v15[0] = _NSConcreteStackBlock;
  sub_1001CC634(COERCE_DOUBLE(1107296256));
  uint64_t v15[2] = sub_100006530;
  v15[3] = &unk_1002DEF08;
  _Block_copy(v15);
  sub_1001CC640();
  sub_100011108();
  __chkstk_darwin(v7, v8);
  sub_1001CC60C();
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  type metadata accessor for DispatchWorkItemFlags();
  sub_100011108();
  sub_1001CC658();
  __chkstk_darwin(v9, v10);
  sub_100011CB4();
  sub_1001CC488(&qword_100327070, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000D938(&qword_100327078);
  sub_1001CC4D0(&qword_100327080, &qword_100327078);
  sub_100011280();
  sub_100017AE0();
  _Block_release(v5);
  uint64_t v11 = sub_100017410();
  v12(v11);
  uint64_t v13 = sub_100017758();
  v14(v13);
  sub_100018574();
  swift_release();
  sub_100010DB0();
}

void sub_1001C9FD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Strong = (char *)swift_unknownObjectUnownedLoadStrong();
  uint64_t v6 = *(void *)&Strong[OBJC_IVAR___GKMatchReporter_matchRecording];
  if (v6)
  {
    id v7 = Strong;
    swift_retain();

    *(void *)(v6 + 88) = a2;
    *(void *)(v6 + 96) = a3;
    swift_bridgeObjectRetain();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
  }
}

uint64_t sub_1001CA080()
{
  return sub_1001CBD48((void (*)(void))&_swift_bridgeObjectRelease);
}

void sub_1001CA098()
{
  sub_1001C9FD0(v0[2], v0[3], v0[4]);
}

Swift::Void __swiftcall MatchReporter.recordActiveDevices(count:)(NSNumber count)
{
}

void sub_1001CA134(uint64_t a1, void *a2)
{
  uint64_t Strong = (char *)swift_unknownObjectUnownedLoadStrong();
  uint64_t v4 = *(void *)&Strong[OBJC_IVAR___GKMatchReporter_matchRecording];
  if (v4)
  {
    id v6 = Strong;
    swift_retain();

    id v7 = *(char **)(v4 + 104);
    *(void *)(v4 + 104) = a2;
    id v5 = a2;
    swift_release();
    uint64_t Strong = v7;
  }
}

void sub_1001CA1B8()
{
  sub_1001CA134(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

Swift::Void __swiftcall MatchReporter.recordSharePlayDevices(count:)(NSNumber count)
{
}

void sub_1001CA250()
{
  sub_100011BD4();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  id v5 = v4;
  uint64_t v6 = sub_1000113C8();
  swift_unknownObjectUnownedInit();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v6;
  *(void *)(v7 + 24) = v5;
  void v17[4] = v3;
  uint64_t v17[5] = v7;
  v17[0] = _NSConcreteStackBlock;
  sub_1001CC634(COERCE_DOUBLE(1107296256));
  void v17[2] = sub_100006530;
  v17[3] = v1;
  _Block_copy(v17);
  sub_1001CC640();
  sub_100011108();
  __chkstk_darwin(v8, v9);
  sub_1001CC60C();
  id v10 = v5;
  static DispatchQoS.unspecified.getter();
  type metadata accessor for DispatchWorkItemFlags();
  sub_100011108();
  __chkstk_darwin(v11, v12);
  sub_100011CB4();
  sub_1001CC488(&qword_100327070, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000D938(&qword_100327078);
  sub_1001CC4D0(&qword_100327080, &qword_100327078);
  sub_100011280();
  sub_100017AE0();
  _Block_release(v3);
  uint64_t v13 = sub_100017410();
  v14(v13);
  uint64_t v15 = sub_100017758();
  v16(v15);
  sub_100018574();
  swift_release();
  sub_100010DB0();
}

void sub_1001CA420(uint64_t a1, void *a2)
{
  uint64_t Strong = (char *)swift_unknownObjectUnownedLoadStrong();
  uint64_t v4 = *(void *)&Strong[OBJC_IVAR___GKMatchReporter_matchRecording];
  if (v4)
  {
    id v6 = Strong;
    swift_retain();

    uint64_t v7 = *(char **)(v4 + 112);
    *(void *)(v4 + 112) = a2;
    id v5 = a2;
    swift_release();
    uint64_t Strong = v7;
  }
}

uint64_t sub_1001CA4A4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1001CA4E4()
{
  sub_1001CA420(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

void MatchReporter.recordMatchComplete(matchType:result:completion:)()
{
  sub_100011BD4();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  sub_100010FD0(OBJC_IVAR___GKMatchReporter_matchQueue);
  sub_1000113C8();
  sub_1000170FC();
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = v0;
  v13[3] = v4;
  void v13[4] = v2;
  void v13[5] = v12;
  v13[6] = v10;
  v13[7] = v8;
  v13[8] = v6;
  void v22[4] = sub_1001CAF2C;
  void v22[5] = v13;
  v22[0] = _NSConcreteStackBlock;
  sub_1001CC634(COERCE_DOUBLE(1107296256));
  _OWORD v22[2] = sub_100006530;
  void v22[3] = &unk_1002DEFF8;
  _Block_copy(v22);
  sub_1001CC640();
  sub_100011108();
  __chkstk_darwin(v14, v15);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  type metadata accessor for DispatchWorkItemFlags();
  sub_100011108();
  sub_1001CC658();
  __chkstk_darwin(v16, v17);
  sub_100011CB4();
  sub_1001CC488(&qword_100327070, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000D938(&qword_100327078);
  sub_1001CC4D0(&qword_100327080, &qword_100327078);
  sub_100011280();
  sub_100017AE0();
  _Block_release(v4);
  uint64_t v18 = sub_100017410();
  v19(v18);
  uint64_t v20 = sub_100017758();
  v21(v20);
  sub_100018574();
  swift_release();
  sub_100010DB0();
}

void sub_1001CA76C(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v76 = a7;
  uint64_t v77 = a6;
  uint64_t v78 = a3;
  uint64_t v79 = a2;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Strong = (char *)swift_unknownObjectUnownedLoadStrong();
  uint64_t v15 = *(void *)&Strong[OBJC_IVAR___GKMatchReporter_matchRecording];

  if (!v15) {
    goto LABEL_4;
  }
  uint64_t v16 = (char *)swift_unknownObjectUnownedLoadStrong();
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)&v16[OBJC_IVAR___GKMatchReporter_matchRecording];
  if (v18)
  {
    swift_retain();

    uint64_t v19 = *(void *)(v18 + 56);
    swift_release();
    if (v19)
    {
LABEL_4:
      static GKLog.daemon.getter();
      swift_retain_n();
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v20, v21))
      {
        id v22 = (uint8_t *)swift_slowAlloc();
        uint64_t v77 = swift_slowAlloc();
        uint64_t v81 = v77;
        *(_DWORD *)id v22 = 136315138;
        uint64_t v23 = (char *)swift_unknownObjectUnownedLoadStrong();
        uint64_t v24 = v23;
        uint64_t v25 = *(void *)&v23[OBJC_IVAR___GKMatchReporter_matchRecording];
        if (v25)
        {
          swift_retain();

          uint64_t v26 = *(void *)(v25 + 16);
          unint64_t v27 = *(void *)(v25 + 24);
          swift_bridgeObjectRetain();
          swift_release();
        }
        else
        {

          unint64_t v27 = 0xE700000000000000;
          uint64_t v26 = 0x6E776F6E6B6E55;
        }
        uint64_t v80 = sub_100174CE4(v26, v27, &v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Match record not found for matchType: %s", v22, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
      v79(0);
      return;
    }
  }
  else
  {
  }
  uint64_t v28 = (char *)swift_unknownObjectUnownedLoadStrong();
  uint64_t v29 = *(void *)&v28[OBJC_IVAR___GKMatchReporter_matchRecording];
  if (v29)
  {
    uint64_t v75 = v28;
    swift_retain();

    uint64_t v30 = *(void *)(v29 + 16);
    uint64_t v31 = *(void *)(v29 + 24);
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t v75 = (char *)swift_unknownObjectUnownedLoadStrong();
    uint64_t v32 = *(void *)&v75[OBJC_IVAR___GKMatchReporter_matchRecording];
    if (v32)
    {
      swift_retain();

      uint64_t v75 = (char *)*(id *)(v32 + 40);
      swift_release();
      uint64_t v33 = (char *)swift_unknownObjectUnownedLoadStrong();
      uint64_t v34 = *(void *)&v33[OBJC_IVAR___GKMatchReporter_matchRecording];
      Class isa = v33;
      if (!v34)
      {
        swift_bridgeObjectRelease();
LABEL_22:

LABEL_48:
        uint64_t v28 = isa;
        goto LABEL_52;
      }
      swift_retain();

      id v35 = *(id *)(v34 + 48);
      swift_release();
      Class isa = (char *)swift_unknownObjectUnownedLoadStrong();
      uint64_t v36 = *(void *)&isa[OBJC_IVAR___GKMatchReporter_matchRecording];
      if (!v36)
      {
        swift_bridgeObjectRelease();

        goto LABEL_48;
      }
      uint64_t v73 = v35;
      swift_retain();

      double v37 = *(double *)(v36 + 32);
      swift_release();
      double Current = CFAbsoluteTimeGetCurrent();
      unint64_t v39 = (char *)swift_unknownObjectUnownedLoadStrong();
      uint64_t v40 = *(void *)&v39[OBJC_IVAR___GKMatchReporter_matchRecording];
      if (v40)
      {
        swift_retain();

        id v41 = [objc_allocWithZone((Class)NSNumber) initWithDouble:Current - v37];
        unint64_t v39 = *(char **)(v40 + 56);
        *(void *)(v40 + 56) = v41;
        swift_release();
      }

      if (a5)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v31 = a5;
      }
      else
      {
        a4 = v30;
      }
      id v42 = (char *)swift_unknownObjectUnownedLoadStrong();
      uint64_t v43 = v42;
      uint64_t v44 = *(void *)&v42[OBJC_IVAR___GKMatchReporter_matchRecording];
      if (v44)
      {
        swift_retain();

        *(void *)(v44 + 16) = a4;
        *(void *)(v44 + 24) = v31;
        swift_bridgeObjectRetain();
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
      }
      uint64_t v45 = (void *)swift_unknownObjectUnownedLoadStrong();
      id v46 = (char *)swift_unknownObjectUnownedLoadStrong();
      uint64_t v47 = v46;
      uint64_t v48 = *(void *)&v46[OBJC_IVAR___GKMatchReporter_matchRecording];
      if (v48)
      {
        swift_retain();

        uint64_t v49 = *(void *)(v48 + 88);
        Class isa = *(char **)(v48 + 96);
        swift_bridgeObjectRetain();
        swift_release();
      }
      else
      {

        uint64_t v49 = 0;
        Class isa = 0;
      }
      unint64_t v50 = (char *)swift_unknownObjectUnownedLoadStrong();
      uint64_t v51 = v50;
      uint64_t v52 = *(void *)&v50[OBJC_IVAR___GKMatchReporter_matchRecording];
      if (v52)
      {
        swift_retain();

        uint64_t v53 = *(void **)(v52 + 56);
        id v54 = v53;
        swift_release();
      }
      else
      {

        uint64_t v53 = 0;
      }
      unint64_t v55 = (char *)swift_unknownObjectUnownedLoadStrong();
      uint64_t v56 = v55;
      uint64_t v57 = *(void *)&v55[OBJC_IVAR___GKMatchReporter_matchRecording];
      if (v57)
      {
        swift_retain();

        unint64_t v58 = *(void **)(v57 + 104);
        id v59 = v58;
        swift_release();
      }
      else
      {

        unint64_t v58 = 0;
      }
      uint64_t v60 = (char *)swift_unknownObjectUnownedLoadStrong();
      uint64_t v61 = v60;
      uint64_t v62 = *(void *)&v60[OBJC_IVAR___GKMatchReporter_matchRecording];
      if (v62)
      {
        swift_retain();

        uint64_t v63 = *(void **)(v62 + 112);
        id v64 = v63;
        swift_release();
      }
      else
      {

        uint64_t v63 = 0;
      }
      uint64_t v65 = v76;
      sub_1001C9628(a4, v31, v75, v73, v77, v76, v49, (uint64_t)isa, v53, 0, v58, v63);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Class isa = (char *)Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v79(isa);
      uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (!v65)
      {

        swift_bridgeObjectRelease();
        goto LABEL_48;
      }
      if (v66 == v77 && v67 == v65)
      {
        swift_bridgeObjectRelease();
        uint64_t v70 = v73;
      }
      else
      {
        char v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t v70 = v73;
        if ((v69 & 1) == 0)
        {

          goto LABEL_22;
        }
      }
      uint64_t v71 = (void *)swift_unknownObjectUnownedLoadStrong();
      sub_1001C99DC();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v28 = v75;
  }
LABEL_52:
}

uint64_t sub_1001CAEDC()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

void sub_1001CAF2C()
{
  sub_1001CA76C(*(void *)(v0 + 16), *(void (**)(char *))(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64));
}

Swift::Void __swiftcall MatchReporter.recordGameStart()()
{
  sub_100011BD4();
  uint64_t v1 = sub_1000113C8();
  swift_unknownObjectUnownedInit();
  _DWORD v10[4] = sub_1001CB4F8;
  void v10[5] = v1;
  v10[0] = _NSConcreteStackBlock;
  sub_1001CC634(COERCE_DOUBLE(1107296256));
  v10[2] = sub_100006530;
  v10[3] = &unk_1002DF020;
  _Block_copy(v10);
  sub_1001CC640();
  sub_100011108();
  __chkstk_darwin(v2, v3);
  sub_1001CC60C();
  static DispatchQoS.unspecified.getter();
  type metadata accessor for DispatchWorkItemFlags();
  sub_100011108();
  __chkstk_darwin(v4, v5);
  sub_100011CB4();
  sub_1001CC488(&qword_100327070, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000D938(&qword_100327078);
  sub_1001CC4D0(&qword_100327080, &qword_100327078);
  sub_100011280();
  sub_100017AE0();
  _Block_release(v0);
  uint64_t v6 = sub_100017410();
  v7(v6);
  uint64_t v8 = sub_100017758();
  v9(v8);
  sub_100018574();
  swift_release();
  sub_100010DB0();
}

void sub_1001CB1F8()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Strong = (char *)swift_unknownObjectUnownedLoadStrong();
  uint64_t v6 = *(void *)&Strong[OBJC_IVAR___GKMatchReporter_matchRecording];

  if (v6)
  {
    uint64_t v7 = (char *)swift_unknownObjectUnownedLoadStrong();
    uint64_t v8 = *(void *)&v7[OBJC_IVAR___GKMatchReporter_matchRecording];
    if (v8)
    {
      id v18 = v7;
      swift_retain();

      *(CFAbsoluteTime *)(v8 + 32) = CFAbsoluteTimeGetCurrent();
      swift_release();
    }
    else
    {
    }
  }
  else
  {
    static GKLog.daemon.getter();
    swift_retain_n();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      id v18 = (id)swift_slowAlloc();
      id v20 = v18;
      *(_DWORD *)uint64_t v11 = 136315138;
      uint64_t v12 = (char *)swift_unknownObjectUnownedLoadStrong();
      uint64_t v13 = v12;
      uint64_t v14 = *(void *)&v12[OBJC_IVAR___GKMatchReporter_matchRecording];
      if (v14)
      {
        swift_retain();

        uint64_t v16 = *(void *)(v14 + 16);
        unint64_t v15 = *(void *)(v14 + 24);
        swift_bridgeObjectRetain();
        swift_release();
      }
      else
      {

        unint64_t v15 = 0xE700000000000000;
        uint64_t v16 = 0x6E776F6E6B6E55;
      }
      uint64_t v19 = sub_100174CE4(v16, v15, (uint64_t *)&v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Match record not found at start of game for matchType: %s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  }
}

void sub_1001CB4F8()
{
}

void MatchReporter.recordGameComplete(completion:)()
{
  sub_100011BD4();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_100010FD0(OBJC_IVAR___GKMatchReporter_matchQueue);
  sub_1000113C8();
  sub_1000170FC();
  uint64_t v5 = (void *)swift_allocObject();
  uint64_t v5[2] = v0;
  v5[3] = v4;
  void v5[4] = v2;
  void v14[4] = sub_1001CBD98;
  v14[5] = v5;
  v14[0] = _NSConcreteStackBlock;
  sub_1001CC634(COERCE_DOUBLE(1107296256));
  void v14[2] = sub_100006530;
  v14[3] = &unk_1002DF070;
  _Block_copy(v14);
  sub_1001CC640();
  sub_100011108();
  __chkstk_darwin(v6, v7);
  sub_1001CC60C();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  type metadata accessor for DispatchWorkItemFlags();
  sub_100011108();
  sub_1001CC658();
  __chkstk_darwin(v8, v9);
  sub_100011CB4();
  sub_1001CC488(&qword_100327070, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000D938(&qword_100327078);
  sub_1001CC4D0(&qword_100327080, &qword_100327078);
  sub_100011280();
  sub_100017AE0();
  _Block_release(v4);
  uint64_t v10 = sub_100017410();
  v11(v10);
  uint64_t v12 = sub_100017758();
  v13(v12);
  sub_100018574();
  swift_release();
  sub_100010DB0();
}

void sub_1001CB720(uint64_t a1, void (*a2)(Class))
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Strong = (char *)swift_unknownObjectUnownedLoadStrong();
  uint64_t v9 = *(void *)&Strong[OBJC_IVAR___GKMatchReporter_matchRecording];

  if (v9)
  {
    uint64_t v10 = (char *)swift_unknownObjectUnownedLoadStrong();
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)&v10[OBJC_IVAR___GKMatchReporter_matchRecording];
    if (v12)
    {
      swift_retain();

      uint64_t v13 = *(void *)(v12 + 56);
      swift_release();
      if (v13)
      {
        uint64_t v14 = (char *)swift_unknownObjectUnownedLoadStrong();
        uint64_t v15 = *(void *)&v14[OBJC_IVAR___GKMatchReporter_matchRecording];
        if (v15)
        {
          swift_retain();

          uint64_t v17 = *(void **)(v15 + 16);
          uint64_t v16 = *(void *)(v15 + 24);
          swift_bridgeObjectRetain();
          swift_release();
          uint64_t v14 = (char *)swift_unknownObjectUnownedLoadStrong();
          uint64_t v18 = *(void *)&v14[OBJC_IVAR___GKMatchReporter_matchRecording];
          if (v18)
          {
            swift_retain();

            id v19 = *(id *)(v18 + 40);
            swift_release();
            uint64_t v14 = (char *)swift_unknownObjectUnownedLoadStrong();
            uint64_t v20 = *(void *)&v14[OBJC_IVAR___GKMatchReporter_matchRecording];
            if (v20)
            {
              swift_retain();

              id v21 = *(id *)(v20 + 48);
              swift_release();
              uint64_t v14 = (char *)swift_unknownObjectUnownedLoadStrong();
              uint64_t v22 = *(void *)&v14[OBJC_IVAR___GKMatchReporter_matchRecording];
              if (v22)
              {
                uint64_t v74 = a2;
                swift_retain();

                double v23 = *(double *)(v22 + 32);
                swift_release();
                double Current = CFAbsoluteTimeGetCurrent();
                uint64_t v25 = (char *)swift_unknownObjectUnownedLoadStrong();
                uint64_t v26 = *(void *)&v25[OBJC_IVAR___GKMatchReporter_matchRecording];
                id v73 = v17;
                if (v26)
                {
                  swift_retain();

                  id v27 = [objc_allocWithZone((Class)NSNumber) initWithDouble:Current - v23];
                  uint64_t v25 = *(char **)(v26 + 64);
                  *(void *)(v26 + 64) = v27;
                  swift_release();
                }

                uint64_t v72 = swift_unknownObjectUnownedLoadStrong();
                uint64_t v28 = (char *)swift_unknownObjectUnownedLoadStrong();
                uint64_t v29 = v28;
                uint64_t v30 = *(void *)&v28[OBJC_IVAR___GKMatchReporter_matchRecording];
                if (v30)
                {
                  swift_retain();

                  uint64_t v31 = *(void *)(v30 + 80);
                  uint64_t v71 = *(void *)(v30 + 72);
                  swift_bridgeObjectRetain();
                  swift_release();
                }
                else
                {

                  uint64_t v71 = 0;
                  uint64_t v31 = 0;
                }
                uint64_t v70 = v16;
                uint64_t v36 = (char *)swift_unknownObjectUnownedLoadStrong();
                double v37 = v36;
                uint64_t v38 = *(void *)&v36[OBJC_IVAR___GKMatchReporter_matchRecording];
                if (v38)
                {
                  swift_retain();

                  uint64_t v39 = *(void *)(v38 + 88);
                  uint64_t v68 = *(void *)(v38 + 96);
                  uint64_t v69 = v39;
                  swift_bridgeObjectRetain();
                  swift_release();
                }
                else
                {

                  uint64_t v68 = 0;
                  uint64_t v69 = 0;
                }
                uint64_t v40 = (char *)swift_unknownObjectUnownedLoadStrong();
                id v41 = v40;
                uint64_t v42 = *(void *)&v40[OBJC_IVAR___GKMatchReporter_matchRecording];
                uint64_t v75 = v21;
                if (v42)
                {
                  swift_retain();

                  uint64_t v43 = *(void **)(v42 + 56);
                  id v44 = v43;
                  swift_release();
                }
                else
                {

                  uint64_t v43 = 0;
                }
                uint64_t v45 = v19;
                id v46 = (char *)swift_unknownObjectUnownedLoadStrong();
                uint64_t v47 = v46;
                uint64_t v48 = *(void *)&v46[OBJC_IVAR___GKMatchReporter_matchRecording];
                if (v48)
                {
                  swift_retain();

                  uint64_t v49 = *(void **)(v48 + 64);
                  id v50 = v49;
                  swift_release();
                }
                else
                {

                  uint64_t v49 = 0;
                }
                uint64_t v51 = (char *)swift_unknownObjectUnownedLoadStrong();
                uint64_t v52 = v51;
                uint64_t v53 = *(void *)&v51[OBJC_IVAR___GKMatchReporter_matchRecording];
                if (v53)
                {
                  swift_retain();

                  id v54 = *(void **)(v53 + 104);
                  id v55 = v54;
                  swift_release();
                }
                else
                {

                  id v54 = 0;
                }
                uint64_t v56 = (char *)swift_unknownObjectUnownedLoadStrong();
                uint64_t v57 = v56;
                uint64_t v58 = *(void *)&v56[OBJC_IVAR___GKMatchReporter_matchRecording];
                if (v58)
                {
                  swift_retain();

                  id v59 = *(void **)(v58 + 112);
                  id v60 = v59;
                  swift_release();
                }
                else
                {

                  id v59 = 0;
                }
                uint64_t v65 = v54;
                uint64_t v61 = v54;
                uint64_t v63 = (void *)v72;
                uint64_t v62 = (uint64_t)v73;
                id v73 = v43;
                id v67 = v45;
                sub_1001C9628(v62, v70, v45, v75, v71, v31, v69, v68, v43, v49, v65, v59);

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
                swift_bridgeObjectRelease();
                v74(isa);

                goto LABEL_20;
              }
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_bridgeObjectRelease();
            }
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }

        a2(0);
LABEL_20:
        uint64_t v75 = (void *)swift_unknownObjectUnownedLoadStrong();
        sub_1001C99DC();
        id v35 = v75;

        return;
      }
    }
    else
    {
    }
  }
  static GKLog.daemon.getter();
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Match record not found at finish gameplay.", v34, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  a2(0);
}

uint64_t sub_1001CBD30()
{
  return sub_1001CBD48((void (*)(void))&_swift_release);
}

uint64_t sub_1001CBD48(void (*a1)(void))
{
  swift_release();
  a1(*(void *)(v1 + 32));

  return _swift_deallocObject(v1, 40, 7);
}

void sub_1001CBD98()
{
  sub_1001CB720(*(void *)(v0 + 16), *(void (**)(Class))(v0 + 24));
}

void static MatchReporter.onInviteReceived(bulletin:)()
{
  sub_100011BD4();
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  sub_100011108();
  uint64_t v4 = v3;
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [v1 gameDescriptor];
  if (!v9)
  {
LABEL_11:
    static GKLog.daemon.getter();
    uint64_t v17 = v1;
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v18, v19))
    {
      Class isa = (Class)v2;
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 138412290;
      uint64_t v32 = v17;
      id v21 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v30 = v17;

      uint64_t v2 = (uint64_t)isa;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Not emitting MAF event for incomplete bulletin localPlayerID: %@", v20, 0xCu);
      sub_10000D938(&qword_100326430);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v18 = v17;
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v8, v2);
    sub_100010DB0();
    return;
  }
  uint64_t v10 = v9;
  id v11 = [v9 bundleIdentifier];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_100166714(v1, (SEL *)&selRef_receiverPlayerID);
  if (!v12)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  uint64_t v13 = sub_100166714(v1, (SEL *)&selRef_originatorPlayerID);
  if (!v14)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  Class isa = (Class)v13;
  sub_100166714(v1, (SEL *)&selRef_sessionID);
  if (!v15)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  if ([v1 isMessageBasedInvite])
  {
    uint64_t v16 = 2;
  }
  else if ([v1 isSharePlayInvite])
  {
    uint64_t v16 = 4;
  }
  else
  {
    unsigned int v22 = [v1 isNearbyInvite];
    uint64_t v16 = 3;
    if (!v22) {
      uint64_t v16 = 1;
    }
  }
  uint64_t v30 = (void *)v16;
  [v1 serverHosted];
  id v23 = [v1 transportVersionToUse];
  uint64_t v24 = v23;
  if (v23)
  {
    [v23 integerValue];
  }
  type metadata accessor for MultiplayerActivityReporter();
  static MultiplayerActivityReporter.makeInviteReceivedFields(approach:isHosted:localPlayerID:senderPlayerID:sessionID:transportVersion:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v25 = [self controller];
  NSString v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v25 reportMultiplayerActivityEventWithHostAppBundleId:v26 metricsFields:isa];

  sub_100010DB0();
}

uint64_t sub_1001CC328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 40) = a3;
  *(void *)(v4 + 48) = a4;
  *(CFAbsoluteTime *)(v4 + 32) = CFAbsoluteTimeGetCurrent();
  return v4;
}

id *sub_1001CC364()
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t sub_1001CC3C4()
{
  uint64_t v0 = sub_1001CC364();

  return _swift_deallocClassInstance(v0, 120, 7);
}

uint64_t type metadata accessor for MatchReporter()
{
  return self;
}

uint64_t type metadata accessor for MultiplayerRecording()
{
  return self;
}

uint64_t sub_1001CC43C()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001CC474()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_1001CC488(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001CC4D0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100163988(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001CC520()
{
  unint64_t result = qword_100328238;
  if (!qword_100328238)
  {
    sub_100163CE4(255, (unint64_t *)&qword_1003263A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100328238);
  }
  return result;
}

uint64_t sub_1001CC574(uint64_t a1)
{
  uint64_t v2 = sub_10000D938(&qword_100328240);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001CC60C()
{
  return swift_retain();
}

void sub_1001CC634(double a1)
{
  *(double *)(v1 - 120) = a1;
}

uint64_t sub_1001CC640()
{
  return type metadata accessor for DispatchQoS();
}

void sub_1001CC69C(uint64_t a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v128 = a3;
  uint64_t v123 = type metadata accessor for InGameBannerData.BannerType();
  uint64_t v121 = *(void *)(v123 - 8);
  __chkstk_darwin(v123, v4);
  uint64_t v122 = (void *)((char *)v108 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v127 = type metadata accessor for InGameBannerData();
  uint64_t v120 = *(void *)(v127 - 8);
  uint64_t v7 = __chkstk_darwin(v127, v6);
  uint64_t v125 = (uint64_t)v108 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v9);
  uint64_t v126 = (char *)v108 - v10;
  uint64_t v129 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v129 - 8);
  uint64_t v13 = __chkstk_darwin(v129, v12);
  uint64_t v15 = ((char *)v108 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = __chkstk_darwin(v13, v16);
  uint64_t v119 = (uint8_t *)v108 - v18;
  uint64_t v20 = __chkstk_darwin(v17, v19);
  unint64_t v124 = (char *)v108 - v21;
  uint64_t v23 = __chkstk_darwin(v20, v22);
  uint64_t v117 = (char *)v108 - v24;
  uint64_t v26 = __chkstk_darwin(v23, v25);
  os_log_t v118 = (os_log_t)((char *)v108 - v27);
  uint64_t v29 = __chkstk_darwin(v26, v28);
  uint64_t v31 = ((char *)v108 - v30);
  uint64_t v33 = __chkstk_darwin(v29, v32);
  id v35 = ((char *)v108 - v34);
  __chkstk_darwin(v33, v36);
  uint64_t v38 = (char *)v108 - v37;
  static GKLog.daemon.getter();
  uint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v39, v40))
  {
    id v41 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v41 = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "LeaderboardBeatFriendScoreBulletin: loadBulletinsForPushNotification:", v41, 2u);
    swift_slowDealloc();
  }

  uint64_t v43 = v11 + 8;
  uint64_t v42 = *(void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v44 = v129;
  v42(v38, v129);
  sub_1001AF298(a1);
  sub_1001CD710((uint64_t)v135, (uint64_t)v136);
  if (sub_10018BFA8((uint64_t)v136) == 1)
  {
    static GKLog.daemon.getter();
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "LeaderboardBeatFriendScoreBulletin: failed to decode relationships.", v47, 2u);
      swift_slowDealloc();
    }

    os_log_t v48 = v35;
LABEL_28:
    v42((char *)v48, v44);
LABEL_29:
    uint64_t v66 = v128;
    goto LABEL_30;
  }
  uint64_t v49 = v138;
  uint64_t v114 = v139;
  uint64_t v115 = v137;
  uint64_t v50 = v140;
  uint64_t v113 = v141;
  uint64_t v116 = v142;
  uint64_t v130 = 0x656C746974;
  unint64_t v131 = 0xE500000000000000;
  AnyHashable.init<A>(_:)();
  sub_100169A40(a1, &v133);
  sub_1001658C4((uint64_t)v132);
  if (!v134)
  {
    sub_10018C018(v135);
    sub_10001869C((uint64_t)&v133);
LABEL_25:
    static GKLog.daemon.getter();
    uint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v65 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v65 = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "LeaderboardBeatFriendScoreBulletin: failed to get title or body.", v65, 2u);
      swift_slowDealloc();
    }

    os_log_t v48 = v15;
    goto LABEL_28;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_10018C018(v135);
    goto LABEL_25;
  }
  unint64_t v112 = v42;
  unint64_t v51 = v131;
  uint64_t v110 = v130;
  uint64_t v130 = 2036625250;
  unint64_t v131 = 0xE400000000000000;
  AnyHashable.init<A>(_:)();
  sub_100169A40(a1, &v133);
  sub_1001658C4((uint64_t)v132);
  if (!v134)
  {
    swift_bridgeObjectRelease();
    sub_10018C018(v135);
    sub_10001869C((uint64_t)&v133);
LABEL_24:
    uint64_t v42 = v112;
    goto LABEL_25;
  }
  unint64_t v111 = v51;
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_10018C018(v135);
    goto LABEL_24;
  }
  uint64_t v52 = v131;
  uint64_t v42 = v112;
  if (!v49)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10018C018(v135);
    static GKLog.daemon.getter();
    uint64_t v68 = Logger.logObject.getter();
    os_log_type_t v69 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v68, v69))
    {
      uint64_t v70 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v70 = 0;
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "LeaderboardBeatFriendScoreBulletin: failed to get game bundle identifier.", v70, 2u);
      swift_slowDealloc();
    }

    os_log_t v48 = v31;
    goto LABEL_28;
  }
  uint64_t v53 = v130;
  swift_bridgeObjectRetain();
  if (!v116)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10018C018(v135);
    os_log_t v71 = v118;
    static GKLog.daemon.getter();
    uint64_t v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v72, v73))
    {
      uint64_t v74 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v74 = 0;
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "LeaderboardBeatFriendScoreBulletin: failed to get leaderboard identifier.", v74, 2u);
      swift_slowDealloc();
    }

    os_log_t v48 = v71;
    goto LABEL_28;
  }
  os_log_t v118 = v52;
  swift_bridgeObjectRetain();
  uint64_t v54 = v115;
  v108[2] = v53;
  uint64_t v109 = v50;
  if (v115)
  {
    int64_t v55 = *(void *)(v115 + 16);
    if (v55)
    {
      v108[1] = v43;
      v132[0] = (uint64_t)_swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      sub_100018B68(0, v55, 0);
      uint64_t v56 = (void *)v132[0];
      uint64_t v57 = (uint64_t *)(v54 + 40);
      do
      {
        uint64_t v59 = *(v57 - 1);
        uint64_t v58 = *v57;
        v132[0] = (uint64_t)v56;
        unint64_t v61 = v56[2];
        unint64_t v60 = v56[3];
        swift_bridgeObjectRetain();
        if (v61 >= v60 >> 1)
        {
          sub_100018B68((char *)(v60 > 1), v61 + 1, 1);
          uint64_t v56 = (void *)v132[0];
        }
        v57 += 6;
        v56[2] = v61 + 1;
        uint64_t v62 = &v56[2 * v61];
        v62[4] = v59;
        v62[5] = v58;
        --v55;
      }
      while (v55);
      sub_10018C018(v135);
      swift_bridgeObjectRelease();
      uint64_t v44 = v129;
    }
    else
    {
      sub_10018C018(v135);
      uint64_t v56 = _swiftEmptyArrayStorage;
    }
  }
  else
  {
    sub_10018C018(v135);
    uint64_t v56 = 0;
  }
  uint64_t v76 = v126;
  uint64_t v75 = v127;
  uint64_t v77 = v125;
  uint64_t v78 = v114;
  uint64_t v79 = self;
  unint64_t v80 = v109;
  id v81 = sub_1001CD778(v78, v109, v79);
  if (!v81)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v86 = v117;
    static GKLog.daemon.getter();
    swift_bridgeObjectRetain();
    uint64_t v87 = Logger.logObject.getter();
    os_log_type_t v88 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v87, v88))
    {
      uint64_t v89 = (uint8_t *)swift_slowAlloc();
      v132[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v89 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)&long long v133 = sub_100174CE4(v114, v80, v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v87, v88, "LeaderboardBeatFriendScoreBulletin: No client process found for game bundle identifier: %s.", v89, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v90 = v117;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      uint64_t v90 = v86;
    }
    v112(v90, v44);
    goto LABEL_29;
  }
  Swift::String v82 = v81;
  swift_bridgeObjectRelease();
  unint64_t v83 = v122;
  if (v56)
  {
    if (v56[2])
    {
      uint64_t v84 = v116;
      void *v122 = v113;
      v83[1] = v84;
      void v83[2] = v56;
      uint64_t v85 = (unsigned int *)&enum case for InGameBannerData.BannerType.youBeatFriendScore(_:);
      goto LABEL_49;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v91 = v116;
  *unint64_t v83 = v113;
  v83[1] = v91;
  uint64_t v85 = (unsigned int *)&enum case for InGameBannerData.BannerType.topPercentageOnLeaderboard(_:);
LABEL_49:
  (*(void (**)(void *, void, uint64_t))(v121 + 104))(v83, *v85, v123);
  InGameBannerData.init(type:title:body:image:clipData:)();
  uint64_t v92 = static InGameBannerData.encode(bannerData:)();
  if (v93 >> 60 == 15)
  {
    static GKLog.general.getter();
    uint64_t v94 = Logger.logObject.getter();
    os_log_type_t v95 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v94, v95))
    {
      uint64_t v96 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v96 = 0;
      _os_log_impl((void *)&_mh_execute_header, v94, v95, "LeaderboardBeatFriendScoreBulletin: InGameBannerData could not be encoded", v96, 2u);
      swift_slowDealloc();
    }

    v112((char *)v119, v129);
    (*(void (**)(char *, uint64_t))(v120 + 8))(v76, v75);
    goto LABEL_29;
  }
  unint64_t v97 = v93;
  uint64_t v125 = v92;
  static GKLog.daemon.getter();
  uint64_t v98 = v120;
  uint64_t v99 = v75;
  (*(void (**)(uint64_t, char *, uint64_t))(v120 + 16))(v77, v76, v75);
  uint64_t v100 = v77;
  uint64_t v101 = Logger.logObject.getter();
  os_log_type_t v102 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v101, v102))
  {
    uint64_t v103 = (uint8_t *)swift_slowAlloc();
    uint64_t v121 = swift_slowAlloc();
    v132[0] = v121;
    os_log_t v118 = v101;
    uint64_t v119 = v103;
    *(_DWORD *)uint64_t v103 = 136315138;
    uint64_t v117 = (char *)(v103 + 4);
    InGameBannerData.type.getter();
    uint64_t v104 = String.init<A>(describing:)();
    *(void *)&long long v133 = sub_100174CE4(v104, v105, v132);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v106 = *(void (**)(uint64_t, uint64_t))(v98 + 8);
    v106(v100, v127);
    uint64_t v101 = v118;
    _os_log_impl((void *)&_mh_execute_header, v118, v102, "LeaderboardBeatFriendScoreBulletin: Notifying client with banner %s.", v119, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v99 = v127;
    swift_slowDealloc();
  }
  else
  {
    uint64_t v106 = *(void (**)(uint64_t, uint64_t))(v98 + 8);
    v106(v100, v99);
  }

  v112(v124, v129);
  uint64_t v107 = v125;
  sub_1001CD7C8(v125, v97, v82);
  sub_100169260(v107, v97);

  v106((uint64_t)v126, v99);
  uint64_t v66 = v128;
LABEL_30:
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  ((void (**)(void, Class))v66)[2](v66, isa);

  _Block_release(v66);
}

id sub_1001CD4F0(uint64_t a1)
{
  if (a1)
  {
    v2.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v2.super.Class isa = 0;
  }
  v5.receiver = v1;
  v5.Class super_class = (Class)type metadata accessor for LeaderboardBeatFriendScoreBulletin();
  id v3 = [v5 initWithPushNotification:v2.super.isa];

  if (v3) {
  return v3;
  }
}

id sub_1001CD5E8()
{
  v2.receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for LeaderboardBeatFriendScoreBulletin();
  return [super init];
}

id sub_1001CD640(void *a1)
{
  v5.receiver = v1;
  v5.Class super_class = (Class)type metadata accessor for LeaderboardBeatFriendScoreBulletin();
  id v3 = [super initWithCoder:a1];

  return v3;
}

id sub_1001CD6B8()
{
  v2.receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for LeaderboardBeatFriendScoreBulletin();
  return [super dealloc];
}

uint64_t type metadata accessor for LeaderboardBeatFriendScoreBulletin()
{
  return self;
}

uint64_t sub_1001CD710(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D938(&qword_1003268C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id sub_1001CD778(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [a3 clientForBundleID:v4];

  return v5;
}

void sub_1001CD7C8(uint64_t a1, uint64_t a2, void *a3)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [a3 presentBannerWithNotification:isa];
}

void sub_1001CD820(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static GKLog.general.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v15 = v4;
    uint64_t v12 = a1;
    uint64_t v13 = (uint8_t *)v11;
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v16 = sub_100174CE4(v12, a2, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v15);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  exit(-1);
}

uint64_t type metadata accessor for ProcessExiter()
{
  return self;
}

uint64_t sub_1001CDA7C(uint64_t a1)
{
  sub_100018B2C(a1, v13);
  uint64_t v1 = v13[0];
  uint64_t v12 = v13[1];
  int64_t v2 = v13[3];
  unint64_t v3 = v13[4];
  int64_t v14 = (unint64_t)(v13[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  if (!v3) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v5 = __clz(__rbit64(v3));
  v3 &= v3 - 1;
  unint64_t v6 = v5 | (v2 << 6);
  while (1)
  {
    uint64_t v11 = *(void *)(*(void *)(v1 + 48) + 16 * v6);
    sub_100166A7C();
    swift_bridgeObjectRetain();
    if (StringProtocol.contains<A>(_:)())
    {
      swift_bridgeObjectRelease();
      swift_release();
      return v11;
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (v3) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v7 = v2 + 1;
    if (__OFADD__(v2, 1)) {
      break;
    }
    if (v7 >= v14) {
      goto LABEL_23;
    }
    unint64_t v8 = *(void *)(v12 + 8 * v7);
    int64_t v9 = v2 + 1;
    if (!v8)
    {
      int64_t v9 = v2 + 2;
      if (v2 + 2 >= v14) {
        goto LABEL_23;
      }
      unint64_t v8 = *(void *)(v12 + 8 * v9);
      if (!v8)
      {
        int64_t v9 = v2 + 3;
        if (v2 + 3 >= v14) {
          goto LABEL_23;
        }
        unint64_t v8 = *(void *)(v12 + 8 * v9);
        if (!v8)
        {
          int64_t v9 = v2 + 4;
          if (v2 + 4 >= v14) {
            goto LABEL_23;
          }
          unint64_t v8 = *(void *)(v12 + 8 * v9);
          if (!v8)
          {
            int64_t v9 = v2 + 5;
            if (v2 + 5 >= v14) {
              goto LABEL_23;
            }
            unint64_t v8 = *(void *)(v12 + 8 * v9);
            if (!v8)
            {
              int64_t v10 = v2 + 6;
              while (v10 < v14)
              {
                unint64_t v8 = *(void *)(v12 + 8 * v10++);
                if (v8)
                {
                  int64_t v9 = v10 - 1;
                  goto LABEL_18;
                }
              }
LABEL_23:
              swift_bridgeObjectRelease();
              swift_release();
              return 0;
            }
          }
        }
      }
    }
LABEL_18:
    unint64_t v3 = (v8 - 1) & v8;
    unint64_t v6 = __clz(__rbit64(v8)) + (v9 << 6);
    int64_t v2 = v9;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001CDC80(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = Dictionary.init(dictionaryLiteral:)();
  if (!(a1 >> 62))
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v6) {
      goto LABEL_3;
    }
LABEL_20:
    int64_t v9 = 0;
    goto LABEL_21;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v6 = result;
  if (!result) {
    goto LABEL_20;
  }
LABEL_3:
  if (v6 >= 1)
  {
    unint64_t v39 = a1;
    uint64_t v41 = a2;
    uint64_t v8 = 0;
    int64_t v9 = 0;
    unint64_t v44 = a1 & 0xC000000000000001;
    uint64_t v42 = v6;
    do
    {
      if (v44) {
        id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v10 = *(id *)(a1 + 8 * v8 + 32);
      }
      uint64_t v11 = v10;
      sub_1001CE22C(v10);
      if (v12)
      {
        swift_bridgeObjectRetain();
        uint64_t v13 = swift_bridgeObjectRetain();
        uint64_t v14 = sub_1001CDA7C(v13);
        uint64_t v16 = v15;
        swift_bridgeObjectRelease();
        if (v16)
        {
          sub_100169AA4(v14, v16, v41);
          uint64_t v18 = v17;
          swift_bridgeObjectRelease();
          if (v18)
          {
            swift_isUniquelyReferenced_nonNull_native();
            sub_100169784();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          a1 = v39;
        }
        else
        {

          swift_bridgeObjectRelease();
        }
        uint64_t v6 = v42;
      }
      else
      {
      }
      ++v8;
    }
    while (v6 != v8);
LABEL_21:
    swift_bridgeObjectRelease();
    sub_100163CE4(0, (unint64_t *)&qword_100326320);
    sub_1001CE1D8();
    uint64_t v40 = Dictionary.init(dictionaryLiteral:)();
    if (a3 >> 62) {
      goto LABEL_46;
    }
    uint64_t v19 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v19) {
      goto LABEL_43;
    }
LABEL_23:
    uint64_t v38 = v9;
    unint64_t v20 = 0;
    while (1)
    {
      if ((a3 & 0xC000000000000001) != 0)
      {
        id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v20 >= *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_45;
        }
        id v21 = *(id *)(a3 + 32 + 8 * v20);
      }
      uint64_t v22 = v21;
      if (__OFADD__(v20++, 1))
      {
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        swift_bridgeObjectRetain();
        uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
        if (!v19) {
          goto LABEL_43;
        }
        goto LABEL_23;
      }
      id v24 = [v21 handles:v38];
      uint64_t v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v26 = *(void *)(v25 + 16);
      if (!v26) {
        goto LABEL_40;
      }
      swift_bridgeObjectRetain();
      int64_t v9 = (uint64_t *)(v25 + 40);
      while (!*(void *)(v5 + 16))
      {
LABEL_34:
        v9 += 2;
        if (!--v26)
        {

          swift_bridgeObjectRelease_n();
          goto LABEL_42;
        }
      }
      uint64_t v27 = *(v9 - 1);
      uint64_t v28 = *v9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1000087B0(v27, v28);
      char v30 = v29;
      swift_bridgeObjectRelease();
      if ((v30 & 1) == 0) {
        break;
      }
      swift_bridgeObjectRelease_n();
      if (!*(void *)(v5 + 16) || (unint64_t v31 = sub_1000087B0(v27, v28), (v32 & 1) == 0))
      {
LABEL_40:

        goto LABEL_41;
      }
      uint64_t v33 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v31);
      uint64_t v34 = *v33;
      uint64_t v35 = v33[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      id v36 = v22;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      sub_100169660(v34, v35, v36, isUniquelyReferenced_nonNull_native);

LABEL_41:
      swift_bridgeObjectRelease();
LABEL_42:
      if (v20 == v19)
      {
LABEL_43:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v40;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  __break(1u);
  return result;
}

unint64_t sub_1001CE1D8()
{
  unint64_t result = qword_1003282A0;
  if (!qword_1003282A0)
  {
    sub_100163CE4(255, (unint64_t *)&qword_100326320);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003282A0);
  }
  return result;
}

uint64_t sub_1001CE22C(void *a1)
{
  id v1 = [a1 handle];
  if (!v1) {
    return 0;
  }
  int64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_1001CE294(uint64_t a1, uint64_t a2)
{
  **(void **)(*(void *)(a1 + 64) + 40) = a2;
  return swift_continuation_throwingResume();
}

uint64_t sub_1001CE2B8(uint64_t a1, uint64_t a2)
{
  return sub_1000189E8(a1, a2, &qword_1003282C8);
}

uint64_t sub_1001CE2C4(uint64_t a1)
{
  v2[30] = a1;
  v2[31] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[32] = v3;
  v2[33] = *(void *)(v3 - 8);
  v2[34] = swift_task_alloc();
  v2[35] = swift_task_alloc();
  return _swift_task_switch(sub_1001CE394, 0, 0);
}

uint64_t sub_1001CE394()
{
  uint64_t v1 = (void *)v0[30];
  sub_10000D938(&qword_1003268F0);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_10024F850;
  *(void *)(v2 + 56) = &type metadata for String;
  *(void *)(v2 + 32) = 0xD000000000000018;
  *(void *)(v2 + 40) = 0x80000001002B2EF0;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  v0[36] = isa;
  swift_bridgeObjectRelease();
  sub_1001649A0();
  uint64_t v4 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = swift_task_alloc();
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v6, enum case for DispatchQoS.QoSClass.default(_:), v4);
  uint64_t v7 = static OS_dispatch_queue.global(qos:)();
  v0[37] = v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v4);
  swift_task_dealloc();
  v0[2] = v0;
  v0[7] = v0 + 28;
  v0[3] = sub_1001CE5E4;
  uint64_t v8 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1001CEB7C;
  v0[13] = &unk_1002DF110;
  v0[14] = v8;
  [v1 getValuesForKeys:isa queue:v7 completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1001CE5E4()
{
  sub_100011168();
  uint64_t v1 = *(void *)(v0 + 48);
  *(void *)(v2 + 304) = v1;
  if (v1) {
    uint64_t v3 = sub_1001CE8D8;
  }
  else {
    uint64_t v3 = sub_1001CE6D0;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001CE6D0()
{
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v2 = *(void **)(v0 + 288);

  if (v1)
  {
    *(void *)(v0 + 192) = 0xD000000000000018;
    *(void *)(v0 + 200) = 0x80000001002B2EF0;
    AnyHashable.init<A>(_:)();
    sub_100169A40(v1, (_OWORD *)(v0 + 160));
    swift_bridgeObjectRelease();
    sub_1001658C4(v0 + 120);
    if (*(void *)(v0 + 184))
    {
      sub_10000D938(&qword_100326FC0);
      if (swift_dynamicCast())
      {
        if (*(void *)(*(void *)(v0 + 232) + 16))
        {
          char v3 = sub_1001CEBF4(*(void *)(v0 + 232));
          swift_bridgeObjectRelease();
          goto LABEL_11;
        }
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      sub_10001869C(v0 + 160);
    }
  }
  static GKLog.daemon.getter();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Fetched empty list of trusted image domains. Allowing all.", v6, 2u);
    sub_100010D7C();
  }
  uint64_t v7 = *(void *)(v0 + 280);
  uint64_t v8 = *(void *)(v0 + 256);
  uint64_t v9 = *(void *)(v0 + 264);

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  char v3 = 1;
LABEL_11:
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10(v3 & 1);
}

uint64_t sub_1001CE8D8()
{
  uint64_t v17 = v0;
  uint64_t v1 = (void *)v0[37];
  uint64_t v2 = (void *)v0[36];
  swift_willThrow();

  static GKLog.daemon.getter();
  swift_errorRetain();
  swift_errorRetain();
  char v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v13 = v0[33];
    uint64_t v14 = v0[32];
    uint64_t v15 = v0[34];
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315394;
    v0[27] = sub_100174CE4(0xD000000000000018, 0x80000001002B2EF0, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2112;
    swift_errorRetain();
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
    v0[26] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v7;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to fetch bag values for key: %s, error: %@. Allowing all.", (uint8_t *)v5, 0x16u);
    sub_10000D938(&qword_100326430);
    swift_arrayDestroy();
    sub_100010D7C();
    swift_arrayDestroy();
    sub_100010D7C();
    sub_100010D7C();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v15, v14);
  }
  else
  {
    uint64_t v9 = v0[33];
    uint64_t v8 = v0[34];
    uint64_t v10 = v0[32];
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(uint64_t))v0[1];
  return v11(1);
}

uint64_t sub_1001CEB7C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3) {
    return sub_100018980(v3, (uint64_t)a3);
  }
  if (a2) {
    a2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return sub_1000189E8(v3, a2, &qword_100327990);
}

uint64_t sub_1001CEBF4(uint64_t a1)
{
  sub_1001CF110(v1);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4)
    {
      swift_bridgeObjectRetain();
      uint64_t v5 = v4 - 1;
      uint64_t v6 = (void **)(a1 + 40);
      do
      {
        uint64_t v7 = v5;
        uint64_t v4 = (uint64_t)*(v6 - 1);
        uint64_t v8 = *v6;
        swift_bridgeObjectRetain();
        v9._uint64_t countAndFlagsBits = v4;
        v9._object = v8;
        LOBYTE(v4) = String.hasSuffix(_:)(v9);
        swift_bridgeObjectRelease();
        if (v4) {
          break;
        }
        uint64_t v5 = v7 - 1;
        v6 += 2;
      }
      while (v7);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  return v4 & 1;
}

uint64_t sub_1001CED44(void *a1, void *aBlock, void *a3)
{
  _OWORD v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  a3;
  uint64_t v7 = (void *)swift_task_alloc();
  void v3[5] = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_1001CEE08;
  return sub_1001CE2C4((uint64_t)v6);
}

uint64_t sub_1001CEE08(char a1)
{
  sub_100011168();
  uint64_t v4 = (void (**)(void, void))v3[4];
  uint64_t v5 = (void *)v3[3];
  id v6 = (void *)v3[2];
  uint64_t v9 = *v1;
  swift_task_dealloc();

  v4[2](v4, a1 & 1);
  _Block_release(v4);
  uint64_t v7 = *(uint64_t (**)(void))(v9 + 8);
  return v7();
}

uint64_t sub_1001CEF44()
{
  _Block_release(*(const void **)(v0 + 24));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001CEF8C()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_1001CF040;
  id v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_1003282A8 + dword_1003282A8);
  return v6(v2, v3, v4);
}

uint64_t sub_1001CF040()
{
  sub_100011168();
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1001CF110(void *a1)
{
  id v1 = [a1 host];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void sub_1001CF174(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  sub_100011254();
  uint64_t v8 = v7;
  uint64_t v11 = __chkstk_darwin(v9, v10);
  uint64_t v13 = (char *)v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)v67 - v15;
  if ([a1 _gkHasValidServerURLRequest])
  {
    sub_1001CFC7C();
    uint64_t v17 = sub_1001CF880(a1, a2);
    id v18 = [v3 bag];
    if (v18)
    {
      uint64_t v19 = v18;
      [v17 setBag:v18];
      id v20 = [self shouldCollectMetricsPromiseForContext:v17];
      uint64_t v21 = swift_allocObject();
      *(void *)(v21 + 16) = v17;
      *(void *)(v21 + 24) = v3;
      aBlock[4] = (uint64_t)sub_1001CFCFC;
      aBlock[5] = v21;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1001CFB2C;
      aBlock[3] = (uint64_t)&unk_1002DF150;
      uint64_t v22 = _Block_copy(aBlock);
      uint64_t v23 = v17;
      id v24 = v3;
      swift_release();
      [v20 addSuccessBlock:v22];
      _Block_release(v22);

      return;
    }
    static GKLog.general.getter();
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      unint64_t v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Cannot report session event without a bag.", v44, 2u);
      swift_slowDealloc();
      uint64_t v45 = v17;
    }
    else
    {
      uint64_t v45 = v42;
      uint64_t v42 = v17;
    }

    uint64_t v40 = *(void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v41 = v16;
    goto LABEL_18;
  }
  static GKLog.daemon.getter();
  id v25 = a1;
  uint64_t v26 = Logger.logObject.getter();
  int v27 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v26, (os_log_type_t)v27))
  {
    int v69 = v27;
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    uint64_t v68 = swift_slowAlloc();
    aBlock[0] = v68;
    uint64_t v70 = v28;
    *(_DWORD *)uint64_t v28 = 136315138;
    uint64_t v29 = sub_10000D938(&qword_100327C68);
    v67[4] = v67;
    uint64_t v30 = *(void *)(*(void *)(v29 - 8) + 64);
    __chkstk_darwin(v29 - 8, v31);
    unint64_t v32 = (v30 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v33 = (char *)v67 - v32;
    id v34 = [v25 currentRequest];
    uint64_t v36 = __chkstk_darwin(v34, v35);
    uint64_t v71 = v6;
    if (v36)
    {
      static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v37 = type metadata accessor for URLRequest();
      uint64_t v38 = (char *)v67 - v32;
      uint64_t v39 = 0;
    }
    else
    {
      uint64_t v37 = type metadata accessor for URLRequest();
      uint64_t v38 = (char *)v67 - v32;
      uint64_t v39 = 1;
    }
    sub_10000D97C((uint64_t)v38, v39, 1, v37);
    sub_1001CFC14((uint64_t)v67 - v32, (uint64_t)v67 - v32);
    type metadata accessor for URLRequest();
    if (sub_10000DB14((uint64_t)v67 - v32, 1, v37) == 1)
    {
      sub_10000DB3C((uint64_t)v67 - v32, &qword_100327C68);
    }
    else
    {
      uint64_t v46 = sub_10000D938(&qword_100327E70);
      v67[3] = v67;
      uint64_t v47 = *(void *)(*(void *)(v46 - 8) + 64);
      __chkstk_darwin(v46 - 8, v48);
      unint64_t v49 = (v47 + 15) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v50 = (char *)v67 - v49;
      URLRequest.url.getter();
      uint64_t v51 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v37 - 8) + 8))(v33, v37);
      void v67[2] = v67;
      __chkstk_darwin(v51, v52);
      uint64_t v53 = (char *)v67 - v49;
      sub_10018C260((uint64_t)v67 - v49, (uint64_t)v67 - v49);
      uint64_t v54 = type metadata accessor for URL();
      if (sub_10000DB14((uint64_t)v67 - v49, 1, v54) != 1)
      {
        v67[0] = v67;
        v67[1] = v67;
        sub_100011254();
        uint64_t v59 = v58;
        __chkstk_darwin(v60, v61);
        uint64_t v63 = (char *)v67 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v63, v53, v54);
        uint64_t v56 = URL.absoluteString.getter();
        unint64_t v55 = v64;
        (*(void (**)(char *, uint64_t))(v59 + 8))(v63, v54);
        sub_10000DB3C((uint64_t)v50, &qword_100327E70);
        goto LABEL_20;
      }
      sub_10000DB3C((uint64_t)v67 - v49, &qword_100327E70);
    }
    unint64_t v55 = 0xE300000000000000;
    uint64_t v56 = 7104878;
LABEL_20:
    uint64_t v66 = v70;
    uint64_t v65 = v71;
    void aBlock[6] = sub_100174CE4(v56, v55, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v26, (os_log_type_t)v69, "GKAMPController ignoring request with URL: %s)", v66, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v40 = *(void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v41 = v13;
    uint64_t v57 = v65;
    goto LABEL_21;
  }

  uint64_t v40 = *(void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v41 = v13;
LABEL_18:
  uint64_t v57 = v6;
LABEL_21:
  v40(v41, v57);
}

id sub_1001CF880(void *a1, void *a2)
{
  id v4 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithTask:a1 metrics:a2];

  return v4;
}

void sub_1001CF8DC(void *a1, void *a2)
{
  if ([a1 BOOLValue])
  {
    id v3 = [self loadURLEventPromiseWithContext:a2];
    uint64_t v4 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v4;
    *(void *)(v5 + 24) = a2;
    void v8[4] = sub_1001CFD7C;
    void v8[5] = v5;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 1107296256;
    uint64_t v8[2] = sub_1001CFB2C;
    v8[3] = &unk_1002DF1C8;
    uint64_t v6 = _Block_copy(v8);
    id v7 = a2;
    swift_release();
    [v3 addSuccessBlock:v6];
    _Block_release(v6);
  }
}

void sub_1001CFA18(void *a1, uint64_t a2, void *a3)
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong && sub_1001CFD84(Strong))
  {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [a1 addPropertiesWithDictionary:isa];
  }
  id v7 = [self internalInstanceUsingBag:[a3 bag]];
  swift_unknownObjectRelease();
  [v7 enqueueEvent:a1];
}

void sub_1001CFB30(uint64_t a1, void *a2)
{
  id v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_1001CFC14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D938(&qword_100327C68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001CFC7C()
{
  unint64_t result = qword_1003282D0;
  if (!qword_1003282D0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1003282D0);
  }
  return result;
}

uint64_t sub_1001CFCBC()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1001CFCFC(void *a1)
{
  sub_1001CF8DC(a1, *(void **)(v1 + 16));
}

uint64_t sub_1001CFD04()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001CFD3C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1001CFD7C(void *a1)
{
  sub_1001CFA18(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1001CFD84(void *a1)
{
  id v2 = [a1 metadata];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_1001CFE04()
{
  sub_10000D938(&qword_1003285C8);
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 0;
  off_1003282D8 = (_UNKNOWN *)result;
  return result;
}

uint64_t sub_1001CFE3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  Class ObjectType = (void *)swift_getObjectType();
  type metadata accessor for Logger();
  sub_100011108();
  uint64_t v78 = v11;
  uint64_t v79 = v10;
  __chkstk_darwin(v10, v12);
  sub_100018078();
  uint64_t v81 = v13;
  uint64_t v14 = type metadata accessor for ModelConfiguration.CloudKitDatabase();
  uint64_t v15 = sub_1000170D0(v14);
  __chkstk_darwin(v15, v16);
  sub_100018078();
  uint64_t v83 = v17;
  type metadata accessor for ModelConfiguration();
  sub_100011108();
  uint64_t v88 = v19;
  uint64_t v89 = v18;
  __chkstk_darwin(v18, v20);
  sub_1001D9DC8();
  uint64_t v80 = v21;
  uint64_t v24 = __chkstk_darwin(v22, v23);
  Swift::String v82 = (char *)v77 - v25;
  __chkstk_darwin(v24, v26);
  uint64_t v87 = (char *)v77 - v27;
  uint64_t v28 = self;
  uint64_t v90 = v5;
  swift_retain();
  id v29 = [v28 defaultManager];
  uint64_t v30 = type metadata accessor for URL();
  sub_100011108();
  uint64_t v32 = v31;
  uint64_t v34 = *(void *)(v33 + 64);
  __chkstk_darwin(v35, v36);
  unint64_t v37 = (v34 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v86 = (char *)v77 - v37;
  uint64_t v38 = self;
  id v91 = v29;
  id v39 = sub_1001D8DEC(a1, a2, a3, a4, 0xD000000000000011, 0x80000001002B30C0, (uint64_t)v29, v38);
  uint64_t v40 = sub_10000D938(&qword_100327E70);
  uint64_t v41 = sub_1000170D0(v40);
  __chkstk_darwin(v41, v42);
  sub_10001123C();
  if (!v39)
  {
    sub_100017FD0();
    sub_10000D97C(v64, v65, v66, v30);
    goto LABEL_7;
  }
  __chkstk_darwin(v43, v44);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v45 = *(void (**)(uint64_t, char *, uint64_t))(v32 + 32);
  v45(a4, (char *)v77 - v37, v30);
  sub_10000D97C(a4, 0, 1, v30);
  if (sub_10000DB14(a4, 1, v30) == 1)
  {
LABEL_7:
    swift_release();
    sub_1001D8EB8(a4, &qword_100327E70);
    sub_1001D7588();
    swift_allocError();
    swift_willThrow();

    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return a4;
  }
  uint64_t v46 = (void *)v30;
  uint64_t v47 = v86;
  v45((uint64_t)v86, (char *)a4, (uint64_t)v46);
  sub_1001D05C0();
  __chkstk_darwin(v48, v49);
  Class ObjectType = v46;
  sub_1000182F0();
  v50();
  static ModelConfiguration.CloudKitDatabase.none.getter();
  uint64_t v51 = v87;
  ModelConfiguration.init(_:schema:url:allowsSave:cloudKitDatabase:)();
  v77[0] = swift_getObjectType();
  uint64_t v53 = v88;
  uint64_t v52 = v89;
  uint64_t v54 = *(void *)(v88 + 16);
  uint64_t v83 = v88 + 16;
  v77[1] = v54;
  sub_1000182F0();
  v55();
  uint64_t v56 = v85;
  uint64_t v57 = AppMetadataCache.__allocating_init(configuration:)();
  if (v56)
  {
    uint64_t v85 = v32;
    uint64_t v58 = v81;
    static GKLog.cache.getter();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      uint64_t v61 = (uint8_t *)swift_slowAlloc();
      uint64_t v62 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v61 = 138412290;
      Swift::String v82 = (char *)(v61 + 4);
      swift_errorRetain();
      uint64_t v63 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v92 = v63;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v62 = v63;
      uint64_t v58 = v81;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "Failed to construct model container with error, deleting files: %@", v61, 0xCu);
      sub_10000D938(&qword_100326430);
      swift_arrayDestroy();
      sub_100010D7C();
      sub_100010D7C();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v69 = v78;
    uint64_t v68 = v79;

    uint64_t v70 = (*(uint64_t (**)(uint64_t, uint64_t))(v69 + 8))(v58, v68);
    Class ObjectType = v77;
    uint64_t v72 = __chkstk_darwin(v70, v71);
    __chkstk_darwin(v72, v73);
    ModelConfiguration.url.getter();
    URL.deletingLastPathComponent()();
    uint64_t v74 = *(void (**)(void))(v85 + 8);
    sub_100017428();
    v74();
    sub_100017B04();
    sub_1001AD618();
    swift_errorRelease();
    sub_100017428();
    v74();
    swift_release();
    sub_1000182F0();
    v75();
    a4 = AppMetadataCache.__allocating_init(configuration:)();

    sub_100011C3C();
    v76();
    sub_100017428();
    v74();
  }
  else
  {
    a4 = v57;
    swift_release();

    (*(void (**)(char *, uint64_t))(v53 + 8))(v51, v52);
    (*(void (**)(char *, void *))(v32 + 8))(v47, ObjectType);
  }
  swift_deallocPartialClassInstance();
  return a4;
}

void sub_1001D05C0()
{
  if (qword_100325EE8 != -1) {
    swift_once();
  }
  uint64_t v0 = *(uint64_t (**)(uint64_t))(*(void *)off_1003282D8 + 136);
  uint64_t v1 = swift_retain();
  id v2 = (atomic_uchar *)v0(v1);
  char v3 = 0;
  atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v3, 1u, memory_order_relaxed, memory_order_relaxed);
  LODWORD(v0) = v3 == 0;
  swift_release();
  if (v0 == 1)
  {
    sub_1001D0964();
    sub_1001D0BD0();
  }
}

uint64_t AppMetadataCache.__allocating_init(configuration:)()
{
  type metadata accessor for ModelContainer();
  sub_10000D938(&qword_100326FB8);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_10024F850;
  uint64_t v2 = type metadata accessor for AppMetadataSchemaV1.AppMetadata(0);
  unint64_t v3 = sub_1001D3A90((uint64_t)&unk_1003282E0);
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v3;
  sub_1001D0868();
  sub_10000D938(&qword_1003270F0);
  type metadata accessor for ModelConfiguration();
  sub_100011108();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10024F850;
  sub_1000182F0();
  v4();
  uint64_t v5 = ModelContainer.__allocating_init(for:migrationPlan:configurations:)();
  if (v0)
  {
    uint64_t v6 = sub_1001D9DB0();
    return v7(v6);
  }
  else
  {
    uint64_t v9 = v5;
    type metadata accessor for AppMetadataCache();
    swift_allocObject();
    id v10 = AppMetadataCache.init(modelContainer:)(v9);
    uint64_t v11 = sub_1001D9DB0();
    v12(v11);
    return (uint64_t)v10;
  }
}

uint64_t type metadata accessor for AppMetadataSchemaV1.AppMetadata(uint64_t a1)
{
  return sub_1001D762C(a1, qword_100328388);
}

unint64_t sub_1001D0868()
{
  unint64_t result = qword_1003282E8;
  if (!qword_1003282E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003282E8);
  }
  return result;
}

void sub_1001D0964()
{
  sub_100011BD4();
  v25[3] = v1;
  uint64_t v2 = type metadata accessor for ModelConfiguration.CloudKitDatabase();
  uint64_t v3 = sub_1000170D0(v2);
  __chkstk_darwin(v3, v4);
  sub_10001123C();
  type metadata accessor for ModelConfiguration();
  sub_100011108();
  v25[1] = v6;
  v25[2] = v5;
  __chkstk_darwin(v5, v7);
  sub_1000110F8();
  type metadata accessor for ModelConfiguration.GroupContainer();
  sub_100011108();
  uint64_t v10 = __chkstk_darwin(v8, v9);
  __chkstk_darwin(v10, v11);
  static ModelConfiguration.GroupContainer.identifier(_:)();
  sub_1000182F0();
  v12();
  static ModelConfiguration.CloudKitDatabase.none.getter();
  ModelConfiguration.init(_:schema:isStoredInMemoryOnly:allowsSave:groupContainer:cloudKitDatabase:)();
  uint64_t v13 = type metadata accessor for URL();
  sub_100011108();
  uint64_t v15 = v14;
  __chkstk_darwin(v16, v17);
  sub_10001858C();
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (char *)v25 - v20;
  ModelConfiguration.url.getter();
  URL.deletingLastPathComponent()();
  uint64_t v22 = *(void (**)(char *, uint64_t))(v15 + 8);
  v22(v21, v13);
  sub_100017B04();
  sub_1001AD618();
  v22(v0, v13);
  sub_100011C3C();
  v23();
  sub_100018230();
  v24();
  sub_100010DB0();
}

void sub_1001D0BD0()
{
  sub_100011BD4();
  uint64_t v1 = v0;
  v45[2] = v2;
  uint64_t v3 = type metadata accessor for Logger();
  sub_100011108();
  uint64_t v5 = v4;
  __chkstk_darwin(v6, v7);
  sub_10001858C();
  uint64_t v10 = __chkstk_darwin(v8, v9);
  uint64_t v12 = (char *)v45 - v11;
  __chkstk_darwin(v10, v13);
  type metadata accessor for NSPersistentStore.StoreType();
  sub_100011108();
  __chkstk_darwin(v14, v15);
  sub_1000110F8();
  sub_100163CE4(0, (unint64_t *)&qword_100327878);
  static NSPersistentStore.StoreType.sqlite.getter();
  v45[1] = v1;
  uint64_t v16 = static NSPersistentStoreCoordinator.metadataForPersistentStore(type:at:options:)();
  sub_100010FDC();
  v17();
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1001699DC(v18, v19, v16, &v46);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v47)
  {
    int v20 = swift_dynamicCast();
    if (v20) {
      uint64_t v21 = v45[3];
    }
    else {
      uint64_t v21 = 0;
    }
    if (v20) {
      uint64_t v22 = v45[4];
    }
    else {
      uint64_t v22 = 0;
    }
  }
  else
  {
    sub_1001D8EB8((uint64_t)&v46, &qword_100326FD0);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
  }
  sub_100163CE4(0, &qword_1003285C0);
  sub_10000D938(&qword_100326FB8);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_10024F850;
  uint64_t v24 = type metadata accessor for AppMetadataSchemaV1.AppMetadata(0);
  unint64_t v25 = sub_1001D3A90((uint64_t)&unk_1003282E0);
  *(void *)(v23 + 32) = v24;
  *(void *)(v23 + 40) = v25;
  id v26 = [objc_allocWithZone((Class)NSManagedObjectModel) init];
  uint64_t v27 = (void *)static NSManagedObjectModel.makeManagedObjectModel(for:mergedWith:)();
  swift_bridgeObjectRelease();

  if (!v27) {
    goto LABEL_22;
  }
  id v28 = [v27 versionChecksum];
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v31 = v30;

  if (!v22 || !v31) {
    goto LABEL_22;
  }
  if (v21 == v29 && v22 == v31)
  {
    swift_bridgeObjectRelease();
LABEL_22:
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  uint64_t v33 = (uint8_t *)_stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v33 & 1) == 0)
  {
    static GKLog.cache.getter();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Deleting previous app metadata cache since it differs from the current schema.", v33, 2u);
      sub_100010D7C();
    }

    sub_100018230();
    v36();
    uint64_t v37 = type metadata accessor for URL();
    sub_100011108();
    uint64_t v39 = v38;
    __chkstk_darwin(v40, v41);
    sub_100017770();
    sub_1001D9D54();

    (*(void (**)(uint8_t *, uint64_t))(v39 + 8))(v33, v37);
    goto LABEL_26;
  }
LABEL_23:
  static GKLog.cache.getter();
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v44 = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Will not delete previously loaded app metadata cache", v44, 2u);
    sub_100010D7C();
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v3);
LABEL_26:
  sub_100010DB0();
}

uint64_t sub_1001D123C()
{
  sub_10000D938(&qword_100326FB8);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10024F850;
  uint64_t v1 = type metadata accessor for AppMetadataSchemaV1.AppMetadata(0);
  unint64_t v2 = sub_1001D3A90((uint64_t)&unk_1003282E0);
  *(void *)(v0 + 32) = v1;
  *(void *)(v0 + 40) = v2;
  return v0;
}

char *AppMetadataCache.fetch(ids:type:ttl:)(uint64_t a1, int a2)
{
  sub_10000D938(&qword_1003282F0);
  sub_100011108();
  v47[3] = v6;
  v47[4] = v5;
  __chkstk_darwin(v5, v7);
  sub_100010E18();
  if (qword_100325EE0 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_10000D938(&qword_1003282F8);
  v47[2] = v47;
  uint64_t v9 = sub_1000170D0(v8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9, v12);
  uint64_t v13 = sub_10000D938(&qword_100328300);
  sub_100017FD0();
  sub_10000D97C(v14, v15, v16, v13);
  uint64_t v17 = type metadata accessor for AppMetadataSchemaV1.AppMetadata(0);
  sub_1001D3A90((uint64_t)&unk_1003282E0);
  uint64_t v18 = FetchDescriptor.init(predicate:sortBy:)();
  uint64_t v20 = __chkstk_darwin(v18, v19);
  __chkstk_darwin(v20, v21);
  v47[-2] = a1;
  int v51 = a2;
  uint64_t v56 = (void *)v17;
  Predicate.init(_:)();
  sub_10000D97C((uint64_t)v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), 0, 1, v13);
  FetchDescriptor.predicate.setter();
  uint64_t v22 = (void *)type metadata accessor for AppMetadataCache();
  sub_1001D3A90((uint64_t)&unk_100328308);
  ModelActor.modelContext.getter();
  uint64_t v23 = v55;
  uint64_t v24 = dispatch thunk of ModelContext.fetch<A>(_:)();
  if (v23)
  {
    sub_100011C3C();
    v25();
    swift_release();
    return (char *)v22;
  }
  unint64_t v26 = v24;
  swift_release();
  if (v26 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v27) {
      goto LABEL_7;
    }
LABEL_24:
    swift_bridgeObjectRelease();
    uint64_t v22 = _swiftEmptyArrayStorage;
LABEL_25:
    sub_100011C3C();
    v46();
    return (char *)v22;
  }
  uint64_t v27 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v27) {
    goto LABEL_24;
  }
LABEL_7:
  uint64_t v56 = _swiftEmptyArrayStorage;
  unint64_t result = sub_1001772DC(0, v27 & ~(v27 >> 63), 0);
  if ((v27 & 0x8000000000000000) == 0)
  {
    v47[0] = 0;
    v47[1] = v2;
    uint64_t v29 = 0;
    unint64_t v49 = v26;
    unint64_t v50 = v26 & 0xC000000000000001;
    uint64_t v48 = v27;
    while (1)
    {
      if (v50) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      uint64_t v22 = (void *)type metadata accessor for Date();
      unint64_t v55 = v47;
      sub_100011108();
      uint64_t v31 = v30;
      uint64_t v34 = __chkstk_darwin(v32, v33);
      __chkstk_darwin(v34, v35);
      Date.init()();
      Date.addingTimeInterval(_:)();
      uint64_t v36 = *(void (**)(void))(v31 + 8);
      sub_100010EDC();
      v36();
      if (v51)
      {
        uint64_t v37 = sub_1001D1910();
        if (!v38)
        {
LABEL_22:
          sub_1001D7588();
          swift_allocError();
          swift_willThrow();
          sub_100010EDC();
          v36();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          sub_100011C3C();
          v45();
          return (char *)v22;
        }
      }
      else
      {
        uint64_t v37 = sub_1001D1C50();
        if (!v38) {
          goto LABEL_22;
        }
      }
      uint64_t v53 = v38;
      uint64_t v54 = v37;
      id v52 = sub_1001D205C();
      __chkstk_darwin(v52, v39);
      sub_1001D23A4();
      uint64_t v40 = Date.compare(_:)();
      sub_100010EDC();
      v36();
      sub_100010EDC();
      v36();
      swift_release();
      uint64_t v22 = v56;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1001772DC(0, v22[2] + 1, 1);
        uint64_t v22 = v56;
      }
      unint64_t v42 = v22[2];
      unint64_t v41 = v22[3];
      if (v42 >= v41 >> 1)
      {
        sub_1001772DC((char *)(v41 > 1), v42 + 1, 1);
        uint64_t v22 = v56;
      }
      ++v29;
      _OWORD v22[2] = v42 + 1;
      os_log_type_t v43 = &v22[4 * v42];
      uint64_t v44 = v53;
      void v43[4] = v54;
      uint64_t v43[5] = v44;
      v43[6] = v52;
      *((unsigned char *)v43 + 56) = v40 == -1;
      if (v48 == v29)
      {
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1001D1910()
{
  return sub_1001D1C5C();
}

void sub_1001D191C()
{
  sub_100011BD4();
  uint64_t v13 = v0;
  sub_10000D938(&qword_1003285D0);
  sub_100011108();
  __chkstk_darwin(v1, v2);
  sub_10001123C();
  sub_10000D938(&qword_1003285D8);
  sub_100011108();
  __chkstk_darwin(v3, v4);
  sub_100011CB4();
  sub_10000D938(&qword_1003285E0);
  sub_100011108();
  __chkstk_darwin(v5, v6);
  sub_1000110F8();
  sub_1001D931C((uint64_t)&unk_1003285E8);
  static PredicateExpressions.build_Arg<A>(_:)();
  swift_getKeyPath();
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)();
  swift_release();
  sub_100010FDC();
  v7();
  sub_10000D938(&qword_1003285F0);
  sub_1001D931C((uint64_t)&unk_1003285F8);
  sub_1001D931C((uint64_t)&unk_100328600);
  static PredicateExpressions.build_flatMap<A, B, C, D>(_:_:)();
  sub_100018230();
  v8();
  sub_10000D938(&qword_100328608);
  sub_100011108();
  __chkstk_darwin(v9, v10);
  sub_100010E18();
  static PredicateExpressions.build_Arg<A>(_:)();
  v13[3] = sub_10000D938(&qword_100328610);
  void v13[4] = sub_1001D8FFC();
  sub_100171DD8(v13);
  sub_1001D931C((uint64_t)&unk_100328680);
  sub_1001D931C((uint64_t)&unk_100328688);
  static PredicateExpressions.build_NilCoalesce<A, B>(lhs:rhs:)();
  sub_100018230();
  v11();
  sub_100011C3C();
  v12();
  sub_100010DB0();
}

uint64_t sub_1001D1C50()
{
  return sub_1001D1C5C();
}

uint64_t sub_1001D1C5C()
{
  swift_getKeyPath();
  sub_1001D3A90((uint64_t)&unk_100328518);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_1001D3A90((uint64_t)&unk_1003282E0);
  sub_1001D93B0((uint64_t)&unk_1003286A8);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  return v0;
}

uint64_t sub_1001D1D90()
{
  return sub_1001D1DE8();
}

uint64_t sub_1001D1DE8()
{
  return swift_bridgeObjectRelease();
}

void sub_1001D1EC0()
{
  sub_100011BD4();
  uint64_t v2 = sub_10000D938(&qword_100328648);
  sub_100011108();
  uint64_t v4 = v3;
  __chkstk_darwin(v5, v6);
  sub_10001123C();
  sub_10000D938(&qword_100328658);
  static PredicateExpressions.build_Arg<A>(_:)();
  uint64_t v7 = sub_10000D938(&qword_100328670);
  sub_100011108();
  uint64_t v9 = v8;
  __chkstk_darwin(v10, v11);
  sub_100011CB4();
  sub_1001D931C((uint64_t)&unk_100328690);
  static PredicateExpressions.build_Arg<A>(_:)();
  sub_1001D931C((uint64_t)&unk_100328698);
  sub_1001D935C();
  static PredicateExpressions.build_contains<A, B>(_:_:)();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v1, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0, v2);
  sub_100010DB0();
}

id sub_1001D205C()
{
  uint64_t v0 = sub_10000D938(&qword_100328318);
  __chkstk_darwin(v0 - 8, v1);
  uint64_t v3 = &v40[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = (int *)type metadata accessor for AppMetadataSchemaV1.AppMetadata.Attributes(0);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = &v40[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1001D6044();
  if (sub_10000DB14((uint64_t)v3, 1, (uint64_t)v4) == 1)
  {
    sub_1001D8EB8((uint64_t)v3, &qword_100328318);
    return 0;
  }
  sub_1001D940C((uint64_t)v3, (uint64_t)v7);
  uint64_t v8 = sub_1001D1910();
  if (!v9)
  {
    sub_1001D8C58((uint64_t)v7);
    return 0;
  }
  uint64_t v10 = (uint64_t *)&v7[v4[13]];
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = v10[5];
  uint64_t v46 = v10[4];
  uint64_t v47 = v11;
  uint64_t v14 = (void *)v10[6];
  uint64_t v15 = v10[7];
  uint64_t v16 = v10[9];
  uint64_t v44 = v10[8];
  uint64_t v45 = v14;
  uint64_t v17 = v10[10];
  uint64_t v18 = v10[11];
  uint64_t v19 = v10[13];
  uint64_t v42 = v10[12];
  os_log_type_t v43 = (unsigned char *)v17;
  uint64_t v48 = v9;
  uint64_t v49 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Class isa = Double._bridgeToObjectiveC()().super.super.isa;
  Class v21 = Double._bridgeToObjectiveC()().super.super.isa;
  id v22 = objc_allocWithZone((Class)GKArtworkMetadata);
  id v23 = sub_10016FDCC(v47, v12, isa, v21, v46, v13, (uint64_t)v45, v15, v44, v16, (uint64_t)v43, v18, v42, v19);
  uint64_t v24 = *((void *)v7 + 1);
  uint64_t v44 = *(void *)v7;
  uint64_t v45 = v23;
  uint64_t v25 = *((void *)v7 + 2);
  uint64_t v26 = *((void *)v7 + 3);
  uint64_t v27 = *((void *)v7 + 5);
  uint64_t v46 = *((void *)v7 + 4);
  uint64_t v47 = v25;
  LODWORD(v25) = v7[48];
  int v41 = v7[49];
  LODWORD(v42) = v25;
  LOBYTE(v16) = v7[50];
  uint64_t v28 = (uint64_t)&v7[v4[11]];
  uint64_t v29 = *((void *)v7 + 7);
  uint64_t v30 = sub_10000D938(&qword_1003261C8);
  os_log_type_t v43 = v40;
  __chkstk_darwin(v30 - 8, v31);
  uint64_t v33 = &v40[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1001D9470(v28, (uint64_t)v33, &qword_1003261C8);
  uint64_t v34 = (uint64_t *)&v7[v4[12]];
  uint64_t v36 = *v34;
  uint64_t v35 = v34[1];
  objc_allocWithZone((Class)GKAppMetadata);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  BYTE2(v39) = v16;
  BYTE1(v39) = v41;
  LOBYTE(v39) = v42;
  id v37 = sub_1001D73A0(v44, v24, v49, v48, v47, v26, v46, v27, v45, v39, v29, (uint64_t)v33, v36, v35);
  sub_1001D8C58((uint64_t)v7);
  return v37;
}

uint64_t sub_1001D23A4()
{
  return swift_release();
}

uint64_t AppMetadataCache.insert(metadatas:lastModifiedDate:)(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  sub_100011108();
  uint64_t v6 = v5;
  __chkstk_darwin(v7, v8);
  sub_1001D9D88();
  swift_bridgeObjectRetain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    id v23 = v11;
    sub_100163CE4(0, &qword_100326450);
    swift_bridgeObjectRetain();
    uint64_t v12 = Array.description.getter();
    unint64_t v14 = v13;
    swift_bridgeObjectRelease();
    uint64_t v15 = sub_100174CE4(v12, v14, &v25);
    sub_100018170(v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Inserting valid metadatas: %s", v23, 0xCu);
    swift_arrayDestroy();
    sub_100010D7C();
    sub_100010D7C();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v2, v4);
  if (!(a1 >> 62))
  {
    uint64_t v16 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v16) {
      goto LABEL_6;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    type metadata accessor for AppMetadataCache();
    sub_1001D3A90((uint64_t)&unk_100328308);
    ModelActor.modelContext.getter();
    dispatch thunk of ModelContext.save()();
    return swift_release();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v16 = result;
  if (!result) {
    goto LABEL_12;
  }
LABEL_6:
  if (v16 >= 1)
  {
    uint64_t v18 = 0;
    unint64_t v19 = a1 & 0xC000000000000001;
    unint64_t v20 = a1;
    do
    {
      if (v19) {
        id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v21 = *(id *)(a1 + 8 * v18 + 32);
      }
      id v22 = v21;
      ++v18;
      type metadata accessor for AppMetadataCache();
      sub_1001D3A90((uint64_t)&unk_100328308);
      ModelActor.modelContext.getter();
      sub_1001D2880(a2);
      type metadata accessor for AppMetadataSchemaV1.AppMetadata(0);
      sub_1001D3A90((uint64_t)&unk_1003282E0);
      dispatch thunk of ModelContext.insert<A>(_:)();
      swift_release();
      swift_release();

      a1 = v20;
    }
    while (v16 != v18);
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

void *sub_1001D2880(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v102 = a1;
  uint64_t v3 = sub_10000D938(&qword_100328318);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v103 = (uint64_t)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = type metadata accessor for AppMetadataSchemaV1.AppMetadata.Attributes(0);
  __chkstk_darwin(v101, v6);
  uint64_t v8 = (char *)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [v1 artwork];
  id v10 = [v9 templateURL];

  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v99 = v12;
  uint64_t v100 = v11;

  id v13 = [v2 artwork];
  id v14 = [v13 width];

  [v14 doubleValue];
  uint64_t v16 = v15;

  id v17 = [v2 artwork];
  id v18 = [v17 height];

  [v18 doubleValue];
  uint64_t v20 = v19;

  uint64_t v21 = sub_1001D8F10([v2 artwork], (SEL *)&selRef_textColor1);
  uint64_t v97 = v22;
  uint64_t v98 = v21;
  uint64_t v23 = sub_1001D8F10([v2 artwork], (SEL *)&selRef_textColor2);
  uint64_t v95 = v24;
  uint64_t v96 = v23;
  uint64_t v25 = sub_1001D8F10([v2 artwork], (SEL *)&selRef_textColor3);
  uint64_t v93 = v26;
  uint64_t v94 = v25;
  uint64_t v27 = sub_1001D8F10([v2 artwork], (SEL *)&selRef_textColor4);
  uint64_t v91 = v28;
  uint64_t v92 = v27;
  uint64_t v29 = sub_1001D8F10([v2 artwork], (SEL *)&selRef_backgroundColor);
  uint64_t v89 = v30;
  uint64_t v90 = v29;
  id v31 = [v2 bundleID];
  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v87 = v33;
  uint64_t v88 = v32;

  id v34 = [v2 name];
  uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v85 = v36;
  uint64_t v86 = v35;

  id v37 = [v2 shortName];
  uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v83 = v38;

  unsigned __int8 v39 = [v2 supportsGameCenter];
  unsigned __int8 v40 = [v2 supportsArcade];
  unsigned __int8 v41 = [v2 supportsGameController];
  id v42 = [v2 deviceFamilies];
  uint64_t v43 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v44 = [v2 latestVersionReleaseDate];
  uint64_t v45 = sub_10000D938(&qword_1003261C8);
  __chkstk_darwin(v45 - 8, v46);
  uint64_t v48 = (char *)&v83 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v44)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v49 = type metadata accessor for Date();
    uint64_t v50 = (uint64_t)v48;
    uint64_t v51 = 0;
  }
  else
  {
    uint64_t v49 = type metadata accessor for Date();
    uint64_t v50 = (uint64_t)v48;
    uint64_t v51 = 1;
  }
  sub_10000D97C(v50, v51, 1, v49);
  uint64_t v52 = sub_1001D8F7C(v2);
  uint64_t v54 = v53;
  uint64_t v55 = v87;
  *(void *)uint64_t v8 = v88;
  *((void *)v8 + 1) = v55;
  uint64_t v56 = v85;
  *((void *)v8 + 2) = v86;
  *((void *)v8 + 3) = v56;
  uint64_t v57 = v83;
  *((void *)v8 + 4) = v84;
  *((void *)v8 + 5) = v57;
  v8[48] = v39;
  v8[49] = v40;
  v8[50] = v41;
  *((void *)v8 + 7) = v43;
  uint64_t v58 = v101;
  sub_1001D8B40((uint64_t)v48, (uint64_t)&v8[*(int *)(v101 + 44)]);
  uint64_t v59 = (uint64_t *)&v8[*(int *)(v58 + 48)];
  uint64_t *v59 = v52;
  v59[1] = v54;
  os_log_type_t v60 = &v8[*(int *)(v58 + 52)];
  uint64_t v61 = v99;
  *(void *)os_log_type_t v60 = v100;
  *((void *)v60 + 1) = v61;
  *((void *)v60 + 2) = v16;
  *((void *)v60 + 3) = v20;
  uint64_t v62 = v97;
  *((void *)v60 + 4) = v98;
  *((void *)v60 + 5) = v62;
  uint64_t v63 = v95;
  *((void *)v60 + 6) = v96;
  *((void *)v60 + 7) = v63;
  uint64_t v64 = v93;
  *((void *)v60 + 8) = v94;
  *((void *)v60 + 9) = v64;
  uint64_t v65 = v91;
  *((void *)v60 + 10) = v92;
  *((void *)v60 + 11) = v65;
  uint64_t v66 = v89;
  *((void *)v60 + 12) = v90;
  *((void *)v60 + 13) = v66;
  id v67 = [v2 adamID];
  uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v70 = v69;

  id v71 = [v2 bundleID];
  uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v74 = v73;

  uint64_t v75 = v103;
  sub_1001D8BF4((uint64_t)v8, v103);
  sub_10000D97C(v75, 0, 1, v58);
  uint64_t v76 = type metadata accessor for Date();
  __chkstk_darwin(v76, v77);
  uint64_t v79 = (char *)&v83 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v80 + 16))(v79, v102, v49);
  type metadata accessor for AppMetadataSchemaV1.AppMetadata(0);
  swift_allocObject();
  uint64_t v81 = sub_1001D63E8(v68, v70, v72, v74, v75, (uint64_t)v79);
  sub_1001D8C58((uint64_t)v8);
  return v81;
}

uint64_t AppMetadataCache.insert(invalidIDs:type:lastModifiedDate:)(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v51 = a3;
  LODWORD(v5) = a2;
  uint64_t v7 = sub_10000D938(&qword_100328318);
  uint64_t v8 = sub_1000170D0(v7);
  __chkstk_darwin(v8, v9);
  sub_1001D9DC8();
  uint64_t v50 = v10;
  __chkstk_darwin(v11, v12);
  uint64_t v52 = (uint64_t)&v45 - v13;
  uint64_t v14 = type metadata accessor for Logger();
  sub_100011108();
  uint64_t v16 = v15;
  __chkstk_darwin(v17, v18);
  sub_1001D9D88();
  swift_bridgeObjectRetain_n();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  BOOL v21 = os_log_type_enabled(v19, v20);
  uint64_t v47 = v4;
  if (v21)
  {
    int v49 = v5;
    uint64_t v22 = v16;
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v46 = swift_slowAlloc();
    uint64_t v53 = v46;
    *(_DWORD *)uint64_t v23 = 136315138;
    uint64_t v45 = v23 + 4;
    swift_bridgeObjectRetain();
    uint64_t v24 = Array.description.getter();
    uint64_t v48 = v14;
    uint64_t v25 = v24;
    unint64_t v5 = v26;
    swift_bridgeObjectRelease();
    uint64_t v27 = sub_100174CE4(v25, v5, &v53);
    sub_100018170(v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    LOBYTE(v5) = v49;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Inserting invalid adamIDs: %s", v23, 0xCu);
    swift_arrayDestroy();
    sub_100010D7C();
    sub_100010D7C();

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v3, v48);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v3, v14);
  }
  uint64_t v28 = *(void *)(a1 + 16);
  if (v28)
  {
    int v49 = v5 & 1;
    uint64_t v48 = type metadata accessor for AppMetadataSchemaV1.AppMetadata.Attributes(0);
    swift_bridgeObjectRetain();
    uint64_t v46 = a1;
    uint64_t v29 = (uint64_t *)(a1 + 40);
    uint64_t v30 = v52;
    do
    {
      uint64_t v31 = *(v29 - 1);
      uint64_t v32 = *v29;
      sub_100017FD0();
      sub_10000D97C(v33, v34, v35, v48);
      uint64_t v36 = qword_100325EE0;
      swift_bridgeObjectRetain();
      if (v36 != -1) {
        swift_once();
      }
      v29 += 2;
      uint64_t v37 = v30;
      uint64_t v38 = v50;
      sub_1001D9470(v37, v50, &qword_100328318);
      type metadata accessor for Date();
      sub_100011108();
      __chkstk_darwin(v39, v40);
      id v42 = (char *)&v45 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, uint64_t))(v43 + 16))(v42, v51);
      type metadata accessor for AppMetadataSchemaV1.AppMetadata(0);
      swift_allocObject();
      sub_1001D66E0(v31, v32, v49, v38, (uint64_t)v42);
      uint64_t v30 = v52;
      sub_1001D8EB8(v52, &qword_100328318);
      type metadata accessor for AppMetadataCache();
      sub_1001D3A90((uint64_t)&unk_100328308);
      ModelActor.modelContext.getter();
      sub_1001D3A90((uint64_t)&unk_1003282E0);
      dispatch thunk of ModelContext.insert<A>(_:)();
      swift_release();
      swift_release();
      --v28;
    }
    while (v28);
    swift_bridgeObjectRelease();
  }
  type metadata accessor for AppMetadataCache();
  sub_1001D3A90((uint64_t)&unk_100328308);
  ModelActor.modelContext.getter();
  dispatch thunk of ModelContext.save()();
  return swift_release();
}

uint64_t AppMetadataCache.deleteAll()()
{
  *(void *)(v1 + 16) = v0;
  *(void *)(v1 + 24) = type metadata accessor for AppMetadataCache();
  sub_1001D3A90((uint64_t)&unk_100328328);
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1001D3458, v3, v2);
}

uint64_t sub_1001D3458()
{
  sub_1001D3A90((uint64_t)&unk_100328308);
  ModelActor.modelContext.getter();
  if (qword_100325EE0 != -1) {
    swift_once();
  }
  type metadata accessor for AppMetadataSchemaV1.AppMetadata(0);
  uint64_t v1 = sub_10000D938(&qword_1003282F8);
  sub_1000170D0(v1);
  uint64_t v2 = swift_task_alloc();
  sub_10000D938(&qword_100328300);
  sub_100017FD0();
  sub_10000D97C(v3, v4, v5, v6);
  sub_1001D3A90((uint64_t)&unk_1003282E0);
  dispatch thunk of ModelContext.delete<A>(model:where:includeSubclasses:)();
  sub_1001D8EB8(v2, &qword_1003282F8);
  swift_release();
  ModelActor.modelContext.getter();
  dispatch thunk of ModelContext.save()();
  swift_release();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_1001D36C4(const void *a1, uint64_t a2)
{
  _DWORD v2[2] = a2;
  v2[3] = _Block_copy(a1);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[4] = v3;
  void *v3 = v2;
  v3[1] = sub_1001D376C;
  return AppMetadataCache.deleteAll()();
}

uint64_t sub_1001D376C()
{
  uint64_t v2 = v0;
  uint64_t v4 = *v1;
  uint64_t v3 = *v1;
  uint64_t v5 = *v1;
  swift_task_dealloc();
  swift_release();
  uint64_t v6 = *(void *)(v3 + 24);
  if (v2)
  {
    uint64_t v7 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);
  }
  else
  {
    (*(void (**)(uint64_t, void))(v6 + 16))(v6, 0);
  }
  _Block_release(*(const void **)(v4 + 24));
  uint64_t v8 = *(uint64_t (**)(void))(v5 + 8);
  return v8();
}

id AppMetadataCache.__allocating_init(modelContainer:)(uint64_t a1)
{
  return AppMetadataCache.init(modelContainer:)(a1);
}

uint64_t type metadata accessor for AppMetadataCache()
{
  return self;
}

id AppMetadataCache.init(modelContainer:)(uint64_t a1)
{
  uint64_t v2 = v1;
  type metadata accessor for ModelContext();
  swift_allocObject();
  swift_retain();
  swift_retain();
  ModelContext.init(_:)();
  type metadata accessor for DefaultSerialModelExecutor();
  swift_allocObject();
  uint64_t v4 = DefaultSerialModelExecutor.init(modelContext:)();
  unint64_t v5 = sub_1001D3A90((uint64_t)&unk_1003270F8);
  _DWORD v2[2] = v4;
  v2[3] = v5;
  v2[4] = a1;
  swift_retain();
  swift_release();
  v8.receiver = v2;
  v8.Class super_class = (Class)type metadata accessor for AppMetadataCache();
  id v6 = [super init];
  swift_release();
  return v6;
}

void sub_1001D3A58()
{
}

unint64_t sub_1001D3A90(uint64_t a1)
{
  unint64_t result = sub_10001843C(a1);
  if (!result)
  {
    v4(v3);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

void AppMetadataCache.init()()
{
}

uint64_t AppMetadataCache.deinit()
{
  swift_unknownObjectRelease();
  swift_release();
  return v0;
}

uint64_t AppMetadataCache.__deallocating_deinit()
{
  AppMetadataCache.deinit();

  return _swift_deallocClassInstance(v0, 40, 7);
}

uint64_t sub_1001D3B70()
{
  uint64_t v0 = type metadata accessor for AppMetadataCache();
  unint64_t v1 = sub_1001D3A90((uint64_t)&unk_100328308);

  return ModelActor.unownedExecutor.getter(v0, v1);
}

char *sub_1001D3BE0(uint64_t a1, char a2)
{
  return AppMetadataCache.fetch(ids:type:ttl:)(a1, a2 & 1);
}

uint64_t sub_1001D3BFC(unint64_t a1, uint64_t a2)
{
  return AppMetadataCache.insert(metadatas:lastModifiedDate:)(a1, a2);
}

uint64_t sub_1001D3C14(uint64_t a1, char a2, uint64_t a3)
{
  return AppMetadataCache.insert(invalidIDs:type:lastModifiedDate:)(a1, a2 & 1, a3);
}

uint64_t sub_1001D3C30()
{
  sub_10000D938(&qword_1003272F8);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10024F850;
  unint64_t v1 = sub_1001D8A68();
  *(void *)(v0 + 32) = &type metadata for AppMetadataSchemaV1;
  *(void *)(v0 + 40) = v1;
  return v0;
}

uint64_t sub_1001D3C8C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6574616C706D6574 && a2 == 0xEB000000004C5255;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6874646977 && a2 == 0xE500000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x746867696568 && a2 == 0xE600000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x6F6C6F4374786574 && a2 == 0xEA00000000003172;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          BOOL v9 = a1 == 0x6F6C6F4374786574 && a2 == 0xEA00000000003272;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else
          {
            BOOL v10 = a1 == 0x6F6C6F4374786574 && a2 == 0xEA00000000003372;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 5;
            }
            else
            {
              BOOL v11 = a1 == 0x6F6C6F4374786574 && a2 == 0xEA00000000003472;
              if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 6;
              }
              else if (a1 == 0x756F72676B636162 && a2 == 0xEF726F6C6F43646ELL)
              {
                swift_bridgeObjectRelease();
                return 7;
              }
              else
              {
                char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if (v13) {
                  return 7;
                }
                else {
                  return 8;
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1001D3FC0()
{
  return 8;
}

uint64_t sub_1001D3FC8(char a1)
{
  uint64_t result = 0x6574616C706D6574;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6874646977;
      break;
    case 2:
      uint64_t result = 0x746867696568;
      break;
    case 3:
      uint64_t result = 0x6F6C6F4374786574;
      break;
    case 4:
      uint64_t result = 0x6F6C6F4374786574;
      break;
    case 5:
      uint64_t result = 0x6F6C6F4374786574;
      break;
    case 6:
      uint64_t result = 0x6F6C6F4374786574;
      break;
    case 7:
      uint64_t result = 0x756F72676B636162;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001D40F4(void *a1)
{
  uint64_t v3 = sub_10000D938(&qword_1003286D8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  BOOL v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100165918(a1, a1[3]);
  sub_1001D9A88();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v9[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v9[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v9[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v9[11] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v9[10] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v9[9] = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint8_t v9[8] = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1001D4344@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10000D938(&qword_1003286C8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  BOOL v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100165918(a1, a1[3]);
  sub_1001D9A88();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100016C38((uint64_t)a1);
  }
  char v48 = 0;
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12 = v11;
  char v47 = 1;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v13;
  char v46 = 2;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v16 = v15;
  char v45 = 3;
  uint64_t v36 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v37 = v10;
  char v44 = 4;
  uint64_t v40 = v17;
  swift_bridgeObjectRetain();
  uint64_t v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v39 = v19;
  uint64_t v35 = v18;
  char v43 = 5;
  swift_bridgeObjectRetain();
  uint64_t v34 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v42 = 6;
  uint64_t v38 = v20;
  swift_bridgeObjectRetain();
  uint64_t v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v33 = v21;
  char v41 = 7;
  swift_bridgeObjectRetain();
  uint64_t v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v24 = v23;
  uint64_t v25 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v31 = v22;
  v25(v9, v5);
  swift_bridgeObjectRetain();
  sub_100016C38((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v26 = v33;
  swift_bridgeObjectRelease();
  uint64_t v27 = v38;
  swift_bridgeObjectRelease();
  uint64_t v28 = v39;
  swift_bridgeObjectRelease();
  uint64_t v29 = v40;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v37;
  a2[1] = v12;
  a2[2] = v14;
  a2[3] = v16;
  a2[4] = v36;
  a2[5] = v29;
  a2[6] = v35;
  a2[7] = v28;
  a2[8] = v34;
  a2[9] = v27;
  a2[10] = v32;
  a2[11] = v26;
  a2[12] = v31;
  a2[13] = v24;
  return result;
}

uint64_t sub_1001D482C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4449656C646E7562 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 1701667182 && a2 == 0xE400000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x6D614E74726F6873 && a2 == 0xE900000000000065;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0xD000000000000012 && a2 == 0x80000001002B30E0 {
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      }
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        BOOL v8 = a1 == 0x7374726F70707573 && a2 == 0xEE00656461637241;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else if (a1 == 0xD000000000000016 && a2 == 0x80000001002AF8F0 {
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        }
        {
          swift_bridgeObjectRelease();
          return 5;
        }
        else
        {
          BOOL v9 = a1 == 0x6146656369766564 && a2 == 0xEE007365696C696DLL;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 6;
          }
          else if (a1 == 0xD000000000000018 && a2 == 0x80000001002B3100 {
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          }
          {
            swift_bridgeObjectRelease();
            return 7;
          }
          else if (a1 == 0xD000000000000010 && a2 == 0x80000001002AF930 {
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          }
          {
            swift_bridgeObjectRelease();
            return 8;
          }
          else if (a1 == 0x6B726F77747261 && a2 == 0xE700000000000000)
          {
            swift_bridgeObjectRelease();
            return 9;
          }
          else
          {
            char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v11) {
              return 9;
            }
            else {
              return 10;
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1001D4C48()
{
  return 10;
}

unint64_t sub_1001D4C50(char a1)
{
  unint64_t result = 0x4449656C646E7562;
  switch(a1)
  {
    case 1:
      unint64_t result = 1701667182;
      break;
    case 2:
      unint64_t result = 0x6D614E74726F6873;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    case 4:
      unint64_t result = 0x7374726F70707573;
      break;
    case 5:
      unint64_t result = 0xD000000000000016;
      break;
    case 6:
      unint64_t result = 0x6146656369766564;
      break;
    case 7:
      unint64_t result = 0xD000000000000018;
      break;
    case 8:
      unint64_t result = 0xD000000000000010;
      break;
    case 9:
      unint64_t result = 0x6B726F77747261;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001D4DAC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000D938(&qword_100328590);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  BOOL v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100165918(a1, a1[3]);
  sub_1001D8AB4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v18) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v18) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v18) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v18) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v18) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v18) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v18 = *(void *)(v3 + 56);
    char v26 = 6;
    sub_10000D938(&qword_100326FC0);
    sub_1001D93B0((uint64_t)&unk_100328598);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v10 = type metadata accessor for AppMetadataSchemaV1.AppMetadata.Attributes(0);
    LOBYTE(v18) = 7;
    type metadata accessor for Date();
    sub_1001D8B00((uint64_t)&qword_100327250);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v18) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v11 = (uint64_t *)(v3 + *(int *)(v10 + 52));
    uint64_t v12 = v11[1];
    uint64_t v18 = *v11;
    uint64_t v19 = v12;
    long long v13 = *((_OWORD *)v11 + 2);
    long long v20 = *((_OWORD *)v11 + 1);
    long long v21 = v13;
    long long v14 = *((_OWORD *)v11 + 4);
    long long v22 = *((_OWORD *)v11 + 3);
    long long v23 = v14;
    long long v15 = *((_OWORD *)v11 + 6);
    long long v24 = *((_OWORD *)v11 + 5);
    long long v25 = v15;
    char v26 = 9;
    sub_1001D8CB4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1001D5124@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = sub_10000D938(&qword_100328570);
  uint64_t v5 = *(void *)(v32 - 8);
  __chkstk_darwin(v32, v6);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = (int *)type metadata accessor for AppMetadataSchemaV1.AppMetadata.Attributes(0);
  __chkstk_darwin(v33, v9);
  char v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100165918(a1, a1[3]);
  sub_1001D8AB4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100016C38((uint64_t)a1);
  }
  uint64_t v31 = v5;
  LOBYTE(v34) = 0;
  *(void *)char v11 = KeyedDecodingContainer.decode(_:forKey:)();
  *((void *)v11 + 1) = v12;
  LOBYTE(v34) = 1;
  *((void *)v11 + 2) = KeyedDecodingContainer.decode(_:forKey:)();
  *((void *)v11 + 3) = v13;
  LOBYTE(v34) = 2;
  *((void *)v11 + 4) = KeyedDecodingContainer.decode(_:forKey:)();
  *((void *)v11 + 5) = v14;
  LOBYTE(v34) = 3;
  v11[48] = KeyedDecodingContainer.decode(_:forKey:)() & 1;
  LOBYTE(v34) = 4;
  v11[49] = KeyedDecodingContainer.decode(_:forKey:)() & 1;
  LOBYTE(v34) = 5;
  v11[50] = KeyedDecodingContainer.decode(_:forKey:)() & 1;
  sub_10000D938(&qword_100326FC0);
  char v42 = 6;
  sub_1001D93B0((uint64_t)&unk_100328580);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *((void *)v11 + 7) = v34;
  uint64_t v15 = sub_10000D938(&qword_1003261C8);
  uint64_t v30 = &v28;
  __chkstk_darwin(v15 - 8, v16);
  uint64_t v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date();
  LOBYTE(v34) = 7;
  sub_1001D8B00((uint64_t)&qword_100326F98);
  uint64_t v29 = v18;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_1001D8B40((uint64_t)v29, (uint64_t)&v11[v33[11]]);
  LOBYTE(v34) = 8;
  uint64_t v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  long long v20 = (uint64_t *)&v11[v33[12]];
  uint64_t *v20 = v19;
  v20[1] = v21;
  char v42 = 9;
  sub_1001D8BA8();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v32);
  uint64_t v22 = v35;
  long long v23 = &v11[v33[13]];
  *(void *)long long v23 = v34;
  *((void *)v23 + 1) = v22;
  long long v24 = v37;
  *((_OWORD *)v23 + 1) = v36;
  *((_OWORD *)v23 + 2) = v24;
  long long v25 = v39;
  *((_OWORD *)v23 + 3) = v38;
  *((_OWORD *)v23 + 4) = v25;
  long long v26 = v41;
  *((_OWORD *)v23 + 5) = v40;
  *((_OWORD *)v23 + 6) = v26;
  sub_1001D8BF4((uint64_t)v11, a2);
  sub_100016C38((uint64_t)a1);
  return sub_1001D8C58((uint64_t)v11);
}

uint64_t sub_1001D577C()
{
  return sub_1001D3FC8(*v0);
}

uint64_t sub_1001D5784@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001D3C8C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001D57AC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1001D3FC0();
  *a1 = result;
  return result;
}

uint64_t sub_1001D57D4(uint64_t a1)
{
  unint64_t v2 = sub_1001D9A88();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001D5810(uint64_t a1)
{
  unint64_t v2 = sub_1001D9A88();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1001D584C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (void *)sub_1001D4344(a1, v5);
  if (!v2) {
    return memcpy(a2, v5, 0x70uLL);
  }
  return result;
}

uint64_t sub_1001D5898(void *a1)
{
  memcpy(v4, v1, sizeof(v4));
  return sub_1001D40F4(a1);
}

unint64_t sub_1001D58EC()
{
  return sub_1001D4C50(*v0);
}

uint64_t sub_1001D58F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001D482C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001D591C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1001D4C48();
  *a1 = result;
  return result;
}

uint64_t sub_1001D5944(uint64_t a1)
{
  unint64_t v2 = sub_1001D8AB4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001D5980(uint64_t a1)
{
  unint64_t v2 = sub_1001D8AB4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001D59BC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001D5124(a1, a2);
}

uint64_t sub_1001D59D4(void *a1)
{
  return sub_1001D4DAC(a1);
}

uint64_t sub_1001D59EC@<X0>(uint64_t a1@<X2>, unsigned char *a2@<X8>)
{
  sub_100171960(a1, (uint64_t)v4);
  sub_100165918(v4, v4[3]);
  swift_getKeyPath();
  sub_10000D938(&qword_1003262D0);
  sub_1001D93B0((uint64_t)&unk_100328560);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t result = sub_100016C38((uint64_t)v4);
  *a2 = 0;
  return result;
}

uint64_t sub_1001D5AE4()
{
  return swift_release();
}

uint64_t sub_1001D5BC8(uint64_t a1, uint64_t a2)
{
  sub_100171960(a2, (uint64_t)v5);
  sub_100165918(v5, v5[3]);
  swift_getKeyPath();
  uint64_t v3 = type metadata accessor for Date();
  sub_1001D8B00((uint64_t)&qword_100327250);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return sub_100016C38((uint64_t)v5);
}

uint64_t sub_1001D5CB0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v6 + 16))(v5, a1);
  return sub_1001D5D7C((uint64_t)v5);
}

uint64_t sub_1001D5D7C(uint64_t a1)
{
  swift_getKeyPath();
  sub_1001D3A90((uint64_t)&unk_100328518);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  uint64_t v2 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_1001D5E84()
{
  return swift_release();
}

uint64_t sub_1001D5F40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  sub_100171960(a2, (uint64_t)v6);
  sub_100165918(v6, v6[3]);
  swift_getKeyPath();
  sub_10000D938(&qword_100328318);
  sub_1001D8968((uint64_t)&unk_100328540);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_1001D8EB8(a1, &qword_100328318);
  uint64_t result = sub_100016C38((uint64_t)v6);
  *a3 = 0;
  return result;
}

uint64_t sub_1001D6044()
{
  return swift_release();
}

uint64_t sub_1001D618C(uint64_t a1)
{
  uint64_t v2 = sub_10000D938(&qword_100328318);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001D9470(a1, (uint64_t)v5, &qword_100328318);
  return sub_1001D6224((uint64_t)v5);
}

uint64_t sub_1001D6224(uint64_t a1)
{
  return sub_1001D8EB8(a1, &qword_100328318);
}

uint64_t sub_1001D6304()
{
  return swift_release();
}

void *sub_1001D63E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v23 = a5;
  uint64_t v24 = a6;
  v22[0] = a3;
  v22[1] = a4;
  uint64_t v8 = *v6;
  uint64_t v9 = sub_10000D938(&qword_100328318);
  __chkstk_darwin(v9 - 8, v10);
  uint64_t v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  void v7[6] = sub_10000D938(&qword_1003285A8);
  unint64_t v13 = sub_1001D3A90((uint64_t)&unk_1003282E0);
  uint64_t v25 = v8;
  uint64_t v26 = v8;
  unint64_t v27 = v13;
  unint64_t v28 = v13;
  v7[7] = swift_getOpaqueTypeConformance2();
  sub_100171DD8(v7 + 3);
  static PersistentModel.createBackingData<A>()();
  *((_WORD *)v7 + 8) = 257;
  *((unsigned char *)v7 + 18) = 1;
  ObservationRegistrar.init()();
  sub_1001D59EC((uint64_t)(v7 + 3), (unsigned char *)v7 + 16);
  sub_1001D59EC((uint64_t)(v7 + 3), (unsigned char *)v7 + 17);
  uint64_t v14 = v23;
  sub_1001D9470(v23, (uint64_t)v12, &qword_100328318);
  sub_1001D5F40((uint64_t)v12, (uint64_t)(v7 + 3), (unsigned char *)v7 + 18);
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  uint64_t v19 = (char *)v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v24;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v24, v15);
  sub_1001D5BC8((uint64_t)v19, (uint64_t)(v7 + 3));
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v20, v15);
  sub_1001D8EB8(v14, &qword_100328318);
  return v7;
}

void *sub_1001D66E0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v23 = a5;
  uint64_t v24 = a4;
  uint64_t v8 = *v5;
  uint64_t v9 = sub_10000D938(&qword_100328318);
  __chkstk_darwin(v9 - 8, v10);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6[6] = sub_10000D938(&qword_1003285A8);
  unint64_t v13 = sub_1001D3A90((uint64_t)&unk_1003282E0);
  uint64_t v25 = v8;
  uint64_t v26 = v8;
  unint64_t v27 = v13;
  unint64_t v28 = v13;
  v6[7] = swift_getOpaqueTypeConformance2();
  sub_100171DD8(v6 + 3);
  static PersistentModel.createBackingData<A>()();
  *((_WORD *)v6 + 8) = 257;
  *((unsigned char *)v6 + 18) = 1;
  ObservationRegistrar.init()();
  if (a3) {
    uint64_t v14 = v6 + 2;
  }
  else {
    uint64_t v14 = (char *)v6 + 17;
  }
  sub_1001D59EC((uint64_t)(v6 + 3), v14);
  uint64_t v15 = v24;
  sub_1001D9470(v24, (uint64_t)v12, &qword_100328318);
  sub_1001D5F40((uint64_t)v12, (uint64_t)(v6 + 3), (unsigned char *)v6 + 18);
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  uint64_t v20 = (char *)&v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v23, v16);
  sub_1001D5BC8((uint64_t)v20, (uint64_t)(v6 + 3));
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v21, v16);
  sub_1001D8EB8(v15, &qword_100328318);
  return v6;
}

uint64_t sub_1001D69F8@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return sub_100171960(v1 + 24, a1);
}

uint64_t sub_1001D6A44(long long *a1)
{
  uint64_t v3 = v1 + 24;
  swift_beginAccess();
  sub_100016C38(v3);
  sub_10019BCEC(a1, v3);
  return swift_endAccess();
}

uint64_t sub_1001D6AA0()
{
  sub_10000D938(&qword_100326FB0);
  type metadata accessor for Schema.PropertyMetadata();
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_10024F6F0;
  swift_getKeyPath();
  sub_10000D938(&qword_100328530);
  type metadata accessor for Schema.Attribute.Option();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10024F850;
  static Schema.Attribute.Option.unique.getter();
  type metadata accessor for Schema.Attribute();
  swift_allocObject();
  Schema.Attribute.init(_:originalName:hashModifier:)();
  sub_1001D3A90((uint64_t)&unk_100328538);
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
  swift_getKeyPath();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10024F850;
  static Schema.Attribute.Option.unique.getter();
  swift_allocObject();
  Schema.Attribute.init(_:originalName:hashModifier:)();
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
  swift_getKeyPath();
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
  swift_getKeyPath();
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
  return v1;
}

void *sub_1001D6E14(uint64_t a1)
{
  return sub_1001D6E50(a1);
}

void *sub_1001D6E50(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  v2[6] = sub_10000D938(&qword_1003285A8);
  *(void *)&long long v6 = v4;
  *((void *)&v6 + 1) = v4;
  unint64_t v7 = sub_1001D3A90((uint64_t)&unk_1003282E0);
  unint64_t v8 = v7;
  v2[7] = swift_getOpaqueTypeConformance2();
  sub_100171DD8(v2 + 3);
  static PersistentModel.createBackingData<A>()();
  *((_WORD *)v2 + 8) = 257;
  *((unsigned char *)v2 + 18) = 1;
  ObservationRegistrar.init()();
  *((_WORD *)v2 + 8) = 0;
  *((unsigned char *)v2 + 18) = 0;
  sub_100171960(a1, (uint64_t)&v6);
  swift_beginAccess();
  sub_100016C38((uint64_t)(v2 + 3));
  sub_10019BCEC(&v6, (uint64_t)(v2 + 3));
  swift_endAccess();
  sub_100016C38(a1);
  return v2;
}

uint64_t sub_1001D6FC0()
{
  sub_100016C38(v0 + 24);
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14GameDaemonCoreP33_9DC203CAEB983F42B18FE72770C1F80719AppMetadataSchemaV111AppMetadata___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v3, v4);
}

Swift::Int sub_1001D706C()
{
  return Hasher._finalize()();
}

void (*sub_1001D7130(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  sub_1001D69F8((uint64_t)v3);
  return sub_1001D7190;
}

void sub_1001D7190(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    sub_100171960(*a1, v2 + 40);
    sub_1001D6A44((long long *)(v2 + 40));
    sub_100016C38(v2);
  }
  else
  {
    sub_1001D6A44((long long *)*a1);
  }

  free((void *)v2);
}

Swift::Int sub_1001D7208()
{
  return sub_1001D706C();
}

uint64_t sub_1001D722C()
{
  return PersistentModel.hash(into:)();
}

uint64_t sub_1001D72A4()
{
  return PersistentModel.id.getter();
}

uint64_t sub_1001D731C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  unint64_t v5 = sub_1001D3A90((uint64_t)&unk_1003282E0);

  return static PersistentModel.== infix(_:_:)(v3, v4, v2, v5);
}

id sub_1001D73A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  NSString v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v17.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v18 = type metadata accessor for Date();
  Class isa = 0;
  if (sub_10000DB14(a12, 1, v18) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(a12, v18);
  }
  if (a14)
  {
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v20 = 0;
  }
  LOWORD(v23) = *(_WORD *)((unsigned char *)&a10 + 1) & 0x101;
  id v21 = [v25 initWithBundleID:v24 adamID:v14 name:v15 shortName:v16 artwork:a9 supportsGameCenter:a10 & 1 supportsArcade:v23 supportsGameController:v17.super.isa isa:v20];

  return v21;
}

unint64_t sub_1001D7588()
{
  unint64_t result = qword_100328310;
  if (!qword_100328310)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100328310);
  }
  return result;
}

void sub_1001D75D4()
{
}

uint64_t type metadata accessor for AppMetadataSchemaV1.AppMetadata.Attributes(uint64_t a1)
{
  return sub_1001D762C(a1, (uint64_t *)&unk_1003284A0);
}

uint64_t sub_1001D762C(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_1001D7660(uint64_t a1)
{
  unint64_t result = sub_1001D3A90((uint64_t)&unk_100328328);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1001D76B8()
{
  return sub_1001D3A90((uint64_t)&unk_100328328);
}

uint64_t sub_1001D7700()
{
  return type metadata accessor for AppMetadataSchemaV1.AppMetadata(0);
}

uint64_t sub_1001D7708()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppMetadataSchemaV1.AppMetadata._SwiftDataNoType()
{
  return &type metadata for AppMetadataSchemaV1.AppMetadata._SwiftDataNoType;
}

void *sub_1001D77D4(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v9;
    *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
    *(_WORD *)(a1 + 49) = *(_WORD *)((char *)a2 + 49);
    uint64_t v10 = a3[11];
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (char *)a2 + v10;
    *(void *)(a1 + 56) = a2[7];
    uint64_t v13 = type metadata accessor for Date();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (sub_10000DB14((uint64_t)v12, 1, v13))
    {
      uint64_t v14 = sub_10000D938(&qword_1003261C8);
      memcpy(v11, v12, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
      sub_10000D97C((uint64_t)v11, 0, 1, v13);
    }
    uint64_t v16 = a3[12];
    uint64_t v17 = a3[13];
    uint64_t v18 = (void *)((char *)v4 + v16);
    uint64_t v19 = (uint64_t *)((char *)a2 + v16);
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v20;
    id v21 = (char *)v4 + v17;
    uint64_t v22 = (uint64_t)a2 + v17;
    uint64_t v23 = *(void *)(v22 + 8);
    *(void *)id v21 = *(void *)v22;
    *((void *)v21 + 1) = v23;
    *((_OWORD *)v21 + 1) = *(_OWORD *)(v22 + 16);
    uint64_t v24 = *(void *)(v22 + 40);
    *((void *)v21 + 4) = *(void *)(v22 + 32);
    *((void *)v21 + 5) = v24;
    uint64_t v25 = *(void *)(v22 + 56);
    *((void *)v21 + 6) = *(void *)(v22 + 48);
    *((void *)v21 + 7) = v25;
    uint64_t v26 = *(void *)(v22 + 72);
    *((void *)v21 + 8) = *(void *)(v22 + 64);
    *((void *)v21 + 9) = v26;
    uint64_t v27 = *(void *)(v22 + 88);
    *((void *)v21 + 10) = *(void *)(v22 + 80);
    *((void *)v21 + 11) = v27;
    uint64_t v28 = *(void *)(v22 + 104);
    *((void *)v21 + 12) = *(void *)(v22 + 96);
    *((void *)v21 + 13) = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1001D79EC(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for Date();
  if (!sub_10000DB14(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001D7AE4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_WORD *)(a1 + 49) = *(_WORD *)(a2 + 49);
  uint64_t v9 = a3[11];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v12 = type metadata accessor for Date();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (sub_10000DB14((uint64_t)v11, 1, v12))
  {
    uint64_t v13 = sub_10000D938(&qword_1003261C8);
    memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    sub_10000D97C((uint64_t)v10, 0, 1, v12);
  }
  uint64_t v14 = a3[12];
  uint64_t v15 = a3[13];
  uint64_t v16 = (void *)(a1 + v14);
  uint64_t v17 = (void *)(a2 + v14);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  uint64_t v19 = a1 + v15;
  uint64_t v20 = a2 + v15;
  uint64_t v21 = *(void *)(v20 + 8);
  *(void *)uint64_t v19 = *(void *)v20;
  *(void *)(v19 + 8) = v21;
  *(_OWORD *)(v19 + 16) = *(_OWORD *)(v20 + 16);
  uint64_t v22 = *(void *)(v20 + 40);
  *(void *)(v19 + 32) = *(void *)(v20 + 32);
  *(void *)(v19 + 40) = v22;
  uint64_t v23 = *(void *)(v20 + 56);
  *(void *)(v19 + 48) = *(void *)(v20 + 48);
  *(void *)(v19 + 56) = v23;
  uint64_t v24 = *(void *)(v20 + 72);
  *(void *)(v19 + 64) = *(void *)(v20 + 64);
  *(void *)(v19 + 72) = v24;
  uint64_t v25 = *(void *)(v20 + 88);
  *(void *)(v19 + 80) = *(void *)(v20 + 80);
  *(void *)(v19 + 88) = v25;
  uint64_t v26 = *(void *)(v20 + 104);
  *(void *)(v19 + 96) = *(void *)(v20 + 96);
  *(void *)(v19 + 104) = v26;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1001D7CAC(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  *(unsigned char *)(a1 + 50) = *(unsigned char *)(a2 + 50);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[11];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  int v10 = sub_10000DB14((uint64_t)v7, 1, v9);
  int v11 = sub_10000DB14((uint64_t)v8, 1, v9);
  if (!v10)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(void *, const void *, uint64_t))(v12 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v13 = sub_10000D938(&qword_1003261C8);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  sub_10000D97C((uint64_t)v7, 0, 1, v9);
LABEL_7:
  uint64_t v14 = a3[12];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  *uint64_t v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[13];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  *uint64_t v18 = *(void *)(a2 + v17);
  v18[1] = *(void *)(a2 + v17 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  _OWORD v18[2] = v19[2];
  void v18[3] = v19[3];
  void v18[4] = v19[4];
  v18[5] = v19[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18[6] = v19[6];
  v18[7] = v19[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18[8] = v19[8];
  v18[9] = v19[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18[10] = v19[10];
  v18[11] = v19[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18[12] = v19[12];
  v18[13] = v19[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001D7FAC(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_WORD *)(a1 + 49) = *(_WORD *)(a2 + 49);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v8 = a3[11];
  uint64_t v9 = (void *)(a1 + v8);
  int v10 = (const void *)(a2 + v8);
  *(_OWORD *)(a1 + 32) = v7;
  uint64_t v11 = type metadata accessor for Date();
  if (sub_10000DB14((uint64_t)v10, 1, v11))
  {
    uint64_t v12 = sub_10000D938(&qword_1003261C8);
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
    sub_10000D97C((uint64_t)v9, 0, 1, v11);
  }
  uint64_t v13 = a3[13];
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  memcpy((void *)(a1 + v13), (const void *)(a2 + v13), 0x70uLL);
  return a1;
}

uint64_t sub_1001D80D0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  *(unsigned char *)(a1 + 50) = *(unsigned char *)(a2 + 50);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  uint64_t v9 = a3[11];
  int v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  uint64_t v12 = type metadata accessor for Date();
  int v13 = sub_10000DB14((uint64_t)v10, 1, v12);
  int v14 = sub_10000DB14((uint64_t)v11, 1, v12);
  if (!v13)
  {
    uint64_t v15 = *(void *)(v12 - 8);
    if (!v14)
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 40))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v16 = sub_10000D938(&qword_1003261C8);
    memcpy(v10, v11, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
  sub_10000D97C((uint64_t)v10, 0, 1, v12);
LABEL_7:
  uint64_t v17 = a3[12];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  *uint64_t v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[13];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  uint64_t v25 = *(void *)(v24 + 8);
  *(void *)uint64_t v23 = *(void *)v24;
  *(void *)(v23 + 8) = v25;
  swift_bridgeObjectRelease();
  *(_OWORD *)(v23 + 16) = *(_OWORD *)(v24 + 16);
  uint64_t v26 = *(void *)(v24 + 40);
  *(void *)(v23 + 32) = *(void *)(v24 + 32);
  *(void *)(v23 + 40) = v26;
  swift_bridgeObjectRelease();
  uint64_t v27 = *(void *)(v24 + 56);
  *(void *)(v23 + 48) = *(void *)(v24 + 48);
  *(void *)(v23 + 56) = v27;
  swift_bridgeObjectRelease();
  uint64_t v28 = *(void *)(v24 + 72);
  *(void *)(v23 + 64) = *(void *)(v24 + 64);
  *(void *)(v23 + 72) = v28;
  swift_bridgeObjectRelease();
  uint64_t v29 = *(void *)(v24 + 88);
  *(void *)(v23 + 80) = *(void *)(v24 + 80);
  *(void *)(v23 + 88) = v29;
  swift_bridgeObjectRelease();
  uint64_t v30 = *(void *)(v24 + 104);
  *(void *)(v23 + 96) = *(void *)(v24 + 96);
  *(void *)(v23 + 104) = v30;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001D8320(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001D8334);
}

uint64_t sub_1001D8334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000D938(&qword_1003261C8);
    uint64_t v9 = a1 + *(int *)(a3 + 44);
    return sub_10000DB14(v9, a2, v8);
  }
}

uint64_t sub_1001D83C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001D83D4);
}

uint64_t sub_1001D83D4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10000D938(&qword_1003261C8);
    uint64_t v8 = v5 + *(int *)(a4 + 44);
    return sub_10000D97C(v8, a2, a2, v7);
  }
  return result;
}

void sub_1001D8458()
{
  sub_1001D8524();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1001D8524()
{
  if (!qword_1003284B0)
  {
    type metadata accessor for Date();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1003284B0);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for AppMetadataCache.AppMetadataCacheError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1001D8618);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AppMetadataCache.AppMetadataCacheError()
{
  return &type metadata for AppMetadataCache.AppMetadataCacheError;
}

ValueMetadata *type metadata accessor for AppMetadataSchemaV1()
{
  return &type metadata for AppMetadataSchemaV1;
}

ValueMetadata *type metadata accessor for AppMetadataMigrationPlan()
{
  return &type metadata for AppMetadataMigrationPlan;
}

unint64_t sub_1001D8674()
{
  unint64_t result = qword_100328500;
  if (!qword_100328500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100328500);
  }
  return result;
}

unint64_t sub_1001D86C0()
{
  return sub_1001D3A90((uint64_t)&unk_100328508);
}

unint64_t sub_1001D870C()
{
  return sub_1001D3A90((uint64_t)&unk_100328510);
}

unint64_t sub_1001D8758()
{
  return sub_1001D3A90((uint64_t)&unk_100328518);
}

unint64_t sub_1001D87A4()
{
  return sub_1001D3A90((uint64_t)&unk_100328520);
}

unint64_t sub_1001D87F0()
{
  return sub_1001D3A90((uint64_t)&unk_100328528);
}

uint64_t sub_1001D883C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1001D1910();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1001D8868()
{
  return sub_1001D1D90();
}

uint64_t sub_1001D889C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1001D1C50();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1001D88C8()
{
  return sub_1001D1D90();
}

uint64_t sub_1001D88FC()
{
  return sub_1001D23A4();
}

uint64_t sub_1001D8924()
{
  return sub_1001D6044();
}

uint64_t sub_1001D894C()
{
  return sub_1001D6304();
}

unint64_t sub_1001D8968(uint64_t a1)
{
  unint64_t result = sub_10001843C(a1);
  if (!result)
  {
    uint64_t v4 = v3;
    sub_100163988(&qword_100328318);
    sub_1001D3A90(v4);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

uint64_t sub_1001D89FC()
{
  return sub_1001D5E84();
}

uint64_t sub_1001D8A18()
{
  return sub_1001D5AE4();
}

uint64_t sub_1001D8A40()
{
  return sub_1001D5AE4();
}

unint64_t sub_1001D8A68()
{
  unint64_t result = qword_100328568;
  if (!qword_100328568)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100328568);
  }
  return result;
}

unint64_t sub_1001D8AB4()
{
  unint64_t result = qword_100328578;
  if (!qword_100328578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100328578);
  }
  return result;
}

unint64_t sub_1001D8B00(uint64_t a1)
{
  unint64_t result = sub_10001843C(a1);
  if (!result)
  {
    type metadata accessor for Date();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

uint64_t sub_1001D8B40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D938(&qword_1003261C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001D8BA8()
{
  unint64_t result = qword_100328588;
  if (!qword_100328588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100328588);
  }
  return result;
}

uint64_t sub_1001D8BF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppMetadataSchemaV1.AppMetadata.Attributes(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001D8C58(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AppMetadataSchemaV1.AppMetadata.Attributes(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1001D8CB4()
{
  unint64_t result = qword_1003285A0;
  if (!qword_1003285A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003285A0);
  }
  return result;
}

uint64_t sub_1001D8D00()
{
  _Block_release(*(const void **)(v0 + 16));
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001D8D40()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1001C2D00;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_1003285B0 + dword_1003285B0);
  return v5(v2, v3);
}

id sub_1001D8DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v13 = [a8 gameCenterCacheDatabaseURLForPlayerID:v10 language:v11 name:v12 fileManager:a7];

  return v13;
}

uint64_t sub_1001D8EB8(uint64_t a1, uint64_t *a2)
{
  sub_10000D938(a2);
  sub_100011C3C();
  v3();
  return a1;
}

uint64_t sub_1001D8F10(void *a1, SEL *a2)
{
  id v3 = [a1 *a2];

  if (!v3) {
    return 0;
  }
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t sub_1001D8F7C(void *a1)
{
  id v1 = [a1 genreDisplayName];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void sub_1001D8FE0()
{
}

unint64_t sub_1001D8FFC()
{
  unint64_t result = qword_100328618;
  if (!qword_100328618)
  {
    sub_100163988(&qword_100328610);
    sub_1001D906C();
    sub_1001D92B4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100328618);
  }
  return result;
}

unint64_t sub_1001D906C()
{
  unint64_t result = qword_100328620;
  if (!qword_100328620)
  {
    sub_100163988(&qword_1003285D0);
    sub_1001D90DC();
    sub_1001D915C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100328620);
  }
  return result;
}

unint64_t sub_1001D90DC()
{
  unint64_t result = qword_100328628;
  if (!qword_100328628)
  {
    sub_100163988(&qword_1003285D8);
    sub_1001D931C((uint64_t)&unk_100328630);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100328628);
  }
  return result;
}

unint64_t sub_1001D915C()
{
  unint64_t result = qword_100328638;
  if (!qword_100328638)
  {
    sub_100163988(&qword_1003285F0);
    sub_1001D91E4();
    sub_1001D931C((uint64_t)&unk_100328668);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100328638);
  }
  return result;
}

unint64_t sub_1001D91E4()
{
  unint64_t result = qword_100328640;
  if (!qword_100328640)
  {
    sub_100163988(&qword_100328648);
    sub_1001D93B0((uint64_t)&unk_100328650);
    sub_1001D93B0((uint64_t)&unk_100328660);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100328640);
  }
  return result;
}

unint64_t sub_1001D92B4()
{
  unint64_t result = qword_100328678;
  if (!qword_100328678)
  {
    sub_100163988(&qword_100328608);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100328678);
  }
  return result;
}

unint64_t sub_1001D931C(uint64_t a1)
{
  unint64_t result = sub_10001843C(a1);
  if (!result)
  {
    sub_100163988(v3);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_1001D935C()
{
  unint64_t result = qword_1003286A0;
  if (!qword_1003286A0)
  {
    sub_100163988(&qword_100328658);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003286A0);
  }
  return result;
}

unint64_t sub_1001D93B0(uint64_t a1)
{
  unint64_t result = sub_10001843C(a1);
  if (!result)
  {
    sub_100163988(v3);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

uint64_t sub_1001D940C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppMetadataSchemaV1.AppMetadata.Attributes(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001D9470(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000D938(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t getEnumTagSinglePayload for AppMetadataSchemaV1.AppMetadata.Attributes.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF7)
  {
    if (a2 + 9 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 9) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 10;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v5 = v6 - 10;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for AppMetadataSchemaV1.AppMetadata.Attributes.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001D9628);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppMetadataSchemaV1.AppMetadata.Attributes.CodingKeys()
{
  return &type metadata for AppMetadataSchemaV1.AppMetadata.Attributes.CodingKeys;
}

uint64_t destroy for AppMetadataSchemaV1.AppMetadata.Artwork()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AppMetadataSchemaV1.AppMetadata.Artwork(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  uint64_t v8 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AppMetadataSchemaV1.AppMetadata.Artwork(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for AppMetadataSchemaV1.AppMetadata.Artwork(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x70uLL);
}

uint64_t assignWithTake for AppMetadataSchemaV1.AppMetadata.Artwork(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v9;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AppMetadataSchemaV1.AppMetadata.Artwork(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 112))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppMetadataSchemaV1.AppMetadata.Artwork(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 112) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppMetadataSchemaV1.AppMetadata.Artwork()
{
  return &type metadata for AppMetadataSchemaV1.AppMetadata.Artwork;
}

unint64_t sub_1001D999C()
{
  unint64_t result = qword_1003286B0;
  if (!qword_1003286B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003286B0);
  }
  return result;
}

unint64_t sub_1001D99EC()
{
  unint64_t result = qword_1003286B8;
  if (!qword_1003286B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003286B8);
  }
  return result;
}

unint64_t sub_1001D9A3C()
{
  unint64_t result = qword_1003286C0;
  if (!qword_1003286C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003286C0);
  }
  return result;
}

unint64_t sub_1001D9A88()
{
  unint64_t result = qword_1003286D0;
  if (!qword_1003286D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003286D0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AppMetadataSchemaV1.AppMetadata.Artwork.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF9)
  {
    if (a2 + 7 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 7) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 8;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v5 = v6 - 8;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for AppMetadataSchemaV1.AppMetadata.Artwork.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001D9C28);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppMetadataSchemaV1.AppMetadata.Artwork.CodingKeys()
{
  return &type metadata for AppMetadataSchemaV1.AppMetadata.Artwork.CodingKeys;
}

unint64_t sub_1001D9C64()
{
  unint64_t result = qword_1003286E0;
  if (!qword_1003286E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003286E0);
  }
  return result;
}

unint64_t sub_1001D9CB4()
{
  unint64_t result = qword_1003286E8;
  if (!qword_1003286E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003286E8);
  }
  return result;
}

unint64_t sub_1001D9D04()
{
  unint64_t result = qword_1003286F0;
  if (!qword_1003286F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003286F0);
  }
  return result;
}

void sub_1001D9D54()
{
  sub_1001AD618();
}

uint64_t sub_1001D9D88()
{
  return static GKLog.cache.getter();
}

uint64_t sub_1001D9DB0()
{
  return v0;
}

uint64_t sub_1001D9DDC()
{
  uint64_t v3 = sub_100017908();
  if (sub_10000DB14(v1, 1, v3) == 1)
  {
    sub_1000185A8(v1, &qword_100326298);
  }
  else
  {
    TaskPriority.rawValue.getter();
    sub_100017C80();
    uint64_t v4 = sub_1001DDF0C();
    v5(v4);
  }
  if (*(void *)(v0 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v2;
  *(void *)(v6 + 24) = v0;
  sub_10000D938(&qword_100328778);
  return swift_task_create();
}

void sub_1001D9F34(uint64_t a1, uint64_t a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, objc_class *))(a2 + 16))(a2, isa);
}

void sub_1001D9F98(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10000D938(&qword_100328720);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v32 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v31 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v2 + 8;
  swift_bridgeObjectRetain();
  swift_retain();
  int64_t v7 = 0;
  if (!v5) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v8 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  unint64_t v9 = v8 | (v7 << 6);
  while (1)
  {
    uint64_t v18 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v9);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    sub_10000753C(*(void *)(a1 + 56) + 40 * v9, (uint64_t)v50);
    uint64_t v48 = v20;
    uint64_t v49 = v19;
    long long v45 = v50[0];
    long long v46 = v50[1];
    uint64_t v47 = v51;
    uint64_t v35 = v20;
    uint64_t v36 = v19;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    v33[0] = v45;
    v33[1] = v46;
    uint64_t v34 = v47;
    swift_dynamicCast();
    long long v41 = v37;
    long long v42 = v38;
    uint64_t v43 = v39;
    sub_1000074D0(&v40, v44);
    long long v37 = v41;
    long long v38 = v42;
    uint64_t v39 = v43;
    sub_1000074D0(v44, v33);
    sub_1000074D0(v33, &v41);
    Swift::Int v21 = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v22 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v23 = v21 & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~v6[v23 >> 6]) == 0)
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        BOOL v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0;
        }
        v26 |= v28;
        uint64_t v29 = v6[v24];
        if (v29 != -1)
        {
          unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_38;
        }
      }
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    unint64_t v25 = __clz(__rbit64((-1 << v23) & ~v6[v23 >> 6])) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_38:
    *(void *)((char *)v6 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    uint64_t v30 = v2[6] + 40 * v25;
    *(_OWORD *)uint64_t v30 = v37;
    *(_OWORD *)(v30 + 16) = v38;
    *(void *)(v30 + 32) = v39;
    sub_1000074D0(&v41, (_OWORD *)(v2[7] + 32 * v25));
    ++v2[2];
    if (v5) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1)) {
      goto LABEL_42;
    }
    if (v10 >= v31) {
      goto LABEL_40;
    }
    unint64_t v11 = *(void *)(v32 + 8 * v10);
    int64_t v12 = v7 + 1;
    if (!v11)
    {
      sub_1001DDEE8();
      if (v13 == v14) {
        goto LABEL_40;
      }
      sub_100017BA8();
      if (!v11)
      {
        sub_1001DDEE8();
        if (v13 == v14) {
          goto LABEL_40;
        }
        sub_100017BA8();
        if (!v11)
        {
          sub_1001DDEE8();
          if (v13 == v14) {
            goto LABEL_40;
          }
          sub_100017BA8();
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_28:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
    int64_t v7 = v12;
  }
  int64_t v16 = v15 + 4;
  if (v16 >= v31)
  {
LABEL_40:
    swift_release();
    sub_10001A088();
    return;
  }
  unint64_t v11 = *(void *)(v32 + 8 * v16);
  if (v11)
  {
    int64_t v12 = v16;
    goto LABEL_28;
  }
  while (!__OFADD__(v16, 1))
  {
    sub_1001DDEE8();
    if (v13 == v14) {
      goto LABEL_40;
    }
    sub_100017BA8();
    int64_t v16 = v17 + 1;
    if (v11) {
      goto LABEL_28;
    }
  }
LABEL_43:
  __break(1u);
}

uint64_t sub_1001DA35C(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10000D938(&qword_100328720);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v2 + 8;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  if (!v5) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  unint64_t v10 = v9 | (v8 << 6);
  while (1)
  {
    uint64_t v15 = (void *)(*(void *)(a1 + 48) + 16 * v10);
    uint64_t v16 = v15[1];
    *(void *)&v36[0] = *v15;
    *((void *)&v36[0] + 1) = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    swift_dynamicCast();
    long long v32 = v28;
    long long v33 = v29;
    uint64_t v34 = v30;
    sub_1000074D0(&v31, v35);
    long long v28 = v32;
    long long v29 = v33;
    uint64_t v30 = v34;
    sub_1000074D0(v35, v36);
    sub_1000074D0(v36, &v32);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v17 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v18 = result & ~v17;
    unint64_t v19 = v18 >> 6;
    if (((-1 << v18) & ~v6[v18 >> 6]) == 0)
    {
      char v21 = 0;
      unint64_t v22 = (unint64_t)(63 - v17) >> 6;
      while (++v19 != v22 || (v21 & 1) == 0)
      {
        BOOL v23 = v19 == v22;
        if (v19 == v22) {
          unint64_t v19 = 0;
        }
        v21 |= v23;
        uint64_t v24 = v6[v19];
        if (v24 != -1)
        {
          unint64_t v20 = __clz(__rbit64(~v24)) + (v19 << 6);
          goto LABEL_34;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    unint64_t v20 = __clz(__rbit64((-1 << v18) & ~v6[v18 >> 6])) | v18 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(void *)((char *)v6 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    uint64_t v25 = v2[6] + 40 * v20;
    *(_OWORD *)uint64_t v25 = v28;
    *(_OWORD *)(v25 + 16) = v29;
    *(void *)(v25 + 32) = v30;
    uint64_t result = (uint64_t)sub_1000074D0(&v32, (_OWORD *)(v2[7] + 32 * v20));
    ++v2[2];
    if (v5) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      goto LABEL_38;
    }
    if (v11 >= v26) {
      goto LABEL_36;
    }
    unint64_t v12 = *(void *)(v27 + 8 * v11);
    int64_t v13 = v8 + 1;
    if (!v12)
    {
      int64_t v13 = v8 + 2;
      if (v8 + 2 >= v26) {
        goto LABEL_36;
      }
      unint64_t v12 = *(void *)(v27 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v8 + 3;
        if (v8 + 3 >= v26) {
          goto LABEL_36;
        }
        unint64_t v12 = *(void *)(v27 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v8 + 4;
          if (v8 + 4 >= v26) {
            goto LABEL_36;
          }
          unint64_t v12 = *(void *)(v27 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_24:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    int64_t v8 = v13;
  }
  int64_t v14 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_36:
    swift_release();
    sub_10001A088();
    return (uint64_t)v2;
  }
  unint64_t v12 = *(void *)(v27 + 8 * v14);
  if (v12)
  {
    int64_t v13 = v8 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v26) {
      goto LABEL_36;
    }
    unint64_t v12 = *(void *)(v27 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_24;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

const char *sub_1001DA714()
{
  return "gseui";
}

const char *sub_1001DA728()
{
  return "de7bbd8e";
}

id sub_1001DA74C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  sub_100011254();
  uint64_t v4 = v3;
  __chkstk_darwin(v5, v6);
  sub_1000110F8();
  uint64_t v9 = v8 - v7;
  id result = [v1 defaultAction];
  if (!result)
  {
    __break(1u);
    goto LABEL_11;
  }
  id result = (id)sub_1001DD538(result);
  if (!v11) {
    return result;
  }
  uint64_t v12 = type metadata accessor for URL();
  v32[1] = v32;
  sub_100011254();
  uint64_t v14 = v13;
  __chkstk_darwin(v15, v16);
  sub_1000110F8();
  uint64_t v19 = v18 - v17;
  uint64_t v20 = sub_10000D938(&qword_100327E70);
  __chkstk_darwin(v20 - 8, v21);
  sub_1000110F8();
  uint64_t v24 = v23 - v22;
  URL.init(string:)();
  swift_bridgeObjectRelease();
  if (sub_10000DB14(v24, 1, v12) == 1) {
    return (id)sub_1000185A8(v24, &qword_100327E70);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v19, v24, v12);
  static GKLog.daemon.getter();
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "LeaderboardChallengeBulletin Notification handle default action", v27, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v9, v2);
  id result = [self defaultWorkspace];
  if (!result)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  long long v29 = result;
  URL._bridgeToObjectiveC()(v28);
  long long v31 = v30;
  [v29 openURL:v30];

  return (id)(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v19, v12);
}

uint64_t sub_1001DAA6C()
{
  v5.receiver = (id)swift_getObjCClassFromMetadata();
  v5.Class super_class = (Class)&OBJC_METACLASS___GKLeaderboardChallengeBulletin;
  if (objc_msgSendSuper2(&v5, "shouldProcessNotification"))
  {
    uint64_t v3 = &type metadata for GKFeatureFlags;
    unint64_t v4 = sub_1001DDA0C();
    char v0 = isFeatureEnabled(_:)();
    sub_100016C38((uint64_t)v2);
  }
  else
  {
    char v0 = 0;
  }
  return v0 & 1;
}

void sub_1001DAB18(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  unint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  _Block_copy(a3);
  static GKLog.daemon.getter();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "LeaderboardChallengeBulletin loadBulletinsForPushNotification:", v13, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  sub_1001DACA4(a1);
  _Block_copy(a3);
  sub_1001DB298(a1, a2, (void (**)(void, void))a3);
  _Block_release(a3);
  _Block_release(a3);
}

uint64_t sub_1001DACA4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = _swiftEmptyDictionarySingleton;
  v28[0] = 116;
  v28[1] = 0xE100000000000000;
  AnyHashable.init<A>(_:)();
  sub_100169A40(a1, v29);
  sub_1001658C4((uint64_t)v30);
  if (*(void *)&v29[24])
  {
    if (swift_dynamicCast()) {
      sub_1001DD42C();
    }
  }
  else
  {
    sub_1000185A8((uint64_t)v29, &qword_100326FD0);
  }
  sub_1001AF298(a1);
  sub_10001A2B4((uint64_t)v28, (uint64_t)v29, &qword_1003268C8);
  if (sub_10018BFA8((uint64_t)v29) != 1)
  {
    memcpy(v30, v29, sizeof(v30));
    sub_10001A2B4((uint64_t)&v30[104], (uint64_t)v31, &qword_100327A70);
    sub_10001A2B4((uint64_t)v31, (uint64_t)v32, &qword_100327A70);
    if (v32[1])
    {
      sub_100179D74((uint64_t)v31);
      sub_10018C018(v28);
LABEL_11:
      sub_1001DD42C();
      goto LABEL_13;
    }
    sub_10018C018(v28);
  }
  uint64_t v24 = 0x676E656C6C616863;
  unint64_t v25 = 0xEB00000000644965;
  AnyHashable.init<A>(_:)();
  sub_100169A40(a1, &v26);
  sub_1001658C4((uint64_t)v23);
  if (v27)
  {
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  sub_1000185A8((uint64_t)&v26, &qword_100326FD0);
LABEL_13:
  static GKLog.daemon.getter();
  swift_retain_n();
  uint64_t v8 = Logger.logObject.getter();
  uint64_t v9 = v6;
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v10))
  {
    uint64_t v21 = v9;
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v20 = v2;
    uint64_t v22 = v7;
    v23[0] = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v19 = v11 + 4;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v13 = Dictionary.description.getter();
    unint64_t v15 = v14;
    swift_bridgeObjectRelease();
    uint64_t v24 = sub_100174CE4(v13, v15, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v10, "LeaderboardChallengeBulletin notifyUIUpdate with userInfo:%s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v3 + 8))(v21, v20);
    uint64_t v7 = v22;
  }
  else
  {

    swift_release_n();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
  }
  uint64_t v16 = self;
  void v23[4] = (uint64_t)sub_1001DD5E0;
  v23[5] = v7;
  v23[0] = (uint64_t)_NSConcreteStackBlock;
  v23[1] = 1107296256;
  void v23[2] = (uint64_t)sub_1001DD064;
  v23[3] = (uint64_t)&unk_1002DF510;
  uint64_t v17 = _Block_copy(v23);
  swift_retain();
  swift_release();
  [v16 enumerateClientsUsingBlock:v17];
  _Block_release(v17);
  return swift_release();
}

void sub_1001DB298(uint64_t a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v5 = sub_10000D938(&qword_100326298);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  unint64_t v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v12, v15);
  uint64_t v18 = (char *)&v48 - v17;
  __chkstk_darwin(v16, v19);
  uint64_t v21 = (char *)&v48 - v20;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = a3;
  _Block_copy(a3);
  sub_1001AF298(a1);
  sub_10001A2B4((uint64_t)v59, (uint64_t)v60, &qword_1003268C8);
  if (sub_10018BFA8((uint64_t)v60) == 1)
  {
    static GKLog.daemon.getter();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v23, v24))
    {
      unint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "LeaderboardChallengeBulletin parseLeaderboardChallengeBulletin failed to decode relationships", v25, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v21, v9);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    ((void (**)(void, Class))a3)[2](a3, isa);

    goto LABEL_23;
  }
  uint64_t v52 = v22;
  memcpy(__dst, v60, sizeof(__dst));
  uint64_t v49 = v62;
  uint64_t v50 = v61;
  long long v65 = v63;
  long long v66 = v64;
  type metadata accessor for LeaderboardChallengeBulletin();
  uint64_t v27 = swift_bridgeObjectRetain();
  id v28 = sub_100189778(v27);
  if (v28)
  {
    id v51 = v28;
    uint64_t v53 = 0x656C746974;
    unint64_t v54 = 0xE500000000000000;
    AnyHashable.init<A>(_:)();
    sub_100169A40(a1, &v57);
    sub_1001658C4((uint64_t)&v55);
    if (v58)
    {
      if ((swift_dynamicCast() & 1) == 0)
      {
LABEL_19:
        sub_10018C018(v59);
        goto LABEL_20;
      }
      uint64_t v29 = v54;
      uint64_t v48 = v53;
      uint64_t v53 = 0x6567617373656DLL;
      unint64_t v54 = 0xE700000000000000;
      AnyHashable.init<A>(_:)();
      sub_100169A40(a1, &v57);
      sub_1001658C4((uint64_t)&v55);
      if (v58)
      {
        if (swift_dynamicCast())
        {
          uint64_t v30 = v53;
          uint64_t v31 = v54;
          id v32 = v51;
          [v51 setBulletinType:1600];
          sub_1001DD5E8(v48, v29, v32, (SEL *)&selRef_setTitle_);
          sub_1001DD5E8(v30, v31, v32, (SEL *)&selRef_setMessage_);
          uint64_t v34 = v49;
          uint64_t v33 = v50;
          if (v49)
          {
            id v35 = objc_allocWithZone((Class)GKBulletinAction);
            swift_bridgeObjectRetain();
            id v36 = [v35 init];
            [v36 setType:0];
            uint64_t v55 = 0;
            uint64_t v56 = 0xE000000000000000;
            _StringGuts.grow(_:)(31);
            swift_bridgeObjectRelease();
            uint64_t v55 = 0xD00000000000001DLL;
            uint64_t v56 = 0x80000001002B3190;
            v37._uint64_t countAndFlagsBits = v33;
            v37._object = v34;
            String.append(_:)(v37);
            swift_bridgeObjectRelease();
            sub_1001DD5E8(v55, v56, v36, (SEL *)&selRef_setInfo_);
            [v32 setDefaultAction:v36];
          }
          uint64_t v38 = type metadata accessor for TaskPriority();
          sub_10000D97C((uint64_t)v8, 1, 1, v38);
          uint64_t v39 = swift_allocObject();
          *(void *)(v39 + 16) = 0;
          *(void *)(v39 + 24) = 0;
          memcpy((void *)(v39 + 32), __dst, 0x68uLL);
          *(void *)(v39 + 136) = v33;
          *(void *)(v39 + 144) = v34;
          *(_OWORD *)(v39 + 152) = v65;
          *(_OWORD *)(v39 + 168) = v66;
          *(void *)(v39 + 184) = v32;
          *(void *)(v39 + 192) = sub_10018C300;
          *(void *)(v39 + 200) = v52;
          swift_retain();
          sub_100006CBC();
          swift_release();
          goto LABEL_23;
        }
        swift_bridgeObjectRelease();
        goto LABEL_19;
      }
      swift_bridgeObjectRelease();
    }
    sub_10018C018(v59);
    sub_1000185A8((uint64_t)&v57, &qword_100326FD0);
LABEL_20:
    static GKLog.daemon.getter();
    char v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v44, v45))
    {
      long long v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "LeaderboardChallengeBulletin parseLeaderboardChallengeBulletin failed to get title or message", v46, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
    Class v47 = Array._bridgeToObjectiveC()().super.isa;
    ((void (**)(void, Class))a3)[2](a3, v47);

    goto LABEL_23;
  }
  sub_10018C018(v59);
  static GKLog.daemon.getter();
  long long v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v40, v41))
  {
    long long v42 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v42 = 0;
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "LeaderboardChallengeBulletin parseLeaderboardChallengeBulletin failed to create bulletin", v42, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v10 + 8))(v18, v9);
  Class v43 = Array._bridgeToObjectiveC()().super.isa;
  ((void (**)(void, Class))a3)[2](a3, v43);

LABEL_23:
  swift_release();
  _Block_release(a3);
}

uint64_t sub_1001DB9E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[249] = a7;
  v7[243] = a6;
  v7[237] = a5;
  v7[231] = a4;
  return _swift_task_switch(sub_1001DBA0C, 0, 0);
}

uint64_t sub_1001DBA0C()
{
  uint64_t v2 = *(void *)(v1 + 1848);
  sub_10000D938(&qword_100327E70);
  sub_100017C80();
  *(void *)(v1 + 2000) = *(void *)(v3 + 64);
  uint64_t v4 = sub_100008DE4();
  *(void *)(v1 + 2008) = v4;
  uint64_t v5 = type metadata accessor for URL();
  *(void *)(v1 + 2016) = v5;
  sub_10000D97C(v4, 1, 1, v5);
  uint64_t v6 = swift_task_alloc();
  *(void *)(v1 + 2024) = v6;
  sub_10000D97C(v6, 1, 1, v5);
  sub_10001A2B4(v2, v1 + 1672, &qword_1003268D8);
  sub_10001A2B4(v1 + 1672, v1 + 1432, &qword_1003268D8);
  uint64_t v7 = *(void *)(v1 + 1440);
  if (!v7) {
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)(v1 + 1848);
  uint64_t v9 = *(void *)(v1 + 1448);
  uint64_t v10 = *(void *)(v1 + 1472);
  *(void *)(v1 + 1624) = *(void *)(v1 + 1432);
  *(void *)(v1 + 1632) = v7;
  *(void *)(v1 + 1640) = v9;
  *(_OWORD *)(v1 + 1648) = *(_OWORD *)(v1 + 1456);
  *(void *)(v1 + 1664) = v10;
  sub_10001A2B4(v8 + 56, v1 + 1720, &qword_100327A60);
  sub_10001A2B4(v1 + 1720, v1 + 1384, &qword_100327A60);
  uint64_t v11 = *(void *)(v1 + 1392);
  if (v11)
  {
    long long v12 = *(_OWORD *)(v1 + 1400);
    uint64_t v13 = *(void *)(v1 + 1416);
    uint64_t v14 = *(void *)(v1 + 1424);
    *(void *)(v1 + 1576) = *(void *)(v1 + 1384);
    *(void *)(v1 + 1584) = v11;
    *(_OWORD *)(v1 + 1592) = v12;
    *(void *)(v1 + 1608) = v13;
    *(void *)(v1 + 1616) = v14;
    *(void *)(v1 + 2032) = swift_task_alloc();
    uint64_t v15 = swift_task_alloc();
    *(void *)(v1 + 2040) = v15;
    *(void *)(v15 + 16) = v1 + 1576;
    swift_asyncLet_begin();
    *(void *)(v1 + 2048) = swift_task_alloc();
    uint64_t v16 = swift_task_alloc();
    *(void *)(v1 + 2056) = v16;
    *(void *)(v16 + 16) = v1 + 1624;
    swift_asyncLet_begin();
    sub_1000113AC();
    return _swift_asyncLet_get(v17, v18, v19, v20);
  }
  else
  {
LABEL_6:
    sub_10001A2B4(*(void *)(v1 + 1848) + 56, v1 + 1768, &qword_100327A60);
    sub_10001A2B4(v1 + 1768, v1 + 1336, &qword_100327A60);
    if (*(void *)(v1 + 1344))
    {
      *(void *)(v1 + 2072) = swift_task_alloc();
      uint64_t v22 = (void *)swift_task_alloc();
      *(void *)(v1 + 2080) = v22;
      *uint64_t v22 = v1;
      v22[1] = sub_1001DC46C;
      sub_1000113AC();
      return sub_1001B36AC(v23, v24, v25, v26, v27);
    }
    else
    {
      sub_10001A2B4(v1 + 1672, v1 + 1528, &qword_1003268D8);
      if (!*(void *)(v1 + 1536))
      {
        id v32 = *(void **)(v1 + 2008);
        unint64_t v33 = (*(void *)(v1 + 2000) + 15) & 0xFFFFFFFFFFFFFFF0;
        sub_100011254();
        id v35 = v34;
        sub_100008DE4();
        uint64_t v36 = sub_100017CF0();
        sub_100018184(v36);
        sub_100018484();
        if (v37)
        {
          sub_1000185A8(v33, &qword_100327E70);
          swift_task_dealloc();
        }
        else
        {
          uint64_t v40 = sub_100011CCC();
          v41(v40);
          swift_task_dealloc();
          sub_10000D938(&qword_100326738);
          long long v42 = (__n128 *)sub_10001715C();
          sub_1001DDED0(v42, (__n128)xmmword_10024F840);
          sub_100017B28();
          v43();
          id v44 = objc_allocWithZone((Class)type metadata accessor for BulletinAttachment());
          sub_1001DDE14();
          sub_1001DDF20();
          v42[2].n128_u64[0] = v0;
          specialized Array._endMutation()();
          sub_1001DD4C4((uint64_t)v42, v32);
          uint64_t v45 = sub_1001DDE4C();
          v46(v45);
        }
        sub_100017438();
        uint64_t v47 = swift_task_alloc();
        sub_1001DDE9C(v47);
        sub_100010FEC();
        if (v37)
        {
          id v32 = 0;
        }
        else
        {
          sub_1000177FC(v48);
          uint64_t v49 = sub_100017118();
          v50(v49);
        }
        sub_100010EEC();
        sub_1001DDEB8(v51, "setGameIcon:");

        swift_task_dealloc();
        sub_10000D938(&qword_1003268F0);
        *(_OWORD *)(sub_100017848() + 16) = xmmword_10024F850;
        uint64_t v52 = type metadata accessor for LeaderboardChallengeBulletin();
        sub_1001DDF44(v52);
        uint64_t v53 = sub_1001DDF38();
        v35(v53);
        swift_bridgeObjectRelease();
        sub_1000178A8();
        sub_1001DDEF4();
        swift_task_dealloc();
        swift_task_dealloc();
        sub_1000112AC();
        sub_1000113AC();
        __asm { BRAA            X1, X16 }
      }
      long long v29 = *(_OWORD *)(v1 + 1544);
      *(_OWORD *)(v1 + 1480) = *(_OWORD *)(v1 + 1528);
      *(_OWORD *)(v1 + 1496) = v29;
      *(_OWORD *)(v1 + 1512) = *(_OWORD *)(v1 + 1560);
      *(void *)(v1 + 2088) = swift_task_alloc();
      sub_10001A2B4(v1 + 1512, v1 + 1816, &qword_1003262D0);
      sub_10001A2B4(v1 + 1816, v1 + 1832, &qword_1003262D0);
      if (*(void *)(v1 + 1840))
      {
        uint64_t v30 = (void *)swift_task_alloc();
        *(void *)(v1 + 2096) = v30;
        *uint64_t v30 = v1;
        v30[1] = sub_1001DC734;
        sub_1000113AC();
        return sub_1001B49B8();
      }
      else
      {
        uint64_t v38 = (void *)swift_task_alloc();
        *(void *)(v1 + 2104) = v38;
        *uint64_t v38 = v1;
        v38[1] = sub_1001DC804;
        sub_1000113AC();
        return sub_1001B5078();
      }
    }
  }
}

uint64_t sub_1001DC07C()
{
  sub_1000112E8();
  uint64_t v1 = v0[256];
  uint64_t v2 = swift_task_alloc();
  v0[258] = v2;
  sub_10018C260(v1, v2);
  uint64_t v3 = v0[254];
  return _swift_asyncLet_get(v0 + 2, v3, sub_1001DC110, v0 + 238);
}

uint64_t sub_1001DC110()
{
  return sub_1000111C0((uint64_t)sub_1001DC124);
}

uint64_t sub_1001DC124()
{
  sub_1000181DC();
  sub_100017D24();
  uint64_t v1 = v0[258];
  uint64_t v2 = v0[254];
  uint64_t v3 = v0[253];
  uint64_t v4 = v0[251];
  sub_1000185A8(v3, &qword_100327E70);
  sub_1000185A8(v4, &qword_100327E70);
  sub_10001A2B4(v1, v4, &qword_100327E70);
  sub_10018C260(v2, v3);
  swift_task_dealloc();
  sub_100018250();
  return _swift_asyncLet_finish(v5, v6, v7, v8);
}

uint64_t sub_1001DC1E8()
{
  return sub_1000111C0((uint64_t)sub_1001DC1FC);
}

uint64_t sub_1001DC1FC()
{
  sub_1000112E8();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(void *)(v0 + 2032);
  return _swift_asyncLet_finish(v0 + 16, v1, sub_1001DC280, v0 + 1296);
}

uint64_t sub_1001DC280()
{
  return sub_1000111C0((uint64_t)sub_1001DC294);
}

uint64_t sub_1001DC294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1000181DC();
  sub_100017D24();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(void **)(v10 + 2008);
  unint64_t v12 = (*(void *)(v10 + 2000) + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_100011254();
  uint64_t v14 = v13;
  sub_100008DE4();
  uint64_t v15 = sub_100017CF0();
  sub_100018184(v15);
  sub_100018484();
  if (v16)
  {
    sub_1000185A8(v12, &qword_100327E70);
    swift_task_dealloc();
  }
  else
  {
    uint64_t v17 = sub_100011CCC();
    v18(v17);
    swift_task_dealloc();
    sub_10000D938(&qword_100326738);
    uint64_t v19 = (__n128 *)sub_10001715C();
    sub_1001DDED0(v19, (__n128)xmmword_10024F840);
    sub_100017B28();
    v20();
    id v21 = objc_allocWithZone((Class)type metadata accessor for BulletinAttachment());
    sub_1001DDE14();
    sub_1001DDF20();
    sub_100017FFC();
    sub_1001DD4C4(a9, v11);
    uint64_t v22 = sub_1001DDE4C();
    v23(v22);
  }
  sub_100017438();
  uint64_t v24 = swift_task_alloc();
  sub_1001DDE9C(v24);
  sub_100010FEC();
  if (v16)
  {
    uint64_t v11 = 0;
  }
  else
  {
    sub_1000177FC(v25);
    uint64_t v26 = sub_100017118();
    v27(v26);
  }
  sub_100010EEC();
  sub_1001DDEB8(v28, "setGameIcon:");

  swift_task_dealloc();
  sub_10000D938(&qword_1003268F0);
  *(_OWORD *)(sub_100017848() + 16) = xmmword_10024F850;
  uint64_t v29 = type metadata accessor for LeaderboardChallengeBulletin();
  sub_1001DDF44(v29);
  uint64_t v30 = sub_1001DDF38();
  v14(v30);
  swift_bridgeObjectRelease();
  sub_1000178A8();
  sub_1001DDEF4();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000112AC();
  sub_100018250();
  return v32(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10);
}

uint64_t sub_1001DC46C()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001DC538, 0, 0);
}

uint64_t sub_1001DC538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1000181DC();
  sub_100017D24();
  uint64_t v11 = v10[259];
  uint64_t v12 = v10[253];
  sub_1000185A8(v12, &qword_100327E70);
  sub_10001A2B4(v11, v12, &qword_100327E70);
  swift_task_dealloc();
  uint64_t v13 = (void *)v10[251];
  unint64_t v14 = (v10[250] + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_100011254();
  char v16 = v15;
  sub_100008DE4();
  uint64_t v17 = sub_100017CF0();
  sub_100018184(v17);
  sub_100018484();
  if (v18)
  {
    sub_1000185A8(v14, &qword_100327E70);
    swift_task_dealloc();
  }
  else
  {
    uint64_t v19 = sub_100011CCC();
    v20(v19);
    swift_task_dealloc();
    sub_10000D938(&qword_100326738);
    id v21 = (__n128 *)sub_10001715C();
    sub_1001DDED0(v21, (__n128)xmmword_10024F840);
    sub_100017B28();
    v22();
    id v23 = objc_allocWithZone((Class)type metadata accessor for BulletinAttachment());
    sub_1001DDE14();
    sub_1001DDF20();
    sub_100017FFC();
    sub_1001DD4C4(a9, v13);
    uint64_t v24 = sub_1001DDE4C();
    v25(v24);
  }
  sub_100017438();
  uint64_t v26 = swift_task_alloc();
  sub_1001DDE9C(v26);
  sub_100010FEC();
  if (v18)
  {
    uint64_t v13 = 0;
  }
  else
  {
    sub_1000177FC(v27);
    uint64_t v28 = sub_100017118();
    v29(v28);
  }
  sub_100010EEC();
  sub_1001DDEB8(v30, "setGameIcon:");

  swift_task_dealloc();
  sub_10000D938(&qword_1003268F0);
  *(_OWORD *)(sub_100017848() + 16) = xmmword_10024F850;
  uint64_t v31 = type metadata accessor for LeaderboardChallengeBulletin();
  sub_1001DDF44(v31);
  uint64_t v32 = sub_1001DDF38();
  v16(v32);
  swift_bridgeObjectRelease();
  sub_1000178A8();
  sub_1001DDEF4();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000112AC();
  sub_100018250();
  return v34(v33, v34, v35, v36, v37, v38, v39, v40, a9, a10);
}

uint64_t sub_1001DC734()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001DC8D4, 0, 0);
}

uint64_t sub_1001DC804()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001DC8D4, 0, 0);
}

uint64_t sub_1001DC8D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1000181DC();
  sub_100017D24();
  uint64_t v11 = v10[261];
  uint64_t v12 = v10[251];
  sub_1000185A8(v12, &qword_100327E70);
  sub_10001A2B4(v11, v12, &qword_100327E70);
  swift_task_dealloc();
  uint64_t v13 = (void *)v10[251];
  unint64_t v14 = (v10[250] + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_100011254();
  char v16 = v15;
  sub_100008DE4();
  uint64_t v17 = sub_100017CF0();
  sub_100018184(v17);
  sub_100018484();
  if (v18)
  {
    sub_1000185A8(v14, &qword_100327E70);
    swift_task_dealloc();
  }
  else
  {
    uint64_t v19 = sub_100011CCC();
    v20(v19);
    swift_task_dealloc();
    sub_10000D938(&qword_100326738);
    id v21 = (__n128 *)sub_10001715C();
    sub_1001DDED0(v21, (__n128)xmmword_10024F840);
    sub_100017B28();
    v22();
    id v23 = objc_allocWithZone((Class)type metadata accessor for BulletinAttachment());
    sub_1001DDE14();
    sub_1001DDF20();
    sub_100017FFC();
    sub_1001DD4C4(a9, v13);
    uint64_t v24 = sub_1001DDE4C();
    v25(v24);
  }
  sub_100017438();
  uint64_t v26 = swift_task_alloc();
  sub_1001DDE9C(v26);
  sub_100010FEC();
  if (v18)
  {
    uint64_t v13 = 0;
  }
  else
  {
    sub_1000177FC(v27);
    uint64_t v28 = sub_100017118();
    v29(v28);
  }
  sub_100010EEC();
  sub_1001DDEB8(v30, "setGameIcon:");

  swift_task_dealloc();
  sub_10000D938(&qword_1003268F0);
  *(_OWORD *)(sub_100017848() + 16) = xmmword_10024F850;
  uint64_t v31 = type metadata accessor for LeaderboardChallengeBulletin();
  sub_1001DDF44(v31);
  uint64_t v32 = sub_1001DDF38();
  v16(v32);
  swift_bridgeObjectRelease();
  sub_1000178A8();
  sub_1001DDEF4();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000112AC();
  sub_100018250();
  return v34(v33, v34, v35, v36, v37, v38, v39, v40, a9, a10);
}

uint64_t sub_1001DCAD0(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[4];
  uint64_t v5 = a2[5];
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10001A0C4;
  return sub_1001B36AC(a1, v4, v5, v6, v7);
}

uint64_t sub_1001DCB90(uint64_t a1, uint64_t a2)
{
  sub_10001A2B4(a2 + 32, (uint64_t)(v2 + 4), &qword_1003262D0);
  sub_10001A2B4((uint64_t)(v2 + 4), (uint64_t)(v2 + 2), &qword_1003262D0);
  if (v2[3])
  {
    uint64_t v3 = (void *)swift_task_alloc();
    v2[6] = v3;
    void *v3 = v2;
    v3[1] = sub_1001DCD0C;
    return sub_1001B49B8();
  }
  else
  {
    uint64_t v5 = (void *)swift_task_alloc();
    v2[7] = v5;
    *uint64_t v5 = v2;
    v5[1] = sub_1001DCDCC;
    return sub_1001B5078();
  }
}

uint64_t sub_1001DCD0C()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  swift_task_dealloc();
  sub_100017964();
  return v3();
}

uint64_t sub_1001DCDCC()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v1 = *v0;
  sub_100010D94();
  void *v2 = v1;
  swift_task_dealloc();
  sub_100017964();
  return v3();
}

void sub_1001DCE8C(void *a1)
{
  if (a1)
  {
    sub_1001DD6E8(a1);
    if (v2)
    {
      NSString v3 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v4 = [v3 _gkSHA256Hash];

      uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v7 = v6;

      if (v5 == 0xD00000000000002CLL && v7 == 0x80000001002B3160)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v8 & 1) == 0) {
          return;
        }
      }
      swift_beginAccess();
      uint64_t v9 = swift_bridgeObjectRetain();
      uint64_t v10 = sub_1001DA35C(v9);
      swift_bridgeObjectRelease();
      sub_1001DD654(19, v10, a1);
    }
  }
}

id sub_1001DCFC4(uint64_t a1)
{
  if (a1)
  {
    v2.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v2.super.Class isa = 0;
  }
  v5.receiver = v1;
  v5.Class super_class = (Class)type metadata accessor for LeaderboardChallengeBulletin();
  id v3 = [super initWithPushNotification:v2.super.isa];

  if (v3) {
  return v3;
  }
}

void sub_1001DD064(uint64_t a1, void *a2, uint64_t a3)
{
  objc_super v5 = *(void (**)(void *, uint64_t))(a1 + 32);
  swift_retain();
  id v6 = a2;
  v5(a2, a3);
  swift_release();
}

id sub_1001DD134()
{
  v2.receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for LeaderboardChallengeBulletin();
  return [super init];
}

id sub_1001DD18C(void *a1)
{
  v5.receiver = v1;
  v5.Class super_class = (Class)type metadata accessor for LeaderboardChallengeBulletin();
  id v3 = [super initWithCoder:a1];

  return v3;
}

id sub_1001DD204()
{
  v2.receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for LeaderboardChallengeBulletin();
  return [super dealloc];
}

uint64_t type metadata accessor for LeaderboardChallengeBulletin()
{
  return self;
}

uint64_t sub_1001DD25C()
{
  sub_100017C60();
  uint64_t v0 = sub_1000183CC();
  uint64_t v3 = sub_100168F3C(v0, v1, v2);
  sub_1001DDE64(v3, v4, v5, v6, v7, v8, v9, v10, v12, v13);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001DD2A8()
{
  sub_100017F10();
  uint64_t v0 = sub_1001DDE74();
  uint64_t v4 = sub_100169030(v0, v1, v2, v3);
  sub_1001DDE64(v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001DD2FC()
{
  sub_100017C60();
  sub_1000183CC();
  sub_1001692F0();
  sub_1001DDE64(v0, v1, v2, v3, v4, v5, v6, v7, v9, v10);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001DD348()
{
  swift_isUniquelyReferenced_nonNull_native();
  sub_100017E84();
  sub_10016942C();
  sub_1001DDE64(v0, v1, v2, v3, v4, v5, v6, v7, v9, v10);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001DD3D8()
{
  sub_100017F10();
  uint64_t v0 = sub_1001DDE74();
  uint64_t v4 = sub_100169554(v0, v1, v2, v3);
  sub_1001DDE64(v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001DD42C()
{
  swift_isUniquelyReferenced_nonNull_native();
  sub_100017E84();
  sub_100169784();
  sub_1001DDE64(v0, v1, v2, v3, v4, v5, v6, v7, v9, v10);

  return swift_bridgeObjectRelease();
}

void sub_1001DD4AC(uint64_t a1, uint64_t a2, void *a3)
{
}

void sub_1001DD4B8(uint64_t a1, uint64_t a2, void *a3)
{
}

void sub_1001DD4C4(uint64_t a1, void *a2)
{
  type metadata accessor for BulletinAttachment();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a2 setAttachments:isa];
}

uint64_t sub_1001DD538(void *a1)
{
  id v2 = [a1 info];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_1001DD5A8()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1001DD5E0(void *a1)
{
}

void sub_1001DD5E8(uint64_t a1, uint64_t a2, void *a3, SEL *a4)
{
  id v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a3 *a4 v6];
}

void sub_1001DD654(uint64_t a1, uint64_t a2, void *a3)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a3 refreshContentsForDataType:a1 userInfo:isa];
}

uint64_t sub_1001DD6E8(void *a1)
{
  id v1 = [a1 originalBundleIdentifier];
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_1001DD74C()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001DD784()
{
  swift_unknownObjectRelease();
  if (*(void *)(v0 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 96))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 160))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  swift_release();

  return _swift_deallocObject(v0, 208, 7);
}

uint64_t sub_1001DD828()
{
  sub_1000181DC();
  sub_100017D24();
  uint64_t v0 = swift_task_alloc();
  id v1 = (void *)sub_100171EBC(v0);
  *id v1 = v2;
  v1[1] = sub_100171648;
  sub_100018250();
  return sub_1001DB9E0(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1001DD8E4()
{
  sub_100010DA4();
  uint64_t v2 = v1;
  uint64_t v3 = *(void **)(v0 + 16);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_100171EBC(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_100171E3C;
  return sub_1001DCAD0(v2, v3);
}

uint64_t sub_1001DD978()
{
  sub_100010DA4();
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_100171EBC(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_100171648;
  return sub_1001DCB90(v2, v3);
}

unint64_t sub_1001DDA0C()
{
  unint64_t result = qword_100328760;
  if (!qword_100328760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100328760);
  }
  return result;
}

uint64_t sub_1001DDA58(uint64_t a1, int *a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v3;
  void *v3 = v2;
  v3[1] = sub_1001DDB38;
  return v5(v2 + 32);
}

uint64_t sub_1001DDB38()
{
  sub_100010DA4();
  sub_100011168();
  uint64_t v2 = v1;
  uint64_t v4 = *(unsigned char **)(v3 + 16);
  uint64_t v5 = *v0;
  sub_100010D94();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  *uint64_t v4 = *(unsigned char *)(v2 + 32);
  uint64_t v7 = *(uint64_t (**)(void))(v5 + 8);
  return v7();
}

uint64_t sub_1001DDC1C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001DDC54()
{
  sub_1000112E8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100171EBC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100171E3C;
  uint64_t v3 = sub_10001808C();
  return v4(v3);
}

unsigned char *storeEnumTagSinglePayload for GKFeatureFlags(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1001DDD88);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for GKFeatureFlags()
{
  return &type metadata for GKFeatureFlags;
}

unint64_t sub_1001DDDC4()
{
  unint64_t result = qword_100328780;
  if (!qword_100328780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100328780);
  }
  return result;
}

id sub_1001DDE14()
{
  return sub_1001C4118(0x656D686361747461, 0xEC000000315F746ELL, v0, 1);
}

uint64_t sub_1001DDE4C()
{
  return v0;
}

uint64_t sub_1001DDE64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = *v10;
  *uint64_t v10 = a10;
  return result;
}

uint64_t sub_1001DDE74()
{
  void *v0 = 0x8000000000000000;
  return v1;
}

uint64_t sub_1001DDE9C(uint64_t a1)
{
  return sub_10018C260(v1, a1);
}

id sub_1001DDEB8(uint64_t a1, const char *a2)
{
  return [v3 a2:v2];
}

uint64_t sub_1001DDED0(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return swift_task_alloc();
}

uint64_t sub_1001DDEF4()
{
  return sub_1000185A8(v0, v1);
}

uint64_t sub_1001DDF0C()
{
  return v0;
}

uint64_t sub_1001DDF20()
{
  return swift_task_dealloc();
}

uint64_t sub_1001DDF38()
{
  return v0;
}

id sub_1001DDF44(uint64_t a1)
{
  *(void *)(v1 + 56) = a1;
  *(void *)(v1 + 32) = v2;
  return v2;
}

void sub_1001DDF5C(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10000D938(&qword_100328968);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  if (!*(void *)(*v1 + 16))
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  sub_1001AFD48(*v1, (uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for MultiplayerActivityEventFilter.TrackedSession(0);
  if (sub_10000DB14((uint64_t)v6, 1, v8) != 1)
  {
    sub_1001DF928((uint64_t)v6, a1);
    if (*(void *)(v7 + 16))
    {
      sub_1001A523C(0, 1);
      return;
    }
    goto LABEL_6;
  }
LABEL_7:
  __break(1u);
}

uint64_t sub_1001DE034(uint64_t a1)
{
  uint64_t v6 = &type metadata for String;
  uint64_t v4 = 0;
  unint64_t v5 = 0xE000000000000000;
  sub_100170D50(a1, *(void *)(a1 + 24));
  dispatch thunk of MetricsFieldsBuilder.addValue(_:forField:)();
  uint64_t result = sub_100016C38((uint64_t)&v4);
  if (!v1)
  {
    uint64_t v6 = &type metadata for String;
    uint64_t v4 = 0;
    unint64_t v5 = 0xE000000000000000;
    sub_100170D50(a1, *(void *)(a1 + 24));
    dispatch thunk of MetricsFieldsBuilder.addValue(_:forField:)();
    return sub_100016C38((uint64_t)&v4);
  }
  return result;
}

uint64_t sub_1001DE12C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14GameDaemonCore33MultiplayerActivityFieldsProvider_category;
  type metadata accessor for MetricsFieldsProviderCategory();
  sub_100017A38();
  (*(void (**)(uint64_t))(v2 + 8))(v1);
  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v3, v4);
}

uint64_t sub_1001DE1C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_100171648;
  return MetricsFieldsProvider.addExpensiveMetricsFields(into:using:)(a1, a2, a3, a4);
}

uint64_t sub_1001DE284@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC14GameDaemonCore33MultiplayerActivityFieldsProvider_category;
  uint64_t v4 = type metadata accessor for MetricsFieldsProviderCategory();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_1001DE2FC(uint64_t a1)
{
  return sub_1001DE034(a1);
}

uint64_t sub_1001DE314()
{
  uint64_t v0 = type metadata accessor for MetricsFieldInclusionRequest();
  sub_1001C2E84(v0, qword_10032DAC8);
  sub_1001C2EE8(v0, (uint64_t)qword_10032DAC8);
  return MetricsFieldInclusionRequest.init(rawValue:)();
}

uint64_t MultiplayerActivityEventFilter.trackedSessions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MultiplayerActivityEventFilter.trackedSessions.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___GKMultiplayerActivityEventFilter_trackedSessions);
  swift_beginAccess();
  void *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*MultiplayerActivityEventFilter.trackedSessions.modify())()
{
  return j__swift_endAccess;
}

id MultiplayerActivityEventFilter.init()()
{
  Class ObjectType = (objc_class *)swift_getObjectType();
  id result = [self shared];
  if (result)
  {
    uint64_t v2 = result;
    [result multiplayerActivityFeedMaxSessionDuration];
    double v4 = v3;

    id v5 = objc_allocWithZone(ObjectType);
    id v6 = MultiplayerActivityEventFilter.init(maxSessionDuration:maxTrackedSessionsCount:)(128, v4);
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id MultiplayerActivityEventFilter.__allocating_init(maxSessionDuration:maxTrackedSessionsCount:)(uint64_t a1, double a2)
{
  id v5 = objc_allocWithZone(v2);
  return MultiplayerActivityEventFilter.init(maxSessionDuration:maxTrackedSessionsCount:)(a1, a2);
}

id MultiplayerActivityEventFilter.init(maxSessionDuration:maxTrackedSessionsCount:)(uint64_t a1, double a2)
{
  Class ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = OBJC_IVAR___GKMultiplayerActivityEventFilter_serialQueue;
  sub_1001649A0();
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8, v6);
  sub_1000110F8();
  uint64_t v7 = v2;
  static DispatchQoS.default.getter();
  type metadata accessor for OS_dispatch_queue.Attributes();
  sub_100017A38();
  __chkstk_darwin(v8, v9);
  sub_1000110F8();
  uint64_t v19 = _swiftEmptyArrayStorage;
  sub_1001649E0();
  sub_10000D938(&qword_100325F20);
  sub_100163934();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  __chkstk_darwin(v10, v11);
  sub_1000110F8();
  (*(void (**)(uint64_t, void))(v14 + 104))(v13 - v12, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:));
  *(void *)&v2[v4] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(double *)&v7[OBJC_IVAR___GKMultiplayerActivityEventFilter_maxSessionDuration] = a2;
  *(void *)&v7[OBJC_IVAR___GKMultiplayerActivityEventFilter_maxTrackedSessionsCount] = a1;
  *(void *)&v7[OBJC_IVAR___GKMultiplayerActivityEventFilter_trackedSessions] = _swiftEmptyArrayStorage;

  v18.receiver = v7;
  v18.Class super_class = ObjectType;
  return [super init];
}

uint64_t MultiplayerActivityEventFilter.filterEvent(metricsFields:)(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return _swift_task_switch(sub_1001DE804, 0, 0);
}

uint64_t sub_1001DE804()
{
  type metadata accessor for MultiplayerActivityReporter();
  uint64_t v1 = static MultiplayerActivityReporter.extractSessionID(fields:)();
  if (v2)
  {
    uint64_t v3 = v1;
    uint64_t v4 = v2;
    uint64_t v6 = v0[3];
    uint64_t v5 = v0[4];
    uint64_t v7 = (void *)swift_task_alloc();
    v7[2] = v5;
    v7[3] = v3;
    void v7[4] = v4;
    void v7[5] = v6;
    sub_10000D938(&qword_1003287B0);
    OS_dispatch_queue.sync<A>(execute:)();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v8 = v0[2];
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = (uint64_t (*)(uint64_t))v0[1];
  return v9(v8);
}

uint64_t sub_1001DE914@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v49 = a4;
  uint64_t v53 = a5;
  uint64_t v8 = sub_10000D938(&qword_100328968);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v50 = (uint64_t)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = type metadata accessor for MultiplayerActivityEventFilter.TrackedSession(0);
  uint64_t v11 = *(void *)(v51 - 8);
  uint64_t v13 = __chkstk_darwin(v51, v12);
  uint64_t v15 = (uint64_t *)((char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = __chkstk_darwin(v13, v16);
  uint64_t v19 = (uint64_t *)((char *)&v46 - v18);
  __chkstk_darwin(v17, v20);
  uint64_t v48 = (uint64_t)&v46 - v21;
  uint64_t v52 = a1;
  uint64_t v22 = (uint64_t *)(a1 + OBJC_IVAR___GKMultiplayerActivityEventFilter_trackedSessions);
  swift_beginAccess();
  uint64_t v23 = *v22;
  uint64_t v24 = *(void *)(*v22 + 16);
  if (v24)
  {
    uint64_t v46 = v11;
    uint64_t v47 = v15;
    uint64_t v25 = v23 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v26 = *(void *)(v11 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1001B8C10(v25, (uint64_t)v19);
      BOOL v27 = *v19 == a2 && v19[1] == a3;
      if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      sub_1001DF880((uint64_t)v19);
      v25 += v26;
      if (!--v24)
      {
        uint64_t v28 = 1;
        uint64_t v11 = v46;
        uint64_t v15 = v47;
        goto LABEL_12;
      }
    }
    uint64_t v29 = v50;
    sub_1001DF928((uint64_t)v19, v50);
    uint64_t v28 = 0;
    uint64_t v11 = v46;
    uint64_t v15 = v47;
    uint64_t v30 = v51;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v28 = 1;
LABEL_12:
    uint64_t v29 = v50;
    uint64_t v30 = v51;
  }
  sub_10000D97C(v29, v28, 1, v30);
  swift_bridgeObjectRelease();
  if (sub_10000DB14(v29, 1, v30) == 1)
  {
    sub_10000DB98(v29, &qword_100328968);
    swift_bridgeObjectRetain();
    static Date.now.getter();
    *uint64_t v15 = a2;
    v15[1] = a3;
    swift_beginAccess();
    sub_1001DF8DC();
    uint64_t v31 = *(void *)(*v22 + 16);
    sub_10018EBA4(v31);
    uint64_t v32 = *v22;
    *(void *)(v32 + 16) = v31 + 1;
    sub_1001DF928((uint64_t)v15, v32+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v11 + 72) * v31);
    uint64_t v33 = *v22;
    swift_endAccess();
    if (*(void *)(v52 + OBJC_IVAR___GKMultiplayerActivityEventFilter_maxTrackedSessionsCount) < *(void *)(v33 + 16))
    {
      swift_beginAccess();
      sub_1001DDF5C((uint64_t)v15);
      swift_endAccess();
      sub_1001DF880((uint64_t)v15);
    }
    uint64_t *v53 = v49;
    return swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v35 = v48;
    sub_1001DF928(v29, v48);
    uint64_t v36 = type metadata accessor for Date();
    uint64_t v37 = *(void *)(v36 - 8);
    uint64_t v38 = *(void *)(v37 + 64);
    __chkstk_darwin(v36, v39);
    uint64_t v40 = static Date.+ infix(_:_:)();
    __chkstk_darwin(v40, v41);
    long long v42 = (char *)&v46 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
    static Date.now.getter();
    char v43 = static Date.> infix(_:_:)();
    id v44 = *(void (**)(char *, uint64_t))(v37 + 8);
    v44(v42, v36);
    v44(v42, v36);
    uint64_t result = sub_1001DF880(v35);
    uint64_t v45 = 0;
    if (v43)
    {
      uint64_t result = swift_bridgeObjectRetain();
      uint64_t v45 = result;
    }
    uint64_t *v53 = v45;
  }
  return result;
}

uint64_t sub_1001DEDA8@<X0>(uint64_t *a1@<X8>)
{
  return sub_1001DE914(v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t sub_1001DEE50(int a1, void *aBlock, void *a3)
{
  _OWORD v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  v3[4] = v5;
  a3;
  uint64_t v6 = (void *)swift_task_alloc();
  void v3[5] = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_1001DEF38;
  return MultiplayerActivityEventFilter.filterEvent(metricsFields:)(v5);
}

uint64_t sub_1001DEF38(uint64_t a1)
{
  sub_100011168();
  uint64_t v4 = v3;
  uint64_t v6 = *(void **)(v5 + 16);
  uint64_t v7 = *v1;
  sub_100010D94();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  if (a1)
  {
    v9.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v9.super.Class isa = 0;
  }
  uint64_t v10 = *(void (***)(void, void))(v4 + 24);
  ((void (**)(void, Class))v10)[2](v10, v9.super.isa);

  _Block_release(v10);
  sub_1000112AC();
  return v11();
}

uint64_t sub_1001DF09C()
{
  return type metadata accessor for MultiplayerActivityFieldsProvider(0);
}

uint64_t type metadata accessor for MultiplayerActivityFieldsProvider(uint64_t a1)
{
  return sub_1001D762C(a1, qword_1003287E0);
}

uint64_t sub_1001DF0C4()
{
  uint64_t result = type metadata accessor for MetricsFieldsProviderCategory();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for MultiplayerActivityEventFilter()
{
  return self;
}

uint64_t *initializeBufferWithCopyOfBuffer for MultiplayerActivityEventFilter.TrackedSession(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for Date();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for MultiplayerActivityEventFilter.TrackedSession(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *initializeWithCopy for MultiplayerActivityEventFilter.TrackedSession(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *assignWithCopy for MultiplayerActivityEventFilter.TrackedSession(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for MultiplayerActivityEventFilter.TrackedSession(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for MultiplayerActivityEventFilter.TrackedSession(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for MultiplayerActivityEventFilter.TrackedSession(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001DF574);
}

uint64_t sub_1001DF574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    return sub_10000DB14(v9, a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for MultiplayerActivityEventFilter.TrackedSession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001DF610);
}

uint64_t sub_1001DF610(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = v5 + *(int *)(a4 + 20);
    return sub_10000D97C(v8, a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for MultiplayerActivityEventFilter.TrackedSession(uint64_t a1)
{
  return sub_1001D762C(a1, qword_1003288E8);
}

uint64_t sub_1001DF6B0()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1001DF748()
{
  _Block_release(*(const void **)(v0 + 24));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001DF790()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = (void *)v0[3];
  uint64_t v3 = (void *)v0[4];
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_100008DC0(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_100171648;
  uint64_t v7 = (uint64_t (*)(int, void *, void *))((char *)&dword_100328928 + dword_100328928);
  return v7(v1, v2, v3);
}

uint64_t sub_1001DF848()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001DF880(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MultiplayerActivityEventFilter.TrackedSession(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001DF8DC()
{
  uint64_t v1 = *v0;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v0 = v1;
  if (!result)
  {
    uint64_t result = sub_1001B7788(0, *(void *)(v1 + 16) + 1, 1, v1);
    uint64_t *v0 = result;
  }
  return result;
}

uint64_t sub_1001DF928(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MultiplayerActivityEventFilter.TrackedSession(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

char *GKGameModeListener.__allocating_init(handler:)(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return GKGameModeListener.init(handler:)(a1, a2);
}

char *GKGameModeListener.init(handler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v44 = a2;
  uint64_t v42 = a1;
  Class ObjectType = (objc_class *)swift_getObjectType();
  type metadata accessor for Logger();
  sub_100011108();
  uint64_t v45 = v3;
  uint64_t v46 = v4;
  uint64_t v6 = __chkstk_darwin(v3, v5);
  uint64_t v41 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v41 - v9;
  *(_DWORD *)&v2[OBJC_IVAR____TtC14GameDaemonCore18GKGameModeListener_gameModeNotificationToken] = -1;
  uint64_t v11 = OBJC_IVAR____TtC14GameDaemonCore18GKGameModeListener_gameModeNotificationQueue;
  sub_1001649A0();
  uint64_t v12 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v12 - 8, v13);
  sub_1000110F8();
  uint64_t v14 = v2;
  static DispatchQoS.default.getter();
  uint64_t v15 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v15, v16);
  sub_1000110F8();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1001649E0();
  sub_10000D938(&qword_100325F20);
  sub_100163934();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  sub_100011108();
  __chkstk_darwin(v17, v18);
  sub_1000110F8();
  (*(void (**)(uint64_t, void))(v21 + 104))(v20 - v19, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:));
  *(void *)&v2[v11] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  static GKLog.daemon.getter();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "GKGameModeListener: Initializing", v24, 2u);
    swift_slowDealloc();
  }

  uint64_t v25 = *(void (**)(char *, uint64_t))(v46 + 8);
  v46 += 8;
  v25(v10, v45);
  uint64_t v26 = &v14[OBJC_IVAR____TtC14GameDaemonCore18GKGameModeListener_gameModeChangedHandler];
  uint64_t v27 = v44;
  *(void *)uint64_t v26 = v42;
  *((void *)v26 + 1) = v27;
  swift_retain();

  v49.receiver = v14;
  v49.Class super_class = ObjectType;
  uint64_t v28 = (char *)[super init];
  int out_token = -1;
  uint64_t v29 = *(void **)&v28[OBJC_IVAR____TtC14GameDaemonCore18GKGameModeListener_gameModeNotificationQueue];
  uint64_t v30 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = sub_1001E0168;
  aBlock[5] = v30;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001E053C;
  aBlock[3] = &unk_1002DF730;
  uint64_t v31 = _Block_copy(aBlock);
  uint64_t v32 = v28;
  uint64_t v33 = v29;
  swift_release();
  uint32_t v34 = notify_register_dispatch("com.apple.system.console_mode_changed", &out_token, v33, v31);
  _Block_release(v31);

  if (v34 || (int v39 = out_token, out_token == -1))
  {
    uint64_t v35 = v41;
    static GKLog.daemon.getter();
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 67109120;
      LODWORD(aBlock[0]) = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "GKGameModeListener: Failed to register for game mode changed notification, status: %u", v38, 8u);
      swift_slowDealloc();
    }
    swift_release();

    v25(v35, v45);
  }
  else
  {

    swift_release();
    *(_DWORD *)&v32[OBJC_IVAR____TtC14GameDaemonCore18GKGameModeListener_gameModeNotificationToken] = v39;
  }
  return v32;
}

uint64_t sub_1001DFF04()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1001DFF3C()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v3 = __chkstk_darwin(v0, v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3, v6);
  uint64_t v8 = (char *)&v17 - v7;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v10 = (void *)Strong;
    static GKLog.daemon.getter();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "GKGameModeListener: Received game mode changed notification", v13, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v5, v0);
    sub_1001E0170();
  }
  else
  {
    static GKLog.daemon.getter();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "GKGameModeListener: Received game mode changed notification after event stream was deallocated name", v16, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v8, v0);
  }
}

void sub_1001E0168()
{
}

uint64_t sub_1001E0170()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = &v30[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = __chkstk_darwin(v5, v8);
  uint64_t v11 = &v30[-v10];
  __chkstk_darwin(v9, v12);
  uint64_t v14 = &v30[-v13];
  uint64_t v15 = OBJC_IVAR____TtC14GameDaemonCore18GKGameModeListener_gameModeNotificationToken;
  if (notify_is_valid_token(*(_DWORD *)(v1
                                       + OBJC_IVAR____TtC14GameDaemonCore18GKGameModeListener_gameModeNotificationToken)))
  {
    uint64_t state64 = 0;
    uint32_t state = notify_get_state(*(_DWORD *)(v1 + v15), &state64);
    if (state)
    {
      uint32_t v17 = state;
      static GKLog.daemon.getter();
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v20 = 67109120;
        uint32_t v34 = v17;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "GKGameModeListener: notify_get_state() failed with error %u", v20, 8u);
        swift_slowDealloc();
      }

      return (*(uint64_t (**)(unsigned char *, uint64_t))(v3 + 8))(v11, v2);
    }
    else
    {
      uint64_t v25 = state64;
      static GKLog.daemon.getter();
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v26, v27))
      {
        BOOL v31 = v25 != 0;
        uint64_t v28 = swift_slowAlloc();
        *(_DWORD *)uint64_t v28 = 134218240;
        swift_beginAccess();
        uint64_t v32 = state64;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v28 + 12) = 1024;
        LODWORD(v32) = v31;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "GKGameModeListener: Game Mode Status is now %lld, calling game mode changed handler with isActive=%{BOOL}d", (uint8_t *)v28, 0x12u);
        swift_slowDealloc();
      }

      (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v14, v2);
      uint64_t v29 = *(void (**)(BOOL))(v1
                                        + OBJC_IVAR____TtC14GameDaemonCore18GKGameModeListener_gameModeChangedHandler);
      swift_retain();
      v29(v25 != 0);
      return swift_release();
    }
  }
  else
  {
    static GKLog.daemon.getter();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "GKGameModeListener: Invalid game mode changed notify token", v24, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(unsigned char *, uint64_t))(v3 + 8))(v7, v2);
  }
}

uint64_t sub_1001E053C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

id GKGameModeListener.__deallocating_deinit()
{
  uint64_t v1 = v0;
  Class ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = type metadata accessor for Logger();
  sub_100011108();
  uint64_t v5 = v4;
  __chkstk_darwin(v6, v7);
  sub_1000110F8();
  uint64_t v10 = v9 - v8;
  static GKLog.daemon.getter();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "GKGameModeListener: Deallocating", v13, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v10, v3);
  uint64_t v14 = OBJC_IVAR____TtC14GameDaemonCore18GKGameModeListener_gameModeNotificationToken;
  int v15 = *(_DWORD *)&v1[OBJC_IVAR____TtC14GameDaemonCore18GKGameModeListener_gameModeNotificationToken];
  if (v15 != -1)
  {
    notify_cancel(v15);
    *(_DWORD *)&v1[v14] = -1;
  }
  v17.receiver = v1;
  v17.Class super_class = ObjectType;
  return [super dealloc];
}

void GKGameModeListener.init()()
{
}

uint64_t sub_1001E07FC()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t type metadata accessor for GKGameModeListener()
{
  return self;
}

uint64_t sub_1001E0848()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001E0880(char a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(v1 + 16) + 16))(*(void *)(v1 + 16), a1 & 1);
}

void *sub_1001E0898(void *result)
{
  *uint64_t result = ++qword_10032DA40;
  return result;
}

uint64_t sub_1001E08B4(mach_port_t a1, int a2, int *a3, uint64_t a4, int a5, _OWORD *a6, void *a7, _DWORD *a8, _DWORD *a9, _DWORD *a10, _DWORD *a11, _DWORD *a12)
{
  int v30 = 1;
  uint64_t v31 = a4;
  int v32 = 16777472;
  int v33 = a5;
  NDR_record_t v34 = NDR_record;
  int v17 = *a3;
  int v35 = a2;
  int v36 = v17;
  int v37 = a5;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x4B000000000;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }
  uint64_t v19 = mach_msg(&msg, 3, 0x40u, 0xDCu, reply_port, 0, 0);
  uint64_t v20 = v19;
  if ((v19 - 268435458) <= 0xE && ((1 << (v19 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }
  else
  {
    if (!v19)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v20 = 4294966988;
      }
      else if (msg.msgh_id == 1300)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          uint64_t v20 = 4294966996;
          if (v30 == 2
            && msg.msgh_size == 212
            && !msg.msgh_remote_port
            && HIBYTE(v32) == 1
            && HIWORD(v35) << 16 == 1114112)
          {
            int v21 = v33;
            if (v33 == v47)
            {
              uint64_t v20 = 0;
              int v22 = *(_DWORD *)&v34.mig_vers;
              *a3 = v38;
              long long v23 = v46;
              a6[6] = v45;
              a6[7] = v23;
              long long v24 = v44;
              a6[4] = v43;
              a6[5] = v24;
              long long v25 = v40;
              *a6 = v39;
              a6[1] = v25;
              long long v26 = v42;
              a6[2] = v41;
              a6[3] = v26;
              *a7 = v31;
              *a8 = v21;
              int v27 = v49;
              *a9 = v48;
              *a10 = v27;
              *a11 = v50;
              *a12 = v22;
              return v20;
            }
          }
        }
        else if (msg.msgh_size == 36)
        {
          uint64_t v20 = 4294966996;
          if (HIDWORD(v31))
          {
            if (msg.msgh_remote_port) {
              uint64_t v20 = 4294966996;
            }
            else {
              uint64_t v20 = HIDWORD(v31);
            }
          }
        }
        else
        {
          uint64_t v20 = 4294966996;
        }
      }
      else
      {
        uint64_t v20 = 4294966995;
      }
      mach_msg_destroy(&msg);
      return v20;
    }
    mig_dealloc_reply_port(msg.msgh_local_port);
  }
  return v20;
}

uint64_t sub_1001E0B10(mach_port_t a1, unsigned int a2, long long *a3)
{
  long long v4 = a3[5];
  long long v19 = a3[4];
  long long v20 = v4;
  long long v5 = a3[7];
  long long v21 = a3[6];
  long long v22 = v5;
  long long v6 = a3[1];
  long long v15 = *a3;
  long long v16 = v6;
  long long v7 = a3[3];
  long long v17 = a3[2];
  NDR_record_t v13 = NDR_record;
  unsigned int v14 = a2;
  long long v18 = v7;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(void *)&msg.msgh_voucher_port = 0x4B100000000;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }
  uint64_t v9 = mach_msg(&msg, 3, 0xA4u, 0x2Cu, reply_port, 0, 0);
  uint64_t v10 = v9;
  if ((v9 - 268435458) <= 0xE && ((1 << (v9 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
    return v10;
  }
  if (v9)
  {
    mig_dealloc_reply_port(msg.msgh_local_port);
    return v10;
  }
  if (msg.msgh_id == 71)
  {
    uint64_t v10 = 4294966988;
LABEL_17:
    mach_msg_destroy(&msg);
    return v10;
  }
  if (msg.msgh_id != 1301)
  {
    uint64_t v10 = 4294966995;
    goto LABEL_17;
  }
  uint64_t v10 = 4294966996;
  if ((msg.msgh_bits & 0x80000000) != 0) {
    goto LABEL_17;
  }
  if (msg.msgh_size != 36) {
    goto LABEL_17;
  }
  if (msg.msgh_remote_port) {
    goto LABEL_17;
  }
  uint64_t v10 = v14;
  if (v14) {
    goto LABEL_17;
  }
  return v10;
}

uint64_t sub_1001E0CA0(mach_port_t a1, int a2, int a3, int a4, _OWORD *a5, uint64_t a6, int a7, _OWORD *a8, void *a9, _DWORD *a10)
{
  int v18 = 1;
  uint64_t v19 = a6;
  int v20 = 16777472;
  int v21 = a7;
  NDR_record_t v22 = NDR_record;
  *(_DWORD *)long long v23 = a2;
  *(_DWORD *)&void v23[4] = a3;
  *(_DWORD *)&v23[8] = a4;
  *(_OWORD *)&v23[12] = *a5;
  int v24 = a7;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x4B200000000;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }
  uint64_t v13 = mach_msg(&msg, 3, 0x54u, 0x50u, reply_port, 0, 0);
  uint64_t v14 = v13;
  if ((v13 - 268435458) <= 0xE && ((1 << (v13 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }
  else
  {
    if (!v13)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v14 = 4294966988;
      }
      else if (msg.msgh_id == 1302)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          uint64_t v14 = 4294966996;
          if (v18 == 1 && msg.msgh_size == 72 && !msg.msgh_remote_port && HIBYTE(v20) == 1)
          {
            int v15 = v21;
            if (v21 == *(_DWORD *)&v23[16])
            {
              uint64_t v14 = 0;
              *a8 = *(_OWORD *)v23;
              *a9 = v19;
              *a10 = v15;
              return v14;
            }
          }
        }
        else if (msg.msgh_size == 36)
        {
          uint64_t v14 = 4294966996;
          if (HIDWORD(v19))
          {
            if (msg.msgh_remote_port) {
              uint64_t v14 = 4294966996;
            }
            else {
              uint64_t v14 = HIDWORD(v19);
            }
          }
        }
        else
        {
          uint64_t v14 = 4294966996;
        }
      }
      else
      {
        uint64_t v14 = 4294966995;
      }
      mach_msg_destroy(&msg);
      return v14;
    }
    mig_dealloc_reply_port(msg.msgh_local_port);
  }
  return v14;
}

uint64_t sub_1001E0E90(mach_port_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(void *)&msg.msgh_voucher_port = 0x4B300000000;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }
  uint64_t v11 = mach_msg(&msg, 3, 0x18u, 0x3Cu, reply_port, 0, 0);
  uint64_t v12 = v11;
  if ((v11 - 268435458) > 0xE || ((1 << (v11 - 2)) & 0x4003) == 0)
  {
    if (v11)
    {
      mig_dealloc_reply_port(msg.msgh_local_port);
      return v12;
    }
    if (msg.msgh_id == 71)
    {
      uint64_t v12 = 4294966988;
    }
    else if (msg.msgh_id == 1303)
    {
      if ((msg.msgh_bits & 0x80000000) == 0)
      {
        if (msg.msgh_size == 52)
        {
          if (!msg.msgh_remote_port)
          {
            uint64_t v12 = v18;
            if (!v18)
            {
              int v15 = v20;
              *a2 = v19;
              *a3 = v15;
              int v16 = v22;
              *a4 = v21;
              *a5 = v16;
              return v12;
            }
            goto LABEL_23;
          }
        }
        else if (msg.msgh_size == 36)
        {
          if (msg.msgh_remote_port) {
            BOOL v13 = 1;
          }
          else {
            BOOL v13 = v18 == 0;
          }
          if (v13) {
            uint64_t v12 = 4294966996;
          }
          else {
            uint64_t v12 = v18;
          }
          goto LABEL_23;
        }
      }
      uint64_t v12 = 4294966996;
    }
    else
    {
      uint64_t v12 = 4294966995;
    }
LABEL_23:
    mach_msg_destroy(&msg);
    return v12;
  }
  mig_put_reply_port(msg.msgh_local_port);
  return v12;
}

uint64_t sub_1001E100C(uint64_t a1)
{
  uint64_t v1 = (uint64_t)*(&off_1002E4860
                + ((107 * ((qword_1003289B8 + dword_1003289E8) ^ 0x8A)) ^ byte_100261210[byte_10025D1D0[(107 * ((qword_1003289B8 + dword_1003289E8) ^ 0x8A))] ^ 1])
                + 134);
  uint64_t v2 = *(void *)(v1 - 4);
  uint64_t v3 = *(&off_1002E4860
       + (byte_10025D0D4[(byte_10025A670[(107 * ((qword_1003289B8 - v2) ^ 0x8A))] ^ 0x34)
                                        - 4] ^ (107 * ((qword_1003289B8 - v2) ^ 0x8A)))
       - 73);
  unint64_t v4 = v2 ^ (unint64_t)&v6 ^ *v3;
  *(void *)(v1 - 4) = (2119093099 * v4) ^ 0x22F8A8F5CDCFC8ALL;
  void *v3 = 2119093099 * (v4 ^ 0x22F8A8F5CDCFC8ALL);
  uint64_t v7 = a1;
  unsigned int v8 = 1755732067 * ((((&v7 | 0x8E3313F8) ^ 0xFFFFFFFE) - (~&v7 | 0x71CCEC07)) ^ 0xAF0A51DC)
     + 347;
  LOBYTE(v3) = 107 * (*(_DWORD *)(v1 - 4) ^ 0x8A ^ *(_DWORD *)v3);
  return (*(uint64_t (**)(uint64_t *))((char *)*(&off_1002E4860
                                                        + ((107
                                                                                         * ((qword_1003289B8
                                                                                           + dword_1003289E8) ^ 0x8A)) ^ byte_100261110[byte_10025CFD0[(107 * ((qword_1003289B8 + dword_1003289E8) ^ 0x8A))] ^ 0x2C])
                                                        + 32)
                                              + 8
                                              * (byte_100261114[(byte_10025CFDC[v3 - 12] ^ 0xB)
                                                                                             - 4] ^ v3)
                                              + 17556))(&v7);
}

uint64_t sub_1001E120C(unsigned int a1)
{
  return byte_100261114[(byte_10025CFDC[a1 - 12] ^ 0x4D) - 4] ^ a1;
}

uint64_t sub_1001E123C(unsigned int a1)
{
  return byte_100261210[byte_10025D1DC[a1 - 12] ^ 0x7D] ^ a1;
}

uint64_t sub_1001E1268(char a1, unsigned int a2)
{
  return byte_100256F14[(byte_10026141C[a2 - 12] ^ a1) - 4] ^ a2;
}

uint64_t sub_1001E1294(unsigned int a1)
{
  return byte_100261518[(byte_10025D3D0[a1] ^ 0x12) - 8] ^ a1;
}

uint64_t sub_1001E12C4(unsigned int a1)
{
  return byte_100261518[(byte_10025D3D0[a1] ^ 0xDB) - 8] ^ a1;
}

uint64_t sub_1001E12F4(unsigned int a1)
{
  return byte_100261114[(byte_10025CFDC[a1 - 12] ^ 0xB) - 4] ^ a1;
}

uint64_t sub_1001E1324(unsigned int a1)
{
  return byte_100261114[(byte_10025CFDC[a1 - 12] ^ 0xCD) - 4] ^ a1;
}

uint64_t sub_1001E1354(uint64_t a1)
{
  uint64_t v1 = *(&off_1002E4860
       + ((107 * (dword_1003289E0 ^ 0x8A ^ qword_1003289B8)) ^ byte_100261110[byte_10025CFD0[(107 * (dword_1003289E0 ^ 0x8A ^ qword_1003289B8))] ^ 0x5B])
       - 164);
  unsigned __int8 v2 = 107 * ((qword_1003289B8 + *v1) ^ 0x8A);
  uint64_t v3 = *(&off_1002E4860 + (byte_100261310[byte_10025D2D4[v2 - 4] ^ 0xC5] ^ v2) + 4);
  uint64_t v4 = *v1 - (void)&v6 + *v3;
  *uint64_t v1 = 2119093099 * v4 + 0x6421A82FEAAAFBAELL;
  void *v3 = 2119093099 * (v4 ^ 0x22F8A8F5CDCFC8ALL);
  uint64_t v7 = a1;
  unsigned int v8 = (3804331 * (((&v7 | 0x78672C26) - &v7 + (&v7 & 0x8798D3D8)) ^ 0x6B209D0)) ^ 0x3A6;
  LOBYTE(v3) = 107 * ((*(_DWORD *)v3 - *(_DWORD *)v1) ^ 0x8A);
  return (*(uint64_t (**)(uint64_t *))((char *)*(&off_1002E4860
                                                        + ((107
                                                                                         * ((qword_1003289B8
                                                                                           + dword_1003289E0) ^ 0x8A)) ^ byte_10025D0D0[byte_10025A670[(107 * ((qword_1003289B8 + dword_1003289E0) ^ 0x8A))] ^ 0x9A])
                                                        + 29)
                                              + 8
                                              * (byte_100261518[(byte_10025D3D0[v3] ^ 0xDB)
                                                                                             - 8] ^ v3)
                                              + 16980))(&v7);
}

uint64_t sub_1001E1558(char a1, unsigned int a2)
{
  return byte_100261114[(byte_10025CFDC[a2 - 12] ^ a1) - 4] ^ a2;
}

uint64_t sub_1001E1584(unsigned int a1)
{
  return byte_10025D0D4[(byte_10025A670[a1] ^ 0x34) - 4] ^ a1;
}

uint64_t sub_1001E15B4(char a1, unsigned int a2)
{
  return byte_100261310[(byte_10025D2D4[a2 - 4] ^ a1)] ^ a2;
}

uint64_t sub_1001E15E0(unsigned int a1)
{
  return byte_100256F14[(byte_10026141C[a1 - 12] ^ 0x27) - 4] ^ a1;
}

uint64_t sub_1001E1610(unsigned int a1)
{
  return byte_100261114[(byte_10025CFDC[a1 - 12] ^ 0x5B) - 4] ^ a1;
}

uint64_t sub_1001E1640(unsigned int a1)
{
  return byte_10025D0D4[(byte_10025A670[a1] ^ 0x9A) - 4] ^ a1;
}

uint64_t sub_1001E1670(unsigned int a1)
{
  return byte_100261210[byte_10025D1DC[a1 - 12] ^ 1] ^ a1;
}

uint64_t sub_1001E1698(unsigned int a1)
{
  return byte_100261518[(byte_10025D3D0[a1] ^ 0xB3) - 8] ^ a1;
}

uint64_t sub_1001E16C8(uint64_t a1)
{
  uint64_t v1 = (uint64_t)*(&off_1002E4860
                + ((107 * ((qword_1003289B8 + dword_100328C08) ^ 0x8A)) ^ byte_100261110[byte_10025CFD0[(107 * ((qword_1003289B8 + dword_100328C08) ^ 0x8A))] ^ 0xB])
                + 87);
  uint64_t v2 = *(void *)(v1 - 4);
  uint64_t v3 = *(&off_1002E4860
       + (byte_10025D0D4[(byte_10025A670[(107 * ((qword_1003289B8 - v2) ^ 0x8A))] ^ 0x34)
                                        - 4] ^ (107 * ((qword_1003289B8 - v2) ^ 0x8A)))
       - 73);
  unint64_t v4 = (unint64_t)&v6[*v3 - v2];
  *(void *)(v1 - 4) = 2119093099 * v4 + 0x22F8A8F5CDCFC8ALL;
  void *v3 = 2119093099 * (v4 ^ 0x22F8A8F5CDCFC8ALL);
  unsigned int v8 = 1863 - 1759421093 * ((2 * (&v7 & 0xC091CA8) - &v7 + 1945559892) ^ 0xC08B5300);
  uint64_t v7 = a1;
  LOBYTE(v3) = 107 * ((*(_DWORD *)v3 - *(_DWORD *)(v1 - 4)) ^ 0x8A);
  (*(void (**)(uint64_t *))((char *)*(&off_1002E4860
                                              + ((107
                                                                               * ((qword_1003289B8 - dword_100328C08) ^ 0x8A)) ^ byte_100261110[byte_10025CFD0[(107 * ((qword_1003289B8 - dword_100328C08) ^ 0x8A))] ^ 0xB])
                                              + 103)
                                    + 8
                                    * (byte_100261310[byte_10025D2D4[v3 - 4] ^ 0xC5] ^ v3)
                                    + 17564))(&v7);
  return v9;
}

uint64_t sub_1001E18B4(char a1, unsigned int a2)
{
  return byte_10025D0D4[(byte_10025A670[a2] ^ a1) - 4] ^ a2;
}

uint64_t sub_1001E18E0(char a1, unsigned int a2)
{
  return byte_100261210[(byte_10025D1DC[a2 - 12] ^ a1)] ^ a2;
}

uint64_t sub_1001E190C(unsigned int a1)
{
  return byte_100261310[byte_10025D2D4[a1 - 4] ^ 0x4A] ^ a1;
}

uint64_t sub_1001E1938(char a1, unsigned int a2)
{
  return byte_100261518[(byte_10025D3D0[a2] ^ a1) - 8] ^ a2;
}

uint64_t sub_1001E1964(unsigned int a1)
{
  return byte_100261518[(byte_10025D3D0[a1] ^ 0xA3) - 8] ^ a1;
}

uint64_t sub_1001E1994(unsigned int a1)
{
  return byte_100261310[byte_10025D2D4[a1 - 4] ^ 0xC5] ^ a1;
}

uint64_t sub_1001E19C0(unsigned int a1)
{
  return byte_100261518[(byte_10025D3D0[a1] ^ 0xD0) - 8] ^ a1;
}

uint64_t sub_1001E19F0(unsigned int a1)
{
  return byte_100261114[(byte_10025CFDC[a1 - 12] ^ 0x2C) - 4] ^ a1;
}

void sub_1001E1A20(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 32) - 1224239923 * ((-2 - ((a1 | 0xAACC30C4) + (~a1 | 0x5533CF3B))) ^ 0xA78032EC);
  __asm { BRAA            X14, X17 }
}

uint64_t sub_1001E1B38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(v10
                                                             + 8
                                                             * (int)(((((a7 - 370) | 0x49)
                                                                     + v7
                                                                     + ((a7 + 1234610901) & 0xFF7FD6D7))
                                                                    * ((v8 & 0x18) == 0)) ^ a7)))(a1, a2, (v9 - a2));
}

uint64_t sub_1001E1B84(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(v8 + 8 * ((108 * (a8 + 1 == v9 + 32)) ^ a1)))();
}

uint64_t sub_1001E1C54(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((1594
                                * ((v6 & (2 * (*(unsigned __int8 *)(a2 + 5) - 242)))
                                 + ((v2 + v4 - 400) ^ 0x47F3FA33 ^ (*(unsigned __int8 *)(a2 + 5) - 242)) == v5)) ^ v4)))();
}

uint64_t sub_1001E1CA0()
{
  LODWORD(STACK[0x4EC]) = v2;
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (v0 ^ (8
                                     * ((v0 ^ 0x690u) - 23692131 + *(_DWORD *)(STACK[0x388] + 360) - 759 >= ((v0 - 577) | 0xD1u) - 759)))))();
}

uint64_t sub_1001E1CF0@<X0>(int a1@<W2>, int a2@<W3>, int a3@<W8>)
{
  *(unsigned char *)(v3 + (v5 + a1 + 407)) = *(unsigned char *)(v4 + (v5 + a1 + 407))
                                                 - ((*(unsigned char *)(v4 + (v5 + a1 + 407)) << (-83 * (a2 ^ 0x58) - 89)) & 0x30)
                                                 + 24;
  return (*(uint64_t (**)(void))(v6 + 8 * ((254 * (a1 - 1 == a3)) ^ a2)))();
}

uint64_t sub_1001E1D48@<X0>(uint64_t a1@<X6>, int a2@<W8>)
{
  *(int8x16_t *)(a1 + (a2 + 16)) = vaddq_s8(vsubq_s8(*v3, vandq_s8(vaddq_s8(*v3, *v3), v7)), v8);
  return (*(uint64_t (**)(void))(v6 + 8 * (((v4 == 16) * v5) ^ v2)))();
}

uint64_t sub_1001E1D54(uint64_t a1, int a2, uint64_t a3, int a4)
{
  *(void *)(v8 + (v5 + v4)) = *(void *)(v7 + (v5 + v4));
  return (*(uint64_t (**)(uint64_t, void))(v9 + 8 * (((a2 == 0) * a4) ^ v6)))(a1, (a2 + 8));
}

uint64_t sub_1001E1D84(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  return (*(uint64_t (**)(void))(v8 + 8 * ((((a7 ^ 0x9D0) - 1052) * ((a3 + a8 - 16) < 0xFFFFFFF0)) ^ a7)))();
}

uint64_t sub_1001E1DBC(int a1)
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((299 * (*(_DWORD *)(v1 + 4 * v2) == a1 + v3 - 1065 + 7 * (v3 ^ 0x693) - 2218)) ^ v3)))();
}

uint64_t sub_1001E1E00@<X0>(int a1@<W0>, int a2@<W1>, unsigned int a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X6>, int a7@<W8>)
{
  BOOL v12 = a3 < v10;
  *(unsigned char *)(a6 + (a7 + a1)) = *(unsigned char *)(a5 + (v7 + v9))
                                           + ~(((v8 ^ a4) - 2) & (2 * *(unsigned char *)(a5 + (v7 + v9))))
                                           + 25;
  unsigned int v13 = v7 + 1 + a2;
  int v14 = v12 ^ (v13 < v10);
  BOOL v15 = v13 < a3;
  if (!v14) {
    BOOL v12 = v15;
  }
  return (*(uint64_t (**)(void))(v11 + 8 * ((127 * !v12) ^ v8)))();
}

void sub_1001E1E74(uint64_t a1@<X8>)
{
  *(void *)(a1 - 0x147CEA7F17742063) = v2;
  *(_DWORD *)(v1 + 32) = 605940026;
}

uint64_t sub_1001E1ED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v9
                              + 8
                              * (int)((((v8 - 1612717675) & 0xED23DBBF ^ (v6 + 566) ^ ((v8 - 911) | 0x180)) * (v7 == a6)) ^ v8)))();
}

uint64_t sub_1001E1F1C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((232 * (a2 + 1 == v4 + 64)) ^ v2)))();
}

uint64_t sub_1001E1FD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if (a31 == 2) {
    return (*(uint64_t (**)(uint64_t))(v36
  }
                                              + 8
                                              * (((LODWORD(STACK[0x2C0]) == 606950823) * (((v37 - 16) | 0x49) ^ 0x96)) ^ (v37 + 57))))(a11);
  if (a31 == 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v36
  }
                                                       + 8
                                                       * ((326
                                                         * (((LODWORD(STACK[0x2C0]) == 606950823) ^ (v37 - 1)) & 1)) ^ (v37 + 134))))(a1, a11);
  unint64_t v39 = ((unint64_t)&a36 ^ 0xFFF7BFEDD7F0FFF5)
      + 0x7DFDDEF6B93F7F0BLL
      + (((void)&a36 << (v37 ^ 0x11u)) & 0xFFEF7FDBAFE1FFE0);
  LOBYTE(STACK[0x2BF]) = (v39 ^ 0xBA) * (v39 + 17);
  BOOL v40 = (((v37 ^ 0x227) - 567) | 0x10) == 107;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 8 * ((v40 | (8 * v40)) ^ v37 ^ 0x227)))(a1, a11);
}

uint64_t sub_1001E2140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  return (*(uint64_t (**)(void))(v7
                              + 8
                              * ((((((a5 + a7 - 16) < 0xFFFFFFF0) ^ (a6 + 123)) & 1)
                                * (a6 - 1265)) | a6)))();
}

uint64_t sub_1001E218C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(void))(v5 + 8 * ((3193 * (((a5 - 288) & v6) == ((a5 + 420) ^ 0x2DC))) ^ (a5 + 761))))();
}

uint64_t sub_1001E21CC@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  int v19 = a1 + 647;
  *(void *)(v18 - 104) = a17;
  *(void *)(v18 - 128) = a17;
  *(void *)(v18 - 120) = a16;
  *(void *)(v18 - 144) = a15;
  *(void *)(v18 - 136) = a5;
  *(_DWORD *)(v18 - 112) = a1
                         + 1224239923
                         * ((1237618092
                           - ((v18 - 144) ^ 0x4DA515E4 | 0x49C48DAC)
                           + ((v18 - 144) ^ 0x4DA515E4 | 0xB63B7253)) ^ 0x92D9A60)
                         + 417;
  uint64_t v20 = (*(uint64_t (**)(uint64_t))(v17 + 8 * (a1 + 2075)))(v18 - 144);
  return (*(uint64_t (**)(uint64_t))(v17
                                            + 8
                                            * (((a14 - 1206753084 < ((v19 - 195) | 0x540u) + 2147481660) * (v19 - 739)) ^ (v19 - 272))))(v20);
}

uint64_t sub_1001E22AC@<X0>(int a1@<W1>, int a2@<W7>, int a3@<W8>)
{
  int v6 = *(_DWORD *)(v4 + v3 * (uint64_t)a2 + 36);
  BOOL v8 = (v6 - 875378353 > 1676350273 || v6 - 875378353 < SLODWORD(STACK[0x430])) && v6 != a1;
  return (*(uint64_t (**)(void))(v5 + 8 * (int)((v8 * (((a3 - 396) ^ 0xFFFFF851) + a3 - 1829)) | a3)))();
}

uint64_t sub_1001E2310@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, int a8@<W8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  int v28 = a8 + 1;
  *(unsigned char *)(v24 + (v20 + v28 + 168)) = *(unsigned char *)((v21 ^ v22) + a20 + v27 + v23)
                                                    - ((2 * *(unsigned char *)((v21 ^ v22) + a20 + v27 + v23)) & 0x30)
                                                    + 24;
  uint64_t v29 = *(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 8 * ((((a4 + v28 + 1) < 0x40) * v25) ^ v21));
  return v29(v29, a1, a2, a3, a4, a5, a6, a7, a9, a10, a11, a12);
}

uint64_t sub_1001E2318@<X0>(int a1@<W2>, unsigned int a2@<W3>, uint64_t a3@<X8>, uint8x8_t a4@<D0>)
{
  a4.i32[0] = *(_DWORD *)(a3 + a2 + 1);
  *(_DWORD *)(a3 - 3 + (v5 + v4)) = vmovn_s16((int16x8_t)vmovl_u8(a4)).u32[0];
  return (*(uint64_t (**)(void))(v7 + 8 * (((v6 == 4) * ((((a1 | 0x12) - 1080) | 0x201) - 873)) ^ (a1 | 0x12))))();
}

uint64_t sub_1001E2374()
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((((v1 & (2 * (*(unsigned __int8 *)(v2 + 2) - 72)))
                                 + ((*(unsigned __int8 *)(v2 + 2) - 72) ^ v0) == v0)
                                * (7 * (v3 ^ 0x356) + 2099)) ^ v3)))();
}

uint64_t sub_1001E23B8@<X0>(uint64_t a1@<X8>)
{
  BOOL v8 = v4 > 0xE320CA94;
  *(unsigned char *)(a1 + (v6 - 1155520751)) = *(unsigned char *)(v1 + (v6 - 1155520751));
  if (v8 == v6 - 671130499 < v3) {
    BOOL v8 = v6 - 671130499 < v5;
  }
  return (*(uint64_t (**)(void))(v7 + 8 * ((v8 * ((v2 + 1058) ^ 0x6B5)) ^ v2)))();
}

void sub_1001E2428(void *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  BOOL v19 = v8 > a2;
  uint64_t v20 = 4 * (v16 + ((v10 + 1326) ^ (v13 + 696)));
  int v21 = v7 + v15 + (*(_DWORD *)(*v11 + v20) ^ v17) + (*(_DWORD *)(*v12 + v20) ^ v17);
  *(_DWORD *)(*a1 + v20) = v21 + v17 - (v14 & (2 * v21));
  if (v19 == v16 + a6 < a7) {
    BOOL v19 = v16 + a6 < v9;
  }
  __asm { BRAA            X7, X17 }
}

uint64_t sub_1001E2AD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v8
                              + 8
                              * ((181 * (v7 + a6 + v6 + ((v6 + 1962694640) & 0x8B03A1BF) - 2355 < 0x7FFFFF7D)) ^ v6)))();
}

uint64_t sub_1001E2B24@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (((*(unsigned __int8 *)(v2 + a1) == 152) * ((a2 ^ 0x140) + 2 * (a2 ^ 0x1BE) - 1701)) ^ a2)))();
}

uint64_t sub_1001E2B60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001FDB3C(a1, a2, a3, a4, 704864277);
}

uint64_t sub_1001E2B78@<X0>(uint64_t a1@<X8>, uint64_t a2, char a3)
{
  unsigned int v8 = (v5 + 1298549710) & 0xB299AEE3;
  (*(void (**)(void, void, void))(v6 + 8 * (v5 ^ 0xF46)))(**(unsigned int **)(a1 + 8 * (v5 - 1919)), *v4, v8 + v3 + *(_DWORD *)(v7 - 0x38C18B7A1BA31324));
  unint64_t v9 = ((unint64_t)&a3 ^ 0x77CB3EFFB7FDDE6FLL)
     - 0x550008E1A524FF6FLL
     + ((2 * (void)&a3) & 0xEF967DFF6FFBBCD0);
  unint64_t v10 = (v8 - 855478997) & 0x32FD95DB ^ 0xFFFFFFFFFFFFFAB5;
  *(unsigned char *)(v7 - 0x38C18B7A1BA3132CLL + v10 + 32) = (v9 ^ 0xBA) * (v9 + 17);
  return (*(uint64_t (**)(void))(v6 + 8 * (int)((((v10 == -32) << 9) | ((v10 == -32) << 10)) ^ v8)))();
}

uint64_t sub_1001E2C80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return (*(uint64_t (**)(void))(v11
                              + 8
                              * ((v9 + 405) | 0x104 | (2
                                                     * (*(_DWORD *)(v10
                                                                  + (int)(((((v9 + 405) | 0x104) + 431) ^ 0xE7E7B2C1)
                                                                        + v8)
                                                                  * (uint64_t)a8) == (((v9 + 405) | 0x104) ^ 0x1FDD3406))))))();
}

uint64_t sub_1001E2CEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v7 = *(void *)(v4 - 0x38C18B7A1BA3132CLL);
  int v8 = ((*(unsigned __int8 *)(v7 + (v3 - 1225318618)) ^ 0x18) << (((27 * (v6 ^ 0x6C)) ^ 0x74) + 45)) | ((*(unsigned __int8 *)(v7 + (v3 - 1225318619)) ^ 0x18) << 24) | ((*(unsigned __int8 *)(v7 + (v3 - 1225318617)) ^ 0x18) << 8) | *(unsigned __int8 *)(v7 + (v3 - 1225318616)) ^ 0x18;
  BOOL v9 = ((v8 + v2 - ((2 * v8) & 0x483BD274)) & 0xFFFFFF ^ 0x1DE93A) - (*(_DWORD *)(a1 + 32) ^ v5) != -108174678;
  return (*(uint64_t (**)(void))(a2 + 8 * ((v9 | (4 * v9)) ^ v6)))();
}

uint64_t sub_1001E2DBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v19 = 1759421093 * ((v18 + 479994984 - 2 * ((v18 - 136) & 0x1C9C24F0)) ^ 0xAFE194A4);
  *(void *)(v18 - 128) = v16;
  *(_DWORD *)(v18 - 120) = v15 - v19 + 985;
  *(_DWORD *)(v18 - 136) = v15 + 1310 - v19 + v17 + 1167019135;
  (*(void (**)(uint64_t))(v14 + 8 * (v15 ^ 0x992)))(v18 - 136);
  *(void *)(v18 - 128) = a14;
  *(void *)(v18 - 112) = a13;
  *(_DWORD *)(v18 - 120) = v15
                         + 1310
                         + 1178560073 * (((~(v18 - 136) & 0xB317A894) - (~(v18 - 136) | 0xB317A895)) ^ 0x983D0F7)
                         - 612;
  uint64_t v20 = (*(uint64_t (**)(uint64_t))(v14 + 8 * (v15 + 1902)))(v18 - 136);
  return (*(uint64_t (**)(uint64_t))(v14
                                            + 8
                                            * ((363 * (*(_DWORD *)(v18 - 136) > (((v15 - 324) | 0x288) ^ 0x5B89B73Eu))) ^ (v15 + 1310))))(v20);
}

void sub_1001E2EE8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 32) ^ (1225351577 * ((-2 - ((a1 | 0x21ABC784) + (~a1 | 0xDE54387B))) ^ 0xFDCEE06D));
  __asm { BRAA            X10, X17 }
}

uint64_t sub_1001E2FC0()
{
  return sub_1001F3F64(-1633704640);
}

uint64_t sub_1001E3024(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v5 + 8 * (((v4 < a4 - 1973) * (a4 - 1970)) ^ (a4 - 982))))();
}

uint64_t sub_1001E3054(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  v11.i64[0] = 0x1818181818181818;
  v11.i64[1] = 0x1818181818181818;
  uint64_t v12 = a1 + (((a6 - 1634) | 0x49) ^ v7);
  int8x16_t v13 = *(int8x16_t *)(v6 + v12 - 15);
  int8x16_t v14 = *(int8x16_t *)(v6 + v12 - 31);
  uint64_t v15 = v8 + v12;
  *(int8x16_t *)(v15 - 15) = veorq_s8(v13, v11);
  *(int8x16_t *)(v15 - 31) = veorq_s8(v14, v11);
  return (*(uint64_t (**)(void))(v10 + 8 * ((491 * ((v9 & 0xFFFFFFE0) != 32)) ^ (a6 - 1409))))();
}

uint64_t sub_1001E30BC()
{
  return (*(uint64_t (**)(void))(v2 + 8 * (((((v0 + 267) | 0xA5) ^ 0x4EA) * (v1 != v3)) ^ (v0 - 199))))();
}

uint64_t sub_1001E30F4()
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8 * ((v0 - 369) ^ 0xBD3)))(1576, 3012117910);
  STACK[0x640] = v2;
  return (*(uint64_t (**)(void))(v1 + 8 * ((97 * (((v2 == 0) ^ (v0 + 112)) & 1)) | (v0 - 369))))();
}

void sub_1001E315C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 4) - 3804331 * (((a1 | 0x51A664) - (a1 & 0x51A664)) ^ 0x7E848392);
  __asm { BRAA            X8, X17 }
}

uint64_t sub_1001E322C@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, char a19)
{
  *(void *)(&a19 + a2 + a1) = 0x1818181818181818;
  return (*(uint64_t (**)(void))(v21
                              + 8
                              * ((4001 * (((((v20 ^ 0xFA1) - 2018) ^ (((v20 ^ 0x35) & v19) == 8)) & 1) == 0)) ^ v20 ^ 0xFA1)))();
}

uint64_t sub_1001E3298@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((251 * (a2 + 1 == v3 + 16)) ^ a1)))();
}

uint64_t sub_1001E3378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  BOOL v17 = v14 + 1795159567 < (a14 + 1211964903);
  if ((a14 + 1211964903) < 0xC04B1B25 != (v14 + 1795159567) < 0xC04B1B25) {
    BOOL v17 = (a14 + 1211964903) < 0xC04B1B25;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15
                                                                                                  + 8 * ((v17 * (v16 - 137)) ^ v16)))(a1, 1795159567, a3, a4, a5, a6, a7);
}

uint64_t sub_1001E33E8@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  int v10 = v2 - 1310131017;
  unsigned int v11 = (v3 + 1539030756) & 0xA44441FD;
  uint64_t v12 = 4 * (v7 + v4);
  int v13 = (*(_DWORD *)(*(void *)(v9 - 0x1F010F7499D3F79ELL) + v12) ^ v5)
      - (*(_DWORD *)(*(void *)(a2 - 0x1F010F7499D3F79ELL) + v12) ^ v5);
  *(_DWORD *)(*(void *)(a1 - 0x1F010F7499D3F79ELL) + v12) = v13 + v5 - ((v13 << (((v11 + 34) & 0x7A) - 121)) & v8);
  BOOL v15 = v7 - 2031053192 > 837352630 || v7 - 2031053192 < v10;
  return (*(uint64_t (**)(void))(v6 + 8 * (int)((1457 * v15) ^ v11)))();
}

void sub_1001E3524(int a1@<W8>)
{
  int v5 = v3 + 472 - a1 + 1523177148;
  if (*v4 + 244880036 < 0) {
    int v5 = v1;
  }
  sub_1001F21C8(v2 + *v4 + v5 + 47);
}

uint64_t sub_1001E3560()
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((546
                                * ((((*(unsigned __int8 *)(v2 + 4) - 247) << (v3 + 26)) & v1)
                                 + ((*(unsigned __int8 *)(v2 + 4) - 247) ^ v0) == (((v3 + 537) | 9) ^ (v0 - 761)))) ^ v3)))();
}

uint64_t sub_1001E35B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, uint64_t a14, unsigned int a15, unsigned int a16, unsigned int a17, int a18)
{
  unsigned int v22 = (((&a13 | 0xAC92F452) - &a13 + (&a13 & 0x536D0BA8)) ^ 0xE004762F)
      * v21;
  a13 = &STACK[0x44D5F6D91B577B04];
  a14 = a12;
  a15 = v22 - 1444487276;
  a16 = v22 + v20 - 2024874649;
  a17 = 366164236 - v22;
  uint64_t v23 = (*(uint64_t (**)(unint64_t **))(v19 + 8 * (v20 + 660)))(&a13);
  return (*(uint64_t (**)(uint64_t))(v19
                                            + 8
                                            * ((3618
                                              * (a18 == v18
                                                      + ((v20 - 1530) | 0x290)
                                                      + ((v20 + 1524650455) & 0xDFE)
                                                      - 2216)) ^ v20)))(v23);
}

uint64_t sub_1001E369C()
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((((((v0 - 380) ^ 0x5A7) + 32) ^ 0xFDA ^ (47 * ((v0 - 380) ^ 0x5A7))) * (v1 == v2)) ^ (v0 - 380))))();
}

void sub_1001E36E0()
{
  _DWORD *v0 = *(_DWORD *)(v1 - 0x38C18B7A1BA31314);
}

uint64_t sub_1001E3730()
{
  BOOL v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8 * (v1 + 698)))(32, 0x101004023FF3BD5) == 0;
  return (*(uint64_t (**)(void))(v0 + 8 * ((((((v1 ^ 0x11) + 1) ^ v2) & 1) * (v1 - 1540)) ^ v1)))();
}

uint64_t sub_1001E378C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return (*(uint64_t (**)(void))(v10 + 8 * ((1203 * ((a8 + 1 + v9) < 0x30)) ^ v8)))();
}

uint64_t sub_1001E3860(int a1)
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((((v2 & (2 * (*(unsigned __int8 *)(v3 + 5) - 13)))
                                 + ((*(unsigned __int8 *)(v3 + 5) - 13) ^ v1) == v1)
                                * (((2 * a1) ^ 0x6F5) + 866)) ^ a1)))();
}

uint64_t sub_1001E38A8()
{
  unsigned int v5 = *(unsigned __int8 *)(v2 + 1) + ((v3 - 729) ^ 0xFFFFFC73);
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((3499 * ((v1 & (2 * v5)) + (v5 ^ v0) == ((v3 - 1213574635) & 0x4855A97F ^ (v0 - 339)))) ^ v3)))();
}

uint64_t sub_1001E390C@<X0>(int a1@<W4>, int a2@<W5>, int a3@<W7>, int a4@<W8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19, int a20,int a21,int a22,int a23,int a24,uint64_t (*a25)(void))
{
  *(_DWORD *)(v27 - 180) = (a4 ^ v25) + (a19 ^ v25) + v25 - (v26 & (2 * ((a4 ^ v25) + (a19 ^ v25))));
  *(_DWORD *)(v27 - 176) = (a1 ^ v25) + (a20 ^ v25) + v25 - (v26 & (2 * ((a1 ^ v25) + (a20 ^ v25))));
  *(_DWORD *)(v27 - 172) = (a3 ^ v25) + (a22 ^ v25) + v25 - (v26 & (2 * ((a3 ^ v25) + (a22 ^ v25))));
  *(_DWORD *)(v27 - 168) = (a2 ^ v25) + (a24 ^ v25) + v25 - (v26 & (2 * ((a2 ^ v25) + (a24 ^ v25))));
  return a25();
}

void sub_1001E3930()
{
}

uint64_t sub_1001E3938()
{
  return (*(uint64_t (**)(void))(v4
                                           + 8
                                           * ((101
                                             * ((v3 ^ ((((47 * (v3 ^ 0x5AC)) ^ 0x21D) & v1) == 0)) & 1)) ^ v3)))((v0 - v2));
}

uint64_t sub_1001E3984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,unsigned int a50,unsigned int a51,unsigned int a52,int a53,int a54,unsigned __int8 a55)
{
  return sub_1001EF79C(a28, a3, a4, a5, a6, a7, a8, v55 + 19, a9, a10, a11, a12, (uint64_t)&a36, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55);
}

uint64_t sub_1001E3998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33)
{
  *(_DWORD *)(*(void *)(v33 + 96) + 1428) = 757585729;
  return sub_1001EC534(1948642754, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33);
}

uint64_t sub_1001E39BC()
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((1325
                                * ((((*(unsigned __int8 *)(v2 + 3) - 134) << (((v3 + 33) | 0xF4) ^ 0xFD)) & v1)
                                 + ((*(unsigned __int8 *)(v2 + 3) - 134) ^ v0) == v0)) ^ v3)))();
}

uint64_t sub_1001E3A08(uint64_t a1)
{
  int v1 = (*(_DWORD *)a1 - 235795823 * ((a1 + 1658036232 - 2 * (a1 & 0x62D3A008)) ^ 0xF67EE951) - 532) | 3;
  signed int v2 = (v1 ^ 0x8E989213) + *(_DWORD *)(*(void *)(a1 + 8) - 0x1F010F7499D3F7A2);
  if (v2 < 0) {
    signed int v2 = -v2;
  }
  return (*(uint64_t (**)(void))((char *)*(&off_1002E4860 + v1 - 31)
                              + 8
                              * ((69
                                * (((v1 + 521) | 8)
                                 + (v2 ^ 0xF7FEFF73)
                                 + 765189840
                                 + ((2 * v2) & 0xEFFDFEE6)
                                 + (((v1 - 85) | 0x418) ^ 0xDA651A8E) < 0x7FFFFFFF)) ^ v1)
                              - 4))();
}

uint64_t sub_1001E3B28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  return (*(uint64_t (**)(void))(v14
                              + 8
                              * ((41 * (((11 * (v13 ^ 0x218) + 334254200) & 0xEC13AB77 ^ 0x2008CAE8) + a13 > 0x7FFFFFFD)) ^ v13)))();
}

uint64_t sub_1001E3B9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  int v37 = *(unsigned __int8 *)(v36 - 156) ^ 0xCB;
  if (v37 == 1)
  {
    char v38 = a3 + a7 + 49;
    unsigned int v45 = *(_DWORD *)(v36 - 188);
    unsigned int v44 = *(_DWORD *)(v36 - 184);
    *(unsigned char *)(v36 - 196) = ((8 * v44) ^ 0xE0) - 16 * (v44 & 3) + 24;
    *(unsigned char *)(v36 - 195) = (v38 ^ (v44 >> 5) ^ 0xCF) - ((2 * (v38 ^ (v44 >> 5) ^ 0xCF)) & 0x30) + 24;
    *(unsigned char *)(v36 - 194) = ((v44 >> 13) ^ 0x8D) - ((2 * ((v44 >> 13) ^ 0x8D)) & 0x30) + 24;
    HIDWORD(v46) = v45 ^ 0x11;
    LODWORD(v46) = v44;
    *(unsigned char *)(v36 - 193) = ((v44 >> 21) ^ 0xB4) - 2 * (((v44 >> 21) ^ 0xB4) & 0x1A ^ (v44 >> 21) & 2) + 24;
    *(unsigned char *)(v36 - 192) = (v46 >> 29) - ((2 * (v46 >> 29)) & 0x30) + 24;
    *(unsigned char *)(v36 - 191) = ((v45 >> 5) ^ 0xC9) - 2 * (((v45 >> 5) ^ 0xC9) & 0x1A ^ (v45 >> 5) & 2) + 24;
    *(unsigned char *)(v36 - 190) = (~(v45 >> 12) | 0xCF) + (v45 >> 13) + 25;
    v45 >>= 21;
    char v42 = v45 ^ 0xE3;
    char v43 = 2 * v45;
    goto LABEL_5;
  }
  if (v37 == 2)
  {
    char v38 = a3 + a7 + 49;
    unsigned int v39 = *(_DWORD *)(v36 - 188);
    unsigned int v40 = *(_DWORD *)(v36 - 184);
    *(unsigned char *)(v36 - 196) = ((v39 >> 21) ^ 0xE3) + ~((v38 ^ 0xB2) & (2 * (v39 >> 21))) + 25;
    *(unsigned char *)(v36 - 195) = (v39 >> 13) - ((v39 >> 12) & 0x30) + 24;
    HIDWORD(v41) = v39 ^ 0x11;
    LODWORD(v41) = v40;
    *(unsigned char *)(v36 - 194) = ((v39 >> 5) ^ 0xC9) - 2 * (((v39 >> 5) ^ 0xC9) & 0x1C ^ (v39 >> 5) & 4) + 24;
    *(unsigned char *)(v36 - 193) = (v41 >> 29) - ((2 * (v41 >> 29)) & 0x30) + 24;
    *(unsigned char *)(v36 - 192) = ((v40 >> 21) ^ 0xB4) - ((2 * ((v40 >> 21) ^ 0xB4)) & 0x30) + 24;
    *(unsigned char *)(v36 - 191) = ((v40 >> 13) ^ 0x8D) - ((2 * ((v40 >> 13) ^ 0x8D)) & 0x30) + 24;
    *(unsigned char *)(v36 - 190) = ((v40 >> 5) ^ 0x4D) - ((2 * ((v40 >> 5) ^ 0x4D)) & 0x30) + 24;
    char v42 = (8 * v40) ^ 0xE0;
    char v43 = 16 * v40;
LABEL_5:
    *(unsigned char *)(v36 - 189) = v42 - (v43 & 0x30) + (v38 ^ (a7 + 126) ^ 0xF);
  }
  return sub_10020EB54(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36);
}

uint64_t sub_1001E3DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * (((((a5 - 1659291386) & 0x62E6C3F6) + ((a5 + 55) | 0xA) - 1301) * ((v5 & 0x18) == 0)) ^ a5)))();
}

uint64_t sub_1001E3E10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,unsigned int a25)
{
  return sub_1001F82D4(((a24 + v25 + 4) ^ 0xF93F79F7) + 267771902 + ((2 * (a24 + v25 + 4)) & 0xF27EF3EE), (2 * (a24 + v25 + 4)) & 0xF27EF3EE, 267771902, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25);
}

uint64_t sub_1001E3F0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 8 * ((14 * (((v10 == 0) ^ (((v9 - 105) ^ 0xA4) + v9 - 105 + 1)) & 1)) ^ (v9 + 75))))(a1, a2, a3, a4, a5, a8, a7, v10);
}

uint64_t sub_1001E3F60(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  BOOL v9 = ((a6 + v7 + 22590531) ^ (v7 - 416)) + v6 >= v6 + a1;
  return (*(uint64_t (**)(void))(v8 + 8 * (((4 * v9) | (8 * v9)) ^ v7)))();
}

void sub_1001E3FB4(uint64_t a1)
{
  int v1 = 1178560073 * ((-2 - ((a1 | 0x5A50E64C) + (~a1 | 0xA5AF19B3))) ^ 0x1F3B61D1);
  int v2 = *(_DWORD *)(a1 + 40) ^ v1;
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 64);
  int v5 = *(_DWORD *)(a1 + 24) + v1;
  qmemcpy(v8, "k|to\\mgq", sizeof(v8));
  BOOL v9 = &v10;
  if (v3 | v4) {
    BOOL v6 = v5 == 1308924072;
  }
  else {
    BOOL v6 = 1;
  }
  int v7 = !v6;
  __asm { BRAA            X8, X17 }
}