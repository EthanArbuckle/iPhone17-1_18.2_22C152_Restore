int main(int argc, const char **argv, const char **envp)
{
  LNSetUserDirSuffix();
  static Daemon.main()((uint64_t)&type metadata for LinkDaemon, (uint64_t)&protocol witness table for LinkDaemon);
}

uint64_t sub_100005908()
{
  return 0;
}

void type metadata accessor for LSPersistentIdentifier(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for AssistantIntentPhraseInterpolator.ApplicationPlaceholder(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 sub_100005964(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_100005970(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100005990(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for audit_token_t(uint64_t a1)
{
}

uint64_t sub_1000059D0()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  char v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  sub_10000D9D4(0, (unint64_t *)&qword_10017C750);
  static DispatchQoS.unspecified.getter();
  v7[1] = _swiftEmptyArrayStorage;
  sub_10000BCCC((unint64_t *)&qword_10017C758, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000BF1C(&qword_10017C760);
  sub_10000C084((unint64_t *)&qword_10017C768, &qword_10017C760);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  qword_100181748 = result;
  return result;
}

uint64_t sub_100005C20()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000D844(v0, qword_100181750);
  sub_10000BEE4(v0, (uint64_t)qword_100181750);
  sub_10000BF1C((uint64_t *)&unk_10017EAF0);
  String.init<A>(describing:)();
  uint64_t result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    String.init(cString:)();
    return Logger.init(subsystem:category:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100005CCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  v36 = a5;
  uint64_t v37 = a6;
  uint64_t v35 = a4;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  sub_10000E948();
  uint64_t v38 = v12;
  __chkstk_darwin(v13);
  sub_10000EBF4();
  uint64_t v14 = type metadata accessor for DispatchQoS();
  sub_10000E948();
  uint64_t v16 = v15;
  __chkstk_darwin(v17);
  v19 = (char *)v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D9D4(0, (unint64_t *)&unk_10017C730);
  swift_bridgeObjectRetain();
  id result = sub_1000060B4(a3);
  if (!v6)
  {
    v21 = result;
    v31 = v19;
    uint64_t v32 = v7;
    uint64_t v33 = v14;
    uint64_t v34 = v16;
    if (qword_10017C200 != -1) {
      swift_once();
    }
    v30[1] = (id)qword_100181748;
    sub_10000EC38();
    v22 = (void *)swift_allocObject();
    uint64_t v24 = v35;
    v23 = v36;
    v22[2] = v21;
    v22[3] = v24;
    uint64_t v25 = v37;
    v22[4] = v23;
    v22[5] = v25;
    v22[6] = a1;
    v22[7] = a2;
    aBlock[4] = sub_10000BFB4;
    aBlock[5] = v22;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000125A8;
    aBlock[3] = &unk_10016F000;
    v26 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    v30[0] = v21;
    swift_retain();
    id v27 = v23;
    swift_bridgeObjectRetain();
    v28 = v31;
    static DispatchQoS.unspecified.getter();
    aBlock[7] = _swiftEmptyArrayStorage;
    sub_10000BCCC((unint64_t *)&qword_10017EB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000BF1C((uint64_t *)&unk_10017C740);
    sub_10000C084((unint64_t *)&qword_10017EB40, (uint64_t *)&unk_10017C740);
    uint64_t v29 = v32;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v26);

    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v29, v11);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v28, v33);
    return (id)swift_release();
  }
  return result;
}

void sub_100005FF0()
{
  if ([self isLowPowerDeviceEnabled])
  {
    id v0 = [self sharedVocabulary];
    NSString v1 = String._bridgeToObjectiveC()();
    [v0 removeAllVocabularyStringsOnBehalfOf:v1];
  }
}

id sub_1000060B4(uint64_t a1)
{
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v7 = 0;
  id v3 = [(id)swift_getObjCClassFromMetadata() donatorWithItemType:a1 originAppId:v2 error:&v7];

  if (v3)
  {
    id v4 = v7;
  }
  else
  {
    id v5 = v7;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v3;
}

void sub_1000061A4(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = a2;
  v12[3] = a3;
  v12[4] = a4;
  v12[5] = a5;
  v12[6] = a6;
  v15[4] = sub_10000C074;
  v15[5] = v12;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  v15[2] = sub_100006670;
  v15[3] = &unk_10016F050;
  uint64_t v13 = _Block_copy(v15);
  swift_retain();
  id v14 = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  [a1 donateWithOptions:2 usingStream:v13];
  _Block_release(v13);
}

void sub_1000062C4(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  double v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v27 = a6;
    swift_errorRetain();
    uint64_t v17 = qword_10017C208;
    swift_retain();
    id v18 = a4;
    swift_bridgeObjectRetain();
    if (v17 != -1) {
      swift_once();
    }
    uint64_t v19 = sub_10000BEE4(v12, (uint64_t)qword_100181750);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v19, v12);
    swift_bridgeObjectRelease();

    swift_release();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v25 = (void *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      uint64_t v29 = v26;
      *(_DWORD *)uint64_t v22 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v28 = sub_100013090(v27, a7, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v22 + 12) = 2112;
      swift_errorRetain();
      uint64_t v23 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v28 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v25 = v23;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Could not clear auto shortcuts vocabulary for %s. Error: %@", (uint8_t *)v22, 0x16u);
      sub_10000BF1C((uint64_t *)&unk_10017EB20);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  }
  else if (a1)
  {
    [a1 finish:0, v14];
  }
}

void sub_100006670(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t sub_1000066FC()
{
  sub_10000EC58();
  v0[11] = v1;
  v0[12] = v2;
  v0[9] = v3;
  v0[10] = v4;
  v0[7] = v5;
  v0[8] = v6;
  v0[5] = v7;
  v0[6] = v8;
  uint64_t v9 = type metadata accessor for Logger();
  v0[13] = v9;
  v0[14] = *(void *)(v9 - 8);
  v0[15] = swift_task_alloc();
  v0[16] = swift_task_alloc();
  v0[17] = swift_task_alloc();
  return _swift_task_switch(sub_1000067E0, 0, 0);
}

uint64_t sub_1000067E0()
{
  sub_10000EC58();
  sub_10000BEA0(*(void **)(v0 + 40), *(void *)(*(void *)(v0 + 40) + 24));
  uint64_t v1 = sub_10000EB58();
  uint64_t v3 = v2(v1);
  uint64_t v5 = v4;
  *(void *)(v0 + 144) = v4;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1000068A4;
  uint64_t v7 = *(void *)(v0 + 88);
  uint64_t v8 = *(void *)(v0 + 96);
  uint64_t v9 = *(void *)(v0 + 80);
  uint64_t v10 = *(void *)(v0 + 48);
  uint64_t v11 = *(void *)(v0 + 56);
  return sub_100007254(v3, v5, v10, v11, v9, v7, v8);
}

uint64_t sub_1000068A4(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 160) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1000071D0;
  }
  else
  {
    swift_bridgeObjectRelease();
    *(void *)(v4 + 168) = a1;
    uint64_t v5 = sub_1000069D4;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000069D4()
{
  uint64_t v2 = *(void *)(v0 + 160);
  unint64_t v1 = *(void *)(v0 + 168);
  uint64_t v4 = *(void **)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v5 = *(void *)(v0 + 80);
  swift_retain();
  id v6 = v4;
  swift_bridgeObjectRetain();
  unint64_t v7 = (unint64_t)sub_100007EE8(v1, v5, v6, v3);
  uint64_t v8 = v7;
  if (v7 >> 62) {
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v9 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v10 = *(void **)(v0 + 40);
  uint64_t v12 = *(void **)(v0 + 88);
  uint64_t v11 = *(void *)(v0 + 96);
  uint64_t v13 = *(void *)(v0 + 80);
  if (v9)
  {
    sub_1000080C0((uint64_t)v10, v8, v13, v12);
    if (v2)
    {
      double v14 = *(void **)(v0 + 88);
      uint64_t v15 = qword_10017C208;
      swift_retain();
      id v16 = v14;
      swift_bridgeObjectRetain();
      if (v15 != -1)
      {
        swift_once();
        id v16 = *(id *)(v0 + 88);
      }
      uint64_t v17 = *(void *)(v0 + 136);
      uint64_t v19 = *(void *)(v0 + 104);
      uint64_t v18 = *(void *)(v0 + 112);
      uint64_t v20 = sub_10000BEE4(v19, (uint64_t)qword_100181750);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v17, v20, v19);
      swift_release();

      swift_bridgeObjectRelease();
      swift_errorRetain();
      swift_errorRetain();
      os_log_type_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        v36 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 138412290;
        swift_errorRetain();
        uint64_t v24 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 32) = v24;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v36 = v24;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Failed to donate Auto Shortcuts to SiriVocabulary: %@", v23, 0xCu);
        sub_10000BF1C((uint64_t *)&unk_10017EB20);
        swift_arrayDestroy();
        sub_10000EB10();
        sub_10000EB10();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
      (*(void (**)(void, void))(*(void *)(v0 + 112) + 8))(*(void *)(v0 + 136), *(void *)(v0 + 104));
    }
    if ([self isLowPowerDeviceEnabled]) {
      sub_10000865C(*(void **)(v0 + 40), v8, *(void *)(v0 + 72), *(void *)(v0 + 80), *(void **)(v0 + 88), *(void **)(v0 + 96));
    }
    swift_bridgeObjectRelease();
    sub_100008AB8(*(void **)(v0 + 40), *(void *)(v0 + 64), *(void *)(v0 + 80), *(void **)(v0 + 88));
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_10000BEA0(v10, v10[3]);
    uint64_t v25 = sub_10000EB58();
    uint64_t v27 = v26(v25);
    sub_100005CCC(v27, v28, 8, v13, v12, v11);
    if (v2)
    {
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_10000EB74();
      goto LABEL_18;
    }
    uint64_t v29 = sub_10000EBA4();
    sub_100005CCC(v29, v30, 18, v31, v32, v33);
    sub_10000EBA4();
    sub_100005FF0();
    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EB74();
LABEL_18:
  return v34();
}

uint64_t sub_1000071D0()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EB74();
  return v0();
}

uint64_t sub_100007254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[12] = a6;
  v7[13] = a7;
  v7[10] = a2;
  v7[11] = a5;
  v7[9] = a1;
  uint64_t v8 = type metadata accessor for Logger();
  v7[14] = v8;
  v7[15] = *(void *)(v8 - 8);
  v7[16] = swift_task_alloc();
  return _swift_task_switch(sub_10000731C, 0, 0);
}

uint64_t sub_10000731C()
{
  uint64_t v34 = v0;
  sub_10000D9D4(0, (unint64_t *)&unk_10017C800);
  uint64_t v1 = sub_100018F38();
  v0[17] = v1;
  v0[18] = v2;
  if (v2)
  {
    unint64_t v3 = v2;
    uint64_t v32 = v1;
    uint64_t v4 = (void *)v0[12];
    uint64_t v5 = qword_10017C208;
    swift_retain();
    id v6 = v4;
    swift_bridgeObjectRetain();
    if (v5 != -1)
    {
      swift_once();
      id v6 = (id)v0[12];
    }
    uint64_t v7 = v0[15];
    uint64_t v8 = v0[16];
    uint64_t v9 = v0[14];
    uint64_t v10 = sub_10000BEE4(v9, (uint64_t)qword_100181750);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v8, v10, v9);
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    BOOL v13 = os_log_type_enabled(v11, v12);
    uint64_t v15 = v0[15];
    uint64_t v14 = v0[16];
    uint64_t v16 = v0[14];
    unint64_t v17 = v0[10];
    if (v13)
    {
      uint64_t v31 = v0[14];
      uint64_t v30 = v0[9];
      uint64_t v18 = swift_slowAlloc();
      v33[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315394;
      swift_bridgeObjectRetain();
      v0[7] = sub_100013090(v30, v17, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v18 + 12) = 2080;
      swift_bridgeObjectRetain();
      v0[8] = sub_100013090(v32, v3, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_arrayDestroy();
      sub_10000EB10();
      sub_10000EB10();

      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v31);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    }
    uint64_t v21 = v0[9];
    uint64_t v20 = v0[10];
    id v22 = objc_allocWithZone((Class)LSApplicationRecord);
    swift_bridgeObjectRetain();
    id v23 = sub_100081E04(v21, v20, 0);
    v0[19] = v23;
    v0[20] = 0;
    uint64_t v26 = v23;
    v0[5] = sub_10000D9D4(0, &qword_10017C820);
    v0[6] = &off_10016F7B0;
    v0[2] = v26;
    id v27 = v26;
    uint64_t v28 = sub_10000EBA4();
    return _swift_task_switch(v28, v29, 0);
  }
  else
  {
    sub_10000D988();
    swift_allocError();
    unsigned char *v19 = 1;
    swift_willThrow();
    swift_task_dealloc();
    sub_10000EB74();
    return v24();
  }
}

uint64_t sub_100007714()
{
  uint64_t v1 = v0[20];
  v0[21] = sub_10002B8F8((uint64_t)(v0 + 2), v0[17], v0[18]);
  v0[22] = v1;
  swift_bridgeObjectRelease();
  if (v1)
  {
    unint64_t v2 = sub_10000782C;
  }
  else
  {
    sub_10000E788((uint64_t)(v0 + 2));
    unint64_t v2 = sub_1000077BC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000077BC()
{
  sub_10000EC58();

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 168);
  return v1(v2);
}

uint64_t sub_10000782C()
{
  sub_10000EC58();

  sub_10000E788(v0 + 16);
  swift_task_dealloc();
  sub_10000EB74();
  return v1();
}

uint64_t sub_10000789C(void **a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *a1;
  char v12 = sub_1000B1C04(*a1, a4);
  if ((v12 & 1) == 0)
  {
    uint64_t v13 = qword_10017C208;
    swift_retain();
    id v14 = a3;
    swift_bridgeObjectRetain();
    if (v13 != -1) {
      swift_once();
    }
    uint64_t v15 = sub_10000BEE4(v7, (uint64_t)qword_100181750);
    uint64_t v16 = v8;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v15, v7);
    swift_bridgeObjectRelease();

    swift_release();
    id v17 = v11;
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    int v20 = v19;
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v21 = swift_slowAlloc();
      int v37 = v20;
      uint64_t v22 = v21;
      uint64_t v38 = swift_slowAlloc();
      uint64_t v40 = v38;
      *(_DWORD *)uint64_t v22 = 136315394;
      uint64_t v35 = v22 + 4;
      id v23 = [v17 actionIdentifier];
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v36 = v16;
      unint64_t v26 = v25;

      uint64_t v39 = sub_100013090(v24, v26, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2080;
      uint64_t v35 = v22 + 14;
      id v27 = [v17 bundleIdentifier];
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      os_log_t v34 = v18;
      unint64_t v30 = v29;

      uint64_t v39 = sub_100013090(v28, v30, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      os_log_t v31 = v34;
      _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v37, "%s in %s is denylisted, skipping donation.", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v36 + 8))(v10, v7);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
  }
  return v12 & 1;
}

void *sub_100007C28(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = a1;
  var48[0] = (uint64_t)_swiftEmptyArrayStorage;
  if (a1 >> 62) {
    goto LABEL_23;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v6)
  {
    while (1)
    {
      uint64_t v30 = (uint64_t)v3;
      unint64_t v7 = 0;
      uint64_t v33 = v5 & 0xFFFFFFFFFFFFFF8;
      unint64_t v34 = v5 & 0xC000000000000001;
      os_log_t v31 = (void *)LNSystemProtocolIdentifierConditionallyEnabled;
      uint64_t v32 = v5;
      while (v34)
      {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_7:
        uint64_t v9 = v8;
        unint64_t v10 = v7 + 1;
        if (__OFADD__(v7, 1)) {
          goto LABEL_22;
        }
        id v11 = [v8 actionIdentifier];
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v14 = v13;

        if (!*(void *)(a2 + 16)
          || (uint64_t v21 = sub_100021098(v12, v14, v15, v16, v17, v18, v19, v20, v29, v30, (uint64_t)v31, v32, v33, v34, v35, var48[0], var48[1], var48[2], var48[3],
                      var48[4],
                      var48[5],
                      var48[6],
                      var48[7],
                      var48[8],
                      var48[9],
                      var48[10]),
              (v22 & 1) == 0))
        {
          swift_bridgeObjectRelease();
LABEL_17:
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          uint64_t v3 = var48;
          specialized ContiguousArray._endMutation()();
          goto LABEL_18;
        }
        id v23 = *(id *)(*(void *)(a2 + 56) + 8 * v21);
        swift_bridgeObjectRelease();
        id v24 = [v23 systemProtocolMetadata];
        type metadata accessor for LNSystemProtocolIdentifier(0);
        sub_10000BF1C((uint64_t *)&unk_10017C7F0);
        sub_10000BCCC(&qword_10017D0B0, type metadata accessor for LNSystemProtocolIdentifier);
        uint64_t v3 = (uint64_t *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        if (!v3[2])
        {
          swift_bridgeObjectRelease();

LABEL_16:
          uint64_t v5 = v32;
          goto LABEL_17;
        }
        id v25 = v31;
        sub_1000210C4();
        if ((v26 & 1) == 0)
        {

          swift_bridgeObjectRelease();
          goto LABEL_16;
        }

        swift_bridgeObjectRelease();
        uint64_t v5 = v32;
LABEL_18:
        ++v7;
        if (v10 == v6)
        {
          id v27 = (void *)var48[0];
          goto LABEL_25;
        }
      }
      if (v7 < *(void *)(v33 + 16)) {
        break;
      }
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      if (!v6) {
        goto LABEL_24;
      }
    }
    id v8 = *(id *)(v5 + 8 * v7 + 32);
    goto LABEL_7;
  }
LABEL_24:
  id v27 = _swiftEmptyArrayStorage;
LABEL_25:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v27;
}

void *sub_100007EE8(unint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v19 = _swiftEmptyArrayStorage;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  unint64_t v10 = *(void **)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v10)
  {
    while (1)
    {
      unint64_t v11 = 0;
      uint64_t v17 = v10;
      while ((a1 & 0xC000000000000001) != 0)
      {
        id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_7:
        uint64_t v13 = v12;
        uint64_t v14 = (void *)(v11 + 1);
        if (__OFADD__(v11, 1)) {
          goto LABEL_17;
        }
        uint64_t v18 = v12;
        char v15 = sub_10000789C(&v18, a2, a3, a4);
        if (v5)
        {
          swift_bridgeObjectRelease();

          swift_release();
          goto LABEL_21;
        }
        if (v15)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          uint64_t v5 = 0;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          unint64_t v10 = v17;
        }
        else
        {
        }
        ++v11;
        if (v14 == v10)
        {
          unint64_t v10 = v19;
          goto LABEL_20;
        }
      }
      if (v11 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      unint64_t v10 = (void *)_CocoaArrayWrapper.endIndex.getter();
      if (!v10) {
        goto LABEL_19;
      }
    }
    id v12 = *(id *)(a1 + 8 * v11 + 32);
    goto LABEL_7;
  }
LABEL_19:
  unint64_t v10 = _swiftEmptyArrayStorage;
LABEL_20:
  swift_bridgeObjectRelease();
LABEL_21:
  swift_bridgeObjectRelease();

  swift_release();
  return v10;
}

unint64_t sub_1000080C0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v39 = a1;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v37 = *(void *)(v7 - 8);
  uint64_t v38 = v7;
  __chkstk_darwin(v7);
  uint64_t v35 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for DispatchQoS();
  uint64_t v34 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v33 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = qword_10017C208;
  swift_retain();
  id v15 = a4;
  swift_bridgeObjectRetain();
  if (v14 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_10000BEE4(v10, (uint64_t)qword_100181750);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v16, v10);
  swift_bridgeObjectRelease();

  swift_release();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Donating Auto Shortcuts to SiriVocabulary", v19, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  unint64_t result = sub_1000F6AD4(1000, a2);
  if (!v4)
  {
    unint64_t v21 = result;
    if (result >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v22 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    id v23 = (void *)v39;
    if (v22)
    {
      sub_10000D9D4(0, (unint64_t *)&unk_10017C730);
      uint64_t v25 = v23[3];
      uint64_t v24 = v23[4];
      sub_10000BEA0(v23, v25);
      (*(void (**)(uint64_t))(*(void *)(v24 + 8) + 8))(v25);
      id v26 = sub_1000060B4(8);
      if (qword_10017C200 != -1) {
        swift_once();
      }
      uint64_t v39 = qword_100181748;
      sub_10000C0D4((uint64_t)v23, (uint64_t)v41);
      uint64_t v27 = swift_allocObject();
      *(void *)(v27 + 16) = v26;
      *(void *)(v27 + 24) = v21;
      sub_10000D698(v41, v27 + 32);
      aBlock[4] = sub_10000D8F4;
      aBlock[5] = v27;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000125A8;
      aBlock[3] = &unk_10016F140;
      uint64_t v28 = _Block_copy(aBlock);
      id v29 = v26;
      uint64_t v30 = v33;
      static DispatchQoS.unspecified.getter();
      v42 = _swiftEmptyArrayStorage;
      sub_10000BCCC((unint64_t *)&qword_10017EB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000BF1C((uint64_t *)&unk_10017C740);
      sub_10000C084((unint64_t *)&qword_10017EB40, (uint64_t *)&unk_10017C740);
      os_log_t v31 = v35;
      uint64_t v32 = v38;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v28);

      (*(void (**)(char *, uint64_t))(v37 + 8))(v31, v32);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v30, v36);
      return swift_release();
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

void sub_10000865C(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5, void *a6)
{
  id v44 = a6;
  uint64_t v10 = type metadata accessor for Logger();
  v42 = *(char **)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  sub_10000BEA0(a1, v14);
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)(v13 + 8) + 8))(v14);
  unint64_t v16 = v43;
  os_log_type_t v18 = sub_10000A234(v15, v17, a2, a3);
  if (v16) {
    goto LABEL_2;
  }
  uint64_t v19 = v42;
  unint64_t v43 = (unint64_t)v18;
  swift_bridgeObjectRelease();
  v41 = a1;
  if (v43 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v20 = *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v21 = v10;
  uint64_t v22 = v12;
  if (!v20)
  {
LABEL_2:
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v23 = qword_10017C208;
    swift_retain();
    id v24 = a5;
    swift_bridgeObjectRetain();
    if (v23 != -1) {
      swift_once();
    }
    uint64_t v25 = sub_10000BEE4(v21, (uint64_t)qword_100181750);
    (*((void (**)(char *, uint64_t, uint64_t))v19 + 2))(v22, v25, v21);
    swift_bridgeObjectRelease();
    id v44 = v24;

    swift_release();
    sub_10000C0D4((uint64_t)v41, (uint64_t)v46);
    id v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      v42 = v22;
      id v29 = (uint8_t *)v28;
      uint64_t v49 = swift_slowAlloc();
      uint64_t v40 = v21;
      *(_DWORD *)id v29 = 136315138;
      uint64_t v39 = v29 + 4;
      uint64_t v30 = v19;
      uint64_t v32 = v47;
      uint64_t v31 = v48;
      sub_10000BEA0(v46, v47);
      uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)(v31 + 8) + 8))(v32);
      uint64_t v45 = sub_100013090(v33, v34, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10000E788((uint64_t)v46);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Calling INVocabulary to sync App Shortcuts to Siri server for %s", v29, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*((void (**)(char *, uint64_t))v30 + 1))(v42, v40);
    }
    else
    {
      sub_10000E788((uint64_t)v46);

      (*((void (**)(char *, uint64_t))v19 + 1))(v22, v21);
    }
    sub_10000D9D4(0, &qword_10017C770);
    sub_100053AC4(v43);
    swift_bridgeObjectRelease();
    id v35 = sub_10000A720();
    uint64_t v37 = v41[3];
    uint64_t v36 = v41[4];
    sub_10000BEA0(v41, v37);
    (*(void (**)(uint64_t))(*(void *)(v36 + 8) + 8))(v37);
    NSString v38 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v44 setVocabulary:v35 ofType:50003 onBehalfOf:v38];
  }
}

void sub_100008AB8(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  v62 = a1;
  uint64_t v63 = a3;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v59 = *(void *)(v7 - 8);
  uint64_t v60 = v7;
  __chkstk_darwin(v7);
  v57 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for DispatchQoS();
  uint64_t v56 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  v55 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(a2 + 16);
  uint64_t v15 = qword_10017C208;
  if (v14)
  {
    uint64_t v61 = v4;
    swift_retain();
    id v16 = a4;
    swift_bridgeObjectRetain();
    if (v15 != -1) {
      swift_once();
    }
    uint64_t v17 = sub_10000BEE4(v10, (uint64_t)qword_100181750);
    os_log_type_t v18 = *(void (**)(char *))(v11 + 16);
    uint64_t v54 = v17;
    v18(v13);
    swift_bridgeObjectRelease();

    swift_release();
    swift_bridgeObjectRetain();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 134217984;
      aBlock[0] = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Donating %ld AppShortcuts spans to SiriVocabulary", v21, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    sub_10000D9D4(0, (unint64_t *)&unk_10017C800);
    uint64_t v29 = sub_100018F38();
    if (v30)
    {
      uint64_t v31 = v29;
      uint64_t v32 = v30;
      id v33 = [objc_allocWithZone((Class)KVItemBuilder) init];
      __chkstk_darwin(v33);
      *(&v54 - 4) = v34;
      *(&v54 - 3) = v31;
      *(&v54 - 2) = v32;
      uint64_t v35 = swift_bridgeObjectRetain();
      uint64_t v36 = v61;
      unint64_t v37 = sub_10000AF70(v35, (void (*)(uint64_t, unsigned char *))sub_10000D674);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v36) {
        return;
      }
      if (v37 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v51)
        {
LABEL_15:
          sub_10000D9D4(0, (unint64_t *)&unk_10017C730);
          NSString v38 = v62;
          uint64_t v40 = v62[3];
          uint64_t v39 = v62[4];
          sub_10000BEA0(v62, v40);
          (*(void (**)(uint64_t))(*(void *)(v39 + 8) + 8))(v40);
          id v44 = sub_1000060B4(18);
          uint64_t v61 = 0;
          if (qword_10017C200 != -1) {
            swift_once();
          }
          sub_10000C0D4((uint64_t)v38, (uint64_t)v68);
          uint64_t v45 = swift_allocObject();
          *(void *)(v45 + 16) = v44;
          *(void *)(v45 + 24) = v37;
          sub_10000D698(v68, v45 + 32);
          v66 = sub_10000D6B0;
          uint64_t v67 = v45;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = sub_1000125A8;
          v65 = &unk_10016F0A0;
          v46 = _Block_copy(aBlock);
          id v47 = v44;
          uint64_t v48 = v55;
          static DispatchQoS.unspecified.getter();
          v69 = _swiftEmptyArrayStorage;
          sub_10000BCCC((unint64_t *)&qword_10017EB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
          sub_10000BF1C((uint64_t *)&unk_10017C740);
          sub_10000C084((unint64_t *)&qword_10017EB40, (uint64_t *)&unk_10017C740);
          uint64_t v49 = v57;
          uint64_t v50 = v60;
          dispatch thunk of SetAlgebra.init<A>(_:)();
          OS_dispatch_queue.async(group:qos:flags:execute:)();
          _Block_release(v46);

          (*(void (**)(char *, uint64_t))(v59 + 8))(v49, v50);
          (*(void (**)(char *, uint64_t))(v56 + 8))(v48, v58);
          swift_release();
          return;
        }
      }
      else if (*(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_15;
      }
      swift_bridgeObjectRelease();
      v41 = Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v41, v52))
      {
        v53 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v53 = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, v52, "Spans produced no kvItems, exiting early.", v53, 2u);
        swift_slowDealloc();
      }
    }
    else
    {
      v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v41, v42))
      {
        unint64_t v43 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v43 = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Cannot get Siri language to register app entity span data.", v43, 2u);
        swift_slowDealloc();
      }
    }

    return;
  }
  if (qword_10017C208 != -1) {
    swift_once();
  }
  sub_10000BEE4(v10, (uint64_t)qword_100181750);
  sub_10000C0D4((uint64_t)v62, (uint64_t)aBlock);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v23))
  {
    id v24 = (uint8_t *)swift_slowAlloc();
    *(void *)&v68[0] = swift_slowAlloc();
    *(_DWORD *)id v24 = 136315138;
    id v26 = v65;
    uint64_t v25 = v66;
    sub_10000BEA0(aBlock, (uint64_t)v65);
    uint64_t v27 = (*(uint64_t (**)(void *))(*((void *)v25 + 1) + 8))(v26);
    v69 = (void *)sub_100013090(v27, v28, (uint64_t *)v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10000E788((uint64_t)aBlock);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Empty spans, will not donate for %s", v24, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10000E788((uint64_t)aBlock);
  }
}

void sub_1000093D8(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a2)
  {
    if (qword_10017C208 != -1) {
LABEL_44:
    }
      swift_once();
    uint64_t v4 = type metadata accessor for Logger();
    sub_10000BEE4(v4, (uint64_t)qword_100181750);
    oslog = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(oslog, v5)) {
      goto LABEL_32;
    }
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    uint64_t v7 = "Could not get a donator from SiriVocabulary, skipping span donations";
    goto LABEL_31;
  }
  if (!a1 || (self, (uint64_t v11 = swift_dynamicCastObjCClass()) == 0))
  {
    if (qword_10017C208 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    sub_10000BEE4(v33, (uint64_t)qword_100181750);
    oslog = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(oslog, v5)) {
      goto LABEL_32;
    }
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    uint64_t v7 = "Got unexpected stream type from SiriVocabulary, skipping span donations";
LABEL_31:
    _os_log_impl((void *)&_mh_execute_header, oslog, v5, v7, v6, 2u);
    swift_slowDealloc();
LABEL_32:

    return;
  }
  uint64_t v12 = (void *)v11;
  unint64_t v13 = a3 >> 62;
  if (a3 >> 62)
  {
    id v42 = a1;
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v14 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v15 = a1;
    swift_bridgeObjectRetain();
  }
  unint64_t v46 = a3;
  uint64_t v45 = a1;
  if (v14)
  {
    uint64_t v43 = a4;
    unint64_t v44 = a3 >> 62;
    if (v14 < 1) {
      __break(1u);
    }
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    unint64_t v18 = a3 & 0xC000000000000001;
    uint64_t v19 = &selRef_initWithConnection_options_error_;
    os_log_t osloga = (os_log_t)v14;
    do
    {
      if (v18) {
        id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v20 = *(id *)(a3 + 8 * v17 + 32);
      }
      uint64_t v21 = v20;
      v50[0] = 0;
      if (objc_msgSend(v12, v19[50], v20, v50))
      {
        id v22 = v50[0];

        if (__OFADD__(v16++, 1))
        {
          __break(1u);
          goto LABEL_44;
        }
      }
      else
      {
        id v24 = v12;
        id v25 = v50[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        if (qword_10017C208 != -1) {
          swift_once();
        }
        uint64_t v26 = type metadata accessor for Logger();
        sub_10000BEE4(v26, (uint64_t)qword_100181750);
        swift_errorRetain();
        uint64_t v27 = v21;
        swift_errorRetain();
        unint64_t v28 = Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v28, v29))
        {
          uint64_t v30 = swift_slowAlloc();
          uint64_t v31 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v30 = 138412546;
          *(void *)(v30 + 4) = v27;
          void *v31 = v27;
          *(_WORD *)(v30 + 12) = 2112;
          swift_errorRetain();
          uint64_t v32 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v30 + 14) = v32;
          v31[1] = v32;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "Cannot register %@ with SiriVocabulary. Error: %@", (uint8_t *)v30, 0x16u);
          sub_10000BF1C((uint64_t *)&unk_10017EB20);
          swift_arrayDestroy();
          swift_slowDealloc();
          a3 = v46;
          swift_slowDealloc();
        }
        else
        {
          swift_errorRelease();

          swift_errorRelease();
          uint64_t v27 = v28;
        }
        uint64_t v19 = &selRef_initWithConnection_options_error_;
        swift_errorRelease();

        uint64_t v12 = v24;
        uint64_t v14 = (uint64_t)osloga;
      }
      ++v17;
    }
    while (v14 != v17);
    swift_bridgeObjectRelease();
    a4 = v43;
    unint64_t v13 = v44;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  [v12 finish:0];
  if (qword_10017C208 != -1) {
    swift_once();
  }
  uint64_t v34 = type metadata accessor for Logger();
  sub_10000BEE4(v34, (uint64_t)qword_100181750);
  sub_10000C0D4(a4, (uint64_t)v50);
  swift_bridgeObjectRetain_n();
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = swift_slowAlloc();
    uint64_t v49 = swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 134218498;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v37 + 12) = 2048;
    if (v13)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v37 + 22) = 2080;
    uint64_t v39 = v51;
    uint64_t v38 = v52;
    sub_10000BEA0(v50, v51);
    uint64_t v40 = (*(uint64_t (**)(uint64_t))(*(void *)(v38 + 8) + 8))(v39);
    sub_100013090(v40, v41, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10000E788((uint64_t)v50);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Completed SiriVocabulary %ld of %ld span donations for %s.", (uint8_t *)v37, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    sub_10000E788((uint64_t)v50);
  }
}

void sub_100009B08(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int16 a7)
{
  sub_10000C0D4(a3, (uint64_t)v15);
  sub_10000EC38();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a2;
  sub_10000D698(v15, v12 + 24);
  aBlock[4] = a5;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100006670;
  void aBlock[3] = a6;
  unint64_t v13 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  [a1 donateWithOptions:a7 usingStream:v13];
  _Block_release(v13);
}

void sub_100009C00(void *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  if (!a2)
  {
    id v4 = a1;
    if (a1)
    {
      self;
      uint64_t v7 = swift_dynamicCastObjCClass();
      if (v7)
      {
        uint64_t v8 = (void *)v7;
        if (a3 >> 62)
        {
LABEL_35:
          id v38 = v4;
          swift_bridgeObjectRetain();
          uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
        }
        else
        {
          uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
          id v10 = v4;
          swift_bridgeObjectRetain();
        }
        id v40 = v4;
        if (v9)
        {
          unint64_t v39 = a4;
          if (v9 < 1) {
            __break(1u);
          }
          uint64_t v11 = 0;
          uint64_t v12 = 0;
          a4 = a3 & 0xC000000000000001;
          unint64_t v13 = &selRef_initWithConnection_options_error_;
          unint64_t v41 = v8;
          do
          {
            if (a4) {
              id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v14 = *(id *)(a3 + 8 * v12 + 32);
            }
            id v15 = v14;
            v43[0] = 0;
            unsigned int v16 = [v8 v13[50] v14 v43 v39];
            id v4 = v43[0];
            if (v16)
            {
              id v17 = v43[0];

              if (__OFADD__(v11++, 1))
              {
                __break(1u);
                goto LABEL_35;
              }
            }
            else
            {
              id v19 = v43[0];
              uint64_t v20 = _convertNSErrorToError(_:)();

              swift_willThrow();
              if (qword_10017C208 != -1) {
                swift_once();
              }
              uint64_t v21 = type metadata accessor for Logger();
              sub_10000BEE4(v21, (uint64_t)qword_100181750);
              swift_errorRetain();
              id v22 = v15;
              swift_errorRetain();
              os_log_type_t v23 = Logger.logObject.getter();
              os_log_type_t v24 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v23, v24))
              {
                uint64_t v25 = swift_slowAlloc();
                uint64_t v26 = (void *)swift_slowAlloc();
                uint64_t v42 = v20;
                v43[0] = (id)swift_slowAlloc();
                *(_DWORD *)uint64_t v25 = 138412546;
                *(void *)(v25 + 4) = v22;
                void *v26 = v22;
                *(_WORD *)(v25 + 12) = 2080;
                swift_errorRetain();
                sub_10000BF1C(&qword_10017C810);
                uint64_t v27 = String.init<A>(describing:)();
                *(void *)(v25 + 14) = sub_100013090(v27, v28, (uint64_t *)v43);
                swift_bridgeObjectRelease();
                swift_errorRelease();
                swift_errorRelease();
                _os_log_impl((void *)&_mh_execute_header, v23, v24, "Failed to register %@ with SiriVocabulary with error: %s.\nContinuing donation.", (uint8_t *)v25, 0x16u);
                sub_10000BF1C((uint64_t *)&unk_10017EB20);
                swift_arrayDestroy();
                uint64_t v8 = v41;
                swift_slowDealloc();
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                swift_errorRelease();
              }
              else
              {
                swift_errorRelease();

                swift_errorRelease();
                swift_errorRelease();
              }
              a4 = a3 & 0xC000000000000001;
              unint64_t v13 = &selRef_initWithConnection_options_error_;
            }
            ++v12;
          }
          while (v9 != v12);
          swift_bridgeObjectRelease();
          a4 = v39;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        if (qword_10017C208 != -1) {
          swift_once();
        }
        uint64_t v29 = type metadata accessor for Logger();
        sub_10000BEE4(v29, (uint64_t)qword_100181750);
        sub_10000C0D4(a4, (uint64_t)v43);
        swift_bridgeObjectRetain_n();
        uint64_t v30 = Logger.logObject.getter();
        os_log_type_t v31 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v30, v31))
        {
          uint64_t v32 = swift_slowAlloc();
          uint64_t v42 = swift_slowAlloc();
          *(_DWORD *)uint64_t v32 = 134218498;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v32 + 12) = 2048;
          if (a3 >> 62)
          {
            swift_bridgeObjectRetain();
            _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          uint64_t v33 = v40;
          swift_bridgeObjectRelease();
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v32 + 22) = 2080;
          uint64_t v35 = v44;
          uint64_t v34 = v45;
          sub_10000BEA0(v43, v44);
          uint64_t v36 = (*(uint64_t (**)(uint64_t))(*(void *)(v34 + 8) + 8))(v35);
          sub_100013090(v36, v37, &v42);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10000E788((uint64_t)v43);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
          sub_10000E788((uint64_t)v43);

          uint64_t v33 = v40;
        }
        [v8 finish:0];
      }
    }
  }
}

void *sub_10000A234(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v59 = a3;
  uint64_t v4 = a4;
  if (a4 >> 62) {
    goto LABEL_46;
  }
  uint64_t v5 = *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    uint64_t v6 = _swiftEmptyDictionarySingleton;
    if (v5)
    {
      uint64_t v63 = v4;
      unint64_t v64 = v4 & 0xC000000000000001;
      uint64_t v7 = 4;
      uint64_t v61 = v5;
      do
      {
        if (v64) {
          id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v8 = *(id *)(v4 + 8 * v7);
        }
        if (__OFADD__(v7 - 4, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          goto LABEL_43;
        }
        id v9 = v8;
        id v10 = [v8 identifier];
        uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v13 = v12;

        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v21 = sub_100021098(v11, v13, v15, v16, v17, v18, v19, v20, v58, v59, v60, v61, v63, v64, v7 - 3, v67, v68, (uint64_t)v69, v70,
                (uint64_t)v6,
                v72,
                v73,
                v74,
                v75,
                v76,
                v77);
        uint64_t v23 = v6[2];
        BOOL v24 = (v22 & 1) == 0;
        Swift::Int v25 = v23 + v24;
        if (__OFADD__(v23, v24)) {
          goto LABEL_42;
        }
        unint64_t v26 = v21;
        uint64_t v4 = v22;
        sub_10000BF1C(&qword_10017C778);
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v25))
        {
          uint64_t v33 = sub_100021098(v11, v13, v27, v28, v29, v30, v31, v32, v58, v59, v60, v61, v63, v64, v65, v67, v68, (uint64_t)v69, v70,
                  (uint64_t)v71,
                  v72,
                  v73,
                  v74,
                  v75,
                  v76,
                  v77);
          if ((v4 & 1) != (v34 & 1))
          {
LABEL_51:
            unint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          unint64_t v26 = v33;
        }
        uint64_t v6 = v71;
        if (v4)
        {
          uint64_t v35 = v71[7];
          uint64_t v36 = *(void **)(v35 + 8 * v26);
          *(void *)(v35 + 8 * v26) = v9;
        }
        else
        {
          v71[(v26 >> 6) + 8] |= 1 << v26;
          unint64_t v37 = (uint64_t *)(v6[6] + 16 * v26);
          *unint64_t v37 = v11;
          v37[1] = v13;
          *(void *)(v6[7] + 8 * v26) = v9;
          uint64_t v38 = v6[2];
          BOOL v39 = __OFADD__(v38, 1);
          uint64_t v40 = v38 + 1;
          if (v39) {
            goto LABEL_44;
          }
          v6[2] = v40;
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        ++v7;
        uint64_t v4 = v63;
      }
      while (v65 != v61);
    }
    swift_bridgeObjectRelease();
    unint64_t v41 = swift_bridgeObjectRetain();
    unint64_t v42 = (unint64_t)sub_100007C28(v41, (uint64_t)v6);
    uint64_t v43 = v42;
    uint64_t v44 = v60;
    v71 = _swiftEmptyArrayStorage;
    if (v42 >> 62) {
      break;
    }
    uint64_t v45 = *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v45) {
      goto LABEL_48;
    }
LABEL_20:
    uint64_t v46 = 0;
    uint64_t v60 = v43;
    unint64_t v62 = v43 & 0xC000000000000001;
    uint64_t v58 = v43 + 32;
    uint64_t v59 = v45;
    while (1)
    {
      id v47 = v62 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v58 + 8 * v46);
      uint64_t v48 = v47;
      BOOL v39 = __OFADD__(v46++, 1);
      if (v39) {
        break;
      }
      id v49 = [v47 actionIdentifier];
      uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v66 = v51;

      id v52 = [v48 orderedPhrases];
      sub_10000D9D4(0, (unint64_t *)&qword_10017C780);
      unint64_t v53 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v53 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v4)
        {
LABEL_27:
          v69 = _swiftEmptyArrayStorage;
          specialized ContiguousArray.reserveCapacity(_:)();
          if (v4 < 0) {
            goto LABEL_45;
          }
          uint64_t v54 = 0;
          while (1)
          {
            if (v4 == v54)
            {
              __break(1u);
              goto LABEL_41;
            }
            id v55 = (v53 & 0xC000000000000001) != 0
                ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
                : *(id *)(v53 + 8 * v54 + 32);
            uint64_t v56 = v55;
            uint64_t v67 = (uint64_t)v55;
            sub_10000A798((void **)&v67, v50, v66, &v68);
            if (v44) {
              break;
            }
            uint64_t v44 = 0;
            ++v54;

            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            if (v4 == v54)
            {
              uint64_t v4 = (uint64_t)v69;

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v45 = v59;
              goto LABEL_38;
            }
          }

          swift_release();
          __break(1u);
          goto LABEL_51;
        }
      }
      else
      {
        uint64_t v4 = *(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v4) {
          goto LABEL_27;
        }
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v4 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_38:
      sub_100054150();
      if (v46 == v45)
      {
        swift_bridgeObjectRelease_n();
        return v71;
      }
    }
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
  }
  swift_bridgeObjectRetain();
  uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
  if (v45) {
    goto LABEL_20;
  }
LABEL_48:
  swift_bridgeObjectRelease_n();
  return _swiftEmptyArrayStorage;
}

id sub_10000A720()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithArray:isa];

  return v2;
}

id sub_10000A798@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = sub_10000BF1C(&qword_10017C788);
  __chkstk_darwin(v8 - 8);
  id v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = __chkstk_darwin(v11);
  id v14 = (char *)&v46 - v13;
  uint64_t v15 = *a1;
  id v16 = [v15 parameterIdentifier:v12];
  if (v16)
  {
    uint64_t v17 = v16;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v18 = type metadata accessor for UUID();
    uint64_t v19 = (uint64_t)v10;
    uint64_t v20 = 0;
  }
  else
  {
    uint64_t v18 = type metadata accessor for UUID();
    uint64_t v19 = (uint64_t)v10;
    uint64_t v20 = 1;
  }
  sub_10000D5B0(v19, v20, 1, v18);
  sub_10000DB9C((uint64_t)v10, (uint64_t)v14, &qword_10017C788);
  type metadata accessor for UUID();
  if (sub_10000D5D8((uint64_t)v14, 1, v18) == 1)
  {
    sub_10000D600((uint64_t)v14);
    uint64_t v46 = a2;
    uint64_t v47 = a3;
    swift_bridgeObjectRetain();
    v21._countAndFlagsBits = 8995;
    v21._object = (void *)0xE200000000000000;
    String.append(_:)(v21);
    id v22 = [v15 basePhraseTemplate];
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v25 = v24;

    uint64_t v26 = v23;
    uint64_t v27 = v25;
  }
  else
  {
    uint64_t v28 = UUID.uuidString.getter();
    uint64_t v30 = v29;
    (*(void (**)(char *, uint64_t))(*(void *)(v18 - 8) + 8))(v14, v18);
    uint64_t v46 = a2;
    uint64_t v47 = a3;
    swift_bridgeObjectRetain();
    v31._countAndFlagsBits = 8995;
    v31._object = (void *)0xE200000000000000;
    String.append(_:)(v31);
    id v32 = [v15 basePhraseTemplate];
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v35 = v34;

    v36._countAndFlagsBits = v33;
    v36._object = v35;
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v37._countAndFlagsBits = 8995;
    v37._object = (void *)0xE200000000000000;
    String.append(_:)(v37);
    uint64_t v26 = v28;
    uint64_t v27 = v30;
  }
  String.append(_:)(*(Swift::String *)&v26);
  swift_bridgeObjectRelease();
  uint64_t v38 = v46;
  uint64_t v39 = v47;
  id v40 = [v15 localizedPhrase];
  uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v43 = v42;

  id v44 = objc_allocWithZone((Class)INSpeakableString);
  id result = sub_10000B09C(v38, v39, v41, v43, 0, 0);
  *a4 = result;
  return result;
}

unint64_t sub_10000AA7C(char a1)
{
  if (a1) {
    return 0xD000000000000021;
  }
  else {
    return 0xD00000000000001BLL;
  }
}

BOOL static PrimaryKey.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void PrimaryKey.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int PrimaryKey.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL sub_10000AB38(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static PrimaryKey.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_10000AB44()
{
  return PrimaryKey.hashValue.getter(*v0);
}

void sub_10000AB4C(uint64_t a1)
{
  PrimaryKey.hash(into:)(a1, *v1);
}

Swift::Int sub_10000AB54()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t sub_10000AB98()
{
  return sub_10000AA7C(*v0);
}

id sub_10000ABBC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, NSString a5)
{
  dispatch thunk of CustomStringConvertible.description.getter();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v45 = 0;
  id v9 = [a3 setItemType:18 itemId:v8 error:&v45];

  id v10 = v45;
  if (!v9)
  {
    id v13 = v45;
LABEL_20:
    _convertNSErrorToError(_:)();

LABEL_21:
    swift_willThrow();
    return v10;
  }
  id v11 = v45;

  if (a5) {
    NSString v12 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v12 = 0;
  }
  id v14 = [*(id *)(a2 + 32) localizedStringForLocaleIdentifier:v12];

  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;

  id v45 = 0;
  id v10 = sub_10000D3C0(801, v15, v17, (uint64_t)&v45, a3);
  id v18 = v45;
  if (!v10)
  {
LABEL_19:
    id v13 = v18;
    goto LABEL_20;
  }

  uint64_t v46 = *(void *)(a2 + 96);
  uint64_t v19 = *(void *)(v46 + 16);
  if (!v19)
  {
LABEL_14:
    uint64_t v31 = *(void *)(a2 + 56);
    uint64_t v32 = *(void *)(a2 + 64);
    id v45 = 0;
    id v10 = sub_10000D444(803, v31, v32, (uint64_t)&v45, a3);
    id v18 = v45;
    if (v10)
    {

      uint64_t v33 = *(void *)a2;
      uint64_t v34 = *(void *)(a2 + 8);
      id v45 = 0;
      id v35 = sub_10000D444(800, v33, v34, (uint64_t)&v45, a3);
      id v36 = v45;
      if (!v35)
      {
        id v10 = v36;
LABEL_26:
        _convertNSErrorToError(_:)();

        goto LABEL_21;
      }

      uint64_t v37 = *(void *)(a2 + 72);
      uint64_t v38 = *(void *)(a2 + 80);
      id v45 = 0;
      id v10 = sub_10000D444(802, v37, v38, (uint64_t)&v45, a3);
      id v18 = v45;
      if (v10)
      {

        id v45 = 0;
        id v39 = [a3 buildItemWithError:&v45];
        if (v39)
        {
          id v10 = v39;
          id v40 = v45;
          return v10;
        }
        id v10 = v45;
        goto LABEL_26;
      }
    }
    goto LABEL_19;
  }
  uint64_t v43 = a2;
  uint64_t v20 = (void **)(swift_bridgeObjectRetain() + 64);
  Swift::String v21 = a3;
  NSString v44 = a5;
  while (1)
  {
    id v10 = *(v20 - 3);
    id v22 = *v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v23 = v22;
    if (a5) {
      a5 = String._bridgeToObjectiveC()();
    }
    id v24 = [v23 localizedStringForLocaleIdentifier:a5];

    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v27 = v26;

    id v45 = 0;
    uint64_t v28 = v27;
    a3 = v21;
    id v29 = sub_10000D3C0(804, v25, v28, (uint64_t)&v45, v21);
    id v30 = v45;
    if (!v29) {
      break;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v20 += 5;
    --v19;
    a5 = v44;
    if (!v19)
    {
      sub_10000D818((uint64_t)&v46);
      a2 = v43;
      goto LABEL_14;
    }
  }
  uint64_t v42 = v30;
  sub_10000D818((uint64_t)&v46);
  _convertNSErrorToError(_:)();

  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_10000AF70(uint64_t a1, void (*a2)(uint64_t, unsigned char *))
{
  id v10 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v5 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 32;
    while (1)
    {
      memcpy(__dst, (const void *)(a1 + v7), sizeof(__dst));
      sub_10000D708((uint64_t)__dst);
      a2(v6, __dst);
      if (v2) {
        break;
      }
      ++v6;
      sub_10000D790((uint64_t)__dst);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v7 += 104;
      if (v5 == v6) {
        goto LABEL_5;
      }
    }
    sub_10000D790((uint64_t)__dst);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
}

id sub_10000B09C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a6)
  {
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v10 = 0;
  }
  id v11 = [v6 initWithVocabularyIdentifier:v8 spokenPhrase:v9 pronunciationHint:v10];

  return v11;
}

uint64_t sub_10000B160()
{
  uint64_t v0 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v2 = v1;
  Data.hash(into:)();

  return sub_10000DA10(v0, v2);
}

uint64_t sub_10000B1C0()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_10000EB80();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10000B200(uint64_t a1)
{
  return sub_100027254(a1, *v1);
}

uint64_t sub_10000B208(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v5 = v4;
  uint64_t v6 = a2();
  sub_10000DA10(v3, v5);
  return v6;
}

uint64_t sub_10000B258(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = a2(v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_10000B298(uint64_t a1, id *a2)
{
  return sub_10000E828(a1, a2);
}

uint64_t sub_10000B2B0(uint64_t a1, id *a2)
{
  uint64_t result = static Data._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_10000B340(uint64_t a1, id *a2)
{
  return sub_10000E708(a1, a2) & 1;
}

uint64_t sub_10000B35C(uint64_t a1, id *a2)
{
  char v3 = static Data._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

Class sub_10000B3FC()
{
  uint64_t v0 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v2 = v1;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10000DA10(v0, v2);
  return isa;
}

uint64_t sub_10000B444(void *a1, void *a2)
{
  return sub_100027184(*a1, *a2);
}

uint64_t sub_10000B450()
{
  return sub_10000E7E8(*v0, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

NSString sub_10000B480@<X0>(void *a1@<X8>)
{
  NSString result = sub_10000E8A0();
  *a1 = result;
  return result;
}

uint64_t sub_10000B4A8@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10000B4DC(*a1);
  *(_WORD *)a2 = result;
  *(unsigned char *)(a2 + 2) = BYTE2(result) & 1;
  return result;
}

uint64_t sub_10000B4DC(uint64_t result)
{
  return (unsigned __int16)result;
}

uint64_t sub_10000B4EC@<X0>(_WORD *a1@<X8>)
{
  uint64_t result = Int64.datatypeValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_10000B518()
{
  return sub_10000E7E8(*v0, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_10000B548()
{
  return sub_10000B1C0();
}

Swift::Int sub_10000B564()
{
  return sub_10000D53C();
}

uint64_t sub_10000B56C()
{
  return sub_10000B208(*v0, (uint64_t (*)(void))&Data._bridgeToObjectiveC());
}

Class sub_10000B5A4@<X0>(Class *a1@<X8>)
{
  Class result = sub_10000B3FC();
  *a1 = result;
  return result;
}

uint64_t sub_10000B5CC()
{
  return sub_1000961BC();
}

uint64_t sub_10000B5D8()
{
  return sub_10000B258(*v0, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_10000B608()
{
  return sub_10000B258(*v0, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_10000B63C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = j___sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10000B668()
{
  return sub_10000D4B4();
}

uint64_t sub_10000B674@<X0>(uint64_t *a1@<X0>, Class *a2@<X8>)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  uint64_t result = sub_10000DA10(v3, v4);
  *a2 = isa;
  return result;
}

uint64_t sub_10000B6C0()
{
  sub_10000EB38();
  uint64_t result = j___s10Foundation4DataV36_unconditionallyBridgeFromObjectiveCyACSo6NSDataCSgFZ();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_10000B6E8(uint64_t a1)
{
  uint64_t v2 = sub_10000BCCC(&qword_10017D0B0, type metadata accessor for LNSystemProtocolIdentifier);
  uint64_t v3 = sub_10000BCCC(&qword_10017CBA8, type metadata accessor for LNSystemProtocolIdentifier);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000B7A4(uint64_t a1)
{
  uint64_t v2 = sub_10000BCCC(&qword_10017CB48, type metadata accessor for LNSystemEntityProtocolIdentifier);
  uint64_t v3 = sub_10000BCCC((unint64_t *)&unk_10017CB50, type metadata accessor for LNSystemEntityProtocolIdentifier);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000B864(uint64_t a1)
{
  uint64_t v2 = sub_10000BCCC((unint64_t *)&unk_100180CF0, type metadata accessor for LNPlatformName);
  uint64_t v3 = sub_10000BCCC(&qword_10017CB60, type metadata accessor for LNPlatformName);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000B920(uint64_t a1)
{
  uint64_t v2 = sub_10000BCCC((unint64_t *)&qword_10017CB88, type metadata accessor for LNValueTypeSpecificMetadataKey);
  uint64_t v3 = sub_10000BCCC(&qword_10017CB90, type metadata accessor for LNValueTypeSpecificMetadataKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000B9DC(uint64_t a1)
{
  uint64_t v2 = sub_10000BCCC(&qword_10017CB68, type metadata accessor for LNActionTypeSpecificMetadataKey);
  uint64_t v3 = sub_10000BCCC(&qword_10017CB70, type metadata accessor for LNActionTypeSpecificMetadataKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000BA98()
{
  uint64_t v1 = sub_10000EB38();
  uint64_t result = j___sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t sub_10000BAC0(uint64_t a1)
{
  uint64_t v2 = sub_10000BCCC(&qword_10017CB78, type metadata accessor for LNSuggestedActionDialogParameterKey);
  uint64_t v3 = sub_10000BCCC(&qword_10017CB80, type metadata accessor for LNSuggestedActionDialogParameterKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000BB7C(uint64_t a1)
{
  uint64_t v2 = sub_10000BCCC(&qword_10017C828, type metadata accessor for LSPersistentIdentifier);
  uint64_t v3 = sub_10000BCCC(&qword_10017C830, type metadata accessor for LSPersistentIdentifier);
  unint64_t v4 = sub_10000DA7C();

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, v4);
}

uint64_t sub_10000BC3C()
{
  return sub_10000BCCC(&qword_10017C700, type metadata accessor for LSPersistentIdentifier);
}

uint64_t sub_10000BC84()
{
  return sub_10000BCCC(&qword_10017C708, type metadata accessor for LSPersistentIdentifier);
}

uint64_t sub_10000BCCC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000BD14()
{
  return sub_10000BCCC(&qword_10017C710, type metadata accessor for LSPersistentIdentifier);
}

uint64_t sub_10000BD5C@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_10000BDA4(uint64_t a1)
{
  uint64_t v2 = sub_10000BCCC(&qword_10017CB98, type metadata accessor for URLResourceKey);
  uint64_t v3 = sub_10000BCCC(&qword_10017CBA0, type metadata accessor for URLResourceKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000BE60()
{
  return sub_10000B208(*v0, (uint64_t (*)(void))&Data.hashValue.getter);
}

uint64_t sub_10000BE90()
{
  return sub_10000B160();
}

Swift::Int sub_10000BE98()
{
  return sub_100082020();
}

void *sub_10000BEA0(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_10000BEE4(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_10000BF1C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_10000BF60()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000EC38();

  return _swift_deallocObject(v1, v2, v3);
}

void sub_10000BFB4()
{
  sub_1000061A4(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));
}

uint64_t sub_10000BFC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000BFD4()
{
  return swift_release();
}

uint64_t sub_10000BFDC(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_10000C024()
{
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_10000C074(void *a1, uint64_t a2)
{
  sub_1000062C4(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48));
}

uint64_t sub_10000C084(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000BFDC(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000C0D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

#error "10000C174: call analysis failed (funcsize=65)"

#error "10000C260: call analysis failed (funcsize=55)"

uint64_t sub_10000C320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000C444(a1, a2, a3, a4, &qword_10017C988);
}

void sub_10000C32C()
{
  sub_10000E990();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  sub_10000EAB4(v11, v9);
  sub_10002125C();
  sub_10000E91C();
  if (v13)
  {
    __break(1u);
LABEL_12:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  sub_10000EC2C();
  sub_10000BF1C(&qword_10017C980);
  if (sub_10000EA94())
  {
    sub_10002125C();
    sub_10000EB28();
    if (!v15) {
      goto LABEL_12;
    }
    unint64_t v1 = v14;
  }
  uint64_t v16 = *v0;
  if (v2)
  {
    uint64_t v17 = v16[7];
    swift_bridgeObjectRelease();
    *(void *)(v17 + 8 * v1) = v12;
    sub_10000E930();
  }
  else
  {
    sub_10000D070(v1, v10, v8, v6, v4, v12, v16);
    swift_bridgeObjectRetain();
    sub_10000E930();
    swift_bridgeObjectRetain();
  }
}

uint64_t sub_10000C438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000C444(a1, a2, a3, a4, &unk_10017C978);
}

#error "10000C464: call analysis failed (funcsize=50)"

uint64_t sub_10000C50C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000C444(a1, a2, a3, a4, &unk_10017C8B0);
}

uint64_t sub_10000C518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_10000CAC0(a1, a2, a3, a4, a5, a6, &qword_10017C970);
}

#error "10000C53C: call analysis failed (funcsize=51)"

uint64_t sub_10000C5F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000CBF8(a1, a2, a3, a4, &unk_10017DCE0);
}

void sub_10000C600()
{
  sub_10000E990();
  char v2 = v0;
  char v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = type metadata accessor for UUID();
  sub_10000E948();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  sub_10000EBF4();
  Swift::Int v13 = *v0;
  sub_1000212E8(v6);
  sub_10000E91C();
  if (v16)
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v17 = v14;
  char v18 = v15;
  sub_10000BF1C((uint64_t *)&unk_10017C960);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v4 & 1, v13))
  {
    unint64_t v19 = sub_1000212E8(v6);
    if ((v18 & 1) == (v20 & 1))
    {
      unint64_t v17 = v19;
      goto LABEL_5;
    }
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
LABEL_5:
  Swift::String v21 = (void *)*v2;
  if (v18)
  {
    uint64_t v22 = v21[7];

    *(void *)(v22 + 8 * v17) = v8;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v1, v6, v9);
    sub_10000D0D8(v17, v1, v8, v21);
  }
  sub_10000E930();
}

uint64_t sub_10000C73C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000C444(a1, a2, a3, a4, &unk_10017C9C0);
}

#error "10000C768: call analysis failed (funcsize=74)"

#error "10000C8B0: call analysis failed (funcsize=71)"

id sub_10000C998(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v9 = *v4;
  sub_100021438();
  sub_10000E91C();
  if (v12)
  {
    __break(1u);
LABEL_12:
    type metadata accessor for LNSuggestedActionDialogParameterKey(0);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v13 = v10;
  char v14 = v11;
  sub_10000BF1C(&qword_10017C8B8);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v9))
  {
    sub_100021438();
    sub_10000EBB0();
    if (!v16) {
      goto LABEL_12;
    }
    unint64_t v13 = v15;
  }
  unint64_t v17 = (void *)*v5;
  if (v14)
  {
    char v18 = (uint64_t *)(v17[7] + 16 * v13);
    id result = (id)swift_bridgeObjectRelease();
    *char v18 = a1;
    v18[1] = a2;
  }
  else
  {
    sub_10000D2EC(v13, (uint64_t)a3, a1, a2, v17);
    return a3;
  }
  return result;
}

uint64_t sub_10000CAB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_10000CAC0(a1, a2, a3, a4, a5, a6, &qword_10017C8F8);
}

uint64_t sub_10000CAC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  sub_10000EAB4(a1, a2);
  sub_1000211E0();
  sub_10000E91C();
  if (v12)
  {
    __break(1u);
LABEL_12:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  sub_10000EC2C();
  sub_10000BF1C(a7);
  if (sub_10000EA94())
  {
    sub_1000211E0();
    sub_10000EB28();
    if (!v14) {
      goto LABEL_12;
    }
    uint64_t v8 = v13;
  }
  if (v9)
  {
    uint64_t v15 = *(void *)(*(void *)v7 + 56);
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v15 + 8 * v8) = a1;
  }
  else
  {
    unint64_t v17 = sub_10000EC44();
    sub_10000D334(v17, v18, v19, v20, a5, a1, v21);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10000CBE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000C444(a1, a2, a3, a4, &unk_10017C9B0);
}

uint64_t sub_10000CBEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000CBF8(a1, a2, a3, a4, &qword_100180CD0);
}

#error "10000CC18: call analysis failed (funcsize=50)"

uint64_t sub_10000CCC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000C444(a1, a2, a3, a4, &unk_10017C9A0);
}

uint64_t sub_10000CCCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000CBF8(a1, a2, a3, a4, &qword_10017C9A8);
}

uint64_t sub_10000CCD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000C444(a1, a2, a3, a4, &unk_10017C990);
}

uint64_t sub_10000CCE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000CBF8(a1, a2, a3, a4, &qword_10017C998);
}

#error "10000CD30: call analysis failed (funcsize=69)"

#error "10000CE20: call analysis failed (funcsize=53)"

#error "10000CF18: call analysis failed (funcsize=65)"

uint64_t sub_10000CFEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000C444(a1, a2, a3, a4, &unk_10017C8A8);
}

uint64_t sub_10000CFF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000C444(a1, a2, a3, a4, &qword_10017C8E8);
}

_OWORD *sub_10000D004(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_10000E7D8(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

unint64_t sub_10000D070(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  a7[(result >> 6) + 8] |= 1 << result;
  uint64_t v7 = (void *)(a7[6] + 32 * result);
  *uint64_t v7 = a2;
  v7[1] = a3;
  void v7[2] = a4;
  v7[3] = a5;
  *(void *)(a7[7] + 8 * result) = a6;
  uint64_t v8 = a7[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a7[2] = v10;
  }
  return result;
}

unint64_t sub_10000D0BC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t result = sub_10000EA08(a1, a2, a3, a4, a5, a6);
  if (v9) {
    __break(1u);
  }
  else {
    *(void *)(v7 + 16) = v8;
  }
  return result;
}

uint64_t sub_10000D0D8(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_10000D190(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, a4, v10);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

uint64_t sub_10000D240(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = sub_10000BF1C((uint64_t *)&unk_10017EB90);
  uint64_t result = sub_10000DB9C(a4, v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, (uint64_t *)&unk_10017EB90);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

unint64_t sub_10000D2EC(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  *(void *)(a5[6] + 8 * result) = a2;
  uint64_t v5 = (void *)(a5[7] + 16 * result);
  *uint64_t v5 = a3;
  v5[1] = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

unint64_t sub_10000D334(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t result = sub_10000E9C8(a1, a2, a3, a4, a5, a6, a7);
  if (v10) {
    __break(1u);
  }
  else {
    *(void *)(v8 + 16) = v9;
  }
  return result;
}

unint64_t sub_10000D350(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result = sub_10000EA58(a1, a2, a3, a4, a5);
  if (v8) {
    __break(1u);
  }
  else {
    *(void *)(v6 + 16) = v7;
  }
  return result;
}

unint64_t sub_10000D36C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  a7[(result >> 6) + 8] |= 1 << result;
  uint64_t v7 = (void *)(a7[6] + 16 * result);
  *uint64_t v7 = a2;
  v7[1] = a3;
  char v8 = (void *)(a7[7] + 24 * result);
  *char v8 = a4;
  v8[1] = a5;
  v8[2] = a6;
  uint64_t v9 = a7[2];
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a7[2] = v11;
  }
  return result;
}

id sub_10000D3C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v9 = [a5 addFieldWithType:a1 value:v8 error:a4];

  return v9;
}

id sub_10000D444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  NSString v8 = String._bridgeToObjectiveC()();
  id v9 = [a5 addFieldWithType:a1 value:v8 error:a4];

  return v9;
}

uint64_t sub_10000D4B4()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

Swift::Int sub_10000D53C()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10000D5B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_10000D5D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t sub_10000D600(uint64_t a1)
{
  uint64_t v2 = sub_10000BF1C(&qword_10017C788);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for LNSystemProtocolIdentifier(uint64_t a1)
{
}

id sub_10000D674(uint64_t a1, uint64_t a2)
{
  return sub_10000ABBC(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), *(NSString *)(v2 + 32));
}

uint64_t sub_10000D698(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void sub_10000D6B0()
{
  sub_100009B08(*(void **)(v0 + 16), *(void *)(v0 + 24), v0 + 32, (uint64_t)&unk_10016F0D8, (uint64_t)sub_10000D6FC, (uint64_t)&unk_10016F0F0, 0);
}

void sub_10000D6FC(void *a1, uint64_t a2)
{
  sub_1000093D8(a1, a2, *(void *)(v2 + 16), v2 + 24);
}

uint64_t sub_10000D708(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  long long v3 = *(void **)(a1 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v4 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10000D790(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  long long v3 = *(void **)(a1 + 88);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10000D818(uint64_t a1)
{
  return a1;
}

uint64_t *sub_10000D844(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_10000D8AC()
{
  swift_bridgeObjectRelease();
  sub_10000E788(v0 + 32);

  return _swift_deallocObject(v0, 72, 7);
}

void sub_10000D8F4()
{
  sub_100009B08(*(void **)(v0 + 16), *(void *)(v0 + 24), v0 + 32, (uint64_t)&unk_10016F178, (uint64_t)sub_10000D97C, (uint64_t)&unk_10016F190, 2u);
}

uint64_t sub_10000D940()
{
  swift_bridgeObjectRelease();
  sub_10000E788(v0 + 24);
  sub_10000EC38();

  return _swift_deallocObject(v1, v2, v3);
}

void sub_10000D97C(void *a1, uint64_t a2)
{
  sub_100009C00(a1, a2, *(void *)(v2 + 16), v2 + 24);
}

unint64_t sub_10000D988()
{
  unint64_t result = qword_10017C818;
  if (!qword_10017C818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C818);
  }
  return result;
}

uint64_t sub_10000D9D4(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_10000DA10(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_10000DA68(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10000DA10(a1, a2);
  }
  return a1;
}

unint64_t sub_10000DA7C()
{
  unint64_t result = qword_10017C838;
  if (!qword_10017C838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C838);
  }
  return result;
}

void type metadata accessor for LNSuggestedActionDialogParameterKey(uint64_t a1)
{
}

uint64_t sub_10000DADC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_10000DB34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000BF1C((uint64_t *)&unk_10017EB90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000DB9C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10000BF1C(a3);
  uint64_t v4 = sub_10000EBA4();
  v5(v4);
  return a2;
}

void type metadata accessor for LNTranscriptActionSource(uint64_t a1)
{
}

void type metadata accessor for LNSystemEntityProtocolIdentifier(uint64_t a1)
{
}

void type metadata accessor for LNPlatformName(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for LNActionTypeSpecificMetadataKey(uint64_t a1)
{
}

void type metadata accessor for LNValueTypeSpecificMetadataKey(uint64_t a1)
{
}

void type metadata accessor for LogicalType(uint64_t a1)
{
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
}

unsigned char *initializeBufferWithCopyOfBuffer for DonationError(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for DonationError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for DonationError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10000DDFCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_10000DE24(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_10000DE30(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for DonationError()
{
  return &type metadata for DonationError;
}

uint64_t destroy for AppShortcutDonator(uint64_t a1)
{
  swift_release();

  return swift_bridgeObjectRelease();
}

void *_s10LinkDaemon18AppShortcutDonatorVwCP_0(void *a1, void *a2)
{
  int v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  id v4 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AppShortcutDonator(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  id v4 = (void *)a2[1];
  uint64_t v5 = (void *)a1[1];
  a1[1] = v4;
  id v6 = v4;

  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for AppShortcutDonator(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AppShortcutDonator(uint64_t a1, uint64_t a2)
{
  swift_release();
  id v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AppShortcutDonator(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppShortcutDonator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppShortcutDonator()
{
  return &type metadata for AppShortcutDonator;
}

void type metadata accessor for Result(uint64_t a1)
{
}

void type metadata accessor for LNBundleMetadataVersion(uint64_t a1)
{
}

void type metadata accessor for LNShortcutTileColor(uint64_t a1)
{
}

void sub_10000E084(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_10000E0CC()
{
  return sub_10000BCCC(&qword_10017CA90, type metadata accessor for LNSystemProtocolIdentifier);
}

uint64_t sub_10000E114()
{
  return sub_10000BCCC(&qword_10017CA98, type metadata accessor for LNSystemProtocolIdentifier);
}

unint64_t sub_10000E164()
{
  unint64_t result = qword_10017CAA0;
  if (!qword_10017CAA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CAA0);
  }
  return result;
}

uint64_t sub_10000E1B0()
{
  return sub_10000BCCC(&qword_10017CAA8, type metadata accessor for URLResourceKey);
}

uint64_t sub_10000E1F8()
{
  return sub_10000BCCC(&qword_10017CAB0, type metadata accessor for URLResourceKey);
}

uint64_t sub_10000E240()
{
  return sub_10000BCCC(&qword_10017CAB8, type metadata accessor for URLResourceKey);
}

uint64_t sub_10000E288()
{
  return sub_10000BCCC(&qword_10017CAC0, type metadata accessor for LNValueTypeSpecificMetadataKey);
}

uint64_t sub_10000E2D0()
{
  return sub_10000BCCC(&qword_10017CAC8, type metadata accessor for LNValueTypeSpecificMetadataKey);
}

uint64_t sub_10000E318()
{
  return sub_10000BCCC(&qword_10017CAD0, type metadata accessor for LNSuggestedActionDialogParameterKey);
}

uint64_t sub_10000E360()
{
  return sub_10000BCCC(&qword_10017CAD8, type metadata accessor for LNSuggestedActionDialogParameterKey);
}

uint64_t sub_10000E3A8()
{
  return sub_10000BCCC(&qword_10017CAE0, type metadata accessor for LNActionTypeSpecificMetadataKey);
}

uint64_t sub_10000E3F0()
{
  return sub_10000BCCC(&qword_10017CAE8, type metadata accessor for LNActionTypeSpecificMetadataKey);
}

uint64_t sub_10000E438()
{
  return sub_10000BCCC(&qword_10017CAF0, type metadata accessor for LNPlatformName);
}

uint64_t sub_10000E480()
{
  return sub_10000BCCC(&qword_10017CAF8, type metadata accessor for LNPlatformName);
}

uint64_t sub_10000E4C8()
{
  return sub_10000BCCC(&qword_10017CB00, type metadata accessor for LNSystemEntityProtocolIdentifier);
}

uint64_t sub_10000E510()
{
  return sub_10000BCCC(&qword_10017CB08, type metadata accessor for LNSystemEntityProtocolIdentifier);
}

uint64_t sub_10000E558()
{
  return sub_10000BCCC(&qword_10017CB10, type metadata accessor for LNSystemEntityProtocolIdentifier);
}

uint64_t sub_10000E5A0()
{
  return sub_10000BCCC(&qword_10017CB18, type metadata accessor for LNPlatformName);
}

uint64_t sub_10000E5E8()
{
  return sub_10000BCCC(&qword_10017CB20, type metadata accessor for LNSuggestedActionDialogParameterKey);
}

uint64_t sub_10000E630()
{
  return sub_10000BCCC(&qword_10017CB28, type metadata accessor for LNActionTypeSpecificMetadataKey);
}

uint64_t sub_10000E678()
{
  return sub_10000BCCC(&qword_10017CB30, type metadata accessor for LNValueTypeSpecificMetadataKey);
}

uint64_t sub_10000E6C0()
{
  return sub_10000BCCC(&qword_10017CB38, type metadata accessor for LNSystemProtocolIdentifier);
}

uint64_t sub_10000E708(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_10000E788(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

_OWORD *sub_10000E7D8(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_10000E7E8(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = a2(v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_10000E828(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

NSString sub_10000E8A0()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v0 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10000E964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  return sub_100021098(a2, a3, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

BOOL sub_10000E9A8()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1 & 1, v0);
}

unint64_t sub_10000E9C8(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(a7 + 8 * (result >> 6) + 64) |= 1 << result;
  BOOL v7 = (void *)(*(void *)(a7 + 48) + 32 * result);
  *BOOL v7 = a2;
  v7[1] = a3;
  void v7[2] = a4;
  v7[3] = a5;
  *(void *)(*(void *)(a7 + 56) + 8 * result) = a6;
  return result;
}

unint64_t sub_10000EA08(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(a6 + 8 * (result >> 6) + 64) |= 1 << result;
  id v6 = (void *)(*(void *)(a6 + 48) + 16 * result);
  *id v6 = a2;
  v6[1] = a3;
  BOOL v7 = (void *)(*(void *)(a6 + 56) + 16 * result);
  *BOOL v7 = a4;
  v7[1] = a5;
  return result;
}

unint64_t sub_10000EA58(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a5 + 8 * (result >> 6) + 64) |= 1 << result;
  uint64_t v5 = (void *)(*(void *)(a5 + 48) + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(*(void *)(a5 + 56) + 8 * result) = a4;
  return result;
}

BOOL sub_10000EA94()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1 & 1, v0);
}

uint64_t sub_10000EAB4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10000EACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  return sub_100021098(a3, a4, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

uint64_t sub_10000EB10()
{
  return swift_slowDealloc();
}

uint64_t sub_10000EB38()
{
  return *(void *)v0;
}

uint64_t sub_10000EB58()
{
  return v0;
}

uint64_t sub_10000EB74()
{
  return v0 + 8;
}

uint64_t sub_10000EB80()
{
  return String.hash(into:)();
}

uint64_t sub_10000EBA4()
{
  return v0;
}

uint64_t sub_10000EBC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  return sub_100021098(v27, v26, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

uint64_t sub_10000EBDC()
{
  return v0;
}

BOOL sub_10000EC0C()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1 & 1, v0);
}

uint64_t sub_10000EC44()
{
  return v0;
}

uint64_t (*sub_10000EC64())(void *a1)
{
  char v1 = v0;
  uint64_t v2 = sub_10000BF1C(&qword_10017C788);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  __chkstk_darwin(v7);
  uint64_t v8 = sub_100042C44(v0);
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v31 = v8;
    switch((unint64_t)[v1 type])
    {
      case 0uLL:
        swift_bridgeObjectRelease();
        id v11 = [v1 executionUUID];
        if (v11)
        {
          uint64_t v12 = v11;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          BOOL v13 = *(void (**)(void))(v6 + 32);
          sub_10001011C();
          v13();
          sub_10000D5B0((uint64_t)v4, 0, 1, v5);
          if (sub_10000D5D8((uint64_t)v4, 1, v5) != 1)
          {
            sub_10001011C();
            v13();
            sub_10001011C();
            v13();
            swift_allocObject();
            sub_10001011C();
            v13();
            return sub_10000FF98;
          }
        }
        else
        {
          sub_10000D5B0((uint64_t)v4, 1, 1, v5);
        }
        sub_1000100CC((uint64_t)v4, &qword_10017C788);
        break;
      case 1uLL:
        id v15 = [v1 entityIdentifier];
        if (!v15) {
          goto LABEL_13;
        }
        id v16 = v15;
        unint64_t v17 = (void *)swift_allocObject();
        v17[2] = v31;
        v17[3] = v10;
        v17[4] = v16;
        return (uint64_t (*)(void *))sub_10000FF08;
      case 2uLL:
        sub_10000FDC0(v1, (SEL *)&selRef_actionType);
        if (!v18) {
          goto LABEL_13;
        }
        id v19 = [v1 entityIdentifier];
        if (v19)
        {
          id v20 = v19;
          uint64_t v21 = (void *)swift_allocObject();
          sub_10001012C(v21)[6] = v20;
          return sub_10000FEB8;
        }
        else
        {
          id v29 = (void *)swift_allocObject();
          sub_10001012C(v29);
          return sub_10000FE64;
        }
      case 3uLL:
        uint64_t v22 = sub_10000FDC0(v1, (SEL *)&selRef_entityType);
        if (!v23) {
          goto LABEL_13;
        }
        uint64_t v24 = v22;
        uint64_t v25 = v23;
        uint64_t v26 = (void *)swift_allocObject();
        v26[2] = v31;
        v26[3] = v10;
        v26[4] = v24;
        v26[5] = v25;
        return (uint64_t (*)(void *))sub_10000FDB4;
      default:
LABEL_13:
        swift_bridgeObjectRelease();
        break;
    }
  }
  sub_10000FD64();
  swift_allocError();
  *uint64_t v27 = 2;
  return (uint64_t (*)(void *))swift_willThrow();
}

uint64_t sub_10000F07C(void *a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = [a1 executionUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  char v7 = static UUID.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v7 & 1;
}

uint64_t sub_10000F180(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = sub_100042C44();
  if (!v8) {
    return 0;
  }
  if (v7 == a2 && v8 == a3)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0) {
      return 0;
    }
  }
  return sub_10000F214(a4) & 1;
}

uint64_t sub_10000F214(void *a1)
{
  id v2 = [v1 resolvedAction];
  id v3 = [v2 parameters];

  sub_10000D9D4(0, (unint64_t *)&unk_10017FAC0);
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v5 = sub_10000F7C4(v4);
  swift_bridgeObjectRelease();
  uint64_t v6 = v5[2];
  if (v6)
  {
    uint64_t v7 = (uint64_t)(v5 + 4);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100010008(v7, (uint64_t)v15);
      sub_10000D9D4(0, &qword_10017CC18);
      if (swift_dynamicCast())
      {
        id v8 = [v14 identifier];

        if (v8)
        {
          sub_10000D9D4(0, qword_10017CC20);
          id v9 = a1;
          id v10 = v8;
          char v11 = static NSObject.== infix(_:_:)();

          if (v11) {
            break;
          }
        }
      }
      v7 += 32;
      if (!--v6)
      {
        swift_bridgeObjectRelease_n();
        return 0;
      }
    }
    swift_bridgeObjectRelease_n();
    return 1;
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t sub_10000F3F8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v12 = sub_100042C44();
  if (!v13) {
    return 0;
  }
  if (v12 == a2 && v13 == a3)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0) {
      return 0;
    }
  }
  id v16 = [a1 resolvedAction];
  id v17 = [v16 identifier];

  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = v19;

  if (v18 == a4 && v20 == a5)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0) {
      return 0;
    }
  }
  return sub_10000F214(a6) & 1;
}

uint64_t sub_10000F528(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_100042C44();
  char v12 = v11;
  if (v11)
  {
    if (v10 == a2 && v11 == a3)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      char v12 = 0;
      if ((v14 & 1) == 0) {
        return v12 & 1;
      }
    }
    id v15 = [a1 resolvedAction];
    id v16 = [v15 identifier];

    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;

    if (v17 == a4 && v19 == a5) {
      char v12 = 1;
    }
    else {
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
  }
  return v12 & 1;
}

uint64_t sub_10000F640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_100042C44();
  if (!v10) {
    return 0;
  }
  if (v9 == a2 && v10 == a3)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0) {
      return 0;
    }
  }
  return sub_10000F6E0(a4, a5) & 1;
}

uint64_t sub_10000F6E0(uint64_t a1, uint64_t a2)
{
  id v3 = v2;
  id v6 = [v3 resolvedAction];
  id v7 = [v6 parameters];

  sub_10000D9D4(0, (unint64_t *)&unk_10017FAC0);
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v9 = sub_10000F9FC(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  LOBYTE(a2) = sub_10000FBA8((unint64_t)v9, a1, a2);
  swift_bridgeObjectRelease();
  return a2 & 1;
}

void *sub_10000F7C4(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_21;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    id v3 = _swiftEmptyArrayStorage;
    unint64_t v19 = a1 & 0xC000000000000001;
    for (uint64_t i = 4; ; ++i)
    {
      id v5 = v19 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(a1 + 8 * i);
      uint64_t v6 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      id v7 = v5;
      id v8 = [v7 value];
      if (v8)
      {
        id v9 = v8;
        id v10 = [v9 value];
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        sub_100010008((uint64_t)v15, (uint64_t)v18);
        sub_10000E788((uint64_t)v15);
      }
      else
      {
        memset(v18, 0, sizeof(v18));
      }
      sub_100010064((uint64_t)v18, (uint64_t)&v16);

      if (v17)
      {
        sub_10000E7D8(&v16, v18);
        sub_10000E7D8(v18, &v16);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10001E44C();
          id v3 = v12;
        }
        unint64_t v11 = v3[2];
        if (v11 >= v3[3] >> 1)
        {
          sub_10001E44C();
          id v3 = v13;
        }
        v3[2] = v11 + 1;
        sub_10000E7D8(&v16, &v3[4 * v11 + 4]);
      }
      else
      {
        sub_1000100CC((uint64_t)&v16, &qword_10017D3A0);
      }
      if (v6 == v2)
      {
        swift_bridgeObjectRelease();
        return v3;
      }
    }
    __break(1u);
LABEL_21:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void *sub_10000F9FC(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v3 = 4;
    while (1)
    {
      id v4 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v3);
      uint64_t v5 = v3 - 3;
      if (__OFADD__(v3 - 4, 1)) {
        break;
      }
      id v6 = v4;
      id v7 = [v6 value];
      if (v7)
      {
        id v8 = v7;
        id v9 = [v7 valueType];

        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
      }
      ++v3;
      if (v5 == v2) {
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_17:
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10000FBA8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_21;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v7 = 4;
    while (1)
    {
      id v8 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v7);
      id v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      self;
      unint64_t v11 = (void *)swift_dynamicCastObjCClass();
      if (v11)
      {
        uint64_t v12 = a3;
        id v13 = [v11 identifier];
        uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v16 = v15;

        a3 = v12;
        if (v14 == a2 && v16 == v12)
        {
          swift_bridgeObjectRelease();

          uint64_t v6 = 1;
          goto LABEL_19;
        }
        char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        if (v18)
        {
          uint64_t v6 = 1;
          goto LABEL_19;
        }
      }
      else
      {
      }
      ++v7;
      if (v10 == v6)
      {
        uint64_t v6 = 0;
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_21:
    swift_bridgeObjectRetain();
  }
LABEL_19:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

unint64_t sub_10000FD64()
{
  unint64_t result = qword_10017CC10;
  if (!qword_10017CC10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CC10);
  }
  return result;
}

uint64_t sub_10000FDB4(uint64_t a1)
{
  return sub_10000F640(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10000FDC0(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t sub_10000FE24()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10000FE64(void *a1)
{
  return sub_10000F528(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10000FE70()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10000FEB8(void *a1)
{
  return sub_10000F3F8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void **)(v1 + 48));
}

uint64_t sub_10000FEC8()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10000FF08(uint64_t a1)
{
  return sub_10000F180(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_10000FF14()
{
  type metadata accessor for UUID();
  sub_100010140();
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10000FF98(void *a1)
{
  type metadata accessor for UUID();

  return sub_10000F07C(a1);
}

uint64_t sub_100010008(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100010064(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000BF1C(&qword_10017D3A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000100CC(uint64_t a1, uint64_t *a2)
{
  sub_10000BF1C(a2);
  sub_100010140();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

void *sub_10001012C(void *result)
{
  result[2] = *(void *)(v4 - 72);
  result[3] = v1;
  result[4] = v3;
  result[5] = v2;
  return result;
}

uint64_t sub_100010158()
{
  return swift_initClassMetadata2();
}

void sub_1000101B8(uint64_t a1)
{
  uint64_t v16 = a1;
  uint64_t v2 = *(void *)(*(void *)v1 + 80);
  uint64_t v15 = *(void *)(v2 - 8);
  __chkstk_darwin(a1);
  uint64_t v4 = (char *)&v13 - v3;
  type metadata accessor for Optional();
  uint64_t v5 = type metadata accessor for CheckedContinuation();
  uint64_t v14 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  id v8 = (char *)&v13 - v7;
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v13 - v9;
  unint64_t v11 = (os_unfair_lock_s *)(*(void *)(v1 + 16) + 16);
  os_unfair_lock_lock(v11);
  swift_beginAccess();
  uint64_t v17 = *(void *)(v1 + 24);
  type metadata accessor for Array();
  swift_getWitnessTable();
  if (Collection.isEmpty.getter())
  {
    if (*(unsigned char *)(v1 + 40) == 1)
    {
      sub_10000D5B0((uint64_t)v10, 1, 1, v2);
      CheckedContinuation.resume(returning:)();
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v8, v16, v5);
      swift_beginAccess();
      type metadata accessor for Array();
      Array.append(_:)();
      swift_endAccess();
    }
    os_unfair_lock_unlock(v11);
  }
  else
  {
    swift_beginAccess();
    swift_getWitnessTable();
    RangeReplaceableCollection.removeFirst()();
    swift_endAccess();
    os_unfair_lock_unlock(v11);
    uint64_t v12 = v15;
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v10, v4, v2);
    sub_10000D5B0((uint64_t)v10, 0, 1, v2);
    CheckedContinuation.resume(returning:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v4, v2);
  }
}

uint64_t sub_10001050C(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return _swift_task_switch(sub_100010530, 0, 0);
}

uint64_t sub_100010530()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[5] = v3;
  v3[2] = *(void *)(v2 + 16);
  v3[3] = *(void *)(v2 + 24);
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  uint64_t v5 = type metadata accessor for Optional();
  *uint64_t v4 = v0;
  v4[1] = sub_100010634;
  uint64_t v6 = v0[2];
  return withCheckedContinuation<A>(isolation:function:_:)(v6, 0, 0, 0x29287478656ELL, 0xE600000000000000, sub_100010B50, v3, v5);
}

uint64_t sub_100010634()
{
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t sub_100010718(uint64_t a1)
{
  swift_retain();
  sub_1000101B8(a1);

  return swift_release();
}

uint64_t sub_100010760(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100010808;
  return sub_10001050C(a1, a2);
}

uint64_t sub_100010808()
{
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t sub_1000108D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  *uint64_t v12 = v6;
  v12[1] = sub_1000109A0;
  return __sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF(a1, a2, a3, a5, a6);
}

uint64_t sub_1000109A0()
{
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t sub_100010A70()
{
  return swift_retain();
}

uint64_t sub_100010A78()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100010AA8()
{
  sub_100010A78();

  return _swift_deallocClassInstance(v0, 41, 7);
}

uint64_t type metadata accessor for AsyncWorkQueue()
{
  return sub_100010B5C();
}

uint64_t sub_100010AF4()
{
  return swift_getWitnessTable();
}

uint64_t sub_100010B10@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  sub_100010A70();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

void *sub_100010B44()
{
  return &protocol witness table for Never;
}

uint64_t sub_100010B50(uint64_t a1)
{
  return sub_100010718(a1);
}

uint64_t sub_100010B5C()
{
  return swift_getGenericMetadata();
}

uint64_t sub_100010B8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t type metadata accessor for AsyncWorkQueue.AsyncIterator()
{
  return sub_100010B5C();
}

uint64_t sub_100010BD4()
{
  return sub_1000137E0(*(uint64_t (**)(void))(v0 + 8));
}

void static Daemon.main()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v74 = a2;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  sub_10000E948();
  uint64_t v66 = v6;
  ((void (*)(void))__chkstk_darwin)();
  uint64_t v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  sub_10000E948();
  uint64_t v11 = v10;
  ((void (*)(void))__chkstk_darwin)();
  uint64_t v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000BF1C(&qword_10017DCC0);
  uint64_t v14 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v65 = (uint64_t)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = a1;
  __chkstk_darwin(v14);
  uint64_t v72 = type metadata accessor for Logger();
  sub_10000E948();
  unint64_t v67 = v16;
  uint64_t v18 = *(void *)(v17 + 64);
  uint64_t v20 = __chkstk_darwin(v19);
  v71 = (char *)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  char v22 = (char *)&v55 - v21;
  uint64_t aBlock = v3;
  sub_10000BF1C((uint64_t *)&unk_10017EAF0);
  String.init<A>(describing:)();
  if (!LNLogSubsystem) {
    __break(1u);
  }
  uint64_t v60 = v13;
  uint64_t v61 = v11;
  uint64_t v68 = v9;
  unint64_t v62 = v8;
  uint64_t v69 = v5;
  String.init(cString:)();
  Logger.init(subsystem:category:)();
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  uint64_t v70 = v22;
  if (v25)
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    uint64_t aBlock = swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 136315138;
    uint64_t v75 = sub_100013090(0xD000000000000023, 0x8000000100142AD0, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "%s launched, checking in", v26, 0xCu);
    swift_arrayDestroy();
    sub_10000EB10();
    sub_10000EB10();
  }

  uint64_t v28 = v73;
  uint64_t v27 = v74;
  (*(void (**)(uint64_t, uint64_t))(v74 + 16))(v73, v74);
  uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8))(v28, v27);
  uint64_t v30 = type metadata accessor for TaskPriority();
  uint64_t v31 = v65;
  sub_10000D5B0(v65, 1, 1, v30);
  unint64_t v32 = v67;
  unint64_t v33 = v67 + 16;
  uint64_t v63 = *(void (**)(char *, char *, uint64_t))(v67 + 16);
  uint64_t v34 = v71;
  uint64_t v35 = v72;
  v63(v71, v70, v72);
  unint64_t v59 = v33;
  uint64_t v36 = *(unsigned __int8 *)(v32 + 80);
  uint64_t v64 = v36 | 7;
  uint64_t v37 = (char *)swift_allocObject();
  *((void *)v37 + 2) = 0;
  *((void *)v37 + 3) = 0;
  uint64_t v56 = (uint64_t (**)(uint64_t))v29;
  *((void *)v37 + 4) = v29;
  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
  v38(&v37[(v36 + 40) & ~v36], v34, v35);
  uint64_t v58 = (void (*)(uint64_t, char *, uint64_t))v38;
  swift_bridgeObjectRetain();
  sub_100011AA4(v31, (uint64_t)&unk_10017CD48, (uint64_t)v37);
  swift_release();
  id v39 = (void (__cdecl *)(int))SIG_IGN.getter();
  signal(15, v39);
  unint64_t v67 = sub_100011C08();
  static OS_dispatch_source.makeSignalSource(signal:queue:)();
  swift_getObjectType();
  uint64_t v40 = v72;
  v63(v34, v70, v72);
  uint64_t v65 = ((v36 + 32) & ~v36) + v18;
  uint64_t v41 = (v36 + 32) & ~v36;
  uint64_t v57 = v41;
  unint64_t v42 = (v65 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v43 = swift_allocObject();
  uint64_t v44 = v74;
  *(void *)(v43 + 16) = v73;
  *(void *)(v43 + 24) = v44;
  v38((char *)(v43 + v41), v34, v40);
  *(void *)(v43 + v42) = v56;
  v80 = sub_100011FD8;
  uint64_t v81 = v43;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v77 = 1107296256;
  uint64_t v56 = &v78;
  v78 = sub_1000125A8;
  v79 = &unk_10016F698;
  id v45 = _Block_copy(&aBlock);
  uint64_t v46 = v60;
  static DispatchQoS.unspecified.getter();
  uint64_t v47 = v62;
  sub_100012604();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  _Block_release(v45);
  uint64_t v66 = *(void *)(v66 + 8);
  ((void (*)(char *, uint64_t))v66)(v47, v69);
  uint64_t v48 = v70;
  uint64_t v61 = *(void *)(v61 + 8);
  ((void (*)(char *, uint64_t))v61)(v46, v68);
  swift_release();
  OS_dispatch_source.activate()();
  id v49 = (void (__cdecl *)(int))SIG_IGN.getter();
  signal(31, v49);
  static OS_dispatch_source.makeSignalSource(signal:queue:)();
  swift_getObjectType();
  uint64_t v51 = v71;
  uint64_t v50 = v72;
  v63(v71, v48, v72);
  uint64_t v52 = swift_allocObject();
  uint64_t v53 = v74;
  *(void *)(v52 + 16) = v73;
  *(void *)(v52 + 24) = v53;
  v58(v52 + v57, v51, v50);
  v80 = sub_10001287C;
  uint64_t v81 = v52;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v77 = 1107296256;
  v78 = sub_1000125A8;
  v79 = &unk_10016F6E8;
  uint64_t v54 = _Block_copy(&aBlock);
  static DispatchQoS.unspecified.getter();
  sub_100012604();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  _Block_release(v54);
  ((void (*)(char *, uint64_t))v66)(v47, v69);
  ((void (*)(char *, uint64_t))v61)(v46, v68);
  swift_release();
  OS_dispatch_source.activate()();
  dispatch_main();
}

uint64_t sub_1000113B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 24) = a4;
  *(void *)(v5 + 32) = a5;
  return _swift_task_switch(sub_1000113D8, 0, 0);
}

uint64_t sub_1000113D8()
{
  sub_10000EC58();
  uint64_t v1 = v0[3];
  uint64_t v2 = (void *)swift_task_alloc();
  v0[5] = v2;
  v2[2] = v1;
  v2[3] = &unk_10017CDC8;
  v2[4] = 0;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[6] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000114B8;
  sub_100013E18();
  return withTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_1000114B8()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_1000115A0, 0, 0);
}

uint64_t sub_1000115A0()
{
  sub_100013E0C();
  swift_bridgeObjectRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 24);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 134217984;
    *(void *)(v0 + 16) = *(void *)(v3 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Finished checking in %ld entry points", v4, 0xCu);
    sub_10000EB10();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  sub_10000EB74();
  return v5();
}

uint64_t sub_1000116B8()
{
  type metadata accessor for Logger();
  sub_10000E948();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = ((v5 + 40) & ~v5) + *(void *)(v4 + 64);
  uint64_t v7 = v5 | 7;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = sub_100013E6C();
  v9(v8);

  return _swift_deallocObject(v0, v6, v7);
}

uint64_t sub_100011754()
{
  sub_100013E0C();
  uint64_t v1 = type metadata accessor for Logger();
  sub_100013DE8(v1);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_100013DFC(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_100011814;
  uint64_t v7 = sub_100013E84();
  return sub_1000113B8(v7, v8, v9, v10, v3);
}

uint64_t sub_100011814()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10000EB74();
  return v3();
}

uint64_t sub_1000118D4(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_1000118F4, 0, 0);
}

uint64_t sub_1000118F4()
{
  sub_100013E0C();
  sub_10000BEA0(*(void **)(v0 + 16), *(void *)(*(void *)(v0 + 16) + 24));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000119E4;
  uint64_t v2 = sub_100013EB0();
  return v3(v2);
}

uint64_t sub_1000119E4()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10000EB74();
  return v3();
}

uint64_t sub_100011AA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  if (sub_10000D5D8(a1, 1, v6) == 1)
  {
    sub_100013C08(a1);
  }
  else
  {
    TaskPriority.rawValue.getter();
    sub_100013EC4();
    v7();
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

unint64_t sub_100011C08()
{
  unint64_t result = qword_10017CD50;
  if (!qword_10017CD50)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10017CD50);
  }
  return result;
}

uint64_t sub_100011C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin();
  uint64_t v29 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000BF1C(&qword_10017DCC0);
  __chkstk_darwin();
  uint64_t v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    v25[1] = v10;
    uint64_t v26 = a1;
    unint64_t v16 = (uint8_t *)v15;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v28 = a4;
    uint64_t v31 = v17;
    *(_DWORD *)unint64_t v16 = 136315138;
    v25[0] = v16 + 4;
    uint64_t v18 = _typeName(_:qualified:)();
    uint64_t v27 = v8;
    uint64_t v30 = sub_100013090(v18, v19, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v8 = v27;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s received SIGTERM, shutting down gracefully", v16, 0xCu);
    swift_arrayDestroy();
    a4 = v28;
    swift_slowDealloc();
    a1 = v26;
    swift_slowDealloc();
  }

  static TaskPriority.userInitiated.getter();
  uint64_t v20 = type metadata accessor for TaskPriority();
  sub_10000D5B0((uint64_t)v12, 0, 1, v20);
  uint64_t v21 = v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v29, a1, v8);
  unint64_t v22 = (*(unsigned __int8 *)(v9 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v23 = (char *)swift_allocObject();
  *((void *)v23 + 2) = 0;
  *((void *)v23 + 3) = 0;
  *((void *)v23 + 4) = a3;
  *((void *)v23 + 5) = a4;
  *((void *)v23 + 6) = a2;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v23[v22], v21, v8);
  swift_bridgeObjectRetain();
  sub_100011AA4((uint64_t)v12, (uint64_t)&unk_10017CD78, (uint64_t)v23);
  return swift_release();
}

uint64_t sub_100011F44()
{
  type metadata accessor for Logger();
  sub_100010140();
  v1 += 8;
  uint64_t v2 = *(unsigned __int8 *)(v1 + 72);
  uint64_t v3 = v2 | 7;
  unint64_t v4 = ((*(void *)(v1 + 56) + ((v2 + 32) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  sub_100013EC4();
  v5();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v3);
}

uint64_t sub_100011FD8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(type metadata accessor for Logger() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v0 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_100011C48(v0 + v4, v5, v1, v2);
}

uint64_t sub_100012080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a5;
  v6[5] = a6;
  v6[3] = a4;
  return _swift_task_switch(sub_1000120A4, 0, 0);
}

uint64_t sub_1000120A4()
{
  sub_10000EC58();
  uint64_t v1 = v0[3];
  uint64_t v2 = (void *)swift_task_alloc();
  v0[6] = v2;
  v2[2] = v1;
  v2[3] = &unk_10017CD80;
  v2[4] = 0;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[7] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100012184;
  sub_100013E18();
  return withTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_100012184()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10001226C, 0, 0);
}

uint64_t sub_10001226C()
{
  uint64_t v9 = v0;
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    uint64_t v4 = _typeName(_:qualified:)();
    *(void *)(v0 + 16) = sub_100013090(v4, v5, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%s successfully shut down, terminating", v3, 0xCu);
    swift_arrayDestroy();
    sub_10000EB10();
    sub_10000EB10();
  }

  xpc_transaction_exit_clean();
  sub_10000EB74();
  return v6();
}

uint64_t sub_1000123CC(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_1000123EC, 0, 0);
}

uint64_t sub_1000123EC()
{
  sub_100013E0C();
  sub_10000BEA0(*(void **)(v0 + 16), *(void *)(*(void *)(v0 + 16) + 24));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000124DC;
  uint64_t v2 = sub_100013EB0();
  return v3(v2);
}

uint64_t sub_1000124DC()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v2 = *v1;
  sub_100010BC4();
  *uint64_t v3 = v2;
  swift_task_dealloc();
  if (v0) {
    swift_errorRelease();
  }
  sub_10000EB74();
  return v4();
}

uint64_t sub_1000125A8(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_1000125EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000125FC()
{
  return swift_release();
}

uint64_t sub_100012604()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t sub_100012684()
{
  uint64_t v0 = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v0, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136315138;
    uint64_t v3 = _typeName(_:qualified:)();
    sub_100013090(v3, v4, &v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v0, v1, "%s received SIGUSR2, dumping state", v2, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  if (qword_10017C218 != -1) {
    swift_once();
  }
  return sub_100014C50();
}

uint64_t sub_1000127FC()
{
  type metadata accessor for Logger();
  sub_100010140();
  v1 += 8;
  uint64_t v2 = *(unsigned __int8 *)(v1 + 72);
  uint64_t v3 = ((v2 + 32) & ~v2) + *(void *)(v1 + 56);
  uint64_t v4 = v2 | 7;
  sub_100013EC4();
  v5();

  return _swift_deallocObject(v0, v3, v4);
}

uint64_t sub_10001287C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100013DE8(v0);

  return sub_100012684();
}

uint64_t sub_1000128D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[16] = a4;
  v5[17] = a5;
  v5[14] = a2;
  v5[15] = a3;
  sub_10000BF1C(&qword_10017DCC0);
  v5[18] = swift_task_alloc();
  v5[19] = swift_task_alloc();
  return _swift_task_switch(sub_100012980, 0, 0);
}

uint64_t sub_100012980()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v21 = (long long *)(v0 + 16);
    uint64_t v3 = v1 + 32;
    uint64_t v4 = type metadata accessor for TaskPriority();
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v22 = v2;
      uint64_t v6 = *(void *)(v0 + 144);
      uint64_t v5 = *(void *)(v0 + 152);
      uint64_t v8 = *(void *)(v0 + 128);
      uint64_t v7 = *(void *)(v0 + 136);
      sub_10000D5B0(v5, 1, 1, v4);
      sub_10000C0D4(v3, (uint64_t)v21);
      uint64_t v9 = (void *)swift_allocObject();
      v9[2] = 0;
      v9[3] = 0;
      v9[4] = v8;
      v9[5] = v7;
      sub_10000D698(v21, (uint64_t)(v9 + 6));
      sub_100013BA0(v5, v6);
      LODWORD(v6) = sub_10000D5D8(v6, 1, v4);
      swift_retain();
      if (v6 == 1)
      {
        sub_100013C08(*(void *)(v0 + 144));
      }
      else
      {
        TaskPriority.rawValue.getter();
        sub_100013EC4();
        v10();
      }
      if (v9[2])
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v13 = v12;
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v11 = 0;
        uint64_t v13 = 0;
      }
      uint64_t v14 = **(void **)(v0 + 112);
      uint64_t v15 = swift_allocObject();
      *(void *)(v15 + 16) = &unk_10017CDA0;
      *(void *)(v15 + 24) = v9;
      uint64_t v16 = v13 | v11;
      if (v13 | v11)
      {
        uint64_t v16 = v0 + 56;
        *(void *)(v0 + 56) = 0;
        *(void *)(v0 + 64) = 0;
        *(void *)(v0 + 72) = v11;
        *(void *)(v0 + 80) = v13;
      }
      uint64_t v17 = *(void *)(v0 + 152);
      *(void *)(v0 + 88) = 1;
      *(void *)(v0 + 96) = v16;
      *(void *)(v0 + 104) = v14;
      swift_task_create();
      swift_release();
      sub_100013C08(v17);
      v3 += 40;
      --v2;
    }
    while (v22 != 1);
    swift_bridgeObjectRelease();
  }
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v0 + 160) = v18;
  uint64_t v19 = sub_10000BF1C(&qword_10017CDB0);
  *uint64_t v18 = v0;
  v18[1] = sub_100012C70;
  return TaskGroup.awaitAllRemainingTasks(isolation:)(0, 0, v19);
}

uint64_t sub_100012C70()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EB74();
  return v3();
}

uint64_t sub_100012D68(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v8;
  *uint64_t v8 = v6;
  v8[1] = sub_100013DD8;
  return v10(a6);
}

uint64_t sub_100012E44()
{
  sub_10000EC58();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  swift_getWitnessTable();
  *uint64_t v1 = v0;
  v1[1] = sub_100013DD8;
  return sub_100010BD4();
}

uint64_t sub_100012EF0(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100012FCC;
  return v6(a1);
}

uint64_t sub_100012FCC()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10000EB74();
  return v3();
}

uint64_t sub_100013090(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100013164(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_100010008((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_100010008((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_10000E788((uint64_t)v12);
  return v7;
}

uint64_t sub_100013164(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_1000132BC((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter();
      uint64_t result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    uint64_t result = (uint64_t)sub_100013394(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter();
    if (!v8)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

void *sub_1000132BC(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

void *sub_100013394(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_10001342C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1000135A0(0, v2[2] + 1, 1, (uint64_t)v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1000135A0((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  }
  v2[2] = v4 + 1;
  *((unsigned char *)v2 + v4 + 32) = 0;
  return v2;
}

void *sub_10001342C(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int v2 = String.UTF8View._foreignCount()();
    if (v2) {
      goto LABEL_6;
    }
    return &_swiftEmptyArrayStorage;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    Swift::Int v2 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
LABEL_6:
  unint64_t v3 = sub_1000AAD88(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    unint64_t v4 = v3;
    uint64_t v5 = _StringGuts.copyUTF8(into:)();
    if ((v6 & 1) != 0 || v5 != v2) {
      goto LABEL_14;
    }
    return v4;
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_14:
  uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1000135A0(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000BF1C(&qword_10017CD68);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_100013750(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100013678(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_100013678(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

char *sub_100013750(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

uint64_t sub_1000137E0(uint64_t (*a1)(void))
{
  return a1();
}

unint64_t sub_1000137EC()
{
  unint64_t result = qword_10017EB30;
  if (!qword_10017EB30)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017EB30);
  }
  return result;
}

unint64_t sub_10001383C()
{
  unint64_t result = qword_10017EB40;
  if (!qword_10017EB40)
  {
    sub_10000BFDC((uint64_t *)&unk_10017C740);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017EB40);
  }
  return result;
}

uint64_t sub_100013890()
{
  type metadata accessor for Logger();
  sub_10000E948();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = ((v5 + 56) & ~v5) + *(void *)(v4 + 64);
  uint64_t v7 = v5 | 7;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = sub_100013E6C();
  v9(v8);

  return _swift_deallocObject(v0, v6, v7);
}

uint64_t sub_10001392C(uint64_t a1)
{
  uint64_t v3 = v1[4];
  uint64_t v4 = type metadata accessor for Logger();
  sub_100013DE8(v4);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[6];
  uint64_t v9 = (uint64_t)v1 + ((*(unsigned __int8 *)(v5 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  uint64_t v10 = swift_task_alloc();
  size_t v11 = (void *)sub_100013DFC(v10);
  *size_t v11 = v12;
  v11[1] = sub_100013DD8;
  return sub_100012080(a1, v6, v7, v8, v9, v3);
}

uint64_t sub_100013A14()
{
  sub_100013E0C();
  sub_100013E9C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100013DFC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  uint64_t v3 = sub_100013E50();
  return sub_1000128D8(v3, v4, v5, v6, v7);
}

uint64_t sub_100013AAC()
{
  swift_unknownObjectRelease();
  swift_release();
  sub_10000E788(v0 + 48);

  return _swift_deallocObject(v0, 88, 7);
}

uint64_t sub_100013AF4()
{
  sub_100013E0C();
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)sub_100013DFC(v2);
  *uint64_t v3 = v4;
  v3[1] = sub_100013DD8;
  uint64_t v5 = sub_100013E84();
  return sub_100012D68(v5, v6, v7, v8, v1, v0 + 48);
}

uint64_t sub_100013BA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000BF1C(&qword_10017DCC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100013C08(uint64_t a1)
{
  uint64_t v2 = sub_10000BF1C(&qword_10017DCC0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100013C68()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100013CA0()
{
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100013DFC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100011814;
  uint64_t v3 = sub_100013E34();
  return v4(v3);
}

uint64_t sub_100013D3C()
{
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100013DFC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  uint64_t v3 = sub_100013E34();
  return v4(v3);
}

uint64_t sub_100013DE8(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_100013DFC(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t sub_100013E34()
{
  return v0;
}

uint64_t sub_100013E50()
{
  return v0;
}

uint64_t sub_100013E6C()
{
  return v0 + v1;
}

uint64_t sub_100013E84()
{
  return v0;
}

uint64_t sub_100013EB0()
{
  return v0;
}

void *sub_100013ED0(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_1000577D0();
    uint64_t v4 = (unsigned __int8 *)(a1 + 48);
    do
    {
      uint64_t v6 = *((void *)v4 - 2);
      uint64_t v5 = *((void *)v4 - 1);
      uint64_t v7 = *v4;
      swift_bridgeObjectRetain();
      uint64_t v8 = a2(v6, v5, v7);
      uint64_t v10 = v9;
      char v12 = v11;
      swift_bridgeObjectRelease();
      unint64_t v13 = _swiftEmptyArrayStorage[2];
      if (v13 >= _swiftEmptyArrayStorage[3] >> 1) {
        sub_1000577D0();
      }
      v4 += 24;
      _swiftEmptyArrayStorage[2] = v13 + 1;
      uint64_t v14 = (char *)&_swiftEmptyArrayStorage[3 * v13];
      *((void *)v14 + 4) = v8;
      *((void *)v14 + 5) = v10;
      v14[48] = v12 & 1;
      --v2;
    }
    while (v2);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100013FF0()
{
  id v1 = [v0 entitlements];
  NSString v2 = String._bridgeToObjectiveC()();
  sub_100014918();
  id v3 = [v1 objectForKey:v2 ofClass:swift_getObjCClassFromMetadata()];

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_100010064((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    if (swift_dynamicCast()) {
      return v5;
    }
  }
  else
  {
    sub_100014958((uint64_t)v7);
  }
  return 0;
}

void *sub_100014104(uint64_t a1, uint64_t a2)
{
  id v3 = v2;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = self;
  id v8 = [v2 URL];
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  URL._bridgeToObjectiveC()(v9);
  char v11 = v10;
  char v12 = *(void (**)(uint64_t))(v6 + 8);
  uint64_t v13 = sub_100014C3C();
  v12(v13);
  id v14 = [v7 ln_uniqueBundleWithURL:v11];

  if (v14)
  {
    uint64_t v15 = sub_100014420(a1, a2);
  }
  else
  {
    if (qword_10017C470 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_10000BEE4(v16, (uint64_t)qword_100181F08);
    id v17 = v3;
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136315138;
      id v21 = [v17 URL];
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100014A94();
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v24 = v23;
      uint64_t v25 = sub_100014C3C();
      v12(v25);
      sub_100013090(v22, v24, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Unable to load bundle at %s while fetching SiriKit alternative app names", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    return _swiftEmptyArrayStorage;
  }
  return v15;
}

void *sub_100014420(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100014AE4(v2);
  if (!v5)
  {
    long long v51 = 0u;
    long long v52 = 0u;
    goto LABEL_22;
  }
  sub_10001B588(&v51, 0xD000000000000015, 0x8000000100142E40, v5);
  swift_bridgeObjectRelease();
  if (!*((void *)&v52 + 1))
  {
LABEL_22:
    sub_100014958((uint64_t)&v51);
    goto LABEL_23;
  }
  sub_10000BF1C(&qword_10017CDD8);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_23:
    if (qword_10017C470 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    sub_10000BEE4(v34, (uint64_t)qword_100181F08);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "App declares no INAlternativeAppNames", v37, 2u);
      swift_slowDealloc();
    }

    return _swiftEmptyArrayStorage;
  }
  uint64_t v6 = v47;
  uint64_t v7 = *(void *)(v47 + 16);
  if (v7)
  {
    uint64_t v42 = a1;
    uint64_t v43 = (uint64_t)v2;
    uint64_t v44 = a2;
    swift_bridgeObjectRetain();
    uint64_t v8 = 0;
    uint64_t v9 = _swiftEmptyArrayStorage;
    uint64_t v45 = 0x8000000100142E80;
    uint64_t v46 = (char *)&type metadata for Any + 8;
    while (1)
    {
      uint64_t v10 = *(void *)(v6 + 8 * v8 + 32);
      if (*(void *)(v10 + 16))
      {
        swift_bridgeObjectRetain();
        uint64_t v17 = sub_100021098(0xD000000000000014, 0x8000000100142E60, v11, v12, v13, v14, v15, v16, v41, v42, v43, v44, v45, (uint64_t)v46, v47, v48, v49, v50, v51,
                *((uint64_t *)&v51 + 1),
                v52,
                *((uint64_t *)&v52 + 1),
                v53,
                v54,
                v55,
                v56);
        if (v18)
        {
          sub_100010008(*(void *)(v10 + 56) + 32 * v17, (uint64_t)&v51);
          if (swift_dynamicCast())
          {
            uint64_t v25 = v47;
            uint64_t v26 = v48;
            if (*(void *)(v10 + 16)
              && (uint64_t v27 = sub_100021098(0xD00000000000001ALL, v45, v19, v20, v21, v22, v23, v24, v41, v42, v43, v44, v45, (uint64_t)v46, v47, v48, v49, v50, v51,
                          *((uint64_t *)&v51 + 1),
                          v52,
                          *((uint64_t *)&v52 + 1),
                          v53,
                          v54,
                          v55,
                          v56),
                  (v28 & 1) != 0)
              && (sub_100010008(*(void *)(v10 + 56) + 32 * v27, (uint64_t)&v51), (swift_dynamicCast() & 1) != 0))
            {
              char v29 = v47;
              swift_bridgeObjectRelease();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                goto LABEL_13;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
              char v29 = 0;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
LABEL_13:
                sub_10001E658();
                uint64_t v9 = v30;
              }
            }
            unint64_t v31 = v9[2];
            if (v31 >= v9[3] >> 1)
            {
              sub_10001E658();
              uint64_t v9 = v33;
            }
            v9[2] = v31 + 1;
            unint64_t v32 = &v9[3 * v31];
            v32[4] = v25;
            v32[5] = v26;
            *((unsigned char *)v32 + 48) = v29;
            goto LABEL_19;
          }
        }
        swift_bridgeObjectRelease();
      }
LABEL_19:
      if (v7 == ++v8)
      {
        swift_bridgeObjectRelease();
        goto LABEL_30;
      }
    }
  }
  uint64_t v9 = _swiftEmptyArrayStorage;
LABEL_30:
  uint64_t v40 = swift_bridgeObjectRelease();
  __chkstk_darwin(v40);
  uint64_t v38 = sub_100013ED0((uint64_t)v9, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100014B50);
  swift_bridgeObjectRelease();
  return v38;
}

uint64_t sub_100014808()
{
  return sub_10001482C();
}

uint64_t sub_10001482C()
{
  return sub_1000E8888(v0);
}

uint64_t sub_100014834()
{
  return sub_100013FF0() & 1;
}

uint64_t sub_10001485C()
{
  return sub_100014880();
}

uint64_t sub_100014880()
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v2 = [v0 localizedNameWithPreferredLocalizations:isa];

  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v3;
}

void *sub_1000148F4(uint64_t a1, uint64_t a2)
{
  return sub_100014104(a1, a2);
}

unint64_t sub_100014918()
{
  unint64_t result = qword_10017CE80;
  if (!qword_10017CE80)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10017CE80);
  }
  return result;
}

uint64_t sub_100014958(uint64_t a1)
{
  uint64_t v2 = sub_10000BF1C(&qword_10017D3A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_1000149B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id result = [self sharedInstance];
  if (result)
  {
    uint64_t v12 = result;
    uint64_t v13 = sub_100014B5C(a1, a2, 0x73696C506F666E49, 0xE900000000000074, a4, a5, a6, result);
    uint64_t v15 = v14;

    if (v15) {
      return (id)v13;
    }
    swift_bridgeObjectRetain();
    return (id)a1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_100014A94()
{
  unint64_t result = qword_10017DD50;
  if (!qword_10017DD50)
  {
    type metadata accessor for URL();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DD50);
  }
  return result;
}

uint64_t sub_100014AE4(void *a1)
{
  id v1 = [a1 infoDictionary];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

id sub_100014B50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000149B8(a1, a2, a3, v3[2], v3[3], v3[4]);
}

uint64_t sub_100014B5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  NSString v10 = String._bridgeToObjectiveC()();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [a8 localizedStringForKey:v10 table:v11 bundle:a5 languageCode:v12];

  if (!v13) {
    return 0;
  }
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v14;
}

uint64_t sub_100014C3C()
{
  return v0;
}

uint64_t sub_100014C50()
{
  id v1 = (os_unfair_lock_s *)(*(void *)(v0
                                      + OBJC_IVAR____TtC10LinkDaemon25ObservationStatusRegistry_observationEntriesPerBundleIdentifier)
                          + 24);
  os_unfair_lock_lock(v1);
  uint64_t v2 = (void *)sub_100018F18();
  sub_100017A74(v2, v3);
  os_unfair_lock_unlock(v1);
  sub_1000172E0(v5);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100014CC8()
{
  id v0 = [objc_allocWithZone((Class)type metadata accessor for ObservationStatusRegistry()) init];
  sub_10000BF1C(&qword_10017CEE8);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = v0;
  qword_10017CDE0 = result;
  return result;
}

uint64_t sub_100014D24(uint64_t a1, void *a2)
{
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 8250;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  return 32;
}

uint64_t sub_100014DCC(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100143090
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x49737365636F7270 && a2 == 0xE900000000000044)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100014EC4(char a1)
{
  if (a1) {
    return 0x49737365636F7270;
  }
  else {
    return 0xD000000000000010;
  }
}

uint64_t sub_100014F08()
{
  return sub_100014EC4(*v0);
}

uint64_t sub_100014F10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100014DCC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100014F38(uint64_t a1)
{
  unint64_t v2 = sub_100018904();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100014F74(uint64_t a1)
{
  unint64_t v2 = sub_100018904();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100014FB0()
{
  sub_100018E30();
  uint64_t v3 = v2;
  uint64_t v4 = sub_10000BF1C(&qword_10017D050);
  sub_10000E948();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_100018E60();
  sub_10000BEA0(v3, v3[3]);
  sub_100018904();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v0) {
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v4);
  sub_100018E80();
}

uint64_t sub_1000150D8(uint64_t a1)
{
  sub_10000BF1C(&qword_10017D040);
  sub_10000E948();
  __chkstk_darwin(v4);
  sub_100018E0C();
  sub_100018904();
  sub_100018DD4();
  if (v1)
  {
    sub_10000E788(a1);
  }
  else
  {
    uint64_t v2 = KeyedDecodingContainer.decode(_:forKey:)();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v6 = sub_100018D60();
    v7(v6);
    sub_10000E788(a1);
    swift_bridgeObjectRelease();
  }
  return v2;
}

uint64_t sub_10001524C()
{
  return sub_100014D24(*(void *)v0, *(void **)(v0 + 8));
}

uint64_t sub_100015258@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000150D8(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(_DWORD *)(a2 + 16) = v6;
  }
  return result;
}

void sub_100015288()
{
}

uint64_t sub_1000152A8()
{
  type metadata accessor for UUID();
  sub_1000188C0((uint64_t)&qword_10017D010);
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 8250;
  v1._object = (void *)0xE200000000000000;
  String.append(_:)(v1);
  type metadata accessor for ObservationStatusRegistry.ObservationStatusChangeListener();
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  return 32;
}

uint64_t sub_100015398(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100143070
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x49737365636F7270 && a2 == 0xE900000000000044)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100015490(char a1)
{
  if (a1) {
    return 0x49737365636F7270;
  }
  else {
    return 0xD000000000000010;
  }
}

uint64_t sub_1000154D0(void *a1)
{
  uint64_t v4 = sub_10000BF1C(&qword_10017D030);
  sub_10000E948();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_100018DBC();
  sub_10000BEA0(a1, a1[3]);
  sub_1000187B4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for UUID();
  sub_1000188C0((uint64_t)&unk_10017D038);
  sub_100018D78();
  if (!v1)
  {
    type metadata accessor for ObservationStatusRegistry.ObservationStatusChangeListener();
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, v4);
}

void sub_10001563C()
{
  sub_100018E30();
  uint64_t v3 = v2;
  uint64_t v20 = v4;
  type metadata accessor for UUID();
  sub_10000E948();
  uint64_t v22 = v6;
  uint64_t v23 = v5;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000BF1C(&qword_10017D018);
  sub_10000E948();
  uint64_t v21 = v9;
  __chkstk_darwin(v10);
  uint64_t v11 = type metadata accessor for ObservationStatusRegistry.ObservationStatusChangeListener();
  __chkstk_darwin(v11);
  sub_100018E60();
  sub_10000BEA0(v3, v3[3]);
  sub_1000187B4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    sub_10000E788((uint64_t)v3);
  }
  else
  {
    uint64_t v19 = v1;
    uint64_t v12 = v22;
    sub_1000188C0((uint64_t)&unk_10017D028);
    uint64_t v13 = v23;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v19, v8, v13);
    int v14 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v15 = sub_100018E48();
    v16(v15);
    uint64_t v18 = v19;
    uint64_t v17 = v20;
    *(_DWORD *)(v19 + *(int *)(v11 + 20)) = v14;
    sub_100018800(v18, v17);
    sub_10000E788((uint64_t)v3);
    sub_100018864(v18);
  }
  sub_100018E80();
}

uint64_t sub_1000158D0()
{
  return sub_100015490(*v0);
}

uint64_t sub_1000158D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100015398(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100015900(uint64_t a1)
{
  unint64_t v2 = sub_1000187B4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001593C(uint64_t a1)
{
  unint64_t v2 = sub_1000187B4();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10001597C()
{
}

uint64_t sub_100015994(void *a1)
{
  return sub_1000154D0(a1);
}

uint64_t sub_1000159AC()
{
  _StringGuts.grow(_:)(57);
  sub_100018F2C();
  v0._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v0);
  swift_bridgeObjectRetain();
  uint64_t v1 = Array.description.getter();
  uint64_t v3 = v2;
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = v1;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  sub_100018E98(0xD000000000000024, (uint64_t)" ObservationStatusChange Listeners: ");
  type metadata accessor for ObservationStatusRegistry.ObservationStatusChangeListener();
  swift_bridgeObjectRetain();
  uint64_t v5 = Array.description.getter();
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_100015ABC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x73694C746E657665 && a2 == 0xEE007372656E6574;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000020 && a2 == 0x8000000100143040)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100015BD0(char a1)
{
  if (a1) {
    return 0xD000000000000020;
  }
  else {
    return 0x73694C746E657665;
  }
}

void sub_100015C18()
{
  sub_100018E30();
  uint64_t v3 = v2;
  uint64_t v4 = sub_10000BF1C(&qword_10017CFE0);
  sub_10000E948();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_100018DBC();
  sub_10000BEA0(v3, v3[3]);
  sub_100018588();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_10000BF1C(&qword_10017CFB0);
  sub_1000186B0((uint64_t)&unk_10017CFE8);
  sub_100018D78();
  if (!v0)
  {
    sub_10000BF1C(&qword_10017CFC8);
    sub_100018620((uint64_t)&unk_10017CFF8);
    sub_100018D78();
  }
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v4);
  sub_100018E80();
}

void *sub_100015DC4(uint64_t a1)
{
  sub_10000BF1C(&qword_10017CFA0);
  sub_10000E948();
  __chkstk_darwin(v3);
  sub_100018E0C();
  sub_100018588();
  sub_100018DD4();
  if (v1)
  {
    uint64_t v5 = _swiftEmptyArrayStorage;
    sub_10000E788(a1);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10000BF1C(&qword_10017CFB0);
    sub_1000186B0((uint64_t)&unk_10017CFB8);
    sub_100018D98();
    uint64_t v5 = v8;
    sub_10000BF1C(&qword_10017CFC8);
    sub_100018620((uint64_t)&unk_10017CFD0);
    sub_100018D98();
    uint64_t v6 = sub_100018D60();
    v7(v6);
    sub_10000E788(a1);
  }
  return v5;
}

uint64_t sub_100015F94()
{
  return sub_100015BD0(*v0);
}

uint64_t sub_100015F9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100015ABC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100015FC4(uint64_t a1)
{
  unint64_t v2 = sub_100018588();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100016000(uint64_t a1)
{
  unint64_t v2 = sub_100018588();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001603C()
{
  return sub_1000159AC();
}

void *sub_100016044@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100015DC4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

void sub_100016070()
{
}

uint64_t sub_10001608C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000017 && a2 == 0x8000000100143000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001ELL && a2 == 0x8000000100143020)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100016178()
{
  return 2;
}

uint64_t _s17AppIntents_SQLite9StatementC29___lazy_storage___columnCount33_E09230218008A0440B080F1AB3693645LLSiSgvpfi_0()
{
  return 0;
}

unint64_t sub_10001618C(char a1)
{
  if (a1) {
    return 0xD00000000000001ELL;
  }
  else {
    return 0xD000000000000017;
  }
}

void sub_1000161C8()
{
  sub_100018E30();
  uint64_t v3 = v2;
  uint64_t v4 = sub_10000BF1C(&qword_10017CEB8);
  sub_10000E948();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_100018DBC();
  sub_10000BEA0(v3, v3[3]);
  sub_100017A94();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_100017B2C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v0)
  {
    sub_10000BF1C(&qword_10017CEA8);
    sub_100017B78((uint64_t)&unk_10017CEC8);
    sub_100018D78();
  }
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v4);
  sub_100018E80();
}

void *sub_100016350(uint64_t a1)
{
  sub_10000BF1C(&qword_10017CE90);
  sub_10000E948();
  __chkstk_darwin(v3);
  sub_100018E0C();
  sub_100017A94();
  sub_100018DD4();
  if (v1)
  {
    uint64_t v5 = _swiftEmptyArrayStorage;
    sub_10000E788(a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_100017AE0();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v5 = v8;
    sub_10000BF1C(&qword_10017CEA8);
    sub_100017B78((uint64_t)&unk_10017CEB0);
    sub_100018D98();
    uint64_t v6 = sub_100018D60();
    v7(v6);
    sub_10000E788(a1);
  }
  return v5;
}

Swift::Int sub_100016508()
{
  return PrimaryKey.hashValue.getter(*v0);
}

unint64_t sub_100016524()
{
  return sub_10001618C(*v0);
}

uint64_t sub_10001652C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10001608C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100016554()
{
  return _s17AppIntents_SQLite9StatementC29___lazy_storage___columnCount33_E09230218008A0440B080F1AB3693645LLSiSgvpfi_0();
}

uint64_t sub_100016574@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100016178();
  *a1 = result;
  return result;
}

uint64_t sub_10001659C(uint64_t a1)
{
  unint64_t v2 = sub_100017A94();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000165D8(uint64_t a1)
{
  unint64_t v2 = sub_100017A94();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100016614@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100016350(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

void sub_100016644()
{
}

void sub_100016664()
{
  if (qword_10017C210 != -1) {
    swift_once();
  }
  uint64_t v0 = (os_unfair_lock_s *)(qword_10017CDE0 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(qword_10017CDE0 + 24));
  uint64_t v1 = (void **)sub_100018F18();
  sub_1000166F4(v1, v2);
  os_unfair_lock_unlock(v0);
  qword_100181768 = v3;
}

id sub_1000166F4@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  uint64_t v2 = *a1;
  *a2 = *a1;
  return v2;
}

id sub_100016724()
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = OBJC_IVAR____TtC10LinkDaemon25ObservationStatusRegistry_observationEntriesPerBundleIdentifier;
  sub_10000BF1C(&qword_10017CED8);
  uint64_t v3 = swift_allocObject();
  *(_DWORD *)(v3 + 24) = 0;
  *(void *)(v3 + 16) = &_swiftEmptyDictionarySingleton;
  *(void *)&v0[v2] = v3;
  uint64_t v4 = OBJC_IVAR____TtC10LinkDaemon25ObservationStatusRegistry_persistOperationQueued;
  sub_10000BF1C(&qword_10017CEE0);
  uint64_t v5 = swift_allocObject();
  *(_DWORD *)(v5 + 20) = 0;
  *(unsigned char *)(v5 + 16) = 0;
  *(void *)&v0[v4] = v5;
  v8.receiver = v0;
  v8.super_class = ObjectType;
  id v6 = [super init];
  sub_1000AE524();

  return v6;
}

id _LNMetadataProviderDirect.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return [super dealloc];
}

uint64_t type metadata accessor for ObservationStatusRegistry()
{
  return self;
}

uint64_t sub_1000168B0()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1000168C0@<X0>(void *a1@<X8>)
{
  id v3 = [objc_allocWithZone((Class)LNWeakProxy) initWithValue:v1];
  uint64_t result = sub_10000BF1C((uint64_t *)&unk_10017F870);
  a1[3] = result;
  *a1 = v3;
  return result;
}

uint64_t sub_100016914(void *a1)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;
  sub_100014918();
  Class isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
  char v6 = sub_1000626C0(v2, v4, isa);
  swift_bridgeObjectRelease();

  if (v6)
  {
    [a1 resume];
  }
  else
  {
    uint64_t v7 = sub_100062550();
    unint64_t v9 = v8;
    if (qword_10017C478 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10000BEE4(v10, (uint64_t)qword_100181F20);
    swift_bridgeObjectRetain();
    id v11 = a1;
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315650;
      if (v9) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 0x646E7542206C696ELL;
      }
      if (v9) {
        unint64_t v16 = v9;
      }
      else {
        unint64_t v16 = 0xED0000444920656CLL;
      }
      swift_bridgeObjectRetain();
      sub_100013090(v15, v16, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 1024;
      [v11 processIdentifier];

      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 18) = 2080;
      _StringGuts.grow(_:)(63);
      sub_100018F2C();
      v17._countAndFlagsBits = 0xD00000000000003DLL;
      String.append(_:)(v17);
      v18._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      sub_100013090(0, 0xE000000000000000, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s with PID %d attempting access to observationStatus registry: %s", (uint8_t *)v14, 0x1Cu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  return v6 & 1;
}

unint64_t sub_100016C6C(char a1)
{
  unint64_t v1 = 0xD00000000000002BLL;
  if (a1)
  {
    sub_100018F2C();
  }
  else
  {
    sub_100018EB4();
    sub_100018E98(0xD00000000000003DLL, (uint64_t)"The specified client does not have the required entitlement: ");
    v2._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    String.append(_:)(v2);
    swift_bridgeObjectRelease();
    return v4;
  }
  return v1;
}

uint64_t sub_100016CF4()
{
  return sub_1000168B0();
}

uint64_t sub_100016D0C(void *a1)
{
  return sub_100016914(a1) & 1;
}

uint64_t sub_100016D28()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_100181770 = result;
  *(void *)algn_100181778 = v1;
  return result;
}

uint64_t *sub_100016D58()
{
  if (qword_10017C220 != -1) {
    swift_once();
  }
  return &qword_100181770;
}

uint64_t sub_100016DA4(char a1)
{
  if (a1) {
    return 11002;
  }
  else {
    return 11004;
  }
}

uint64_t sub_100016DB8(char a1)
{
  char v1 = a1 & 1;
  uint64_t v2 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v11 = v2;
  unint64_t v3 = sub_100016C6C(v1);
  if (v4)
  {
    unint64_t v5 = v3;
    uint64_t v6 = v4;
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v10[3] = &type metadata for String;
    v10[0] = v5;
    v10[1] = v6;
    sub_10004B44C((uint64_t)v10, v7, v8);
    return v11;
  }
  return v2;
}

unint64_t sub_100016E6C()
{
  return sub_100016C6C(*v0);
}

uint64_t sub_100016E74()
{
  sub_100016D58();
  uint64_t v0 = qword_100181770;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_100016EB0()
{
  return sub_100016DA4(*v0);
}

uint64_t sub_100016EB8()
{
  return sub_100016DB8(*v0);
}

uint64_t sub_100016EC0(uint64_t a1)
{
  unint64_t v2 = sub_100018768();

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100016EFC(uint64_t a1)
{
  unint64_t v2 = sub_100018768();

  return Error<>._code.getter(a1, v2);
}

void sub_100016F40(uint64_t a1, unint64_t a2, unint64_t a3, char *a4, uint64_t a5, void (**a6)(void, void))
{
  id v11 = [self currentConnection];
  if (v11)
  {
    uint64_t v12 = v11;
    sub_100062550();
    if (v13)
    {
      [v12 processIdentifier];
      sub_100103D78(a1, a2, a3, a4);
      swift_bridgeObjectRelease();
      a6[2](a6, 0);

      goto LABEL_6;
    }
  }
  sub_100017C38();
  swift_allocError();
  *uint64_t v14 = 1;
  uint64_t v15 = (void *)_convertErrorToNSError(_:)();
  ((void (**)(void, void *))a6)[2](a6, v15);

  swift_errorRelease();
LABEL_6:

  _Block_release(a6);
}

uint64_t sub_1000170A0(void *a1, int a2, int a3, char *a4, void *aBlock)
{
  uint64_t v7 = _Block_copy(aBlock);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v10 = v9;
  if (a4)
  {
    unint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    a4 = v12;
  }
  else
  {
    unint64_t v11 = 0;
  }
  _Block_copy(v7);
  id v13 = a1;
  sub_100016F40(v8, v10, v11, a4, (uint64_t)v13, (void (**)(void, void))v7);
  _Block_release(v7);

  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100017178()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_1000171BC(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_10001720C(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100017284(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for ObservationStatusRegistry.BundleObservationEntry()
{
}

void sub_1000172E0(uint64_t a1)
{
  uint64_t v47 = a1 + 64;
  uint64_t v1 = 1 << *(unsigned char *)(a1 + 32);
  if (v1 < 64) {
    uint64_t v2 = ~(-1 << v1);
  }
  else {
    uint64_t v2 = -1;
  }
  unint64_t v3 = v2 & *(void *)(a1 + 64);
  int64_t v48 = (unint64_t)(v1 + 63) >> 6;
  swift_bridgeObjectRetain();
  unint64_t v4 = v3;
  int64_t v5 = 0;
  if (!v3) {
    goto LABEL_6;
  }
  while (2)
  {
    uint64_t v50 = (v4 - 1) & v4;
    int64_t v51 = v5;
    unint64_t v6 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_20:
    unint64_t v11 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v6);
    uint64_t v12 = *v11;
    unint64_t v13 = v11[1];
    uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 24 * v6 + 16);
    uint64_t v15 = qword_10017C478;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v15 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_10000BEE4(v16, (uint64_t)qword_100181F20);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    Swift::String v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315394;
      swift_bridgeObjectRetain();
      v56[0] = sub_100013090(v12, v13, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v14 + 12) = 2080;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v19 = sub_1000159AC();
      unint64_t v21 = v20;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v56[0] = sub_100013090(v19, v21, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      sub_100018ED4();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "%s: %s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_100018EEC();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      sub_100018ED4();
      swift_bridgeObjectRelease_n();
    }
    uint64_t v22 = *(void *)(v14 + 64);
    uint64_t v52 = v14 + 64;
    uint64_t v23 = 1 << *(unsigned char *)(v14 + 32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int64_t v24 = 0;
    if (v23 < 64) {
      uint64_t v25 = ~(-1 << v23);
    }
    else {
      uint64_t v25 = -1;
    }
    unint64_t v26 = v25 & v22;
    int64_t v53 = (unint64_t)(v23 + 63) >> 6;
    while (v26)
    {
      unint64_t v27 = __clz(__rbit64(v26));
      v26 &= v26 - 1;
      unint64_t v28 = v27 | (v24 << 6);
LABEL_45:
      unint64_t v32 = (uint64_t *)(*(void *)(v14 + 48) + 16 * v28);
      uint64_t v33 = *v32;
      unint64_t v34 = v32[1];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v14 = swift_slowAlloc();
        v56[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v14 = 136315394;
        swift_bridgeObjectRetain();
        *(void *)(v14 + 4) = sub_100013090(v33, v34, v56);
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v14 + 12) = 2080;
        uint64_t v54 = 0;
        unint64_t v55 = 0xE000000000000000;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(57);
        v37._countAndFlagsBits = 0xD000000000000011;
        v37._object = (void *)0x8000000100142FB0;
        String.append(_:)(v37);
        swift_bridgeObjectRetain();
        uint64_t v38 = Array.description.getter();
        uint64_t v40 = v39;
        swift_bridgeObjectRelease();
        v41._countAndFlagsBits = v38;
        v41._object = v40;
        String.append(_:)(v41);
        swift_bridgeObjectRelease();
        v42._countAndFlagsBits = 0xD000000000000024;
        v42._object = (void *)0x8000000100142FD0;
        String.append(_:)(v42);
        type metadata accessor for ObservationStatusRegistry.ObservationStatusChangeListener();
        swift_bridgeObjectRetain();
        uint64_t v43 = Array.description.getter();
        uint64_t v45 = v44;
        swift_bridgeObjectRelease();
        v46._countAndFlagsBits = v43;
        v46._object = v45;
        String.append(_:)(v46);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(void *)(v14 + 14) = sub_100013090(v54, v55, v56);
        swift_bridgeObjectRelease_n();
        sub_100018ED4();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "    %s: %s", (uint8_t *)v14, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_100018EEC();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        sub_100018ED4();
        swift_bridgeObjectRelease_n();
      }
    }
    int64_t v29 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
      __break(1u);
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    if (v29 >= v53) {
      goto LABEL_48;
    }
    unint64_t v30 = *(void *)(v52 + 8 * v29);
    ++v24;
    if (v30) {
      goto LABEL_44;
    }
    int64_t v24 = v29 + 1;
    if (v29 + 1 >= v53) {
      goto LABEL_48;
    }
    unint64_t v30 = *(void *)(v52 + 8 * v24);
    if (v30) {
      goto LABEL_44;
    }
    int64_t v24 = v29 + 2;
    if (v29 + 2 >= v53) {
      goto LABEL_48;
    }
    unint64_t v30 = *(void *)(v52 + 8 * v24);
    if (v30)
    {
LABEL_44:
      unint64_t v26 = (v30 - 1) & v30;
      unint64_t v28 = __clz(__rbit64(v30)) + (v24 << 6);
      goto LABEL_45;
    }
    int64_t v31 = v29 + 3;
    if (v31 < v53)
    {
      unint64_t v30 = *(void *)(v52 + 8 * v31);
      if (!v30)
      {
        while (1)
        {
          int64_t v24 = v31 + 1;
          if (__OFADD__(v31, 1)) {
            goto LABEL_52;
          }
          if (v24 >= v53) {
            goto LABEL_48;
          }
          unint64_t v30 = *(void *)(v52 + 8 * v24);
          ++v31;
          if (v30) {
            goto LABEL_44;
          }
        }
      }
      int64_t v24 = v31;
      goto LABEL_44;
    }
LABEL_48:
    swift_release();
    unint64_t v4 = v50;
    int64_t v5 = v51;
    if (v50) {
      continue;
    }
    break;
  }
LABEL_6:
  int64_t v7 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  if (v7 >= v48) {
    goto LABEL_50;
  }
  unint64_t v8 = *(void *)(v47 + 8 * v7);
  int64_t v9 = v5 + 1;
  if (v8) {
    goto LABEL_19;
  }
  int64_t v9 = v5 + 2;
  if (v5 + 2 >= v48) {
    goto LABEL_50;
  }
  unint64_t v8 = *(void *)(v47 + 8 * v9);
  if (v8) {
    goto LABEL_19;
  }
  int64_t v9 = v5 + 3;
  if (v5 + 3 >= v48) {
    goto LABEL_50;
  }
  unint64_t v8 = *(void *)(v47 + 8 * v9);
  if (v8) {
    goto LABEL_19;
  }
  uint64_t v10 = v5 + 4;
  if (v5 + 4 >= v48)
  {
LABEL_50:
    swift_release();
  }
  else
  {
    unint64_t v8 = *(void *)(v47 + 8 * v10);
    if (v8)
    {
      int64_t v9 = v5 + 4;
LABEL_19:
      uint64_t v50 = (v8 - 1) & v8;
      int64_t v51 = v9;
      unint64_t v6 = __clz(__rbit64(v8)) + (v9 << 6);
      goto LABEL_20;
    }
    while (1)
    {
      int64_t v9 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        break;
      }
      if (v9 >= v48) {
        goto LABEL_50;
      }
      unint64_t v8 = *(void *)(v47 + 8 * v9);
      ++v10;
      if (v8) {
        goto LABEL_19;
      }
    }
LABEL_54:
    __break(1u);
  }
}

uint64_t sub_100017A74@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

unint64_t sub_100017A94()
{
  unint64_t result = qword_10017CE98;
  if (!qword_10017CE98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CE98);
  }
  return result;
}

unint64_t sub_100017AE0()
{
  unint64_t result = qword_10017CEA0;
  if (!qword_10017CEA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CEA0);
  }
  return result;
}

unint64_t sub_100017B2C()
{
  unint64_t result = qword_10017CEC0;
  if (!qword_10017CEC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CEC0);
  }
  return result;
}

unint64_t sub_100017B78(uint64_t a1)
{
  unint64_t result = sub_100018F0C(a1);
  if (!result)
  {
    unint64_t v4 = v3;
    sub_10000BFDC(&qword_10017CEA8);
    v4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

uint64_t type metadata accessor for ObservationStatusRegistry.ObservationStatusChangeListener()
{
  uint64_t result = qword_10017CF48;
  if (!qword_10017CF48) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_100017C38()
{
  unint64_t result = qword_10017CED0;
  if (!qword_10017CED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CED0);
  }
  return result;
}

void type metadata accessor for ObservationStatusRegistry.ObservationStatusRegistryError()
{
}

uint64_t *sub_100017C98(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(_DWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_100017D64(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_100017DC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100017E44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100017EC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100017F3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100017FB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100017FCC);
}

uint64_t sub_100017FCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();

  return sub_10000D5D8(a1, a2, v4);
}

uint64_t sub_100018014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100018028);
}

uint64_t sub_100018028(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();

  return sub_10000D5B0(a1, a2, a2, v4);
}

uint64_t sub_100018074()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100018110()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100018118(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100018150(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

__n128 sub_1000181A8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t sub_1000181BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t sub_1000181FC(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 20))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10001823C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 20) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 20) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for ObservationStatusRegistry.EventListener()
{
}

ValueMetadata *type metadata accessor for ObservationStatusRegistry.BundleObservationEntry.CodingKeys()
{
  return &type metadata for ObservationStatusRegistry.BundleObservationEntry.CodingKeys;
}

uint64_t destroy for RegistryUpdatedNotification()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s10LinkDaemon27RegistryUpdatedNotificationVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for RegistryUpdatedNotification(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for RegistryUpdatedNotification(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

_OWORD *assignWithTake for RegistryUpdatedNotification(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RegistryUpdatedNotification(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RegistryUpdatedNotification(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for ObservationStatusRegistry.ObservationStatus()
{
}

unint64_t sub_100018448()
{
  unint64_t result = qword_10017CF80;
  if (!qword_10017CF80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CF80);
  }
  return result;
}

unint64_t sub_10001849C()
{
  unint64_t result = qword_10017CF88;
  if (!qword_10017CF88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CF88);
  }
  return result;
}

unint64_t sub_1000184EC()
{
  unint64_t result = qword_10017CF90;
  if (!qword_10017CF90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CF90);
  }
  return result;
}

unint64_t sub_10001853C()
{
  unint64_t result = qword_10017CF98;
  if (!qword_10017CF98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CF98);
  }
  return result;
}

unint64_t sub_100018588()
{
  unint64_t result = qword_10017CFA8;
  if (!qword_10017CFA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CFA8);
  }
  return result;
}

unint64_t sub_1000185D4()
{
  unint64_t result = qword_10017CFC0;
  if (!qword_10017CFC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CFC0);
  }
  return result;
}

unint64_t sub_100018620(uint64_t a1)
{
  unint64_t result = sub_100018F0C(a1);
  if (!result)
  {
    uint64_t v4 = v3;
    sub_10000BFDC(&qword_10017CFC8);
    sub_1000188C0(v4);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_1000186B0(uint64_t a1)
{
  unint64_t result = sub_100018F0C(a1);
  if (!result)
  {
    uint64_t v4 = v3;
    sub_10000BFDC(&qword_10017CFB0);
    v4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_10001871C()
{
  unint64_t result = qword_10017CFF0;
  if (!qword_10017CFF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CFF0);
  }
  return result;
}

unint64_t sub_100018768()
{
  unint64_t result = qword_10017D008;
  if (!qword_10017D008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D008);
  }
  return result;
}

unint64_t sub_1000187B4()
{
  unint64_t result = qword_10017D020;
  if (!qword_10017D020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D020);
  }
  return result;
}

uint64_t sub_100018800(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ObservationStatusRegistry.ObservationStatusChangeListener();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100018864(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ObservationStatusRegistry.ObservationStatusChangeListener();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000188C0(uint64_t a1)
{
  unint64_t result = sub_100018F0C(a1);
  if (!result)
  {
    v3(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_100018904()
{
  unint64_t result = qword_10017D048;
  if (!qword_10017D048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D048);
  }
  return result;
}

ValueMetadata *type metadata accessor for ObservationStatusRegistry.EventListener.CodingKeys()
{
  return &type metadata for ObservationStatusRegistry.EventListener.CodingKeys;
}

ValueMetadata *type metadata accessor for ObservationStatusRegistry.ObservationStatusChangeListener.CodingKeys()
{
  return &type metadata for ObservationStatusRegistry.ObservationStatusChangeListener.CodingKeys;
}

unsigned char *_s10LinkDaemon25ObservationStatusRegistryC22BundleObservationEntryV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100018A3CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ObservationStatusRegistry.ObservationStatus.CodingKeys()
{
  return &type metadata for ObservationStatusRegistry.ObservationStatus.CodingKeys;
}

unint64_t sub_100018A78()
{
  unint64_t result = qword_10017D058;
  if (!qword_10017D058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D058);
  }
  return result;
}

unint64_t sub_100018AC8()
{
  unint64_t result = qword_10017D060;
  if (!qword_10017D060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D060);
  }
  return result;
}

unint64_t sub_100018B18()
{
  unint64_t result = qword_10017D068;
  if (!qword_10017D068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D068);
  }
  return result;
}

unint64_t sub_100018B68()
{
  unint64_t result = qword_10017D070;
  if (!qword_10017D070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D070);
  }
  return result;
}

unint64_t sub_100018BB8()
{
  unint64_t result = qword_10017D078;
  if (!qword_10017D078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D078);
  }
  return result;
}

unint64_t sub_100018C08()
{
  unint64_t result = qword_10017D080;
  if (!qword_10017D080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D080);
  }
  return result;
}

unint64_t sub_100018C58()
{
  unint64_t result = qword_10017D088;
  if (!qword_10017D088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D088);
  }
  return result;
}

unint64_t sub_100018CA8()
{
  unint64_t result = qword_10017D090;
  if (!qword_10017D090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D090);
  }
  return result;
}

unint64_t sub_100018CF8()
{
  unint64_t result = qword_10017D098;
  if (!qword_10017D098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D098);
  }
  return result;
}

uint64_t sub_100018D60()
{
  return v0;
}

uint64_t sub_100018D78()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t sub_100018D98()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t sub_100018DD4()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t sub_100018DF8()
{
  return v0;
}

void *sub_100018E0C()
{
  return sub_10000BEA0(v0, v0[3]);
}

uint64_t sub_100018E48()
{
  return v0;
}

void sub_100018E98(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

void sub_100018EB4()
{
  _StringGuts.grow(_:)(63);
}

uint64_t sub_100018ED4()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100018EEC()
{
  return swift_slowDealloc();
}

uint64_t sub_100018F0C(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_100018F18()
{
  return v0;
}

uint64_t sub_100018F38()
{
  id v0 = (id)AFPreferencesMobileUserSessionLanguage();
  if (!v0) {
    return 0;
  }
  unint64_t v1 = v0;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

ValueMetadata *type metadata accessor for PlatformAssistantIntentGenerator()
{
  return &type metadata for PlatformAssistantIntentGenerator;
}

uint64_t sub_100018FA4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000D844(v0, qword_100181780);
  sub_10000BEE4(v0, (uint64_t)qword_100181780);
  uint64_t result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    String.init(cString:)();
    return Logger.init(subsystem:category:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *sub_100019024(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v194 = a1;
  uint64_t v195 = a3;
  v203 = _swiftEmptyArrayStorage;
  uint64_t v193 = a4;
  if (a4 >> 62) {
    goto LABEL_179;
  }
  uint64_t v4 = *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v5 = v4;
  if (!v4)
  {
LABEL_167:
    swift_bridgeObjectRelease();
    if (qword_10017C228 != -1) {
      swift_once();
    }
    uint64_t v174 = type metadata accessor for Logger();
    sub_10000BEE4(v174, (uint64_t)qword_100181780);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v175 = Logger.logObject.getter();
    os_log_type_t v176 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v175, v176))
    {
      uint64_t v177 = swift_slowAlloc();
      v202[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v177 = 134218242;
      swift_bridgeObjectRelease();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v177 + 12) = 2080;
      swift_bridgeObjectRetain();
      sub_100013090(v194, a2, v202);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v175, v176, "Generated %ld AssistantIntents on behalf of %s", (uint8_t *)v177, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    swift_beginAccess();
    return (char *)v203;
  }
LABEL_3:
  uint64_t v196 = v5;
  unsigned int v6 = self;
  unint64_t v7 = 0;
  uint64_t v183 = 0;
  unint64_t v197 = v193 & 0xC000000000000001;
  uint64_t v188 = v193 + 32;
  uint64_t v189 = v193 & 0xFFFFFFFFFFFFFF8;
  v185 = (void *)LNSystemEntityProtocolIdentifierUniqueEntity;
  uint64_t v8 = &selRef_initWithConnection_options_error_;
  v190 = (void *)LNSystemProtocolIdentifierPropertyUpdater;
  v187 = (void *)LNSystemProtocolIdentifierEntityUpdating;
  v198 = v6;
  while (1)
  {
    if (v197)
    {
      id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v7 >= *(void *)(v189 + 16)) {
        goto LABEL_175;
      }
      id v9 = *(id *)(v188 + 8 * v7);
    }
    id v10 = v9;
    BOOL v11 = __OFADD__(v7, 1);
    uint64_t v12 = v7 + 1;
    if (v11)
    {
      __break(1u);
LABEL_174:
      __break(1u);
LABEL_175:
      __break(1u);
LABEL_176:
      __break(1u);
LABEL_177:
      __break(1u);
LABEL_178:
      __break(1u);
LABEL_179:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      if (!v5) {
        goto LABEL_167;
      }
      goto LABEL_3;
    }
    id v13 = [v9 v8[85]];
    sub_10000D9D4(0, &qword_10017D0A0);
    unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v15 = [v6 entityUpdatingProtocol];
    if (v14 >> 62)
    {
      sub_10001B4E8();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      uint64_t v16 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    uint64_t v200 = v12;
    v201 = v10;
    if (v16)
    {
      unint64_t v17 = v14 & 0xC000000000000001;
      if ((v14 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v18 = *(id *)(v14 + 32);
      }
      char v19 = sub_10001B4D0();

      if (v19) {
        goto LABEL_15;
      }
      if (v16 != 1)
      {
        if (v17) {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v21 = *(id *)(v14 + 40);
        }
        char v22 = sub_10001B4D0();

        unint64_t v20 = v201;
        if (v22) {
          goto LABEL_16;
        }
        if (v16 != 2)
        {
          uint64_t v23 = 6;
          while (1)
          {
            if (v17) {
              id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v24 = *(id *)(v14 + 8 * v23);
            }
            uint64_t v25 = v24;
            uint64_t v26 = v23 - 3;
            if (__OFADD__(v23 - 4, 1)) {
              goto LABEL_174;
            }
            uint64_t v12 = static NSObject.== infix(_:_:)();

            if (v12) {
              break;
            }
            ++v23;
            BOOL v68 = v26 == v16;
            uint64_t v8 = &selRef_initWithConnection_options_error_;
            if (v68) {
              goto LABEL_31;
            }
          }
          uint64_t v8 = &selRef_initWithConnection_options_error_;
LABEL_15:
          unint64_t v20 = v201;
LABEL_16:

          sub_10001B4B8();
          goto LABEL_32;
        }
      }
    }
LABEL_31:

    sub_10001B4B8();
    unint64_t v20 = v201;
    id v27 = [v201 v8[85]];
    static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v28 = [v6 propertyUpdaterProtocol];
    sub_1000B4784();
    char v30 = v29;
    swift_bridgeObjectRelease();

    if ((v30 & 1) == 0)
    {
      id v52 = [v201 v8[85]];
      unint64_t v53 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      id v54 = [v6 openEntitySystemProtocol];
      if (v53 >> 62)
      {
        sub_10001B4E8();
        uint64_t v55 = _CocoaArrayWrapper.endIndex.getter();
        if (!v55)
        {
LABEL_102:

          sub_10001B4B8();
          goto LABEL_165;
        }
      }
      else
      {
        uint64_t v55 = *(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v55) {
          goto LABEL_102;
        }
      }
      unint64_t v56 = v53 & 0xC000000000000001;
      if ((v53 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v57 = *(id *)(v53 + 32);
      }
      char v58 = sub_10001B4D0();

      unint64_t v59 = v201;
      if ((v58 & 1) == 0)
      {
        if (v55 == 1) {
          goto LABEL_102;
        }
        if (v56) {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v148 = *(id *)(v53 + 40);
        }
        char v149 = sub_10001B4D0();

        unint64_t v59 = v201;
        if ((v149 & 1) == 0)
        {
          if (v55 == 2) {
            goto LABEL_102;
          }
          uint64_t v150 = 6;
          while (1)
          {
            if (v56) {
              id v151 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v151 = *(id *)(v53 + 8 * v150);
            }
            v152 = v151;
            uint64_t v153 = v150 - 3;
            if (__OFADD__(v150 - 4, 1)) {
              goto LABEL_177;
            }
            char v154 = static NSObject.== infix(_:_:)();

            if (v154) {
              break;
            }
            ++v150;
            BOOL v68 = v153 == v55;
            uint64_t v8 = &selRef_initWithConnection_options_error_;
            if (v68) {
              goto LABEL_102;
            }
          }
          uint64_t v8 = &selRef_initWithConnection_options_error_;
          unint64_t v59 = v201;
        }
      }

      sub_10001B4B8();
      id v60 = [v59 parameters];
      sub_10000D9D4(0, &qword_10017D0A8);
      unint64_t v61 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      unint64_t v7 = v200;
      if (!(v61 >> 62))
      {
        uint64_t v62 = *(void *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v62) {
          goto LABEL_45;
        }
LABEL_133:

        goto LABEL_134;
      }
      swift_bridgeObjectRetain();
      uint64_t v62 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v62) {
        goto LABEL_133;
      }
LABEL_45:
      if (v62 >= 1)
      {
        uint64_t v63 = 0;
        while (1)
        {
          if ((v61 & 0xC000000000000001) != 0) {
            id v64 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v64 = *(id *)(v61 + 8 * v63 + 32);
          }
          uint64_t v65 = v64;
          uint64_t v66 = sub_10004FB6C(v64);
          if (!v67) {
            goto LABEL_71;
          }
          BOOL v68 = v66 == 0x746567726174 && v67 == 0xE600000000000000;
          if (v68)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            char v69 = sub_10001B42C();
            swift_bridgeObjectRelease();
            if ((v69 & 1) == 0) {
              goto LABEL_71;
            }
          }
          id v70 = [v65 valueType:v178];
          self;
          v71 = (void *)swift_dynamicCastObjCClass();
          if (!v71)
          {

            goto LABEL_68;
          }
          id v72 = [v71 identifier];
          uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v75 = v74;

          uint64_t v82 = v195;
          if (!*(void *)(v195 + 16)
            || (uint64_t v83 = sub_100021098(v73, v75, v76, v77, v78, v79, v80, v81, v178, v179, v180, v181, (uint64_t)v182, v183, (uint64_t)v184, (uint64_t)v185, v186, (uint64_t)v187, v188,
                        v189,
                        (uint64_t)v190,
                        v191,
                        v193,
                        v194,
                        v195,
                        v196),
                (v84 & 1) == 0))
          {

            goto LABEL_65;
          }
          id v85 = *(id *)(*(void *)(v82 + 56) + 8 * v83);
          swift_bridgeObjectRelease();
          id v86 = [v85 systemProtocolMetadata];
          type metadata accessor for LNSystemEntityProtocolIdentifier(0);
          sub_10000BF1C((uint64_t *)&unk_10017C7F0);
          sub_10001B350(&qword_10017CB48, type metadata accessor for LNSystemEntityProtocolIdentifier);
          uint64_t v87 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

          if (!*(void *)(v87 + 16))
          {

LABEL_65:
            swift_bridgeObjectRelease();
LABEL_66:
            unsigned int v6 = v198;
            unint64_t v59 = v201;
LABEL_68:
            id v100 = [v65 valueType];
            self;
            if (swift_dynamicCastObjCClass())
            {

              id v101 = [v59 identifier];
              uint64_t v102 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v104 = v103;

              sub_10001AA58(v194, a2, v102, v104, 0);
              swift_bridgeObjectRelease();
              sub_1000542DC();
            }
            else
            {

              uint64_t v65 = v100;
            }
            goto LABEL_71;
          }
          id v88 = v185;
          sub_1000210C4();
          char v90 = v89;
          swift_bridgeObjectRelease();

          if ((v90 & 1) == 0)
          {

            goto LABEL_66;
          }
          id v91 = [v85 displayRepresentation];
          id v92 = [v91 name];

          id v93 = [v201 identifier];
          uint64_t v192 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v95 = v94;

          v96 = v92;
          id v97 = v92;
          v98 = v85;
          id v99 = v97;
          uint64_t v191 = sub_10001AA58(v194, a2, v192, v95, v96);
          unint64_t v59 = v201;
          swift_bridgeObjectRelease();

          sub_1000542DC();
          unsigned int v6 = v198;
LABEL_71:
          ++v63;

          if (v62 == v63)
          {

            swift_bridgeObjectRelease();
            uint64_t v147 = v196;
            unint64_t v7 = v200;
            uint64_t v8 = &selRef_initWithConnection_options_error_;
            goto LABEL_166;
          }
        }
      }
      goto LABEL_178;
    }
LABEL_32:
    id v31 = [v20 systemProtocolMetadata:v178];
    type metadata accessor for LNSystemProtocolIdentifier(0);
    sub_10000BF1C((uint64_t *)&unk_10017C7F0);
    sub_10001B350(&qword_10017D0B0, type metadata accessor for LNSystemProtocolIdentifier);
    uint64_t v32 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (!*(void *)(v32 + 16)) {
      goto LABEL_76;
    }
    id v33 = v190;
    sub_1000210C4();
    if ((v34 & 1) == 0)
    {

LABEL_76:
      swift_bridgeObjectRelease();
      goto LABEL_77;
    }
    swift_unknownObjectRetain();

    swift_bridgeObjectRelease();
    self;
    uint64_t v35 = (void *)swift_dynamicCastObjCClass();
    if (v35)
    {
      os_log_type_t v36 = v35;
      id v37 = [v35 entityIdentifier];
      uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v40 = v39;

      uint64_t v47 = v195;
      if (*(void *)(v195 + 16)
        && (uint64_t v48 = sub_100021098(v38, v40, v41, v42, v43, v44, v45, v46, v178, v179, v180, v181, (uint64_t)v182, v183, (uint64_t)v184, (uint64_t)v185, v186, (uint64_t)v187, v188,
                    v189,
                    (uint64_t)v190,
                    v191,
                    v193,
                    v194,
                    v195,
                    v196),
            (v49 & 1) != 0))
      {
        uint64_t v50 = *(void **)(*(void *)(v47 + 56) + 8 * v48);
        id v51 = v50;
      }
      else
      {
        uint64_t v50 = 0;
      }
      swift_bridgeObjectRelease();
      id v124 = [v36 entityProperty];
      uint64_t v186 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v191 = v125;
      swift_unknownObjectRelease();

      if (!v50)
      {

        goto LABEL_107;
      }
      id v123 = v50;
      goto LABEL_88;
    }
    swift_unknownObjectRelease();
LABEL_77:
    id v105 = [v20 systemProtocolMetadata];
    uint64_t v106 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (!*(void *)(v106 + 16)) {
      goto LABEL_84;
    }
    id v107 = v187;
    sub_1000210C4();
    if ((v108 & 1) == 0)
    {

LABEL_84:
      swift_bridgeObjectRelease();

LABEL_165:
      uint64_t v147 = v196;
      unint64_t v7 = v200;
      goto LABEL_166;
    }
    swift_unknownObjectRetain();

    swift_bridgeObjectRelease();
    self;
    v109 = (void *)swift_dynamicCastObjCClass();
    if (!v109)
    {

      swift_unknownObjectRelease();
LABEL_107:
      swift_bridgeObjectRelease();
      goto LABEL_165;
    }
    id v110 = [v109 entityIdentifier];
    uint64_t v111 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v113 = v112;

    uint64_t v120 = v195;
    if (!*(void *)(v195 + 16)
      || (uint64_t v121 = sub_100021098(v111, v113, v114, v115, v116, v117, v118, v119, v178, v179, v180, v181, (uint64_t)v182, v183, (uint64_t)v184, (uint64_t)v185, v186, (uint64_t)v187, v188,
                   v189,
                   (uint64_t)v190,
                   v191,
                   v193,
                   v194,
                   v195,
                   v196),
          (v122 & 1) == 0))
    {

      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      goto LABEL_165;
    }
    uint64_t v50 = *(void **)(*(void *)(v120 + 56) + 8 * v121);
    id v123 = v50;
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v186 = 0;
    uint64_t v191 = 0;
LABEL_88:
    id v126 = v123;
    id v127 = [v126 systemProtocolMetadata];
    type metadata accessor for LNSystemEntityProtocolIdentifier(0);
    sub_10001B350(&qword_10017CB48, type metadata accessor for LNSystemEntityProtocolIdentifier);
    uint64_t v128 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (*(void *)(v128 + 16)) {
      break;
    }

    swift_bridgeObjectRelease();
    unint64_t v7 = v200;
LABEL_112:

LABEL_134:
    swift_bridgeObjectRelease();
    uint64_t v147 = v196;
LABEL_166:
    if (v7 == v147) {
      goto LABEL_167;
    }
  }
  id v129 = v185;
  sub_1000210C4();
  char v131 = v130;
  swift_bridgeObjectRelease();

  unint64_t v7 = v200;
  if ((v131 & 1) == 0)
  {

    goto LABEL_112;
  }
  id v184 = v126;
  v182 = v50;
  id v132 = [v20 parameters];
  sub_10000D9D4(0, &qword_10017D0A8);
  unint64_t v133 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v133 >> 62))
  {
    uint64_t v134 = *(void *)((v133 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v134) {
      goto LABEL_92;
    }
LABEL_136:
    swift_bridgeObjectRelease();
    v137 = _swiftEmptyArrayStorage;
LABEL_137:
    v155 = sub_10001A2B0((uint64_t)v137);
    id v156 = [v20 identifier];
    uint64_t v180 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v181 = v157;

    id v158 = [v184 identifier];
    uint64_t v179 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v160 = v159;

    id v161 = [v184 properties];
    sub_10000D9D4(0, &qword_10017D0B8);
    unint64_t v162 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!(v162 >> 62))
    {
      uint64_t v163 = *(void *)((v162 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v163) {
        goto LABEL_139;
      }
      goto LABEL_163;
    }
    swift_bridgeObjectRetain();
    uint64_t v163 = _CocoaArrayWrapper.endIndex.getter();
    if (!v163)
    {
LABEL_163:
      sub_10001B508();
      v166 = 0;
      uint64_t v172 = a2;
LABEL_164:
      id v173 = [v166 title:v178];

      sub_10001A340(v194, v172, v180, v181, v179, v160, v173, (uint64_t)v155);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      sub_1000542DC();
      swift_bridgeObjectRelease();

      goto LABEL_165;
    }
LABEL_139:
    uint64_t v178 = (uint64_t)v155;
    uint64_t v164 = 4;
    while (2)
    {
      if ((v162 & 0xC000000000000001) != 0) {
        id v165 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v165 = *(id *)(v162 + 8 * v164);
      }
      v166 = v165;
      uint64_t v167 = v164 - 3;
      if (__OFADD__(v164 - 4, 1)) {
        goto LABEL_176;
      }
      uint64_t v168 = sub_10001B2EC(v165);
      if (v169)
      {
        if (v191)
        {
          if (v168 == v186 && v169 == v191)
          {
            sub_10001B508();
            swift_bridgeObjectRelease();
LABEL_160:
            unsigned int v6 = v198;
            uint64_t v172 = a2;
LABEL_161:
            unint64_t v20 = v201;
            goto LABEL_164;
          }
          char v171 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v171) {
            goto LABEL_158;
          }
LABEL_153:
        }
        else
        {

          swift_bridgeObjectRelease();
        }
        ++v164;
        BOOL v68 = v167 == v163;
        unsigned int v6 = v198;
        uint64_t v172 = a2;
        if (v68)
        {
          sub_10001B508();
          v166 = 0;
          goto LABEL_161;
        }
        continue;
      }
      break;
    }
    if (!v191)
    {
LABEL_158:
      sub_10001B508();
      goto LABEL_160;
    }
    goto LABEL_153;
  }
  swift_bridgeObjectRetain();
  uint64_t v134 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v134) {
    goto LABEL_136;
  }
LABEL_92:
  v202[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t result = sub_100057828(0, v134 & ~(v134 >> 63), 0);
  if ((v134 & 0x8000000000000000) == 0)
  {
    uint64_t v136 = 0;
    v137 = (void *)v202[0];
    do
    {
      if ((v133 & 0xC000000000000001) != 0) {
        id v138 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v138 = *(id *)(v133 + 8 * v136 + 32);
      }
      v139 = v138;
      uint64_t v140 = sub_10004FB6C(v138);
      uint64_t v142 = v141;
      id v143 = [v139 title];

      v202[0] = (uint64_t)v137;
      unint64_t v145 = v137[2];
      unint64_t v144 = v137[3];
      if (v145 >= v144 >> 1)
      {
        sub_100057828((char *)(v144 > 1), v145 + 1, 1);
        v137 = (void *)v202[0];
      }
      ++v136;
      v137[2] = v145 + 1;
      v146 = &v137[3 * v145];
      v146[4] = v140;
      v146[5] = v142;
      v146[6] = v143;
      uint64_t v8 = &selRef_initWithConnection_options_error_;
      unint64_t v20 = v201;
    }
    while (v134 != v136);
    swift_bridgeObjectRelease();
    unsigned int v6 = v198;
    goto LABEL_137;
  }
  __break(1u);
  return result;
}

void *sub_10001A2B0(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10000BF1C(&qword_10017D0F0);
    unint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    unint64_t v3 = _swiftEmptyDictionarySingleton;
  }
  unsigned int v6 = v3;
  sub_10001B114(a1, 1, &v6);
  uint64_t v4 = v6;
  if (v1) {
    swift_release();
  }
  return v4;
}

void sub_10001A340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  uint64_t v11 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v11 - 8);
  sub_10001B450();
  uint64_t v75 = v13 - v12;
  uint64_t v14 = a8 + 64;
  uint64_t v15 = 1 << *(unsigned char *)(a8 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(a8 + 64);
  int64_t v18 = (unint64_t)(v15 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v19 = 0;
  uint64_t v81 = _swiftEmptyArrayStorage;
  while (v17)
  {
    unint64_t v20 = __clz(__rbit64(v17));
    v17 &= v17 - 1;
    unint64_t v21 = v20 | (v19 << 6);
LABEL_20:
    uint64_t v25 = (void *)(*(void *)(a8 + 48) + 16 * v21);
    uint64_t v26 = v25[1];
    if (v26)
    {
      id v27 = *(void **)(*(void *)(a8 + 56) + 8 * v21);
      if (v27)
      {
        BOOL v28 = *v25 == 0x746567726174 && v26 == 0xE600000000000000;
        if (!v28 && (sub_10001B42C() & 1) == 0)
        {
          uint64_t v73 = a6;
          uint64_t v68 = type metadata accessor for URL();
          sub_10000D5B0(v75, 1, 1, v68);
          id v29 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
          uint64_t v74 = a7;
          id v70 = v27;
          swift_bridgeObjectRetain();
          sub_10001B3E4();
          id v71 = sub_1000A64B4(v30, v31, v32, v33, v34, v35, v75);
          sub_10001B398();
          uint64_t v36 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          uint64_t v38 = v37;
          swift_bridgeObjectRelease();
          sub_10000D5B0(v75, 1, 1, v68);
          objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
          swift_bridgeObjectRetain();
          id v39 = sub_1000A64B4(v36, v38, v36, v38, 0, 0, v75);
          id v40 = v74;
          if (!v74) {
            id v40 = v70;
          }
          id v64 = v40;
          sub_10000BF1C(&qword_10017D0D0);
          uint64_t v41 = swift_allocObject();
          *(_OWORD *)(v41 + 16) = xmmword_10013EF10;
          *(void *)(v41 + 32) = v71;
          *(void *)(v41 + 40) = v39;
          uint64_t v82 = v41;
          specialized Array._endMutation()();
          uint64_t v65 = v82;
          sub_10000BF1C(&qword_10017D0D8);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_10013EF20;
          *(void *)(inited + 32) = 0xD000000000000011;
          *(void *)(inited + 40) = 0x8000000100143100;
          uint64_t v43 = sub_10001B414();
          *(_OWORD *)(v43 + 16) = xmmword_10013EF30;
          *(void *)(v43 + 32) = v64;
          uint64_t v83 = v43;
          id v44 = v74;
          swift_bridgeObjectRetain();
          id v69 = v71;
          id v67 = v39;
          specialized Array._endMutation()();
          *(void *)(inited + 48) = v83;
          id v72 = v64;
          sub_10000BF1C(&qword_10017D0E0);
          uint64_t v45 = Dictionary.init(dictionaryLiteral:)();
          sub_10000D9D4(0, &qword_10017D0E8);
          uint64_t v46 = Dictionary.init(dictionaryLiteral:)();
          id v47 = objc_allocWithZone((Class)LNAssistantIntentMetadata);
          id v48 = sub_10001B480(a3, a4, v65, v45, v46);
          swift_bridgeObjectRetain_n();
          id v49 = v48;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_10001E68C();
            uint64_t v81 = v61;
          }
          unint64_t v51 = v81[2];
          unint64_t v50 = v81[3];
          if (v51 >= v50 >> 1)
          {
            sub_10001B520(v50);
            sub_10001E68C();
            uint64_t v81 = v62;
          }
          v81[2] = v51 + 1;
          id v52 = &v81[3 * v51];
          v52[4] = a1;
          v52[5] = a2;
          uint64_t v66 = v49;
          v52[6] = v49;
          sub_10001AE94(a1, a2, a5, v73, v72);
          uint64_t v54 = v53;
          unint64_t v56 = v55;
          unint64_t v57 = v81[2];
          unint64_t v58 = v81[3];
          swift_bridgeObjectRetain();
          id v59 = v56;
          if (v57 >= v58 >> 1)
          {
            sub_10001E68C();
            uint64_t v81 = v63;
          }
          v81[2] = v57 + 1;
          id v60 = &v81[3 * v57];
          v60[4] = a1;
          v60[5] = v54;
          v60[6] = v59;

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          a7 = v74;
          a6 = v73;
        }
      }
    }
  }
  int64_t v22 = v19 + 1;
  if (__OFADD__(v19, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v22 >= v18) {
    goto LABEL_36;
  }
  unint64_t v23 = *(void *)(v14 + 8 * v22);
  ++v19;
  if (v23) {
    goto LABEL_19;
  }
  int64_t v19 = v22 + 1;
  if (v22 + 1 >= v18) {
    goto LABEL_36;
  }
  unint64_t v23 = *(void *)(v14 + 8 * v19);
  if (v23) {
    goto LABEL_19;
  }
  int64_t v19 = v22 + 2;
  if (v22 + 2 >= v18) {
    goto LABEL_36;
  }
  unint64_t v23 = *(void *)(v14 + 8 * v19);
  if (v23)
  {
LABEL_19:
    unint64_t v17 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v19 << 6);
    goto LABEL_20;
  }
  int64_t v24 = v22 + 3;
  if (v24 >= v18)
  {
LABEL_36:
    swift_release();
    return;
  }
  unint64_t v23 = *(void *)(v14 + 8 * v24);
  if (v23)
  {
    int64_t v19 = v24;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v19 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v19 >= v18) {
      goto LABEL_36;
    }
    unint64_t v23 = *(void *)(v14 + 8 * v19);
    ++v24;
    if (v23) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
}

uint64_t sub_10001AA58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v10 - 8);
  sub_10001B450();
  uint64_t v13 = v12 - v11;
  if (a5)
  {
    uint64_t v60 = a1;
    uint64_t v14 = type metadata accessor for URL();
    sub_10001B460(v14);
    id v15 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
    id v16 = a5;
    sub_10001B3F8();
    id v23 = sub_1000A64B4(v17, v18, v19, v20, v21, v22, v13);
    sub_10000BF1C(&qword_10017D0D0);
    uint64_t v24 = sub_10001B414();
    *(_OWORD *)(v24 + 16) = xmmword_10013EF30;
    *(void *)(v24 + 32) = v23;
    uint64_t v61 = v24;
    specialized Array._endMutation()();
    uint64_t v25 = v61;
    sub_10000BF1C(&qword_10017D0D8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10013EF20;
    *(void *)(inited + 32) = 0xD000000000000011;
    *(void *)(inited + 40) = 0x8000000100143100;
    uint64_t v27 = sub_10001B414();
    *(_OWORD *)(v27 + 16) = xmmword_10013EF30;
    *(void *)(v27 + 32) = v16;
    uint64_t v62 = v27;
    swift_bridgeObjectRetain();
    id v28 = v23;
    specialized Array._endMutation()();
    *(void *)(inited + 48) = v62;
    id v29 = v16;
    sub_10000BF1C(&qword_10017D0E0);
    uint64_t v30 = Dictionary.init(dictionaryLiteral:)();
    sub_10000D9D4(0, &qword_10017D0E8);
    uint64_t v31 = Dictionary.init(dictionaryLiteral:)();
    id v32 = objc_allocWithZone((Class)LNAssistantIntentMetadata);
    id v33 = sub_10001B480(a3, a4, v25, v30, v31);
    swift_bridgeObjectRetain();
    id v34 = v33;
    sub_10001E68C();
    uint64_t v36 = v35;
    unint64_t v37 = *(void *)(v35 + 16);
    if (v37 >= *(void *)(v35 + 24) >> 1)
    {
      sub_10001E68C();
      uint64_t v36 = v58;
    }
    *(void *)(v36 + 16) = v37 + 1;
    uint64_t v38 = (void *)(v36 + 24 * v37);
    v38[4] = v60;
    v38[5] = a2;
    v38[6] = v34;
  }
  else
  {
    uint64_t v39 = type metadata accessor for URL();
    sub_10001B460(v39);
    id v40 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
    sub_10001B3E4();
    id v47 = sub_1000A64B4(v41, v42, v43, v44, v45, v46, v13);
    sub_10000BF1C(&qword_10017D0D0);
    uint64_t v48 = sub_10001B414();
    *(_OWORD *)(v48 + 16) = xmmword_10013EF30;
    *(void *)(v48 + 32) = v47;
    uint64_t v63 = v48;
    specialized Array._endMutation()();
    swift_bridgeObjectRetain();
    id v28 = v47;
    sub_10000BF1C(&qword_10017D0E0);
    uint64_t v49 = Dictionary.init(dictionaryLiteral:)();
    sub_10000D9D4(0, &qword_10017D0E8);
    uint64_t v50 = Dictionary.init(dictionaryLiteral:)();
    id v51 = objc_allocWithZone((Class)LNAssistantIntentMetadata);
    id v52 = sub_10001B480(a3, a4, v63, v49, v50);
    swift_bridgeObjectRetain();
    id v29 = v52;
    sub_10001E68C();
    uint64_t v36 = v53;
    unint64_t v55 = *(void *)(v53 + 16);
    unint64_t v54 = *(void *)(v53 + 24);
    if (v55 >= v54 >> 1)
    {
      sub_10001B520(v54);
      sub_10001E68C();
      uint64_t v36 = v59;
    }
    *(void *)(v36 + 16) = v55 + 1;
    unint64_t v56 = (void *)(v36 + 24 * v55);
    v56[4] = a1;
    v56[5] = a2;
    v56[6] = v29;
  }

  return v36;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_10001AE94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v7 - 8);
  sub_10001B450();
  uint64_t v10 = v9 - v8;
  type metadata accessor for URL();
  sub_10001B498();
  id v11 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  sub_10001B3E4();
  id v18 = sub_1000A64B4(v12, v13, v14, v15, v16, v17, v10);
  sub_10001B498();
  id v19 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  sub_10001B3F8();
  id v26 = sub_1000A64B4(v20, v21, v22, v23, v24, v25, v10);
  sub_10000BF1C(&qword_10017D0D0);
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_10013EF10;
  *(void *)(v27 + 32) = v18;
  *(void *)(v27 + 40) = v26;
  uint64_t v38 = v27;
  specialized Array._endMutation()();
  uint64_t v28 = v38;
  sub_10000BF1C(&qword_10017D0D8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013EF20;
  *(void *)(inited + 32) = 0xD000000000000011;
  *(void *)(inited + 40) = 0x8000000100143100;
  uint64_t v30 = sub_10001B414();
  *(_OWORD *)(v30 + 16) = xmmword_10013EF30;
  *(void *)(v30 + 32) = a5;
  uint64_t v39 = v30;
  swift_bridgeObjectRetain();
  id v31 = v18;
  id v32 = v26;
  specialized Array._endMutation()();
  *(void *)(inited + 48) = v39;
  id v33 = a5;
  sub_10000BF1C(&qword_10017D0E0);
  uint64_t v34 = Dictionary.init(dictionaryLiteral:)();
  sub_10000D9D4(0, &qword_10017D0E8);
  uint64_t v35 = Dictionary.init(dictionaryLiteral:)();
  id v36 = objc_allocWithZone((Class)LNAssistantIntentMetadata);
  sub_10001B480(a3, a4, v28, v34, v35);

  swift_bridgeObjectRetain();
}

uint64_t sub_10001B114(uint64_t a1, char a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  for (uint64_t i = (id *)(a1 + 48); ; i += 3)
  {
    uint64_t v8 = (uint64_t)*(i - 2);
    uint64_t v7 = (uint64_t)*(i - 1);
    id v9 = *i;
    uint64_t v10 = (void *)*a3;
    id v27 = *i;
    swift_bridgeObjectRetain();
    unint64_t v12 = sub_1000210C8(v8, v7);
    uint64_t v13 = v10[2];
    BOOL v14 = (v11 & 1) == 0;
    if (__OFADD__(v13, v14)) {
      break;
    }
    char v15 = v11;
    if (v10[3] >= v13 + v14)
    {
      if ((a2 & 1) == 0)
      {
        sub_10000BF1C(&qword_10017D0F8);
        _NativeDictionary.copy()();
      }
    }
    else
    {
      sub_1000227DC();
      unint64_t v16 = sub_1000210C8(v8, v7);
      if ((v15 & 1) != (v17 & 1)) {
        goto LABEL_18;
      }
      unint64_t v12 = v16;
    }
    id v18 = (void *)*a3;
    if (v15)
    {
      id v19 = *(void **)(v18[7] + 8 * v12);
      id v20 = v19;
      swift_bridgeObjectRelease();

      uint64_t v21 = v18[7];
      *(void *)(v21 + 8 * v12) = v19;
    }
    else
    {
      v18[(v12 >> 6) + 8] |= 1 << v12;
      uint64_t v22 = (uint64_t *)(v18[6] + 16 * v12);
      uint64_t *v22 = v8;
      v22[1] = v7;
      *(void *)(v18[7] + 8 * v12) = v9;
      uint64_t v23 = v18[2];
      BOOL v24 = __OFADD__(v23, 1);
      uint64_t v25 = v23 + 1;
      if (v24) {
        goto LABEL_17;
      }
      _OWORD v18[2] = v25;
    }
    a2 = 1;
    if (!--v4)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  sub_10000BF1C((uint64_t *)&unk_10017D100);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10001B2EC(void *a1)
{
  id v1 = [a1 identifier];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_10001B350(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10001B398()
{
  unint64_t result = qword_10017FFB0;
  if (!qword_10017FFB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FFB0);
  }
  return result;
}

uint64_t sub_10001B414()
{
  return swift_allocObject();
}

uint64_t sub_10001B42C()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_10001B460(uint64_t a1)
{
  return sub_10000D5B0(v1, 1, 1, a1);
}

id sub_10001B480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000919A4(a1, a2, a3, a4, a5, 0);
}

uint64_t sub_10001B498()
{
  return sub_10000D5B0(v0, 1, 1, v1);
}

uint64_t sub_10001B4B8()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10001B4D0()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t sub_10001B4E8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10001B508()
{
  return swift_bridgeObjectRelease_n();
}

BOOL sub_10001B520@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_10001B534()
{
  return swift_initClassMetadata2();
}

#error "10001B5D0: call analysis failed (funcsize=34)"

#error "10001B658: call analysis failed (funcsize=26)"

uint64_t sub_10001B680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)(a5 + 16) && (unint64_t v6 = sub_1000211E0(), (v7 & 1) != 0)) {
    return *(void *)(*(void *)(a5 + 56) + 16 * v6);
  }
  else {
    return 0;
  }
}

#error "10001B714: call analysis failed (funcsize=30)"

#error "10001B794: call analysis failed (funcsize=27)"

#error "10001B814: call analysis failed (funcsize=52)"

double sub_10001B8A0@<D0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  if (*(void *)(a1 + 16) && (sub_10002116C(), (v5 & 1) != 0))
  {
    uint64_t v6 = *(void *)(a1 + 56) + 32 * v4;
    sub_100010008(v6, (uint64_t)a2);
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

#error "10001B94C: call analysis failed (funcsize=40)"

#error "10001B9EC: call analysis failed (funcsize=32)"

#error "10001BA78: call analysis failed (funcsize=48)"

uint64_t sub_10001BAF0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = Int64.datatypeValue.getter(*a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_10001BB20@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_10001BB2C()
{
  uint64_t result = _CFXPCCreateCFObjectFromXPCObject();
  if (result)
  {
    sub_10000BF1C(&qword_10017D3A8);
    if (swift_dynamicCast()) {
      return v1;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10001BB90()
{
  uint64_t v0 = sub_10001BB2C();
  if (!v0)
  {
    long long v3 = 0u;
    long long v4 = 0u;
    goto LABEL_8;
  }
  sub_10001B588(&v3, 1701667150, 0xE400000000000000, v0);
  swift_bridgeObjectRelease();
  if (!*((void *)&v4 + 1))
  {
LABEL_8:
    sub_100027D90((uint64_t)&v3, &qword_10017D3A0);
    return 0;
  }
  if (swift_dynamicCast()) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t sub_10001BC40()
{
  uint64_t v0 = sub_10001BB2C();
  if (!v0)
  {
    long long v3 = 0u;
    long long v4 = 0u;
    goto LABEL_7;
  }
  sub_10001B588(&v3, 0x6F666E4972657355, 0xE800000000000000, v0);
  swift_bridgeObjectRelease();
  if (!*((void *)&v4 + 1))
  {
LABEL_7:
    sub_100027D90((uint64_t)&v3, &qword_10017D3A0);
    return 0;
  }
  sub_10000BF1C(&qword_10017D3A8);
  if (swift_dynamicCast()) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t sub_10001BCF8()
{
  v1[3] = v0;
  v1[4] = *v0;
  v1[5] = *v0;
  return _swift_task_switch(sub_10001BD68, v0, 0);
}

uint64_t sub_10001BD68()
{
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)(v0[5] + 88) + 8))();
  uint64_t v1 = *(void *)(v11 + 16);
  if (v1)
  {
    uint64_t v2 = type metadata accessor for XPCEventDispatcher();
    long long v3 = (uint64_t *)(v11 + 56);
    do
    {
      uint64_t v4 = v0[4];
      uint64_t v5 = *(v3 - 3);
      uint64_t v6 = *(v3 - 2);
      uint64_t v8 = *(v3 - 1);
      uint64_t v7 = *v3;
      v0[2] = v0[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      sub_100027258(v5, v6, v8, v7, (uint64_t)(v0 + 2), v2, v4, (uint64_t)&off_10016FD88);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      v3 += 4;
      --v1;
    }
    while (v1);
  }
  swift_bridgeObjectRelease();
  sub_10000EB74();
  return v9();
}

uint64_t sub_10001BEA0()
{
  sub_10000EC58();
  v1[26] = v2;
  v1[27] = v0;
  uint64_t v3 = *v0;
  v1[28] = *v0;
  v1[29] = *(void *)(v3 + 80);
  sub_100028430();
  v1[30] = v4;
  v1[31] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v1[32] = v5;
  sub_1000282DC(v5);
  v1[33] = v6;
  v1[34] = swift_task_alloc();
  v1[35] = swift_task_alloc();
  v1[36] = swift_task_alloc();
  v1[37] = swift_task_alloc();
  return _swift_task_switch(sub_10001BFD0, v0, 0);
}

uint64_t sub_10001BFD0()
{
  uint64_t v49 = v0;
  v0[20] = v0[29];
  sub_10000BF1C((uint64_t *)&unk_10017EAF0);
  String.init<A>(describing:)();
  uint64_t result = LNLogSubsystem;
  if (!LNLogSubsystem)
  {
    __break(1u);
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    return result;
  }
  uint64_t v2 = v0[26];
  String.init(cString:)();
  Logger.init(subsystem:category:)();
  sub_10000C0D4(v2, (uint64_t)(v0 + 2));
  sub_10000C0D4(v2, (uint64_t)(v0 + 7));
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t type = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v3, type);
  uint64_t v5 = v0[37];
  uint64_t v6 = v0[33];
  uint64_t v46 = v0[32];
  if (v4)
  {
    log = v3;
    uint64_t v7 = swift_slowAlloc();
    uint64_t v47 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315394;
    uint64_t v44 = v5;
    uint64_t v8 = sub_10000BEA0(v0 + 2, v0[5]);
    uint64_t v10 = v8[3];
    unint64_t v9 = v8[4];
    swift_bridgeObjectRetain();
    v0[24] = sub_100013090(v10, v9, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10000E788((uint64_t)(v0 + 2));
    *(_WORD *)(v7 + 12) = 2080;
    uint64_t v11 = sub_10000BEA0(v0 + 7, v0[10]);
    uint64_t v12 = v11[1];
    unint64_t v13 = v11[2];
    swift_bridgeObjectRetain();
    v0[25] = sub_100013090(v12, v13, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10000E788((uint64_t)(v0 + 7));
    _os_log_impl((void *)&_mh_execute_header, log, type, "Received incoming XPC event \"%s\" from stream \"%s\"", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    sub_10000EB10();
    sub_10000EB10();

    BOOL v14 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v14(v44, v46);
  }
  else
  {
    sub_10000E788((uint64_t)(v0 + 2));
    sub_10000E788((uint64_t)(v0 + 7));

    BOOL v14 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v14(v5, v46);
  }
  uint64_t v15 = v0[31];
  uint64_t v16 = v0[29];
  char v17 = (void *)v0[26];
  uint64_t v47 = 0;
  unint64_t v48 = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  uint64_t v47 = 0xD000000000000010;
  unint64_t v48 = 0x8000000100143250;
  v0[15] = v16;
  swift_getMetatypeMetadata();
  v18._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 46;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  id v20 = sub_10000BEA0(v17, v17[3]);
  uint64_t v21 = v20[3];
  uint64_t v22 = (void *)v20[4];
  swift_bridgeObjectRetain();
  v23._countAndFlagsBits = v21;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v24 = os_transaction_create();
  swift_release();
  sub_1000A8B94(v15);
  v0[22] = v0[29];
  String.init<A>(describing:)();
  uint64_t result = LNLogSubsystem;
  if (!LNLogSubsystem) {
    goto LABEL_15;
  }
  uint64_t v25 = v24;
  String.init(cString:)();
  Logger.init(subsystem:category:)();
  id v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "[XPCEventService] Deferring to service handler", v28, 2u);
    sub_10000EB10();
  }
  uint64_t v29 = v0[36];
  uint64_t v30 = v0[32];
  uint64_t v32 = v0[28];
  uint64_t v31 = v0[29];
  uint64_t v33 = v0[26];

  v14(v29, v30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 + 88) + 16))(v33, v25, v31);
  v0[23] = v31;
  String.init<A>(describing:)();
  uint64_t result = LNLogSubsystem;
  if (!LNLogSubsystem) {
    goto LABEL_16;
  }
  String.init(cString:)();
  Logger.init(subsystem:category:)();
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v34, v35))
  {
    id v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v36 = 0;
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "[XPCEventService] Event serviced", v36, 2u);
    sub_10000EB10();
  }
  uint64_t v37 = v0[35];
  uint64_t v39 = v0[31];
  uint64_t v38 = v0[32];
  uint64_t v40 = v0[29];
  uint64_t v41 = v0[30];
  swift_unknownObjectRelease();

  v14(v37, v38);
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v39, v40);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EB74();
  return v42();
}

uint64_t sub_10001C7F8()
{
  return sub_10002108C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10001C830()
{
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_10001C858()
{
  sub_10001C830();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for XPCEventEntryPoint()
{
  return sub_100010B5C();
}

void sub_10001C89C()
{
}

void sub_10001C8A4()
{
}

uint64_t sub_10001C8C0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100013DD8;
  return sub_10001BEA0();
}

uint64_t sub_10001C958()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100013DD8;
  return sub_10001BCF8();
}

uint64_t sub_10001C9E8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100011814;
  return sub_10001C7F8();
}

void *sub_10001CA74()
{
  type metadata accessor for XPCEventDispatcher();
  swift_allocObject();
  uint64_t result = sub_10001CAB4();
  qword_10017D110 = (uint64_t)result;
  return result;
}

void *sub_10001CAB4()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  BOOL v4 = (char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v6 - 8);
  v0[2] = &_swiftEmptySetSingleton;
  sub_10000BF1C(&qword_10017D2C0);
  v0[3] = Dictionary.init(dictionaryLiteral:)();
  sub_10000D9D4(0, (unint64_t *)&qword_10017C750);
  static DispatchQoS.unspecified.getter();
  v8[1] = _swiftEmptyArrayStorage;
  sub_100027C80((unint64_t *)&qword_10017C758, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000BF1C(&qword_10017C760);
  sub_100027C2C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v1);
  v0[4] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  return v0;
}

uint64_t sub_10001CD30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_10001CEC4(a2, a3);
  sub_10000BF1C(&qword_10017D2A0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013EF20;
  *(void *)(inited + 32) = a2;
  *(void *)(inited + 40) = a3;
  sub_10000BF1C(&qword_10017D2A8);
  uint64_t v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_10013EF20;
  *(void *)(v13 + 32) = a4;
  *(void *)(v13 + 40) = a5;
  sub_10000BF1C(&qword_10017D2B0);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_10013EF20;
  sub_10000C0D4(a6, v14 + 32);
  *(void *)(v13 + 48) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10000BF1C(&qword_10017D2B8);
  *(void *)(inited + 48) = Dictionary.init(dictionaryLiteral:)();
  sub_10000BF1C(&qword_10017D2C0);
  uint64_t v15 = Dictionary.init(dictionaryLiteral:)();
  swift_beginAccess();
  sub_1000238F8(v15, (uint64_t)sub_10002760C, 0, (uint64_t *)(a1 + 24));
  return swift_endAccess();
}

uint64_t sub_10001CEC4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v9 = *(void **)(v2 + 32);
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  uint64_t v10 = v9;
  char v11 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if (v11)
  {
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_10001D15C();
    char v14 = v13;
    uint64_t result = swift_bridgeObjectRelease();
    if ((v14 & 1) == 0)
    {
      uint64_t v15 = (void *)swift_allocObject();
      long long v15[2] = v2;
      v15[3] = a1;
      v15[4] = a2;
      aBlock[4] = sub_1000278A8;
      aBlock[5] = v15;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10001D548;
      void aBlock[3] = &unk_10016FE38;
      uint64_t v16 = _Block_copy(aBlock);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_release();
      uint64_t v17 = String.utf8CString.getter();
      xpc_set_event_stream_handler((const char *)(v17 + 32), v10, v16);
      swift_release();
      _Block_release(v16);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      sub_100023984(&v19, a1, a2);
      swift_endAccess();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10001D134(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void sub_10001D15C()
{
  sub_100028830();
  if (*(void *)(v2 + 16))
  {
    uint64_t v3 = v2;
    uint64_t v4 = v1;
    uint64_t v5 = v0;
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(v3 + 32);
    Swift::Int v8 = v6 & ~v7;
    sub_1000283BC();
    if (v9)
    {
      uint64_t v10 = *(void *)(v3 + 48);
      char v11 = (void *)(v10 + 16 * v8);
      if ((*v11 != v5 || v11[1] != v4) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v13 = ~v7;
        uint64_t v14 = (v8 + 1) & v13;
        sub_1000283BC();
        if (v15)
        {
          do
          {
            uint64_t v16 = (void *)(v10 + 16 * v14);
            if (*v16 == v5 && v16[1] == v4) {
              break;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              break;
            }
            uint64_t v14 = (v14 + 1) & v13;
            sub_1000283BC();
          }
          while ((v18 & 1) != 0);
        }
      }
    }
  }
  sub_10002894C();
}

uint64_t sub_10001D268(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_10000BF1C(&qword_10017DCC0);
  __chkstk_darwin(v7 - 8);
  char v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (uint64_t *)((char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = *(void **)(v3 + 32);
  *uint64_t v13 = v14;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  if (v14)
  {
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    if (xpc_dictionary_get_string(a1, _xpc_event_key_name))
    {
      uint64_t v17 = String.init(cString:)();
      uint64_t v19 = v18;
      swift_beginAccess();
      uint64_t v20 = *(void *)(v3 + 24);
      swift_bridgeObjectRetain();
      uint64_t v21 = sub_10001B614(a2, a3, v20);
      swift_bridgeObjectRelease();
      if (v21)
      {
        swift_endAccess();
        swift_bridgeObjectRetain();
        uint64_t v22 = sub_10001B614(v17, v19, v21);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v22)
        {
          uint64_t v23 = type metadata accessor for TaskPriority();
          sub_10000D5B0((uint64_t)v9, 1, 1, v23);
          uint64_t v24 = (void *)swift_allocObject();
          v24[2] = 0;
          v24[3] = 0;
          v24[4] = v22;
          v24[5] = a1;
          v24[6] = a2;
          v24[7] = a3;
          v24[8] = v17;
          v24[9] = v19;
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_100011AA4((uint64_t)v9, (uint64_t)&unk_10017D308, (uint64_t)v24);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          return swift_release();
        }
      }
      else
      {
        swift_endAccess();
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10001D548(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t sub_10001D5A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  return _swift_task_switch(sub_10001D5CC, 0, 0);
}

uint64_t sub_10001D5CC()
{
  sub_10000EC58();
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10001D6B4;
  uint64_t v3 = *(void *)(v0 + 16);
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v3, (char *)&type metadata for () + 8, (char *)&type metadata for () + 8, 0, 0, &unk_10017D318, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_10001D6B4()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EB74();
  return v3();
}

uint64_t sub_10001D790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[19] = a3;
  v4[20] = a4;
  v4[18] = a2;
  sub_10000BF1C(&qword_10017DCC0);
  v4[21] = swift_task_alloc();
  v4[22] = swift_task_alloc();
  return _swift_task_switch(sub_10001D838, 0, 0);
}

uint64_t sub_10001D838()
{
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v23 = (long long *)(v0 + 16);
    uint64_t v3 = *(void *)(v0 + 160);
    *(_OWORD *)(v0 + 112) = *(_OWORD *)(v3 + 8);
    *(_OWORD *)(v0 + 128) = *(_OWORD *)(v3 + 24);
    uint64_t v4 = v1 + 32;
    uint64_t v5 = type metadata accessor for TaskPriority();
    swift_bridgeObjectRetain();
    uint64_t v22 = v5;
    do
    {
      uint64_t v7 = *(void *)(v0 + 168);
      uint64_t v6 = *(void *)(v0 + 176);
      uint64_t v8 = *(void *)(v0 + 160);
      sub_10000D5B0(v6, 1, 1, v5);
      sub_10000C0D4(v4, (uint64_t)v23);
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = 0;
      *(void *)(v9 + 24) = 0;
      sub_10000D698(v23, v9 + 32);
      uint64_t v10 = *(void *)(v8 + 32);
      long long v11 = *(_OWORD *)(v8 + 16);
      *(_OWORD *)(v9 + 72) = *(_OWORD *)v8;
      *(_OWORD *)(v9 + 88) = v11;
      *(void *)(v9 + 104) = v10;
      sub_100027DE4(v6, v7, &qword_10017DCC0);
      LODWORD(v7) = sub_10000D5D8(v7, 1, v5);
      swift_unknownObjectRetain();
      sub_100027B80(v0 + 112);
      sub_100027B80(v0 + 128);
      uint64_t v12 = *(void *)(v0 + 168);
      if (v7 == 1)
      {
        sub_100027D90(*(void *)(v0 + 168), &qword_10017DCC0);
      }
      else
      {
        TaskPriority.rawValue.getter();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v12, v5);
      }
      if (*(void *)(v9 + 16))
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v15 = v14;
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v13 = 0;
        uint64_t v15 = 0;
      }
      uint64_t v16 = **(void **)(v0 + 144);
      uint64_t v17 = swift_allocObject();
      *(void *)(v17 + 16) = &unk_10017D330;
      *(void *)(v17 + 24) = v9;
      uint64_t v18 = v15 | v13;
      if (v15 | v13)
      {
        uint64_t v18 = v0 + 56;
        *(void *)(v0 + 56) = 0;
        *(void *)(v0 + 64) = 0;
        *(void *)(v0 + 72) = v13;
        *(void *)(v0 + 80) = v15;
      }
      uint64_t v5 = v22;
      uint64_t v19 = *(void *)(v0 + 176);
      *(void *)(v0 + 88) = 1;
      *(void *)(v0 + 96) = v18;
      *(void *)(v0 + 104) = v16;
      swift_task_create();
      swift_release();
      sub_100027D90(v19, &qword_10017DCC0);
      v4 += 40;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EB74();
  return v20();
}

uint64_t sub_10001DB34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 88) = a4;
  *(void *)(v5 + 96) = a5;
  return _swift_task_switch(sub_10001DB54, 0, 0);
}

uint64_t sub_10001DB54()
{
  uint64_t v1 = *(void **)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  sub_10000BEA0(v1, v3);
  *(void *)(v0 + 40) = &unk_10016FFE8;
  *(void *)(v0 + 48) = &off_100170008;
  uint64_t v5 = swift_allocObject();
  *(void *)(v0 + 16) = v5;
  uint64_t v6 = *(void *)(v2 + 32);
  long long v7 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v5 + 32) = v7;
  *(void *)(v5 + 48) = v6;
  uint64_t v8 = *(int **)(v4 + 8);
  *(_OWORD *)(v0 + 56) = *(_OWORD *)(v2 + 8);
  *(_OWORD *)(v0 + 72) = *(_OWORD *)(v2 + 24);
  swift_unknownObjectRetain();
  sub_100027B80(v0 + 56);
  sub_100027B80(v0 + 72);
  long long v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_10001DCEC;
  return v11(v0 + 16, v3, v4);
}

uint64_t sub_10001DCEC()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v2 = v1 + 16;
  uint64_t v3 = *v0;
  sub_100010BC4();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  sub_10000E788(v2);
  sub_10000EB74();
  return v5();
}

uint64_t sub_10001DDB8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t sub_10001DDE8()
{
  uint64_t v0 = sub_10001DDB8();

  return _swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for XPCEventDispatcher()
{
  return self;
}

uint64_t sub_10001DE3C(void *a1, void *a2)
{
  unint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t result = a1[4];
  if (result != a2[4] || a1[5] != a2[5])
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = 0;
    if ((v7 & 1) == 0) {
      return result;
    }
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v8 = a2 + 7;
  uint64_t v9 = a1 + 7;
  unint64_t v10 = 1;
  while (v10 < v2)
  {
    uint64_t result = *(v9 - 1);
    if (result != *(v8 - 1) || *v9 != *v8)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0) {
        return 0;
      }
    }
    ++v10;
    v8 += 2;
    v9 += 2;
    if (v2 == v10) {
      return 1;
    }
  }
  __break(1u);
  return result;
}

void sub_10001DF0C()
{
  sub_1000284CC();
  uint64_t v2 = *(void *)(v0 + 16);
  if (v2 == *(void *)(v1 + 16) && v2 && v0 != v1)
  {
    uint64_t v3 = (void **)(v1 + 64);
    uint64_t v4 = (void **)(v0 + 64);
    do
    {
      uint64_t v5 = (uint64_t)*(v4 - 2);
      uint64_t v6 = (uint64_t)*(v4 - 1);
      char v7 = *v4;
      uint64_t v9 = (uint64_t)*(v3 - 2);
      uint64_t v8 = (uint64_t)*(v3 - 1);
      uint64_t v15 = *v3;
      BOOL v10 = *(v4 - 4) == *(v3 - 4) && *(v4 - 3) == *(v3 - 3);
      if (!v10 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      BOOL v11 = v5 == v9 && v6 == v8;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      sub_10000D9D4(0, (unint64_t *)&qword_10017DD30);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v12 = v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v13 = v15;
      char v14 = static NSObject.== infix(_:_:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v14 & 1) == 0) {
        break;
      }
      v4 += 5;
      v3 += 5;
      --v2;
    }
    while (v2);
  }
  sub_1000284E8();
}

uint64_t sub_10001E068@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, BOOL *a4@<X8>)
{
  uint64_t v6 = v4;
  uint64_t v7 = a3;
  uint64_t v9 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      if (a2 >> 32 < (int)a2) {
        __break(1u);
      }
      swift_retain();
      char v14 = sub_10001E290((int)a2, a2 >> 32, v7 & 0x3FFFFFFFFFFFFFFFLL, v9);
      if (v6) {
        goto LABEL_16;
      }
      BOOL v10 = v14;
      __s1 = sub_10000DA10(a2, v7);
      break;
    case 2uLL:
      uint64_t v7 = a3 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v11 = *(void *)(a2 + 16);
      uint64_t v12 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      char v13 = sub_10001E290(v11, v12, v7, v9);
      if (v6) {
        goto LABEL_15;
      }
      BOOL v10 = v13;
      swift_release();
      __s1 = swift_release();
      break;
    case 3uLL:
      if (!__s1) {
        goto LABEL_14;
      }
      BOOL v10 = 1;
      break;
    default:
      uint64_t __s2 = a2;
      __int16 v16 = a3;
      char v17 = BYTE2(a3);
      char v18 = BYTE3(a3);
      char v19 = BYTE4(a3);
      char v20 = BYTE5(a3);
      if (!__s1)
      {
        __break(1u);
LABEL_14:
        __break(1u);
LABEL_15:
        swift_release();
        swift_release();
        __break(1u);
LABEL_16:
        sub_10000DA10(a2, v7);
        __break(1u);
        JUMPOUT(0x10001E280);
      }
      __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
      BOOL v10 = __s1 == 0;
      break;
  }
  *a4 = v10;
  return __s1;
}

uint64_t sub_10001E290(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v8 = (char *)result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
    v8 += a1 - result;
  }
  BOOL v9 = __OFSUB__(a2, a1);
  int64_t v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t result = __DataStorage._length.getter();
  if (!a4)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v8)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (result >= v10) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = result;
  }
  return memcmp(a4, v8, v11) == 0;
}

uint64_t sub_10001E330(uint64_t a1, int *a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)sub_100013DFC(v3);
  *uint64_t v4 = v5;
  v4[1] = sub_100012FCC;
  return v7(a1);
}

uint64_t sub_10001E404(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_10001E940(a1, a2, a3, a4, &qword_10017D4E0, (uint64_t (*)(void))&type metadata accessor for UUID, (void (*)(void))&type metadata accessor for UUID);
}

void sub_10001E44C()
{
}

void sub_10001E480()
{
}

void sub_10001E494()
{
}

void sub_10001E4A8()
{
  sub_1000287F8();
  if (v4)
  {
    sub_1000282CC();
    if (v6 != v7)
    {
      sub_100028360();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_1000282BC();
    }
  }
  else
  {
    uint64_t v5 = v2;
  }
  uint64_t v8 = *(void *)(v0 + 16);
  if (v5 <= v8) {
    uint64_t v9 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v9 = v5;
  }
  if (v9)
  {
    sub_10000BF1C(v3);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    sub_1000287D0(v11 - 32);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  if (v1)
  {
    sub_100020B58((char *)(v0 + 32), v8, v10 + 32);
    sub_100028348();
  }
  else
  {
    uint64_t v12 = sub_1000285E4();
    sub_100020634(v12, v13, v14, v15, v16);
  }
}

void sub_10001E56C()
{
}

void sub_10001E5A0()
{
  sub_1000283A8();
  if (v4)
  {
    sub_1000282CC();
    if (v5 != v6)
    {
      sub_100028360();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_1000282BC();
    }
  }
  sub_100028484();
  if (v3)
  {
    sub_10000BF1C(v7);
    uint64_t v8 = (const void *)sub_100028788();
    size_t v9 = j__malloc_size(v8);
    sub_100028730(v9 - 32);
  }
  if (v2)
  {
    uint64_t v10 = sub_1000287C4();
    v1(v10);
    sub_100028348();
  }
  else
  {
    uint64_t v11 = sub_1000284BC();
    v0(v11);
  }
}

void sub_10001E658()
{
}

void sub_10001E68C()
{
}

void sub_10001E6A0()
{
  sub_1000287F8();
  if (v4)
  {
    sub_1000282CC();
    if (v6 != v7)
    {
      sub_100028360();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_1000282BC();
    }
  }
  else
  {
    uint64_t v5 = v2;
  }
  uint64_t v8 = *(void *)(v0 + 16);
  if (v5 <= v8) {
    uint64_t v9 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v9 = v5;
  }
  if (v9)
  {
    sub_10000BF1C(v3);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    sub_1000287D0(v11 - 32);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  if (v1)
  {
    sub_100020A30((char *)(v0 + 32), v8, v10 + 32);
    sub_100028348();
  }
  else
  {
    uint64_t v12 = sub_1000285E4();
    sub_10001FE30(v12, v13, v14, v15);
  }
}

uint64_t sub_10001E764()
{
  return sub_10001EB48();
}

void sub_10001E778()
{
}

void sub_10001E7AC()
{
}

void sub_10001E7C0()
{
}

void sub_10001E7F4()
{
}

void sub_10001E808()
{
}

void sub_10001E83C()
{
  sub_1000288B4();
  sub_1000283A8();
  if (v4)
  {
    sub_1000282CC();
    if (v5 != v6)
    {
      sub_100028360();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_1000282BC();
    }
  }
  sub_100028484();
  if (v3)
  {
    sub_10000BF1C(v7);
    uint64_t v8 = (const void *)swift_allocObject();
    size_t v9 = j__malloc_size(v8);
    sub_100028924(v9);
  }
  if (v2)
  {
    uint64_t v10 = sub_1000287C4();
    v1(v10);
    sub_100028348();
  }
  else
  {
    uint64_t v11 = sub_1000284BC();
    v0(v11);
  }
  sub_10000EB44();
}

uint64_t sub_10001E8F8(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_10001E940(a1, a2, a3, a4, &qword_10017D3D8, (uint64_t (*)(void))type metadata accessor for LNAppShortcutParameterRecord, (void (*)(void))type metadata accessor for LNAppShortcutParameterRecord);
}

uint64_t sub_10001E940(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), void (*a7)(void))
{
  if (a3)
  {
    sub_1000282CC();
    if (v12 != v13)
    {
      sub_100028360();
      if (v12)
      {
        __break(1u);
        goto LABEL_23;
      }
      sub_1000282BC();
    }
  }
  else
  {
    uint64_t v11 = a2;
  }
  uint64_t v14 = *(void *)(a4 + 16);
  if (v11 <= v14) {
    uint64_t v15 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v15 = v11;
  }
  if (!v15)
  {
    uint64_t v21 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  sub_10000BF1C(a5);
  uint64_t v16 = a6(0);
  sub_1000282DC(v16);
  uint64_t v18 = *(void *)(v17 + 72);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (void *)swift_allocObject();
  size_t v22 = j__malloc_size(v21);
  if (!v18 || (v22 - v20 == 0x8000000000000000 ? (BOOL v23 = v18 == -1) : (BOOL v23 = 0), v23))
  {
LABEL_23:
    sub_100028268();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v21[2] = v14;
  v21[3] = 2 * ((uint64_t)(v22 - v20) / v18);
LABEL_18:
  uint64_t v24 = *(void *)(a6(0) - 8);
  unint64_t v25 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  if (a1)
  {
    sub_100020EB0(a4 + v25, v14);
    sub_100028348();
  }
  else
  {
    sub_100020720(0, v14, (unint64_t)v21 + v25, a4, a7);
  }
  return (uint64_t)v21;
}

uint64_t sub_10001EB34()
{
  return sub_10001EB48();
}

uint64_t sub_10001EB48()
{
  sub_1000287F8();
  if (v5)
  {
    sub_1000282CC();
    if (v7 != v8)
    {
      sub_100028360();
      if (v7)
      {
        __break(1u);
        goto LABEL_23;
      }
      sub_1000282BC();
    }
  }
  else
  {
    uint64_t v6 = v3;
  }
  uint64_t v9 = *(void *)(v0 + 16);
  if (v6 <= v9) {
    uint64_t v10 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v10 = v6;
  }
  if (!v10)
  {
    uint64_t v16 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  sub_10000BF1C(v4);
  uint64_t v11 = sub_10000BF1C(v1);
  sub_1000282DC(v11);
  uint64_t v13 = *(void *)(v12 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = j__malloc_size(v16);
  if (!v13 || (v17 - v15 == 0x8000000000000000 ? (BOOL v18 = v13 == -1) : (BOOL v18 = 0), v18))
  {
LABEL_23:
    sub_100028268();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  sub_1000287D0(v17 - v15);
LABEL_18:
  uint64_t v19 = *(void *)(sub_10000BF1C(v1) - 8);
  if (v2)
  {
    sub_100020FA8(v0 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80)), v9);
    sub_100028348();
  }
  else
  {
    uint64_t v20 = sub_1000285E4();
    sub_10001FB20(v20, v21, v22, v23, v24);
  }
  return (uint64_t)v16;
}

void sub_10001ED08()
{
}

void sub_10001ED1C()
{
}

uint64_t sub_10001ED30(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_10001E940(a1, a2, a3, a4, (uint64_t *)&unk_10017D3C0, (uint64_t (*)(void))&type metadata accessor for Notification, (void (*)(void))&type metadata accessor for Notification);
}

void sub_10001ED78()
{
}

void sub_10001EDAC()
{
  sub_1000283A8();
  if (v4)
  {
    sub_1000282CC();
    if (v5 != v6)
    {
      sub_100028360();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_1000282BC();
    }
  }
  sub_100028484();
  if (v3)
  {
    sub_10000BF1C(v7);
    char v8 = (const void *)swift_allocObject();
    size_t v9 = j__malloc_size(v8);
    sub_100028730(v9 - 32);
  }
  if (v2)
  {
    uint64_t v10 = sub_1000287C4();
    v1(v10);
    sub_100028348();
  }
  else
  {
    uint64_t v11 = sub_1000284BC();
    v0(v11);
  }
}

void sub_10001EE6C()
{
}

void sub_10001EEA0()
{
  sub_1000288B4();
  sub_1000283A8();
  if (v4)
  {
    sub_1000282CC();
    if (v5 != v6)
    {
      sub_100028360();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_1000282BC();
    }
  }
  sub_100028484();
  if (v3)
  {
    sub_10000BF1C(v7);
    char v8 = (const void *)swift_allocObject();
    size_t v9 = j__malloc_size(v8);
    sub_100028924(v9);
  }
  if (v2)
  {
    uint64_t v10 = sub_1000287C4();
    v1(v10);
    sub_100028348();
  }
  else
  {
    uint64_t v11 = sub_1000284BC();
    v0(v11);
  }
  sub_10000EB44();
}

void sub_10001EF5C()
{
}

void sub_10001EF70()
{
  sub_1000286D8();
  if (v2)
  {
    sub_1000282CC();
    if (v3 != v4)
    {
      sub_100028360();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_1000282BC();
    }
  }
  sub_1000283EC();
  if (v1)
  {
    sub_10000BF1C(&qword_10017D478);
    char v5 = (const void *)swift_allocObject();
    size_t v6 = j__malloc_size(v5);
    sub_100028910(v6);
  }
  if (v0)
  {
    char v7 = (char *)sub_1000286B0();
    sub_100020C38(v7, v8, v9);
    sub_100028348();
  }
  else
  {
    uint64_t v10 = sub_10002840C();
    sub_10001FEFC(v10, v11, v12, v13);
  }
}

void sub_10001F028()
{
}

void sub_10001F05C()
{
  sub_1000283A8();
  if (v4)
  {
    sub_1000282CC();
    if (v5 != v6)
    {
      sub_100028360();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_1000282BC();
    }
  }
  sub_100028484();
  if (v3)
  {
    sub_10000BF1C(v7);
    uint64_t v8 = (const void *)sub_100028788();
    size_t v9 = j__malloc_size(v8);
    sub_100028730(v9 - 32);
  }
  if (v2)
  {
    uint64_t v10 = sub_1000287C4();
    v1(v10);
    sub_100028348();
  }
  else
  {
    uint64_t v11 = sub_1000284BC();
    v0(v11);
  }
}

void sub_10001F114()
{
  sub_1000286D8();
  if (v2)
  {
    sub_1000282CC();
    if (v3 != v4)
    {
      sub_100028360();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_1000282BC();
    }
  }
  sub_1000283EC();
  if (v1)
  {
    sub_10000BF1C(&qword_10017D408);
    char v5 = (const void *)sub_100028788();
    size_t v6 = j__malloc_size(v5);
    sub_100028720(v6 - 32);
  }
  if (v0)
  {
    char v7 = (char *)sub_1000286B0();
    sub_100020CA8(v7, v8, v9);
    sub_100028348();
  }
  else
  {
    uint64_t v10 = sub_10002840C();
    sub_100020114(v10, v11, v12, v13);
  }
}

void sub_10001F1C0()
{
  sub_1000286D8();
  if (v2)
  {
    sub_1000282CC();
    if (v3 != v4)
    {
      sub_100028360();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_1000282BC();
    }
  }
  sub_1000283EC();
  if (v1)
  {
    sub_10000BF1C(&qword_10017D410);
    char v5 = (const void *)sub_100028788();
    size_t v6 = j__malloc_size(v5);
    sub_100028720(v6 - 32);
  }
  if (v0)
  {
    char v7 = (char *)sub_1000286B0();
    sub_100020CA8(v7, v8, v9);
    sub_100028348();
  }
  else
  {
    uint64_t v10 = sub_10002840C();
    sub_100020208(v10, v11, v12, v13);
  }
}

void sub_10001F26C()
{
}

void sub_10001F2A0()
{
  sub_1000286D8();
  if (v2)
  {
    sub_1000282CC();
    if (v3 != v4)
    {
      sub_100028360();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_1000282BC();
    }
  }
  sub_1000283EC();
  if (v1)
  {
    sub_10000BF1C(&qword_10017D520);
    char v5 = (const void *)swift_allocObject();
    size_t v6 = j__malloc_size(v5);
    sub_100028910(v6);
  }
  if (v0)
  {
    char v7 = (char *)sub_1000286B0();
    sub_100020D08(v7, v8, v9);
    sub_100028348();
  }
  else
  {
    uint64_t v10 = sub_10002840C();
    sub_100020440(v10, v11, v12, v13);
  }
}

void sub_10001F358()
{
  sub_1000286D8();
  if (v2)
  {
    sub_1000282CC();
    if (v3 != v4)
    {
      sub_100028360();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_1000282BC();
    }
  }
  sub_1000283EC();
  if (v1)
  {
    sub_10000BF1C(&qword_10017D450);
    char v5 = (const void *)sub_100028788();
    size_t v6 = j__malloc_size(v5);
    sub_100028720(v6 - 32);
  }
  if (v0)
  {
    char v7 = (char *)sub_1000286B0();
    sub_100020DA4(v7, v8, v9);
    sub_100028348();
  }
  else
  {
    uint64_t v10 = sub_10002840C();
    sub_100020540(v10, v11, v12, v13);
  }
}

void sub_10001F404()
{
}

uint64_t sub_10001F418(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_10001E940(a1, a2, a3, a4, (uint64_t *)&unk_10017D380, (uint64_t (*)(void))type metadata accessor for LNBundleRecord, (void (*)(void))type metadata accessor for LNBundleRecord);
}

uint64_t sub_10001F460(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_10001E940(a1, a2, a3, a4, &qword_10017D460, (uint64_t (*)(void))type metadata accessor for ObservationStatusRegistry.ObservationStatusChangeListener, (void (*)(void))type metadata accessor for ObservationStatusRegistry.ObservationStatusChangeListener);
}

void sub_10001F4A8()
{
}

uint64_t sub_10001F4DC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10001F5D8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      sub_10000BF1C(&qword_10017D3B8);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10001F6F0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      sub_10000BF1C(&qword_10017D510);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10001F810(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 6) + 32;
    unint64_t v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10001F908(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10001FA00(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      sub_10000BF1C(&qword_10017D498);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10001FB20(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (a2 - a1 < 0)
  {
LABEL_9:
    sub_100028268();
    sub_100028548();
    goto LABEL_11;
  }
  sub_10000BF1C(a5);
  sub_1000283D0();
  sub_1000286E4();
  if (v8) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = v7 > a3;
  }
  if (!v9)
  {
    swift_arrayInitWithCopy();
    swift_bridgeObjectRelease();
    return a1;
  }
  sub_100028268();
  sub_100028538();
LABEL_11:
  uint64_t result = sub_1000282F4();
  __break(1u);
  return result;
}

uint64_t sub_10001FC18(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 6) + 32;
    unint64_t v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10001FD10(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      sub_10000BF1C(&qword_10017D430);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10001FE30(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    sub_100028268();
    sub_100028548();
    goto LABEL_11;
  }
  unint64_t v5 = a4 + 24 * a1 + 32;
  unint64_t v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy();
    swift_bridgeObjectRelease();
    return v6;
  }
  sub_100028268();
  sub_100028538();
LABEL_11:
  uint64_t result = sub_1000282F4();
  __break(1u);
  return result;
}

uint64_t sub_10001FEFC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 104 * a1 + 32;
    unint64_t v6 = a3 + 104 * v4;
    if (v5 >= v6 || v5 + 104 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10001FFFC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      sub_10000BF1C((uint64_t *)&unk_10017D440);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_100020114(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    unint64_t v6 = &__dst[8 * v4];
    if (v5 >= v6 || &v5[8 * v4] <= __dst)
    {
      memcpy(__dst, v5, 8 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100020208(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      sub_10000BF1C(&qword_10017D418);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100020320(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      sub_10000BF1C(&qword_10017D4A8);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100020440(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_100020540(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 4 * a1 + 32);
    unint64_t v6 = &__dst[4 * v4];
    if (v5 >= v6 || &v5[4 * v4] <= __dst)
    {
      memcpy(__dst, v5, 4 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100020634(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    sub_100028268();
    sub_100028548();
    goto LABEL_11;
  }
  unint64_t v6 = a4 + 40 * a1 + 32;
  unint64_t v7 = a3 + 40 * v5;
  if (v6 >= v7 || v6 + 40 * v5 <= a3)
  {
    sub_10000BF1C(a5);
    swift_arrayInitWithCopy();
    swift_bridgeObjectRelease();
    return v7;
  }
  sub_100028268();
  sub_100028538();
LABEL_11:
  uint64_t result = sub_1000282F4();
  __break(1u);
  return result;
}

uint64_t sub_100020720(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void (*a5)(void))
{
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (a2 - a1 < 0)
  {
LABEL_9:
    sub_100028268();
    sub_100028548();
    goto LABEL_11;
  }
  a5(0);
  sub_1000283D0();
  sub_1000286E4();
  if (v8) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = v7 > a3;
  }
  if (!v9)
  {
    swift_arrayInitWithCopy();
    swift_bridgeObjectRelease();
    return a1;
  }
  sub_100028268();
  sub_100028538();
LABEL_11:
  uint64_t result = sub_1000282F4();
  __break(1u);
  return result;
}

uint64_t sub_10002081C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10002091C(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100028268();
    uint64_t result = (char *)sub_100028298();
    __break(1u);
  }
  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)sub_10002827C(a3, result);
  }
  return result;
}

void sub_100020978(uint64_t a1, uint64_t a2)
{
}

char *sub_100020994(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[32 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 32 * a2);
  }
  return __src;
}

char *sub_100020A30(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100028268();
    uint64_t result = (char *)sub_100028298();
    __break(1u);
  }
  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)sub_10002827C(a3, result);
  }
  return result;
}

void sub_100020A94(uint64_t a1, uint64_t a2)
{
}

char *sub_100020AA0(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100028268();
    uint64_t result = (char *)sub_100028298();
    __break(1u);
  }
  else if (a3 != result || &result[64 * a2] <= a3)
  {
    return (char *)sub_10002827C(a3, result);
  }
  return result;
}

char *sub_100020AFC(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100028268();
    uint64_t result = (char *)sub_100028298();
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_10002827C(a3, result);
  }
  return result;
}

char *sub_100020B58(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100028268();
    uint64_t result = (char *)sub_100028298();
    __break(1u);
  }
  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)sub_10002827C(a3, result);
  }
  return result;
}

char *sub_100020BBC(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100028268();
    uint64_t result = (char *)sub_100028298();
    __break(1u);
  }
  else if (a3 != result || &result[48 * a2] <= a3)
  {
    return (char *)sub_10002827C(a3, result);
  }
  return result;
}

void sub_100020C20(uint64_t a1, uint64_t a2)
{
}

char *sub_100020C38(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100028268();
    uint64_t result = (char *)sub_100028298();
    __break(1u);
  }
  else if (a3 != result || &result[104 * a2] <= a3)
  {
    return (char *)sub_10002827C(a3, result);
  }
  return result;
}

void sub_100020C9C(uint64_t a1, uint64_t a2)
{
}

char *sub_100020CA8(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100028268();
    uint64_t result = (char *)sub_100028298();
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)sub_10002827C(a3, result);
  }
  return result;
}

char *sub_100020D08(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[48 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 48 * a2);
  }
  return __src;
}

char *sub_100020DA4(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[4 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 4 * a2);
  }
  return __src;
}

void sub_100020E38(uint64_t a1, uint64_t a2)
{
}

char *sub_100020E50(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100028268();
    uint64_t result = (char *)sub_100028298();
    __break(1u);
  }
  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)sub_10002827C(a3, result);
  }
  return result;
}

void sub_100020EB0(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100028268();
    uint64_t v8 = sub_100028298();
    __break(1u);
_swift_arrayInitWithTakeBackToFront:
    _swift_arrayInitWithTakeBackToFront(v8);
    return;
  }
  sub_100028808();
  if (v6 && (v5(0), sub_1000283FC(), v3 + *(void *)(v7 + 72) * v2 > v4))
  {
    if (v4 != v3)
    {
      uint64_t v8 = sub_100028448();
      goto _swift_arrayInitWithTakeBackToFront;
    }
  }
  else
  {
    v5(0);
    uint64_t v9 = sub_100028448();
    _swift_arrayInitWithTakeFrontToBack(v9);
  }
}

void sub_100020F9C(uint64_t a1, uint64_t a2)
{
}

void sub_100020FA8(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100028268();
    uint64_t v8 = sub_100028298();
    __break(1u);
_swift_arrayInitWithTakeBackToFront:
    _swift_arrayInitWithTakeBackToFront(v8);
    return;
  }
  sub_100028808();
  if (v6 && (sub_10000BF1C(v5), sub_1000283FC(), v3 + *(void *)(v7 + 72) * v2 > v4))
  {
    if (v4 != v3)
    {
      uint64_t v8 = sub_100028448();
      goto _swift_arrayInitWithTakeBackToFront;
    }
  }
  else
  {
    sub_10000BF1C(v5);
    uint64_t v9 = sub_100028448();
    _swift_arrayInitWithTakeFrontToBack(v9);
  }
}

uint64_t sub_10002108C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100021098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  return sub_1000213AC(a1, a2, (uint64_t)&String.hash(into:), (uint64_t)sub_100021558, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

unint64_t sub_1000210C8(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  if (a2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Swift::Int v4 = Hasher._finalize()();

  return sub_10002163C(a1, a2, v4);
}

void sub_10002116C()
{
}

unint64_t sub_1000211E0()
{
  dispatch thunk of Hashable._rawHashValue(seed:)();
  unint64_t v0 = sub_10002846C();
  return sub_100021708(v0, v1, v2, v3, v4);
}

unint64_t sub_10002125C()
{
  sub_100028830();
  sub_100028624();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._finalize()();
  sub_10002846C();
  sub_10002894C();
  return sub_10002184C(v0, v1, v2, v3, v4);
}

unint64_t sub_1000212E8(uint64_t a1)
{
  type metadata accessor for UUID();
  sub_100027C80((unint64_t *)&qword_10017D340, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return sub_100021948(a1, v2);
}

uint64_t sub_100021380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  return sub_1000213AC(a1, a2, (uint64_t)&Data.hash(into:), (uint64_t)sub_100021B08, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

uint64_t sub_1000213AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_100028830();
  a25 = v26;
  a26 = v27;
  uint64_t v44 = v28;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  Hasher.init(_seed:)();
  v30(&a10, v34, v32);
  Hasher._finalize()();
  sub_10002894C();
  return v38(v35, v36, v37, v38, v39, v40, v41, v42, v44, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

unint64_t sub_100021438()
{
  sub_100028830();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000288F0();
  String.hash(into:)();
  Hasher._finalize()();
  swift_bridgeObjectRelease();
  sub_100028714();
  sub_10002894C();
  return sub_10002243C(v0, v1);
}

unint64_t sub_1000214B0(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_1000225B4(a1, v4);
}

unint64_t sub_1000214F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_100028830();
  a25 = v30;
  a26 = v31;
  sub_100028624();
  sub_1000AEDD4((uint64_t)&a10, v29, v28, v27, v26);
  Hasher._finalize()();
  sub_10002846C();
  sub_10002894C();
  return sub_1000226D0(v32, v33, v34, v35, v36);
}

unint64_t sub_100021558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_10002163C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = ~v5;
    uint64_t v10 = *(void *)(v3 + 48);
    do
    {
      BOOL v11 = (void *)(v10 + 16 * v6);
      uint64_t v12 = v11[1];
      if (v12)
      {
        if (a2)
        {
          BOOL v13 = *v11 == a1 && v12 == a2;
          if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            return v6;
          }
        }
      }
      else if (!a2)
      {
        return v6;
      }
      unint64_t v6 = (v6 + 1) & v9;
    }
    while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
  }
  return v6;
}

unint64_t sub_100021708(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = a5 & ~v7;
  if ((*(void *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    uint64_t v13 = *(void *)(v5 + 48);
    if ((sub_10009336C(*(void *)(v13 + 32 * v8), *(void *)(v13 + 32 * v8 + 8), *(void *)(v13 + 32 * v8 + 16), *(void *)(v13 + 32 * v8 + 24), a1, a2, a3, a4) & 1) == 0)
    {
      uint64_t v14 = ~v7;
      unint64_t v8 = (v8 + 1) & v14;
      if ((*(void *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
      {
        unint64_t v15 = a2 >> 16;
        do
        {
          uint64_t v16 = (void *)(v13 + 32 * v8);
          if (v16[2] == a3 && v16[3] == a4 && *v16 >> 16 == a1 >> 16 && v16[1] >> 16 == v15) {
            break;
          }
          if (_stringCompareInternal(_:_:_:_:expecting:)()) {
            break;
          }
          unint64_t v8 = (v8 + 1) & v14;
        }
        while (((*(void *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
      }
    }
  }
  return v8;
}

unint64_t sub_10002184C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = a5 & ~v7;
  if ((*(void *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    uint64_t v13 = ~v7;
    uint64_t v14 = *(void *)(v5 + 48);
    do
    {
      unint64_t v15 = (void *)(v14 + 32 * v8);
      uint64_t v16 = v15[2];
      uint64_t v17 = v15[3];
      BOOL v18 = *v15 == a1 && v15[1] == a2;
      if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        BOOL v19 = v16 == a3 && v17 == a4;
        if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
      }
      unint64_t v8 = (v8 + 1) & v13;
    }
    while (((*(void *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  return v8;
}

unint64_t sub_100021948(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    BOOL v11 = v13;
    uint64_t v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      sub_100027C80(&qword_10017EE10, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

unint64_t sub_100021B08(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v5 = a3 & ~v4;
  uint64_t v57 = v3 + 64;
  if ((*(void *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = v3;
    unint64_t v49 = HIDWORD(a1);
    size_t v54 = HIDWORD(a1) - (int)a1;
    uint64_t v55 = ~v4;
    size_t __n = BYTE6(a2);
    BOOL v9 = __OFSUB__(HIDWORD(a1), a1);
    BOOL v53 = v9;
    unint64_t v51 = a2 >> 62;
    uint64_t v50 = (int)a1;
    uint64_t v48 = a1 >> 32;
    uint64_t v47 = (a1 >> 32) - (int)a1;
    unint64_t v56 = a2 >> 62;
    while (1)
    {
      uint64_t v10 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v5);
      uint64_t v12 = *v10;
      unint64_t v11 = v10[1];
      uint64_t v13 = 0;
      unint64_t v14 = HIDWORD(*v10);
      switch(v11 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(v14, v12)) {
            goto LABEL_75;
          }
          uint64_t v13 = (int)v14 - (int)v12;
LABEL_11:
          sub_10000DADC(v12, v11);
          break;
        case 2uLL:
          uint64_t v16 = *(void *)(v12 + 16);
          uint64_t v15 = *(void *)(v12 + 24);
          uint64_t v13 = v15 - v16;
          if (!__OFSUB__(v15, v16)) {
            goto LABEL_11;
          }
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
          goto LABEL_82;
        case 3uLL:
          break;
        default:
          uint64_t v13 = BYTE6(v11);
          break;
      }
      size_t v17 = __n;
      switch(v56)
      {
        case 1uLL:
          size_t v17 = v54;
          if (v53) {
            goto LABEL_77;
          }
          goto LABEL_16;
        case 2uLL:
          uint64_t v19 = *(void *)(a1 + 16);
          uint64_t v18 = *(void *)(a1 + 24);
          BOOL v20 = __OFSUB__(v18, v19);
          size_t v17 = v18 - v19;
          if (!v20) {
            goto LABEL_16;
          }
          goto LABEL_76;
        case 3uLL:
          if (v13) {
            goto LABEL_28;
          }
          goto LABEL_72;
        default:
LABEL_16:
          if (v13 == v17)
          {
            if (v13 < 1)
            {
LABEL_72:
              sub_10000DA10(v12, v11);
              return v5;
            }
            switch(v11 >> 62)
            {
              case 1uLL:
                if (v12 >> 32 < (int)v12) {
                  goto LABEL_78;
                }
                sub_10000DADC(a1, a2);
                sub_10000DADC(a1, a2);
                sub_10000DADC(v12, v11);
                sub_10000DADC(a1, a2);
                uint64_t v32 = __DataStorage._bytes.getter();
                if (!v32) {
                  goto LABEL_49;
                }
                uint64_t v33 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v12, v33)) {
                  goto LABEL_81;
                }
                v32 += (int)v12 - v33;
LABEL_49:
                __DataStorage._length.getter();
                sub_10001E068(v32, a1, a2, (BOOL *)__s1);
                sub_10000DA10(a1, a2);
                sub_10000DA10(v12, v11);
                sub_10000DA10(v12, v11);
                char v28 = __s1[0];
                goto LABEL_50;
              case 2uLL:
                uint64_t v24 = *(void *)(v12 + 16);
                uint64_t v25 = *(void *)(v12 + 24);
                sub_10000DADC(a1, a2);
                sub_10000DADC(a1, a2);
                sub_10000DADC(a1, a2);
                swift_retain();
                swift_retain();
                uint64_t v26 = __DataStorage._bytes.getter();
                if (!v26) {
                  goto LABEL_32;
                }
                uint64_t v27 = __DataStorage._offset.getter();
                if (__OFSUB__(v24, v27)) {
                  goto LABEL_80;
                }
                v26 += v24 - v27;
LABEL_32:
                if (__OFSUB__(v25, v24)) {
                  goto LABEL_79;
                }
                __DataStorage._length.getter();
                sub_10001E068(v26, a1, a2, (BOOL *)__s1);
                sub_10000DA10(a1, a2);
                swift_release();
                swift_release();
                char v28 = __s1[0];
                sub_10000DA10(v12, v11);
LABEL_50:
                sub_10000DA10(a1, a2);
                sub_10000DA10(a1, a2);
                uint64_t v6 = v52;
                if (v28) {
                  return v5;
                }
                break;
              case 3uLL:
                memset(__s1, 0, 14);
                if (!v51) {
                  goto LABEL_52;
                }
                if (v51 == 1)
                {
                  if (v48 < v50) {
                    goto LABEL_83;
                  }
                  sub_10000DADC(a1, a2);
                  sub_10000DADC(a1, a2);
                  uint64_t v21 = __DataStorage._bytes.getter();
                  if (v21)
                  {
                    uint64_t v29 = __DataStorage._offset.getter();
                    if (__OFSUB__(v50, v29)) {
                      goto LABEL_89;
                    }
                    v21 += v50 - v29;
                  }
                  uint64_t v23 = __DataStorage._length.getter();
                  if (!v21) {
                    goto LABEL_90;
                  }
                  goto LABEL_41;
                }
                uint64_t v35 = *(void *)(a1 + 16);
                uint64_t v36 = *(void *)(a1 + 24);
                sub_10000DADC(a1, a2);
                sub_10000DADC(a1, a2);
                swift_retain();
                swift_retain();
                uint64_t v37 = (char *)__DataStorage._bytes.getter();
                if (v37)
                {
                  uint64_t v38 = __DataStorage._offset.getter();
                  if (__OFSUB__(v35, v38)) {
                    goto LABEL_86;
                  }
                  v37 += v35 - v38;
                }
                BOOL v20 = __OFSUB__(v36, v35);
                int64_t v39 = v36 - v35;
                if (v20) {
                  goto LABEL_84;
                }
                uint64_t v40 = __DataStorage._length.getter();
                if (!v37) {
                  goto LABEL_91;
                }
                goto LABEL_66;
              default:
                LOWORD(__s1[0]) = v12;
                BYTE2(__s1[0]) = BYTE2(v12);
                BYTE3(__s1[0]) = BYTE3(v12);
                BYTE4(__s1[0]) = v14;
                BYTE5(__s1[0]) = BYTE5(v12);
                BYTE6(__s1[0]) = BYTE6(v12);
                HIBYTE(__s1[0]) = HIBYTE(v12);
                LOWORD(__s1[1]) = v11;
                BYTE2(__s1[1]) = BYTE2(v11);
                BYTE3(__s1[1]) = BYTE3(v11);
                BYTE4(__s1[1]) = BYTE4(v11);
                BYTE5(__s1[1]) = BYTE5(v11);
                if (!v51)
                {
LABEL_52:
                  __int16 __s2 = a1;
                  char v60 = BYTE2(a1);
                  char v61 = BYTE3(a1);
                  char v62 = v49;
                  char v63 = BYTE5(a1);
                  char v64 = BYTE6(a1);
                  char v65 = HIBYTE(a1);
                  __int16 v66 = a2;
                  char v67 = BYTE2(a2);
                  char v68 = BYTE3(a2);
                  char v69 = BYTE4(a2);
                  char v70 = BYTE5(a2);
                  sub_10000DADC(a1, a2);
                  sub_10000DADC(a1, a2);
                  p_s2 = &__s2;
                  size_t v30 = __n;
LABEL_53:
                  int v34 = memcmp(__s1, p_s2, v30);
                  sub_10000DA10(v12, v11);
                  sub_10000DA10(a1, a2);
                  sub_10000DA10(a1, a2);
                  if (!v34) {
                    return v5;
                  }
                  break;
                }
                if (v51 == 1)
                {
                  if (v48 < v50)
                  {
LABEL_82:
                    __break(1u);
LABEL_83:
                    __break(1u);
LABEL_84:
                    __break(1u);
LABEL_85:
                    __break(1u);
LABEL_86:
                    __break(1u);
LABEL_87:
                    __break(1u);
LABEL_88:
                    __break(1u);
LABEL_89:
                    __break(1u);
                  }
                  sub_10000DADC(a1, a2);
                  sub_10000DADC(a1, a2);
                  uint64_t v21 = __DataStorage._bytes.getter();
                  if (v21)
                  {
                    uint64_t v22 = __DataStorage._offset.getter();
                    if (__OFSUB__(v50, v22)) {
                      goto LABEL_88;
                    }
                    v21 += v50 - v22;
                  }
                  uint64_t v23 = __DataStorage._length.getter();
                  if (!v21)
                  {
                    __break(1u);
LABEL_90:
                    __break(1u);
LABEL_91:
                    __break(1u);
LABEL_92:
                    __break(1u);
                    sub_10000DA10(a1, a2);
                    sub_10000DA10(a1, a2);
                    swift_release();
                    swift_release();
                    __break(1u);
                    sub_10000DA10(a1, a2);
                    sub_10000DA10(a1, a2);
                    sub_10000DA10(v12, v11);
                    __break(1u);
                    JUMPOUT(0x1000222C0);
                  }
LABEL_41:
                  if (v23 >= v47) {
                    size_t v30 = v47;
                  }
                  else {
                    size_t v30 = v23;
                  }
                  p_s2 = (__int16 *)v21;
                  goto LABEL_53;
                }
                uint64_t v41 = *(void *)(a1 + 16);
                uint64_t v42 = *(void *)(a1 + 24);
                sub_10000DADC(a1, a2);
                sub_10000DADC(a1, a2);
                swift_retain();
                swift_retain();
                uint64_t v37 = (char *)__DataStorage._bytes.getter();
                if (v37)
                {
                  uint64_t v43 = __DataStorage._offset.getter();
                  if (__OFSUB__(v41, v43)) {
                    goto LABEL_87;
                  }
                  v37 += v41 - v43;
                }
                BOOL v20 = __OFSUB__(v42, v41);
                int64_t v39 = v42 - v41;
                if (v20) {
                  goto LABEL_85;
                }
                uint64_t v40 = __DataStorage._length.getter();
                if (!v37) {
                  goto LABEL_92;
                }
LABEL_66:
                if (v40 >= v39) {
                  size_t v44 = v39;
                }
                else {
                  size_t v44 = v40;
                }
                int v45 = memcmp(__s1, v37, v44);
                swift_release();
                swift_release();
                sub_10000DA10(v12, v11);
                sub_10000DA10(a1, a2);
                sub_10000DA10(a1, a2);
                uint64_t v6 = v52;
                if (!v45) {
                  return v5;
                }
                break;
            }
          }
          else
          {
LABEL_28:
            sub_10000DA10(v12, v11);
          }
          unint64_t v5 = (v5 + 1) & v55;
          if (((*(void *)(v57 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) == 0) {
            return v5;
          }
          break;
      }
    }
  }
  return v5;
}

void sub_1000222F0()
{
  sub_1000288B4();
  uint64_t v1 = -1 << *(unsigned char *)(v0 + 32);
  uint64_t v3 = v2 & ~v1;
  sub_1000285D0();
  if (v4)
  {
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
    if (v5 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v7 == v8)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      goto LABEL_17;
    }
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
    {
      uint64_t v11 = ~v1;
      uint64_t v12 = (v3 + 1) & v11;
      sub_1000285D0();
      if (v13)
      {
        while (1)
        {
          uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v16 = v15;
          if (v14 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v16 == v17) {
            goto LABEL_16;
          }
          char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v19 & 1) == 0)
          {
            uint64_t v12 = (v12 + 1) & v11;
            sub_1000285D0();
            if (v20) {
              continue;
            }
          }
          break;
        }
      }
    }
  }
LABEL_17:
  sub_10000EB44();
}

unint64_t sub_10002243C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_1000225B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_10000D9D4(0, &qword_10017D0A0);
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_1000226D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = a5 & ~v7;
  if ((*(void *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    uint64_t v13 = ~v7;
    uint64_t v14 = *(void *)(v5 + 48);
    do
    {
      uint64_t v15 = (void *)(v14 + 32 * v8);
      uint64_t v17 = v15[2];
      uint64_t v16 = v15[3];
      BOOL v18 = *v15 == a1 && v15[1] == a2;
      if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        if (v16)
        {
          if (a4)
          {
            BOOL v19 = v17 == a3 && v16 == a4;
            if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
              return v8;
            }
          }
        }
        else if (!a4)
        {
          return v8;
        }
      }
      unint64_t v8 = (v8 + 1) & v13;
    }
    while (((*(void *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  return v8;
}

void sub_1000227DC()
{
  sub_1000284CC();
  uint64_t v2 = v0;
  char v4 = v3;
  sub_1000285BC();
  sub_10000BF1C(&qword_10017D0F0);
  sub_100028714();
  uint64_t v5 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v1 + 16))
  {
    char v28 = v2;
    uint64_t v6 = 1 << *(unsigned char *)(v1 + 32);
    uint64_t v7 = (void *)(v1 + 64);
    uint64_t v8 = -1;
    if (v6 < 64) {
      uint64_t v8 = ~(-1 << v6);
    }
    unint64_t v9 = v8 & *(void *)(v1 + 64);
    int64_t v10 = (unint64_t)(v6 + 63) >> 6;
    swift_retain();
    int64_t v11 = 0;
    if (!v9) {
      goto LABEL_6;
    }
LABEL_5:
    unint64_t v12 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = v18 + (v11 << 6))
    {
      BOOL v19 = (uint64_t *)(*(void *)(v1 + 48) + 16 * i);
      uint64_t v21 = *v19;
      uint64_t v20 = v19[1];
      uint64_t v22 = *(void **)(*(void *)(v1 + 56) + 8 * i);
      if ((v4 & 1) == 0)
      {
        id v23 = v22;
        swift_bridgeObjectRetain();
      }
      sub_100023144(v21, v20, (uint64_t)v22, v5);
      if (v9) {
        goto LABEL_5;
      }
LABEL_6:
      int64_t v14 = v11 + 1;
      if (__OFADD__(v11, 1))
      {
        __break(1u);
LABEL_29:
        __break(1u);
        return;
      }
      if (v14 >= v10) {
        goto LABEL_22;
      }
      ++v11;
      if (!v7[v14])
      {
        int64_t v11 = v14 + 1;
        if (v14 + 1 >= v10) {
          goto LABEL_22;
        }
        if (!v7[v11])
        {
          int64_t v15 = v14 + 2;
          if (v15 >= v10)
          {
LABEL_22:
            swift_release();
            uint64_t v2 = v28;
            if (v4)
            {
              sub_1000285A8();
              if (v26 ^ v27 | v25) {
                *uint64_t v7 = -1 << v24;
              }
              else {
                sub_100028894(v24);
              }
              *(void *)(v1 + 16) = 0;
            }
            break;
          }
          if (!v7[v15])
          {
            while (1)
            {
              int64_t v11 = v15 + 1;
              if (__OFADD__(v15, 1)) {
                goto LABEL_29;
              }
              if (v11 >= v10) {
                goto LABEL_22;
              }
              ++v15;
              if (v7[v11]) {
                goto LABEL_17;
              }
            }
          }
          int64_t v11 = v15;
        }
      }
LABEL_17:
      sub_100028558();
      unint64_t v9 = v17 & v16;
    }
  }
  swift_release();
  *uint64_t v2 = v5;
  sub_1000284E8();
}

void sub_100022990(uint64_t a1, uint64_t a2)
{
}

void sub_10002299C(uint64_t a1, uint64_t a2)
{
}

void sub_1000229A8(uint64_t a1, uint64_t a2)
{
}

void sub_1000229B4(uint64_t a1, uint64_t a2)
{
}

void sub_1000229C0(uint64_t a1, uint64_t a2)
{
}

void sub_1000229CC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1000285F8(a1, a2, a3);
  sub_100028688();
  sub_1000287A0();
  if (v6)
  {
    sub_10002866C();
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    uint64_t v10 = v9 & v8;
    uint64_t v36 = v3;
    int64_t v37 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 64;
    swift_retain();
    int64_t v12 = 0;
    if (!v10) {
      goto LABEL_7;
    }
LABEL_6:
    sub_100028880();
    for (int64_t i = v13 | (v12 << 6); ; int64_t i = v19 + (v12 << 6))
    {
      uint64_t v20 = (uint64_t *)(v4[6] + 16 * i);
      uint64_t v22 = *v20;
      uint64_t v21 = v20[1];
      id v23 = *(void **)(v4[7] + 8 * i);
      if ((v39 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        id v24 = v23;
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      unint64_t v25 = Hasher._finalize()() & ~(-1 << *(unsigned char *)(v5 + 32));
      if (((-1 << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) == 0)
      {
        sub_100028320();
        while (1)
        {
          sub_100028568();
          if (v29)
          {
            if (v26) {
              break;
            }
          }
          if (v27 == v28) {
            uint64_t v27 = 0;
          }
          if (*(void *)(v11 + 8 * v27) != -1)
          {
            sub_10002830C();
            goto LABEL_31;
          }
        }
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        return;
      }
      sub_100028334();
LABEL_31:
      sub_10002841C();
      sub_100028844();
      uint64_t v32 = (void *)(v31 + 16 * v30);
      *uint64_t v32 = v22;
      v32[1] = v21;
      *(void *)(*(void *)(v5 + 56) + 8 * v30) = v23;
      sub_10002845C();
      if (v10) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v15 = v12 + 1;
      if (__OFADD__(v12, 1)) {
        goto LABEL_40;
      }
      if (v15 >= v37) {
        goto LABEL_33;
      }
      ++v12;
      if (!*(void *)(v38 + 8 * v15))
      {
        int64_t v12 = v15 + 1;
        if (v15 + 1 >= v37) {
          goto LABEL_33;
        }
        if (!*(void *)(v38 + 8 * v12))
        {
          int64_t v16 = v15 + 2;
          if (v16 >= v37)
          {
LABEL_33:
            swift_release();
            char v3 = v36;
            if (v39)
            {
              sub_100028594();
              if (v34 != v35) {
                sub_100028820(v33);
              }
              else {
                sub_100028574(v33);
              }
              v4[2] = 0;
            }
            break;
          }
          if (!*(void *)(v38 + 8 * v16))
          {
            while (1)
            {
              int64_t v12 = v16 + 1;
              if (__OFADD__(v16, 1)) {
                goto LABEL_41;
              }
              if (v12 >= v37) {
                goto LABEL_33;
              }
              ++v16;
              if (*(void *)(v38 + 8 * v12)) {
                goto LABEL_18;
              }
            }
          }
          int64_t v12 = v16;
        }
      }
LABEL_18:
      sub_100028558();
      uint64_t v10 = v18 & v17;
    }
  }
  swift_release();
  *char v3 = v5;
}

void sub_100022BFC(uint64_t a1, uint64_t a2)
{
}

void sub_100022C08(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1000285F8(a1, a2, a3);
  sub_100028688();
  sub_1000287A0();
  if (v6)
  {
    sub_10002866C();
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    uint64_t v10 = v9 & v8;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 64;
    swift_retain();
    int64_t v12 = 0;
    if (!v10) {
      goto LABEL_7;
    }
LABEL_6:
    sub_100028504();
    for (int64_t i = v13 | (v12 << 6); ; int64_t i = v19 + (v12 << 6))
    {
      uint64_t v20 = (uint64_t *)(v4[6] + 16 * i);
      uint64_t v22 = *v20;
      uint64_t v21 = v20[1];
      uint64_t v23 = *(void *)(v4[7] + 8 * i);
      if ((v38 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      unint64_t v24 = Hasher._finalize()() & ~(-1 << *(unsigned char *)(v5 + 32));
      if (((-1 << v24) & ~*(void *)(v11 + 8 * (v24 >> 6))) == 0)
      {
        sub_100028320();
        while (1)
        {
          sub_100028568();
          if (v28)
          {
            if (v25) {
              break;
            }
          }
          if (v26 == v27) {
            uint64_t v26 = 0;
          }
          if (*(void *)(v11 + 8 * v26) != -1)
          {
            sub_10002830C();
            goto LABEL_31;
          }
        }
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        return;
      }
      sub_100028334();
LABEL_31:
      sub_10002841C();
      *(void *)(v11 + v29) |= v30;
      uint64_t v32 = (void *)(*(void *)(v5 + 48) + 16 * v31);
      *uint64_t v32 = v22;
      v32[1] = v21;
      *(void *)(*(void *)(v5 + 56) + 8 * v31) = v23;
      sub_10002845C();
      if (v10) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v15 = v12 + 1;
      if (__OFADD__(v12, 1)) {
        goto LABEL_40;
      }
      if (v15 >= v36) {
        goto LABEL_33;
      }
      ++v12;
      if (!*(void *)(v37 + 8 * v15))
      {
        int64_t v12 = v15 + 1;
        if (v15 + 1 >= v36) {
          goto LABEL_33;
        }
        if (!*(void *)(v37 + 8 * v12))
        {
          int64_t v16 = v15 + 2;
          if (v16 >= v36)
          {
LABEL_33:
            swift_release();
            if (v38)
            {
              sub_100028594();
              if (v34 != v35) {
                sub_100028820(v33);
              }
              else {
                sub_100028574(v33);
              }
              v4[2] = 0;
            }
            break;
          }
          if (!*(void *)(v37 + 8 * v16))
          {
            while (1)
            {
              int64_t v12 = v16 + 1;
              if (__OFADD__(v16, 1)) {
                goto LABEL_41;
              }
              if (v12 >= v36) {
                goto LABEL_33;
              }
              ++v16;
              if (*(void *)(v37 + 8 * v12)) {
                goto LABEL_18;
              }
            }
          }
          int64_t v12 = v16;
        }
      }
LABEL_18:
      sub_100028558();
      uint64_t v10 = v18 & v17;
    }
  }
  swift_release();
  *char v3 = v5;
}

void sub_100022E4C(uint64_t a1, uint64_t a2)
{
  char v3 = v2;
  uint64_t v5 = type metadata accessor for LNBundleRecord();
  uint64_t v6 = sub_1000282DC(v5);
  uint64_t v45 = v7;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_10000BF1C((uint64_t *)&unk_10017D390);
  sub_100028714();
  int v46 = a2;
  static _DictionaryStorage.resize(original:capacity:move:)();
  sub_1000287A0();
  if (v11)
  {
    uint64_t v12 = 1 << *(unsigned char *)(v10 + 32);
    uint64_t v13 = *(void *)(v10 + 64);
    uint64_t v44 = v10 + 64;
    if (v12 < 64) {
      uint64_t v14 = ~(-1 << v12);
    }
    else {
      uint64_t v14 = -1;
    }
    uint64_t v15 = v14 & v13;
    uint64_t v42 = v2;
    int64_t v43 = (unint64_t)(v12 + 63) >> 6;
    uint64_t v16 = a2 + 64;
    swift_retain();
    int64_t v17 = 0;
    if (!v15) {
      goto LABEL_7;
    }
LABEL_6:
    sub_100028938();
    for (int64_t i = v18 | (v17 << 6); ; int64_t i = v24 + (v17 << 6))
    {
      char v25 = (uint64_t *)(*(void *)(v10 + 48) + 16 * i);
      uint64_t v27 = *v25;
      uint64_t v26 = v25[1];
      uint64_t v28 = *(void *)(v45 + 72);
      uint64_t v29 = *(void *)(v10 + 56) + v28 * i;
      if (v46)
      {
        sub_100027D2C(v29, (uint64_t)v9);
      }
      else
      {
        sub_100027CC8(v29, (uint64_t)v9);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      unint64_t v30 = Hasher._finalize()() & ~(-1 << *(unsigned char *)(a2 + 32));
      if (((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6))) == 0)
      {
        sub_100028320();
        while (1)
        {
          sub_100028568();
          if (v34)
          {
            if (v31) {
              break;
            }
          }
          if (v32 == v33) {
            uint64_t v32 = 0;
          }
          if (*(void *)(v16 + 8 * v32) != -1)
          {
            sub_10002830C();
            goto LABEL_32;
          }
        }
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return;
      }
      sub_100028334();
LABEL_32:
      sub_10002841C();
      *(void *)(v16 + v35) |= v36;
      char v38 = (void *)(*(void *)(a2 + 48) + 16 * v37);
      *char v38 = v27;
      v38[1] = v26;
      sub_100027D2C((uint64_t)v9, *(void *)(a2 + 56) + v28 * v37);
      sub_10002845C();
      if (v15) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v20 = v17 + 1;
      if (__OFADD__(v17, 1)) {
        goto LABEL_41;
      }
      if (v20 >= v43) {
        goto LABEL_34;
      }
      ++v17;
      if (!*(void *)(v44 + 8 * v20))
      {
        int64_t v17 = v20 + 1;
        if (v20 + 1 >= v43) {
          goto LABEL_34;
        }
        if (!*(void *)(v44 + 8 * v17))
        {
          int64_t v21 = v20 + 2;
          if (v21 >= v43)
          {
LABEL_34:
            swift_release();
            char v3 = v42;
            if (v46)
            {
              sub_100028594();
              if (v40 != v41) {
                sub_100028820(v39);
              }
              else {
                sub_100028574(v39);
              }
              *(void *)(v10 + 16) = 0;
            }
            break;
          }
          if (!*(void *)(v44 + 8 * v21))
          {
            while (1)
            {
              int64_t v17 = v21 + 1;
              if (__OFADD__(v21, 1)) {
                goto LABEL_42;
              }
              if (v17 >= v43) {
                goto LABEL_34;
              }
              ++v21;
              if (*(void *)(v44 + 8 * v17)) {
                goto LABEL_18;
              }
            }
          }
          int64_t v17 = v21;
        }
      }
LABEL_18:
      sub_100028558();
      uint64_t v15 = v23 & v22;
    }
  }
  swift_release();
  *char v3 = a2;
}

unint64_t sub_100023144(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  Hasher.init(_seed:)();
  if (a2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
  uint64_t v9 = (void *)(a4[6] + 16 * result);
  *uint64_t v9 = a1;
  v9[1] = a2;
  *(void *)(a4[7] + 8 * result) = a3;
  ++a4[2];
  return result;
}

uint64_t sub_100023234(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

uint64_t sub_100023250(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v6 = v5;
  sub_100027628(a1, a2, a3, &v52);
  long long v48 = v52;
  long long v49 = v53;
  long long v50 = v54;
  uint64_t v51 = v55;
  uint64_t v46 = a1;
  swift_bridgeObjectRetain();
  uint64_t v47 = a3;
  swift_retain();
  uint64_t v11 = sub_10002766C();
  if (v12)
  {
    uint64_t v18 = v11;
    uint64_t v19 = v12;
    uint64_t v20 = v13;
    while (1)
    {
      int64_t v21 = (void *)*a5;
      unint64_t v23 = sub_1000213AC(v18, v19, (uint64_t)&String.hash(into:), (uint64_t)sub_100021558, v14, v15, v16, v17, v46, v47, v48, *((uint64_t *)&v48 + 1), v49, *((uint64_t *)&v49 + 1), v50, *((uint64_t *)&v50 + 1), v51, v52, *((uint64_t *)&v52 + 1),
              v53,
              *((uint64_t *)&v53 + 1),
              v54,
              *((uint64_t *)&v54 + 1),
              v55,
              v56,
              v57);
      uint64_t v24 = v21[2];
      BOOL v25 = (v22 & 1) == 0;
      uint64_t v26 = v24 + v25;
      if (__OFADD__(v24, v25)) {
        break;
      }
      char v27 = v22;
      if (v21[3] >= v26)
      {
        if ((a4 & 1) == 0)
        {
          sub_10000BF1C(&qword_10017D2C8);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        sub_100022C08(v26, a4 & 1, &qword_10017D2D0);
        uint64_t v32 = sub_1000213AC(v18, v19, (uint64_t)&String.hash(into:), (uint64_t)sub_100021558, v28, v29, v30, v31, v46, v47, v48, *((uint64_t *)&v48 + 1), v49, *((uint64_t *)&v49 + 1), v50, *((uint64_t *)&v50 + 1), v51, v52, *((uint64_t *)&v52 + 1),
                v53,
                *((uint64_t *)&v53 + 1),
                v54,
                *((uint64_t *)&v54 + 1),
                v55,
                v56,
                v57);
        if ((v27 & 1) != (v33 & 1)) {
          goto LABEL_18;
        }
        unint64_t v23 = v32;
      }
      char v34 = (void *)*a5;
      if (v27)
      {
        uint64_t v35 = *(void *)(v34[7] + 8 * v23);
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v57 = v35;
        sub_100023518(v20, (uint64_t)sub_100027804, 0, isUniquelyReferenced_nonNull_native, &v57);
        if (v6) {
          goto LABEL_19;
        }
        uint64_t v6 = 0;
        uint64_t v37 = v57;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v38 = v34[7];
        swift_bridgeObjectRelease();
        *(void *)(v38 + 8 * v23) = v37;
      }
      else
      {
        v34[(v23 >> 6) + 8] |= 1 << v23;
        uint64_t v39 = (uint64_t *)(v34[6] + 16 * v23);
        *uint64_t v39 = v18;
        v39[1] = v19;
        *(void *)(v34[7] + 8 * v23) = v20;
        uint64_t v40 = v34[2];
        BOOL v41 = __OFADD__(v40, 1);
        uint64_t v42 = v40 + 1;
        if (v41) {
          goto LABEL_17;
        }
        v34[2] = v42;
      }
      uint64_t v18 = sub_10002766C();
      uint64_t v19 = v43;
      uint64_t v20 = v44;
      a4 = 1;
      if (!v43) {
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
LABEL_19:
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    swift_release();
    sub_100027664();
    return swift_release();
  }
  return result;
}

uint64_t sub_100023518(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  sub_100027628(a1, a2, a3, &v60);
  long long v56 = v60;
  long long v57 = v61;
  long long v58 = v62;
  uint64_t v59 = v63;
  uint64_t v54 = a1;
  swift_bridgeObjectRetain();
  uint64_t v55 = a3;
  swift_retain();
  uint64_t v9 = sub_10002766C();
  if (v10)
  {
    uint64_t v16 = v9;
    uint64_t v17 = v10;
    uint64_t v18 = v11;
    while (1)
    {
      uint64_t v19 = (void *)*a5;
      unint64_t v21 = sub_1000213AC(v16, v17, (uint64_t)&String.hash(into:), (uint64_t)sub_100021558, v12, v13, v14, v15, v50, v51, v52, v53, v54, v55, v56, *((uint64_t *)&v56 + 1), v57, *((uint64_t *)&v57 + 1), v58,
              *((uint64_t *)&v58 + 1),
              v59,
              v60,
              *((uint64_t *)&v60 + 1),
              v61,
              *((uint64_t *)&v61 + 1),
              v62);
      uint64_t v22 = v19[2];
      BOOL v23 = (v20 & 1) == 0;
      uint64_t v24 = v22 + v23;
      if (__OFADD__(v22, v23)) {
        break;
      }
      char v25 = v20;
      if (v19[3] >= v24)
      {
        if ((a4 & 1) == 0)
        {
          sub_10000BF1C(&qword_10017D2D8);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        sub_100022C08(v24, a4 & 1, &qword_10017D2E8);
        uint64_t v30 = sub_1000213AC(v16, v17, (uint64_t)&String.hash(into:), (uint64_t)sub_100021558, v26, v27, v28, v29, v50, v51, v52, v53, v54, v55, v56, *((uint64_t *)&v56 + 1), v57, *((uint64_t *)&v57 + 1), v58,
                *((uint64_t *)&v58 + 1),
                v59,
                v60,
                *((uint64_t *)&v60 + 1),
                v61,
                *((uint64_t *)&v61 + 1),
                v62);
        if ((v25 & 1) != (v31 & 1)) {
          goto LABEL_36;
        }
        unint64_t v21 = v30;
      }
      uint64_t v32 = (void *)*a5;
      if (v25)
      {
        uint64_t v33 = *(void *)(v32[7] + 8 * v21);
        uint64_t v34 = *(void *)(v18 + 16);
        uint64_t v35 = *(void *)(v33 + 16);
        if (__OFADD__(v35, v34)) {
          goto LABEL_31;
        }
        swift_bridgeObjectRetain();
        if (!swift_isUniquelyReferenced_nonNull_native() || v35 + v34 > *(void *)(v33 + 24) >> 1)
        {
          sub_10001E4A8();
          uint64_t v33 = v36;
        }
        if (*(void *)(v18 + 16))
        {
          uint64_t v37 = *(void *)(v33 + 16);
          if ((*(void *)(v33 + 24) >> 1) - v37 < v34) {
            goto LABEL_34;
          }
          unint64_t v38 = v33 + 40 * v37 + 32;
          if (v18 + 32 < v38 + 40 * v34 && v38 < v18 + 32 + 40 * v34) {
            goto LABEL_37;
          }
          sub_10000BF1C(&qword_10017D2E0);
          swift_arrayInitWithCopy();
          if (v34)
          {
            uint64_t v40 = *(void *)(v33 + 16);
            BOOL v41 = __OFADD__(v40, v34);
            uint64_t v42 = v40 + v34;
            if (v41) {
              goto LABEL_35;
            }
            *(void *)(v33 + 16) = v42;
          }
        }
        else if (v34)
        {
          goto LABEL_33;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v46 = v32[7];
        swift_bridgeObjectRelease();
        *(void *)(v46 + 8 * v21) = v33;
      }
      else
      {
        v32[(v21 >> 6) + 8] |= 1 << v21;
        uint64_t v43 = (uint64_t *)(v32[6] + 16 * v21);
        *uint64_t v43 = v16;
        v43[1] = v17;
        *(void *)(v32[7] + 8 * v21) = v18;
        uint64_t v44 = v32[2];
        BOOL v41 = __OFADD__(v44, 1);
        uint64_t v45 = v44 + 1;
        if (v41) {
          goto LABEL_32;
        }
        v32[2] = v45;
      }
      uint64_t v16 = sub_10002766C();
      uint64_t v17 = v47;
      uint64_t v18 = v48;
      a4 = 1;
      if (!v47) {
        goto LABEL_29;
      }
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
LABEL_37:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_29:
    swift_bridgeObjectRelease();
    swift_release();
    sub_100027664();
    return swift_release();
  }
  return result;
}

uint64_t sub_1000238AC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = a4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a2;
}

uint64_t sub_1000238F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *a4;
  *a4 = 0x8000000000000000;
  sub_100023250(a1, a2, a3, isUniquelyReferenced_nonNull_native, &v10);
  *a4 = v10;
  return swift_bridgeObjectRelease();
}

uint64_t sub_100023984(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  sub_1000283BC();
  if (v11)
  {
    uint64_t v12 = *(void *)(v7 + 48);
    uint64_t v13 = (void *)(v12 + 16 * v10);
    BOOL v14 = *v13 == a2 && v13[1] == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v15 = (uint64_t *)(*(void *)(*v3 + 48) + 16 * v10);
      uint64_t v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v18 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v18;
      sub_1000283BC();
      if ((v19 & 1) == 0) {
        break;
      }
      char v20 = (void *)(v12 + 16 * v10);
      BOOL v21 = *v20 == a2 && v20[1] == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v23 = *v3;
  *char v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_100025450(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *char v3 = v23;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_100023B1C(void *a1, void *a2)
{
  return sub_100024260(a1, a2, &qword_10017D0A0, (uint64_t)LNSystemProtocol_ptr, &qword_10017D4C8);
}

uint64_t sub_100023B38(void *a1, uint64_t *a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  sub_10008A4C8();
  Hasher._finalize()();
  sub_100028974();
  unint64_t v8 = v7 & ~v6;
  uint64_t v48 = v5 + 56;
  uint64_t v49 = v5;
  uint64_t v44 = v2;
  __dst = a1;
  if ((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    uint64_t v47 = ~v6;
    uint64_t v9 = *a2;
    uint64_t v53 = a2[1];
    uint64_t v46 = *a2;
    do
    {
      unint64_t v10 = (void *)(*(void *)(v49 + 48) + 104 * v8);
      uint64_t v12 = v10[2];
      uint64_t v11 = v10[3];
      uint64_t v13 = (void *)v10[4];
      uint64_t v14 = v10[6];
      uint64_t v51 = v10[7];
      uint64_t v52 = v10[5];
      uint64_t v15 = v10[8];
      uint64_t v50 = v10[9];
      uint64_t v16 = v10[10];
      uint64_t v17 = (void *)v10[11];
      BOOL v18 = *v10 == v9 && v10[1] == v53;
      if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        BOOL v19 = v12 == a2[2] && v11 == a2[3];
        if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          sub_10000D9D4(0, (unint64_t *)&qword_10017DD30);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v20 = v13;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v21 = v17;
          swift_bridgeObjectRetain();
          if ((static NSObject.== infix(_:_:)() & 1) != 0
            && (v52 == a2[5] ? (BOOL v22 = v14 == a2[6]) : (BOOL v22 = 0),
                (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
             && (v51 == a2[7] ? (BOOL v23 = v15 == a2[8]) : (BOOL v23 = 0),
                 (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              && (v50 == a2[9] ? (BOOL v24 = v16 == a2[10]) : (BOOL v24 = 0),
                  (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
               && (static NSObject.== infix(_:_:)() & 1) != 0))))
          {
            sub_10001DF0C();
            char v26 = v25;
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v9 = v46;
            if (v26)
            {
              swift_bridgeObjectRelease();
              sub_10000D790((uint64_t)a2);
              uint64_t v28 = (void *)(*(void *)(*v44 + 48) + 104 * v8);
              uint64_t v29 = v28[1];
              uint64_t v30 = v28[2];
              uint64_t v31 = v28[3];
              uint64_t v33 = (void *)v28[4];
              uint64_t v32 = v28[5];
              uint64_t v35 = v28[6];
              uint64_t v34 = v28[7];
              uint64_t v37 = v28[8];
              uint64_t v36 = v28[9];
              uint64_t v38 = v28[10];
              uint64_t v39 = (void *)v28[11];
              uint64_t v40 = v28[12];
              void *__dst = *v28;
              __dst[1] = v29;
              __dst[2] = v30;
              __dst[3] = v31;
              __dst[4] = v33;
              __dst[5] = v32;
              __dst[6] = v35;
              __dst[7] = v34;
              __dst[8] = v37;
              __dst[9] = v36;
              __dst[10] = v38;
              __dst[11] = v39;
              __dst[12] = v40;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              id v41 = v33;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              id v42 = v39;
              swift_bridgeObjectRetain();
              return 0;
            }
          }
          else
          {
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v9 = v46;
          }
        }
      }
      unint64_t v8 = (v8 + 1) & v47;
    }
    while (((*(void *)(v48 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v54 = *v44;
  *uint64_t v44 = 0x8000000000000000;
  sub_10000D708((uint64_t)a2);
  sub_1000255EC(a2, v8, isUniquelyReferenced_nonNull_native);
  *uint64_t v44 = v54;
  swift_bridgeObjectRelease();
  memcpy(__dst, a2, 0x68uLL);
  return 1;
}

uint64_t sub_100023F48(uint64_t a1, char *a2)
{
  char v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  sub_100028430();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *v2;
  sub_100027C80((unint64_t *)&qword_10017D340, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  uint64_t v35 = a2;
  dispatch thunk of Hashable._rawHashValue(seed:)();
  sub_100028974();
  unint64_t v15 = v14 & ~v13;
  uint64_t v34 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
  {
    uint64_t v30 = v2;
    uint64_t v31 = a1;
    uint64_t v32 = ~v13;
    uint64_t v29 = v8;
    BOOL v18 = *(void (**)(void, void, void))(v8 + 16);
    uint64_t v17 = v8 + 16;
    uint64_t v16 = v18;
    uint64_t v33 = *(void *)(v17 + 56);
    BOOL v19 = (void (**)(char *, uint64_t))(v17 - 8);
    v28[1] = v17 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v20 = v12;
      unint64_t v21 = v33 * v15;
      BOOL v22 = v16;
      v16(v11, *(void *)(v12 + 48) + v33 * v15, v6);
      sub_100027C80(&qword_10017EE10, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
      BOOL v24 = *v19;
      (*v19)(v11, v6);
      if (v23) {
        break;
      }
      unint64_t v15 = (v15 + 1) & v32;
      uint64_t v12 = v20;
      uint64_t v16 = v22;
      if (((*(void *)(v34 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        char v3 = v30;
        a1 = v31;
        uint64_t v8 = v29;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v24(v35, v6);
    v22(v31, *(void *)(*v30 + 48) + v21, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void (**)(void, void, void))(v8 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    char v26 = v35;
    v16(v11, v35, v6);
    uint64_t v36 = *v3;
    *char v3 = 0x8000000000000000;
    sub_100025994((uint64_t)v11, v15, isUniquelyReferenced_nonNull_native);
    *char v3 = v36;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a1, v26, v6);
    return 1;
  }
}

uint64_t sub_100024244(void *a1, void *a2)
{
  return sub_100024260(a1, a2, (unint64_t *)&qword_10017D468, (uint64_t)LNAppNotificationEvent_ptr, &qword_10017D470);
}

uint64_t sub_100024260(void *a1, void *a2, unint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8 = v5;
  uint64_t v11 = *v5;
  if ((*v5 & 0xC000000000000001) != 0)
  {
    if (v11 < 0) {
      uint64_t v12 = *v5;
    }
    else {
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v13 = a2;
    uint64_t v14 = __CocoaSet.member(for:)();

    if (v14)
    {
      swift_bridgeObjectRelease();

      sub_10000D9D4(0, a3);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v37;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v29 = sub_100024510(v12, result + 1, a5, a3);
    uint64_t v38 = (void *)v29;
    if (*(void *)(v29 + 24) <= *(void *)(v29 + 16))
    {
      id v34 = v13;
      sub_1000251E4();
      uint64_t v30 = v38;
    }
    else
    {
      uint64_t v30 = (void *)v29;
      id v31 = v13;
    }
    sub_1000253D0((uint64_t)v13, v30);
    *uint64_t v8 = (uint64_t)v30;
    swift_bridgeObjectRelease();
    *a1 = v13;
  }
  else
  {
    Swift::Int v15 = *(void *)(v11 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v16 = NSObject._rawHashValue(seed:)(v15);
    uint64_t v17 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v18 = v16 & ~v17;
    sub_1000288C8();
    if (v19)
    {
      sub_10000D9D4(0, a3);
      id v20 = *(id *)(*(void *)(v11 + 48) + 8 * v18);
      char v21 = static NSObject.== infix(_:_:)();

      if (v21)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        char v26 = *(void **)(*(void *)(*v8 + 48) + 8 * v18);
        *a1 = v26;
        id v27 = v26;
        return 0;
      }
      uint64_t v22 = ~v17;
      while (1)
      {
        unint64_t v18 = (v18 + 1) & v22;
        sub_1000288C8();
        if ((v23 & 1) == 0) {
          break;
        }
        id v24 = *(id *)(*(void *)(v11 + 48) + 8 * v18);
        char v25 = static NSObject.== infix(_:_:)();

        if (v25) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v39 = *v8;
    *uint64_t v8 = 0x8000000000000000;
    id v33 = a2;
    sub_100025C34((uint64_t)v33, v18, isUniquelyReferenced_nonNull_native, (uint64_t)a5, a3);
    *uint64_t v8 = v39;
    swift_bridgeObjectRelease();
    *a1 = v33;
  }
  return 1;
}

Swift::Int sub_100024510(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  if (!a2)
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  sub_10000BF1C(a3);
  sub_100028714();
  uint64_t v5 = static _SetStorage.convert(_:capacity:)();
  uint64_t v17 = v5;
  __CocoaSet.makeIterator()();
  if (!__CocoaSet.Iterator.next()())
  {
LABEL_16:
    swift_release();
    return v5;
  }
  sub_10000D9D4(0, a4);
  while (1)
  {
    swift_dynamicCast();
    uint64_t v5 = v17;
    if (*(void *)(v17 + 24) <= *(void *)(v17 + 16))
    {
      sub_1000251E4();
      uint64_t v5 = v17;
    }
    Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v5 + 40));
    uint64_t v7 = v5 + 56;
    uint64_t v8 = -1 << *(unsigned char *)(v5 + 32);
    unint64_t v9 = result & ~v8;
    unint64_t v10 = v9 >> 6;
    if (((-1 << v9) & ~*(void *)(v5 + 56 + 8 * (v9 >> 6))) == 0) {
      break;
    }
    unint64_t v11 = __clz(__rbit64((-1 << v9) & ~*(void *)(v5 + 56 + 8 * (v9 >> 6)))) | v9 & 0x7FFFFFFFFFFFFFC0;
LABEL_15:
    *(void *)(v7 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(void *)(*(void *)(v5 + 48) + 8 * v11) = v16;
    ++*(void *)(v5 + 16);
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_16;
    }
  }
  char v12 = 0;
  unint64_t v13 = (unint64_t)(63 - v8) >> 6;
  while (++v10 != v13 || (v12 & 1) == 0)
  {
    BOOL v14 = v10 == v13;
    if (v10 == v13) {
      unint64_t v10 = 0;
    }
    v12 |= v14;
    uint64_t v15 = *(void *)(v7 + 8 * v10);
    if (v15 != -1)
    {
      unint64_t v11 = __clz(__rbit64(~v15)) + (v10 << 6);
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

void sub_100024700()
{
  char v3 = v0;
  sub_1000285BC();
  sub_10000BF1C((uint64_t *)&unk_10017D2F0);
  sub_100028764();
  sub_1000287A0();
  if (v4)
  {
    uint64_t v30 = v1 + 7;
    sub_10002886C();
    uint64_t v7 = v6 & v5;
    int64_t v9 = (unint64_t)(v8 + 63) >> 6;
    swift_retain();
    int64_t v10 = 0;
    if (!v7) {
      goto LABEL_4;
    }
LABEL_3:
    sub_100028880();
    for (unint64_t i = v11 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v10 << 6))
    {
      uint64_t v16 = (uint64_t *)(v1[6] + 16 * i);
      uint64_t v17 = *v16;
      uint64_t v18 = v16[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      Hasher._finalize()();
      sub_100028650();
      if (v19)
      {
        sub_100028320();
        while (1)
        {
          sub_100028568();
          if (v19)
          {
            if (v21) {
              break;
            }
          }
          if (v22 == v23) {
            uint64_t v22 = 0;
          }
          if (*(void *)(v2 + 56 + 8 * v22) != -1)
          {
            sub_10002830C();
            goto LABEL_28;
          }
        }
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        return;
      }
      sub_100028334();
LABEL_28:
      sub_100028518(v20);
      char v25 = (void *)(*(void *)(v2 + 48) + 16 * v24);
      *char v25 = v17;
      v25[1] = v18;
      sub_10002845C();
      if (v7) {
        goto LABEL_3;
      }
LABEL_4:
      int64_t v13 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        goto LABEL_36;
      }
      if (v13 >= v9) {
        goto LABEL_30;
      }
      unint64_t v14 = v30[v13];
      ++v10;
      if (!v14)
      {
        int64_t v10 = v13 + 1;
        if (v13 + 1 >= v9) {
          goto LABEL_30;
        }
        unint64_t v14 = v30[v10];
        if (!v14)
        {
          int64_t v10 = v13 + 2;
          if (v13 + 2 >= v9) {
            goto LABEL_30;
          }
          unint64_t v14 = v30[v10];
          if (!v14)
          {
            int64_t v15 = v13 + 3;
            if (v15 >= v9)
            {
LABEL_30:
              swift_release();
              char v3 = v0;
              sub_1000285A8();
              if (v27 ^ v28 | v19)
              {
                sub_100028974();
                *uint64_t v30 = v29;
              }
              else
              {
                sub_100023234(0, (unint64_t)(v26 + 63) >> 6, v30);
              }
              v1[2] = 0;
              break;
            }
            unint64_t v14 = v30[v15];
            if (!v14)
            {
              while (1)
              {
                int64_t v10 = v15 + 1;
                if (__OFADD__(v15, 1)) {
                  goto LABEL_37;
                }
                if (v10 >= v9) {
                  goto LABEL_30;
                }
                unint64_t v14 = v30[v10];
                ++v15;
                if (v14) {
                  goto LABEL_17;
                }
              }
            }
            int64_t v10 = v15;
          }
        }
      }
LABEL_17:
      uint64_t v7 = (v14 - 1) & v14;
    }
  }
  swift_release();
  *char v3 = v2;
}

unint64_t sub_100024934()
{
  uint64_t v1 = *v0;
  sub_10000BF1C(&qword_10017D3D0);
  uint64_t v2 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v3 = v2;
  if (*(void *)(v1 + 16))
  {
    uint64_t v4 = 1 << *(unsigned char *)(v1 + 32);
    uint64_t v36 = (void *)(v1 + 56);
    if (v4 < 64) {
      uint64_t v5 = ~(-1 << v4);
    }
    else {
      uint64_t v5 = -1;
    }
    unint64_t v6 = v5 & *(void *)(v1 + 56);
    int64_t v37 = (unint64_t)(v4 + 63) >> 6;
    uint64_t v38 = v2 + 56;
    unint64_t result = swift_retain();
    int64_t v8 = 0;
    uint64_t v34 = v3;
    uint64_t v35 = v1;
    if (!v6) {
      goto LABEL_7;
    }
LABEL_6:
    uint64_t v45 = (v6 - 1) & v6;
    int64_t v46 = v8;
    for (unint64_t i = __clz(__rbit64(v6)) | (v8 << 6); ; unint64_t i = __clz(__rbit64(v11)) + (v12 << 6))
    {
      uint64_t v14 = *(void *)(v1 + 48) + 104 * i;
      uint64_t v15 = *(void *)v14;
      uint64_t v16 = *(void *)(v14 + 8);
      uint64_t v17 = *(void *)(v14 + 16);
      uint64_t v18 = v1;
      uint64_t v19 = *(void *)(v14 + 40);
      uint64_t v20 = *(void *)(v14 + 48);
      uint64_t v22 = *(void *)(v14 + 56);
      uint64_t v21 = *(void *)(v14 + 64);
      uint64_t v39 = *(void *)(v14 + 72);
      long long v47 = *(_OWORD *)(v14 + 80);
      long long v48 = *(_OWORD *)(v14 + 24);
      uint64_t v23 = *(void *)(v14 + 96);
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      uint64_t v44 = v15;
      String.hash(into:)();
      uint64_t v40 = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v43 = v17;
      String.hash(into:)();
      swift_bridgeObjectRelease();
      id v24 = *((id *)&v48 + 1);
      NSObject.hash(into:)();

      swift_bridgeObjectRetain();
      uint64_t v42 = v19;
      uint64_t v1 = v18;
      String.hash(into:)();
      uint64_t v41 = v20;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      id v25 = *((id *)&v47 + 1);
      NSObject.hash(into:)();

      Hasher._combine(_:)(*(void *)(v23 + 16));
      uint64_t v26 = *(void *)(v23 + 16);
      unint64_t v6 = v45;
      int64_t v8 = v46;
      if (v26)
      {
        swift_bridgeObjectRetain();
        char v27 = (void **)(v23 + 64);
        do
        {
          char v28 = *v27;
          v27 += 5;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v29 = v28;
          String.hash(into:)();
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          id v30 = v29;
          NSObject.hash(into:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          --v26;
        }
        while (v26);
        swift_bridgeObjectRelease();
        uint64_t v3 = v34;
        uint64_t v1 = v35;
        unint64_t v6 = v45;
        int64_t v8 = v46;
      }
      Hasher._finalize()();
      unint64_t result = _HashTable.nextHole(atOrAfter:)();
      *(void *)(v38 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
      uint64_t v31 = *(void *)(v3 + 48) + 104 * result;
      *(void *)uint64_t v31 = v44;
      *(void *)(v31 + 8) = v40;
      *(void *)(v31 + 16) = v43;
      *(_OWORD *)(v31 + 24) = v48;
      *(void *)(v31 + 40) = v42;
      *(void *)(v31 + 48) = v41;
      *(void *)(v31 + 56) = v22;
      *(void *)(v31 + 64) = v21;
      *(void *)(v31 + 72) = v39;
      *(_OWORD *)(v31 + 80) = v47;
      *(void *)(v31 + 96) = v23;
      ++*(void *)(v3 + 16);
      if (v6) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v10 = v8 + 1;
      if (__OFADD__(v8, 1))
      {
        __break(1u);
LABEL_33:
        __break(1u);
        return result;
      }
      if (v10 >= v37) {
        goto LABEL_27;
      }
      unint64_t v11 = v36[v10];
      int64_t v12 = v8 + 1;
      if (!v11)
      {
        int64_t v12 = v8 + 2;
        if (v8 + 2 >= v37) {
          goto LABEL_27;
        }
        unint64_t v11 = v36[v12];
        if (!v11)
        {
          int64_t v12 = v8 + 3;
          if (v8 + 3 >= v37) {
            goto LABEL_27;
          }
          unint64_t v11 = v36[v12];
          if (!v11)
          {
            uint64_t v13 = v8 + 4;
            if (v8 + 4 >= v37)
            {
LABEL_27:
              swift_release();
              uint64_t v32 = 1 << *(unsigned char *)(v1 + 32);
              if (v32 > 63) {
                sub_100023234(0, (unint64_t)(v32 + 63) >> 6, v36);
              }
              else {
                void *v36 = -1 << v32;
              }
              *(void *)(v1 + 16) = 0;
              break;
            }
            unint64_t v11 = v36[v13];
            if (!v11)
            {
              while (1)
              {
                int64_t v12 = v13 + 1;
                if (__OFADD__(v13, 1)) {
                  goto LABEL_33;
                }
                if (v12 >= v37) {
                  goto LABEL_27;
                }
                unint64_t v11 = v36[v12];
                ++v13;
                if (v11) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v12 = v8 + 4;
          }
        }
      }
LABEL_20:
      uint64_t v45 = (v11 - 1) & v11;
      int64_t v46 = v12;
    }
  }
  unint64_t result = swift_release();
  *id v33 = v3;
  return result;
}

uint64_t sub_100024DEC()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_10000BF1C(&qword_10017D458);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    int64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    uint64_t v14 = v41;
    uint64_t v15 = v42;
    if (!v10) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v16 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    int64_t v40 = v13;
    for (unint64_t i = v16 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v20 << 6))
    {
      uint64_t v22 = v4;
      uint64_t v23 = *(void *)(v4 + 48);
      uint64_t v24 = *(void *)(v39 + 72);
      id v25 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v25(v14, v23 + v24 * i, v15);
      uint64_t v6 = v38;
      sub_100027C80((unint64_t *)&qword_10017D340, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v26 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v27 = result & ~v26;
      unint64_t v28 = v27 >> 6;
      if (((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) == 0)
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v26) >> 6;
        while (++v28 != v31 || (v30 & 1) == 0)
        {
          BOOL v32 = v28 == v31;
          if (v28 == v31) {
            unint64_t v28 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v28);
          if (v33 != -1)
          {
            unint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v29 = __clz(__rbit64((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v11 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v25)(*(void *)(v6 + 48) + v29 * v24, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v22;
      int64_t v13 = v40;
      if (v10) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v18 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_38;
      }
      if (v18 >= v36) {
        goto LABEL_32;
      }
      unint64_t v19 = v37[v18];
      int64_t v20 = v13 + 1;
      if (!v19)
      {
        int64_t v20 = v13 + 2;
        if (v13 + 2 >= v36) {
          goto LABEL_32;
        }
        unint64_t v19 = v37[v20];
        if (!v19)
        {
          int64_t v20 = v13 + 3;
          if (v13 + 3 >= v36) {
            goto LABEL_32;
          }
          unint64_t v19 = v37[v20];
          if (!v19)
          {
            uint64_t v21 = v13 + 4;
            if (v13 + 4 >= v36)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v35;
              uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
              if (v34 > 63) {
                sub_100023234(0, (unint64_t)(v34 + 63) >> 6, v37);
              }
              else {
                *int64_t v37 = -1 << v34;
              }
              *(void *)(v4 + 16) = 0;
              break;
            }
            unint64_t v19 = v37[v21];
            if (!v19)
            {
              while (1)
              {
                int64_t v20 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_39;
                }
                if (v20 >= v36) {
                  goto LABEL_32;
                }
                unint64_t v19 = v37[v20];
                ++v21;
                if (v19) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v20 = v13 + 4;
          }
        }
      }
LABEL_20:
      unint64_t v10 = (v19 - 1) & v19;
      int64_t v40 = v20;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

void sub_1000251E4()
{
  sub_1000284CC();
  uint64_t v3 = v0;
  sub_1000285BC();
  sub_10000BF1C(v4);
  sub_100028764();
  sub_1000287A0();
  if (v5)
  {
    unint64_t v29 = v0;
    uint64_t v6 = 1 << *(unsigned char *)(v1 + 32);
    uint64_t v7 = (void *)(v1 + 56);
    if (v6 < 64) {
      uint64_t v8 = ~(-1 << v6);
    }
    else {
      uint64_t v8 = -1;
    }
    uint64_t v9 = v8 & *(void *)(v1 + 56);
    int64_t v10 = (unint64_t)(v6 + 63) >> 6;
    uint64_t v11 = v2 + 56;
    swift_retain();
    int64_t v12 = 0;
    if (!v9) {
      goto LABEL_7;
    }
LABEL_6:
    sub_100028504();
    for (int64_t i = v13 | (v12 << 6); ; int64_t i = v17 + (v12 << 6))
    {
      uint64_t v18 = *(void *)(*(void *)(v1 + 48) + 8 * i);
      unint64_t v19 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40)) & ~(-1 << *(unsigned char *)(v2 + 32));
      if (((-1 << v19) & ~*(void *)(v11 + 8 * (v19 >> 6))) == 0)
      {
        sub_100028320();
        while (1)
        {
          sub_100028568();
          if (v23)
          {
            if (v20) {
              break;
            }
          }
          if (v21 == v22) {
            uint64_t v21 = 0;
          }
          if (*(void *)(v11 + 8 * v21) != -1)
          {
            sub_10002830C();
            goto LABEL_31;
          }
        }
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return;
      }
      sub_100028334();
LABEL_31:
      sub_100028844();
      *(void *)(v25 + 8 * v24) = v18;
      sub_10002845C();
      if (v9) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v15 = v12 + 1;
      if (__OFADD__(v12, 1)) {
        goto LABEL_39;
      }
      if (v15 >= v10) {
        goto LABEL_33;
      }
      ++v12;
      if (!v7[v15])
      {
        int64_t v12 = v15 + 1;
        if (v15 + 1 >= v10) {
          goto LABEL_33;
        }
        if (!v7[v12])
        {
          int64_t v12 = v15 + 2;
          if (v15 + 2 >= v10) {
            goto LABEL_33;
          }
          if (!v7[v12])
          {
            int64_t v16 = v15 + 3;
            if (v16 >= v10)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v29;
              sub_1000285A8();
              if (v27 ^ v28 | v23) {
                *uint64_t v7 = -1 << v26;
              }
              else {
                sub_100028894(v26);
              }
              *(void *)(v1 + 16) = 0;
              break;
            }
            if (!v7[v16])
            {
              while (1)
              {
                int64_t v12 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_40;
                }
                if (v12 >= v10) {
                  goto LABEL_33;
                }
                ++v16;
                if (v7[v12]) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v12 = v16;
          }
        }
      }
LABEL_20:
      sub_100028858();
    }
  }
  swift_release();
  *uint64_t v3 = v2;
  sub_1000284E8();
}

unint64_t sub_1000253D0(uint64_t a1, void *a2)
{
  NSObject._rawHashValue(seed:)(a2[5]);
  sub_100028974();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(void *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

void sub_100025450(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_100024700();
  }
  else
  {
    if (v10 > v9)
    {
      sub_100025DB0();
      goto LABEL_22;
    }
    sub_100026518();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v12 = Hasher._finalize()();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  a3 = v12 & ~v13;
  uint64_t v14 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v15 = *(void *)(v11 + 48);
    int64_t v16 = (void *)(v15 + 16 * a3);
    BOOL v17 = *v16 == a1 && v16[1] == a2;
    if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v18 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v18;
        if (((*(void *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        unint64_t v19 = (void *)(v15 + 16 * a3);
        BOOL v20 = *v19 == a1 && v19[1] == a2;
        if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_21;
        }
      }
    }
  }
LABEL_22:
  uint64_t v21 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v22 = (void *)(*(void *)(v21 + 48) + 16 * a3);
  void *v22 = a1;
  v22[1] = a2;
  uint64_t v23 = *(void *)(v21 + 16);
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24) {
    __break(1u);
  }
  else {
    *(void *)(v21 + 16) = v25;
  }
}

uint64_t sub_1000255EC(uint64_t *a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if (a3)
    {
      sub_100024934();
    }
    else
    {
      if (v7 > v6)
      {
        sub_100025EE8();
        goto LABEL_41;
      }
      sub_100026728();
    }
    uint64_t v8 = *v3;
    Hasher.init(_seed:)();
    sub_10008A4C8();
    Swift::Int v9 = Hasher._finalize()();
    uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
    a2 = v9 & ~v10;
    uint64_t v42 = v8 + 56;
    uint64_t v43 = v8;
    if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v41 = ~v10;
      uint64_t v11 = *a1;
      uint64_t v47 = a1[1];
      uint64_t v40 = *a1;
      do
      {
        Swift::Int v12 = (void *)(*(void *)(v43 + 48) + 104 * a2);
        uint64_t v14 = v12[2];
        uint64_t v13 = v12[3];
        uint64_t v15 = (void *)v12[4];
        uint64_t v16 = v12[6];
        uint64_t v45 = v12[7];
        uint64_t v46 = v12[5];
        uint64_t v17 = v12[8];
        uint64_t v44 = v12[9];
        uint64_t v19 = v12[10];
        uint64_t v18 = (void *)v12[11];
        BOOL v20 = *v12 == v11 && v12[1] == v47;
        if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          BOOL v21 = v14 == a1[2] && v13 == a1[3];
          if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            sub_10000D9D4(0, (unint64_t *)&qword_10017DD30);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v22 = v15;
            uint64_t v23 = v16;
            swift_bridgeObjectRetain();
            uint64_t v24 = v17;
            swift_bridgeObjectRetain();
            uint64_t v25 = v19;
            uint64_t v26 = v22;
            swift_bridgeObjectRetain();
            id v27 = v18;
            swift_bridgeObjectRetain();
            char v28 = v27;
            if ((static NSObject.== infix(_:_:)() & 1) != 0
              && (v46 == a1[5] ? (BOOL v29 = v23 == a1[6]) : (BOOL v29 = 0),
                  (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
               && (v45 == a1[7] ? (BOOL v30 = v24 == a1[8]) : (BOOL v30 = 0),
                   (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                && (v44 == a1[9] ? (BOOL v31 = v25 == a1[10]) : (BOOL v31 = 0),
                    (v31 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                 && (static NSObject.== infix(_:_:)() & 1) != 0))))
            {
              sub_10001DF0C();
              char v33 = v32;
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v11 = v40;
              if (v33) {
                goto LABEL_44;
              }
            }
            else
            {
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v11 = v40;
            }
          }
        }
        a2 = (a2 + 1) & v41;
      }
      while (((*(void *)(v42 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
LABEL_41:
  uint64_t v34 = *v39;
  *(void *)(*v39 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (uint64_t)memcpy((void *)(*(void *)(v34 + 48) + 104 * a2), a1, 0x68uLL);
  uint64_t v36 = *(void *)(v34 + 16);
  BOOL v37 = __OFADD__(v36, 1);
  uint64_t v38 = v36 + 1;
  if (v37)
  {
    __break(1u);
LABEL_44:
    uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    *(void *)(v34 + 16) = v38;
  }
  return result;
}

uint64_t sub_100025994(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  Swift::Int v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  char v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100024DEC();
  }
  else
  {
    if (v11 > v10)
    {
      sub_100026140();
      goto LABEL_12;
    }
    sub_100026BE0();
  }
  uint64_t v12 = *v3;
  sub_100027C80((unint64_t *)&qword_10017D340, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    uint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    uint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_100027C80(&qword_10017EE10, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_100025C34(uint64_t a1, unint64_t a2, char a3, uint64_t a4, unint64_t *a5)
{
  unint64_t v9 = *(void *)(*v5 + 16);
  unint64_t v10 = *(void *)(*v5 + 24);
  if (v10 > v9 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_1000251E4();
  }
  else
  {
    if (v10 > v9)
    {
      sub_1000263F0();
      goto LABEL_14;
    }
    sub_100026F8C();
  }
  uint64_t v11 = *v5;
  Swift::Int v12 = NSObject._rawHashValue(seed:)(*(void *)(*v5 + 40));
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  a2 = v12 & ~v13;
  sub_100028960();
  if (v14)
  {
    sub_10000D9D4(0, a5);
    id v15 = *(id *)(*(void *)(v11 + 48) + 8 * a2);
    char v16 = static NSObject.== infix(_:_:)();

    if (v16)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v13;
      while (1)
      {
        a2 = (a2 + 1) & v17;
        sub_100028960();
        if ((v18 & 1) == 0) {
          break;
        }
        id v19 = *(id *)(*(void *)(v11 + 48) + 8 * a2);
        char v20 = static NSObject.== infix(_:_:)();

        if (v20) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v21 = *v5;
  *(void *)(*v5 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v21 + 48) + 8 * a2) = a1;
  uint64_t v22 = *(void *)(v21 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v21 + 16) = v24;
  }
}

void sub_100025DB0()
{
  sub_1000288B4();
  uint64_t v5 = v0;
  sub_10000BF1C((uint64_t *)&unk_10017D2F0);
  uint64_t v6 = *v0;
  uint64_t v7 = static _SetStorage.copy(original:)();
  if (!*(void *)(v6 + 16))
  {
LABEL_26:
    swift_release();
    *uint64_t v5 = v7;
    sub_10000EB44();
    return;
  }
  uint64_t v8 = (void *)sub_100028494();
  if (v11) {
    BOOL v12 = (unint64_t)v8 >= v10;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12) {
    memmove(v8, v1, 8 * v9);
  }
  sub_10002836C();
  if (!v4) {
    goto LABEL_10;
  }
LABEL_9:
  sub_1000287AC();
  while (1)
  {
    char v16 = (void *)(*(void *)(v6 + 48) + 16 * v13);
    uint64_t v17 = v16[1];
    char v18 = (void *)(*(void *)(v7 + 48) + 16 * v13);
    *char v18 = *v16;
    v18[1] = v17;
    swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_9;
    }
LABEL_10:
    uint64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v14 >= v2) {
      goto LABEL_26;
    }
    ++v3;
    if (!*((void *)v1 + v14))
    {
      uint64_t v3 = v14 + 1;
      if (v14 + 1 >= v2) {
        goto LABEL_26;
      }
      if (!*((void *)v1 + v3))
      {
        uint64_t v3 = v14 + 2;
        if (v14 + 2 >= v2) {
          goto LABEL_26;
        }
        if (!*((void *)v1 + v3)) {
          break;
        }
      }
    }
LABEL_23:
    sub_1000286FC();
  }
  uint64_t v15 = v14 + 3;
  if (v15 >= v2) {
    goto LABEL_26;
  }
  if (*((void *)v1 + v15))
  {
    uint64_t v3 = v15;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v3 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v3 >= v2) {
      goto LABEL_26;
    }
    ++v15;
    if (*((void *)v1 + v3)) {
      goto LABEL_23;
    }
  }
LABEL_28:
  __break(1u);
}

void *sub_100025EE8()
{
  sub_10000BF1C(&qword_10017D3D0);
  uint64_t v31 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _SetStorage.copy(original:)();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v31 = v3;
    return result;
  }
  uint64_t result = (void *)(v2 + 56);
  uint64_t v5 = v1 + 56;
  unint64_t v6 = (unint64_t)((1 << *(unsigned char *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 56 + 8 * v6) {
    uint64_t result = memmove(result, (const void *)(v1 + 56), 8 * v6);
  }
  int64_t v8 = 0;
  *(void *)(v3 + 16) = *(void *)(v1 + 16);
  uint64_t v9 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(v1 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  if (!v11) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v13 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (unint64_t i = v13 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v8 << 6))
  {
    uint64_t v18 = 104 * i;
    uint64_t v19 = *(void *)(v1 + 48) + v18;
    uint64_t v20 = *(void *)(v19 + 8);
    uint64_t v21 = *(void *)(v19 + 16);
    uint64_t v22 = *(void *)(v19 + 40);
    uint64_t v23 = *(void *)(v19 + 48);
    uint64_t v24 = *(void *)(v19 + 56);
    uint64_t v25 = *(void *)(v19 + 64);
    uint64_t v26 = *(void *)(v19 + 72);
    uint64_t v27 = *(void *)(v19 + 96);
    uint64_t v28 = *(void *)(v3 + 48) + v18;
    long long v32 = *(_OWORD *)(v19 + 24);
    long long v33 = *(_OWORD *)(v19 + 80);
    *(void *)uint64_t v28 = *(void *)v19;
    *(void *)(v28 + 8) = v20;
    *(void *)(v28 + 16) = v21;
    *(_OWORD *)(v28 + 24) = v32;
    *(void *)(v28 + 40) = v22;
    *(void *)(v28 + 48) = v23;
    *(void *)(v28 + 56) = v24;
    *(void *)(v28 + 64) = v25;
    *(void *)(v28 + 72) = v26;
    *(_OWORD *)(v28 + 80) = v33;
    *(void *)(v28 + 96) = v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v29 = *((id *)&v32 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v30 = *((id *)&v33 + 1);
    uint64_t result = (void *)swift_bridgeObjectRetain();
    if (v11) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v15 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v15 >= v12) {
      goto LABEL_28;
    }
    unint64_t v16 = *(void *)(v5 + 8 * v15);
    ++v8;
    if (!v16)
    {
      int64_t v8 = v15 + 1;
      if (v15 + 1 >= v12) {
        goto LABEL_28;
      }
      unint64_t v16 = *(void *)(v5 + 8 * v8);
      if (!v16)
      {
        int64_t v8 = v15 + 2;
        if (v15 + 2 >= v12) {
          goto LABEL_28;
        }
        unint64_t v16 = *(void *)(v5 + 8 * v8);
        if (!v16) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v11 = (v16 - 1) & v16;
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v12) {
    goto LABEL_28;
  }
  unint64_t v16 = *(void *)(v5 + 8 * v17);
  if (v16)
  {
    int64_t v8 = v17;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v8 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v8 >= v12) {
      goto LABEL_28;
    }
    unint64_t v16 = *(void *)(v5 + 8 * v8);
    ++v17;
    if (v16) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100026140()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000BF1C(&qword_10017D458);
  uint64_t v6 = *v0;
  uint64_t v7 = static _SetStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_30:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t result = (void *)(v7 + 56);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  uint64_t v24 = v1;
  uint64_t v25 = (const void *)(v6 + 56);
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v10) {
    uint64_t result = memmove(result, v25, 8 * v10);
  }
  int64_t v12 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v13 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v14 = *(void *)(v6 + 56);
  uint64_t v15 = -1;
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  unint64_t v16 = v15 & v14;
  int64_t v26 = (unint64_t)(v13 + 63) >> 6;
  if ((v15 & v14) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v17 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (unint64_t i = v17 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v12 << 6))
  {
    unint64_t v22 = *(void *)(v3 + 72) * i;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v22, v2);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v22, v5, v2);
    if (v16) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v19 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v19 >= v26) {
      goto LABEL_28;
    }
    unint64_t v20 = *((void *)v25 + v19);
    ++v12;
    if (!v20)
    {
      int64_t v12 = v19 + 1;
      if (v19 + 1 >= v26) {
        goto LABEL_28;
      }
      unint64_t v20 = *((void *)v25 + v12);
      if (!v20)
      {
        int64_t v12 = v19 + 2;
        if (v19 + 2 >= v26) {
          goto LABEL_28;
        }
        unint64_t v20 = *((void *)v25 + v12);
        if (!v20) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v16 = (v20 - 1) & v20;
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v26)
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v24;
    goto LABEL_30;
  }
  unint64_t v20 = *((void *)v25 + v21);
  if (v20)
  {
    int64_t v12 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v12 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v12 >= v26) {
      goto LABEL_28;
    }
    unint64_t v20 = *((void *)v25 + v12);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

void sub_1000263F0()
{
  sub_1000288B4();
  uint64_t v5 = v0;
  sub_10000BF1C(v6);
  uint64_t v7 = *v0;
  uint64_t v8 = static _SetStorage.copy(original:)();
  if (!*(void *)(v7 + 16))
  {
LABEL_26:
    swift_release();
    *uint64_t v5 = v8;
    sub_10000EB44();
    return;
  }
  uint64_t v9 = (void *)sub_100028494();
  if (v12) {
    BOOL v13 = (unint64_t)v9 >= v11;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13) {
    memmove(v9, v1, 8 * v10);
  }
  sub_10002836C();
  if (!v4) {
    goto LABEL_10;
  }
LABEL_9:
  sub_1000287AC();
  while (1)
  {
    unint64_t v17 = *(void **)(*(void *)(v7 + 48) + 8 * v14);
    *(void *)(*(void *)(v8 + 48) + 8 * v14) = v17;
    id v18 = v17;
    if (v4) {
      goto LABEL_9;
    }
LABEL_10:
    uint64_t v15 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v15 >= v2) {
      goto LABEL_26;
    }
    ++v3;
    if (!*((void *)v1 + v15))
    {
      uint64_t v3 = v15 + 1;
      if (v15 + 1 >= v2) {
        goto LABEL_26;
      }
      if (!*((void *)v1 + v3))
      {
        uint64_t v3 = v15 + 2;
        if (v15 + 2 >= v2) {
          goto LABEL_26;
        }
        if (!*((void *)v1 + v3)) {
          break;
        }
      }
    }
LABEL_23:
    sub_1000286FC();
  }
  uint64_t v16 = v15 + 3;
  if (v16 >= v2) {
    goto LABEL_26;
  }
  if (*((void *)v1 + v16))
  {
    uint64_t v3 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v3 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v3 >= v2) {
      goto LABEL_26;
    }
    ++v16;
    if (*((void *)v1 + v3)) {
      goto LABEL_23;
    }
  }
LABEL_28:
  __break(1u);
}

void sub_100026518()
{
  sub_1000287E0();
  sub_10000BF1C((uint64_t *)&unk_10017D2F0);
  uint64_t v2 = sub_100028740();
  if (!*(void *)(v1 + 16))
  {
    swift_release();
LABEL_32:
    *uint64_t v0 = v2;
    return;
  }
  uint64_t v3 = v1 + 56;
  sub_10002886C();
  uint64_t v6 = v5 & v4;
  int64_t v24 = (unint64_t)(v7 + 63) >> 6;
  swift_retain();
  int64_t v8 = 0;
  if (!v6) {
    goto LABEL_4;
  }
LABEL_3:
  sub_100028504();
  for (int64_t i = v9 | (v8 << 6); ; int64_t i = v13 + (v8 << 6))
  {
    uint64_t v14 = (uint64_t *)(*(void *)(v1 + 48) + 16 * i);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Hasher._finalize()();
    sub_100028650();
    if (v17)
    {
      sub_100028320();
      while (1)
      {
        sub_100028568();
        if (v17)
        {
          if (v19) {
            break;
          }
        }
        if (v20 == v21) {
          uint64_t v20 = 0;
        }
        if (*(void *)(v2 + 56 + 8 * v20) != -1)
        {
          sub_10002830C();
          goto LABEL_28;
        }
      }
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    sub_100028334();
LABEL_28:
    sub_100028518(v18);
    uint64_t v23 = (void *)(*(void *)(v2 + 48) + 16 * v22);
    void *v23 = v15;
    v23[1] = v16;
    ++*(void *)(v2 + 16);
    if (v6) {
      goto LABEL_3;
    }
LABEL_4:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      goto LABEL_34;
    }
    if (v11 >= v24) {
      goto LABEL_30;
    }
    ++v8;
    if (!*(void *)(v3 + 8 * v11))
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v24) {
        goto LABEL_30;
      }
      if (!*(void *)(v3 + 8 * v8))
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v24) {
          goto LABEL_30;
        }
        if (!*(void *)(v3 + 8 * v8)) {
          break;
        }
      }
    }
LABEL_17:
    sub_100028858();
  }
  int64_t v12 = v11 + 3;
  if (v12 >= v24)
  {
LABEL_30:
    swift_release_n();
    goto LABEL_32;
  }
  if (*(void *)(v3 + 8 * v12))
  {
    int64_t v8 = v12;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v8 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v8 >= v24) {
      goto LABEL_30;
    }
    ++v12;
    if (*(void *)(v3 + 8 * v8)) {
      goto LABEL_17;
    }
  }
LABEL_35:
  __break(1u);
}

unint64_t sub_100026728()
{
  uint64_t v1 = *v0;
  sub_10000BF1C(&qword_10017D3D0);
  uint64_t v2 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
    unint64_t result = swift_release();
LABEL_29:
    *long long v32 = v3;
    return result;
  }
  uint64_t v4 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v33 = v1 + 56;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(v1 + 56);
  int64_t v34 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v35 = v2 + 56;
  unint64_t result = swift_retain();
  int64_t v8 = 0;
  uint64_t v36 = v1;
  uint64_t v37 = v3;
  if (!v6) {
    goto LABEL_7;
  }
LABEL_6:
  uint64_t v42 = (v6 - 1) & v6;
  int64_t v43 = v8;
  for (unint64_t i = __clz(__rbit64(v6)) | (v8 << 6); ; unint64_t i = __clz(__rbit64(v11)) + (v12 << 6))
  {
    uint64_t v14 = *(void *)(v1 + 48) + 104 * i;
    uint64_t v15 = *(void *)v14;
    uint64_t v16 = *(void *)(v14 + 8);
    uint64_t v17 = *(void *)(v14 + 16);
    uint64_t v18 = *(void *)(v14 + 48);
    uint64_t v19 = *(void *)(v14 + 64);
    uint64_t v38 = *(void *)(v14 + 56);
    uint64_t v44 = *(void *)(v14 + 72);
    uint64_t v45 = *(void *)(v14 + 40);
    long long v46 = *(_OWORD *)(v14 + 80);
    long long v47 = *(_OWORD *)(v14 + 24);
    uint64_t v20 = *(void *)(v14 + 96);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    id v21 = *((id *)&v47 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v22 = *((id *)&v46 + 1);
    swift_bridgeObjectRetain();
    uint64_t v41 = v15;
    String.hash(into:)();
    uint64_t v40 = v16;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v39 = v17;
    String.hash(into:)();
    swift_bridgeObjectRelease();
    id v23 = v21;
    NSObject.hash(into:)();

    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t v1 = v36;
    swift_bridgeObjectRelease();
    id v24 = v22;
    uint64_t v3 = v37;
    id v25 = v24;
    NSObject.hash(into:)();

    Hasher._combine(_:)(*(void *)(v20 + 16));
    uint64_t v26 = *(void *)(v20 + 16);
    if (v26)
    {
      swift_bridgeObjectRetain();
      uint64_t v27 = (void **)(v20 + 64);
      do
      {
        uint64_t v28 = *v27;
        v27 += 5;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v29 = v28;
        String.hash(into:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        id v30 = v29;
        NSObject.hash(into:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        --v26;
      }
      while (v26);
      swift_bridgeObjectRelease();
      uint64_t v1 = v36;
      uint64_t v3 = v37;
    }
    Hasher._finalize()();
    unint64_t result = _HashTable.nextHole(atOrAfter:)();
    *(void *)(v35 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v31 = *(void *)(v3 + 48) + 104 * result;
    *(void *)uint64_t v31 = v41;
    *(void *)(v31 + 8) = v40;
    *(void *)(v31 + 16) = v39;
    *(_OWORD *)(v31 + 24) = v47;
    *(void *)(v31 + 40) = v45;
    *(void *)(v31 + 48) = v18;
    *(void *)(v31 + 56) = v38;
    *(void *)(v31 + 64) = v19;
    int64_t v8 = v43;
    *(void *)(v31 + 72) = v44;
    *(_OWORD *)(v31 + 80) = v46;
    *(void *)(v31 + 96) = v20;
    ++*(void *)(v3 + 16);
    unint64_t v6 = v42;
    if (v42) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v10 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v10 >= v34) {
      goto LABEL_27;
    }
    unint64_t v11 = *(void *)(v33 + 8 * v10);
    int64_t v12 = v8 + 1;
    if (!v11)
    {
      int64_t v12 = v8 + 2;
      if (v8 + 2 >= v34) {
        goto LABEL_27;
      }
      unint64_t v11 = *(void *)(v33 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v8 + 3;
        if (v8 + 3 >= v34) {
          goto LABEL_27;
        }
        unint64_t v11 = *(void *)(v33 + 8 * v12);
        if (!v11) {
          break;
        }
      }
    }
LABEL_20:
    uint64_t v42 = (v11 - 1) & v11;
    int64_t v43 = v12;
  }
  uint64_t v13 = v8 + 4;
  if (v8 + 4 >= v34)
  {
LABEL_27:
    unint64_t result = swift_release_n();
    goto LABEL_29;
  }
  unint64_t v11 = *(void *)(v33 + 8 * v13);
  if (v11)
  {
    int64_t v12 = v8 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v12 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v12 >= v34) {
      goto LABEL_27;
    }
    unint64_t v11 = *(void *)(v33 + 8 * v12);
    ++v13;
    if (v11) {
      goto LABEL_20;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_100026BE0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_10000BF1C(&qword_10017D458);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  int64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  uint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  if (!v12) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v17 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v17 | (v16 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v16 << 6))
  {
    uint64_t v22 = v6;
    uint64_t v23 = *(void *)(v6 + 48);
    uint64_t v24 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v23 + v24 * i, v2);
    sub_100027C80((unint64_t *)&qword_10017D340, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v25 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v26 = result & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v13 + 8 * (v26 >> 6))) == 0)
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v25) >> 6;
      while (++v27 != v30 || (v29 & 1) == 0)
      {
        BOOL v31 = v27 == v30;
        if (v27 == v30) {
          unint64_t v27 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v27);
        if (v32 != -1)
        {
          unint64_t v28 = __clz(__rbit64(~v32)) + (v27 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v28 = __clz(__rbit64((-1 << v26) & ~*(void *)(v13 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v13 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v28 * v24, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v22;
    if (v12) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v19 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      goto LABEL_36;
    }
    if (v19 >= v36) {
      goto LABEL_32;
    }
    unint64_t v20 = *(void *)(v35 + 8 * v19);
    ++v16;
    if (!v20)
    {
      int64_t v16 = v19 + 1;
      if (v19 + 1 >= v36) {
        goto LABEL_32;
      }
      unint64_t v20 = *(void *)(v35 + 8 * v16);
      if (!v20)
      {
        int64_t v16 = v19 + 2;
        if (v19 + 2 >= v36) {
          goto LABEL_32;
        }
        unint64_t v20 = *(void *)(v35 + 8 * v16);
        if (!v20) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v12 = (v20 - 1) & v20;
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v36)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_34;
  }
  unint64_t v20 = *(void *)(v35 + 8 * v21);
  if (v20)
  {
    int64_t v16 = v21;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v16 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_32;
    }
    unint64_t v20 = *(void *)(v35 + 8 * v16);
    ++v21;
    if (v20) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

void sub_100026F8C()
{
  sub_1000284CC();
  sub_1000287E0();
  sub_10000BF1C(v2);
  uint64_t v3 = sub_100028740();
  uint64_t v4 = v3;
  if (!*(void *)(v1 + 16))
  {
    swift_release();
LABEL_35:
    *uint64_t v0 = v4;
    sub_1000284E8();
    return;
  }
  unint64_t v27 = v0;
  uint64_t v5 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v6 = v1 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  uint64_t v8 = v7 & *(void *)(v1 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  swift_retain();
  int64_t v11 = 0;
  if (!v8) {
    goto LABEL_7;
  }
LABEL_6:
  sub_100028938();
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    Swift::Int v17 = *(void *)(v4 + 40);
    id v18 = *(id *)(*(void *)(v1 + 48) + 8 * i);
    unint64_t v19 = NSObject._rawHashValue(seed:)(v17) & ~(-1 << *(unsigned char *)(v4 + 32));
    if (((-1 << v19) & ~*(void *)(v10 + 8 * (v19 >> 6))) == 0)
    {
      sub_100028320();
      while (1)
      {
        sub_100028568();
        if (v23)
        {
          if (v20) {
            break;
          }
        }
        if (v21 == v22) {
          uint64_t v21 = 0;
        }
        if (*(void *)(v10 + 8 * v21) != -1)
        {
          sub_10002830C();
          goto LABEL_31;
        }
      }
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    sub_100028334();
LABEL_31:
    sub_10002841C();
    *(void *)(v10 + v24) |= v25;
    *(void *)(*(void *)(v4 + 48) + 8 * v26) = v18;
    ++*(void *)(v4 + 16);
    if (v8) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_37;
    }
    if (v14 >= v9) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v9) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v6 + 8 * v11);
      if (!v15)
      {
        int64_t v11 = v14 + 2;
        if (v14 + 2 >= v9) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v6 + 8 * v11);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    uint64_t v8 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v9)
  {
LABEL_33:
    swift_release_n();
    uint64_t v0 = v27;
    goto LABEL_35;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
    int64_t v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v9) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_38:
  __break(1u);
}

void sub_100027188()
{
  sub_1000288B4();
  uint64_t v1 = v0;
  Swift::UInt v2 = *(void *)(v0 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    uint64_t v3 = (void **)(v1 + 64);
    do
    {
      uint64_t v4 = *v3;
      v3 += 5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v5 = v4;
      sub_10000EBA4();
      String.hash(into:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      id v6 = v5;
      NSObject.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      --v2;
    }
    while (v2);
  }
  sub_10000EB44();
}

uint64_t sub_100027258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (qword_10017C230 != -1) {
    swift_once();
  }
  uint64_t v15 = qword_10017D110;

  return sub_10002730C(a1, a2, a3, a4, a5, v15, a7, a8);
}

uint64_t sub_10002730C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v23[3] = a7;
  v23[4] = a8;
  uint64_t v15 = sub_1000274F4(v23);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 16))(v15, a5, a7);
  int64_t v16 = *(NSObject **)(a6 + 32);
  sub_10000C0D4((uint64_t)v23, (uint64_t)v22);
  Swift::Int v17 = (void *)swift_allocObject();
  v17[2] = a6;
  v17[3] = a1;
  v17[4] = a2;
  v17[5] = a3;
  v17[6] = a4;
  sub_10000D698(v22, (uint64_t)(v17 + 7));
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = sub_1000275A8;
  *(void *)(v18 + 24) = v17;
  v21[4] = sub_1000275CC;
  v21[5] = v18;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 1107296256;
  v21[2] = sub_10001D134;
  v21[3] = &unk_10016FDE8;
  unint64_t v19 = _Block_copy(v21);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  dispatch_sync(v16, v19);
  _Block_release(v19);
  LOBYTE(a4) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if ((a4 & 1) == 0) {
    return sub_10000E788((uint64_t)v23);
  }
  __break(1u);
  return result;
}

uint64_t *sub_1000274F4(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_100027558()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000E788(v0 + 56);

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_1000275A8()
{
  return sub_10001CD30(v0[2], v0[3], v0[4], v0[5], v0[6], (uint64_t)(v0 + 7));
}

uint64_t sub_1000275BC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000275CC()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1000275F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100027604()
{
  return swift_release();
}

uint64_t sub_10002760C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10002781C(a1, sub_1000238AC, a2);
}

uint64_t sub_100027628@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  *a4 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v6 = v7;
  a4[1] = result;
  a4[2] = ~v4;
  if (-v4 < 64) {
    uint64_t v8 = ~(-1 << -(char)v4);
  }
  else {
    uint64_t v8 = -1;
  }
  a4[3] = 0;
  a4[4] = v8 & v6;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

uint64_t sub_100027664()
{
  return swift_release();
}

uint64_t sub_10002766C()
{
  void (*v11)(uint64_t *__return_ptr, void *);
  uint64_t result;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  void v20[3];

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v6);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    uint64_t v10 = *(void *)(*(void *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    int64_t v11 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    v20[2] = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(&v19, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v19;
  }
  uint64_t v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    int64_t v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      uint64_t v15 = v0[1];
      int64_t v16 = *(void *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        uint64_t v5 = (v16 - 1) & v16;
        unint64_t v6 = __clz(__rbit64(v16)) + (v13 << 6);
        int64_t v4 = v13;
        goto LABEL_3;
      }
      Swift::Int v17 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        int64_t v16 = *(void *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          uint64_t v13 = v17;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          int64_t v16 = *(void *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            uint64_t v13 = v3 + 3;
            goto LABEL_7;
          }
          Swift::Int v17 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            int64_t v16 = *(void *)(v15 + 8 * v17);
            if (v16) {
              goto LABEL_10;
            }
            uint64_t v13 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              int64_t v16 = *(void *)(v15 + 8 * v13);
              if (v16) {
                goto LABEL_7;
              }
              int64_t v4 = v14 - 1;
              uint64_t v18 = v3 + 6;
              while (v18 < v14)
              {
                int64_t v16 = *(void *)(v15 + 8 * v18++);
                if (v16)
                {
                  uint64_t v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    uint64_t result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

uint64_t sub_100027804@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10002781C(a1, (uint64_t (*)(uint64_t *, void, void, void))sub_100028264, a2);
}

uint64_t sub_10002781C@<X0>(void *a1@<X0>, uint64_t (*a2)(uint64_t *, void, void, void)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = a2(&v7, *a1, a1[1], a1[2]);
  uint64_t v5 = v7;
  *a3 = result;
  a3[1] = v6;
  a3[2] = v5;
  return result;
}

uint64_t sub_100027868()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000278A8(void *a1)
{
  return sub_10001D268(a1, *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1000278D4()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10002792C()
{
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100013DFC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100011814;
  uint64_t v3 = sub_1000286BC();
  return sub_10001D5A8(v3, v4, v5, v6, v7);
}

uint64_t sub_1000279D4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v7 = swift_task_alloc();
  uint64_t v8 = (void *)sub_100013DFC(v7);
  *uint64_t v8 = v9;
  v8[1] = sub_100013DD8;
  return sub_10001D790(a1, a2, v6, v5);
}

uint64_t sub_100027A80()
{
  swift_unknownObjectRelease();
  sub_10000E788(v0 + 32);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 112, 7);
}

uint64_t sub_100027AD8()
{
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100013DFC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  uint64_t v3 = sub_1000286BC();
  return sub_10001DB34(v3, v4, v5, v6, v7);
}

uint64_t sub_100027B80(uint64_t a1)
{
  return a1;
}

uint64_t sub_100027BAC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100027BE4()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

unint64_t sub_100027C2C()
{
  unint64_t result = qword_10017C768;
  if (!qword_10017C768)
  {
    sub_10000BFDC(&qword_10017C760);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C768);
  }
  return result;
}

uint64_t sub_100027C80(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100027CC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LNBundleRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100027D2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LNBundleRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100027D90(uint64_t a1, uint64_t *a2)
{
  sub_10000BF1C(a2);
  sub_1000283FC();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_100027DE4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10000BF1C(a3);
  sub_1000283FC();
  uint64_t v4 = sub_10000EBA4();
  v5(v4);
  return a2;
}

void *sub_100027E3C(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_100027E6C(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_100027EB0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100027EE4(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100027F24(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for XPCStreamName()
{
}

uint64_t sub_100027F6C()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_100027FB0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_100028008(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for LNAppShortcutSpanSynonymRecord(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void *sub_1000280A4(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000280FC(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10002813C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for ConcreteXPCEvent()
{
}

void *sub_100028190()
{
  return &protocol witness table for String;
}

unint64_t sub_1000281A0()
{
  unint64_t result = qword_10017D548;
  if (!qword_10017D548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D548);
  }
  return result;
}

void *sub_1000281EC()
{
  return &protocol witness table for String;
}

unint64_t sub_1000281FC()
{
  unint64_t result = qword_10017D550;
  if (!qword_10017D550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D550);
  }
  return result;
}

void *sub_100028248()
{
  return &protocol witness table for String;
}

void *sub_10002827C@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

uint64_t sub_100028298()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t sub_1000282DC(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_1000282F4()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t sub_100028348()
{
  *(void *)(v0 + 16) = 0;
  return swift_bridgeObjectRelease();
}

void sub_10002836C()
{
  *(void *)(v0 + 16) = *(void *)(v1 + 16);
}

uint64_t sub_10002840C()
{
  return 0;
}

uint64_t sub_100028448()
{
  return v0;
}

void sub_10002845C()
{
  ++*(void *)(v0 + 16);
}

uint64_t sub_10002846C()
{
  return v0;
}

uint64_t sub_100028494()
{
  return v0 + 56;
}

uint64_t sub_1000284BC()
{
  return 0;
}

void sub_100028518(unint64_t a1@<X8>)
{
  *(void *)(v1 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a1;
}

uint64_t sub_100028574@<X0>(uint64_t a1@<X8>)
{
  return sub_100023234(0, (unint64_t)(a1 + 63) >> 6, v1);
}

uint64_t sub_1000285E4()
{
  return 0;
}

uint64_t sub_1000285F8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_10000BF1C(a3);
}

uint64_t sub_100028624()
{
  return Hasher.init(_seed:)();
}

uint64_t sub_100028688()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t sub_1000286B0()
{
  return v0 + 32;
}

uint64_t sub_1000286BC()
{
  return v0;
}

uint64_t sub_100028714()
{
  return v0;
}

void sub_100028720(uint64_t a1@<X8>)
{
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = 2 * (a1 / v1);
}

void sub_100028730(uint64_t a1@<X8>)
{
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = 2 * (a1 / v1);
}

uint64_t sub_100028740()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t sub_100028764()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t sub_100028788()
{
  return swift_allocObject();
}

uint64_t sub_1000287C4()
{
  return v0 + 32;
}

void sub_1000287D0(uint64_t a1@<X8>)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = 2 * (a1 / v3);
}

void sub_100028820(char a1@<W8>)
{
  *uint64_t v1 = -1 << a1;
}

void sub_100028844()
{
  *(void *)(v2 + v0) |= v1;
}

uint64_t sub_100028894@<X0>(uint64_t a1@<X8>)
{
  return sub_100023234(0, (unint64_t)(a1 + 63) >> 6, v1);
}

uint64_t sub_1000288DC()
{
  return v0;
}

uint64_t sub_1000288F0()
{
  return Hasher.init(_seed:)();
}

uint64_t sub_100028910(uint64_t result)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = 2 * ((result - 32) / v3);
  return result;
}

uint64_t sub_100028924(uint64_t result)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = 2 * ((result - 32) / v3);
  return result;
}

void *sub_100028980()
{
  Table.init(_:database:)(__src, 0x74726F6853707061, 0xEC00000073747563, 0, 0);
  return memcpy(&unk_100181798, __src, 0xA8uLL);
}

uint64_t sub_1000289DC(uint64_t a1)
{
  return sub_100028A20(a1, (uint64_t)&qword_100181840, 0xD000000000000010, 0x8000000100143090);
}

uint64_t sub_100028A00(uint64_t a1)
{
  return sub_100028A20(a1, (uint64_t)&qword_100181858, 0x617461646174656DLL, 0xE800000000000000);
}

uint64_t sub_100028A20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_10000BF1C((uint64_t *)&unk_10017E920);
  uint64_t v7 = sub_10002A7B8((unint64_t *)&qword_10017D650, (uint64_t *)&unk_10017E920);
  return ExpressionType.init(_:)(a3, a4, v6, v7);
}

void *sub_100028A98()
{
  Table.init(_:database:)(__src, 0xD000000000000010, 0x8000000100143320, 0, 0);
  return memcpy(&unk_10017D560, __src, 0xA8uLL);
}

uint64_t sub_100028AF0(uint64_t a1)
{
  return sub_100028A20(a1, (uint64_t)&qword_10017D608, 0xD000000000000010, 0x8000000100143090);
}

uint64_t sub_100028B14(uint64_t a1)
{
  return sub_100028A20(a1, (uint64_t)&unk_10017D620, 0xD000000000000010, 0x8000000100143340);
}

uint64_t sub_100028B38()
{
  uint64_t v0 = sub_10000BF1C((uint64_t *)&unk_10017E930);
  uint64_t v1 = sub_10002A7B8(&qword_10017D658, (uint64_t *)&unk_10017E930);
  return ExpressionType.init(_:)(0x446465646F636E65, 0xEB00000000617461, v0, v1);
}

void sub_100028BA8()
{
  sub_100018E30();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_100028FA8();
  uint64_t v7 = v6;
  if (qword_10017C250 != -1) {
    swift_once();
  }
  sub_10002A9E4(v36);
  sub_10002A9E4(v31);
  sub_10002A390(v36);
  if (qword_10017C268 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_10017D638;
  uint64_t v9 = unk_10017D640;
  uint64_t v10 = qword_10017D648;
  int64_t v34 = (ValueMetadata *)sub_10000BF1C((uint64_t *)&unk_10017E930);
  uint64_t v35 = &protocol witness table for Expression<A>;
  v33[0] = v8;
  v33[1] = v9;
  uint64_t v33[2] = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  SchemaType.select(_:_:)((uint64_t)v33, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table);
  sub_10002A500(v36);
  sub_10000E788((uint64_t)v33);
  memcpy(v37, __src, 0xA8uLL);
  if (qword_10017C258 != -1) {
    swift_once();
  }
  sub_10002A9C0((uint64_t)&qword_10017D608);
  v31[0] = v4;
  v31[1] = v2;
  uint64_t v11 = == infix<A>(_:_:)();
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  if (qword_10017C260 != -1) {
    swift_once();
  }
  sub_10002A9C0((uint64_t)&unk_10017D620);
  v31[0] = v5;
  v31[1] = v7;
  uint64_t v16 = == infix<A>(_:_:)();
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  swift_bridgeObjectRelease();
  uint64_t v21 = && infix(_:_:)(v11, v13, v15, v16, v18, v20);
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int64_t v34 = &type metadata for Table;
  uint64_t v35 = &protocol witness table for Table;
  uint64_t v26 = swift_allocObject();
  uint64_t v27 = v26 + 16;
  v33[0] = v26;
  memcpy(v31, v37, sizeof(v31));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.filter(_:)(v21, v23, v25, v27);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  sub_10002A500(v37);
  uint64_t v28 = Connection.pluck(_:)(v33);
  sub_10000E788((uint64_t)v33);
  if (!v0 && v28)
  {
    sub_10002A9C0((uint64_t)&qword_10017D638);
    Row.get<A>(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v29 = __src[0];
    unint64_t v30 = __src[1];
    sub_1000290B4();
    sub_10000DA10(v29, v30);
  }
  sub_100018E80();
}

uint64_t sub_100028FA8()
{
  uint64_t v0 = self;
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 componentsFromLocaleIdentifier:v1];

  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v4 = [v0 localeIdentifierFromComponents:isa];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v5;
}

uint64_t sub_1000290B4()
{
  sub_10000D9D4(0, &qword_10017DD90);
  sub_10000BF1C(&qword_10017D660);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_10013F1D0;
  *(void *)(v1 + 32) = sub_10000D9D4(0, (unint64_t *)&qword_10017D668);
  *(void *)(v1 + 40) = sub_10000D9D4(0, &qword_10017F250);
  static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v0)
  {
    if (v3[3])
    {
      sub_10000BF1C(&qword_10017D670);
      if (swift_dynamicCast()) {
        return v3[5];
      }
      else {
        return 0;
      }
    }
    else
    {
      sub_10002A75C((uint64_t)v3, &qword_10017D3A0);
      return 0;
    }
  }
  return result;
}

void sub_1000291FC()
{
  sub_100018E30();
  swift_bridgeObjectRetain();
  uint64_t v103 = sub_100028FA8();
  uint64_t v105 = v1;
  if (qword_10017C550 != -1) {
    swift_once();
  }
  memcpy(__dst, &unk_1001822E8, sizeof(__dst));
  if (qword_10017C250 != -1) {
    swift_once();
  }
  memcpy(__src, &unk_10017D560, sizeof(__src));
  uint64_t v2 = sub_10000BF1C(&qword_10017D678);
  sub_10002A390(__src);
  uint64_t v3 = sub_10002A7B8(&qword_10017D680, &qword_10017D678);
  ExpressionType.init(_:)(0xD000000000000010, 0x8000000100143340, v2, v3);
  memcpy(v121, __src, sizeof(v121));
  sub_10000BF1C((uint64_t *)&unk_10017D100);
  uint64_t v96 = QueryType.namespace<A>(_:)(v120[0], v120[1], v120[2]);
  uint64_t isUnique = v4;
  uint64_t v100 = v5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10002A500(__src);
  memcpy(v124, &unk_10017D560, sizeof(v124));
  uint64_t v6 = sub_10000BF1C(&qword_10017D688);
  sub_10002A390(v124);
  uint64_t v7 = sub_10002A7B8(&qword_10017D690, &qword_10017D688);
  ExpressionType.init(_:)(0x446465646F636E65, 0xEB00000000617461, v6, v7);
  memcpy(v121, v124, sizeof(v121));
  sub_10000BF1C(&qword_10017FEE0);
  uint64_t v8 = sub_10002A9CC();
  uint64_t v11 = QueryType.namespace<A>(_:)(v8, v9, v10);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10002A500(v124);
  memcpy(v125, &unk_1001822E8, sizeof(v125));
  sub_10002A390(v125);
  if (qword_10017C558 != -1) {
    swift_once();
  }
  memcpy(v121, v125, sizeof(v121));
  uint64_t v16 = sub_10002A9CC();
  uint64_t v19 = QueryType.namespace<A>(_:)(v16, v17, v18);
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  sub_10002A500(v125);
  memcpy(v121, __dst, sizeof(v121));
  v119[3] = sub_10000BF1C((uint64_t *)&unk_10017E920);
  v119[4] = (uint64_t)&protocol witness table for Expression<A>;
  v119[0] = v19;
  v119[1] = v21;
  v119[2] = v23;
  sub_10000BF1C(&qword_10017D698);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_10013EF20;
  *(void *)(v24 + 56) = v6;
  *(void *)(v24 + 64) = &protocol witness table for Expression<A>;
  uint64_t v94 = v11;
  *(void *)(v24 + 32) = v11;
  *(void *)(v24 + 40) = v13;
  *(void *)(v24 + 48) = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v112 = v13;
  swift_bridgeObjectRetain();
  uint64_t v129 = v15;
  swift_bridgeObjectRetain();
  SchemaType.select(_:_:)((uint64_t)v119, v24, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table);
  swift_setDeallocating();
  sub_10006F144();
  sub_10000E788((uint64_t)v119);
  memcpy(v126, v120, sizeof(v126));
  memcpy(v119, v120, sizeof(v119));
  sub_10002A9E4(v127);
  uint64_t v117 = &type metadata for Table;
  uint64_t v118 = &protocol witness table for Table;
  uint64_t v114 = swift_allocObject();
  sub_10002A9E4((void *)(v114 + 16));
  sub_10002A390(v127);
  sub_10002A390(v127);
  if (qword_10017C258 != -1) {
    swift_once();
  }
  memcpy(v121, v127, sizeof(v121));
  QueryType.namespace<A>(_:)(qword_10017D608, unk_10017D610, qword_10017D618);
  sub_10002A500(v127);
  char v90 = &protocol witness table for String;
  uint64_t v25 = == infix<A>(_:_:)();
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v121[0] = v103;
  v121[1] = v105;
  uint64_t v30 = == infix<A>(_:_:)(v96, v100, isUnique, v121, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v35 = && infix(_:_:)(v25, v27, v29, v30, v32, v34);
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  QueryType.join(_:_:on:)(2, &v114, v35, v37, v39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10002A500(v126);
  sub_10000E788((uint64_t)&v114);
  memcpy(v128, v121, sizeof(v128));
  v121[3] = &type metadata for Table;
  v121[4] = &protocol witness table for Table;
  v121[0] = swift_allocObject();
  memcpy((void *)(v121[0] + 16), v128, 0xA8uLL);
  Connection.prepareRowIterator(_:)(v121);
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000E788((uint64_t)v121);
LABEL_14:
    sub_100018E80();
    return;
  }
  uint64_t v41 = v40;
  sub_10000E788((uint64_t)v121);
  unint64_t v42 = (unint64_t)Statement.failableNext()();
  uint64_t v44 = v43;
  uint64_t v45 = v112;
  if (v43)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_13:
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  uint64_t v46 = v42;
  long long v47 = _swiftEmptyDictionarySingleton;
  long long v108 = xmmword_10013F1D0;
  uint64_t v106 = (char *)&type metadata for Any + 8;
  uint64_t v110 = v41;
  while (1)
  {
    if (!v46)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_14;
    }
    swift_bridgeObjectRetain();
    Row.get<A>(_:)();
    if (v44)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      goto LABEL_13;
    }
    uint64_t v49 = v121[0];
    uint64_t v50 = v121[1];
    Row.get<A>(_:)(v94, v45, v129, v41, v46, (uint64_t)&type metadata for Data, (uint64_t)&protocol witness table for Data, v48, (uint64_t)v90, v92, v94, v96, isUnique, v100, v103, (uint64_t)v106, v108, *((uint64_t *)&v108 + 1), v110,
      v112);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v51 = v121[1];
    if (v121[1] >> 60 == 15)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_14;
    }
    uint64_t v52 = v121[0];
    sub_10000D9D4(0, &qword_10017DD90);
    sub_10000BF1C(&qword_10017D660);
    uint64_t v53 = swift_allocObject();
    *(_OWORD *)(v53 + 16) = v109;
    *(void *)(v53 + 32) = sub_10000D9D4(0, (unint64_t *)&qword_10017D668);
    *(void *)(v53 + 40) = sub_10000D9D4(0, &qword_10017F250);
    static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)();
    swift_bridgeObjectRelease();
    if (v121[3]) {
      break;
    }
    sub_10002A75C((uint64_t)v121, &qword_10017D3A0);
LABEL_28:
    swift_bridgeObjectRetain();
    sub_100021098(v49, v50, v75, v76, v77, v78, v79, v80, v91, v93, v95, v97, isUniquea, v101, v104, v107, v109, *((uint64_t *)&v109 + 1), v111,
      v113,
      v114,
      v115,
      v116,
      (uint64_t)v117,
      (uint64_t)v118,
      v119[0]);
    char v82 = v81;
    swift_bridgeObjectRelease();
    if (v82)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v121[0] = v47;
      Swift::Int v85 = v47[3];
      sub_10000BF1C(&qword_10017C988);
      _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v85);
      long long v47 = (void *)v121[0];
      swift_bridgeObjectRelease();
      sub_10000BF1C(&qword_10017D670);
      _NativeDictionary._delete(at:)();
      swift_bridgeObjectRelease();
LABEL_34:
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    sub_10000DA68(v52, v51);
    uint64_t v46 = (unint64_t)Statement.failableNext()();
    uint64_t v44 = v83;
    uint64_t v41 = v110;
    uint64_t v45 = v112;
    if (v83) {
      goto LABEL_12;
    }
  }
  sub_10000BF1C(&qword_10017D670);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_28;
  }
  uint64_t v102 = v120[0];
  LODWORD(isUniquea) = swift_isUniquelyReferenced_nonNull_native();
  v121[0] = v47;
  uint64_t v60 = sub_100021098(v49, v50, v54, v55, v56, v57, v58, v59, v91, v93, v95, v97, isUniquea, v102, v104, v107, v109, *((uint64_t *)&v109 + 1), v111,
          v113,
          v114,
          v115,
          v116,
          (uint64_t)v117,
          (uint64_t)v118,
          v119[0]);
  uint64_t v61 = v47[2];
  LODWORD(v103) = v62;
  BOOL v63 = (v62 & 1) == 0;
  Swift::Int v64 = v61 + v63;
  if (!__OFADD__(v61, v63))
  {
    unint64_t v65 = v60;
    sub_10000BF1C(&qword_10017C988);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v64))
    {
      uint64_t v72 = sub_100021098(v49, v50, v66, v67, v68, v69, v70, v71, (uint64_t)v90, (uint64_t)v92, v94, v96, isUnique, v100, v103, (uint64_t)v106, v108, *((uint64_t *)&v108 + 1), v110,
              v112,
              v114,
              v115,
              v116,
              (uint64_t)v117,
              (uint64_t)v118,
              v119[0]);
      if ((v103 & 1) != (v73 & 1)) {
        goto LABEL_40;
      }
      unint64_t v65 = v72;
    }
    long long v47 = (void *)v121[0];
    if (v103)
    {
      uint64_t v74 = *(void *)(v121[0] + 56);
      swift_bridgeObjectRelease();
      *(void *)(v74 + 8 * v65) = v100;
    }
    else
    {
      *(void *)(v121[0] + 8 * (v65 >> 6) + 64) |= 1 << v65;
      id v86 = (uint64_t *)(v47[6] + 16 * v65);
      *id v86 = v49;
      v86[1] = v50;
      *(void *)(v47[7] + 8 * v65) = v100;
      uint64_t v87 = v47[2];
      BOOL v88 = __OFADD__(v87, 1);
      uint64_t v89 = v87 + 1;
      if (v88) {
        goto LABEL_39;
      }
      v47[2] = v89;
      swift_bridgeObjectRetain();
    }
    goto LABEL_34;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

void sub_100029DBC()
{
  sub_100018E30();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_100028FA8();
  uint64_t v7 = v6;
  if (qword_10017C250 != -1) {
    swift_once();
  }
  memcpy(v26, &unk_10017D560, 0xA8uLL);
  sub_10000BF1C(&qword_10017E940);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013F1E0;
  sub_10002A390(v26);
  if (qword_10017C258 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_10002A9C0((uint64_t)&qword_10017D608);
  __dst[0] = v4;
  __dst[1] = v2;
  <- infix<A>(_:_:)(v9, v10, v11, (uint64_t)__dst, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  if (qword_10017C260 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_10002A9C0((uint64_t)&unk_10017D620);
  __dst[0] = v5;
  __dst[1] = v7;
  <- infix<A>(_:_:)(v12, v13, v14, (uint64_t)__dst, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  swift_bridgeObjectRelease();
  if (qword_10017C268 != -1) {
    swift_once();
  }
  uint64_t v15 = qword_10017D638;
  uint64_t v16 = unk_10017D640;
  uint64_t v17 = qword_10017D648;
  uint64_t v18 = sub_10002A0A0();
  if (v0)
  {
    sub_10002A500(v26);
    sub_10002A66C(inited + 112);
    sub_10002A66C(inited + 32);
    *(void *)(inited + 16) = 0;
    swift_setDeallocating();
    sub_10006F150();
  }
  else
  {
    uint64_t v20 = (uint64_t)v18;
    unint64_t v21 = v19;
    __dst[0] = v18;
    __dst[1] = v19;
    <- infix<A>(_:_:)(v15, v16, v17, (uint64_t)__dst, (uint64_t)&type metadata for Data, (uint64_t)&protocol witness table for Data);
    sub_10000DA10(v20, v21);
    memcpy(__dst, v26, sizeof(__dst));
    AppIntents_SQLite::Insert v27 = QueryType.insert(or:_:)(AppIntents_SQLite_OnConflict_replace, (Swift::OpaquePointer)inited);
    uint64_t countAndFlagsBits = v27.template._countAndFlagsBits;
    object = v27.template._object;
    rawValue = v27.bindings._rawValue;
    swift_bridgeObjectRelease();
    sub_10002A500(v26);
    v28.template._uint64_t countAndFlagsBits = countAndFlagsBits;
    v28.template._object = object;
    v28.bindings._rawValue = rawValue;
    Connection.run(_:)(v28);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_100018E80();
}

void *sub_10002A0A0()
{
  uint64_t v0 = self;
  sub_10000D9D4(0, &qword_10017F250);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v6 = 0;
  id v2 = [v0 archivedDataWithRootObject:isa requiringSecureCoding:1 error:&v6];

  id v3 = v6;
  if (v2)
  {
    uint64_t v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v4 = v3;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v4;
}

void sub_10002A1B0()
{
  sub_100018E30();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  if (qword_10017C250 != -1) {
    swift_once();
  }
  memcpy(__dst, &unk_10017D560, sizeof(__dst));
  sub_10002A390(__dst);
  if (qword_10017C258 != -1) {
    swift_once();
  }
  sub_10002A9C0((uint64_t)&qword_10017D608);
  __src[0] = v3;
  __src[1] = v1;
  uint64_t v4 = == infix<A>(_:_:)();
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  memcpy(v12, __dst, sizeof(v12));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.filter(_:)(v4, v6, v8, (uint64_t)__src);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  sub_10002A500(__dst);
  memcpy(v15, __src, sizeof(v15));
  memcpy(v12, __src, sizeof(v12));
  AppIntents_SQLite::Delete v16 = QueryType.delete()();
  uint64_t countAndFlagsBits = v16.template._countAndFlagsBits;
  object = v16.template._object;
  rawValue = v16.bindings._rawValue;
  sub_10002A500(v15);
  v17.template._uint64_t countAndFlagsBits = countAndFlagsBits;
  v17.template._object = object;
  v17.bindings._rawValue = rawValue;
  Connection.run(_:)(v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100018E80();
}

void *sub_10002A390(void *a1)
{
  uint64_t v2 = a1[9];
  uint64_t v3 = a1[10];
  uint64_t v4 = a1[12];
  uint64_t v5 = a1[13];
  uint64_t v7 = a1[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10002A464(v2, v3);
  sub_10002A4A8(v4, v5, v7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10002A464(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10002A4A8(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return sub_10002A464(a2, a3);
  }
  return result;
}

void *sub_10002A500(void *a1)
{
  uint64_t v2 = a1[9];
  uint64_t v3 = a1[10];
  uint64_t v4 = a1[12];
  uint64_t v5 = a1[13];
  uint64_t v7 = a1[14];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10002A5D0(v2, v3);
  sub_10002A614(v4, v5, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10002A5D0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10002A614(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return sub_10002A5D0(a2, a3);
  }
  return result;
}

uint64_t sub_10002A66C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10002A6C0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0[12])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v0[14])
  {
    swift_bridgeObjectRelease();
    if (v0[16])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 184, 7);
}

uint64_t sub_10002A75C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10000BF1C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10002A7B8(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000BFDC(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void destroy for LNAppShortcutRecord(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 16);
}

void *_s10LinkDaemon19LNAppShortcutRecordVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain();
  id v5 = v4;
  return a1;
}

void *assignWithCopy for LNAppShortcutRecord(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a2[2];
  id v5 = (void *)a1[2];
  a1[2] = v4;
  id v6 = v4;

  return a1;
}

uint64_t assignWithTake for LNAppShortcutRecord(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for LNAppShortcutRecord(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LNAppShortcutRecord(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LNAppShortcutRecord()
{
  return &type metadata for LNAppShortcutRecord;
}

uint64_t sub_10002A9C0@<X0>(uint64_t a1@<X8>)
{
  return *(void *)a1;
}

uint64_t sub_10002A9CC()
{
  return v0;
}

void *sub_10002A9E4(void *a1)
{
  return memcpy(a1, v1, 0xA8uLL);
}

void sub_10002A9FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    unint64_t v7 = 0;
    uint64_t v8 = a1 + 48;
    uint64_t v9 = _swiftEmptyArrayStorage;
    uint64_t v20 = a1 + 48;
    do
    {
      unint64_t v21 = v9;
      uint64_t v10 = (unsigned char *)(v8 + 24 * v7);
      unint64_t v11 = v7;
      while (1)
      {
        if (v11 >= *(void *)(a1 + 16))
        {
          __break(1u);
          return;
        }
        uint64_t v12 = *((void *)v10 - 2);
        uint64_t v13 = *((void *)v10 - 1);
        if (v12 != a2 || v13 != a3)
        {
          char v15 = *v10;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            break;
          }
        }
        ++v11;
        v10 += 24;
        if (v5 == v11) {
          goto LABEL_17;
        }
      }
      swift_bridgeObjectRetain();
      uint64_t v9 = v21;
      uint64_t v23 = v21;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000577D0();
        uint64_t v9 = v21;
      }
      uint64_t v8 = v20;
      unint64_t v16 = v9[2];
      unint64_t v17 = v16 + 1;
      if (v16 >= v9[3] >> 1)
      {
        unint64_t v22 = v16 + 1;
        unint64_t v19 = v9[2];
        sub_1000577D0();
        unint64_t v17 = v22;
        unint64_t v16 = v19;
        uint64_t v8 = v20;
        uint64_t v9 = v23;
      }
      unint64_t v7 = v11 + 1;
      v9[2] = v17;
      uint64_t v18 = &v9[3 * v16];
      v18[4] = v12;
      v18[5] = v13;
      *((unsigned char *)v18 + 48) = v15;
    }
    while (v5 - 1 != v11);
  }
LABEL_17:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t sub_10002ABB0(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  sub_1000427DC(a2, v49);
  uint64_t v42 = v49[0];
  int64_t v44 = v49[3];
  unint64_t v8 = v49[4];
  uint64_t v38 = v49[1];
  int64_t v39 = (unint64_t)(v49[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  if (!v8) {
    goto LABEL_3;
  }
LABEL_2:
  uint64_t v45 = (v8 - 1) & v8;
  unint64_t v9 = __clz(__rbit64(v8)) | (v44 << 6);
  while (1)
  {
    uint64_t v13 = *(void *)(*(void *)(v42 + 56) + 8 * v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v14 = String.subscript.getter();
    uint64_t v16 = v15;
    uint64_t v18 = v17;
    uint64_t v20 = v19;
    swift_bridgeObjectRetain();
    uint64_t v46 = v6;
    long long v47 = sub_10002B1A0(v13, a3, a4, a5);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v50 = a1;
    uint64_t v48 = v18;
    unint64_t v22 = sub_1000211E0();
    uint64_t v24 = a1[2];
    BOOL v25 = (v23 & 1) == 0;
    Swift::Int v26 = v24 + v25;
    if (__OFADD__(v24, v25)) {
      break;
    }
    unint64_t v27 = v22;
    char v28 = v23;
    sub_10000BF1C(&qword_10017C970);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v26))
    {
      unint64_t v29 = sub_1000211E0();
      if ((v28 & 1) != (v30 & 1)) {
        goto LABEL_34;
      }
      unint64_t v27 = v29;
    }
    a1 = v50;
    if (v28)
    {
      uint64_t v31 = v50[7];
      swift_bridgeObjectRelease();
      *(void *)(v31 + 8 * v27) = v47;
    }
    else
    {
      v50[(v27 >> 6) + 8] |= 1 << v27;
      uint64_t v32 = (uint64_t *)(a1[6] + 32 * v27);
      *uint64_t v32 = v14;
      v32[1] = v16;
      v32[2] = v48;
      v32[3] = v20;
      *(void *)(a1[7] + 8 * v27) = v47;
      uint64_t v33 = a1[2];
      BOOL v34 = __OFADD__(v33, 1);
      uint64_t v35 = v33 + 1;
      if (v34) {
        goto LABEL_32;
      }
      a1[2] = v35;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v8 = v45;
    uint64_t v6 = v46;
    if (v45) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v10 = v44 + 1;
    if (__OFADD__(v44, 1)) {
      goto LABEL_33;
    }
    if (v10 >= v39) {
      goto LABEL_30;
    }
    unint64_t v11 = *(void *)(v38 + 8 * v10);
    if (!v11)
    {
      int64_t v12 = v44 + 2;
      if (v44 + 2 >= v39) {
        goto LABEL_30;
      }
      unint64_t v11 = *(void *)(v38 + 8 * v12);
      if (v11) {
        goto LABEL_12;
      }
      int64_t v12 = v44 + 3;
      if (v44 + 3 >= v39) {
        goto LABEL_30;
      }
      unint64_t v11 = *(void *)(v38 + 8 * v12);
      if (v11) {
        goto LABEL_12;
      }
      int64_t v12 = v44 + 4;
      if (v44 + 4 >= v39) {
        goto LABEL_30;
      }
      unint64_t v11 = *(void *)(v38 + 8 * v12);
      if (v11)
      {
LABEL_12:
        int64_t v10 = v12;
      }
      else
      {
        int64_t v10 = v44 + 5;
        if (v44 + 5 >= v39) {
          goto LABEL_30;
        }
        unint64_t v11 = *(void *)(v38 + 8 * v10);
        if (!v11)
        {
          int64_t v36 = v44 + 6;
          while (v36 < v39)
          {
            unint64_t v11 = *(void *)(v38 + 8 * v36++);
            if (v11)
            {
              int64_t v10 = v36 - 1;
              goto LABEL_13;
            }
          }
LABEL_30:
          swift_release();
          swift_bridgeObjectRelease();
          return (uint64_t)a1;
        }
      }
    }
LABEL_13:
    uint64_t v45 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v10 << 6);
    int64_t v44 = v10;
  }
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *sub_10002AF48(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100057848();
    uint64_t v3 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v3 - 1);
      uint64_t v4 = *v3;
      unint64_t v7 = _swiftEmptyArrayStorage[2];
      unint64_t v6 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain();
      if (v7 >= v6 >> 1) {
        sub_100057848();
      }
      v3 += 3;
      _swiftEmptyArrayStorage[2] = v7 + 1;
      unint64_t v8 = &_swiftEmptyArrayStorage[2 * v7];
      v8[4] = v5;
      v8[5] = v4;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

void *sub_10002B020(unint64_t a1, uint64_t (*a2)(uint64_t, id))
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v5 = 4;
    while (1)
    {
      id v6 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v5);
      unint64_t v7 = v6;
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      uint64_t v9 = a2(v5 - 4, v6);

      if (v9)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      ++v5;
      if (v8 == v4) {
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
  }
LABEL_16:
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void *sub_10002B1A0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v84 = a3;
  uint64_t v8 = sub_10000BF1C(&qword_10017D4F8);
  uint64_t v89 = *(void *)(v8 - 8);
  uint64_t v90 = v8;
  __chkstk_darwin(v8);
  int64_t v10 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  BOOL v88 = (uint64_t *)((char *)&v78 - v12);
  __chkstk_darwin(v13);
  uint64_t v87 = (uint64_t)&v78 - v14;
  uint64_t v15 = *(void *)(a1 + 16);
  if (!v15)
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v80 = v4;
  uint64_t v16 = type metadata accessor for LNAppShortcutParameterRecord();
  uint64_t v17 = a1
      + ((*(unsigned __int8 *)(*(void *)(v16 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v16 - 8) + 80));
  uint64_t v85 = *(void *)(*(void *)(v16 - 8) + 72);
  uint64_t v79 = a1;
  swift_bridgeObjectRetain();
  uint64_t v18 = _swiftEmptyArrayStorage;
  uint64_t v86 = v16;
  char v82 = a2;
  uint64_t v83 = a4;
  char v81 = v10;
  while (1)
  {
    id v92 = v18;
    uint64_t v93 = v15;
    uint64_t v19 = (uint64_t *)(v17 + *(int *)(v16 + 32));
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    uint64_t v22 = *a2;
    uint64_t v23 = *(void *)(*a2 + 16);
    swift_bridgeObjectRetain();
    if (v23)
    {
      uint64_t v30 = sub_100021098(v20, v21, v24, v25, v26, v27, v28, v29, v78, v79, v80, (uint64_t)v81, (uint64_t)v82, v83, v84, v85, v86, v87, (uint64_t)v88,
              v89,
              v90,
              v91,
              (uint64_t)v92,
              v93,
              v94,
              (uint64_t)v95);
      if (v31)
      {
        uint64_t v32 = (uint64_t *)(*(void *)(v22 + 56) + 16 * v30);
        uint64_t v34 = *v32;
        uint64_t v33 = v32[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }
    }
    uint64_t v35 = v20;
    int64_t v36 = *(void **)(v17 + *(int *)(v16 + 28));
    NSString v37 = String._bridgeToObjectiveC()();
    id v38 = [v36 localizedStringForLocaleIdentifier:v37];

    uint64_t v91 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v33 = v39;

    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v95 = (void *)*a2;
    uint64_t v41 = (uint64_t)v95;
    *a2 = 0x8000000000000000;
    uint64_t v42 = v35;
    uint64_t v49 = sub_100021098(v35, v21, v43, v44, v45, v46, v47, v48, v78, v79, v80, (uint64_t)v81, (uint64_t)v82, v83, v84, v85, v86, v87, (uint64_t)v88,
            v89,
            v90,
            v91,
            (uint64_t)v92,
            v93,
            v94,
            (uint64_t)v95);
    uint64_t v51 = *(void *)(v41 + 16);
    BOOL v52 = (v50 & 1) == 0;
    Swift::Int v53 = v51 + v52;
    if (__OFADD__(v51, v52)) {
      break;
    }
    unint64_t v54 = v49;
    char v55 = v50;
    sub_10000BF1C(&qword_10017C8F0);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v53))
    {
      uint64_t v62 = sub_100021098(v42, v21, v56, v57, v58, v59, v60, v61, v78, v79, v80, (uint64_t)v81, (uint64_t)v82, v83, v84, v85, v86, v87, (uint64_t)v88,
              v89,
              v90,
              v91,
              (uint64_t)v92,
              v93,
              v94,
              (uint64_t)v95);
      if ((v55 & 1) != (v63 & 1)) {
        goto LABEL_25;
      }
      unint64_t v54 = v62;
    }
    Swift::Int v64 = v95;
    if (v55)
    {
      unint64_t v65 = (void *)(v95[7] + 16 * v54);
      swift_bridgeObjectRelease();
      uint64_t v34 = v91;
      void *v65 = v91;
      v65[1] = v33;
    }
    else
    {
      v95[(v54 >> 6) + 8] |= 1 << v54;
      uint64_t v66 = (uint64_t *)(v64[6] + 16 * v54);
      *uint64_t v66 = v42;
      v66[1] = v21;
      uint64_t v67 = (void *)(v64[7] + 16 * v54);
      uint64_t v34 = v91;
      *uint64_t v67 = v91;
      v67[1] = v33;
      uint64_t v68 = v64[2];
      BOOL v69 = __OFADD__(v68, 1);
      uint64_t v70 = v68 + 1;
      if (v69) {
        goto LABEL_24;
      }
      v64[2] = v70;
      swift_bridgeObjectRetain();
    }
    a2 = v82;
    *char v82 = v64;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    int64_t v10 = v81;
LABEL_15:
    uint64_t v71 = *(int *)(v90 + 48);
    uint64_t v72 = v88;
    uint64_t v73 = (uint64_t)v88 + v71;
    *BOOL v88 = v34;
    v72[1] = v33;
    sub_1000333F0(v17, (uint64_t)v72 + v71);
    uint64_t v16 = v86;
    sub_10000D5B0(v73, 0, 1, v86);
    uint64_t v74 = v87;
    sub_1000345B8((uint64_t)v72, v87, &qword_10017D4F8);
    sub_1000345B8(v74, (uint64_t)v10, &qword_10017D4F8);
    uint64_t v18 = v92;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v18 = (void *)sub_10001EB34();
    }
    uint64_t v75 = v93;
    unint64_t v76 = v18[2];
    if (v76 >= v18[3] >> 1) {
      uint64_t v18 = (void *)sub_10001EB34();
    }
    _OWORD v18[2] = v76 + 1;
    sub_1000345B8((uint64_t)v10, (uint64_t)v18+ ((*(unsigned __int8 *)(v89 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80))+ *(void *)(v89 + 72) * v76, &qword_10017D4F8);
    v17 += v85;
    uint64_t v15 = v75 - 1;
    if (!v15)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v18;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t sub_10002B680()
{
  return 0xD000000000000034;
}

void sub_10002B69C()
{
}

Swift::Int sub_10002B6C4()
{
  return Hasher._finalize()();
}

uint64_t sub_10002B708()
{
  return 1;
}

Swift::Int sub_10002B718()
{
  return Hasher._finalize()();
}

unint64_t sub_10002B758()
{
  return 0xD000000000000034;
}

uint64_t sub_10002B778()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000D844(v0, qword_100181870);
  sub_10000BEE4(v0, (uint64_t)qword_100181870);
  uint64_t result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    String.init(cString:)();
    return Logger.init(subsystem:category:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10002B7FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v10 = objc_allocWithZone((Class)LSApplicationRecord);
  sub_100035D38();
  id v11 = sub_100081E04(a1, a2, 0);
  if (v5)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    id v12 = v11;
    uint64_t v22 = sub_10000D9D4(0, &qword_10017C820);
    uint64_t v23 = &off_10016F7B0;
    *(void *)&long long v20 = v12;
    sub_10000D698(&v20, (uint64_t)v24);
    sub_10002C098((uint64_t)v24, a3, a4, v13, v14, v15, v16, v17, v20, *((uint64_t *)&v20 + 1), v21, v22, (uint64_t)v23, v24[0], v24[1], v24[2], v24[3], v24[4], a1,
      a2);
    uint64_t v4 = v18;
    sub_100034838((uint64_t)v24);
  }
  return v4;
}

uint64_t sub_10002B8F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10000C0D4(a1, (uint64_t)v14);
  sub_10002B980(v14, (uint64_t)v15);
  if (!v4)
  {
    sub_10002C098((uint64_t)v15, a2, a3, v7, v8, v9, v10, v11, v14[0], v14[1], v14[2], v14[3], v14[4], v15[0], v15[1], v15[2], v15[3], v15[4], v15[5],
      v15[6]);
    uint64_t v3 = v12;
    sub_100034838((uint64_t)v15);
  }
  return v3;
}

uint64_t sub_10002B980@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  sub_10000BEA0(a1, v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
  if (v8)
  {
    uint64_t v9 = v7;
    uint64_t v10 = v8;
    sub_10000C0D4((uint64_t)a1, (uint64_t)v17);
    *((void *)&v18 + 1) = v9;
    uint64_t v19 = v10;
    *(void *)(a2 + 48) = v10;
    long long v11 = v17[1];
    *(_OWORD *)a2 = v17[0];
    *(_OWORD *)(a2 + 16) = v11;
    *(_OWORD *)(a2 + 32) = v18;
  }
  else
  {
    if (qword_10017C270 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10000BEE4(v12, (uint64_t)qword_100181870);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (sub_100035D54(v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v2, "No bundle identifier found in app record", v15, 2u);
      sub_10000EB10();
    }

    sub_100034868();
    swift_allocError();
    swift_willThrow();
  }
  return sub_10000E788((uint64_t)a1);
}

void sub_10002BAF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  sub_10000BEA0((void *)(v2 + 112), *(void *)(v2 + 136));
  sub_100063EB0();
  if (!v3)
  {
    uint64_t v8 = v7;
    uint64_t v15 = _swiftEmptyDictionarySingleton;
    uint64_t v9 = *(void *)(v7 + 16);
    if (v9)
    {
      swift_bridgeObjectRetain();
      uint64_t v10 = (void **)(v8 + 48);
      do
      {
        uint64_t v12 = (uint64_t)*(v10 - 1);
        long long v11 = *v10;
        v14[0] = (uint64_t)*(v10 - 2);
        v14[1] = v12;
        v14[2] = (uint64_t)v11;
        swift_bridgeObjectRetain();
        id v13 = v11;
        sub_10002BC44((uint64_t)&v15, v14, v4, a1, a2);

        swift_bridgeObjectRelease();
        v10 += 3;
        --v9;
      }
      while (v9);
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_10002BC44(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v42 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (uint64_t)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *a2;
  uint64_t v12 = a2[1];
  id v40 = (id)a2[2];
  id v13 = objc_allocWithZone((Class)LSApplicationRecord);
  swift_bridgeObjectRetain_n();
  id v14 = sub_100081E04(v11, v12, 0);
  if (v5)
  {
    uint64_t v15 = v11;
    swift_bridgeObjectRelease_n();
    uint64_t v39 = 0;
    uint64_t v22 = qword_10017C270;
    swift_retain();
    uint64_t v23 = v42;
    uint64_t v24 = v9;
    if (v22 != -1) {
      swift_once();
    }
    uint64_t v25 = sub_10000BEE4(v23, (uint64_t)qword_100181870);
    uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
    uint64_t v27 = v41;
    v26(v41, v25, v23);
    swift_release();
    swift_bridgeObjectRetain();
    id v28 = v40;
    swift_errorRetain();
    swift_bridgeObjectRetain();
    id v29 = v28;
    swift_errorRetain();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = swift_slowAlloc();
      id v40 = (id)swift_slowAlloc();
      v50[0] = (uint64_t)v40;
      *(_DWORD *)uint64_t v32 = 136315394;
      swift_bridgeObjectRetain();
      *(void *)&long long v46 = sub_100013090(v15, v12, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease_n();
      *(_WORD *)(v32 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v33 = Error.localizedDescription.getter();
      *(void *)&long long v46 = sub_100013090(v33, v34, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Failed to fetch AppShortcut records for %s: %s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v41, v42);
    }
    else
    {
      swift_errorRelease();

      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();

      return (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v27, v42);
    }
  }
  else
  {
    id v16 = v14;
    uint64_t v48 = sub_10000D9D4(0, &qword_10017C820);
    uint64_t v49 = &off_10016F7B0;
    *(void *)&long long v46 = v16;
    sub_10000D698(&v46, (uint64_t)v50);
    v50[5] = v11;
    v50[6] = v12;
    sub_10002C098((uint64_t)v50, a4, a5, v17, v18, v19, v20, v21, v38, v39, (uint64_t)v40, v41, v42, v43, v44, v45, v46, *((uint64_t *)&v46 + 1), v47,
      v48);
    uint64_t v36 = v35;
    sub_100034838((uint64_t)v50);
    sub_10004F678(v36, v11, v12);
    return swift_bridgeObjectRelease();
  }
}

void sub_10002C098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_100018E30();
  a19 = v21;
  a20 = v22;
  unint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  type metadata accessor for OSSignpostID();
  sub_10000E948();
  __chkstk_darwin(v29);
  sub_10001B450();
  static OSSignpostID.exclusive.getter();
  sub_1000B4A10();
  sub_10002C1AC(v28, v20, v26, v24, &a10);
  sub_1000E2E14();
  swift_release();
  uint64_t v30 = sub_100035E78();
  v31(v30);
  sub_100018E80();
}

uint64_t sub_10002C1AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  unint64_t v102 = a4;
  uint64_t v100 = a3;
  v98 = a5;
  uint64_t v93 = type metadata accessor for AppShortcutInterpolator.Builder();
  __chkstk_darwin(v93);
  uint64_t v94 = (char *)&v85 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OSSignpostID();
  uint64_t v96 = *(void *)(v8 - 8);
  uint64_t v97 = v8;
  __chkstk_darwin(v8);
  uint64_t v95 = (char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v99 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v85 - v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v85 - v17;
  uint64_t v92 = a1;
  uint64_t v20 = *(void *)(a1 + 40);
  uint64_t v19 = *(void *)(a1 + 48);
  uint64_t v21 = (void *)(a2 + 112);
  uint64_t v101 = a2;
  sub_10000BEA0((void *)(a2 + 112), *(void *)(a2 + 136));
  swift_bridgeObjectRetain();
  uint64_t v22 = v118;
  sub_1000640B8(v20, v19, (uint64_t)v106);
  if (v22) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v87 = v15;
  BOOL v88 = v18;
  uint64_t v86 = v12;
  uint64_t v118 = 0;
  uint64_t v89 = v10;
  uint64_t v90 = v20;
  uint64_t v25 = v101;
  unint64_t v24 = v102;
  unint64_t v91 = v19;
  sub_1000345B8((uint64_t)v106, (uint64_t)v107, &qword_10017D790);
  if (*((void *)&v107[0] + 1))
  {
    long long v109 = v107[0];
    long long v110 = v107[1];
    uint64_t v111 = v108;
    sub_10000BEA0(v21, *(void *)(v25 + 136));
    uint64_t v27 = v90;
    unint64_t v26 = v91;
    uint64_t v28 = v118;
    uint64_t v29 = sub_1000641D4();
    if (v28)
    {
      swift_bridgeObjectRelease();
      long long v116 = v109;
      sub_100033814((uint64_t)&v116);
      sub_1000345B8((uint64_t)&v110, (uint64_t)v117, (uint64_t *)&unk_10017D100);
      return sub_100033814((uint64_t)v117);
    }
    else
    {
      uint64_t v39 = v99;
      if (v29)
      {
        uint64_t v97 = v29;
        uint64_t v118 = 0;
        long long v113 = v109;
        sub_100033814((uint64_t)&v113);
        sub_1000345B8((uint64_t)&v110, (uint64_t)v114, (uint64_t *)&unk_10017D100);
        sub_100033814((uint64_t)v114);
        uint64_t v40 = qword_10017C270;
        swift_retain();
        if (v40 != -1) {
          swift_once();
        }
        uint64_t v41 = v89;
        uint64_t v42 = sub_10000BEE4(v89, (uint64_t)qword_100181870);
        uint64_t v43 = v87;
        (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v87, v42, v41);
        swift_release();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        uint64_t v44 = Logger.logObject.getter();
        os_log_type_t v45 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v44, v45))
        {
          unint64_t v46 = v24;
          uint64_t v47 = swift_slowAlloc();
          *(void *)&v104[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v47 = 136315394;
          swift_bridgeObjectRetain();
          *(void *)&v103[0] = sub_100013090(v90, v26, (uint64_t *)v104);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v47 + 12) = 2080;
          swift_bridgeObjectRetain();
          *(void *)&v103[0] = sub_100013090(v100, v46, (uint64_t *)v104);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v44, v45, "Successful AppShortcut cache hit for %s:%s", (uint8_t *)v47, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v99 + 8))(v87, v89);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v43, v41);
        }
        uint64_t *v98 = v97;
      }
      else
      {
        uint64_t v48 = v95;
        static OSSignpostID.exclusive.getter();
        sub_1000B4A10();
        BOOL v88 = v49;
        (*(void (**)(char *, uint64_t))(v96 + 8))(v48, v97);
        sub_10000BEA0(v21, *(void *)(v25 + 136));
        swift_bridgeObjectRetain();
        sub_100063EB0();
        uint64_t v97 = v50;
        swift_bridgeObjectRelease();
        uint64_t v51 = *(void *)(v25 + 136);
        uint64_t v96 = a2 + 112;
        sub_10000BEA0(v21, v51);
        swift_bridgeObjectRetain();
        uint64_t v52 = sub_1000641A8(v27, v26);
        uint64_t v118 = 0;
        swift_bridgeObjectRelease();
        sub_100033840(v92, (uint64_t)v104);
        sub_10000C0D4(v96, (uint64_t)v103);
        uint64_t v96 = v111;
        sub_1000345B8((uint64_t)&v110, (uint64_t)v112, (uint64_t *)&unk_10017D100);
        swift_bridgeObjectRetain();
        sub_100027B80((uint64_t)v112);
        if (qword_10017C470 != -1) {
          swift_once();
        }
        uint64_t v53 = v89;
        uint64_t v54 = sub_10000BEE4(v89, (uint64_t)qword_100181F08);
        char v55 = *(void (**)(char *, uint64_t, uint64_t))(v99 + 16);
        uint64_t v56 = v94;
        v55(v94, v54, v53);
        uint64_t v57 = (int *)v93;
        uint64_t v58 = &v56[*(int *)(v93 + 20)];
        long long v59 = v104[1];
        *(_OWORD *)uint64_t v58 = v104[0];
        *((_OWORD *)v58 + 1) = v59;
        *((_OWORD *)v58 + 2) = v104[2];
        *((void *)v58 + 6) = v105;
        uint64_t v60 = &v56[v57[6]];
        unint64_t v61 = v102;
        *(void *)uint64_t v60 = v100;
        *((void *)v60 + 1) = v61;
        *(void *)&v56[v57[7]] = v97;
        *(void *)&v56[v57[8]] = v52;
        sub_10000D698(v103, (uint64_t)&v56[v57[9]]);
        *(void *)&v56[v57[10]] = v96;
        sub_1000345B8((uint64_t)v112, (uint64_t)&v56[v57[11]], (uint64_t *)&unk_10017D100);
        long long v115 = v109;
        sub_100033814((uint64_t)&v115);
        sub_100033814((uint64_t)v112);
        uint64_t v62 = qword_10017C270;
        swift_retain();
        if (v62 != -1) {
          swift_once();
        }
        uint64_t v63 = sub_10000BEE4(v53, (uint64_t)qword_100181870);
        Swift::Int v64 = v86;
        uint64_t v97 = v63;
        ((void (*)(char *))v55)(v86);
        swift_release();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        unint64_t v65 = Logger.logObject.getter();
        os_log_type_t v66 = static os_log_type_t.default.getter();
        int v67 = v66;
        if (os_log_type_enabled(v65, v66))
        {
          uint64_t v68 = swift_slowAlloc();
          uint64_t v96 = swift_slowAlloc();
          *(void *)&v104[0] = v96;
          *(_DWORD *)uint64_t v68 = 136315394;
          swift_bridgeObjectRetain();
          *(void *)&v103[0] = sub_100013090(v90, v91, (uint64_t *)v104);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v68 + 12) = 2080;
          unint64_t v69 = v102;
          swift_bridgeObjectRetain();
          LODWORD(v95) = v67;
          *(void *)&v103[0] = sub_100013090(v100, v69, (uint64_t *)v104);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v65, (os_log_type_t)v95, "Interpolating AppShortcuts for %s:%s", (uint8_t *)v68, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(char *, uint64_t))(v99 + 8))(v86, v89);
        }
        else
        {

          unint64_t v69 = v102;
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          (*(void (**)(char *, uint64_t))(v99 + 8))(v64, v53);
        }
        uint64_t v70 = v118;
        sub_10002D1F0();
        uint64_t v72 = v70;
        if (v70)
        {
          sub_100033878();
          swift_bridgeObjectRelease();
          sub_1000E2E14();
          return swift_release();
        }
        else
        {
          unint64_t v102 = v71;
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          uint64_t v73 = Logger.logObject.getter();
          os_log_type_t v74 = static os_log_type_t.debug.getter();
          int v75 = v74;
          if (os_log_type_enabled(v73, v74))
          {
            uint64_t v76 = swift_slowAlloc();
            uint64_t v77 = swift_slowAlloc();
            uint64_t v118 = 0;
            uint64_t v99 = v77;
            *(void *)&v104[0] = v77;
            *(_DWORD *)uint64_t v76 = 136315394;
            swift_bridgeObjectRetain();
            *(void *)&v103[0] = sub_100013090(v90, v91, (uint64_t *)v104);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v76 + 12) = 2080;
            swift_bridgeObjectRetain();
            LODWORD(v96) = v75;
            *(void *)&v103[0] = sub_100013090(v100, v69, (uint64_t *)v104);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v73, (os_log_type_t)v96, "Caching AppShortcuts for %s:%s", (uint8_t *)v76, 0x16u);
            swift_arrayDestroy();
            uint64_t v72 = v118;
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
          }
          sub_10000BEA0(v21, *(void *)(v25 + 136));
          unint64_t v78 = v102;
          sub_100064248();
          if (v72)
          {
            swift_bridgeObjectRelease();
            swift_errorRetain();
            swift_errorRetain();
            uint64_t v79 = Logger.logObject.getter();
            os_log_type_t v80 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v79, v80))
            {
              char v81 = (uint8_t *)swift_slowAlloc();
              char v82 = (void *)swift_slowAlloc();
              *(_DWORD *)char v81 = 138412290;
              swift_errorRetain();
              uint64_t v83 = _swift_stdlib_bridgeErrorToNSError();
              *(void *)&v104[0] = v83;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *char v82 = v83;
              swift_errorRelease();
              swift_errorRelease();
              _os_log_impl((void *)&_mh_execute_header, v79, v80, "Failed to update cached AppShortcuts: %@", v81, 0xCu);
              sub_10000BF1C((uint64_t *)&unk_10017EB20);
              swift_arrayDestroy();
              unint64_t v78 = v102;
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_errorRelease();
              swift_errorRelease();
            }
            swift_errorRelease();
            sub_100033878();
            uint64_t v84 = v98;
          }
          else
          {
            sub_100033878();
            swift_bridgeObjectRelease();
            uint64_t v84 = v98;
          }
          *uint64_t v84 = v78;
          sub_1000E2E14();
          return swift_release();
        }
      }
    }
  }
  else
  {
    uint64_t v30 = qword_10017C270;
    swift_retain();
    if (v30 != -1) {
      swift_once();
    }
    uint64_t v31 = v89;
    uint64_t v32 = sub_10000BEE4(v89, (uint64_t)qword_100181870);
    uint64_t v33 = v99;
    unint64_t v34 = v88;
    (*(void (**)(char *, uint64_t, uint64_t))(v99 + 16))(v88, v32, v31);
    swift_release();
    unint64_t v35 = v91;
    swift_bridgeObjectRetain();
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      *(void *)&v104[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)&v103[0] = sub_100013090(v90, v35, (uint64_t *)v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "%s does not have AppShortcuts", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v88, v89);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v34, v31);
    }
    uint64_t *v98 = (uint64_t)_swiftEmptyArrayStorage;
  }
  return result;
}

void sub_10002D1F0()
{
  uint64_t v2 = sub_10002E7C0();
  if (!v1)
  {
    uint64_t v99 = v2;
    v117[3] = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v3 = (int *)type metadata accessor for AppShortcutInterpolator.Builder();
    uint64_t v4 = *(void *)(v0 + v3[7]);
    uint64_t v112 = *(void *)(v4 + 16);
    if (v112)
    {
      uint64_t v111 = (void *)(v0 + v3[9]);
      uint64_t v100 = v3;
      uint64_t v101 = v0;
      uint64_t v110 = v0 + v3[5];
      uint64_t v109 = v4 + 32;
      uint64_t v89 = v117;
      swift_bridgeObjectRetain();
      unint64_t v5 = 0;
      BOOL v88 = (char *)&type metadata for Any + 8;
      uint64_t v108 = v4;
      while (v5 < *(void *)(v4 + 16))
      {
        uint64_t v116 = v5;
        uint64_t v6 = (uint64_t *)(v109 + 24 * v5);
        uint64_t v8 = *v6;
        uint64_t v7 = v6[1];
        uint64_t v9 = (void *)v6[2];
        swift_bridgeObjectRetain();
        id v114 = v9;
        id v10 = [v114 actionIdentifier];
        uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v13 = v12;

        sub_10000BEA0(v111, v111[3]);
        uint64_t v15 = *(void *)(v110 + 40);
        uint64_t v14 = *(void *)(v110 + 48);
        swift_bridgeObjectRetain();
        uint64_t v16 = (void *)sub_100063E84(v15, v14, v11, v13);
        uint64_t v103 = v11;
        swift_bridgeObjectRelease();
        id v17 = v16;
        uint64_t v107 = v17;
        uint64_t v104 = v8;
        if ([v17 visibleForUse:0])
        {
          unint64_t v18 = sub_1000344C0(v17, (SEL *)&selRef_requiredCapabilities, &qword_10017D830);
          uint64_t v113 = v7;
          uint64_t v22 = v99;
          uint64_t v97 = v15;
          unint64_t v23 = v114;
          unint64_t v102 = v13;
          uint64_t v98 = v14;
          if (v18)
          {
            unint64_t v24 = v18;
            if (v18 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v25)
              {
LABEL_9:
                unint64_t v26 = v24 & 0xC000000000000001;
                swift_bridgeObjectRetain();
                uint64_t v27 = 4;
                unint64_t v105 = v24;
                while (1)
                {
                  if (v26) {
                    id v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                  }
                  else {
                    id v28 = *(id *)(v24 + 8 * v27);
                  }
                  uint64_t v29 = v28;
                  uint64_t v30 = v27 - 3;
                  if (__OFADD__(v27 - 4, 1))
                  {
                    __break(1u);
                    goto LABEL_48;
                  }
                  if ([v28 isFeatureFlagCapability])
                  {
                    uint64_t v31 = self;
                    unint64_t v32 = v26;
                    uint64_t v33 = v25;
                    id v34 = [v29 key];
                    static String._unconditionallyBridgeFromObjectiveC(_:)();

                    uint64_t v7 = v113;
                    NSString v35 = String._bridgeToObjectiveC()();
                    swift_bridgeObjectRelease();
                    unsigned int v36 = [v31 featureEnabledWithDomainFeaturePair:v35];

                    LODWORD(v35) = [v29 value];
                    BOOL v37 = v36 == v35;
                    uint64_t v25 = v33;
                    unint64_t v26 = v32;
                    unint64_t v24 = v105;
                    uint64_t v4 = v108;
                    if (!v37)
                    {
                      swift_bridgeObjectRelease_n();
                      if (qword_10017C460 != -1) {
                        swift_once();
                      }
                      uint64_t v74 = type metadata accessor for Logger();
                      sub_10000BEE4(v74, (uint64_t)qword_100181ED8);
                      swift_bridgeObjectRetain();
                      int v75 = Logger.logObject.getter();
                      os_log_type_t v76 = static os_log_type_t.info.getter();
                      if (sub_100035D54(v76))
                      {
                        uint64_t v77 = (uint8_t *)swift_slowAlloc();
                        v117[0] = swift_slowAlloc();
                        *(_DWORD *)uint64_t v77 = 136315138;
                        swift_bridgeObjectRetain();
                        sub_100013090(v103, v102, v117);
                        uint64_t v4 = v108;
                        UnsafeMutableRawBufferPointer.copyMemory(from:)();
                        swift_bridgeObjectRelease_n();
                        _os_log_impl((void *)&_mh_execute_header, v75, (os_log_type_t)v29, "%s requires at least one missing feature flag, skipping", v77, 0xCu);
                        swift_arrayDestroy();
                        sub_10000EB10();
                        sub_10000EB10();

                        swift_bridgeObjectRelease();
                      }
                      else
                      {

                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease_n();
                      }
                      goto LABEL_28;
                    }
                  }
                  else
                  {
                  }
                  ++v27;
                  if (v30 == v25)
                  {
                    swift_bridgeObjectRelease();
                    unint64_t v23 = v114;
                    break;
                  }
                }
              }
            }
            else
            {
              uint64_t v25 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
              if (v25) {
                goto LABEL_9;
              }
            }
            swift_bridgeObjectRelease();
            uint64_t v22 = v99;
          }
          sub_10002E9C4(v104, v7, (uint64_t)v23, *(void *)(v101 + v100[8]), v22, v19, v20, v21, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, (uint64_t)v88,
            (uint64_t)v89);
          uint64_t v115 = v38;
          id v39 = [v23 shortTitle];
          if (v39)
          {
            uint64_t v40 = v39;
            NSString v41 = String._bridgeToObjectiveC()();
            id v42 = [v40 localizedStringForLocaleIdentifier:v41];

            uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v92 = v44;
            uint64_t v93 = v43;
          }
          else
          {
            uint64_t v92 = 0;
            uint64_t v93 = 0;
          }
          id v52 = [v23 autoShortcutDescription];
          if (v52)
          {
            uint64_t v53 = v52;
            uint64_t v54 = v100;
            uint64_t v55 = v101;
            NSString v56 = String._bridgeToObjectiveC()();
            id v57 = [v53 localizedStringForLocaleIdentifier:v56];

            uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v90 = v59;
            uint64_t v91 = v58;
          }
          else
          {
            uint64_t v90 = 0;
            uint64_t v91 = 0;
            uint64_t v55 = v101;
            uint64_t v54 = v100;
          }
          uint64_t v106 = sub_10000FDC0(v107, (SEL *)&selRef_attributionBundleIdentifier);
          uint64_t v96 = v60;
          unint64_t v61 = (uint64_t *)(v55 + v54[6]);
          uint64_t v63 = *v61;
          uint64_t v62 = v61[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v64 = [v23 systemImageName];
          uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v94 = v66;
          uint64_t v95 = v65;

          uint64_t v67 = *(void *)(v55 + v54[10]);
          id v68 = sub_10002F578(v116, *(void *)(v55 + v54[11]), *(void *)(v55 + v54[11] + 8), v63, v62, v104, v113, v23);
          id v69 = [v23 phraseTemplates];
          sub_10000D9D4(0, (unint64_t *)&qword_10017EDC0);
          uint64_t v70 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          id v71 = objc_allocWithZone((Class)LNAutoShortcut);
          id v72 = sub_100032E8C(v97, v98, v63, v62, v103, v102, v115, v93, v92, v91, v90, v95, v94, v67, v68, v106, v96, v70);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          sub_100035D7C();
          if (v73) {
            sub_100035CB0();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();

          swift_bridgeObjectRelease();
          uint64_t v4 = v108;
        }
        else
        {
          unint64_t v45 = v13;
          if (qword_10017C460 != -1) {
            swift_once();
          }
          uint64_t v46 = type metadata accessor for Logger();
          sub_10000BEE4(v46, (uint64_t)qword_100181ED8);
          sub_100035D38();
          id v47 = v114;
          swift_bridgeObjectRetain();
          uint64_t v48 = Logger.logObject.getter();
          unint64_t v49 = v7;
          os_log_type_t v50 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v48, v50))
          {
            uint64_t v51 = swift_slowAlloc();
            v117[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v51 = 136315394;
            swift_bridgeObjectRetain();
            *(void *)(v51 + 4) = sub_100013090(v103, v45, v117);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v51 + 12) = 2080;
            swift_bridgeObjectRetain();
            *(void *)(v51 + 14) = sub_100013090(v104, v49, v117);

            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v48, v50, "%s is marked as undiscoverable in bundle %s, skipping", (uint8_t *)v51, 0x16u);
            swift_arrayDestroy();
            sub_10000EB10();
            sub_10000EB10();

            swift_bridgeObjectRelease();
          }
          else
          {

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
          }
LABEL_28:
        }
        unint64_t v5 = v116 + 1;
        if (v116 + 1 == v112)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return;
        }
      }
LABEL_48:
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_10002DD3C()
{
  uint64_t v0 = sub_10000BF1C(&qword_10017D7B8);
  sub_10000D844(v0, qword_100181888);
  sub_10000BEE4(v0, (uint64_t)qword_100181888);
  sub_10000BF1C(&qword_10017D7C0);
  sub_100034754(&qword_10017D7D0, &qword_10017D7B8);
  return Regex.init<A>(_:)();
}

uint64_t sub_10002DDF4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v40 = a1;
  uint64_t v1 = sub_10000BF1C(&qword_10017DD60);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  BOOL v37 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v28 - v5;
  uint64_t v7 = sub_10000BF1C(&qword_10017D7B8);
  uint64_t v38 = *(void *)(v7 - 8);
  uint64_t v39 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for _RegexFactory();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v42 = v10;
  uint64_t v43 = v11;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_10000BF1C(&qword_10017D7F8);
  uint64_t v44 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  unint64_t v32 = (char *)&v28 - v17;
  uint64_t v47 = 31524;
  unint64_t v48 = 0xE200000000000000;
  sub_100034708();
  static RegexComponentBuilder.buildExpression<A>(_:)();
  makeFactory()();
  sub_10002E2F4((uint64_t)v6);
  sub_10000BF1C(&qword_10017D7C0);
  sub_100034754(&qword_10017D808, &qword_10017DD60);
  uint64_t v30 = v9;
  uint64_t v31 = v1;
  _RegexFactory.capture<A, B>(_:)();
  NSString v35 = *(void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v36 = v2 + 8;
  v35(v6, v1);
  unint64_t v18 = *(void (**)(char *, uint64_t))(v43 + 8);
  v43 += 8;
  id v34 = v18;
  v18(v13, v42);
  Capture.init(_:)();
  sub_100034754(&qword_10017D810, &qword_10017D7F8);
  uint64_t v19 = v32;
  uint64_t v20 = v41;
  static RegexComponentBuilder.buildExpression<A>(_:)();
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t))(v44 + 8);
  v44 += 8;
  uint64_t v33 = v21;
  v21(v15, v20);
  uint64_t v45 = 125;
  unint64_t v46 = 0xE100000000000000;
  static RegexComponentBuilder.buildExpression<A>(_:)();
  uint64_t v45 = v49;
  unint64_t v46 = v50;
  uint64_t v29 = v6;
  static RegexComponentBuilder.buildPartialBlock<A>(first:)();
  swift_bridgeObjectRelease();
  makeFactory()();
  uint64_t v22 = v37;
  uint64_t v23 = v31;
  _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)();
  unint64_t v24 = v30;
  uint64_t v25 = v41;
  _RegexFactory.accumulate<A, B, C>(_:_:)();
  unint64_t v26 = v35;
  v35(v22, v23);
  v34(v13, v42);
  sub_10008BB00();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v24, v39);
  v26(v29, v23);
  return v33(v19, v25);
}

uint64_t sub_10002E2F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v37 = a1;
  uint64_t v38 = type metadata accessor for RegexRepetitionBehavior();
  uint64_t v36 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  NSString v35 = (char *)&v29 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for _RegexFactory();
  uint64_t v33 = *(void *)(v2 - 8);
  uint64_t v34 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000BF1C(&qword_10017D818);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CharacterClass();
  uint64_t v30 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000BF1C(&qword_10017D820);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v31 = v11;
  uint64_t v32 = v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000BF1C(&qword_10017DD60);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  unint64_t v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v29 - v20;
  __chkstk_darwin(v22);
  unint64_t v24 = (char *)&v29 - v23;
  static RegexComponent<>.word.getter();
  sub_10000D5B0((uint64_t)v7, 1, 1, v38);
  makeFactory()();
  sub_100034798();
  _RegexFactory.oneOrMore<A, B>(_:_:)();
  sub_1000347E8((uint64_t)v7, &qword_10017D818);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v4, v34);
  OneOrMore.init(_:)();
  uint64_t v25 = v31;
  OneOrMore.regex.getter();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v14, v25);
  unint64_t v26 = v35;
  static RegexRepetitionBehavior.reluctant.getter();
  Regex.repetitionBehavior(_:)();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v26, v38);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v16 + 8);
  v27(v18, v15);
  sub_100034754(&qword_10017D808, &qword_10017DD60);
  static RegexComponentBuilder.buildExpression<A>(_:)();
  v27(v21, v15);
  static RegexComponentBuilder.buildPartialBlock<A>(first:)();
  return ((uint64_t (*)(char *, uint64_t))v27)(v24, v15);
}

uint64_t sub_10002E7C0()
{
  uint64_t v1 = type metadata accessor for AppShortcutInterpolator.Builder();
  uint64_t v2 = (void *)(v0 + *(int *)(v1 + 20));
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[4];
  sub_10000BEA0(v2, v3);
  sub_10000BF1C((uint64_t *)&unk_10017E690);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_10013EF20;
  uint64_t v6 = (uint64_t *)(v0 + *(int *)(v1 + 24));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  *(void *)(v5 + 32) = *v6;
  *(void *)(v5 + 40) = v8;
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 24);
  swift_bridgeObjectRetain();
  uint64_t v10 = v9(v5, v3, v4);
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = v2[3];
  uint64_t v14 = v2[4];
  sub_10000BEA0(v2, v13);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 32))(v7, v8, v13, v14);
  uint64_t v16 = v15;
  uint64_t v17 = *(void *)(v15 + 16);
  if (v17)
  {
    unint64_t v18 = (unsigned char *)(v15 + 48);
    while ((*v18 & 1) == 0)
    {
      v18 += 24;
      if (!--v17) {
        goto LABEL_5;
      }
    }
    uint64_t v21 = *((void *)v18 - 2);
    uint64_t v22 = *((void *)v18 - 1);
    swift_bridgeObjectRetain_n();
    sub_10002A9FC(v16, v21, v22);
    uint64_t v24 = v23;
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_10013F1D0;
    *(void *)(v19 + 32) = v21;
    *(void *)(v19 + 40) = v22;
    *(void *)(v19 + 48) = v10;
    *(void *)(v19 + 56) = v12;
    uint64_t v20 = v24;
  }
  else
  {
LABEL_5:
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_10013EF20;
    *(void *)(v19 + 32) = v10;
    *(void *)(v19 + 40) = v12;
    uint64_t v20 = v16;
  }
  sub_10002AF48(v20);
  swift_bridgeObjectRelease();
  sub_100054398();
  return v19;
}

void sub_10002E9C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_100018E30();
  a19 = v22;
  a20 = v23;
  uint64_t v164 = v21;
  uint64_t v159 = v24;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v29 = type metadata accessor for URL();
  sub_10000E948();
  unint64_t v31 = v30;
  __chkstk_darwin(v32);
  sub_10001B450();
  uint64_t v35 = v34 - v33;
  uint64_t v36 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v36 - 8);
  sub_100035CF8();
  uint64_t v39 = (char *)(v37 - v38);
  __chkstk_darwin(v40);
  uint64_t v42 = (char *)&v149 - v41;
  __chkstk_darwin(v43);
  uint64_t v162 = (uint64_t)&v149 - v44;
  unsigned int v45 = [self isAppShortcutsOmittingAppNameEnabled];
  uint64_t v169 = v20;
  uint64_t v170 = v26;
  if (v45)
  {
    unint64_t v46 = &v20[*(int *)(type metadata accessor for AppShortcutInterpolator.Builder() + 20)];
    uint64_t v47 = *((void *)v46 + 3);
    uint64_t v48 = *((void *)v46 + 4);
    sub_10000BEA0(v46, v47);
    int v49 = (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 16))(v47, v48) ^ 1;
  }
  else
  {
    int v49 = 1;
  }
  LODWORD(v168) = v49;
  a10 = _swiftEmptyDictionarySingleton;
  id v50 = [v28 phraseTemplates];
  sub_10000D9D4(0, (unint64_t *)&qword_10017EDC0);
  uint64_t v51 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if ((unint64_t)v51 >> 62) {
    goto LABEL_66;
  }
  if (!*(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_67:
    swift_bridgeObjectRelease();
    goto LABEL_68;
  }
LABEL_6:
  sub_100058BCC(0, (v51 & 0xC000000000000001) == 0, v51);
  if ((v51 & 0xC000000000000001) != 0) {
    id v52 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v52 = *(id *)(v51 + 32);
  }
  uint64_t v53 = v52;
  swift_bridgeObjectRelease();
  id v54 = [v53 bundleURL];
  id v151 = v53;
  if (v54)
  {
    uint64_t v55 = v54;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v56 = 0;
  }
  else
  {
    uint64_t v56 = 1;
  }
  sub_10000D5B0((uint64_t)v42, v56, 1, v29);
  uint64_t v57 = v162;
  sub_1000345B8((uint64_t)v42, v162, (uint64_t *)&unk_10017D0C0);
  sub_100034614(v57, (uint64_t)v39, (uint64_t *)&unk_10017D0C0);
  if (sub_10000D5D8((uint64_t)v39, 1, v29) == 1)
  {
    sub_1000347E8((uint64_t)v39, (uint64_t *)&unk_10017D0C0);
LABEL_18:
    uint64_t v39 = v169;
    goto LABEL_19;
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v31 + 32))(v35, v39, v29);
  uint64_t v58 = self;
  URL._bridgeToObjectiveC()(v59);
  unint64_t v61 = v60;
  id v62 = [v58 ln_uniqueBundleWithURL:v60];

  if (!v62)
  {
    uint64_t v77 = sub_100035E24();
    v78(v77);
    goto LABEL_18;
  }
  uint64_t v63 = type metadata accessor for AppShortcutInterpolator.Builder();
  uint64_t v39 = v169;
  uint64_t v64 = sub_1000AA3BC(0x74726F6853707041, 0xEC00000073747563, *(void *)&v169[*(int *)(v63 + 24)], *(void *)&v169[*(int *)(v63 + 24) + 8]);

  uint64_t v65 = sub_100035E24();
  v66(v65);
  id v67 = [v151 key];
  uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v70 = v69;

  uint64_t v71 = sub_10001B584(v68, v70, v64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v71)
  {
    v171[0] = v71;
    swift_bridgeObjectRetain();
    uint64_t v72 = v164;
    sub_100091C80(v171);
    if (v72)
    {
      swift_release();
      __break(1u);
      return;
    }
    uint64_t v73 = 0;
    uint64_t v74 = swift_bridgeObjectRelease();
    uint64_t v75 = v171[0];
    __chkstk_darwin(v74);
    uint64_t v147 = (char *)v151;
    os_log_type_t v76 = sub_10008B818(v75, sub_100034564);
    swift_release();
    goto LABEL_20;
  }
LABEL_19:
  id v79 = [v28 phraseTemplates];
  unint64_t v80 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  __chkstk_darwin(v81);
  uint64_t v147 = v39;
  uint64_t v82 = v164;
  sub_1000B3008((void (*)(void *__return_ptr, id *))sub_100034544, (uint64_t)&v145, v80);
  os_log_type_t v76 = v83;
  uint64_t v73 = v82;
  swift_bridgeObjectRelease();
LABEL_20:
  sub_10002FD84();
  if (v73)
  {

    swift_bridgeObjectRelease();
    sub_1000347E8(v162, (uint64_t *)&unk_10017D0C0);
    swift_bridgeObjectRelease();
    goto LABEL_67;
  }
  uint64_t v160 = v84;
  uint64_t v172 = &_swiftEmptySetSingleton;
  v171[9] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v158 = v76[2];
  if (!v158) {
    goto LABEL_63;
  }
  uint64_t v164 = 0;
  id v156 = v76 + 4;
  uint64_t v85 = type metadata accessor for AppShortcutInterpolator.Builder();
  uint64_t v86 = *(int *)(v85 + 24);
  uint64_t v87 = &v39[*(int *)(v85 + 20)];
  uint64_t v89 = *((void *)v87 + 5);
  uint64_t v88 = *((void *)v87 + 6);
  uint64_t v155 = v89;
  uint64_t v157 = v88;
  uint64_t v90 = *(void **)&v39[v86 + 8];
  uint64_t v154 = *(void *)&v39[v86];
  uint64_t v153 = v90;
  uint64_t v150 = v76;
  swift_bridgeObjectRetain();
  uint64_t v91 = 0;
  id v161 = &_swiftEmptySetSingleton;
  HIDWORD(v152) = v168 & 1;
  do
  {
    uint64_t v163 = v91;
    uint64_t v92 = &v156[4 * v91];
    uint64_t v93 = *v92;
    uint64_t v29 = v92[1];
    uint64_t v35 = v92[2];
    uint64_t v94 = v92[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v165 = v94;
    uint64_t v95 = sub_10002F844(v35, v94);
    uint64_t v97 = v96;
    uint64_t v99 = v98;
    uint64_t v100 = (uint64_t)v161;
    swift_bridgeObjectRetain();
    sub_10001D15C();
    char v102 = v101;
    swift_bridgeObjectRelease();
    if ((v102 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v171[0] = v100;
      sub_1000341DC(v95, v97, isUniquelyReferenced_nonNull_native);
      id v161 = (void *)v171[0];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (*(void *)(v160 + 16))
    {
      swift_bridgeObjectRetain();
      uint64_t v110 = sub_100021098(v93, v29, v104, v105, v106, v107, v108, v109, v149, (uint64_t)v150, (uint64_t)v151, v152, (uint64_t)v153, v154, v155, (uint64_t)v156, v157, v158, (uint64_t)v159,
               v160,
               (uint64_t)v161,
               v162,
               v163,
               v164,
               v165,
               v166);
      uint64_t v111 = _swiftEmptyDictionarySingleton;
      if (v112)
      {
        uint64_t v111 = *(void **)(*(void *)(v160 + 56) + 8 * v110);
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v111 = _swiftEmptyDictionarySingleton;
    }
    char v113 = v102 ^ 1;
    uint64_t v114 = v157;
    swift_bridgeObjectRetain();
    LOBYTE(v146) = BYTE4(v152);
    LOBYTE(v143) = v113 & 1;
    uint64_t v115 = v93;
    uint64_t v28 = (void *)v114;
    uint64_t v116 = v164;
    sub_100030C6C(v115, v29, v35, v165, v99, v155, v114, v162, v154, v153, (uint64_t)v159, (uint64_t)v111, v143, v144, v145, v146, (uint64_t)&a10, v148, v149,
      (uint64_t)v150,
      (uint64_t)v151,
      v152,
      (uint64_t)v153,
      v154,
      v155,
      (uint64_t)v156,
      v157,
      v158,
      v159);
    uint64_t v42 = (char *)v116;
    if (v116)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100035DD8();

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000347E8(v162, (uint64_t *)&unk_10017D0C0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_67;
    }
    unint64_t v31 = v117;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v167 = v31;
    uint64_t v164 = 0;
    if (v31 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v51) {
        goto LABEL_61;
      }
LABEL_34:
      if (v51 >= 1)
      {
        uint64_t v118 = 0;
        unint64_t v168 = v167 & 0xC000000000000001;
        uint64_t v169 = (char *)v51;
        uint64_t v166 = v167 + 32;
        uint64_t v170 = v29;
        while (1)
        {
          if (v168) {
            uint64_t v119 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            uint64_t v119 = (char *)*(id *)(v166 + 8 * v118);
          }
          uint64_t v39 = v119;
          uint64_t v120 = v172;
          swift_bridgeObjectRetain();
          id v121 = [v39 localizedPhrase];
          uint64_t v122 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v124 = v123;

          if (!v120[2]) {
            goto LABEL_55;
          }
          Hasher.init(_seed:)();
          String.hash(into:)();
          Swift::Int v125 = Hasher._finalize()();
          uint64_t v126 = -1 << *((unsigned char *)v120 + 32);
          uint64_t v127 = v125 & ~v126;
          sub_100035DF0();
          if ((v128 & 1) == 0) {
            goto LABEL_55;
          }
          uint64_t v129 = v120[6];
          char v130 = (void *)(v129 + 16 * v127);
          BOOL v131 = *v130 == v122 && v130[1] == v124;
          if (!v131 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            break;
          }
LABEL_46:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

LABEL_58:
          if ((char *)++v118 == v169) {
            goto LABEL_61;
          }
        }
        uint64_t v132 = ~v126;
        while (1)
        {
          uint64_t v127 = (v127 + 1) & v132;
          sub_100035DF0();
          if ((v133 & 1) == 0) {
            break;
          }
          uint64_t v134 = (void *)(v129 + 16 * v127);
          BOOL v135 = *v134 == v122 && v134[1] == v124;
          if (v135 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_46;
          }
        }
LABEL_55:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v136 = v39;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        sub_100035D7C();
        if (v137) {
          sub_100035CB0();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        id v138 = [v136 localizedPhrase];
        uint64_t v139 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v141 = v140;

        sub_100023984(v171, v139, v141);
        swift_bridgeObjectRelease();
        goto LABEL_58;
      }
      __break(1u);
LABEL_66:
      swift_bridgeObjectRetain();
      uint64_t v142 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v142) {
        goto LABEL_67;
      }
      goto LABEL_6;
    }
    uint64_t v51 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v51) {
      goto LABEL_34;
    }
LABEL_61:
    uint64_t v91 = v163 + 1;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  while (v91 != v158);
  swift_bridgeObjectRelease();
LABEL_63:
  sub_100035DD8();
  swift_bridgeObjectRelease();

  sub_1000347E8(v162, (uint64_t *)&unk_10017D0C0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_68:
  sub_100018E80();
}

id sub_10002F578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v14 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  double v15 = __chkstk_darwin(v14 - 8);
  uint64_t v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v18 = [a8 parameterPresentation:v15];
  if (!v18) {
    return 0;
  }
  uint64_t v19 = v18;
  uint64_t v52 = a2;
  uint64_t v53 = a3;
  uint64_t v54 = a1;
  id v20 = [v18 parameterIdentifier];
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v56 = v22;
  uint64_t v57 = v21;

  id v23 = [v19 specificTitle];
  id v24 = [v23 formatString];
  uint64_t v55 = a4;
  uint64_t v25 = a5;
  id v26 = v24;

  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v29 = v28;

  uint64_t v30 = sub_10000FDC0(v19, (SEL *)&selRef_localizationTable);
  uint64_t v32 = v31;
  sub_100032740(a8, (uint64_t)v17);
  id v33 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  uint64_t v34 = v30;
  uint64_t v35 = v25;
  uint64_t v36 = v55;
  id v37 = sub_100033454(v27, v29, v34, v32, (uint64_t)v17);
  NSString v38 = String._bridgeToObjectiveC()();
  id v39 = [v37 localizedStringForLocaleIdentifier:v38];

  uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v42 = v41;

  uint64_t v43 = sub_1000344C0(v19, (SEL *)&selRef_optionsCollection, &qword_10017D7A0);
  if (v43)
  {
    __chkstk_darwin(v43);
    uint64_t v44 = v53;
    *(&v51 - 6) = v52;
    *(&v51 - 5) = v44;
    *(&v51 - 4) = v36;
    *(&v51 - 3) = v35;
    uint64_t v45 = v54;
    *(&v51 - 2) = (uint64_t)v19;
    *(&v51 - 1) = v45;
    uint64_t v47 = sub_10002B020(v46, (uint64_t (*)(uint64_t, id))sub_100034534);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v47 = 0;
  }
  id v49 = objc_allocWithZone((Class)LNAppShortcutParameterPresentation);
  id v48 = sub_100033698(v57, v56, v40, v42, (uint64_t)v47);

  return v48;
}

uint64_t sub_10002F844(uint64_t a1, uint64_t a2)
{
  uint64_t v70 = sub_10000BF1C(&qword_10017D7B0);
  sub_10000E948();
  uint64_t v66 = v4;
  __chkstk_darwin(v5);
  sub_100035D8C();
  uint64_t v65 = v6;
  sub_100035E8C();
  __chkstk_darwin(v7);
  uint64_t v69 = (char *)&v58 - v8;
  uint64_t v71 = (void *)a1;
  uint64_t v72 = a2;
  if (qword_10017C278 != -1) {
LABEL_25:
  }
    swift_once();
  uint64_t v9 = sub_10000BF1C(&qword_10017D7B8);
  sub_10000BEE4(v9, (uint64_t)qword_100181888);
  sub_10000BF1C(&qword_10017D7C0);
  sub_100034670();
  sub_100034754(&qword_10017D7D0, &qword_10017D7B8);
  uint64_t v10 = BidirectionalCollection<>.matches<A, B>(of:)();
  uint64_t v11 = *(void *)(v10 + 16);
  uint64_t v12 = _swiftEmptyArrayStorage;
  uint64_t v61 = v10;
  if (v11)
  {
    id v79 = _swiftEmptyArrayStorage;
    sub_10005792C();
    id v67 = *(char **)(v66 + 16);
    uint64_t v68 = v66 + 16;
    sub_100035CEC();
    uint64_t v14 = v10 + v13;
    uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 56);
    uint64_t v63 = v15 - 8;
    uint64_t v64 = v16;
    uint64_t v12 = v79;
    do
    {
      ((void (*)(char *, uint64_t, uint64_t))v67)(v69, v14, v70);
      Regex.Match.output.getter();
      uint64_t v17 = (uint64_t)v71;
      uint64_t v18 = v72;
      uint64_t v20 = v73;
      uint64_t v19 = v74;
      swift_bridgeObjectRelease();
      sub_100013EC4();
      v21();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10005792C();
        uint64_t v12 = v79;
      }
      unint64_t v23 = v12[2];
      unint64_t v22 = v12[3];
      if (v23 >= v22 >> 1)
      {
        sub_100035E4C(v22);
        sub_10005792C();
        uint64_t v12 = v79;
      }
      v12[2] = v23 + 1;
      id v24 = &v12[4 * v23];
      v24[4] = v17;
      uint64_t v24[5] = v18;
      v24[6] = v20;
      v24[7] = v19;
      v14 += (uint64_t)v64;
      --v11;
    }
    while (v11);
    uint64_t v10 = v61;
  }
  uint64_t v71 = v12;
  swift_bridgeObjectRetain();
  sub_100091CC0((uint64_t *)&v71);
  uint64_t v25 = v70;
  swift_bridgeObjectRelease();
  sub_10000BF1C(&qword_10017D7D8);
  sub_100034754(&qword_10017D7E0, &qword_10017D7D8);
  sub_1000346BC();
  uint64_t v26 = Sequence<>.joined(separator:)();
  uint64_t v28 = v27;
  swift_release();
  uint64_t v29 = *(char **)(v10 + 16);
  if (!v29)
  {
LABEL_22:
    swift_bridgeObjectRelease();
    return v26;
  }
  uint64_t v59 = v26;
  uint64_t v60 = v28;
  sub_100035CEC();
  uint64_t v31 = v10 + v30;
  uint64_t v63 = v32 - 8;
  uint64_t v64 = v33;
  uint64_t v66 = v32;
  uint64_t v62 = *(void *)(v32 + 56);
  swift_bridgeObjectRetain();
  uint64_t v34 = _swiftEmptyDictionarySingleton;
  uint64_t v35 = v65;
  while (1)
  {
    id v67 = v29;
    v64(v35, v31, v25);
    Regex.Match.output.getter();
    swift_bridgeObjectRelease();
    uint64_t v36 = v75;
    uint64_t v37 = v76;
    uint64_t v38 = v77;
    uint64_t v39 = v78;
    uint64_t v68 = Regex.Match.range.getter();
    uint64_t v69 = v40;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v71 = v34;
    sub_100035E38();
    unint64_t v42 = sub_1000211E0();
    uint64_t v44 = v34[2];
    BOOL v45 = (v43 & 1) == 0;
    Swift::Int v46 = v44 + v45;
    if (__OFADD__(v44, v45))
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    unint64_t v47 = v42;
    char v48 = v43;
    sub_10000BF1C(&qword_10017D7F0);
    Swift::Bool v49 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v46);
    uint64_t v25 = v70;
    if (v49) {
      break;
    }
LABEL_16:
    uint64_t v34 = v71;
    if (v48)
    {
      sub_100035D08();
    }
    else
    {
      v71[(v47 >> 6) + 8] |= 1 << v47;
      uint64_t v52 = (void *)(v34[6] + 32 * v47);
      *uint64_t v52 = v36;
      v52[1] = v37;
      v52[2] = v38;
      v52[3] = v39;
      sub_100035D08();
      uint64_t v53 = v34[2];
      BOOL v54 = __OFADD__(v53, 1);
      uint64_t v55 = v53 + 1;
      if (v54) {
        goto LABEL_24;
      }
      v34[2] = v55;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v35 = v65;
    sub_100013EC4();
    v56();
    v31 += v62;
    uint64_t v29 = v67 - 1;
    if (v67 == (char *)1)
    {
      swift_bridgeObjectRelease();
      uint64_t v26 = v59;
      goto LABEL_22;
    }
  }
  sub_100035E38();
  unint64_t v50 = sub_1000211E0();
  if ((v48 & 1) == (v51 & 1))
  {
    unint64_t v47 = v50;
    goto LABEL_16;
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

void sub_10002FD84()
{
  sub_100018E30();
  uint64_t v115 = v1;
  uint64_t v121 = v0;
  uint64_t v3 = v2;
  id v125 = v4;
  uint64_t v6 = v5;
  uint64_t v127 = (int *)type metadata accessor for LNAppShortcutParameterRecord();
  sub_10000E948();
  __chkstk_darwin(v7);
  sub_100035D8C();
  uint64_t v104 = v8;
  sub_100035E8C();
  __chkstk_darwin(v9);
  uint64_t v128 = (uint64_t)&v104 - v10;
  sub_100035E8C();
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v104 - v12;
  v131[0] = (uint64_t)_swiftEmptyDictionarySingleton;
  uint64_t v14 = *(void *)(v3 + 16);
  uint64_t v113 = v15;
  if (v14)
  {
    uint64_t v16 = v6;
    sub_100035CEC();
    uint64_t v18 = v3 + v17;
    uint64_t v20 = *(void *)(v19 + 72);
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v21 = v115;
      sub_100030504(v131, v18);
      uint64_t v115 = v21;
      if (v21) {
        goto LABEL_58;
      }
      v18 += v20;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease();
    unint64_t v22 = (void *)v131[0];
    uint64_t v6 = v16;
  }
  else
  {
    unint64_t v22 = _swiftEmptyDictionarySingleton;
  }
  int64_t v23 = 0;
  id v24 = v22 + 8;
  uint64_t v25 = 1 << *((unsigned char *)v22 + 32);
  uint64_t v26 = -1;
  if (v25 < 64) {
    uint64_t v26 = ~(-1 << v25);
  }
  unint64_t v27 = v26 & v22[8];
  int64_t v28 = (unint64_t)(v25 + 63) >> 6;
  uint64_t v29 = v6 + 32;
  uint64_t v30 = _swiftEmptyArrayStorage;
  uint64_t v108 = v6;
  uint64_t v107 = v22;
  uint64_t v106 = v22 + 8;
  int64_t v105 = v28;
  uint64_t v112 = v6 + 32;
LABEL_10:
  while (2)
  {
    if (v27)
    {
      unint64_t v31 = __clz(__rbit64(v27));
      v27 &= v27 - 1;
      unint64_t v32 = v31 | (v23 << 6);
      goto LABEL_23;
    }
    if (__OFADD__(v23++, 1))
    {
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      swift_bridgeObjectRelease();
      goto LABEL_60;
    }
    if (v23 < v28)
    {
      unint64_t v34 = v24[v23];
      if (v34)
      {
LABEL_22:
        unint64_t v27 = (v34 - 1) & v34;
        unint64_t v32 = __clz(__rbit64(v34)) + (v23 << 6);
LABEL_23:
        uint64_t v36 = *(void *)(v6 + 16);
        if (!v36) {
          continue;
        }
        unint64_t v110 = v27;
        int64_t v111 = v23;
        uint64_t v37 = v22[7];
        uint64_t v38 = (uint64_t *)(v22[6] + 32 * v32);
        uint64_t v39 = v38[1];
        uint64_t v116 = *v38;
        uint64_t v40 = v38[3];
        uint64_t v41 = *(void *)(v37 + 8 * v32);
        uint64_t v118 = (void *)v39;
        swift_bridgeObjectRetain();
        uint64_t v109 = v40;
        swift_bridgeObjectRetain();
        uint64_t v114 = v41;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v42 = 0;
        uint64_t v117 = v36;
        while (1)
        {
          uint64_t v120 = v42;
          char v43 = (uint64_t *)(v29 + 32 * v42);
          uint64_t v44 = v43[1];
          uint64_t v124 = *v43;
          uint64_t v45 = v43[3];
          v131[0] = v43[2];
          v131[1] = v45;
          uint64_t v129 = 31524;
          unint64_t v130 = 0xE200000000000000;
          Swift::Int v46 = v118;
          swift_bridgeObjectRetain();
          uint64_t v126 = v44;
          swift_bridgeObjectRetain();
          uint64_t v119 = v45;
          swift_bridgeObjectRetain();
          v47._uint64_t countAndFlagsBits = v116;
          v47._object = v46;
          String.append(_:)(v47);
          swift_bridgeObjectRelease();
          v48._uint64_t countAndFlagsBits = 125;
          v48._object = (void *)0xE100000000000000;
          String.append(_:)(v48);
          sub_10001B398();
          LOBYTE(v45) = StringProtocol.contains<A>(_:)();
          swift_bridgeObjectRelease();
          if (v45)
          {
            uint64_t v49 = *(void *)(v114 + 16);
            if (v49) {
              break;
            }
          }
LABEL_43:
          uint64_t v42 = v120 + 1;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v42 == v117)
          {
            sub_100035DD8();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v6 = v108;
            swift_bridgeObjectRelease();
            unint64_t v22 = v107;
            id v24 = v106;
            int64_t v23 = v111;
            int64_t v28 = v105;
            unint64_t v27 = v110;
            goto LABEL_10;
          }
        }
        uint64_t v50 = v113;
        sub_100035CEC();
        uint64_t v123 = v51;
        uint64_t v53 = v52 + v51;
        swift_bridgeObjectRetain();
        uint64_t v54 = *(void *)(v50 + 72);
        uint64_t v122 = v54;
        while (1)
        {
          uint64_t v132 = v30;
          sub_1000333F0(v53, (uint64_t)v13);
          id v55 = [v125 parameterPresentation];
          if (!v55) {
            goto LABEL_36;
          }
          uint64_t v56 = v55;
          id v57 = [v55 specificTitle];
          id v58 = [v57 formatString];

          uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v61 = v60;

          uint64_t v62 = &v13[v127[6]];
          if (v59 == *(void *)v62 && v61 == *((void *)v62 + 1)) {
            break;
          }
          char v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();

          if (v64) {
            goto LABEL_36;
          }
          uint64_t v30 = v132;
LABEL_41:
          sub_100033878();
          v53 += v54;
          if (!--v49)
          {
            swift_bridgeObjectRelease();
            uint64_t v126 = v114;
            uint64_t v29 = v112;
            goto LABEL_43;
          }
        }
        swift_bridgeObjectRelease();

LABEL_36:
        type metadata accessor for UUID();
        sub_1000283FC();
        uint64_t v66 = v128;
        (*(void (**)(uint64_t, char *))(v65 + 16))(v128, v13);
        uint64_t v67 = v121 + *(int *)(type metadata accessor for AppShortcutInterpolator.Builder() + 20);
        uint64_t v68 = *(void *)(v67 + 40);
        uint64_t v69 = *(void *)(v67 + 48);
        uint64_t v70 = v127;
        uint64_t v71 = *(void **)&v13[v127[7]];
        uint64_t v72 = &v13[v127[8]];
        uint64_t v73 = *(void **)&v13[v127[9]];
        uint64_t v74 = *(void **)&v13[v127[10]];
        uint64_t v75 = *(void *)v72;
        uint64_t v76 = *((void *)v72 + 1);
        uint64_t v77 = v13;
        uint64_t v78 = &v13[v127[11]];
        uint64_t v80 = *(void *)v78;
        uint64_t v79 = *((void *)v78 + 1);
        uint64_t v81 = (void *)(v66 + v127[5]);
        *uint64_t v81 = v68;
        v81[1] = v69;
        uint64_t v82 = (void *)(v66 + v70[6]);
        uint64_t v83 = v126;
        *uint64_t v82 = v124;
        v82[1] = v83;
        *(void *)(v66 + v70[7]) = v71;
        uint64_t v84 = (void *)(v66 + v70[8]);
        *uint64_t v84 = v75;
        v84[1] = v76;
        *(void *)(v66 + v70[9]) = v73;
        *(void *)(v66 + v70[10]) = v74;
        uint64_t v85 = (void *)(v66 + v70[11]);
        *uint64_t v85 = v80;
        v85[1] = v79;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v86 = v71;
        swift_bridgeObjectRetain();
        id v87 = v73;
        id v88 = v74;
        uint64_t v30 = v132;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          char v91 = sub_100035C60();
          uint64_t v30 = (void *)sub_10001E8F8(v91, v92, v93, v94);
        }
        unint64_t v90 = v30[2];
        unint64_t v89 = v30[3];
        uint64_t v13 = v77;
        uint64_t v54 = v122;
        if (v90 >= v89 >> 1)
        {
          char v95 = sub_100035E4C(v89);
          uint64_t v30 = (void *)sub_10001E8F8(v95, v90 + 1, 1, (uint64_t)v30);
        }
        id v30[2] = v90 + 1;
        sub_100033768(v128, (uint64_t)v30 + v123 + v90 * v54);
        goto LABEL_41;
      }
      int64_t v35 = v23 + 1;
      if (v23 + 1 < v28)
      {
        unint64_t v34 = v24[v35];
        if (v34) {
          goto LABEL_21;
        }
        int64_t v35 = v23 + 2;
        if (v23 + 2 >= v28) {
          break;
        }
        unint64_t v34 = v24[v35];
        if (v34)
        {
LABEL_21:
          int64_t v23 = v35;
          goto LABEL_22;
        }
        int64_t v35 = v23 + 3;
        if (v23 + 3 < v28)
        {
          unint64_t v34 = v24[v35];
          if (v34) {
            goto LABEL_21;
          }
          while (1)
          {
            int64_t v23 = v35 + 1;
            if (__OFADD__(v35, 1)) {
              goto LABEL_57;
            }
            if (v23 >= v28) {
              goto LABEL_49;
            }
            unint64_t v34 = v24[v23];
            ++v35;
            if (v34) {
              goto LABEL_22;
            }
          }
        }
      }
    }
    break;
  }
LABEL_49:
  swift_release();
  v131[0] = (uint64_t)_swiftEmptyDictionarySingleton;
  uint64_t v96 = v30[2];
  uint64_t v97 = v115;
  uint64_t v98 = v104;
  if (v96)
  {
    sub_100035CEC();
    uint64_t v100 = (uint64_t)v30 + v99;
    uint64_t v102 = v101;
    swift_bridgeObjectRetain_n();
    uint64_t v103 = *(void *)(v102 + 72);
    while (1)
    {
      sub_1000333F0(v100, v98);
      sub_1000307F4(v131, v98);
      if (v97) {
        break;
      }
      uint64_t v97 = 0;
      sub_100033878();
      v100 += v103;
      if (!--v96)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_55;
      }
    }
    swift_bridgeObjectRelease();
    sub_100033878();
LABEL_60:
    swift_bridgeObjectRelease();
    __break(1u);
    return;
  }
  swift_bridgeObjectRelease();
LABEL_55:
  sub_100018E80();
}

uint64_t sub_100030504(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LNAppShortcutParameterRecord();
  uint64_t v42 = *(void *)(v4 - 8);
  double v5 = __chkstk_darwin(v4);
  uint64_t v37 = (uint64_t)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v38 = *(id *)(a2 + *(int *)(v7 + 36));
  id v8 = [v38 identifier:v5];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v9 = *(int *)(v4 + 24);
  uint64_t v41 = a2;
  uint64_t v10 = (uint64_t *)(a2 + v9);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  uint64_t v13 = *a1;
  uint64_t v14 = *(void *)(*a1 + 16);
  uint64_t v39 = v12;
  uint64_t v40 = a1;
  if (!v14)
  {
    uint64_t v17 = _swiftEmptyArrayStorage;
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  unint64_t v15 = sub_10002125C();
  if (v16)
  {
    uint64_t v17 = *(void **)(*(void *)(v13 + 56) + 8 * v15);
LABEL_5:
    swift_bridgeObjectRetain();
    goto LABEL_7;
  }
  uint64_t v17 = _swiftEmptyArrayStorage;
LABEL_7:
  uint64_t v18 = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v19 = v17[2];
  if (v19)
  {
    uint64_t v20 = (char *)v17 + ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80));
    uint64_t v21 = (uint64_t *)(v41 + *(int *)(v4 + 32));
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    uint64_t v24 = *(void *)(v42 + 72);
    uint64_t v25 = v17[2];
    while (1)
    {
      uint64_t v26 = &v20[*(int *)(v4 + 32)];
      BOOL v27 = *(void *)v26 == v22 && *((void *)v26 + 1) == v23;
      if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      v20 += v24;
      if (!--v25) {
        goto LABEL_15;
      }
    }
  }
  else
  {
LABEL_15:
    uint64_t v28 = v37;
    sub_1000333F0(v41, v37);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v17 = (void *)sub_10001E8F8(0, v19 + 1, 1, (uint64_t)v17);
    }
    uint64_t v29 = v39;
    unint64_t v31 = v17[2];
    unint64_t v30 = v17[3];
    if (v31 >= v30 >> 1) {
      uint64_t v17 = (void *)sub_10001E8F8(v30 > 1, v31 + 1, 1, (uint64_t)v17);
    }
    _OWORD v17[2] = v31 + 1;
    sub_100033768(v28, (uint64_t)v17+ ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80))+ *(void *)(v42 + 72) * v31);
    id v32 = [v38 identifier];
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v35 = v34;

    swift_bridgeObjectRetain();
    sub_10004F690((uint64_t)v17, v33, v35, v29, v18);
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

#error "1000308FC: call analysis failed (funcsize=161)"

uint64_t sub_100030A7C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a1 < 1)
  {
    uint64_t v8 = 0;
    uint64_t v7 = (void *)0xE000000000000000;
  }
  else
  {
    v5._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._uint64_t countAndFlagsBits = 93;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    uint64_t v8 = 91;
    uint64_t v7 = (void *)0xE100000000000000;
  }
  id v9 = [a4 key];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRetain();
  v11._uint64_t countAndFlagsBits = v8;
  v11._object = v7;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v10;
}

void sub_100030B9C(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  type metadata accessor for AppShortcutInterpolator.Builder();
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 localizedStringForLocaleIdentifier:v4];

  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  id v9 = [v3 key];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  *a2 = v10;
  a2[1] = v12;
  a2[2] = v6;
  a2[3] = v8;
}

void sub_100030C6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,unsigned __int8 a25,uint64_t a26,uint64_t a27,char a28,void *a29)
{
  sub_100018E30();
  a19 = v30;
  a20 = v31;
  unint64_t v32 = v29;
  uint64_t v34 = v33;
  uint64_t v172 = v35;
  uint64_t v184 = v36;
  uint64_t v185 = v37;
  uint64_t v39 = v38;
  uint64_t v187 = v40;
  uint64_t v179 = v41;
  uint64_t v43 = v42;
  char v44 = a28;
  uint64_t v45 = sub_10000BF1C(&qword_10017C788);
  __chkstk_darwin(v45 - 8);
  sub_10001B450();
  uint64_t v177 = v47 - v46;
  uint64_t v186 = sub_10000BF1C(&qword_10017D4F8);
  sub_10000E948();
  uint64_t v174 = v48;
  __chkstk_darwin(v49);
  sub_100035CF8();
  uint64_t v52 = v50 - v51;
  __chkstk_darwin(v53);
  uint64_t v188 = (char *)&v160 - v54;
  sub_100035E8C();
  __chkstk_darwin(v55);
  id v57 = (uint64_t *)((char *)&v160 - v56);
  __chkstk_darwin(v58);
  uint64_t v60 = (char *)&v160 - v59;
  uint64_t v61 = String.subscript.getter();
  uint64_t v65 = v63;
  uint64_t v181 = v39;
  unint64_t v66 = *(void *)(v39 + 16);
  uint64_t v183 = v43;
  if (v44)
  {
    uint64_t v166 = (void *)v29;
    if (v66)
    {
      uint64_t v182 = v34;
      uint64_t v67 = v61;
      uint64_t v68 = v62;
      uint64_t v69 = v64;
      uint64_t v70 = v52;
      uint64_t v71 = v63;
      sub_10001B680(v61, v62, v63, v64, v181);
      uint64_t v65 = v71;
      uint64_t v52 = v70;
      uint64_t v62 = v68;
      uint64_t v61 = v67;
      unint64_t v32 = (unint64_t)v166;
      uint64_t v34 = v182;
      uint64_t v64 = v69;
      if ((v72 & 1) == 0) {
        goto LABEL_4;
      }
      swift_bridgeObjectRelease();
      if (qword_10017C460 != -1) {
        swift_once();
      }
      uint64_t v106 = type metadata accessor for Logger();
      sub_10000BEE4(v106, (uint64_t)qword_100181ED8);
      sub_100035E04();
      uint64_t v75 = (void *)Logger.logObject.getter();
      os_log_type_t v107 = static os_log_type_t.error.getter();
      if (!sub_100035C94(v107)) {
        goto LABEL_29;
      }
      sub_100035CD0();
      a10 = (void *)sub_100035C78();
      sub_100035C28(4.8149e-34);
      uint64_t v108 = sub_100013090(v179, (unint64_t)v57, (uint64_t *)&a10);
      sub_100035C00(v108);
      sub_100035DC0();
    }
    else
    {
      swift_bridgeObjectRelease();
      if (qword_10017C460 != -1) {
        swift_once();
      }
      uint64_t v103 = type metadata accessor for Logger();
      sub_10000BEE4(v103, (uint64_t)qword_100181ED8);
      sub_100035E04();
      uint64_t v75 = (void *)Logger.logObject.getter();
      os_log_type_t v104 = static os_log_type_t.error.getter();
      if (!sub_100035C94(v104)) {
        goto LABEL_29;
      }
      sub_100035CD0();
      a10 = (void *)sub_100035C78();
      sub_100035C28(4.8149e-34);
      uint64_t v105 = sub_100013090(v179, (unint64_t)v57, (uint64_t *)&a10);
      sub_100035C00(v105);
      sub_100035DC0();
    }
LABEL_28:
    sub_100035E58((void *)&_mh_execute_header, v78, v79, v80);
    swift_arrayDestroy();
    sub_10000EB10();
    sub_10000EB10();

    goto LABEL_71;
  }
LABEL_4:
  if (v66 > 2)
  {
    swift_bridgeObjectRelease();
    if (qword_10017C460 != -1) {
      goto LABEL_74;
    }
    goto LABEL_6;
  }
  uint64_t v170 = v65;
  unint64_t v171 = v62;
  uint64_t v173 = v61;
  uint64_t v175 = v64;
  uint64_t v81 = a29;
  int v180 = a25;
  uint64_t v82 = v52;
  uint64_t v84 = a23;
  uint64_t v83 = a24;
  uint64_t v86 = a21;
  uint64_t v85 = a22;
  swift_bridgeObjectRetain();
  uint64_t v178 = v86;
  uint64_t v168 = v85;
  uint64_t v87 = sub_10002ABB0(_swiftEmptyDictionarySingleton, v83, v81, v86, v85);
  id v88 = (void *)v87;
  unint64_t v176 = v32;
  uint64_t v89 = *(void *)(v84 + 16);
  uint64_t v182 = v34;
  uint64_t v169 = v82;
  if (v89)
  {
    uint64_t v166 = (void *)v87;
    swift_bridgeObjectRetain();
    unint64_t v167 = v84;
    unint64_t v90 = (uint64_t *)(v84 + 40);
    char v91 = _swiftEmptyArrayStorage;
    uint64_t v92 = v186;
    char v93 = v180;
    do
    {
      uint64_t v94 = *(v90 - 1);
      uint64_t v95 = *v90;
      uint64_t v96 = HIBYTE(*v90) & 0xF;
      if ((*v90 & 0x2000000000000000) == 0) {
        uint64_t v96 = v94 & 0xFFFFFFFFFFFFLL;
      }
      if (v96)
      {
        uint64_t v97 = (uint64_t)v57 + *(int *)(v92 + 48);
        void *v57 = v94;
        v57[1] = v95;
        uint64_t v98 = type metadata accessor for LNAppShortcutParameterRecord();
        sub_10000D5B0(v97, 1, 1, v98);
        sub_1000345B8((uint64_t)v57, (uint64_t)v60, &qword_10017D4F8);
        sub_1000345B8((uint64_t)v60, (uint64_t)v188, &qword_10017D4F8);
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100035C60();
          char v91 = (void *)sub_10001EB34();
        }
        unint64_t v100 = v91[2];
        unint64_t v99 = v91[3];
        if (v100 >= v99 >> 1)
        {
          sub_100035E4C(v99);
          char v91 = (void *)sub_10001EB34();
        }
        v91[2] = v100 + 1;
        sub_100035D20();
        sub_1000345B8((uint64_t)v188, v101 + v102 * v100, &qword_10017D4F8);
        uint64_t v92 = v186;
      }
      v90 += 2;
      --v89;
    }
    while (v89);
    sub_100035DD8();
    id v88 = v166;
  }
  else
  {
    char v91 = _swiftEmptyArrayStorage;
    char v93 = v180;
  }
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  a10 = v88;
  sub_10000C518((uint64_t)v91, v173, v171, v170, v175, isUniquelyReferenced_nonNull_native);
  uint64_t v165 = a10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a10 = _swiftEmptyArrayStorage;
  uint64_t v110 = type metadata accessor for UUID();
  uint64_t v111 = v177;
  sub_10000D5B0(v177, 1, 1, v110);
  id v112 = objc_allocWithZone((Class)LNAutoShortcutLocalizedPhrase);
  uint64_t v113 = v184;
  swift_bridgeObjectRetain_n();
  uint64_t v114 = v187;
  swift_bridgeObjectRetain();
  uint64_t v115 = v172;
  swift_bridgeObjectRetain();
  uint64_t v116 = v185;
  id v117 = sub_1000330BC(v179, v114, v185, v115, v183, v113, v111, v93 & 1);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  sub_100035D7C();
  if (v118) {
    sub_100035CB0();
  }
  id v163 = v117;
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v119 = swift_bridgeObjectRetain();
  sub_100049C18(v119, v120, v121, v122, v123, v124, v125, v126, v160, v161, v162, (uint64_t)v163, v164, (uint64_t)v165, (uint64_t)v166, v167, v168, v169, v170,
    v171,
    v172,
    v173,
    v174,
    v175,
    v176,
    v177);
  uint64_t v128 = v127;
  swift_bridgeObjectRelease();
  v190[0] = v128;
  unint64_t v129 = v176;
  sub_1000338C8(v190);
  if (v129)
  {
    swift_release();
    __break(1u);
    return;
  }
  uint64_t v130 = v190[0];
  uint64_t v162 = *(void *)(v190[0] + 16);
  uint64_t v166 = 0;
  if (!v162)
  {
LABEL_59:

    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_71;
  }
  if (!v165[2])
  {
    swift_release();
LABEL_65:
    swift_bridgeObjectRelease();
    if (qword_10017C460 != -1) {
      swift_once();
    }
    uint64_t v155 = type metadata accessor for Logger();
    sub_10000BEE4(v155, (uint64_t)qword_100181ED8);
    sub_100035D38();
    id v156 = (void *)Logger.logObject.getter();
    os_log_type_t v157 = static os_log_type_t.error.getter();
    if (sub_100035C94(v157))
    {
      sub_100035CD0();
      v190[0] = sub_100035C78();
      sub_100035C28(4.8149e-34);
      uint64_t v189 = (void *)sub_100013090(v183, v113, v190);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100035DC0();
      sub_100035E58((void *)&_mh_execute_header, v158, v159, "Skipping phrase template with an unrecognized token: %s");
      swift_arrayDestroy();
      sub_10000EB10();
      sub_10000EB10();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }

    swift_bridgeObjectRelease();
    goto LABEL_71;
  }
  uint64_t v179 = *(void *)(v190[0] + 72);
  uint64_t v181 = *(void *)(v190[0] + 64);
  swift_bridgeObjectRetain();
  unint64_t v131 = sub_1000211E0();
  if ((v132 & 1) == 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_65;
  }
  uint64_t v161 = v130;
  uint64_t v160 = v130 + 32;
  unint64_t v32 = (unint64_t)a10;
  unint64_t v133 = 1;
  uint64_t v134 = &qword_10017D4F8;
  uint64_t v135 = (uint64_t)v165;
  uint64_t v136 = v179;
  while (1)
  {
    unint64_t v164 = v133;
    uint64_t v173 = *(void *)(*(void *)(v135 + 56) + 8 * v131);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v190[0] = (uint64_t)_swiftEmptyArrayStorage;
    if (v32 >> 62) {
      break;
    }
    uint64_t v137 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v137) {
      goto LABEL_40;
    }
LABEL_53:
    swift_bridgeObjectRelease_n();
    id v151 = _swiftEmptyArrayStorage;
LABEL_54:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v135 = (uint64_t)v165;
    if (v164 == v162) {
      goto LABEL_59;
    }
    if (v164 >= *(void *)(v161 + 16)) {
      goto LABEL_73;
    }
    if (!v165[2])
    {
      a10 = v151;
      swift_release();
      goto LABEL_64;
    }
    unint64_t v152 = v164 + 1;
    uint64_t v153 = v160 + 48 * v164;
    uint64_t v136 = *(void *)(v153 + 40);
    uint64_t v181 = *(void *)(v153 + 32);
    swift_bridgeObjectRetain();
    unint64_t v131 = sub_1000211E0();
    unint64_t v32 = (unint64_t)v151;
    unint64_t v133 = v152;
    uint64_t v116 = v185;
    if ((v154 & 1) == 0)
    {
      a10 = v151;
      swift_release();
      swift_bridgeObjectRelease();
LABEL_64:
      uint64_t v113 = v184;
      goto LABEL_65;
    }
  }
  swift_bridgeObjectRetain_n();
  uint64_t v137 = _CocoaArrayWrapper.endIndex.getter();
  if (!v137) {
    goto LABEL_53;
  }
LABEL_40:
  uint64_t v138 = 0;
  uint64_t v139 = *(void *)(v173 + 16);
  unint64_t v176 = v32 & 0xC000000000000001;
  unint64_t v167 = v32 + 32;
  uint64_t v175 = v139;
  uint64_t v170 = v137;
  unint64_t v171 = v32;
  uint64_t v179 = v136;
  while (1)
  {
    uint64_t v140 = v176
         ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : (char *)*(id *)(v167 + 8 * v138);
    if (__OFADD__(v138++, 1)) {
      break;
    }
    if (v139)
    {
      uint64_t v177 = v138;
      uint64_t v188 = v140;
      uint64_t v189 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)();
      sub_100035CEC();
      uint64_t v142 = v139;
      uint64_t v144 = v173 + v143;
      uint64_t v187 = *(void *)(v145 + 72);
      uint64_t v146 = v142;
      uint64_t v147 = v134;
      uint64_t v148 = v172;
      uint64_t v149 = v169;
      uint64_t v150 = v168;
      do
      {
        sub_100034614(v144, v149, v147);
        sub_1000318E8(*(void *)v149, *(void **)(v149 + 8), v149 + *(int *)(v186 + 48), v188, v181, v179, v183, v184, v116, v148, v178, v150, v182, v180 & 1);
        sub_1000347E8(v149, v147);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        uint64_t v116 = v185;
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v144 += v187;
        --v146;
      }
      while (v146);

      uint64_t v134 = v147;
      uint64_t v137 = v170;
      unint64_t v32 = v171;
      uint64_t v138 = v177;
    }
    else
    {
    }
    sub_100054440();
    uint64_t v139 = v175;
    if (v138 == v137)
    {
      swift_bridgeObjectRelease_n();
      id v151 = (void *)v190[0];
      goto LABEL_54;
    }
  }
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  swift_once();
LABEL_6:
  uint64_t v166 = (void *)v32;
  uint64_t v73 = type metadata accessor for Logger();
  sub_10000BEE4(v73, (uint64_t)qword_100181ED8);
  unint64_t v74 = v184;
  swift_bridgeObjectRetain_n();
  uint64_t v75 = (void *)Logger.logObject.getter();
  os_log_type_t v76 = static os_log_type_t.error.getter();
  if (sub_100035C94(v76))
  {
    sub_100035CD0();
    a10 = (void *)sub_100035C78();
    sub_100035C28(4.8149e-34);
    uint64_t v77 = sub_100013090(v183, v74, (uint64_t *)&a10);
    sub_100035C00(v77);
    sub_100035DC0();
    uint64_t v80 = "Skipping phrase template with too many tokens: %s";
    goto LABEL_28;
  }
LABEL_29:

  swift_bridgeObjectRelease_n();
LABEL_71:
  sub_100018E80();
}

id sub_1000318E8(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v93 = a6;
  uint64_t v94 = a8;
  uint64_t v86 = a7;
  uint64_t v91 = a5;
  uint64_t v92 = a3;
  uint64_t v17 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v17 - 8);
  uint64_t v89 = (char *)&v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000BF1C((uint64_t *)&unk_10017FAE0);
  __chkstk_darwin(v19 - 8);
  unint64_t v90 = (char *)&v84 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v85 = (char *)&v84 - v22;
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v84 - v24;
  uint64_t v26 = type metadata accessor for LNAppShortcutParameterRecord();
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v84 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_10000BF1C(&qword_10017C788);
  __chkstk_darwin(v29 - 8);
  uint64_t v96 = (uint64_t)&v84 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  uint64_t v33 = (char *)&v84 - v32;
  __chkstk_darwin(v34);
  uint64_t v36 = (char *)&v84 - v35;
  double v38 = __chkstk_darwin(v37);
  uint64_t v95 = (uint64_t)&v84 - v39;
  id v84 = a4;
  id v40 = [a4 localizedPhrase:v38];
  uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v43 = v42;

  uint64_t v99 = v41;
  uint64_t v100 = v43;
  uint64_t v97 = a1;
  uint64_t v98 = (uint64_t)a2;
  sub_10003456C();
  String.replaceSubrange<A>(_:with:)();
  uint64_t v44 = v92;
  sub_100034614(v92, (uint64_t)v25, (uint64_t *)&unk_10017FAE0);
  uint64_t v93 = v26;
  if (sub_10000D5D8((uint64_t)v25, 1, v26) == 1)
  {
    uint64_t v45 = v86;
    sub_1000347E8((uint64_t)v25, (uint64_t *)&unk_10017FAE0);
    id v46 = v84;
    id v47 = [v84 signature];
    uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v87 = v49;
    uint64_t v88 = v48;

    id v50 = [v46 parameterIdentifier];
    if (v50)
    {
      uint64_t v51 = v50;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v52 = 0;
    }
    else
    {
      uint64_t v52 = 1;
    }
    uint64_t v56 = v44;
    uint64_t v57 = v93;
    uint64_t v58 = (uint64_t)v89;
    uint64_t v59 = (uint64_t)v85;
    uint64_t v60 = type metadata accessor for UUID();
    sub_10000D5B0((uint64_t)v36, v52, 1, v60);
  }
  else
  {
    sub_100033768((uint64_t)v25, (uint64_t)v28);
    uint64_t v53 = v86;
    uint64_t v97 = v86;
    uint64_t v98 = v94;
    swift_bridgeObjectRetain();
    v54._uint64_t countAndFlagsBits = a1;
    v54._object = a2;
    String.append(_:)(v54);
    uint64_t v87 = v98;
    uint64_t v88 = v97;
    uint64_t v55 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 16))(v33, v28, v55);
    sub_100033878();
    sub_10000D5B0((uint64_t)v33, 0, 1, v55);
    uint64_t v36 = v33;
    uint64_t v45 = v53;
    uint64_t v56 = v44;
    uint64_t v57 = v93;
    uint64_t v58 = (uint64_t)v89;
    uint64_t v59 = (uint64_t)v85;
  }
  uint64_t v92 = a9;
  uint64_t v61 = v95;
  sub_1000345B8((uint64_t)v36, v95, &qword_10017C788);
  uint64_t v62 = v99;
  uint64_t v63 = v100;
  sub_100034614(v61, v96, &qword_10017C788);
  sub_100034614(v56, v59, (uint64_t *)&unk_10017FAE0);
  int v64 = sub_10000D5D8(v59, 1, v57);
  uint64_t v91 = v62;
  if (v64 == 1)
  {
    uint64_t v65 = v45;
    sub_1000347E8(v59, (uint64_t *)&unk_10017FAE0);
    unint64_t v66 = 0;
LABEL_14:
    uint64_t v77 = 0;
    uint64_t v73 = v94;
    uint64_t v78 = (uint64_t)v90;
    goto LABEL_15;
  }
  unint64_t v66 = *(void **)(v59 + *(int *)(v57 + 40));
  id v67 = v66;
  sub_100033878();
  if (!v66)
  {
    uint64_t v65 = v45;
    goto LABEL_14;
  }
  uint64_t v65 = v45;
  NSString v68 = String._bridgeToObjectiveC()();
  sub_100034614(a13, v58, (uint64_t *)&unk_10017D0C0);
  uint64_t v69 = type metadata accessor for URL();
  int v70 = sub_10000D5D8(v58, 1, v69);
  char v72 = 0;
  uint64_t v73 = v94;
  if (v70 != 1)
  {
    URL._bridgeToObjectiveC()(v71);
    char v72 = v74;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v69 - 8) + 8))(v58, v69);
  }
  id v75 = [v67 localizedStringForLocaleIdentifier:v68 bundleURL:v72];

  unint64_t v66 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v77 = v76;

  uint64_t v78 = (uint64_t)v90;
  uint64_t v57 = v93;
LABEL_15:
  sub_100034614(v56, v78, (uint64_t *)&unk_10017FAE0);
  if (sub_10000D5D8(v78, 1, v57) == 1)
  {
    sub_1000347E8(v78, (uint64_t *)&unk_10017FAE0);
    uint64_t v79 = 0;
    uint64_t v80 = 0;
  }
  else
  {
    uint64_t v81 = (uint64_t *)(v78 + *(int *)(v57 + 44));
    uint64_t v79 = *v81;
    uint64_t v80 = v81[1];
    swift_bridgeObjectRetain();
    sub_100033878();
  }
  objc_allocWithZone((Class)LNAutoShortcutLocalizedPhrase);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v82 = sub_100033220(v91, v63, v92, a10, v65, v73, v96, (uint64_t)v66, v77, v79, v80, a14 & 1);
  sub_1000347E8(v95, &qword_10017C788);
  return v82;
}

void *sub_100031FC4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v100 = a1;
  uint64_t v101 = a2;
  type metadata accessor for LNAppShortcutParameterRecord();
  sub_10000E948();
  uint64_t v98 = v5;
  uint64_t v99 = v4;
  __chkstk_darwin(v4);
  sub_100035CF8();
  unint64_t v8 = v6 - v7;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v77 - v11;
  unint64_t v82 = a3;
  if (a3 >> 62) {
    goto LABEL_54;
  }
  uint64_t v13 = *(void **)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t result = v13;
  if (!v13)
  {
LABEL_55:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
LABEL_3:
  unint64_t v15 = 0;
  unint64_t v81 = v82 & 0xC000000000000001;
  uint64_t v79 = v82 & 0xFFFFFFFFFFFFFF8;
  unint64_t v78 = v82 + 32;
  char v16 = _swiftEmptyArrayStorage;
  unint64_t v97 = v8;
  uint64_t v80 = result;
  while (1)
  {
    if (v81)
    {
      uint64_t v17 = (char *)v15;
      id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v15 >= *(void *)(v79 + 16))
      {
        __break(1u);
        return result;
      }
      uint64_t v17 = (char *)v15;
      id v18 = *(id *)(v78 + 8 * v15);
    }
    id v84 = v18;
    BOOL v19 = __OFADD__(v17, 1);
    uint64_t v20 = v17 + 1;
    if (v19)
    {
LABEL_53:
      __break(1u);
LABEL_54:
      swift_bridgeObjectRetain();
      uint64_t result = (void *)_CocoaArrayWrapper.endIndex.getter();
      if (!result) {
        goto LABEL_55;
      }
      goto LABEL_3;
    }
    uint64_t v83 = v20;
    id v21 = [v84 basePhraseTemplateSubstitutions];
    uint64_t v22 = sub_100035D70();
    sub_10000D9D4(v22, &qword_10017D780);
    unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v23 = v8;
    unint64_t v89 = v8;
    if (v8 >> 62) {
      break;
    }
    uint64_t v24 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v24) {
      goto LABEL_11;
    }
LABEL_43:

    uint64_t result = (void *)swift_bridgeObjectRelease();
    unint64_t v15 = (unint64_t)v83;
    if (v83 == v80) {
      goto LABEL_50;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  unint64_t v23 = v89;
  if (!v24) {
    goto LABEL_43;
  }
LABEL_11:
  unint64_t v25 = 0;
  unint64_t v88 = v23 & 0xC000000000000001;
  uint64_t v86 = v23 & 0xFFFFFFFFFFFFFF8;
  unint64_t v85 = v23 + 32;
  uint64_t v87 = v24;
  while (1)
  {
    if (v88)
    {
      uint64_t v26 = (char *)v25;
      id v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v25 >= *(void *)(v86 + 16)) {
        goto LABEL_52;
      }
      uint64_t v26 = (char *)v25;
      id v27 = *(id *)(v85 + 8 * v25);
    }
    id v102 = v27;
    BOOL v19 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v19)
    {
      __break(1u);
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    unint64_t v90 = v28;
    id v29 = [v102 parameterSubstitutions];
    uint64_t v30 = sub_100035D70();
    sub_10000D9D4(v30, (unint64_t *)&unk_10017EDD0);
    unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v8 >> 62) {
      break;
    }
    uint64_t v31 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v31) {
      goto LABEL_19;
    }
LABEL_42:

    swift_bridgeObjectRelease();
    unint64_t v25 = (unint64_t)v90;
    if (v90 == (void *)v87) {
      goto LABEL_43;
    }
  }
  sub_100035DA0();
  uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v31) {
    goto LABEL_42;
  }
LABEL_19:
  unint64_t v32 = 0;
  unint64_t v94 = v8;
  unint64_t v95 = v8 & 0xC000000000000001;
  unint64_t v91 = v8 + 32;
  uint64_t v92 = v8 & 0xFFFFFFFFFFFFFF8;
  uint64_t v93 = v31;
  while (1)
  {
    if (v95)
    {
      id v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v32 >= *(void *)(v92 + 16)) {
        goto LABEL_49;
      }
      id v33 = *(id *)(v91 + 8 * v32);
    }
    id v106 = v33;
    BOOL v19 = __OFADD__(v32, 1);
    unint64_t v34 = v32 + 1;
    if (v19) {
      break;
    }
    id v35 = [v106 substitutionValues];
    uint64_t v36 = sub_100035D70();
    sub_10000D9D4(v36, &qword_10017D788);
    unint64_t v37 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v37 >> 62)
    {
      sub_100035DA0();
      uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v31 = *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    unint64_t v96 = v34;
    if (v31)
    {
      if (v31 < 1) {
        goto LABEL_48;
      }
      uint64_t v38 = 0;
      unint64_t v103 = v37 & 0xC000000000000001;
      uint64_t v104 = v31;
      unint64_t v105 = v37;
      do
      {
        uint64_t v109 = v16;
        if (v103) {
          id v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v39 = *(id *)(v37 + 8 * v38 + 32);
        }
        id v40 = v39;
        id v41 = [v39 parameterIdentifier];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v42 = v101;
        swift_bridgeObjectRetain();
        id v43 = [v102 basePhraseTemplate];
        uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v107 = v45;
        uint64_t v108 = v44;

        id v46 = [v40 title];
        id v47 = [v40 titleKey];
        uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v50 = v49;

        id v51 = [v106 parameterIdentifier];
        uint64_t v52 = (uint64_t)v12;
        uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v55 = v54;

        id v56 = [v40 value];
        id v57 = objc_allocWithZone((Class)LNProperty);
        uint64_t v58 = v53;
        uint64_t v12 = (char *)v52;
        id v59 = sub_1000FC04C(v58, v55, v56);
        uint64_t v60 = v99;
        uint64_t v61 = (void *)(v52 + v99[5]);
        *uint64_t v61 = v100;
        v61[1] = v42;
        uint64_t v62 = (uint64_t *)(v52 + v60[6]);
        uint64_t v63 = v107;
        uint64_t *v62 = v108;
        v62[1] = v63;
        *(void *)(v52 + v60[7]) = v46;
        int v64 = (uint64_t *)(v52 + v60[8]);
        *int v64 = v48;
        v64[1] = v50;
        *(void *)(v52 + v60[9]) = v59;
        *(void *)(v52 + v60[10]) = 0;
        uint64_t v65 = (void *)(v52 + v60[11]);
        void *v65 = 0;
        v65[1] = 0;
        uint64_t v66 = v97;
        sub_1000333F0(v52, v97);
        char v16 = v109;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          char v72 = sub_100035C60();
          char v16 = (void *)sub_10001E8F8(v72, v73, v74, v75);
        }
        uint64_t v67 = v104;
        unint64_t v69 = v16[2];
        unint64_t v68 = v16[3];
        uint64_t v31 = v69 + 1;
        if (v69 >= v68 >> 1)
        {
          char v76 = sub_100035E4C(v68);
          char v16 = (void *)sub_10001E8F8(v76, v69 + 1, 1, (uint64_t)v16);
        }
        ++v38;
        v16[2] = v31;
        sub_100035D20();
        sub_100033768(v66, v70 + v71 * v69);

        sub_100033878();
        unint64_t v37 = v105;
      }
      while (v67 != v38);
    }

    swift_bridgeObjectRelease();
    unint64_t v8 = v94;
    unint64_t v32 = v96;
    if (v96 == v93) {
      goto LABEL_42;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t sub_1000326E4()
{
  sub_10000E788(v0 + 112);
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for AppShortcutInterpolator()
{
  return self;
}

uint64_t sub_100032740@<X0>(void *a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v31 - v8;
  double v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v31 - v12;
  id v14 = [a1 shortTitle:v11];
  if (v14)
  {
    unint64_t v15 = v14;
    id v16 = [v14 bundleURL];

    if (v16)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v17 = type metadata accessor for URL();
      uint64_t v18 = (uint64_t)v9;
      uint64_t v19 = 0;
    }
    else
    {
      uint64_t v17 = type metadata accessor for URL();
      uint64_t v18 = (uint64_t)v9;
      uint64_t v19 = 1;
    }
    sub_10000D5B0(v18, v19, 1, v17);
    sub_1000345B8((uint64_t)v9, (uint64_t)v13, (uint64_t *)&unk_10017D0C0);
    type metadata accessor for URL();
    if (sub_10000D5D8((uint64_t)v13, 1, v17) != 1)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v17 - 8) + 32))(a2, v13, v17);
      return sub_10000D5B0(a2, 0, 1, v17);
    }
  }
  else
  {
    uint64_t v20 = type metadata accessor for URL();
    sub_10000D5B0((uint64_t)v13, 1, 1, v20);
  }
  id v21 = [a1 phraseTemplates];
  sub_10000D9D4(0, (unint64_t *)&qword_10017EDC0);
  unint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v22 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v29) {
      goto LABEL_9;
    }
  }
  else if (*(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_9:
    sub_100058BCC(0, (v22 & 0xC000000000000001) == 0, v22);
    if ((v22 & 0xC000000000000001) != 0) {
      id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v23 = *(id *)(v22 + 32);
    }
    uint64_t v24 = v23;
    swift_bridgeObjectRelease();
    id v25 = [v24 bundleURL];

    if (v25)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v26 = 0;
    }
    else
    {
      uint64_t v26 = 1;
    }
    uint64_t v28 = type metadata accessor for URL();
    sub_10000D5B0((uint64_t)v6, v26, 1, v28);
    sub_1000345B8((uint64_t)v6, a2, (uint64_t *)&unk_10017D0C0);
    return sub_1000347E8((uint64_t)v13, (uint64_t *)&unk_10017D0C0);
  }
  swift_bridgeObjectRelease();
  uint64_t v30 = type metadata accessor for URL();
  sub_10000D5B0(a2, 1, 1, v30);
  return sub_1000347E8((uint64_t)v13, (uint64_t *)&unk_10017D0C0);
}

id sub_100032A94(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  if (!a4) {
    return 0;
  }
  swift_bridgeObjectRetain();
  id v13 = [a2 title];
  NSString v14 = String._bridgeToObjectiveC()();
  id v15 = [v13 localizedStringForLocaleIdentifier:v14];

  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  uint64_t v19 = sub_10000FDC0(a2, (SEL *)&selRef_systemImageName);
  uint64_t v21 = v20;
  id v22 = [a7 parameterIdentifier];
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = v24;

  id v26 = objc_allocWithZone((Class)LNAppShortcutDynamicOptionsProviderReference);
  id v27 = sub_100033558(a3, a4, v23, v25, a8, a1);
  id v28 = objc_allocWithZone((Class)LNAppShortcutOptionsCollection);
  return sub_1000335F8(v16, v18, v19, v21, v27);
}

uint64_t sub_100032C18()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100032CA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v12 = a1 == a5 && a2 == a6;
  if (v12 || (v13 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v13 & 1) != 0))
  {
    if (a3 == a7 && a4 == a8)
    {
      return 1;
    }
    else
    {
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

Swift::Int sub_100032D44()
{
  return Hasher._finalize()();
}

Swift::Int sub_100032DD4()
{
  return sub_100032D44();
}

uint64_t sub_100032DE0()
{
  return sub_100032C18();
}

Swift::Int sub_100032DEC()
{
  return Hasher._finalize()();
}

uint64_t sub_100032E70(uint64_t *a1, uint64_t *a2)
{
  return sub_100032CA4(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

id sub_100032E8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  NSString v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000D9D4(0, (unint64_t *)&qword_10017C780);
  v25.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (a9)
  {
    NSString v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v24 = 0;
  }
  if (a11)
  {
    NSString v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v23 = 0;
  }
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a17)
  {
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v19 = 0;
  }
  if (a18)
  {
    sub_10000D9D4(0, (unint64_t *)&qword_10017EDC0);
    v20.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v20.super.Class isa = 0;
  }
  id v21 = [v29 initWithBundleIdentifier:v28 localeIdentifier:v27 actionIdentifier:v26 orderedPhrases:v25.super.isa localizedShortTitle:v24 localizedAutoShortcutDescription:v23 systemImageName:v18 shortcutTileColor:a14 parameterPresentation:a15 attributionBundleIdentifier:v19 basePhraseTemplates:v20.super.isa];

  return v21;
}

id sub_1000330BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v13 = type metadata accessor for UUID();
  Class isa = 0;
  if (sub_10000D5D8(a7, 1, v13) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a7, v13);
  }
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v16 = [v18 initWithLocalizedPhrase:v10 bundleIdentifier:v11 basePhraseTemplate:v12 parameterIdentifier:isa primary:a8 & 1 signature:v15];

  return v16;
}

id sub_100033220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v16 = type metadata accessor for UUID();
  Class isa = 0;
  if (sub_10000D5D8(a7, 1, v16) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a7, v16);
  }
  if (a9)
  {
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v18 = 0;
  }
  if (a11)
  {
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v19 = 0;
  }
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  LOBYTE(v23) = a12 & 1;
  id v21 = [v24 initWithLocalizedPhrase:v13 bundleIdentifier:v14 basePhraseTemplate:v15 parameterIdentifier:isa optionsCollectionTitle:v18 optionsCollectionSystemImageName:v19 primary:v23 signature:v20];

  return v21;
}

uint64_t sub_1000333F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LNAppShortcutParameterRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id sub_100033454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a4)
  {
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v10 = 0;
  }
  uint64_t v11 = type metadata accessor for URL();
  NSString v13 = 0;
  if (sub_10000D5D8(a5, 1, v11) != 1)
  {
    URL._bridgeToObjectiveC()(v12);
    NSString v13 = v14;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(a5, v11);
  }
  id v15 = [v6 initWithKey:v9 table:v10 bundleURL:v13];

  return v15;
}

id sub_100033558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v11 = [v6 initWithAppShortcutsProviderMangledTypeName:v9 parameterIdentifier:v10 appShortcutIndex:a5 optionsProviderIndex:a6];

  return v11;
}

id sub_1000335F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a4)
  {
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v9 = 0;
  }
  id v10 = [v5 initWithLocalizedTitle:v8 systemImageName:v9 optionsProviderReference:a5];

  return v10;
}

id sub_100033698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a5)
  {
    sub_10000D9D4(0, &qword_10017D798);
    v9.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v9.super.Class isa = 0;
  }
  id v10 = [v5 initWithParameterIdentifier:v7 localizedSpecificTitle:v8 optionsCollections:v9.super.isa];

  return v10;
}

uint64_t sub_100033768(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LNAppShortcutParameterRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for AppShortcutInterpolator.Builder()
{
  uint64_t result = qword_10017D898;
  if (!qword_10017D898) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100033814(uint64_t a1)
{
  return a1;
}

uint64_t sub_100033840(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100033878()
{
  uint64_t v1 = sub_100035D70();
  v2(v1);
  sub_1000283FC();
  sub_100013EC4();
  v3();
  return v0;
}

uint64_t sub_1000338C8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_1000AC454(v2);
    uint64_t v2 = v3;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  uint64_t result = sub_100033934(v6);
  *a1 = v2;
  return result;
}

uint64_t sub_100033934(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3) {
        return sub_100033F9C(0, v3, 1, a1);
      }
      return result;
    }
    goto LABEL_124;
  }
  uint64_t v5 = result;
  uint64_t v107 = v1;
  uint64_t v101 = a1;
  id v102 = sub_1000E6290(v3 / 2);
  id v106 = v6;
  uint64_t v104 = v3;
  if (v3 <= 0)
  {
    NSArray v9 = (char *)_swiftEmptyArrayStorage;
    unint64_t v44 = _swiftEmptyArrayStorage[2];
LABEL_90:
    uint64_t result = (uint64_t)v9;
    if (v44 < 2)
    {
LABEL_101:
      uint64_t result = swift_bridgeObjectRelease();
      if (v104 >= -1)
      {
        v102[2] = 0;
        return swift_bridgeObjectRelease();
      }
      goto LABEL_129;
    }
    uint64_t v92 = *v101;
    while (1)
    {
      unint64_t v93 = v44 - 2;
      if (v44 < 2) {
        break;
      }
      if (!v92) {
        goto LABEL_133;
      }
      uint64_t v94 = result;
      uint64_t v95 = *(void *)(result + 32 + 16 * v93);
      uint64_t v96 = *(void *)(result + 32 + 16 * (v44 - 1) + 8);
      uint64_t result = sub_100034030((char *)(v92 + 48 * v95), (char *)(v92 + 48 * *(void *)(result + 32 + 16 * (v44 - 1))), v92 + 48 * v96, v106);
      if (v107) {
        goto LABEL_86;
      }
      if (v96 < v95) {
        goto LABEL_119;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_1000ABB38(v94);
        uint64_t v94 = result;
      }
      if (v93 >= *(void *)(v94 + 16)) {
        goto LABEL_120;
      }
      unint64_t v97 = (void *)(v94 + 32 + 16 * v93);
      *unint64_t v97 = v95;
      v97[1] = v96;
      unint64_t v98 = *(void *)(v94 + 16);
      if (v44 > v98) {
        goto LABEL_121;
      }
      memmove((void *)(v94 + 32 + 16 * (v44 - 1)), (const void *)(v94 + 32 + 16 * v44), 16 * (v98 - v44));
      uint64_t result = v94;
      *(void *)(v94 + 16) = v98 - 1;
      unint64_t v44 = v98 - 1;
      if (v98 <= 2) {
        goto LABEL_101;
      }
    }
LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
    return result;
  }
  uint64_t v7 = 0;
  uint64_t v8 = *a1;
  uint64_t v99 = *a1 + 40;
  uint64_t v100 = *a1 + 128;
  NSArray v9 = (char *)_swiftEmptyArrayStorage;
  uint64_t result = 48;
  uint64_t v10 = v104;
  uint64_t v103 = v5;
  uint64_t v105 = v8;
  while (1)
  {
    uint64_t v11 = v7++;
    if (v7 < v10)
    {
      unint64_t v12 = *(void *)(v8 + 48 * v7 + 32);
      unint64_t v13 = *(void *)(v8 + 48 * v11 + 32) >> 14;
      unint64_t v14 = v12 >> 14;
      uint64_t v7 = v11 + 2;
      if (v11 + 2 < v10)
      {
        id v15 = (unint64_t *)(v100 + 48 * v11);
        while (1)
        {
          unint64_t v17 = *v15;
          v15 += 6;
          unint64_t v16 = v17;
          if (v13 < v14 == v12 >> 14 >= v17 >> 14) {
            break;
          }
          ++v7;
          unint64_t v12 = v16;
          if (v7 >= v10)
          {
            uint64_t v7 = v10;
            break;
          }
        }
      }
      if (v13 < v14)
      {
        if (v7 < v11) {
          goto LABEL_126;
        }
        if (v11 < v7)
        {
          uint64_t v18 = 48 * v7;
          uint64_t v19 = 48 * v11;
          uint64_t v20 = v7;
          uint64_t v21 = v11;
          do
          {
            if (v21 != --v20)
            {
              if (!v8) {
                goto LABEL_132;
              }
              id v22 = (_OWORD *)(v8 + v19);
              uint64_t v23 = v8 + v18;
              uint64_t v24 = *(void *)(v8 + v19 + 16);
              uint64_t v25 = *(void *)(v8 + v19 + 24);
              long long v26 = *(_OWORD *)(v8 + v19);
              long long v27 = *(_OWORD *)(v8 + v19 + 32);
              long long v29 = *(_OWORD *)(v8 + v18 - 32);
              long long v28 = *(_OWORD *)(v8 + v18 - 16);
              _OWORD *v22 = *(_OWORD *)(v8 + v18 - 48);
              v22[1] = v29;
              long long v22[2] = v28;
              *(_OWORD *)(v23 - 48) = v26;
              *(void *)(v23 - 32) = v24;
              *(void *)(v23 - 24) = v25;
              *(_OWORD *)(v23 - 16) = v27;
            }
            ++v21;
            v18 -= 48;
            v19 += 48;
          }
          while (v21 < v20);
        }
      }
    }
    if (v7 < v10)
    {
      if (__OFSUB__(v7, v11)) {
        goto LABEL_123;
      }
      if (v7 - v11 < v5)
      {
        uint64_t v30 = v11 + v5;
        if (__OFADD__(v11, v5)) {
          goto LABEL_127;
        }
        if (v30 >= v10) {
          uint64_t v30 = v10;
        }
        if (v30 < v11) {
          goto LABEL_128;
        }
        if (v7 != v30)
        {
          uint64_t v31 = v99 + 48 * v7;
          do
          {
            unint64_t v32 = *(void *)(v8 + 48 * v7 + 32);
            uint64_t v33 = v11;
            uint64_t v34 = v31;
            do
            {
              if (v32 >> 14 <= *(void *)(v34 - 56) >> 14) {
                break;
              }
              if (!v8) {
                goto LABEL_130;
              }
              id v35 = (_OWORD *)(v34 - 40);
              uint64_t v36 = (_OWORD *)(v34 - 88);
              long long v38 = *(_OWORD *)(v34 - 72);
              long long v37 = *(_OWORD *)(v34 - 56);
              *(void *)(v34 - 48) = *(void *)v34;
              v34 -= 48;
              uint64_t v39 = *(void *)(v34 + 24);
              uint64_t v40 = *(void *)(v34 + 32);
              long long v41 = *(_OWORD *)(v34 + 8);
              *id v35 = *v36;
              v35[1] = v38;
              v35[2] = v37;
              *(_OWORD *)(v34 - 40) = v41;
              *(void *)(v34 - 24) = v39;
              *(void *)(v34 - 16) = v40;
              *(void *)(v34 - 8) = v32;
              ++v33;
            }
            while (v7 != v33);
            ++v7;
            v31 += 48;
          }
          while (v7 != v30);
          uint64_t v7 = v30;
        }
      }
    }
    if (v7 < v11) {
      goto LABEL_122;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1000ABA40(0, *((void *)v9 + 2) + 1, 1, v9);
      NSArray v9 = (char *)result;
    }
    unint64_t v43 = *((void *)v9 + 2);
    unint64_t v42 = *((void *)v9 + 3);
    unint64_t v44 = v43 + 1;
    uint64_t v8 = v105;
    if (v43 >= v42 >> 1)
    {
      uint64_t result = (uint64_t)sub_1000ABA40((char *)(v42 > 1), v43 + 1, 1, v9);
      uint64_t v8 = v105;
      NSArray v9 = (char *)result;
    }
    *((void *)v9 + 2) = v44;
    uint64_t v45 = v9 + 32;
    id v46 = &v9[16 * v43 + 32];
    *(void *)id v46 = v11;
    *((void *)v46 + 1) = v7;
    if (v43) {
      break;
    }
    unint64_t v44 = 1;
LABEL_81:
    uint64_t v5 = v103;
    uint64_t v10 = v104;
    uint64_t result = 48;
    if (v7 >= v104) {
      goto LABEL_90;
    }
  }
  while (1)
  {
    unint64_t v47 = v44 - 1;
    if (v44 >= 4)
    {
      uint64_t v52 = &v45[2 * v44];
      uint64_t v53 = *(v52 - 8);
      uint64_t v54 = *(v52 - 7);
      BOOL v58 = __OFSUB__(v54, v53);
      uint64_t v55 = v54 - v53;
      if (v58) {
        goto LABEL_107;
      }
      uint64_t v57 = *(v52 - 6);
      uint64_t v56 = *(v52 - 5);
      BOOL v58 = __OFSUB__(v56, v57);
      uint64_t v50 = v56 - v57;
      char v51 = v58;
      if (v58) {
        goto LABEL_108;
      }
      unint64_t v59 = v44 - 2;
      uint64_t v60 = &v45[2 * v44 - 4];
      uint64_t v62 = *v60;
      uint64_t v61 = v60[1];
      BOOL v58 = __OFSUB__(v61, v62);
      uint64_t v63 = v61 - v62;
      if (v58) {
        goto LABEL_109;
      }
      BOOL v58 = __OFADD__(v50, v63);
      uint64_t v64 = v50 + v63;
      if (v58) {
        goto LABEL_111;
      }
      if (v64 >= v55)
      {
        unint64_t v82 = &v45[2 * v47];
        uint64_t v84 = *v82;
        uint64_t v83 = v82[1];
        BOOL v58 = __OFSUB__(v83, v84);
        uint64_t v85 = v83 - v84;
        if (v58) {
          goto LABEL_117;
        }
        BOOL v75 = v50 < v85;
        goto LABEL_70;
      }
    }
    else
    {
      if (v44 != 3)
      {
        uint64_t v76 = *((void *)v9 + 4);
        uint64_t v77 = *((void *)v9 + 5);
        BOOL v58 = __OFSUB__(v77, v76);
        uint64_t v69 = v77 - v76;
        char v70 = v58;
        goto LABEL_64;
      }
      uint64_t v49 = *((void *)v9 + 4);
      uint64_t v48 = *((void *)v9 + 5);
      BOOL v58 = __OFSUB__(v48, v49);
      uint64_t v50 = v48 - v49;
      char v51 = v58;
    }
    if (v51) {
      goto LABEL_110;
    }
    unint64_t v59 = v44 - 2;
    uint64_t v65 = &v45[2 * v44 - 4];
    uint64_t v67 = *v65;
    uint64_t v66 = v65[1];
    BOOL v68 = __OFSUB__(v66, v67);
    uint64_t v69 = v66 - v67;
    char v70 = v68;
    if (v68) {
      goto LABEL_112;
    }
    uint64_t v71 = &v45[2 * v47];
    uint64_t v73 = *v71;
    uint64_t v72 = v71[1];
    BOOL v58 = __OFSUB__(v72, v73);
    uint64_t v74 = v72 - v73;
    if (v58) {
      goto LABEL_114;
    }
    if (__OFADD__(v69, v74)) {
      goto LABEL_116;
    }
    if (v69 + v74 >= v50)
    {
      BOOL v75 = v50 < v74;
LABEL_70:
      if (v75) {
        unint64_t v47 = v59;
      }
      goto LABEL_72;
    }
LABEL_64:
    if (v70) {
      goto LABEL_113;
    }
    unint64_t v78 = &v45[2 * v47];
    uint64_t v80 = *v78;
    uint64_t v79 = v78[1];
    BOOL v58 = __OFSUB__(v79, v80);
    uint64_t v81 = v79 - v80;
    if (v58) {
      goto LABEL_115;
    }
    if (v81 < v69) {
      goto LABEL_81;
    }
LABEL_72:
    unint64_t v86 = v47 - 1;
    if (v47 - 1 >= v44)
    {
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
      goto LABEL_118;
    }
    if (!v8) {
      goto LABEL_131;
    }
    uint64_t v87 = &v45[2 * v86];
    uint64_t v88 = *v87;
    unint64_t v89 = &v45[2 * v47];
    uint64_t v90 = v89[1];
    uint64_t result = sub_100034030((char *)(v8 + 48 * *v87), (char *)(v8 + 48 * *v89), v8 + 48 * v90, v106);
    if (v107) {
      break;
    }
    if (v90 < v88) {
      goto LABEL_104;
    }
    if (v47 > *((void *)v9 + 2)) {
      goto LABEL_105;
    }
    *uint64_t v87 = v88;
    v45[2 * v86 + 1] = v90;
    unint64_t v91 = *((void *)v9 + 2);
    if (v47 >= v91) {
      goto LABEL_106;
    }
    unint64_t v44 = v91 - 1;
    uint64_t result = (uint64_t)memmove(&v45[2 * v47], v89 + 2, 16 * (v91 - 1 - v47));
    *((void *)v9 + 2) = v91 - 1;
    uint64_t v8 = v105;
    if (v91 <= 2) {
      goto LABEL_81;
    }
  }
LABEL_86:
  uint64_t result = swift_bridgeObjectRelease();
  if (v104 < -1) {
    goto LABEL_125;
  }
  v102[2] = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_100033F9C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = *a4;
    uint64_t v5 = *a4 + 48 * a3 + 40;
    while (2)
    {
      unint64_t v6 = *(void *)(v4 + 48 * a3 + 32);
      uint64_t v7 = result;
      uint64_t v8 = v5;
      do
      {
        if (v6 >> 14 <= *(void *)(v8 - 56) >> 14) {
          break;
        }
        if (!v4)
        {
          __break(1u);
          return result;
        }
        NSArray v9 = (_OWORD *)(v8 - 40);
        uint64_t v10 = (_OWORD *)(v8 - 88);
        long long v12 = *(_OWORD *)(v8 - 72);
        long long v11 = *(_OWORD *)(v8 - 56);
        *(void *)(v8 - 48) = *(void *)v8;
        v8 -= 48;
        uint64_t v14 = *(void *)(v8 + 24);
        uint64_t v13 = *(void *)(v8 + 32);
        long long v15 = *(_OWORD *)(v8 + 8);
        *NSArray v9 = *v10;
        v9[1] = v12;
        v9[2] = v11;
        *(_OWORD *)(v8 - 40) = v15;
        *(void *)(v8 - 24) = v14;
        *(void *)(v8 - 16) = v13;
        *(void *)(v8 - 8) = v6;
        ++v7;
      }
      while (a3 != v7);
      ++a3;
      v5 += 48;
      if (a3 != a2) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t sub_100034030(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  unint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 48;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 48;
  if (v9 >= v11)
  {
    sub_100020BBC(a2, (uint64_t)(a3 - (void)a2) / 48, a4);
    unint64_t v12 = (unint64_t)&v4[48 * v11];
    if (v7 >= v6 || v10 < 48) {
      goto LABEL_41;
    }
    uint64_t v20 = (char *)(a3 - 48);
    while (1)
    {
      uint64_t v21 = v20 + 48;
      if (*((void *)v6 - 2) >> 14 >= *(void *)(v12 - 16) >> 14)
      {
        id v22 = (char *)(v12 - 48);
        BOOL v24 = v21 != (char *)v12 || (unint64_t)v20 >= v12;
        v12 -= 48;
        if (!v24) {
          goto LABEL_37;
        }
      }
      else
      {
        id v22 = v6 - 48;
        BOOL v23 = v21 != v6 || v20 >= v6;
        v6 -= 48;
        if (!v23) {
          goto LABEL_37;
        }
      }
      long long v25 = *(_OWORD *)v22;
      long long v26 = *((_OWORD *)v22 + 2);
      *((_OWORD *)v20 + 1) = *((_OWORD *)v22 + 1);
      *((_OWORD *)v20 + 2) = v26;
      *(_OWORD *)uint64_t v20 = v25;
LABEL_37:
      v20 -= 48;
      if (v6 <= v7 || v12 <= (unint64_t)v4) {
        goto LABEL_41;
      }
    }
  }
  sub_100020BBC(a1, (a2 - a1) / 48, a4);
  unint64_t v12 = (unint64_t)&v4[48 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 48)
  {
    do
    {
      if (*((void *)v4 + 4) >> 14 >= *((void *)v6 + 4) >> 14)
      {
        BOOL v13 = v7 == v4;
        uint64_t v14 = v4;
        v4 += 48;
        if (v13 && v7 < v4) {
          goto LABEL_16;
        }
      }
      else
      {
        BOOL v13 = v7 == v6;
        uint64_t v14 = v6;
        v6 += 48;
        if (v13 && v7 < v6) {
          goto LABEL_16;
        }
      }
      long long v17 = *(_OWORD *)v14;
      long long v18 = *((_OWORD *)v14 + 2);
      *((_OWORD *)v7 + 1) = *((_OWORD *)v14 + 1);
      *((_OWORD *)v7 + 2) = v18;
      *(_OWORD *)uint64_t v7 = v17;
LABEL_16:
      v7 += 48;
    }
    while ((unint64_t)v4 < v12 && (unint64_t)v6 < a3);
  }
  unint64_t v6 = v7;
LABEL_41:
  sub_100020BBC(v4, (uint64_t)(v12 - (void)v4) / 48, v6);
  return 1;
}

uint64_t sub_1000341DC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v9 = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  unint64_t v11 = v9 & ~v10;
  uint64_t v12 = v8 + 56;
  if ((*(void *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11))
  {
    uint64_t v13 = *(void *)(v8 + 48);
    uint64_t v14 = (void *)(v13 + 16 * v11);
    BOOL v15 = *v14 == a1 && v14[1] == a2;
    if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      uint64_t v16 = 0;
      int v17 = 1;
      goto LABEL_18;
    }
    uint64_t v18 = ~v10;
    unint64_t v11 = (v11 + 1) & ~v10;
    if ((*(void *)(v12 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11))
    {
      uint64_t v16 = 1;
      while (1)
      {
        uint64_t v19 = (void *)(v13 + 16 * v11);
        BOOL v20 = *v19 == a1 && v19[1] == a2;
        if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_7;
        }
        unint64_t v11 = (v11 + 1) & v18;
        if (((*(void *)(v12 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
        {
          int v17 = 0;
          goto LABEL_18;
        }
      }
    }
  }
  int v17 = 0;
  uint64_t v16 = 1;
LABEL_18:
  uint64_t v21 = *(void *)(v8 + 16);
  uint64_t v22 = v21 + v16;
  if (__OFADD__(v21, v16))
  {
    __break(1u);
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v23 = *(void *)(v8 + 24);
  if (v23 >= v22 && (a3 & 1) != 0)
  {
    if (!v17) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  if (a3)
  {
    sub_100024700();
  }
  else
  {
    if (v23 >= v22)
    {
      sub_100025DB0();
      if (!v17)
      {
LABEL_46:
        uint64_t v36 = *v4;
        *(void *)(*v4 + 8 * (v11 >> 6) + 56) |= 1 << v11;
        long long v37 = (uint64_t *)(*(void *)(v36 + 48) + 16 * v11);
        *long long v37 = a1;
        v37[1] = a2;
        uint64_t v38 = *(void *)(v36 + 16);
        BOOL v39 = __OFADD__(v38, 1);
        uint64_t v40 = v38 + 1;
        if (!v39)
        {
          uint64_t result = 0;
          *(void *)(v36 + 16) = v40;
          return result;
        }
        goto LABEL_49;
      }
LABEL_36:
      uint64_t v31 = (uint64_t *)(*(void *)(*v4 + 48) + 16 * v11);
      uint64_t result = *v31;
      uint64_t *v31 = a1;
      v31[1] = a2;
      return result;
    }
    sub_100026518();
  }
  uint64_t v24 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v25 = Hasher._finalize()();
  uint64_t v26 = -1 << *(unsigned char *)(v24 + 32);
  unint64_t v11 = v25 & ~v26;
  uint64_t v27 = v24 + 56;
  if (((*(void *)(v24 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    goto LABEL_45;
  }
  uint64_t v28 = *(void *)(v24 + 48);
  long long v29 = (void *)(v28 + 16 * v11);
  BOOL v30 = *v29 == a1 && v29[1] == a2;
  if (!v30 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v33 = ~v26;
    while (1)
    {
      unint64_t v11 = (v11 + 1) & v33;
      if (((*(void *)(v27 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
        break;
      }
      uint64_t v34 = (void *)(v28 + 16 * v11);
      BOOL v35 = *v34 == a1 && v34[1] == a2;
      if (v35 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_35;
      }
    }
LABEL_45:
    if ((v17 & 1) == 0) {
      goto LABEL_46;
    }
    goto LABEL_50;
  }
LABEL_35:
  if (v17) {
    goto LABEL_36;
  }
LABEL_50:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1000344C0(void *a1, SEL *a2, unint64_t *a3)
{
  id v4 = [a1 *a2];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  sub_10000D9D4(0, a3);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v6;
}

id sub_100034534(uint64_t a1, void *a2)
{
  return sub_100032A94(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void **)(v2 + 48), *(void *)(v2 + 56));
}

void sub_100034544(void **a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t sub_100034564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100030A7C(a1, a2, a3, *(void **)(v3 + 16));
}

unint64_t sub_10003456C()
{
  unint64_t result = qword_10017D7A8;
  if (!qword_10017D7A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D7A8);
  }
  return result;
}

uint64_t sub_1000345B8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10000BF1C(a3);
  sub_1000283FC();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t sub_100034614(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10000BF1C(a3);
  sub_1000283FC();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

unint64_t sub_100034670()
{
  unint64_t result = qword_10017D7C8;
  if (!qword_10017D7C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D7C8);
  }
  return result;
}

unint64_t sub_1000346BC()
{
  unint64_t result = qword_10017D7E8;
  if (!qword_10017D7E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D7E8);
  }
  return result;
}

unint64_t sub_100034708()
{
  unint64_t result = qword_10017D800;
  if (!qword_10017D800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D800);
  }
  return result;
}

uint64_t sub_100034754(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000BFDC(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100034798()
{
  unint64_t result = qword_10017D828;
  if (!qword_10017D828)
  {
    type metadata accessor for CharacterClass();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D828);
  }
  return result;
}

uint64_t sub_1000347E8(uint64_t a1, uint64_t *a2)
{
  sub_10000BF1C(a2);
  sub_1000283FC();
  sub_100013EC4();
  v3();
  return a1;
}

uint64_t sub_100034838(uint64_t a1)
{
  return a1;
}

unint64_t sub_100034868()
{
  unint64_t result = qword_10017D838;
  if (!qword_10017D838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D838);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Registry.IndexingQueue.Change.ChangeError(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *sub_100034908(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000349A4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000349CC()
{
  return 0;
}

void type metadata accessor for AppShortcutInterpolator.Error()
{
}

uint64_t destroy for AppShortcutInterpolator.Builder.RecordIdentifier()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for AppShortcutInterpolator.Builder.RecordIdentifier(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AppShortcutInterpolator.Builder.RecordIdentifier(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for AppShortcutInterpolator.Builder.RecordIdentifier(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *assignWithTake for AppShortcutInterpolator.Builder.RecordIdentifier(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AppShortcutInterpolator.Builder.RecordIdentifier(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppShortcutInterpolator.Builder.RecordIdentifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppShortcutInterpolator.Builder.RecordIdentifier()
{
  return &type metadata for AppShortcutInterpolator.Builder.RecordIdentifier;
}

uint64_t destroy for AssistantIntentPhraseInterpolator.ApplicationPlaceholder(uint64_t a1)
{
  sub_10000E788(a1);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AssistantIntentPhraseInterpolator.ApplicationPlaceholder(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for AssistantIntentPhraseInterpolator.ApplicationPlaceholder(uint64_t *a1, uint64_t *a2)
{
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *sub_100034C9C(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    long long v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        __n128 result = (uint64_t *)swift_release();
        *long long v3 = v12;
      }
      else
      {
        unint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *__n128 result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *long long v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for AssistantIntentPhraseInterpolator.ApplicationPlaceholder(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AssistantIntentPhraseInterpolator.ApplicationPlaceholder(uint64_t a1, uint64_t a2)
{
  sub_10000E788(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AssistantIntentPhraseInterpolator.ApplicationPlaceholder(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AssistantIntentPhraseInterpolator.ApplicationPlaceholder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for AppShortcutInterpolator.ApplicationPlaceholder()
{
}

char *sub_100034FCC(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v27 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Logger();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    int v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    long long v11 = *(_OWORD *)&a2[v8 + 24];
    *(_OWORD *)&a1[v8 + 24] = v11;
    (**(void (***)(char *, char *))(v11 - 8))(&a1[v8], &a2[v8]);
    uint64_t v12 = *((void *)v10 + 6);
    *((void *)v9 + 5) = *((void *)v10 + 5);
    *((void *)v9 + 6) = v12;
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    BOOL v15 = &a1[v13];
    uint64_t v16 = &a2[v13];
    uint64_t v17 = *((void *)v16 + 1);
    *(void *)BOOL v15 = *(void *)v16;
    *((void *)v15 + 1) = v17;
    *(void *)&a1[v14] = *(void *)&a2[v14];
    uint64_t v18 = a3[9];
    *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
    uint64_t v19 = &a1[v18];
    BOOL v20 = &a2[v18];
    long long v21 = *(_OWORD *)&a2[v18 + 24];
    *(_OWORD *)&a1[v18 + 24] = v21;
    uint64_t v22 = v21;
    long long v29 = **(void (***)(char *, char *, uint64_t))(v21 - 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v29(v19, v20, v22);
    uint64_t v23 = a3[11];
    *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
    uint64_t v24 = &a1[v23];
    Swift::Int v25 = &a2[v23];
    uint64_t v26 = *((void *)v25 + 1);
    *(void *)uint64_t v24 = *(void *)v25;
    *((void *)v24 + 1) = v26;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1000351D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  sub_10000E788(a1 + *(int *)(a2 + 20));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000E788(a1 + *(int *)(a2 + 36));

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000352A4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  long long v10 = *(_OWORD *)(a2 + v7 + 24);
  *(_OWORD *)(a1 + v7 + 24) = v10;
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + v7, a2 + v7);
  uint64_t v11 = *(void *)(v9 + 48);
  *(void *)(v8 + 40) = *(void *)(v9 + 40);
  *(void *)(v8 + 48) = v11;
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)(a1 + v12);
  BOOL v15 = (void *)(a2 + v12);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  *(void *)(a1 + v13) = *(void *)(a2 + v13);
  uint64_t v17 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  long long v20 = *(_OWORD *)(a2 + v17 + 24);
  *(_OWORD *)(a1 + v17 + 24) = v20;
  uint64_t v21 = v20;
  uint64_t v27 = **(void (***)(uint64_t, uint64_t, uint64_t))(v20 - 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v27(v18, v19, v21);
  uint64_t v22 = a3[11];
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (void *)(a2 + v22);
  uint64_t v25 = v24[1];
  void *v23 = *v24;
  v23[1] = v25;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100035460(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  sub_100034C9C((uint64_t *)(a1 + v7), (uint64_t *)(a2 + v7));
  *(void *)(v8 + 40) = *(void *)(v9 + 40);
  *(void *)(v8 + 48) = *(void *)(v9 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_100034C9C((uint64_t *)(a1 + a3[9]), (uint64_t *)(a2 + a3[9]));
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  uint64_t v13 = a3[11];
  uint64_t v14 = (void *)(a1 + v13);
  BOOL v15 = (void *)(a2 + v13);
  *uint64_t v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000355BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  long long v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
  *(void *)(v9 + 48) = *(void *)(v10 + 48);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  uint64_t v12 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  uint64_t v13 = a3[9];
  uint64_t v14 = a3[10];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = (long long *)(a2 + v13);
  long long v17 = *v16;
  long long v18 = v16[1];
  *(void *)(v15 + 32) = *((void *)v16 + 4);
  *(_OWORD *)uint64_t v15 = v17;
  *(_OWORD *)(v15 + 16) = v18;
  *(void *)(a1 + v14) = *(void *)(a2 + v14);
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_10003569C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  sub_10000E788(a1 + v7);
  long long v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
  *(void *)(v8 + 48) = *(void *)(v9 + 48);
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  *uint64_t v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[9];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  sub_10000E788(a1 + v16);
  long long v19 = *(_OWORD *)(v18 + 16);
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  *(_OWORD *)(v17 + 16) = v19;
  *(void *)(v17 + 32) = *(void *)(v18 + 32);
  uint64_t v20 = a3[11];
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (uint64_t *)(a2 + v20);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  void *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000357D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000357E8);
}

uint64_t sub_1000357E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100035D70();
  type metadata accessor for Logger();
  sub_100035C48();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return sub_10000D5D8(v3, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(v3 + *(int *)(a3 + 20) + 24);
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t sub_100035874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100035888);
}

void sub_100035888(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for Logger();
  sub_100035C48();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    sub_10000D5B0(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  }
}

uint64_t sub_100035914()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000359E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100035A20(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

__n128 initializeWithTake for AppShortcutIdentifierExtractionError(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t sub_100035A8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t sub_100035ACC(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 17))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100035B0C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for LocalizedAlternativeAppName()
{
}

unint64_t sub_100035B5C()
{
  unint64_t result = qword_10017D8E8;
  if (!qword_10017D8E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D8E8);
  }
  return result;
}

unint64_t sub_100035BB0()
{
  unint64_t result = qword_10017D8F0;
  if (!qword_10017D8F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D8F0);
  }
  return result;
}

uint64_t sub_100035C00(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100035C28(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100035C60()
{
  return 0;
}

uint64_t sub_100035C78()
{
  return swift_slowAlloc();
}

BOOL sub_100035C94(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100035CB0()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t sub_100035CD0()
{
  return swift_slowAlloc();
}

void sub_100035D08()
{
  uint64_t v3 = (void *)(*(void *)(v1 + 56) + 16 * v0);
  uint64_t v4 = *(void *)(v2 - 184);
  *uint64_t v3 = *(void *)(v2 - 192);
  v3[1] = v4;
}

uint64_t sub_100035D38()
{
  return swift_bridgeObjectRetain_n();
}

BOOL sub_100035D54(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100035D70()
{
  return 0;
}

uint64_t sub_100035DA0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100035DC0()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100035DD8()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100035E04()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_100035E24()
{
  return v0;
}

uint64_t sub_100035E38()
{
  return v0;
}

BOOL sub_100035E4C@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

void sub_100035E58(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_100035E78()
{
  return v0;
}

void *sub_100035E98()
{
  Table.init(_:database:)(__src, 0xD000000000000012, 0x80000001001433D0, 0, 0);
  return memcpy(&unk_1001818A0, __src, 0xA8uLL);
}

uint64_t sub_100035EF0(uint64_t a1)
{
  return sub_100035F34(a1, (uint64_t)&qword_100181948, 0xD000000000000010, 0x8000000100143090);
}

uint64_t sub_100035F14(uint64_t a1)
{
  return sub_100035F34(a1, (uint64_t)&qword_100181960, 0x617461646174656DLL, 0xE800000000000000);
}

uint64_t sub_100035F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_10000BF1C((uint64_t *)&unk_10017E920);
  unint64_t v7 = sub_100035F94();
  return ExpressionType.init(_:)(a3, a4, v6, v7);
}

unint64_t sub_100035F94()
{
  unint64_t result = qword_10017D650;
  if (!qword_10017D650)
  {
    sub_10000BFDC((uint64_t *)&unk_10017E920);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D650);
  }
  return result;
}

uint64_t sub_100035FE8(uint64_t a1)
{
  uint64_t v2 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for LNAssistantAppEntityRecord()
{
  return &type metadata for LNAssistantAppEntityRecord;
}

uint64_t sub_100036058(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = (uint64_t)_swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t result = sub_100042D80(a1);
    if (result < 0 || (unint64_t v5 = result, result >= 1 << *(unsigned char *)(a1 + 32)))
    {
LABEL_13:
      __break(1u);
      return (uint64_t)_swiftEmptyArrayStorage;
    }
    else
    {
      uint64_t v6 = a1 + 64;
      while ((*(void *)(v6 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
      {
        if (v4 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_17;
        }
        uint64_t v10 = v2;
        int v7 = v4;
        id v8 = *(id *)(*(void *)(a1 + 56) + 8 * v5);
        id v9 = [v8 remoteObjectProxy];
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        sub_10000BF1C((uint64_t *)&unk_10017DD80);
        swift_dynamicCast();

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        uint64_t result = specialized ContiguousArray._endMutation()();
        if ((uint64_t)v5 >= -(-1 << *(unsigned char *)(a1 + 32))) {
          goto LABEL_18;
        }
        if ((*(void *)(v6 + 8 * (v5 >> 6)) & (1 << v5)) == 0) {
          goto LABEL_19;
        }
        if (v7 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_20;
        }
        uint64_t result = _HashTable.occupiedBucket(after:)();
        uint64_t v2 = v10 - 1;
        if (v10 == 1) {
          return (uint64_t)_swiftEmptyArrayStorage;
        }
        unint64_t v5 = result;
        if ((result & 0x8000000000000000) == 0)
        {
          int v4 = *(_DWORD *)(a1 + 36);
          if (result < 1 << *(unsigned char *)(a1 + 32)) {
            continue;
          }
        }
        goto LABEL_13;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
    }
  }
  return result;
}

void *sub_10003624C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6)
  {
    uint64_t v21 = _swiftEmptyArrayStorage;
    uint64_t v6 = __chkstk_darwin(a1);
    v18[0] = v7;
    v18[1] = v8;
    long long v19 = &v21;
    sub_100040528(v6, v9, v10, 2, (uint64_t)sub_100042E30, (uint64_t)&v17);
    return v21;
  }
  else
  {
    uint64_t v12 = __chkstk_darwin(a1);
    long long v19 = v13;
    uint64_t v20 = v14;
    sub_100040528(v12, v15, v16, 2, (uint64_t)sub_100042E28, (uint64_t)v18);
    return _swiftEmptyArrayStorage;
  }
}

id sub_10003632C(void *a1, uint64_t (*a2)(void))
{
  id result = [a1 eventBody];
  if (result)
  {
    id v4 = result;
    char v5 = a2();

    return (id)(v5 & 1);
  }
  return result;
}

uint64_t sub_100036390(void *a1, uint64_t (*a2)(void), uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (uint64_t)[a1 eventBody];
  if (result)
  {
    id v12 = (id)result;
    char v13 = a2();

    if (v13)
    {
      id v14 = [v12 executionUUID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1000E6318();
      uint64_t v15 = *(void *)(*a4 + 16);
      sub_1000E638C(v15);
      uint64_t v16 = *a4;
      *(void *)(v16 + 16) = v15 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v16+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v15, v10, v7);

      return 1;
    }
    else
    {

      return 0;
    }
  }
  return result;
}

void sub_10003651C(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v25 = a3;
  id v28 = a2;
  uint64_t v4 = sub_10000BF1C((uint64_t *)&unk_10017DD10);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v25 - v8;
  sub_1000428EC(a1, v29);
  uint64_t v10 = v29[0];
  int64_t v30 = v29[3];
  unint64_t v11 = v29[4];
  uint64_t v26 = v29[1];
  int64_t v27 = (unint64_t)(v29[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  if (!v11) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v12 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  unint64_t v13 = v12 | (v30 << 6);
  while (1)
  {
    uint64_t v18 = *(void *)(v10 + 48);
    uint64_t v19 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v9, v18 + *(void *)(*(void *)(v19 - 8) + 72) * v13, v19);
    uint64_t v20 = *(void **)(*(void *)(v10 + 56) + 8 * v13);
    *(void *)&v9[*(int *)(v4 + 48)] = v20;
    sub_1000345B8((uint64_t)v9, (uint64_t)v6, (uint64_t *)&unk_10017DD10);
    sub_10000D9D4(0, (unint64_t *)&qword_10017DD30);
    id v21 = v20;
    if (static NSObject.== infix(_:_:)())
    {
      swift_release();
      uint64_t v22 = v25;
      sub_1000345B8((uint64_t)v6, v25, (uint64_t *)&unk_10017DD10);
      uint64_t v23 = v22;
      uint64_t v24 = 0;
      goto LABEL_24;
    }
    sub_100027D90((uint64_t)v6, (uint64_t *)&unk_10017DD10);
    if (v11) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v14 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v14 >= v27) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v26 + 8 * v14);
    int64_t v16 = v30 + 1;
    if (!v15)
    {
      int64_t v16 = v30 + 2;
      if (v30 + 2 >= v27) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v26 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = v30 + 3;
        if (v30 + 3 >= v27) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v26 + 8 * v16);
        if (!v15)
        {
          int64_t v16 = v30 + 4;
          if (v30 + 4 >= v27) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v26 + 8 * v16);
          if (!v15)
          {
            int64_t v16 = v30 + 5;
            if (v30 + 5 >= v27) {
              goto LABEL_23;
            }
            unint64_t v15 = *(void *)(v26 + 8 * v16);
            if (!v15)
            {
              int64_t v17 = v30 + 6;
              while (v17 < v27)
              {
                unint64_t v15 = *(void *)(v26 + 8 * v17++);
                if (v15)
                {
                  int64_t v16 = v17 - 1;
                  goto LABEL_18;
                }
              }
LABEL_23:
              swift_release();
              uint64_t v23 = v25;
              uint64_t v24 = 1;
LABEL_24:
              sub_10000D5B0(v23, v24, 1, v4);

              return;
            }
          }
        }
      }
    }
LABEL_18:
    unint64_t v11 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
    int64_t v30 = v16;
  }
  __break(1u);
}

uint64_t sub_100036818()
{
  id v0 = [(id)BiomeLibrary() App];
  swift_unknownObjectRelease();
  id v1 = [v0 Intents];
  swift_unknownObjectRelease();
  id v2 = [v1 Transcript];
  uint64_t result = swift_unknownObjectRelease();
  qword_10017D900 = (uint64_t)v2;
  return result;
}

uint64_t sub_1000368B4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000D844(v0, qword_100181978);
  sub_10000BEE4(v0, (uint64_t)qword_100181978);
  type metadata accessor for Transcript();
  sub_10000BF1C((uint64_t *)&unk_10017EAF0);
  String.init<A>(describing:)();
  uint64_t result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    String.init(cString:)();
    return Logger.init(subsystem:category:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10003695C()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = [self currentConnection];
  if (!v5)
  {
    uint64_t v6 = qword_10017C2A0;
    id v7 = v0;
    if (v6 != -1) {
      swift_once();
    }
    uint64_t v8 = sub_10000BEE4(v1, (uint64_t)qword_100181978);
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v8, v1);

    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      unint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "No current XPC connection.", v11, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    sub_10004296C();
    swift_allocError();
    *unint64_t v12 = 1;
    swift_willThrow();
  }
  return v5;
}

id sub_100036B64(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v7 = OBJC_IVAR____TtC10LinkDaemon10Transcript_nextActionObserverConnections;
  type metadata accessor for UUID();
  sub_10000D9D4(0, (unint64_t *)&unk_10017DD20);
  sub_100042E3C((unint64_t *)&qword_10017D340, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v8 = v3;
  *(void *)&v3[v7] = Dictionary.init(dictionaryLiteral:)();
  uint64_t v9 = OBJC_IVAR____TtC10LinkDaemon10Transcript_nextActionLock;
  sub_10000BF1C(&qword_10017DDB0);
  uint64_t v10 = swift_allocObject();
  *(_DWORD *)(v10 + 16) = 0;
  *(void *)&v8[v9] = v10;
  *(void *)&v8[OBJC_IVAR____TtC10LinkDaemon10Transcript_streamManager] = a1;
  *(void *)&v8[OBJC_IVAR____TtC10LinkDaemon10Transcript_observers] = a2;
  swift_retain();

  v19.receiver = v8;
  v19.super_class = ObjectType;
  id v11 = [super init];
  uint64_t v12 = qword_10017C2A0;
  id v13 = v11;
  if (v12 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10000BEE4(v14, (uint64_t)qword_100181978);
  unint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    int64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Starting Transcript", v17, 2u);
    sub_10000EB10();
  }
  swift_release();

  return v13;
}

uint64_t sub_100036D70(void *a1)
{
  uint64_t v3 = sub_10000BF1C(&qword_10017DCC0);
  __chkstk_darwin(v3 - 8);
  sub_10001B450();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = type metadata accessor for Logger();
  sub_10000E948();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  sub_10001B450();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = qword_10017C2A0;
  id v15 = v1;
  if (v14 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_10000BEE4(v7, (uint64_t)qword_100181978);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v13, v16, v7);

  int64_t v17 = a1;
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    id v37 = v15;
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v34 = (void *)swift_slowAlloc();
    uint64_t v35 = v13;
    *(_DWORD *)uint64_t v20 = 138412290;
    uint64_t v38 = v17;
    uint64_t v36 = v7;
    id v21 = v17;
    uint64_t v13 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v34 = v17;

    uint64_t v7 = v36;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "invalidatedConnection for %@", v20, 0xCu);
    sub_10000BF1C((uint64_t *)&unk_10017EB20);
    swift_arrayDestroy();
    sub_10000EB10();
    id v15 = v37;
    sub_10000EB10();
  }
  else
  {

    uint64_t v18 = v17;
  }

  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v13, v7);
  __chkstk_darwin(v22);
  *(&v33 - 2) = (uint64_t)v17;
  sub_100037348();
  uint64_t result = sub_100062550();
  if (v24)
  {
    uint64_t v25 = sub_10003E884(result, v24);
    uint64_t v27 = v26;
    uint64_t v29 = v28;
    uint64_t result = swift_bridgeObjectRelease();
    if (v27)
    {
      uint64_t v30 = type metadata accessor for TaskPriority();
      sub_10000D5B0(v6, 1, 1, v30);
      uint64_t v31 = (void *)swift_allocObject();
      v31[2] = 0;
      v31[3] = 0;
      v31[4] = v15;
      v31[5] = v25;
      v31[6] = v27;
      v31[7] = v29;
      id v32 = v15;
      sub_100011AA4(v6, (uint64_t)&unk_10017DCD0, (uint64_t)v31);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1000370D8(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_10000BF1C((uint64_t *)&unk_10017DD00);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = &v18[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = sub_10000BF1C(&qword_10017C788);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v18[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v13 = a2;
  uint64_t v14 = swift_bridgeObjectRetain();
  sub_10003651C(v14, v13, (uint64_t)v5);
  swift_bridgeObjectRelease();
  uint64_t v15 = sub_10000BF1C((uint64_t *)&unk_10017DD10);
  if (sub_10000D5D8((uint64_t)v5, 1, v15) == 1)
  {
    sub_100027D90((uint64_t)v5, (uint64_t *)&unk_10017DD00);
    sub_10000D5B0((uint64_t)v8, 1, 1, v9);
    return sub_100027D90((uint64_t)v8, &qword_10017C788);
  }

  uint64_t v16 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32);
  v16(v8, v5, v9);
  sub_10000D5B0((uint64_t)v8, 0, 1, v9);
  if (sub_10000D5D8((uint64_t)v8, 1, v9) == 1) {
    return sub_100027D90((uint64_t)v8, &qword_10017C788);
  }
  v16(v12, v8, v9);

  return (*(uint64_t (**)(unsigned char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_100037348()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10LinkDaemon10Transcript_nextActionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  sub_1000431C8();
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

uint64_t sub_1000373D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  void v7[2] = a4;
  v7[3] = a5;
  return _swift_task_switch(sub_1000373F4, 0, 0);
}

uint64_t sub_1000373F4()
{
  sub_10003F758();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_100037464()
{
}

uint64_t type metadata accessor for Transcript()
{
  return self;
}

uint64_t sub_100037534()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_100181990 = result;
  *(void *)algn_100181998 = v1;
  return result;
}

uint64_t sub_100037564()
{
  if (qword_10017C2A8 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_100181990;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_1000375CC(uint64_t a1, uint64_t a2, void *a3)
{
  sub_10000BF1C((uint64_t *)&unk_10017DDA0);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_10013EF20;
  *(void *)(v6 + 32) = a1;
  *(void *)(v6 + 40) = a2;
  *(void *)(v6 + 48) = a3;
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == a1 && v7 == a2)
  {
    id v20 = a3;
  }
  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain();
    id v10 = a3;
    swift_bridgeObjectRelease();
    if ((v9 & 1) == 0)
    {
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = sub_10003E884(v11, v12);
      uint64_t v15 = v14;
      int64_t v17 = v16;
      swift_bridgeObjectRelease();
      if (v15)
      {
        swift_bridgeObjectRetain();
        id v18 = v17;
        sub_10001ED1C();
        uint64_t v6 = (uint64_t)v19;
        v19[2] = 2;
        v19[7] = v13;
        v19[8] = v15;
        v19[9] = v18;

        swift_bridgeObjectRelease();
      }
    }
  }
  return v6;
}

id sub_10003771C(void *a1)
{
  char v3 = sub_100037A88(0xD000000000000025, 0x8000000100143560);
  char v4 = sub_100037A88(0xD000000000000024, 0x8000000100143530);
  if (v3)
  {
    if (v4)
    {
      if (qword_10017C2A0 != -1) {
        swift_once();
      }
      uint64_t v5 = type metadata accessor for Logger();
      sub_10000BEE4(v5, (uint64_t)qword_100181978);
      id v6 = a1;
      uint64_t v7 = (void *)sub_10004334C();
      os_log_type_t v8 = static os_log_type_t.debug.getter();
      if (sub_1000432F8(v8))
      {
        char v9 = (float *)sub_1000432DC();
        sub_1000432AC(v9, 1.5047e-36);
        [v1 processIdentifier];
        sub_1000431F0();

        sub_10004325C((void *)&_mh_execute_header, v10, v11, "Client with pid %d has privileged and observing entitlement. Exporting LNTranscriptXPCPrivilegedObservingInterface");
        sub_10000EB10();
      }
      else
      {
      }
      LNTranscriptXPCPrivilegedObservingInterface();
    }
    else
    {
      if (qword_10017C2A0 != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      sub_10000BEE4(v19, (uint64_t)qword_100181978);
      id v20 = a1;
      id v21 = (void *)sub_10004334C();
      os_log_type_t v22 = static os_log_type_t.debug.getter();
      if (sub_1000432F8(v22))
      {
        uint64_t v23 = (float *)sub_1000432DC();
        sub_1000432AC(v23, 1.5047e-36);
        [v1 processIdentifier];
        sub_1000431F0();

        sub_10004325C((void *)&_mh_execute_header, v24, v25, "Client with pid %d has privileged entitlement. Exporting LNTranscriptXPCPrivilegedInterface");
        sub_10000EB10();
      }
      else
      {
      }
      LNTranscriptXPCPrivilegedInterface();
    }
  }
  else if (v4)
  {
    if (qword_10017C2A0 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10000BEE4(v12, (uint64_t)qword_100181978);
    id v13 = a1;
    uint64_t v14 = (void *)sub_10004334C();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (sub_1000432F8(v15))
    {
      uint64_t v16 = (float *)sub_1000432DC();
      sub_1000432AC(v16, 1.5047e-36);
      [v1 processIdentifier];
      sub_1000431F0();

      sub_10004325C((void *)&_mh_execute_header, v17, v18, "Client with pid %d has observing entitlement. Exporting LNTranscriptXPCObservingInterface");
      sub_10000EB10();
    }
    else
    {
    }
    LNTranscriptXPCObservingInterface();
  }
  else
  {
    if (qword_10017C2A0 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10000BEE4(v26, (uint64_t)qword_100181978);
    id v27 = a1;
    uint64_t v28 = (void *)sub_10004334C();
    os_log_type_t v29 = static os_log_type_t.debug.getter();
    if (sub_1000432F8(v29))
    {
      uint64_t v30 = (float *)sub_1000432DC();
      sub_1000432AC(v30, 1.5047e-36);
      [v1 processIdentifier];
      sub_1000431F0();

      sub_10004325C((void *)&_mh_execute_header, v31, v32, "Client with pid %d lacks privileged or observing entitlement. Exporting LNTranscriptXPCInterface");
      sub_10000EB10();
    }
    else
    {
    }
    LNTranscriptXPCInterface();
  }
  sub_1000433AC();
  return v33;
}

uint64_t sub_100037A88(uint64_t a1, uint64_t a2)
{
  sub_10000D9D4(0, (unint64_t *)&qword_10017CE80);
  Class isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
  LOBYTE(a2) = sub_1000626C0(a1, a2, isa);

  return a2 & 1;
}

id sub_100037B08()
{
  if (sub_100037A88(0xD000000000000024, 0x8000000100143530)) {
    return (id)LNNextActionObserverXPCInterface();
  }
  else {
    return 0;
  }
}

void sub_100037B5C(void *a1, void *a2, void *aBlock)
{
  _Block_copy(aBlock);
  id v6 = sub_10003695C();
  sub_1000417BC();
  _Block_copy(aBlock);
  sub_100037C48((uint64_t)v6, a2, a1, (void (**)(void, void))aBlock);
  sub_1000E309C();

  swift_release();
  _Block_release(aBlock);

  _Block_release(aBlock);
}

void sub_100037C48(uint64_t a1, void *a2, void *a3, void (**a4)(void, void))
{
  uint64_t v95 = a4;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v97 = v7;
  uint64_t v98 = v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  unint64_t v93 = (char *)v90 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v94 = (uint8_t *)v90 - v15;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v90 - v16;
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  id v21 = (char *)v90 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v22 = sub_100037A88(0xD000000000000025, 0x8000000100143560);
  uint64_t v96 = v4;
  if ((v22 & 1) == 0)
  {
    uint64_t v23 = sub_100062550();
    if (!v24)
    {
      uint64_t v66 = qword_10017C2A0;
      id v67 = a2;
      if (v66 != -1) {
        swift_once();
      }
      uint64_t v68 = v97;
      uint64_t v69 = sub_10000BEE4(v97, (uint64_t)qword_100181978);
      uint64_t v70 = v98;
      (*(void (**)(char *, uint64_t, uint64_t))(v98 + 16))(v11, v69, v68);

      uint64_t v71 = a3;
      uint64_t v72 = Logger.logObject.getter();
      os_log_type_t v73 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v72, v73))
      {
        uint64_t v74 = (uint8_t *)swift_slowAlloc();
        BOOL v75 = (void *)swift_slowAlloc();
        uint64_t v94 = v74;
        *(_DWORD *)uint64_t v74 = 138412290;
        uint64_t v100 = v71;
        uint64_t v76 = v71;
        uint64_t v70 = v98;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *BOOL v75 = v71;

        _os_log_impl((void *)&_mh_execute_header, v72, v73, "Client lacks application-identifier entitlement. Failed to record %@", v94, 0xCu);
        sub_10000BF1C((uint64_t *)&unk_10017EB20);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v72 = v71;
      }
      uint64_t v40 = v95;

      (*(void (**)(char *, uint64_t))(v70 + 8))(v11, v97);
      sub_10004296C();
      swift_allocError();
      char v78 = 3;
      goto LABEL_32;
    }
    sub_100042CAC(v23, v24, a3);
    [a3 setSource:1];
  }
  uint64_t v25 = sub_100042C48(a3);
  if (!v26)
  {
    uint64_t v41 = qword_10017C2A0;
    id v42 = a2;
    if (v41 != -1) {
      swift_once();
    }
    uint64_t v43 = v97;
    uint64_t v44 = sub_10000BEE4(v97, (uint64_t)qword_100181978);
    uint64_t v45 = v98;
    (*(void (**)(char *, uint64_t, uint64_t))(v98 + 16))(v17, v44, v43);

    id v46 = a3;
    unint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      uint64_t v50 = (void *)swift_slowAlloc();
      uint64_t v94 = v49;
      *(_DWORD *)uint64_t v49 = 138412290;
      uint64_t v100 = v46;
      char v51 = v46;
      uint64_t v45 = v98;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v50 = v46;

      _os_log_impl((void *)&_mh_execute_header, v47, v48, "No bundle identifier set. Failed to record %@", v94, 0xCu);
      sub_10000BF1C((uint64_t *)&unk_10017EB20);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v43 = v97;
      swift_slowDealloc();
    }
    else
    {

      unint64_t v47 = v46;
    }
    uint64_t v40 = v95;

    (*(void (**)(char *, uint64_t))(v45 + 8))(v17, v43);
    sub_10004296C();
    swift_allocError();
    char v78 = 2;
    goto LABEL_32;
  }
  uint64_t v27 = v25;
  unint64_t v28 = v26;
  id v29 = [a3 executionDate];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  Date.timeIntervalSinceNow.getter();
  double v31 = v30;
  uint64_t v32 = *(void (**)(char *, uint64_t))(v19 + 8);
  v32(v21, v18);
  if (v31 >= 5.0)
  {
    unint64_t v93 = (char *)v32;
    swift_bridgeObjectRelease();
    uint64_t v52 = qword_10017C2A0;
    id v53 = a2;
    if (v52 != -1) {
      swift_once();
    }
    uint64_t v54 = v97;
    uint64_t v55 = sub_10000BEE4(v97, (uint64_t)qword_100181978);
    uint64_t v56 = v94;
    (*(void (**)(uint8_t *, uint64_t, uint64_t))(v98 + 16))(v94, v55, v54);

    id v57 = a3;
    BOOL v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = swift_slowAlloc();
      unint64_t v91 = (void *)swift_slowAlloc();
      uint64_t v92 = swift_slowAlloc();
      uint64_t v100 = v92;
      *(_DWORD *)uint64_t v60 = 136315394;
      v90[1] = v60 + 4;
      id v61 = [v57 executionDate];
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100042E3C((unint64_t *)&unk_10017F990, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v62 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v64 = v63;
      ((void (*)(char *, uint64_t))v93)(v21, v18);
      uint64_t v99 = sub_100013090(v62, v64, (uint64_t *)&v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v60 + 12) = 2112;
      uint64_t v99 = (uint64_t)v57;
      id v65 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v91 = v57;

      _os_log_impl((void *)&_mh_execute_header, v58, v59, "Expected execution date to be recent, found %s. Discarding %@.", (uint8_t *)v60, 0x16u);
      sub_10000BF1C((uint64_t *)&unk_10017EB20);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint8_t *, uint64_t))(v98 + 8))(v94, v97);
    }
    else
    {

      (*(void (**)(uint8_t *, uint64_t))(v98 + 8))(v56, v54);
    }
    sub_10004296C();
    swift_allocError();
    unsigned char *v79 = 1;
    uint64_t v80 = (void *)_convertErrorToNSError(_:)();
    uint64_t v40 = v95;
    goto LABEL_33;
  }
  swift_bridgeObjectRetain();
  uint64_t v33 = sub_10003E884(v27, v28);
  uint64_t v35 = v34;
  id v37 = v36;
  swift_bridgeObjectRelease_n();
  uint64_t v38 = v98;
  if (!v35)
  {
    uint64_t v81 = qword_10017C2A0;
    id v82 = a2;
    if (v81 != -1) {
      swift_once();
    }
    uint64_t v83 = v97;
    uint64_t v84 = sub_10000BEE4(v97, (uint64_t)qword_100181978);
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v93, v84, v83);

    uint64_t v85 = a3;
    unint64_t v86 = Logger.logObject.getter();
    os_log_type_t v87 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v86, v87))
    {
      uint64_t v88 = (uint8_t *)swift_slowAlloc();
      uint64_t v94 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v88 = 138412290;
      uint64_t v100 = v85;
      unint64_t v89 = v85;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(void *)uint64_t v94 = v85;

      _os_log_impl((void *)&_mh_execute_header, v86, v87, "Stream reference nil. Failed to record %@", v88, 0xCu);
      sub_10000BF1C((uint64_t *)&unk_10017EB20);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      unint64_t v86 = v85;
    }
    uint64_t v40 = v95;

    (*(void (**)(char *, uint64_t))(v38 + 8))(v93, v97);
    sub_10004296C();
    swift_allocError();
    char v78 = 1;
LABEL_32:
    *uint64_t v77 = v78;
    uint64_t v80 = (void *)_convertErrorToNSError(_:)();
LABEL_33:
    ((void (**)(void, void *))v40)[2](v40, v80);

    swift_errorRelease();
    goto LABEL_34;
  }
  uint64_t v39 = sub_1000375CC(v33, v35, v37);
  sub_10003881C(a3, v39);
  swift_bridgeObjectRelease();
  uint64_t v40 = v95;
  v95[2](v95, 0);

  swift_bridgeObjectRelease();
LABEL_34:
  _Block_release(v40);
}

void sub_10003881C(void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)type metadata accessor for Notification();
  uint64_t v65 = *(v4 - 1);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v83 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v77 = (char *)&v61 - v7;
  id v8 = [a1 asBMAppIntentInvocation];
  if (qword_10017C298 != -1) {
    goto LABEL_40;
  }
  while (1)
  {
    id v9 = [(id)qword_10017D900 source];
    [v9 sendEvent:v8];

    uint64_t v10 = *(void *)(a2 + 16);
    uint64_t v11 = _swiftEmptyArrayStorage;
    id v66 = v8;
    if (v10)
    {
      id v82 = v4;
      swift_bridgeObjectRetain();
      uint64_t v12 = (void **)(a2 + 48);
      uint64_t v13 = (uint64_t)a1;
      uint64_t v14 = v10;
      do
      {
        uint64_t v15 = *v12;
        v12 += 3;
        swift_bridgeObjectRetain();
        id v16 = v15;
        sub_10003F500(v13);

        swift_bridgeObjectRelease();
        --v14;
      }
      while (v14);
      swift_bridgeObjectRelease();
      uint64_t v84 = _swiftEmptyArrayStorage;
      sub_100057848();
      uint64_t v11 = v84;
      uint64_t v17 = (uint64_t *)(a2 + 40);
      do
      {
        uint64_t v19 = *(v17 - 1);
        uint64_t v18 = *v17;
        uint64_t v84 = v11;
        unint64_t v21 = v11[2];
        unint64_t v20 = v11[3];
        swift_bridgeObjectRetain();
        if (v21 >= v20 >> 1)
        {
          sub_100057848();
          uint64_t v11 = v84;
        }
        v17 += 3;
        v11[2] = v21 + 1;
        char v22 = &v11[2 * v21];
        v22[4] = v19;
        v22[5] = v18;
        --v10;
      }
      while (v10);
      a1 = (void *)v13;
      id v8 = v66;
      uint64_t v4 = v82;
    }
    if (qword_10017C2A0 != -1) {
      swift_once();
    }
    uint64_t v80 = type metadata accessor for Logger();
    sub_10000BEE4(v80, (uint64_t)qword_100181978);
    swift_bridgeObjectRetain_n();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    BOOL v25 = os_log_type_enabled(v23, v24);
    uint64_t v71 = v11;
    if (v25)
    {
      unint64_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v84 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v26 = 136315138;
      id v82 = v26 + 4;
      swift_bridgeObjectRetain();
      uint64_t v27 = Array.description.getter();
      unint64_t v29 = v28;
      swift_bridgeObjectRelease();
      uint64_t v30 = v27;
      id v8 = v66;
      uint64_t v85 = sub_100013090(v30, v29, (uint64_t *)&v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Wrote action record to streams %s", v26, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v31 = *(void *)(v63 + OBJC_IVAR____TtC10LinkDaemon10Transcript_observers);
    uint64_t v70 = *(void *)(v31 + 16);
    if (!v70) {
      break;
    }
    uint64_t v62 = a1;
    a2 = (uint64_t)v71;
    uint64_t v69 = v71[2];
    uint64_t v68 = v31 + 32;
    char v78 = (void (**)(void *, id))(v65 + 8);
    uint64_t v79 = v65 + 16;
    swift_bridgeObjectRetain();
    unint64_t v32 = 0;
    id v67 = (uint64_t *)(a2 + 40);
    *(void *)&long long v33 = 136315138;
    long long v75 = v33;
    uint64_t v74 = (char *)&type metadata for Any + 8;
    a1 = v83;
    uint64_t v64 = v31;
    while (v32 < *(void *)(v31 + 16))
    {
      unint64_t v73 = v32;
      id v82 = (void *)*sub_10000BEA0((void *)(v68 + 40 * v32), *(void *)(v68 + 40 * v32 + 24));
      swift_bridgeObjectRetain();
      uint64_t v34 = v69;
      uint64_t v85 = Set.init(minimumCapacity:)();
      uint64_t v35 = v67;
      for (uint64_t i = v34; i; --i)
      {
        uint64_t v37 = *(v35 - 1);
        uint64_t v38 = *v35;
        swift_bridgeObjectRetain();
        sub_100023984((uint64_t *)&v84, v37, v38);
        swift_bridgeObjectRelease();
        v35 += 2;
      }
      swift_bridgeObjectRelease();
      a2 = v85;
      uint64_t v39 = sub_1000ACA3C(v85, (uint64_t)&_swiftEmptySetSingleton);
      swift_bridgeObjectRelease();
      uint64_t v40 = v39[2];
      uint64_t v41 = v77;
      if (v40)
      {
        id v42 = (char *)v39
            + ((*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80));
        uint64_t v43 = *(void *)(v65 + 72);
        uint64_t v44 = *(void (**)(void, void, void))(v65 + 16);
        uint64_t v72 = v39;
        swift_bridgeObjectRetain();
        uint64_t v76 = v43;
        uint64_t v81 = v44;
        do
        {
          v44(v41, v42, v4);
          Class isa = Notification._bridgeToObjectiveC()().super.isa;
          [v82 postNotification:isa];

          if (qword_10017C460 != -1) {
            swift_once();
          }
          sub_10000BEE4(v80, (uint64_t)qword_100181ED8);
          v44(a1, v41, v4);
          id v46 = Logger.logObject.getter();
          os_log_type_t v47 = static os_log_type_t.default.getter();
          a2 = v47;
          if (os_log_type_enabled(v46, v47))
          {
            os_log_type_t v48 = (void (**)(char *, id))v78;
            uint64_t v49 = swift_slowAlloc();
            uint64_t v84 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v49 = v75;
            uint64_t v50 = Notification.description.getter();
            *(void *)(v49 + 4) = sub_100013090(v50, v51, (uint64_t *)&v84);
            swift_bridgeObjectRelease();
            uint64_t v52 = (void (*)(char *, void *))*v48;
            (*v48)(v83, v4);
            uint64_t v43 = v76;
            _os_log_impl((void *)&_mh_execute_header, v46, (os_log_type_t)a2, "Sent transcript notification %s", (uint8_t *)v49, 0xCu);
            swift_arrayDestroy();
            a1 = v83;
            swift_slowDealloc();
            uint64_t v41 = v77;
            swift_slowDealloc();
          }
          else
          {
            uint64_t v52 = (void (*)(char *, void *))*v78;
            (*v78)(a1, v4);
          }

          v52(v41, v4);
          v42 += v43;
          --v40;
          uint64_t v44 = v81;
        }
        while (v40);
        swift_bridgeObjectRelease_n();
        id v8 = v66;
        uint64_t v31 = v64;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      unint64_t v32 = v73 + 1;
      if (v73 + 1 == v70)
      {
        swift_bridgeObjectRelease();
        a1 = v62;
        goto LABEL_32;
      }
    }
    __break(1u);
LABEL_40:
    swift_once();
  }
LABEL_32:
  swift_bridgeObjectRelease();
  uint64_t v53 = v63 + OBJC_IVAR____TtC10LinkDaemon10Transcript_nextActionObserverConnections;
  swift_beginAccess();
  if (*(void *)(*(void *)v53 + 16))
  {
    id v54 = [a1 actionOutput];
    if (v54)
    {
      uint64_t v55 = v54;
      id v56 = [v54 nextAction];

      if (v56)
      {
        sub_100042C48(a1);
        if (v57)
        {
          unint64_t v58 = sub_10003E4E8();
          id v59 = v56;
          id v60 = a1;
          swift_bridgeObjectRetain();
          sub_10003CBF8(v58, v59, v60);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
    }
  }
}

void sub_100039140(uint64_t a1, void *a2, uint64_t a3, NSObject *a4, void *a5)
{
  uint64_t v9 = type metadata accessor for OSSignpostID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  _Block_copy(a5);
  uint64_t v13 = (void (*)(void *, uint64_t))sub_10003695C();
  static OSSignpostID.exclusive.getter();
  sub_1000B4C00();
  _Block_copy(a5);
  sub_100039304(a1, a2, a4, v13, (void (**)(void, void))a5);
  sub_1000E309C();
  swift_release();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);

  _Block_release(a5);
  _Block_release(a5);
}

void sub_100039304(uint64_t a1, void *a2, NSObject *a3, void (*a4)(void *, uint64_t), void (**a5)(void, void))
{
  uint64_t v162 = a3;
  os_log_type_t v157 = a4;
  uint64_t v158 = a5;
  uint64_t v159 = a1;
  uint64_t v160 = a2;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v156 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v151 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v163 = *(void *)(v8 - 8);
  uint64_t v164 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v151 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v151 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v151 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  unint64_t v20 = (char *)&v151 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v151 - v22;
  __chkstk_darwin(v21);
  BOOL v25 = (char *)&v151 - v24;
  sub_10000D9D4(0, &qword_10017DD90);
  sub_10000D9D4(0, &qword_10017DD98);
  unint64_t v26 = v161;
  uint64_t v27 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
  if (v26)
  {
    swift_errorRelease();
    unint64_t v28 = v158;
    uint64_t v29 = v164;
    uint64_t v30 = v162;
LABEL_3:
    uint64_t v31 = qword_10017C2A0;
    unint64_t v32 = v30;
    uint64_t v33 = v163;
    if (v31 != -1) {
      swift_once();
    }
    uint64_t v34 = sub_10000BEE4(v29, (uint64_t)qword_100181978);
    (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v11, v34, v29);

    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Deserialization failed. Failed to record action record.", v37, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v29);
    sub_10004296C();
    swift_allocError();
    *uint64_t v38 = 1;
    uint64_t v39 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void *))v28)[2](v28, v39);

    swift_errorRelease();
    goto LABEL_8;
  }
  uint64_t v160 = v7;
  uint64_t v161 = v14;
  char v154 = v17;
  uint64_t v155 = v20;
  uint64_t v159 = v5;
  if (!v27)
  {
    unint64_t v28 = v158;
    uint64_t v29 = v164;
    uint64_t v30 = v162;
    goto LABEL_3;
  }
  uint64_t v40 = v27;
  uint64_t v41 = sub_100042C48(v27);
  uint64_t v43 = v162;
  if (v42)
  {
    uint64_t v44 = v41;
    unint64_t v45 = v42;
    swift_bridgeObjectRetain();
    uint64_t v46 = sub_100062550();
    if (v47)
    {
      if (v44 == v46 && v45 == v47)
      {
        uint64_t v49 = v44;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v51 = v163;
        uint64_t v52 = v160;
        goto LABEL_29;
      }
      uint64_t v49 = v44;
      char v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v51 = v163;
      uint64_t v52 = v160;
      if (v50)
      {
LABEL_29:
        if ([v40 source] == 1)
        {
          uint64_t v161 = 0;
          id v153 = v40;
          id v77 = [v40 executionDate];
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          Date.timeIntervalSinceNow.getter();
          double v79 = v78;
          uint64_t v80 = v156 + 8;
          uint64_t v81 = *(void (**)(void *, uint64_t))(v156 + 8);
          uint64_t v82 = v159;
          v81(v52, v159);
          uint64_t v83 = v164;
          if (v79 < 5.0)
          {
            os_log_type_t v157 = v81;
            uint64_t v84 = v162;
            swift_bridgeObjectRetain();
            uint64_t v85 = sub_10003E884(v49, v45);
            uint64_t v87 = v86;
            unint64_t v89 = v88;
            swift_bridgeObjectRelease_n();
            if (v87)
            {
              uint64_t v90 = sub_1000375CC(v85, v87, v89);
              id v91 = v153;
              id v92 = [v153 executionDate];
              unint64_t v93 = v160;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              Date.timeIntervalSinceReferenceDate.getter();
              v157(v93, v159);
              sub_10003881C(v91, v90);
              swift_bridgeObjectRelease();
              uint64_t v94 = v89;
              unint64_t v28 = v158;
              v158[2](v158, 0);

              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v137 = qword_10017C2A0;
              uint64_t v138 = v84;
              if (v137 != -1) {
                swift_once();
              }
              uint64_t v139 = v164;
              uint64_t v140 = sub_10000BEE4(v164, (uint64_t)qword_100181978);
              uint64_t v141 = v154;
              (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v154, v140, v139);

              uint64_t v142 = v153;
              uint64_t v143 = Logger.logObject.getter();
              os_log_type_t v144 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v143, v144))
              {
                uint64_t v145 = (uint8_t *)swift_slowAlloc();
                uint64_t v146 = (void *)swift_slowAlloc();
                *(_DWORD *)uint64_t v145 = 138412290;
                uint64_t v166 = v142;
                uint64_t v147 = v142;
                uint64_t v148 = v163;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                void *v146 = v153;

                uint64_t v139 = v164;
                _os_log_impl((void *)&_mh_execute_header, v143, v144, "Stream reference nil. Failed to record %@.", v145, 0xCu);
                sub_10000BF1C((uint64_t *)&unk_10017EB20);
                swift_arrayDestroy();
                swift_slowDealloc();
                uint64_t v141 = v154;
                swift_slowDealloc();
                unint64_t v28 = v158;
              }
              else
              {

                uint64_t v143 = v142;
                unint64_t v28 = v158;
                uint64_t v148 = v51;
              }

              (*(void (**)(char *, uint64_t))(v148 + 8))(v141, v139);
              sub_10004296C();
              swift_allocError();
              *uint64_t v149 = 1;
              uint64_t v150 = (void *)_convertErrorToNSError(_:)();
              ((void (**)(void, void *))v28)[2](v28, v150);

              swift_errorRelease();
            }
            goto LABEL_8;
          }
          uint64_t v156 = v80;
          swift_bridgeObjectRelease();
          uint64_t v113 = qword_10017C2A0;
          uint64_t v114 = v162;
          if (v113 != -1) {
            swift_once();
          }
          uint64_t v115 = sub_10000BEE4(v83, (uint64_t)qword_100181978);
          uint64_t v116 = v51;
          id v117 = v155;
          (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v155, v115, v83);

          id v118 = v153;
          id v104 = v153;
          uint64_t v119 = Logger.logObject.getter();
          os_log_type_t v120 = static os_log_type_t.error.getter();
          int v121 = v120;
          if (os_log_type_enabled(v119, v120))
          {
            uint64_t v122 = swift_slowAlloc();
            LODWORD(v154) = v121;
            uint64_t v123 = v82;
            os_log_t v152 = v119;
            uint64_t v124 = v122;
            uint64_t v125 = swift_slowAlloc();
            os_log_type_t v157 = v81;
            uint64_t v126 = (void *)v125;
            uint64_t v162 = swift_slowAlloc();
            uint64_t v166 = v162;
            *(_DWORD *)uint64_t v124 = 136315394;
            id v127 = [v104 executionDate];
            uint64_t v128 = v160;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            sub_100042E3C((unint64_t *)&unk_10017F990, (void (*)(uint64_t))&type metadata accessor for Date);
            uint64_t v129 = dispatch thunk of CustomStringConvertible.description.getter();
            id v130 = v118;
            unint64_t v132 = v131;
            v157(v128, v123);
            uint64_t v165 = sub_100013090(v129, v132, (uint64_t *)&v166);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v124 + 12) = 2112;
            uint64_t v165 = (uint64_t)v104;
            id v133 = v104;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *uint64_t v126 = v130;

            os_log_t v134 = v152;
            _os_log_impl((void *)&_mh_execute_header, v152, (os_log_type_t)v154, "Expected execution date to be recent, found %s. Discarding %@.", (uint8_t *)v124, 0x16u);
            sub_10000BF1C((uint64_t *)&unk_10017EB20);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*(void (**)(char *, uint64_t))(v163 + 8))(v155, v164);
          }
          else
          {

            (*(void (**)(char *, uint64_t))(v116 + 8))(v117, v83);
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v99 = qword_10017C2A0;
          uint64_t v100 = v162;
          if (v99 != -1) {
            swift_once();
          }
          uint64_t v101 = v164;
          uint64_t v102 = sub_10000BEE4(v164, (uint64_t)qword_100181978);
          uint64_t v103 = v23;
          (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v23, v102, v101);

          id v104 = v40;
          uint64_t v105 = Logger.logObject.getter();
          os_log_type_t v106 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v105, v106))
          {
            uint64_t v107 = swift_slowAlloc();
            id v153 = v40;
            uint64_t v108 = v107;
            uint64_t v160 = (void *)swift_slowAlloc();
            uint64_t v162 = swift_slowAlloc();
            uint64_t v166 = v162;
            *(_DWORD *)uint64_t v108 = 136315394;
            LOWORD(v165) = (unsigned __int16)[v104 source];
            type metadata accessor for LNTranscriptActionSource(0);
            uint64_t v109 = String.init<A>(describing:)();
            uint64_t v161 = 0;
            uint64_t v165 = sub_100013090(v109, v110, (uint64_t *)&v166);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v108 + 12) = 2112;
            uint64_t v165 = (uint64_t)v104;
            uint64_t v111 = v103;
            id v112 = v104;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *uint64_t v160 = v153;

            _os_log_impl((void *)&_mh_execute_header, v105, v106, "Expected source to be app, found %s. Discarding %@.", (uint8_t *)v108, 0x16u);
            sub_10000BF1C((uint64_t *)&unk_10017EB20);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*(void (**)(char *, uint64_t))(v163 + 8))(v111, v164);
          }
          else
          {

            (*(void (**)(char *, uint64_t))(v51 + 8))(v103, v164);
          }
        }
        sub_10004296C();
        swift_allocError();
        *uint64_t v135 = 1;
        uint64_t v136 = (void *)_convertErrorToNSError(_:)();
        unint64_t v28 = v158;
        ((void (**)(void, void *))v158)[2](v158, v136);

        swift_errorRelease();
        goto LABEL_8;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v51 = v163;
    }
    swift_bridgeObjectRelease();
    uint64_t v65 = qword_10017C2A0;
    id v66 = v43;
    if (v65 != -1) {
      swift_once();
    }
    uint64_t v67 = v164;
    uint64_t v68 = sub_10000BEE4(v164, (uint64_t)qword_100181978);
    uint64_t v69 = v51;
    uint64_t v70 = *(void (**)(void *, uint64_t, uint64_t))(v51 + 16);
    uint64_t v71 = v161;
    v70(v161, v68, v67);

    uint64_t v72 = v40;
    unint64_t v73 = Logger.logObject.getter();
    os_log_type_t v74 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v73, v74))
    {
      id v153 = v40;
      long long v75 = (uint8_t *)swift_slowAlloc();
      uint64_t v162 = swift_slowAlloc();
      *(_DWORD *)long long v75 = 138412290;
      uint64_t v166 = v72;
      uint64_t v76 = v72;
      uint64_t v69 = v163;
      uint64_t v67 = v164;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v162->Class isa = (Class)v153;

      _os_log_impl((void *)&_mh_execute_header, v73, v74, "Client lacks application-identifier entitlement. Discarding %@.", v75, 0xCu);
      sub_10000BF1C((uint64_t *)&unk_10017EB20);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v71 = v161;
      swift_slowDealloc();
    }
    else
    {

      unint64_t v73 = v72;
    }

    (*(void (**)(void *, uint64_t))(v69 + 8))(v71, v67);
    sub_10004296C();
    swift_allocError();
    *uint64_t v97 = 3;
    uint64_t v98 = (void *)_convertErrorToNSError(_:)();
    unint64_t v28 = v158;
    ((void (**)(void, void *))v158)[2](v158, v98);

    swift_errorRelease();
  }
  else
  {
    uint64_t v53 = qword_10017C2A0;
    id v54 = v162;
    if (v53 != -1) {
      swift_once();
    }
    uint64_t v55 = v164;
    uint64_t v56 = sub_10000BEE4(v164, (uint64_t)qword_100181978);
    uint64_t v57 = v163;
    unint64_t v58 = v25;
    (*(void (**)(char *, uint64_t, uint64_t))(v163 + 16))(v25, v56, v55);

    id v59 = v40;
    id v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v60, v61))
    {
      id v153 = v40;
      uint64_t v62 = swift_slowAlloc();
      uint64_t v162 = v59;
      uint64_t v63 = (uint8_t *)v62;
      uint64_t v161 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v63 = 138412290;
      uint64_t v166 = v162;
      uint64_t v64 = v162;
      uint64_t v57 = v163;
      uint64_t v55 = v164;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v161 = v153;

      _os_log_impl((void *)&_mh_execute_header, v60, v61, "No bundle identifier set. Failed to record %@.", v63, 0xCu);
      sub_10000BF1C((uint64_t *)&unk_10017EB20);
      swift_arrayDestroy();
      swift_slowDealloc();
      id v59 = v162;
      swift_slowDealloc();
    }
    else
    {

      id v60 = v59;
    }

    (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v55);
    sub_10004296C();
    swift_allocError();
    *uint64_t v95 = 2;
    uint64_t v96 = (void *)_convertErrorToNSError(_:)();
    unint64_t v28 = v158;
    ((void (**)(void, void *))v158)[2](v158, v96);

    swift_errorRelease();
  }
LABEL_8:
  _Block_release(v28);
}

void sub_10003A600(void *a1, void (**a2)(void, void, void))
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v31 - v9;
  id v11 = sub_10003695C();
  uint64_t v12 = sub_100062550();
  if (v13)
  {
    unint64_t v14 = v13;
    uint64_t v34 = v12;
    uint64_t v15 = qword_10017C2A0;
    id v36 = a1;
    if (v15 != -1) {
      swift_once();
    }
    uint64_t v16 = sub_10000BEE4(v4, (uint64_t)qword_100181978);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, v16, v4);

    swift_bridgeObjectRetain_n();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    BOOL v19 = os_log_type_enabled(v17, v18);
    id v35 = v11;
    if (v19)
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      uint64_t v38 = v33;
      *(_DWORD *)unint64_t v20 = 136315138;
      v31[1] = v20 + 4;
      unint64_t v32 = v20;
      swift_bridgeObjectRetain();
      uint64_t v21 = v34;
      uint64_t v37 = sub_100013090(v34, v14, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Transcript read access request from %s", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      uint64_t v21 = v34;
    }
    uint64_t v30 = sub_10003AB98(v21, v14);
    swift_bridgeObjectRelease();
    ((void (**)(void, NSObject *, void))a2)[2](a2, v30, 0);
  }
  else
  {
    uint64_t v22 = qword_10017C2A0;
    id v23 = a1;
    if (v22 != -1) {
      swift_once();
    }
    uint64_t v24 = sub_10000BEE4(v4, (uint64_t)qword_100181978);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v24, v4);

    BOOL v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Connected client lacks application-identifier in entitlements.", v27, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    sub_10004296C();
    swift_allocError();
    unsigned char *v28 = 3;
    uint64_t v29 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void *))a2)[2](a2, 0, v29);

    swift_errorRelease();
  }
  _Block_release(a2);
}

NSObject *sub_10003AB98(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v67 = a1;
  uint64_t v6 = type metadata accessor for String.Encoding();
  uint64_t v61 = *(void *)(v6 - 8);
  uint64_t v62 = v6;
  __chkstk_darwin(v6);
  id v60 = (char *)v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v8 - 8);
  id v66 = ((char *)v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v63 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  unint64_t v58 = (char *)v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v68 = (char *)v55 - v13;
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = qword_10017C2A0;
  BOOL v19 = v2;
  if (v18 != -1) {
    swift_once();
  }
  uint64_t v20 = sub_10000BEE4(v14, (uint64_t)qword_100181978);
  uint64_t v21 = *(void (**)(char *))(v15 + 16);
  uint64_t v59 = v20;
  v21(v17);
  uint64_t v65 = v19;

  swift_bridgeObjectRetain_n();
  uint64_t v22 = Logger.logObject.getter();
  uint64_t v64 = v14;
  unint64_t v23 = a2;
  uint64_t v24 = v22;
  os_log_type_t v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = swift_slowAlloc();
    uint64_t v56 = v3;
    uint64_t v27 = (uint8_t *)v26;
    uint64_t v28 = swift_slowAlloc();
    uint64_t v57 = v10;
    uint64_t v70 = v28;
    *(_DWORD *)uint64_t v27 = 136315138;
    v55[1] = v27 + 4;
    swift_bridgeObjectRetain();
    uint64_t v69 = sub_100013090(v67, v23, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Creating sandbox exception for %s...", v27, 0xCu);
    swift_arrayDestroy();
    uint64_t v10 = v57;
    swift_slowDealloc();
    uint64_t v4 = v56;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v64);
  uint64_t v29 = (uint64_t)v68;
  uint64_t v30 = v66;
  sub_10003F1D4((uint64_t)v66);
  if (sub_10000D5D8((uint64_t)v30, 1, v10) == 1)
  {
    sub_100027D90((uint64_t)v30, (uint64_t *)&unk_10017D0C0);
    sub_10004296C();
    swift_allocError();
    unsigned char *v31 = 4;
    swift_willThrow();
    return v30;
  }
  uint64_t v32 = v63;
  (*(void (**)(uint64_t, NSObject *, uint64_t))(v63 + 32))(v29, v30, v10);
  id v33 = sub_10003695C();
  if (v4)
  {
LABEL_9:
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v29, v10);
    return v30;
  }
  uint64_t v34 = v33;
  uint64_t v36 = sub_1000627CC(v29);
  unint64_t v38 = v37;

  uint64_t v39 = v60;
  static String.Encoding.utf8.getter();
  uint64_t v40 = String.data(using:allowLossyConversion:)();
  unint64_t v42 = v41;
  (*(void (**)(char *, uint64_t))(v61 + 8))(v39, v62);
  if (v42 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v43, "Failed to issue sandbox extension: data conversion failed.", v44, 2u);
      swift_slowDealloc();
    }

    sub_10004296C();
    swift_allocError();
    *unint64_t v45 = 1;
    swift_willThrow();
    goto LABEL_9;
  }
  id v66 = v42;
  uint64_t v67 = v40;
  swift_bridgeObjectRetain();
  uint64_t v46 = Logger.logObject.getter();
  os_log_type_t v47 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v46, v47))
  {
    os_log_type_t v48 = (uint8_t *)swift_slowAlloc();
    uint64_t v49 = swift_slowAlloc();
    uint64_t v57 = v10;
    uint64_t v70 = v49;
    *(_DWORD *)os_log_type_t v48 = 136315138;
    uint64_t v65 = v48 + 4;
    swift_bridgeObjectRetain();
    uint64_t v69 = sub_100013090(v36, v38, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "Sandbox exception token issued: %s", v48, 0xCu);
    swift_arrayDestroy();
    uint64_t v10 = v57;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v50 = v32;
  uint64_t v51 = *(void (**)(char *, char *, uint64_t))(v32 + 16);
  uint64_t v52 = v68;
  v51(v58, v68, v10);
  id v53 = objc_allocWithZone((Class)NSSecurityScopedURLWrapper);
  sub_1000E5FF8();
  uint64_t v30 = v54;
  (*(void (**)(char *, uint64_t))(v50 + 8))(v52, v10);
  return v30;
}

uint64_t sub_10003B35C()
{
  swift_errorRetain();
  sub_10000BF1C(&qword_10017C810);
  if (sub_100043378())
  {
    swift_errorRelease();
    uint64_t v0 = v2;
  }
  else
  {
    swift_errorRelease();
    if (!sub_100043378())
    {
      swift_errorRelease();
      return 0;
    }
    if (v3) {
      uint64_t v0 = 4;
    }
    else {
      uint64_t v0 = 5;
    }
  }
  swift_errorRelease();
  return v0;
}

void sub_10003B41C(uint64_t a1, void (**a2)(void, void))
{
  uint64_t v3 = type metadata accessor for Logger();
  __chkstk_darwin(v3);
  sub_10003F938(2, (uint64_t)sub_10002B708, 0);
  a2[2](a2, 0);

  _Block_release(a2);
}

void sub_10003B794(void *a1, char *a2, void (**a3)(void, Class, void *))
{
  uint64_t v124 = a3;
  uint64_t v137 = a1;
  uint64_t v136 = type metadata accessor for Notification();
  uint64_t v126 = *(void *)(v136 - 8);
  uint64_t v4 = __chkstk_darwin(v136);
  uint64_t v6 = &v119[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  uint64_t v8 = &v119[-v7];
  uint64_t v9 = type metadata accessor for Logger();
  os_log_t v138 = *(os_log_t *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = &v119[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = &v119[-v14];
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = &v119[-v17];
  __chkstk_darwin(v16);
  uint64_t v20 = &v119[-v19];
  uint64_t v21 = a2;
  id v22 = sub_10003695C();
  id v133 = v12;
  os_log_t v134 = v20;
  *(void *)&long long v130 = v18;
  unint64_t v132 = v15;
  uint64_t v135 = v8;
  uint64_t v123 = v6;
  uint64_t v131 = v9;
  id v122 = v22;
  char v23 = sub_100037A88(0xD000000000000025, 0x8000000100143560);
  os_log_type_t v25 = v137;
  os_log_t v24 = v138;
  uint64_t v26 = a2;
  if ((v23 & 1) == 0)
  {
    uint64_t v27 = sub_100062550();
    if (!v28)
    {
      uint64_t v91 = qword_10017C2A0;
      id v92 = a2;
      if (v91 != -1) {
        swift_once();
      }
      uint64_t v93 = v131;
      uint64_t v94 = sub_10000BEE4(v131, (uint64_t)qword_100181978);
      uint64_t v95 = v133;
      ((void (*)(unsigned char *, uint64_t, uint64_t))v24[2].isa)(v133, v94, v93);

      uint64_t v96 = v25;
      uint64_t v97 = Logger.logObject.getter();
      os_log_type_t v98 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v97, v98))
      {
        uint64_t v99 = (uint8_t *)swift_slowAlloc();
        uint64_t v137 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v99 = 138412290;
        uint64_t v139 = v96;
        uint64_t v100 = v96;
        uint64_t v95 = v133;
        id v60 = v124;
        uint64_t v93 = v131;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v137 = v96;

        _os_log_impl((void *)&_mh_execute_header, v97, v98, "Client lacks application-identifier entitlement. Failed to delete records with %@", v99, 0xCu);
        sub_10000BF1C((uint64_t *)&unk_10017EB20);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v97 = v96;
        id v60 = v124;
      }

      ((void (*)(unsigned char *, uint64_t))v24[1].isa)(v95, v93);
      sub_10004296C();
      swift_allocError();
      char v105 = 3;
      goto LABEL_47;
    }
    sub_100042CAC(v27, v28, v25);
  }
  uint64_t v29 = sub_100042C48(v25);
  if (!v30)
  {
    uint64_t v48 = qword_10017C2A0;
    id v49 = v21;
    os_log_t v50 = v24;
    if (v48 != -1) {
      swift_once();
    }
    uint64_t v51 = v131;
    uint64_t v52 = sub_10000BEE4(v131, (uint64_t)qword_100181978);
    Class isa = (void (*)(void, void, void))v24[2].isa;
    id v54 = v134;
    isa(v134, v52, v51);

    uint64_t v55 = v25;
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      unint64_t v58 = (uint8_t *)swift_slowAlloc();
      uint64_t v137 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v58 = 138412290;
      uint64_t v139 = v55;
      uint64_t v59 = v55;
      id v60 = v124;
      id v54 = v134;
      uint64_t v51 = v131;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v137 = v55;

      _os_log_impl((void *)&_mh_execute_header, v56, v57, "No bundle identifier set. Failed to delete records with %@", v58, 0xCu);
      sub_10000BF1C((uint64_t *)&unk_10017EB20);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v56 = v55;
      id v60 = v124;
    }

    ((void (*)(unsigned char *, uint64_t))v50[1].isa)(v54, v51);
    sub_10004296C();
    swift_allocError();
    char v105 = 2;
    goto LABEL_47;
  }
  id v133 = *(unsigned char **)&a2[OBJC_IVAR____TtC10LinkDaemon10Transcript_streamManager];
  uint64_t v31 = sub_10003E884(v29, v30);
  uint64_t v33 = v32;
  id v35 = v34;
  swift_bridgeObjectRelease();
  os_log_t v36 = v24;
  if (!v33)
  {
    uint64_t v80 = qword_10017C2A0;
    id v81 = v21;
    if (v80 != -1) {
      swift_once();
    }
    uint64_t v82 = v131;
    uint64_t v83 = sub_10000BEE4(v131, (uint64_t)qword_100181978);
    uint64_t v84 = v130;
    ((void (*)(void, uint64_t, uint64_t))v36[2].isa)(v130, v83, v82);

    uint64_t v85 = v25;
    uint64_t v86 = Logger.logObject.getter();
    os_log_type_t v87 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v86, v87))
    {
      uint64_t v88 = (uint8_t *)swift_slowAlloc();
      unint64_t v89 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v88 = 138412290;
      uint64_t v139 = v85;
      uint64_t v90 = v85;
      uint64_t v84 = v130;
      id v60 = v124;
      uint64_t v82 = v131;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v89 = v85;

      _os_log_impl((void *)&_mh_execute_header, v86, v87, "Stream identifier nil. Failed to delete records with %@", v88, 0xCu);
      sub_10000BF1C((uint64_t *)&unk_10017EB20);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v86 = v85;
      id v60 = v124;
    }

    ((void (*)(uint64_t, uint64_t))v36[1].isa)(v84, v82);
    sub_10004296C();
    swift_allocError();
    char v105 = 1;
LABEL_47:
    *id v104 = v105;
    type metadata accessor for UUID();
    Class v114 = Array._bridgeToObjectiveC()().super.isa;
    uint64_t v115 = (void *)_convertErrorToNSError(_:)();
    v60[2](v60, v114, v115);

    swift_errorRelease();
    uint64_t v116 = v60;
    goto LABEL_48;
  }
  unint64_t v37 = v25;
  os_log_t v134 = (unsigned char *)v31;
  uint64_t v38 = sub_1000375CC(v31, v33, v35);
  uint64_t v39 = *(void *)(v38 + 16);
  uint64_t v40 = _swiftEmptyArrayStorage;
  uint64_t v121 = v33;
  id v120 = v35;
  *(void *)&long long v130 = v38;
  if (v39)
  {
    uint64_t v41 = v38;
    id v129 = v26;
    uint64_t v139 = _swiftEmptyArrayStorage;
    sub_100057848();
    uint64_t v40 = v139;
    unint64_t v42 = (uint64_t *)(v41 + 40);
    do
    {
      uint64_t v44 = (objc_class *)*(v42 - 1);
      os_log_type_t v43 = (objc_class *)*v42;
      uint64_t v139 = v40;
      unint64_t v46 = (unint64_t)v40[2].isa;
      unint64_t v45 = (unint64_t)v40[3].isa;
      swift_bridgeObjectRetain();
      if (v46 >= v45 >> 1)
      {
        sub_100057848();
        uint64_t v40 = v139;
      }
      v42 += 3;
      v40[2].Class isa = (Class)(v46 + 1);
      os_log_type_t v47 = &v40[2 * v46];
      v47[4].Class isa = v44;
      v47[5].Class isa = v43;
      --v39;
    }
    while (v39);
    os_log_t v36 = v138;
    uint64_t v26 = v129;
  }
  uint64_t v61 = qword_10017C2A0;
  id v62 = v26;
  BOOL v113 = v61 == -1;
  uint64_t v63 = v132;
  uint64_t v64 = v37;
  if (!v113) {
    swift_once();
  }
  uint64_t v65 = v131;
  uint64_t v66 = sub_10000BEE4(v131, (uint64_t)qword_100181978);
  ((void (*)(unsigned char *, uint64_t, uint64_t))v36[2].isa)(v63, v66, v65);
  id v129 = v62;

  id v67 = v64;
  swift_bridgeObjectRetain_n();
  uint64_t v68 = v67;
  uint64_t v69 = v40;
  uint64_t v70 = Logger.logObject.getter();
  os_log_type_t v71 = static os_log_type_t.default.getter();
  os_log_t v138 = v70;
  BOOL v72 = os_log_type_enabled(v70, v71);
  id v127 = v69;
  if (v72)
  {
    uint64_t v73 = swift_slowAlloc();
    uint64_t v125 = (void *)swift_slowAlloc();
    uint64_t v128 = swift_slowAlloc();
    uint64_t v139 = v128;
    *(_DWORD *)uint64_t v73 = 136315394;
    uint64_t v137 = (void *)v66;
    swift_bridgeObjectRetain();
    uint64_t v74 = Array.description.getter();
    unint64_t v76 = v75;
    swift_bridgeObjectRelease();
    uint64_t v140 = sub_100013090(v74, v76, (uint64_t *)&v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v73 + 12) = 2112;
    uint64_t v140 = (uint64_t)v68;
    id v77 = v68;
    uint64_t v78 = v131;
    uint64_t v66 = (uint64_t)v137;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v125 = v68;

    os_log_t v79 = v138;
    _os_log_impl((void *)&_mh_execute_header, v138, v71, "Deleting from streams %s with %@", (uint8_t *)v73, 0x16u);
    sub_10000BF1C((uint64_t *)&unk_10017EB20);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    ((void (*)(unsigned char *, uint64_t))v36[1].isa)(v132, v78);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    ((void (*)(unsigned char *, uint64_t))v36[1].isa)(v63, v65);
  }
  uint64_t v101 = v130;
  uint64_t v102 = sub_10000EC64();
  uint64_t v106 = v103;
  uint64_t v107 = *(void *)(v101 + 16);
  if (v107)
  {
    uint64_t v108 = (uint64_t)v102;
    uint64_t v137 = (void *)v66;
    os_log_t v138 = v68;
    swift_bridgeObjectRetain();
    uint64_t v109 = (void **)(v101 + 48);
    do
    {
      uint64_t v110 = (uint64_t)*(v109 - 2);
      uint64_t v111 = (uint64_t)*(v109 - 1);
      id v112 = *v109;
      BOOL v113 = (unsigned char *)v110 == v134 && v121 == v111;
      if (v113 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRetain();
        sub_10003624C(v110, v111, (uint64_t)v112, v108, v106, 1);
      }
      else
      {
        swift_bridgeObjectRetain();
        sub_10003624C(v110, v111, (uint64_t)v112, v108, v106, 0);
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v109 += 3;
      --v107;
    }
    while (v107);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  id v117 = (void (**)(void, Class, void))v124;
  type metadata accessor for UUID();
  swift_bridgeObjectRetain();
  Class v118 = Array._bridgeToObjectiveC()().super.isa;
  v117[2](v117, v118, 0);
  swift_bridgeObjectRelease_n();
  swift_release();

  swift_bridgeObjectRelease();
  uint64_t v116 = v117;
LABEL_48:
  _Block_release(v116);
}

void sub_10003CBF8(unint64_t a1, void *a2, void *a3)
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v5 = 4;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v6 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v6 = *(void **)(a1 + 8 * v5);
        swift_unknownObjectRetain();
      }
      uint64_t v7 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      id v8 = [a3 action];
      NSString v9 = String._bridgeToObjectiveC()();
      id v10 = [a3 actionOutput];
      if (v10)
      {
        sub_100042D10(v10);
        if (v11)
        {
          NSString v12 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        else
        {
          NSString v12 = 0;
        }
      }
      else
      {
        NSString v12 = 0;
      }
      [v6 didReceiveNextAction:a2 baseAction:v8 forAppWithBundleIdentifier:v9 associatedLiveActivityIdentifier:v12];
      swift_unknownObjectRelease();

      ++v5;
      if (v7 == v4) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_14:

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void sub_10003CDD8(void *a1, int a2, void *a3, void *aBlock, void (*a5)(id, id, void *))
{
  id v8 = _Block_copy(aBlock);
  _Block_copy(v8);
  id v9 = a3;
  id v10 = a1;
  a5(v9, v10, v8);
  _Block_release(v8);
}

uint64_t sub_10003CE64()
{
  return sub_100037564();
}

void sub_10003CE7C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, void *a6, void *a7)
{
  uint64_t v13 = type metadata accessor for OSSignpostID();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = self;
  _Block_copy(a7);
  id v18 = [v17 currentConnection];
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = v13;
    static OSSignpostID.exclusive.getter();
    sub_1000B4C00();
    _Block_copy(a7);
    sub_10003D084(a1, a2, a6, a3, a4, (uint64_t)v19, (void (**)(void, void *))a7);
    sub_1000E309C();
    swift_release();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v20);

    _Block_release(a7);
    _Block_release(a7);
  }
  else
  {
    _Block_release(a7);
    _Block_release(a7);
  }
}

void sub_10003D084(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, void (**a7)(void, void *))
{
  uint64_t v52 = a7;
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v50 = v11;
  uint64_t v51 = v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v49 - v16;
  sub_10000D9D4(0, &qword_10017DD90);
  sub_10000D9D4(0, &qword_10017DD98);
  id v18 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
  if (v7)
  {
    swift_errorRelease();
LABEL_3:
    uint64_t v19 = v50;
    uint64_t v20 = v51;
    uint64_t v21 = qword_10017C2A0;
    id v22 = a3;
    if (v21 != -1) {
      swift_once();
    }
    uint64_t v23 = sub_10000BEE4(v19, (uint64_t)qword_100181978);
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v15, v23, v19);

    os_log_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Deserialization failed. Failed to record action record.", v26, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v20 + 8))(v15, v19);
    sub_10004296C();
    swift_allocError();
    *uint64_t v27 = 1;
    uint64_t v28 = (void *)_convertErrorToNSError(_:)();
    uint64_t v29 = v52;
    v52[2](v52, v28);

    swift_errorRelease();
    goto LABEL_8;
  }
  if (!v18) {
    goto LABEL_3;
  }
  id v49 = v18;
  swift_bridgeObjectRetain();
  uint64_t v31 = sub_10003E884(a4, a5);
  uint64_t v33 = v32;
  id v35 = v34;
  swift_bridgeObjectRelease();
  if (v33)
  {
    uint64_t v36 = sub_1000375CC(v31, v33, v35);
    unint64_t v37 = v49;
    sub_10003881C(v49, v36);
    swift_bridgeObjectRelease();
    uint64_t v38 = v52;
    v52[2](v52, 0);

    swift_bridgeObjectRelease();
    unint64_t v30 = v38;
    goto LABEL_9;
  }
  uint64_t v39 = qword_10017C2A0;
  id v40 = a3;
  if (v39 != -1) {
    swift_once();
  }
  uint64_t v41 = v50;
  uint64_t v42 = sub_10000BEE4(v50, (uint64_t)qword_100181978);
  uint64_t v43 = v51;
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v17, v42, v41);

  uint64_t v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v44, v45))
  {
    unint64_t v46 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v46 = 0;
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "Stream reference nil. Failed to record serialized action record.", v46, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v43 + 8))(v17, v41);
  sub_10004296C();
  swift_allocError();
  *os_log_type_t v47 = 1;
  uint64_t v48 = (void *)_convertErrorToNSError(_:)();
  uint64_t v29 = v52;
  v52[2](v52, v48);

  swift_errorRelease();
LABEL_8:
  unint64_t v30 = v29;
LABEL_9:
  _Block_release(v30);
}

void sub_10003D63C(uint64_t a1, unint64_t a2, uint64_t a3, void (**a4)(void, void, void))
{
  uint64_t v5 = sub_10003AB98(a1, a2);
  ((void (**)(void, NSObject *, void))a4)[2](a4, v5, 0);

  _Block_release(a4);
}

void sub_10003D7AC(void *a1, void (**a2)(void, void, void))
{
  uint64_t v4 = sub_10000BF1C(&qword_10017C788);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v56 = (uint64_t)v47 - v8;
  __chkstk_darwin(v7);
  uint64_t v55 = (char *)v47 - v9;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v47 - v15;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a2;
  unint64_t v58 = a2;
  _Block_copy(a2);
  id v18 = sub_10003695C();
  UUID.init()();
  uint64_t v19 = v11;
  os_log_type_t v57 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  uint64_t v50 = v11 + 16;
  v57(v14, v16, v10);
  uint64_t v20 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v48 = v11;
  uint64_t v51 = (v20 + 24) & ~v20;
  uint64_t v52 = v51 + v12;
  uint64_t v21 = v51;
  id v54 = v16;
  v47[1] = v20 | 7;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = a1;
  uint64_t v49 = v17;
  id v53 = *(void (**)(uint64_t, char *, uint64_t))(v19 + 32);
  v53(v22 + v21, v14, v10);
  uint64_t v64 = sub_1000429BC;
  uint64_t v65 = v22;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v61 = 1107296256;
  id v62 = sub_1000125A8;
  uint64_t v63 = &unk_100170570;
  uint64_t v23 = _Block_copy(&aBlock);
  id v24 = a1;
  swift_release();
  [v18 setInvalidationHandler:v23];
  _Block_release(v23);
  v57(v14, v54, v10);
  os_log_type_t v25 = v54;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = v24;
  v53(v26 + v51, v14, v10);
  uint64_t v64 = sub_1000429BC;
  uint64_t v65 = v26;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v61 = 1107296256;
  id v62 = sub_1000125A8;
  uint64_t v63 = &unk_1001705C0;
  uint64_t v27 = _Block_copy(&aBlock);
  id v28 = v24;
  swift_release();
  [v18 setInterruptionHandler:v27];
  _Block_release(v27);
  __chkstk_darwin(v29);
  v47[-2] = v25;
  v47[-1] = v18;
  unint64_t v30 = v18;
  sub_100037348();
  v57(v14, v25, v10);
  unint64_t v31 = (v52 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = v28;
  uint64_t v33 = v30;
  v53(v32 + v51, v14, v10);
  uint64_t v34 = (void (*)(uint64_t, void *))v49;
  id v35 = (void (**)(uint64_t, void *))(v32 + v31);
  *id v35 = sub_100042964;
  v35[1] = v34;
  uint64_t v64 = sub_100042BA0;
  uint64_t v65 = v32;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v61 = 1107296256;
  id v62 = sub_100096260;
  uint64_t v63 = &unk_100170610;
  uint64_t v36 = _Block_copy(&aBlock);
  id v37 = v28;
  swift_retain();
  swift_release();
  id v38 = [v30 remoteObjectProxyWithErrorHandler:v36];
  _Block_release(v36);

  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_10000BF1C((uint64_t *)&unk_10017DD80);
  swift_dynamicCast();
  uint64_t v39 = v59;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [v39 observationDidStartWithConnectionUUID:isa];

  uint64_t v41 = (uint64_t)v55;
  v57(v55, v25, v10);
  sub_10000D5B0(v41, 0, 1, v10);
  uint64_t v42 = v56;
  sub_100034614(v41, v56, &qword_10017C788);
  int v43 = sub_10000D5D8(v42, 1, v10);
  uint64_t v44 = v48;
  os_log_type_t v45 = v58;
  if (v43 == 1)
  {
    Class v46 = 0;
  }
  else
  {
    Class v46 = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v42, v10);
  }
  ((void (**)(void, Class, void))v45)[2](v45, v46, 0);
  swift_unknownObjectRelease();

  sub_100027D90(v41, &qword_10017C788);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v25, v10);
  swift_release();
  _Block_release(v45);
}

uint64_t sub_10003DF5C()
{
  return sub_100037348();
}

uint64_t sub_10003DFA4(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  return sub_10004F744();
}

uint64_t sub_10003DFD4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, uint64_t))
{
  uint64_t v6 = sub_10000BF1C(&qword_10017C788);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = a3;
  sub_100037348();
  uint64_t v9 = type metadata accessor for UUID();
  sub_10000D5B0((uint64_t)v8, 1, 1, v9);
  swift_errorRetain();
  LOBYTE(a3) = sub_10003B35C();
  sub_10004296C();
  uint64_t v10 = swift_allocError();
  *uint64_t v11 = a3;
  a4(v8, v10);
  swift_errorRelease();
  return sub_100027D90((uint64_t)v8, &qword_10017C788);
}

void sub_10003E128(void *a1, int a2, void *aBlock, void (*a4)(void))
{
  uint64_t v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  id v7 = a1;
  a4();
  _Block_release(v6);
}

void sub_10003E19C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000BF1C(&qword_10017C788);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100034614(a1, (uint64_t)v8, &qword_10017C788);
  uint64_t v9 = type metadata accessor for UUID();
  Class isa = 0;
  if (sub_10000D5D8((uint64_t)v8, 1, v9) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  if (a2) {
    a2 = (void *)_convertErrorToNSError(_:)();
  }
  (*(void (**)(uint64_t, Class, void *))(a3 + 16))(a3, isa, a2);
}

void sub_10003E2C8(uint64_t a1, uint64_t a2, void (**a3)(void, void))
{
}

void sub_10003E330(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = (void *)sub_100042134(a2);
}

uint64_t sub_10003E478(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3 + OBJC_IVAR____TtC10LinkDaemon10Transcript_nextActionObserverConnections;
  swift_beginAccess();
  a1(v4);
  return swift_endAccess();
}

uint64_t sub_10003E4E8()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10LinkDaemon10Transcript_nextActionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  swift_beginAccess();
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = sub_100036058(v2);
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v1 + 4);
  swift_release();
  return v3;
}

uint64_t sub_10003E58C(uint64_t a1)
{
  uint64_t v2 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v2 - 8);
  sub_10001B450();
  uint64_t v5 = v4 - v3;
  sub_100034614(a1, v4 - v3, (uint64_t *)&unk_10017D0C0);
  uint64_t v6 = sub_10003E640(0xD000000000000010, 0x8000000100143680, v5);
  sub_100027D90(a1, (uint64_t *)&unk_10017D0C0);
  return v6;
}

uint64_t sub_10003E640(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(v3 + 16) = 0;
  uint64_t v7 = v3 + qword_100182448;
  uint64_t v8 = type metadata accessor for URL();
  sub_10000D5B0(v7, 1, 1, v8);
  *(void *)(v3 + qword_100180B30) = &_swiftEmptyDictionarySingleton;
  uint64_t v9 = qword_100180B38;
  sub_10000BF1C(&qword_10017DDB0);
  uint64_t v10 = swift_allocObject();
  *(_DWORD *)(v10 + 16) = 0;
  *(void *)(v3 + v9) = v10;
  uint64_t v11 = (void *)(v3 + qword_100180B20);
  *uint64_t v11 = a1;
  v11[1] = a2;
  sub_100034614(a3, v3 + qword_100180B28, (uint64_t *)&unk_10017D0C0);
  sub_10003EB5C();
  sub_100027D90(a3, (uint64_t *)&unk_10017D0C0);
  return v3;
}

uint64_t sub_10003E728()
{
  sub_100027D90(v0 + qword_100182448, (uint64_t *)&unk_10017D0C0);
  swift_bridgeObjectRelease();
  sub_100027D90(v0 + qword_100180B28, (uint64_t *)&unk_10017D0C0);
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_10003E7B0()
{
  uint64_t v0 = sub_10003E728();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t type metadata accessor for TranscriptActionRecordStreamManager()
{
  uint64_t result = qword_10017DA98;
  if (!qword_10017DA98) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10003E84C()
{
  return swift_initClassMetadata2();
}

uint64_t sub_10003E884(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = v2 + qword_100182448;
  swift_beginAccess();
  sub_100034614(v12, (uint64_t)v11, (uint64_t *)&unk_10017D0C0);
  if (sub_10000D5D8((uint64_t)v11, 1, v5))
  {
    sub_100027D90((uint64_t)v11, (uint64_t *)&unk_10017D0C0);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v11, v5);
  sub_100027D90((uint64_t)v11, (uint64_t *)&unk_10017D0C0);
  uint64_t v14 = URL.path.getter();
  uint64_t v16 = v15;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == a1 && v17 == a2)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v19)
  {
LABEL_12:
    sub_10000D9D4(0, &qword_10017DCF8);
    uint64_t result = NSPageSize();
    if ((unsigned __int128)(result * (__int128)10) >> 64 == (10 * result) >> 63)
    {
      uint64_t result = (uint64_t)sub_100041A6C(v14, v16, 10 * result, 4);
      goto LABEL_14;
    }
    __break(1u);
LABEL_16:
    __break(1u);
    return result;
  }
  sub_10000D9D4(0, &qword_10017DCF8);
  uint64_t result = NSPageSize();
  if ((unsigned __int128)(result * (__int128)10) >> 64 != (10 * result) >> 63) {
    goto LABEL_16;
  }
  uint64_t result = (uint64_t)sub_100041AF8(v14, v16, 10 * result);
  if (result)
  {
LABEL_14:
    uint64_t v20 = (void *)result;
    swift_bridgeObjectRetain();
    return sub_100107BE4(a1, a2, v20);
  }
  return result;
}

void sub_10003EB5C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v2 - 8);
  uint64_t v42 = (uint64_t)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v41 - v5;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v41 - v8;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v41 - v11;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v41 - v14;
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v41 = (char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v41 - v20;
  __chkstk_darwin(v22);
  id v24 = (char *)&v41 - v23;
  *(unsigned char *)(v1 + 16) = 0;
  sub_100034614(v1 + qword_100180B28, (uint64_t)v15, (uint64_t *)&unk_10017D0C0);
  if (sub_10000D5D8((uint64_t)v15, 1, v16) == 1)
  {
    sub_100027D90((uint64_t)v15, (uint64_t *)&unk_10017D0C0);
    id v25 = [self defaultManager];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000510DC();

    swift_bridgeObjectRelease();
    URL.appendingPathComponent(_:)();
    uint64_t v26 = *(void (**)(char *, uint64_t))(v17 + 8);
    v26(v21, v16);
    sub_10000D5B0((uint64_t)v6, 0, 1, v16);
    sub_1000345B8((uint64_t)v6, (uint64_t)v12, (uint64_t *)&unk_10017D0C0);
    uint64_t v27 = v1 + qword_100182448;
    swift_beginAccess();
    uint64_t v28 = (uint64_t)v12;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v24, v15, v16);
    URL.appendingPathComponent(_:)();
    uint64_t v26 = *(void (**)(char *, uint64_t))(v17 + 8);
    v26(v24, v16);
    sub_10000D5B0((uint64_t)v12, 0, 1, v16);
    sub_1000345B8((uint64_t)v12, (uint64_t)v9, (uint64_t *)&unk_10017D0C0);
    uint64_t v27 = v1 + qword_100182448;
    swift_beginAccess();
    uint64_t v28 = (uint64_t)v9;
  }
  sub_100042E84(v28, v27);
  swift_endAccess();
  uint64_t v29 = v1 + qword_100182448;
  swift_beginAccess();
  uint64_t v30 = v29;
  uint64_t v31 = v42;
  sub_100034614(v30, v42, (uint64_t *)&unk_10017D0C0);
  if (sub_10000D5D8(v31, 1, v16))
  {
    sub_100027D90(v31, (uint64_t *)&unk_10017D0C0);
    sub_10000FD64();
    swift_allocError();
    *uint64_t v32 = 1;
    swift_willThrow();
    if (qword_10017C2A0 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    sub_10000BEE4(v33, (uint64_t)qword_100181978);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      v43[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136315138;
      swift_getErrorValue();
      uint64_t v37 = Error.localizedDescription.getter();
      v43[6] = sub_100013090(v37, v38, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "StreamManager initialization failed due to %s", v36, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    uint64_t v39 = v41;
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v41, v31, v16);
    sub_100027D90(v31, (uint64_t *)&unk_10017D0C0);
    URL.path.getter();
    v26(v39, v16);
    swift_bridgeObjectRelease();
    id v40 = (void *)(v1 + qword_100180B30);
    swift_beginAccess();
    *id v40 = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease();
    *(unsigned char *)(v1 + 16) = 1;
  }
}

uint64_t sub_10003F1D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v1 + 16) == 1)
  {
    uint64_t v10 = v1 + qword_100182448;
    swift_beginAccess();
    sub_100034614(v10, (uint64_t)v5, (uint64_t *)&unk_10017D0C0);
    if (sub_10000D5D8((uint64_t)v5, 1, v6) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
      URL.appendingPathComponent(_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      uint64_t v15 = 0;
      return sub_10000D5B0(a1, v15, 1, v6);
    }
    sub_100027D90((uint64_t)v5, (uint64_t *)&unk_10017D0C0);
  }
  if (qword_10017C2A0 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_10000BEE4(v11, (uint64_t)qword_100181978);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315138;
    v17[4] = sub_100013090(0x3A726F66284C5255, 0xE900000000000029, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s not executed due to failed initialization - nil directory", v14, 0xCu);
    uint64_t v15 = 1;
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v15 = 1;
  }
  return sub_10000D5B0(a1, v15, 1, v6);
}

void sub_10003F500(uint64_t a1)
{
  if (*(unsigned char *)(v1 + 16) == 1)
  {
    uint64_t v2 = *(os_unfair_lock_s **)(v1 + qword_100180B38);
    uint64_t v3 = __chkstk_darwin(a1);
    __chkstk_darwin(v3);
    swift_retain();
    os_unfair_lock_lock(v2 + 4);
    sub_1000431C8();
    os_unfair_lock_unlock(v2 + 4);
    swift_release();
  }
  else
  {
    if (qword_10017C2A0 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10000BEE4(v4, (uint64_t)qword_100181978);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136315138;
      sub_100013090(0xD00000000000001BLL, 0x8000000100143640, &v8);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v7, v5, "%s not executed due to failed initialization - nil config", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

uint64_t sub_10003F758()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + qword_100180B38);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  sub_100042020();
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

void sub_10003F7E0()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = sub_10003E884(v0, v1);
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  if (v4)
  {
    CFAbsoluteTime v7 = CFAbsoluteTimeGetCurrent() + -86400.0;
    __chkstk_darwin(v8);
    double v11 = v7;
    sub_100040528(v2, v4, v6, 1, (uint64_t)sub_1000431B8, (uint64_t)v10);

    swift_bridgeObjectRelease();
  }
  CFAbsoluteTimeGetCurrent();
  double v11 = __chkstk_darwin(v9);
  sub_10003F938(1, (uint64_t)sub_1000427E0, (uint64_t)v10);
}

void sub_10003F938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v79 = a1;
  uint64_t v80 = (uint8_t *)a2;
  uint64_t v7 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v75 = *(void *)(v7 - 8);
  uint64_t v76 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  os_log_type_t v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v61 - v14;
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v78 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v61 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  id v24 = (char *)&v61 - v23;
  __chkstk_darwin(v22);
  id v81 = (char *)&v61 - v26;
  if (*(unsigned char *)(v5 + 16) != 1) {
    goto LABEL_4;
  }
  uint64_t v70 = a3;
  uint64_t v74 = v25;
  uint64_t v27 = v5 + qword_100182448;
  swift_beginAccess();
  sub_100034614(v27, (uint64_t)v15, (uint64_t *)&unk_10017D0C0);
  if (sub_10000D5D8((uint64_t)v15, 1, v16) == 1)
  {
    sub_100027D90((uint64_t)v15, (uint64_t *)&unk_10017D0C0);
LABEL_4:
    if (qword_10017C2A0 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_10000BEE4(v28, (uint64_t)qword_100181978);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      v82[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315138;
      uint64_t v84 = sub_100013090(0xD000000000000024, 0x80000001001435C0, v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s not executed due to failed initialization - nil directory", v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return;
  }
  os_log_type_t v71 = *(void (**)(char *, char *, uint64_t))(v74 + 32);
  uint64_t v72 = v74 + 32;
  v71(v81, v15, v16);
  id v32 = [self defaultManager];
  uint64_t v33 = NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)();

  if (v33)
  {
    uint64_t v69 = sub_100040384();
    uint64_t v73 = v34;
    id v64 = v33;
    NSEnumerator.makeIterator()();
    NSFastEnumerationIterator.next()();
    if (!v83)
    {
LABEL_27:

      swift_release();
      (*(void (**)(char *, uint64_t))(v75 + 8))(v9, v76);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v81, v16);
      return;
    }
    uint64_t v65 = (void (**)(char *, char *, uint64_t))(v74 + 16);
    id v77 = (void (**)(char *, uint64_t))(v74 + 8);
    *(void *)&long long v35 = 136315138;
    long long v63 = v35;
    uint64_t v68 = v4;
    id v67 = v9;
    uint64_t v66 = (char *)&type metadata for Any + 8;
    uint64_t v62 = v5;
    while (1)
    {
      if (swift_dynamicCast())
      {
        sub_10000D5B0((uint64_t)v13, 0, 1, v16);
        if (sub_10000D5D8((uint64_t)v13, 1, v16) != 1)
        {
          v71(v21, v13, v16);
          if ((v69((uint64_t)v21) & 1) == 0)
          {
            if (qword_10017C2A0 != -1) {
              swift_once();
            }
            uint64_t v36 = type metadata accessor for Logger();
            sub_10000BEE4(v36, (uint64_t)qword_100181978);
            uint64_t v37 = v78;
            (*v65)(v78, v21, v16);
            unint64_t v38 = Logger.logObject.getter();
            os_log_type_t v39 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v38, v39))
            {
              uint64_t v40 = swift_slowAlloc();
              uint64_t v84 = swift_slowAlloc();
              *(_DWORD *)uint64_t v40 = v63;
              sub_100042E3C((unint64_t *)&qword_10017DD50, (void (*)(uint64_t))&type metadata accessor for URL);
              uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
              *(void *)(v40 + 4) = sub_100013090(v41, v42, &v84);
              swift_bridgeObjectRelease();
              (*v77)(v37, v16);
              _os_log_impl((void *)&_mh_execute_header, v38, v39, "Invalid streamURL detected %s", (uint8_t *)v40, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              uint64_t v5 = v62;
              swift_slowDealloc();
            }
            else
            {
              (*v77)(v37, v16);
            }
          }
          uint64_t v44 = URL.lastPathComponent.getter();
          uint64_t v45 = v5;
          uint64_t v47 = sub_10003E884(v44, v46);
          uint64_t v49 = v48;
          uint64_t v51 = v50;
          swift_bridgeObjectRelease();
          if (v49)
          {
            sub_100040528(v47, v49, v51, v79, (uint64_t)v80, v70);
            sub_100042868(v47, v49, v51);
          }
          (*v77)(v21, v16);
          uint64_t v5 = v45;
          uint64_t v9 = v67;
          goto LABEL_26;
        }
      }
      else
      {
        sub_10000D5B0((uint64_t)v13, 1, 1, v16);
      }
      sub_100027D90((uint64_t)v13, (uint64_t *)&unk_10017D0C0);
LABEL_26:
      NSFastEnumerationIterator.next()();
      if (!v83) {
        goto LABEL_27;
      }
    }
  }
  if (qword_10017C2A0 != -1) {
    swift_once();
  }
  uint64_t v52 = type metadata accessor for Logger();
  sub_10000BEE4(v52, (uint64_t)qword_100181978);
  uint64_t v53 = v74;
  (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v24, v81, v16);
  id v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v54, v55))
  {
    uint64_t v56 = (uint8_t *)swift_slowAlloc();
    v82[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v56 = 136315138;
    uint64_t v80 = v56 + 4;
    sub_100042E3C((unint64_t *)&qword_10017DD50, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v84 = sub_100013090(v57, v58, v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v59 = *(void (**)(char *, uint64_t))(v53 + 8);
    v59(v24, v16);
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "Failed to generate enumerator for directory %s", v56, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v59 = *(void (**)(char *, uint64_t))(v53 + 8);
    v59(v24, v16);
  }

  sub_10000FD64();
  swift_allocError();
  *id v60 = 0;
  swift_willThrow();
  v59(v81, v16);
}

uint64_t (*sub_100040384())(uint64_t a1)
{
  sub_10000BF1C(&qword_10017DD58);
  sub_10000BF1C(&qword_10017DD60);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10013F540;
  Regex.init(_regexString:version:)();
  Regex.init(_regexString:version:)();
  Regex.init(_regexString:version:)();
  Regex.init(_regexString:version:)();
  Regex.init(_regexString:version:)();
  *(void *)(swift_allocObject() + 16) = v0;
  return sub_1000428E4;
}

void sub_100040528(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (*(unsigned char *)(v6 + 16) == 1)
  {
    sub_100108028(a1, a2, a3);
    unint64_t v15 = v14;
    if (qword_10017C2A0 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_10000BEE4(v16, (uint64_t)qword_100181978);
    swift_bridgeObjectRetain();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v29 = a5;
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v32 = sub_100013090(a1, v15, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Pruning %s", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a5 = v29;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    id v23 = objc_allocWithZone((Class)BMStoreStream);
    swift_bridgeObjectRetain();
    id v24 = a3;
    id v25 = sub_100041EDC(a1, a2, a3, 0);
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = a5;
    *(void *)(v26 + 24) = a6;
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = sub_100042818;
    *(void *)(v27 + 24) = v26;
    aBlock[4] = (uint64_t)sub_100042824;
    aBlock[5] = v27;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100041E80;
    void aBlock[3] = (uint64_t)&unk_1001704D0;
    uint64_t v28 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    [v25 pruneWithReason:a4 usingPredicateBlock:v28];

    _Block_release(v28);
    LOBYTE(v28) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if (v28) {
      __break(1u);
    }
  }
  else
  {
    if (qword_10017C2A0 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_10000BEE4(v20, (uint64_t)qword_100181978);
    oslog = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315138;
      uint64_t v32 = sub_100013090(0xD000000000000021, 0x8000000100143590, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, oslog, v21, "%s not executed due to failed initialization - not initialized", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

uint64_t sub_1000409F4(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v7 = (uint64_t *)(v3 + qword_100180B30);
  swift_beginAccess();
  uint64_t v8 = *v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_10001B74C(a1, a2, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v9)
  {
    sub_100108028(a1, a2, a3);
    unint64_t v11 = v10;
    if (qword_10017C2A0 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10000BEE4(v12, (uint64_t)qword_100181978);
    swift_bridgeObjectRetain();
    os_log_type_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      unint64_t v15 = (uint8_t *)swift_slowAlloc();
      v34[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v15 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v35 = sub_100013090(a1, v11, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Returned writer for %s", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    id v16 = objc_allocWithZone((Class)BMStreamDatastore);
    swift_bridgeObjectRetain();
    id v17 = a3;
    id v18 = sub_100041F64(a1, a2, 1, a3);
    if (v18)
    {
      uint64_t v9 = (uint64_t)v18;
      id v19 = v18;
      sub_100108028(a1, a2, v17);
      unint64_t v21 = v20;
      if (qword_10017C2A0 != -1) {
        swift_once();
      }
      uint64_t v22 = type metadata accessor for Logger();
      sub_10000BEE4(v22, (uint64_t)qword_100181978);
      swift_bridgeObjectRetain();
      id v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        id v33 = v19;
        id v25 = (uint8_t *)swift_slowAlloc();
        v34[0] = swift_slowAlloc();
        *(_DWORD *)id v25 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v35 = sub_100013090(a1, v21, v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Created writer for %s", v25, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        id v19 = v33;
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      sub_10000D9D4(0, &qword_10017DD98);
      [v19 updateMetadata:swift_getObjCClassFromMetadata()];
      swift_beginAccess();
      swift_bridgeObjectRetain();
      id v31 = v19;
      sub_10004F72C((uint64_t)v31, a1, a2);
      swift_endAccess();

      swift_bridgeObjectRelease();
    }
    else
    {
      if (qword_10017C2A0 != -1) {
        swift_once();
      }
      uint64_t v26 = type metadata accessor for Logger();
      sub_10000BEE4(v26, (uint64_t)qword_100181978);
      swift_bridgeObjectRetain_n();
      id v27 = v17;
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, v29))
      {
        os_log_type_t v30 = (uint8_t *)swift_slowAlloc();
        v34[0] = swift_slowAlloc();
        *(_DWORD *)os_log_type_t v30 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v35 = sub_100013090(a1, a2, v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Biome stream writer for %s returned nil", v30, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      return 0;
    }
  }
  return v9;
}

uint64_t sub_100040FEC()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_10004100C, v0, 0);
}

uint64_t sub_10004100C()
{
  sub_10003F7E0();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_100041094()
{
  swift_release();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for PruneTranscriptService()
{
  return self;
}

uint64_t sub_1000410F0()
{
  return v0;
}

uint64_t sub_1000410FC()
{
  return sub_1000410F0();
}

unint64_t sub_100041118()
{
  return 0xD000000000000020;
}

uint64_t sub_100041134()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000411C4;
  return sub_100040FEC();
}

uint64_t sub_1000411C4(char a1)
{
  sub_100010BAC();
  uint64_t v4 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(uint64_t (**)(void))(v4 + 8);
    return v5();
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(void))(v4 + 8);
    return v7(a1 & 1);
  }
}

uint64_t sub_1000412D0(uint64_t a1)
{
  return sub_1000370D8(a1, *(void **)(v1 + 16));
}

uint64_t sub_1000412D8()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100041328(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  unint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *unint64_t v10 = v2;
  v10[1] = sub_1000413FC;
  return sub_1000373D0(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1000413FC()
{
  sub_100010BAC();
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1000414CC()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_1001819A0 = result;
  *(void *)algn_1001819A8 = v1;
  return result;
}

uint64_t *sub_1000414FC()
{
  if (qword_10017C2B0 != -1) {
    swift_once();
  }
  return &qword_1001819A0;
}

uint64_t sub_100041548(char a1)
{
  return qword_10013F760[a1];
}

uint64_t sub_10004155C(uint64_t a1)
{
  if ((unint64_t)(a1 - 1000) >= 7) {
    return 6;
  }
  else {
    return (0x4060503020100uLL >> (8 * (a1 + 24)));
  }
}

BOOL sub_100041588(char *a1, char *a2)
{
  return sub_10009623C(*a1, *a2);
}

Swift::Int sub_100041594()
{
  return sub_10004159C(*v0);
}

Swift::Int sub_10004159C(char a1)
{
  return Hasher._finalize()();
}

void sub_1000415F0(uint64_t a1)
{
  sub_1000415F8(a1, *v1);
}

void sub_1000415F8(uint64_t a1, char a2)
{
}

Swift::Int sub_10004162C(uint64_t a1)
{
  return sub_100041634(a1, *v1);
}

Swift::Int sub_100041634(uint64_t a1, char a2)
{
  return Hasher._finalize()();
}

uint64_t sub_100041684@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10004155C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000416B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100041548(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_1000416DC(uint64_t a1)
{
  unint64_t v2 = sub_1000430D4();

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100041718(uint64_t a1)
{
  unint64_t v2 = sub_1000430D4();
  unint64_t v3 = sub_100043120();
  unint64_t v4 = sub_10004316C();

  return Error<>._code.getter(a1, v2, v3, v4);
}

uint64_t sub_100041774()
{
  sub_1000414FC();
  uint64_t v0 = qword_1001819A0;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_1000417B0()
{
  return sub_100041548(*v0);
}

uint64_t sub_1000417BC()
{
  uint64_t v0 = type metadata accessor for OSSignpostID();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  unint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v19 - v5;
  if (qword_10017C5A8 != -1) {
    swift_once();
  }
  id v7 = (id)qword_100182400;
  swift_unknownObjectRetain();
  OSSignpostID.init(log:object:)();
  if (qword_10017C5A0 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for OSSignposter();
  sub_10000BEE4(v8, (uint64_t)qword_1001823E8);
  sub_100100448();
  unint64_t v10 = (char *)v9;
  char v12 = v11;
  os_log_type_t v13 = OSSignposter.logHandle.getter();
  os_signpost_type_t v14 = static os_signpost_type_t.begin.getter();
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0) {
    goto LABEL_14;
  }
  if ((v12 & 1) == 0)
  {
    if (v10)
    {
LABEL_13:
      id v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v16 = 0;
      os_signpost_id_t v17 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, v14, v17, v10, "", v16, 2u);
      swift_slowDealloc();
LABEL_14:

      (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v4, v6, v0);
      type metadata accessor for OSSignpostIntervalState();
      swift_allocObject();
      uint64_t v18 = OSSignpostIntervalState.init(id:isOpen:)();
      (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
      return v18;
    }
    __break(1u);
  }
  if ((unint64_t)v10 >> 32)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v10 >> 11 != 27)
  {
    if (v10 >> 16 <= 0x10)
    {
      unint64_t v10 = &v20;
      goto LABEL_13;
    }
    goto LABEL_16;
  }
LABEL_17:
  __break(1u);
  return result;
}

id sub_100041A6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v8 = [v6 initWithStoreBasePath:v7 segmentSize:a3 protectionClass:a4];

  return v8;
}

id sub_100041AF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v4 initWithStoreBasePath:v5 segmentSize:a3];

  return v6;
}

void sub_100041B74(double a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, uint64_t a6)
{
  char v11 = (void *)sub_1000409F4(a3, a4, a5);
  if (v11)
  {
    char v12 = v11;
    if ([v11 writeEventWithEventBody:a6 timestamp:a1])
    {
LABEL_7:

      return;
    }
    if (qword_10017C2A0 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10000BEE4(v13, (uint64_t)qword_100181978);
    swift_bridgeObjectRetain_n();
    id v14 = a5;
    unint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      os_signpost_id_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)os_signpost_id_t v17 = 136315138;
      swift_bridgeObjectRetain();
      sub_100013090(a3, a4, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Biome stream writer for %s failed to write", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      goto LABEL_7;
    }

    swift_bridgeObjectRelease_n();
  }
}

void sub_100041DA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  swift_bridgeObjectRetain();
  NSString v5 = (void *)sub_1000422AC(a2, a3);
  swift_endAccess();
  swift_bridgeObjectRelease();
}

uint64_t sub_100041E2C(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  if (!a1) {
    return 1;
  }
  id v4 = a1;
  LOBYTE(a3) = a3();

  return a3 & 1;
}

uint64_t sub_100041E80(uint64_t a1, void *a2, uint64_t a3)
{
  NSString v5 = *(uint64_t (**)(void *, uint64_t))(a1 + 32);
  id v6 = a2;
  LOBYTE(a3) = v5(a2, a3);

  return a3 & 1;
}

id sub_100041EDC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a4) {
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  }
  else {
    uint64_t ObjCClassFromMetadata = 0;
  }
  id v9 = [v4 initWithPrivateStreamIdentifier:v7 storeConfig:a3 eventDataClass:ObjCClassFromMetadata];

  return v9;
}

id sub_100041F64(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v8 = [v4 initWithStream:v7 permission:a3 config:a4];

  return v8;
}

uint64_t sub_100041FD8(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void sub_100042000()
{
  sub_100041DA0(v0[2], v0[3], v0[4]);
}

uint64_t sub_100042020()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

#error "100042080: call analysis failed (funcsize=58)"

uint64_t sub_100042134(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_1000212E8(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v2;
  uint64_t v7 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  Swift::Int v8 = *(void *)(v7 + 24);
  sub_10000BF1C((uint64_t *)&unk_10017C960);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v8);
  uint64_t v9 = *(void *)(v13 + 48);
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9 + *(void *)(*(void *)(v10 - 8) + 72) * v4, v10);
  uint64_t v11 = *(void *)(*(void *)(v13 + 56) + 8 * v4);
  sub_10000D9D4(0, (unint64_t *)&unk_10017DD20);
  sub_100042E3C((unint64_t *)&qword_10017D340, (void (*)(uint64_t))&type metadata accessor for UUID);
  _NativeDictionary._delete(at:)();
  *uint64_t v2 = v13;
  swift_bridgeObjectRelease();
  return v11;
}

#error "1000422EC: call analysis failed (funcsize=66)"

#error "1000423DC: call analysis failed (funcsize=59)"

#error "1000424DC: call analysis failed (funcsize=69)"

#error "10004260C: call analysis failed (funcsize=67)"

#error "100042700: call analysis failed (funcsize=54)"

uint64_t sub_1000427BC()
{
  return sub_10003E478(*(void (**)(uint64_t))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

BOOL sub_1000427E0(void *a1)
{
  double v2 = *(double *)(v1 + 16);
  [a1 timestamp];
  return v3 < v2;
}

uint64_t sub_100042818(void *a1, uint64_t a2)
{
  return sub_100041E2C(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t sub_100042824()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_100042850(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100042860()
{
  return swift_release();
}

void sub_100042868(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000428AC()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000428E4(uint64_t a1)
{
  return sub_100107E3C(a1, *(void *)(v1 + 16));
}

uint64_t sub_1000428EC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = -1;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  *a2 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v5 = v6;
  if (-v3 < 64) {
    uint64_t v2 = ~(-1 << -(char)v3);
  }
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

void sub_100042924(uint64_t a1)
{
  sub_10003E330(a1, *(void *)(v1 + 16));
}

uint64_t sub_10004292C()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100042964(uint64_t a1, void *a2)
{
  sub_10003E19C(a1, a2, *(void *)(v2 + 16));
}

unint64_t sub_10004296C()
{
  unint64_t result = qword_10017DD78;
  if (!qword_10017DD78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DD78);
  }
  return result;
}

uint64_t sub_1000429BC()
{
  return sub_100042A6C((uint64_t (*)(uint64_t, uint64_t))sub_10003DF5C);
}

uint64_t sub_1000429D8()
{
  type metadata accessor for UUID();
  sub_10000E948();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = ((v5 + 24) & ~v5) + *(void *)(v4 + 64);
  uint64_t v7 = v5 | 7;

  uint64_t v8 = sub_100013E6C();
  v9(v8);

  return _swift_deallocObject(v0, v6, v7);
}

uint64_t sub_100042A6C(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3, v4);
}

uint64_t sub_100042AE4(uint64_t a1)
{
  return sub_10003DFA4(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_100042AEC()
{
  type metadata accessor for UUID();
  sub_10000E948();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = v5 | 7;
  unint64_t v7 = (*(void *)(v4 + 64) + ((v5 + 24) & ~v5) + 7) & 0xFFFFFFFFFFFFFFF8;

  uint64_t v8 = sub_100013E6C();
  v9(v8);
  swift_release();

  return _swift_deallocObject(v0, v7 + 16, v6);
}

uint64_t sub_100042BA0(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void (**)(unsigned char *, uint64_t))(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_10003DFD4(a1, v5, v1 + v4, v6);
}

uint64_t sub_100042C48(void *a1)
{
  id v1 = [a1 bundleIdentifier];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void sub_100042CAC(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a3 setBundleIdentifier:v4];
}

uint64_t sub_100042D10(void *a1)
{
  id v2 = [a1 activityIdentifier];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_100042D80(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v2 = 64;
  for (uint64_t i = 10; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

void sub_100042E00()
{
  sub_100041B74(*(double *)(v0 + 56), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40), *(void *)(v0 + 48));
}

id sub_100042E28(void *a1)
{
  return sub_10003632C(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_100042E30(void *a1)
{
  return sub_100036390(a1, *(uint64_t (**)(void))(v1 + 16), *(void *)(v1 + 24), *(uint64_t **)(v1 + 32));
}

uint64_t sub_100042E3C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100042E84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for TranscriptError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 5) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v5 = v6 - 6;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for TranscriptError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100043040);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

unsigned char *sub_100043068(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for TranscriptError()
{
  return &type metadata for TranscriptError;
}

unint64_t sub_100043088()
{
  unint64_t result = qword_10017DDB8;
  if (!qword_10017DDB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DDB8);
  }
  return result;
}

unint64_t sub_1000430D4()
{
  unint64_t result = qword_10017DDC0;
  if (!qword_10017DDC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DDC0);
  }
  return result;
}

unint64_t sub_100043120()
{
  unint64_t result = qword_10017DDC8;
  if (!qword_10017DDC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DDC8);
  }
  return result;
}

unint64_t sub_10004316C()
{
  unint64_t result = qword_10017DDD0;
  if (!qword_10017DDD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DDD0);
  }
  return result;
}

uint64_t sub_1000431C8()
{
  return sub_100042020();
}

uint64_t sub_1000431F0()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100043218()
{
  return swift_bridgeObjectRetain();
}

void sub_100043240()
{
  *uint64_t v0 = 0x8000000000000000;
}

void sub_10004325C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 8u);
}

BOOL sub_10004327C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

uint64_t sub_10004329C()
{
  return _swift_deallocObject(v0, 32, 7);
}

float *sub_1000432AC(float *result, float a2)
{
  *unint64_t result = a2;
  return result;
}

uint64_t sub_1000432BC()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000432DC()
{
  return swift_slowAlloc();
}

BOOL sub_1000432F8(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100043314()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100043330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  return sub_100021098(v27, v26, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

uint64_t sub_10004334C()
{
  return Logger.logObject.getter();
}

void sub_100043364()
{
  *uint64_t v0 = 0x8000000000000000;
}

uint64_t sub_100043378()
{
  return swift_dynamicCast();
}

uint64_t sub_100043398()
{
  return v0;
}

unint64_t sub_1000433C0(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  v11[0] = 95;
  v11[1] = 0xE100000000000000;
  v10[2] = v11;
  unint64_t v4 = sub_100043864(sub_1000439DC, (uint64_t)v10, a1, a2);
  if ((v5 & 1) != 0 || !(v4 >> 14)) {
    goto LABEL_6;
  }
  unint64_t v6 = String.index(after:)();
  uint64_t v7 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 >> 14 == 4 * v7)
  {
LABEL_6:
    sub_1000439FC();
    swift_allocError();
    *(void *)uint64_t v8 = a1;
    *(void *)(v8 + 8) = v2;
    *(unsigned char *)(v8 + 16) = 0;
    swift_bridgeObjectRetain();
    swift_willThrow();
  }
  else
  {
    swift_bridgeObjectRetain();
    String.subscript.getter();
    swift_bridgeObjectRelease();
    unint64_t v2 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  return v2;
}

uint64_t sub_100043514(uint64_t a1, unint64_t a2, char a3)
{
  if (!a3)
  {
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    unint64_t v12 = 0xD000000000000022;
    uint64_t v9 = a1;
    unint64_t v10 = a2;
    goto LABEL_5;
  }
  if (a3 == 1)
  {
    unint64_t v12 = 0;
    _StringGuts.grow(_:)(61);
    v5._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
    v5._object = (void *)0x80000001001436A0;
    String.append(_:)(v5);
    v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._uint64_t countAndFlagsBits = 0x6E615278616D202CLL;
    v7._object = (void *)0xEB00000000203A6BLL;
    String.append(_:)(v7);
    v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    uint64_t v9 = 41;
    unint64_t v10 = 0xE100000000000000;
LABEL_5:
    String.append(_:)(*(Swift::String *)&v9);
    return v12;
  }
  return 0x6C616E7265746E49;
}

uint64_t sub_1000436A4(uint64_t a1, uint64_t a2, char a3)
{
  return qword_10013F8D8[a3];
}

uint64_t sub_1000436BC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v13 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v6 = sub_100043514(a1, a2, a3);
  uint64_t v8 = v7;
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  void v12[3] = &type metadata for String;
  v12[0] = v6;
  v12[1] = v8;
  sub_10004B44C((uint64_t)v12, v9, v10);
  return v13;
}

BOOL sub_100043774(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  return qword_10013F8D8[a3] == qword_10013F8D8[a6];
}

uint64_t sub_100043798()
{
  return sub_1000436B8(*(void *)v0, *(void *)(v0 + 8), *(unsigned __int8 *)(v0 + 16));
}

unint64_t sub_1000437A4()
{
  return 0xD000000000000026;
}

uint64_t sub_1000437C0(uint64_t a1, uint64_t a2)
{
  return sub_1000436A4(a1, a2, *(unsigned char *)(v2 + 16));
}

uint64_t sub_1000437C8()
{
  return sub_1000436BC(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

uint64_t sub_1000437D4()
{
  return sub_100043514(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

BOOL sub_1000437E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100043774(a1, a2, *(unsigned char *)(a1 + 16), a4, a5, *(unsigned char *)(a2 + 16));
}

uint64_t sub_1000437EC(uint64_t a1)
{
  unint64_t v2 = sub_100043C38();

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100043828(uint64_t a1)
{
  unint64_t v2 = sub_100043C38();

  return Error<>._code.getter(a1, v2);
}

unint64_t sub_100043864(uint64_t (*a1)(void *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5) {
    return 0;
  }
  while (1)
  {
    unint64_t v7 = String.index(before:)();
    v12[0] = String.subscript.getter();
    v12[1] = v8;
    char v9 = a1(v12);
    if (v4) {
      break;
    }
    char v10 = v9;
    swift_bridgeObjectRelease();
    if (v10) {
      return v7;
    }
    if (v7 < 0x4000) {
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_10004396C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

uint64_t sub_1000439B0(uint64_t *a1, uint64_t *a2)
{
  return sub_10004396C(*a1, a1[1], *a2, a2[1]) & 1;
}

uint64_t sub_1000439DC(uint64_t *a1)
{
  return sub_1000439B0(a1, *(uint64_t **)(v1 + 16)) & 1;
}

unint64_t sub_1000439FC()
{
  unint64_t result = qword_10017DDD8;
  if (!qword_10017DDD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DDD8);
  }
  return result;
}

uint64_t sub_100043A4C(uint64_t a1, uint64_t a2, char a3)
{
  if (!a3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for AppShortcutIdentifierExtractionError(uint64_t a1)
{
  return sub_100043A70(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_100043A70(uint64_t a1, uint64_t a2, char a3)
{
  if (!a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s10LinkDaemon36AppShortcutIdentifierExtractionErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_100043A4C(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AppShortcutIdentifierExtractionError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_100043A4C(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_100043A70(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for AppShortcutIdentifierExtractionError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_100043A70(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppShortcutIdentifierExtractionError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppShortcutIdentifierExtractionError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100043BF4(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_100043C0C(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)uint64_t result = a2 - 2;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AppShortcutIdentifierExtractionError()
{
  return &type metadata for AppShortcutIdentifierExtractionError;
}

unint64_t sub_100043C38()
{
  unint64_t result = qword_10017DDE0;
  if (!qword_10017DDE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DDE0);
  }
  return result;
}

uint64_t sub_100043C84(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 16);
  if (v1 >= 4) {
    return 3;
  }
  else {
    return 0x2010003u >> (8 * v1);
  }
}

BOOL static Connection.Operation.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void Connection.Operation.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int Connection.Operation.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL sub_100043D28(char *a1, char *a2)
{
  return static Connection.Operation.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_100043D34()
{
  return Connection.Operation.hashValue.getter(*v0);
}

void sub_100043D3C(uint64_t a1)
{
  Connection.Operation.hash(into:)(a1, *v1);
}

uint64_t sub_100043D44(char a1, void *a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = 0;
  *(unsigned char *)(v4 + 24) = 1;
  *(void *)(v4 + 32) = a3;
  *(void *)(v4 + 40) = a4;
  *(unsigned char *)(v4 + 48) = a1;
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  char v9 = (void *)swift_allocObject();
  v9[2] = v8;
  v9[3] = a3;
  v9[4] = a4;
  v13[4] = sub_100044508;
  v13[5] = v9;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_1000441DC;
  v13[3] = &unk_100170888;
  char v10 = _Block_copy(v13);
  swift_retain_n();
  swift_release();
  uint64_t v11 = os_state_add_handler();

  swift_release();
  _Block_release(v10);
  *(void *)(v4 + 16) = v11;
  *(unsigned char *)(v4 + 24) = 0;
  return v4;
}

uint64_t sub_100043E84(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return 0;
  }
  if (*(unsigned char *)(Strong + 48) == 1 && (*(unsigned char *)(Strong + 24) & 1) == 0)
  {
    *(void *)(Strong + 16) = 0;
    *(unsigned char *)(Strong + 24) = 1;
    os_state_remove_handler();
  }
  uint64_t v6 = sub_100043C84(a1);
  uint64_t v7 = a3(v6);
  if (v8) {
    uint64_t v9 = sub_100043F44(v7, v8);
  }
  else {
    uint64_t v9 = 0;
  }
  swift_release();
  return v9;
}

uint64_t sub_100043F44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = self;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  __src[0] = 0;
  id v6 = [v4 dataWithPropertyList:isa format:200 options:0 error:__src];

  id v7 = __src[0];
  if (!v6)
  {
    os_log_type_t v16 = v7;
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    return 0;
  }
  uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v10 = v9;

  uint64_t v11 = Data.count.getter();
  BOOL v12 = __OFADD__(v11, 200);
  size_t v13 = v11 + 200;
  if (v12) {
    __break(1u);
  }
  id v14 = calloc(v13, 1uLL);
  if (!v14)
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  bzero((char *)__src + 4, 0xC4uLL);
  LODWORD(__src[0]) = 1;
  sub_10004455C(a1, a2, (char *)&__src[17], (uint64_t)&v19);
  swift_bridgeObjectRelease();
  unint64_t v15 = Data.count.getter();
  if ((v15 & 0x8000000000000000) == 0 && !HIDWORD(v15))
  {
    HIDWORD(__src[0]) = v15;
    memcpy(v14, __src, 0xC8uLL);
    Data.count.getter();
    Data.copyBytes(to:count:)();
LABEL_9:
    sub_10000DA10(v8, v10);
    return (uint64_t)v14;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000441DC(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v4 = v3(a2);
  swift_release();
  return v4;
}

uint64_t sub_10004422C()
{
  if ((*(unsigned char *)(v0 + 24) & 1) == 0) {
    os_state_remove_handler();
  }
  swift_release();
  return v0;
}

uint64_t sub_10004425C()
{
  sub_10004422C();

  return _swift_deallocClassInstance(v0, 49, 7);
}

uint64_t type metadata accessor for OSStateHandler()
{
  return self;
}

uint64_t getEnumTagSinglePayload for OSStateHandler.Hint(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 3) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v5 = v6 - 4;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for OSStateHandler.Hint(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100044408);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OSStateHandler.Hint()
{
  return &type metadata for OSStateHandler.Hint;
}

unint64_t sub_100044444()
{
  unint64_t result = qword_10017DE98;
  if (!qword_10017DE98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DE98);
  }
  return result;
}

uint64_t sub_100044490()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000444C8()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100044508(uint64_t a1)
{
  return sub_100043E84(a1, *(void *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24));
}

uint64_t sub_100044514(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100044524()
{
  return swift_release();
}

char *sub_10004452C(char *__src, char *__dst, uint64_t a3)
{
  if (__dst) {
    return strncpy(__dst, __src, a3 - (void)__dst);
  }
  __break(1u);
  return __src;
}

char *sub_10004455C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000)) {
    return (char *)_StringGuts._slowWithCString<A>(_:)();
  }
  if ((a2 & 0x2000000000000000) != 0)
  {
    *(void *)__src = a1;
    uint64_t v9 = a2 & 0xFFFFFFFFFFFFFFLL;
    unsigned int v6 = __src;
  }
  else if ((a1 & 0x1000000000000000) != 0)
  {
    unsigned int v6 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    unsigned int v6 = (char *)_StringObject.sharedUTF8.getter();
  }
  return sub_10004452C(v6, __dst, a4);
}

char *sub_100044640(char *a1)
{
  return sub_10004452C(a1, *(char **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10004465C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v10 - 8);
  BOOL v12 = &v29[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = type metadata accessor for LNActionRecord();
  uint64_t v14 = (uint64_t)a5 + *(int *)(v13 + 20);
  uint64_t v15 = type metadata accessor for URL();
  sub_10000D5B0(v14, 1, 1, v15);
  *a5 = a1;
  a5[1] = a2;
  swift_bridgeObjectRetain();
  sub_100047EF4(a3, v14);
  id v16 = [a4 effectiveBundleIdentifiers];
  id v17 = [v16 array];

  uint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = *(void *)(v18 + 16);
  swift_bridgeObjectRelease();
  if (v19)
  {
    sub_10002A75C(a3, (uint64_t *)&unk_10017D0C0);
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    sub_100047F5C(a3, (uint64_t)v12, (uint64_t *)&unk_10017D0C0);
    id v21 = objc_allocWithZone((Class)LNEffectiveBundleIdentifier);
    swift_bridgeObjectRetain();
    id v22 = sub_100047C84(0, a1, a2, (uint64_t)v12);
    v30[3] = sub_10000D9D4(0, &qword_10017DEA8);
    v30[0] = v22;
    id v23 = objc_allocWithZone((Class)NSOrderedSet);
    id v24 = sub_100047D64(v30);
    sub_10000BF1C(&qword_10017DEB0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10013EF20;
    *(void *)(inited + 32) = a1;
    *(void *)(inited + 40) = a2;
    *(void *)(inited + 48) = LNActionMetadata._mangledTypeNameForAppIntentsOnly.getter();
    *(void *)(inited + 56) = v26;
    Dictionary.init(dictionaryLiteral:)();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v28 = [a4 metadataByAddingEffectiveBundleIdentifiers:v24 mangledTypeNameByBundleIdentifier:isa];

    uint64_t result = sub_10002A75C(a3, (uint64_t *)&unk_10017D0C0);
    a4 = v28;
  }
  *(uint64_t *)((char *)a5 + *(int *)(v13 + 24)) = (uint64_t)a4;
  return result;
}

uint64_t sub_10004490C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  BOOL v7 = a5;
  uint64_t v8 = a4;
  uint64_t v9 = a2;
  uint64_t v10 = a1;
  uint64_t v11 = *(void *)(a7 + 16);
  if (v11)
  {
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v14 = (uint64_t *)(a7 + 56);
    uint64_t v15 = _swiftEmptyArrayStorage;
    uint64_t v16 = v11;
    do
    {
      uint64_t v17 = v15[2];
      if (__OFADD__(v17, 2))
      {
        __break(1u);
        return result;
      }
      uint64_t v18 = *(v14 - 3);
      uint64_t v19 = *(v14 - 2);
      uint64_t v20 = *v14;
      uint64_t v47 = *(v14 - 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!swift_isUniquelyReferenced_nonNull_native() || v17 + 2 > v15[3] >> 1)
      {
        sub_10001E7C0();
        uint64_t v15 = v21;
      }
      unint64_t v22 = v15[2];
      unint64_t v23 = v15[3];
      unint64_t v24 = v22 + 1;
      swift_bridgeObjectRetain();
      if (v22 >= v23 >> 1)
      {
        sub_10001E7C0();
        uint64_t v15 = v28;
      }
      long long v15[2] = v24;
      id v25 = &v15[2 * v22];
      v25[4] = v18;
      v25[5] = v19;
      unint64_t v26 = v15[3];
      swift_bridgeObjectRetain();
      if (v24 >= v26 >> 1)
      {
        sub_10001E7C0();
        uint64_t v15 = v29;
      }
      v14 += 4;
      long long v15[2] = v22 + 2;
      uint64_t v27 = &v15[2 * v24];
      v27[4] = v47;
      v27[5] = v20;
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
    sub_100057848();
    unint64_t v30 = _swiftEmptyArrayStorage[2];
    uint64_t v31 = 2 * v30;
    uint64_t v10 = a1;
    do
    {
      unint64_t v32 = v30 + 1;
      if (v30 >= _swiftEmptyArrayStorage[3] >> 1) {
        sub_100057848();
      }
      _swiftEmptyArrayStorage[2] = v32;
      id v33 = &_swiftEmptyArrayStorage[v31];
      v33[4] = 0x293F202C3F28;
      v33[5] = 0xE600000000000000;
      v31 += 2;
      unint64_t v30 = v32;
      --v11;
    }
    while (v11);
    uint64_t v8 = a4;
    BOOL v7 = a5;
    uint64_t v9 = a2;
  }
  else
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
  }
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v34._uint64_t countAndFlagsBits = v10;
  v34._object = v9;
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v35._uint64_t countAndFlagsBits = 8236;
  v35._object = (void *)0xE200000000000000;
  String.append(_:)(v35);
  swift_bridgeObjectRetain();
  v36._uint64_t countAndFlagsBits = v8;
  v36._object = v7;
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  v37._uint64_t countAndFlagsBits = 0x2028204E49202920;
  v37._object = (void *)0xEF205345554C4156;
  String.append(_:)(v37);
  sub_10000BF1C(&qword_10017DED8);
  sub_100034754((unint64_t *)&qword_10017EC90, &qword_10017DED8);
  uint64_t v38 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v40 = v39;
  swift_bridgeObjectRelease();
  v41._uint64_t countAndFlagsBits = v38;
  v41._object = v40;
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  v42._uint64_t countAndFlagsBits = 10528;
  v42._object = (void *)0xE200000000000000;
  String.append(_:)(v42);
  sub_100053EA8((uint64_t)v15);
  swift_bridgeObjectRelease();
  return 8232;
}

void *sub_100044C9C()
{
  Table.init(_:database:)(__src, 0x736E6F69746361, 0xE700000000000000, 0, 0);
  return memcpy(&unk_1001819B0, __src, 0xA8uLL);
}

uint64_t sub_100044CF0(uint64_t a1)
{
  return sub_100044D38(a1, (uint64_t)&qword_100181A58, 0xD000000000000010, 0x8000000100143090);
}

uint64_t sub_100044D14(uint64_t a1)
{
  return sub_100044D38(a1, (uint64_t)&qword_100181A70, 0x696669746E656469, 0xEA00000000007265);
}

uint64_t sub_100044D38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_10000BF1C((uint64_t *)&unk_10017E920);
  uint64_t v7 = sub_100034754((unint64_t *)&qword_10017D650, (uint64_t *)&unk_10017E920);
  return ExpressionType.init(_:)(a3, a4, v6, v7);
}

uint64_t sub_100044DC4(uint64_t a1)
{
  return sub_100044D38(a1, (uint64_t)&qword_100181A88, 0x617461646174656DLL, 0xE800000000000000);
}

uint64_t sub_100044DE4@<X0>(uint64_t a1@<X8>)
{
  if (qword_10017C2B8 != -1) {
    swift_once();
  }
  memcpy(__dst, &unk_1001819B0, sizeof(__dst));
  sub_10002A390(__dst);
  if (qword_10017C520 != -1) {
    swift_once();
  }
  memcpy(v97, &unk_1001821F8, sizeof(v97));
  memcpy(v98, __dst, 0xA8uLL);
  sub_10002A390(v97);
  if (qword_10017C2C0 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_100181A58;
  uint64_t v4 = unk_100181A60;
  uint64_t v5 = qword_100181A68;
  memcpy(__src, __dst, sizeof(__src));
  sub_10002A390(__dst);
  uint64_t v6 = QueryType.namespace<A>(_:)(v3, v4, v5);
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  sub_10002A500(__dst);
  uint64_t v11 = sub_10000BF1C((uint64_t *)&unk_10017E920);
  v89[3] = v11;
  v89[4] = (uint64_t)&protocol witness table for Expression<A>;
  v89[0] = v6;
  v89[1] = v8;
  v89[2] = v10;
  sub_10000BF1C(&qword_10017D698);
  uint64_t v12 = swift_allocObject();
  uint64_t v20 = (void *)v12;
  *(_OWORD *)(v12 + 16) = xmmword_10013F9D0;
  if (qword_10017C2C8 != -1) {
    LODWORD(v12) = swift_once();
  }
  sub_100048C90(v12, v13, v14, v15, v16, v17, v18, v19, v70, v76, a1, v89[0], v89[1], v89[2], v89[3], v89[4], v89[5], v89[6], v89[7],
    v89[8],
    v89[9],
    v89[10],
    v89[11],
    v89[12],
    v89[13],
    v89[14],
    v89[15],
    v89[16],
    v89[17],
    v89[18],
    v89[19],
    v89[20],
    v90,
    v91,
    v92,
    (uint64_t)v93,
    (uint64_t)v94,
    __src[0],
    __src[1],
    __src[2],
    __src[3],
    __src[4],
    __src[5],
    __src[6],
    __src[7],
    __src[8],
    __src[9],
    __src[10],
    __src[11],
    __src[12],
    __src[13],
    __src[14],
    __src[15],
    __src[16],
    __src[17],
    __src[18],
    __src[19],
    __src[20],
    __dst[0]);
  sub_10002A390(__dst);
  uint64_t v21 = sub_100048DEC();
  int v29 = sub_100048DB4(v21, v22, v23, v24, v25, v26, v27, v28, v71, v77, v83, v89[0], v89[1], v89[2], v89[3], v89[4], v89[5], v89[6], v89[7],
                        v89[8],
                        v89[9],
                        v89[10],
                        v89[11],
                        v89[12],
                        v89[13],
                        v89[14],
                        v89[15],
                        v89[16],
                        v89[17],
                        v89[18],
                        v89[19],
                        v89[20],
                        v90,
                        v91,
                        v92,
                        (uint64_t)v93,
                        (uint64_t)v94,
                        __src[0],
                        __src[1],
                        __src[2],
                        __src[3],
                        __src[4],
                        __src[5],
                        __src[6],
                        __src[7],
                        __src[8],
                        __src[9],
                        __src[10],
                        __src[11],
                        __src[12],
                        __src[13],
                        __src[14],
                        __src[15],
                        __src[16],
                        __src[17],
                        __src[18],
                        __src[19],
                        __src[20],
                        __dst[0]);
  v20[7] = v11;
  v20[8] = &protocol witness table for Expression<A>;
  v20[4] = v6;
  v20[5] = v8;
  v20[6] = v1;
  if (qword_10017C2D0 != -1) {
    int v29 = swift_once();
  }
  sub_100048C90(v29, v30, v31, v32, v33, v34, v35, v36, v72, v78, v84, v89[0], v89[1], v89[2], v89[3], v89[4], v89[5], v89[6], v89[7],
    v89[8],
    v89[9],
    v89[10],
    v89[11],
    v89[12],
    v89[13],
    v89[14],
    v89[15],
    v89[16],
    v89[17],
    v89[18],
    v89[19],
    v89[20],
    v90,
    v91,
    v92,
    (uint64_t)v93,
    (uint64_t)v94,
    __src[0],
    __src[1],
    __src[2],
    __src[3],
    __src[4],
    __src[5],
    __src[6],
    __src[7],
    __src[8],
    __src[9],
    __src[10],
    __src[11],
    __src[12],
    __src[13],
    __src[14],
    __src[15],
    __src[16],
    __src[17],
    __src[18],
    __src[19],
    __src[20],
    __dst[0]);
  sub_10002A390(__dst);
  uint64_t v37 = sub_100048DEC();
  uint64_t v45 = (uint64_t)sub_100048DB4(v37, v38, v39, v40, v41, v42, v43, v44, v73, v79, v85, v89[0], v89[1], v89[2], v89[3], v89[4], v89[5], v89[6], v89[7],
                   v89[8],
                   v89[9],
                   v89[10],
                   v89[11],
                   v89[12],
                   v89[13],
                   v89[14],
                   v89[15],
                   v89[16],
                   v89[17],
                   v89[18],
                   v89[19],
                   v89[20],
                   v90,
                   v91,
                   v92,
                   (uint64_t)v93,
                   (uint64_t)v94,
                   __src[0],
                   __src[1],
                   __src[2],
                   __src[3],
                   __src[4],
                   __src[5],
                   __src[6],
                   __src[7],
                   __src[8],
                   __src[9],
                   __src[10],
                   __src[11],
                   __src[12],
                   __src[13],
                   __src[14],
                   __src[15],
                   __src[16],
                   __src[17],
                   __src[18],
                   __src[19],
                   __src[20],
                   __dst[0]);
  v20[12] = v11;
  v20[13] = &protocol witness table for Expression<A>;
  v20[9] = v6;
  v20[10] = v8;
  v20[11] = v1;
  if (qword_10017C548 != -1) {
    uint64_t v45 = swift_once();
  }
  sub_100048C50(v45, v46, v47, v48, v49, v50, v51, v52, v74, v80, v86, v89[0], v89[1], v89[2], v89[3], v89[4], v89[5], v89[6], v89[7],
    v89[8],
    v89[9],
    v89[10],
    v89[11],
    v89[12],
    v89[13],
    v89[14],
    v89[15],
    v89[16],
    v89[17],
    v89[18],
    v89[19],
    v89[20],
    v90,
    v91,
    v92,
    (uint64_t)v93,
    (uint64_t)v94,
    __src[0]);
  sub_10002A390(v97);
  sub_100048BD8();
  sub_100048D94();
  uint64_t v53 = sub_10000BF1C(&qword_10017DED0);
  v20[17] = v53;
  v20[18] = &protocol witness table for Expression<A>;
  v20[14] = v6;
  v20[15] = v1;
  v20[16] = v2;
  if (qword_10017C530 != -1) {
    uint64_t v53 = swift_once();
  }
  sub_100048C50(v53, v54, v55, v56, v57, v58, v59, v60, v75, v81, v87, v89[0], v89[1], v89[2], v89[3], v89[4], v89[5], v89[6], v89[7],
    v89[8],
    v89[9],
    v89[10],
    v89[11],
    v89[12],
    v89[13],
    v89[14],
    v89[15],
    v89[16],
    v89[17],
    v89[18],
    v89[19],
    v89[20],
    v90,
    v91,
    v92,
    (uint64_t)v93,
    (uint64_t)v94,
    __src[0]);
  sub_10002A390(v97);
  sub_10000BF1C((uint64_t *)&unk_10017D100);
  sub_100048BD8();
  sub_100048D94();
  v20[22] = sub_10000BF1C(&qword_10017D678);
  v20[23] = &protocol witness table for Expression<A>;
  v20[19] = v6;
  v20[20] = v1;
  v20[21] = v2;
  SchemaType.select(_:_:)((uint64_t)v89, (uint64_t)v20, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table);
  swift_setDeallocating();
  sub_10006F144();
  sub_10000E788((uint64_t)v89);
  memcpy(v98, __src, 0xA8uLL);
  uint64_t v93 = &type metadata for Table;
  uint64_t v94 = &protocol witness table for Table;
  uint64_t v90 = swift_allocObject();
  memcpy((void *)(v90 + 16), v97, 0xA8uLL);
  uint64_t v61 = qword_100181A58;
  uint64_t v62 = unk_100181A60;
  uint64_t v63 = qword_100181A68;
  memcpy(v89, __dst, sizeof(v89));
  sub_10002A390(v97);
  QueryType.namespace<A>(_:)(v61, v62, v63);
  sub_10002A500(__dst);
  if (qword_10017C528 != -1) {
    swift_once();
  }
  memcpy(v89, v97, sizeof(v89));
  QueryType.namespace<A>(_:)(qword_1001822A0, *(uint64_t *)algn_1001822A8, qword_1001822B0);
  sub_10002A500(v97);
  uint64_t v64 = == infix<A>(_:_:)();
  uint64_t v66 = v65;
  uint64_t v68 = v67;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v88[3] = (uint64_t)&type metadata for Table;
  v88[4] = (uint64_t)&protocol witness table for Table;
  *uint64_t v88 = swift_allocObject();
  memcpy(v89, v98, sizeof(v89));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.join(_:_:on:)(1, &v90, v64, v66, v68);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  sub_10002A500(v98);
  return sub_10000E788((uint64_t)&v90);
}

uint64_t sub_1000453E4@<X0>(uint64_t *a1@<X8>)
{
  if (qword_10017C2B8 != -1) {
    swift_once();
  }
  memcpy(__dst, &unk_1001819B0, sizeof(__dst));
  memcpy(v12, &unk_1001819B0, sizeof(v12));
  if (qword_10017C2C8 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_100181A70;
  uint64_t v3 = *(void *)algn_100181A78;
  uint64_t v4 = qword_100181A80;
  memcpy(v11, __dst, sizeof(v11));
  sub_10002A390(__dst);
  uint64_t v5 = QueryType.namespace<A>(_:)(v2, v3, v4);
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  sub_10002A500(__dst);
  v11[3] = sub_10000BF1C((uint64_t *)&unk_10017E920);
  v11[4] = &protocol witness table for Expression<A>;
  v11[0] = v5;
  v11[1] = v7;
  void v11[2] = v9;
  a1[3] = (uint64_t)&type metadata for Table;
  a1[4] = (uint64_t)&protocol witness table for Table;
  *a1 = swift_allocObject();
  SchemaType.select(_:_:)((uint64_t)v11, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table);
  return sub_10000E788((uint64_t)v11);
}

uint64_t sub_100045584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100044DE4((uint64_t)v34);
  if (a2)
  {
    uint64_t v8 = v35;
    uint64_t v9 = v36;
    sub_10000BEA0(v34, v35);
    if (qword_10017C2C0 != -1) {
      swift_once();
    }
    *(void *)&long long v30 = a1;
    *((void *)&v30 + 1) = a2;
    == infix<A>(_:_:)();
    uint64_t v32 = v8;
    uint64_t v33 = v9;
    sub_1000274F4((uint64_t *)&v30);
    sub_100048C74();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v10 = sub_10000E788((uint64_t)v34);
    sub_100048DD4(v10, v11, v12, v13, v14, v15, v16, v17, v30, v31, v32, v33, v34[0]);
  }
  if (a4)
  {
    uint64_t v18 = v35;
    uint64_t v19 = v36;
    sub_10000BEA0(v34, v35);
    if (qword_10017C2C8 != -1) {
      swift_once();
    }
    sub_10002A9C0((uint64_t)&qword_100181A70);
    *(void *)&long long v30 = a3;
    *((void *)&v30 + 1) = a4;
    == infix<A>(_:_:)();
    uint64_t v32 = v18;
    uint64_t v33 = v19;
    sub_1000274F4((uint64_t *)&v30);
    sub_100048C74();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v20 = sub_10000E788((uint64_t)v34);
    sub_100048DD4(v20, v21, v22, v23, v24, v25, v26, v27, v30, v31, v32, v33, v34[0]);
  }
  uint64_t v28 = sub_100045798(v34);
  sub_10000E788((uint64_t)v34);
  return v28;
}

uint64_t sub_100045798(void *a1)
{
  Connection.prepareRowIterator(_:)(a1);
  if (!v1)
  {
    type metadata accessor for LNActionRecord();
    swift_retain();
    RowIterator.compactMap<A>(_:)();
    uint64_t v2 = v4;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  return v2;
}

uint64_t sub_100045864(uint64_t a1, uint64_t a2)
{
  sub_1000453E4(v21);
  if (a2)
  {
    uint64_t v6 = v22;
    uint64_t v3 = v23;
    sub_10000BEA0(v21, v22);
    if (qword_10017C2C0 != -1) {
      swift_once();
    }
    sub_10002A9C0((uint64_t)&qword_100181A58);
    *(void *)&long long v17 = a1;
    *((void *)&v17 + 1) = a2;
    == infix<A>(_:_:)();
    uint64_t v19 = v6;
    uint64_t v20 = v3;
    sub_1000274F4((uint64_t *)&v17);
    QueryType.filter(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v7 = sub_10000E788((uint64_t)v21);
    sub_100048DD4(v7, v8, v9, v10, v11, v12, v13, v14, v17, v18, v19, v20, v21[0]);
  }
  Connection.prepareRowIterator(_:)(v21);
  if (v2)
  {
    sub_10000E788((uint64_t)v21);
  }
  else
  {
    RowIterator.compactMap<A>(_:)();
    uint64_t v3 = v16;
    sub_10000E788((uint64_t)v21);
    swift_bridgeObjectRelease();
    swift_release();
  }
  return v3;
}

void sub_100045A2C(void *a1@<X8>)
{
  if (qword_10017C2C8 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  if (v1)
  {
    swift_errorRelease();
    uint64_t v3 = 0;
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v3 = v5;
    uint64_t v4 = v6;
  }
  *a1 = v3;
  a1[1] = v4;
}

void *sub_100045AF0(unint64_t a1)
{
  unint64_t v1 = a1;
  if (!(a1 >> 62))
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2) {
      goto LABEL_3;
    }
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v23) {
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v2)
  {
    uint64_t v3 = _swiftEmptyArrayStorage;
    goto LABEL_11;
  }
LABEL_3:
  v27[0] = _swiftEmptyArrayStorage;
  uint64_t v3 = v27;
  sub_1000578DC();
  if (v2 < 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v4 = 0;
  uint64_t v3 = (void *)v27[0];
  unint64_t v25 = v1 & 0xC000000000000001;
  unint64_t v30 = v1;
  do
  {
    if (v25) {
      id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v5 = *(id *)(v1 + 8 * v4 + 32);
    }
    uint64_t v6 = v5;
    id v7 = [v5 actionIdentifier];
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;

    id v11 = [v6 bundleIdentifier];
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;

    v27[0] = v3;
    unint64_t v15 = v3[2];
    if (v15 >= v3[3] >> 1)
    {
      sub_1000578DC();
      uint64_t v3 = (void *)v27[0];
    }
    ++v4;
    v3[2] = v15 + 1;
    uint64_t v16 = &v3[4 * v15];
    v16[4] = v8;
    v16[5] = v10;
    v16[6] = v12;
    v16[7] = v14;
    unint64_t v1 = v30;
  }
  while (v2 != v4);
LABEL_11:
  if (qword_10017C2C8 != -1) {
LABEL_21:
  }
    swift_once();
  uint64_t v17 = qword_100181A70;
  uint64_t v18 = *(void **)algn_100181A78;
  uint64_t v19 = qword_100181A80;
  if (qword_10017C2C0 != -1) {
    swift_once();
  }
  sub_10004490C(v17, v18, v19, qword_100181A58, unk_100181A60, qword_100181A68, (uint64_t)v3);
  swift_bridgeObjectRelease();
  sub_100044DE4((uint64_t)v27);
  uint64_t v20 = v28;
  uint64_t v21 = v29;
  sub_10000BEA0(v27, v28);
  v26[3] = v20;
  v26[4] = v21;
  sub_1000274F4(v26);
  QueryType.filter(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v22 = sub_100045798(v26);
  sub_10000E788((uint64_t)v26);
  sub_10000E788((uint64_t)v27);
  return (void *)v22;
}

uint64_t sub_100045E0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t result = sub_100045F38(a1, a2, a3, a4, 0x736E6F69746361, (void *)0xE700000000000000, a5, a6, 0x696669746E656469, (void *)0xEA00000000007265, 0x617461646174656DLL, (void *)0xE800000000000000, 0xD000000000000023, (void *)0x8000000100143990);
  if (!v7)
  {
    if (v12)
    {
      sub_100045584(a1, a2, result, v12);
      swift_bridgeObjectRelease();
      sub_100048F38();
      return swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v13 = type metadata accessor for LNActionRecord();
      return sub_10000D5B0(a7, 1, 1, v13);
    }
  }
  return result;
}

uint64_t sub_100045F38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{
  v32[0] = 0;
  v32[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(90);
  v17._uint64_t countAndFlagsBits = 0x200A5443454C4553;
  v17._object = (void *)0xEB00000000202020;
  String.append(_:)(v17);
  v18._uint64_t countAndFlagsBits = a9;
  v18._object = a10;
  String.append(_:)(v18);
  sub_100048C28();
  v19._uint64_t countAndFlagsBits = a5;
  v19._object = a6;
  String.append(_:)(v19);
  sub_100048B90();
  v20._uint64_t countAndFlagsBits = a5;
  v20._object = a6;
  String.append(_:)(v20);
  v21._uint64_t countAndFlagsBits = 46;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  v22._uint64_t countAndFlagsBits = a11;
  v22._object = a12;
  String.append(_:)(v22);
  v23._uint64_t countAndFlagsBits = 0x2E2427202CLL;
  v23._object = (void *)0xE500000000000000;
  String.append(_:)(v23);
  v24._uint64_t countAndFlagsBits = a13;
  v24._object = a14;
  String.append(_:)(v24);
  v25._object = (void *)0x8000000100143960;
  v25._uint64_t countAndFlagsBits = 0xD000000000000029;
  String.append(_:)(v25);
  sub_10000BF1C(&qword_10017DEB8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013EF20;
  *(void *)(inited + 56) = &type metadata for String;
  *(void *)(inited + 64) = &protocol witness table for String;
  *(void *)(inited + 32) = a3;
  *(void *)(inited + 40) = a4;
  swift_bridgeObjectRetain();
  Connection.prepare(_:_:)(0, 0xE000000000000000, inited);
  if (v32[16])
  {
    swift_setDeallocating();
    sub_10006F18C();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_10006F18C();
  unint64_t v28 = (unint64_t)Statement.failableNext()();
  if (!v29)
  {
    if (v28)
    {
      if (*(void *)(v28 + 16) == 1)
      {
        sub_100047F5C(v28 + 32, (uint64_t)v32, &qword_10017DEC0);
        swift_bridgeObjectRelease();
        swift_release();
        if (v32[3])
        {
          sub_10000BF1C(&qword_10017DEC8);
          if (swift_dynamicCast()) {
            return v31;
          }
        }
        else
        {
          sub_10002A75C((uint64_t)v32, &qword_10017DEC0);
        }
        return 0;
      }
      swift_bridgeObjectRelease();
    }
    swift_release();
    return 0;
  }
  return swift_release();
}

void *sub_1000461F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = (void *)a1;
  if (a4)
  {
    uint64_t v61 = a1;
    sub_100044DE4((uint64_t)v58);
    uint64_t v8 = v59;
    uint64_t v11 = v60;
    sub_10000BEA0(v58, (uint64_t)v59);
    if (qword_10017C2C0 != -1) {
      swift_once();
    }
    *(void *)&long long v54 = a3;
    *((void *)&v54 + 1) = a4;
    == infix<A>(_:_:)();
    uint64_t v56 = v8;
    uint64_t v57 = v11;
    sub_1000274F4((uint64_t *)&v54);
    sub_100048C74();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v12 = sub_10000E788((uint64_t)v58);
    uint64_t v20 = sub_100048DD4(v12, v13, v14, v15, v16, v17, v18, v19, v54, v55, (uint64_t)v56, v57, v58[0]);
    uint64_t v25 = sub_100048CD8(v20, v21, v22, v23, v24);
    sub_100048CF4(v25, v26, v27, v28, v29);
    if (v5) {
      return v8;
    }
    uint64_t v40 = v61;
    uint64_t v41 = a2;
LABEL_12:
    uint64_t v8 = sub_1000463F0(v40, v41, a5);
    swift_bridgeObjectRelease();
    return v8;
  }
  if (a2 != 2)
  {
    if (a2 != 1)
    {
      if (a2) {
        return _swiftEmptyArrayStorage;
      }
      uint64_t v30 = sub_100044DE4((uint64_t)v58);
      uint64_t v35 = sub_100048CD8(v30, v31, v32, v33, v34);
      sub_100048CF4(v35, v36, v37, v38, v39);
      if (v5) {
        return v8;
      }
      uint64_t v40 = (uint64_t)v8;
      uint64_t v41 = 0;
      goto LABEL_12;
    }
    if (sub_100046AC0(a1) >= 2)
    {
      uint64_t v42 = sub_100044DE4((uint64_t)v58);
      uint64_t v47 = sub_100048CD8(v42, v43, v44, v45, v46);
      sub_100048CF4(v47, v48, v49, v50, v51);
      if (v5) {
        return v8;
      }
      uint64_t v40 = (uint64_t)v8;
      uint64_t v41 = 1;
      goto LABEL_12;
    }
  }
  sub_100046AE0((uint64_t)v8);
  if (!v5) {
    return (void *)v52;
  }
  return v8;
}

void *sub_1000463F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v52 = type metadata accessor for LNActionRecord();
  uint64_t v7 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v51 = (uint64_t)v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t)v49 - v10;
  uint64_t v12 = _swiftEmptyArrayStorage;
  uint64_t v63 = _swiftEmptyArrayStorage;
  uint64_t v13 = *(void *)(a3 + 16);
  swift_bridgeObjectRetain();
  if (!v13)
  {
LABEL_85:
    swift_bridgeObjectRelease();
    return v12;
  }
  uint64_t v14 = 0;
  v49[0] = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v49[1] = v13;
  uint64_t v55 = a3 + v49[0];
  uint64_t v56 = *(void *)(v7 + 72);
  unint64_t v57 = a1 & 0xC000000000000001;
  if (a1 < 0) {
    uint64_t v15 = a1;
  }
  else {
    uint64_t v15 = a1 & 0xFFFFFFFFFFFFFF8;
  }
  uint64_t v58 = v15;
  uint64_t v59 = a1 + 56;
  v49[3] = a2;
  v49[4] = a3;
  uint64_t v60 = a1;
  v49[2] = v11;
  while (1)
  {
    sub_100048064(v55 + v56 * v14, v11);
    if (a2 == 2) {
      break;
    }
    if (a2 == 1)
    {
      id v40 = [(id)sub_100048D4C() systemProtocols];
      sub_10000D9D4(0, &qword_10017D0A0);
      unint64_t v41 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v41 >> 62)
      {
        swift_bridgeObjectRetain();
        _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      sub_100048188();
      uint64_t result = (void *)Set.init(minimumCapacity:)();
      uint64_t v42 = (uint64_t)result;
      uint64_t v62 = (uint64_t)result;
      if (v41 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
        uint64_t result = (void *)swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v3 = *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      a1 = v60;
      if (v3)
      {
        if (v3 < 1) {
          goto LABEL_88;
        }
        for (uint64_t i = 0; i != v3; ++i)
        {
          if ((v41 & 0xC000000000000001) != 0) {
            id v44 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v44 = *(id *)(v41 + 8 * i + 32);
          }
          sub_100023B1C(&v61, v44);
        }
        swift_bridgeObjectRelease();
        uint64_t v42 = v62;
        a1 = v60;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      sub_1000478B4(v42, a1);
      char v46 = v45;
      swift_bridgeObjectRelease();
      if (v46) {
        goto LABEL_74;
      }
    }
    else if (!a2)
    {
      id v16 = [(id)sub_100048D4C() systemProtocols];
      uint64_t v13 = sub_10000D9D4(0, &qword_10017D0A0);
      unint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v54 = v14;
      if (v17 >> 62)
      {
        sub_100048D28();
        swift_bridgeObjectRetain();
        uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
      }
      else
      {
        sub_100048E20();
        swift_bridgeObjectRetain();
      }
      unint64_t v18 = v57;
      if (v14)
      {
        sub_100048D10();
        while (1)
        {
          uint64_t result = a2
                 ? (void *)specialized _ArrayBuffer._getElementSlowPath(_:)()
                 : *(id *)(v53 + 8 * v3);
          uint64_t v20 = result;
          BOOL v21 = __OFADD__(v3++, 1);
          if (v21) {
            break;
          }
          if (v18)
          {
            char v22 = __CocoaSet.contains(_:)();

            if (v22) {
              goto LABEL_50;
            }
          }
          else
          {
            if (*(void *)(a1 + 16))
            {
              NSObject._rawHashValue(seed:)(*(void *)(a1 + 40));
              sub_100048B4C();
              if (v23)
              {
                id v24 = *(id *)(*(void *)(a1 + 48) + 8 * a2);
                char v25 = sub_100048B74();

                if (v25)
                {
                  swift_bridgeObjectRelease();
                  sub_100048D7C();

                  goto LABEL_69;
                }
                uint64_t v11 = -1;
                while (1)
                {
                  sub_100048BBC();
                  if ((v26 & 1) == 0) {
                    break;
                  }
                  id v27 = **(id **)(a1 + 48);
                  char v28 = sub_100048B74();

                  if (v28)
                  {
                    sub_100048D7C();

                    goto LABEL_68;
                  }
                }
              }
            }

            unint64_t v18 = v57;
            a2 = v50;
          }
          if (v3 == v14) {
            goto LABEL_29;
          }
        }
        __break(1u);
        goto LABEL_87;
      }
LABEL_29:
      swift_bridgeObjectRelease();
LABEL_72:
      swift_bridgeObjectRelease();
LABEL_73:
      sub_100048D5C();
      swift_bridgeObjectRelease();
LABEL_74:
      sub_100048124(v11, v51);
      uint64_t v47 = v63;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000579CC();
        uint64_t v47 = v63;
      }
      unint64_t v48 = v47[2];
      uint64_t v3 = v48 + 1;
      if (v48 >= v47[3] >> 1)
      {
        sub_1000579CC();
        uint64_t v47 = v63;
      }
      void v47[2] = v3;
      sub_100048124(v51, (uint64_t)v47 + v49[0] + v48 * v56);
      a1 = v60;
      goto LABEL_79;
    }
LABEL_70:
    sub_1000480C8(v11);
LABEL_79:
    if (++v14 == v13)
    {
      uint64_t v12 = v63;
      goto LABEL_85;
    }
  }
  id v29 = [(id)sub_100048D4C() systemProtocols];
  uint64_t v13 = sub_10000D9D4(0, &qword_10017D0A0);
  unint64_t v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v54 = v14;
  if (v30 >> 62)
  {
    sub_100048D28();
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    sub_100048E20();
    swift_bridgeObjectRetain();
  }
  unint64_t v31 = v57;
  if (!v14)
  {
LABEL_50:
    swift_bridgeObjectRelease();
LABEL_68:
    swift_bridgeObjectRelease();
LABEL_69:
    sub_100048D5C();
    swift_bridgeObjectRelease();
    goto LABEL_70;
  }
  sub_100048D10();
  while (1)
  {
    uint64_t result = a2 ? (void *)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v53 + 8 * v3);
    uint64_t v32 = result;
    BOOL v21 = __OFADD__(v3++, 1);
    if (v21) {
      break;
    }
    if (v31)
    {
      char v33 = __CocoaSet.contains(_:)();

      if (v33) {
        goto LABEL_29;
      }
    }
    else
    {
      if (*(void *)(a1 + 16))
      {
        NSObject._rawHashValue(seed:)(*(void *)(a1 + 40));
        sub_100048B4C();
        if (v34)
        {
          id v35 = *(id *)(*(void *)(a1 + 48) + 8 * a2);
          char v36 = sub_100048B74();

          if (v36)
          {
            swift_bridgeObjectRelease();
            sub_100048D7C();

            goto LABEL_73;
          }
          uint64_t v11 = -1;
          while (1)
          {
            sub_100048BBC();
            if ((v37 & 1) == 0) {
              break;
            }
            id v38 = **(id **)(a1 + 48);
            char v39 = sub_100048B74();

            if (v39)
            {
              sub_100048D7C();

              goto LABEL_72;
            }
          }
        }
      }

      unint64_t v31 = v57;
      a2 = v50;
    }
    if (v3 == v14) {
      goto LABEL_50;
    }
  }
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
  return result;
}

uint64_t sub_100046AC0(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0) {
    return __CocoaSet.count.getter();
  }
  else {
    return *(void *)(a1 + 16);
  }
}

void sub_100046AE0(uint64_t a1)
{
  uint64_t v3 = sub_100046AC0(a1);
  if (v3)
  {
    uint64_t v4 = v3;
    unint64_t v55 = (unint64_t)_swiftEmptyArrayStorage;
    sub_100057848();
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v5 = __CocoaSet.startIndex.getter();
      unsigned __int8 v7 = 1;
    }
    else
    {
      uint64_t v5 = sub_10004AF3C(a1);
      unsigned __int8 v7 = v9 & 1;
    }
    uint64_t v52 = v5;
    uint64_t v53 = v6;
    unsigned __int8 v54 = v7;
    if (v4 < 0)
    {
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return;
    }
    sub_100048E0C();
    do
    {
      sub_10004AC60(v52, v53, v54, a1);
      uint64_t v11 = v10;
      uint64_t v49 = (void *)v1;
      uint64_t v50 = 0xE700000000000000;
      id v12 = [v10 identifier];
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v15 = v14;

      v16._uint64_t countAndFlagsBits = v13;
      v16._object = v15;
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      v17._uint64_t countAndFlagsBits = 39;
      v17._object = (void *)0xE100000000000000;
      String.append(_:)(v17);

      uint64_t v18 = (uint64_t)v49;
      uint64_t v19 = v50;
      unint64_t v20 = v55;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100057848();
        unint64_t v20 = v55;
      }
      unint64_t v21 = *(void *)(v20 + 16);
      if (v21 >= *(void *)(v20 + 24) >> 1)
      {
        sub_100057848();
        unint64_t v20 = v55;
      }
      *(void *)(v20 + 16) = v21 + 1;
      unint64_t v22 = v20 + 16 * v21;
      *(void *)(v22 + 32) = v18;
      *(void *)(v22 + 40) = v19;
      if ((a1 & 0xC000000000000001) != 0)
      {
        if ((v54 & 1) == 0) {
          goto LABEL_43;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        sub_10000BF1C(&qword_10017DEE0);
        unint64_t v31 = (void (*)(void **, void))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v31(&v49, 0);
      }
      else
      {
        uint64_t v23 = v52;
        uint64_t v24 = v53;
        char v25 = v54;
        uint64_t v26 = sub_1000E9F90(v52, v53, v54, a1);
        uint64_t v28 = v27;
        uint64_t v1 = v29;
        sub_1000481E8(v23, v24, v25);
        uint64_t v52 = v26;
        uint64_t v53 = v28;
        sub_100048E0C();
        unsigned __int8 v54 = v30;
      }
      --v4;
    }
    while (v4);
    sub_1000481E8(v52, v53, v54);
    uint64_t v8 = (void *)v55;
  }
  else
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
  }
  uint64_t v49 = v8;
  sub_10000BF1C(&qword_10017DED8);
  sub_100034754((unint64_t *)&qword_10017EC90, &qword_10017DED8);
  uint64_t v32 = BidirectionalCollection<>.joined(separator:)();
  char v34 = v33;
  swift_bridgeObjectRelease();
  uint64_t v49 = 0;
  uint64_t v50 = 0xE000000000000000;
  _StringGuts.grow(_:)(97);
  v35._uint64_t countAndFlagsBits = 0xD000000000000014;
  v35._object = (void *)0x80000001001439C0;
  String.append(_:)(v35);
  v36._object = (void *)0x8000000100143090;
  v36._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v36);
  v37._uint64_t countAndFlagsBits = 8236;
  v37._object = (void *)0xE200000000000000;
  String.append(_:)(v37);
  v38._uint64_t countAndFlagsBits = 0x696669746E656469;
  v38._object = (void *)0xEA00000000007265;
  String.append(_:)(v38);
  sub_100048C28();
  sub_100048C00();
  sub_100048B90();
  sub_100048C00();
  v39._uint64_t countAndFlagsBits = 46;
  v39._object = (void *)0xE100000000000000;
  String.append(_:)(v39);
  v40._uint64_t countAndFlagsBits = 0x617461646174656DLL;
  v40._object = (void *)0xE800000000000000;
  String.append(_:)(v40);
  v41._uint64_t countAndFlagsBits = 0xD000000000000028;
  v41._object = (void *)0x80000001001439E0;
  String.append(_:)(v41);
  v42._uint64_t countAndFlagsBits = v32;
  v42._object = v34;
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  unint64_t v55 = (unint64_t)_swiftEmptyArrayStorage;
  Connection.prepare(_:_:)((uint64_t)v49, v50, (uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  if (!v48)
  {
    unint64_t v43 = (unint64_t)Statement.failableNext()();
    if (!v44)
    {
      unint64_t v45 = v43;
      do
      {
        if (!v45)
        {
          sub_100045AF0(v55);
          swift_release();
          swift_bridgeObjectRelease();
          return;
        }
        if (*(void *)(v45 + 16) == 2)
        {
          sub_100047F5C(v45 + 32, (uint64_t)&v49, &qword_10017DEC0);
          if (!v51) {
            goto LABEL_34;
          }
          sub_10000BF1C(&qword_10017DEC8);
          if (sub_100048CB4())
          {
            if (*(void *)(v45 + 16) < 2uLL) {
              goto LABEL_42;
            }
            sub_100047F5C(v45 + 72, (uint64_t)&v49, &qword_10017DEC0);
            swift_bridgeObjectRelease();
            if (!v51)
            {
LABEL_34:
              swift_bridgeObjectRelease();
              sub_10002A75C((uint64_t)&v49, &qword_10017DEC0);
              goto LABEL_35;
            }
            if (sub_100048CB4())
            {
              id v46 = objc_allocWithZone((Class)LNFullyQualifiedActionIdentifier);
              sub_100047DD0();
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              if (*(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              }
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
              goto LABEL_35;
            }
          }
        }
        swift_bridgeObjectRelease();
LABEL_35:
        unint64_t v45 = (unint64_t)Statement.failableNext()();
      }
      while (!v47);
    }
    swift_release();
  }
  swift_bridgeObjectRelease();
}

uint64_t sub_1000470F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v24 - v10;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v24 - v13;
  if (qword_10017C548 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  if (qword_10017C2C0 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  Swift::String v17 = v25;
  uint64_t v16 = v26;
  if (qword_10017C530 != -1) {
    swift_once();
  }
  Row.get<A>(_:)(qword_1001822B8, qword_1001822C0, qword_1001822C8, a1, a2, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, v15, (uint64_t)v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34,
    v35);
  uint64_t v24 = v17;
  if (v26)
  {
    URL.init(fileURLWithPath:)();
    uint64_t v18 = type metadata accessor for URL();
    sub_10000D5B0((uint64_t)v14, 0, 1, v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v19 = type metadata accessor for URL();
    sub_10000D5B0((uint64_t)v14, 1, 1, v19);
  }
  if (qword_10017C2D0 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  sub_100047F5C((uint64_t)v14, (uint64_t)v11, (uint64_t *)&unk_10017D0C0);
  sub_10000D9D4(0, &qword_10017E9F0);
  uint64_t v22 = type metadata accessor for URL();
  sub_10000D5B0((uint64_t)v8, 1, 1, v22);
  uint64_t v23 = (void *)static LNActionMetadata.fromJSON(_:bundleMetadataVersion:bundleURL:effectiveBundleIdentifier:)();
  sub_10002A75C((uint64_t)v8, (uint64_t *)&unk_10017D0C0);
  swift_bridgeObjectRelease();
  sub_10004465C((uint64_t)v24, v16, (uint64_t)v11, v23, a3);
  sub_10002A75C((uint64_t)v14, (uint64_t *)&unk_10017D0C0);
  uint64_t v20 = type metadata accessor for LNActionRecord();
  return sub_10000D5B0((uint64_t)a3, 0, 1, v20);
}

uint64_t sub_100047508(uint64_t *a1)
{
  type metadata accessor for LNActionRecord();
  Swift::String v3 = LNActionMetadata.asJson(prettyPrinted:)(0);
  uint64_t result = v3._countAndFlagsBits;
  if (!v4)
  {
    if (qword_10017C2B8 != -1) {
      swift_once();
    }
    memcpy(__dst, &unk_1001819B0, sizeof(__dst));
    memcpy(__src, &unk_1001819B0, sizeof(__src));
    sub_10002A390(__dst);
    if (qword_10017C2C0 != -1) {
      swift_once();
    }
    uint64_t v5 = sub_10002A9C0((uint64_t)&qword_100181A58);
    uint64_t v6 = (void *)a1[1];
    v24._uint64_t countAndFlagsBits = *a1;
    v24._object = v6;
    <- infix<A>(_:_:)(v5, v7, v8, (uint64_t)&v24, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
    sub_10000BF1C(&qword_10017E940);
    *(_OWORD *)(swift_initStackObject() + 16) = xmmword_10013EF20;
    if (qword_10017C2D0 != -1) {
      swift_once();
    }
    uint64_t v9 = sub_10002A9C0((uint64_t)&qword_100181A88);
    Swift::String v24 = v3;
    <- infix<A>(_:_:)(v9, v10, v11, (uint64_t)&v24, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
    swift_bridgeObjectRelease();
    uint64_t v12 = QueryType.insert(_:_:)((uint64_t)v25);
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    swift_setDeallocating();
    sub_10006F150();
    sub_10002A66C((uint64_t)v25);
    memcpy(v28, __src, sizeof(v28));
    sub_10002A500(v28);
    v29.template._uint64_t countAndFlagsBits = v12;
    v29.template._object = v14;
    v29.bindings._rawValue = v16;
    Connection.run(_:)(v29);
    if (v17)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v25[0] = v17;
      swift_errorRetain();
      sub_10000BF1C(&qword_10017C810);
      if (swift_dynamicCast())
      {
        swift_errorRelease();
        uint64_t v18 = __src[1];
        int v19 = __src[2];
        uint64_t v20 = __src[3];
        if (LODWORD(__src[2]) == 19)
        {
          type metadata accessor for Schema.RuntimeError();
          sub_100047EA4();
          swift_allocError();
          void *v21 = 0xD0000000000000FALL;
          v21[1] = 0x8000000100143860;
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          swift_release();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v22 = __src[0];
          sub_100047E58();
          swift_allocError();
          *(void *)uint64_t v23 = v22;
          *(void *)(v23 + 8) = v18;
          *(_DWORD *)(v23 + 16) = v19;
          *(void *)(v23 + 24) = v20;
          swift_willThrow();
        }
      }
      return swift_errorRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t type metadata accessor for LNActionRecord()
{
  uint64_t result = qword_10017DF40;
  if (!qword_10017DF40) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000478B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v4 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0) {
    uint64_t v5 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v5 = *(void *)(a2 + 16);
  }
  unint64_t v6 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0) {
    uint64_t v7 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v7 = *(void *)(a1 + 16);
  }
  if (v7 >= v5)
  {
    if (v4)
    {
      swift_bridgeObjectRetain();
      __CocoaSet.makeIterator()();
      sub_10000D9D4(0, &qword_10017D0A0);
      sub_100048188();
      Set.Iterator.init(_cocoa:)();
      uint64_t v2 = v37;
      uint64_t v8 = v38;
      uint64_t v10 = v39;
      int64_t v9 = v40;
      unint64_t v11 = v41;
    }
    else
    {
      uint64_t v12 = -1 << *(unsigned char *)(v2 + 32);
      uint64_t v8 = v2 + 56;
      uint64_t v10 = ~v12;
      uint64_t v13 = -v12;
      if (v13 < 64) {
        uint64_t v14 = ~(-1 << v13);
      }
      else {
        uint64_t v14 = -1;
      }
      unint64_t v11 = v14 & *(void *)(v2 + 56);
      swift_bridgeObjectRetain();
      int64_t v9 = 0;
    }
    sub_10000D9D4(0, &qword_10017D0A0);
    int64_t v33 = (unint64_t)(v10 + 64) >> 6;
    uint64_t v35 = a1 + 56;
    uint64_t v32 = v8;
    while (1)
    {
      int64_t v34 = v9;
      if (v2 < 0)
      {
        if (!__CocoaSet.Iterator.next()()) {
          goto LABEL_47;
        }
        swift_dynamicCast();
        uint64_t v17 = v36;
        if (!v36) {
          goto LABEL_47;
        }
      }
      else
      {
        if (v11)
        {
          unint64_t v15 = __clz(__rbit64(v11));
          v11 &= v11 - 1;
          unint64_t v16 = v15 | (v9 << 6);
        }
        else
        {
          int64_t v18 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
            __break(1u);
            return;
          }
          if (v18 >= v33) {
            goto LABEL_47;
          }
          unint64_t v19 = *(void *)(v8 + 8 * v18);
          ++v9;
          if (!v19)
          {
            int64_t v9 = v18 + 1;
            if (v18 + 1 >= v33) {
              goto LABEL_47;
            }
            unint64_t v19 = *(void *)(v8 + 8 * v9);
            if (!v19)
            {
              int64_t v9 = v18 + 2;
              if (v18 + 2 >= v33) {
                goto LABEL_47;
              }
              unint64_t v19 = *(void *)(v8 + 8 * v9);
              if (!v19)
              {
                int64_t v20 = v34 + 4;
                while (v20 < v33)
                {
                  unint64_t v19 = *(void *)(v8 + 8 * v20++);
                  if (v19)
                  {
                    int64_t v9 = v20 - 1;
                    goto LABEL_32;
                  }
                }
LABEL_47:
                sub_100027664();
                return;
              }
            }
          }
LABEL_32:
          unint64_t v11 = (v19 - 1) & v19;
          unint64_t v16 = __clz(__rbit64(v19)) + (v9 << 6);
        }
        uint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v16);
        Swift::String v36 = v17;
        id v21 = v17;
        if (!v17) {
          goto LABEL_47;
        }
      }
      if (v6)
      {
        char v22 = __CocoaSet.contains(_:)();

        if ((v22 & 1) == 0) {
          goto LABEL_45;
        }
      }
      else
      {
        uint64_t v23 = v2;
        if (!*(void *)(a1 + 16)) {
          goto LABEL_44;
        }
        Swift::Int v24 = NSObject._rawHashValue(seed:)(*(void *)(a1 + 40));
        uint64_t v25 = -1 << *(unsigned char *)(a1 + 32);
        unint64_t v26 = v24 & ~v25;
        if (((*(void *)(v35 + ((v26 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v26) & 1) == 0) {
          goto LABEL_44;
        }
        id v27 = *(id *)(*(void *)(a1 + 48) + 8 * v26);
        char v28 = static NSObject.== infix(_:_:)();

        if ((v28 & 1) == 0)
        {
          uint64_t v29 = ~v25;
          while (1)
          {
            unint64_t v26 = (v26 + 1) & v29;
            if (((*(void *)(v35 + ((v26 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v26) & 1) == 0) {
              break;
            }
            id v30 = *(id *)(*(void *)(a1 + 48) + 8 * v26);
            char v31 = static NSObject.== infix(_:_:)();

            if (v31) {
              goto LABEL_43;
            }
          }
LABEL_44:

LABEL_45:
          sub_100027664();
          return;
        }
LABEL_43:

        uint64_t v2 = v23;
        unint64_t v6 = a1 & 0xC000000000000001;
        uint64_t v8 = v32;
      }
    }
  }
}

id sub_100047C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v9 = type metadata accessor for URL();
  unint64_t v11 = 0;
  if (sub_10000D5D8(a4, 1, v9) != 1)
  {
    URL._bridgeToObjectiveC()(v10);
    unint64_t v11 = v12;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(a4, v9);
  }
  id v13 = [v5 initWithType:a1 bundleIdentifier:v8 url:v11];

  return v13;
}

id sub_100047D64(void *a1)
{
  sub_10000BEA0(a1, a1[3]);
  id v3 = [v1 initWithObject:_bridgeAnythingToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  sub_10000E788((uint64_t)a1);
  return v3;
}

id sub_100047DD0()
{
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v0 initWithActionIdentifier:v1 bundleIdentifier:v2];

  return v3;
}

unint64_t sub_100047E58()
{
  unint64_t result = qword_10017E980;
  if (!qword_10017E980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E980);
  }
  return result;
}

unint64_t sub_100047EA4()
{
  unint64_t result = qword_10017DEA0;
  if (!qword_10017DEA0)
  {
    type metadata accessor for Schema.RuntimeError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DEA0);
  }
  return result;
}

uint64_t sub_100047EF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100047F5C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000BF1C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100047FC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1000470F8(a1, a2, a3);
}

uint64_t sub_100047FC8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0[12])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v0[14])
  {
    swift_bridgeObjectRelease();
    if (v0[16])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 184, 7);
}

uint64_t sub_100048064(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LNActionRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000480C8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LNActionRecord();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100048124(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LNActionRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100048188()
{
  unint64_t result = qword_10017FE50;
  if (!qword_10017FE50)
  {
    sub_10000D9D4(255, &qword_10017D0A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10017FE50);
  }
  return result;
}

uint64_t sub_1000481E8(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *sub_1000481F4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for URL();
    swift_bridgeObjectRetain();
    if (sub_10000D5D8((uint64_t)v10, 1, v11))
    {
      uint64_t v12 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
      sub_10000D5B0((uint64_t)v9, 0, 1, v11);
    }
    uint64_t v14 = *(int *)(a3 + 24);
    unint64_t v15 = *(void **)((char *)a2 + v14);
    *(uint64_t *)((char *)v4 + v14) = (uint64_t)v15;
    id v16 = v15;
  }
  return v4;
}

void sub_10004834C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for URL();
  if (!sub_10000D5D8(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  unint64_t v6 = *(void **)(a1 + *(int *)(a2 + 24));
}

void *sub_1000483F0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  swift_bridgeObjectRetain();
  if (sub_10000D5D8((uint64_t)v9, 1, v10))
  {
    uint64_t v11 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    sub_10000D5B0((uint64_t)v8, 0, 1, v10);
  }
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = *(void **)((char *)a2 + v12);
  *(void *)((char *)a1 + v12) = v13;
  id v14 = v13;
  return a1;
}

void *sub_1000484F8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  int v10 = sub_10000D5D8((uint64_t)v7, 1, v9);
  int v11 = sub_10000D5D8((uint64_t)v8, 1, v9);
  if (!v10)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v13 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  sub_10000D5B0((uint64_t)v7, 0, 1, v9);
LABEL_7:
  uint64_t v14 = *(int *)(a3 + 24);
  unint64_t v15 = *(void **)((char *)a2 + v14);
  id v16 = *(void **)((char *)a1 + v14);
  *(void *)((char *)a1 + v14) = v15;
  id v17 = v15;

  return a1;
}

_OWORD *sub_100048698(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  if (sub_10000D5D8((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    sub_10000D5B0((uint64_t)v7, 0, 1, v9);
  }
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *sub_10004878C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  int v11 = sub_10000D5D8((uint64_t)v8, 1, v10);
  int v12 = sub_10000D5D8((uint64_t)v9, 1, v10);
  if (!v11)
  {
    uint64_t v13 = *(void *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    uint64_t v14 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  sub_10000D5B0((uint64_t)v8, 0, 1, v10);
LABEL_7:
  uint64_t v15 = *(int *)(a3 + 24);
  id v16 = *(void **)((char *)a1 + v15);
  *(void *)((char *)a1 + v15) = *(void *)((char *)a2 + v15);

  return a1;
}

uint64_t sub_100048918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004892C);
}

uint64_t sub_10004892C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    return sub_10000D5D8(v9, a2, v8);
  }
}

uint64_t sub_1000489B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000489CC);
}

uint64_t sub_1000489CC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
    uint64_t v8 = v5 + *(int *)(a4 + 20);
    return sub_10000D5B0(v8, a2, a2, v7);
  }
  return result;
}

void sub_100048A50()
{
  sub_100048AF4();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_100048AF4()
{
  if (!qword_10017E8A0)
  {
    type metadata accessor for URL();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10017E8A0);
    }
  }
}

uint64_t sub_100048B74()
{
  return static NSObject.== infix(_:_:)();
}

void sub_100048B90()
{
  uint64_t v1 = 0x655F6E6F736A202CLL;
  unint64_t v2 = 0xEC00000028686361;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t sub_100048BD8()
{
  return QueryType.namespace<A>(_:)(v0, v1, v2);
}

void sub_100048C00()
{
  uint64_t v1 = 0x736E6F69746361;
  unint64_t v2 = 0xE700000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

void sub_100048C28()
{
  uint64_t v1 = 0x20200A4D4F52460ALL;
  unint64_t v2 = 0xEA00000000002020;
  String.append(_:)(*(Swift::String *)&v1);
}

void *sub_100048C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t __dst)
{
  return memcpy(&__dst, &STACK[0x238], 0xA8uLL);
}

uint64_t sub_100048C74()
{
  return QueryType.filter(_:)();
}

void *sub_100048C90(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char __dst,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char __src)
{
  return memcpy(&__dst, &__src, 0xA8uLL);
}

uint64_t sub_100048CB4()
{
  return swift_dynamicCast();
}

uint64_t sub_100048CD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  return sub_100045798((uint64_t *)va);
}

uint64_t sub_100048CF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  return sub_10000E788((uint64_t)va);
}

void sub_100048D10()
{
  *(void *)(v1 - 176) = v0 + 32;
  *(void *)(v1 - 200) = v0 & 0xC000000000000001;
}

uint64_t sub_100048D28()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_100048D4C()
{
  return *(void *)(v0 + *(int *)(*(void *)(v1 - 184) + 24));
}

uint64_t sub_100048D5C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100048D7C()
{
  return swift_bridgeObjectRelease();
}

void *sub_100048D94()
{
  return sub_10002A500(&STACK[0x238]);
}

void *sub_100048DB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  return sub_10002A500(&a59);
}

uint64_t sub_100048DD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  return sub_10000D698(&a9, (uint64_t)&a13);
}

uint64_t sub_100048DEC()
{
  return QueryType.namespace<A>(_:)(v0, v1, v2);
}

uint64_t sub_100048E20()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_100048E40(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  sub_10000BF1C(&qword_10017D3F8);
  if (v1)
  {
    sub_10004B1DC();
    uint64_t v2 = sub_10004B138();
    v3(v2);
  }
  uint64_t v4 = sub_10004B1CC();

  return sub_10000D5B0(v4, v5, v6, v7);
}

uint64_t sub_100048EC4()
{
  sub_10004B200();
  type metadata accessor for URL();
  if (v0)
  {
    sub_10004B1DC();
    uint64_t v1 = sub_10004B138();
    v2(v1);
  }
  uint64_t v3 = sub_10004B1CC();

  return sub_10000D5B0(v3, v4, v5, v6);
}

uint64_t sub_100048F38()
{
  sub_10004B200();
  uint64_t v3 = type metadata accessor for LNActionRecord();
  if (v2) {
    sub_100048064(v1+ ((*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80)), v0);
  }
  uint64_t v4 = sub_10004B1CC();

  return sub_10000D5B0(v4, v5, v6, v7);
}

uint64_t sub_100048FCC(uint64_t a1)
{
  uint64_t result = sub_10004AF40(a1);
  if (v4) {
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32)) {
    return 0;
  }
  else {
    return sub_10004AEC0(result, v3, 0, a1);
  }
}

void *sub_100049034()
{
  uint64_t v0 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v0 - 8);
  sub_10001B450();
  uint64_t v3 = v2 - v1;
  static DispatchQoS.userInitiated.getter();
  sub_10000BF1C(&qword_10017DF88);
  swift_allocObject();
  uint64_t result = sub_1000493C4((void *)1, 300, v3);
  qword_100181AA0 = (uint64_t)result;
  return result;
}

uint64_t sub_1000490CC()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_100181AA8 = result;
  unk_100181AB0 = v1;
  return result;
}

void *sub_1000490FC(uint64_t a1)
{
  uint64_t v1 = sub_100048FCC(a1);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = v1;
  uint64_t v4 = v2;
  sub_10000BF1C((uint64_t *)&unk_10017D3C0);
  type metadata accessor for Notification();
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_10013EF20;
  uint64_t v6 = (void *)LNAppShortcutsChangedNotification;
  sub_10000BF1C(&qword_10017DF80);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013F1D0;
  id v8 = v6;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 72) = v3;
  *(void *)(inited + 80) = v4;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  AnyHashable.init<A>(_:)();
  uint64_t v9 = sub_10000D9D4(0, (unint64_t *)&qword_10017D668);
  swift_bridgeObjectRetain();
  sub_100049CCC();
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  sub_100053DA4(v11);
  swift_release();
  id v12 = sub_10000A720();
  *(void *)(inited + 168) = v9;
  *(void *)(inited + 144) = v12;
  Dictionary.init(dictionaryLiteral:)();
  Notification.init(name:object:userInfo:)();
  return (void *)v5;
}

uint64_t sub_100049338()
{
  swift_bridgeObjectRetain();
  v0._uint64_t countAndFlagsBits = Set.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0x676E697461647075;
}

uint64_t sub_1000493BC()
{
  return sub_100049338();
}

void *sub_1000493C4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v29 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v11);
  uint64_t v30 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v14 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)((char *)v4 + *(void *)(*v4 + 128)) = 0;
  *(void *)((char *)v4 + *(void *)(*v4 + 136)) = 0;
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    id v27 = a1;
    if (qword_10017C460 == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  uint64_t v25 = v8;
  uint64_t v26 = a2;
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v16 = sub_10000BEE4(v15, (uint64_t)qword_100181ED8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))((uint64_t)v4 + qword_100182438, v16, v15);
  v24[1] = sub_10000D9D4(0, (unint64_t *)&qword_10017C750);
  char v31 = 0;
  unint64_t v32 = 0xE000000000000000;
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  char v31 = (void *)0xD000000000000010;
  unint64_t v32 = 0x8000000100143250;
  if (qword_10017C2E0 != -1) {
    swift_once();
  }
  uint64_t v18 = qword_100181AA8;
  id v17 = (void *)unk_100181AB0;
  swift_bridgeObjectRetain();
  v19._uint64_t countAndFlagsBits = v18;
  v19._object = v17;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 0x636E756F6265442ELL;
  v20._object = (void *)0xEA00000000007265;
  String.append(_:)(v20);
  id v21 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v28 = a3;
  v21(v14, a3, v30);
  char v31 = _swiftEmptyArrayStorage;
  sub_10004AFC0();
  sub_10000BF1C(&qword_10017C760);
  sub_100027C2C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v29 + 104))(v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v25);
  *(void *)((char *)v4 + qword_100182440) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  id v22 = v27;
  v4[2] = v26;
  if ((unint64_t)v22 <= 1) {
    id v22 = [self defaultCenter];
  }
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v28, v30);
  v4[3] = v22;
  return v4;
}

void *sub_100049824(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  sub_10000E948();
  uint64_t v33 = v9;
  __chkstk_darwin(v10);
  sub_10001B450();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v14);
  sub_10001B450();
  uint64_t v34 = type metadata accessor for DispatchQoS();
  sub_10000E948();
  uint64_t v16 = v15;
  __chkstk_darwin(v17);
  sub_10001B450();
  uint64_t v20 = v19 - v18;
  id v21 = (void *)((char *)v4 + *(void *)(*v4 + 128));
  void *v21 = 0;
  v21[1] = 0;
  *(void *)((char *)v4 + *(void *)(*v4 + 136)) = 0;
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v32 = a1;
    if (qword_10017C460 == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  uint64_t v30 = v8;
  uint64_t v31 = a2;
  uint64_t v22 = type metadata accessor for Logger();
  sub_10000BEE4(v22, (uint64_t)qword_100181ED8);
  sub_10004B1DC();
  (*(void (**)(void))(v23 + 16))();
  sub_10000D9D4(0, (unint64_t *)&qword_10017C750);
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  if (qword_10017C420 != -1) {
    swift_once();
  }
  uint64_t v25 = qword_100181D90;
  Swift::Int v24 = *(void **)algn_100181D98;
  swift_bridgeObjectRetain();
  v26._uint64_t countAndFlagsBits = v25;
  v26._object = v24;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._uint64_t countAndFlagsBits = 0x636E756F6265442ELL;
  v27._object = (void *)0xEA00000000007265;
  String.append(_:)(v27);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v20, a3, v34);
  sub_10004AFC0();
  sub_10000BF1C(&qword_10017C760);
  sub_100027C2C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(uint64_t, void, uint64_t))(v33 + 104))(v13, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v30);
  *(void *)((char *)v4 + qword_100182440) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  id v28 = (id)v32;
  v4[2] = v31;
  if (v32 <= 1) {
    id v28 = [self defaultCenter];
  }
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a3, v34);
  v4[3] = v28;
  return v4;
}

void sub_100049C18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_10004B158();
  a25 = v26;
  a26 = v28;
  uint64_t v29 = *(void *)(v27 + 16);
  if (v29)
  {
    uint64_t v30 = v27;
    sub_10000BF1C(&qword_10017DF98);
    uint64_t v31 = (void *)swift_allocObject();
    size_t v32 = j__malloc_size(v31);
    void v31[2] = v29;
    v31[3] = 2 * ((uint64_t)(v32 - 32) / 48);
    sub_10004A05C((uint64_t)&a10, (uint64_t)(v31 + 4), v29, v30);
    swift_bridgeObjectRetain();
    sub_10004B0F4();
    if (!v33) {
      __break(1u);
    }
  }
  sub_10004B1B0();
}

void sub_100049CCC()
{
  sub_10004B158();
  if (*(void *)(v0 + 16))
  {
    sub_10000BF1C((uint64_t *)&unk_10017E690);
    uint64_t v1 = (const void *)sub_100028788();
    size_t v2 = j__malloc_size(v1);
    sub_10004B198(2 * ((uint64_t)(v2 - 32) / 16));
    sub_10004A26C(v3, v4, v5, v6);
    sub_10004B174();
    sub_10004B0F4();
    if (!v7) {
      __break(1u);
    }
  }
  sub_10004B1B0();
}

void sub_100049D54(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
}

void *sub_100049D70(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = __CocoaSet.count.getter();
    if (v2) {
      goto LABEL_3;
    }
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
LABEL_3:
  if (v2 <= 0)
  {
    uint64_t v3 = _swiftEmptyArrayStorage;
  }
  else
  {
    sub_10000BF1C(&qword_10017D0D0);
    uint64_t v3 = (void *)sub_100028788();
    j__malloc_size(v3);
    sub_10004B120();
    v3[2] = v2;
    v3[3] = v4;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_10004A75C(&v7, v3 + 4, v2, a1);
  uint64_t result = (void *)sub_100027664();
  if (v5 == (void *)v2) {
    return v3;
  }
  __break(1u);
  return result;
}

void sub_100049E50(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return;
  }
  if (v5)
  {
    if (v5 > 0)
    {
      sub_10000BF1C(&qword_10017D4A0);
      uint64_t v8 = (void *)swift_allocObject();
      size_t v9 = j__malloc_size(v8);
      void v8[2] = v5;
      v8[3] = 2 * ((uint64_t)(v9 - 32) / 40);
    }
    if (v4 != a3)
    {
      sub_100057438(a2 + 40 * a3, v5);
      return;
    }
    goto LABEL_9;
  }
}

void sub_100049F14(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
}

void sub_100049F2C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(uint64_t, uint64_t, void *))
{
  unint64_t v5 = a4 >> 1;
  uint64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return;
  }
  if (v6)
  {
    if (v6 <= 0)
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_10000BF1C(&qword_10017D0D0);
      uint64_t v10 = (void *)sub_100028788();
      j__malloc_size(v10);
      sub_10004B120();
      v10[2] = v6;
      v10[3] = v11;
    }
    if (v5 != a3)
    {
      a5(a2 + 8 * a3, v6, v10 + 4);
      return;
    }
    goto LABEL_10;
  }
}

void sub_100049FE0()
{
  sub_10004B158();
  if (*(void *)(v0 + 16))
  {
    sub_10000BF1C(&qword_10017D0D0);
    uint64_t v1 = (const void *)sub_100028788();
    j__malloc_size(v1);
    sub_10004B120();
    sub_10004B198(v2);
    sub_10004AA64(v3, v4, v5, v6);
    sub_10004B174();
    sub_10004B0F4();
    if (!v7) {
      __break(1u);
    }
  }
  sub_10004B1B0();
}

uint64_t sub_10004A05C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = *(void *)(a4 + 48) + 32 * v16;
    uint64_t v22 = *(void *)(v20 + 16);
    uint64_t v21 = *(void *)(v20 + 24);
    long long v23 = *(_OWORD *)(*(void *)(a4 + 56) + 16 * v16);
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v20;
    *(void *)(v11 + 16) = v22;
    *(void *)(v11 + 24) = v21;
    *(_OWORD *)(v11 + 32) = v23;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 48;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10004A26C(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void *sub_10004A46C(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + 56);
  uint64_t v4 = a4 + 56;
  uint64_t v5 = v6;
  uint64_t v38 = v4;
  uint64_t v7 = -1 << *(unsigned char *)(v4 - 24);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & v5;
  if (!a2)
  {
    int64_t v11 = 0;
    a3 = 0;
LABEL_38:
    *uint64_t result = a4;
    result[1] = v38;
    result[2] = ~v7;
    result[3] = v11;
    result[4] = v9;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v11 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v10 = a2;
  uint64_t v35 = -1 << *(unsigned char *)(v4 - 24);
  Swift::String v36 = result;
  int64_t v11 = 0;
  uint64_t v12 = 0;
  int64_t v37 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  uint64_t v40 = (v9 - 1) & v9;
  int64_t v41 = v11;
  for (unint64_t i = __clz(__rbit64(v9)) | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v14 << 6))
  {
    ++v12;
    int64_t v17 = (void *)(*(void *)(a4 + 48) + 104 * i);
    uint64_t v18 = v17[1];
    uint64_t v19 = v17[2];
    uint64_t v20 = v17[3];
    uint64_t v22 = (void *)v17[4];
    uint64_t v21 = v17[5];
    uint64_t v24 = v17[6];
    uint64_t v23 = v17[7];
    uint64_t v26 = v17[8];
    uint64_t v25 = v17[9];
    uint64_t v28 = v17[10];
    uint64_t v27 = (void *)v17[11];
    uint64_t v29 = v17[12];
    *uint64_t v10 = *v17;
    v10[1] = v18;
    v10[2] = v19;
    v10[3] = v20;
    void v10[4] = v22;
    v10[5] = v21;
    v10[6] = v24;
    v10[7] = v23;
    v10[8] = v26;
    v10[9] = v25;
    v10[10] = v28;
    v10[11] = v27;
    v10[12] = v29;
    uint64_t v30 = a3;
    if (v12 == a3)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v33 = v22;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v34 = v27;
      swift_bridgeObjectRetain();
      uint64_t v7 = v35;
      uint64_t result = v36;
      a3 = v30;
      unint64_t v9 = v40;
      int64_t v11 = v41;
      goto LABEL_38;
    }
    v10 += 13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v31 = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v32 = v27;
    uint64_t result = (void *)swift_bridgeObjectRetain();
    a3 = v30;
    unint64_t v9 = v40;
    int64_t v11 = v41;
    if (v40) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v14 >= v37) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v38 + 8 * v14);
    if (!v15) {
      break;
    }
LABEL_18:
    uint64_t v40 = (v15 - 1) & v15;
    int64_t v41 = v14;
  }
  v11 += 2;
  if (v14 + 1 >= v37)
  {
    unint64_t v9 = 0;
    int64_t v11 = v14;
    goto LABEL_37;
  }
  unint64_t v15 = *(void *)(v38 + 8 * v11);
  if (v15) {
    goto LABEL_14;
  }
  int64_t v16 = v14 + 2;
  if (v14 + 2 >= v37) {
    goto LABEL_33;
  }
  unint64_t v15 = *(void *)(v38 + 8 * v16);
  if (v15) {
    goto LABEL_17;
  }
  int64_t v11 = v14 + 3;
  if (v14 + 3 >= v37)
  {
    unint64_t v9 = 0;
    int64_t v11 = v14 + 2;
    goto LABEL_37;
  }
  unint64_t v15 = *(void *)(v38 + 8 * v11);
  if (v15)
  {
LABEL_14:
    int64_t v14 = v11;
    goto LABEL_18;
  }
  int64_t v16 = v14 + 4;
  if (v14 + 4 >= v37)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    a3 = v12;
    uint64_t v7 = v35;
    uint64_t result = v36;
    goto LABEL_38;
  }
  unint64_t v15 = *(void *)(v38 + 8 * v16);
  if (v15)
  {
LABEL_17:
    int64_t v14 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v14 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v14 >= v37)
    {
      unint64_t v9 = 0;
      int64_t v11 = v37 - 1;
      goto LABEL_37;
    }
    unint64_t v15 = *(void *)(v38 + 8 * v14);
    ++v16;
    if (v15) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void *sub_10004A75C(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v7 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    sub_10000D9D4(0, (unint64_t *)&qword_10017D468);
    sub_10004B010();
    uint64_t result = (void *)Set.Iterator.init(_cocoa:)();
    uint64_t v4 = v26;
    uint64_t v8 = v27;
    uint64_t v9 = v28;
    int64_t v10 = v29;
    unint64_t v11 = v30;
  }
  else
  {
    int64_t v10 = 0;
    uint64_t v12 = -1 << *(unsigned char *)(a4 + 32);
    uint64_t v8 = a4 + 56;
    uint64_t v9 = ~v12;
    uint64_t v13 = -v12;
    if (v13 < 64) {
      uint64_t v14 = ~(-1 << v13);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v11 = v14 & *(void *)(a4 + 56);
  }
  if (!a2)
  {
    uint64_t v15 = 0;
LABEL_47:
    *uint64_t v7 = v4;
    v7[1] = v8;
    void v7[2] = v9;
    v7[3] = v10;
    v7[4] = v11;
    return (void *)v15;
  }
  if (!a3)
  {
    uint64_t v15 = 0;
    goto LABEL_47;
  }
  if (a3 < 0) {
    goto LABEL_49;
  }
  uint64_t v15 = 0;
  int64_t v24 = (unint64_t)(v9 + 64) >> 6;
  uint64_t v23 = v9;
  while (1)
  {
    if (v4 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_46;
      }
      sub_10000D9D4(0, (unint64_t *)&qword_10017D468);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      uint64_t v18 = v25;
      uint64_t result = (void *)swift_unknownObjectRelease();
      if (!v25) {
        goto LABEL_46;
      }
      goto LABEL_28;
    }
    if (v11)
    {
      unint64_t v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v17 = v16 | (v10 << 6);
      goto LABEL_27;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      break;
    }
    if (v19 >= v24)
    {
      unint64_t v11 = 0;
      goto LABEL_46;
    }
    unint64_t v20 = *(void *)(v8 + 8 * v19);
    if (v20) {
      goto LABEL_26;
    }
    int64_t v21 = v10 + 2;
    if (v10 + 2 >= v24)
    {
      unint64_t v11 = 0;
      ++v10;
      goto LABEL_46;
    }
    unint64_t v20 = *(void *)(v8 + 8 * v21);
    if (!v20)
    {
      if (v10 + 3 >= v24) {
        goto LABEL_43;
      }
      unint64_t v20 = *(void *)(v8 + 8 * (v10 + 3));
      if (v20)
      {
        int64_t v19 = v10 + 3;
        goto LABEL_26;
      }
      int64_t v21 = v10 + 4;
      if (v10 + 4 >= v24)
      {
        unint64_t v11 = 0;
        v10 += 3;
        goto LABEL_46;
      }
      unint64_t v20 = *(void *)(v8 + 8 * v21);
      if (!v20)
      {
        int64_t v19 = v10 + 5;
        if (v10 + 5 >= v24)
        {
LABEL_43:
          unint64_t v11 = 0;
          int64_t v10 = v21;
          goto LABEL_46;
        }
        unint64_t v20 = *(void *)(v8 + 8 * v19);
        if (!v20)
        {
          int64_t v22 = v10 + 6;
          while (v22 < v24)
          {
            unint64_t v20 = *(void *)(v8 + 8 * v22++);
            if (v20)
            {
              int64_t v19 = v22 - 1;
              goto LABEL_26;
            }
          }
          unint64_t v11 = 0;
          int64_t v10 = v24 - 1;
          goto LABEL_46;
        }
        goto LABEL_26;
      }
    }
    int64_t v19 = v21;
LABEL_26:
    unint64_t v11 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v19 << 6);
    int64_t v10 = v19;
LABEL_27:
    uint64_t result = *(id *)(*(void *)(v4 + 48) + 8 * v17);
    uint64_t v18 = result;
    if (!result) {
      goto LABEL_46;
    }
LABEL_28:
    ++v15;
    *a2++ = v18;
    if (v15 == a3)
    {
      uint64_t v15 = a3;
LABEL_46:
      uint64_t v9 = v23;
      goto LABEL_47;
    }
  }
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

void *sub_10004AA64(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (void *)v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    unint64_t v20 = *(void **)(*(void *)(a4 + 56) + 8 * v16);
    *unint64_t v11 = v20;
    if (v13 == v10)
    {
      id v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    uint64_t result = v20;
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void sub_10004AC60(uint64_t a1, int a2, char a3, uint64_t a4)
{
  uint64_t v6 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      __CocoaSet.element(at:)();
      sub_10000D9D4(0, &qword_10017D0A0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      return;
    }
    goto LABEL_24;
  }
  if (a3) {
    goto LABEL_10;
  }
  if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) == 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    goto LABEL_17;
  }
  __break(1u);
LABEL_10:
  if (__CocoaSet.Index.age.getter() != *(_DWORD *)(a4 + 36))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  __CocoaSet.Index.element.getter();
  sub_10000D9D4(0, &qword_10017D0A0);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v4 = v18;
  swift_unknownObjectRelease();
  Swift::Int v7 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
  uint64_t v8 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v6 = v7 & ~v8;
  sub_10004B1EC();
  if ((v9 & 1) == 0)
  {
LABEL_23:

    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }
  id v10 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
  char v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
    uint64_t v12 = ~v8;
    do
    {
      uint64_t v6 = (v6 + 1) & v12;
      sub_10004B1EC();
      if ((v13 & 1) == 0) {
        goto LABEL_23;
      }
      id v14 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
      char v15 = static NSObject.== infix(_:_:)();
    }
    while ((v15 & 1) == 0);
  }

LABEL_17:
  unint64_t v16 = *(void **)(*(void *)(a4 + 48) + 8 * v6);

  id v17 = v16;
}

uint64_t sub_10004AEC0(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
  {
    uint64_t v4 = *(void *)(*(void *)(a4 + 48) + 16 * result);
    swift_bridgeObjectRetain();
    return v4;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_10004AF40(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v2 = 64;
  for (uint64_t i = 9; i - 7 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

unint64_t sub_10004AFC0()
{
  unint64_t result = qword_10017C758;
  if (!qword_10017C758)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C758);
  }
  return result;
}

unint64_t sub_10004B010()
{
  unint64_t result = qword_10017DF90;
  if (!qword_10017DF90)
  {
    sub_10000D9D4(255, (unint64_t *)&qword_10017D468);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DF90);
  }
  return result;
}

ValueMetadata *type metadata accessor for AppShortcutsChangedNotification()
{
  return &type metadata for AppShortcutsChangedNotification;
}

unint64_t sub_10004B080(uint64_t a1)
{
  unint64_t result = sub_10004B0A8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10004B0A8()
{
  unint64_t result = qword_10017DFA0;
  if (!qword_10017DFA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DFA0);
  }
  return result;
}

uint64_t sub_10004B0F4()
{
  return sub_100027664();
}

uint64_t sub_10004B138()
{
  return v0;
}

uint64_t sub_10004B174()
{
  return swift_bridgeObjectRetain();
}

void sub_10004B198(uint64_t a1@<X8>)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = a1;
}

uint64_t sub_10004B1CC()
{
  return v0;
}

uint64_t sub_10004B200()
{
  return 0;
}

void *sub_10004B214(unint64_t a1, void *a2)
{
  unint64_t v2 = a1;
  if (a1 >> 62) {
    goto LABEL_33;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      unint64_t v4 = 0;
      uint64_t v21 = v2 & 0xFFFFFFFFFFFFFF8;
      unint64_t v22 = v2 & 0xC000000000000001;
      unint64_t v20 = (void *)(v2 + 32);
      char v5 = a2;
      while (1)
      {
        if (v22)
        {
          id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (v4 >= *(void *)(v21 + 16))
          {
            __break(1u);
LABEL_31:
            __break(1u);
            goto LABEL_32;
          }
          id v6 = (id)v20[v4];
        }
        Swift::Int v7 = v6;
        if (__OFADD__(v4++, 1)) {
          goto LABEL_31;
        }
        id v9 = [v6 identifier];
        uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v12 = v11;

        uint64_t v13 = v5[2];
        if (!v13)
        {

          swift_bridgeObjectRelease();
          goto LABEL_17;
        }
        BOOL v14 = v5[4] == v10 && v5[5] == v12;
        if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          break;
        }
LABEL_14:
        swift_bridgeObjectRelease();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
LABEL_15:
        char v5 = a2;
LABEL_17:
        if (v4 == v3) {
          goto LABEL_34;
        }
      }
      if (v13 == 1) {
        break;
      }
      unint64_t v2 = (unint64_t)(a2 + 7);
      uint64_t v15 = 1;
      while (1)
      {
        uint64_t v16 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          break;
        }
        BOOL v17 = *(void *)(v2 - 8) == v10 && *(void *)v2 == v12;
        if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_14;
        }
        v2 += 16;
        ++v15;
        if (v16 == v13) {
          goto LABEL_28;
        }
      }
LABEL_32:
      __break(1u);
LABEL_33:
      uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
      if (!v3) {
        goto LABEL_34;
      }
    }
LABEL_28:

    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
LABEL_34:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10004B44C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_10000E7D8((_OWORD *)a1, v6);
    sub_10004F5E8((uint64_t)v6, a2, a3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_100027D90(a1, &qword_10017D3A0);
    sub_100042048(v6, a2, a3);
    swift_bridgeObjectRelease();
    return sub_100027D90((uint64_t)v6, &qword_10017D3A0);
  }
}

uint64_t sub_10004B4E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000BF1C(&qword_10017C788);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_10000D5D8(a1, 1, v9) == 1)
  {
    sub_100027D90(a1, &qword_10017C788);
    sub_1000423BC(a2, a3);
    swift_bridgeObjectRelease();
    return sub_100027D90((uint64_t)v8, &qword_10017C788);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    sub_10004F7CC((uint64_t)v12, a2, a3, (uint64_t (*)(uint64_t))sub_10000C748);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_10004B680(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = sub_10000BF1C(&qword_10017E138);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000BF1C((uint64_t *)&unk_10017EB90);
  sub_1000283FC();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_10000D5D8(a1, 1, v12) == 1)
  {
    sub_100027D90(a1, &qword_10017E138);
    sub_1000424AC(a2, a3);
    sub_10000DA10(a2, a3);
    return sub_100027D90((uint64_t)v8, &qword_10017E138);
  }
  else
  {
    sub_10004FC98(a1, (uint64_t)v11);
    sub_10004F7CC((uint64_t)v11, a2, a3, (uint64_t (*)(uint64_t))sub_10000C874);
    return sub_10000DA10(a2, a3);
  }
}

void sub_10004B7DC(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v2)
  {
    sub_100057848();
    if (v2 < 0)
    {
      __break(1u);
      return;
    }
    uint64_t v3 = 0;
    while (v2 != v3)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v4 = *(id *)(a1 + 8 * v3 + 32);
      }
      char v5 = v4;
      id v6 = [v4 key];
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v9 = v8;

      unint64_t v10 = _swiftEmptyArrayStorage[2];
      if (v10 >= _swiftEmptyArrayStorage[3] >> 1) {
        sub_100057848();
      }
      ++v3;
      _swiftEmptyArrayStorage[2] = v10 + 1;
      uint64_t v11 = &_swiftEmptyArrayStorage[2 * v10];
      v11[4] = v7;
      v11[5] = v9;
      if (v2 == v3) {
        return;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
}

void sub_10004B958(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = a1;
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v8)
  {
    while (1)
    {
      sub_100057A30();
      if (v8 < 0) {
        break;
      }
      uint64_t v9 = 0;
      unint64_t v16 = v7 & 0xC000000000000001;
      unint64_t v10 = v7;
      while (v8 != v9)
      {
        if (v16) {
          id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v11 = *(id *)(v7 + 8 * v9 + 32);
        }
        id v12 = v11;
        unint64_t v14 = _swiftEmptyArrayStorage[2];
        unint64_t v13 = _swiftEmptyArrayStorage[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v14 >= v13 >> 1) {
          sub_100057A30();
        }
        ++v9;
        _swiftEmptyArrayStorage[2] = v14 + 1;
        uint64_t v15 = &_swiftEmptyArrayStorage[5 * v14];
        v15[4] = a2;
        v15[5] = a3;
        void v15[6] = a4;
        uint64_t v15[7] = a5;
        v15[8] = v12;
        unint64_t v7 = v10;
        if (v8 == v9) {
          goto LABEL_15;
        }
      }
      __break(1u);
LABEL_14:
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v8) {
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void *sub_10004BB08(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a1 + 16))
  {
    sub_10000BF1C(a2);
    uint64_t v8 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v8 = _swiftEmptyDictionarySingleton;
  }
  id v11 = v8;
  sub_10004F98C(a1, 1, &v11, a3, a4);
  uint64_t v9 = v11;
  if (v4) {
    swift_release();
  }
  return v9;
}

void sub_10004BBAC(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v293 = a4;
  unint64_t v343 = a2;
  uint64_t v337 = a1;
  uint64_t v7 = sub_10000BF1C(&qword_10017C788);
  __chkstk_darwin(v7 - 8);
  sub_100035D8C();
  uint64_t v291 = v8;
  sub_100035E8C();
  __chkstk_darwin(v9);
  uint64_t v290 = (uint64_t)&v285 - v10;
  sub_100035E8C();
  __chkstk_darwin(v11);
  v315 = (char *)&v285 - v12;
  sub_100035E8C();
  __chkstk_darwin(v13);
  unint64_t v15 = (unint64_t)&v285 - v14;
  type metadata accessor for LNAppShortcutParameterRecord();
  sub_10000E948();
  uint64_t v319 = v17;
  v320 = v16;
  __chkstk_darwin(v16);
  sub_100035D8C();
  uint64_t v292 = v18;
  sub_100035E8C();
  __chkstk_darwin(v19);
  uint64_t v289 = (uint64_t)&v285 - v20;
  sub_100035E8C();
  __chkstk_darwin(v21);
  unint64_t v23 = (unint64_t)&v285 - v22;
  if (a3 >> 62) {
    goto LABEL_163;
  }
  uint64_t v24 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    unint64_t v316 = v23;
    unint64_t v317 = v15;
    id v342 = (id)a5;
    if (v24)
    {
      v353[0] = (uint64_t)_swiftEmptyArrayStorage;
      sub_100057AD8();
      if ((v24 & 0x8000000000000000) == 0)
      {
        uint64_t v341 = a3 & 0xC000000000000001;
        for (uint64_t i = (id *)a3; ; a3 = (unint64_t)i)
        {
          if (v341) {
            id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v26 = *(id *)(a3 + 32);
          }
          id v27 = [v26 identifier];
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          sub_100050788();
          if (v29)
          {
            sub_10005075C(v28);
            sub_100057AD8();
          }
          sub_100050620();
        }
      }
      __break(1u);
      goto LABEL_167;
    }
    unint64_t v15 = 0;
    v299 = sub_10004BB08((uint64_t)_swiftEmptyArrayStorage, &qword_10017D3E8, (uint64_t)sub_10002299C, (uint64_t)&qword_10017C778);
    if (a5 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v30 = *(void *)((a5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v30) {
      break;
    }
    v303 = sub_10004BB08((uint64_t)_swiftEmptyArrayStorage, &qword_10017D3E0, (uint64_t)sub_100022990, (uint64_t)&qword_10017C9A8);
    unint64_t v339 = 0;
    v352 = &_swiftEmptySetSingleton;
    if (v293 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      uint64_t v35 = *(void *)((v293 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      uint64_t v36 = v35;
    }
    if (!v36)
    {
LABEL_156:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    unint64_t v37 = 0;
    unint64_t v295 = v293 & 0xC000000000000001;
    unint64_t v287 = v293 & 0xFFFFFFFFFFFFFF8;
    uint64_t v286 = v293 + 32;
    id v297 = (id)LNValueTypeSpecificMetadataKeyLinkEnumerationSupportedValues;
    id v308 = (id)LNValueTypeSpecificMetadataKeyBoolTrueDisplayName;
    id v296 = (id)LNValueTypeSpecificMetadataKeyBoolFalseDisplayName;
    v312 = (char *)&type metadata for Any + 8;
    a5 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v294 = v36;
    while (1)
    {
      if (v295)
      {
        unint64_t v38 = v37;
        id v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v37 >= *(void *)(v287 + 16)) {
          goto LABEL_162;
        }
        unint64_t v38 = v37;
        id v39 = *(id *)(v286 + 8 * v37);
      }
      BOOL v40 = __OFADD__(v38, 1);
      uint64_t v41 = v38 + 1;
      if (v40) {
        goto LABEL_161;
      }
      uint64_t v298 = v41;
      Swift::String v42 = v39;
      unint64_t v23 = (unint64_t)[v39 actionIdentifier];
      uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v15 = v44;

      uint64_t v51 = v299;
      if (!v299[2])
      {

LABEL_151:
        swift_bridgeObjectRelease();
        goto LABEL_152;
      }
      unint64_t v23 = (unint64_t)v299;
      uint64_t v52 = sub_100021098(v43, v15, v45, v46, v47, v48, v49, v50, v285, v286, v287, (uint64_t)v288, v289, v290, v291, v292, v293, v294, v295,
              (uint64_t)v296,
              (uint64_t)v297,
              v298,
              (uint64_t)v299,
              v300,
              v301,
              (uint64_t)v42);
      if ((v53 & 1) == 0)
      {

        goto LABEL_151;
      }
      id v54 = *(id *)(v51[7] + 8 * v52);
      swift_bridgeObjectRelease();
      id v288 = v54;
      id v55 = [v54 parameters];
      uint64_t v56 = sub_10005066C();
      sub_10000D9D4(v56, &qword_10017D0A8);
      unint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      unint64_t v57 = v15;
      unint64_t v311 = v15;
      if (!(v15 >> 62))
      {
        uint64_t v58 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v58) {
          break;
        }
        goto LABEL_148;
      }
      swift_bridgeObjectRetain();
      uint64_t v58 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      unint64_t v57 = v311;
      if (v58) {
        break;
      }
LABEL_148:

      swift_bridgeObjectRelease();
LABEL_152:
      unint64_t v37 = v298;
      if (v298 == v294) {
        goto LABEL_156;
      }
    }
    unint64_t v59 = 0;
    uint64_t v309 = v58;
    unint64_t v310 = v57 & 0xC000000000000001;
    uint64_t v300 = v57 + 32;
    unint64_t v301 = v57 & 0xFFFFFFFFFFFFFF8;
    while (1)
    {
      if (v310)
      {
        unint64_t v60 = v59;
        id v61 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v59 >= *(void *)(v301 + 16)) {
          goto LABEL_159;
        }
        unint64_t v60 = v59;
        id v61 = *(id *)(v300 + 8 * v59);
      }
      BOOL v40 = __OFADD__(v60, 1);
      unint64_t v62 = v60 + 1;
      if (v40)
      {
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
        goto LABEL_160;
      }
      unint64_t v313 = v62;
      id v63 = v61;
      v326._uint64_t countAndFlagsBits = sub_10004FB6C(v61);
      v326._object = v64;
      if (!v64) {
        goto LABEL_98;
      }
      v351 = _swiftEmptyDictionarySingleton;
      id v314 = v63;
      id v65 = [v63 valueType];
      self;
      uint64_t v66 = (id *)swift_dynamicCastObjCClass();
      if (!v66)
      {

LABEL_50:
        id v63 = v314;
        unint64_t v23 = (unint64_t)[v314 valueType];
        unint64_t v15 = (unint64_t)&os_transaction_needs_more_time_ptr;
        self;
        uint64_t v81 = swift_dynamicCastObjCClass();
        if (!v81)
        {

          swift_bridgeObjectRelease();
LABEL_98:

          goto LABEL_147;
        }
        uint64_t v82 = (void *)v81;
        sub_10000D9D4(0, (unint64_t *)&qword_10017DD30);
        unint64_t v15 = (unint64_t)[self BOOLValueType];
        uint64_t v83 = static NSObject.== infix(_:_:)();

        if ((v83 & 1) == 0)
        {
          swift_bridgeObjectRelease();

          goto LABEL_147;
        }
        id v342 = (id)v23;
        id v84 = [v302 phraseTemplates];
        uint64_t v85 = sub_10005066C();
        uint64_t v341 = sub_10000D9D4(v85, (unint64_t *)&qword_10017EDC0);
        unint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        unint64_t v15 = v339;
        sub_10004B7DC(v23);
        unint64_t v87 = v86;
        unint64_t v339 = v15;
        swift_bridgeObjectRelease();
        uint64_t v88 = *(void *)(v87 + 16);
        unint64_t v340 = v87;
        if (!v88)
        {
LABEL_100:

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_146:
          swift_bridgeObjectRelease();
          goto LABEL_147;
        }
        v336 = v82;
        unint64_t v89 = (unint64_t *)(v87 + 40);
        a3 = v341;
        while (2)
        {
          uint64_t v90 = *(v89 - 1);
          unint64_t v23 = *v89;
          uint64_t v344 = v90;
          v345 = (id *)v23;
          sub_100050774();
          swift_bridgeObjectRetain();
          String.append(_:)(v326);
          v91._uint64_t countAndFlagsBits = 125;
          v91._object = (void *)0xE100000000000000;
          String.append(_:)(v91);
          unint64_t v15 = v350;
          sub_10001B398();
          char v92 = StringProtocol.contains<A>(_:)();
          swift_bridgeObjectRelease();
          if ((v92 & 1) == 0) {
            goto LABEL_58;
          }
          unint64_t v15 = (unint64_t)[v314 typeSpecificMetadata];
          type metadata accessor for LNValueTypeSpecificMetadataKey(0);
          sub_10004FC48();
          uint64_t v93 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

          if (*(void *)(v93 + 16))
          {
            unint64_t v15 = (unint64_t)v308;
            sub_1000210C4();
            if (v95) {
              sub_1000506F8(v94);
            }
            else {
              sub_10005063C();
            }

            if (v346)
            {
              if (sub_1000506A4())
              {
                uint64_t v96 = v349;
                if (*(void *)(v93 + 16))
                {
                  unint64_t v15 = (unint64_t)v296;
                  sub_1000210C4();
                  if (v98) {
                    sub_1000506F8(v97);
                  }
                  else {
                    sub_10005063C();
                  }
                }
                else
                {
                  sub_10005063C();
                }
                swift_bridgeObjectRelease();
                if (v346)
                {
                  if (sub_1000506A4())
                  {
                    unint64_t v338 = a5;
                    id v331 = v349;
                    if (v351[2]
                      && (sub_100021098(1702195828, 0xE400000000000000, v99, v100, v101, v102, v103, v104, v285, v286, v287, (uint64_t)v288, v289, v290, v291, v292, v293, v294, v295,
                            (uint64_t)v296,
                            (uint64_t)v297,
                            v298,
                            (uint64_t)v299,
                            v300,
                            v301,
                            (uint64_t)v302),
                          (v105 & 1) != 0))
                    {
                      uint64_t v106 = type metadata accessor for UUID();
                      sub_10000E948();
                      uint64_t v108 = v107;
                      uint64_t v109 = v290;
                      sub_10005059C();
                      v110();
                      sub_1000505C8();
                      if (!v111)
                      {
                        uint64_t v112 = v289;
                        (*(void (**)(uint64_t, uint64_t, uint64_t))(v108 + 32))(v289, v109, v106);
                        goto LABEL_84;
                      }
                    }
                    else
                    {
                      type metadata accessor for UUID();
                      uint64_t v109 = v290;
                      sub_100050678(v290);
                    }
                    sub_100027D90(v109, &qword_10017C788);
                    uint64_t v112 = v289;
                    UUID.init()();
                    type metadata accessor for UUID();
                    sub_10004B1DC();
                    sub_10005059C();
                    v113();
                    uint64_t v114 = sub_1000507B4();
                    sub_10004B4E0(v114, 1702195828, 0xE400000000000000);
LABEL_84:
                    unint64_t v115 = v343;
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    uint64_t v116 = v96;
                    id v117 = [v116 key];
                    uint64_t v118 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    uint64_t v332 = v119;
                    uint64_t v333 = v118;

                    v346 = &type metadata for Bool;
                    LOBYTE(v344) = 1;
                    id v120 = objc_allocWithZone((Class)LNValue);
                    object = v326._object;
                    swift_bridgeObjectRetain();
                    id v334 = v342;
                    id v122 = sub_10004F570(&v344, v336);
                    id v123 = objc_allocWithZone((Class)LNProperty);
                    id v124 = sub_1000FC04C(v326._countAndFlagsBits, (uint64_t)object, v122);
                    uint64_t v125 = v320;
                    uint64_t v126 = (void *)(v112 + v320[5]);
                    *uint64_t v126 = v337;
                    v126[1] = v115;
                    id v127 = (uint64_t *)(v112 + v125[6]);
                    *id v127 = v90;
                    v127[1] = v23;
                    uint64_t v128 = v125[7];
                    id v335 = v116;
                    *(void *)(v112 + v128) = v116;
                    id v129 = (uint64_t *)(v112 + v125[8]);
                    uint64_t v130 = v332;
                    *id v129 = v333;
                    v129[1] = v130;
                    *(void *)(v112 + v125[9]) = v124;
                    *(void *)(v112 + v125[10]) = 0;
                    uint64_t v131 = (void *)(v112 + v125[11]);
                    *uint64_t v131 = 0;
                    v131[1] = 0;
                    uint64_t v132 = v338;
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                      uint64_t v132 = sub_10001E8F8(0, *(void *)(v132 + 16) + 1, 1, v132);
                    }
                    unint64_t v134 = *(void *)(v132 + 16);
                    unint64_t v133 = *(void *)(v132 + 24);
                    if (v134 >= v133 >> 1) {
                      uint64_t v132 = sub_10001E8F8(v133 > 1, v134 + 1, 1, v132);
                    }
                    *(void *)(v132 + 16) = v134 + 1;
                    sub_1000507F4();
                    uint64_t v333 = v135;
                    uint64_t v332 = *(void *)(v136 + 72);
                    sub_100033768(v112, v132 + v135 + v332 * v134);
                    uint64_t v143 = v351[2];
                    unint64_t v338 = v132;
                    if (v143
                      && (sub_100021098(0x65736C6166, 0xE500000000000000, v137, v138, v139, v140, v141, v142, v285, v286, v287, (uint64_t)v288, v289, v290, v291, v292, v293, v294, v295,
                            (uint64_t)v296,
                            (uint64_t)v297,
                            v298,
                            (uint64_t)v299,
                            v300,
                            v301,
                            (uint64_t)v302),
                          (v144 & 1) != 0))
                    {
                      uint64_t v145 = type metadata accessor for UUID();
                      sub_10000E948();
                      uint64_t v147 = v146;
                      uint64_t v148 = v291;
                      sub_10005059C();
                      v149();
                      sub_1000505C8();
                      if (!v111)
                      {
                        uint64_t v150 = v292;
                        (*(void (**)(uint64_t, uint64_t, uint64_t))(v147 + 32))(v292, v148, v145);
                        id v151 = v331;
                        goto LABEL_94;
                      }
                    }
                    else
                    {
                      type metadata accessor for UUID();
                      uint64_t v148 = v291;
                      sub_100050678(v291);
                    }
                    id v151 = v331;
                    sub_100027D90(v148, &qword_10017C788);
                    uint64_t v150 = v292;
                    UUID.init()();
                    type metadata accessor for UUID();
                    sub_10004B1DC();
                    sub_10005059C();
                    v152();
                    uint64_t v153 = sub_1000507B4();
                    sub_10004B4E0(v153, 0x65736C6166, 0xE500000000000000);
LABEL_94:
                    unint64_t v15 = v343;
                    swift_bridgeObjectRetain();
                    id v154 = v151;
                    id v155 = [v154 key];
                    uint64_t v156 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
                    id v330 = v157;
                    id v331 = v156;

                    v346 = &type metadata for Bool;
                    LOBYTE(v344) = 0;
                    id v158 = objc_allocWithZone((Class)LNValue);
                    uint64_t v159 = v326._object;
                    swift_bridgeObjectRetain();
                    id v160 = v334;
                    id v161 = sub_10004F570(&v344, v336);
                    id v162 = objc_allocWithZone((Class)LNProperty);
                    id v163 = sub_1000FC04C(v326._countAndFlagsBits, (uint64_t)v159, v161);
                    uint64_t v164 = v320;
                    uint64_t v165 = (void *)(v150 + v320[5]);
                    *uint64_t v165 = v337;
                    v165[1] = v15;
                    uint64_t v166 = (uint64_t *)(v150 + v164[6]);
                    uint64_t *v166 = v90;
                    v166[1] = v23;
                    *(void *)(v150 + v164[7]) = v154;
                    unint64_t v167 = (void *)(v150 + v164[8]);
                    id v168 = v330;
                    *unint64_t v167 = v331;
                    v167[1] = v168;
                    *(void *)(v150 + v164[9]) = v163;
                    *(void *)(v150 + v164[10]) = 0;
                    uint64_t v169 = (void *)(v150 + v164[11]);
                    *uint64_t v169 = 0;
                    v169[1] = 0;
                    a5 = v338;
                    unint64_t v23 = *(void *)(v338 + 16);
                    unint64_t v170 = *(void *)(v338 + 24);
                    if (v23 >= v170 >> 1)
                    {
                      uint64_t v171 = sub_100050738(v170);
                      uint64_t v150 = v292;
                      a5 = v171;
                    }
                    *(void *)(a5 + 16) = v23 + 1;
                    sub_100033768(v150, a5 + v333 + v23 * v332);

                    a3 = v341;
                  }
                  else
                  {
                    swift_bridgeObjectRelease();
                  }
LABEL_68:
                  v89 += 2;
                  if (!--v88) {
                    goto LABEL_100;
                  }
                  continue;
                }
                swift_bridgeObjectRelease();

LABEL_67:
                sub_100027D90((uint64_t)&v344, &qword_10017D3A0);
                goto LABEL_68;
              }
              swift_bridgeObjectRelease();
LABEL_58:
              swift_bridgeObjectRelease();
              goto LABEL_68;
            }
          }
          else
          {
            sub_10005063C();
          }
          break;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_67;
      }
      a3 = (unint64_t)v66;
      id v67 = [v66 enumerationIdentifier];
      uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v15 = v69;

      uint64_t v76 = v303;
      if (!v303[2]
        || (unint64_t v23 = (unint64_t)v303,
            uint64_t v77 = sub_100021098(v68, v15, v70, v71, v72, v73, v74, v75, v285, v286, v287, (uint64_t)v288, v289, v290, v291, v292, v293, v294, v295,
                    (uint64_t)v296,
                    (uint64_t)v297,
                    v298,
                    (uint64_t)v299,
                    v300,
                    v301,
                    (uint64_t)v302),
            (v78 & 1) == 0))
      {

        swift_bridgeObjectRelease();
        goto LABEL_50;
      }
      id v79 = *(id *)(v76[7] + 8 * v77);
      swift_bridgeObjectRelease();
      id v80 = v314;
      if (![v314 dynamicOptionsSupport]) {
        break;
      }
      swift_bridgeObjectRelease();

LABEL_147:
      unint64_t v59 = v313;
      if (v313 == v309) {
        goto LABEL_148;
      }
    }
    id v172 = [v302 phraseTemplates];
    uint64_t v173 = sub_10005066C();
    sub_10000D9D4(v173, (unint64_t *)&qword_10017EDC0);
    unint64_t v174 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v15 = v339;
    sub_10004B7DC(v174);
    unint64_t v176 = v175;
    unint64_t v339 = v15;
    swift_bridgeObjectRelease();
    uint64_t v307 = *(void *)(v176 + 16);
    if (!v307)
    {
      unint64_t v23 = v176;
LABEL_145:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_146;
    }
    unint64_t v177 = 0;
    unint64_t v306 = v176 + 32;
    id v324 = v65;
    v336 = (void *)a3;
    unint64_t v23 = v176;
    unint64_t v304 = v176;
    id v318 = v79;
    while (1)
    {
      if (v177 >= *(void *)(v23 + 16)) {
        goto LABEL_158;
      }
      uint64_t v178 = (uint64_t *)(v306 + 16 * v177);
      a3 = v178[1];
      uint64_t v325 = *v178;
      uint64_t v344 = v325;
      v345 = (id *)a3;
      sub_100050774();
      swift_bridgeObjectRetain();
      String.append(_:)(v326);
      v179._uint64_t countAndFlagsBits = 125;
      v179._object = (void *)0xE100000000000000;
      String.append(_:)(v179);
      unint64_t v15 = v350;
      sub_10001B398();
      uint64_t v180 = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      if (v180) {
        break;
      }
LABEL_141:
      ++v177;
      swift_bridgeObjectRelease();
      if (v177 == v307) {
        goto LABEL_145;
      }
    }
    id v181 = [v79 cases];
    uint64_t v182 = sub_10005066C();
    sub_10000D9D4(v182, &qword_10017E130);
    unint64_t v183 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v15 = (unint64_t)[v314 typeSpecificMetadata];
    type metadata accessor for LNValueTypeSpecificMetadataKey(0);
    sub_10004FC48();
    uint64_t v184 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (*(void *)(v184 + 16))
    {
      unint64_t v15 = (unint64_t)v297;
      sub_1000210C4();
      if (v186) {
        sub_1000506F8(v185);
      }
      else {
        sub_10005063C();
      }
    }
    else
    {
      sub_10005063C();
    }
    swift_bridgeObjectRelease();
    if (v346)
    {
      sub_10000BF1C(&qword_10017DED8);
      if (swift_dynamicCast())
      {
        unint64_t v15 = v339;
        unint64_t v183 = (unint64_t)sub_10004B214(v183, v349);
        unint64_t v339 = v15;
      }
    }
    else
    {
      sub_100027D90((uint64_t)&v344, &qword_10017D3A0);
    }
    if (v183 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v187 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v187 = *(void *)((v183 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    unint64_t v305 = v177;
    unint64_t v340 = a3;
    if (!v187)
    {
LABEL_140:
      swift_bridgeObjectRelease();
      id v65 = v324;
      unint64_t v23 = v304;
      unint64_t v177 = v305;
      goto LABEL_141;
    }
    if (v187 >= 1)
    {
      uint64_t v188 = 0;
      unint64_t v322 = v183;
      unint64_t v323 = v183 & 0xC000000000000001;
      unint64_t v321 = v187;
      while (1)
      {
        unint64_t v338 = a5;
        uint64_t v327 = v188;
        if (v323) {
          id v189 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v189 = *(id *)(v183 + 8 * v188 + 32);
        }
        v190 = v189;
        id v329 = v189;
        uint64_t v191 = sub_10004FBD0([v189 displayRepresentation]);
        if (v191) {
          uint64_t v192 = (void *)v191;
        }
        else {
          uint64_t v192 = _swiftEmptyArrayStorage;
        }
        id v193 = [v79 identifier];
        uint64_t v194 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v196 = v195;

        uint64_t v344 = v194;
        v345 = v196;
        v197._uint64_t countAndFlagsBits = 46;
        v197._object = (void *)0xE100000000000000;
        String.append(_:)(v197);
        id v198 = [v190 identifier];
        uint64_t v199 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v201 = v200;

        v202._uint64_t countAndFlagsBits = v199;
        v202._object = v201;
        String.append(_:)(v202);
        swift_bridgeObjectRelease();
        uint64_t v204 = v344;
        v203 = v345;
        id v205 = [v190 displayRepresentation];
        id v334 = [v205 title];

        id v206 = [v190 displayRepresentation];
        id v207 = [v206 title];

        id v208 = [v207 key];
        id v335 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v342 = v209;

        id v210 = [v79 identifier];
        uint64_t v333 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v341 = v211;

        id v212 = [v79 identifier];
        uint64_t v332 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v214 = v213;

        id v215 = [v190 identifier];
        uint64_t v216 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v218 = v217;

        v346 = &type metadata for String;
        uint64_t v344 = v216;
        v345 = v218;
        id v330 = v324;
        id v219 = [v190 displayRepresentation];
        id v220 = objc_allocWithZone((Class)LNValue);
        id v221 = sub_100050714();
        swift_bridgeObjectRetain();
        uint64_t v222 = v343;
        swift_bridgeObjectRetain();
        uint64_t v223 = v337;
        unint64_t v224 = v339;
        sub_10004B958((unint64_t)v192, v204, (uint64_t)v203, v337, v222);
        uint64_t v226 = v225;
        unint64_t v339 = v224;
        swift_bridgeObjectRelease();
        v353[0] = v204;
        v353[1] = (uint64_t)v203;
        v353[2] = v223;
        v353[3] = v222;
        id v227 = v334;
        v353[4] = (uint64_t)v334;
        v353[5] = (uint64_t)v335;
        v353[6] = (uint64_t)v342;
        v353[7] = v333;
        v353[8] = v341;
        v353[9] = v332;
        v353[10] = (uint64_t)v214;
        v353[11] = (uint64_t)v221;
        v353[12] = v226;
        swift_bridgeObjectRetain_n();
        id v335 = v203;
        swift_bridgeObjectRetain();
        id v228 = v227;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v334 = v214;
        swift_bridgeObjectRetain();
        id v331 = v221;
        uint64_t v333 = v226;
        v229 = v329;
        swift_bridgeObjectRetain();
        sub_100023B38(&v344, v353);
        v230 = v347;
        v231 = v348;
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v232 = [v229 identifier];
        uint64_t v233 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v235 = v234;

        uint64_t v236 = v351[2];
        uint64_t v332 = (uint64_t)v228;
        if (v236)
        {
          swift_bridgeObjectRetain();
          sub_100021098(v233, v235, v237, v238, v239, v240, v241, v242, v285, v286, v287, (uint64_t)v288, v289, v290, v291, v292, v293, v294, v295,
            (uint64_t)v296,
            (uint64_t)v297,
            v298,
            (uint64_t)v299,
            v300,
            v301,
            (uint64_t)v302);
          if (v243)
          {
            uint64_t v244 = type metadata accessor for UUID();
            sub_1000283FC();
            uint64_t v245 = v317;
            sub_10005059C();
            v246();
            uint64_t v247 = v245;
            uint64_t v248 = 0;
          }
          else
          {
            uint64_t v244 = type metadata accessor for UUID();
            uint64_t v245 = v317;
            uint64_t v247 = v317;
            uint64_t v248 = 1;
          }
          sub_10000D5B0(v247, v248, 1, v244);
          unint64_t v249 = v316;
          swift_bridgeObjectRelease();
          type metadata accessor for UUID();
          if (sub_10000D5D8(v245, 1, v244) != 1)
          {
            sub_10004B1DC();
            (*(void (**)(unint64_t, uint64_t, uint64_t))(v252 + 32))(v249, v245, v244);
            swift_bridgeObjectRelease();
            goto LABEL_135;
          }
        }
        else
        {
          uint64_t v244 = type metadata accessor for UUID();
          uint64_t v245 = v317;
          sub_100050678(v317);
          unint64_t v249 = v316;
        }
        sub_100027D90(v245, &qword_10017C788);
        UUID.init()();
        type metadata accessor for UUID();
        sub_10004B1DC();
        uint64_t v250 = (uint64_t)v315;
        sub_10005059C();
        v251();
        sub_10000D5B0(v250, 0, 1, v244);
        sub_10004B4E0(v250, v233, v235);
LABEL_135:
        uint64_t v253 = v249;
        swift_bridgeObjectRetain();
        unint64_t v254 = v343;
        swift_bridgeObjectRetain();
        id v255 = [v229 displayRepresentation];
        id v328 = [v255 title];

        id v256 = [v229 displayRepresentation];
        id v257 = [v256 title];

        id v258 = [v257 key];
        uint64_t v259 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v261 = v260;

        v262 = v326._object;
        swift_bridgeObjectRetain();
        id v263 = [v229 identifier];
        uint64_t v264 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v266 = v265;

        v346 = &type metadata for String;
        uint64_t v344 = v264;
        v345 = v266;
        id v267 = v330;
        a3 = (unint64_t)v229;
        id v268 = [v229 displayRepresentation];
        id v269 = objc_allocWithZone((Class)LNValue);
        id v270 = sub_100050714();
        id v271 = objc_allocWithZone((Class)LNProperty);
        id v272 = sub_1000FC04C(v326._countAndFlagsBits, (uint64_t)v262, v270);
        v273 = v320;
        v274 = (void *)(v253 + v320[5]);
        void *v274 = v337;
        v274[1] = v254;
        v275 = (uint64_t *)(v253 + v273[6]);
        unint64_t v276 = v340;
        uint64_t *v275 = v325;
        v275[1] = v276;
        *(void *)(v253 + v273[7]) = v328;
        v277 = (uint64_t *)(v253 + v273[8]);
        uint64_t *v277 = v259;
        v277[1] = v261;
        *(void *)(v253 + v273[9]) = v272;
        *(void *)(v253 + v273[10]) = 0;
        v278 = (void *)(v253 + v273[11]);
        void *v278 = 0;
        v278[1] = 0;
        a5 = v338;
        uint64_t v279 = v253;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          a5 = sub_10001E8F8(0, *(void *)(a5 + 16) + 1, 1, a5);
        }
        id v79 = v318;
        unint64_t v15 = v321;
        unint64_t v183 = v322;
        uint64_t v280 = v327;
        unint64_t v282 = *(void *)(a5 + 16);
        unint64_t v281 = *(void *)(a5 + 24);
        if (v282 >= v281 >> 1) {
          a5 = sub_100050738(v281);
        }
        uint64_t v188 = v280 + 1;
        *(void *)(a5 + 16) = v282 + 1;
        sub_1000507F4();
        sub_100033768(v279, a5 + v283 + *(void *)(v284 + 72) * v282);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v15 == v188) {
          goto LABEL_140;
        }
      }
    }
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    swift_bridgeObjectRetain();
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  v353[0] = (uint64_t)_swiftEmptyArrayStorage;
  sub_100057A80();
  if ((v30 & 0x8000000000000000) == 0)
  {
    uint64_t v341 = 0;
    unint64_t v31 = a5 & 0xC000000000000001;
    while (1)
    {
      if (v31) {
        id v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v32 = *(id *)(a5 + 32);
      }
      id v33 = [v32 identifier];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100050788();
      if (v29)
      {
        sub_10005075C(v34);
        sub_100057A80();
      }
      sub_100050620();
      a5 = (unint64_t)v342;
    }
  }
LABEL_167:
  __break(1u);
}

void *sub_10004D6C0()
{
  Table.init(_:database:)(__src, 0xD000000000000015, 0x8000000100143AE0, 0, 0);
  return memcpy(&unk_10017DFA8, __src, 0xA8uLL);
}

uint64_t sub_10004D718()
{
  uint64_t v0 = sub_10000BF1C(&qword_10017E110);
  uint64_t v1 = sub_100034754(&qword_10017E118, &qword_10017E110);
  return ExpressionType.init(_:)(0xD000000000000016, 0x8000000100143AC0, v0, v1);
}

uint64_t sub_10004D798()
{
  uint64_t v0 = sub_10000BF1C((uint64_t *)&unk_10017E920);
  uint64_t v1 = sub_100034754((unint64_t *)&qword_10017D650, (uint64_t *)&unk_10017E920);
  return ExpressionType.init(_:)(0xD000000000000010, 0x8000000100143090, v0, v1);
}

uint64_t sub_10004D818()
{
  uint64_t v0 = sub_10000BF1C((uint64_t *)&unk_10017E920);
  uint64_t v1 = sub_100034754((unint64_t *)&qword_10017D650, (uint64_t *)&unk_10017E920);
  return ExpressionType.init(_:)(0xD000000000000012, 0x8000000100143AA0, v0, v1);
}

uint64_t sub_10004D898()
{
  uint64_t v0 = sub_10000BF1C((uint64_t *)&unk_10017E920);
  uint64_t v1 = sub_100034754((unint64_t *)&qword_10017D650, (uint64_t *)&unk_10017E920);
  return ExpressionType.init(_:)(0x79747265706F7270, 0xED0000656C746954, v0, v1);
}

uint64_t sub_10004D920()
{
  uint64_t v0 = sub_10000BF1C((uint64_t *)&unk_10017E920);
  uint64_t v1 = sub_100034754((unint64_t *)&qword_10017D650, (uint64_t *)&unk_10017E920);
  return ExpressionType.init(_:)(0xD000000000000010, 0x8000000100143A80, v0, v1);
}

uint64_t sub_10004D9A0()
{
  uint64_t v0 = sub_10000BF1C((uint64_t *)&unk_10017E920);
  uint64_t v1 = sub_100034754((unint64_t *)&qword_10017D650, (uint64_t *)&unk_10017E920);
  return ExpressionType.init(_:)(0x79747265706F7270, 0xE800000000000000, v0, v1);
}

uint64_t sub_10004DA1C()
{
  uint64_t v0 = sub_10000BF1C(&qword_10017D678);
  uint64_t v1 = sub_100034754(&qword_10017D680, &qword_10017D678);
  return ExpressionType.init(_:)(0xD000000000000016, 0x8000000100143A60, v0, v1);
}

uint64_t sub_10004DA9C()
{
  uint64_t v0 = sub_10000BF1C(&qword_10017D678);
  uint64_t v1 = sub_100034754(&qword_10017D680, &qword_10017D678);
  return ExpressionType.init(_:)(0xD000000000000020, 0x8000000100143A30, v0, v1);
}

void sub_10004DB1C()
{
  sub_100018E30();
  uint64_t v91 = v0;
  uint64_t v84 = v1;
  uint64_t v3 = v2;
  if (qword_10017C2E8 != -1) {
    swift_once();
  }
  memcpy(v125, &unk_10017DFA8, 0xA8uLL);
  memcpy(__dst, &unk_10017DFA8, sizeof(__dst));
  sub_10002A390(v125);
  if (qword_10017C2F0 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_10017E050;
  uint64_t v5 = *(void *)algn_10017E058;
  uint64_t v6 = qword_10017E060;
  uint64_t v7 = type metadata accessor for UUID();
  <- infix<A>(_:_:)(v4, v5, v6, v3, v7, (uint64_t)&protocol witness table for UUID);
  sub_10000BF1C(&qword_10017E940);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_10013FAC0;
  if (qword_10017C2F8 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_10017E068;
  uint64_t v10 = unk_10017E070;
  uint64_t v11 = qword_10017E078;
  uint64_t v12 = (int *)type metadata accessor for LNAppShortcutParameterRecord();
  uint64_t v13 = (uint64_t *)(v3 + v12[5]);
  uint64_t v15 = *v13;
  uint64_t v14 = (void *)v13[1];
  v94._uint64_t countAndFlagsBits = v15;
  v94._object = v14;
  <- infix<A>(_:_:)(v9, v10, v11, (uint64_t)&v94, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  if (qword_10017C300 != -1) {
    swift_once();
  }
  uint64_t v88 = v8 + 32;
  uint64_t v126 = v8;
  unint64_t v16 = (uint64_t *)(v3 + v12[6]);
  uint64_t v18 = *v16;
  uint64_t v17 = (void *)v16[1];
  v94._uint64_t countAndFlagsBits = v18;
  v94._object = v17;
  uint64_t v85 = v8 + 112;
  <- infix<A>(_:_:)(qword_10017E080, *(uint64_t *)algn_10017E088, qword_10017E090, (uint64_t)&v94, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  if (qword_10017C308 != -1) {
    swift_once();
  }
  uint64_t v19 = qword_10017E098;
  uint64_t v20 = unk_10017E0A0;
  uint64_t v21 = qword_10017E0A8;
  uint64_t v22 = v3;
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  uint64_t v23 = LNStaticDeferredLocalizedString.asLocalizedStringResourceJSON(encoder:)();
  if (v0)
  {
    swift_release();
    int v25 = sub_10002A66C((uint64_t)&v114);
    sub_1000505AC(v25, v26, v27, v28, v29, v30, v31, v32, v76, v77, v80, v83, v84, v85, v88, v0, v92, v93, v94._countAndFlagsBits,
      (uint64_t)v94._object,
      v95,
      v96,
      v97,
      v98,
      v99,
      v100,
      v101,
      v102,
      v103,
      v104,
      v105,
      v106,
      v107,
      v108,
      v109,
      v110,
      v111,
      v112,
      v113,
      v114,
      v115,
      v116,
      v117,
      v118,
      v119,
      v120,
      v121,
      v122,
      v123,
      __dst[0]);
    sub_10002A500(&v94);
    sub_10002A66C(v86);
    sub_10002A66C(v89);
    *(void *)(v126 + 16) = 0;
    swift_setDeallocating();
    sub_10006F150();
  }
  else
  {
    uint64_t v33 = v23;
    unint64_t v34 = v24;
    swift_release();
    v94._uint64_t countAndFlagsBits = v33;
    v94._object = v34;
    uint64_t v81 = v126 + 192;
    <- infix<A>(_:_:)(v19, v20, v21, (uint64_t)&v94, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
    swift_bridgeObjectRelease();
    if (qword_10017C310 != -1) {
      swift_once();
    }
    uint64_t v35 = (uint64_t *)(v22 + v12[8]);
    uint64_t v37 = *v35;
    uint64_t v36 = (void *)v35[1];
    v94._uint64_t countAndFlagsBits = v37;
    v94._object = v36;
    uint64_t v78 = v126 + 272;
    <- infix<A>(_:_:)(qword_10017E0B0, *(uint64_t *)algn_10017E0B8, qword_10017E0C0, (uint64_t)&v94, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
    if (qword_10017C318 != -1) {
      swift_once();
    }
    uint64_t v38 = qword_10017E0C8;
    uint64_t v39 = unk_10017E0D0;
    uint64_t v40 = qword_10017E0D8;
    Swift::String v41 = LNProperty.asJson()();
    if (v42)
    {
      int v43 = sub_10002A66C((uint64_t)&v114);
      sub_1000505AC(v43, v44, v45, v46, v47, v48, v49, v50, v76, v78, v81, v22, v84, v85, v88, 0, v92, v93, v94._countAndFlagsBits,
        (uint64_t)v94._object,
        v95,
        v96,
        v97,
        v98,
        v99,
        v100,
        v101,
        v102,
        v103,
        v104,
        v105,
        v106,
        v107,
        v108,
        v109,
        v110,
        v111,
        v112,
        v113,
        v114,
        v115,
        v116,
        v117,
        v118,
        v119,
        v120,
        v121,
        v122,
        v123,
        __dst[0]);
      sub_10002A500(&v94);
      sub_10002A66C(v79);
      sub_10002A66C(v82);
      sub_10002A66C(v87);
      sub_10002A66C(v90);
      *(void *)(v126 + 16) = 0;
      swift_setDeallocating();
      sub_10006F150();
    }
    else
    {
      Swift::String v94 = v41;
      <- infix<A>(_:_:)(v38, v39, v40, (uint64_t)&v94, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
      swift_bridgeObjectRelease();
      if (qword_10017C320 != -1) {
        swift_once();
      }
      uint64_t v52 = qword_10017E0E0;
      uint64_t v51 = *(void *)algn_10017E0E8;
      uint64_t v53 = qword_10017E0F0;
      uint64_t v54 = *(void *)(v22 + v12[10]);
      if (v54)
      {
        uint64_t v76 = qword_10017E0F0;
        uint64_t v55 = *(void *)algn_10017E0E8;
        uint64_t v91 = v126 + 352;
        swift_allocObject();
        JSONEncoder.init()();
        uint64_t v54 = LNStaticDeferredLocalizedString.asLocalizedStringResourceJSON(encoder:)();
        uint64_t v57 = v56;
        swift_release();
        uint64_t v51 = v55;
        uint64_t v53 = v76;
      }
      else
      {
        uint64_t v57 = 0;
      }
      uint64_t v92 = v54;
      uint64_t v93 = v57;
      <- infix<A>(_:_:)(v52, v51, v53, (uint64_t)&v92, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
      swift_bridgeObjectRelease();
      if (qword_10017C328 != -1) {
        swift_once();
      }
      uint64_t v58 = qword_10017E0F8;
      uint64_t v59 = unk_10017E100;
      uint64_t v60 = qword_10017E108;
      id v61 = (uint64_t *)(v22 + v12[11]);
      uint64_t v62 = v61[1];
      uint64_t v92 = *v61;
      uint64_t v93 = v62;
      swift_bridgeObjectRetain();
      <- infix<A>(_:_:)(v58, v59, v60, (uint64_t)&v92, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
      swift_bridgeObjectRelease();
      uint64_t v63 = QueryType.insert(_:_:)((uint64_t)&v114);
      id v65 = v64;
      id v67 = v66;
      swift_setDeallocating();
      sub_10006F150();
      int v68 = sub_10002A66C((uint64_t)&v114);
      sub_1000505AC(v68, v69, v70, v71, v72, v73, v74, v75, v76, v78, v81, v22, v84, v85, v88, v91, v92, v93, v94._countAndFlagsBits,
        (uint64_t)v94._object,
        v95,
        v96,
        v97,
        v98,
        v99,
        v100,
        v101,
        v102,
        v103,
        v104,
        v105,
        v106,
        v107,
        v108,
        v109,
        v110,
        v111,
        v112,
        v113,
        v114,
        v115,
        v116,
        v117,
        v118,
        v119,
        v120,
        v121,
        v122,
        v123,
        __dst[0]);
      sub_10002A500(&v94);
      v127.template._uint64_t countAndFlagsBits = v63;
      v127.template._object = v65;
      v127.bindings._rawValue = v67;
      Connection.run(_:)(v127);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  sub_100018E80();
}

void sub_10004E1E4()
{
  sub_100018E30();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  if (qword_10017C2E8 != -1) {
    swift_once();
  }
  memcpy(__dst, &unk_10017DFA8, sizeof(__dst));
  sub_10002A390(__dst);
  if (qword_10017C2F8 != -1) {
    swift_once();
  }
  __src[0] = v3;
  __src[1] = v1;
  == infix<A>(_:_:)();
  sub_1000507E0();
  memcpy(v4, __dst, 0xA8uLL);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_1000506E0();
  QueryType.filter(_:)(v5, v6, v7, v8);
  sub_10005079C();
  swift_bridgeObjectRelease_n();
  sub_10002A500(__dst);
  memcpy(v14, __src, sizeof(v14));
  memcpy(__src, v14, sizeof(__src));
  AppIntents_SQLite::Delete v15 = QueryType.delete()();
  uint64_t countAndFlagsBits = v15.template._countAndFlagsBits;
  object = v15.template._object;
  rawValue = v15.bindings._rawValue;
  sub_10002A500(v14);
  v16.template._uint64_t countAndFlagsBits = countAndFlagsBits;
  v16.template._object = object;
  v16.bindings._rawValue = rawValue;
  Connection.run(_:)(v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100018E80();
}

void sub_10004E3A4()
{
  sub_100018E30();
  uint64_t v2 = v1;
  if (qword_10017C2E8 != -1) {
    swift_once();
  }
  memcpy(__dst, &unk_10017DFA8, sizeof(__dst));
  sub_10002A390(__dst);
  if (qword_10017C2F0 != -1) {
    swift_once();
  }
  type metadata accessor for UUID();
  == infix<A>(_:_:)();
  memcpy(v7, __dst, sizeof(v7));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100050648((uint64_t)__src);
  swift_bridgeObjectRelease_n();
  sub_10005079C();
  sub_10002A500(__dst);
  memcpy(v10, __src, sizeof(v10));
  __src[3] = &type metadata for Table;
  __src[4] = &protocol witness table for Table;
  __src[0] = swift_allocObject();
  memcpy((void *)(__src[0] + 16), v10, 0xA8uLL);
  uint64_t v3 = Connection.pluck(_:)(__src);
  uint64_t v5 = v4;
  sub_10000E788((uint64_t)__src);
  if (!v0)
  {
    if (v3)
    {
      sub_10004E5B8(v3, v5, v2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v6 = type metadata accessor for LNAppShortcutParameterRecord();
      sub_10000D5B0(v2, 1, 1, v6);
    }
  }
  sub_100018E80();
}

uint64_t sub_10004E5B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  AppIntents_SQLite::Delete v15 = (char *)&v31 - v14;
  if (qword_10017C2F0 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  if (qword_10017C2F8 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  AppIntents_SQLite::Update v16 = v45;
  uint64_t v43 = v44;
  if (qword_10017C300 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  uint64_t v41 = v44;
  uint64_t v42 = v45;
  if (qword_10017C308 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  uint64_t v39 = v44;
  uint64_t v40 = v45;
  if (qword_10017C310 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  uint64_t v37 = v44;
  uint64_t v38 = v45;
  if (qword_10017C318 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  uint64_t v35 = v44;
  uint64_t v36 = v45;
  if (qword_10017C320 != -1) {
    swift_once();
  }
  Row.get<A>(_:)(qword_10017E0E0, *(uint64_t *)algn_10017E0E8, qword_10017E0F0, a1, a2, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, v17, v31, v32, v33, (uint64_t)v34, v35, (uint64_t)v36, v37, (uint64_t)v38, v39, (uint64_t)v40, v41,
    (uint64_t)v42);
  uint64_t v33 = v44;
  unint64_t v34 = v45;
  if (qword_10017C328 != -1) {
    swift_once();
  }
  Row.get<A>(_:)(qword_10017E0F8, unk_10017E100, qword_10017E108, a1, a2, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, v18, v31, v32, v33, (uint64_t)v34, v35, (uint64_t)v36, v37, (uint64_t)v38, v39, (uint64_t)v40, v41,
    (uint64_t)v42);
  uint64_t v31 = v44;
  int v32 = v45;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v15, v9);
  uint64_t v39 = sub_10000D9D4(0, (unint64_t *)&qword_10017EDC0);
  uint64_t v40 = (void *)LNStaticDeferredLocalizedString.init(localizedStringResourceJSON:)();
  sub_10000D9D4(0, (unint64_t *)&unk_10017FAC0);
  uint64_t v20 = type metadata accessor for URL();
  sub_10000D5B0((uint64_t)v8, 1, 1, v20);
  uint64_t v35 = static LNProperty.fromJSON(_:bundleURL:effectiveBundleIdentifier:)();
  sub_100027D90((uint64_t)v8, (uint64_t *)&unk_10017D0C0);
  swift_bridgeObjectRelease();
  if (v34)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = LNStaticDeferredLocalizedString.init(localizedStringResourceJSON:)();
  }
  else
  {
    uint64_t v21 = 0;
  }
  uint64_t v23 = (uint64_t)v42;
  uint64_t v22 = v43;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v12, v9);
  uint64_t v24 = (int *)type metadata accessor for LNAppShortcutParameterRecord();
  int v25 = (uint64_t *)(a3 + v24[5]);
  *int v25 = v22;
  v25[1] = (uint64_t)v16;
  int v26 = (void *)(a3 + v24[6]);
  void *v26 = v41;
  v26[1] = v23;
  *(void *)(a3 + v24[7]) = v40;
  int v27 = (void *)(a3 + v24[8]);
  uint64_t v28 = (uint64_t)v38;
  *int v27 = v37;
  v27[1] = v28;
  *(void *)(a3 + v24[9]) = v35;
  *(void *)(a3 + v24[10]) = v21;
  int v29 = (void *)(a3 + v24[11]);
  int v30 = v32;
  *int v29 = v31;
  v29[1] = v30;
  return sub_10000D5B0(a3, 0, 1, (uint64_t)v24);
}

void sub_10004EDAC()
{
  sub_100018E30();
  uint64_t v2 = v1;
  if (qword_10017C2E8 != -1) {
    swift_once();
  }
  memcpy(v11, &unk_10017DFA8, sizeof(v11));
  v10[0] = v2;
  sub_10002A390(v11);
  if (qword_10017C2F0 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_10017E050;
  uint64_t v4 = *(void *)algn_10017E058;
  uint64_t v5 = qword_10017E060;
  uint64_t v6 = sub_10000BF1C(&qword_10017E120);
  uint64_t v7 = sub_100034754(&qword_10017E128, &qword_10017E120);
  Collection<>.contains(_:)(v3, v4, v5, v6, v7, &protocol witness table for UUID);
  memcpy(v9, v11, sizeof(v9));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100050648((uint64_t)v10);
  swift_bridgeObjectRelease_n();
  sub_10005079C();
  sub_10002A500(v11);
  memcpy(v12, v10, sizeof(v12));
  v10[3] = &type metadata for Table;
  void v10[4] = &protocol witness table for Table;
  v10[0] = swift_allocObject();
  memcpy((void *)(v10[0] + 16), v12, 0xA8uLL);
  Connection.prepareRowIterator(_:)(v10);
  uint64_t v8 = sub_10000E788((uint64_t)v10);
  if (!v0)
  {
    __chkstk_darwin(v8);
    swift_retain();
    sub_10000BF1C((uint64_t *)&unk_10017FAE0);
    RowIterator.compactMap<A>(_:)();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  sub_100018E80();
}

uint64_t sub_10004F06C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, uint64_t, double)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_10000BF1C((uint64_t *)&unk_10017FAE0);
  double v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3(a1, a2, v9);
  uint64_t v12 = type metadata accessor for LNAppShortcutParameterRecord();
  uint64_t v13 = 1;
  if (sub_10000D5D8((uint64_t)v11, 1, v12) != 1)
  {
    sub_100033768((uint64_t)v11, a4);
    sub_10000D5B0(a4, 0, 1, v12);
    uint64_t v13 = 0;
  }
  return sub_10000D5B0(a4, v13, 1, v8);
}

void sub_10004F184()
{
  sub_100018E30();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  if (qword_10017C2E8 != -1) {
    swift_once();
  }
  memcpy(v13, &unk_10017DFA8, sizeof(v13));
  if (v2)
  {
    sub_10002A390(v13);
    if (qword_10017C2F8 != -1) {
      swift_once();
    }
    v11[0] = v4;
    v11[1] = v2;
    == infix<A>(_:_:)();
    sub_1000507E0();
    memcpy(v5, v13, 0xA8uLL);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v6 = sub_1000506E0();
    QueryType.filter(_:)(v6, v7, v8, v9);
    sub_10005079C();
    swift_bridgeObjectRelease_n();
    sub_10002A500(v13);
    uint64_t v10 = v11;
  }
  else
  {
    sub_10002A390(v13);
    uint64_t v10 = v13;
  }
  memcpy(__dst, v10, sizeof(__dst));
  v11[3] = &type metadata for Table;
  v11[4] = &protocol witness table for Table;
  v11[0] = swift_allocObject();
  memcpy((void *)(v11[0] + 16), __dst, 0xA8uLL);
  Connection.prepareRowIterator(_:)(v11);
  sub_10000E788((uint64_t)v11);
  if (!v0)
  {
    type metadata accessor for LNAppShortcutParameterRecord();
    swift_retain();
    RowIterator.compactMap<A>(_:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  sub_100018E80();
}

uint64_t sub_10004F3DC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0[12])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v0[14])
  {
    swift_bridgeObjectRelease();
    if (v0[16])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 184, 7);
}

uint64_t type metadata accessor for LNAppShortcutParameterRecord()
{
  uint64_t result = qword_10017E198;
  if (!qword_10017E198) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10004F4C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10004E5B8(a1, a2, a3);
}

uint64_t sub_10004F4C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10004F06C(a1, a2, *(void (**)(uint64_t, uint64_t, double))(v3 + 16), a3);
}

id sub_10004F4E4(void *a1, void *a2, void *a3)
{
  sub_10000BEA0(a1, a1[3]);
  id v7 = [v3 initWithValue:_bridgeAnythingToObjectiveC<A>(_:)() valueType:a2 displayRepresentation:a3];
  swift_unknownObjectRelease();

  sub_10000E788((uint64_t)a1);
  return v7;
}

id sub_10004F570(void *a1, void *a2)
{
  sub_10000BEA0(a1, a1[3]);
  id v5 = [v2 initWithValue:_bridgeAnythingToObjectiveC<A>(_:)() valueType:a2];
  swift_unknownObjectRelease();

  sub_10000E788((uint64_t)a1);
  return v5;
}

uint64_t sub_10004F5E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  sub_10000C240(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v9;

  return swift_bridgeObjectRelease();
}

uint64_t sub_10004F678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004F878(a1, a2, a3, (uint64_t (*)(uint64_t))sub_10000C320);
}

uint64_t sub_10004F690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10004F8F4(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10000C32C);
}

uint64_t sub_10004F6A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004F878(a1, a2, a3, (uint64_t (*)(uint64_t))sub_10000C438);
}

uint64_t sub_10004F6C0()
{
  sub_100050600();
  uint64_t v1 = sub_100050578();
  sub_10000C524(v1);
  *uint64_t v0 = v3;

  return swift_bridgeObjectRelease();
}

uint64_t sub_10004F72C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004F878(a1, a2, a3, (uint64_t (*)(uint64_t))sub_10000C5F4);
}

uint64_t sub_10004F744()
{
  swift_isUniquelyReferenced_nonNull_native();
  sub_1000506C8();
  sub_10000C600();
  *uint64_t v0 = v2;

  return swift_bridgeObjectRelease();
}

uint64_t sub_10004F7B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004F878(a1, a2, a3, (uint64_t (*)(uint64_t))sub_10000C73C);
}

uint64_t sub_10004F7CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  sub_100050600();
  uint64_t v5 = sub_100050578();
  uint64_t v6 = a4(v5);
  sub_100050694(v6, v7, v8, v9, v10, v11, v12, v13, v15, v16);

  return swift_bridgeObjectRelease();
}

uint64_t sub_10004F830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004F878(a1, a2, a3, (uint64_t (*)(uint64_t))sub_10000CBE0);
}

uint64_t sub_10004F848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004F878(a1, a2, a3, (uint64_t (*)(uint64_t))sub_10000CCC0);
}

uint64_t sub_10004F860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004F878(a1, a2, a3, (uint64_t (*)(uint64_t))sub_10000CCD8);
}

uint64_t sub_10004F878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  sub_100050600();
  uint64_t v5 = sub_100050578();
  uint64_t v6 = a4(v5);
  sub_100050694(v6, v7, v8, v9, v10, v11, v12, v13, v15, v16);

  return swift_bridgeObjectRelease();
}

uint64_t sub_10004F8DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10004F8F4(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10000CCF0);
}

uint64_t sub_10004F8F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  swift_isUniquelyReferenced_nonNull_native();
  sub_1000506C8();
  uint64_t v12 = a6(a1, a2, a3, a4, a5);
  sub_100050694(v12, v13, v14, v15, v16, v17, v18, v19, v21, v22);

  return swift_bridgeObjectRelease();
}

#error "10004FA08: call analysis failed (funcsize=120)"

uint64_t sub_10004FB6C(void *a1)
{
  id v1 = [a1 name];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_10004FBD0(void *a1)
{
  id v2 = [a1 synonyms];

  if (!v2) {
    return 0;
  }
  sub_10000D9D4(0, (unint64_t *)&qword_10017EDC0);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

unint64_t sub_10004FC48()
{
  unint64_t result = qword_10017CB88;
  if (!qword_10017CB88)
  {
    type metadata accessor for LNValueTypeSpecificMetadataKey(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CB88);
  }
  return result;
}

uint64_t sub_10004FC98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000BF1C((uint64_t *)&unk_10017EB90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_10004FD00(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v33 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v33 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (uint64_t *)((char *)a1 + v9);
    uint64_t v14 = (uint64_t *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = a3[7];
    uint64_t v17 = a3[8];
    uint64_t v18 = *(void **)((char *)a2 + v16);
    *(uint64_t *)((char *)a1 + v16) = (uint64_t)v18;
    uint64_t v19 = (uint64_t *)((char *)a1 + v17);
    uint64_t v20 = (uint64_t *)((char *)a2 + v17);
    uint64_t v21 = v20[1];
    void *v19 = *v20;
    v19[1] = v21;
    uint64_t v22 = a3[9];
    uint64_t v23 = a3[10];
    uint64_t v24 = *(void **)((char *)a2 + v22);
    *(uint64_t *)((char *)a1 + v22) = (uint64_t)v24;
    int v25 = *(void **)((char *)a2 + v23);
    *(uint64_t *)((char *)a1 + v23) = (uint64_t)v25;
    uint64_t v26 = a3[11];
    int v27 = (uint64_t *)((char *)a1 + v26);
    uint64_t v28 = (uint64_t *)((char *)a2 + v26);
    uint64_t v29 = v28[1];
    *int v27 = *v28;
    v27[1] = v29;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v30 = v18;
    swift_bridgeObjectRetain();
    id v31 = v24;
    id v32 = v25;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10004FE60(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10004FF2C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = *(void **)(a2 + v15);
  *(void *)(a1 + v15) = v17;
  uint64_t v18 = (void *)(a1 + v16);
  uint64_t v19 = (void *)(a2 + v16);
  uint64_t v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  uint64_t v21 = a3[9];
  uint64_t v22 = a3[10];
  uint64_t v23 = *(void **)(a2 + v21);
  *(void *)(a1 + v21) = v23;
  uint64_t v24 = *(void **)(a2 + v22);
  *(void *)(a1 + v22) = v24;
  uint64_t v25 = a3[11];
  uint64_t v26 = (void *)(a1 + v25);
  int v27 = (void *)(a2 + v25);
  uint64_t v28 = v27[1];
  void *v26 = *v27;
  v26[1] = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v29 = v17;
  swift_bridgeObjectRetain();
  id v30 = v23;
  id v31 = v24;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10005003C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[7];
  uint64_t v14 = *(void **)(a2 + v13);
  uint64_t v15 = *(void **)(a1 + v13);
  *(void *)(a1 + v13) = v14;
  id v16 = v14;

  uint64_t v17 = a3[8];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  *uint64_t v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[9];
  uint64_t v21 = *(void **)(a2 + v20);
  uint64_t v22 = *(void **)(a1 + v20);
  *(void *)(a1 + v20) = v21;
  id v23 = v21;

  uint64_t v24 = a3[10];
  uint64_t v25 = *(void **)(a1 + v24);
  uint64_t v26 = *(void **)(a2 + v24);
  *(void *)(a1 + v24) = v26;
  id v27 = v26;

  uint64_t v28 = a3[11];
  id v29 = (void *)(a1 + v28);
  id v30 = (void *)(a2 + v28);
  *id v29 = *v30;
  v29[1] = v30[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000501A4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_10005025C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[7];
  uint64_t v18 = *(void **)(a1 + v17);
  *(void *)(a1 + v17) = *(void *)(a2 + v17);

  uint64_t v19 = a3[8];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (uint64_t *)(a2 + v19);
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  void *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[9];
  uint64_t v25 = *(void **)(a1 + v24);
  *(void *)(a1 + v24) = *(void *)(a2 + v24);

  uint64_t v26 = a3[10];
  id v27 = *(void **)(a1 + v26);
  *(void *)(a1 + v26) = *(void *)(a2 + v26);

  uint64_t v28 = a3[11];
  id v29 = (void *)(a1 + v28);
  id v30 = (uint64_t *)(a2 + v28);
  uint64_t v32 = *v30;
  uint64_t v31 = v30[1];
  *id v29 = v32;
  v29[1] = v31;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100050378(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005038C);
}

uint64_t sub_10005038C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for UUID();
  sub_100035C48();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return sub_10000D5D8(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t sub_10005041C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100050430);
}

void sub_100050430(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_10005066C();
  type metadata accessor for UUID();
  sub_100035C48();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    sub_10000D5B0(v4, a2, a2, v8);
  }
  else
  {
    *(void *)(v4 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
}

uint64_t sub_1000504B8()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100050578()
{
  *uint64_t v0 = 0x8000000000000000;
  return v1;
}

void *sub_1000505AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char __dst, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char __src)
{
  return memcpy(&__dst, &__src, 0xA8uLL);
}

uint64_t sub_1000505C8()
{
  sub_10000D5B0(v1, 0, 1, v0);
  return sub_10000D5D8(v1, 1, v0);
}

uint64_t sub_100050600()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

void sub_100050620()
{
  *(void *)(v0 + 16) = v5;
  uint64_t v6 = (void *)(v0 + 24 * v1);
  v6[4] = v3;
  v6[5] = v4;
  v6[6] = v2;
}

double sub_10005063C()
{
  double result = 0.0;
  *(_OWORD *)(v0 + 480) = 0u;
  *(_OWORD *)(v0 + 496) = 0u;
  return result;
}

uint64_t sub_100050648@<X0>(uint64_t a1@<X8>)
{
  return QueryType.filter(_:)(v1, v2, v3, a1);
}

uint64_t sub_10005066C()
{
  return 0;
}

uint64_t sub_100050678(uint64_t a1)
{
  return sub_10000D5B0(a1, 1, 1, v1);
}

uint64_t sub_100050694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = *v10;
  *uint64_t v10 = a10;
  return result;
}

uint64_t sub_1000506A4()
{
  return swift_dynamicCast();
}

void sub_1000506C8()
{
  *uint64_t v0 = 0x8000000000000000;
}

uint64_t sub_1000506E0()
{
  return v0;
}

uint64_t sub_1000506F8(uint64_t a1)
{
  uint64_t v4 = *(void *)(v2 + 56) + 32 * a1;
  return sub_100010008(v4, v1 + 480);
}

id sub_100050714()
{
  uint64_t v3 = *(void **)(v0 + 416);
  return sub_10004F4E4((void *)(v0 + 480), v3, v1);
}

uint64_t sub_100050738@<X0>(unint64_t a1@<X8>)
{
  return sub_10001E8F8(a1 > 1, v1, 1, v2);
}

BOOL sub_10005075C@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

void sub_100050774()
{
  *(void *)(v0 - 240) = 31524;
  *(void *)(v0 - 232) = 0xE200000000000000;
}

void sub_100050788()
{
  *(void *)(v1 - 192) = v0;
}

uint64_t sub_10005079C()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1000507B4()
{
  sub_10000D5B0(v1, 0, 1, v0);
  return v1;
}

void *sub_100050808(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_100050838(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))sub_100049E50);
}

void *sub_100050820(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_100050838(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))sub_100049F14);
}

void *sub_100050838(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, unint64_t))
{
  if ((a4 & 1) == 0) {
    goto LABEL_2;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v11 = (void *)swift_dynamicCastClass();
  if (!v11)
  {
    swift_unknownObjectRelease();
    uint64_t v11 = _swiftEmptyArrayStorage;
  }
  uint64_t v12 = v11[2];
  swift_release();
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v12 != (a4 >> 1) - a3)
  {
LABEL_11:
    swift_unknownObjectRelease();
LABEL_2:
    uint64_t v10 = (void *)a5(a1, a2, a3, a4);
    goto LABEL_9;
  }
  uint64_t v10 = (void *)swift_dynamicCastClass();
  if (!v10)
  {
    swift_unknownObjectRelease();
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
LABEL_9:
  swift_unknownObjectRelease();
  return v10;
}

void *sub_100050930(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    goto LABEL_26;
  }
  uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v4 = 0;
    uint64_t v5 = 4;
    while (1)
    {
      id v6 = (a2 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a2 + 8 * v5);
      uint64_t v7 = v6;
      id v8 = (id)(v5 - 3);
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      id v9 = [v6 orderedPhrases];
      sub_100050D4C();
      unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v10 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      BOOL v12 = __OFADD__(v4, v11);
      v4 += v11;
      if (v12) {
        goto LABEL_25;
      }
      if (v4 > a1)
      {
        swift_bridgeObjectRelease();
        id v14 = [v7 orderedPhrases];
        unint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (__OFSUB__(v4, a1))
        {
          __break(1u);
        }
        else
        {
          uint64_t v16 = sub_100050D8C(v4 - a1, v15);
          uint64_t v50 = sub_100050838(v16, v17, v18, v19, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))sub_100049D54);
          id v20 = [v7 bundleIdentifier];
          uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v47 = v22;
          uint64_t v48 = v21;

          id v23 = [v7 localeIdentifier];
          uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v45 = v25;
          uint64_t v46 = v24;

          id v26 = [v7 actionIdentifier];
          uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v28 = v27;

          uint64_t v29 = sub_10000FDC0(v7, (SEL *)&selRef_localizedShortTitle);
          uint64_t v31 = v30;
          uint64_t v32 = sub_10000FDC0(v7, (SEL *)&selRef_localizedAutoShortcutDescription);
          uint64_t v34 = v33;
          id v35 = [v7 systemImageName];
          uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v38 = v37;

          id v39 = [v7 shortcutTileColor];
          id v40 = [v7 parameterPresentation];
          id v41 = objc_allocWithZone((Class)LNAutoShortcut);
          id v8 = sub_100050F30(v48, v47, v46, v45, v44, v28, (uint64_t)v50, v29, v31, v32, v34, v36, v38, (uint64_t)v39, v40);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          {
LABEL_20:
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();

            return _swiftEmptyArrayStorage;
          }
        }
        sub_1000510C0();
        goto LABEL_20;
      }
      if (v4 == a1)
      {
        swift_bridgeObjectRelease();
        id v42 = v7;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          sub_1000510C0();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        return _swiftEmptyArrayStorage;
      }
      id v13 = v7;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_1000510C0();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      ++v5;
      if (v8 == (id)v3) {
        goto LABEL_27;
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    swift_bridgeObjectRetain();
  }
LABEL_27:
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

unint64_t sub_100050D4C()
{
  unint64_t result = qword_10017C780;
  if (!qword_10017C780)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10017C780);
  }
  return result;
}

uint64_t sub_100050D8C(uint64_t a1, unint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v2 = a2;
    uint64_t v3 = a1;
    unint64_t v4 = a2 >> 62;
    if (!(a2 >> 62))
    {
      uint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_4:
  uint64_t result = sub_1000F7B60(v5, -v3, 0, v2);
  if ((v7 & 1) == 0)
  {
    uint64_t v8 = result;
    if ((result & 0x8000000000000000) == 0) {
      goto LABEL_8;
    }
    __break(1u);
  }
  uint64_t v8 = 0;
LABEL_8:
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v10 < 0)
    {
      __break(1u);
      goto LABEL_24;
    }
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v9 < v8)
  {
LABEL_24:
    __break(1u);
    return result;
  }
  if ((v2 & 0xC000000000000001) != 0 && v8)
  {
    sub_100050D4C();
    Swift::Int v11 = 0;
    do
    {
      Swift::Int v12 = v11 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v11);
      Swift::Int v11 = v12;
    }
    while (v8 != v12);
  }
  if (!v4) {
    return v2 & 0xFFFFFFFFFFFFFF8;
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = _CocoaArrayWrapper.subscript.getter();
  swift_bridgeObjectRelease_n();
  return v13;
}

id sub_100050F30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_100050D4C();
  v17.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (a9)
  {
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v18 = 0;
  }
  if (a11)
  {
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v19 = 0;
  }
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v21 = [v24 initWithBundleIdentifier:v23 localeIdentifier:v15 actionIdentifier:v16 orderedPhrases:v17.super.isa localizedShortTitle:v18 localizedAutoShortcutDescription:v19 systemImageName:v20 shortcutTileColor:a14 parameterPresentation:a15];

  return v21;
}

uint64_t sub_1000510C0()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void sub_1000510DC()
{
  uint64_t v0 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v0 - 8);
  unint64_t v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = 1;
  String.utf8CString.getter();
  uint64_t v3 = (void *)container_system_path_for_identifier();
  swift_release();
  if (v3)
  {
    uint64_t v4 = type metadata accessor for URL();
    sub_10000D5B0((uint64_t)v2, 1, 1, v4);
    URL.init(fileURLWithFileSystemRepresentation:isDirectory:relativeTo:)();
    sub_100035FE8((uint64_t)v2);
    free(v3);
  }
  else
  {
    uint64_t v5 = v7;
    sub_100051240();
    swift_allocError();
    *id v6 = v5;
    swift_willThrow();
  }
}

unint64_t sub_100051240()
{
  unint64_t result = qword_10017E1E8;
  if (!qword_10017E1E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E1E8);
  }
  return result;
}

ValueMetadata *_s14ContainerErrorVMa()
{
  return &_s14ContainerErrorVN;
}

void sub_10005129C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = a1 + 40;
    uint64_t v30 = *(void *)(a1 + 16);
    uint64_t v26 = v5 - 1;
    uint64_t v28 = v2;
    uint64_t v29 = _swiftEmptyArrayStorage;
    uint64_t v27 = a1 + 40;
    do
    {
      uint64_t v8 = (_OWORD *)(v7 + 24 * v6);
      unint64_t v9 = v6;
      while (1)
      {
        if (v9 >= *(void *)(a1 + 16))
        {
          __break(1u);
          return;
        }
        uint64_t v31 = *((void *)v8 - 1);
        long long v33 = *v8;
        swift_bridgeObjectRetain();
        id v10 = *((id *)&v33 + 1);
        swift_bridgeObjectRetain();
        id v11 = [v10 intentIdentifier];
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v14 = v13;

        if (!*(void *)(a2 + 16))
        {

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_9;
        }
        sub_100021098(v12, v14, v15, v16, v17, v18, v19, v20, v26, v27, v28, (uint64_t)v29, v30, v31, v33, *((uint64_t *)&v33 + 1), v35, v36, v37,
          v38,
          v39,
          v40,
          v41,
          v42,
          v43,
          v44);
        char v22 = v21;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v22) {
          break;
        }

LABEL_9:
        ++v9;
        swift_bridgeObjectRelease();
        uint64_t v8 = (_OWORD *)((char *)v8 + 24);
        if (v30 == v9) {
          goto LABEL_16;
        }
      }
      NSString v23 = v29;
      uint64_t v36 = (uint64_t)v29;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100057B88();
        NSString v23 = v29;
      }
      unint64_t v24 = v23[2];
      if (v24 >= v23[3] >> 1)
      {
        sub_100057B88();
        NSString v23 = v29;
      }
      unint64_t v6 = v9 + 1;
      v23[2] = v24 + 1;
      uint64_t v29 = v23;
      uint64_t v25 = &v23[3 * v24];
      v25[4] = v32;
      *(_OWORD *)(v25 + 5) = v34;
      uint64_t v7 = v27;
    }
    while (v26 != v9);
  }
LABEL_16:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void sub_1000514CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    unint64_t v5 = 0;
    uint64_t v6 = a1 + 40;
    uint64_t v29 = *(void *)(a1 + 16);
    uint64_t v25 = v4 - 1;
    uint64_t v7 = _swiftEmptyArrayStorage;
    uint64_t v26 = a1 + 40;
    do
    {
      uint64_t v28 = (uint64_t)v7;
      uint64_t v8 = (_OWORD *)(v6 + 24 * v5);
      unint64_t v9 = v5;
      while (1)
      {
        if (v9 >= *(void *)(a1 + 16))
        {
          __break(1u);
          return;
        }
        uint64_t v30 = *((void *)v8 - 1);
        long long v31 = *v8;
        swift_bridgeObjectRetain();
        id v10 = *((id *)&v31 + 1);
        swift_bridgeObjectRetain();
        id v11 = [v10 intentIdentifier];
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v14 = v13;

        if (!*(void *)(a2 + 16)) {
          break;
        }
        sub_100021098(v12, v14, v15, v16, v17, v18, v19, v20, v25, v26, v27, v28, v29, v30, v31, *((uint64_t *)&v31 + 1), v32, v33, v34,
          v35,
          v36,
          v37,
          v38,
          v39,
          v40,
          v41);
        char v22 = v21;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v22 & 1) == 0) {
          goto LABEL_10;
        }
        ++v9;

        swift_bridgeObjectRelease();
        uint64_t v8 = (_OWORD *)((char *)v8 + 24);
        if (v29 == v9) {
          goto LABEL_15;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_10:
      uint64_t v7 = (void *)v28;
      uint64_t v33 = v28;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100057B88();
        uint64_t v7 = (void *)v28;
      }
      unint64_t v23 = v7[2];
      if (v23 >= v7[3] >> 1)
      {
        sub_100057B88();
        uint64_t v7 = (void *)v28;
      }
      unint64_t v5 = v9 + 1;
      void v7[2] = v23 + 1;
      unint64_t v24 = &v7[3 * v23];
      v24[4] = v30;
      *(_OWORD *)(v24 + 5) = v31;
      uint64_t v6 = v26;
    }
    while (v25 != v9);
  }
LABEL_15:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void *sub_1000516E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = _swiftEmptyArrayStorage;
  unint64_t v19 = (unint64_t)_swiftEmptyArrayStorage;
  if (v5)
  {
    uint64_t v15 = a2 + 112;
    uint64_t v7 = (void **)(swift_bridgeObjectRetain() + 48);
    while (1)
    {
      uint64_t v8 = *v7;
      sub_10000C0D4(v15, (uint64_t)v18);
      sub_10000BEA0(v18, v18[3]);
      swift_bridgeObjectRetain();
      id v9 = v8;
      id v10 = [v9 intentIdentifier];
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;

      sub_100063E84(a3, a4, v11, v13);
      if (v4) {
        break;
      }
      swift_bridgeObjectRelease();
      sub_10000E788((uint64_t)v18);

      swift_bridgeObjectRelease();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v7 += 3;
      if (!--v5)
      {
        swift_bridgeObjectRelease();
        uint64_t v6 = (void *)v19;
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease();
    sub_10000E788((uint64_t)v18);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    uint64_t v6 = (void *)v19;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_9:
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v6;
}

void *sub_1000518AC(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10000BF1C(&qword_10017D488);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v6 = v3;
  sub_100053418(a1, 1, &v6);
  uint64_t v4 = v6;
  if (v1) {
    swift_release();
  }
  return v4;
}

uint64_t sub_10005193C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000D844(v0, qword_100181AB8);
  sub_10000BEE4(v0, (uint64_t)qword_100181AB8);
  uint64_t result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    String.init(cString:)();
    return Logger.init(subsystem:category:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *sub_1000519BC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = type metadata accessor for Logger();
  sub_10000E948();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  sub_10001B450();
  uint64_t v15 = v14 - v13;
  if (AFDeviceSupportsSAE())
  {
    uint64_t v16 = sub_10000D9D4(0, &qword_10017E2E0);
    swift_bridgeObjectRetain_n();
    id v17 = sub_100071454(a1, a2, 0);
    if (v4)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v25 = v16;
      uint64_t v26 = &off_10016F7B0;
      *(void *)&long long v24 = v17;
      sub_10000D698(&v24, (uint64_t)v27);
      uint64_t v28 = a1;
      uint64_t v29 = a2;
      uint64_t v16 = sub_100051C04((uint64_t)v27, a3, a4);
      sub_1000535EC((uint64_t)v27);
    }
  }
  else
  {
    uint64_t v18 = qword_10017C330;
    swift_retain();
    if (v18 != -1) {
      swift_once();
    }
    uint64_t v19 = sub_10000BEE4(v9, (uint64_t)qword_100181AB8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v15, v19, v9);
    swift_release();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      char v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Device/locale does not support example phrases.", v22, 2u);
      sub_10000EB10();
    }

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v15, v9);
    return _swiftEmptyArrayStorage;
  }
  return (void *)v16;
}

uint64_t sub_100051C04(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v156 = _s7BuilderVMa();
  __chkstk_darwin(v156);
  sub_10001B450();
  uint64_t v8 = (void *)(v7 - v6);
  uint64_t v9 = type metadata accessor for Logger();
  sub_10000E948();
  uint64_t v159 = v10;
  __chkstk_darwin(v11);
  sub_10001B450();
  uint64_t v14 = v13 - v12;
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v15 = *(void *)(a1 + 48);
  id v17 = (void *)(v3 + 112);
  sub_10000BEA0((void *)(v3 + 112), *(void *)(v3 + 136));
  uint64_t v18 = sub_1000665F4(v16, v15, 0, 0);
  if (v161) {
    return v9;
  }
  uint64_t v19 = v18;
  uint64_t v148 = (uint64_t)v8;
  uint64_t v147 = a1;
  uint64_t v152 = v9;
  unint64_t v154 = v15;
  id v155 = v17;
  uint64_t v20 = qword_10017C330;
  swift_retain();
  if (v20 != -1) {
    swift_once();
  }
  uint64_t v21 = sub_1000536E8((uint64_t)v171);
  uint64_t v9 = sub_10000BEE4(v21, v22);
  uint64_t v146 = *(void (**)(void, void, void))(v159 + 16);
  v146(v14, v9, v8);
  swift_release();
  swift_bridgeObjectRetain();
  uint64_t v23 = v19;
  long long v24 = (void *)Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  uint64_t v151 = v23;
  if (sub_100053660(v25))
  {
    *(_DWORD *)sub_1000536D0() = 134217984;
    *(void *)&long long v165 = *(void *)(v23 + 16);
    sub_10005362C();
    swift_bridgeObjectRelease();
    sub_100053700((void *)&_mh_execute_header, v26, v27, "Found %ld example phrases from JSON file");
    uint64_t v28 = (int *)v154;
    sub_10000EB10();
  }
  else
  {

    swift_bridgeObjectRelease();
    uint64_t v28 = (int *)v154;
  }
  (*(void (**)(uint64_t, void *))(v159 + 8))(v14, v8);
  uint64_t v29 = (void *)sub_1000536E8((uint64_t)&v173);
  sub_10000BEA0(v29, v30);
  swift_bridgeObjectRetain();
  sub_100065FDC();
  uint64_t v32 = v31;
  swift_bridgeObjectRelease();
  uint64_t v173 = v32;
  sub_10000BEA0(v8, *(void *)(v4 + 136));
  sub_1000661E4();
  uint64_t v34 = v33;
  uint64_t v35 = *(void **)(*sub_10000BEA0(v8, *(void *)(v4 + 136)) + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_provider);
  swift_bridgeObjectRetain();
  id v36 = v35;
  sub_100097D9C();
  unint64_t v149 = v37;
  uint64_t v160 = v34;
  uint64_t v162 = v4;
  sub_10000C0D4((uint64_t)v8, (uint64_t)&v165);
  sub_10000BEA0(&v165, *((uint64_t *)&v166 + 1));
  sub_10000BF1C(&qword_10017D0D0);
  unint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013EF10;
  uint64_t v39 = self;
  *(void *)(inited + 32) = [v39 entityUpdatingProtocol];
  *(void *)(inited + 40) = [v39 propertyUpdaterProtocol];
  specialized Array._endMutation()();
  sub_1000B1D94(inited);
  sub_100066820();
  uint64_t v42 = v40;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v43 = sub_10001B584(v16, v28, v42);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v43)
  {
    sub_10000D9D4(0, &qword_10017E9F0);
    uint64_t v43 = Dictionary.init(dictionaryLiteral:)();
  }
  sub_10000E788((uint64_t)&v165);
  sub_10000C0D4((uint64_t)v155, (uint64_t)&v165);
  sub_10000BEA0(&v165, *((uint64_t *)&v166 + 1));
  unint64_t v44 = swift_initStackObject();
  *(_OWORD *)(v44 + 16) = xmmword_10013EF30;
  *(void *)(v44 + 32) = [v39 openEntitySystemProtocol];
  *(void *)&v164[0] = v44;
  specialized Array._endMutation()();
  sub_1000B1D94(v44);
  sub_100066820();
  uint64_t v46 = v45;
  uint64_t v137 = v43;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v47 = sub_10001B584(v16, v28, v46);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v47)
  {
    sub_10000D9D4(0, &qword_10017E9F0);
    uint64_t v47 = Dictionary.init(dictionaryLiteral:)();
  }
  sub_10000E788((uint64_t)&v165);
  uint64_t v48 = *(void **)(*sub_10000BEA0(v155, *(void *)(v4 + 136)) + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_provider);
  swift_bridgeObjectRetain();
  id v49 = v48;
  uint64_t v50 = 0;
  sub_100097DFC();
  uint64_t v52 = v51;
  uint64_t v150 = v16;
  if ((unint64_t)v51 >> 62)
  {
    if (v51 < 0) {
      uint64_t v50 = v51;
    }
    else {
      uint64_t v50 = v51 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    uint64_t v53 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v53 = *(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v54 = v162;
  if (!v53)
  {
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  uint64_t v136 = v47;
  *(void *)&long long v165 = _swiftEmptyArrayStorage;
  uint64_t v55 = &v165;
  sub_100057BE0();
  if ((v53 & 0x8000000000000000) == 0)
  {
    uint64_t v56 = 0;
    uint64_t v57 = v165;
    unint64_t v144 = v52 & 0xC000000000000001;
    uint64_t v142 = v52;
    uint64_t v140 = v53;
    do
    {
      if (v144) {
        id v58 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v58 = *(id *)(v52 + 8 * v56 + 32);
      }
      id v59 = v58;
      id v60 = [v58 identifier:v136];
      uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v63 = v62;

      *(void *)&long long v165 = v57;
      unint64_t v65 = *(void *)(v57 + 16);
      unint64_t v64 = *(void *)(v57 + 24);
      if (v65 >= v64 >> 1)
      {
        sub_10005367C(v64);
        sub_100057BE0();
        uint64_t v57 = v165;
      }
      ++v56;
      *(void *)(v57 + 16) = v65 + 1;
      uint64_t v66 = (void *)(v57 + 24 * v65);
      v66[4] = v61;
      v66[5] = v63;
      v66[6] = v59;
      uint64_t v54 = v162;
      uint64_t v52 = v142;
    }
    while (v140 != v56);
    swift_bridgeObjectRelease();
    uint64_t v43 = v137;
LABEL_27:
    sub_1000536F4();
    int v68 = sub_1000518AC(v67);
    sub_100049D6C();
    uint64_t v70 = v69;
    swift_bridgeObjectRelease();
    sub_100049D6C();
    swift_bridgeObjectRelease();
    *(void *)&long long v165 = v70;
    sub_1000546BC();
    unint64_t v71 = v165;
    uint64_t v72 = sub_1000536E8((uint64_t)v170);
    int v73 = sub_100019024(v72, (unint64_t)v28, (uint64_t)v68, v71);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v74 = swift_bridgeObjectRetain();
    sub_10005129C(v74, (uint64_t)v68);
    swift_bridgeObjectRetain();
    sub_1000514CC((uint64_t)v73, (uint64_t)v68);
    sub_1000542DC();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v75 = swift_bridgeObjectRetain();
    uint64_t v76 = sub_1000516E0(v75, v54, v43, (uint64_t)v28);
    if (v50)
    {
      swift_bridgeObjectRelease_n();
      sub_100053648();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100053694();
LABEL_8:
      swift_bridgeObjectRelease();
      return v9;
    }
    id v77 = v76;
    swift_bridgeObjectRelease();
    sub_1000542DC();
    sub_10000BEA0(v155, *(void *)(v54 + 136));
    sub_1000663EC();
    uint64_t v139 = v68;
    uint64_t v79 = *(void *)(v78 + 16);
    uint64_t v141 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v138 = (uint64_t)v77;
    if (v79)
    {
      uint64_t v80 = (_OWORD *)(v78 + 40);
      uint64_t v81 = _swiftEmptyArrayStorage;
      uint64_t v82 = &selRef_initWithConnection_options_error_;
      do
      {
        uint64_t v83 = *((void *)v80 - 1);
        long long v145 = *v80;
        swift_bridgeObjectRetain();
        id v77 = *((id *)&v145 + 1);
        if ([v77 v82[172]])
        {

          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v84 = v83;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&long long v165 = v81;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_100057B30();
            uint64_t v81 = (void *)v165;
          }
          long long v86 = v145;
          uint64_t v87 = v83;
          unint64_t v89 = v81[2];
          unint64_t v88 = v81[3];
          id v77 = (id)(v89 + 1);
          if (v89 >= v88 >> 1)
          {
            sub_10005367C(v88);
            sub_100057B30();
            uint64_t v87 = v84;
            long long v86 = v145;
            uint64_t v81 = (void *)v165;
          }
          v81[2] = v77;
          uint64_t v90 = &v81[3 * v89];
          v90[4] = v87;
          *(_OWORD *)(v90 + 5) = v86;
          uint64_t v82 = &selRef_initWithConnection_options_error_;
        }
        uint64_t v80 = (_OWORD *)((char *)v80 + 24);
        --v79;
      }
      while (v79);
    }
    else
    {
      uint64_t v81 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease();
    swift_retain();
    uint64_t v91 = Logger.logObject.getter();
    os_log_type_t v92 = static os_log_type_t.default.getter();
    uint64_t v143 = v81;
    if (sub_100053660(v92))
    {
      uint64_t v93 = (uint8_t *)sub_1000536D0();
      *(_DWORD *)uint64_t v93 = 134217984;
      *(void *)&long long v165 = v81[2];
      sub_10005362C();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v91, (os_log_type_t)v77, "Developer provided %ld AssistantAppEntity examples", v93, 0xCu);
      sub_10000EB10();
    }
    else
    {

      swift_release();
    }
    uint64_t v43 = a3;
    uint64_t v53 = a2;
    uint64_t v169 = _swiftEmptyDictionarySingleton;
    Swift::String v94 = sub_1000ACEA0(a2, a3);
    sub_1000A4E4C(v138, v149, a2, a3, v150, (uint64_t)v28, (uint64_t)v94, (unint64_t)&v169);
    uint64_t v47 = v95;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v96 = (void *)Logger.logObject.getter();
    os_log_type_t v97 = static os_log_type_t.default.getter();
    if (sub_100053660(v97))
    {
      *(_DWORD *)sub_1000536D0() = 134217984;
      *(void *)&long long v165 = *(void *)(v47 + 16);
      sub_10005362C();
      swift_bridgeObjectRelease();
      sub_100053700((void *)&_mh_execute_header, v98, v99, "Found %ld parameters with platform-provided values");
      uint64_t v53 = a2;
      sub_10000EB10();
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    sub_100053384(v147, (uint64_t)&v165);
    uint64_t v55 = v173;
    sub_10000C0D4((uint64_t)v155, (uint64_t)v164);
    uint64_t v50 = qword_10017C470;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v54 = v148;
    uint64_t v28 = (int *)v156;
    if (v50 == -1) {
      goto LABEL_48;
    }
    goto LABEL_84;
  }
  __break(1u);
LABEL_84:
  swift_once();
LABEL_48:
  uint64_t v100 = sub_10000BEE4(v152, (uint64_t)qword_100181F08);
  v146(v54, v100, v152);
  uint64_t v101 = v54 + v28[5];
  long long v102 = v166;
  *(_OWORD *)uint64_t v101 = v165;
  *(_OWORD *)(v101 + 16) = v102;
  *(_OWORD *)(v101 + 32) = v167;
  *(void *)(v101 + 48) = v168;
  uint64_t v103 = (uint64_t *)(v54 + v28[6]);
  *uint64_t v103 = v53;
  v103[1] = v43;
  *(void *)(v54 + v28[7]) = v55;
  uint64_t v153 = v28[8];
  *(void *)(v54 + v153) = v160;
  *(void *)(v54 + v28[9]) = v47;
  sub_10000D698(v164, v54 + v28[10]);
  *(void *)(v54 + v28[11]) = v139;
  *(void *)(v54 + v28[12]) = v143;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v104 = Logger.logObject.getter();
  os_log_type_t v105 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v104, v105))
  {
    uint64_t v9 = v154;
    uint64_t v106 = swift_slowAlloc();
    *(void *)&long long v165 = swift_slowAlloc();
    *(_DWORD *)uint64_t v106 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)&v164[0] = sub_100013090(v150, v154, (uint64_t *)&v165);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v106 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(void *)&v164[0] = sub_100013090(a2, v43, (uint64_t *)&v165);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v104, v105, "Interpolating AssistantIntent example phrases for %s:%s", (uint8_t *)v106, 0x16u);
    swift_arrayDestroy();
    sub_10000EB10();
    sub_10000EB10();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  sub_1000536F4();
  uint64_t v107 = sub_10008BCC4();
  if (v50)
  {
    sub_100053648();
    sub_1000533BC(v54);
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  uint64_t v108 = v107;
  uint64_t v109 = *(void *)(v54 + v153);
  *(void *)&v164[0] = _swiftEmptyArrayStorage;
  uint64_t v110 = *(void *)(v109 + 16);
  if (v110)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v111 = (void **)(v109 + 48);
    do
    {
      uint64_t v113 = (uint64_t)*(v111 - 1);
      uint64_t v112 = *v111;
      *(void *)&long long v165 = *(v111 - 2);
      *((void *)&v165 + 1) = v113;
      *(void *)&long long v166 = v112;
      swift_bridgeObjectRetain();
      id v114 = v112;
      uint64_t v50 = 0;
      sub_10008D8B8(v164, (uint64_t)&v165, v148);

      swift_bridgeObjectRelease();
      v111 += 3;
      --v110;
    }
    while (v110);
    swift_bridgeObjectRelease_n();
    uint64_t v141 = *(void *)&v164[0];
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v115 = Logger.logObject.getter();
  os_log_type_t v116 = static os_log_type_t.default.getter();
  unint64_t v117 = (unint64_t)v108 >> 62;
  if (os_log_type_enabled(v115, v116))
  {
    uint64_t v118 = swift_slowAlloc();
    *(_DWORD *)uint64_t v118 = 134218240;
    if (v117)
    {
      if (v108 < 0) {
        uint64_t v50 = v108;
      }
      else {
        uint64_t v50 = v108 & 0xFFFFFFFFFFFFFF8;
      }
      swift_bridgeObjectRetain();
      uint64_t v119 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v119 = *(void *)((v108 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    *(void *)&long long v165 = v119;
    sub_10005362C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v118 + 12) = 2048;
    if ((unint64_t)v141 >> 62)
    {
      if (v141 < 0) {
        uint64_t v50 = v141;
      }
      else {
        uint64_t v50 = v141 & 0xFFFFFFFFFFFFFF8;
      }
      swift_bridgeObjectRetain();
      uint64_t v120 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v120 = *(void *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    *(void *)&long long v165 = v120;
    sub_10005362C();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v115, v116, "Generated example phrases: %ld negative phrases: %ld", (uint8_t *)v118, 0x16u);
    sub_10000EB10();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v121 = *(void *)(v151 + 16);
  uint64_t v122 = _swiftEmptyArrayStorage;
  if (v121)
  {
    *(void *)&long long v165 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v123 = (void **)(v151 + 48);
    do
    {
      id v124 = *v123;
      v123 += 3;
      id v125 = v124;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v121;
    }
    while (v121);
    uint64_t v122 = (void *)v165;
  }
  swift_bridgeObjectRelease();
  sub_100053648();
  swift_bridgeObjectRelease();
  *(void *)&long long v165 = v122;
  swift_bridgeObjectRetain();
  sub_100054518();
  sub_100054518();
  uint64_t v9 = v165;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v126 = Logger.logObject.getter();
  os_log_type_t v127 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v126, v127))
  {
    uint64_t v128 = swift_slowAlloc();
    *(void *)&long long v165 = swift_slowAlloc();
    *(_DWORD *)uint64_t v128 = 134218498;
    if (v117)
    {
      if (v108 < 0) {
        uint64_t v50 = v108;
      }
      else {
        uint64_t v50 = v108 & 0xFFFFFFFFFFFFFF8;
      }
      swift_bridgeObjectRetain();
      uint64_t v129 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v129 = *(void *)((v108 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    *(void *)&v164[0] = v129;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v128 + 12) = 2080;
    sub_1000536E8((uint64_t)v172);
    swift_bridgeObjectRetain();
    uint64_t v130 = sub_100013090(v150, (unint64_t)v122, (uint64_t *)&v165);
    sub_1000536AC(v130);
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v128 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v131 = sub_100013090(a2, a3, (uint64_t *)&v165);
    sub_1000536AC(v131);
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v126, v127, "Caching AssistantIntent %ld phrases for %s:%s", (uint8_t *)v128, 0x20u);
    swift_arrayDestroy();
    sub_10000EB10();
    sub_10000EB10();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  sub_10000BEA0(v155, *(void *)(v162 + 136));
  sub_1000536F4();
  sub_1000666D4();
  if (v50)
  {
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v132 = Logger.logObject.getter();
    os_log_type_t v133 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v132, v133))
    {
      unint64_t v134 = (uint8_t *)sub_1000536D0();
      id v163 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v134 = 138412290;
      swift_errorRetain();
      uint64_t v135 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)&long long v165 = v135;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v163 = v135;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v132, v133, "Failed to update cached AssistantIntent example phrases: %@", v134, 0xCu);
      sub_10000BF1C((uint64_t *)&unk_10017EB20);
      swift_arrayDestroy();
      sub_10000EB10();
      sub_10000EB10();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    swift_errorRelease();
  }
  sub_1000533BC(v148);
  return v9;
}

uint64_t type metadata accessor for AssistantIntentPhraseInterpolator()
{
  return self;
}

uint64_t sub_100053384(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000533BC(uint64_t a1)
{
  uint64_t v2 = _s7BuilderVMa();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

#error "10005348C: call analysis failed (funcsize=116)"

uint64_t sub_1000535EC(uint64_t a1)
{
  return a1;
}

ValueMetadata *type metadata accessor for AssistantIntentPhraseInterpolator.ApplicationPlaceholder()
{
  return &type metadata for AssistantIntentPhraseInterpolator.ApplicationPlaceholder;
}

uint64_t sub_10005362C()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100053648()
{
  return swift_bridgeObjectRelease();
}

BOOL sub_100053660(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

BOOL sub_10005367C@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_100053694()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000536AC(uint64_t a1)
{
  *(void *)(v1 - 280) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000536D0()
{
  return swift_slowAlloc();
}

uint64_t sub_1000536E8@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(a1 - 256);
}

void sub_100053700(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 0xCu);
}

void sub_100053720(id a1@<X4>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, uint64_t a5@<X3>, void *a6@<X8>)
{
  uint64_t v12 = &selRef_initWithConnection_options_error_;
  if ([a1 value]
    || (id v16 = [a1 disabledReason]) == 0)
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0xF000000000000000;
LABEL_3:
    id v15 = [a1 v12[63]];

    *a6 = a2;
    a6[1] = a3;
    a6[2] = a4;
    a6[3] = a5;
    a6[4] = v15;
    a6[5] = v13;
    a6[6] = v14;
    return;
  }
  id v22 = 0;
  uint64_t v21 = v16;
  id v17 = [self archivedDataWithRootObject:v16 requiringSecureCoding:1 error:&v22];
  id v18 = v22;
  if (v17)
  {
    uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v14 = v19;

    uint64_t v12 = &selRef_initWithConnection_options_error_;
    goto LABEL_3;
  }
  uint64_t v20 = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _convertNSErrorToError(_:)();

  swift_willThrow();
}

id sub_1000538BC()
{
  uint64_t v1 = v0[4];
  if (v1 == 1)
  {
    id v2 = [self enabled];
    return v2;
  }
  else if (v1)
  {
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    v9._object = (void *)0x8000000100143BC0;
    String.append(_:)(v9);
    id result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    unint64_t v4 = v0[6];
    if (v4 >> 60 == 15)
    {
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v5 = v0[5];
      sub_10000D9D4(0, &qword_10017DD90);
      sub_10000D9D4(0, (unint64_t *)&qword_10017EDC0);
      sub_10000DADC(v5, v4);
      uint64_t v7 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
      sub_10000DA68(v5, v4);
    }
    id v6 = [self disabledWithReason:v7];

    return v6;
  }
  return result;
}

void sub_100053AC4(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v2)
  {
    Swift::String v8 = _swiftEmptyArrayStorage;
    sub_10005773C();
    if (v2 < 0)
    {
      __break(1u);
    }
    else
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if ((a1 & 0xC000000000000001) != 0) {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v4 = *(id *)(a1 + 8 * i + 32);
        }
        sub_10000D9D4(0, &qword_10017E3C0);
        swift_dynamicCast();
        uint64_t v5 = v8;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10005773C();
          uint64_t v5 = v8;
        }
        unint64_t v6 = v5[2];
        if (v6 >= v5[3] >> 1)
        {
          sub_10005773C();
          uint64_t v5 = v8;
        }
        v5[2] = v6 + 1;
        sub_10000E7D8(&v7, &v5[4 * v6 + 4]);
      }
    }
  }
}

void *sub_100053C68(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    Swift::String v9 = _swiftEmptyArrayStorage;
    sub_10005778C();
    uint64_t v4 = a1 + 32;
    uint64_t v2 = _swiftEmptyArrayStorage;
    do
    {
      sub_10000C0D4(v4, (uint64_t)v7);
      sub_10000BF1C(&qword_10017D540);
      sub_10000BF1C(&qword_10017D530);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10005778C();
        uint64_t v2 = v9;
      }
      unint64_t v5 = v2[2];
      if (v5 >= v2[3] >> 1)
      {
        sub_10005778C();
        uint64_t v2 = v9;
      }
      v2[2] = v5 + 1;
      sub_10000D698(&v8, (uint64_t)&v2[5 * v5 + 4]);
      v4 += 40;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void *sub_100053DA4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    sub_100059F74();
    sub_10005773C();
    uint64_t v3 = v8;
    uint64_t v4 = v1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100059FC0();
        sub_10005773C();
        uint64_t v3 = v8;
      }
      unint64_t v5 = v3[2];
      if (v5 >= v3[3] >> 1)
      {
        sub_10005773C();
        uint64_t v3 = v8;
      }
      v4 += 16;
      v3[2] = v5 + 1;
      sub_10000E7D8(&v7, &v3[4 * v5 + 4]);
      --v2;
    }
    while (v2);
  }
  return v3;
}

void *sub_100053EA8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    sub_100059F74();
    sub_10005797C();
    uint64_t v3 = v8;
    uint64_t v4 = v1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_10000BF1C(&qword_10017DEC0);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100059FC0();
        sub_10005797C();
        uint64_t v3 = v8;
      }
      unint64_t v5 = v3[2];
      if (v5 >= v3[3] >> 1)
      {
        sub_10005797C();
        uint64_t v3 = v8;
      }
      v4 += 16;
      v3[2] = v5 + 1;
      sub_100059CD0((uint64_t)v7, (uint64_t)&v3[5 * v5 + 4]);
      --v2;
    }
    while (v2);
  }
  return v3;
}

void sub_100053FB4()
{
  sub_10000E990();
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for LNBundleRecord();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + 16);
  if (v6)
  {
    id v15 = _swiftEmptyArrayStorage;
    sub_100057F1C();
    long long v7 = v15;
    uint64_t v8 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v9 = *(void *)(v3 + 72);
    do
    {
      sub_100027CC8(v8, (uint64_t)v5);
      id v15 = v7;
      unint64_t v10 = v7[2];
      if (v10 >= v7[3] >> 1)
      {
        sub_100057F1C();
        long long v7 = v15;
      }
      uint64_t v13 = v2;
      unint64_t v14 = &off_1001720F8;
      uint64_t v11 = sub_1000274F4((uint64_t *)&v12);
      sub_100027CC8((uint64_t)v5, (uint64_t)v11);
      void v7[2] = v10 + 1;
      sub_10000D698(&v12, (uint64_t)&v7[5 * v10 + 4]);
      sub_100059C74((uint64_t)v5);
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  sub_10000E930();
}

void sub_100054138()
{
}

void sub_100054150()
{
}

void sub_100054168()
{
  sub_1000288B4();
  uint64_t v4 = *(void *)(v3 + 16);
  uint64_t v5 = *v1;
  uint64_t v6 = *(void *)(*v1 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  long long v7 = v2;
  if (!sub_100059F50() || v6 + v4 > *(void *)(v5 + 24) >> 1)
  {
    sub_100059F24();
    uint64_t v5 = v7();
  }
  if (!*(void *)(v0 + 16))
  {
    if (!v4) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  sub_100059E28();
  if (v8 != v9)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v10 = sub_100059F08();
  sub_1000575C8(v10, v11);
  if (!v4)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    *uint64_t v1 = v5;
    sub_10000EB44();
    return;
  }
  sub_100059F18();
  if (!v9)
  {
    *(void *)(v5 + 16) = v12;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_100054234()
{
  sub_100059E50();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_100059F50() || (sub_100059F90(), !(v6 ^ v4 | v5)))
  {
    sub_100059F24();
    sub_10001E56C();
    uint64_t v2 = v7;
  }
  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  sub_100059E28();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v8 = sub_100059F08();
  sub_100056720(v8, v9);
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    *uint64_t v1 = v2;
    return;
  }
  sub_100059F18();
  if (!v4)
  {
    *(void *)(v2 + 16) = v10;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_1000542DC()
{
  sub_100059E50();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_100059F50() || (sub_100059F90(), !(v6 ^ v4 | v5)))
  {
    sub_100059F24();
    sub_10001E68C();
    uint64_t v2 = v7;
  }
  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  sub_100059E28();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_100056D34();
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    *uint64_t v1 = v2;
    return;
  }
  sub_100059F18();
  if (!v4)
  {
    *(void *)(v2 + 16) = v8;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_100054398()
{
  sub_100059E50();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_100059F50() || (sub_100059F90(), !(v6 ^ v4 | v5)))
  {
    sub_100059F24();
    sub_10001E7C0();
    uint64_t v2 = v7;
  }
  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  sub_100059E28();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_100059F08();
  sub_1000568E0();
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    *uint64_t v1 = v2;
    return;
  }
  sub_100059F18();
  if (!v4)
  {
    *(void *)(v2 + 16) = v8;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_100054440()
{
}

void sub_100054458()
{
  sub_100059E50();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_100059F50() || (sub_100059F90(), !(v6 ^ v4 | v5)))
  {
    sub_100059F24();
    sub_10001ED78();
    uint64_t v2 = v7;
  }
  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  sub_100059E28();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_100059F08();
  sub_100056FB4();
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    *uint64_t v1 = v2;
    return;
  }
  sub_100059F18();
  if (!v4)
  {
    *(void *)(v2 + 16) = v8;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_100054500()
{
}

void sub_100054518()
{
  sub_1000288B4();
  unint64_t v2 = v1;
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)*v0 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((*v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v4, v3))
  {
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v5 = *v0;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v0 = v5;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
    {
      uint64_t v7 = v5 & 0xFFFFFFFFFFFFFF8;
      if (v4 + v3 <= *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_12;
      }
    }
  }
  if (v5 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *uint64_t v0 = v8;
    uint64_t v7 = v8 & 0xFFFFFFFFFFFFFF8;
LABEL_12:
    uint64_t v9 = sub_10005A020(v7);
    sub_1000592F4(v9, v10, v2);
    if (v11 >= v3) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    sub_10005A06C();
    if (v14)
    {
      __break(1u);
      return;
    }
    *(void *)(v12 + 16) = v13;
  }
  swift_bridgeObjectRelease();
  sub_10000EB44();
  specialized Array._endMutation()();
}

void sub_1000546BC()
{
}

void sub_1000546D4()
{
}

void sub_1000546EC()
{
  sub_1000288B4();
  uint64_t v3 = v2;
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)*v0 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((*v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v5, v4))
  {
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v6 = *v0;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v0 = v6;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
    {
      uint64_t v8 = v6 & 0xFFFFFFFFFFFFFF8;
      if (v5 + v4 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_12;
      }
    }
  }
  if (v6 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *uint64_t v0 = v9;
    uint64_t v8 = v9 & 0xFFFFFFFFFFFFFF8;
LABEL_12:
    uint64_t v10 = sub_10005A020(v8);
    v3(v10);
    if (v11 >= v4) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    sub_10005A06C();
    if (v14)
    {
      __break(1u);
      return;
    }
    *(void *)(v12 + 16) = v13;
  }
  swift_bridgeObjectRelease();
  sub_10000EB44();
  specialized Array._endMutation()();
}

void sub_100054898()
{
  sub_100059E50();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_100059F50() || (sub_100059F90(), !(v6 ^ v4 | v5)))
  {
    sub_100059F24();
    sub_10001EF70();
    uint64_t v2 = v7;
  }
  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  sub_100059E28();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_100059F08();
  sub_1000571D8();
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    *unint64_t v1 = v2;
    return;
  }
  sub_100059F18();
  if (!v4)
  {
    *(void *)(v2 + 16) = v8;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

uint64_t sub_100054944(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v5 = result;
  if (!swift_isUniquelyReferenced_nonNull_native() || (uint64_t v6 = *(void *)(v3 + 24) >> 1, v6 < v4 + v2))
  {
    sub_10001EF70();
    uint64_t v3 = v7;
    uint64_t v6 = *(void *)(v7 + 24) >> 1;
  }
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = v6 - v8;
  id result = (uint64_t)sub_10004A46C(v87, (void *)(v3 + 104 * v8 + 32), v6 - v8, v5);
  if (result < v2) {
    goto LABEL_12;
  }
  if (result)
  {
    uint64_t v12 = *(void *)(v3 + 16);
    BOOL v13 = __OFADD__(v12, result);
    uint64_t v14 = v12 + result;
    if (v13)
    {
      __break(1u);
      goto LABEL_48;
    }
    *(void *)(v3 + 16) = v14;
  }
  if (result != v9) {
    goto LABEL_10;
  }
LABEL_13:
  uint64_t v11 = *(void *)(v3 + 16);
  uint64_t v63 = v87[0];
  uint64_t v60 = v87[1];
  int64_t v10 = v88;
  uint64_t v58 = v87[2];
  if (!v89)
  {
LABEL_48:
    int64_t v37 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      return result;
    }
    int64_t v28 = (unint64_t)(v58 + 64) >> 6;
    if (v37 >= v28) {
      goto LABEL_10;
    }
    uint64_t v85 = v11;
    unint64_t v53 = *(void *)(v60 + 8 * v37);
    if (!v53)
    {
      int64_t v54 = v10 + 2;
      if (v10 + 2 >= v28) {
        goto LABEL_10;
      }
      unint64_t v53 = *(void *)(v60 + 8 * v54);
      if (v53)
      {
LABEL_57:
        int64_t v37 = v54;
      }
      else
      {
        if (v10 + 3 >= v28) {
          goto LABEL_10;
        }
        unint64_t v53 = *(void *)(v60 + 8 * (v10 + 3));
        if (!v53) {
          goto LABEL_63;
        }
        int64_t v37 = v10 + 3;
      }
    }
LABEL_51:
    unint64_t v15 = (v53 - 1) & v53;
    unint64_t v16 = __clz(__rbit64(v53)) + (v37 << 6);
    int64_t v82 = v37;
    goto LABEL_15;
  }
  int64_t v82 = v88;
  uint64_t v85 = *(void *)(v3 + 16);
  unint64_t v15 = (v89 - 1) & v89;
  unint64_t v16 = __clz(__rbit64(v89)) | (v88 << 6);
LABEL_15:
  id v17 = (int64_t *)(*(void *)(v63 + 48) + 104 * v16);
  int64_t v18 = v17[1];
  int64_t v20 = v17[2];
  int64_t v19 = v17[3];
  int64_t v21 = v17[5];
  int64_t v22 = v17[6];
  int64_t v78 = v17[7];
  int64_t v80 = *v17;
  int64_t v23 = v17[10];
  int64_t v73 = v17[8];
  int64_t v76 = v17[9];
  int64_t v24 = v17[12];
  unint64_t v65 = (void *)v17[4];
  uint64_t v69 = (void *)v17[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v61 = v65;
  int64_t v66 = v22;
  int64_t v25 = v73;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v56 = v69;
  int64_t v70 = v24;
  swift_bridgeObjectRetain();
  if (!v18) {
    goto LABEL_10;
  }
  int64_t v26 = (int64_t)v56;
  int64_t v59 = (unint64_t)(v58 + 64) >> 6;
  int64_t v10 = v82;
  uint64_t v27 = v85;
  int64_t v29 = v78;
  int64_t v28 = v80;
  int64_t v31 = v66;
  int64_t v30 = v70;
  int64_t v32 = v76;
  int64_t v33 = (int64_t)v61;
  while (1)
  {
    uint64_t v64 = *(void *)(v3 + 24) >> 1;
    if (v64 < v27 + 1)
    {
      int64_t v68 = v31;
      int64_t v72 = v30;
      int64_t v62 = v33;
      int64_t v57 = v26;
      uint64_t v84 = v10;
      int64_t v86 = v23;
      uint64_t v48 = v27;
      int64_t v49 = v28;
      int64_t v75 = v25;
      int64_t v50 = v29;
      int64_t v51 = v32;
      sub_10001EF70();
      int64_t v26 = v57;
      int64_t v32 = v51;
      int64_t v10 = v84;
      int64_t v23 = v86;
      int64_t v29 = v50;
      int64_t v30 = v72;
      int64_t v25 = v75;
      int64_t v28 = v49;
      uint64_t v27 = v48;
      uint64_t v3 = v52;
      int64_t v33 = v62;
      int64_t v31 = v68;
      uint64_t v64 = *(void *)(v3 + 24) >> 1;
    }
    if (v27 < v64) {
      break;
    }
LABEL_45:
    *(void *)(v3 + 16) = v27;
    if (!v18) {
      goto LABEL_10;
    }
  }
  while (1)
  {
    uint64_t v34 = (int64_t *)(v3 + 32 + 104 * v27);
    *uint64_t v34 = v28;
    v34[1] = v18;
    v34[2] = v20;
    void v34[3] = v19;
    v34[4] = v33;
    v34[5] = v21;
    v34[6] = v31;
    v34[7] = v29;
    v34[8] = v25;
    v34[9] = v32;
    v34[10] = v23;
    v34[11] = v26;
    uint64_t v35 = v27 + 1;
    v34[12] = v30;
    uint64_t v85 = v35;
    if (!v15) {
      break;
    }
    uint64_t v74 = (v15 - 1) & v15;
    int64_t v83 = v10;
    unint64_t v36 = __clz(__rbit64(v15)) | (v10 << 6);
LABEL_32:
    uint64_t v40 = (int64_t *)(*(void *)(v63 + 48) + 104 * v36);
    int64_t v18 = v40[1];
    int64_t v19 = v40[3];
    uint64_t v41 = (void *)v40[4];
    int64_t v67 = v40[5];
    int64_t v71 = v40[2];
    int64_t v31 = v40[6];
    int64_t v79 = v40[7];
    int64_t v81 = *v40;
    int64_t v25 = v40[8];
    int64_t v77 = v40[9];
    int64_t v23 = v40[10];
    uint64_t v42 = (void *)v40[11];
    int64_t v43 = v40[12];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v44 = v41;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v45 = v42;
    swift_bridgeObjectRetain();
    int64_t v26 = (int64_t)v42;
    int64_t v33 = (int64_t)v41;
    int64_t v30 = v43;
    int64_t v32 = v77;
    int64_t v29 = v79;
    int64_t v28 = v81;
    int64_t v10 = v83;
    int64_t v21 = v67;
    int64_t v20 = v71;
    uint64_t v27 = v85;
    if (v18) {
      BOOL v46 = v85 < v64;
    }
    else {
      BOOL v46 = 0;
    }
    unint64_t v15 = v74;
    if (!v46) {
      goto LABEL_45;
    }
  }
  int64_t v37 = v10 + 1;
  if (!__OFADD__(v10, 1))
  {
    if (v37 >= v59) {
      goto LABEL_53;
    }
    unint64_t v38 = *(void *)(v60 + 8 * v37);
    if (v38) {
      goto LABEL_31;
    }
    int64_t v39 = v10 + 2;
    if (v10 + 2 >= v59) {
      goto LABEL_53;
    }
    unint64_t v38 = *(void *)(v60 + 8 * v39);
    if (!v38)
    {
      if (v10 + 3 >= v59) {
        goto LABEL_53;
      }
      unint64_t v38 = *(void *)(v60 + 8 * (v10 + 3));
      if (v38)
      {
        int64_t v37 = v10 + 3;
        goto LABEL_31;
      }
      int64_t v39 = v10 + 4;
      if (v10 + 4 >= v59) {
        goto LABEL_53;
      }
      unint64_t v38 = *(void *)(v60 + 8 * v39);
      if (!v38)
      {
        int64_t v37 = v10 + 5;
        if (v10 + 5 >= v59) {
          goto LABEL_53;
        }
        unint64_t v38 = *(void *)(v60 + 8 * v37);
        if (!v38)
        {
          int64_t v47 = v10 + 6;
          while (v47 < v59)
          {
            unint64_t v38 = *(void *)(v60 + 8 * v47++);
            if (v38)
            {
              int64_t v37 = v47 - 1;
              goto LABEL_31;
            }
          }
LABEL_53:
          *(void *)(v3 + 16) = v35;
          goto LABEL_10;
        }
        goto LABEL_31;
      }
    }
    int64_t v37 = v39;
LABEL_31:
    uint64_t v74 = (v38 - 1) & v38;
    unint64_t v36 = __clz(__rbit64(v38)) + (v37 << 6);
    int64_t v83 = v37;
    goto LABEL_32;
  }
  __break(1u);
LABEL_63:
  int64_t v54 = v37 + 3;
  if (v37 + 3 < v28)
  {
    unint64_t v53 = *(void *)(v60 + 8 * v54);
    if (v53) {
      goto LABEL_57;
    }
    v37 += 4;
    if (v37 >= v28) {
      goto LABEL_10;
    }
    unint64_t v53 = *(void *)(v60 + 8 * v37);
    if (!v53)
    {
      int64_t v55 = v10 + 6;
      while (v55 < v28)
      {
        unint64_t v53 = *(void *)(v60 + 8 * v55++);
        if (v53)
        {
          int64_t v37 = v55 - 1;
          goto LABEL_51;
        }
      }
      goto LABEL_10;
    }
    goto LABEL_51;
  }
LABEL_10:
  id result = sub_100027664();
  *unint64_t v1 = v3;
  return result;
}

void sub_100054F1C()
{
  sub_100059E50();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_100059F50() || (sub_100059F90(), !(v6 ^ v4 | v5)))
  {
    sub_100059F24();
    uint64_t v2 = sub_10001E8F8(v7, v8, v9, v10);
  }
  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  uint64_t v11 = (*(void *)(v2 + 24) >> 1) - *(void *)(v2 + 16);
  uint64_t v12 = *(void *)(type metadata accessor for LNAppShortcutParameterRecord() - 8);
  if (v11 < v3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_1000574E8(v0 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80)), v3);
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    *unint64_t v1 = v2;
    return;
  }
  sub_100059F18();
  if (!v4)
  {
    *(void *)(v2 + 16) = v13;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_100055028()
{
}

void sub_100055048()
{
}

void LinkDaemon.entryPoints.getter()
{
  sub_10000E990();
  uint64_t v0 = sub_100059EB8();
  *(void *)(v0 + 16) = sub_100055A88;
  *(void *)(v0 + 24) = 0;
  sub_10000BF1C(&qword_10017E2E8);
  sub_100059EE0();
  uint64_t v1 = sub_1000561F8(1, (uint64_t)sub_100059DE8, v0);
  uint64_t v2 = sub_100059EB8();
  *(void *)(v2 + 16) = sub_100055B78;
  *(void *)(v2 + 24) = 0;
  sub_10000BF1C(&qword_10017E2F0);
  sub_100059EE0();
  uint64_t v3 = sub_1000561F8(0, (uint64_t)sub_100059B50, v2);
  uint64_t v4 = sub_100059EB8();
  *(void *)(v4 + 16) = sub_100055C28;
  *(void *)(v4 + 24) = 0;
  sub_10000BF1C(&qword_10017E2F8);
  sub_100059EE0();
  uint64_t v5 = sub_1000561F8(1, (uint64_t)sub_100059DE8, v4);
  sub_10000BF1C(&qword_10017D528);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013F1D0;
  *(void *)(inited + 56) = sub_10000BF1C(&qword_10017E300);
  *(void *)(inited + 64) = &off_100172DB8;
  uint64_t v7 = sub_100059EB8();
  *(void *)(v7 + 16) = sub_100059B58;
  *(void *)(v7 + 24) = v5;
  sub_100059EE0();
  swift_retain_n();
  uint64_t v8 = sub_1000561F8(0, (uint64_t)sub_100059DE8, v7);
  swift_allocObject();
  char v9 = sub_10005642C(v8);
  swift_release();
  *(void *)(inited + 32) = v9;
  uint64_t v10 = sub_100059EB8();
  *(void *)(v10 + 16) = v1;
  *(void *)(v10 + 24) = v5;
  *(void *)(inited + 96) = sub_10000BF1C(&qword_10017E308);
  *(void *)(inited + 104) = &off_100172DB8;
  uint64_t v11 = sub_100059EB8();
  *(void *)(v11 + 16) = sub_100059BB4;
  *(void *)(v11 + 24) = v10;
  sub_10000BF1C(&qword_10017E310);
  sub_100059EE0();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v12 = sub_1000561F8(0, (uint64_t)sub_100059DE8, v11);
  swift_allocObject();
  uint64_t v13 = sub_1000562E8(v12, &qword_10017C390, &qword_100181C18, &qword_100181C20);
  swift_release();
  *(void *)(inited + 72) = v13;
  sub_10000BF1C(&qword_10017D538);
  uint64_t v14 = swift_initStackObject();
  *(_OWORD *)(v14 + 16) = xmmword_10013F1D0;
  uint64_t v15 = sub_10000BF1C(&qword_10017E318);
  uint64_t v16 = swift_allocObject();
  swift_retain();
  swift_defaultActor_initialize();
  *(void *)(v16 + 112) = v1;
  *(void *)(v14 + 56) = v15;
  *(void *)(v14 + 64) = sub_100034754(&qword_10017E320, &qword_10017E318);
  *(void *)(v14 + 32) = v16;
  *(void *)(v14 + 96) = sub_10000BF1C(&qword_10017E328);
  *(void *)(v14 + 104) = sub_100059FA8(&qword_10017E330);
  uint64_t v17 = sub_100059EB8();
  *(void *)(v17 + 16) = sub_100059BD0;
  *(void *)(v17 + 24) = v1;
  sub_100059EE0();
  swift_retain_n();
  uint64_t v18 = sub_1000561F8(0, (uint64_t)sub_100059DE8, v17);
  uint64_t v19 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v19 + 112) = v18;
  swift_release();
  *(void *)(v14 + 72) = v19;
  uint64_t v20 = swift_initStackObject();
  *(_OWORD *)(v20 + 16) = xmmword_10013F1D0;
  *(void *)(v20 + 56) = sub_10000BF1C(&qword_10017E338);
  *(void *)(v20 + 64) = sub_100034754(&qword_10017E340, &qword_10017E338);
  uint64_t v21 = sub_100059EB8();
  *(void *)(v21 + 16) = sub_100059BEC;
  *(void *)(v21 + 24) = v1;
  sub_10000BF1C(&qword_10017E348);
  sub_100059EE0();
  swift_retain_n();
  uint64_t v22 = sub_1000561F8(0, (uint64_t)sub_100059DE8, v21);
  swift_allocObject();
  uint64_t v23 = sub_100056108(v22, 0xD00000000000001FLL, 0x8000000100143BE0);
  swift_release();
  *(void *)(v20 + 32) = v23;
  *(void *)(v20 + 96) = sub_10000BF1C(&qword_10017E350);
  *(void *)(v20 + 104) = sub_100059FA8(&qword_10017E358);
  uint64_t v24 = sub_100059EB8();
  *(void *)(v24 + 16) = sub_100059C08;
  *(void *)(v24 + 24) = v3;
  sub_10000BF1C(&qword_10017E360);
  sub_100059EE0();
  swift_retain_n();
  uint64_t v25 = sub_1000561F8(0, (uint64_t)sub_100059DE8, v24);
  swift_allocObject();
  uint64_t v26 = sub_100056108(v25, 0xD000000000000020, 0x80000001001435F0);
  swift_release();
  *(void *)(v20 + 72) = v26;
  uint64_t v27 = swift_initStackObject();
  *(_OWORD *)(v27 + 16) = xmmword_10013F9D0;
  uint64_t v28 = sub_10000BF1C(&qword_10017E368);
  swift_allocObject();
  uint64_t v29 = swift_retain();
  int64_t v30 = sub_1000562E8(v29, &qword_10017C4D0, &qword_100181FF8, &qword_100182000);
  *(void *)(v27 + 56) = v28;
  *(void *)(v27 + 64) = sub_100034754(&qword_10017E370, &qword_10017E368);
  *(void *)(v27 + 32) = v30;
  *(void *)(v27 + 96) = sub_10000BF1C(&qword_10017E378);
  *(void *)(v27 + 104) = sub_100059FA8(&qword_10017E380);
  uint64_t v31 = sub_100059EB8();
  *(void *)(v31 + 16) = sub_100059C24;
  *(void *)(v31 + 24) = v3;
  sub_10000BF1C(&qword_10017E388);
  uint64_t v32 = sub_100059EE0();
  swift_retain_n();
  sub_1000561F8(0, (uint64_t)sub_100059C40, v31);
  sub_100059F30();
  int64_t v33 = sub_1000562E8(v32, &qword_10017C2A8, &qword_100181990, (uint64_t *)algn_100181998);
  swift_release();
  *(void *)(v27 + 72) = v33;
  *(void *)(v27 + 136) = sub_10000BF1C(&qword_10017E390);
  *(void *)(v27 + 144) = sub_100059FA8(&qword_10017E398);
  uint64_t v34 = sub_100059EB8();
  *(void *)(v34 + 16) = sub_100059C48;
  *(void *)(v34 + 24) = v1;
  sub_10000BF1C(&qword_10017E3A0);
  uint64_t v35 = sub_100059EE0();
  swift_retain_n();
  sub_1000561F8(0, (uint64_t)sub_100059DE8, v34);
  sub_100059F30();
  unint64_t v36 = sub_1000562E8(v35, &qword_10017C360, &qword_100181AE8, &qword_100181AF0);
  swift_release();
  *(void *)(v27 + 112) = v36;
  *(void *)(v27 + 176) = sub_10000BF1C(&qword_10017E3A8);
  *(void *)(v27 + 184) = sub_100059FA8(&qword_10017E3B0);
  uint64_t v37 = sub_100059EB8();
  *(void *)(v37 + 16) = sub_1000560C0;
  *(void *)(v37 + 24) = 0;
  sub_10000BF1C(&qword_10017E3B8);
  uint64_t v38 = sub_100059EE0();
  uint64_t v39 = v37;
  uint64_t v40 = v38;
  sub_1000561F8(0, (uint64_t)sub_100059DE8, v39);
  sub_100059F30();
  *(void *)(v27 + 152) = sub_1000562E8(v40, &qword_10017C518, &qword_1001821E8, &qword_1001821F0);
  sub_100054168();
  sub_100054168();
  sub_100053C68(v14);
  swift_bridgeObjectRelease();
  sub_100054168();
  swift_release();
  swift_release();
  swift_release();
  sub_10000E930();
}

void sub_100055A88(void *a1@<X8>)
{
  if (qword_10017C4B8 != -1) {
    swift_once();
  }
  memcpy(__dst, &qword_100181F80, sizeof(__dst));
  uint64_t v3 = __dst[2];
  uint64_t v14 = __dst[8];
  objc_allocWithZone((Class)type metadata accessor for Registry(0));
  swift_retain();
  sub_100059D80(v3);
  swift_retain();
  swift_retain();
  sub_100059D90((uint64_t)&v14);
  sub_1000B73C4((uint64_t)__dst, v4, v5, v6, v7, v8, v9, v10, v12, __dst[0], __dst[1], __dst[2], __dst[3], __dst[4], __dst[5], __dst[6], __dst[7], __dst[8], __dst[9],
    v14);
  if (!v1) {
    *a1 = v11;
  }
}

uint64_t sub_100055B78@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  sub_10000D5B0((uint64_t)v4, 1, 1, v5);
  type metadata accessor for TranscriptActionRecordStreamManager();
  swift_allocObject();
  uint64_t result = sub_10003E58C((uint64_t)v4);
  *a1 = result;
  return result;
}

id sub_100055C28@<X0>(void *a1@<X8>)
{
  if (qword_10017C218 != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)qword_100181768;
  *a1 = qword_100181768;
  return v2;
}

uint64_t sub_100055C90@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100070DF4();
  if (!v1) {
    *a1 = result;
  }
  return result;
}

id sub_100055CC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  type metadata accessor for ApplicationService();
  swift_allocObject();
  swift_retain();
  swift_retain();
  id result = sub_100071678(a1, a2);
  *a3 = result;
  return result;
}

id sub_100055D34@<X0>(void *a1@<X8>)
{
  type metadata accessor for ApplicationService();
  swift_allocObject();
  uint64_t v2 = swift_retain();
  id result = sub_100071678(v2, 0);
  *a1 = result;
  return result;
}

uint64_t sub_100055D98@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for UpdateRegistryService();
  uint64_t v4 = swift_allocObject();
  swift_retain();
  uint64_t result = swift_defaultActor_initialize();
  *(void *)(v4 + 112) = a1;
  *a2 = v4;
  return result;
}

uint64_t sub_100055DFC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_100055E5C();
  type metadata accessor for PruneTranscriptService();
  uint64_t v3 = swift_allocObject();
  uint64_t result = swift_defaultActor_initialize();
  *(void *)(v3 + 112) = v2;
  *a1 = v3;
  return result;
}

uint64_t sub_100055E5C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + 16);
  swift_retain();
  [v2 lock];
  uint64_t v3 = swift_beginAccess();
  uint64_t v4 = *(void *)(v0 + 48);
  int v5 = *(unsigned __int8 *)(v0 + 56);
  if (v5 == 255)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(v0 + 24))(&v11, v3);
    uint64_t v7 = v11;
    char v6 = v12;
    uint64_t v8 = *(void *)(v1 + 48);
    *(void *)(v1 + 48) = v11;
    unsigned __int8 v9 = *(unsigned char *)(v1 + 56);
    *(unsigned char *)(v1 + 56) = v6;
    sub_100059D50(v7, v6);
    sub_100059D5C(v8, v9);
  }
  else
  {
    char v6 = v5 & 1;
    uint64_t v7 = *(void *)(v0 + 48);
  }
  sub_100059D38(v4, v5);
  [v2 unlock];
  swift_release();
  if ((v6 & 1) == 0) {
    return v7;
  }
  sub_10000BF1C(&qword_10017E4D0);
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

id sub_100055F6C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = sub_100055E5C();
  sub_10000BF1C(&qword_10017E4C8);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_10013EF20;
  if (qword_10017C488 != -1) {
    swift_once();
  }
  uint64_t v4 = (void *)qword_100181F50;
  *(void *)(v3 + 56) = &type metadata for NotifyingTranscriptObserver;
  *(void *)(v3 + 64) = &off_100171F28;
  *(void *)(v3 + 32) = v4;
  id v5 = objc_allocWithZone((Class)type metadata accessor for Transcript());
  id v6 = v4;
  id result = sub_100036B64(v2, v3);
  *a1 = result;
  return result;
}

id sub_100056050@<X0>(void *a1@<X8>)
{
  id v2 = objc_allocWithZone((Class)type metadata accessor for SuggestedActionsService());
  uint64_t v3 = swift_retain();
  id result = sub_10005BB30(v3, (uint64_t)&unk_10017E750, 0);
  *a1 = result;
  return result;
}

id sub_1000560C0@<X0>(void *a1@<X8>)
{
  id result = [objc_allocWithZone((Class)type metadata accessor for ExtensionService()) init];
  *a1 = result;
  return result;
}

uint64_t sub_100056108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v3;
  swift_defaultActor_initialize();
  uint64_t v8 = v3 + qword_10017E758;
  uint64_t v9 = sub_10000BF1C(&qword_10017E4D8);
  sub_10000D5B0(v8, 1, 1, v9);
  *(void *)(v6 + qword_10017E760) = 0;
  *(void *)(v6 + qword_100181AF8) = a1;
  sub_10000D9D4(0, &qword_10017E4E0);
  swift_retain();
  id v10 = sub_10005653C(a2, a3, (SEL *)&selRef_initWithIdentifier_);
  *(void *)(v6 + 112) = v10;
  id v11 = v10;
  [v11 setPreregistered:1];

  swift_release();
  return v6;
}

uint64_t sub_1000561F8(char a1, uint64_t a2, uint64_t a3)
{
  id v7 = [objc_allocWithZone((Class)NSLock) init];
  *(void *)(v3 + 48) = 0;
  *(unsigned char *)(v3 + 56) = -1;
  *(unsigned char *)(v3 + 40) = a1;
  *(void *)(v3 + 16) = v7;
  *(void *)(v3 + 24) = a2;
  *(void *)(v3 + 32) = a3;
  return v3;
}

uint64_t sub_10005625C(void (*a1)(uint64_t *__return_ptr))
{
  a1(&v2);
  return v2;
}

uint64_t sub_100056298(void (*a1)(uint64_t *__return_ptr))
{
  a1(&v2);
  return v2;
}

void *sub_1000562E8(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  ObjectType = (objc_class *)swift_getObjectType();
  swift_defaultActor_initialize();
  sub_10000D9D4(0, &qword_10017E4C0);
  uint64_t v10 = *a2;
  swift_retain();
  if (v10 != -1) {
    swift_once();
  }
  uint64_t v11 = *a3;
  uint64_t v12 = *a4;
  swift_bridgeObjectRetain();
  v4[14] = sub_10005653C(v11, v12, (SEL *)&selRef_initWithMachServiceName_);
  v4[15] = a1;
  swift_retain();
  swift_release();
  v18.receiver = v4;
  v18.super_class = ObjectType;
  uint64_t v13 = [super init];
  uint64_t v14 = (void *)v13[14];
  uint64_t v15 = v13;
  [v14 setDelegate:v15];
  id v16 = v14;
  [v16 resume];

  swift_release();
  return v15;
}

void *sub_10005642C(uint64_t a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  swift_defaultActor_initialize();
  sub_10000D9D4(0, &qword_10017E4C0);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;
  swift_retain();
  v1[14] = sub_10005653C(v4, v6, (SEL *)&selRef_initWithMachServiceName_);
  v1[15] = a1;
  swift_retain();
  swift_release();
  v12.receiver = v1;
  v12.super_class = ObjectType;
  id v7 = [super init];
  uint64_t v8 = (void *)v7[14];
  uint64_t v9 = v7;
  [v8 setDelegate:v9];
  id v10 = v8;
  [v10 resume];

  swift_release();
  return v9;
}

id sub_10005653C(uint64_t a1, uint64_t a2, SEL *a3)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v4 *a3:v5];

  return v6;
}

uint64_t sub_1000565B0(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100028268();
    sub_100028548();
LABEL_11:
    uint64_t result = sub_1000282F4();
    __break(1u);
    return result;
  }
  sub_100059ED0();
  if (v4 + 8 * v3 > v2 && v2 + 8 * v3 > v4)
  {
    sub_100028268();
    sub_100028538();
    goto LABEL_11;
  }
  sub_10000D9D4(0, v5);
  sub_100059DEC();

  return swift_arrayInitWithCopy();
}

uint64_t sub_100056670()
{
  sub_100059F9C();
  if (v3 < 0)
  {
    sub_100028268();
    sub_100028548();
LABEL_11:
    uint64_t result = sub_1000282F4();
    __break(1u);
    return result;
  }
  if (v2 + 32 * v1 > v0 && v0 + 32 * v1 > v2)
  {
    sub_100028268();
    sub_100028538();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

uint64_t sub_100056720(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100028268();
    sub_100028548();
LABEL_11:
    uint64_t result = sub_1000282F4();
    __break(1u);
    return result;
  }
  sub_100059ED0();
  if (v4 + 32 * v3 > v2 && v2 + 32 * v3 > v4)
  {
    sub_100028268();
    sub_100028538();
    goto LABEL_11;
  }
  sub_10000BF1C(&qword_10017D3B8);
  sub_100059DEC();

  return swift_arrayInitWithCopy();
}

uint64_t sub_1000567DC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0 || (a3 + 24 * a2 > a1 ? (BOOL v3 = a1 + 24 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    sub_10000BF1C(&qword_10017E490);
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_1000568E0()
{
  sub_100059F9C();
  if (v3 < 0)
  {
    sub_100028268();
    sub_100028548();
LABEL_11:
    uint64_t result = sub_1000282F4();
    __break(1u);
    return result;
  }
  if (v2 + 16 * v1 > v0 && v0 + 16 * v1 > v2)
  {
    sub_100028268();
    sub_100028538();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

uint64_t sub_10005698C(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100028268();
    sub_100028548();
LABEL_11:
    uint64_t result = sub_1000282F4();
    __break(1u);
    return result;
  }
  sub_100059E64();
  if (!v5 & v4) {
    BOOL v6 = v3 > v2;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    sub_100028268();
    sub_100028538();
    goto LABEL_11;
  }
  sub_10000BF1C(&qword_10017D498);
  sub_100059DEC();

  return swift_arrayInitWithCopy();
}

uint64_t sub_100056A3C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0 || (a3 + 32 * a2 > a1 ? (BOOL v3 = a1 + 32 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    sub_10000BF1C(&qword_10017E468);
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_100056B3C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0 || (a3 + 32 * a2 > a1 ? (BOOL v3 = a1 + 32 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_100056C1C(uint64_t a1, uint64_t a2)
{
  return sub_1000565B0(a1, a2);
}

uint64_t sub_100056C30(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0 || (a3 + 48 * a2 > a1 ? (BOOL v3 = a1 + 48 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    sub_10000BF1C(&qword_10017FF70);
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_100056D34()
{
  sub_100059F9C();
  if (v0 < 0)
  {
    sub_100028268();
    sub_100028548();
LABEL_11:
    uint64_t result = sub_1000282F4();
    __break(1u);
    return result;
  }
  sub_10005A008();
  if (!v4 & v3) {
    BOOL v5 = v2 > v1;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    sub_100028268();
    sub_100028538();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

uint64_t sub_100056DCC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0 || (a3 + 40 * a2 > a1 ? (BOOL v3 = a1 + 40 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    sub_10000BF1C(&qword_10017DEC0);
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_100056ED0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0 || (a3 + 40 * a2 > a1 ? (BOOL v3 = a1 + 40 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_100056FB4()
{
  sub_100059F9C();
  if (v3 < 0)
  {
    sub_100028268();
    sub_100028548();
LABEL_11:
    uint64_t result = sub_1000282F4();
    __break(1u);
    return result;
  }
  if (v2 + (v1 << 6) > v0 && v0 + (v1 << 6) > v2)
  {
    sub_100028268();
    sub_100028538();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

uint64_t sub_100057060(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100028268();
    sub_100028548();
LABEL_11:
    uint64_t result = sub_1000282F4();
    __break(1u);
    return result;
  }
  sub_100059ED0();
  if (v4 + 24 * v3 > v2 && v2 + 24 * v3 > v4)
  {
    sub_100028268();
    sub_100028538();
    goto LABEL_11;
  }
  sub_10000BF1C(v5);
  sub_100059DEC();

  return swift_arrayInitWithCopy();
}

uint64_t sub_10005711C(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100028268();
    sub_100028548();
LABEL_11:
    uint64_t result = sub_1000282F4();
    __break(1u);
    return result;
  }
  sub_100059ED0();
  if (v4 + 16 * v3 > v2 && v2 + 16 * v3 > v4)
  {
    sub_100028268();
    sub_100028538();
    goto LABEL_11;
  }
  sub_10000BF1C((uint64_t *)&unk_10017D440);
  sub_100059DEC();

  return swift_arrayInitWithCopy();
}

uint64_t sub_1000571D8()
{
  sub_100059F9C();
  if (v3 < 0)
  {
    sub_100028268();
    sub_100028548();
LABEL_11:
    uint64_t result = sub_1000282F4();
    __break(1u);
    return result;
  }
  if (v2 + 104 * v1 > v0 && v0 + 104 * v1 > v2)
  {
    sub_100028268();
    sub_100028538();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

void *sub_10005728C(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    sub_100028268();
    sub_100028548();
LABEL_11:
    uint64_t result = (void *)sub_1000282F4();
    __break(1u);
    return result;
  }
  if (&__dst[8 * a2] > __src && &__src[8 * a2] > __dst)
  {
    sub_100028268();
    sub_100028538();
    goto LABEL_11;
  }

  return memcpy(__dst, __src, 8 * a2);
}

uint64_t sub_100057338(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0 || (a3 + 8 * a2 > a1 ? (BOOL v3 = a1 + 8 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    sub_10000BF1C(&qword_10017E428);
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_100057438(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100028268();
    sub_100028548();
LABEL_11:
    uint64_t result = sub_1000282F4();
    __break(1u);
    return result;
  }
  sub_100059E64();
  if (!v5 & v4) {
    BOOL v6 = v3 > v2;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    sub_100028268();
    sub_100028538();
    goto LABEL_11;
  }
  sub_10000BF1C(&qword_10017D4A8);
  sub_100059DEC();

  return swift_arrayInitWithCopy();
}

uint64_t sub_1000574E8(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100028268();
    sub_100028548();
LABEL_11:
    uint64_t result = sub_1000282F4();
    __break(1u);
    return result;
  }
  sub_100059ED0();
  v3(0);
  sub_10005A058();
  if (!v6 & v5) {
    BOOL v7 = v4 > v2;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    sub_100028268();
    sub_100028538();
    goto LABEL_11;
  }
  sub_100059DEC();

  return swift_arrayInitWithCopy();
}

uint64_t sub_1000575B4(uint64_t a1, uint64_t a2)
{
  return sub_1000565B0(a1, a2);
}

uint64_t sub_1000575C8(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100028268();
    sub_100028548();
LABEL_11:
    uint64_t result = sub_1000282F4();
    __break(1u);
    return result;
  }
  sub_100059E64();
  if (!v6 & v5) {
    BOOL v7 = v4 > v2;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    sub_100028268();
    sub_100028538();
    goto LABEL_11;
  }
  sub_10000BF1C(v3);
  sub_100059DEC();

  return swift_arrayInitWithCopy();
}

uint64_t sub_100057674(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100028268();
    sub_100028548();
LABEL_11:
    uint64_t result = sub_1000282F4();
    __break(1u);
    return result;
  }
  sub_100059ED0();
  sub_10000BF1C(v3);
  sub_10005A058();
  if (!v6 & v5) {
    BOOL v7 = v4 > v2;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    sub_100028268();
    sub_100028538();
    goto LABEL_11;
  }
  sub_100059DEC();

  return swift_arrayInitWithCopy();
}

void sub_10005773C()
{
  sub_1000582EC();
  *unint64_t v0 = v1;
}

void sub_10005778C()
{
  sub_10005811C();
  *unint64_t v0 = v1;
}

void sub_1000577D0()
{
  sub_100058488();
  *unint64_t v0 = v1;
}

char *sub_100057828(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_100057FFC(a1, a2, a3, *v3);
  *unint64_t v3 = (uint64_t)result;
  return result;
}

void sub_100057848()
{
  sub_100058574();
  *unint64_t v0 = v1;
}

void sub_100057898()
{
  sub_10005811C();
  *unint64_t v0 = v1;
}

void sub_1000578DC()
{
  sub_1000582EC();
  *unint64_t v0 = v1;
}

void sub_10005792C()
{
  sub_1000582EC();
  *unint64_t v0 = v1;
}

void sub_10005797C()
{
  sub_100058204();
  *unint64_t v0 = v1;
}

void sub_1000579CC()
{
  sub_100058900();
  *unint64_t v0 = v1;
}

void sub_100057A30()
{
  sub_100058204();
  *unint64_t v0 = v1;
}

void sub_100057A80()
{
  sub_100058488();
  *unint64_t v0 = v1;
}

void sub_100057AD8()
{
  sub_100058488();
  *unint64_t v0 = v1;
}

void sub_100057B30()
{
  sub_100058488();
  *unint64_t v0 = v1;
}

void sub_100057B88()
{
  sub_100058488();
  *unint64_t v0 = v1;
}

void sub_100057BE0()
{
  sub_100058488();
  *unint64_t v0 = v1;
}

void sub_100057C38()
{
  sub_100058574();
  *unint64_t v0 = v1;
}

char *sub_100057C88(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_100058638(a1, a2, a3, *v3);
  *unint64_t v3 = (uint64_t)result;
  return result;
}

void sub_100057CA8()
{
  sub_100058A74();
  *unint64_t v0 = v1;
}

void sub_100057CEC()
{
  sub_100058724();
  *unint64_t v0 = v1;
}

void sub_100057D3C()
{
  sub_100058724();
  *unint64_t v0 = v1;
}

void sub_100057D8C()
{
  sub_100058204();
  *unint64_t v0 = v1;
}

char *sub_100057DDC(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_10005881C(a1, a2, a3, *v3);
  *unint64_t v3 = (uint64_t)result;
  return result;
}

void sub_100057DFC()
{
  sub_100058900();
  *unint64_t v0 = v1;
}

void sub_100057E60()
{
  sub_100058488();
  *unint64_t v0 = v1;
}

void sub_100057EB8()
{
  sub_100058900();
  *unint64_t v0 = v1;
}

void sub_100057F1C()
{
  sub_10005811C();
  *unint64_t v0 = v1;
}

void sub_100057F60()
{
  sub_100058A74();
  *unint64_t v0 = v1;
}

void sub_100057FA4()
{
  sub_100058488();
  *unint64_t v0 = v1;
}

char *sub_100057FFC(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000BF1C(&qword_10017E488);
    id v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    id v10 = (char *)_swiftEmptyArrayStorage;
  }
  objc_super v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_100020A30(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000567DC((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

void sub_1000580E8()
{
}

void sub_10005811C()
{
  sub_1000288B4();
  sub_100059E3C();
  if (v5)
  {
    sub_1000282CC();
    if (v6 != v7)
    {
      sub_100028360();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_1000282BC();
    }
  }
  sub_100028484();
  if (v3)
  {
    sub_10000BF1C(v8);
    uint64_t v9 = (const void *)sub_10005A038();
    size_t v10 = j__malloc_size(v9);
    sub_100059F68((uint64_t)(v10 - 32) / v4);
  }
  uint64_t v11 = sub_100059EF8();
  if (v2)
  {
    v1(v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    sub_1000575C8(v11, v12);
  }
  swift_release();
  sub_10000EB44();
}

void sub_1000581D0()
{
}

void sub_100058204()
{
  sub_1000288B4();
  sub_100059E3C();
  if (v6)
  {
    sub_1000282CC();
    if (v7 != v8)
    {
      sub_100028360();
      if (v7)
      {
        __break(1u);
        return;
      }
      sub_1000282BC();
    }
  }
  sub_100028484();
  if (v4)
  {
    sub_10000BF1C(v9);
    size_t v10 = (const void *)sub_10005A038();
    size_t v11 = j__malloc_size(v10);
    sub_100059F68((uint64_t)(v11 - 32) / v5);
  }
  uint64_t v12 = sub_100059EF8();
  if (v3)
  {
    v2(v12);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v12);
  }
  swift_release();
  sub_10000EB44();
}

void sub_1000582B8()
{
}

void sub_1000582EC()
{
  sub_100059E3C();
  if (v5)
  {
    sub_1000282CC();
    if (v6 != v7)
    {
      sub_100028360();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_1000282BC();
    }
  }
  sub_100028484();
  if (v4)
  {
    sub_10000BF1C(v8);
    uint64_t v9 = (const void *)swift_allocObject();
    size_t v10 = j__malloc_size(v9);
    sub_100059F68((uint64_t)(v10 - 32) / 32);
  }
  uint64_t v11 = sub_100059EF8();
  if (v3)
  {
    v2(v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v11);
  }
  swift_release();
}

void sub_1000583B0(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if (a3)
  {
    sub_1000282CC();
    if (v7 != v8)
    {
      sub_100028360();
      if (v7)
      {
        __break(1u);
        return;
      }
      sub_1000282BC();
    }
  }
  else
  {
    uint64_t v6 = a2;
  }
  uint64_t v9 = *(void *)(a4 + 16);
  if (v6 <= v9) {
    uint64_t v10 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v10 = v6;
  }
  if (v10)
  {
    sub_10000BF1C(&qword_10017DF98);
    uint64_t v11 = (char *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 48);
  }
  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v11 + 32;
  uint64_t v14 = (char *)(a4 + 32);
  if (a1)
  {
    sub_100020BBC(v14, v9, v13);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100056C30((unint64_t)v14, v9, (unint64_t)v13);
  }
  swift_release();
}

void sub_100058488()
{
  sub_1000288B4();
  char v3 = v2;
  uint64_t v5 = v4;
  char v7 = v6;
  uint64_t v9 = v8;
  char v11 = v10;
  if (v12)
  {
    sub_1000282CC();
    if (v14 != v15)
    {
      sub_100028360();
      if (v14)
      {
        __break(1u);
        return;
      }
      sub_1000282BC();
    }
  }
  else
  {
    uint64_t v13 = v0;
  }
  uint64_t v16 = *(void *)(v9 + 16);
  if (v13 <= v16) {
    uint64_t v17 = *(void *)(v9 + 16);
  }
  else {
    uint64_t v17 = v13;
  }
  if (v17)
  {
    sub_10000BF1C(v1);
    objc_super v18 = (void *)swift_allocObject();
    size_t v19 = j__malloc_size(v18);
    void v18[2] = v16;
    v18[3] = 2 * ((uint64_t)(v19 - 32) / 24);
  }
  else
  {
    objc_super v18 = &_swiftEmptyArrayStorage;
  }
  uint64_t v20 = v18 + 4;
  uint64_t v21 = v9 + 32;
  if (v11)
  {
    v7(v21, v16, v20);
    *(void *)(v9 + 16) = 0;
  }
  else
  {
    v3(v21, v16, v20, v5);
  }
  swift_release();
  sub_10000EB44();
}

void sub_100058574()
{
  sub_100059E3C();
  if (v5)
  {
    sub_1000282CC();
    if (v6 != v7)
    {
      sub_100028360();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_1000282BC();
    }
  }
  sub_100028484();
  if (v4)
  {
    sub_10000BF1C(v8);
    uint64_t v9 = (const void *)swift_allocObject();
    size_t v10 = j__malloc_size(v9);
    sub_100059F68((uint64_t)(v10 - 32) / 16);
  }
  uint64_t v11 = sub_100059EF8();
  if (v3)
  {
    v2(v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v11);
  }
  swift_release();
}

char *sub_100058638(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000BF1C(&qword_10017D478);
    size_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 104);
  }
  else
  {
    size_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  if (v5)
  {
    sub_100020C38((char *)(a4 + 32), v8, v10 + 32);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000571D8();
  }
  swift_release();
  return v10;
}

void sub_100058724()
{
  sub_100059E3C();
  if (v5)
  {
    sub_1000282CC();
    if (v6 != v7)
    {
      sub_100028360();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_1000282BC();
    }
  }
  sub_100028484();
  if (v4)
  {
    sub_10000BF1C(v8);
    uint64_t v9 = (const void *)swift_allocObject();
    size_t v10 = j__malloc_size(v9);
    sub_100059F68((uint64_t)(v10 - 32) / 8);
  }
  uint64_t v11 = sub_100059EF8();
  if (v3)
  {
    v2(v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v11);
  }
  swift_release();
}

void sub_1000587E8()
{
}

char *sub_10005881C(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000BF1C(&qword_10017D4B0);
    size_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 64);
  }
  else
  {
    size_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  if (v5)
  {
    sub_100020AA0((char *)(a4 + 32), v8, v10 + 32);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100056FB4();
  }
  swift_release();
  return v10;
}

void sub_100058900()
{
  sub_10000E990();
  char v3 = v2;
  char v5 = v4;
  uint64_t v7 = v6;
  char v9 = v8;
  if (v10)
  {
    sub_1000282CC();
    if (v12 != v13)
    {
      sub_100028360();
      if (v12)
      {
LABEL_24:
        __break(1u);
        return;
      }
      sub_1000282BC();
    }
  }
  else
  {
    uint64_t v11 = v0;
  }
  uint64_t v14 = *(void *)(v7 + 16);
  if (v11 <= v14) {
    uint64_t v15 = *(void *)(v7 + 16);
  }
  else {
    uint64_t v15 = v11;
  }
  if (!v15)
  {
    uint64_t v21 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  sub_10000BF1C(v1);
  uint64_t v16 = v5(0);
  sub_1000282DC(v16);
  uint64_t v18 = *(void *)(v17 + 72);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (void *)swift_allocObject();
  size_t v22 = j__malloc_size(v21);
  if (!v18)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v22 - v20 == 0x8000000000000000 && v18 == -1) {
    goto LABEL_23;
  }
  v21[2] = v14;
  uint64_t v21[3] = 2 * ((uint64_t)(v22 - v20) / v18);
LABEL_18:
  uint64_t v24 = *(void *)(v5(0) - 8);
  unint64_t v25 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  uint64_t v26 = v7 + v25;
  if (v9)
  {
    v3(v26, v14, (char *)v21 + v25);
    *(void *)(v7 + 16) = 0;
  }
  else
  {
    sub_1000574E8(v26, v14);
  }
  swift_release();
  sub_10000E930();
}

void sub_100058A74()
{
  sub_10000E990();
  sub_100059E3C();
  if (v6)
  {
    sub_1000282CC();
    if (v8 != v9)
    {
      sub_100028360();
      if (v8)
      {
LABEL_24:
        __break(1u);
        return;
      }
      sub_1000282BC();
    }
  }
  else
  {
    uint64_t v7 = v4;
  }
  uint64_t v10 = *(void *)(v0 + 16);
  if (v7 <= v10) {
    uint64_t v11 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v11 = v7;
  }
  if (!v11)
  {
    uint64_t v17 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  sub_10000BF1C(v5);
  uint64_t v12 = sub_10000BF1C(v2);
  sub_1000282DC(v12);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = (void *)swift_allocObject();
  size_t v18 = j__malloc_size(v17);
  if (!v14)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v18 - v16 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_23;
  }
  sub_100059F68((uint64_t)(v18 - v16) / v14);
LABEL_18:
  uint64_t v20 = *(void *)(sub_10000BF1C(v2) - 8);
  unint64_t v21 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  uint64_t v22 = v0 + v21;
  if (v3)
  {
    v1(v22, v10, (char *)v17 + v21);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    sub_100057674(v22, v10);
  }
  swift_release();
  sub_10000E930();
}

unint64_t sub_100058BD0(unint64_t result, char a2, uint64_t a3)
{
  if (a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100058BF4(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          sub_100034754(&qword_10017E3E0, &qword_10017E3D8);
          swift_bridgeObjectRetain();
          for (uint64_t i = 0; i != v7; ++i)
          {
            sub_10000BF1C(&qword_10017E3D8);
            uint64_t v10 = sub_100059834();
            id v12 = *v11;
            ((void (*)(uint64_t *, void))v10)(&v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        sub_1000565B0((a3 & 0xFFFFFFFFFFFFFF8) + 32, *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10));
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100058DB4(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          sub_100034754(&qword_10017E3D0, &qword_10017E3C8);
          swift_bridgeObjectRetain();
          for (unint64_t i = 0; i != v7; ++i)
          {
            sub_10000BF1C(&qword_10017E3C8);
            uint64_t v10 = sub_100059884(v13, i, a3);
            id v12 = *v11;
            ((void (*)(void *, void))v10)(v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        sub_1000565B0((a3 & 0xFFFFFFFFFFFFFF8) + 32, *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10));
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100058F74(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          sub_100034754(&qword_10017E4B0, &qword_10017E4A8);
          swift_bridgeObjectRetain();
          for (uint64_t i = 0; i != v7; ++i)
          {
            sub_10000BF1C(&qword_10017E4A8);
            uint64_t v10 = sub_100059834();
            id v12 = *v11;
            ((void (*)(uint64_t *, void))v10)(&v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        sub_1000565B0((a3 & 0xFFFFFFFFFFFFFF8) + 32, *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10));
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100059134(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          sub_100034754(&qword_10017E480, &qword_10017D0E0);
          swift_bridgeObjectRetain();
          for (uint64_t i = 0; i != v7; ++i)
          {
            sub_10000BF1C(&qword_10017D0E0);
            uint64_t v10 = sub_100059834();
            id v12 = *v11;
            ((void (*)(uint64_t *, void))v10)(&v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        sub_1000565B0((a3 & 0xFFFFFFFFFFFFFF8) + 32, *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10));
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000592F4(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          sub_100034754(&qword_10017E460, &qword_10017E458);
          swift_bridgeObjectRetain();
          for (uint64_t i = 0; i != v7; ++i)
          {
            sub_10000BF1C(&qword_10017E458);
            uint64_t v10 = sub_100059834();
            id v12 = *v11;
            ((void (*)(uint64_t *, void))v10)(&v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        sub_1000565B0((a3 & 0xFFFFFFFFFFFFFF8) + 32, *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10));
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000594B4(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          sub_100034754(&qword_10017E4A0, &qword_10017E498);
          swift_bridgeObjectRetain();
          for (uint64_t i = 0; i != v7; ++i)
          {
            sub_10000BF1C(&qword_10017E498);
            uint64_t v10 = sub_1000598EC();
            id v12 = *v11;
            ((void (*)(uint64_t *, void))v10)(&v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        sub_1000565B0((a3 & 0xFFFFFFFFFFFFFF8) + 32, *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10));
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100059674(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          sub_100034754(&qword_10017E430, &qword_10017E6D0);
          swift_bridgeObjectRetain();
          for (unint64_t i = 0; i != v7; ++i)
          {
            sub_10000BF1C(&qword_10017E6D0);
            uint64_t v10 = sub_100059884(v13, i, a3);
            id v12 = *v11;
            ((void (*)(void *, void))v10)(v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        sub_1000565B0((a3 & 0xFFFFFFFFFFFFFF8) + 32, *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10));
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

void (*sub_100059834())(void *)
{
  uint64_t v1 = sub_100059E84();
  uint64_t v2 = sub_100059EA4((uint64_t)v1);
  *(void *)(v0 + 32) = sub_100059980(v2, v3, v4);
  return sub_100059880;
}

void (*sub_100059884(void *a1, unint64_t a2, uint64_t a3))(void *)
{
  unint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = sub_1000599D8(v6, a2, a3);
  return sub_100059880;
}

void (*sub_1000598EC())(void *)
{
  uint64_t v1 = sub_100059E84();
  uint64_t v2 = sub_100059EA4((uint64_t)v1);
  *(void *)(v0 + 32) = sub_100059A58(v2, v3, v4);
  return sub_100059880;
}

void sub_100059938(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t (*sub_100059980(uint64_t a1, unint64_t a2, uint64_t a3))()
{
  sub_100059E00(a1, a2, a3);
  if (v4) {
    uint64_t v5 = sub_100059FF0();
  }
  else {
    uint64_t v5 = (uint64_t)sub_100059FD8();
  }
  *unint64_t v3 = v5;
  return sub_100059DE4;
}

uint64_t (*sub_1000599D8(void *a1, unint64_t a2, uint64_t a3))()
{
  unint64_t v6 = a3 & 0xC000000000000001;
  sub_100058BD0(a2, (a3 & 0xC000000000000001) == 0, a3);
  if (v6) {
    id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v7 = *(id *)(a3 + 8 * a2 + 32);
  }
  *a1 = v7;
  return sub_100059DE4;
}

void (*sub_100059A58(uint64_t a1, unint64_t a2, uint64_t a3))(id *a1)
{
  sub_100059E00(a1, a2, a3);
  if (v4) {
    uint64_t v5 = sub_100059FF0();
  }
  else {
    uint64_t v5 = (uint64_t)sub_100059FD8();
  }
  *unint64_t v3 = v5;
  return sub_100059AB0;
}

void sub_100059AB0(id *a1)
{
}

uint64_t sub_100059AB8@<X0>(void (*a1)(uint64_t *__return_ptr)@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100056298(a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_100059AE8@<X0>(void (*a1)(uint64_t *__return_ptr)@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10005625C(a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_100059B18()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100059B50@<X0>(uint64_t a1@<X8>)
{
  return sub_100059AE8(*(void (**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

uint64_t sub_100059B58@<X0>(uint64_t *a1@<X8>)
{
  return sub_100055C90(a1);
}

uint64_t sub_100059B74()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

id sub_100059BB4@<X0>(void *a1@<X8>)
{
  return sub_100055CC0(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

id sub_100059BD0@<X0>(void *a1@<X8>)
{
  return sub_100055D34(a1);
}

uint64_t sub_100059BEC@<X0>(uint64_t *a1@<X8>)
{
  return sub_100055D98(v1, a1);
}

uint64_t sub_100059C08@<X0>(uint64_t *a1@<X8>)
{
  return sub_100055DFC(a1);
}

id sub_100059C24@<X0>(void *a1@<X8>)
{
  return sub_100055F6C(a1);
}

uint64_t sub_100059C40@<X0>(uint64_t a1@<X8>)
{
  return sub_100059AB8(*(void (**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

id sub_100059C48@<X0>(void *a1@<X8>)
{
  return sub_100056050(a1);
}

ValueMetadata *type metadata accessor for LinkDaemon()
{
  return &type metadata for LinkDaemon;
}

uint64_t sub_100059C74(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LNBundleRecord();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100059CD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000BF1C(&qword_10017DEC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100059D38(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_100059D50(result, a2 & 1);
  }
  return result;
}

uint64_t sub_100059D50(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_100059D5C(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_100059D74(result, a2 & 1);
  }
  return result;
}

uint64_t sub_100059D74(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_release();
  }
  return result;
}

uint64_t sub_100059D80(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_100059D90(uint64_t a1)
{
  return a1;
}

uint64_t sub_100059DEC()
{
  return v0;
}

unint64_t sub_100059E00(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_100058BD0(a2, (a3 & 0xC000000000000001) == 0, a3);
}

void *sub_100059E84()
{
  return malloc(0x28uLL);
}

uint64_t sub_100059EA4(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t sub_100059EB8()
{
  return swift_allocObject();
}

uint64_t sub_100059EE0()
{
  return swift_allocObject();
}

uint64_t sub_100059EF8()
{
  return v0 + 32;
}

uint64_t sub_100059F08()
{
  return v0 + 32;
}

uint64_t sub_100059F30()
{
  return swift_allocObject();
}

uint64_t sub_100059F50()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

void sub_100059F68(uint64_t a1@<X8>)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = 2 * a1;
}

uint64_t sub_100059F74()
{
  return 0;
}

uint64_t sub_100059FA8(unint64_t *a1)
{
  return sub_100034754(a1, v1);
}

uint64_t sub_100059FC0()
{
  return 0;
}

id sub_100059FD8()
{
  uint64_t v3 = *(void **)(v0 + 8 * v1 + 32);
  return v3;
}

uint64_t sub_100059FF0()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t sub_10005A020@<X0>(uint64_t a1@<X8>)
{
  return a1 + 8 * *(void *)(a1 + 16) + 32;
}

uint64_t sub_10005A038()
{
  return swift_allocObject();
}

void sub_10005A080()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  id v1 = *(id *)(v0 + 32);
  NSObject.hash(into:)();
}

uint64_t sub_10005A128(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (!v4 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  BOOL v5 = a1[2] == a2[2] && a1[3] == a2[3];
  if (!v5 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  sub_10000D9D4(0, (unint64_t *)&qword_10017DD30);
  return static NSObject.== infix(_:_:)() & 1;
}

Swift::Int sub_10005A1C8()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  id v1 = *(id *)(v0 + 32);
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

Swift::Int sub_10005A270()
{
  id v1 = *(void **)(v0 + 32);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  id v2 = v1;
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

void *sub_10005A318()
{
  Table.init(_:database:)(__src, 0xD000000000000017, 0x8000000100143C20, 0, 0);
  return memcpy(&unk_10017E4E8, __src, 0xA8uLL);
}

uint64_t sub_10005A370(uint64_t a1)
{
  return sub_100035F34(a1, (uint64_t)&qword_10017E590, 0xD000000000000010, 0x8000000100143C00);
}

uint64_t sub_10005A394(uint64_t a1)
{
  return sub_100035F34(a1, (uint64_t)&qword_10017E5A8, 0xD000000000000010, 0x8000000100143090);
}

uint64_t sub_10005A3B8(uint64_t a1)
{
  return sub_100035F34(a1, (uint64_t)&qword_10017E5C0, 0x6D796E6F6E7973, 0xE700000000000000);
}

uint64_t sub_10005A3D8(uint64_t a1, uint64_t a2)
{
  if (qword_10017C338 != -1) {
    swift_once();
  }
  memcpy(__dst, &unk_10017E4E8, sizeof(__dst));
  sub_10002A390(__dst);
  if (qword_10017C348 != -1) {
    swift_once();
  }
  sub_10002A9C0((uint64_t)&qword_10017E5A8);
  __src[0] = a1;
  __src[1] = a2;
  uint64_t v4 = == infix<A>(_:_:)();
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  memcpy(v13, __dst, sizeof(v13));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.filter(_:)(v4, v6, v8, (uint64_t)__src);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  sub_10002A500(__dst);
  memcpy(v16, __src, sizeof(v16));
  memcpy(v13, __src, sizeof(v13));
  AppIntents_SQLite::Delete v17 = QueryType.delete()();
  uint64_t countAndFlagsBits = v17.template._countAndFlagsBits;
  object = v17.template._object;
  rawValue = v17.bindings._rawValue;
  sub_10002A500(v16);
  v18.template._uint64_t countAndFlagsBits = countAndFlagsBits;
  v18.template._object = object;
  v18.bindings._rawValue = rawValue;
  Connection.run(_:)(v18);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10005A5C8(_OWORD *a1, uint64_t a2)
{
  __dst[23] = a2;
  if (qword_10017C338 != -1) {
    swift_once();
  }
  memcpy(__dst, &unk_10017E4E8, 0xA8uLL);
  memcpy(__src, &unk_10017E4E8, sizeof(__src));
  sub_10002A390(__dst);
  if (qword_10017C340 != -1) {
    swift_once();
  }
  uint64_t v4 = sub_10002A9C0((uint64_t)&qword_10017E590);
  *(_OWORD *)unint64_t v25 = *a1;
  <- infix<A>(_:_:)(v4, v5, v6, (uint64_t)v25, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  sub_10000BF1C(&qword_10017E940);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013F1D0;
  if (qword_10017C350 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_10017E5C0;
  uint64_t v9 = *(void *)algn_10017E5C8;
  uint64_t v10 = qword_10017E5D0;
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  uint64_t v11 = LNStaticDeferredLocalizedString.asLocalizedStringResourceJSON(encoder:)();
  if (v2)
  {
    swift_release();
    sub_10002A66C((uint64_t)v26);
    memcpy(v25, __src, sizeof(v25));
    sub_10002A500(v25);
    *(void *)(inited + 16) = 0;
    swift_setDeallocating();
    return sub_10006F150();
  }
  else
  {
    uint64_t v14 = v11;
    uint64_t v15 = v12;
    swift_release();
    *(void *)&long long v24 = v14;
    *((void *)&v24 + 1) = v15;
    <- infix<A>(_:_:)(v8, v9, v10, (uint64_t)&v24, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
    swift_bridgeObjectRelease();
    if (qword_10017C348 != -1) {
      swift_once();
    }
    uint64_t v16 = sub_10002A9C0((uint64_t)&qword_10017E5A8);
    long long v24 = a1[1];
    <- infix<A>(_:_:)(v16, v17, v18, (uint64_t)&v24, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
    uint64_t v19 = QueryType.insert(_:_:)((uint64_t)v26);
    unint64_t v21 = v20;
    uint64_t v23 = v22;
    swift_setDeallocating();
    sub_10006F150();
    sub_10002A66C((uint64_t)v26);
    memcpy(v25, __src, sizeof(v25));
    sub_10002A500(v25);
    v29.template._uint64_t countAndFlagsBits = v19;
    v29.template._object = v21;
    v29.bindings._rawValue = v23;
    Connection.run(_:)(v29);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

_UNKNOWN **sub_10005A8F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_10017C338 != -1) {
    swift_once();
  }
  memcpy(v28, &unk_10017E4E8, sizeof(v28));
  sub_10002A390(v28);
  if (qword_10017C340 != -1) {
    swift_once();
  }
  sub_10002A9C0((uint64_t)&qword_10017E590);
  v27[0] = a3;
  v27[1] = a4;
  uint64_t v8 = == infix<A>(_:_:)();
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  if (qword_10017C348 != -1) {
    swift_once();
  }
  sub_10002A9C0((uint64_t)&qword_10017E5A8);
  v27[0] = a1;
  v27[1] = a2;
  uint64_t v13 = == infix<A>(_:_:)();
  uint64_t v16 = && infix(_:_:)(v8, v10, v12, v13, v14, v15);
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  memcpy(v26, v28, sizeof(v26));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v21 = &protocol witness table for Table;
  QueryType.filter(_:)(v16, v18, v20, (uint64_t)v27);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  sub_10002A500(v28);
  memcpy(__dst, v27, sizeof(__dst));
  void v27[3] = &type metadata for Table;
  v27[4] = &protocol witness table for Table;
  v27[0] = swift_allocObject();
  memcpy((void *)(v27[0] + 16), __dst, 0xA8uLL);
  uint64_t v22 = v30;
  Connection.prepareRowIterator(_:)(v27);
  uint64_t v23 = sub_10000E788((uint64_t)v27);
  if (!v22)
  {
    __chkstk_darwin(v23);
    swift_retain();
    RowIterator.compactMap<A>(_:)();
    unint64_t v21 = v25;
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  return v21;
}

uint64_t sub_10005AC54()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0[12])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v0[14])
  {
    swift_bridgeObjectRelease();
    if (v0[16])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 184, 7);
}

uint64_t sub_10005ACF0@<X0>(uint64_t a1@<X8>)
{
  sub_10005AD34(v3);
  return sub_10005AF8C((uint64_t)v3, a1);
}

uint64_t sub_10005AD2C@<X0>(uint64_t a1@<X8>)
{
  return sub_10005ACF0(a1);
}

uint64_t sub_10005AD34@<X0>(void *a1@<X8>)
{
  if (qword_10017C340 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  if (qword_10017C348 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  if (qword_10017C350 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  sub_10000D9D4(0, (unint64_t *)&qword_10017EDC0);
  uint64_t result = LNStaticDeferredLocalizedString.init(localizedStringResourceJSON:)();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v3;
  a1[3] = v4;
  a1[4] = result;
  return result;
}

void *sub_10005AF20@<X0>(void *(*a1)(void *__return_ptr)@<X2>, uint64_t a2@<X8>)
{
  uint64_t result = a1(v5);
  if (!v2) {
    return (void *)sub_10005AF8C((uint64_t)v5, a2);
  }
  return result;
}

void *sub_10005AF70@<X0>(uint64_t a1@<X8>)
{
  return sub_10005AF20(*(void *(**)(void *__return_ptr))(v1 + 16), a1);
}

uint64_t sub_10005AF8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000BF1C(&qword_10017E5D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void destroy for LNAppShortcutSpanSynonymRecord(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 32);
}

void *initializeWithCopy for LNAppShortcutSpanSynonymRecord(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = (void *)a2[4];
  a1[4] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v6 = v5;
  return a1;
}

void *assignWithCopy for LNAppShortcutSpanSynonymRecord(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a2[4];
  uint64_t v5 = (void *)a1[4];
  a1[4] = v4;
  id v6 = v4;

  return a1;
}

uint64_t assignWithTake for LNAppShortcutSpanSynonymRecord(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for LNAppShortcutSpanSynonymRecord(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LNAppShortcutSpanSynonymRecord(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LNAppShortcutSpanSynonymRecord()
{
  return &type metadata for LNAppShortcutSpanSynonymRecord;
}

unint64_t sub_10005B204()
{
  unint64_t result = qword_10017E5E0;
  if (!qword_10017E5E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E5E0);
  }
  return result;
}

void *sub_10005B250(void *a1)
{
  uint64_t v2 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v17 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v5 = a1;
  NSOrderedSet.makeIterator()();

  sub_10005F750();
  dispatch thunk of IteratorProtocol.next()();
  if (v21)
  {
    id v6 = _swiftEmptyArrayStorage;
    do
    {
      sub_10000E7D8(&v20, v19);
      sub_100010008((uint64_t)v19, (uint64_t)v18);
      sub_10000D9D4(0, &qword_10017DEA8);
      if (swift_dynamicCast())
      {
        id v7 = v22;
        id v8 = [v22 bundleIdentifier];

        uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v11 = v10;

        sub_10000E788((uint64_t)v19);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10001E7C0();
          id v6 = v14;
        }
        unint64_t v12 = v6[2];
        if (v12 >= v6[3] >> 1)
        {
          sub_10001E7C0();
          id v6 = v15;
        }
        _OWORD v6[2] = v12 + 1;
        uint64_t v13 = &v6[2 * v12];
        void v13[4] = v9;
        v13[5] = v11;
      }
      else
      {
        sub_10000E788((uint64_t)v19);
      }
      dispatch thunk of IteratorProtocol.next()();
    }
    while (v21);
  }
  else
  {
    id v6 = _swiftEmptyArrayStorage;
  }
  (*(void (**)(char *, uint64_t))(v17 + 8))(v4, v2);
  return v6;
}

uint64_t sub_10005B4C4()
{
  sub_10000EC58();
  *(void *)(v0 + 128) = v1;
  *(void *)(v0 + 136) = v2;
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10005B54C()
{
  uint64_t v1 = self;
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 policyWithBundleIdentifier:v2];

  v0[10] = 0;
  id v4 = [v3 connectionWithError:v0 + 10];
  v0[18] = v4;

  uint64_t v5 = (void *)v0[10];
  if (v4)
  {
    sub_10000D9D4(0, (unint64_t *)&unk_10017C800);
    id v6 = v5;
    sub_100018F38();
    if (v7)
    {
      NSString v8 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v8 = 0;
    }
    v0[19] = v8;
    v0[2] = v0;
    v0[7] = v0 + 15;
    v0[3] = sub_10005B7B4;
    uint64_t v12 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_10005B9FC;
    v0[13] = &unk_100170DE8;
    v0[14] = v12;
    [v4 fetchSuggestedActionsWithSiriLanguageCode:v8 completionHandler:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    id v9 = v5;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
}

uint64_t sub_10005B7B4()
{
  sub_10000EC58();
  sub_100010BAC();
  sub_100060250();
  *NSString v2 = v1;
  *NSString v2 = *v0;
  *(void *)(v1 + 160) = *(void *)(v3 + 48);
  sub_100060358();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_10005B8C0()
{
  sub_10006039C();
  uint64_t v1 = *(void **)(v0 + 152);

  uint64_t v2 = *(void *)(v0 + 120);
  sub_10006042C();
  return v3(v2);
}

uint64_t sub_10005B95C()
{
  sub_100013E0C();
  uint64_t v1 = (void *)v0[19];
  uint64_t v2 = (void *)v0[18];
  swift_willThrow();

  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10005B9FC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    id v4 = a3;
    return sub_1000F7C88(v3, v4);
  }
  else
  {
    sub_10000D9D4(0, &qword_10017E438);
    uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    return sub_1000F7CF0(v3, v6);
  }
}

uint64_t sub_10005BA88()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000D844(v0, qword_100181AD0);
  sub_10000BEE4(v0, (uint64_t)qword_100181AD0);
  type metadata accessor for SuggestedActionsService();
  sub_10000BF1C((uint64_t *)&unk_10017EAF0);
  String.init<A>(describing:)();
  uint64_t result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    String.init(cString:)();
    return Logger.init(subsystem:category:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10005BB30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v3[OBJC_IVAR____TtC10LinkDaemon23SuggestedActionsService_registrySource] = a1;
  uint64_t v8 = &v3[OBJC_IVAR____TtC10LinkDaemon23SuggestedActionsService_applicationSuggestionsProvider];
  *(void *)uint64_t v8 = a2;
  *((void *)v8 + 1) = a3;
  v10.receiver = v3;
  v10.super_class = ObjectType;
  return [super init];
}

void sub_10005BBA0()
{
}

uint64_t type metadata accessor for SuggestedActionsService()
{
  return self;
}

uint64_t sub_10005BC54()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_100181AE8 = result;
  unk_100181AF0 = v1;
  return result;
}

uint64_t sub_10005BC84()
{
  if (qword_10017C360 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_100181AE8;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_10005BCEC()
{
  sub_10000EC58();
  v1[5] = v2;
  v1[6] = v0;
  uint64_t v3 = type metadata accessor for Logger();
  v1[7] = v3;
  v1[8] = *(void *)(v3 - 8);
  v1[9] = swift_task_alloc();
  sub_100060358();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_10005BDA4()
{
  uint64_t v1 = qword_10017C358;
  id v2 = *(id *)(v0 + 48);
  if (v1 == -1)
  {
    uint64_t v3 = v2;
  }
  else
  {
    swift_once();
    uint64_t v3 = *(void **)(v0 + 48);
  }
  uint64_t v5 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v6 = *(void *)(v0 + 56);
  uint64_t v7 = sub_10000BEE4(v6, (uint64_t)qword_100181AD0);
  *(void *)(v0 + 80) = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);

  swift_bridgeObjectRetain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v12 = *(void *)(v0 + 64);
  uint64_t v11 = *(void *)(v0 + 72);
  uint64_t v13 = *(void *)(v0 + 56);
  if (v10)
  {
    uint64_t v23 = *(void *)(v0 + 56);
    uint64_t v22 = *(void *)(v0 + 72);
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = sub_100060438();
    *(_DWORD *)uint64_t v14 = 136315138;
    sub_10000D9D4(0, &qword_10017E6C0);
    swift_bridgeObjectRetain();
    uint64_t v15 = Array.description.getter();
    unint64_t v17 = v16;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 32) = sub_100013090(v15, v17, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Fetching suggested actions for requests: %s", v14, 0xCu);
    swift_arrayDestroy();
    sub_10000EB10();
    sub_10000EB10();

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v22, v23);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  }
  uint64_t v18 = sub_10000BF1C(&qword_10017E6D8);
  uint64_t v19 = swift_task_alloc();
  *(void *)(v0 + 88) = v19;
  *(_OWORD *)(v19 + 16) = *(_OWORD *)(v0 + 40);
  long long v20 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v20;
  void *v20 = v0;
  v20[1] = sub_10005C0C4;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 16, v18, v18, 0, 0, &unk_10017E6E8, v19, v18);
}

uint64_t sub_10005C0C4()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *id v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10005C1A8()
{
  uint64_t v11 = v0;
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain_n();
  id v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = sub_100060438();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_bridgeObjectRetain();
    sub_10000BF1C(&qword_10017E6D0);
    uint64_t v5 = Dictionary.description.getter();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 24) = sub_100013090(v5, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001B4B8();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Fetching suggested actions succeeded with result: %s", v4, 0xCu);
    swift_arrayDestroy();
    sub_10000EB10();
    sub_10000EB10();
  }
  else
  {
    sub_10001B4B8();
  }

  swift_task_dealloc();
  sub_10006042C();
  return v8(v1);
}

uint64_t sub_10005C360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[26] = a3;
  v4[27] = a4;
  v4[24] = a1;
  v4[25] = a2;
  uint64_t v5 = sub_10000BF1C((uint64_t *)&unk_10017E6F0);
  v4[28] = v5;
  v4[29] = *(void *)(v5 - 8);
  v4[30] = swift_task_alloc();
  sub_10000BF1C(&qword_10017DCC0);
  v4[31] = swift_task_alloc();
  v4[32] = swift_task_alloc();
  return _swift_task_switch(sub_10005C468, 0, 0);
}

uint64_t sub_10005C468()
{
  unint64_t v1 = *(void *)(v0 + 208);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v2 = v3;
    if (!v3) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v3 = swift_bridgeObjectRetain();
    if (!v2) {
      goto LABEL_17;
    }
  }
  if (v2 < 1)
  {
    __break(1u);
    return dispatch thunk of AsyncIteratorProtocol.next()(v3, v4, v5);
  }
  uint64_t v6 = 0;
  unint64_t v28 = v1 & 0xC000000000000001;
  uint64_t v27 = *(void *)(v0 + 208) + 32;
  uint64_t v29 = v2;
  do
  {
    if (v28) {
      id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v7 = *(id *)(v27 + 8 * v6);
    }
    uint64_t v8 = v7;
    uint64_t v10 = *(void *)(v0 + 248);
    uint64_t v9 = *(void *)(v0 + 256);
    uint64_t v11 = *(void **)(v0 + 216);
    uint64_t v12 = type metadata accessor for TaskPriority();
    sub_10000D5B0(v9, 1, 1, v12);
    uint64_t v13 = (void *)swift_allocObject();
    v13[2] = 0;
    v13[3] = 0;
    void v13[4] = v8;
    v13[5] = v11;
    sub_100013BA0(v9, v10);
    LODWORD(v9) = sub_10000D5D8(v10, 1, v12);
    id v14 = v8;
    id v15 = v11;
    uint64_t v16 = *(void *)(v0 + 248);
    if (v9 == 1)
    {
      sub_100013C08(*(void *)(v0 + 248));
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v16, v12);
    }
    if (v13[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v17 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v19 = v18;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v19 = 0;
    }
    uint64_t v20 = **(void **)(v0 + 200);
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = &unk_10017E710;
    *(void *)(v21 + 24) = v13;
    sub_10000BF1C(&qword_10017E6D8);
    uint64_t v22 = v19 | v17;
    if (v19 | v17)
    {
      *(void *)(v0 + 72) = 0;
      *(void *)(v0 + 80) = 0;
      uint64_t v22 = v0 + 72;
      *(void *)(v0 + 88) = v17;
      *(void *)(v0 + 96) = v19;
    }
    ++v6;
    uint64_t v23 = *(void *)(v0 + 256);
    *(void *)(v0 + 104) = 1;
    *(void *)(v0 + 112) = v22;
    *(void *)(v0 + 120) = v20;
    swift_task_create();

    swift_release();
    sub_100013C08(v23);
  }
  while (v29 != v6);
LABEL_17:
  swift_bridgeObjectRelease();
  sub_10000BF1C(&qword_10017E6D8);
  TaskGroup.makeAsyncIterator()();
  *(void *)(v0 + 264) = &_swiftEmptyDictionarySingleton;
  unint64_t v24 = sub_10005FD24();
  uint64_t v25 = (void *)swift_task_alloc();
  *(void *)(v0 + 272) = v25;
  *uint64_t v25 = v0;
  v25[1] = sub_10005C7E8;
  uint64_t v4 = *(void *)(v0 + 224);
  uint64_t v3 = v0 + 184;
  unint64_t v5 = v24;
  return dispatch thunk of AsyncIteratorProtocol.next()(v3, v4, v5);
}

uint64_t sub_10005C7E8()
{
  sub_10006039C();
  sub_100010BAC();
  uint64_t v3 = v2;
  sub_100060250();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_100010BC4();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v8 = v3[29];
    uint64_t v7 = v3[30];
    uint64_t v9 = v3[28];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }
  sub_100060358();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_10005C8F0()
{
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[33];
  if (!v1)
  {
    id v45 = (void *)v0[24];
    (*(void (**)(void, void))(v0[29] + 8))(v0[30], v0[28]);
    swift_bridgeObjectRelease();
    *id v45 = v2;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EB74();
    sub_1000604B8();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v59 = (uint64_t)(v0 + 19);
  uint64_t v60 = (uint64_t)(v0 + 16);
  uint64_t v55 = (uint64_t)(v0 + 23);
  uint64_t v64 = v0 + 22;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v0[22] = v2;
  sub_100027624(v1, sub_10005FD78, 0);
  uint64_t v61 = v0[2];
  uint64_t v62 = v0[8];
  uint64_t v63 = v0[5];
  unint64_t v4 = v0[6];
  uint64_t v57 = v0[3];
  uint64_t v58 = (void (*)(uint64_t))v0[7];
  uint64_t v53 = v0[4];
  uint64_t v54 = v1;
  int64_t v56 = (unint64_t)(v53 + 64) >> 6;
  uint64_t v5 = (void *)v0[33];
  swift_bridgeObjectRetain();
  while (1)
  {
    if (v4)
    {
      unint64_t v6 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      unint64_t v7 = v6 | (v63 << 6);
    }
    else
    {
      int64_t v8 = v63 + 1;
      if (__OFADD__(v63, 1)) {
        goto LABEL_48;
      }
      if (v8 >= v56) {
        goto LABEL_40;
      }
      unint64_t v9 = *(void *)(v57 + 8 * v8);
      uint64_t v10 = v63 + 1;
      if (!v9)
      {
        sub_10006051C();
        if (v11 == v12) {
          goto LABEL_40;
        }
        sub_100060510();
        if (!v9)
        {
          sub_10006051C();
          if (v11 == v12) {
            goto LABEL_40;
          }
          sub_100060510();
          if (!v9)
          {
            sub_10006051C();
            if (v11 == v12) {
              goto LABEL_40;
            }
            sub_100060510();
            if (!v9)
            {
              sub_10006051C();
              if (v11 == v12) {
                goto LABEL_40;
              }
              sub_100060510();
              if (!v9)
              {
                uint64_t v10 = v13 + 5;
                if (v13 + 5 >= v56) {
                  goto LABEL_40;
                }
                unint64_t v9 = *(void *)(v57 + 8 * v10);
                if (!v9)
                {
                  int64_t v14 = v63 + 7;
                  while (v14 < v56)
                  {
                    unint64_t v9 = *(void *)(v57 + 8 * v14++);
                    if (v9)
                    {
                      uint64_t v10 = v14 - 1;
                      goto LABEL_26;
                    }
                  }
LABEL_40:
                  swift_bridgeObjectRelease();
                  sub_100027664();
                  swift_release();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v0[33] = v5;
                  sub_10005FD24();
                  uint64_t v48 = (void *)swift_task_alloc();
                  v0[34] = v48;
                  *uint64_t v48 = v0;
                  v48[1] = sub_10005C7E8;
                  sub_1000604B8();
                  return dispatch thunk of AsyncIteratorProtocol.next()();
                }
              }
            }
          }
        }
      }
LABEL_26:
      unint64_t v4 = (v9 - 1) & v9;
      unint64_t v7 = __clz(__rbit64(v9)) + (v10 << 6);
      uint64_t v63 = v10;
    }
    id v15 = (void *)(*(void *)(v61 + 48) + 16 * v7);
    uint64_t v16 = v15[1];
    uint64_t v17 = *(void *)(*(void *)(v61 + 56) + 8 * v7);
    v0[19] = *v15;
    v0[20] = v16;
    v0[21] = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v58(v59);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v19 = v0[16];
    uint64_t v18 = v0[17];
    uint64_t v20 = v0[18];
    unint64_t v28 = sub_100021098(v19, v18, v21, v22, v23, v24, v25, v26, v52, v53, v54, v55, v56, v57, (uint64_t)v58, v59, v60, v61, v62,
            v63,
            (uint64_t)v64,
            v65,
            v66,
            v67,
            v68,
            v69);
    uint64_t v29 = v5[2];
    BOOL v30 = (v27 & 1) == 0;
    uint64_t v31 = v29 + v30;
    if (__OFADD__(v29, v30))
    {
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
      return dispatch thunk of AsyncIteratorProtocol.next()();
    }
    char v32 = v27;
    if (v5[3] >= v31)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10000BF1C(&qword_10017E728);
        _NativeDictionary.copy()();
      }
      goto LABEL_33;
    }
    sub_1000229B4(v31, isUniquelyReferenced_nonNull_native & 1);
    uint64_t v39 = sub_100021098(v19, v18, v33, v34, v35, v36, v37, v38, v52, v53, v54, v55, v56, v57, (uint64_t)v58, v59, v60, v61, v62,
            v63,
            (uint64_t)v64,
            v65,
            v66,
            v67,
            v68,
            v69);
    if ((v32 & 1) != (v40 & 1)) {
      break;
    }
    unint64_t v28 = v39;
LABEL_33:
    uint64_t v5 = (void *)*v64;
    if (v32)
    {
      swift_bridgeObjectRelease();
      uint64_t v41 = v5[7];
      swift_bridgeObjectRelease();
      *(void *)(v41 + 8 * v28) = v20;
      char isUniquelyReferenced_nonNull_native = 1;
    }
    else
    {
      v5[(v28 >> 6) + 8] |= 1 << v28;
      uint64_t v42 = (uint64_t *)(v5[6] + 16 * v28);
      uint64_t *v42 = v19;
      v42[1] = v18;
      *(void *)(v5[7] + 8 * v28) = v20;
      uint64_t v43 = v5[2];
      BOOL v12 = __OFADD__(v43, 1);
      uint64_t v44 = v43 + 1;
      if (v12) {
        goto LABEL_47;
      }
      v5[2] = v44;
      char isUniquelyReferenced_nonNull_native = 1;
    }
  }
  sub_1000604B8();
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_10005CD8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[14] = a4;
  v5[15] = a5;
  v5[13] = a1;
  return _swift_task_switch(sub_10005CDB0, 0, 0);
}

uint64_t sub_10005CDB0()
{
  sub_10000EC58();
  if ([(id)v0[14] isOnScreen])
  {
    uint64_t v1 = (void *)swift_task_alloc();
    v0[16] = (uint64_t)v1;
    *uint64_t v1 = v0;
    v1[1] = sub_10005CEC0;
    uint64_t v2 = v0[14];
    return sub_10005D230(v2);
  }
  else
  {
    unint64_t v4 = (void *)swift_task_alloc();
    v0[17] = (uint64_t)v4;
    *unint64_t v4 = v0;
    v4[1] = sub_10005D078;
    uint64_t v5 = v0[14];
    return sub_10005D81C(v5);
  }
}

uint64_t sub_10005CEC0()
{
  sub_10000EC58();
  sub_100010BAC();
  sub_100060250();
  *uint64_t v2 = v1;
  *(void *)(v1 + 72) = v0;
  *(void *)(v1 + 80) = v3;
  uint64_t v4 = *v0;
  sub_100010BC4();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  sub_100060358();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_10005CF88()
{
  sub_100013E0C();
  uint64_t v1 = v0[10];
  uint64_t v3 = (uint64_t *)v0[13];
  uint64_t v2 = (void *)v0[14];
  sub_10000BF1C(&qword_10017E738);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013EF20;
  id v5 = [v2 bundleIdentifier];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  *(void *)(inited + 32) = v6;
  *(void *)(inited + 40) = v8;
  *(void *)(inited + 48) = v1;
  sub_10000BF1C(&qword_10017E6D0);
  *uint64_t v3 = Dictionary.init(dictionaryLiteral:)();
  sub_10000EB74();
  return v9();
}

uint64_t sub_10005D078()
{
  sub_10000EC58();
  sub_100010BAC();
  sub_100060250();
  *uint64_t v2 = v1;
  *(void *)(v1 + 88) = v0;
  *(void *)(v1 + 96) = v3;
  uint64_t v4 = *v0;
  sub_100010BC4();
  *id v5 = v4;
  swift_task_dealloc();
  sub_100060358();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_10005D140()
{
  sub_100013E0C();
  uint64_t v2 = (uint64_t *)v0[13];
  uint64_t v1 = (void *)v0[14];
  uint64_t v3 = v0[12];
  sub_10000BF1C(&qword_10017E738);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013EF20;
  id v5 = [v1 bundleIdentifier];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  *(void *)(inited + 32) = v6;
  *(void *)(inited + 40) = v8;
  *(void *)(inited + 48) = v3;
  sub_10000BF1C(&qword_10017E6D0);
  *uint64_t v2 = Dictionary.init(dictionaryLiteral:)();
  sub_10000EB74();
  return v9();
}

uint64_t sub_10005D230(uint64_t a1)
{
  v2[8] = a1;
  v2[9] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  return _swift_task_switch(sub_10005D2F0, 0, 0);
}

uint64_t sub_10005D2F0()
{
  sub_100013E0C();
  uint64_t v1 = *(int **)(*(void *)(v0 + 72)
               + OBJC_IVAR____TtC10LinkDaemon23SuggestedActionsService_applicationSuggestionsProvider);
  id v2 = [*(id *)(v0 + 64) bundleIdentifier];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  *(void *)(v0 + 104) = v5;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)v1 + *v1);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10005D40C;
  return v8(v3, v5);
}

uint64_t sub_10005D40C()
{
  sub_10006039C();
  uint64_t v3 = v2;
  sub_100010BAC();
  uint64_t v5 = v4;
  sub_100060250();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  sub_100010BC4();
  *uint64_t v8 = v7;
  *(void *)(v5 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_100060358();
    return _swift_task_switch(v9, v10, v11);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    BOOL v12 = *(uint64_t (**)(uint64_t))(v7 + 8);
    return v12(v3);
  }
}

#error "10005D6C4: call analysis failed (funcsize=180)"

uint64_t sub_10005D81C(uint64_t a1)
{
  v2[8] = a1;
  v2[9] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  return _swift_task_switch(sub_10005D8DC, 0, 0);
}

uint64_t sub_10005D8DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_log_t log, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  sub_1000602F4();
  sub_100060494();
  uint64_t v31 = sub_100070E48();
  *(void *)(v30 + 104) = v31;
  uint64_t v32 = *(void *)(v31 + OBJC_IVAR____TtC10LinkDaemon8Registry_ready);
  *(void *)(v30 + 112) = v32;
  if (v32)
  {
    swift_retain();
    uint64_t v33 = (void *)swift_task_alloc();
    *(void *)(v30 + 120) = v33;
    *uint64_t v33 = v30;
    v33[1] = sub_10005DD10;
    sub_100060234();
    return Task<>.value.getter(v34, v35, v36, v37, v38, v39, v40, v41, a9, a10, a11, log, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22);
  }
  else
  {
    [*(id *)(v30 + 64) bundleIdentifier];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_10006053C();
    *(void *)(v30 + 128) = 0;
    uint64_t v42 = (void *)swift_task_alloc();
    *(void *)(v30 + 136) = v42;
    void *v42 = v30;
    v42[1] = sub_10005DEAC;
    sub_1000603BC();
    sub_100060234();
    return sub_1000B4E58(v43, v44);
  }
}

uint64_t sub_10005DD10()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10005DDF4()
{
  sub_10006039C();
  [*(id *)(v1 + 64) bundleIdentifier];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_10006053C();
  *(void *)(v1 + 128) = v0;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 136) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10005DEAC;
  uint64_t v3 = sub_1000603BC();
  return sub_1000B4E58(v3, v4);
}

uint64_t sub_10005DEAC()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v3 = v2;
  sub_100060250();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 144) = v5;
  *(void *)(v3 + 152) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_bridgeObjectRelease();
  }
  sub_100060358();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_10005DF98()
{
  sub_10006039C();
  [*(id *)(v1 + 64) bundleIdentifier];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_10006053C();
  *(void *)(v1 + 160) = v0;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 168) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10005E050;
  uint64_t v3 = sub_1000603BC();
  return sub_1000B5058(v3, v4);
}

uint64_t sub_10005E050()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v3 = v2;
  sub_100060250();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 176) = v5;
  *(void *)(v3 + 184) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_bridgeObjectRelease();
  }
  sub_100060358();
  return _swift_task_switch(v6, v7, v8);
}

void sub_10005E13C()
{
  unint64_t v4 = v2[22];
  if (v4 >> 62)
  {
    sub_100060560();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    uint64_t v0 = _swiftEmptyArrayStorage;
    goto LABEL_14;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v5) {
    goto LABEL_13;
  }
LABEL_3:
  sub_1000604F8();
  sub_100057BE0();
  if (v5 < 0)
  {
    __break(1u);
    return;
  }
  uint64_t v1 = 0;
  sub_100060528();
  do
  {
    if (v3) {
      id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v6 = *(id *)(v19 + 8 * v1);
    }
    id v7 = v6;
    id v8 = [v6 identifier];
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    unint64_t v13 = v0[2];
    unint64_t v12 = v0[3];
    if (v13 >= v12 >> 1)
    {
      sub_1000604A0(v12);
      sub_100057BE0();
    }
    ++v1;
    v0[2] = v13 + 1;
    uint64_t v14 = &v0[3 * v13];
    v14[4] = v9;
    uint64_t v14[5] = v11;
    v14[6] = v7;
  }
  while (v5 != v1);
  swift_bridgeObjectRelease();
LABEL_14:
  id v15 = (void *)v2[8];
  v2[24] = sub_1000865C8((uint64_t)v0);
  [v15 bundleIdentifier];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_10006053C();
  v2[25] = v1;
  uint64_t v16 = (void *)swift_task_alloc();
  v2[26] = v16;
  *uint64_t v16 = v2;
  v16[1] = sub_10005E328;
  uint64_t v17 = sub_1000603BC();
  sub_1000B5144(v17, v18);
}

uint64_t sub_10005E328()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v3 = v2;
  sub_100060250();
  *unint64_t v4 = v3;
  *unint64_t v4 = *v1;
  *(void *)(v3 + 216) = v5;
  *(void *)(v3 + 224) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_bridgeObjectRelease();
  }
  sub_100060358();
  return _swift_task_switch(v6, v7, v8);
}

void sub_10005E414()
{
  unint64_t v3 = v1[27];
  if (v3 >> 62)
  {
    sub_100060560();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    uint64_t v0 = _swiftEmptyArrayStorage;
    goto LABEL_14;
  }
  uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v4) {
    goto LABEL_13;
  }
LABEL_3:
  sub_1000604F8();
  sub_100057A80();
  if (v4 < 0)
  {
    __break(1u);
    return;
  }
  uint64_t v5 = 0;
  uint64_t v6 = v1;
  sub_100060528();
  do
  {
    if (v2) {
      id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v7 = *(id *)(v27 + 8 * v5);
    }
    id v8 = v7;
    id v9 = [v7 identifier];
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;

    unint64_t v14 = v0[2];
    unint64_t v13 = v0[3];
    if (v14 >= v13 >> 1)
    {
      sub_1000604A0(v13);
      sub_100057A80();
    }
    ++v5;
    v0[2] = v14 + 1;
    id v15 = &v0[3 * v14];
    v15[4] = v10;
    v15[5] = v12;
    void v15[6] = v8;
  }
  while (v4 != v5);
  uint64_t v1 = v6;
  swift_bridgeObjectRelease();
LABEL_14:
  uint64_t v16 = v1[24];
  uint64_t v17 = (void *)v1[8];
  uint64_t v18 = sub_1000866B0((uint64_t)v0);
  sub_10000D9D4(0, (unint64_t *)&unk_10017C800);
  uint64_t v19 = sub_100018F38();
  v1[29] = sub_10005FE9C(v19, v20, (uint64_t)v18, v16);
  id v21 = [v17 bundleIdentifier];
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = v23;

  v1[30] = v24;
  uint64_t v25 = (void *)swift_task_alloc();
  v1[31] = v25;
  *uint64_t v25 = v1;
  v25[1] = sub_10005E658;
  uint64_t v26 = v1[18];
  sub_100086864(v26, v22, v24);
}

uint64_t sub_10005E658()
{
  sub_100013E0C();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_100010BC4();
  *uint64_t v5 = v4;
  *uint64_t v5 = *v1;
  *(void *)(v4 + 256) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 264) = v3;
  }
  sub_100060358();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_10005E7BC()
{
  sub_10000EC58();
  uint64_t v1 = *(void **)(v0 + 104);
  swift_release();

  uint64_t v2 = *(void *)(v0 + 264);
  swift_task_dealloc();
  sub_10006042C();
  return v3(v2);
}

#error "10005E904: call analysis failed (funcsize=115)"

#error "10005EAF4: call analysis failed (funcsize=118)"

#error "10005ECEC: call analysis failed (funcsize=120)"

#error "10005EED0: call analysis failed (funcsize=115)"

uint64_t sub_10005F064(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  sub_10000D9D4(0, &qword_10017E6C0);
  v3[4] = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  a3;
  uint64_t v5 = (void *)swift_task_alloc();
  void v3[5] = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_10005F14C;
  return sub_10005BCEC();
}

uint64_t sub_10005F14C()
{
  sub_10006039C();
  sub_100010BAC();
  uint64_t v2 = *(void (***)(void, void, void))(v1 + 24);
  uint64_t v3 = *(void **)(v1 + 16);
  uint64_t v4 = *v0;
  sub_100010BC4();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  sub_10000BF1C(&qword_10017E6D0);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  ((void (**)(void, Class, void))v2)[2](v2, isa, 0);

  _Block_release(v2);
  sub_10000EB74();
  return v7();
}

uint64_t sub_10005F2B8()
{
  return sub_10005BC84();
}

uint64_t sub_10005F2D0(void *a1, id a2)
{
  id v3 = [a2 identifier];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;
  if (v4 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v6 == v7)
  {
    swift_bridgeObjectRelease_n();
LABEL_17:

    sub_10000BF1C((uint64_t *)&unk_10017E690);
    *(_OWORD *)(swift_initStackObject() + 16) = xmmword_10013F540;
    sub_100060554();
    v22[5] = v23;
    v22[6] = v24;
    v22[7] = 0x8000000100143D00;
    v22[8] = v24 + 5;
    sub_100060554();
    *(void *)(v25 + 72) = v26;
    *(void *)(v25 + 80) = v27;
    sub_100060554();
    *(void *)(v29 + 88) = v30;
    *(void *)(v29 + 96) = v28 | 2;
    sub_100060554();
    *(void *)(v31 + 104) = v32;
    *(void *)(v31 + 32) = v33 | 1;
    uint64_t v34 = v31 + 32;
    id v35 = [a1 effectiveBundleIdentifiers];
    uint64_t v36 = sub_10005B250(v35);

    uint64_t v37 = 0;
    uint64_t v38 = v36[2];
    do
    {
      if (v38)
      {
        uint64_t v39 = (uint64_t *)(v34 + 16 * v37);
        uint64_t v40 = *v39;
        uint64_t v41 = v39[1];
        BOOL v42 = v36[4] == *v39 && v36[5] == v41;
        if (v42 || (sub_100060580() & 1) != 0)
        {
LABEL_37:
          swift_setDeallocating();
          sub_10006F1EC();
          swift_bridgeObjectRelease();
          goto LABEL_40;
        }
        if (v38 != 1)
        {
          uint64_t v43 = v36 + 7;
          uint64_t v44 = 1;
          while (1)
          {
            uint64_t v45 = v44 + 1;
            if (__OFADD__(v44, 1)) {
              break;
            }
            BOOL v46 = *(v43 - 1) == v40 && *v43 == v41;
            if (v46 || (sub_100060580() & 1) != 0) {
              goto LABEL_37;
            }
            v43 += 2;
            ++v44;
            if (v45 == v38) {
              goto LABEL_33;
            }
          }
          __break(1u);
          goto LABEL_47;
        }
      }
LABEL_33:
      ++v37;
    }
    while (v37 != 5);
    swift_setDeallocating();
    sub_10006F1EC();
    if (qword_10017C358 == -1) {
      goto LABEL_35;
    }
LABEL_47:
    swift_once();
LABEL_35:
    uint64_t v47 = type metadata accessor for Logger();
    sub_10000BEE4(v47, (uint64_t)qword_100181AD0);
    swift_bridgeObjectRetain();
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc();
      uint64_t v55 = sub_100060438();
      *(_DWORD *)uint64_t v50 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v51 = Array.description.getter();
      unint64_t v53 = v52;
      swift_bridgeObjectRelease();
      sub_100013090(v51, v53, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_10001B4B8();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Skipping 'open' suggestions for app: %s (not yet supported)", v50, 0xCu);
      swift_arrayDestroy();
      sub_10000EB10();
      sub_10000EB10();
    }
    else
    {

      sub_10001B4B8();
    }
    char v21 = 0;
    return v21 & 1;
  }
  char v9 = sub_100060580();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v9) {
    goto LABEL_17;
  }
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;
  if (v10 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v12 == v13)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
    {
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v18 = v17;
      if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v18 == v19) {
        char v21 = 1;
      }
      else {
        char v21 = sub_100060580();
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v21 & 1;
    }
  }

LABEL_40:
  char v21 = 1;
  return v21 & 1;
}

unint64_t sub_10005F750()
{
  unint64_t result = qword_10017E6A0;
  if (!qword_10017E6A0)
  {
    type metadata accessor for NSFastEnumerationIterator();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E6A0);
  }
  return result;
}

uint64_t sub_10005F7A0()
{
  _Block_release(*(const void **)(v0 + 24));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10005F7E8()
{
  sub_10006039C();
  uint64_t v2 = v0[2];
  id v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100013DD8;
  uint64_t v6 = (uint64_t (*)(int, void *, void *))((char *)&dword_10017E6B0 + dword_10017E6B0);
  return v6(v2, v3, v4);
}

uint64_t sub_10005F898()
{
  sub_10006039C();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = *(void *)(v0 + 16);
  uint64_t v5 = *(void *)(v0 + 24);
  uint64_t v7 = swift_task_alloc();
  uint64_t v8 = (void *)sub_100013DFC(v7);
  *uint64_t v8 = v9;
  v8[1] = sub_100013DD8;
  return sub_10005C360(v4, v2, v6, v5);
}

uint64_t sub_10005F940(uint64_t a1, int *a2)
{
  *(void *)(v2 + 24) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 32) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_10005FA20;
  return v5(v2 + 16);
}

uint64_t sub_10005FA20()
{
  sub_10006039C();
  uint64_t v1 = *v0;
  uint64_t v2 = *(void **)(*v0 + 24);
  uint64_t v3 = *v0;
  sub_100010BC4();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  *uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v5 = *(uint64_t (**)(void))(v3 + 8);
  return v5();
}

uint64_t sub_10005FB44()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10005FB8C()
{
  sub_100013E0C();
  uint64_t v2 = v1;
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v6 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v7 = swift_task_alloc();
  uint64_t v8 = (void *)sub_100013DFC(v7);
  *uint64_t v8 = v9;
  v8[1] = sub_100011814;
  return sub_10005CD8C(v2, v3, v4, v6, v5);
}

uint64_t sub_10005FC40()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10005FC78()
{
  sub_10006039C();
  uint64_t v2 = v1;
  uint64_t v3 = *(int **)(v0 + 16);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_100013DFC(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_100011814;
  uint64_t v7 = (uint64_t (*)(uint64_t, int *))((char *)&dword_10017E708 + dword_10017E708);
  return v7(v2, v3);
}

unint64_t sub_10005FD24()
{
  unint64_t result = qword_10017E720;
  if (!qword_10017E720)
  {
    sub_10000BFDC((uint64_t *)&unk_10017E6F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E720);
  }
  return result;
}

uint64_t sub_10005FD78@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100028264(&v6, *a1, a1[1], a1[2]);
  uint64_t v4 = v6;
  *a2 = result;
  a2[1] = v5;
  a2[2] = v4;
  return result;
}

uint64_t sub_10005FDBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = &type metadata for SiriDiscoverabilityClosedAppSuggestionStrategy;
  unint64_t v14 = &off_100170E88;
  uint64_t v10 = (void *)swift_allocObject();
  *(void *)&long long v12 = v10;
  v10[2] = a1;
  v10[3] = a2;
  void v10[4] = a3;
  v10[5] = a4;
  sub_10000BF1C(&qword_10017E748);
  *(void *)(a5 + 56) = Dictionary.init(dictionaryLiteral:)();
  *(void *)(a5 + 64) = Dictionary.init(dictionaryLiteral:)();
  sub_10000D698(&v12, a5 + 16);
  return a5;
}

uint64_t sub_10005FE9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14[3] = &type metadata for SiriDiscoverabilityClosedAppSuggestionStrategy;
  v14[4] = &off_100170E88;
  uint64_t v8 = (void *)swift_allocObject();
  v14[0] = v8;
  void v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  type metadata accessor for SuggestedActionsGenerator();
  uint64_t v9 = swift_allocObject();
  uint64_t v10 = (void *)sub_10005FFB0((uint64_t)v14, (uint64_t)&type metadata for SiriDiscoverabilityClosedAppSuggestionStrategy);
  initializeWithCopy for SiriDiscoverabilityClosedAppSuggestionStrategy(v13, v10);
  uint64_t v11 = sub_10005FDBC(v13[0], v13[1], v13[2], v13[3], v9);
  sub_10000E788((uint64_t)v14);
  return v11;
}

uint64_t sub_10005FF68()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10005FFB0(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t destroy for SiriDiscoverabilityClosedAppSuggestionStrategy()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for SiriDiscoverabilityClosedAppSuggestionStrategy(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for SiriDiscoverabilityClosedAppSuggestionStrategy(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SiriDiscoverabilityClosedAppSuggestionStrategy(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SiriDiscoverabilityClosedAppSuggestionStrategy(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SiriDiscoverabilityClosedAppSuggestionStrategy(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SiriDiscoverabilityClosedAppSuggestionStrategy()
{
  return &type metadata for SiriDiscoverabilityClosedAppSuggestionStrategy;
}

uint64_t sub_1000601FC()
{
  return swift_slowAlloc();
}

uint64_t sub_10006025C(uint64_t a1, uint64_t a2)
{
  sub_10000BEE4(v3, a2);
  return v2;
}

uint64_t sub_10006028C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return a17;
}

uint64_t sub_1000602A4()
{
  *(_WORD *)(v0 + 12) = 2080;
  return swift_getErrorValue();
}

uint64_t sub_1000602CC()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void sub_100060310(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_log_t log, uint64_t a14, int a15, os_log_type_t type)
{
  _os_log_impl(a1, log, type, a4, v16, 0x16u);
}

uint64_t sub_100060334(uint64_t a1)
{
  *(void *)(v1 + 56) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

id sub_100060364(float a1)
{
  *uint64_t v2 = a1;
  *(void *)(v1 + 40) = v3;
  return v3;
}

uint64_t sub_1000603A8()
{
  return v0;
}

uint64_t sub_1000603BC()
{
  return v0;
}

uint64_t sub_1000603D0()
{
  return swift_slowAlloc();
}

uint64_t sub_1000603F0()
{
  return swift_arrayDestroy();
}

BOOL sub_100060410(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100060438()
{
  return swift_slowAlloc();
}

uint64_t sub_100060450()
{
  return swift_arrayDestroy();
}

uint64_t sub_10006047C()
{
  return Error.localizedDescription.getter();
}

BOOL sub_1000604A0@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_1000604D4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  return sub_100013090(a1, a2, (uint64_t *)va);
}

uint64_t sub_1000604F8()
{
  return 0;
}

void sub_10006053C()
{
}

uint64_t sub_100060560()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100060580()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_100060598()
{
  return swift_errorRetain();
}

void sub_1000605B0()
{
  sub_100061F10();
  if (v0 <= 0x3F) {
    swift_initClassMetadata2();
  }
}

uint64_t sub_100060670()
{
  *(void *)(v1 + 64) = v0;
  *(void *)(v1 + 72) = *v0;
  return sub_1000624EC((uint64_t)sub_1000606B4, (uint64_t)v0);
}

uint64_t sub_1000606B4()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = *(void **)(v1 + 112);
  swift_unknownObjectWeakInit();
  uint64_t v5 = swift_allocObject();
  swift_weakInit();
  uint64_t v6 = (void *)swift_allocObject();
  _OWORD v6[2] = *(void *)(v2 + 80);
  v6[3] = *(void *)(v2 + 88);
  v6[4] = v5;
  v6[5] = v3;
  v0[6] = sub_100062280;
  v0[7] = v6;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_100061BB0;
  v0[5] = &unk_100171098;
  uint64_t v7 = _Block_copy(v0 + 2);
  swift_retain();
  swift_release();
  [v4 scheduleWithBlock:v7];
  _Block_release(v7);
  swift_release();
  sub_10000EB74();
  return v8();
}

uint64_t sub_10006082C(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v41 = a6;
  uint64_t v10 = sub_10000BF1C(&qword_10017DCC0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return a1(1);
  }
  uint64_t v18 = Strong;
  uint64_t v39 = v14;
  uint64_t v40 = v13;
  v45[0] = a5;
  swift_getMetatypeMetadata();
  uint64_t v42 = String.init<A>(describing:)();
  unint64_t v20 = v19;
  v45[0] = a5;
  sub_10000BF1C((uint64_t *)&unk_10017EAF0);
  String.init<A>(describing:)();
  uint64_t result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    uint64_t v38 = a4 + 16;
    String.init(cString:)();
    Logger.init(subsystem:category:)();
    swift_bridgeObjectRetain_n();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc();
      unint64_t v43 = v20;
      uint64_t v25 = v24;
      uint64_t v26 = swift_slowAlloc();
      uint64_t v37 = a2;
      uint64_t v35 = v26;
      v45[0] = v26;
      *(_DWORD *)uint64_t v25 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v44 = sub_100013090(v42, v43, v45);
      uint64_t v36 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v25 + 12) = 2080;
      uint64_t v27 = (*(uint64_t (**)(uint64_t))(v41 + 8))(a5);
      uint64_t v44 = sub_100013090(v27, v28, v45);
      a1 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "%s started XPC activity \"%s\"", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      a2 = v37;
      swift_slowDealloc();
      unint64_t v20 = v43;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v39 + 8))(v16, v40);
    swift_beginAccess();
    uint64_t v29 = (void *)swift_unknownObjectWeakLoadStrong();
    if (v29 && (uint64_t v30 = v29, v31 = [v29 shouldDefer], v30, v31))
    {
      swift_bridgeObjectRelease();
      a1(2);
    }
    else
    {
      uint64_t v32 = type metadata accessor for TaskPriority();
      sub_10000D5B0((uint64_t)v12, 1, 1, v32);
      uint64_t v33 = (void *)swift_allocObject();
      uint64_t v33[2] = 0;
      void v33[3] = 0;
      uint64_t v34 = v42;
      v33[4] = v18;
      v33[5] = v34;
      v33[6] = v20;
      v33[7] = a1;
      v33[8] = a2;
      swift_retain();
      sub_100011AA4((uint64_t)v12, (uint64_t)&unk_10017E840, (uint64_t)v33);
    }
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100060C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[27] = a7;
  v8[28] = a8;
  v8[25] = a5;
  v8[26] = a6;
  v8[24] = a4;
  uint64_t v9 = *a4;
  v8[29] = *a4;
  uint64_t v10 = type metadata accessor for Logger();
  v8[30] = v10;
  v8[31] = *(void *)(v10 - 8);
  v8[32] = swift_task_alloc();
  v8[33] = swift_task_alloc();
  v8[34] = swift_task_alloc();
  v8[35] = swift_task_alloc();
  uint64_t v11 = *(void *)(v9 + 80);
  v8[36] = v11;
  v8[37] = *(void *)(v11 - 8);
  v8[38] = swift_task_alloc();
  return _swift_task_switch(sub_100060E14, 0, 0);
}

void sub_100060E14()
{
  sub_1000A8B94(v0[38]);
  v0[39] = *(void *)(v0[29] + 88);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[40] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100061264;
  sub_1000604B8();
  __asm { BRAA            X3, X16 }
}

uint64_t sub_100061264(char a1)
{
  sub_100010BAC();
  uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_100010BC4();
  *uint64_t v7 = v6;
  *(void *)(v5 + 328) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v8 = sub_10006180C;
  }
  else
  {
    *(unsigned char *)(v5 + 336) = a1;
    uint64_t v8 = sub_100061360;
  }
  return _swift_task_switch(v8, 0, 0);
}

uint64_t sub_100061360()
{
  uint64_t v62 = v0;
  uint64_t v2 = *(void *)(v0 + 288);
  if ((*(unsigned char *)(v0 + 336) & 1) == 0)
  {
    *(void *)(v0 + 168) = v2;
    sub_10000BF1C((uint64_t *)&unk_10017EAF0);
    String.init<A>(describing:)();
    uint64_t result = LNLogSubsystem;
    if (LNLogSubsystem)
    {
      uint64_t v4 = *(void *)(v0 + 280);
      String.init(cString:)();
      sub_100062524();
      swift_bridgeObjectRetain_n();
      uint64_t v5 = Logger.logObject.getter();
      os_log_type_t v6 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v5, v6))
      {
        sub_10006253C();
        uint64_t v7 = (_DWORD *)sub_1000624A4();
        uint64_t v61 = swift_slowAlloc();
        *uint64_t v7 = 136315394;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 176) = sub_100013090(v4, v1, &v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v8 = swift_bridgeObjectRelease_n();
        uint64_t v16 = sub_100062474(v8, v9, v10, v11, v12, v13, v14, v15, v58, v59, v60);
        uint64_t v18 = v17(v16);
        *(void *)(v0 + 184) = sub_100013090(v18, v19, &v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100062504((void *)&_mh_execute_header, v20, v21, "%s finished XPC activity \"%s\"");
        swift_arrayDestroy();
        sub_10000EB10();
        sub_10000EB10();

        sub_100013EC4();
        v22();
        sub_100013EC4();
        v23();
      }
      else
      {
        uint64_t v46 = *(void *)(v0 + 296);
        uint64_t v45 = *(void *)(v0 + 304);
        uint64_t v48 = *(void *)(v0 + 280);
        uint64_t v47 = *(void *)(v0 + 288);
        uint64_t v49 = *(void *)(v0 + 240);
        uint64_t v50 = *(void *)(v0 + 248);

        swift_bridgeObjectRelease_n();
        (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v48, v49);
        (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v47);
      }
      uint64_t v42 = 1;
      goto LABEL_11;
    }
    __break(1u);
LABEL_15:
    __break(1u);
    return result;
  }
  *(void *)(v0 + 144) = v2;
  sub_10000BF1C((uint64_t *)&unk_10017EAF0);
  String.init<A>(describing:)();
  uint64_t result = LNLogSubsystem;
  if (!LNLogSubsystem) {
    goto LABEL_15;
  }
  uint64_t v24 = *(void *)(v0 + 272);
  String.init(cString:)();
  sub_100062524();
  swift_bridgeObjectRetain_n();
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    sub_10006253C();
    uint64_t v27 = (_DWORD *)sub_1000624A4();
    uint64_t v61 = swift_slowAlloc();
    *uint64_t v27 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 152) = sub_100013090(v24, v1, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v28 = swift_bridgeObjectRelease_n();
    uint64_t v36 = sub_100062474(v28, v29, v30, v31, v32, v33, v34, v35, v58, v59, v60);
    uint64_t v38 = v37(v36);
    *(void *)(v0 + 160) = sub_100013090(v38, v39, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100062504((void *)&_mh_execute_header, v40, v41, "%s deferred XPC activity \"%s\"");
    uint64_t v42 = 2;
    swift_arrayDestroy();
    sub_10000EB10();
    sub_10000EB10();

    sub_100013EC4();
    v43();
    sub_100013EC4();
    v44();
  }
  else
  {
    uint64_t v52 = *(void *)(v0 + 296);
    uint64_t v51 = *(void *)(v0 + 304);
    uint64_t v53 = *(void *)(v0 + 288);
    uint64_t v54 = *(void *)(v0 + 272);
    uint64_t v55 = *(void *)(v0 + 240);
    uint64_t v56 = *(void *)(v0 + 248);

    uint64_t v42 = 2;
    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v54, v55);
    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v51, v53);
  }
LABEL_11:
  (*(void (**)(uint64_t))(v0 + 216))(v42);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EB74();
  return v57();
}

uint64_t sub_10006180C()
{
  uint64_t v25 = v0;
  v0[12] = v0[36];
  sub_10000BF1C((uint64_t *)&unk_10017EAF0);
  String.init<A>(describing:)();
  uint64_t result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    String.init(cString:)();
    sub_100062524();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = v0[39];
      uint64_t v5 = v0[25];
      unint64_t v6 = v0[26];
      uint64_t v7 = swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315650;
      swift_bridgeObjectRetain();
      v0[13] = sub_100013090(v5, v6, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v7 + 12) = 2080;
      uint64_t v8 = (*(uint64_t (**)(void))(v4 + 8))();
      v0[14] = sub_100013090(v8, v9, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 22) = 2080;
      swift_getErrorValue();
      uint64_t v10 = Error.localizedDescription.getter();
      v0[17] = sub_100013090(v10, v11, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s failed to handle XPC activity \"%s\": %s", (uint8_t *)v7, 0x20u);
      swift_arrayDestroy();
      sub_10000EB10();
      sub_10000EB10();

      swift_errorRelease();
      sub_100013EC4();
      v12();
      sub_100013EC4();
      v13();
    }
    else
    {
      uint64_t v15 = v0[37];
      uint64_t v14 = v0[38];
      uint64_t v16 = v0[36];
      uint64_t v18 = v0[31];
      uint64_t v17 = v0[32];
      uint64_t v19 = v0[30];

      swift_errorRelease();
      swift_errorRelease();
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    }
    uint64_t v20 = sub_1000624D0();
    v21(v20);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EB74();
    sub_1000604B8();
    __asm { BRAA            X1, X16 }
  }
  __break(1u);
  return result;
}

uint64_t sub_100061BB0(uint64_t a1, void *aBlock)
{
  uint64_t v2 = *(void (**)(uint64_t (*)(), uint64_t))(a1 + 32);
  os_log_type_t v3 = _Block_copy(aBlock);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  swift_retain();
  v2(sub_1000622D4, v4);
  swift_release();

  return swift_release();
}

uint64_t sub_100061C44()
{
  *(void *)(v1 + 16) = v0;
  return sub_1000624EC((uint64_t)sub_100061C60, v0);
}

uint64_t sub_100061C60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_10000EC58();
  uint64_t v23 = v22[2];
  [*(id *)(v23 + 112) invalidate];
  uint64_t v24 = *(void *)(v23 + qword_10017E760);
  v22[3] = v24;
  if (v24)
  {
    swift_retain();
    uint64_t v25 = (void *)swift_task_alloc();
    v22[4] = v25;
    *uint64_t v25 = v22;
    v25[1] = sub_100061D5C;
    return Task<>.value.getter(v25, v24, (char *)&type metadata for () + 8, v26, v27, v28, v29, v30, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22);
  }
  else
  {
    sub_10000EB74();
    return v31();
  }
}

uint64_t sub_100061D5C()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *v0;
  sub_100010BC4();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100061E58, v2, 0);
}

uint64_t sub_100061E58()
{
  sub_10000EB74();
  return v0();
}

uint64_t sub_100061E74()
{
  sub_100062414(v0 + qword_10017E758);
  swift_release();
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_100061ECC()
{
  sub_100061E74();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for XPCActivityEntryPoint()
{
  return sub_100010B5C();
}

void sub_100061F10()
{
  if (!qword_10017E7E8)
  {
    sub_10000BFDC(&qword_10017E4D8);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10017E7E8);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for XPCActivityResult(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100062038);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCActivityResult()
{
  return &type metadata for XPCActivityResult;
}

unint64_t sub_100062074()
{
  unint64_t result = qword_10017E7F0;
  if (!qword_10017E7F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E7F0);
  }
  return result;
}

uint64_t sub_1000620C0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100013DD8;
  return sub_100060670();
}

uint64_t sub_100062150()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100011814;
  return sub_100061C44();
}

uint64_t sub_1000621E0()
{
  swift_unknownObjectWeakDestroy();
  uint64_t v0 = sub_1000624F4();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100062210()
{
  swift_weakDestroy();
  uint64_t v0 = sub_1000624F4();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100062240()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100062280(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return sub_10006082C(a1, a2, v2[4], v2[5], v2[2], v2[3]);
}

uint64_t sub_10006228C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10006229C()
{
  return swift_release();
}

uint64_t sub_1000622A4()
{
  _Block_release(*(const void **)(v0 + 16));
  uint64_t v1 = sub_1000624F4();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1000622D4()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_1000622E8()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100062338(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  unsigned int v6 = (uint64_t *)v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  unint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *unint64_t v11 = v2;
  v11[1] = sub_100011814;
  return sub_100060C84(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_100062414(uint64_t a1)
{
  uint64_t v2 = sub_10000BF1C(&qword_10017E848);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100062474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(_WORD *)(v11 + 12) = 2080;
  return a11;
}

uint64_t sub_1000624A4()
{
  return swift_slowAlloc();
}

uint64_t sub_1000624D0()
{
  return 1;
}

uint64_t sub_1000624EC(uint64_t a1, uint64_t a2)
{
  return _swift_task_switch(a1, a2, 0);
}

uint64_t sub_1000624F4()
{
  return v0;
}

void sub_100062504(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 0x16u);
}

uint64_t sub_100062524()
{
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100062550()
{
  [v0 auditToken];
  if (!CPCopyBundleIdentifierAndTeamFromAuditToken())
  {
    if (qword_10017C460 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_10000BEE4(v1, (uint64_t)qword_100181ED8);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "CPCopyBundleIdentifierAndTeamFromAuditToken returned false", v4, 2u);
      swift_slowDealloc();
    }
  }
  return 0;
}

uint64_t sub_1000626C0(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v3 valueForEntitlement:v5];

  if (v6)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v11, 0, sizeof(v11));
  }
  sub_100010064((uint64_t)v11, (uint64_t)v12);
  if (!v13)
  {
    sub_100014958((uint64_t)v12);
    goto LABEL_9;
  }
  sub_100062D58();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    char v8 = 0;
    return v8 & 1;
  }
  if (a3)
  {
    id v7 = a3;
    char v8 = static NSObject.== infix(_:_:)();
  }
  else
  {

    char v8 = 1;
  }
  return v8 & 1;
}

uint64_t sub_1000627CC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v34 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.path.getter();
  [v2 auditToken];
  long long v35 = v38;
  long long v36 = v37;
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  long long v37 = v36;
  long long v38 = v35;
  id v7 = (void *)sandbox_extension_issue_file_to_process();
  swift_release();
  if (v7)
  {
    uint64_t v8 = String.init(cString:)();
    free(v7);
  }
  else
  {
    uint64_t v9 = v34;
    int v10 = errno.getter();
    int v11 = v10;
    if (v10 == 2) {
      int v12 = 0;
    }
    else {
      int v12 = v10;
    }
    if (qword_10017C460 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10000BEE4(v13, (uint64_t)qword_100181ED8);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v6, a1, v4);
    id v14 = v2;
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    int v17 = v16;
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      os_log_t v33 = v15;
      uint64_t v20 = (void *)v19;
      *(void *)&long long v35 = swift_slowAlloc();
      uint64_t v39 = v35;
      *(_DWORD *)uint64_t v18 = 138412802;
      int v32 = v17;
      sub_100062D98();
      swift_allocError();
      *(_DWORD *)uint64_t v21 = v12;
      *(unsigned char *)(v21 + 4) = v11 == 2;
      uint64_t v22 = _swift_stdlib_bridgeErrorToNSError();
      LODWORD(v36) = v12;
      uint64_t v23 = v22;
      *(void *)&long long v37 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v20 = v23;
      *(_WORD *)(v18 + 12) = 2080;
      [v14 auditToken];
      type metadata accessor for audit_token_t(0);
      uint64_t v24 = String.init<A>(describing:)();
      *(void *)&long long v37 = sub_100013090(v24, v25, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      int v12 = v36;
      swift_bridgeObjectRelease();
      *(_WORD *)(v18 + 22) = 2080;
      uint64_t v26 = URL.path.getter();
      *(void *)&long long v37 = sub_100013090(v26, v27, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v6, v4);
      os_log_t v28 = v33;
      _os_log_impl((void *)&_mh_execute_header, v33, (os_log_type_t)v32, "Failed to issue sandbox extension: %@. auditToken %s, path %s", (uint8_t *)v18, 0x20u);
      sub_10000BF1C((uint64_t *)&unk_10017EB20);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v4);
    }
    uint64_t v8 = v11 == 2;
    sub_100062D98();
    swift_allocError();
    *(_DWORD *)uint64_t v29 = v12;
    *(unsigned char *)(v29 + 4) = v8;
    swift_willThrow();
  }
  return v8;
}

unint64_t sub_100062C78(uint64_t a1)
{
  if ((a1 & 0x100000000) != 0) {
    return 0xD000000000000019;
  }
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)v3, "Unknown errno ");
  HIBYTE(v3[1]) = -18;
  v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return v3[0];
}

unint64_t sub_100062D38()
{
  return sub_100062C78(*v0 | ((unint64_t)*((unsigned __int8 *)v0 + 4) << 32));
}

unint64_t sub_100062D58()
{
  unint64_t result = qword_10017DD30;
  if (!qword_10017DD30)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10017DD30);
  }
  return result;
}

unint64_t sub_100062D98()
{
  unint64_t result = qword_10017E850;
  if (!qword_10017E850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E850);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for IssueSandboxExceptionError(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(unsigned char *)(result + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for IssueSandboxExceptionError(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for IssueSandboxExceptionError(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 5) = v3;
  return result;
}

uint64_t sub_100062E44(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100062E60(uint64_t result, int a2)
{
  if (a2)
  {
    *(_DWORD *)unint64_t result = a2 - 1;
    char v2 = 1;
  }
  else
  {
    char v2 = 0;
  }
  *(unsigned char *)(result + 4) = v2;
  return result;
}

ValueMetadata *type metadata accessor for IssueSandboxExceptionError()
{
  return &type metadata for IssueSandboxExceptionError;
}

void *sub_100062E90(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v5 - 8);
  id v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[1] = a2;
  swift_retain();
  swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (v21)
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
    p_ivar_lyt = &Registry.ivar_lyt;
    do
    {
      while (1)
      {
        if (p_ivar_lyt[72] != (void *)-1) {
          swift_once();
        }
        Row.get<A>(_:)();
        if (!v3) {
          break;
        }
        swift_errorRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v3 = 0;
        dispatch thunk of _AnyIteratorBoxBase.next()();
        if (!v21) {
          goto LABEL_18;
        }
      }
      uint64_t v20 = v21;
      uint64_t v23 = v22;
      if (qword_10017C248 != -1) {
        swift_once();
      }
      Row.get<A>(_:)();
      uint64_t v3 = 0;
      sub_10000D9D4(0, &qword_100180D00);
      uint64_t v9 = type metadata accessor for URL();
      sub_10000D5B0((uint64_t)v7, 1, 1, v9);
      uint64_t v10 = static LNAutoShortcutMetadata.fromJSON(_:bundleURL:effectiveBundleIdentifier:)();
      sub_1000347E8((uint64_t)v7, (uint64_t *)&unk_10017D0C0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int v11 = v19;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10001E7F4();
        int v11 = v15;
      }
      unint64_t v12 = v11[2];
      if (v12 >= v11[3] >> 1)
      {
        sub_10001E7F4();
        int v11 = v16;
      }
      _OWORD v11[2] = v12 + 1;
      uint64_t v19 = v11;
      uint64_t v13 = &v11[3 * v12];
      uint64_t v14 = v23;
      void v13[4] = v20;
      uint64_t v13[5] = v14;
      void v13[6] = v10;
      dispatch thunk of _AnyIteratorBoxBase.next()();
      p_ivar_lyt = (void **)(&Registry + 16);
    }
    while (v21);
  }
  else
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
  }
LABEL_18:
  swift_release_n();
  swift_release();
  return v19;
}

void *sub_100063240(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v5 - 8);
  id v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[1] = a2;
  swift_retain();
  swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (v21)
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
    p_ivar_lyt = &Registry.ivar_lyt;
    do
    {
      while (1)
      {
        if (p_ivar_lyt[81] != (void *)-1) {
          swift_once();
        }
        Row.get<A>(_:)();
        if (!v3) {
          break;
        }
        swift_errorRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v3 = 0;
        dispatch thunk of _AnyIteratorBoxBase.next()();
        if (!v21) {
          goto LABEL_18;
        }
      }
      uint64_t v20 = v21;
      uint64_t v23 = v22;
      if (qword_10017C290 != -1) {
        swift_once();
      }
      Row.get<A>(_:)();
      uint64_t v3 = 0;
      sub_10000D9D4(0, (unint64_t *)&unk_10017EA00);
      uint64_t v9 = type metadata accessor for URL();
      sub_10000D5B0((uint64_t)v7, 1, 1, v9);
      uint64_t v10 = static LNAssistantAppEntityMetadata.fromJSON(_:bundleURL:effectiveBundleIdentifier:)();
      sub_1000347E8((uint64_t)v7, (uint64_t *)&unk_10017D0C0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int v11 = v19;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10001ED08();
        int v11 = v15;
      }
      unint64_t v12 = v11[2];
      if (v12 >= v11[3] >> 1)
      {
        sub_10001ED08();
        int v11 = v16;
      }
      _OWORD v11[2] = v12 + 1;
      uint64_t v19 = v11;
      uint64_t v13 = &v11[3 * v12];
      uint64_t v14 = v23;
      void v13[4] = v20;
      uint64_t v13[5] = v14;
      void v13[6] = v10;
      dispatch thunk of _AnyIteratorBoxBase.next()();
      p_ivar_lyt = (void **)(&Registry + 16);
    }
    while (v21);
  }
  else
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
  }
LABEL_18:
  swift_release_n();
  swift_release();
  return v19;
}

void *sub_1000635F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v5 - 8);
  id v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[1] = a2;
  swift_retain();
  swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (v21)
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
    p_ivar_lyt = &Registry.ivar_lyt;
    do
    {
      while (1)
      {
        if (p_ivar_lyt[111] != (void *)-1) {
          swift_once();
        }
        Row.get<A>(_:)();
        if (!v3) {
          break;
        }
        swift_errorRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v3 = 0;
        dispatch thunk of _AnyIteratorBoxBase.next()();
        if (!v21) {
          goto LABEL_18;
        }
      }
      uint64_t v20 = v21;
      uint64_t v23 = v22;
      if (qword_10017C380 != -1) {
        swift_once();
      }
      Row.get<A>(_:)();
      uint64_t v3 = 0;
      sub_10000D9D4(0, (unint64_t *)&unk_10017EA10);
      uint64_t v9 = type metadata accessor for URL();
      sub_10000D5B0((uint64_t)v7, 1, 1, v9);
      uint64_t v10 = static LNAssistantIntentMetadata.fromJSON(_:bundleURL:effectiveBundleIdentifier:)();
      sub_1000347E8((uint64_t)v7, (uint64_t *)&unk_10017D0C0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int v11 = v19;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10001E68C();
        int v11 = v15;
      }
      unint64_t v12 = v11[2];
      if (v12 >= v11[3] >> 1)
      {
        sub_10001E68C();
        int v11 = v16;
      }
      _OWORD v11[2] = v12 + 1;
      uint64_t v19 = v11;
      uint64_t v13 = &v11[3 * v12];
      uint64_t v14 = v23;
      void v13[4] = v20;
      uint64_t v13[5] = v14;
      void v13[6] = v10;
      dispatch thunk of _AnyIteratorBoxBase.next()();
      p_ivar_lyt = (void **)(&Registry + 16);
    }
    while (v21);
  }
  else
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
  }
LABEL_18:
  swift_release_n();
  swift_release();
  return v19;
}

void *sub_1000639A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v5 - 8);
  id v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[1] = a2;
  swift_retain();
  swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (v21)
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
    p_ivar_lyt = &Registry.ivar_lyt;
    do
    {
      while (1)
      {
        if (p_ivar_lyt[161] != (void *)-1) {
          swift_once();
        }
        Row.get<A>(_:)();
        if (!v3) {
          break;
        }
        swift_errorRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v3 = 0;
        dispatch thunk of _AnyIteratorBoxBase.next()();
        if (!v21) {
          goto LABEL_18;
        }
      }
      uint64_t v20 = v21;
      uint64_t v23 = v22;
      if (qword_10017C510 != -1) {
        swift_once();
      }
      Row.get<A>(_:)();
      uint64_t v3 = 0;
      sub_10000D9D4(0, (unint64_t *)&unk_100180CA0);
      uint64_t v9 = type metadata accessor for URL();
      sub_10000D5B0((uint64_t)v7, 1, 1, v9);
      uint64_t v10 = static LNAssistantIntentNegativePhrases.fromJSON(_:bundleURL:effectiveBundleIdentifier:)();
      sub_1000347E8((uint64_t)v7, (uint64_t *)&unk_10017D0C0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int v11 = v19;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10001EF5C();
        int v11 = v15;
      }
      unint64_t v12 = v11[2];
      if (v12 >= v11[3] >> 1)
      {
        sub_10001EF5C();
        int v11 = v16;
      }
      _OWORD v11[2] = v12 + 1;
      uint64_t v19 = v11;
      uint64_t v13 = &v11[3 * v12];
      uint64_t v14 = v23;
      void v13[4] = v20;
      uint64_t v13[5] = v14;
      void v13[6] = v10;
      dispatch thunk of _AnyIteratorBoxBase.next()();
      p_ivar_lyt = (void **)(&Registry + 16);
    }
    while (v21);
  }
  else
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
  }
LABEL_18:
  swift_release_n();
  swift_release();
  return v19;
}

void *sub_100063D50()
{
  swift_retain();
  swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  uint64_t v0 = v4;
  if (v4)
  {
    for (uint64_t i = v5; ; uint64_t i = v5)
    {
      uint64_t v2 = sub_1000A7F1C(v0, i);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v2)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      dispatch thunk of _AnyIteratorBoxBase.next()();
      uint64_t v0 = v4;
    }
  }
  swift_release_n();
  swift_release();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100063E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006E410(a1, a2, a3, a4, (uint64_t (*)(id, id, uint64_t, uint64_t, uint64_t, uint64_t))sub_100097978);
}

void sub_100063EB0()
{
  sub_100018E30();
  sub_10006FFF0();
  uint64_t v1 = qword_10017C238;
  uint64_t v2 = swift_retain();
  if (v1 != -1) {
    uint64_t v2 = swift_once();
  }
  sub_1000701B0(v2, &unk_100181798);
  if (v0)
  {
    sub_10002A390(v160);
    if (qword_10017C240 != -1) {
      swift_once();
    }
    sub_10006FFE0((uint64_t)&qword_100181840);
    uint64_t v3 = == infix<A>(_:_:)();
    sub_10006FDA0(v3, v4, v5, v6, v7, v8, v9, v10, v53);
    swift_bridgeObjectRetain();
    uint64_t v11 = swift_bridgeObjectRetain();
    sub_10006FE48(v11, v12, v13, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table, v14, v15, v16, v54, v58, v62, v66, v70, v74, v78, v82, v86, v90, v94,
      v98,
      v102,
      v106,
      v110,
      v114,
      v118,
      v122,
      v126,
      v130,
      v134,
      v138);
    sub_10005079C();
    sub_10001B508();
    int v17 = sub_10002A500(v160);
    unint64_t v25 = sub_100070138((uint64_t)v17, v18, v19, v20, v21, v22, v23, v24, v55, v59, v63, v67, v71, v75, v79, v83, v87, v91, v95,
            v99,
            v103,
            v107,
            v111,
            v115,
            v119,
            v123,
            v127,
            v131,
            v135,
            v138,
            v139,
            v140,
            v141,
            v142,
            v143,
            v144,
            v145,
            v146,
            v147,
            v148,
            v149,
            v150,
            v151,
            v152,
            v153,
            v154,
            v155,
            v156,
            v157,
            v158,
            v159);
  }
  else
  {
    unint64_t v27 = sub_10002A390(v160);
    unint64_t v25 = sub_100070144((uint64_t)v27, v28, v29, v30, v31, v32, v33, v34, v53, v58, v62, v66, v70, v74, v78, v82, v86, v90, v94,
            v98,
            v102,
            v106,
            v110,
            v114,
            v118,
            v122,
            v126,
            v130,
            v134,
            v138,
            v139,
            v140,
            v141,
            v142,
            v143,
            v144,
            v145,
            v146,
            v147,
            v148,
            v149,
            v150,
            v151,
            v152,
            v153,
            v154,
            v155,
            v156,
            v157,
            v158,
            v159);
  }
  memcpy(v25, v26, 0xA8uLL);
  uint64_t v35 = sub_100070120();
  unint64_t v43 = sub_10006FE24(v35, v36, v37, v38, v39, v40, v41, v42, v56, v60, v64, v68, v72, v76, v80, v84, v88, v92, v96,
          v100,
          v104,
          v108,
          v112,
          v116,
          v120,
          v124,
          v128,
          v132,
          v136,
          v138,
          v139,
          v140,
          (uint64_t)&type metadata for Table,
          (uint64_t)&protocol witness table for Table,
          v143,
          v144,
          v145,
          v146,
          v147,
          v148,
          v149,
          v150,
          v151,
          v152,
          v153,
          v154,
          v155,
          v156,
          v157,
          v158,
          v159);
  sub_10006FF94((uint64_t)v43, v44, v45, v46, v47, v48, v49, v50, v57, v61, v65, v69, v73, v77, v81, v85, v89, v93, v97,
    v101,
    v105,
    v109,
    v113,
    v117,
    v121,
    v125,
    v129,
    v133,
    v137,
    v138);
  if (v1)
  {
    sub_10000E788((uint64_t)&v138);
    swift_release();
    type metadata accessor for Schema.RuntimeError();
    sub_10006F9A8((unint64_t *)&qword_10017DEA0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_10006FD2C();
    sub_10006FF4C();
    sub_1000700DC();
    swift_willThrow();
    swift_errorRelease();
  }
  else
  {
    sub_100070058((uint64_t)&v138);
    uint64_t v51 = sub_10006FEC8();
    sub_100062E90(v51, v52);
    sub_10006FE84();
    swift_release();
  }
  sub_10006FF1C();
  sub_100018E80();
}

uint64_t sub_1000640B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_10006FEE4();
  sub_1000FCB78(a1, a2, (uint64_t)v8);
  swift_release();
  if (!v3) {
    return sub_1000345B8((uint64_t)v8, a3, &qword_10017D790);
  }
  type metadata accessor for Schema.RuntimeError();
  sub_10006F9A8((unint64_t *)&qword_10017DEA0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
  sub_10006FD0C();
  sub_10006FD44();
  sub_10006FE6C();
  swift_willThrow();
  return swift_errorRelease();
}

uint64_t sub_1000641A8(uint64_t a1, uint64_t a2)
{
  return sub_1000683E0(a1, a2, (void (*)(uint64_t))sub_10004F184);
}

uint64_t sub_1000641D4()
{
  sub_1000700A0();
  swift_retain();
  sub_100070084();
  sub_100028BA8();
  uint64_t v1 = v0;
  swift_release();
  return v1;
}

uint64_t sub_100064248()
{
  return swift_release();
}

uint64_t sub_1000642BC(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v8; uint64_t v8 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v9 = 4;
    while (1)
    {
      id v10 = (a1 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(a1 + 8 * v9);
      uint64_t v11 = v10;
      uint64_t v12 = v9 - 3;
      if (__OFADD__(v9 - 4, 1)) {
        break;
      }
      swift_bridgeObjectRetain();
      id v13 = v11;
      sub_1000F03D4(a3, a4);
      if (v5)
      {
        swift_release();
        swift_bridgeObjectRelease();

        goto LABEL_12;
      }

      swift_bridgeObjectRelease();
      ++v9;
      if (v12 == v8) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
  }
LABEL_10:
  swift_release();
LABEL_12:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_100064410(void (*a1)(id *), uint64_t a2, unint64_t a3)
{
  if (a3 >> 62) {
    goto LABEL_13;
  }
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v7 = 4;
    while (1)
    {
      id v8 = (a3 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a3 + 8 * v7);
      uint64_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      id v11 = v8;
      a1(&v11);
      if (v3)
      {
        swift_bridgeObjectRelease();

        return;
      }

      ++v7;
      if (v10 == v6) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
LABEL_10:
  swift_bridgeObjectRelease();
}

void sub_100064520(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v5 = a1;
  if (a1 >> 62) {
    goto LABEL_23;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v22 = v5 & 0xC000000000000001;
    uint64_t v7 = 4;
    uint64_t v20 = v6;
    for (i = v5; ; unint64_t v5 = i)
    {
      id v8 = v22 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v5 + 8 * v7);
      uint64_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      swift_bridgeObjectRetain();
      id v11 = v9;
      Swift::String v12 = LNAutoShortcutMetadata.asJson()();
      if (v13)
      {

        swift_bridgeObjectRelease();
LABEL_20:
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();

        return;
      }
      if (qword_10017C238 != -1) {
        swift_once();
      }
      memcpy(__dst, &unk_100181798, sizeof(__dst));
      memcpy(__src, &unk_100181798, sizeof(__src));
      sub_10002A390(__dst);
      if (qword_10017C240 != -1) {
        swift_once();
      }
      uint64_t v29 = v7;
      v24._uint64_t countAndFlagsBits = a3;
      v24._object = a4;
      <- infix<A>(_:_:)(qword_100181840, *(uint64_t *)algn_100181848, qword_100181850, (uint64_t)&v24, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
      sub_10000BF1C(&qword_10017E940);
      *(_OWORD *)(swift_initStackObject() + 16) = xmmword_10013EF20;
      if (qword_10017C248 != -1) {
        swift_once();
      }
      Swift::String v24 = v12;
      <- infix<A>(_:_:)(qword_100181858, unk_100181860, qword_100181868, (uint64_t)&v24, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
      swift_bridgeObjectRelease();
      uint64_t v14 = QueryType.insert(_:_:)((uint64_t)v25);
      uint64_t v16 = v15;
      uint64_t v18 = v17;
      swift_setDeallocating();
      sub_10006F150();
      sub_10002A66C((uint64_t)v25);
      memcpy(v28, __src, 0xA8uLL);
      sub_10002A500(v28);
      v30.template._uint64_t countAndFlagsBits = v14;
      v30.template._object = v16;
      v30.bindings._rawValue = v18;
      Connection.run(_:)(v30);
      if (v19)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v10 == v20) {
        goto LABEL_24;
      }
      uint64_t v7 = v29 + 1;
    }
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
  }
LABEL_24:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t sub_1000648C0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1 + 56;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  while (v8)
  {
    unint64_t v12 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v13 = v12 | (v11 << 6);
LABEL_19:
    memcpy(__dst, (const void *)(*(void *)(a1 + 48) + 104 * v13), sizeof(__dst));
    sub_10000D708((uint64_t)__dst);
    sub_100089EE0((uint64_t)__dst, a2);
    uint64_t result = sub_10000D790((uint64_t)__dst);
    if (v2)
    {
LABEL_25:
      swift_release();
      return swift_release();
    }
  }
  if (__OFADD__(v11++, 1))
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v11 >= v9) {
    goto LABEL_25;
  }
  unint64_t v15 = *(void *)(v5 + 8 * v11);
  if (v15)
  {
LABEL_18:
    unint64_t v8 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v11 << 6);
    goto LABEL_19;
  }
  int64_t v16 = v11 + 1;
  if (v11 + 1 >= v9) {
    goto LABEL_25;
  }
  unint64_t v15 = *(void *)(v5 + 8 * v16);
  if (v15) {
    goto LABEL_17;
  }
  int64_t v16 = v11 + 2;
  if (v11 + 2 >= v9) {
    goto LABEL_25;
  }
  unint64_t v15 = *(void *)(v5 + 8 * v16);
  if (v15) {
    goto LABEL_17;
  }
  int64_t v16 = v11 + 3;
  if (v11 + 3 >= v9) {
    goto LABEL_25;
  }
  unint64_t v15 = *(void *)(v5 + 8 * v16);
  if (v15) {
    goto LABEL_17;
  }
  int64_t v16 = v11 + 4;
  if (v11 + 4 >= v9) {
    goto LABEL_25;
  }
  unint64_t v15 = *(void *)(v5 + 8 * v16);
  if (v15)
  {
LABEL_17:
    int64_t v11 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v9) {
      goto LABEL_25;
    }
    unint64_t v15 = *(void *)(v5 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_18;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void sub_100064A5C(uint64_t a1, void (*a2)(id, uint64_t, uint64_t))
{
  sub_1000427DC(a1, v19);
  uint64_t v4 = v19[0];
  uint64_t v18 = v19[1];
  int64_t v5 = v19[3];
  unint64_t v6 = v19[4];
  int64_t v20 = (unint64_t)(v19[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  if (!v6) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v7 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v8 = v7 | (v5 << 6);
  while (1)
  {
    unint64_t v12 = *(void **)(*(void *)(v4 + 48) + 8 * v8);
    unint64_t v13 = (uint64_t *)(*(void *)(v4 + 56) + 16 * v8);
    uint64_t v15 = *v13;
    uint64_t v14 = v13[1];
    id v16 = v12;
    swift_bridgeObjectRetain();
    a2(v16, v15, v14);
    if (v2)
    {
      swift_release();
      swift_bridgeObjectRelease();

      return;
    }
    swift_bridgeObjectRelease();

    if (v6) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v9 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      break;
    }
    if (v9 >= v20) {
      goto LABEL_24;
    }
    unint64_t v10 = *(void *)(v18 + 8 * v9);
    if (!v10)
    {
      int64_t v11 = v5 + 2;
      if (v5 + 2 >= v20) {
        goto LABEL_24;
      }
      unint64_t v10 = *(void *)(v18 + 8 * v11);
      if (v10) {
        goto LABEL_12;
      }
      int64_t v11 = v5 + 3;
      if (v5 + 3 >= v20) {
        goto LABEL_24;
      }
      unint64_t v10 = *(void *)(v18 + 8 * v11);
      if (v10) {
        goto LABEL_12;
      }
      int64_t v11 = v5 + 4;
      if (v5 + 4 >= v20) {
        goto LABEL_24;
      }
      unint64_t v10 = *(void *)(v18 + 8 * v11);
      if (v10)
      {
LABEL_12:
        int64_t v9 = v11;
      }
      else
      {
        int64_t v9 = v5 + 5;
        if (v5 + 5 >= v20) {
          goto LABEL_24;
        }
        unint64_t v10 = *(void *)(v18 + 8 * v9);
        if (!v10)
        {
          int64_t v17 = v5 + 6;
          while (v17 < v20)
          {
            unint64_t v10 = *(void *)(v18 + 8 * v17++);
            if (v10)
            {
              int64_t v9 = v17 - 1;
              goto LABEL_13;
            }
          }
LABEL_24:
          swift_release();
          return;
        }
      }
    }
LABEL_13:
    unint64_t v6 = (v10 - 1) & v10;
    unint64_t v8 = __clz(__rbit64(v10)) + (v9 << 6);
    int64_t v5 = v9;
  }
  __break(1u);
}

void sub_100064C48(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v5 = a1;
  if (a1 >> 62) {
    goto LABEL_23;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v22 = v5 & 0xC000000000000001;
    uint64_t v7 = 4;
    uint64_t v20 = v6;
    for (i = v5; ; unint64_t v5 = i)
    {
      id v8 = v22 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v5 + 8 * v7);
      int64_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      swift_bridgeObjectRetain();
      id v11 = v9;
      Swift::String v12 = LNEntityMetadata.asJson(prettyPrinted:)(0);
      if (v13)
      {

        swift_bridgeObjectRelease();
LABEL_20:
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();

        return;
      }
      if (qword_10017C5C0 != -1) {
        swift_once();
      }
      memcpy(__dst, &unk_100180820, sizeof(__dst));
      memcpy(__src, &unk_100180820, sizeof(__src));
      sub_10002A390(__dst);
      if (qword_10017C5C8 != -1) {
        swift_once();
      }
      uint64_t v29 = v7;
      v24._uint64_t countAndFlagsBits = a3;
      v24._object = a4;
      <- infix<A>(_:_:)(qword_1001808C8, unk_1001808D0, qword_1001808D8, (uint64_t)&v24, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
      sub_10000BF1C(&qword_10017E940);
      *(_OWORD *)(swift_initStackObject() + 16) = xmmword_10013EF20;
      if (qword_10017C5D8 != -1) {
        swift_once();
      }
      Swift::String v24 = v12;
      <- infix<A>(_:_:)(qword_1001808F8, unk_100180900, qword_100180908, (uint64_t)&v24, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
      swift_bridgeObjectRelease();
      uint64_t v14 = QueryType.insert(_:_:)((uint64_t)v25);
      id v16 = v15;
      uint64_t v18 = v17;
      swift_setDeallocating();
      sub_10006F150();
      sub_10002A66C((uint64_t)v25);
      memcpy(v28, __src, 0xA8uLL);
      sub_10002A500(v28);
      v30.template._uint64_t countAndFlagsBits = v14;
      v30.template._object = v16;
      v30.bindings._rawValue = v18;
      Connection.run(_:)(v30);
      if (v19)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v10 == v20) {
        goto LABEL_24;
      }
      uint64_t v7 = v29 + 1;
    }
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
  }
LABEL_24:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void sub_100064FEC(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6 = v5;
  if (a1 >> 62) {
    goto LABEL_13;
  }
  uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v10; uint64_t v10 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v11 = 4;
    while (1)
    {
      id v12 = (a1 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(a1 + 8 * v11);
      uint64_t v13 = v12;
      uint64_t v14 = v11 - 3;
      if (__OFADD__(v11 - 4, 1)) {
        break;
      }
      swift_retain();
      swift_bridgeObjectRetain();
      id v15 = v13;
      sub_10006BC9C(a2, a3, a4, a5, v15);
      if (v6)
      {
        swift_bridgeObjectRelease();
        swift_release();

        swift_bridgeObjectRelease();
        return;
      }

      ++v11;
      if (v14 == v10) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
LABEL_10:

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
}

void sub_100065158(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v5 = a1;
  if (a1 >> 62) {
    goto LABEL_23;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v22 = v5 & 0xC000000000000001;
    uint64_t v7 = 4;
    uint64_t v20 = v6;
    for (i = v5; ; unint64_t v5 = i)
    {
      id v8 = v22 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v5 + 8 * v7);
      int64_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      swift_bridgeObjectRetain();
      id v11 = v9;
      Swift::String v12 = LNQueryMetadata.asJson(prettyPrinted:)(0);
      if (v13)
      {

        swift_bridgeObjectRelease();
LABEL_20:
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();

        return;
      }
      if (qword_10017C600 != -1) {
        swift_once();
      }
      memcpy(__dst, &unk_100180A10, sizeof(__dst));
      memcpy(__src, &unk_100180A10, sizeof(__src));
      sub_10002A390(__dst);
      if (qword_10017C608 != -1) {
        swift_once();
      }
      uint64_t v29 = v7;
      v24._uint64_t countAndFlagsBits = a3;
      v24._object = a4;
      <- infix<A>(_:_:)(qword_100180AB8, unk_100180AC0, qword_100180AC8, (uint64_t)&v24, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
      sub_10000BF1C(&qword_10017E940);
      *(_OWORD *)(swift_initStackObject() + 16) = xmmword_10013EF20;
      if (qword_10017C618 != -1) {
        swift_once();
      }
      Swift::String v24 = v12;
      <- infix<A>(_:_:)(qword_100180AE8, unk_100180AF0, qword_100180AF8, (uint64_t)&v24, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
      swift_bridgeObjectRelease();
      uint64_t v14 = QueryType.insert(_:_:)((uint64_t)v25);
      id v16 = v15;
      uint64_t v18 = v17;
      swift_setDeallocating();
      sub_10006F150();
      sub_10002A66C((uint64_t)v25);
      memcpy(v28, __src, 0xA8uLL);
      sub_10002A500(v28);
      v30.template._uint64_t countAndFlagsBits = v14;
      v30.template._object = v16;
      v30.bindings._rawValue = v18;
      Connection.run(_:)(v30);
      if (v19)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v10 == v20) {
        goto LABEL_24;
      }
      uint64_t v7 = v29 + 1;
    }
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
  }
LABEL_24:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void sub_1000654FC(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v5 = a1;
  if (a1 >> 62) {
    goto LABEL_23;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v22 = v5 & 0xC000000000000001;
    uint64_t v7 = 4;
    uint64_t v20 = v6;
    for (i = v5; ; unint64_t v5 = i)
    {
      id v8 = v22 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v5 + 8 * v7);
      int64_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      swift_bridgeObjectRetain();
      id v11 = v9;
      Swift::String v12 = LNAssistantIntentMetadata.asJson()();
      if (v13)
      {

        swift_bridgeObjectRelease();
LABEL_20:
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();

        return;
      }
      if (qword_10017C370 != -1) {
        swift_once();
      }
      memcpy(__dst, &unk_100181B28, sizeof(__dst));
      memcpy(__src, &unk_100181B28, sizeof(__src));
      sub_10002A390(__dst);
      if (qword_10017C378 != -1) {
        swift_once();
      }
      uint64_t v29 = v7;
      v24._uint64_t countAndFlagsBits = a3;
      v24._object = a4;
      <- infix<A>(_:_:)(qword_100181BD0, *(uint64_t *)algn_100181BD8, qword_100181BE0, (uint64_t)&v24, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
      sub_10000BF1C(&qword_10017E940);
      *(_OWORD *)(swift_initStackObject() + 16) = xmmword_10013EF20;
      if (qword_10017C380 != -1) {
        swift_once();
      }
      Swift::String v24 = v12;
      <- infix<A>(_:_:)(qword_100181BE8, unk_100181BF0, qword_100181BF8, (uint64_t)&v24, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
      swift_bridgeObjectRelease();
      uint64_t v14 = QueryType.insert(_:_:)((uint64_t)v25);
      id v16 = v15;
      uint64_t v18 = v17;
      swift_setDeallocating();
      sub_10006F150();
      sub_10002A66C((uint64_t)v25);
      memcpy(v28, __src, 0xA8uLL);
      sub_10002A500(v28);
      v30.template._uint64_t countAndFlagsBits = v14;
      v30.template._object = v16;
      v30.bindings._rawValue = v18;
      Connection.run(_:)(v30);
      if (v19)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v10 == v20) {
        goto LABEL_24;
      }
      uint64_t v7 = v29 + 1;
    }
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
  }
LABEL_24:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void sub_10006589C(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v5 = a1;
  if (a1 >> 62) {
    goto LABEL_23;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v22 = v5 & 0xC000000000000001;
    uint64_t v7 = 4;
    uint64_t v20 = v6;
    for (i = v5; ; unint64_t v5 = i)
    {
      id v8 = v22 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v5 + 8 * v7);
      int64_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      swift_bridgeObjectRetain();
      id v11 = v9;
      Swift::String v12 = LNAssistantIntentNegativePhrases.asJson()();
      if (v13)
      {

        swift_bridgeObjectRelease();
LABEL_20:
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();

        return;
      }
      if (qword_10017C500 != -1) {
        swift_once();
      }
      memcpy(__dst, &unk_100182110, sizeof(__dst));
      memcpy(__src, &unk_100182110, sizeof(__src));
      sub_10002A390(__dst);
      if (qword_10017C508 != -1) {
        swift_once();
      }
      uint64_t v29 = v7;
      v24._uint64_t countAndFlagsBits = a3;
      v24._object = a4;
      <- infix<A>(_:_:)(qword_1001821B8, unk_1001821C0, qword_1001821C8, (uint64_t)&v24, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
      sub_10000BF1C(&qword_10017E940);
      *(_OWORD *)(swift_initStackObject() + 16) = xmmword_10013EF20;
      if (qword_10017C510 != -1) {
        swift_once();
      }
      Swift::String v24 = v12;
      <- infix<A>(_:_:)(qword_1001821D0, *(uint64_t *)algn_1001821D8, qword_1001821E0, (uint64_t)&v24, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
      swift_bridgeObjectRelease();
      uint64_t v14 = QueryType.insert(_:_:)((uint64_t)v25);
      id v16 = v15;
      uint64_t v18 = v17;
      swift_setDeallocating();
      sub_10006F150();
      sub_10002A66C((uint64_t)v25);
      memcpy(v28, __src, 0xA8uLL);
      sub_10002A500(v28);
      v30.template._uint64_t countAndFlagsBits = v14;
      v30.template._object = v16;
      v30.bindings._rawValue = v18;
      Connection.run(_:)(v30);
      if (v19)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v10 == v20) {
        goto LABEL_24;
      }
      uint64_t v7 = v29 + 1;
    }
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
  }
LABEL_24:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void sub_100065C3C(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v5 = a1;
  if (a1 >> 62) {
    goto LABEL_23;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v22 = v5 & 0xC000000000000001;
    uint64_t v7 = 4;
    uint64_t v20 = v6;
    for (i = v5; ; unint64_t v5 = i)
    {
      id v8 = v22 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v5 + 8 * v7);
      int64_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      swift_bridgeObjectRetain();
      id v11 = v9;
      Swift::String v12 = LNAssistantAppEntityMetadata.asJson()();
      if (v13)
      {

        swift_bridgeObjectRelease();
LABEL_20:
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();

        return;
      }
      if (qword_10017C280 != -1) {
        swift_once();
      }
      memcpy(__dst, &unk_1001818A0, sizeof(__dst));
      memcpy(__src, &unk_1001818A0, sizeof(__src));
      sub_10002A390(__dst);
      if (qword_10017C288 != -1) {
        swift_once();
      }
      uint64_t v29 = v7;
      v24._uint64_t countAndFlagsBits = a3;
      v24._object = a4;
      <- infix<A>(_:_:)(qword_100181948, unk_100181950, qword_100181958, (uint64_t)&v24, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
      sub_10000BF1C(&qword_10017E940);
      *(_OWORD *)(swift_initStackObject() + 16) = xmmword_10013EF20;
      if (qword_10017C290 != -1) {
        swift_once();
      }
      Swift::String v24 = v12;
      <- infix<A>(_:_:)(qword_100181960, *(uint64_t *)algn_100181968, qword_100181970, (uint64_t)&v24, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
      swift_bridgeObjectRelease();
      uint64_t v14 = QueryType.insert(_:_:)((uint64_t)v25);
      id v16 = v15;
      uint64_t v18 = v17;
      swift_setDeallocating();
      sub_10006F150();
      sub_10002A66C((uint64_t)v25);
      memcpy(v28, __src, 0xA8uLL);
      sub_10002A500(v28);
      v30.template._uint64_t countAndFlagsBits = v14;
      v30.template._object = v16;
      v30.bindings._rawValue = v18;
      Connection.run(_:)(v30);
      if (v19)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v10 == v20) {
        goto LABEL_24;
      }
      uint64_t v7 = v29 + 1;
    }
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
  }
LABEL_24:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void sub_100065FDC()
{
  sub_100018E30();
  sub_10006FFF0();
  uint64_t v1 = qword_10017C370;
  uint64_t v2 = swift_retain();
  if (v1 != -1) {
    uint64_t v2 = swift_once();
  }
  sub_1000701B0(v2, &unk_100181B28);
  if (v0)
  {
    sub_10002A390(v160);
    if (qword_10017C378 != -1) {
      swift_once();
    }
    sub_10006FFE0((uint64_t)&qword_100181BD0);
    uint64_t v3 = == infix<A>(_:_:)();
    sub_10006FDA0(v3, v4, v5, v6, v7, v8, v9, v10, v53);
    swift_bridgeObjectRetain();
    uint64_t v11 = swift_bridgeObjectRetain();
    sub_10006FE48(v11, v12, v13, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table, v14, v15, v16, v54, v58, v62, v66, v70, v74, v78, v82, v86, v90, v94,
      v98,
      v102,
      v106,
      v110,
      v114,
      v118,
      v122,
      v126,
      v130,
      v134,
      v138);
    sub_10005079C();
    sub_10001B508();
    int64_t v17 = sub_10002A500(v160);
    unint64_t v25 = sub_100070138((uint64_t)v17, v18, v19, v20, v21, v22, v23, v24, v55, v59, v63, v67, v71, v75, v79, v83, v87, v91, v95,
            v99,
            v103,
            v107,
            v111,
            v115,
            v119,
            v123,
            v127,
            v131,
            v135,
            v138,
            v139,
            v140,
            v141,
            v142,
            v143,
            v144,
            v145,
            v146,
            v147,
            v148,
            v149,
            v150,
            v151,
            v152,
            v153,
            v154,
            v155,
            v156,
            v157,
            v158,
            v159);
  }
  else
  {
    unint64_t v27 = sub_10002A390(v160);
    unint64_t v25 = sub_100070144((uint64_t)v27, v28, v29, v30, v31, v32, v33, v34, v53, v58, v62, v66, v70, v74, v78, v82, v86, v90, v94,
            v98,
            v102,
            v106,
            v110,
            v114,
            v118,
            v122,
            v126,
            v130,
            v134,
            v138,
            v139,
            v140,
            v141,
            v142,
            v143,
            v144,
            v145,
            v146,
            v147,
            v148,
            v149,
            v150,
            v151,
            v152,
            v153,
            v154,
            v155,
            v156,
            v157,
            v158,
            v159);
  }
  memcpy(v25, v26, 0xA8uLL);
  uint64_t v35 = sub_100070120();
  unint64_t v43 = sub_10006FE24(v35, v36, v37, v38, v39, v40, v41, v42, v56, v60, v64, v68, v72, v76, v80, v84, v88, v92, v96,
          v100,
          v104,
          v108,
          v112,
          v116,
          v120,
          v124,
          v128,
          v132,
          v136,
          v138,
          v139,
          v140,
          (uint64_t)&type metadata for Table,
          (uint64_t)&protocol witness table for Table,
          v143,
          v144,
          v145,
          v146,
          v147,
          v148,
          v149,
          v150,
          v151,
          v152,
          v153,
          v154,
          v155,
          v156,
          v157,
          v158,
          v159);
  sub_10006FF94((uint64_t)v43, v44, v45, v46, v47, v48, v49, v50, v57, v61, v65, v69, v73, v77, v81, v85, v89, v93, v97,
    v101,
    v105,
    v109,
    v113,
    v117,
    v121,
    v125,
    v129,
    v133,
    v137,
    v138);
  if (v1)
  {
    sub_10000E788((uint64_t)&v138);
    swift_release();
    type metadata accessor for Schema.RuntimeError();
    sub_10006F9A8((unint64_t *)&qword_10017DEA0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_10006FD2C();
    sub_10006FF4C();
    sub_1000700DC();
    swift_willThrow();
    swift_errorRelease();
  }
  else
  {
    sub_100070058((uint64_t)&v138);
    uint64_t v51 = sub_10006FEC8();
    sub_1000635F0(v51, v52);
    sub_10006FE84();
    swift_release();
  }
  sub_10006FF1C();
  sub_100018E80();
}

void sub_1000661E4()
{
  sub_100018E30();
  sub_10006FFF0();
  uint64_t v1 = qword_10017C500;
  uint64_t v2 = swift_retain();
  if (v1 != -1) {
    uint64_t v2 = swift_once();
  }
  sub_1000701B0(v2, &unk_100182110);
  if (v0)
  {
    sub_10002A390(v160);
    if (qword_10017C508 != -1) {
      swift_once();
    }
    sub_10006FFE0((uint64_t)&qword_1001821B8);
    uint64_t v3 = == infix<A>(_:_:)();
    sub_10006FDA0(v3, v4, v5, v6, v7, v8, v9, v10, v53);
    swift_bridgeObjectRetain();
    uint64_t v11 = swift_bridgeObjectRetain();
    sub_10006FE48(v11, v12, v13, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table, v14, v15, v16, v54, v58, v62, v66, v70, v74, v78, v82, v86, v90, v94,
      v98,
      v102,
      v106,
      v110,
      v114,
      v118,
      v122,
      v126,
      v130,
      v134,
      v138);
    sub_10005079C();
    sub_10001B508();
    int64_t v17 = sub_10002A500(v160);
    unint64_t v25 = sub_100070138((uint64_t)v17, v18, v19, v20, v21, v22, v23, v24, v55, v59, v63, v67, v71, v75, v79, v83, v87, v91, v95,
            v99,
            v103,
            v107,
            v111,
            v115,
            v119,
            v123,
            v127,
            v131,
            v135,
            v138,
            v139,
            v140,
            v141,
            v142,
            v143,
            v144,
            v145,
            v146,
            v147,
            v148,
            v149,
            v150,
            v151,
            v152,
            v153,
            v154,
            v155,
            v156,
            v157,
            v158,
            v159);
  }
  else
  {
    unint64_t v27 = sub_10002A390(v160);
    unint64_t v25 = sub_100070144((uint64_t)v27, v28, v29, v30, v31, v32, v33, v34, v53, v58, v62, v66, v70, v74, v78, v82, v86, v90, v94,
            v98,
            v102,
            v106,
            v110,
            v114,
            v118,
            v122,
            v126,
            v130,
            v134,
            v138,
            v139,
            v140,
            v141,
            v142,
            v143,
            v144,
            v145,
            v146,
            v147,
            v148,
            v149,
            v150,
            v151,
            v152,
            v153,
            v154,
            v155,
            v156,
            v157,
            v158,
            v159);
  }
  memcpy(v25, v26, 0xA8uLL);
  uint64_t v35 = sub_100070120();
  unint64_t v43 = sub_10006FE24(v35, v36, v37, v38, v39, v40, v41, v42, v56, v60, v64, v68, v72, v76, v80, v84, v88, v92, v96,
          v100,
          v104,
          v108,
          v112,
          v116,
          v120,
          v124,
          v128,
          v132,
          v136,
          v138,
          v139,
          v140,
          (uint64_t)&type metadata for Table,
          (uint64_t)&protocol witness table for Table,
          v143,
          v144,
          v145,
          v146,
          v147,
          v148,
          v149,
          v150,
          v151,
          v152,
          v153,
          v154,
          v155,
          v156,
          v157,
          v158,
          v159);
  sub_10006FF94((uint64_t)v43, v44, v45, v46, v47, v48, v49, v50, v57, v61, v65, v69, v73, v77, v81, v85, v89, v93, v97,
    v101,
    v105,
    v109,
    v113,
    v117,
    v121,
    v125,
    v129,
    v133,
    v137,
    v138);
  if (v1)
  {
    sub_10000E788((uint64_t)&v138);
    swift_release();
    type metadata accessor for Schema.RuntimeError();
    sub_10006F9A8((unint64_t *)&qword_10017DEA0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_10006FD2C();
    sub_10006FF4C();
    sub_1000700DC();
    swift_willThrow();
    swift_errorRelease();
  }
  else
  {
    sub_100070058((uint64_t)&v138);
    uint64_t v51 = sub_10006FEC8();
    sub_1000639A0(v51, v52);
    sub_10006FE84();
    swift_release();
  }
  sub_10006FF1C();
  sub_100018E80();
}

void sub_1000663EC()
{
  sub_100018E30();
  sub_10006FFF0();
  uint64_t v1 = qword_10017C280;
  uint64_t v2 = swift_retain();
  if (v1 != -1) {
    uint64_t v2 = swift_once();
  }
  sub_1000701B0(v2, &unk_1001818A0);
  if (v0)
  {
    sub_10002A390(v160);
    if (qword_10017C288 != -1) {
      swift_once();
    }
    sub_10006FFE0((uint64_t)&qword_100181948);
    uint64_t v3 = == infix<A>(_:_:)();
    sub_10006FDA0(v3, v4, v5, v6, v7, v8, v9, v10, v53);
    swift_bridgeObjectRetain();
    uint64_t v11 = swift_bridgeObjectRetain();
    sub_10006FE48(v11, v12, v13, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table, v14, v15, v16, v54, v58, v62, v66, v70, v74, v78, v82, v86, v90, v94,
      v98,
      v102,
      v106,
      v110,
      v114,
      v118,
      v122,
      v126,
      v130,
      v134,
      v138);
    sub_10005079C();
    sub_10001B508();
    int64_t v17 = sub_10002A500(v160);
    unint64_t v25 = sub_100070138((uint64_t)v17, v18, v19, v20, v21, v22, v23, v24, v55, v59, v63, v67, v71, v75, v79, v83, v87, v91, v95,
            v99,
            v103,
            v107,
            v111,
            v115,
            v119,
            v123,
            v127,
            v131,
            v135,
            v138,
            v139,
            v140,
            v141,
            v142,
            v143,
            v144,
            v145,
            v146,
            v147,
            v148,
            v149,
            v150,
            v151,
            v152,
            v153,
            v154,
            v155,
            v156,
            v157,
            v158,
            v159);
  }
  else
  {
    unint64_t v27 = sub_10002A390(v160);
    unint64_t v25 = sub_100070144((uint64_t)v27, v28, v29, v30, v31, v32, v33, v34, v53, v58, v62, v66, v70, v74, v78, v82, v86, v90, v94,
            v98,
            v102,
            v106,
            v110,
            v114,
            v118,
            v122,
            v126,
            v130,
            v134,
            v138,
            v139,
            v140,
            v141,
            v142,
            v143,
            v144,
            v145,
            v146,
            v147,
            v148,
            v149,
            v150,
            v151,
            v152,
            v153,
            v154,
            v155,
            v156,
            v157,
            v158,
            v159);
  }
  memcpy(v25, v26, 0xA8uLL);
  uint64_t v35 = sub_100070120();
  unint64_t v43 = sub_10006FE24(v35, v36, v37, v38, v39, v40, v41, v42, v56, v60, v64, v68, v72, v76, v80, v84, v88, v92, v96,
          v100,
          v104,
          v108,
          v112,
          v116,
          v120,
          v124,
          v128,
          v132,
          v136,
          v138,
          v139,
          v140,
          (uint64_t)&type metadata for Table,
          (uint64_t)&protocol witness table for Table,
          v143,
          v144,
          v145,
          v146,
          v147,
          v148,
          v149,
          v150,
          v151,
          v152,
          v153,
          v154,
          v155,
          v156,
          v157,
          v158,
          v159);
  sub_10006FF94((uint64_t)v43, v44, v45, v46, v47, v48, v49, v50, v57, v61, v65, v69, v73, v77, v81, v85, v89, v93, v97,
    v101,
    v105,
    v109,
    v113,
    v117,
    v121,
    v125,
    v129,
    v133,
    v137,
    v138);
  if (v1)
  {
    sub_10000E788((uint64_t)&v138);
    swift_release();
    type metadata accessor for Schema.RuntimeError();
    sub_10006F9A8((unint64_t *)&qword_10017DEA0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_10006FD2C();
    sub_10006FF4C();
    sub_1000700DC();
    swift_willThrow();
    swift_errorRelease();
  }
  else
  {
    sub_100070058((uint64_t)&v138);
    uint64_t v51 = sub_10006FEC8();
    sub_100063240(v51, v52);
    sub_10006FE84();
    swift_release();
  }
  sub_10006FF1C();
  sub_100018E80();
}

uint64_t sub_1000665F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10006FEE4();
  sub_1000F019C(a1, a2, a3, a4);
  sub_10006FF84();
  swift_release();
  if (v4)
  {
    type metadata accessor for Schema.RuntimeError();
    sub_10006F9A8((unint64_t *)&qword_10017DEA0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_10006FD2C();
    sub_10006FF68();
    sub_100070164();
    swift_willThrow();
    swift_errorRelease();
  }
  return sub_100070094();
}

void sub_1000666D4()
{
  sub_100018E30();
  uint64_t v2 = v0;
  unint64_t v3 = v1;
  uint64_t v5 = v4;
  uint64_t v13 = v6;
  if (v1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v7 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v7; uint64_t v7 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v8 = 4;
    while (1)
    {
      id v9 = (v3 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(v3 + 8 * v8);
      uint64_t v10 = v9;
      uint64_t v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1)) {
        break;
      }
      swift_retain();
      swift_bridgeObjectRetain();
      id v12 = v10;
      sub_1000F03D4(v13, v5);
      if (v2)
      {
        swift_bridgeObjectRelease();
        swift_release();

        goto LABEL_12;
      }
      swift_release();

      swift_bridgeObjectRelease();
      ++v8;
      if (v11 == v7) {
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
  }
LABEL_12:
  swift_bridgeObjectRelease();
  sub_100018E80();
}

void sub_100066820()
{
  sub_10006FEA4();
  unint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_provider);
  swift_bridgeObjectRetain();
  v1;
  swift_bridgeObjectRetain();
  sub_10006FF2C();
  sub_1000983D4();
}

unint64_t sub_100066880(uint64_t a1, char a2)
{
  unint64_t result = 0xD00000000000001FLL;
  switch(a2)
  {
    case 1:
      unint64_t v14 = 0;
      swift_errorRetain();
      _StringGuts.grow(_:)(40);
      swift_bridgeObjectRelease();
      sub_1000700AC();
      sub_10000BF1C(&qword_10017C810);
      v7._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v7);
      swift_bridgeObjectRelease();
      uint64_t v5 = a1;
      unsigned __int8 v6 = 1;
      goto LABEL_4;
    case 2:
      _StringGuts.grow(_:)(43);
      swift_bridgeObjectRelease();
      v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      v9._uint64_t countAndFlagsBits = 8238;
      v9._object = (void *)0xE200000000000000;
      String.append(_:)(v9);
      _StringGuts.grow(_:)(51);
      v10._object = (void *)0x80000001001440E0;
      v10._uint64_t countAndFlagsBits = 0xD000000000000011;
      String.append(_:)(v10);
      v11._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      v12._uint64_t countAndFlagsBits = 0xD000000000000020;
      v12._object = (void *)0x8000000100144100;
      String.append(_:)(v12);
      unint64_t v14 = 0xD000000000000027;
      swift_bridgeObjectRetain();
      v13._uint64_t countAndFlagsBits = 0;
      v13._object = (void *)0xE000000000000000;
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v14;
    case 3:
      return result;
    default:
      unint64_t v14 = 0;
      swift_errorRetain();
      _StringGuts.grow(_:)(36);
      swift_bridgeObjectRelease();
      sub_1000700AC();
      sub_10000BF1C(&qword_10017C810);
      v4._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v4);
      swift_bridgeObjectRelease();
      uint64_t v5 = a1;
      unsigned __int8 v6 = 0;
LABEL_4:
      sub_10006FB84(v5, v6);
      return v14;
  }
}

unint64_t sub_100066B1C()
{
  return sub_100066880(*(void *)v0, *(unsigned char *)(v0 + 8));
}

uint64_t sub_100066B28()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000D844(v0, qword_100181B00);
  sub_10000BEE4(v0, (uint64_t)qword_100181B00);
  type metadata accessor for MetadataStore();
  sub_10000BF1C((uint64_t *)&unk_10017EAF0);
  String.init<A>(describing:)();
  uint64_t result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    String.init(cString:)();
    return Logger.init(subsystem:category:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100066BD4(uint64_t a1)
{
  uint64_t v4 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v4 - 8);
  unsigned __int8 v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.absoluteString.getter();
  id v7 = objc_allocWithZone(v1);
  sub_100067444();
  uint64_t v9 = v8;
  if (v2)
  {
    type metadata accessor for URL();
    sub_1000283FC();
    sub_100013EC4();
    v10();
  }
  else
  {
    uint64_t v11 = type metadata accessor for URL();
    sub_1000283FC();
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v6, a1, v11);
    sub_10000D5B0((uint64_t)v6, 0, 1, v11);
    uint64_t v13 = v9 + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_URL;
    swift_beginAccess();
    sub_100042E84((uint64_t)v6, v13);
    swift_endAccess();
  }
  return sub_100070094();
}

void sub_100066D4C()
{
  uint64_t v0 = type metadata accessor for URL();
  sub_10000E948();
  uint64_t v2 = v1;
  __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  id v7 = (char *)&v49 - v6;
  ppDb = 0;
  URL.absoluteString.getter();
  uint64_t v8 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  int v9 = sqlite3_open_v2((const char *)(v8 + 32), &ppDb, 2, 0);
  swift_release();
  Swift::String v10 = ppDb;
  if (v9)
  {
    if (sqlite3_errmsg(ppDb))
    {
      uint64_t v11 = String.init(cString:)();
      unint64_t v13 = v12;
      if (qword_10017C368 != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      sub_10000BEE4(v14, (uint64_t)qword_100181B00);
      sub_10006FFCC();
      v15();
      swift_bridgeObjectRetain();
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.error.getter();
      int v18 = v17;
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v19 = swift_slowAlloc();
        uint64_t v52 = swift_slowAlloc();
        uint64_t v54 = v52;
        *(_DWORD *)uint64_t v19 = 136315650;
        uint64_t v50 = v11;
        sub_10006F9A8((unint64_t *)&qword_10017DD50, (void (*)(uint64_t))&type metadata accessor for URL);
        int v51 = v18;
        uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v22 = sub_100013090(v20, v21, &v54);
        sub_10007000C(v22);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10006FEB8();
        v23();
        sub_100070188();
        LODWORD(v53) = v9;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v19 + 18) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v24 = sub_100013090(v50, v13, &v54);
        sub_100070150(v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        unint64_t v25 = "Could not open database at %s to truncate: %d %s";
LABEL_13:
        _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v51, v25, (uint8_t *)v19, 0x1Cu);
        swift_arrayDestroy();
        sub_10000EB10();
        sub_10000EB10();

        return;
      }
LABEL_19:
      sub_10006FEB8();
      v48();

      swift_bridgeObjectRelease_n();
      return;
    }
    __break(1u);
LABEL_23:
    __break(1u);
    return;
  }
  int v26 = _sqlite3_db_truncate();
  if (v26)
  {
    int v27 = v26;
    if (sqlite3_errmsg(v10))
    {
      uint64_t v28 = String.init(cString:)();
      unint64_t v30 = v29;
      if (qword_10017C368 != -1) {
        swift_once();
      }
      uint64_t v31 = type metadata accessor for Logger();
      sub_10000BEE4(v31, (uint64_t)qword_100181B00);
      sub_10006FFCC();
      v32();
      swift_bridgeObjectRetain();
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.error.getter();
      int v34 = v33;
      if (os_log_type_enabled(v16, v33))
      {
        uint64_t v19 = swift_slowAlloc();
        uint64_t v52 = swift_slowAlloc();
        uint64_t v54 = v52;
        *(_DWORD *)uint64_t v19 = 136315650;
        uint64_t v50 = v28;
        sub_10006F9A8((unint64_t *)&qword_10017DD50, (void (*)(uint64_t))&type metadata accessor for URL);
        int v51 = v34;
        uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v37 = sub_100013090(v35, v36, &v54);
        sub_10007000C(v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10006FEB8();
        v38();
        sub_100070188();
        LODWORD(v53) = v27;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v19 + 18) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v39 = sub_100013090(v50, v30, &v54);
        sub_100070150(v39);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        unint64_t v25 = "Could not truncate database at %s: %d %s";
        goto LABEL_13;
      }
      goto LABEL_19;
    }
    goto LABEL_23;
  }
  if (qword_10017C368 != -1) {
    swift_once();
  }
  uint64_t v40 = type metadata accessor for Logger();
  sub_10000BEE4(v40, (uint64_t)qword_100181B00);
  sub_10006FFCC();
  v41();
  int v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = (uint8_t *)sub_10006FE08();
    uint64_t v54 = sub_100060438();
    *(_DWORD *)uint64_t v44 = 136315138;
    sub_10006F9A8((unint64_t *)&qword_10017DD50, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v53 = sub_100013090(v45, v46, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10006FEB8();
    v47();
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Truncated database at %s", v44, 0xCu);
    swift_arrayDestroy();
    sub_10000EB10();
    sub_10000EB10();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v0);
  }

  sqlite3_close_v2(ppDb);
}

void sub_100067444()
{
  sub_100018E30();
  uint64_t v54 = v1;
  int v52 = v2;
  unint64_t v4 = v3;
  uint64_t v6 = v5;
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v53 = type metadata accessor for Logger();
  sub_10000E948();
  uint64_t v51 = v7;
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v10);
  __chkstk_darwin(v11);
  unint64_t v13 = (char *)&v50 - v12;
  uint64_t v14 = (uint64_t)v0 + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_URL;
  uint64_t v15 = type metadata accessor for URL();
  sub_10000D5B0(v14, 1, 1, v15);
  uint64_t v16 = v0;
  os_log_type_t v17 = v54;
  uint64_t v18 = sub_100067A68(v6, v4, 1.0, 1, 1);
  sub_10006F9EC(v6, v4);
  if (v17) {
    goto LABEL_21;
  }
  uint64_t v19 = v51;
  uint64_t v50 = v14;
  uint64_t v54 = v16;
  if ((v52 & 1) == 0 && (sub_100067CC4() & 1) == 0)
  {
LABEL_6:
    uint64_t v24 = sub_10006804C();
    uint64_t v25 = v24;
    if (v26)
    {
      uint64_t v32 = v53;
      if (!v24)
      {
        if (qword_10017C368 != -1) {
          swift_once();
        }
        sub_10000BEE4(v32, (uint64_t)qword_100181B00);
        uint64_t v39 = (void *)Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.default.getter();
        if (sub_1000432F8(v40))
        {
          *(_WORD *)swift_slowAlloc() = 0;
          sub_10006FEFC((void *)&_mh_execute_header, v41, v42, "Found an empty database, resetting and writing schema");
          sub_10006FFB0();
        }

        sub_100068120(v18);
        goto LABEL_28;
      }
      sub_10006F244();
      sub_10006FD2C();
      *(void *)uint64_t v33 = 0;
      char v34 = 3;
    }
    else
    {
      uint64_t v27 = v53;
      if (v24 == 103)
      {
        if (qword_10017C368 != -1) {
          swift_once();
        }
        sub_10000BEE4(v27, (uint64_t)qword_100181B00);
        uint64_t v28 = (void *)Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.debug.getter();
        if (sub_1000432F8(v29))
        {
          *(_WORD *)swift_slowAlloc() = 0;
          sub_10006FEFC((void *)&_mh_execute_header, v30, v31, "Found an existing database matching the expected schema version");
          sub_10006FFB0();
        }

LABEL_28:
        os_log_type_t v43 = v54;
        *(void *)&v54[OBJC_IVAR____TtC10LinkDaemon13MetadataStore_connection] = v18;
        id v44 = objc_allocWithZone((Class)type metadata accessor for _LNMetadataProviderDirect());
        uint64_t v45 = swift_retain_n();
        *(void *)&v43[OBJC_IVAR____TtC10LinkDaemon13MetadataStore_provider] = sub_10009791C(v45);

        if (qword_10017C368 != -1) {
          swift_once();
        }
        sub_10000BEE4(v53, (uint64_t)qword_100181B00);
        unint64_t v46 = (void *)Logger.logObject.getter();
        os_log_type_t v47 = static os_log_type_t.debug.getter();
        if (sub_1000432F8(v47))
        {
          *(_WORD *)swift_slowAlloc() = 0;
          sub_10006FEFC((void *)&_mh_execute_header, v48, v49, "Metadata store database opened");
          sub_10006FFB0();
          swift_release();
        }
        else
        {

          swift_release();
        }
        v56.receiver = v43;
        v56.super_class = ObjectType;
        [super init:v50];
        goto LABEL_22;
      }
      if (qword_10017C368 != -1) {
        swift_once();
      }
      os_log_type_t v35 = sub_10000BEE4(v27, (uint64_t)qword_100181B00);
      unint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.default.getter();
      if (sub_1000432F8(v37))
      {
        uint64_t v38 = swift_slowAlloc();
        *(_DWORD *)uint64_t v38 = 134218240;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v38 + 12) = 2048;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v36, v35, "Found an existing database with a different schema version (found: %lld, expected: %ld)", (uint8_t *)v38, 0x16u);
        sub_10006FFB0();
      }

      sub_10006F244();
      sub_10006FD2C();
      *(void *)uint64_t v33 = v25;
      char v34 = 2;
    }
    *(unsigned char *)(v33 + 8) = v34;
    swift_willThrow();
    swift_release();
    uint64_t v16 = v54;
    uint64_t v14 = v50;
LABEL_21:
    sub_1000347E8(v14, (uint64_t *)&unk_10017D0C0);

    swift_deallocPartialClassInstance();
LABEL_22:
    sub_100018E80();
    return;
  }
  if (LNLogSubsystem)
  {
    String.init(cString:)();
    Logger.init(subsystem:category:)();
    uint64_t v20 = v19;
    uint64_t v21 = v53;
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))((char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v13, v53);
    unint64_t v22 = (*(unsigned __int8 *)(v19 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
    uint64_t v23 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v20 + 32))(v23 + v22, (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v21);
    Connection.trace(_:)(sub_10006FA84, v23);
    swift_release();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v13, v21);
    goto LABEL_6;
  }
  __break(1u);
}

uint64_t sub_100067A68(uint64_t a1, unint64_t a2, double a3, uint64_t a4, char a5)
{
  type metadata accessor for Connection();
  swift_allocObject();
  sub_10006FB04(a1, a2);
  uint64_t v10 = Connection.init(_:readonly:)(a1, a2, 0);
  uint64_t v11 = v5;
  if (!v5)
  {
    if (a5)
    {
      id v12 = [self processInfo];
      id v13 = [v12 environment];

      uint64_t v14 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
      sub_10001B6D0(0x5F454C4241534944, 0xEB000000004C4157, v14);
      uint64_t v16 = v15;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v16) {
        sub_1000FD74C();
      }
    }
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    v17._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._uint64_t countAndFlagsBits = 59;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    v19._uint64_t countAndFlagsBits = 0xD000000000000014;
    v19._object = (void *)0x8000000100144070;
    Connection.execute(_:)(v19);
    if (!v20)
    {
      swift_bridgeObjectRelease();
      Connection.busyTimeout.setter(a3);
      return v10;
    }
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v11 = v20;
  }
  sub_10006F244();
  swift_allocError();
  *(void *)uint64_t v21 = v11;
  *(unsigned char *)(v21 + 8) = 0;
  swift_willThrow();
  return v10;
}

uint64_t sub_100067CC4()
{
  id v0 = [self standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  sub_1000345B8((uint64_t)v10, (uint64_t)v11, &qword_10017D3A0);
  if (!v12)
  {
    sub_1000347E8((uint64_t)v11, &qword_10017D3A0);
    return 0;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  uint64_t v3 = v9;
  if (qword_10017C368 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10000BEE4(v4, (uint64_t)qword_100181B00);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 67109120;
    v11[0] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "traceDB = %{BOOL}d", v7, 8u);
    sub_10000EB10();
  }

  return v3;
}

void sub_100067EBC(uint64_t a1, unint64_t a2)
{
  swift_bridgeObjectRetain_n();
  oslog = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_bridgeObjectRetain();
    sub_100013090(a1, a2, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, "%s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_10006804C()
{
  uint64_t result = Connection.scalar(_:_:)(0xD000000000000013, 0x8000000100144050, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)&v3);
  if (!v0)
  {
    if (v4)
    {
      sub_10000D698(&v3, (uint64_t)v5);
      sub_10000BF1C(&qword_10017DEC8);
      swift_dynamicCast();
      uint64_t v2 = v6;
      if (v6)
      {
        if (sub_1000FD7E4()) {
          return v2;
        }
        else {
          return 1;
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100068120(uint64_t a1)
{
  uint64_t result = sub_10006C9F8(a1);
  if (v1)
  {
    type metadata accessor for Schema.RuntimeError();
    sub_10006F9A8((unint64_t *)&qword_10017DEA0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_10006FD0C();
    sub_10006FD44();
    sub_10006FE6C();
    swift_willThrow();
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_1000681B4()
{
  swift_retain();
  sub_10004E3A4();
  if (!v0) {
    return swift_release();
  }
  swift_release();
  type metadata accessor for Schema.RuntimeError();
  sub_10006F9A8((unint64_t *)&qword_10017DEA0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
  sub_10006FD0C();
  sub_10006FD44();
  sub_10006FE6C();
  swift_willThrow();
  return swift_errorRelease();
}

uint64_t sub_100068280(uint64_t a1)
{
  return sub_100068504(a1, (void (*)(uint64_t, uint64_t))sub_10004EDAC);
}

uint64_t sub_1000682AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  sub_10006FEE4();
  sub_1000898EC(a1, a2, a3, a4, (uint64_t)v12);
  swift_release();
  if (!v5) {
    return sub_1000345B8((uint64_t)v12, a5, &qword_10017E918);
  }
  type metadata accessor for Schema.RuntimeError();
  sub_10006F9A8((unint64_t *)&qword_10017DEA0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
  sub_10006FD0C();
  sub_10006FD44();
  sub_10006FE6C();
  swift_willThrow();
  return swift_errorRelease();
}

uint64_t sub_1000683B4(uint64_t a1, uint64_t a2)
{
  return sub_1000683E0(a1, a2, (void (*)(uint64_t))sub_100089C1C);
}

uint64_t sub_1000683E0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  sub_1000700A0();
  sub_10006FEE4();
  uint64_t v5 = sub_100070084();
  a3(v5);
  sub_10006FF84();
  swift_release();
  if (v3)
  {
    type metadata accessor for Schema.RuntimeError();
    sub_10006F9A8((unint64_t *)&qword_10017DEA0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_10006FD2C();
    sub_10006FF68();
    sub_100070164();
    swift_willThrow();
    swift_errorRelease();
  }
  return sub_100070094();
}

uint64_t sub_1000684AC()
{
  return sub_1000685F8((void (*)(uint64_t))sub_1000F9084);
}

uint64_t sub_1000684D8(uint64_t a1)
{
  return sub_100068504(a1, (void (*)(uint64_t, uint64_t))&sub_1000F9238);
}

uint64_t sub_100068504(uint64_t a1, void (*a2)(uint64_t, uint64_t))
{
  sub_10006FEE4();
  a2(a1, v3);
  sub_10006FF84();
  swift_release();
  if (v2)
  {
    type metadata accessor for Schema.RuntimeError();
    sub_10006F9A8((unint64_t *)&qword_10017DEA0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_10006FD2C();
    sub_10006FF68();
    sub_100070164();
    swift_willThrow();
    swift_errorRelease();
  }
  return sub_100070094();
}

uint64_t sub_1000685CC()
{
  return sub_1000685F8((void (*)(uint64_t))&sub_1000F9420);
}

uint64_t sub_1000685F8(void (*a1)(uint64_t))
{
  uint64_t v3 = sub_10006FEE4();
  a1(v3);
  sub_10006FF84();
  swift_release();
  if (v1)
  {
    type metadata accessor for Schema.RuntimeError();
    sub_10006F9A8((unint64_t *)&qword_10017DEA0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_10006FD2C();
    sub_10006FF68();
    sub_100070164();
    swift_willThrow();
    swift_errorRelease();
  }
  return sub_100070094();
}

uint64_t sub_1000686B4()
{
  sub_100068768(&v2);
  if (!v0) {
    return v2;
  }
  type metadata accessor for Schema.RuntimeError();
  sub_10006F9A8((unint64_t *)&qword_10017DEA0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
  sub_10006FD0C();
  sub_10006FD44();
  sub_10006FE6C();
  swift_willThrow();
  return swift_errorRelease();
}

uint64_t sub_100068768@<X0>(long long *a1@<X8>)
{
  Table.init(_:database:)(__src, 0x6769666E6F63, 0xE600000000000000, 0, 0);
  uint64_t v1 = sub_10000BF1C((uint64_t *)&unk_10017E920);
  uint64_t v2 = sub_10002A7B8((unint64_t *)&qword_10017D650, (uint64_t *)&unk_10017E920);
  ExpressionType.init(_:)(7955819, 0xE300000000000000, v1, v2);
  uint64_t v3 = sub_10000BF1C((uint64_t *)&unk_10017E930);
  uint64_t v4 = sub_10002A7B8(&qword_10017D658, (uint64_t *)&unk_10017E930);
  ExpressionType.init(_:)(0x65756C6176, 0xE500000000000000, v3, v4);
  swift_bridgeObjectRetain();
  uint64_t v5 = == infix<A>(_:_:)();
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19[3] = &type metadata for Table;
  v19[4] = &protocol witness table for Table;
  uint64_t v10 = swift_allocObject();
  uint64_t v11 = v10 + 16;
  v19[0] = v10;
  memcpy(__dst, __src, sizeof(__dst));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.filter(_:)(v5, v7, v9, v11);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  sub_10002A500(__src);
  uint64_t v12 = __src[23];
  uint64_t v13 = Connection.pluck(_:)(v19);
  if (v12)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_10000E788((uint64_t)v19);
  }
  else
  {
    uint64_t v15 = v13;
    sub_10000E788((uint64_t)v19);
    if (v15)
    {
      Row.get<A>(_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      long long v16 = *(_OWORD *)__dst;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      long long v16 = xmmword_10013D670;
    }
    *a1 = v16;
  }
  return result;
}

uint64_t sub_100068A78()
{
  uint64_t v1 = sub_1000700F4();
  uint64_t result = sub_100068B1C(v1, v2, v3, v4, v5);
  if (v0)
  {
    type metadata accessor for Schema.RuntimeError();
    sub_10006F9A8((unint64_t *)&qword_10017DEA0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_10006FD0C();
    sub_10006FD44();
    sub_10006FE6C();
    swift_willThrow();
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_100068B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Table.init(_:database:)(__src, 0x6769666E6F63, 0xE600000000000000, 0, 0);
  uint64_t v6 = sub_10000BF1C((uint64_t *)&unk_10017E920);
  uint64_t v7 = sub_10002A7B8((unint64_t *)&qword_10017D650, (uint64_t *)&unk_10017E920);
  ExpressionType.init(_:)(7955819, 0xE300000000000000, v6, v7);
  uint64_t v8 = __dst[0];
  uint64_t v9 = __dst[1];
  uint64_t v10 = __dst[2];
  uint64_t v11 = sub_10000BF1C((uint64_t *)&unk_10017E930);
  uint64_t v12 = sub_10002A7B8(&qword_10017D658, (uint64_t *)&unk_10017E930);
  ExpressionType.init(_:)(0x65756C6176, 0xE500000000000000, v11, v12);
  uint64_t v14 = __dst[0];
  uint64_t v13 = __dst[1];
  uint64_t v15 = __dst[2];
  sub_10000BF1C(&qword_10017E940);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013F1D0;
  __dst[0] = a2;
  __dst[1] = a3;
  <- infix<A>(_:_:)(v8, v9, v10, (uint64_t)__dst, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __dst[0] = a4;
  __dst[1] = a5;
  <- infix<A>(_:_:)(v14, v13, v15, (uint64_t)__dst, (uint64_t)&type metadata for Data, (uint64_t)&protocol witness table for Data);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  memcpy(__dst, __src, sizeof(__dst));
  AppIntents_SQLite::Insert v26 = QueryType.insert(or:_:)(AppIntents_SQLite_OnConflict_replace, (Swift::OpaquePointer)inited);
  uint64_t countAndFlagsBits = v26.template._countAndFlagsBits;
  object = v26.template._object;
  rawValue = v26.bindings._rawValue;
  swift_bridgeObjectRelease();
  sub_10002A500(__src);
  v27.template._uint64_t countAndFlagsBits = countAndFlagsBits;
  v27.template._object = object;
  v27.bindings._rawValue = rawValue;
  Connection.run(_:)(v27);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100068D5C(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 32) = a4;
  *(void *)(v5 + 40) = v4;
  *(unsigned char *)(v5 + 80) = a2;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a3;
  return _swift_task_switch(sub_100068D84, 0, 0);
}

uint64_t sub_100068D84()
{
  sub_100013E0C();
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v1 = *(void *)(v0 + 40);
  char v3 = *(unsigned char *)(v0 + 80);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 48) = v4;
  long long v5 = *(_OWORD *)(v0 + 16);
  *(void *)(v4 + 16) = v1;
  *(_OWORD *)(v4 + 24) = v5;
  *(void *)(v4 + 40) = v2;
  *(unsigned char *)(v4 + 48) = v3;
  uint64_t v8 = (uint64_t (*)(char, uint64_t, uint64_t))((char *)&dword_10017E960 + dword_10017E960);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100068E84;
  return v8(2, (uint64_t)&unk_10017E958, v4);
}

uint64_t sub_100068E84()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v3 = v2;
  sub_100060250();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 64) = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v6 = sub_100068FDC;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v6 = sub_100068F74;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_100068F74()
{
  sub_10006039C();
  if (*(void *)(v0 + 64)) {
    swift_willThrow();
  }
  sub_10000EB74();
  return v1();
}

uint64_t sub_100068FDC()
{
  sub_10000EC58();
  swift_task_dealloc();
  sub_10000EB74();
  return v0();
}

uint64_t sub_100069038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(unsigned char *)(v6 + 392) = a6;
  *(void *)(v6 + 232) = a4;
  *(void *)(v6 + 240) = a5;
  *(void *)(v6 + 216) = a2;
  *(void *)(v6 + 224) = a3;
  *(void *)(v6 + 208) = a1;
  sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  *(void *)(v6 + 248) = swift_task_alloc();
  sub_10000BF1C(&qword_10017F2A0);
  *(void *)(v6 + 256) = swift_task_alloc();
  *(void *)(v6 + 264) = type metadata accessor for LNBundleRecord();
  *(void *)(v6 + 272) = swift_task_alloc();
  *(void *)(v6 + 280) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  *(void *)(v6 + 288) = v7;
  *(void *)(v6 + 296) = *(void *)(v7 - 8);
  *(void *)(v6 + 304) = swift_task_alloc();
  return _swift_task_switch(sub_1000691A4, 0, 0);
}

uint64_t sub_1000691A4()
{
  uint64_t v1 = qword_10017C368;
  id v2 = *(id *)(v0 + 216);
  if (v1 == -1)
  {
    uint64_t v3 = v2;
  }
  else
  {
    swift_once();
    uint64_t v3 = *(void **)(v0 + 216);
  }
  uint64_t v5 = *(void *)(v0 + 296);
  uint64_t v4 = *(void *)(v0 + 304);
  uint64_t v6 = *(void *)(v0 + 224);
  sub_10000BEE4(*(void *)(v0 + 288), (uint64_t)qword_100181B00);
  (*(void (**)(uint64_t))(v5 + 16))(v4);

  sub_10000C0D4(v6, v0 + 16);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v11 = *(void *)(v0 + 296);
  uint64_t v10 = *(void *)(v0 + 304);
  uint64_t v12 = *(void *)(v0 + 288);
  if (v9)
  {
    uint64_t v122 = *(void *)(v0 + 304);
    uint64_t v13 = (uint8_t *)sub_10006FE08();
    sub_100060438();
    *(_DWORD *)uint64_t v13 = 136315138;
    sub_10000BEA0((void *)(v0 + 16), *(void *)(v0 + 40));
    sub_10006FED8();
    uint64_t v15 = v14();
    *(void *)(v0 + 200) = sub_1000701C8(v15, v16, v17, v18, v19, v20, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10000E788(v0 + 16);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "→ Beginning indexing transaction for %s", v13, 0xCu);
    swift_arrayDestroy();
    sub_10000EB10();
    sub_10000EB10();

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v122, v12);
  }
  else
  {
    sub_10000E788(v0 + 16);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }
  unint64_t v22 = *(void **)(v0 + 224);
  uint64_t v23 = *(void *)(*(void *)(v0 + 216) + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_connection);
  *(void *)(v0 + 312) = v23;
  uint64_t v24 = v22[4];
  sub_10000BEA0(v22, v22[3]);
  uint64_t v25 = *(void (**)(uint64_t))(*(void *)(v24 + 8) + 8);
  swift_retain();
  uint64_t v26 = sub_10007017C();
  v25(v26);
  sub_1000F95E8();
  uint64_t v30 = *(void *)(v0 + 256);
  uint64_t v29 = *(void *)(v0 + 264);
  swift_bridgeObjectRelease();
  int v31 = sub_10000D5D8(v30, 1, v29);
  if (v31 == 1)
  {
    uint64_t v32 = *(void *)(v0 + 224);
    sub_1000347E8(*(void *)(v0 + 256), &qword_10017F2A0);
    sub_10000C0D4(v32, v0 + 56);
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v33, v34))
    {
      os_log_type_t v35 = (uint8_t *)sub_10006FE08();
      sub_100060438();
      *(_DWORD *)os_log_type_t v35 = 136315138;
      sub_10000BEA0((void *)(v0 + 56), *(void *)(v0 + 80));
      sub_10006FED8();
      uint64_t v37 = v36();
      *(void *)(v0 + 184) = sub_1000701C8(v37, v38, v39, v40, v41, v42, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10000E788(v0 + 56);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Bundle record %s not found, creating", v35, 0xCu);
      sub_100070100();
      sub_10000EB10();
      sub_10000EB10();
    }
    else
    {
      sub_10000E788(v0 + 56);
    }

    uint64_t v74 = *(int **)(v0 + 264);
    uint64_t v73 = *(uint64_t **)(v0 + 272);
    uint64_t v75 = *(void *)(v0 + 248);
    uint64_t v76 = *(void **)(v0 + 224);
    sub_10000BEA0(v76, v22[3]);
    sub_10006FED8();
    uint64_t v78 = v77();
    uint64_t v123 = v79;
    uint64_t v81 = v22[3];
    uint64_t v80 = v22[4];
    sub_10000BEA0(v76, v81);
    (*(void (**)(uint64_t))(*(void *)(v80 + 8) + 16))(v81);
    uint64_t v82 = v22[3];
    sub_10000BEA0(v76, v82);
    sub_10007019C();
    uint64_t v84 = v83(v82);
    uint64_t v86 = v85;
    id v87 = [self latestMetadataVersion];
    *uint64_t v73 = v78;
    v73[1] = v123;
    sub_1000345B8(v75, (uint64_t)v73 + v74[5], (uint64_t *)&unk_10017D0C0);
    uint64_t v88 = (uint64_t *)((char *)v73 + v74[6]);
    *uint64_t v88 = v84;
    v88[1] = v86;
    *(uint64_t *)((char *)v73 + v74[7]) = 1;
    *(uint64_t *)((char *)v73 + v74[8]) = (uint64_t)v87;
    sub_1000F9C10();
    uint64_t v100 = (void *)swift_task_alloc();
    *(void *)(v0 + 368) = v100;
    *uint64_t v100 = v0;
    v100[1] = sub_100069FEC;
    uint64_t v101 = *(void *)(v0 + 272);
    goto LABEL_27;
  }
  uint64_t v44 = *(void *)(v0 + 280);
  uint64_t v45 = *(void *)(v0 + 264);
  unint64_t v46 = *(void **)(v0 + 224);
  sub_100027D2C(*(void *)(v0 + 256), v44);
  uint64_t v121 = v44 + *(int *)(v45 + 24);
  uint64_t v47 = v22[3];
  uint64_t v48 = v22[4];
  sub_10000BEA0(v46, v47);
  uint64_t v49 = *(void *)(v48 + 8);
  uint64_t v50 = *(uint64_t (**)(uint64_t, uint64_t))(v49 + 24);
  uint64_t v51 = sub_10007017C();
  sub_10000DADC(v51, v52);
  uint64_t v53 = v50(v47, v49);
  unint64_t v55 = v54;
  sub_10007017C();
  LOBYTE(v47) = static Data.== infix(_:_:)();
  sub_10000DA10(v53, v55);
  uint64_t v56 = sub_10007017C();
  sub_10000DA10(v56, v57);
  if ((v47 & 1) == 0)
  {
    sub_10000C0D4(*(void *)(v0 + 224), v0 + 136);
    uint64_t v89 = Logger.logObject.getter();
    os_log_type_t v90 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v89, v90))
    {
      uint64_t v91 = (uint8_t *)sub_10006FE08();
      sub_100060438();
      *(_DWORD *)uint64_t v91 = 136315138;
      sub_10000BEA0((void *)(v0 + 136), *(void *)(v0 + 160));
      sub_10006FED8();
      uint64_t v93 = v92();
      *(void *)(v0 + 176) = sub_1000701C8(v93, v94, v95, v96, v97, v98, v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10000E788(v0 + 136);
      _os_log_impl((void *)&_mh_execute_header, v89, v90, "%s installIdentifier changed, indexing", v91, 0xCu);
      sub_100070100();
      sub_10000EB10();
      sub_10000EB10();
    }
    else
    {
      sub_10000E788(v0 + 136);
    }

    uint64_t v104 = *(void *)(v0 + 280);
    uint64_t v105 = *(void *)(v0 + 264);
    uint64_t v106 = v22[3];
    sub_10000BEA0(*(void **)(v0 + 224), v106);
    sub_10007019C();
    uint64_t v108 = v107(v106);
    uint64_t v110 = v109;
    sub_10000DA10(*(void *)v121, *(void *)(v121 + 8));
    *(void *)uint64_t v121 = v108;
    *(void *)(v121 + 8) = v110;
    *(void *)(v104 + *(int *)(v105 + 28)) = 1;
    sub_1000F98F0();
    uint64_t v102 = (void *)swift_task_alloc();
    *(void *)(v0 + 344) = v102;
    *uint64_t v102 = v0;
    uint64_t v103 = sub_100069E3C;
LABEL_26:
    v102[1] = v103;
    uint64_t v101 = *(void *)(v0 + 280);
LABEL_27:
    uint64_t v111 = *(void *)(v0 + 232);
    uint64_t v112 = *(void *)(v0 + 240);
    uint64_t v113 = *(void *)(v0 + 216);
    uint64_t v114 = *(void *)(v0 + 224);
    return sub_10006A3DC(v101, v113, v114, v111, v112, v23);
  }
  uint64_t v58 = *(void *)(v0 + 280);
  int v59 = *(unsigned __int8 *)(v0 + 392);
  uint64_t v60 = *(int *)(*(void *)(v0 + 264) + 28);
  uint64_t v61 = *(void *)(v58 + v60);
  uint64_t result = sub_1000FA23C();
  if (v61 < result || v59)
  {
    if (__OFADD__(v61, 1))
    {
      __break(1u);
      return result;
    }
    *(void *)(v58 + v60) = v61 + 1;
    sub_1000F98F0();
    uint64_t v102 = (void *)swift_task_alloc();
    *(void *)(v0 + 320) = v102;
    *uint64_t v102 = v0;
    uint64_t v103 = sub_100069C8C;
    goto LABEL_26;
  }
  sub_10000C0D4(*(void *)(v0 + 224), v0 + 96);
  uint64_t v62 = Logger.logObject.getter();
  os_log_type_t v63 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v62, v63))
  {
    uint64_t v64 = (uint8_t *)sub_10006FE08();
    sub_100060438();
    *(_DWORD *)uint64_t v64 = 136315138;
    sub_10000BEA0((void *)(v0 + 96), *(void *)(v0 + 120));
    sub_10006FED8();
    uint64_t v66 = v65();
    *(void *)(v0 + 192) = sub_1000701C8(v66, v67, v68, v69, v70, v71, v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10000E788(v0 + 96);
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "Bundle record %s has failed indexing too frequently and has been blocked", v64, 0xCu);
    swift_arrayDestroy();
    sub_10000EB10();
    sub_10000EB10();
  }
  else
  {
    sub_10000E788(v0 + 96);
  }

  uint64_t v115 = *(void *)(v0 + 280);
  uint64_t v116 = *(void **)(v0 + 224);
  type metadata accessor for Schema.RuntimeError();
  sub_10006F9A8((unint64_t *)&qword_10017DEA0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
  swift_allocError();
  uint64_t v118 = v117;
  sub_10000BEA0(v116, v22[3]);
  sub_10006FED8();
  *uint64_t v118 = v119();
  v118[1] = v120;
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  swift_release();
  sub_10006F800(v115, (void (*)(void))type metadata accessor for LNBundleRecord);
  sub_10006FD60();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EB74();
  return v27();
}

uint64_t sub_100069C8C()
{
  sub_10006039C();
  uint64_t v3 = v2;
  sub_100010BAC();
  uint64_t v5 = v4;
  sub_100060250();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  sub_100060250();
  *os_log_type_t v8 = v7;
  *(void *)(v5 + 328) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 336) = v3;
  }
  sub_100070038();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_100069D7C()
{
  sub_100013E0C();
  uint64_t v1 = v0[42];
  uint64_t v2 = v0[35];
  uint64_t v3 = (void *)v0[26];
  swift_release();
  *uint64_t v3 = v1;
  sub_10006F800(v2, (void (*)(void))type metadata accessor for LNBundleRecord);
  sub_10006FD60();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100070028();
  return v4();
}

uint64_t sub_100069E3C()
{
  sub_10006039C();
  uint64_t v3 = v2;
  sub_100010BAC();
  uint64_t v5 = v4;
  sub_100060250();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  sub_100060250();
  *os_log_type_t v8 = v7;
  *(void *)(v5 + 352) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 360) = v3;
  }
  sub_100070038();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_100069F2C()
{
  sub_100013E0C();
  uint64_t v1 = v0[45];
  uint64_t v2 = v0[35];
  uint64_t v3 = (void *)v0[26];
  swift_release();
  *uint64_t v3 = v1;
  sub_10006F800(v2, (void (*)(void))type metadata accessor for LNBundleRecord);
  sub_10006FD60();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100070028();
  return v4();
}

uint64_t sub_100069FEC()
{
  sub_10006039C();
  uint64_t v3 = v2;
  sub_100010BAC();
  uint64_t v5 = v4;
  sub_100060250();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  sub_100060250();
  *os_log_type_t v8 = v7;
  *(void *)(v5 + 376) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 384) = v3;
  }
  sub_100070038();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_10006A0DC()
{
  sub_100013E0C();
  uint64_t v1 = v0[48];
  uint64_t v2 = v0[34];
  uint64_t v3 = (void *)v0[26];
  swift_release();
  sub_10006F800(v2, (void (*)(void))type metadata accessor for LNBundleRecord);
  *uint64_t v3 = v1;
  sub_10006FD60();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100070028();
  return v4();
}

uint64_t sub_10006A19C()
{
  sub_1000700D0();
  uint64_t v1 = *(void *)(v0 + 272);
  swift_release();
  sub_10006F800(v1, (void (*)(void))type metadata accessor for LNBundleRecord);
  sub_10006FDC8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EB74();
  return v2();
}

uint64_t sub_10006A25C()
{
  sub_1000700D0();
  uint64_t v1 = *(void *)(v0 + 280);
  swift_release();
  sub_10006F800(v1, (void (*)(void))type metadata accessor for LNBundleRecord);
  sub_10006FDC8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EB74();
  return v2();
}

uint64_t sub_10006A31C()
{
  sub_1000700D0();
  uint64_t v1 = *(void *)(v0 + 280);
  swift_release();
  sub_10006F800(v1, (void (*)(void))type metadata accessor for LNBundleRecord);
  sub_10006FDC8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EB74();
  return v2();
}

uint64_t sub_10006A3DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[23] = a5;
  v6[24] = a6;
  v6[21] = a3;
  v6[22] = a4;
  v6[19] = a1;
  v6[20] = a2;
  v6[25] = type metadata accessor for LNBundleRecord();
  v6[26] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v6[27] = v7;
  v6[28] = *(void *)(v7 - 8);
  v6[29] = swift_task_alloc();
  return _swift_task_switch(sub_10006A4D4, 0, 0);
}

uint64_t sub_10006A4D4()
{
  uint64_t v23 = v0;
  uint64_t v1 = qword_10017C368;
  id v2 = *(id *)(v0 + 160);
  if (v1 == -1)
  {
    uint64_t v3 = v2;
  }
  else
  {
    swift_once();
    uint64_t v3 = *(void **)(v0 + 160);
  }
  uint64_t v5 = *(void *)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 232);
  uint64_t v6 = *(void *)(v0 + 216);
  uint64_t v7 = *(void *)(v0 + 168);
  uint64_t v8 = sub_10000BEE4(v6, (uint64_t)qword_100181B00);
  *(void *)(v0 + 240) = v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v8, v6);

  sub_10000C0D4(v7, v0 + 16);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  BOOL v11 = os_log_type_enabled(v9, v10);
  uint64_t v13 = *(void *)(v0 + 224);
  uint64_t v12 = *(void *)(v0 + 232);
  uint64_t v14 = *(void *)(v0 + 216);
  if (v11)
  {
    uint64_t v15 = (uint8_t *)sub_10006FE08();
    uint64_t v22 = sub_100060438();
    *(_DWORD *)uint64_t v15 = 136315138;
    sub_10000BEA0((void *)(v0 + 16), *(void *)(v0 + 40));
    sub_10006FED8();
    uint64_t v17 = v16();
    *(void *)(v0 + 144) = sub_100013090(v17, v18, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10000E788(v0 + 16);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Calling transaction block for %s", v15, 0xCu);
    swift_arrayDestroy();
    sub_10000EB10();
    sub_10000EB10();

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  }
  else
  {
    sub_10000E788(v0 + 16);

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  }
  uint64_t v21 = (uint64_t (*)(void))(*(void *)(v0 + 176) + **(int **)(v0 + 176));
  uint64_t v19 = (void *)swift_task_alloc();
  *(void *)(v0 + 248) = v19;
  void *v19 = v0;
  v19[1] = sub_10006A794;
  return v21();
}

uint64_t sub_10006A794()
{
  sub_10000EC58();
  sub_100010BAC();
  sub_100060250();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_100060250();
  *uint64_t v5 = v4;
  *(void *)(v6 + 256) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v7 = sub_10006AB00;
  }
  else {
    uint64_t v7 = sub_10006A878;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_10006A878()
{
  uint64_t v14 = v0;
  sub_10000C0D4(v0[21], (uint64_t)(v0 + 7));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)sub_10006FE08();
    uint64_t v13 = sub_100060438();
    *(_DWORD *)uint64_t v3 = 136315138;
    sub_10000BEA0(v0 + 7, v0[10]);
    sub_10006FED8();
    uint64_t v5 = v4();
    v0[17] = sub_100013090(v5, v6, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10000E788((uint64_t)(v0 + 7));
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Transaction succeeded for %s, resetting attemptedIndexCount", v3, 0xCu);
    swift_arrayDestroy();
    sub_10000EB10();
    sub_10000EB10();
  }
  else
  {
    sub_10000E788((uint64_t)(v0 + 7));
  }

  uint64_t v7 = v0[32];
  uint64_t v9 = v0[25];
  uint64_t v8 = v0[26];
  sub_10006F6F8(v0[19], v8, (void (*)(void))type metadata accessor for LNBundleRecord);
  *(void *)(v8 + *(int *)(v9 + 28)) = 0;
  sub_1000F98F0();
  if (v7)
  {
    sub_10006F800(v0[26], (void (*)(void))type metadata accessor for LNBundleRecord);
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
  else
  {
    sub_10006F800(v0[26], (void (*)(void))type metadata accessor for LNBundleRecord);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12(0);
  }
}

uint64_t sub_10006AB00()
{
  os_log_type_t v10 = v0;
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = sub_100060438();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    v0[15] = sub_100013090(v4, v5, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Transaction failed due to error: %s", v3, 0xCu);
    swift_arrayDestroy();
    sub_10000EB10();
    sub_10000EB10();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v6 = v0[32];
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(uint64_t))v0[1];
  return v7(v6);
}

uint64_t sub_10006ACD4(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 32) = a3;
  *(void *)(v4 + 40) = v3;
  *(void *)(v4 + 24) = a2;
  *(unsigned char *)(v4 + 64) = a1;
  return _swift_task_switch(sub_10006ACFC, 0, 0);
}

uint64_t sub_10006ACFC()
{
  sub_1000700D0();
  int v1 = *(unsigned __int8 *)(v0 + 64);
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  uint64_t v2 = 0x54414944454D4D49;
  if (v1 != 1) {
    uint64_t v2 = 0x564953554C435845;
  }
  if (v1) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0x4445525245464544;
  }
  if (v1) {
    unint64_t v4 = 0xE900000000000045;
  }
  else {
    unint64_t v4 = 0xE800000000000000;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 0x4341534E41525420;
  v6._object = (void *)0xEC0000004E4F4954;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = 0x204E49474542;
  v7._object = (void *)0xE600000000000000;
  Connection.execute(_:)(v7);
  if (v8)
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
  else
  {
    uint64_t v11 = *(int **)(v0 + 24);
    swift_bridgeObjectRelease();
    uint64_t v13 = (uint64_t (*)(uint64_t))((char *)v11 + *v11);
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 48) = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_10006AF14;
    return v13(v0 + 16);
  }
}

uint64_t sub_10006AF14()
{
  sub_10000EC58();
  sub_100010BAC();
  sub_100060250();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_100060250();
  *unint64_t v5 = v4;
  *(void *)(v6 + 56) = v0;
  swift_task_dealloc();
  if (v0) {
    Swift::String v7 = sub_10006B110;
  }
  else {
    Swift::String v7 = sub_10006AFF8;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_10006AFF8()
{
  sub_100013E0C();
  sub_100018F2C();
  v1._uint64_t countAndFlagsBits = 0xD000000000000012;
  Connection.execute(_:)(v1);
  uint64_t v2 = *(void *)(v0 + 16);
  if (v3)
  {
    swift_errorRelease();
    sub_100018F2C();
    Connection.execute(_:)(v4);
    if (v5) {
      swift_errorRelease();
    }
    else {
      swift_willThrow();
    }
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
  else
  {
    uint64_t v6 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v6(v2);
  }
}

uint64_t sub_10006B110()
{
  sub_10006039C();
  sub_100018F2C();
  v1._uint64_t countAndFlagsBits = 0xD000000000000014;
  Connection.execute(_:)(v1);
  if (v2) {
    swift_errorRelease();
  }
  else {
    swift_willThrow();
  }
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_10006B1B0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5, char a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, unint64_t a15, unint64_t a16, unint64_t a17, unint64_t a18, unint64_t a19, unint64_t a20)
{
  sub_10004BBAC(a1, (unint64_t)a2, a8, a12, a15);
  sub_10006B350(v31, a1, a2, a3, a4, a5, a7, a8, a6, a12, a9, a10, a11, v23, v24, a13, a14, a15, a16,
    a17,
    a18,
    a19,
    a20);
  if (v34)
  {
    type metadata accessor for Schema.RuntimeError();
    sub_10006F9A8((unint64_t *)&qword_10017DEA0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_10006FD2C();
    uint64_t v26 = v25;
    swift_errorRetain();
    sub_100100D40(v34, v26);
    swift_willThrow();
    swift_errorRelease();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10006B350(char *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, char a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, unint64_t a18, unint64_t a19, unint64_t a20,unint64_t a21,unint64_t a22,unint64_t a23)
{
  unint64_t v54 = a8;
  uint64_t v55 = a7;
  unint64_t v56 = a6;
  uint64_t v61 = a4;
  uint64_t v28 = (int *)type metadata accessor for LNBundleRecord();
  __chkstk_darwin(v28);
  uint64_t v30 = (uint64_t *)((char *)&v53 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v31 = *(void *)&a1[OBJC_IVAR____TtC10LinkDaemon13MetadataStore_connection];
  swift_retain_n();
  sub_10000BF1C((uint64_t *)&unk_10017E690);
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_10013EF20;
  *(void *)(v32 + 32) = a2;
  *(void *)(v32 + 40) = a3;
  swift_retain_n();
  swift_bridgeObjectRetain();
  sub_10006BA30();
  if (v23)
  {
    swift_release_n();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  sub_10006F758(v61, (uint64_t)v30 + v28[5]);
  *uint64_t v30 = a2;
  v30[1] = (uint64_t)a3;
  uint64_t v34 = (uint64_t *)((char *)v30 + v28[6]);
  uint64_t v35 = v55;
  unint64_t v36 = v56;
  *uint64_t v34 = a5;
  v34[1] = v36;
  *(uint64_t *)((char *)v30 + v28[7]) = 0;
  *(uint64_t *)((char *)v30 + v28[8]) = v35;
  swift_bridgeObjectRetain();
  sub_10000DADC(a5, v36);
  sub_1000F9C10();
  uint64_t v37 = a3;
  uint64_t v38 = sub_10006F800((uint64_t)v30, (void (*)(void))type metadata accessor for LNBundleRecord);
  __chkstk_darwin(v38);
  *(&v53 - 4) = v31;
  *(&v53 - 3) = a2;
  uint64_t v39 = v61;
  *(&v53 - 2) = (uint64_t)a3;
  *(&v53 - 1) = v39;
  sub_100064410((void (*)(id *))sub_10006F7C0, (uint64_t)(&v53 - 6), v54);
  uint64_t v40 = a2;
  if (a9 != 2)
  {
    if (a10 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v49 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v49) {
        goto LABEL_11;
      }
    }
    else if (!*(void *)((a10 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_11;
    }
    *(void *)&long long v57 = a2;
    *((void *)&v57 + 1) = v37;
    uint64_t v58 = a11;
    uint64_t v59 = a12;
    uint64_t v60 = a13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000FCDBC(&v57);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_100064520(a10, v31, a2, v37);
    uint64_t v41 = *(void *)(a14 + 16);
    if (v41)
    {
      uint64_t v42 = v37;
      uint64_t v43 = *(void *)(type metadata accessor for LNAppShortcutParameterRecord() - 8);
      uint64_t v44 = a14 + ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80));
      uint64_t v45 = *(void *)(v43 + 72);
      swift_bridgeObjectRetain();
      do
      {
        sub_10004DB1C();
        v44 += v45;
        --v41;
      }
      while (v41);
      swift_bridgeObjectRelease();
      uint64_t v37 = v42;
    }
    swift_retain();
    sub_1000648C0(a15, v31);
  }
LABEL_11:
  __chkstk_darwin(a16);
  *(&v53 - 4) = v31;
  *(&v53 - 3) = v40;
  *(&v53 - 2) = (uint64_t)v37;
  sub_100064A5C(v46, (void (*)(id, uint64_t, uint64_t))sub_10006F7E0);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_100064C48(a17, v31, v40, v37);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_100064FEC(a18, a1, v31, v40, v37);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_100065158(a19, v31, v40, v37);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1000642BC(a20, v31, v40, v37);
  if (!(a21 >> 62))
  {
    if (!*(void *)((a21 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  uint64_t v50 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v50)
  {
LABEL_13:
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1000654FC(a21, v31, v40, v37);
  }
LABEL_14:
  if (a22 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v51) {
      goto LABEL_16;
    }
  }
  else if (*(void *)((a22 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_16:
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v47 = v40;
    uint64_t v48 = v37;
    sub_10006589C(a22, v31, v40, v37);
    goto LABEL_23;
  }
  uint64_t v47 = v40;
  uint64_t v48 = v37;
LABEL_23:
  if (a23 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v52 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v52) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (*(void *)((a23 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_25:
    swift_retain();
    swift_bridgeObjectRetain();
    sub_100065C3C(a23, v31, v47, v48);
  }
LABEL_26:
  swift_release_n();
  return swift_release_n();
}

uint64_t sub_10006BA30()
{
  return swift_release();
}

uint64_t sub_10006BA80(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for LNActionRecord();
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (uint64_t *)((char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = *a1;
  sub_10006F758(a5, (uint64_t)v11);
  swift_bridgeObjectRetain();
  sub_10004465C(a3, a4, (uint64_t)v11, v15, v14);
  sub_100047508(v14);
  return sub_10006F800((uint64_t)v14, (void (*)(void))type metadata accessor for LNActionRecord);
}

uint64_t sub_10006BBC4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_bridgeObjectRetain();
  id v11 = [a1 identifier];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  *(void *)&long long v16 = a5;
  *((void *)&v16 + 1) = a6;
  uint64_t v17 = v12;
  uint64_t v18 = v14;
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  swift_bridgeObjectRetain();
  sub_100085208(&v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_10006BC9C(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a3;
  uint64_t v15 = a5;
  sub_100102D14(v14, a4);
  if (v5)
  {
    uint64_t v53 = v5;
    swift_errorRetain();
    sub_10000BF1C(&qword_10017C810);
    if (swift_dynamicCast())
    {
      uint64_t v44 = v10;
      uint64_t v45 = a4;
      uint64_t v46 = a5;
      swift_errorRelease();
      uint64_t v16 = v49;
      uint64_t v17 = v50;
      int v18 = v51;
      uint64_t v19 = v52;
      if (v51 == 19)
      {
        uint64_t v42 = v49;
        uint64_t v43 = v52;
        uint64_t v20 = qword_10017C368;
        id v21 = a1;
        if (v20 != -1) {
          swift_once();
        }
        uint64_t v22 = v44;
        uint64_t v23 = sub_10000BEE4(v44, (uint64_t)qword_100181B00);
        uint64_t v24 = v11;
        (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v23, v22);

        uint64_t v25 = v43;
        swift_retain_n();
        uint64_t v26 = v17;
        swift_bridgeObjectRetain_n();
        AppIntents_SQLite::Insert v27 = Logger.logObject.getter();
        os_log_type_t v28 = static os_log_type_t.debug.getter();
        int v29 = v28;
        if (os_log_type_enabled(v27, v28))
        {
          uint64_t v30 = swift_slowAlloc();
          os_log_t v39 = v27;
          uint64_t v31 = v25;
          uint64_t v32 = v30;
          uint64_t v40 = swift_slowAlloc();
          uint64_t v48 = v40;
          *(_DWORD *)uint64_t v32 = 136315394;
          int v38 = v29;
          uint64_t v47 = sub_100013090(0xD00000000000002ELL, 0x8000000100144000, &v48);
          uint64_t v41 = v24;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v32 + 12) = 2080;
          uint64_t v37 = v32 + 14;
          uint64_t v33 = Result.description.getter(v42, v26, 19, v31);
          uint64_t v47 = sub_100013090(v33, v34, &v48);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          os_log_t v35 = v39;
          _os_log_impl((void *)&_mh_execute_header, v39, (os_log_type_t)v38, "%s ignoring error: %s", (uint8_t *)v32, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_release();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v41 + 8))(v13, v22);
        }
        else
        {

          swift_release_n();
          swift_bridgeObjectRelease_n();
          (*(void (**)(char *, uint64_t))(v24 + 8))(v13, v22);
        }
        swift_errorRelease();
        swift_release();
        uint64_t v15 = v46;
        goto LABEL_13;
      }
      sub_100047E58();
      swift_allocError();
      *(void *)uint64_t v36 = v16;
      *(void *)(v36 + 8) = v17;
      *(_DWORD *)(v36 + 16) = v18;
      *(void *)(v36 + 24) = v19;
      swift_willThrow();
      uint64_t v15 = v46;
    }
    swift_errorRelease();
    swift_bridgeObjectRelease();
    swift_release();

    return;
  }
  swift_release();
LABEL_13:

  swift_bridgeObjectRelease();
}

uint64_t sub_10006C0F0()
{
  sub_10006FEA4();
  uint64_t v7 = v0;
  uint64_t v8 = v4;
  uint64_t v9 = v3;
  uint64_t v10 = v2;
  uint64_t v11 = v1;
  uint64_t ObjectType = swift_getObjectType();
  return Connection.transaction(_:block:)(0, (void (*)(uint64_t))sub_10006F984, (uint64_t)&v6);
}

uint64_t sub_10006C17C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for Logger();
  __chkstk_darwin(v9);
  uint64_t result = sub_10006C508();
  if (!v5) {
    return sub_10006C5A4(a1, a4, a5);
  }
  return result;
}

uint64_t sub_10006C508()
{
  uint64_t v1 = sub_1000700F4();
  uint64_t result = sub_10006C74C(v1, v2, v3);
  if (v0)
  {
    type metadata accessor for Schema.RuntimeError();
    sub_10006F9A8((unint64_t *)&qword_10017DEA0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_10006FD0C();
    sub_10006FD44();
    sub_10006FE6C();
    swift_willThrow();
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_10006C5A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_connection);
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6)
  {
    uint64_t v8 = *(void *)(type metadata accessor for LNAppShortcutParameterRecord() - 8);
    uint64_t v9 = a2 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    swift_retain();
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_10004DB1C();
      if (v3) {
        break;
      }
      v9 += v10;
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    return swift_release();
  }
  swift_retain();
LABEL_7:
  uint64_t v11 = *(void *)(a3 + 16);
  if (!v11) {
    return swift_release();
  }
  swift_retain();
  swift_bridgeObjectRetain();
  for (uint64_t i = 32; ; i += 104)
  {
    memcpy(__dst, (const void *)(a3 + i), sizeof(__dst));
    sub_10000D708((uint64_t)__dst);
    sub_100089EE0((uint64_t)__dst, v5);
    if (v3) {
      break;
    }
    sub_10000D790((uint64_t)__dst);
    if (!--v11)
    {
      swift_release_n();
      return swift_bridgeObjectRelease();
    }
  }
  swift_release_n();
  swift_bridgeObjectRelease();
  return sub_10000D790((uint64_t)__dst);
}

uint64_t sub_10006C74C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_retain();
  sub_10004E1E4();
  uint64_t result = swift_release();
  if (!v3)
  {
    swift_retain();
    sub_10002A1B0();
    swift_release();
    uint64_t v7 = qword_10017C3C8;
    swift_retain();
    if (v7 != -1) {
      swift_once();
    }
    memcpy(__dst, &unk_10017EF58, sizeof(__dst));
    sub_10002A390(__dst);
    if (qword_10017C3D8 != -1) {
      swift_once();
    }
    __src[0] = a2;
    __src[1] = a3;
    uint64_t v8 = == infix<A>(_:_:)();
    uint64_t v10 = v9;
    uint64_t v12 = v11;
    memcpy(v17, __dst, sizeof(v17));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    QueryType.filter(_:)(v8, v10, v12, (uint64_t)__src);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    sub_10002A500(__dst);
    memcpy(v20, __src, 0xA8uLL);
    memcpy(v17, __src, sizeof(v17));
    AppIntents_SQLite::Delete v21 = QueryType.delete()();
    uint64_t countAndFlagsBits = v21.template._countAndFlagsBits;
    object = v21.template._object;
    rawValue = v21.bindings._rawValue;
    sub_10002A500(v20);
    v22.template._uint64_t countAndFlagsBits = countAndFlagsBits;
    v22.template._object = object;
    v22.bindings._rawValue = rawValue;
    Connection.run(_:)(v22);
    if (v16)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_retain();
      sub_10005A3D8(a2, a3);
      return swift_release_n();
    }
  }
  return result;
}

uint64_t sub_10006C9F8(uint64_t a1)
{
  sub_10000BF1C((uint64_t *)&unk_10017E690);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013FF80;
  *(void *)(inited + 32) = 0x736E6F69746361;
  *(void *)(inited + 40) = 0xE700000000000000;
  *(void *)(inited + 48) = 0xD000000000000012;
  *(void *)(inited + 56) = 0x80000001001433D0;
  *(void *)(inited + 64) = 0x6E61747369737361;
  *(void *)(inited + 72) = 0xEF746E65746E4974;
  *(void *)(inited + 80) = 0xD00000000000001ELL;
  *(void *)(inited + 88) = 0x8000000100143F20;
  *(void *)(inited + 96) = 0x73656C646E7562;
  *(void *)(inited + 104) = 0xE700000000000000;
  *(void *)(inited + 112) = 0x6769666E6F63;
  *(void *)(inited + 120) = 0xE600000000000000;
  *(void *)(inited + 128) = 0xD00000000000001ELL;
  *(void *)(inited + 136) = 0x8000000100143F40;
  *(void *)(inited + 144) = 0x7365697469746E65;
  *(void *)(inited + 152) = 0xE800000000000000;
  strcpy((char *)(inited + 160), "examplePhrases");
  *(unsigned char *)(inited + 175) = -18;
  *(void *)(inited + 176) = 0x73656972657571;
  *(void *)(inited + 184) = 0xE700000000000000;
  *(void *)(inited + 192) = 0x736D756E65;
  *(void *)(inited + 200) = 0xE500000000000000;
  *(void *)(inited + 208) = 0xD000000000000019;
  *(void *)(inited + 216) = 0x8000000100143F60;
  strcpy((char *)(inited + 224), "appShortcuts");
  *(unsigned char *)(inited + 237) = 0;
  *(_WORD *)(inited + 238) = -5120;
  *(void *)(inited + 240) = 0xD000000000000015;
  *(void *)(inited + 248) = 0x8000000100143AE0;
  *(void *)(inited + 256) = 0xD000000000000010;
  *(void *)(inited + 264) = 0x8000000100143320;
  *(void *)(inited + 272) = 0xD000000000000010;
  *(void *)(inited + 280) = 0x8000000100143F80;
  *(void *)(inited + 288) = 0x746E6176656C6572;
  *(void *)(inited + 296) = 0xEF73746E65746E49;
  *(void *)(inited + 304) = 0xD000000000000010;
  *(void *)(inited + 312) = 0x8000000100143FA0;
  *(void *)(inited + 320) = 0xD000000000000017;
  *(void *)(inited + 328) = 0x8000000100143C20;
  v4[2] = inited;
  v4[3] = a1;
  Connection.transaction(_:block:)(0, (void (*)(uint64_t))sub_10006F228, (uint64_t)v4);
  swift_setDeallocating();
  return sub_10006F1EC();
}

void sub_10006CC74(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v12 = swift_bridgeObjectRetain();
    uint64_t v4 = (uint64_t *)(v12 + 40);
    while (1)
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      Table.init(_:database:)(__src, v5, v6, 0, 0);
      memcpy(__dst, __src, sizeof(__dst));
      Swift::String v7 = SchemaType.drop(ifExists:)(1);
      sub_10002A500(__src);
      Connection.run(_:_:)(v7._countAndFlagsBits, (uint64_t)v7._object, (uint64_t)_swiftEmptyArrayStorage);
      if (v2) {
        break;
      }
      v4 += 2;
      swift_bridgeObjectRelease();
      swift_release();
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_6:
    if (qword_10017C570 != -1) {
      swift_once();
    }
    Connection.execute(_:)((Swift::String)xmmword_1001823D8);
    if (v8)
    {
      sub_10006F244();
      swift_allocError();
      *(void *)uint64_t v9 = v8;
      *(unsigned char *)(v9 + 8) = 1;
      swift_willThrow();
    }
  }
}

uint64_t sub_10006CE2C(uint64_t a1)
{
  return sub_100068120(*(void *)(a1 + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_connection));
}

uint64_t sub_10006CE50()
{
  sub_1000700A0();
  sub_10000BF1C((uint64_t *)&unk_10017E690);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_10013EF20;
  *(void *)(v3 + 32) = v2;
  *(void *)(v3 + 40) = v1;
  swift_bridgeObjectRetain();
  sub_10006CF40(v3);
  if (!v0) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  type metadata accessor for Schema.RuntimeError();
  sub_10006F9A8((unint64_t *)&qword_10017DEA0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
  sub_10006FD0C();
  sub_10006FD44();
  sub_10006FE6C();
  swift_willThrow();
  return swift_errorRelease();
}

uint64_t sub_10006CF40(uint64_t a1)
{
  v3[3] = a1;
  uint64_t result = Connection.transaction(_:block:)(0, (void (*)(uint64_t))sub_10006F290, (uint64_t)v3);
  if (v1)
  {
    type metadata accessor for Schema.RuntimeError();
    sub_10006F9A8((unint64_t *)&qword_10017DEA0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_10006FD0C();
    sub_10006FD44();
    sub_10006FE6C();
    swift_willThrow();
    return swift_errorRelease();
  }
  return result;
}

void sub_10006D00C()
{
}

uint64_t sub_10006D0B0()
{
  return type metadata accessor for MetadataStore();
}

uint64_t type metadata accessor for MetadataStore()
{
  uint64_t result = qword_10017E890;
  if (!qword_10017E890) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10006D100()
{
  sub_100048AF4();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

double sub_10006D1AC()
{
  id v0 = [self standardUserDefaults];
  sub_100018F2C();
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_1000345B8((uint64_t)v9, (uint64_t)v10, &qword_10017D3A0);
  if (!v10[3])
  {
    sub_1000347E8((uint64_t)v10, &qword_10017D3A0);
    return 300.0;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    return 300.0;
  }
  if (qword_10017C368 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10000BEE4(v3, (uint64_t)qword_100181B00);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 134217984;
    v10[0] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Using user defined audit delay %lds", v6, 0xCu);
    sub_10000EB10();
  }

  return (double)v8;
}

void sub_10006D3A8()
{
  id v1 = *(id *)(v0 + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_provider);
  sub_100070000();
  sub_1000987F0();
}

uint64_t sub_10006D400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006E410(a1, a2, a3, a4, (uint64_t (*)(id, id, uint64_t, uint64_t, uint64_t, uint64_t))sub_100098D90);
}

uint64_t sub_10006D944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006E410(a1, a2, a3, a4, (uint64_t (*)(id, id, uint64_t, uint64_t, uint64_t, uint64_t))sub_10009A83C);
}

void sub_10006D970()
{
  id v1 = *(void **)(v0 + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_provider);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v2 = v1;
  sub_100098850();
}

void sub_10006DB4C()
{
  id v1 = *(id *)(v0 + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_provider);
  swift_bridgeObjectRetain();
  sub_100098D30();
}

void sub_10006DCB8()
{
  id v1 = *(id *)(v0 + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_provider);
  sub_100070000();
  sub_100099D94();
}

void sub_10006DDAC()
{
  id v1 = *(id *)(v0 + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_provider);
  sub_100070000();
  sub_10009AC60();
}

void sub_10006DEB4()
{
  id v1 = *(id *)(v0 + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_provider);
  sub_100070000();
  sub_10009B134();
}

void sub_10006DF0C()
{
  sub_10006FEA4();
  id v1 = *(void **)(v0 + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_provider);
  swift_bridgeObjectRetain();
  v1;
  swift_bridgeObjectRetain();
  sub_10006FF2C();
  sub_10009B194();
}

uint64_t sub_10006E0A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006E410(a1, a2, a3, a4, (uint64_t (*)(id, id, uint64_t, uint64_t, uint64_t, uint64_t))sub_10009B6CC);
}

void sub_10006E0CC()
{
  id v1 = *(id *)(v0 + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_provider);
  sub_100070000();
  sub_10009B740();
}

Class sub_10006E14C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(id, id, uint64_t, uint64_t), unint64_t *a6)
{
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;
  id v12 = a1;
  sub_10006E7BC(v9, v11, a5);
  swift_bridgeObjectRelease();

  sub_10000D9D4(0, a6);
  sub_1000700F4();
  v13.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();

  return v13.super.isa;
}

uint64_t sub_10006E254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006E410(a1, a2, a3, a4, (uint64_t (*)(id, id, uint64_t, uint64_t, uint64_t, uint64_t))sub_10009B7A0);
}

void sub_10006E280()
{
  id v1 = *(id *)(v0 + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_provider);
  sub_100070000();
  sub_10009BE8C();
}

Class sub_10006E2D8(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t *a5)
{
  id v7 = a1;
  a4();

  sub_10000BF1C(a5);
  v8.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();

  return v8.super.isa;
}

uint64_t sub_10006E3E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006E410(a1, a2, a3, a4, (uint64_t (*)(id, id, uint64_t, uint64_t, uint64_t, uint64_t))sub_10009BEEC);
}

uint64_t sub_10006E410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(id, id, uint64_t, uint64_t, uint64_t, uint64_t))
{
  id v11 = *(id *)(v5 + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_provider);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a5(v11, v11, a1, a2, a3, a4);
}

uint64_t sub_10006E49C(uint64_t a1, uint64_t a2, uint64_t (*a3)(id, id, uint64_t, uint64_t))
{
  sub_1000700A0();
  id v7 = *(void **)(v3 + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_provider);
  swift_bridgeObjectRetain();
  id v8 = v7;
  return a3(v8, v8, v5, v4);
}

Class sub_10006E514(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(id, id, uint64_t, uint64_t))
{
  if (a3)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  id v10 = a1;
  sub_10006E49C(v7, v9, a5);

  swift_bridgeObjectRelease();
  v11.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();

  return v11.super.isa;
}

id sub_10006E614(uint64_t a1, uint64_t a2, void *a3)
{
  return _LNMetadataProviderDirect.metadataVersion(forBundleIdentifier:error:)(a1, a2, a3);
}

uint64_t sub_10006E6A8(uint64_t a1, uint64_t a2)
{
  return _LNMetadataProviderDirect.appShortcutsProviderMangledTypeName(forBundleIdentifier:)(*(Swift::String *)&a1)._countAndFlagsBits;
}

uint64_t sub_10006E7BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(id, id, uint64_t, uint64_t))
{
  sub_1000700A0();
  id v7 = *(id *)(v3 + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_provider);
  swift_bridgeObjectRetain();
  return a3(v7, v7, v5, v4);
}

uint64_t sub_10006E84C(uint64_t a1, uint64_t a2)
{
  sub_10006E8F8(a1, a2, &v4);
  if (!v2) {
    return v4;
  }
  type metadata accessor for Schema.RuntimeError();
  sub_10006F9A8((unint64_t *)&qword_10017DEA0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
  sub_10006FD0C();
  sub_10006FD44();
  sub_10006FE6C();
  swift_willThrow();
  return swift_errorRelease();
}

uint64_t sub_10006E8F8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  swift_retain();
  uint64_t v7 = sub_1000FEB78(a1, a2);
  uint64_t result = swift_release();
  if (!v3)
  {
    uint64_t v9 = *(void *)(v7 + 16);
    if (v9)
    {
      uint64_t v43 = 0;
      uint64_t v44 = (uint64_t)a3;
      swift_bridgeObjectRetain();
      id v10 = _swiftEmptyDictionarySingleton;
      uint64_t v11 = 32;
      uint64_t v45 = v7;
      while (1)
      {
        long long v13 = *(_OWORD *)(v7 + v11 + 16);
        long long v12 = *(_OWORD *)(v7 + v11 + 32);
        long long v14 = *(_OWORD *)(v7 + v11);
        uint64_t v50 = *(void *)(v7 + v11 + 48);
        long long v48 = v13;
        long long v49 = v12;
        long long v47 = v14;
        long long v15 = v13;
        sub_10006F8A4((uint64_t)&v47);
        swift_bridgeObjectRetain();
        id v16 = sub_1000538BC();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v24 = sub_100021098(v15, *((uint64_t *)&v15 + 1), v18, v19, v20, v21, v22, v23, v43, v44, v45, v9, v47, *((uint64_t *)&v47 + 1), v48, *((uint64_t *)&v48 + 1), v49, *((uint64_t *)&v49 + 1), v50,
                v51,
                v52,
                (uint64_t)v10,
                v54,
                v55,
                v56,
                v57);
        uint64_t v26 = v10[2];
        BOOL v27 = (v25 & 1) == 0;
        Swift::Int v28 = v26 + v27;
        if (__OFADD__(v26, v27)) {
          break;
        }
        unint64_t v29 = v24;
        char v30 = v25;
        sub_10000BF1C((uint64_t *)&unk_10017E990);
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v28))
        {
          uint64_t v37 = sub_100021098(v15, *((uint64_t *)&v15 + 1), v31, v32, v33, v34, v35, v36, v43, v44, v45, v46, v47, *((uint64_t *)&v47 + 1), v48, *((uint64_t *)&v48 + 1), v49, *((uint64_t *)&v49 + 1), v50,
                  v51,
                  v52,
                  (uint64_t)v53,
                  v54,
                  v55,
                  v56,
                  v57);
          if ((v30 & 1) != (v38 & 1)) {
            goto LABEL_19;
          }
          unint64_t v29 = v37;
        }
        id v10 = v53;
        if (v30)
        {
          uint64_t v39 = v53[7];

          *(void *)(v39 + 8 * v29) = v16;
        }
        else
        {
          v53[(v29 >> 6) + 8] |= 1 << v29;
          *(_OWORD *)(v10[6] + 16 * v29) = v15;
          *(void *)(v10[7] + 8 * v29) = v16;
          uint64_t v40 = v10[2];
          BOOL v41 = __OFADD__(v40, 1);
          uint64_t v42 = v40 + 1;
          if (v41) {
            goto LABEL_18;
          }
          _OWORD v10[2] = v42;
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10006F854((uint64_t)&v47);
        v11 += 56;
        uint64_t v7 = v45;
        uint64_t v9 = v46 - 1;
        if (v46 == 1)
        {
          uint64_t result = swift_bridgeObjectRelease_n();
          a3 = (void *)v44;
          goto LABEL_15;
        }
      }
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t result = swift_bridgeObjectRelease();
      id v10 = _swiftEmptyDictionarySingleton;
LABEL_15:
      *a3 = v10;
    }
  }
  return result;
}

void sub_10006EB38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  sub_10006EBD0(a1, a2, a3, a4, a5);
  if (v5)
  {
    type metadata accessor for Schema.RuntimeError();
    sub_10006F9A8((unint64_t *)&qword_10017DEA0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_10006FD0C();
    sub_10006FD44();
    sub_10006FE6C();
    swift_willThrow();
    swift_errorRelease();
  }
}

void sub_10006EBD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100053720(a5, a1, a2, a3, a4, v12);
  if (!v6)
  {
    swift_retain();
    sub_1000FEE20((uint64_t)v12);
    swift_release();
    sub_10006F854((uint64_t)v12);
  }
}

void *sub_10006EC98(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_retain();
  sub_1000A73BC((uint64_t)v11);
  if (a2)
  {
    uint64_t v6 = v12;
    uint64_t v8 = v13;
    sub_10000BEA0(v11, v12);
    if (qword_10017C428 != -1) {
      swift_once();
    }
    long long v14 = v2;
    memcpy(__dst, &unk_100181DA0, sizeof(__dst));
    sub_10002A390(__dst);
    if (qword_10017C430 != -1) {
      swift_once();
    }
    memcpy(v9, __dst, sizeof(v9));
    QueryType.namespace<A>(_:)(qword_100181E48, unk_100181E50, qword_100181E58);
    sub_10002A500(__dst);
    *(void *)uint64_t v9 = a1;
    *(void *)&v9[8] = a2;
    == infix<A>(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)&v9[24] = v6;
    *(void *)&v9[32] = v8;
    sub_1000274F4((uint64_t *)v9);
    QueryType.filter(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000E788((uint64_t)v11);
    sub_10000D698((long long *)v9, (uint64_t)v11);
    uint64_t v3 = v14;
  }
  Connection.prepare(_:)(v11);
  if (v3)
  {
    sub_10000E788((uint64_t)v11);
    swift_release();
  }
  else
  {
    swift_retain_n();
    sub_10006FEC8();
    uint64_t v3 = sub_100063D50();
    swift_release();
    sub_10000E788((uint64_t)v11);
    swift_release_n();
  }
  return v3;
}

uint64_t sub_10006EF14(unint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10006FEE4();
  uint64_t v7 = sub_100070084();
  sub_1000A6824(v7, v8);
  if (v3) {
    return swift_release();
  }
  if (a1 >> 62) {
    goto LABEL_13;
  }
  uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v10; uint64_t v10 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v16 = a1 & 0xC000000000000001;
    uint64_t v11 = 4;
    while (1)
    {
      id v12 = v16 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(a1 + 8 * v11);
      uint64_t v13 = v11 - 3;
      if (__OFADD__(v11 - 4, 1)) {
        break;
      }
      id v14 = v12;
      swift_bridgeObjectRetain();
      sub_1000A6A14(v14, a2, a3, v15);
      sub_1000A6BFC(v15);
      sub_10006F908(v15);

      ++v11;
      if (v13 == v10) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
LABEL_11:
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10006F0A8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0[12])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v0[14])
  {
    swift_bridgeObjectRelease();
    if (v0[16])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 184, 7);
}

uint64_t sub_10006F144()
{
  return sub_10006F198(&qword_10017E910);
}

uint64_t sub_10006F150()
{
  swift_arrayDestroy();
  uint64_t v0 = sub_100070048();

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_10006F18C()
{
  return sub_10006F198(&qword_10017DEC0);
}

uint64_t sub_10006F198(uint64_t *a1)
{
  sub_10000BF1C(a1);
  swift_arrayDestroy();
  uint64_t v1 = sub_100070048();

  return _swift_deallocClassInstance(v1, v2, v3);
}

uint64_t sub_10006F1EC()
{
  swift_arrayDestroy();
  uint64_t v0 = sub_100070048();

  return _swift_deallocClassInstance(v0, v1, v2);
}

void sub_10006F228()
{
  sub_10006CC74(*(void *)(v0 + 16));
}

unint64_t sub_10006F244()
{
  unint64_t result = qword_10017E908;
  if (!qword_10017E908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E908);
  }
  return result;
}

uint64_t sub_10006F290()
{
  return sub_10006BA30();
}

uint64_t sub_10006F2B8()
{
  sub_100013E0C();
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = *(void *)(v0 + 24);
  uint64_t v6 = *(void *)(v0 + 32);
  uint64_t v7 = *(void *)(v0 + 40);
  char v8 = *(unsigned char *)(v0 + 48);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v9;
  *uint64_t v9 = v1;
  v9[1] = sub_10006F37C;
  return sub_100069038(v3, v4, v5, v6, v7, v8);
}

uint64_t sub_10006F37C()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100060250();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10000EB74();
  return v3();
}

uint64_t sub_10006F440(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[3] = type metadata accessor for LSLinkBundleRecord(0);
  v22[4] = (uint64_t)&off_100172A40;
  char v8 = sub_1000274F4(v22);
  sub_10006F6F8(a2, (uint64_t)v8, (void (*)(void))type metadata accessor for LSLinkBundleRecord);
  uint64_t v9 = qword_10017C368;
  id v10 = a1;
  if (v9 != -1) {
    swift_once();
  }
  uint64_t v11 = sub_10000BEE4(v4, (uint64_t)qword_100181B00);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v11, v4);

  sub_10000C0D4((uint64_t)v22, (uint64_t)v21);
  id v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    id v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)id v14 = 136315138;
    v19[1] = v14 + 4;
    long long v15 = sub_10000BEA0(v21, v21[3]);
    uint64_t v16 = *v15;
    unint64_t v17 = v15[1];
    swift_bridgeObjectRetain();
    _OWORD v19[2] = sub_100013090(v16, v17, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10000E788((uint64_t)v21);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "✓ Completed indexing transaction for %s", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10000E788((uint64_t)v21);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return sub_10000E788((uint64_t)v22);
}

uint64_t sub_10006F6F8(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_1000283FC();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_10006F758(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006F7C0(void **a1)
{
  return sub_10006BA80(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10006F7E0(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10006BBC4(a1, a2, a3, v3[2], v3[3], v3[4]);
}

uint64_t sub_10006F800(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_1000283FC();
  sub_100013EC4();
  v3();
  return a1;
}

uint64_t sub_10006F854(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000DA68(v2, v3);
  return a1;
}

uint64_t sub_10006F8A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10006F8F4(v2, v3);
  return a1;
}

uint64_t sub_10006F8F4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10000DADC(a1, a2);
  }
  return a1;
}

void *sub_10006F908(void *a1)
{
  uint64_t v2 = a1[4];
  unint64_t v3 = a1[5];
  uint64_t v4 = a1[8];
  unint64_t v5 = a1[9];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000DA10(v2, v3);
  swift_bridgeObjectRelease();
  sub_10000DA10(v4, v5);
  return a1;
}

uint64_t sub_10006F984()
{
  return sub_10006C17C(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_10006F9A8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    sub_1000700F4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10006F9EC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10006FA00()
{
  type metadata accessor for Logger();
  sub_1000283FC();
  v1 += 8;
  uint64_t v2 = *(unsigned __int8 *)(v1 + 72);
  uint64_t v3 = ((v2 + 16) & ~v2) + *(void *)(v1 + 56);
  uint64_t v4 = v2 | 7;
  sub_100013EC4();
  v5();

  return _swift_deallocObject(v0, v3, v4);
}

void sub_10006FA84(uint64_t a1, unint64_t a2)
{
  type metadata accessor for Logger();

  sub_100067EBC(a1, a2);
}

uint64_t sub_10006FB04(uint64_t a1, unint64_t a2)
{
  if (a2 >= 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for MetadataStore.CreationError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  sub_10006FB60(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_10006FB60(uint64_t a1, unsigned __int8 a2)
{
  if (a2 <= 1u) {
    return swift_errorRetain();
  }
  return result;
}

uint64_t destroy for MetadataStore.CreationError(uint64_t a1)
{
  return sub_10006FB84(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t sub_10006FB84(uint64_t a1, unsigned __int8 a2)
{
  if (a2 <= 1u) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t assignWithCopy for MetadataStore.CreationError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  sub_10006FB60(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = v3;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  sub_10006FB84(v5, v6);
  return a1;
}

uint64_t initializeWithTake for MetadataStore.CreationError(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t assignWithTake for MetadataStore.CreationError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  unsigned __int8 v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  sub_10006FB84(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for MetadataStore.CreationError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFD && *(unsigned char *)(a1 + 9))
    {
      int v2 = *(_DWORD *)a1 + 252;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 3) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MetadataStore.CreationError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10006FCC4(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 2u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_10006FCDC(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)uint64_t result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for MetadataStore.CreationError()
{
  return &type metadata for MetadataStore.CreationError;
}

uint64_t sub_10006FD0C()
{
  return swift_allocError();
}

uint64_t sub_10006FD2C()
{
  return swift_allocError();
}

uint64_t sub_10006FD44()
{
  return swift_errorRetain();
}

uint64_t sub_10006FD60()
{
  uint64_t v1 = *(void **)(v0 + 216);
  int v2 = sub_10000BEA0(*(void **)(v0 + 224), *(void *)(*(void *)(v0 + 224) + 24));
  return sub_10006F440(v1, (uint64_t)v2);
}

void *sub_10006FDA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return memcpy(&a9, (const void *)(v9 - 248), 0xA8uLL);
}

uint64_t sub_10006FDC8()
{
  uint64_t v1 = *(void **)(v0 + 216);
  int v2 = sub_10000BEA0(*(void **)(v0 + 224), *(void *)(*(void *)(v0 + 224) + 24));
  return sub_10006F440(v1, (uint64_t)v2);
}

uint64_t sub_10006FE08()
{
  return swift_slowAlloc();
}

void *sub_10006FE24(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char __src)
{
  uint64_t v52 = (void *)(a1 + 16);
  return memcpy(v52, &__src, 0xA8uLL);
}

uint64_t sub_10006FE48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  return QueryType.filter(_:)(v30, v31, v32, (uint64_t)&a30);
}

uint64_t sub_10006FE6C()
{
  return sub_100100D40(v0, v1);
}

uint64_t sub_10006FE84()
{
  return swift_release_n();
}

uint64_t sub_10006FEC8()
{
  return v0;
}

uint64_t sub_10006FEE4()
{
  return swift_retain();
}

void sub_10006FEFC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_10006FF1C()
{
  return v0;
}

uint64_t sub_10006FF2C()
{
  return v0;
}

uint64_t sub_10006FF4C()
{
  return swift_errorRetain();
}

uint64_t sub_10006FF68()
{
  return swift_errorRetain();
}

uint64_t sub_10006FF84()
{
  return v0;
}

uint64_t sub_10006FF94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  return Connection.prepare(_:)(&a30);
}

uint64_t sub_10006FFB0()
{
  return swift_slowDealloc();
}

uint64_t sub_10006FFE0@<X0>(uint64_t a1@<X8>)
{
  return *(void *)a1;
}

uint64_t sub_10007000C(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  return v1 - 112;
}

uint64_t sub_100070028()
{
  return v0 + 8;
}

uint64_t sub_100070048()
{
  return v0;
}

uint64_t sub_100070058(uint64_t a1)
{
  sub_10000E788(a1);
  return swift_retain_n();
}

uint64_t sub_100070084()
{
  return v0;
}

uint64_t sub_100070094()
{
  return v0;
}

uint64_t sub_1000700AC()
{
  return swift_errorRetain();
}

uint64_t sub_1000700DC()
{
  return sub_100100D40(v1, v0);
}

uint64_t sub_1000700F4()
{
  return v0;
}

uint64_t sub_100070100()
{
  return swift_arrayDestroy();
}

uint64_t sub_100070120()
{
  return swift_allocObject();
}

char *sub_100070138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  return &a51;
}

char *sub_100070144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  return &a51;
}

uint64_t sub_100070150(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  return v1 - 112;
}

uint64_t sub_100070164()
{
  return sub_100100D40(v0, v1);
}

uint64_t sub_10007017C()
{
  return v0;
}

void sub_100070188()
{
  *(_WORD *)(v0 + 12) = 1024;
}

void *sub_1000701B0(uint64_t a1, const void *a2)
{
  return memcpy((void *)(v2 - 248), a2, 0xA8uLL);
}

uint64_t sub_1000701C8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  return sub_100013090(a1, a2, (uint64_t *)va);
}

void *sub_1000701E0()
{
  Table.init(_:database:)(__src, 0x6E61747369737361, 0xEF746E65746E4974, 0, 0);
  return memcpy(&unk_100181B28, __src, 0xA8uLL);
}

uint64_t sub_100070240(uint64_t a1)
{
  return sub_100035F34(a1, (uint64_t)&qword_100181BD0, 0xD000000000000010, 0x8000000100143090);
}

uint64_t sub_100070264(uint64_t a1)
{
  return sub_100035F34(a1, (uint64_t)&qword_100181BE8, 0x617461646174656DLL, 0xE800000000000000);
}

ValueMetadata *type metadata accessor for LNAssistantIntentRecord()
{
  return &type metadata for LNAssistantIntentRecord;
}

uint64_t sub_100070294(uint64_t a1, unint64_t a2, void *a3)
{
  unsigned __int8 v6 = (void *)a1;
  uint64_t v13 = a1;
  if (a2 >> 62) {
    goto LABEL_13;
  }
  uint64_t v7 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v7; uint64_t v7 = _CocoaArrayWrapper.endIndex.getter())
  {
    for (uint64_t i = 4; ; ++i)
    {
      id v9 = (a2 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a2 + 8 * i);
      unsigned __int8 v6 = v9;
      uint64_t v10 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      id v12 = v9;
      sub_100078160(&v13, &v12, (uint64_t)a3);
      if (v3)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return (uint64_t)v6;
      }

      if (v10 == v7)
      {

        swift_bridgeObjectRelease();
        return v13;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }

  swift_bridgeObjectRelease();
  return (uint64_t)v6;
}

char *sub_1000703D4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v5 = a1;
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v6)
  {
    while (1)
    {
      long long v49 = _swiftEmptyArrayStorage;
      uint64_t result = sub_100057C88(0, v6 & ~(v6 >> 63), 0);
      if (v6 < 0) {
        break;
      }
      uint64_t v8 = 0;
      id v9 = v49;
      unint64_t v33 = v5;
      unint64_t v34 = v5 & 0xC000000000000001;
      uint64_t v32 = v6;
      while (v6 != v8)
      {
        if (v34) {
          id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v10 = *(id *)(v5 + 8 * v8 + 32);
        }
        uint64_t v11 = v10;
        uint64_t v37 = v10;
        sub_10007FD74(&v37, a2, a3, &v38);
        if (v4)
        {
          swift_bridgeObjectRelease();
          swift_release();

          return (char *)v9;
        }

        uint64_t v13 = v38;
        uint64_t v12 = v39;
        uint64_t v14 = v40;
        long long v15 = v41;
        uint64_t v17 = v42;
        uint64_t v16 = v43;
        uint64_t v18 = v44;
        uint64_t v19 = v45;
        uint64_t v20 = v46;
        unint64_t v22 = v9[2];
        unint64_t v21 = v9[3];
        long long v23 = v47;
        uint64_t v24 = v48;
        long long v49 = v9;
        if (v22 >= v21 >> 1)
        {
          long long v31 = v41;
          uint64_t v29 = v44;
          uint64_t v30 = v39;
          uint64_t v27 = v46;
          uint64_t v28 = v45;
          long long v26 = v47;
          sub_100057C88((char *)(v21 > 1), v22 + 1, 1);
          long long v23 = v26;
          uint64_t v20 = v27;
          uint64_t v19 = v28;
          uint64_t v18 = v29;
          uint64_t v12 = v30;
          long long v15 = v31;
          id v9 = v49;
        }
        ++v8;
        _OWORD v9[2] = v22 + 1;
        char v25 = &v9[13 * v22];
        v25[4] = v13;
        v25[5] = v12;
        v25[6] = v14;
        *(_OWORD *)(v25 + 7) = v15;
        v25[9] = v17;
        void v25[10] = v16;
        v25[11] = v18;
        v25[12] = v19;
        v25[13] = v20;
        *((_OWORD *)v25 + 7) = v23;
        v25[16] = v24;
        uint64_t v6 = v32;
        unint64_t v5 = v33;
        uint64_t v4 = 0;
        if (v32 == v8)
        {
          swift_bridgeObjectRelease();
          return (char *)v9;
        }
      }
      __break(1u);
LABEL_16:
      swift_bridgeObjectRetain();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v6) {
        goto LABEL_17;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_17:
    swift_bridgeObjectRelease();
    return (char *)_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_1000705F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v4 = (void **)(a1 + 48);
    do
    {
      unint64_t v5 = *v4;
      v4 += 3;
      id v6 = v5;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v2;
    }
    while (v2);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

void sub_1000706A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = a1;
    sub_100057848();
    uint64_t v3 = sub_100042D80(v2);
    if ((v3 & 0x8000000000000000) == 0)
    {
      unint64_t v5 = v3;
      if (v3 < 1 << *(unsigned char *)(v2 + 32))
      {
        int v6 = v4;
        uint64_t v7 = v2 + 64;
        uint64_t v15 = v2 + 64;
        while ((*(void *)(v7 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
        {
          if (v6 != *(_DWORD *)(v2 + 36)) {
            goto LABEL_18;
          }
          uint64_t v8 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v5);
          uint64_t v9 = v8[1];
          uint64_t v16 = v1;
          uint64_t v17 = *v8;
          uint64_t v10 = v2;
          unint64_t v12 = _swiftEmptyArrayStorage[2];
          unint64_t v11 = _swiftEmptyArrayStorage[3];
          swift_bridgeObjectRetain();
          if (v12 >= v11 >> 1) {
            sub_100057848();
          }
          _swiftEmptyArrayStorage[2] = v12 + 1;
          uint64_t v13 = &_swiftEmptyArrayStorage[2 * v12];
          void v13[4] = v17;
          uint64_t v13[5] = v9;
          if ((uint64_t)v5 >= -(-1 << *(unsigned char *)(v10 + 32))) {
            goto LABEL_19;
          }
          uint64_t v7 = v15;
          if ((*(void *)(v15 + 8 * (v5 >> 6)) & (1 << v5)) == 0) {
            goto LABEL_20;
          }
          uint64_t v2 = v10;
          if (v6 != *(_DWORD *)(v10 + 36)) {
            goto LABEL_21;
          }
          uint64_t v14 = _HashTable.occupiedBucket(after:)();
          uint64_t v1 = v16 - 1;
          if (v16 == 1) {
            return;
          }
          unint64_t v5 = v14;
          if ((v14 & 0x8000000000000000) == 0)
          {
            int v6 = *(_DWORD *)(v2 + 36);
            if (v14 < 1 << *(unsigned char *)(v2 + 32)) {
              continue;
            }
          }
          goto LABEL_22;
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
      }
    }
LABEL_22:
    __break(1u);
  }
}

void *sub_100070864(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    int v6 = (void **)(swift_bridgeObjectRetain() + 48);
    uint64_t v7 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v8 = *v6;
      BOOL v9 = *(v6 - 2) == a2 && *(v6 - 1) == a3;
      if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        id v10 = v8;
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10001E7F4();
          uint64_t v7 = v13;
        }
        unint64_t v11 = v7[2];
        if (v11 >= v7[3] >> 1)
        {
          sub_10001E7F4();
          uint64_t v7 = v14;
        }
        void v7[2] = v11 + 1;
        unint64_t v12 = &v7[3 * v11];
        void v12[4] = a2;
        v12[5] = a3;
        v12[6] = v10;
      }
      v6 += 3;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  return v7;
}

uint64_t sub_1000709BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v46 = a4;
  uint64_t v51 = a2;
  int v6 = &qword_10017EB88;
  uint64_t v54 = sub_10000BF1C(&qword_10017EB88);
  __chkstk_darwin(v54);
  uint64_t v50 = (_OWORD *)((char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  id v10 = (_OWORD *)((char *)&v46 - v9);
  __chkstk_darwin(v11);
  long long v49 = (uint64_t *)((char *)&v46 - v12);
  sub_1000427DC(a1, v56);
  uint64_t v53 = v56[0];
  int64_t v55 = v56[3];
  unint64_t v13 = v56[4];
  uint64_t v47 = v56[1];
  int64_t v48 = (unint64_t)(v56[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v52 = a3;
  if (!v13) {
    goto LABEL_3;
  }
LABEL_2:
  uint64_t v57 = (v13 - 1) & v13;
  unint64_t v15 = __clz(__rbit64(v13)) | (v55 << 6);
  while (1)
  {
    uint64_t v20 = *(void *)(v53 + 56);
    unint64_t v21 = (uint64_t *)(*(void *)(v53 + 48) + 16 * v15);
    uint64_t v22 = *v21;
    unint64_t v23 = v21[1];
    uint64_t v24 = (int *)(sub_10000BF1C((uint64_t *)&unk_10017EB90) - 8);
    uint64_t v25 = v20 + *(void *)(*(void *)v24 + 72) * v15;
    uint64_t v26 = v54;
    uint64_t v27 = v49;
    sub_100034614(v25, (uint64_t)v49 + *(int *)(v54 + 48), (uint64_t *)&unk_10017EB90);
    *uint64_t v27 = v22;
    v27[1] = v23;
    uint64_t v28 = v6;
    sub_100083620((uint64_t)v27, (uint64_t)v10, v6);
    uint64_t v29 = *(int *)(v26 + 48);
    uint64_t v30 = (char *)v50 + v29;
    uint64_t v31 = v24[14];
    uint64_t v32 = (char *)v10 + v29;
    uint64_t v33 = (uint64_t)v10;
    *uint64_t v50 = *v10;
    uint64_t v34 = type metadata accessor for UUID();
    uint64_t v35 = *(void *)(v34 - 8);
    (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v30, v32, v34);
    uint64_t v36 = *(void **)&v32[v31];
    *(void *)&v30[v31] = v36;
    sub_10000DADC(v22, v23);
    id v37 = [v36 processInstanceIdentifier];
    uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v40 = v39;

    if (v38 == v51 && v40 == v52)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v35 + 8))(v30, v34);
LABEL_27:
      swift_release();
      uint64_t v43 = v46;
      sub_100083620(v33, v46, &qword_10017EB88);
      uint64_t v44 = v43;
      uint64_t v45 = 0;
LABEL_29:
      sub_10000D5B0(v44, v45, 1, v54);
      return swift_bridgeObjectRelease();
    }
    char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v30, v34);
    if (v42) {
      goto LABEL_27;
    }
    id v10 = (_OWORD *)v33;
    int v6 = v28;
    uint64_t result = sub_1000347E8(v33, v28);
    unint64_t v13 = v57;
    if (v57) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v16 = v55 + 1;
    if (__OFADD__(v55, 1)) {
      break;
    }
    if (v16 >= v48) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v47 + 8 * v16);
    int64_t v18 = v55 + 1;
    if (!v17)
    {
      int64_t v18 = v55 + 2;
      if (v55 + 2 >= v48) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v47 + 8 * v18);
      if (!v17)
      {
        int64_t v18 = v55 + 3;
        if (v55 + 3 >= v48) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v47 + 8 * v18);
        if (!v17)
        {
          int64_t v18 = v55 + 4;
          if (v55 + 4 >= v48) {
            goto LABEL_28;
          }
          unint64_t v17 = *(void *)(v47 + 8 * v18);
          if (!v17)
          {
            int64_t v18 = v55 + 5;
            if (v55 + 5 >= v48) {
              goto LABEL_28;
            }
            unint64_t v17 = *(void *)(v47 + 8 * v18);
            if (!v17)
            {
              int64_t v19 = v55 + 6;
              while (v19 < v48)
              {
                unint64_t v17 = *(void *)(v47 + 8 * v19++);
                if (v17)
                {
                  int64_t v18 = v19 - 1;
                  goto LABEL_18;
                }
              }
LABEL_28:
              swift_release();
              uint64_t v44 = v46;
              uint64_t v45 = 1;
              goto LABEL_29;
            }
          }
        }
      }
    }
LABEL_18:
    uint64_t v57 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v18 << 6);
    int64_t v55 = v18;
  }
  __break(1u);
  return result;
}

uint64_t sub_100070DF4()
{
  return sub_100070E9C((void (*)(uint64_t, uint64_t))sub_100083390, (void (*)(void, void))sub_10008339C, (void (*)(void, void))sub_100083378);
}

uint64_t sub_100070E48()
{
  return sub_100070E9C((void (*)(uint64_t, uint64_t))sub_1000840E4, (void (*)(void, void))sub_1000840EC, (void (*)(void, void))sub_1000840E8);
}

uint64_t sub_100070E9C(void (*a1)(uint64_t, uint64_t), void (*a2)(void, void), void (*a3)(void, void))
{
  uint64_t v7 = v3;
  uint64_t v8 = *(void **)(v3 + 16);
  swift_retain();
  [v8 lock];
  uint64_t v9 = swift_beginAccess();
  uint64_t v10 = *(void *)(v3 + 48);
  uint64_t v11 = *(unsigned __int8 *)(v3 + 56);
  if (v11 == 255)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(v3 + 24))(&v23, v9);
    uint64_t v13 = v23;
    uint64_t v14 = a1;
    uint64_t v12 = v24;
    uint64_t v25 = a2;
    uint64_t v15 = *(void *)(v7 + 48);
    *(void *)(v7 + 48) = v23;
    int64_t v16 = a3;
    uint64_t v17 = *(unsigned __int8 *)(v7 + 56);
    *(unsigned char *)(v7 + 56) = v12;
    v14(v13, v12);
    uint64_t v18 = v15;
    a2 = v25;
    uint64_t v19 = v17;
    a3 = v16;
    v25(v18, v19);
  }
  else
  {
    LOBYTE(v12) = v11 & 1;
    uint64_t v13 = *(void *)(v3 + 48);
  }
  a3(v10, v11);
  [v8 unlock];
  swift_release();
  if (v12)
  {
    if (*(unsigned char *)(v7 + 40) == 1)
    {
      swift_retain();
      [v8 lock];
      uint64_t v20 = *(void *)(v7 + 48);
      *(void *)(v7 + 48) = 0;
      uint64_t v21 = *(unsigned __int8 *)(v7 + 56);
      *(unsigned char *)(v7 + 56) = -1;
      a2(v20, v21);
      [v8 unlock];
      swift_release();
    }
    swift_willThrow();
  }
  return v13;
}

uint64_t sub_100071038(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  int64_t v3 = 0;
  uint64_t v18 = a2;
  uint64_t v4 = result + 56;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  if (!v7) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v9 | (v3 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v3 << 6))
  {
    uint64_t v14 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    swift_bridgeObjectRetain();
    sub_100023984(&v17, v15, v16);
    uint64_t result = swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      int64_t v3 = v11 + 1;
      if (v11 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v12 = *(void *)(v4 + 8 * v3);
      if (!v12)
      {
        int64_t v3 = v11 + 2;
        if (v11 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v12 = *(void *)(v4 + 8 * v3);
        if (!v12)
        {
          int64_t v3 = v11 + 3;
          if (v11 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v12 = *(void *)(v4 + 8 * v3);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v7 = (v12 - 1) & v12;
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  unint64_t v12 = *(void *)(v4 + 8 * v13);
  if (v12)
  {
    int64_t v3 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v3 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v3);
    ++v13;
    if (v12) {
      goto LABEL_20;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_1000711BC(unint64_t a1, void *a2)
{
  unint64_t v2 = a1;
  v18[1] = a2;
  if ((a1 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    sub_10000D9D4(0, (unint64_t *)&qword_10017D468);
    sub_10004B010();
    sub_10000EBA4();
    Set.Iterator.init(_cocoa:)();
    unint64_t v2 = (unint64_t)v18[2];
    uint64_t v17 = v18[3];
    uint64_t v3 = (uint64_t)v18[4];
    id v4 = v18[5];
    unint64_t v5 = (unint64_t)v18[6];
  }
  else
  {
    id v4 = 0;
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v17 = (void *)(a1 + 56);
    uint64_t v3 = ~v6;
    uint64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v5 = v8 & *(void *)(a1 + 56);
  }
  int64_t v9 = (unint64_t)(v3 + 64) >> 6;
  if ((v2 & 0x8000000000000000) != 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v5)
    {
      uint64_t v10 = (v5 - 1) & v5;
      unint64_t v11 = __clz(__rbit64(v5)) | ((void)v4 << 6);
      unint64_t v12 = (char *)v4;
      goto LABEL_29;
    }
    uint64_t v14 = (uint64_t)v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    if (v14 >= v9) {
      goto LABEL_32;
    }
    unint64_t v15 = v17[v14];
    unint64_t v12 = (char *)v4 + 1;
    if (!v15)
    {
      unint64_t v12 = (char *)v4 + 2;
      if ((uint64_t)v4 + 2 >= v9) {
        goto LABEL_32;
      }
      unint64_t v15 = v17[(void)v12];
      if (!v15)
      {
        unint64_t v12 = (char *)v4 + 3;
        if ((uint64_t)v4 + 3 >= v9) {
          goto LABEL_32;
        }
        unint64_t v15 = v17[(void)v12];
        if (!v15)
        {
          unint64_t v12 = (char *)v4 + 4;
          if ((uint64_t)v4 + 4 >= v9) {
            goto LABEL_32;
          }
          unint64_t v15 = v17[(void)v12];
          if (!v15)
          {
            unint64_t v12 = (char *)v4 + 5;
            if ((uint64_t)v4 + 5 >= v9) {
              goto LABEL_32;
            }
            unint64_t v15 = v17[(void)v12];
            if (!v15)
            {
              uint64_t v16 = (uint64_t)v4 + 6;
              while (v16 < v9)
              {
                unint64_t v15 = v17[v16++];
                if (v15)
                {
                  unint64_t v12 = (char *)(v16 - 1);
                  goto LABEL_28;
                }
              }
LABEL_32:
              sub_100027664();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v10 = (v15 - 1) & v15;
    unint64_t v11 = __clz(__rbit64(v15)) + ((void)v12 << 6);
LABEL_29:
    id v13 = *(id *)(*(void *)(v2 + 48) + 8 * v11);
    if (!v13) {
      goto LABEL_32;
    }
    while (1)
    {
      sub_100024244(v18, v13);

      id v4 = v12;
      unint64_t v5 = v10;
      if ((v2 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        sub_10000D9D4(0, (unint64_t *)&qword_10017D468);
        sub_100084874();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v13 = v18[0];
        swift_unknownObjectRelease();
        unint64_t v12 = (char *)v4;
        uint64_t v10 = v5;
        if (v13) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

id sub_100071454(uint64_t a1, uint64_t a2, char a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v9 = 0;
  id v5 = [(id)swift_getObjCClassFromMetadata() bundleRecordWithBundleIdentifier:v4 allowPlaceholder:a3 & 1 error:&v9];

  if (v5)
  {
    id v6 = v9;
  }
  else
  {
    id v7 = v9;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v5;
}

uint64_t sub_10007153C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000D844(v0, qword_100181C00);
  sub_10000BEE4(v0, (uint64_t)qword_100181C00);
  type metadata accessor for ApplicationService();
  sub_10000BF1C((uint64_t *)&unk_10017EAF0);
  String.init<A>(describing:)();
  uint64_t result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    String.init(cString:)();
    return Logger.init(subsystem:category:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000715E4()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_100181C18 = result;
  unk_100181C20 = v1;
  return result;
}

uint64_t sub_100071614()
{
  if (qword_10017C390 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  return sub_10000EBA4();
}

id sub_100071678(uint64_t a1, uint64_t a2)
{
  swift_getObjectType();
  sub_100084874();
  swift_defaultActor_initialize();
  v2[14] = a1;
  v2[15] = a2;
  v7.receiver = v2;
  v7.super_class = v3;
  return [super init];
}

uint64_t sub_1000716D4(void *a1)
{
  return 1;
}

void sub_100071708()
{
  sub_10000E990();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  unsigned int v3 = [v1 processIdentifier];
  id v4 = (id)LNDaemonApplicationXPCInterface();
  [v1 setExportedInterface:v4];

  sub_100071910();
  id v5 = v16;
  if (v16)
  {
    sub_10000BEA0(v15, (uint64_t)v16);
    sub_100028430();
    uint64_t v7 = v6;
    double v9 = __chkstk_darwin(v8);
    unint64_t v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v7 + 16))(v11, v9);
    uint64_t v12 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, void *))(v7 + 8))(v11, v5);
    sub_10000E788((uint64_t)v15);
  }
  else
  {
    uint64_t v12 = 0;
  }
  [v1 setExportedObject:v12];
  swift_unknownObjectRelease();
  uint64_t v13 = swift_allocObject();
  *(_DWORD *)(v13 + 16) = v3;
  *(void *)(v13 + 24) = ObjectType;
  uint64_t v17 = sub_10007FA68;
  uint64_t v18 = v13;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  long long v15[2] = sub_1000125A8;
  uint64_t v16 = &unk_100171398;
  uint64_t v14 = _Block_copy(v15);
  swift_release();
  [v1 setInvalidationHandler:v14];
  _Block_release(v14);
  sub_10000E930();
}

void sub_100071910()
{
  sub_10000E990();
  uint64_t v1 = v0;
  unsigned int v3 = v2;
  id v5 = v4;
  uint64_t v6 = type metadata accessor for Logger();
  sub_100028430();
  uint64_t v8 = v7;
  double v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  [v3 auditToken:v10];
  uint64_t v13 = v55.val[0];
  uint64_t v14 = v55.val[1];
  uint64_t v15 = v55.val[7];
  uint64_t v52 = v55.val[3];
  uint64_t v53 = v55.val[2];
  uint64_t v50 = v55.val[5];
  uint64_t v51 = v55.val[4];
  uint64_t v49 = v55.val[6];
  uint64_t v16 = SecTaskCreateWithAuditToken(0, &v55);
  if (!v16) {
    goto LABEL_9;
  }
  uint64_t v17 = v16;
  uint64_t v47 = v3;
  uint64_t v48 = v13;
  uint64_t v18 = v8;
  CFStringRef v19 = SecTaskCopySigningIdentifier(v16, 0);
  if (!v19
    || (uint64_t v20 = (__CFString *)v19,
        *(void *)v55.val = 0,
        *(void *)&v55.val[2] = 0,
        static String._conditionallyBridgeFromObjectiveC(_:result:)(),
        v20,
        (unint64_t v21 = *(void *)&v55.val[2]) == 0))
  {

LABEL_9:
    *id v5 = 0u;
    v5[1] = 0u;
    goto LABEL_12;
  }
  uint64_t v45 = v5;
  uint64_t v46 = *(void *)v55.val;
  uint64_t v22 = off_10017C388;
  swift_retain();
  if (v22 != (void *)-1) {
    swift_once();
  }
  uint64_t v23 = sub_10000BEE4(v6, (uint64_t)qword_100181C00);
  uint64_t v24 = v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v12, v23, v6);
  swift_release();
  unint64_t v25 = v21;
  swift_bridgeObjectRetain_n();
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  BOOL v28 = os_log_type_enabled(v26, v27);
  unint64_t v44 = v25;
  if (v28)
  {
    uint64_t v43 = (uint8_t *)sub_1000536D0();
    uint64_t v41 = sub_100060438();
    *(void *)v55.val = v41;
    uint64_t v42 = v1;
    uint64_t v29 = v43;
    *(_DWORD *)uint64_t v43 = 136315138;
    uint64_t v40 = v29 + 4;
    swift_bridgeObjectRetain();
    uint64_t v54 = sub_100013090(v46, v25, (uint64_t *)&v55);
    uint64_t v1 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Created AppShortcutClient with bundleId: %s", v43, 0xCu);
    swift_arrayDestroy();
    sub_10000EB10();
    sub_10000EB10();
  }
  else
  {

    sub_100084B54();
  }
  (*(void (**)(char *, uint64_t))(v24 + 8))(v12, v6);
  uint64_t v30 = v47;
  uint64_t v31 = *(void *)(v1 + 120);
  swift_retain();
  LODWORD(v30) = [v30 processIdentifier];
  uint64_t v32 = *(void *)(v1 + 112);
  uint64_t v33 = (objc_class *)type metadata accessor for ApplicationServiceInstance();
  objc_allocWithZone(v33);
  uint64_t v34 = v48 | (v14 << 32);
  uint64_t v35 = v53 | (v52 << 32);
  uint64_t v36 = v51 | (v50 << 32);
  uint64_t v37 = v49 | (v15 << 32);
  swift_retain();
  id v38 = sub_1000759E4(v34, v35, v36, v37, v46, v44, v31, (int)v30, v32);
  uint64_t v39 = v45;
  uint64_t v45[3] = v33;

  *uint64_t v39 = v38;
LABEL_12:
  sub_10000E930();
}

uint64_t sub_100071C88(int a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = a2;
  sub_10000BF1C((uint64_t *)&unk_10017EAF0);
  String.init<A>(describing:)();
  uint64_t result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    String.init(cString:)();
    Logger.init(subsystem:category:)();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 67109378;
      LODWORD(v14) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 8) = 2080;
      if (qword_10017C390 != -1) {
        swift_once();
      }
      uint64_t v12 = qword_100181C18;
      unint64_t v13 = qword_100181C20;
      swift_bridgeObjectRetain();
      uint64_t v14 = sub_100013090(v12, v13, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Invalidated XPC connection from PID %d for service \"%s\"", (uint8_t *)v11, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100071F00()
{
}

uint64_t sub_100071F50()
{
  swift_release();
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_100071F80()
{
  sub_100071F50();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for ApplicationService()
{
  return self;
}

uint64_t sub_100071FD0()
{
  return sub_100071614();
}

void sub_100071FE8()
{
}

uint64_t sub_10007200C(void *a1)
{
  return 1;
}

uint64_t sub_100072028()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100011814;
  return sub_10001C7F8();
}

void sub_1000720B4()
{
  qword_100181C28 = (uint64_t)&off_10016EBF0;
}

uint64_t sub_1000720C8()
{
  if (qword_10017C398 != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

uint64_t sub_100072124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_100013DD8;
  return sub_1000721C0(a5);
}

uint64_t sub_1000721C0(uint64_t a1)
{
  v2[18] = a1;
  v2[19] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[20] = v3;
  v2[21] = *(void *)(v3 - 8);
  v2[22] = swift_task_alloc();
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  v2[28] = swift_task_alloc();
  sub_10000BF1C(&qword_10017EB18);
  v2[29] = swift_task_alloc();
  v2[30] = type metadata accessor for LSLinkBundleRecord(0);
  v2[31] = swift_task_alloc();
  return _swift_task_switch(sub_10007232C, v1, 0);
}

uint64_t sub_10007232C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_10008464C();
  uint64_t v42 = v24;
  sub_100084AD8();
  unint64_t v25 = (char *)sub_100070E9C((void (*)(uint64_t, uint64_t))sub_1000840E4, (void (*)(void, void))sub_1000840EC, (void (*)(void, void))sub_1000840E8);
  v22[32] = v25;
  v22[33] = 0;
  uint64_t v26 = *(void *)&v25[OBJC_IVAR____TtC10LinkDaemon8Registry_ready];
  v22[34] = v26;
  if (v26)
  {
    os_log_type_t v27 = v25;
    swift_retain();
    BOOL v28 = (void *)swift_task_alloc();
    v22[35] = v28;
    void *v28 = v22;
    v28[1] = sub_1000726B0;
    sub_1000843A4();
    sub_100084258();
    return Task<>.value.getter(v29, v30, v31, v32, v33, v34, v35, v36, a9, a10, a11, a12, a13, a14, a15, a16, a17, v22, v23,
             v42,
             a21,
             a22);
  }
  else
  {
    v22[36] = OBJC_IVAR____TtC10LinkDaemon8Registry_store;
    uint64_t v37 = v25;
    sub_100063EB0();
    v22[37] = v38;
    swift_bridgeObjectRetain();
    uint64_t v39 = (void *)swift_task_alloc();
    v22[38] = v39;
    *uint64_t v39 = v22;
    v39[1] = sub_100072A3C;
    sub_100084258();
    return sub_1000B5230();
  }
}

uint64_t sub_1000726B0()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v2 = *(void *)(v1 + 152);
  uint64_t v3 = *v0;
  sub_100010BC4();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1000727AC, v2, 0);
}

uint64_t sub_1000727AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_10008464C();
  sub_100084AD8();
  uint64_t v14 = *(void *)(v12 + 264);
  *(void *)(v12 + 288) = OBJC_IVAR____TtC10LinkDaemon8Registry_store;
  sub_100063EB0();
  *(void *)(v12 + 296) = v15;
  if (v14)
  {

    uint64_t v16 = off_10017C388;
    swift_retain();
    if (v16 != (void *)-1) {
      swift_once();
    }
    sub_10000BEE4(*(void *)(v12 + 160), (uint64_t)qword_100181C00);
    uint64_t v17 = sub_100084404();
    v18(v17);
    swift_release();
    swift_errorRetain();
    swift_errorRetain();
    CFStringRef v19 = (void *)Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (sub_1000845C4(v20))
    {
      sub_1000536D0();
      unint64_t v21 = (void *)sub_100084E08();
      sub_100084DE8(5.7779e-34);
      uint64_t v22 = _swift_stdlib_bridgeErrorToNSError();
      sub_100084928(v22);
      void *v21 = v13;
      swift_errorRelease();
      swift_errorRelease();
      sub_100084CA0((void *)&_mh_execute_header, v23, v24, "Error getting registry, App Shortcuts, or bundle IDs from registry %@");
      sub_10000BF1C((uint64_t *)&unk_10017EB20);
      sub_1000848CC();
      sub_10000EB10();
      sub_10000EB10();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v28 = sub_1000845A0();
    v29(v28);
    if (!*(void *)(v12 + 264)) {

    }
    sub_100084180();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EB74();
    sub_100084258();
    return v31(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10, a11, a12);
  }
  else
  {
    swift_bridgeObjectRetain();
    unint64_t v25 = (void *)swift_task_alloc();
    *(void *)(v12 + 304) = v25;
    *unint64_t v25 = v12;
    v25[1] = sub_100072A3C;
    sub_100084258();
    return sub_1000B5230();
  }
}

uint64_t sub_100072A3C()
{
  sub_10006039C();
  sub_100010BAC();
  uint64_t v3 = v2;
  sub_100060250();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  v3[39] = v5;
  v3[40] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v6 = (void *)v3[32];
    uint64_t v7 = v3[19];
    swift_bridgeObjectRelease();

    uint64_t v8 = sub_1000740A0;
    uint64_t v9 = v7;
  }
  else
  {
    uint64_t v9 = v3[19];
    uint64_t v8 = sub_100072B48;
  }
  return _swift_task_switch(v8, v9, 0);
}

uint64_t sub_100072B48()
{
  audit_token_t v55 = v2;
  uint64_t v4 = *(void *)(v2[39] + 16);
  v2[41] = v4;
  if (!v4)
  {
LABEL_23:
    sub_100084EA4();

    sub_1000847C0();
    swift_bridgeObjectRelease();

    sub_100084180();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EB74();
    return v41();
  }
  uint64_t v5 = 0;
  v2[42] = OBJC_IVAR____TtC10LinkDaemon8Registry_appShortcutInterpolator;
  uint64_t v6 = v2[40];
  uint64_t v7 = &os_transaction_needs_more_time_ptr;
  while (1)
  {
    v2[43] = v5;
    uint64_t v8 = v2[39] + 16 * v5;
    uint64_t v9 = *(void **)(v8 + 32);
    v2[44] = (uint64_t)v9;
    os_log_type_t v10 = *(void **)(v8 + 40);
    v2[45] = (uint64_t)v10;
    uint64_t v1 = objc_allocWithZone((Class)v7[417]);
    sub_100084DC4();
    uint64_t v11 = sub_100084E80();
    id v13 = sub_100081E58(v11, v12, 0, (SEL *)&selRef_initWithBundleIdentifier_allowPlaceholder_error_);
    v2[46] = (uint64_t)v13;
    if (v6)
    {
      uint64_t v53 = (uint64_t)v9;
      uint64_t v14 = off_10017C388;
      swift_retain();
      if (v14 != (void *)-1) {
        swift_once();
      }
      sub_10000BEE4(v2[20], (uint64_t)qword_100181C00);
      uint64_t v15 = sub_100084404();
      v16(v15);
      swift_release();
      swift_bridgeObjectRetain();
      uint64_t v1 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.error.getter();
      BOOL v18 = sub_100084560(v17);
      uint64_t v0 = (void *)v2[26];
      uint64_t v3 = v2[20];
      uint64_t v19 = v2[21];
      if (v18)
      {
        uint64_t v20 = sub_1000536D0();
        uint64_t v54 = sub_100060438();
        *(_DWORD *)uint64_t v20 = 136315138;
        swift_bridgeObjectRetain();
        *(void *)(v20 + 4) = sub_100013090(v53, (unint64_t)v10, &v54);
        sub_100084DA0();
        sub_100084A28();
        _os_log_impl(v21, v22, v23, "Could not create LSApplicationRecord for %s", (uint8_t *)v20, 0xCu);
        sub_100084510();
        uint64_t v7 = &os_transaction_needs_more_time_ptr;
        sub_10000EB10();
        sub_10000EB10();
      }
      else
      {
        sub_10005079C();
      }
      swift_errorRelease();

      (*(void (**)(void *, uint64_t))(v19 + 8))(v0, v3);
      goto LABEL_17;
    }
    if (v13) {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_17:
    uint64_t v6 = 0;
    sub_100084214();
    if (v26) {
      goto LABEL_23;
    }
  }
  uint64_t v24 = v2[29];
  id v25 = v13;
  sub_1000B5418();
  sub_100084470(v24);
  if (v26)
  {
    uint64_t v27 = sub_100084C04();
    sub_1000347E8(v27, &qword_10017EB18);
    uint64_t v28 = off_10017C388;
    swift_retain();
    if (v28 != (void *)-1) {
      swift_once();
    }
    uint64_t v29 = sub_100084BF0();
    sub_10000BEE4(v29, (uint64_t)qword_100181C00);
    uint64_t v30 = sub_10008490C();
    v31(v30);
    swift_release();
    swift_bridgeObjectRetain();
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    BOOL v33 = sub_1000845C4(v32);
    uint64_t v0 = (void *)v2[28];
    if (v33)
    {
      uint64_t v0 = v25;
      uint64_t v34 = sub_1000536D0();
      uint64_t v54 = sub_100060438();
      *(_DWORD *)uint64_t v34 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v34 + 4) = sub_1000849E4();
      sub_100084DA0();
      _os_log_impl((void *)&_mh_execute_header, v1, (os_log_type_t)v3, "Could not create LSLinkBundleRecord from applicationRecord for %s", (uint8_t *)v34, 0xCu);
      swift_arrayDestroy();
      sub_10000EB10();
      sub_10000EB10();
    }
    else
    {

      sub_10005079C();
    }

    sub_1000847DC();
    v40();
    uint64_t v7 = &os_transaction_needs_more_time_ptr;
    goto LABEL_17;
  }
  uint64_t v35 = v2[42];
  uint64_t v36 = v2[32];
  sub_100083DFC(v2[29], v2[31], (void (*)(void))type metadata accessor for LSLinkBundleRecord);
  v2[47] = *(void *)(v36 + v35);
  uint64_t v37 = self;
  swift_retain();
  v2[48] = (uint64_t)[v37 sharedVocabulary];
  v2[49] = sub_1000B21A4();
  swift_bridgeObjectRetain();
  uint64_t v38 = sub_100084E80();
  v2[50] = sub_1000641A8(v38, v39);
  uint64_t v43 = v2[37];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v44 = sub_100070864(v43, v9, v10);
  sub_100084E8C((uint64_t)v44);
  swift_bridgeObjectRetain();
  uint64_t v45 = sub_100084E80();
  uint64_t v47 = sub_1000683B4(v45, v46);
  swift_bridgeObjectRelease();
  v2[52] = v47;
  uint64_t v48 = swift_task_alloc();
  uint64_t v49 = (void *)sub_100084D88(v48);
  *uint64_t v49 = v50;
  v49[1] = sub_1000734C8;
  uint64_t v51 = sub_100084E80();
  return sub_1000B4E58(v51, v52);
}

uint64_t sub_1000734C8()
{
  sub_10006039C();
  sub_100010BAC();
  uint64_t v3 = v2;
  sub_100060250();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  v3[54] = v5;
  v3[55] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v6 = v3[19];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v7 = (uint64_t (*)())sub_1000742E8;
    uint64_t v8 = v6;
  }
  else
  {
    uint64_t v8 = v3[19];
    uint64_t v7 = sub_1000735E0;
  }
  return _swift_task_switch(v7, v8, 0);
}

uint64_t sub_1000735E0()
{
  sub_10000EC58();
  if (v0[18]) {
    os_transaction_needs_more_time();
  }
  uint64_t v1 = v0[31];
  v0[11] = v0[30];
  v0[12] = (uint64_t)&off_100172A40;
  uint64_t v2 = sub_1000274F4(v0 + 8);
  sub_100082E84(v1, (uint64_t)v2);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[56] = (uint64_t)v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000736AC;
  sub_100084874();
  return sub_1000066FC();
}

uint64_t sub_1000736AC()
{
  sub_100084ED0();
  sub_100013E0C();
  sub_100010BAC();
  uint64_t v3 = v2;
  sub_100060250();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_100010BC4();
  *uint64_t v6 = v5;
  *(void *)(v3 + 456) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v0)
  {
    swift_bridgeObjectRelease();
    sub_10000E788(v3 + 64);
  }
  sub_100084D74();
  return _swift_task_switch(v7, v8, v9);
}

#error "100073B6C: call analysis failed (funcsize=521)"

uint64_t sub_1000740A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_10008464C();
  sub_100084AD8();
  uint64_t v13 = *(void *)(v12 + 296);
  uint64_t v14 = off_10017C388;
  swift_retain();
  if (v14 != (void *)-1) {
    swift_once();
  }
  sub_10000BEE4(*(void *)(v12 + 160), (uint64_t)qword_100181C00);
  sub_10008457C();
  v15();
  swift_release();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v16 = (void *)Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (sub_100084560(v17))
  {
    BOOL v18 = (uint8_t *)sub_1000536D0();
    a9 = v13;
    uint64_t v19 = (void *)sub_100084E08();
    *(_DWORD *)BOOL v18 = 138412290;
    swift_errorRetain();
    uint64_t v20 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v12 + 112) = v20;
    sub_1000849B0();
    void *v19 = v20;
    swift_errorRelease();
    swift_errorRelease();
    sub_100084A28();
    _os_log_impl(v21, v22, v23, v24, v18, 0xCu);
    sub_10000BF1C((uint64_t *)&unk_10017EB20);
    swift_arrayDestroy();
    sub_10000EB10();
    sub_10000EB10();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v25 = sub_1000845A0();
  v26(v25);
  swift_bridgeObjectRelease();
  if (!*(void *)(v12 + 264)) {

  }
  sub_100084180();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EB74();
  sub_100084258();
  return v28(v27, v28, v29, v30, v31, v32, v33, v34, a9, a10, a11, a12);
}

#error "100074BCC: call analysis failed (funcsize=625)"

uint64_t sub_100074D2C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, os_log_t log, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, long long a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33)
{
  sub_100084AFC();
  a32 = v34;
  a33 = v35;
  a31 = v33;
  sub_10000E788((uint64_t)(v33 + 8));
  uint64_t v36 = off_10017C388;
  swift_retain();
  if (v36 != (void *)-1) {
    swift_once();
  }
  uint64_t v38 = v33[21];
  uint64_t v37 = v33[22];
  uint64_t v39 = v33[20];
  uint64_t v40 = sub_10000BEE4(v39, (uint64_t)qword_100181C00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v37, v40, v39);
  swift_release();
  swift_bridgeObjectRetain();
  uint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.error.getter();
  BOOL v43 = os_log_type_enabled(v41, v42);
  uint64_t v94 = v33[57];
  uint64_t v93 = (void *)v33[48];
  *(void *)&a19 = v33[49];
  unint64_t v44 = (void *)v33[46];
  uint64_t v92 = v33[47];
  unint64_t v45 = v33[45];
  if (v43)
  {
    a10 = v33[44];
    a11 = v33 + 15;
    a15 = v33[22];
    a16 = v33[31];
    a12 = v33[21];
    log = (os_log_t)v33[20];
    uint64_t v46 = (uint8_t *)sub_1000536D0();
    uint64_t v47 = (void *)sub_100060438();
    a21 = (uint64_t)v47;
    *(_DWORD *)uint64_t v46 = 136315138;
    swift_bridgeObjectRetain();
    v33[15] = sub_100013090(a10, v45, &a21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "AutoShortcutsDonator failed to donate App Shortcuts to Siri Vocabulary and server for %s", v46, 0xCu);
    swift_arrayDestroy();
    sub_10000EB10();
    sub_10000EB10();

    swift_release();
    swift_bridgeObjectRelease();
    swift_errorRelease();

    sub_100013EC4();
    v48();
    uint64_t v49 = a16;
  }
  else
  {
    uint64_t v47 = (void *)v33[31];

    swift_release();
    swift_bridgeObjectRelease();
    swift_errorRelease();

    swift_bridgeObjectRelease_n();
    sub_100084AC0();
    v50();
    uint64_t v49 = (uint64_t)v47;
  }
  sub_100082E28(v49);
  sub_100084214();
  if (!v53)
  {
    a9 = v33 + 17;
    os_log_type_t v63 = &os_transaction_needs_more_time_ptr;
    *(void *)&long long v52 = 136315138;
    a19 = v52;
    a10 = (uint64_t)&type metadata for Any + 8;
    do
    {
      v33[43] = v51;
      uint64_t v64 = v33[39] + 16 * v51;
      uint64_t v65 = *(void **)(v64 + 32);
      v33[44] = v65;
      uint64_t v66 = *(void **)(v64 + 40);
      v33[45] = v66;
      uint64_t v41 = objc_allocWithZone((Class)v63[417]);
      swift_bridgeObjectRetain_n();
      id v67 = sub_100081E58((uint64_t)v65, (uint64_t)v66, 0, (SEL *)&selRef_initWithBundleIdentifier_allowPlaceholder_error_);
      v33[46] = v67;
      if (v67)
      {
        uint64_t v68 = v33[29];
        id v69 = v67;
        sub_1000B5418();
        sub_100084470(v68);
        uint64_t v94 = (uint64_t)v69;
        if (!v53)
        {
          uint64_t v77 = v33[42];
          uint64_t v78 = v33[32];
          sub_100083DFC(v33[29], v33[31], (void (*)(void))type metadata accessor for LSLinkBundleRecord);
          v33[47] = *(void *)(v78 + v77);
          uint64_t v79 = self;
          swift_retain();
          v33[48] = [v79 sharedVocabulary];
          v33[49] = sub_1000B21A4();
          swift_bridgeObjectRetain();
          v33[50] = sub_1000641A8((uint64_t)v65, (uint64_t)v66);
          uint64_t v81 = v33[37];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v82 = sub_100070864(v81, v65, v66);
          sub_100084E8C((uint64_t)v82);
          swift_bridgeObjectRetain();
          uint64_t v83 = sub_100084DB8();
          uint64_t v85 = sub_1000683B4(v83, v84);
          swift_bridgeObjectRelease();
          v33[52] = v85;
          uint64_t v86 = swift_task_alloc();
          id v87 = (void *)sub_100084D88(v86);
          *id v87 = v88;
          v87[1] = sub_1000734C8;
          sub_100084DB8();
          sub_1000842CC();
          return sub_1000B4E58(v89, v90);
        }
        uint64_t v70 = sub_100084C04();
        sub_1000347E8(v70, &qword_10017EB18);
        uint64_t v71 = off_10017C388;
        swift_retain();
        if (v71 != (void *)-1) {
          swift_once();
        }
        uint64_t v72 = sub_100084BF0();
        sub_10000BEE4(v72, (uint64_t)qword_100181C00);
        uint64_t v73 = sub_10008490C();
        v74(v73);
        swift_release();
        swift_bridgeObjectRetain();
        uint64_t v41 = Logger.logObject.getter();
        os_log_type_t v75 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v41, v75))
        {
          uint64_t v76 = sub_1000536D0();
          a21 = sub_100060438();
          *(_DWORD *)uint64_t v76 = a19;
          swift_bridgeObjectRetain();
          *(void *)(v76 + 4) = sub_1000849C8();
          sub_100084634();
          _os_log_impl((void *)&_mh_execute_header, v41, v75, "Could not create LSLinkBundleRecord from applicationRecord for %s", (uint8_t *)v76, 0xCu);
          swift_arrayDestroy();
          os_log_type_t v63 = &os_transaction_needs_more_time_ptr;
          sub_10000EB10();
          sub_10000EB10();
          uint64_t v47 = v69;
        }
        else
        {
          uint64_t v47 = v69;

          sub_10001B508();
        }

        sub_1000847DC();
        v80();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      sub_100084214();
    }
    while (!v53);
  }
  sub_100084EA4();

  sub_1000847C0();
  swift_bridgeObjectRelease();

  sub_100084180();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EB74();
  sub_1000842CC();
  return v55(v54, v55, v56, v57, v58, v59, v60, v61, a9, a10, a11, a12, v33 + 16, log, a15, a16, v92, v93, a19,
           *((void *)&a19 + 1),
           v94,
           a21,
           a22,
           a23,
           a24,
           a25);
}

uint64_t sub_100075900()
{
  return sub_1000720C8();
}

uint64_t sub_100075918(void *a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  uint64_t v5 = sub_10000BEA0(a1, a1[3]);
  long long v6 = *((_OWORD *)v5 + 1);
  v8[0] = *(_OWORD *)v5;
  v8[1] = v6;
  uint64_t v9 = v5[4];
  return sub_100082840((uint64_t)v8, a2, v4);
}

uint64_t sub_10007596C()
{
  sub_10000BF1C((uint64_t *)&unk_10017EB90);
  sub_10000DA7C();
  uint64_t v0 = Dictionary.init(dictionaryLiteral:)();
  sub_10000BF1C(&qword_10017EBA0);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = v0;
  qword_100181C30 = result;
  return result;
}

id sub_1000759E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  sub_100084874();
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v15 = v9;
  UUID.init()();
  id result = (id)LNLogSubsystem;
  if (LNLogSubsystem)
  {
    String.init(cString:)();
    Logger.init(subsystem:category:)();
    os_log_type_t v17 = &v15[OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_auditToken];
    *(void *)os_log_type_t v17 = v10;
    *((void *)v17 + 1) = a2;
    *((void *)v17 + 2) = a3;
    *((void *)v17 + 3) = a4;
    BOOL v18 = (uint64_t *)&v15[OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_sourceBundleIdentifier];
    uint64_t v19 = a5;
    *BOOL v18 = a5;
    v18[1] = a6;
    *(void *)&v15[OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_observationStatusRegistrySource] = a7;
    *(_DWORD *)&v15[OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_processID] = a8;
    *(void *)&v15[OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_registrySource] = a9;
    id v20 = objc_allocWithZone((Class)LSApplicationExtensionRecord);
    swift_retain();
    swift_retain();
    sub_100084DC4();
    id v21 = sub_100081E58(a5, a6, 1, (SEL *)&selRef_initWithBundleIdentifier_requireValid_error_);
    uint64_t v22 = LSApplicationExtensionRecord.attributionBundleIdentifier.getter();
    if (v23)
    {
      uint64_t v24 = v22;
      uint64_t v25 = v23;
      swift_bridgeObjectRelease();

      uint64_t v19 = v24;
      a6 = v25;
    }
    else
    {
      id v26 = [v21 containingBundleRecord];
      if (v26
        && (uint64_t v27 = v26,
            id v28 = [v26 bundleIdentifier],
            v27,
            v28))
      {
        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v30 = v29;
        swift_bridgeObjectRelease();

        a6 = v30;
      }
      else
      {
      }
    }
    uint64_t v31 = (uint64_t *)&v15[OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_destinationBundleIdentifier];
    uint64_t *v31 = v19;
    v31[1] = a6;

    v37.receiver = v15;
    v37.super_class = ObjectType;
    id v32 = [super init];
    swift_release();
    swift_release();
    return v32;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100075C50()
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v2 = (objc_class *)ObjectType;
  if (qword_10017C3A0 != -1) {
    uint64_t ObjectType = swift_once();
  }
  uint64_t v3 = (os_unfair_lock_s *)qword_100181C30;
  __chkstk_darwin(ObjectType);
  swift_retain();
  os_unfair_lock_lock(v3 + 6);
  uint64_t v4 = (uint64_t *)sub_100084C94();
  sub_100083F28(v4);
  os_unfair_lock_unlock(v3 + 6);
  swift_release();
  v6.receiver = v0;
  v6.super_class = v2;
  return [super dealloc];
}

id sub_100075D44(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID();
  unint64_t v54 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v45 = (char *)v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = sub_10000BF1C((uint64_t *)&unk_10017EE00);
  __chkstk_darwin(v51);
  long long v52 = (char *)v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000BF1C(&qword_10017C788);
  __chkstk_darwin(v8 - 8);
  uint64_t v50 = (char *)v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v44 - v11;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v44 - v14;
  uint64_t v16 = sub_10000BF1C(&qword_10017E138);
  __chkstk_darwin(v16 - 8);
  uint64_t v46 = (uint64_t)v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  id v20 = (char *)v44 - v19;
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)v44 - v22;
  uint64_t v24 = self;
  long long v25 = *(_OWORD *)(a2 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_auditToken + 16);
  v53[0] = *(_OWORD *)(a2 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_auditToken);
  v53[1] = v25;
  id result = [v24 if_dataWithAuditToken:v53];
  if (result)
  {
    uint64_t v27 = result;
    uint64_t v47 = a2;
    uint64_t v49 = v2;
    uint64_t v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v30 = v29;

    v44[1] = (uint64_t)a1;
    uint64_t v31 = *a1;
    sub_10000DADC(v28, v30);
    sub_10001B7C4(v28, v30, v31);
    uint64_t v48 = v28;
    uint64_t v32 = v28;
    uint64_t v33 = (uint64_t)v23;
    sub_10000DA10(v32, v30);
    sub_100034614((uint64_t)v23, (uint64_t)v20, &qword_10017E138);
    uint64_t v34 = sub_10000BF1C((uint64_t *)&unk_10017EB90);
    int v35 = sub_10000D5D8((uint64_t)v20, 1, v34);
    v44[0] = v34;
    if (v35 == 1)
    {
      sub_1000347E8((uint64_t)v20, &qword_10017E138);
      uint64_t v36 = 1;
      unint64_t v37 = v54;
    }
    else
    {

      unint64_t v37 = v54;
      (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v15, v20, v5);
      uint64_t v36 = 0;
    }
    uint64_t v38 = (uint64_t)v52;
    sub_10000D5B0((uint64_t)v15, v36, 1, v5);
    (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v12, v47 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_identifier, v5);
    sub_10000D5B0((uint64_t)v12, 0, 1, v5);
    uint64_t v39 = v38 + *(int *)(v51 + 48);
    sub_100034614((uint64_t)v15, v38, &qword_10017C788);
    sub_100034614((uint64_t)v12, v39, &qword_10017C788);
    if (sub_10000D5D8(v38, 1, v5) == 1)
    {
      sub_1000347E8((uint64_t)v12, &qword_10017C788);
      sub_1000347E8((uint64_t)v15, &qword_10017C788);
      if (sub_10000D5D8(v39, 1, v5) == 1)
      {
        sub_1000347E8(v38, &qword_10017C788);
LABEL_12:
        uint64_t v43 = v46;
        sub_10000D5B0(v46, 1, 1, v44[0]);
        sub_10004B680(v43, v48, v30);
        return (id)sub_1000347E8(v33, &qword_10017E138);
      }
    }
    else
    {
      unint64_t v54 = v30;
      uint64_t v40 = (uint64_t)v50;
      sub_100034614(v38, (uint64_t)v50, &qword_10017C788);
      if (sub_10000D5D8(v39, 1, v5) != 1)
      {
        uint64_t v41 = v45;
        (*(void (**)(char *, uint64_t, uint64_t))(v37 + 32))(v45, v39, v5);
        sub_100083F44(&qword_10017EE10, (void (*)(uint64_t))&type metadata accessor for UUID);
        LODWORD(v52) = dispatch thunk of static Equatable.== infix(_:_:)();
        os_log_type_t v42 = *(void (**)(char *, uint64_t))(v37 + 8);
        v42(v41, v5);
        sub_1000347E8((uint64_t)v12, &qword_10017C788);
        sub_1000347E8((uint64_t)v15, &qword_10017C788);
        v42(v50, v5);
        sub_1000347E8(v38, &qword_10017C788);
        unint64_t v30 = v54;
        if (v52) {
          goto LABEL_12;
        }
        goto LABEL_13;
      }
      sub_1000347E8((uint64_t)v12, &qword_10017C788);
      sub_1000347E8((uint64_t)v15, &qword_10017C788);
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v40, v5);
      unint64_t v30 = v54;
    }
    sub_1000347E8(v38, (uint64_t *)&unk_10017EE00);
LABEL_13:
    sub_1000347E8(v33, &qword_10017E138);
    return (id)sub_10000DA10(v48, v30);
  }
  return result;
}

uint64_t sub_10007644C()
{
  return type metadata accessor for ApplicationServiceInstance();
}

uint64_t type metadata accessor for ApplicationServiceInstance()
{
  uint64_t result = qword_10017EAD0;
  if (!qword_10017EAD0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10007649C()
{
  *(void *)(v1 + 16) = v0;
  return sub_100084120((uint64_t)sub_1000764B4);
}

uint64_t sub_1000764B4()
{
  sub_10006039C();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000119E4;
  return sub_100076564();
}

uint64_t sub_100076564()
{
  sub_10000EC58();
  v1[20] = v2;
  v1[21] = v0;
  v1[19] = v3;
  sub_100060358();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_1000765F0()
{
  sub_100013E0C();
  uint64_t v1 = self;
  sub_10000EBA4();
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 policyWithBundleIdentifier:v2];

  v0[18] = 0;
  id v4 = [v3 connectionWithError:v0 + 18];
  v0[22] = v4;

  uint64_t v5 = (void *)v0[18];
  if (!v4)
  {
    id v10 = v5;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_100084A70();
    __asm { BRAA            X1, X16 }
  }
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_100076800;
  uint64_t v6 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_100076EB4;
  v0[13] = &unk_100171848;
  v0[14] = v6;
  id v7 = v5;
  [v4 fetchAppShortcutParametersWithCompletionHandler:v0 + 10];
  sub_100084A70();
  return _swift_continuation_await(v8);
}

uint64_t sub_100076800()
{
  sub_10000EC58();
  sub_100010BAC();
  sub_100060250();
  *NSString v2 = v1;
  *NSString v2 = *v0;
  *(void *)(v1 + 184) = *(void *)(v3 + 48);
  sub_100060358();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_10007690C()
{
  sub_100013E0C();
  uint64_t v1 = v0[16];
  v0[24] = v0[15];
  v0[25] = v1;
  v0[26] = v0[17];
  NSString v2 = (void *)swift_task_alloc();
  v0[27] = v2;
  *NSString v2 = v0;
  v2[1] = sub_1000769EC;
  sub_100084A70();
  return sub_100076FA4();
}

uint64_t sub_1000769EC()
{
  sub_10000EC58();
  sub_100010BAC();
  sub_100060250();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_100010BC4();
  *uint64_t v5 = v4;
  *(void *)(v6 + 224) = v0;
  swift_task_dealloc();
  sub_100060358();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100076AF4()
{
  sub_10006039C();
  sub_100084BBC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v2 = *(uint64_t (**)(void))(v1 + 8);
  return v2();
}

uint64_t sub_100076B94()
{
  sub_10006039C();
  uint64_t v1 = *(void **)(v0 + 176);
  swift_willThrow();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100076C2C()
{
  sub_10006039C();
  sub_100084BBC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v2 = *(uint64_t (**)(void))(v1 + 8);
  return v2();
}

uint64_t sub_100076CEC(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100076D94;
  return sub_10007649C();
}

uint64_t sub_100076D94()
{
  sub_100084274();
  sub_100013E0C();
  uint64_t v3 = v0;
  sub_10008412C();
  uint64_t v5 = v4;
  sub_100010BC4();
  *uint64_t v6 = v5;
  uint64_t v7 = *(void **)(v1 + 16);
  *uint64_t v6 = *v2;
  swift_task_dealloc();

  sub_100084824();
  if (v3)
  {
    _convertErrorToNSError(_:)();
    sub_10008488C();
    uint64_t v8 = sub_10008436C();
    v9(v8);
  }
  else
  {
    uint64_t v10 = sub_100084380();
    v11(v10);
  }
  _Block_release(*(const void **)(v5 + 24));
  sub_100084394();
  sub_100084200();
  return v13(v12, v13, v14, v15, v16, v17, v18, v19);
}

uint64_t sub_100076EB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (a5)
  {
    id v6 = a5;
    return sub_1000F7C88(v5, v6);
  }
  else
  {
    sub_10000D9D4(0, &qword_10017EDA8);
    uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    sub_10000D9D4(0, &qword_10017EDB0);
    uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    return sub_1000F7CF4(v5, v8, v9, v10);
  }
}

uint64_t sub_100076FA4()
{
  sub_10000EC58();
  v1[20] = v2;
  v1[21] = v0;
  v1[18] = v3;
  v1[19] = v4;
  sub_10000BF1C(&qword_10017EB18);
  v1[22] = swift_task_alloc();
  v1[23] = type metadata accessor for LSLinkBundleRecord(0);
  v1[24] = swift_task_alloc();
  sub_100060358();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_100077064()
{
  sub_100084274();
  sub_100013E0C();
  uint64_t v1 = (void *)(v0[21] + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_destinationBundleIdentifier);
  v0[25] = *v1;
  v0[26] = v1[1];
  id v2 = objc_allocWithZone((Class)LSApplicationRecord);
  swift_bridgeObjectRetain();
  uint64_t v3 = sub_100084E60();
  v0[27] = sub_100081E58(v3, v4, 0, v5);
  v0[28] = sub_100070E9C((void (*)(uint64_t, uint64_t))sub_1000840E4, (void (*)(void, void))sub_1000840EC, (void (*)(void, void))sub_1000840E8);
  swift_bridgeObjectRetain();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[29] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100077204;
  sub_100084E60();
  sub_100084200();
  return sub_1000B4E58(v7, v8);
}

uint64_t sub_100077204()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v3 = v2;
  sub_100060250();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 240) = v5;
  *(void *)(v3 + 248) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_bridgeObjectRelease();
  }
  sub_100060358();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_1000772F0()
{
  sub_10000EC58();
  swift_bridgeObjectRetain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10007738C;
  uint64_t v2 = sub_100084880(*(void *)(v0 + 200));
  return sub_1000B5144(v2, v3);
}

uint64_t sub_10007738C()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v3 = v2;
  sub_100060250();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 264) = v5;
  *(void *)(v3 + 272) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_bridgeObjectRelease();
  }
  sub_100060358();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_100077478()
{
  uint64_t v1 = *(void *)(v0 + 272);
  uint64_t v2 = *(void **)(v0 + 224);
  swift_bridgeObjectRetain();
  sub_100084E60();
  sub_100063EB0();
  *(void *)(v0 + 280) = v3;
  if (v1)
  {
    uint64_t v5 = *(void **)(v0 + 216);
    uint64_t v4 = *(void **)(v0 + 224);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_task_dealloc();
    swift_task_dealloc();
    sub_100084420();
LABEL_4:
    return v15();
  }
  unint64_t v6 = *(void *)(v0 + 264);
  unint64_t v7 = *(void *)(v0 + 240);
  uint64_t v8 = *(void *)(v0 + 200);
  uint64_t v9 = *(void **)(v0 + 208);
  uint64_t v39 = *(void **)(v0 + 168);
  unint64_t v40 = *(void *)(v0 + 160);
  unint64_t v42 = *(void *)(v0 + 152);
  uint64_t v10 = v3;
  unint64_t v38 = *(void *)(v0 + 144);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_1000705F0(v10);
  sub_10004BBAC(v8, (unint64_t)v9, v7, (unint64_t)v11, v6);
  uint64_t v43 = v12;
  uint64_t v41 = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for AppShortcutInterpolator();
  swift_bridgeObjectRetain();
  sub_100031FC4(v8, (uint64_t)v9, v38);
  swift_bridgeObjectRelease();
  sub_100070294((uint64_t)_swiftEmptyArrayStorage, v40, v39);
  swift_bridgeObjectRetain();
  sub_100054F1C();
  sub_100054F1C();
  *(void *)(v0 + 288) = v43;
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_1000703D4(v42, v8, (uint64_t)v9);
  *(void *)(v0 + 296) = sub_100078808(v41, (uint64_t)v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_10006C0F0();
  uint64_t v17 = *(void **)(v0 + 216);
  uint64_t v18 = *(void *)(v0 + 176);
  swift_bridgeObjectRelease();
  id v19 = v17;
  sub_1000B5418();
  sub_100084470(v18);
  if (v20)
  {
    uint64_t v21 = *(void *)(v0 + 176);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000347E8(v21, &qword_10017EB18);
    if (qword_10017C460 != -1) {
      swift_once();
    }
    uint64_t v22 = *(void **)(v0 + 168);
    uint64_t v23 = type metadata accessor for Logger();
    sub_10000BEE4(v23, (uint64_t)qword_100181ED8);
    id v24 = v22;
    long long v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      unint64_t v44 = *(void **)(v0 + 168);
      uint64_t v27 = (uint8_t *)sub_1000536D0();
      uint64_t v9 = (void *)sub_100060438();
      *(_DWORD *)uint64_t v27 = 136315138;
      uint64_t v2 = v27 + 12;
      swift_bridgeObjectRetain();
      uint64_t v28 = sub_100084DB8();
      *(void *)(v0 + 112) = sub_100013090(v28, v29, v30);
      sub_1000849B0();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Invalid bundle %s", v27, 0xCu);
      swift_arrayDestroy();
      sub_10000EB10();
      sub_10000EB10();
    }
    else
    {
    }
    if (qword_10017C2D8 != -1) {
      swift_once();
    }
    sub_100084588();
    sub_10000BF1C((uint64_t *)&unk_10017E690);
    uint64_t inited = (__n128 *)swift_initStackObject();
    sub_10008476C(inited, (__n128)xmmword_10013EF20);
    swift_retain();
    sub_100082098((uint64_t)inited);
    sub_10007FFF0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();

    swift_task_dealloc();
    swift_task_dealloc();
    sub_100070028();
    goto LABEL_4;
  }
  uint64_t v31 = *(void *)(v0 + 224);
  uint64_t v33 = *(void *)(v0 + 184);
  uint64_t v32 = *(void *)(v0 + 192);
  sub_100083DFC(*(void *)(v0 + 176), v32, (void (*)(void))type metadata accessor for LSLinkBundleRecord);
  *(void *)(v0 + 304) = *(void *)(v31 + OBJC_IVAR____TtC10LinkDaemon8Registry_appShortcutInterpolator);
  uint64_t v34 = self;
  swift_retain();
  *(void *)(v0 + 312) = [v34 sharedVocabulary];
  *(void *)(v0 + 320) = sub_1000B21A4();
  *(void *)(v0 + 88) = v33;
  *(void *)(v0 + 96) = &off_100172A40;
  int v35 = sub_1000274F4((uint64_t *)(v0 + 64));
  sub_100082E84(v32, (uint64_t)v35);
  uint64_t v36 = (void *)swift_task_alloc();
  *(void *)(v0 + 328) = v36;
  void *v36 = v0;
  v36[1] = sub_100077A84;
  sub_100084874();
  return sub_1000066FC();
}

uint64_t sub_100077A84()
{
  sub_100084274();
  sub_100013E0C();
  sub_100010BAC();
  uint64_t v3 = v2;
  sub_100060250();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_100010BC4();
  *unint64_t v6 = v5;
  *(void *)(v3 + 336) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v0) {
    sub_10000E788(v3 + 64);
  }
  sub_100060358();
  sub_100084200();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100077BC4()
{
  sub_1000700D0();
  uint64_t v3 = *(void **)(v0 + 312);
  uint64_t v4 = *(void *)(v0 + 192);
  swift_release();

  swift_bridgeObjectRelease();
  sub_100082E28(v4);
  if (qword_10017C2D8 != -1) {
    swift_once();
  }
  sub_100084588();
  sub_10000BF1C((uint64_t *)&unk_10017E690);
  uint64_t inited = (__n128 *)swift_initStackObject();
  sub_10008476C(inited, (__n128)xmmword_10013EF20);
  swift_retain();
  sub_100082098((uint64_t)inited);
  sub_10007FFF0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  sub_100070028();
  return v6();
}

uint64_t sub_100077CFC()
{
  sub_10000EC58();
  uint64_t v1 = *(void **)(v0 + 216);
  uint64_t v2 = *(void **)(v0 + 224);
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EB74();
  return v3();
}

uint64_t sub_100077D78()
{
  sub_10006039C();
  uint64_t v2 = *(void **)(v0 + 216);
  uint64_t v1 = *(void **)(v0 + 224);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EB74();
  return v3();
}

uint64_t sub_100077E08()
{
  uint64_t v21 = v0;
  uint64_t v3 = (void *)v0[39];
  uint64_t v4 = v0[24];
  swift_release();

  swift_bridgeObjectRelease();
  sub_100082E28(v4);
  sub_10000E788((uint64_t)(v0 + 8));
  if (qword_10017C460 != -1) {
    swift_once();
  }
  uint64_t v5 = (void *)v0[21];
  uint64_t v6 = type metadata accessor for Logger();
  sub_10000BEE4(v6, (uint64_t)qword_100181ED8);
  id v7 = v5;
  swift_errorRetain();
  id v8 = v7;
  swift_errorRetain();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (sub_1000845C4(v10))
  {
    unint64_t v11 = v0[26];
    uint64_t v18 = v0[25];
    uint64_t v12 = (void *)v0[21];
    uint64_t v13 = swift_slowAlloc();
    id v19 = (void *)sub_100084E08();
    uint64_t v20 = sub_100060438();
    *(_DWORD *)uint64_t v13 = 136315394;
    swift_bridgeObjectRetain();
    v0[16] = sub_100013090(v18, v11, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v13 + 12) = 2112;
    uint64_t v1 = (void *)(v13 + 14);
    swift_errorRetain();
    uint64_t v2 = (void *)_swift_stdlib_bridgeErrorToNSError();
    v0[17] = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v19 = v2;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, (os_log_type_t)v3, "Error donating App Shortcuts to Siri for %s: %@", (uint8_t *)v13, 0x16u);
    sub_10000BF1C((uint64_t *)&unk_10017EB20);
    sub_1000848CC();
    sub_10000EB10();
    swift_arrayDestroy();
    sub_10000EB10();
    sub_10000EB10();

    swift_errorRelease();
  }
  else
  {
    uint64_t v14 = (void *)v0[21];
    swift_errorRelease();

    swift_errorRelease();
    swift_errorRelease();
  }
  if (qword_10017C2D8 != -1) {
    swift_once();
  }
  sub_100084588();
  sub_10000BF1C((uint64_t *)&unk_10017E690);
  uint64_t inited = (__n128 *)swift_initStackObject();
  sub_10008476C(inited, (__n128)xmmword_10013EF20);
  swift_retain();
  sub_100082098((uint64_t)inited);
  sub_10007FFF0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  sub_100070028();
  return v16();
}

uint64_t sub_100078160(uint64_t *a1, id *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LNAppShortcutParameterRecord();
  uint64_t v74 = *(void *)(v6 - 8);
  os_log_type_t v75 = (int *)v6;
  double v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = [*a2 basePhraseTemplateSubstitutions:v7];
  sub_10000D9D4(0, &qword_10017D780);
  unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v12 = v11;
  unint64_t v64 = v11;
  if (v11 >> 62) {
    goto LABEL_42;
  }
  uint64_t v13 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v13)
  {
LABEL_3:
    unint64_t v14 = 0;
    uint64_t v68 = (uint64_t *)(a3 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_destinationBundleIdentifier);
    unint64_t v63 = v12 & 0xC000000000000001;
    uint64_t v61 = v12 & 0xFFFFFFFFFFFFFF8;
    unint64_t v60 = v12 + 32;
    uint64_t v62 = v13;
    id v69 = a1;
    while (1)
    {
      if (v63)
      {
        unint64_t v15 = v14;
        id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v14 >= *(void *)(v61 + 16)) {
          goto LABEL_41;
        }
        unint64_t v15 = v14;
        id v16 = *(id *)(v60 + 8 * v14);
      }
      id v76 = v16;
      BOOL v17 = __OFADD__(v15, 1);
      a3 = v15 + 1;
      if (v17) {
        goto LABEL_40;
      }
      uint64_t v65 = a3;
      a3 = (uint64_t)[v76 parameterSubstitutions];
      sub_10000D9D4(0, (unint64_t *)&unk_10017EDD0);
      unint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v18 >> 62) {
        break;
      }
      uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v19) {
        goto LABEL_11;
      }
LABEL_33:

      swift_bridgeObjectRelease();
      unint64_t v14 = v65;
      if (v65 == v62) {
        return swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v19) {
      goto LABEL_33;
    }
LABEL_11:
    unint64_t v20 = 0;
    unint64_t v71 = v18;
    unint64_t v72 = v18 & 0xC000000000000001;
    unint64_t v66 = v18 + 32;
    uint64_t v67 = v18 & 0xFFFFFFFFFFFFFF8;
    uint64_t v70 = v19;
    while (1)
    {
      if (v72)
      {
        id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v20 >= *(void *)(v67 + 16)) {
          goto LABEL_39;
        }
        id v21 = *(id *)(v66 + 8 * v20);
      }
      id v82 = v21;
      BOOL v17 = __OFADD__(v20++, 1);
      if (v17)
      {
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        swift_bridgeObjectRetain();
        uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        unint64_t v12 = v64;
        if (!v13) {
          return swift_bridgeObjectRelease();
        }
        goto LABEL_3;
      }
      id v22 = [v82 substitutionValues];
      sub_10000D9D4(0, &qword_10017D788);
      unint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v23 >> 62)
      {
        swift_bridgeObjectRetain();
        a3 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!a3)
        {
LABEL_31:

          swift_bridgeObjectRelease();
          goto LABEL_32;
        }
      }
      else
      {
        a3 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!a3) {
          goto LABEL_31;
        }
      }
      if (a3 < 1) {
        goto LABEL_38;
      }
      unint64_t v73 = v20;
      uint64_t v24 = 0;
      uint64_t v25 = *v68;
      uint64_t v79 = v68[1];
      uint64_t v80 = v25;
      uint64_t v77 = a3;
      unint64_t v78 = v23 & 0xC000000000000001;
      uint64_t v26 = *a1;
      unint64_t v81 = v23;
      do
      {
        uint64_t v86 = v26;
        if (v78) {
          id v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v27 = *(id *)(v23 + 8 * v24 + 32);
        }
        uint64_t v28 = v27;
        id v29 = [v27 parameterIdentifier];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v30 = v79;
        swift_bridgeObjectRetain();
        id v31 = [v76 basePhraseTemplate];
        uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v84 = v33;
        uint64_t v85 = v32;

        id v83 = [v28 title];
        id v34 = [v28 titleKey];
        uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v37 = v36;

        id v38 = [v82 parameterIdentifier];
        uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v41 = v40;

        id v42 = [v28 value];
        id v43 = objc_allocWithZone((Class)LNProperty);
        id v44 = sub_1000FC04C(v39, v41, v42);
        id v45 = [v28 optionsCollectionTitle];
        uint64_t v46 = sub_10008276C(v28);
        uint64_t v47 = v75;
        uint64_t v48 = &v9[v75[5]];
        *(void *)uint64_t v48 = v80;
        *((void *)v48 + 1) = v30;
        uint64_t v49 = &v9[v47[6]];
        uint64_t v50 = v84;
        *(void *)uint64_t v49 = v85;
        *((void *)v49 + 1) = v50;
        *(void *)&v9[v47[7]] = v83;
        uint64_t v51 = (uint64_t *)&v9[v47[8]];
        *uint64_t v51 = v35;
        v51[1] = v37;
        *(void *)&v9[v47[9]] = v44;
        *(void *)&v9[v47[10]] = v45;
        long long v52 = (uint64_t *)&v9[v47[11]];
        *long long v52 = v46;
        v52[1] = v53;
        uint64_t v26 = v86;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v26 = sub_10001E8F8(0, *(void *)(v26 + 16) + 1, 1, v26);
        }
        uint64_t v54 = v77;
        unint64_t v56 = *(void *)(v26 + 16);
        unint64_t v55 = *(void *)(v26 + 24);
        a3 = v56 + 1;
        unint64_t v23 = v81;
        if (v56 >= v55 >> 1) {
          uint64_t v26 = sub_10001E8F8(v55 > 1, v56 + 1, 1, v26);
        }
        ++v24;
        *(void *)(v26 + 16) = a3;
        sub_100083DFC((uint64_t)v9, v26+ ((*(unsigned __int8 *)(v74 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80))+ *(void *)(v74 + 72) * v56, (void (*)(void))type metadata accessor for LNAppShortcutParameterRecord);
      }
      while (v54 != v24);

      swift_bridgeObjectRelease();
      uint64_t v57 = v69;
      uint64_t v19 = v70;
      uint64_t *v69 = v26;
      a1 = v57;
      unint64_t v20 = v73;
LABEL_32:
      if (v20 == v19) {
        goto LABEL_33;
      }
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100078808(uint64_t result, uint64_t a2)
{
  if (__OFADD__(*(void *)(a2 + 16), *(void *)(result + 16)))
  {
    __break(1u);
  }
  else
  {
    sub_10001EF70();
    uint64_t v4 = v2;
    uint64_t v3 = swift_bridgeObjectRetain();
    sub_100054944(v3);
    swift_bridgeObjectRetain();
    sub_100054898();
    return v4;
  }
  return result;
}

uint64_t sub_100078934(int a1, int a2, int a3, void *aBlock, void *a5)
{
  v5[2] = a5;
  v5[3] = _Block_copy(aBlock);
  sub_10000D9D4(0, &qword_10017EDA8);
  v5[4] = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  sub_10000D9D4(0, &qword_10017EDB0);
  void v5[5] = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v5[6] = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  a5;
  double v7 = (void *)swift_task_alloc();
  v5[7] = v7;
  *double v7 = v5;
  v7[1] = sub_100078A78;
  return sub_100076FA4();
}

uint64_t sub_100078A78()
{
  sub_1000700D0();
  uint64_t v3 = v0;
  sub_100084228();
  uint64_t v5 = v4;
  sub_100010BC4();
  *uint64_t v6 = v5;
  double v7 = *(void **)(v2 + 16);
  *uint64_t v6 = *v1;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100084C24();
  if (v3)
  {
    uint64_t v8 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    uint64_t v9 = sub_100084E34();
    v10(v9);
  }
  else
  {
    uint64_t v11 = sub_100084E20();
    v12(v11);
  }
  _Block_release(*(const void **)(v5 + 24));
  sub_100084A18();
  return v13();
}

uint64_t sub_100078C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  v4[9] = a2;
  return sub_100084120((uint64_t)sub_100078C20);
}

uint64_t sub_100078C20()
{
  uint64_t v1 = sub_100070E9C((void (*)(uint64_t, uint64_t))sub_1000840E4, (void (*)(void, void))sub_1000840EC, (void (*)(void, void))sub_1000840E8);
  v0[12] = v1;
  uint64_t v4 = (void *)v1;
  uint64_t v5 = v0[10];
  uint64_t v6 = v0[11];
  if (!v5)
  {
    uint64_t v11 = *(void *)(v6 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_destinationBundleIdentifier);
    uint64_t v5 = *(void *)(v6 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_destinationBundleIdentifier + 8);
    swift_bridgeObjectRetain();
    goto LABEL_9;
  }
  double v7 = self;
  swift_bridgeObjectRetain();
  NSString v8 = String._bridgeToObjectiveC()();
  long long v15 = *(_OWORD *)(v6 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_auditToken + 16);
  long long v16 = *(_OWORD *)(v6 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_auditToken);
  v0[6] = sub_100079068;
  v0[7] = 0;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_1000790E0;
  v0[5] = &unk_1001717D0;
  uint64_t v9 = _Block_copy(v0 + 2);
  *((_OWORD *)v0 + 8) = v16;
  *((_OWORD *)v0 + 9) = v15;
  unsigned int v10 = [v7 validateEntitlement:v8 auditToken:v0 + 16 validator:v9];
  _Block_release(v9);

  if (v10)
  {
    uint64_t v11 = v0[9];
LABEL_9:
    v0[13] = v5;
    unint64_t v12 = (void *)swift_task_alloc();
    v0[14] = v12;
    *unint64_t v12 = v0;
    v12[1] = sub_100078EC8;
    uint64_t v13 = sub_100084880(v0[8]);
    return sub_1000B5960(v13, v11, v5);
  }
  swift_bridgeObjectRelease();
  sub_1000830BC();
  sub_10006FD2C();
  *unint64_t v14 = 0;
  swift_willThrow();

  sub_100084830();
  return v2();
}

uint64_t sub_100078EC8()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v3 = v2;
  sub_100060250();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_100010BC4();
  *uint64_t v6 = v5;
  *(void *)(v3 + 120) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_bridgeObjectRelease();
  }
  sub_100060358();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100078FAC()
{
  sub_10000EC58();

  sub_100070028();
  return v1();
}

uint64_t sub_100079004()
{
  sub_10000EC58();

  swift_bridgeObjectRelease();
  sub_10000EB74();
  return v1();
}

uint64_t sub_100079068(uint64_t a1)
{
  sub_100034614(a1, (uint64_t)v3, &qword_10017D3A0);
  if (v4)
  {
    uint64_t result = swift_dynamicCast();
    if (result) {
      return v2;
    }
  }
  else
  {
    sub_1000347E8((uint64_t)v3, &qword_10017D3A0);
    return 0;
  }
  return result;
}

uint64_t sub_1000790E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t (**)(long long *))(a1 + 32);
  if (a2)
  {
    *((void *)&v7 + 1) = swift_getObjectType();
    *(void *)&long long v6 = a2;
  }
  else
  {
    long long v6 = 0u;
    long long v7 = 0u;
  }
  swift_retain();
  swift_unknownObjectRetain();
  char v4 = v3(&v6);
  swift_release();
  sub_1000347E8((uint64_t)&v6, &qword_10017D3A0);
  return v4 & 1;
}

uint64_t sub_100079190(int a1, uint64_t a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  sub_10000D9D4(0, &qword_10017ED80);
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  void v4[4] = v7;
  if (a2)
  {
    a2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v9 = 0;
  }
  v4[5] = v9;
  a4;
  unsigned int v10 = (void *)swift_task_alloc();
  v4[6] = v10;
  *unsigned int v10 = v4;
  v10[1] = sub_1000792AC;
  return sub_100078C04(v7, a2, v9);
}

uint64_t sub_1000792AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1000847F4();
  sub_1000700D0();
  uint64_t v13 = v10;
  sub_10008412C();
  uint64_t v15 = v14;
  sub_100010BC4();
  *long long v16 = v15;
  uint64_t v17 = *(void **)(v11 + 16);
  *long long v16 = *v12;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100084824();
  if (v13)
  {
    _convertErrorToNSError(_:)();
    sub_10008488C();
    uint64_t v18 = sub_10008436C();
    v19(v18);
  }
  else
  {
    uint64_t v20 = sub_100084380();
    v21(v20);
  }
  _Block_release(*(const void **)(v15 + 24));
  sub_100084394();
  sub_100084744();
  return v23(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10);
}

uint64_t sub_100079404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return sub_100084120((uint64_t)sub_100079420);
}

uint64_t sub_100079420()
{
  sub_100084AD8();
  uint64_t v1 = (void *)sub_100070E9C((void (*)(uint64_t, uint64_t))sub_1000840E4, (void (*)(void, void))sub_1000840EC, (void (*)(void, void))sub_1000840E8);
  unsigned __int8 v2 = (void *)v0[4];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = (uint64_t *)(v0[5] + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_destinationBundleIdentifier);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  swift_bridgeObjectRetain();
  sub_10006EB38(v6, v7, v4, v3, v2);
  swift_bridgeObjectRelease();

  sub_100070028();
  return v9();
}

uint64_t sub_100079568(int a1, void *a2, void *aBlock, void *a4)
{
  v4[2] = a2;
  v4[3] = a4;
  void v4[4] = _Block_copy(aBlock);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;
  v4[5] = v8;
  id v10 = a2;
  a4;
  uint64_t v11 = (void *)swift_task_alloc();
  v4[6] = v11;
  *uint64_t v11 = v4;
  v11[1] = sub_100079654;
  return sub_100079404(v7, v9, (uint64_t)v10);
}

uint64_t sub_100079654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1000847F4();
  sub_1000700D0();
  uint64_t v13 = v10;
  sub_10008412C();
  uint64_t v15 = v14;
  sub_100010BC4();
  *long long v16 = v15;
  uint64_t v17 = *(void **)(v11 + 24);
  uint64_t v18 = *(void **)(v11 + 16);
  *long long v16 = *v12;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  sub_100084824();
  if (v13)
  {
    _convertErrorToNSError(_:)();
    sub_10008488C();
    uint64_t v19 = sub_10008436C();
    v20(v19);
  }
  else
  {
    uint64_t v21 = sub_100084380();
    v22(v21);
  }
  _Block_release(*(const void **)(v15 + 32));
  sub_100084394();
  sub_100084744();
  return v24(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10);
}

uint64_t sub_1000797A8()
{
  *(void *)(v1 + 16) = v0;
  return sub_100084120((uint64_t)sub_1000797C0);
}

uint64_t sub_1000797C0()
{
  sub_100084274();
  sub_100013E0C();
  uint64_t v1 = (void *)sub_100070E9C((void (*)(uint64_t, uint64_t))sub_1000840E4, (void (*)(void, void))sub_1000840EC, (void (*)(void, void))sub_1000840E8);
  unsigned __int8 v2 = (uint64_t *)(*(void *)(v0 + 16)
                 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_destinationBundleIdentifier);
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  swift_bridgeObjectRetain();
  sub_10006E84C(v4, v3);
  swift_bridgeObjectRelease();

  sub_100084504();
  sub_100084200();
  return v7(v5, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_100079914(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1000799BC;
  return sub_1000797A8();
}

uint64_t sub_1000799BC()
{
  sub_10006039C();
  uint64_t v2 = v0;
  sub_100010BAC();
  uint64_t v4 = v3;
  sub_100060250();
  *uint64_t v5 = v4;
  uint64_t v7 = *(void **)(v6 + 16);
  uint64_t v8 = *v1;
  sub_100010BC4();
  *uint64_t v9 = v8;
  swift_task_dealloc();

  if (v2)
  {
    _convertErrorToNSError(_:)();
    sub_100084A84();
    sub_100084ACC();
  }
  else
  {
    sub_10000D9D4(0, &qword_10017ED58);
    Dictionary._bridgeToObjectiveC()();
    sub_100084AE4();
    sub_100084B48();
  }
  uint64_t v10 = *(const void **)(v4 + 24);
  uint64_t v11 = sub_100084288();
  v12(v11);

  _Block_release(v10);
  sub_10000EB74();
  return v13();
}

uint64_t sub_100079B0C()
{
  sub_10000EC58();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100079B94;
  return sub_1000797A8();
}

uint64_t sub_100079B94()
{
  sub_10006039C();
  uint64_t v3 = v2;
  sub_100010BAC();
  uint64_t v5 = v4;
  sub_100060250();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  sub_100010BC4();
  *uint64_t v8 = v7;
  *(void *)(v5 + 32) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_100084A18();
    return v9();
  }
  else
  {
    *(void *)(v5 + 40) = v3;
    sub_100060358();
    return _swift_task_switch(v11, v12, v13);
  }
}

void sub_100079CA4()
{
  sub_100013E0C();
  uint64_t v1 = sub_100082474(*(void *)(v0 + 40));
  swift_bridgeObjectRelease();
  sub_1000706A0((uint64_t)v1);
  swift_release();
  sub_100084504();
  sub_100084A70();
  __asm { BRAA            X2, X16 }
}

uint64_t sub_100079D5C(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100079E04;
  return sub_100079B0C();
}

uint64_t sub_100079E04()
{
  sub_10006039C();
  uint64_t v2 = v0;
  sub_100010BAC();
  uint64_t v4 = v3;
  sub_100060250();
  *uint64_t v5 = v4;
  uint64_t v7 = *(void **)(v6 + 16);
  uint64_t v8 = *v1;
  sub_100010BC4();
  *uint64_t v9 = v8;
  swift_task_dealloc();

  if (v2)
  {
    _convertErrorToNSError(_:)();
    sub_100084A84();
    sub_100084ACC();
  }
  else
  {
    Array._bridgeToObjectiveC()();
    sub_100084AE4();
    sub_100084B48();
  }
  uint64_t v10 = *(const void **)(v4 + 24);
  uint64_t v11 = sub_100084288();
  v12(v11);

  _Block_release(v10);
  sub_10000EB74();
  return v13();
}

uint64_t sub_100079F30()
{
  return sub_100084120((uint64_t)sub_100079F44);
}

uint64_t sub_100079F44()
{
  sub_10000EC58();
  sub_10000D9D4(0, (unint64_t *)&unk_10017C800);
  uint64_t v1 = sub_100018F38();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_100079FDC(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  id v4 = a2;
  uint64_t v5 = (void *)swift_task_alloc();
  v2[4] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10007A080;
  return sub_100079F30();
}

uint64_t sub_10007A080()
{
  sub_100084274();
  sub_100013E0C();
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  sub_100010BAC();
  uint64_t v8 = v7;
  sub_100060250();
  *uint64_t v9 = v8;
  uint64_t v11 = *(void **)(v10 + 16);
  uint64_t v12 = *v1;
  sub_100010BC4();
  *uint64_t v13 = v12;
  swift_task_dealloc();

  if (v2)
  {
    _convertErrorToNSError(_:)();
    sub_100084A84();
    sub_100084ACC();
  }
  else if (v4)
  {
    String._bridgeToObjectiveC()();
    sub_100084AE4();
    sub_100084B48();
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v14 = *(const void **)(v8 + 24);
  uint64_t v15 = sub_100084288();
  v16(v15);

  _Block_release(v14);
  sub_10000EB74();
  sub_100084200();
  return v18(v17, v18, v19, v20, v21, v22, v23, v24);
}

uint64_t sub_10007A1BC(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = v3;
  *(unsigned char *)(v4 + 64) = a3;
  *(void *)(v4 + 16) = a1;
  return sub_100084120((uint64_t)sub_10007A1DC);
}

uint64_t sub_10007A1DC()
{
  sub_10000EC58();
  int v1 = *(unsigned __int8 *)(v0 + 64);
  uint64_t v2 = self;
  if (v1 == 1) {
    id v3 = [v2 enabled];
  }
  else {
    id v3 = [v2 disabledWithReason:0];
  }
  id v4 = v3;
  *(void *)(v0 + 40) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10007A2B4;
  uint64_t v6 = sub_100084880(*(void *)(v0 + 16));
  return sub_100079404(v6, v7, (uint64_t)v4);
}

uint64_t sub_10007A2B4()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v3 = v2;
  sub_100060250();
  *id v4 = v3;
  uint64_t v5 = *v1;
  sub_100010BC4();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_100060358();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {

    sub_10000EB74();
    return v10();
  }
}

uint64_t sub_10007A3B4()
{
  sub_10000EC58();

  sub_10000EB74();
  return v1();
}

uint64_t sub_10007A4A8(int a1, char a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;
  void v4[4] = v8;
  a4;
  uint64_t v10 = (void *)swift_task_alloc();
  v4[5] = v10;
  *uint64_t v10 = v4;
  v10[1] = sub_10007A58C;
  return sub_10007A1BC(v7, v9, a2);
}

uint64_t sub_10007A58C()
{
  sub_100084ED0();
  sub_100013E0C();
  uint64_t v3 = v0;
  sub_10008412C();
  uint64_t v5 = v4;
  sub_100010BC4();
  *uint64_t v6 = v5;
  uint64_t v7 = *(void **)(v1 + 16);
  *uint64_t v6 = *v2;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  sub_100084824();
  if (v3)
  {
    _convertErrorToNSError(_:)();
    sub_10008488C();
    uint64_t v8 = sub_10008436C();
    v9(v8);
  }
  else
  {
    uint64_t v10 = sub_100084380();
    v11(v10);
  }
  _Block_release(*(const void **)(v5 + 24));
  sub_100084394();
  sub_100084D74();
  return v13(v12, v13, v14, v15, v16, v17, v18, v19);
}

uint64_t sub_10007A6C8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = *(void *)(a2 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_destinationBundleIdentifier);
  uint64_t v10 = *(void *)(a2 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_destinationBundleIdentifier + 8);
  sub_10000D9D4(0, &qword_10017E2E0);
  swift_bridgeObjectRetain_n();
  id v11 = sub_100071454(v9, v10, 0);
  if (v6)
  {
    swift_errorRelease();
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v12 = v11;
    if (v11)
    {
      self;
      uint64_t v22 = swift_dynamicCastObjCClass();
      if (v22)
      {
        uint64_t v23 = (void *)v22;
        id v33 = v12;
        id v24 = [v23 containingBundleRecord];
        if (v24
          && (uint64_t v25 = v24,
              id v26 = [v24 bundleIdentifier],
              v25,
              v26))
        {
          swift_bridgeObjectRelease();
          uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v10 = v27;

          uint64_t v12 = v33;
        }
        else
        {
          uint64_t v29 = LSApplicationExtensionRecord.attributionBundleIdentifier.getter();
          uint64_t v31 = v30;

          if (v31)
          {
            swift_bridgeObjectRelease();
            uint64_t v9 = v29;
            uint64_t v10 = v31;
          }
          uint64_t v12 = v33;
        }
      }
    }
  }
  uint64_t v32 = v12;
  sub_10000BF1C((uint64_t *)&unk_10017E690);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013EF20;
  *(void *)(inited + 32) = v9;
  *(void *)(inited + 40) = v10;
  uint64_t v37 = inited;
  swift_bridgeObjectRetain();
  sub_100054398();
  uint64_t v14 = *(void *)(v37 + 16);
  if (v14)
  {
    uint64_t v15 = (unint64_t *)(v37 + 40);
    uint64_t v34 = a5;
    while (1)
    {
      uint64_t v16 = *(v15 - 1);
      unint64_t v17 = *v15;
      swift_bridgeObjectRetain_n();
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = swift_slowAlloc();
        uint64_t v37 = swift_slowAlloc();
        *(_DWORD *)uint64_t v20 = 136315138;
        swift_bridgeObjectRetain();
        *(void *)(v20 + 4) = sub_100013090(v16, v17, &v37);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Searching %s", (uint8_t *)v20, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        a5 = v34;
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      uint64_t v21 = a6(v16, v17, a4, a5);
      swift_bridgeObjectRelease();
      if (v21) {
        break;
      }
      v15 += 2;
      if (!--v14) {
        goto LABEL_10;
      }
    }

    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_10:
    swift_bridgeObjectRelease();

    uint64_t v21 = 0;
    a3 = v32;
  }

  swift_bridgeObjectRelease();
  return v21;
}

uint64_t sub_10007AA90(uint64_t a1)
{
  if (!*(void *)(a1 + 16)) {
    return 0;
  }
  sub_10000BF1C(&qword_10017DED8);
  sub_100034754((unint64_t *)&qword_10017EC90, &qword_10017DED8);
  v1._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 8285;
  v2._object = (void *)0xE200000000000000;
  String.append(_:)(v2);
  return 91;
}

uint64_t sub_10007AB58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  return sub_100084120((uint64_t)sub_10007AB74);
}

#error "10007AC74: call analysis failed (funcsize=171)"

uint64_t sub_10007AE34()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *Swift::String v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10007AF18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10008480C();
  sub_1000700D0();
  sub_100084450();
  id v12 = v11;
  sub_1000841D4((uint64_t)v12, v13, v12, v14, v15, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_10006D944);
  sub_100084D0C();
  sub_10006042C();
  if (!v10) {
    sub_100084504();
  }
  sub_1000843D0();
  return v18(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10);
}

uint64_t sub_10007AFC8(int a1, int a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  void v4[4] = v7;
  uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v4[5] = v9;
  a4;
  uint64_t v10 = (void *)swift_task_alloc();
  v4[6] = v10;
  *uint64_t v10 = v4;
  v10[1] = sub_10008411C;
  return sub_10007AB58(v6, v8, v9);
}

uint64_t sub_10007B0C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  return sub_100084120((uint64_t)sub_10007B0E0);
}

#error "10007B1E0: call analysis failed (funcsize=171)"

uint64_t sub_10007B3A0()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *Swift::String v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10007B484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10008480C();
  sub_1000700D0();
  sub_100084450();
  id v12 = v11;
  sub_1000841D4((uint64_t)v12, v13, v12, v14, v15, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_10006E254);
  sub_100084D0C();
  sub_10006042C();
  if (!v10) {
    sub_100084504();
  }
  sub_1000843D0();
  return v18(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10);
}

uint64_t sub_10007B534(int a1, int a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  void v4[4] = v7;
  uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v4[5] = v9;
  a4;
  uint64_t v10 = (void *)swift_task_alloc();
  v4[6] = v10;
  *uint64_t v10 = v4;
  v10[1] = sub_10007B630;
  return sub_10007B0C4(v6, v8, v9);
}

uint64_t sub_10007B630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1000847F4();
  sub_1000700D0();
  uint64_t v13 = v10;
  uint64_t v15 = v14;
  sub_10008412C();
  uint64_t v16 = *(void **)(v11 + 16);
  uint64_t v17 = *v12;
  sub_100010BC4();
  *uint64_t v18 = v17;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100084824();
  uint64_t v20 = *(const void **)(v19 + 24);
  if (v13)
  {
    uint64_t v21 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    uint64_t v22 = sub_100084B30();
    v23(v22);

    _Block_release(v20);
  }
  else
  {
    uint64_t v24 = sub_100084B18();
    v25(v24);
    _Block_release(v20);
  }
  sub_100084394();
  sub_100084744();
  return v27(v26, v27, v28, v29, v30, v31, v32, v33, a9, a10);
}

uint64_t sub_10007B7A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  return sub_100084120((uint64_t)sub_10007B7C0);
}

#error "10007B8C0: call analysis failed (funcsize=171)"

uint64_t sub_10007BA80()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *Swift::String v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10007BB64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10008480C();
  sub_1000700D0();
  sub_100084450();
  id v12 = v11;
  sub_1000841D4((uint64_t)v12, v13, v12, v14, v15, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_10006E0A0);
  sub_100084D0C();
  sub_10006042C();
  if (!v10) {
    sub_100084504();
  }
  sub_1000843D0();
  return v18(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10);
}

uint64_t sub_10007BC14(int a1, int a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  void v4[4] = v7;
  uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v4[5] = v9;
  a4;
  uint64_t v10 = (void *)swift_task_alloc();
  v4[6] = v10;
  *uint64_t v10 = v4;
  v10[1] = sub_10008411C;
  return sub_10007B7A4(v6, v8, v9);
}

uint64_t sub_10007BD10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  return sub_100084120((uint64_t)sub_10007BD2C);
}

#error "10007BE2C: call analysis failed (funcsize=171)"

uint64_t sub_10007BFEC()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *Swift::String v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10007C0D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10008480C();
  sub_1000700D0();
  sub_100084450();
  id v12 = v11;
  sub_1000841D4((uint64_t)v12, v13, v12, v14, v15, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_10006E3E4);
  sub_100084D0C();
  sub_10006042C();
  if (!v10) {
    sub_100084504();
  }
  sub_1000843D0();
  return v18(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10);
}

uint64_t sub_10007C180(int a1, int a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  void v4[4] = v7;
  uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v4[5] = v9;
  a4;
  uint64_t v10 = (void *)swift_task_alloc();
  v4[6] = v10;
  *uint64_t v10 = v4;
  v10[1] = sub_10008411C;
  return sub_10007BD10(v6, v8, v9);
}

uint64_t sub_10007C27C()
{
  *(void *)(v1 + 120) = v0;
  return sub_100084120((uint64_t)sub_10007C294);
}

uint64_t sub_10007C294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v53 = v22;
  uint64_t v24 = (void **)(v22 + 120);
  id v25 = *(id *)(v22 + 120);
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.info.getter();
  if (sub_1000845C4(v27))
  {
    uint64_t v28 = *(char **)(v22 + 120);
    uint64_t v29 = (uint8_t *)sub_1000536D0();
    uint64_t v30 = sub_100060438();
    *(_DWORD *)uint64_t v29 = 136315138;
    uint64_t v52 = v30;
    uint64_t v31 = *(void *)&v28[OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_destinationBundleIdentifier];
    unint64_t v32 = *(void *)&v28[OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_destinationBundleIdentifier + 8];
    swift_bridgeObjectRetain();
    uint64_t v33 = v31;
    uint64_t v24 = (void **)(v22 + 120);
    *(void *)(v22 + 112) = sub_100013090(v33, v32, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v26, v23, "Request from %s for AppShortcutsProvider", v29, 0xCu);
    sub_1000848CC();
    sub_10000EB10();
    sub_10000EB10();
  }
  else
  {
    uint64_t v34 = *v24;
  }
  uint64_t v35 = sub_100070E9C((void (*)(uint64_t, uint64_t))sub_1000840E4, (void (*)(void, void))sub_1000840EC, (void (*)(void, void))sub_1000840E8);
  *(void *)(v22 + 128) = v35;
  *(void *)(v22 + 136) = 0;
  uint64_t v36 = *(void *)(v35 + OBJC_IVAR____TtC10LinkDaemon8Registry_ready);
  *(void *)(v22 + 144) = v36;
  if (!v36)
  {
    swift_bridgeObjectRetain();
    uint64_t v46 = sub_100084DB8();
    sub_1000640B8(v46, v47, v48);

    swift_bridgeObjectRelease();
    sub_100083620((uint64_t)(v24 - 8), (uint64_t)(v24 - 13), &qword_10017D790);
    if (*(void *)(v22 + 24))
    {
      *(_OWORD *)(v24 - 3) = *(_OWORD *)(v24 - 13);
      sub_100033814((uint64_t)(v24 - 3));
    }
    sub_100084A58();
    sub_100084994();
    __asm { BRAA            X3, X16 }
  }
  swift_retain();
  uint64_t v37 = (void *)swift_task_alloc();
  *(void *)(v22 + 152) = v37;
  *uint64_t v37 = v22;
  v37[1] = sub_10007C5D4;
  sub_1000843A4();
  sub_100084994();
  return Task<>.value.getter(v38, v39, v40, v41, v42, v43, v44, v45, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22);
}

uint64_t sub_10007C5D4()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *Swift::String v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10007C6B8()
{
  sub_100084274();
  sub_100013E0C();
  uint64_t v1 = *(void *)(v0 + 136);
  Swift::String v2 = (uint64_t *)(*(void *)(v0 + 120)
                 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_destinationBundleIdentifier);
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  swift_bridgeObjectRetain();
  sub_1000640B8(v4, v3, v0 + 56);
  uint64_t v5 = *(void **)(v0 + 128);
  if (v1)
  {
    swift_bridgeObjectRelease();

    sub_100084420();
    sub_100084200();
    return v7(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  else
  {

    swift_bridgeObjectRelease();
    uint64_t v15 = sub_10000EBA4();
    sub_100083620(v15, v16, v17);
    if (*(void *)(v0 + 24))
    {
      *(_OWORD *)(v0 + 96) = *(_OWORD *)(v0 + 16);
      sub_100033814(v0 + 96);
    }
    sub_100084A58();
    sub_100084200();
    return v21(v18, v19, v20, v21, v22, v23, v24, v25);
  }
}

uint64_t sub_10007C7FC(void *a1, int a2, void *aBlock)
{
  _Block_copy(aBlock);
  sub_100084874();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = a1;
  id v6 = a1;
  uint64_t v7 = sub_10000EBA4();

  return sub_1000F7D3C(v7, v8);
}

uint64_t sub_10007C864(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1000840F0;
  return sub_10007C27C();
}

uint64_t sub_10007C90C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return sub_100084120((uint64_t)sub_10007C928);
}

uint64_t sub_10007C928()
{
  sub_10006039C();
  if (*(void *)(v0[5] + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_observationStatusRegistrySource))
  {
    v0[6] = sub_100070E9C((void (*)(uint64_t, uint64_t))sub_100083390, (void (*)(void, void))sub_10008339C, (void (*)(void, void))sub_100083378);
    uint64_t v1 = (void *)swift_task_alloc();
    v0[7] = (uint64_t)v1;
    *uint64_t v1 = v0;
    v1[1] = sub_10007CA70;
    uint64_t v2 = sub_100084880(v0[3]);
    return sub_1001040B4(v2, v3, v4);
  }
  else
  {
    sub_1000830BC();
    uint64_t v6 = sub_10006FD2C();
    sub_1000844D0(v6, v7);
    sub_100084830();
    return v8();
  }
}

uint64_t sub_10007CA70()
{
  sub_10000EC58();
  sub_100010BAC();
  sub_100060250();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_100010BC4();
  *uint64_t v5 = v4;
  *(void *)(v6 + 64) = v0;
  swift_task_dealloc();
  sub_100060358();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_10007CB4C()
{
  sub_10000EC58();

  sub_100070028();
  return v1();
}

uint64_t sub_10007CBA4()
{
  sub_10000EC58();

  sub_10000EB74();
  return v1();
}

uint64_t sub_10007CC20(int a1, int a2, int a3, int a4, void *a5)
{
  sub_100084950(a1, a2, a3, a4, a5);
  uint64_t v9 = (void *)sub_100084EFC();
  _OWORD v9[2] = v6;
  v9[3] = v5;
  v9[4] = v8;
  v9[5] = v7;
  id v10 = v6;
  id v11 = v5;
  id v12 = v7;
  uint64_t v13 = sub_10000EBA4();

  return sub_1000F7D3C(v13, v14);
}

uint64_t sub_10007CC80(int a1, int a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  sub_10000D9D4(0, (unint64_t *)&qword_10017D468);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  void v4[4] = v6;
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;
  v4[5] = v8;
  a4;
  id v10 = (void *)swift_task_alloc();
  v4[6] = v10;
  *id v10 = v4;
  v10[1] = sub_10007CD90;
  return sub_10007C90C(v6, v7, v9);
}

uint64_t sub_10007CD90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1000847F4();
  sub_1000700D0();
  uint64_t v13 = v10;
  sub_10008412C();
  uint64_t v15 = v14;
  sub_100010BC4();
  *uint64_t v16 = v15;
  uint64_t v17 = *(void **)(v11 + 16);
  *uint64_t v16 = *v12;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100084824();
  if (v13)
  {
    _convertErrorToNSError(_:)();
    sub_10008488C();
    uint64_t v18 = sub_10008436C();
    v19(v18);
  }
  else
  {
    uint64_t v20 = sub_100084380();
    v21(v20);
  }
  _Block_release(*(const void **)(v15 + 24));
  sub_100084394();
  sub_100084744();
  return v23(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10);
}

uint64_t sub_10007CEE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return sub_100084120((uint64_t)sub_10007CF08);
}

uint64_t sub_10007CF08()
{
  sub_10006039C();
  if (*(void *)(v0[6] + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_observationStatusRegistrySource))
  {
    v0[7] = sub_100070E9C((void (*)(uint64_t, uint64_t))sub_100083390, (void (*)(void, void))sub_10008339C, (void (*)(void, void))sub_100083378);
    uint64_t v1 = (void *)swift_task_alloc();
    v0[8] = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_10007D05C;
    uint64_t v2 = sub_100084880(v0[2]);
    return sub_1000F1264(v2, v3, v4, v5);
  }
  else
  {
    sub_1000830BC();
    uint64_t v7 = sub_10006FD2C();
    sub_1000844D0(v7, v8);
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9(0);
  }
}

uint64_t sub_10007D05C()
{
  sub_10006039C();
  char v3 = v2;
  sub_100010BAC();
  uint64_t v5 = v4;
  sub_100060250();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  sub_100010BC4();
  *uint64_t v8 = v7;
  *(void *)(v5 + 72) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(unsigned char *)(v5 + 80) = v3 & 1;
  }
  sub_100060358();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_10007D150()
{
  sub_10000EC58();

  sub_10006042C();
  uint64_t v2 = *(unsigned __int8 *)(v0 + 80);
  return v1(v2);
}

uint64_t sub_10007D1B0()
{
  sub_10000EC58();

  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_10007D234(int a1, uint64_t a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;
  void v4[4] = v8;
  if (a2)
  {
    a2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;
  }
  else
  {
    uint64_t v11 = 0;
  }
  v4[5] = v11;
  a4;
  uint64_t v12 = (void *)swift_task_alloc();
  v4[6] = v12;
  *uint64_t v12 = v4;
  v12[1] = sub_10007D340;
  return sub_10007CEE8(v7, v9, a2, v11);
}

uint64_t sub_10007D340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1000847F4();
  sub_1000700D0();
  uint64_t v13 = v10;
  char v15 = v14;
  sub_100084228();
  uint64_t v17 = v16;
  sub_100010BC4();
  *uint64_t v18 = v17;
  uint64_t v19 = *(void **)(v12 + 16);
  *uint64_t v18 = *v11;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  sub_100084C24();
  uint64_t v20 = *(void *)(v12 + 24);
  swift_bridgeObjectRelease();
  if (v13)
  {
    _convertErrorToNSError(_:)();
    sub_10008488C();
    (*(void (**)(uint64_t, void, void *))(v20 + 16))(v20, 0, v11);
  }
  else
  {
    (*(void (**)(uint64_t, void, void))(v20 + 16))(v20, v15 & 1, 0);
  }
  _Block_release(*(const void **)(v17 + 24));
  sub_100084744();
  return v22(v21, v22, v23, v24, v25, v26, v27, v28, a9, a10);
}

uint64_t sub_10007D4C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  _OWORD v6[2] = a1;
  v6[3] = a2;
  return sub_100084120((uint64_t)sub_10007D4E0);
}

uint64_t sub_10007D4E0()
{
  sub_10006039C();
  if (*(void *)(v0[7] + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_observationStatusRegistrySource))
  {
    v0[8] = sub_100070E9C((void (*)(uint64_t, uint64_t))sub_100083390, (void (*)(void, void))sub_10008339C, (void (*)(void, void))sub_100083378);
    int v1 = *(_DWORD *)(v0[7] + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_processID);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[9] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10007D644;
    uint64_t v3 = v0[5];
    uint64_t v4 = v0[6];
    uint64_t v5 = v0[3];
    uint64_t v6 = v0[4];
    uint64_t v7 = v0[2];
    return sub_1000F1384(v7, v5, v6, v3, v4, v1);
  }
  else
  {
    sub_1000830BC();
    uint64_t v9 = sub_10006FD2C();
    sub_1000844D0(v9, v10);
    sub_100084830();
    return v11();
  }
}

uint64_t sub_10007D644()
{
  sub_10000EC58();
  sub_100010BAC();
  sub_100060250();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_100010BC4();
  *uint64_t v5 = v4;
  *(void *)(v6 + 80) = v0;
  swift_task_dealloc();
  sub_100060358();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_10007D720()
{
  sub_10000EC58();

  sub_100070028();
  return v1();
}

uint64_t sub_10007D778()
{
  sub_10000EC58();

  sub_10000EB74();
  return v1();
}

uint64_t sub_10007D7F4(uint64_t a1, uint64_t a2, const void *a3, void *a4)
{
  v4[2] = a4;
  uint64_t v8 = type metadata accessor for UUID();
  v4[3] = v8;
  void v4[4] = *(void *)(v8 - 8);
  uint64_t v9 = swift_task_alloc();
  v4[5] = v9;
  v4[6] = _Block_copy(a3);
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;
  v4[7] = v11;
  if (a2)
  {
    a2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;
  }
  else
  {
    uint64_t v14 = 0;
  }
  v4[8] = v14;
  a4;
  char v15 = (void *)swift_task_alloc();
  v4[9] = v15;
  *char v15 = v4;
  v15[1] = sub_10007D970;
  return sub_10007D4C0(v9, v10, v12, a2, v14);
}

uint64_t sub_10007D970()
{
  sub_100084274();
  sub_100013E0C();
  sub_100010BAC();
  uint64_t v3 = v2;
  sub_100060250();
  *uint64_t v4 = v3;
  uint64_t v6 = *(void **)(v5 + 16);
  uint64_t v7 = *v1;
  sub_100010BC4();
  *uint64_t v8 = v7;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0)
  {
    uint64_t v9 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v11 = (void *)v9;
  }
  else
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    sub_100084AC0();
    v12();
    uint64_t v9 = 0;
    uint64_t v11 = isa;
  }
  uint64_t v13 = *(void (***)(void, void, void))(v3 + 48);
  ((void (**)(void, Class, uint64_t))v13)[2](v13, isa, v9);

  _Block_release(v13);
  swift_task_dealloc();
  sub_10000EB74();
  sub_100084200();
  return v15(v14, v15, v16, v17, v18, v19, v20, v21);
}

uint64_t sub_10007DB08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  _OWORD v6[2] = a1;
  v6[3] = a2;
  return sub_100084120((uint64_t)sub_10007DB28);
}

uint64_t sub_10007DB28()
{
  sub_10006039C();
  if (*(void *)(v0[7] + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_observationStatusRegistrySource))
  {
    v0[8] = sub_100070E9C((void (*)(uint64_t, uint64_t))sub_100083390, (void (*)(void, void))sub_10008339C, (void (*)(void, void))sub_100083378);
    int v1 = *(_DWORD *)(v0[7] + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_processID);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[9] = (uint64_t)v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10007D644;
    uint64_t v3 = sub_100084880(v0[2]);
    return sub_1000F187C(v3, v4, v5, v6, v7, v1);
  }
  else
  {
    sub_1000830BC();
    uint64_t v9 = sub_10006FD2C();
    sub_1000844D0(v9, v10);
    sub_100084830();
    return v11();
  }
}

void sub_10007DD2C()
{
}

uint64_t sub_10007DD5C(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, void *a5)
{
  v5[2] = a5;
  uint64_t v9 = type metadata accessor for UUID();
  v5[3] = v9;
  v5[4] = *(void *)(v9 - 8);
  uint64_t v10 = swift_task_alloc();
  void v5[5] = v10;
  v5[6] = _Block_copy(a4);
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;
  v5[7] = v12;
  if (a2)
  {
    a2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;
  }
  else
  {
    uint64_t v15 = 0;
  }
  v5[8] = v15;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  a5;
  uint64_t v16 = (void *)swift_task_alloc();
  v5[9] = v16;
  *uint64_t v16 = v5;
  v16[1] = sub_10007DEE4;
  return sub_10007DB08(v11, v13, a2, v15, v10);
}

uint64_t sub_10007DEE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_10008464C();
  sub_100084AD8();
  uint64_t v15 = v12;
  sub_100084228();
  uint64_t v17 = v16;
  sub_100010BC4();
  *uint64_t v18 = v17;
  uint64_t v37 = *(void *)(v14 + 64);
  sub_100084C24();
  uint64_t v19 = *(void **)(v14 + 16);
  uint64_t v20 = *v13;
  sub_100010BC4();
  void *v21 = v20;
  swift_task_dealloc();
  sub_1000847DC();
  v22();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100084C24();
  if (v15)
  {
    uint64_t v23 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    uint64_t v24 = sub_100084E34();
    v25(v24);
  }
  else
  {
    uint64_t v26 = sub_100084E20();
    v27(v26);
  }
  _Block_release(*(const void **)(v17 + 48));
  swift_task_dealloc();
  sub_100084A18();
  sub_100084258();
  return v29(v28, v29, v30, v31, v32, v33, v34, v35, v37, a10, a11, a12);
}

uint64_t sub_10007E0A8()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Logger();
    if (v2 <= 0x3F) {
      return swift_updateClassMetadata2();
    }
  }
  return result;
}

uint64_t sub_10007E1AC(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_100084120((uint64_t)sub_10007E1C4);
}

void sub_10007E1C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10)
{
  sub_10008480C();
  sub_1000700D0();
  uint64_t v11 = *(void *)(v10 + 24);
  uint64_t v12 = self;
  long long v13 = *(_OWORD *)(v11 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_auditToken + 16);
  *(_OWORD *)(v10 + 32) = *(_OWORD *)(v11 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_auditToken);
  *(_OWORD *)(v10 + 48) = v13;
  id v14 = [v12 if_dataWithAuditToken:v10 + 32];
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;

    if (qword_10017C3A0 != -1) {
      swift_once();
    }
    uint64_t v19 = (os_unfair_lock_s *)qword_100181C30;
    uint64_t v20 = (int8x16_t *)swift_task_alloc();
    int8x16_t v21 = *(int8x16_t *)(v10 + 16);
    v20[1].i64[0] = v16;
    v20[1].i64[1] = v18;
    v20[2] = vextq_s8(v21, v21, 8uLL);
    swift_retain();
    os_unfair_lock_lock(v19 + 6);
    uint64_t v22 = (void *)sub_100084C94();
    sub_1000832B8(v22, v23);
    os_unfair_lock_unlock(v19 + 6);
    if (v19 == (os_unfair_lock_s *)-16)
    {
      swift_release();
      swift_task_dealloc();
      id v33 = [a9 processInstanceIdentifier];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v34 = sub_100084E60();
      sub_10000DA10(v34, v35);
      sub_1000843D0();
      v39(v36, v37, v38, v39, v40, v41, v42, v43, a9, a10);
    }
    else
    {
      sub_1000843D0();
    }
  }
  else
  {
    sub_1000830BC();
    sub_10006FD2C();
    *uint64_t v24 = 1;
    swift_willThrow();
    sub_10000EB74();
    sub_1000843D0();
    v26(v25, v26, v27, v28, v29, v30, v31, v32, a9, a10);
  }
}

uint64_t sub_10007E3B8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, void *a6@<X8>)
{
  id v67 = a5;
  uint64_t v73 = a4;
  uint64_t v74 = a6;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v72 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000BF1C(&qword_10017E138);
  __chkstk_darwin(v12 - 8);
  uint64_t v68 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v58 - v15;
  uint64_t v17 = sub_10000BF1C((uint64_t *)&unk_10017EB90);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v58 - v21;
  uint64_t v70 = a1;
  uint64_t v23 = *a1;
  sub_10000DADC(a2, a3);
  sub_10001B7C4(a2, a3, v23);
  uint64_t v69 = a2;
  unint64_t v71 = a3;
  sub_10000DA10(a2, a3);
  if (sub_10000D5D8((uint64_t)v16, 1, v17) == 1)
  {
    sub_1000347E8((uint64_t)v16, &qword_10017E138);
    UUID.init()();
    uint64_t v24 = UUID.uuidString.getter();
    uint64_t v65 = v25;
    uint64_t v66 = v24;
    uint64_t v26 = v72;
    (*(void (**)(char *, uint64_t))(v72 + 8))(v11, v9);
    uint64_t v27 = self;
    uint64_t v28 = *(unsigned int *)(v73 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_auditToken);
    uint64_t v29 = *(unsigned int *)(v73 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_auditToken + 4);
    uint64_t v30 = *(unsigned int *)(v73 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_auditToken + 12);
    uint64_t v31 = *(unsigned int *)(v73 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_auditToken + 16);
    uint64_t v32 = *(unsigned int *)(v73 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_auditToken + 20);
    uint64_t v33 = *(unsigned int *)(v73 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_auditToken + 24);
    uint64_t v34 = *(unsigned int *)(v73 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_auditToken + 28);
    uint64_t v63 = *(unsigned int *)(v73 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_auditToken + 8);
    uint64_t v64 = v28;
    v75[0] = v28;
    v75[1] = v29;
    v75[2] = v63;
    v75[3] = v30;
    uint64_t v61 = v33;
    uint64_t v62 = v31;
    v75[4] = v31;
    v75[5] = v32;
    v75[6] = v33;
    v75[7] = v34;
    uint64_t v35 = v34;
    id v36 = [v27 bundleIdentifierForAuditToken:v75];
    uint64_t v60 = v9;
    if (v36)
    {
      uint64_t v37 = v36;
      uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v39 = v38;
    }
    else
    {
      uint64_t v59 = 0;
      uint64_t v39 = 0;
    }
    id v46 = objc_allocWithZone((Class)LNConnectionListenerEndpoint);
    uint64_t v47 = v64 | (v29 << 32);
    uint64_t v48 = v63 | (v30 << 32);
    uint64_t v49 = v62 | (v32 << 32);
    uint64_t v50 = v61 | (v35 << 32);
    id v51 = v67;
    id v52 = sub_100081F34(v66, v65, v59, v39, v51, v47, v48, v49, v50);
    uint64_t v53 = *(int *)(v17 + 48);
    uint64_t v54 = (uint64_t)v68;
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v68, v73 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_identifier, v60);
    *(void *)(v54 + v53) = v52;
    sub_10000D5B0(v54, 0, 1, v17);
    uint64_t v55 = v69;
    unint64_t v56 = v71;
    sub_10000DADC(v69, v71);
    id v57 = v52;
    uint64_t result = sub_10004B680(v54, v55, v56);
    *uint64_t v74 = v57;
  }
  else
  {
    uint64_t v40 = *(int *)(v17 + 48);
    uint64_t v41 = v72;
    uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v72 + 32);
    v42(v22, v16, v9);
    uint64_t v43 = *(void *)&v16[v40];
    *(void *)&v22[v40] = v43;
    uint64_t v44 = *(int *)(v17 + 48);
    v42(v19, v22, v9);
    *(void *)&v19[v44] = v43;
    *uint64_t v74 = v43;
    return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v19, v9);
  }
  return result;
}

uint64_t sub_10007E800(void *a1, void *aBlock, void *a3)
{
  void v3[2] = a1;
  v3[3] = a3;
  void v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  a3;
  uint64_t v7 = (void *)swift_task_alloc();
  void v3[5] = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10007E8C4;
  return sub_10007E1AC((uint64_t)v6);
}

uint64_t sub_10007E8C4()
{
  sub_100084ED0();
  sub_100013E0C();
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  sub_100010BAC();
  uint64_t v6 = v5;
  sub_100060250();
  *uint64_t v7 = v6;
  uint64_t v9 = *(void **)(v8 + 24);
  uint64_t v10 = *(void **)(v8 + 16);
  uint64_t v11 = *v1;
  sub_100010BC4();
  *uint64_t v12 = v11;
  swift_task_dealloc();

  if (v2)
  {
    _convertErrorToNSError(_:)();
    sub_100084A84();
    sub_100084ACC();
  }
  else
  {
    String._bridgeToObjectiveC()();
    sub_100084AE4();
    sub_100084B48();
  }
  uint64_t v13 = *(const void **)(v6 + 32);
  uint64_t v14 = sub_100084288();
  v15(v14);

  _Block_release(v13);
  sub_10000EB74();
  sub_100084D74();
  return v17(v16, v17, v18, v19, v20, v21, v22, v23);
}

uint64_t sub_10007EA08(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return sub_100084120((uint64_t)sub_10007EA20);
}

void sub_10007EA20()
{
  sub_100013E0C();
  sub_10000D9D4(0, &qword_10017EB70);
  sub_100084CE0();
  if ((static LNEntitlementsValidator.hasEntitlement<A>(_:equalTo:)() & 1) == 0)
  {
    sub_1000830BC();
    sub_10006FD2C();
    *uint64_t v6 = 2;
    swift_willThrow();
    sub_10000EB74();
    sub_100084A70();
    __asm { BRAA            X1, X16 }
  }
  if (qword_10017C3A0 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v3 = (os_unfair_lock_s *)qword_100181C30;
  uint64_t v4 = swift_task_alloc();
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v1;
  swift_retain();
  os_unfair_lock_lock(v3 + 6);
  sub_100084C94();
  sub_1000831C0(v5);
  os_unfair_lock_unlock(v3 + 6);
  if (v3 == (os_unfair_lock_s *)-16)
  {
    swift_release();
    swift_task_dealloc();
    sub_100084F30();
    sub_100084A70();
    __asm { BRAA            X2, X16 }
  }
  sub_100084A70();
}

uint64_t sub_10007EBC4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v34 = sub_10000BF1C((uint64_t *)&unk_10017EB90);
  uint64_t v7 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v33 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v32 = (char *)v29 - v10;
  swift_bridgeObjectRetain();
  uint64_t v11 = swift_bridgeObjectRetain();
  uint64_t v12 = sub_10007EEAC(v11, a1, a2);
  uint64_t v13 = *(void *)(v12 + 16);
  if (v13)
  {
    v29[1] = v3;
    uint64_t v30 = a3;
    id v36 = _swiftEmptyArrayStorage;
    sub_100057848();
    uint64_t v14 = *(unsigned __int8 *)(v7 + 80);
    v29[0] = v12;
    uint64_t v15 = v12 + ((v14 + 32) & ~v14);
    uint64_t v31 = *(void *)(v7 + 72);
    uint64_t v17 = (uint64_t)v32;
    uint64_t v16 = v33;
    do
    {
      sub_100034614(v15, v17, (uint64_t *)&unk_10017EB90);
      uint64_t v18 = *(int *)(v34 + 48);
      uint64_t v19 = type metadata accessor for UUID();
      uint64_t v20 = *(void *)(v19 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v16, v17, v19);
      uint64_t v21 = *(void **)(v17 + v18);
      *(void *)&v16[v18] = v21;
      id v22 = [v21 processInstanceIdentifier:v29[0]];
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v24 = v23;

      (*(void (**)(char *, uint64_t))(v20 + 8))(v16, v19);
      sub_1000347E8(v17, (uint64_t *)&unk_10017EB90);
      uint64_t v25 = v36;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100057848();
        uint64_t v25 = v36;
      }
      unint64_t v26 = v25[2];
      if (v26 >= v25[3] >> 1)
      {
        sub_100057848();
        uint64_t v25 = v36;
      }
      void v25[2] = v26 + 1;
      uint64_t v27 = &v25[2 * v26];
      v27[4] = v35;
      v27[5] = v24;
      v15 += v31;
      --v13;
    }
    while (v13);
    uint64_t result = swift_bridgeObjectRelease();
    a3 = v30;
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v25 = _swiftEmptyArrayStorage;
  }
  *a3 = v25;
  return result;
}

uint64_t sub_10007EEAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v40 = a3;
  uint64_t v38 = a2;
  uint64_t v4 = (uint64_t *)&unk_10017EB90;
  uint64_t v43 = sub_10000BF1C((uint64_t *)&unk_10017EB90);
  uint64_t v46 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v41 = (uint64_t)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v36 - v7;
  __chkstk_darwin(v9);
  uint64_t v42 = (uint64_t)&v36 - v10;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v36 - v12;
  uint64_t v48 = _swiftEmptyArrayStorage;
  uint64_t result = sub_1000427DC(a1, v47);
  uint64_t v37 = v47[1];
  uint64_t v44 = v47[0];
  int64_t v45 = v47[3];
  unint64_t v15 = v47[4];
  int64_t v39 = (unint64_t)(v47[2] + 64) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v17 = v16 | (v45 << 6);
      goto LABEL_20;
    }
    int64_t v18 = v45 + 1;
    if (__OFADD__(v45, 1)) {
      break;
    }
    if (v18 >= v39) {
      goto LABEL_35;
    }
    unint64_t v19 = *(void *)(v37 + 8 * v18);
    int64_t v20 = v45 + 1;
    if (!v19)
    {
      int64_t v20 = v45 + 2;
      if (v45 + 2 >= v39) {
        goto LABEL_35;
      }
      unint64_t v19 = *(void *)(v37 + 8 * v20);
      if (!v19)
      {
        int64_t v20 = v45 + 3;
        if (v45 + 3 >= v39) {
          goto LABEL_35;
        }
        unint64_t v19 = *(void *)(v37 + 8 * v20);
        if (!v19)
        {
          int64_t v20 = v45 + 4;
          if (v45 + 4 >= v39) {
            goto LABEL_35;
          }
          unint64_t v19 = *(void *)(v37 + 8 * v20);
          if (!v19)
          {
            int64_t v20 = v45 + 5;
            if (v45 + 5 >= v39) {
              goto LABEL_35;
            }
            unint64_t v19 = *(void *)(v37 + 8 * v20);
            if (!v19)
            {
              int64_t v21 = v45 + 6;
              while (v21 < v39)
              {
                unint64_t v19 = *(void *)(v37 + 8 * v21++);
                if (v19)
                {
                  int64_t v20 = v21 - 1;
                  goto LABEL_19;
                }
              }
LABEL_35:
              swift_bridgeObjectRelease();
              swift_release();
              return (uint64_t)v48;
            }
          }
        }
      }
    }
LABEL_19:
    unint64_t v15 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v20 << 6);
    int64_t v45 = v20;
LABEL_20:
    uint64_t v22 = *(void *)(v46 + 72);
    uint64_t v23 = v42;
    sub_100034614(*(void *)(v44 + 56) + v22 * v17, v42, v4);
    uint64_t v24 = v23;
    uint64_t v25 = v4;
    sub_100083620(v24, (uint64_t)v13, v4);
    uint64_t v26 = *(int *)(v43 + 48);
    uint64_t v27 = type metadata accessor for UUID();
    uint64_t v28 = *(void *)(v27 - 8);
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v8, v13, v27);
    uint64_t v29 = *(void **)&v13[v26];
    *(void *)&v8[v26] = v29;
    uint64_t v30 = sub_1000827D0(v29);
    if (!v31)
    {
      (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v27);
      goto LABEL_28;
    }
    if (v30 == v38 && v31 == v40)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v27);
      goto LABEL_30;
    }
    char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v27);
    if (v33)
    {
LABEL_30:
      uint64_t v4 = v25;
      sub_100083620((uint64_t)v13, v41, v25);
      uint64_t v34 = v48;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100057CA8();
        uint64_t v34 = v48;
      }
      unint64_t v35 = v34[2];
      if (v35 >= v34[3] >> 1)
      {
        sub_100057CA8();
        uint64_t v34 = v48;
      }
      v34[2] = v35 + 1;
      uint64_t result = sub_100083620(v41, (uint64_t)v34+ ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80))+ v35 * v22, v25);
    }
    else
    {
LABEL_28:
      uint64_t v4 = v25;
      uint64_t result = sub_1000347E8((uint64_t)v13, v25);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10007F33C(int a1, void *aBlock, void *a3)
{
  void v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  void v3[4] = v6;
  id v8 = a3;
  uint64_t v9 = (void *)swift_task_alloc();
  void v3[5] = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_10007F40C;
  return sub_10007EA08(v5, v7);
}

uint64_t sub_10007F40C()
{
  sub_100084274();
  sub_100013E0C();
  uint64_t v2 = v0;
  sub_100010BAC();
  uint64_t v4 = v3;
  sub_100060250();
  *uint64_t v5 = v4;
  uint64_t v7 = *(void **)(v6 + 32);
  id v8 = *(void **)(v6 + 16);
  uint64_t v9 = *v1;
  sub_100010BC4();
  *uint64_t v10 = v9;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  if (v2)
  {
    _convertErrorToNSError(_:)();
    sub_100084A84();
    sub_100084ACC();
  }
  else
  {
    Array._bridgeToObjectiveC()();
    sub_100084AE4();
    sub_100084B48();
  }
  uint64_t v11 = *(const void **)(v4 + 24);
  uint64_t v12 = sub_100084288();
  v13(v12);

  _Block_release(v11);
  sub_10000EB74();
  sub_100084200();
  return v15(v14, v15, v16, v17, v18, v19, v20, v21);
}

uint64_t sub_10007F554(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return sub_100084120((uint64_t)sub_10007F56C);
}

uint64_t sub_10007F56C()
{
  sub_1000700D0();
  sub_10000D9D4(0, &qword_10017EB70);
  sub_100084CE0();
  if ((static LNEntitlementsValidator.hasEntitlement<A>(_:equalTo:)() & 1) == 0)
  {
    sub_1000830BC();
    sub_10006FD2C();
    *uint64_t v6 = 2;
    swift_willThrow();
    goto LABEL_7;
  }
  if (qword_10017C3A0 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v3 = (os_unfair_lock_s *)qword_100181C30;
  uint64_t v4 = swift_task_alloc();
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v1;
  swift_retain();
  os_unfair_lock_lock(v3 + 6);
  sub_100084C94();
  sub_100083108(v5);
  os_unfair_lock_unlock(v3 + 6);
  if (v3 != (os_unfair_lock_s *)-16)
  {
    swift_release();
    swift_task_dealloc();
LABEL_7:
    sub_10000EB74();
    return v7();
  }
  swift_release();
  swift_task_dealloc();
  uint64_t v9 = sub_100084F30();
  return v10(v9);
}

uint64_t sub_10007F720@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v7 = sub_10000BF1C(&qword_10017EB80);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (uint64_t *)((char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = sub_10000BF1C(&qword_10017EB88);
  __chkstk_darwin(v10);
  uint64_t v12 = (uint64_t *)((char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13);
  unint64_t v15 = (uint64_t *)((char *)&v34 - v14);
  swift_bridgeObjectRetain();
  uint64_t v16 = swift_bridgeObjectRetain();
  sub_1000709BC(v16, a1, a2, (uint64_t)v9);
  swift_bridgeObjectRelease();
  if (sub_10000D5D8((uint64_t)v9, 1, v10) == 1)
  {
    sub_1000347E8((uint64_t)v9, &qword_10017EB80);
    sub_1000830BC();
    swift_allocError();
    *uint64_t v17 = 3;
    return swift_willThrow();
  }
  else
  {
    uint64_t v19 = *(int *)(v10 + 48);
    uint64_t v36 = v12;
    uint64_t v20 = (char *)v15 + v19;
    uint64_t v21 = sub_10000BF1C((uint64_t *)&unk_10017EB90);
    uint64_t v34 = *(int *)(v21 + 48);
    uint64_t v35 = v21;
    uint64_t v22 = (char *)v9 + v19;
    uint64_t v37 = a3;
    uint64_t v24 = *v9;
    unint64_t v23 = v9[1];
    *unint64_t v15 = v24;
    v15[1] = v23;
    uint64_t v25 = type metadata accessor for UUID();
    uint64_t v26 = *(void *)(v25 - 8);
    uint64_t v38 = v3;
    uint64_t v27 = v26;
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    v28(v20, v22, v25);
    uint64_t v29 = *(void *)&v22[v34];
    uint64_t v30 = v20;
    *(void *)&v20[v34] = v29;
    uint64_t v31 = v36;
    uint64_t v32 = (char *)v36 + *(int *)(v10 + 48);
    uint64_t *v36 = v24;
    v31[1] = v23;
    uint64_t v33 = *(int *)(v35 + 48);
    v28(v32, v30, v25);
    sub_10000DA10(v24, v23);
    *(void *)&v32[v33] = v29;
    *uint64_t v37 = v29;
    return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v32, v25);
  }
}

uint64_t sub_10007F9E0(void *a1, int a2, void *a3, void *aBlock)
{
  uint64_t v6 = _Block_copy(aBlock);
  sub_100084B84();
  uint64_t v7 = (void *)swift_allocObject();
  void v7[2] = a3;
  v7[3] = v6;
  v7[4] = a1;
  id v8 = a3;
  id v9 = a1;
  uint64_t v10 = sub_10000EBA4();

  return sub_1000F7D3C(v10, v11);
}

uint64_t sub_10007FA58()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10007FA68()
{
  return sub_100071C88(*(_DWORD *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10007FA74(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10007FA84()
{
  return swift_release();
}

uint64_t sub_10007FA8C(int a1, void *aBlock, void *a3)
{
  void v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  void v3[4] = v6;
  id v8 = a3;
  id v9 = (void *)swift_task_alloc();
  void v3[5] = v9;
  *id v9 = v3;
  v9[1] = sub_10007FB5C;
  return sub_10007F554(v5, v7);
}

uint64_t sub_10007FB5C()
{
  sub_100084ED0();
  sub_100013E0C();
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  sub_10008412C();
  uint64_t v6 = *(void **)(v1 + 16);
  uint64_t v7 = *v2;
  sub_100010BC4();
  *id v8 = v7;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  sub_100084824();
  uint64_t v10 = *(const void **)(v9 + 24);
  if (v3)
  {
    uint64_t v11 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    uint64_t v12 = sub_100084B30();
    v13(v12);

    _Block_release(v10);
  }
  else
  {
    uint64_t v14 = sub_100084B18();
    v15(v14);
    _Block_release(v10);
  }
  sub_100084394();
  sub_100084D74();
  return v17(v16, v17, v18, v19, v20, v21, v22, v23);
}

unint64_t sub_10007FCB4(char a1)
{
  unint64_t result = 0xD000000000000046;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x74696E6920746F4ELL;
      break;
    case 2:
      unint64_t result = 0x7070757320746F4ELL;
      break;
    case 3:
      unint64_t result = 0xD000000000000038;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10007FD6C()
{
  return sub_10007FCB4(*v0);
}

uint64_t sub_10007FD74@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v42 = a2;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *a1;
  UUID.init()();
  uint64_t v12 = UUID.uuidString.getter();
  uint64_t v14 = v13;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  id v41 = [v11 propertyTitle];
  id v15 = [v11 propertyTitleKey];
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v39 = v17;
  uint64_t v40 = v16;

  id v18 = [v11 providerClassName];
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v37 = v20;
  uint64_t v38 = v19;

  id v21 = [v11 parameterTypeIdentifier];
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v35 = v23;
  uint64_t v36 = v22;

  id v24 = [v11 value];
  id v25 = [v11 synonyms];
  sub_10000D9D4(0, (unint64_t *)&qword_10017EDC0);
  unint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v27 = v42;
  sub_10004B958(v26, v12, v14, v42, a3);
  uint64_t v29 = v28;
  swift_bridgeObjectRelease();
  *a4 = v12;
  a4[1] = v14;
  a4[2] = v27;
  a4[3] = a3;
  uint64_t v30 = v40;
  a4[4] = (uint64_t)v41;
  a4[5] = v30;
  uint64_t v31 = v38;
  a4[6] = v39;
  a4[7] = v31;
  uint64_t v32 = v36;
  a4[8] = v37;
  a4[9] = v32;
  a4[10] = v35;
  a4[11] = (uint64_t)v24;
  a4[12] = v29;
  return swift_bridgeObjectRetain();
}

void sub_10007FFF0()
{
  sub_10000E990();
  uint64_t v2 = v1;
  type metadata accessor for DispatchWorkItemFlags();
  sub_100028430();
  __chkstk_darwin(v3);
  sub_1000848E4();
  sub_100028430();
  __chkstk_darwin(v4);
  sub_100018E60();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v0;
  *(void *)(v5 + 24) = v2;
  v9[4] = sub_100082F34;
  v9[5] = v5;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  _OWORD v9[2] = sub_1000125A8;
  v9[3] = &unk_100171438;
  uint64_t v6 = _Block_copy(v9);
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  sub_100083F44((unint64_t *)&qword_10017EB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000BF1C((uint64_t *)&unk_10017C740);
  sub_100034754((unint64_t *)&qword_10017EB40, (uint64_t *)&unk_10017C740);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v6);
  sub_1000847DC();
  v7();
  sub_100084AC0();
  v8();
  swift_release();
  sub_10000E930();
}

void sub_10008023C()
{
  sub_10000E990();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  type metadata accessor for DispatchWorkItemFlags();
  sub_100028430();
  __chkstk_darwin(v5);
  sub_1000848E4();
  sub_100028430();
  __chkstk_darwin(v6);
  sub_100018E60();
  uint64_t v7 = (void *)swift_allocObject();
  void v7[2] = v0;
  v7[3] = v4;
  v7[4] = v2;
  v11[4] = sub_100082F90;
  v11[5] = v7;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  _OWORD v11[2] = sub_1000125A8;
  void v11[3] = &unk_1001714B0;
  uint64_t v8 = _Block_copy(v11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  sub_100083F44((unint64_t *)&qword_10017EB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000BF1C((uint64_t *)&unk_10017C740);
  sub_100034754((unint64_t *)&qword_10017EB40, (uint64_t *)&unk_10017C740);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v8);
  sub_1000847DC();
  v9();
  sub_100084AC0();
  v10();
  swift_release();
  sub_10000E930();
}

uint64_t sub_100080498(void *a1, uint64_t a2)
{
  uint64_t v43 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v43);
  uint64_t v44 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchTimeInterval();
  uint64_t v41 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v40 = (uint64_t *)((char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for DispatchTime();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v39 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v42 = (char *)&v34 - v11;
  uint64_t v12 = (char *)a1 + qword_100182438;
  swift_bridgeObjectRetain();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v37 = v7;
    uint64_t v38 = v12;
    uint64_t v35 = v5;
    uint64_t v36 = v8;
    uint64_t v15 = swift_slowAlloc();
    int64_t v45 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315394;
    if (qword_10017C2E0 != -1) {
      swift_once();
    }
    uint64_t v16 = qword_100181AA8;
    unint64_t v17 = unk_100181AB0;
    swift_bridgeObjectRetain();
    uint64_t aBlock = sub_100013090(v16, v17, (uint64_t *)&v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2080;
    uint64_t aBlock = 0x676E697461647075;
    unint64_t v47 = 0xEA0000000000203ALL;
    swift_bridgeObjectRetain();
    v18._uint64_t countAndFlagsBits = Set.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t aBlock = sub_100013090(aBlock, v47, (uint64_t *)&v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Queuing notification for %s %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v8 = v36;
    uint64_t v7 = v37;
    uint64_t v5 = v35;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v19 = *a1;
  uint64_t v38 = *(char **)(*a1 + 136);
  if (*(void *)&v38[(void)a1])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
    uint64_t v19 = *a1;
  }
  uint64_t v20 = *(void *)(v19 + 128);
  uint64_t v21 = *(void *)((char *)a1 + v20);
  if (v21)
  {
    swift_bridgeObjectRetain();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v35 = v5;
      uint64_t v36 = v8;
      uint64_t v37 = v7;
      id v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      uint64_t aBlock = v34;
      *(_DWORD *)id v24 = 136315138;
      if (qword_10017C2E0 != -1) {
        swift_once();
      }
      uint64_t v26 = qword_100181AA8;
      unint64_t v25 = unk_100181AB0;
      swift_bridgeObjectRetain();
      int64_t v45 = (void *)sub_100013090(v26, v25, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Existing notification for %s, merging", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v8 = v36;
      uint64_t v7 = v37;
      uint64_t v5 = v35;
    }
    else
    {
    }
    swift_bridgeObjectRetain();
    *(void *)((char *)a1 + v20) = sub_100071038(v21, a2);
  }
  else
  {
    *(void *)((char *)a1 + v20) = a2;
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  uint64_t v27 = v39;
  static DispatchTime.now()();
  uint64_t v29 = v40;
  uint64_t v28 = v41;
  *uint64_t v40 = a1[2];
  (*(void (**)(void *, void, uint64_t))(v28 + 104))(v29, enum case for DispatchTimeInterval.milliseconds(_:), v5);
  uint64_t v30 = v42;
  + infix(_:_:)();
  (*(void (**)(void *, uint64_t))(v28 + 8))(v29, v5);
  uint64_t v31 = *(void (**)(char *, uint64_t))(v8 + 8);
  v31(v27, v7);
  uint64_t v50 = sub_100082F40;
  id v51 = a1;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  unint64_t v47 = 1107296256;
  uint64_t v48 = sub_1000125A8;
  uint64_t v49 = &unk_100171460;
  _Block_copy(&aBlock);
  int64_t v45 = _swiftEmptyArrayStorage;
  sub_100083F44((unint64_t *)&qword_10017EB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  swift_retain();
  sub_10000BF1C((uint64_t *)&unk_10017C740);
  sub_100034754((unint64_t *)&qword_10017EB40, (uint64_t *)&unk_10017C740);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  uint64_t v32 = DispatchWorkItem.init(flags:block:)();
  swift_release();
  *(void *)&v38[(void)a1] = v32;
  swift_retain();
  swift_release();
  OS_dispatch_queue.asyncAfter(deadline:execute:)();
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v31)(v30, v7);
}

uint64_t sub_100080C50(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v60 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v60);
  uint64_t v61 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchTimeInterval();
  uint64_t v58 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v57 = (uint64_t *)((char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for DispatchTime();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v56 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v59 = (char *)&v50 - v13;
  os_log_type_t v14 = (char *)a1 + qword_100182438;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v54 = (uint64_t)v14;
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  p_ivar_lyt = &Registry.ivar_lyt;
  uint64_t v62 = a2;
  uint64_t v63 = a3;
  if (v17)
  {
    uint64_t v51 = v7;
    uint64_t v52 = v10;
    uint64_t v53 = v9;
    uint64_t v19 = swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 136315394;
    if (qword_10017C420 != -1) {
      swift_once();
    }
    uint64_t v21 = qword_100181D90;
    unint64_t v20 = *(void *)algn_100181D98;
    swift_bridgeObjectRetain();
    uint64_t v64 = (void *)sub_100013090(v21, v20, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2080;
    uint64_t v22 = sub_1000947AC();
    uint64_t v64 = (void *)sub_100013090(v22, v23, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Queuing notification for %s %s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v10 = v52;
    uint64_t v9 = v53;
    uint64_t v7 = v51;
    p_ivar_lyt = (void **)(&Registry + 16);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v24 = *a1;
  uint64_t v55 = *(void *)(*a1 + 136);
  if (*(void *)((char *)a1 + v55))
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
    uint64_t v24 = *a1;
  }
  unint64_t v25 = (void *)((char *)a1 + *(void *)(v24 + 128));
  uint64_t v27 = *v25;
  uint64_t v26 = v25[1];
  if (*v25)
  {
    uint64_t v28 = p_ivar_lyt;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v51 = v7;
      uint64_t v52 = v10;
      uint64_t v53 = v9;
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      aBlock[0] = v54;
      *(_DWORD *)uint64_t v31 = 136315138;
      if (v28[132] != (void *)-1) {
        swift_once();
      }
      uint64_t v33 = qword_100181D90;
      unint64_t v32 = *(void *)algn_100181D98;
      swift_bridgeObjectRetain();
      uint64_t v64 = (void *)sub_100013090(v33, v32, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Existing notification for %s, merging", v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v10 = v52;
      uint64_t v9 = v53;
      uint64_t v7 = v51;
    }
    else
    {
    }
    swift_bridgeObjectRetain();
    uint64_t v36 = sub_1000B5DD0(v63, v27);
    uint64_t v37 = v62;
    uint64_t v38 = swift_bridgeObjectRetain();
    uint64_t v39 = sub_100071038(v38, (uint64_t)v36);
    swift_bridgeObjectRetain();
    uint64_t v40 = sub_1000B5DD0(v37, v26);
    uint64_t v41 = swift_bridgeObjectRetain();
    uint64_t v42 = sub_100071038(v41, (uint64_t)v40);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v35 = *v25;
    *unint64_t v25 = v39;
    v25[1] = v42;
  }
  else
  {
    uint64_t v34 = v63;
    *unint64_t v25 = v62;
    v25[1] = v34;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v35 = 0;
  }
  sub_100082F9C(v35);
  uint64_t v43 = v56;
  static DispatchTime.now()();
  int64_t v45 = v57;
  uint64_t v44 = v58;
  void *v57 = a1[2];
  (*(void (**)(void *, void, uint64_t))(v44 + 104))(v45, enum case for DispatchTimeInterval.milliseconds(_:), v7);
  uint64_t v46 = v59;
  + infix(_:_:)();
  (*(void (**)(void *, uint64_t))(v44 + 8))(v45, v7);
  unint64_t v47 = *(void (**)(char *, uint64_t))(v10 + 8);
  v47(v43, v9);
  aBlock[4] = (uint64_t)sub_100082FDC;
  aBlock[5] = (uint64_t)a1;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000125A8;
  void aBlock[3] = (uint64_t)&unk_1001714D8;
  _Block_copy(aBlock);
  uint64_t v64 = _swiftEmptyArrayStorage;
  sub_100083F44((unint64_t *)&qword_10017EB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  swift_retain();
  sub_10000BF1C((uint64_t *)&unk_10017C740);
  sub_100034754((unint64_t *)&qword_10017EB40, (uint64_t *)&unk_10017C740);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  uint64_t v48 = DispatchWorkItem.init(flags:block:)();
  swift_release();
  *(void *)((char *)a1 + v55) = v48;
  swift_retain();
  swift_release();
  OS_dispatch_queue.asyncAfter(deadline:execute:)();
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v47)(v46, v9);
}

void sub_100081450()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Notification();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = __chkstk_darwin(v6);
  uint64_t v10 = (void **)((char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = *(void **)((char *)v1 + qword_100182440);
  *uint64_t v10 = v11;
  (*(void (**)(void *, void, uint64_t, double))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6, v8);
  id v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
  if (v11)
  {
    uint64_t v42 = 0;
    uint64_t v13 = *(void *)(*v1 + 128);
    if (*(void *)((char *)v1 + v13))
    {
      uint64_t v14 = swift_bridgeObjectRetain();
      uint64_t v15 = sub_1000490FC(v14);
      swift_bridgeObjectRelease();
      uint64_t v16 = v15[2];
      if (v16)
      {
        uint64_t v31 = v13;
        unint64_t v32 = v1;
        BOOL v17 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
        Swift::String v18 = (char *)v15 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
        uint64_t v37 = (char *)v1 + qword_100182438;
        uint64_t v38 = v17;
        uint64_t v19 = (void *)v1[3];
        uint64_t v36 = *(void *)(v3 + 72);
        uint64_t v39 = (void (**)(char *, uint64_t))(v3 + 8);
        os_log_type_t v30 = v15;
        swift_bridgeObjectRetain();
        *(void *)&long long v20 = 136315138;
        long long v34 = v20;
        uint64_t v33 = (char *)&type metadata for Any + 8;
        uint64_t v35 = v3 + 16;
        while (1)
        {
          v38(v5, v18, v2);
          uint64_t v21 = Logger.logObject.getter();
          os_log_type_t v22 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v21, v22))
          {
            uint64_t v23 = swift_slowAlloc();
            v41[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v23 = v34;
            uint64_t v24 = Notification.description.getter();
            *(void *)(v23 + 4) = sub_100013090(v24, v25, v41);
            swift_bridgeObjectRelease();
            (*v39)(v5, v2);
            _os_log_impl((void *)&_mh_execute_header, v21, v22, "Sending notification %s", (uint8_t *)v23, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            (*v39)(v5, v2);
          }
          Class isa = Notification._bridgeToObjectiveC()().super.isa;
          [v19 postNotification:isa];

          if (__OFADD__(v42, 1)) {
            break;
          }
          ++v42;
          v18 += v36;
          if (!--v16)
          {
            swift_bridgeObjectRelease_n();
            uint64_t v13 = v31;
            uint64_t v1 = v32;
            goto LABEL_12;
          }
        }
        __break(1u);
        goto LABEL_17;
      }
      swift_bridgeObjectRelease();
LABEL_12:
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v29 = 134217984;
        swift_beginAccess();
        uint64_t v40 = v42;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "Sent %ld notifications", v29, 0xCu);
        swift_slowDealloc();
      }
    }
    *(void *)((char *)v1 + v13) = 0;
    swift_bridgeObjectRelease();
    *(void *)((char *)v1 + *(void *)(*v1 + 136)) = 0;
    swift_release();
    return;
  }
LABEL_17:
  __break(1u);
}

void sub_10008191C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Notification();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = __chkstk_darwin(v6);
  uint64_t v10 = (void **)((char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = *(void **)((char *)v1 + qword_100182440);
  *uint64_t v10 = v11;
  (*(void (**)(void *, void, uint64_t, double))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6, v8);
  id v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
  if (v11)
  {
    uint64_t v45 = 0;
    uint64_t v13 = *(void *)(*v1 + 128);
    uint64_t v14 = (void *)((char *)v1 + v13);
    uint64_t v15 = *(void *)((char *)v1 + v13);
    if (v15)
    {
      uint64_t v16 = v14[1];
      sub_100082FE0(*(void *)((char *)v1 + v13));
      BOOL v17 = sub_100094360(v15, v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v18 = v17[2];
      if (v18)
      {
        long long v34 = v14;
        uint64_t v35 = v1;
        uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
        long long v20 = (char *)v17 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
        uint64_t v40 = (char *)v1 + qword_100182438;
        uint64_t v41 = v19;
        uint64_t v21 = (void *)v1[3];
        uint64_t v39 = *(void *)(v3 + 72);
        uint64_t v42 = (void (**)(char *, uint64_t))(v3 + 8);
        uint64_t v33 = v17;
        swift_bridgeObjectRetain();
        *(void *)&long long v22 = 136315138;
        long long v37 = v22;
        uint64_t v36 = (char *)&type metadata for Any + 8;
        uint64_t v38 = v3 + 16;
        while (1)
        {
          v41(v5, v20, v2);
          uint64_t v23 = Logger.logObject.getter();
          os_log_type_t v24 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v23, v24))
          {
            uint64_t v25 = swift_slowAlloc();
            v44[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v25 = v37;
            uint64_t v26 = Notification.description.getter();
            *(void *)(v25 + 4) = sub_100013090(v26, v27, v44);
            swift_bridgeObjectRelease();
            (*v42)(v5, v2);
            _os_log_impl((void *)&_mh_execute_header, v23, v24, "Sending notification %s", (uint8_t *)v25, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            (*v42)(v5, v2);
          }
          Class isa = Notification._bridgeToObjectiveC()().super.isa;
          [v21 postNotification:isa];

          if (__OFADD__(v45, 1)) {
            break;
          }
          ++v45;
          v20 += v39;
          if (!--v18)
          {
            swift_bridgeObjectRelease_n();
            uint64_t v14 = v34;
            uint64_t v1 = v35;
            goto LABEL_12;
          }
        }
        __break(1u);
        goto LABEL_17;
      }
      swift_bridgeObjectRelease();
LABEL_12:
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v31 = 134217984;
        swift_beginAccess();
        uint64_t v43 = v45;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Sent %ld notifications", v31, 0xCu);
        swift_slowDealloc();
      }
    }
    uint64_t v32 = *v14;
    *uint64_t v14 = 0;
    v14[1] = 0;
    sub_100082F9C(v32);
    *(void *)((char *)v1 + *(void *)(*v1 + 136)) = 0;
    swift_release();
    return;
  }
LABEL_17:
  __break(1u);
}

id sub_100081E04(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100081E58(a1, a2, a3, (SEL *)&selRef_initWithBundleIdentifier_allowPlaceholder_error_);
}

id sub_100081E58(uint64_t a1, uint64_t a2, char a3, SEL *a4)
{
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = 0;
  id v8 = [v4 *a4:v7:a3 & 1:&v12];

  if (v8)
  {
    id v9 = v12;
  }
  else
  {
    id v10 = v12;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v8;
}

id sub_100081F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a4)
  {
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v16 = 0;
  }
  v19[0] = a6;
  v19[1] = a7;
  _OWORD v19[2] = a8;
  void v19[3] = a9;
  id v17 = [v9 initWithProcessInstanceIdentifier:v15 bundleIdentifier:v16 xpcListenerEndpoint:a5 auditToken:v19];

  return v17;
}

Swift::Int sub_100082020()
{
  uint64_t v0 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v2 = v1;
  Hasher.init(_seed:)();
  Data.hash(into:)();
  Swift::Int v3 = Hasher._finalize()();
  sub_10000DA10(v0, v2);
  return v3;
}

uint64_t sub_100082098(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    Swift::Int v3 = &_swiftEmptySetSingleton;
    goto LABEL_25;
  }
  sub_10000BF1C((uint64_t *)&unk_10017D2F0);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  Swift::Int v3 = (unsigned char *)result;
  uint64_t v24 = *(void *)(a1 + 16);
  if (!v24)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    return (uint64_t)v3;
  }
  unint64_t v4 = 0;
  uint64_t v5 = result + 56;
  while (v4 < *(void *)(a1 + 16))
  {
    uint64_t v6 = (uint64_t *)(a1 + 32 + 16 * v4);
    uint64_t v8 = *v6;
    uint64_t v7 = v6[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v9 = -1 << v3[32];
    unint64_t v10 = result & ~v9;
    unint64_t v11 = v10 >> 6;
    uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
    uint64_t v13 = 1 << v10;
    if (((1 << v10) & v12) != 0)
    {
      uint64_t v14 = *((void *)v3 + 6);
      NSString v15 = (void *)(v14 + 16 * v10);
      BOOL v16 = *v15 == v8 && v15[1] == v7;
      if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
LABEL_11:
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_22;
      }
      uint64_t v17 = ~v9;
      while (1)
      {
        unint64_t v10 = (v10 + 1) & v17;
        unint64_t v11 = v10 >> 6;
        uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
        uint64_t v13 = 1 << v10;
        if ((v12 & (1 << v10)) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * v10);
        if (*v18 != v8 || v18[1] != v7)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_11;
      }
    }
    *(void *)(v5 + 8 * v11) = v13 | v12;
    long long v20 = (void *)(*((void *)v3 + 6) + 16 * v10);
    void *v20 = v8;
    v20[1] = v7;
    uint64_t v21 = *((void *)v3 + 2);
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_27;
    }
    *((void *)v3 + 2) = v23;
LABEL_22:
    if (++v4 == v24) {
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void sub_100082268(uint64_t a1)
{
  uint64_t v1 = a1;
  if (!*(void *)(a1 + 16)
    || (sub_10000BF1C(&qword_10017EB50), uint64_t v2 = static _SetStorage.allocate(capacity:)(),
                                         (uint64_t v30 = *(void *)(v1 + 16)) == 0))
  {
LABEL_24:
    swift_bridgeObjectRelease();
    return;
  }
  unint64_t v3 = 0;
  uint64_t v28 = v1;
  uint64_t v29 = v1 + 32;
  while (v3 < *(void *)(v1 + 16))
  {
    unint64_t v4 = *(void **)(v29 + 8 * v3);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    id v5 = v4;
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
    uint64_t v8 = v6 & ~v7;
    sub_100084EBC();
    if ((v11 & v10) != 0)
    {
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v13;
      if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v14 == v15)
      {
LABEL_21:
        sub_100084B94();
LABEL_22:

        goto LABEL_23;
      }
      char v17 = sub_1000848A4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v17) {
        goto LABEL_22;
      }
      uint64_t v18 = ~v7;
      while (1)
      {
        uint64_t v8 = (v8 + 1) & v18;
        sub_100084EBC();
        if ((v10 & v11) == 0) {
          break;
        }
        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v21 = v20;
        if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v21 == v22) {
          goto LABEL_21;
        }
        char v24 = sub_1000848A4();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v24) {
          goto LABEL_22;
        }
      }
    }
    *(void *)(v2 + 56 + 8 * v9) = v11 | v10;
    *(void *)(*(void *)(v2 + 48) + 8 * v8) = v5;
    uint64_t v25 = *(void *)(v2 + 16);
    BOOL v26 = __OFADD__(v25, 1);
    uint64_t v27 = v25 + 1;
    if (v26) {
      goto LABEL_26;
    }
    *(void *)(v2 + 16) = v27;
LABEL_23:
    ++v3;
    uint64_t v1 = v28;
    if (v3 == v30) {
      goto LABEL_24;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
}

unint64_t *sub_100082474(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = (unint64_t *)isStackAllocationSafe;
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    id v5 = (unint64_t *)((char *)&v9 - ((8 * v4 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_100023234(0, v4, v5);
    Swift::Int v6 = sub_1000825D8(v5, v4, (uint64_t)v2);
    if (v1) {
      swift_willThrow();
    }
    else {
      return v6;
    }
  }
  else
  {
    uint64_t v7 = (unint64_t *)swift_slowAlloc();
    sub_100023234(0, v4, v7);
    uint64_t v2 = sub_1000825D8(v7, v4, (uint64_t)v2);
    swift_slowDealloc();
  }
  return v2;
}

unint64_t *sub_1000825D8(unint64_t *result, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = result;
  uint64_t v5 = 0;
  int64_t v6 = 0;
  uint64_t v7 = a3 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v6 << 6);
      goto LABEL_20;
    }
    int64_t v14 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v11) {
      return (unint64_t *)sub_1000FC584(v4, a2, v5, a3);
    }
    unint64_t v15 = *(void *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      int64_t v6 = v14 + 1;
      if (v14 + 1 >= v11) {
        return (unint64_t *)sub_1000FC584(v4, a2, v5, a3);
      }
      unint64_t v15 = *(void *)(v7 + 8 * v6);
      if (!v15)
      {
        int64_t v6 = v14 + 2;
        if (v14 + 2 >= v11) {
          return (unint64_t *)sub_1000FC584(v4, a2, v5, a3);
        }
        unint64_t v15 = *(void *)(v7 + 8 * v6);
        if (!v15) {
          break;
        }
      }
    }
LABEL_19:
    unint64_t v10 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_20:
    uint64_t result = (unint64_t *)[*(id *)(*(void *)(a3 + 56) + 8 * v13) value];
    if (result == (unint64_t *)1)
    {
      *(unint64_t *)((char *)v4 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v5++, 1))
      {
        __break(1u);
        return (unint64_t *)sub_1000FC584(v4, a2, v5, a3);
      }
    }
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v11) {
    return (unint64_t *)sub_1000FC584(v4, a2, v5, a3);
  }
  unint64_t v15 = *(void *)(v7 + 8 * v16);
  if (v15)
  {
    int64_t v6 = v16;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v6 >= v11) {
      return (unint64_t *)sub_1000FC584(v4, a2, v5, a3);
    }
    unint64_t v15 = *(void *)(v7 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_10008276C(void *a1)
{
  id v1 = [a1 systemImageName];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_1000827D0(void *a1)
{
  id v2 = [a1 bundleIdentifier];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_100082840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v33 = a2;
  uint64_t v5 = sub_10000BF1C(&qword_10017DCC0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v34[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  int64_t v11 = (char *)&v34[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  int64_t v14 = (char *)&v34[-1] - v13;
  void v34[3] = &unk_10016FFE8;
  v34[4] = &off_100170008;
  uint64_t v15 = swift_allocObject();
  v34[0] = v15;
  long long v16 = *(_OWORD *)(a1 + 8);
  long long v35 = *(_OWORD *)(a1 + 24);
  long long v36 = v16;
  long long v17 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v15 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v15 + 32) = v17;
  *(void *)(v15 + 48) = *(void *)(a1 + 32);
  uint64_t v18 = sub_10000BEA0(v34, (uint64_t)&unk_10016FFE8);
  uint64_t v19 = v18[3];
  uint64_t v20 = v18[4];
  if (v19 == 0xD000000000000019 && v20 == 0x8000000100142640
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_unknownObjectRetain();
    sub_100027B80((uint64_t)&v36);
    sub_100027B80((uint64_t)&v35);
    uint64_t v21 = off_10017C388;
    swift_retain();
    if (v21 != (void *)-1) {
      swift_once();
    }
    uint64_t v22 = sub_10000BEE4(v8, (uint64_t)qword_100181C00);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v14, v22, v8);
    swift_release();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Received Siri Vocabulary database migration darwin notification", v25, 2u);
      int64_t v11 = v14;
LABEL_16:
      swift_slowDealloc();
      goto LABEL_17;
    }
    int64_t v11 = v14;
  }
  else
  {
    if ((v19 != 0xD000000000000029 || v20 != 0x8000000100142660)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      swift_unknownObjectRetain();
      sub_100027B80((uint64_t)&v36);
      sub_100027B80((uint64_t)&v35);
      return sub_10000E788((uint64_t)v34);
    }
    swift_unknownObjectRetain();
    sub_100027B80((uint64_t)&v36);
    sub_100027B80((uint64_t)&v35);
    BOOL v26 = off_10017C388;
    swift_retain();
    if (v26 != (void *)-1) {
      swift_once();
    }
    uint64_t v27 = sub_10000BEE4(v8, (uint64_t)qword_100181C00);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v27, v8);
    swift_release();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v28, "Received Siri language change darwin notification", v29, 2u);
      goto LABEL_16;
    }
  }
LABEL_17:

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v30 = type metadata accessor for TaskPriority();
  sub_10000D5B0((uint64_t)v7, 1, 1, v30);
  uint64_t v31 = (void *)swift_allocObject();
  void v31[2] = 0;
  v31[3] = 0;
  v31[4] = a3;
  v31[5] = v33;
  swift_unknownObjectRetain();
  swift_retain();
  sub_100011AA4((uint64_t)v7, (uint64_t)&unk_10017EB08, (uint64_t)v31);
  swift_release();
  return sub_10000E788((uint64_t)v34);
}

uint64_t sub_100082CF0()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100082D38()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v0 = sub_100084BAC();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100082D78()
{
  sub_100084274();
  sub_100013E0C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100011814;
  sub_100084200();
  return sub_100072124(v3, v4, v5, v6, v7);
}

uint64_t sub_100082E28(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LSLinkBundleRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100082E84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LSLinkBundleRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100082EEC(void *a1, uint64_t *a2)
{
  return sub_100080498(a1, *a2);
}

uint64_t sub_100082EF4()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100082F34()
{
  return sub_100082EEC(*(void **)(v0 + 16), (uint64_t *)(v0 + 24));
}

uint64_t sub_100082F44(void *a1, uint64_t *a2)
{
  return sub_100080C50(a1, *a2, a2[1]);
}

uint64_t sub_100082F50()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v0 = sub_100084B84();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100082F90()
{
  return sub_100082F44(*(void **)(v0 + 16), (uint64_t *)(v0 + 24));
}

uint64_t sub_100082F9C(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100082FE0(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100083024()
{
  sub_10006039C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  uint64_t v3 = sub_1000843E8();
  return v4(v3);
}

unint64_t sub_1000830BC()
{
  unint64_t result = qword_10017EB78;
  if (!qword_10017EB78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017EB78);
  }
  return result;
}

uint64_t sub_100083108@<X0>(void *a1@<X8>)
{
  return sub_10007F720(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_100083128()
{
  sub_10006039C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  uint64_t v3 = sub_1000843E8();
  return v4(v3);
}

uint64_t sub_1000831C0@<X0>(void *a1@<X8>)
{
  return sub_10007EBC4(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_1000831E0()
{
  _Block_release(*(const void **)(v0 + 24));
  uint64_t v1 = sub_100084B84();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100083220()
{
  sub_10006039C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  uint64_t v3 = sub_1000843E8();
  return v4(v3);
}

uint64_t sub_1000832B8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10007E3B8(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void **)(v2 + 40), a2);
}

uint64_t sub_1000832DC()
{
  sub_100084ED0();
  sub_100013E0C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  sub_100084610();
  sub_100084D74();
  return v8(v3, v4, v5, v6, v7, v8, v9, v10);
}

id sub_100083378(id result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_100083390(result, a2 & 1);
  }
  return result;
}

id sub_100083390(void *a1, char a2)
{
  if (a2) {
    return (id)swift_errorRetain();
  }
  else {
    return a1;
  }
}

void sub_10008339C(void *a1, unsigned __int8 a2)
{
  if (a2 != 255) {
    sub_1000833B4(a1, a2 & 1);
  }
}

void sub_1000833B4(void *a1, char a2)
{
  if (a2) {
    swift_errorRelease();
  }
  else {
}
  }

uint64_t sub_1000833C4()
{
  sub_100084274();
  sub_100013E0C();
  sub_1000845B8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  sub_100084144();
  sub_100084200();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10008345C()
{
  sub_100084274();
  sub_100013E0C();
  sub_1000845B8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  sub_100084144();
  sub_100084200();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000834F4()
{
  sub_100084274();
  sub_100013E0C();
  sub_1000845B8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  sub_100084144();
  sub_100084200();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10008358C()
{
  sub_10006039C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  uint64_t v3 = sub_100084240();
  return v4(v3);
}

uint64_t sub_100083620(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10000BF1C(a3);
  sub_1000283FC();
  uint64_t v4 = sub_100084E6C();
  v5(v4);
  return a2;
}

uint64_t sub_100083674()
{
  sub_100084274();
  sub_100013E0C();
  sub_1000845B8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  sub_100084144();
  sub_100084200();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10008370C()
{
  sub_100084274();
  sub_100013E0C();
  sub_1000845B8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  sub_100084144();
  sub_100084200();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000837A4()
{
  sub_100084274();
  sub_100013E0C();
  sub_1000845B8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  sub_100084144();
  sub_100084200();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10008383C()
{
  sub_100084274();
  sub_100013E0C();
  sub_1000845B8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  sub_100084144();
  sub_100084200();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000838D0()
{
  _Block_release(*(const void **)(v0 + 32));
  uint64_t v1 = sub_100084BAC();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100083910()
{
  sub_100084274();
  sub_100013E0C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  sub_100084200();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000839C8()
{
  sub_10006039C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  uint64_t v3 = sub_100084240();
  return v4(v3);
}

uint64_t sub_100083A60()
{
  sub_10006039C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  uint64_t v3 = sub_100084240();
  return v4(v3);
}

uint64_t sub_100083AF8()
{
  sub_10006039C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  uint64_t v3 = sub_100084240();
  return v4(v3);
}

uint64_t sub_100083B90()
{
  sub_100084274();
  sub_100013E0C();
  sub_1000845B8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  sub_100084144();
  sub_100084200();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_100083C28()
{
  _Block_release(*(const void **)(v0 + 32));
  uint64_t v1 = sub_100084BAC();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100083C70()
{
  sub_100084274();
  sub_100013E0C();
  sub_1000845B8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  sub_100084144();
  sub_100084200();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_100083D08()
{
  _Block_release(*(const void **)(v0 + 40));

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100083D60()
{
  sub_100084ED0();
  sub_100013E0C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  sub_100084610();
  sub_100084D74();
  return v8(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_100083DFC(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_1000283FC();
  uint64_t v4 = sub_100084E6C();
  v5(v4);
  return a2;
}

uint64_t sub_100083E54()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100083E94()
{
  sub_10006039C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  uint64_t v3 = sub_100084240();
  return v4(v3);
}

id sub_100083F28(uint64_t *a1)
{
  return sub_100075D44(a1, *(void *)(v1 + 16));
}

uint64_t sub_100083F44(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ApplicationServiceInstance.Errors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100084058);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ApplicationServiceInstance.Errors()
{
  return &type metadata for ApplicationServiceInstance.Errors;
}

unint64_t sub_100084098()
{
  unint64_t result = qword_10017EE18;
  if (!qword_10017EE18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017EE18);
  }
  return result;
}

uint64_t sub_100084120(uint64_t a1)
{
  return _swift_task_switch(a1, 0, 0);
}

uint64_t sub_100084144()
{
  return v0;
}

uint64_t sub_100084180()
{
  return swift_task_dealloc();
}

uint64_t sub_1000841A4(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000841D4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, unint64_t, uint64_t, uint64_t))
{
  return sub_10007A6C8(v6, v7, a3, v9, v8, a6);
}

uint64_t sub_1000841F4(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t sub_100084240()
{
  return v0;
}

uint64_t sub_100084288()
{
  return v0;
}

uint64_t sub_1000842A0(uint64_t a1, uint64_t a2)
{
  sub_10000BEE4(a1, a2);
  return v2;
}

uint64_t sub_1000842E8(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_10008430C(uint64_t a1)
{
  *(void *)(v1 + 8) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100084330()
{
  *(_WORD *)(v0 + 22) = 2082;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100084354()
{
  return v0;
}

uint64_t sub_10008436C()
{
  return v0;
}

uint64_t sub_100084380()
{
  return v0;
}

uint64_t sub_100084394()
{
  return v0 + 8;
}

uint64_t sub_1000843B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  return sub_100013090(a21, v21, (uint64_t *)(v22 - 88));
}

uint64_t sub_1000843E8()
{
  return v0;
}

uint64_t sub_100084404()
{
  return v0;
}

uint64_t sub_100084420()
{
  return v0 + 8;
}

uint64_t sub_100084430()
{
  return swift_arrayDestroy();
}

uint64_t sub_100084450()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100084470(uint64_t a1)
{
  return sub_10000D5D8(a1, 1, v1);
}

uint64_t sub_100084490()
{
  *(_WORD *)(v1 + 12) = 2082;
  return sub_10007AA90(v0);
}

void sub_1000844B0(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, int a9, os_log_type_t type)
{
  _os_log_impl(a1, v10, type, a4, v11, 0x20u);
}

uint64_t sub_1000844D0(uint64_t a1, unsigned char *a2)
{
  *a2 = 1;
  return swift_willThrow();
}

uint64_t sub_1000844F0()
{
  return v0 + 8;
}

uint64_t sub_100084504()
{
  return v0;
}

uint64_t sub_100084510()
{
  return swift_arrayDestroy();
}

uint64_t sub_10008452C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  *(void *)(v20 - 88) = a1;
  _DWORD *v19 = a19;
  return swift_bridgeObjectRetain();
}

BOOL sub_100084560(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000845A0()
{
  return *(void *)(v0 + 216);
}

BOOL sub_1000845C4(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000845E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  *(void *)(v20 - 88) = a1;
  _DWORD *v19 = a19;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100084610()
{
  return v0;
}

uint64_t sub_100084634()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100084684()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10008469C()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1000846B4()
{
  return swift_bridgeObjectRetain();
}

void sub_1000846D0(uint64_t a1@<X8>)
{
  v1[43] = a1;
  uint64_t v2 = v1[39] + 16 * a1;
  v1[44] = *(void *)(v2 + 32);
  v1[45] = *(void *)(v2 + 40);
}

uint64_t sub_1000846F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  return sub_100013090(a3, v5, (uint64_t *)va);
}

uint64_t sub_10008470C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  return sub_100013090(v5, v6, (uint64_t *)va);
}

uint64_t sub_100084728()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10008476C(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = v3;
  a1[2].n128_u64[1] = v2;
  return swift_bridgeObjectRetain_n();
}

BOOL sub_10008478C()
{
  return os_log_type_enabled(v0, v1);
}

uint64_t sub_1000847A4()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_1000847C0()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100084830()
{
  return v0 + 8;
}

uint64_t sub_100084840()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_100084858()
{
  return swift_slowAlloc();
}

uint64_t sub_100084874()
{
  return v0;
}

uint64_t sub_100084880@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_10008488C()
{
  return swift_errorRelease();
}

uint64_t sub_1000848A4()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_1000848CC()
{
  return swift_arrayDestroy();
}

uint64_t sub_1000848E4()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t sub_10008490C()
{
  return v0;
}

uint64_t sub_100084928(uint64_t a1)
{
  *(void *)(v1 + 112) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void *sub_100084950(int a1, int a2, int a3, int a4, void *aBlock)
{
  return _Block_copy(aBlock);
}

uint64_t sub_100084978()
{
  return swift_arrayDestroy();
}

uint64_t sub_1000849B0()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000849C8()
{
  return sub_100013090(v1, v0, (uint64_t *)(v2 - 88));
}

uint64_t sub_1000849E4()
{
  return sub_100013090(v1, v0, (uint64_t *)(v2 - 88));
}

uint64_t sub_100084A00()
{
  return *(void *)(v0 + 232);
}

uint64_t sub_100084A18()
{
  return v0 + 8;
}

uint64_t sub_100084A34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  *(void *)(v20 - 88) = a1;
  _DWORD *v19 = a19;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100084A58()
{
  return v0;
}

uint64_t sub_100084A84()
{
  return swift_errorRelease();
}

uint64_t sub_100084A9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  *(void *)(v20 - 88) = a1;
  _DWORD *v19 = a19;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100084AE4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100084B18()
{
  return v0;
}

uint64_t sub_100084B30()
{
  return v0;
}

uint64_t sub_100084B54()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100084B6C()
{
  return v0;
}

uint64_t sub_100084B84()
{
  return v0;
}

uint64_t sub_100084B94()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100084BAC()
{
  return v0;
}

uint64_t sub_100084BBC()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100084BDC()
{
  return *(void *)(v0 + 160);
}

uint64_t sub_100084BF0()
{
  return *(void *)(v0 + 160);
}

uint64_t sub_100084C04()
{
  return *(void *)(v0 + 232);
}

void *sub_100084C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  *a9 = a1;
  return a9;
}

uint64_t sub_100084C30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  return sub_100013090(a21, v21, (uint64_t *)(v22 - 88));
}

uint64_t sub_100084C50()
{
  return swift_bridgeObjectRetain();
}

void sub_100084C68()
{
}

uint64_t sub_100084C80()
{
  return v0;
}

uint64_t sub_100084C94()
{
  return v0;
}

void sub_100084CA0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v6, a4, v4, 0xCu);
}

void sub_100084CC0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

void sub_100084CE0()
{
  *(unsigned char *)(v0 + 32) = 1;
}

void sub_100084CF4()
{
  uint64_t v2 = *(void **)(v0 + 72);
}

void sub_100084D0C()
{
  uint64_t v2 = *(void **)(v0 + 72);
}

uint64_t sub_100084D24()
{
  return swift_retain();
}

uint64_t sub_100084D48(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  return sub_100013090(a1, a2, (uint64_t *)va);
}

uint64_t sub_100084D60()
{
  return v0;
}

uint64_t sub_100084D88(uint64_t result)
{
  *(void *)(v1 + 424) = result;
  return result;
}

uint64_t sub_100084D94@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 + 88) = *(void *)(result + a2);
  return result;
}

uint64_t sub_100084DA0()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100084DB8()
{
  return v0;
}

uint64_t sub_100084DC4()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_100084DDC(uint64_t result)
{
  *(void *)(v1 + 96) = result;
  return result;
}

uint64_t sub_100084DE8(float a1)
{
  *uint64_t v1 = a1;
  return swift_errorRetain();
}

uint64_t sub_100084E08()
{
  return swift_slowAlloc();
}

uint64_t sub_100084E20()
{
  return v0;
}

uint64_t sub_100084E34()
{
  return v0;
}

uint64_t sub_100084E48()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100084E60()
{
  return v0;
}

uint64_t sub_100084E6C()
{
  return v0;
}

uint64_t sub_100084E80()
{
  return v0;
}

uint64_t sub_100084E8C(uint64_t a1)
{
  *(void *)(v1 + 408) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_100084EA4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100084EE4()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_100084EFC()
{
  return swift_allocObject();
}

uint64_t sub_100084F1C()
{
  return *(void *)(v0 + 160);
}

uint64_t sub_100084F30()
{
  return v0;
}

uint64_t sub_100084F44(uint64_t a1, uint64_t a2)
{
  if (qword_10017C3A8 != -1) {
    swift_once();
  }
  memcpy(__dst, &unk_100181C78, 0xA8uLL);
  if (a2)
  {
    sub_10002A390(__dst);
    if (qword_10017C3B0 != -1) {
      swift_once();
    }
    sub_10002A9C0((uint64_t)&qword_100181D20);
    v15[0] = a1;
    v15[1] = a2;
    uint64_t v6 = == infix<A>(_:_:)();
    uint64_t v3 = v7;
    uint64_t v9 = v8;
    memcpy(v14, __dst, sizeof(v14));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    QueryType.filter(_:)(v6, v3, v9, (uint64_t)v15);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    sub_10002A500(__dst);
    uint64_t v10 = v15;
  }
  else
  {
    sub_10002A390(__dst);
    uint64_t v10 = __dst;
  }
  memcpy(v16, v10, sizeof(v16));
  void v15[3] = &type metadata for Table;
  v15[4] = &protocol witness table for Table;
  v15[0] = swift_allocObject();
  memcpy((void *)(v15[0] + 16), v16, 0xA8uLL);
  Connection.prepareRowIterator(_:)(v15);
  uint64_t v11 = sub_10000E788((uint64_t)v15);
  if (!v2)
  {
    __chkstk_darwin(v11);
    swift_retain();
    RowIterator.compactMap<A>(_:)();
    uint64_t v3 = v13;
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  return v3;
}

uint64_t sub_100085208(long long *a1)
{
  if (qword_10017C3A8 != -1) {
    swift_once();
  }
  memcpy(__dst, &unk_100181C78, sizeof(__dst));
  memcpy(__src, &unk_100181C78, sizeof(__src));
  sub_10002A390(__dst);
  if (qword_10017C3B0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10002A9C0((uint64_t)&qword_100181D20);
  long long v24 = *a1;
  <- infix<A>(_:_:)(v2, v3, v4, (uint64_t)&v24, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  sub_10000BF1C(&qword_10017E940);
  *(_OWORD *)(swift_initStackObject() + 16) = xmmword_10013F1D0;
  if (qword_10017C3B8 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_10002A9C0((uint64_t)&qword_100181D38);
  long long v24 = a1[1];
  <- infix<A>(_:_:)(v5, v6, v7, (uint64_t)&v24, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  if (qword_10017C3C0 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_10002A9C0((uint64_t)&qword_100181D50);
  long long v24 = a1[2];
  <- infix<A>(_:_:)(v8, v9, v10, (uint64_t)&v24, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  uint64_t v11 = QueryType.insert(_:_:)((uint64_t)v25);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  swift_setDeallocating();
  sub_10006F150();
  sub_10002A66C((uint64_t)v25);
  memcpy(v28, __src, sizeof(v28));
  sub_10002A500(v28);
  v29.template._uint64_t countAndFlagsBits = v11;
  v29.template._object = v13;
  v29.bindings._rawValue = v15;
  Connection.run(_:)(v29);
  if (v16)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v25[0] = v16;
    swift_errorRetain();
    sub_10000BF1C(&qword_10017C810);
    if (swift_dynamicCast())
    {
      swift_errorRelease();
      uint64_t v17 = __src[1];
      int v18 = __src[2];
      uint64_t v19 = __src[3];
      if (LODWORD(__src[2]) == 19)
      {
        type metadata accessor for Schema.RuntimeError();
        sub_100047EA4();
        swift_allocError();
        void *v20 = 0xD00000000000004DLL;
        v20[1] = 0x8000000100144890;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v22 = __src[0];
        sub_100047E58();
        swift_allocError();
        *(void *)uint64_t v23 = v22;
        *(void *)(v23 + 8) = v17;
        *(_DWORD *)(v23 + 16) = v18;
        *(void *)(v23 + 24) = v19;
        swift_willThrow();
      }
    }
    return swift_errorRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

void *sub_1000855A0()
{
  Table.init(_:database:)(__src, 0xD00000000000001ELL, 0x8000000100143F40, 0, 0);
  return memcpy(&unk_100181C78, __src, 0xA8uLL);
}

uint64_t sub_1000855F8(uint64_t a1)
{
  return sub_100035F34(a1, (uint64_t)&qword_100181D20, 0xD000000000000010, 0x8000000100143090);
}

uint64_t sub_10008561C(uint64_t a1)
{
  return sub_100035F34(a1, (uint64_t)&qword_100181D38, 0x72506D6574737973, 0xEE006C6F636F746FLL);
}

uint64_t sub_100085648(uint64_t a1)
{
  return sub_100035F34(a1, (uint64_t)&qword_100181D50, 0xD000000000000010, 0x80000001001448E0);
}

uint64_t sub_10008566C@<X0>(uint64_t a1@<X8>)
{
  sub_1000856A8(v3);
  return sub_10008597C((uint64_t)v3, a1);
}

void sub_1000856A8(void *a1@<X8>)
{
  if (qword_10017C3B0 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  if (qword_10017C3B8 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  if (qword_10017C3C0 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v2;
  a1[3] = v3;
  a1[4] = v2;
  a1[5] = v3;
}

void *sub_10008586C@<X0>(void *(*a1)(void *__return_ptr)@<X2>, uint64_t a2@<X8>)
{
  unint64_t result = a1(v5);
  if (!v2) {
    return (void *)sub_10008597C((uint64_t)v5, a2);
  }
  return result;
}

uint64_t sub_1000858BC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0[12])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v0[14])
  {
    swift_bridgeObjectRelease();
    if (v0[16])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 184, 7);
}

uint64_t sub_100085958@<X0>(uint64_t a1@<X8>)
{
  return sub_10008566C(a1);
}

void *sub_100085960@<X0>(uint64_t a1@<X8>)
{
  return sub_10008586C(*(void *(**)(void *__return_ptr))(v1 + 16), a1);
}

uint64_t sub_10008597C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000BF1C(&qword_10017EE20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for LNDefaultActionForSystemProtocolRecord()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for LNDefaultActionForSystemProtocolRecord(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for LNDefaultActionForSystemProtocolRecord(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for LNDefaultActionForSystemProtocolRecord(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void *assignWithTake for LNDefaultActionForSystemProtocolRecord(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for LNDefaultActionForSystemProtocolRecord(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LNDefaultActionForSystemProtocolRecord(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LNDefaultActionForSystemProtocolRecord()
{
  return &type metadata for LNDefaultActionForSystemProtocolRecord;
}

void sub_100085C18(uint64_t a1, uint64_t (*a2)(id, id))
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    unint64_t v5 = 0;
    do
    {
      unint64_t v6 = v5;
      while (1)
      {
        if (v6 >= *(void *)(a1 + 16))
        {
          __break(1u);
          return;
        }
        long long v11 = *(_OWORD *)(a1 + 32 + 16 * v6);
        unint64_t v5 = v6 + 1;
        id v7 = (id)v11;
        id v8 = *((id *)&v11 + 1);
        if (a2(v7, v8)) {
          break;
        }

        ++v6;
        if (v3 == v5) {
          goto LABEL_13;
        }
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_100057C38();
      }
      long long v9 = v11;
      unint64_t v10 = _swiftEmptyArrayStorage[2];
      if (v10 >= _swiftEmptyArrayStorage[3] >> 1)
      {
        sub_100057C38();
        long long v9 = v11;
      }
      _swiftEmptyArrayStorage[2] = v10 + 1;
      *(_OWORD *)&_swiftEmptyArrayStorage[2 * v10 + 4] = v9;
    }
    while (v3 - 1 != v6);
  }
LABEL_13:
  swift_bridgeObjectRelease();
}

void sub_100085DA0(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
    while (1)
    {
      sub_100057D3C();
      if (v2 < 0) {
        break;
      }
      uint64_t v3 = 0;
      while (v2 != v3)
      {
        if ((a1 & 0xC000000000000001) != 0) {
          id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v4 = *(id *)(a1 + 8 * v3 + 32);
        }
        unint64_t v5 = v4;
        unint64_t v6 = sub_100087D04(v4);

        unint64_t v7 = _swiftEmptyArrayStorage[2];
        if (v7 >= _swiftEmptyArrayStorage[3] >> 1) {
          sub_100057D3C();
        }
        ++v3;
        _swiftEmptyArrayStorage[2] = v7 + 1;
        _swiftEmptyArrayStorage[v7 + 4] = v6;
        if (v2 == v3) {
          goto LABEL_12;
        }
      }
      __break(1u);
LABEL_14:
      swift_bridgeObjectRetain();
      uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v2) {
        goto LABEL_12;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_12:
    swift_release();
  }
}

void *sub_100085F1C(unint64_t a1, void *a2)
{
  if (a1 >> 62) {
    goto LABEL_12;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      uint64_t v17 = _swiftEmptyArrayStorage;
      __n128 result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
      if (v4 < 0) {
        break;
      }
      uint64_t v6 = 0;
      while (v4 != v6)
      {
        if ((a1 & 0xC000000000000001) != 0) {
          id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v7 = *(id *)(a1 + 8 * v6 + 32);
        }
        id v8 = v7;
        ++v6;
        id v9 = [v7 identifier];
        uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v12 = v11;

        v16[3] = &type metadata for String;
        v16[0] = v10;
        v16[1] = v12;
        id v13 = sub_100088AC4();
        id v14 = objc_allocWithZone((Class)LNValue);
        sub_10004F570(v16, v13);

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        if (v4 == v6)
        {
          uint64_t v15 = v17;

          return v15;
        }
      }
      __break(1u);
LABEL_12:
      swift_bridgeObjectRetain();
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v4) {
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_13:

    return _swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_1000860D8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_12;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v6)
  {
    while (1)
    {
      __n128 result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
      if (v6 < 0) {
        break;
      }
      uint64_t v8 = 0;
      while (v6 != v8)
      {
        if ((a1 & 0xC000000000000001) != 0) {
          id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v9 = *(id *)(a1 + 8 * v8 + 32);
        }
        uint64_t v10 = v9;
        ++v8;
        objc_allocWithZone((Class)LNProperty);
        swift_bridgeObjectRetain();
        sub_1000FC04C(a2, a3, v10);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        if (v6 == v8) {
          goto LABEL_13;
        }
      }
      __break(1u);
LABEL_12:
      swift_bridgeObjectRetain();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v6) {
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  return result;
}

#error "1000862D8: call analysis failed (funcsize=111)"

void *sub_100086420(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = a1;
  if (a1 >> 62) {
    goto LABEL_19;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v20 = v5;
    unint64_t v21 = v5 & 0xC000000000000001;
    uint64_t v7 = 4;
    while (1)
    {
      id v8 = v21 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v5 + 8 * v7);
      uint64_t v9 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      uint64_t v10 = v6;
      uint64_t v11 = v8;
      uint64_t v12 = a3;
      id v13 = [v8 identifier];
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v16 = v15;

      a3 = v12;
      BOOL v17 = v14 == a2 && v16 == v12;
      if (v17)
      {
        swift_bridgeObjectRelease();
LABEL_17:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v11;
      }
      char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v18) {
        goto LABEL_17;
      }

      ++v7;
      uint64_t v6 = v10;
      BOOL v17 = v9 == v10;
      unint64_t v5 = v20;
      if (v17) {
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_19:
    sub_1000898AC();
  }
LABEL_20:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

void *sub_1000865C8(uint64_t a1)
{
  return sub_1000865F0(a1, &qword_10017D488, (void (*)(void))sub_1000229A8, &qword_10017C998);
}

void *sub_1000865F0(uint64_t a1, uint64_t *a2, void (*a3)(void), uint64_t *a4)
{
  if (*(void *)(a1 + 16))
  {
    sub_10000BF1C(a2);
    uint64_t v6 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v6 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v9 = v6;
  uint64_t v7 = swift_bridgeObjectRetain();
  sub_100088C90(v7, 1, &v9, a3, a4);
  swift_bridgeObjectRelease();
  return v9;
}

void *sub_1000866B0(uint64_t a1)
{
  return sub_1000865F0(a1, &qword_10017D3E0, (void (*)(void))sub_100022990, &qword_10017C9A8);
}

void sub_1000866D8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = a1 + 40;
    unint64_t v5 = _swiftEmptyArrayStorage;
    uint64_t v15 = a1 + 40;
    do
    {
      uint64_t v16 = v5;
      uint64_t v6 = (uint64_t *)(v4 + 16 * v3);
      unint64_t v7 = v3;
      while (1)
      {
        if (v7 >= *(void *)(a1 + 16))
        {
          __break(1u);
          return;
        }
        uint64_t v9 = *(v6 - 1);
        uint64_t v8 = *v6;
        unint64_t v3 = v7 + 1;
        swift_bridgeObjectRetain_n();
        char v10 = sub_100023984(&v17, v9, v8);
        swift_bridgeObjectRelease();
        if (v10) {
          break;
        }
        swift_bridgeObjectRelease();
        v6 += 2;
        ++v7;
        if (v2 == v3) {
          goto LABEL_13;
        }
      }
      unint64_t v5 = v16;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      char v18 = v16;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100057848();
        unint64_t v5 = v18;
      }
      unint64_t v12 = v5[2];
      unint64_t v13 = v12 + 1;
      if (v12 >= v5[3] >> 1)
      {
        sub_100057848();
        unint64_t v13 = v12 + 1;
        unint64_t v5 = v18;
      }
      v5[2] = v13;
      uint64_t v14 = &v5[2 * v12];
      v14[4] = v9;
      void v14[5] = v8;
      uint64_t v4 = v15;
    }
    while (v2 - 1 != v7);
  }
LABEL_13:
  swift_bridgeObjectRelease();
}

uint64_t sub_100086864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return _swift_task_switch(sub_100086888, 0, 0);
}

uint64_t sub_100086888()
{
  id v87 = v0;
  unint64_t v1 = v0[2];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v3 = v0[2];
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v3 = swift_bridgeObjectRetain();
  }
  id v82 = v0;
  if (v2)
  {
    uint64_t v4 = 0;
    unint64_t v79 = v1 & 0xC000000000000001;
    unint64_t v5 = _swiftEmptyArrayStorage;
    uint64_t v77 = v3 + 32;
    uint64_t v78 = v2;
    while (1)
    {
      id v6 = v79 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v77 + 8 * v4);
      unint64_t v7 = v6;
      BOOL v8 = __OFADD__(v4, 1);
      uint64_t v9 = v4 + 1;
      if (v8) {
        break;
      }
      id v10 = [v6 systemProtocols];
      sub_10000D9D4(0, &qword_10017D0A0);
      unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v11 >> 62)
      {
        id v26 = v7;
        swift_bridgeObjectRetain();
        uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
      }
      else
      {
        uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
        id v13 = v7;
        swift_bridgeObjectRetain();
      }
      uint64_t v80 = v9;
      if (v12)
      {
        uint64_t v14 = 0;
        uint64_t v15 = v12;
        while (1)
        {
          id v16 = (v11 & 0xC000000000000001) != 0
              ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
              : *(id *)(v11 + 8 * v14 + 32);
          uint64_t v17 = v16;
          uint64_t v18 = v14 + 1;
          if (__OFADD__(v14, 1)) {
            break;
          }
          uint64_t v19 = v7;
          id v20 = v7;
          id v21 = v17;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_10001F028();
            unint64_t v5 = v24;
          }
          unint64_t v22 = v5[2];
          if (v22 >= v5[3] >> 1)
          {
            sub_10001F028();
            unint64_t v5 = v25;
          }
          v5[2] = v22 + 1;
          uint64_t v23 = &v5[2 * v22];
          v23[4] = v20;
          uint64_t v23[5] = v21;

          ++v14;
          unint64_t v7 = v19;
          if (v18 == v15) {
            goto LABEL_22;
          }
        }
        __break(1u);
        goto LABEL_64;
      }
LABEL_22:
      swift_bridgeObjectRelease_n();

      uint64_t v4 = v80;
      uint64_t v0 = v82;
      if (v80 == v78) {
        goto LABEL_26;
      }
    }
  }
  else
  {
    unint64_t v5 = _swiftEmptyArrayStorage;
LABEL_26:
    swift_bridgeObjectRelease();
    sub_100085C18((uint64_t)v5, sub_100089680);
    uint64_t v28 = v27;
    uint64_t v29 = *(void *)(v27 + 16);
    unint64_t v30 = (unint64_t)_swiftEmptyArrayStorage;
    if (v29)
    {
      uint64_t v86 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v31 = 32;
      do
      {
        id v32 = *(id *)(v28 + v31);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v31 += 16;
        --v29;
      }
      while (v29);
      unint64_t v30 = (unint64_t)v86;
      swift_bridgeObjectRelease();
    }
    id v83 = (void *)v30;
    if (v30 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      uint64_t v33 = *(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    uint64_t v81 = v28;
    long long v34 = _swiftEmptyArrayStorage;
    if (!v33)
    {
LABEL_55:
      uint64_t v50 = (void *)v0[5];
      uint64_t v84 = v0[4];
      uint64_t v51 = v0[3];
      swift_bridgeObjectRelease_n();
      uint64_t v86 = &_swiftEmptySetSingleton;
      uint64_t v52 = swift_bridgeObjectRetain();
      sub_1000866D8(v52);
      uint64_t v54 = v53;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v55 = sub_10000BEA0(v50 + 2, v50[5]);
      uint64_t v56 = *v55;
      uint64_t v57 = v55[1];
      uint64_t v58 = v55[2];
      uint64_t v59 = v55[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v60 = sub_100086264(v54, v56, v57, v58, v59);
      uint64_t v61 = sub_1000865F0(v60, &qword_10017D420, (void (*)(void))sub_1000229C0, &qword_10017EF50);
      swift_retain();
      sub_100088F64((uint64_t)v61, (uint64_t)v50);
      uint64_t v63 = v62;
      swift_bridgeObjectRelease();
      v50[8] = v63;
      swift_bridgeObjectRelease();
      sub_10000BF1C(&qword_10017E748);
      uint64_t v64 = _swiftEmptyArrayStorage;
      uint64_t v65 = Dictionary.init(dictionaryLiteral:)();
      swift_bridgeObjectRelease();
      uint64_t v50[7] = v65;
      swift_bridgeObjectRelease();
      uint64_t v66 = (void *)swift_task_alloc();
      v66[2] = v50;
      v66[3] = v51;
      v66[4] = v84;
      uint64_t v86 = _swiftEmptyArrayStorage;
      uint64_t v67 = *(void *)(v81 + 16);
      if (v67)
      {
        swift_bridgeObjectRetain();
        uint64_t v68 = (void **)(v81 + 40);
        uint64_t v69 = v82;
        do
        {
          uint64_t v70 = v82[4];
          uint64_t v71 = v82[3];
          uint64_t v72 = *v68;
          id v73 = *(v68 - 1);
          id v74 = v72;
          sub_100087424(v73, v71, v70, v74);

          sub_1000546D4();
          v68 += 2;
          --v67;
        }
        while (v67);
        swift_bridgeObjectRelease();
        uint64_t v64 = v86;
      }
      else
      {
        uint64_t v69 = v82;
      }
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      os_log_type_t v75 = (uint64_t (*)(void *))v69[1];
      return v75(v64);
    }
    uint64_t v35 = 0;
    unint64_t v36 = v30 & 0xC000000000000001;
    while (1)
    {
      id v37 = v36 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v30 + 8 * v35 + 32);
      uint64_t v38 = v37;
      uint64_t v39 = v35 + 1;
      if (__OFADD__(v35, 1)) {
        break;
      }
      id v85 = v37;
      sub_10008700C(&v85, &v86);

      uint64_t v40 = v86;
      uint64_t v41 = v86[2];
      uint64_t v42 = v34[2];
      if (__OFADD__(v42, v41)) {
        goto LABEL_65;
      }
      if (!swift_isUniquelyReferenced_nonNull_native() || v42 + v41 > v34[3] >> 1)
      {
        sub_10001E7C0();
        long long v34 = v43;
      }
      if (v40[2])
      {
        uint64_t v44 = v34[2];
        if ((v34[3] >> 1) - v44 < v41) {
          goto LABEL_68;
        }
        unint64_t v45 = (unint64_t)&v34[2 * v44 + 4];
        if ((unint64_t)(v40 + 4) < v45 + 16 * v41 && v45 < (unint64_t)&v40[2 * v41 + 4]) {
          return _fatalErrorMessage(_:_:file:line:flags:)();
        }
        swift_arrayInitWithCopy();
        if (v41)
        {
          uint64_t v47 = v34[2];
          BOOL v8 = __OFADD__(v47, v41);
          uint64_t v48 = v47 + v41;
          if (v8) {
            goto LABEL_69;
          }
          v34[2] = v48;
        }
      }
      else if (v41)
      {
        goto LABEL_66;
      }
      swift_bridgeObjectRelease();
      ++v35;
      BOOL v49 = v39 == v33;
      uint64_t v0 = v82;
      unint64_t v30 = (unint64_t)v83;
      if (v49) {
        goto LABEL_55;
      }
    }
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
  }
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t sub_100086FBC(void *a1, void *a2, uint64_t a3)
{
  sub_10000BEA0((void *)(a3 + 16), *(void *)(a3 + 40));

  return sub_10005F2D0(a1, a2);
}

void sub_10008700C(id *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  id v5 = *a1;
  id v6 = [*a1 parameters];
  sub_10000D9D4(0, &qword_10017D0A8);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v33 = v2;
  uint64_t v27 = v5;
  uint64_t v28 = a2;
  if (v8)
  {
    if (v8 < 1)
    {
      __break(1u);
LABEL_30:
      sub_10001E7C0();
      id v10 = v25;
      goto LABEL_22;
    }
    uint64_t v9 = 0;
    id v10 = _swiftEmptyArrayStorage;
    do
    {
      if ((v7 & 0xC000000000000001) != 0) {
        id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v11 = *(id *)(v7 + 8 * v9 + 32);
      }
      uint64_t v12 = v11;
      uint64_t v13 = sub_1000872C4();
      uint64_t v15 = v14;

      if (v15)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10001E7C0();
          id v10 = v18;
        }
        unint64_t v16 = v10[2];
        if (v16 >= v10[3] >> 1)
        {
          sub_10001E7C0();
          id v10 = v19;
        }
        _OWORD v10[2] = v16 + 1;
        uint64_t v17 = &v10[2 * v16];
        v17[4] = v13;
        void v17[5] = v15;
      }
      ++v9;
    }
    while (v8 != v9);
  }
  else
  {
    id v10 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease_n();
  uint64_t v20 = sub_100089208(v27);
  if (!v20)
  {
    long long v31 = 0u;
    long long v32 = 0u;
    goto LABEL_26;
  }
  uint64_t v21 = v20;
  id v22 = LNActionTypeSpecificMetadataKeyEntityType;
  sub_10001B7C0(v21, &v31);

  swift_bridgeObjectRelease();
  if (!*((void *)&v32 + 1))
  {
LABEL_26:
    sub_100014958((uint64_t)&v31);
    goto LABEL_27;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_27;
  }
  uint64_t v3 = v29;
  a2 = v30;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_30;
  }
LABEL_22:
  unint64_t v23 = v10[2];
  if (v23 >= v10[3] >> 1)
  {
    sub_10001E7C0();
    id v10 = v26;
  }
  _OWORD v10[2] = v23 + 1;
  long long v24 = &v10[2 * v23];
  v24[4] = v3;
  uint64_t v24[5] = a2;
LABEL_27:
  void *v28 = v10;
}

uint64_t sub_1000872C4()
{
  id v1 = [v0 valueType];
  self;
  uint64_t v2 = swift_dynamicCastObjCClass();
  if (!v2)
  {
    self;
    uint64_t v7 = swift_dynamicCastObjCClass();
    if (v7)
    {
      uint64_t v8 = (void *)v7;
      id v9 = v1;
      id v10 = [v8 memberValueType];
      self;
      id v11 = (void *)swift_dynamicCastObjCClass();
      if (v11)
      {
        id v12 = [v11 identifier];
        uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();

        return v6;
      }
    }
    else
    {
    }
    return 0;
  }
  uint64_t v3 = (void *)v2;
  id v4 = v1;
  id v5 = [v3 identifier];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v6;
}

void *sub_100087424(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  uint64_t v48 = a2;
  uint64_t v49 = a3;
  uint64_t v47 = a1;
  id v7 = [a1 parameters];
  sub_10000D9D4(0, &qword_10017D0A8);
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_retain();
  uint64_t v50 = v5;
  sub_100085DA0(v8);
  id v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v11 = v10[2];
  if (!v11)
  {
    unint64_t v16 = _swiftEmptyArrayStorage;
    goto LABEL_16;
  }
  uint64_t v12 = (uint64_t)(v10 + 4);
  uint64_t v13 = v10[4];
  if ((unint64_t)v13 >> 62) {
    goto LABEL_65;
  }
  uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v14)
  {
    while (v11 != 1)
    {
      uint64_t v34 = 5;
      while (1)
      {
        uint64_t v35 = v34 - 3;
        if (__OFADD__(v34 - 4, 1)) {
          break;
        }
        uint64_t v13 = v10[v34];
        if ((unint64_t)v13 >> 62)
        {
          sub_1000898CC();
          _CocoaArrayWrapper.endIndex.getter();
          sub_10008986C();
        }
        else
        {
          uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (!v14) {
            goto LABEL_69;
          }
        }
        ++v34;
        if (v35 == v11) {
          goto LABEL_5;
        }
      }
LABEL_64:
      __break(1u);
LABEL_65:
      if (v13 < 0) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = v13 & 0xFFFFFFFFFFFFFF8;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      sub_10008986C();
      if (!v14) {
        goto LABEL_69;
      }
    }
LABEL_5:
    swift_bridgeObjectRelease();
    uint64_t v15 = v10[2];
    unint64_t v16 = _swiftEmptyArrayStorage;
    if (v15)
    {
      uint64_t v53 = (uint64_t)_swiftEmptyArrayStorage;
      sub_100057CEC();
      unint64_t v16 = (void *)v53;
      do
      {
        uint64_t v13 = *(void *)v12;
        if (*(void *)v12 >> 62)
        {
          sub_1000898CC();
          _CocoaArrayWrapper.endIndex.getter();
          sub_10008986C();
        }
        else
        {
          uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        uint64_t v17 = v14 - 1;
        if (__OFSUB__(v14, 1)) {
          goto LABEL_62;
        }
        uint64_t v53 = (uint64_t)v16;
        unint64_t v11 = v16[2];
        uint64_t v14 = v11 + 1;
        if (v11 >= v16[3] >> 1)
        {
          sub_100057CEC();
          unint64_t v16 = (void *)v53;
        }
        v16[2] = v14;
        v16[v11 + 4] = v17;
        v12 += 8;
      }
      while (--v15);
    }
LABEL_16:
    swift_bridgeObjectRetain();
    sub_10001F1C0();
    unint64_t v11 = v18;
    uint64_t v12 = *(void *)(v18 + 16);
    uint64_t v13 = v12 + 1;
    if ((unint64_t)v12 >= *(void *)(v18 + 24) >> 1) {
      goto LABEL_76;
    }
    while (1)
    {
      *(void *)(v11 + 16) = v13;
      *(void *)(v11 + 8 * v12 + 32) = v16;
      if ((unint64_t)v12 > 1) {
        goto LABEL_31;
      }
      uint64_t v19 = v16[2];
      if (!v19) {
        goto LABEL_31;
      }
      uint64_t v12 = v19 - 1;
      if ((uint64_t)v16[v19 + 3] <= 0)
      {
        if (v19 != 1)
        {
          uint64_t v24 = v19 + 2;
          do
          {
            uint64_t v12 = v24 - 4;
            if (v24 - 4 >= v19) {
              goto LABEL_63;
            }
            if ((uint64_t)v16[v24] > 0) {
              goto LABEL_20;
            }
          }
          while (--v24 != 3);
        }
LABEL_31:
        uint64_t v53 = (uint64_t)_swiftEmptyArrayStorage;
        uint64_t v46 = *(void *)(v11 + 16);
        if (!v46)
        {
          swift_bridgeObjectRelease();
LABEL_50:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return (void *)v53;
        }
        v43[0] = v11;
        v43[1] = v16;
        unint64_t v45 = v11 + 32;
        uint64_t v12 = (uint64_t)(v10 + 4);
        swift_bridgeObjectRetain();
        uint64_t v26 = 0;
        uint64_t v44 = a4;
        while (1)
        {
          uint64_t v51 = v43;
          uint64_t v27 = *(void *)(v45 + 8 * v26);
          uint64_t v52 = _swiftEmptyArrayStorage;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v13 = (uint64_t)&v52;
          specialized ContiguousArray.reserveCapacity(_:)();
          unint64_t v11 = v10[2];
          a4 = v10;
          swift_bridgeObjectRetain();
          if (v11) {
            break;
          }
LABEL_43:
          id v10 = a4;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          id v31 = sub_100087A74(v47, v48, v49, v44);
          swift_release();
          if (v31)
          {
            id v32 = v31;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          if (++v26 == v46)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_50;
          }
        }
        unint64_t v28 = 0;
        id v10 = (void *)(v27 + 32);
        while (v28 < *(void *)(v27 + 16))
        {
          uint64_t v13 = *(void *)(v12 + 8 * v28);
          unint64_t v29 = v10[v28];
          if ((v13 & 0xC000000000000001) != 0)
          {
            swift_bridgeObjectRetain();
            specialized _ArrayBuffer._getElementSlowPath(_:)();
            sub_10008986C();
          }
          else
          {
            if ((v29 & 0x8000000000000000) != 0) {
              goto LABEL_60;
            }
            if (v29 >= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_61;
            }
            id v30 = *(id *)(v13 + 8 * v29 + 32);
          }
          ++v28;
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          uint64_t v13 = (uint64_t)&v52;
          specialized ContiguousArray._endMutation()();
          if (v11 == v28) {
            goto LABEL_43;
          }
        }
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
        goto LABEL_64;
      }
LABEL_20:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000E70C0();
        unint64_t v16 = v25;
      }
      if (v12 >= v16[2]) {
        break;
      }
      uint64_t v20 = v16[v12 + 4];
      BOOL v21 = __OFSUB__(v20, 1);
      uint64_t v22 = v20 - 1;
      if (v21) {
        goto LABEL_75;
      }
      v16[v12 + 4] = v22;
      uint64_t v12 = *(void *)(v11 + 16);
      unint64_t v23 = *(void *)(v11 + 24);
      uint64_t v13 = v12 + 1;
      swift_bridgeObjectRetain();
      if (v12 >= v23 >> 1)
      {
LABEL_76:
        sub_10001F1C0();
        unint64_t v11 = v42;
      }
    }
    __break(1u);
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
LABEL_69:
  swift_bridgeObjectRelease_n();
  sub_10000D9D4(0, &qword_10017D0A0);
  id v36 = [self openEntitySystemProtocol];
  char v37 = static NSObject.== infix(_:_:)();

  uint64_t v33 = _swiftEmptyArrayStorage;
  if (v37)
  {
    id v38 = sub_100087A74(v47, v48, v49, a4);
    if (v38)
    {
      id v39 = v38;
      sub_10000BF1C(&qword_10017D0D0);
      uint64_t v40 = swift_allocObject();
      *(_OWORD *)(v40 + 16) = xmmword_10013EF30;
      *(void *)(v40 + 32) = v39;
      uint64_t v53 = v40;
      specialized Array._endMutation()();
      return (void *)v53;
    }
  }
  return v33;
}

id sub_100087A74(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  objc_allocWithZone((Class)LNAction);
  id v6 = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v7 = sub_1000A85C0(v6);
  unint64_t v8 = sub_10008801C(v6, a4, v7);
  objc_allocWithZone((Class)LNSuggestedAction);
  return sub_100088BB4(v7, a4, (uint64_t)v8);
}

void *sub_100087D04(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10004FB6C(a1);
  if (!v5) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v6 = v4;
  uint64_t v7 = v5;
  uint64_t v8 = sub_1000872C4();
  if (v9)
  {
    uint64_t v10 = v8;
    uint64_t v11 = v9;
    uint64_t v12 = v2[7];
    swift_bridgeObjectRetain();
    unint64_t v13 = sub_10001B584(v10, v11, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v13)
    {
      swift_bridgeObjectRetain();
      uint64_t v14 = sub_100089850(v13);
      swift_bridgeObjectRelease();
LABEL_11:
      swift_bridgeObjectRelease();
      return v14;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  id v15 = [a1 valueType];
  self;
  unint64_t v16 = (void *)swift_dynamicCastObjCClass();
  if (v16)
  {
    id v17 = [v16 enumerationIdentifier];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;

    uint64_t v21 = sub_10000BEA0(v2 + 2, v2[5])[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v22 = (void *)sub_10001B74C(v18, v20, v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v22)
    {
      swift_bridgeObjectRelease();
      unint64_t v23 = sub_100087F80();
      swift_bridgeObjectRetain();
      uint64_t v14 = sub_100089850((unint64_t)v23);
      swift_bridgeObjectRelease();

      goto LABEL_11;
    }
    uint64_t v26 = v2[7];
    swift_bridgeObjectRetain();
    sub_10001B584(v18, v20, v26);
    sub_10008986C();
    swift_bridgeObjectRelease();
    if (v2)
    {
      swift_bridgeObjectRetain();
      uint64_t v14 = sub_100089850((unint64_t)v2);
      swift_bridgeObjectRelease();

      goto LABEL_11;
    }

    goto LABEL_13;
  }

  sub_10000BF1C(&qword_10017D0D0);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_10013EF30;
  id v25 = objc_allocWithZone((Class)LNProperty);
  *(void *)(v24 + 32) = sub_1000FC04C(v6, v7, 0);
  specialized Array._endMutation()();
  return (void *)v24;
}

void *sub_100087F80()
{
  id v1 = [v0 cases];
  sub_10000D9D4(0, &qword_10017E130);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v3 = sub_100085F1C(v2, v0);
  swift_bridgeObjectRelease();
  return v3;
}

void *sub_10008801C(void *a1, void *a2, void *a3)
{
  id v6 = [a1 descriptionMetadata];
  id v115 = a2;
  if (v6)
  {
    uint64_t v7 = v6;
    id v8 = [v6 descriptionText];

    uint64_t v9 = &_swiftEmptyDictionarySingleton;
    if (v8)
    {
      uint64_t v10 = (void *)LNSuggestedActionDialogParameterKeyDescription;
      uint64_t v11 = a3;
      if (sub_10000BEA0((void *)(v119 + 16), *(void *)(v119 + 40))[1])
      {
        id v12 = v10;
        swift_bridgeObjectRetain();
        NSString v13 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      else
      {
        id v14 = v10;
        NSString v13 = 0;
      }
      id v15 = [v8 localizedStringForLocaleIdentifier:v13];

      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v18 = v17;

      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v117 = &_swiftEmptyDictionarySingleton;
      sub_10000C998(v16, v18, v10, isUniquelyReferenced_nonNull_native);

      swift_bridgeObjectRelease();
      a3 = v11;
      uint64_t v9 = &_swiftEmptyDictionarySingleton;
    }
  }
  else
  {
    uint64_t v9 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v20 = LNActionMetadata._iconSystemImageNameForAppIntentsOnly.getter();
  if (v21)
  {
    uint64_t v22 = v20;
    uint64_t v23 = v21;
    id v24 = LNSuggestedActionDialogParameterKeyIconSystemImageName;
    swift_isUniquelyReferenced_nonNull_native();
    sub_100089884();
    sub_10000C998(v22, v23, v24, v25);
    uint64_t v9 = (void *)v117;

    swift_bridgeObjectRelease();
  }
  uint64_t v26 = sub_100089208(a1);
  uint64_t v27 = v119;
  if (v26)
  {
    uint64_t v28 = v26;
    id v29 = LNActionTypeSpecificMetadataKeyEntityType;
    sub_10001B7C0(v28, &v117);

    swift_bridgeObjectRelease();
    if (v118)
    {
      if (swift_dynamicCast())
      {
        swift_bridgeObjectRetain();
        uint64_t v30 = sub_10001B6D0(v116);
        uint64_t v32 = v31;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v32)
        {
          id v33 = LNSuggestedActionDialogParameterKeyEntityType;
          swift_isUniquelyReferenced_nonNull_native();
          sub_100089884();
          sub_10000C998(v30, v32, v33, v34);
          uint64_t v9 = (void *)v117;

          swift_bridgeObjectRelease();
        }
      }
    }
    else
    {
      sub_100014958((uint64_t)&v117);
    }
  }
  id v35 = [v115 identifier];
  uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v38 = v37;
  if (v36 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v38 == v39)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_41;
  }
  char v41 = sub_100089828();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v41)
  {
LABEL_41:

    uint64_t v58 = sub_10000BEA0((void *)(v27 + 16), *(void *)(v27 + 40));
    uint64_t v59 = sub_1000892B0(0x676E6974746573, 0xE700000000000000, *v58, v58[1], v58[2], v58[3], a3);
    if (v59)
    {
      uint64_t v60 = v59;
      uint64_t v61 = sub_10000BEA0((void *)(v27 + 16), *(void *)(v27 + 40));
      uint64_t v62 = sub_1000892B0(0x704F65676E616863, 0xEF6E6F6974617265, *v61, v61[1], v61[2], v61[3], a3);
      if (v62)
      {
        uint64_t v63 = v62;
        id v64 = LNSuggestedActionDialogParameterKeyEntityName;
        id v65 = [v60 displayRepresentation];
        id v66 = [v65 title];

        if (sub_10000BEA0((void *)(v27 + 16), *(void *)(v27 + 40))[1])
        {
          swift_bridgeObjectRetain();
          NSString v67 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        else
        {
          NSString v67 = 0;
        }
        id v80 = [v66 localizedStringForLocaleIdentifier:v67];

        uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v83 = v82;

        char v84 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&long long v117 = v9;
        sub_10000C998(v81, v83, v64, v84);
        uint64_t v85 = v117;

        swift_bridgeObjectRelease();
        id v86 = LNSuggestedActionDialogParameterKeyChangeOperation;
        id v87 = [v63 identifier];
        uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v90 = v89;

        char v91 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&long long v117 = v85;
        sub_10000C998(v88, v90, v86, v91);
        uint64_t v9 = (void *)v117;

LABEL_53:
        swift_bridgeObjectRelease();
        return v9;
      }
    }
    swift_bridgeObjectRelease();
    sub_1000895A4();
    swift_allocError();
    char v69 = 0;
    *(void *)uint64_t v68 = a3;
LABEL_47:
    *(unsigned char *)(v68 + 8) = v69;
    id v70 = a3;
    swift_willThrow();
    return v9;
  }
  uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v44 = v43;
  if (v42 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v44 == v45)
  {

    swift_bridgeObjectRelease_n();
    goto LABEL_49;
  }
  char v47 = sub_100089828();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v47)
  {
LABEL_49:
    uint64_t v71 = sub_10000BEA0((void *)(v27 + 16), *(void *)(v27 + 40));
    uint64_t v72 = sub_1000892B0(0x6F69746365726964, 0xE90000000000006ELL, *v71, v71[1], v71[2], v71[3], a3);
    if (v72)
    {
      id v73 = v72;
      id v74 = LNSuggestedActionDialogParameterKeyDirection;
      id v75 = [v73 identifier];
      uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v78 = v77;

      swift_isUniquelyReferenced_nonNull_native();
      sub_100089884();
      sub_10000C998(v76, v78, v74, v79);
      uint64_t v9 = (void *)v117;

      goto LABEL_53;
    }
    swift_bridgeObjectRelease();
    sub_1000895A4();
    swift_allocError();
    *(void *)uint64_t v68 = a3;
    char v69 = 1;
    goto LABEL_47;
  }
  id v48 = [a3 parameters];
  sub_10000D9D4(0, (unint64_t *)&unk_10017FAC0);
  unint64_t v49 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v49 >> 62) {
    goto LABEL_69;
  }
  uint64_t v50 = *(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v50; uint64_t v50 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v51 = 4;
    while (1)
    {
      id v52 = (v49 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(v49 + 8 * v51);
      uint64_t v53 = v52;
      uint64_t v54 = v51 - 3;
      if (__OFADD__(v51 - 4, 1)) {
        break;
      }
      id v55 = [v52 value];
      if (v55
        && (uint64_t v56 = v55, v57 = [v55 valueType], v56, v57))
      {
        self;
        if (swift_dynamicCastObjCClass())
        {
          swift_bridgeObjectRelease_n();

          id v93 = [v53 value];
          if (v93)
          {
            uint64_t v94 = v93;
            id v95 = [v93 valueType];
            self;
            uint64_t v96 = (void *)swift_dynamicCastObjCClass();
            if (!v96) {
              goto LABEL_60;
            }
            id v97 = [v96 identifier];
            uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)();

            swift_bridgeObjectRetain();
            sub_10001B6D0(v98);
            uint64_t v100 = v99;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v100)
            {
              id v101 = LNSuggestedActionDialogParameterKeyEntityType;
              swift_isUniquelyReferenced_nonNull_native();
              uint64_t v102 = sub_100089894();
              sub_10000C998(v102, v103, v101, v104);
              uint64_t v9 = (void *)v117;

              swift_bridgeObjectRelease();
            }
            else
            {
LABEL_60:
            }
            uint64_t v105 = v119;
            id v106 = [v94 displayRepresentation];
            if (v106)
            {
              uint64_t v107 = v106;
              id v108 = LNSuggestedActionDialogParameterKeyEntityName;
              id v109 = [v107 title];
              if (sub_10000BEA0((void *)(v105 + 16), *(void *)(v105 + 40))[1])
              {
                swift_bridgeObjectRetain();
                NSString v110 = String._bridgeToObjectiveC()();
                swift_bridgeObjectRelease();
              }
              else
              {
                NSString v110 = 0;
              }
              id v111 = [v109 localizedStringForLocaleIdentifier:v110];

              static String._unconditionallyBridgeFromObjectiveC(_:)();
              swift_isUniquelyReferenced_nonNull_native();
              uint64_t v112 = sub_100089894();
              sub_10000C998(v112, v113, v108, v114);
              uint64_t v9 = (void *)v117;

              goto LABEL_53;
            }
          }
          return v9;
        }
      }
      else
      {
        id v57 = v53;
      }

      ++v51;
      if (v54 == v50) {
        goto LABEL_39;
      }
    }
    __break(1u);
LABEL_69:
    sub_1000898AC();
  }
LABEL_39:
  swift_bridgeObjectRelease_n();
  return v9;
}

uint64_t sub_100088A3C()
{
  sub_10000E788(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100088A6C()
{
  sub_100088A3C();

  return _swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for SuggestedActionsGenerator()
{
  return self;
}

id sub_100088AC4()
{
  sub_10000D9D4(0, &qword_10017EF40);
  id v1 = [v0 identifier];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  return sub_100088B40();
}

id sub_100088B40()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithEnumerationIdentifier:v1];

  return v2;
}

id sub_100088BB4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (a3)
  {
    type metadata accessor for LNSuggestedActionDialogParameterKey(0);
    sub_100089638(&qword_10017CB78, type metadata accessor for LNSuggestedActionDialogParameterKey);
    v7.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v7.super.Class isa = 0;
  }
  id v8 = [v4 initWithAction:a1 systemProtocol:a2 dialogParameters:v7.super.isa];

  return v8;
}

uint64_t sub_100088C90(uint64_t a1, char a2, void *a3, void (*a4)(void), uint64_t *a5)
{
  char v47 = a4;
  id v48 = a3;
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v44 = a5;
  uint64_t v45 = v5;
  uint64_t v46 = swift_bridgeObjectRetain();
  for (unint64_t i = (void **)(v46 + 48); ; i += 3)
  {
    uint64_t v10 = (uint64_t)*(i - 2);
    uint64_t v9 = (uint64_t)*(i - 1);
    uint64_t v11 = *i;
    id v12 = (void *)*v48;
    swift_bridgeObjectRetain();
    id v13 = v11;
    unint64_t v21 = sub_100021098(v10, v9, v14, v15, v16, v17, v18, v19, v41, v42, v43, (uint64_t)v44, v45, v46, (uint64_t)v47, (uint64_t)v48, v49, v50, v10,
            v9,
            v53,
            v54,
            v55,
            v56,
            v57,
            v58);
    uint64_t v22 = v12[2];
    BOOL v23 = (v20 & 1) == 0;
    if (__OFADD__(v22, v23))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_20;
    }
    char v24 = v20;
    if (v12[3] < v22 + v23) {
      break;
    }
    if (a2)
    {
      if (v20) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_10000BF1C(v44);
      _NativeDictionary.copy()();
      if (v24) {
        goto LABEL_14;
      }
    }
LABEL_10:
    id v33 = (void *)*v48;
    *(void *)(*v48 + 8 * (v21 >> 6) + 64) |= 1 << v21;
    char v34 = (uint64_t *)(v33[6] + 16 * v21);
    *char v34 = v10;
    v34[1] = v9;
    *(void *)(v33[7] + 8 * v21) = v13;
    uint64_t v35 = v33[2];
    BOOL v36 = __OFADD__(v35, 1);
    uint64_t v37 = v35 + 1;
    if (v36) {
      goto LABEL_18;
    }
    uint64_t v33[2] = v37;
    a2 = 1;
    if (!--v6) {
      return swift_bridgeObjectRelease_n();
    }
  }
  v47();
  uint64_t v31 = sub_100021098(v10, v9, v25, v26, v27, v28, v29, v30, v41, v42, v43, (uint64_t)v44, v45, v46, (uint64_t)v47, (uint64_t)v48, v49, v50, v51,
          v52,
          v53,
          v54,
          v55,
          v56,
          v57,
          v58);
  if ((v24 & 1) != (v32 & 1)) {
    goto LABEL_19;
  }
  unint64_t v21 = v31;
  if ((v24 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_14:
  swift_allocError();
  swift_willThrow();
  swift_errorRetain();
  sub_10000BF1C(&qword_10017C810);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease_n();
    return swift_errorRelease();
  }
LABEL_20:
  _StringGuts.grow(_:)(30);
  v39._object = (void *)0x80000001001449C0;
  v39._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v39);
  _print_unlocked<A, B>(_:_:)();
  v40._uint64_t countAndFlagsBits = 39;
  v40._object = (void *)0xE100000000000000;
  String.append(_:)(v40);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_100088F64(uint64_t a1, uint64_t a2)
{
  sub_10000BF1C(&qword_10017EF48);
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = (void *)v4;
  int64_t v6 = 0;
  uint64_t v39 = a1;
  uint64_t v40 = a2;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v8 = a1 + 64;
  uint64_t v7 = v9;
  uint64_t v10 = 1 << *(unsigned char *)(v8 - 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & v7;
  uint64_t v35 = v8;
  int64_t v36 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v37 = v4 + 64;
  uint64_t v38 = (void *)(a2 + 16);
  if ((v11 & v7) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v13 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  int64_t v41 = v6;
  for (unint64_t i = v13 | (v6 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v17 << 6))
  {
    uint64_t v19 = (uint64_t *)(*(void *)(v39 + 48) + 16 * i);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    uint64_t v22 = *(void **)(*(void *)(v39 + 56) + 8 * i);
    if (sub_10000BEA0(v38, *(void *)(v40 + 40))[1])
    {
      swift_bridgeObjectRetain();
      id v23 = v22;
      swift_bridgeObjectRetain();
      NSString v24 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      id v25 = v22;
      NSString v24 = 0;
    }
    id v26 = [v22 localizedStringForLocaleIdentifier:v24];

    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v29 = v28;

    *(void *)(v37 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t v30 = (void *)(v5[6] + 16 * i);
    *uint64_t v30 = v20;
    v30[1] = v21;
    uint64_t v31 = (uint64_t *)(v5[7] + 16 * i);
    uint64_t *v31 = v27;
    v31[1] = v29;
    uint64_t v32 = v5[2];
    BOOL v33 = __OFADD__(v32, 1);
    uint64_t v34 = v32 + 1;
    if (v33)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v5[2] = v34;
    int64_t v6 = v41;
    if (v12) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v15 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      goto LABEL_27;
    }
    if (v15 >= v36) {
      goto LABEL_25;
    }
    unint64_t v16 = *(void *)(v35 + 8 * v15);
    int64_t v17 = v6 + 1;
    if (!v16)
    {
      int64_t v17 = v6 + 2;
      if (v6 + 2 >= v36) {
        goto LABEL_25;
      }
      unint64_t v16 = *(void *)(v35 + 8 * v17);
      if (!v16)
      {
        int64_t v17 = v6 + 3;
        if (v6 + 3 >= v36) {
          goto LABEL_25;
        }
        unint64_t v16 = *(void *)(v35 + 8 * v17);
        if (!v16) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v12 = (v16 - 1) & v16;
    int64_t v41 = v17;
  }
  uint64_t v18 = v6 + 4;
  if (v6 + 4 >= v36)
  {
LABEL_25:
    swift_release();
    return;
  }
  unint64_t v16 = *(void *)(v35 + 8 * v18);
  if (v16)
  {
    int64_t v17 = v6 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v17 >= v36) {
      goto LABEL_25;
    }
    unint64_t v16 = *(void *)(v35 + 8 * v17);
    ++v18;
    if (v16) {
      goto LABEL_18;
    }
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_100089208(void *a1)
{
  id v1 = [a1 typeSpecificMetadata];
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  type metadata accessor for LNActionTypeSpecificMetadataKey(0);
  sub_100089638(&qword_10017CB68, type metadata accessor for LNActionTypeSpecificMetadataKey);
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void *sub_1000892B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v37 = &type metadata for SiriDiscoverabilityClosedAppSuggestionStrategy;
  uint64_t v38 = &off_100170E88;
  uint64_t v14 = (void *)swift_allocObject();
  v36[0] = v14;
  v14[2] = a3;
  uint64_t v14[3] = a4;
  v14[4] = a5;
  void v14[5] = a6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v15 = [a7 parameters];
  sub_10000D9D4(0, (unint64_t *)&unk_10017FAC0);
  unint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRetain();
  int64_t v17 = sub_100086420(v16, a1, a2);
  swift_bridgeObjectRelease();
  if (!v17) {
    goto LABEL_10;
  }
  id v18 = [v17 value];
  if (!v18) {
    goto LABEL_8;
  }
  uint64_t v19 = v18;
  id v20 = [v18 value];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  if ((swift_dynamicCast() & 1) == 0)
  {

LABEL_8:
LABEL_10:
    uint64_t v32 = 0;
    goto LABEL_11;
  }
  id v21 = [v19 valueType];
  self;
  uint64_t v22 = swift_dynamicCastObjCClass();
  if (!v22) {
    goto LABEL_9;
  }
  id v23 = (void *)v22;
  uint64_t v24 = sub_10000BEA0(v36, (uint64_t)v37)[2];
  swift_bridgeObjectRetain();
  id v25 = [v23 enumerationIdentifier];
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v28 = v27;

  uint64_t v29 = (void *)sub_10001B74C(v26, v28, v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v29)
  {
LABEL_9:

    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  id v30 = [v29 cases];
  sub_10000D9D4(0, &qword_10017E130);
  unint64_t v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRetain();
  uint64_t v32 = sub_100086420(v31, v34, v35);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
LABEL_11:
  sub_10000E788((uint64_t)v36);
  return v32;
}

unint64_t sub_1000895A4()
{
  unint64_t result = qword_10017EF38;
  if (!qword_10017EF38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017EF38);
  }
  return result;
}

uint64_t sub_1000895F0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100089638(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100089680(void *a1, void *a2)
{
  return sub_100086FBC(a1, a2, v2);
}

uint64_t initializeBufferWithCopyOfBuffer for SuggestedActionsGeneratorDialogingError(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  id v5 = *(id *)a2;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

void destroy for SuggestedActionsGeneratorDialogingError(id *a1)
{
}

uint64_t assignWithCopy for SuggestedActionsGeneratorDialogingError(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  id v5 = *(id *)a2;
  int64_t v6 = *(void **)a1;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;

  return a1;
}

uint64_t assignWithTake for SuggestedActionsGeneratorDialogingError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  char v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;

  return a1;
}

uint64_t getEnumTagSinglePayload for SuggestedActionsGeneratorDialogingError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 9))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 1) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SuggestedActionsGeneratorDialogingError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100089800(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_100089808(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SuggestedActionsGeneratorDialogingError()
{
  return &type metadata for SuggestedActionsGeneratorDialogingError;
}

uint64_t sub_100089828()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

void *sub_100089850(unint64_t a1)
{
  return sub_1000860D8(a1, v2, v1);
}

uint64_t sub_10008986C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100089894()
{
  return v0;
}

uint64_t sub_1000898AC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000898CC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000898EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (qword_10017C3C8 != -1) {
    swift_once();
  }
  memcpy(__dst, &unk_10017EF58, sizeof(__dst));
  sub_10002A390(__dst);
  if (qword_10017C3D0 != -1) {
    swift_once();
  }
  sub_10002A9C0((uint64_t)&qword_10017F000);
  __src[0] = a3;
  __src[1] = a4;
  uint64_t v10 = == infix<A>(_:_:)();
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  if (qword_10017C3D8 != -1) {
    swift_once();
  }
  sub_10002A9C0((uint64_t)&qword_10017F018);
  __src[0] = a1;
  __src[1] = a2;
  uint64_t v15 = == infix<A>(_:_:)();
  uint64_t v18 = && infix(_:_:)(v10, v12, v14, v15, v16, v17);
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  memcpy(v39, __dst, sizeof(v39));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.filter(_:)(v18, v20, v22, (uint64_t)__src);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  sub_10002A500(__dst);
  memcpy(v44, __src, sizeof(v44));
  __src[3] = &type metadata for Table;
  __src[4] = &protocol witness table for Table;
  __src[0] = swift_allocObject();
  memcpy((void *)(__src[0] + 16), v44, 0xA8uLL);
  uint64_t v23 = Connection.pluck(_:)(__src);
  uint64_t result = sub_10000E788((uint64_t)__src);
  if (!v37)
  {
    if (v23)
    {
      sub_10008A9C8((uint64_t *)v41);
      long long v36 = v41[1];
      long long v38 = v41[0];
      long long v34 = v41[3];
      long long v35 = v41[2];
      long long v32 = v41[5];
      long long v33 = v41[4];
      uint64_t v25 = v42;
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      long long v27 = v32;
      long long v26 = v33;
      long long v29 = v34;
      long long v28 = v35;
      long long v31 = v36;
      long long v30 = v38;
    }
    else
    {
      uint64_t v25 = 0;
      long long v30 = 0uLL;
      long long v31 = 0uLL;
      long long v28 = 0uLL;
      long long v29 = 0uLL;
      long long v26 = 0uLL;
      long long v27 = 0uLL;
    }
    *(_OWORD *)a5 = v30;
    *(_OWORD *)(a5 + 16) = v31;
    *(_OWORD *)(a5 + 32) = v28;
    *(_OWORD *)(a5 + 48) = v29;
    *(_OWORD *)(a5 + 64) = v26;
    *(_OWORD *)(a5 + 80) = v27;
    *(void *)(a5 + 96) = v25;
  }
  return result;
}

uint64_t sub_100089C1C(uint64_t a1, uint64_t a2)
{
  if (qword_10017C3C8 != -1) {
    swift_once();
  }
  memcpy(__dst, &unk_10017EF58, 0xA8uLL);
  if (a2)
  {
    sub_10002A390(__dst);
    if (qword_10017C3D8 != -1) {
      swift_once();
    }
    sub_10002A9C0((uint64_t)&qword_10017F018);
    v15[0] = a1;
    v15[1] = a2;
    uint64_t v6 = == infix<A>(_:_:)();
    uint64_t v3 = v7;
    uint64_t v9 = v8;
    memcpy(v14, __dst, sizeof(v14));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    QueryType.filter(_:)(v6, v3, v9, (uint64_t)v15);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    sub_10002A500(__dst);
    uint64_t v10 = v15;
  }
  else
  {
    sub_10002A390(__dst);
    uint64_t v10 = __dst;
  }
  memcpy(v16, v10, sizeof(v16));
  void v15[3] = &type metadata for Table;
  v15[4] = &protocol witness table for Table;
  v15[0] = swift_allocObject();
  memcpy((void *)(v15[0] + 16), v16, 0xA8uLL);
  Connection.prepareRowIterator(_:)(v15);
  uint64_t v11 = sub_10000E788((uint64_t)v15);
  if (!v2)
  {
    __chkstk_darwin(v11);
    swift_retain();
    RowIterator.compactMap<A>(_:)();
    uint64_t v3 = v13;
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  return v3;
}

uint64_t sub_100089EE0(uint64_t a1, uint64_t a2)
{
  if (qword_10017C3C8 != -1) {
    swift_once();
  }
  memcpy(__dst, &unk_10017EF58, 0xA8uLL);
  memcpy(v114, &unk_10017EF58, sizeof(v114));
  sub_10002A390(__dst);
  if (qword_10017C3D0 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_10002A9C0((uint64_t)&qword_10017F000);
  *(_OWORD *)uint64_t v83 = *(_OWORD *)a1;
  <- infix<A>(_:_:)(v5, v6, v7, (uint64_t)v83, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  sub_10000BF1C(&qword_10017E940);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_100140380;
  if (qword_10017C3D8 != -1) {
    swift_once();
  }
  uint64_t v78 = a2;
  uint64_t v9 = sub_10002A9C0((uint64_t)&qword_10017F018);
  *(_OWORD *)uint64_t v83 = *(_OWORD *)(a1 + 16);
  uint64_t v80 = v8 + 32;
  <- infix<A>(_:_:)(v9, v10, v11, (uint64_t)v83, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  if (qword_10017C3E0 != -1) {
    swift_once();
  }
  uint64_t v12 = qword_10017F030;
  uint64_t v13 = *(void *)algn_10017F038;
  uint64_t v14 = qword_10017F040;
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  uint64_t v15 = LNStaticDeferredLocalizedString.asLocalizedStringResourceJSON(encoder:)();
  if (v2)
  {
    swift_release();
    int v17 = sub_10002A66C((uint64_t)&v104);
    sub_10008B3E8(v17, v18, v19, v20, v21, v22, v23, v24, v72, v75, a2, v80, v82._countAndFlagsBits, (uint64_t)v82._object, v83[0], *(uint64_t *)&v83[8], v84, v85, v86,
      v87,
      v88,
      v89,
      v90,
      v91,
      v92,
      v93,
      v94,
      v95,
      v96,
      v97,
      v98,
      v99,
      v100,
      v101,
      v102,
      v103,
      v104,
      v105,
      v106,
      v107,
      v108,
      v109,
      v110,
      v111,
      v112,
      v113,
      v114[0]);
    sub_10002A500(v83);
LABEL_21:
    sub_10002A66C(v81);
    *(void *)(v8 + 16) = 0;
    swift_setDeallocating();
    return sub_10006F150();
  }
  uint64_t v25 = v15;
  uint64_t v26 = v16;
  swift_release();
  *(void *)uint64_t v83 = v25;
  *(void *)&v83[8] = v26;
  uint64_t v73 = v8 + 112;
  <- infix<A>(_:_:)(v12, v13, v14, (uint64_t)v83, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  swift_bridgeObjectRelease();
  if (qword_10017C3E8 != -1) {
    swift_once();
  }
  uint64_t v27 = sub_10002A9C0((uint64_t)&qword_10017F048);
  *(_OWORD *)uint64_t v83 = *(_OWORD *)(a1 + 40);
  uint64_t v76 = v8 + 192;
  <- infix<A>(_:_:)(v27, v28, v29, (uint64_t)v83, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  if (qword_10017C3F0 != -1) {
    swift_once();
  }
  uint64_t v30 = sub_10002A9C0((uint64_t)&qword_10017F060);
  *(_OWORD *)uint64_t v83 = *(_OWORD *)(a1 + 56);
  <- infix<A>(_:_:)(v30, v31, v32, (uint64_t)v83, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  if (qword_10017C3F8 != -1) {
    swift_once();
  }
  uint64_t v33 = sub_10002A9C0((uint64_t)&qword_10017F078);
  *(_OWORD *)uint64_t v83 = *(_OWORD *)(a1 + 72);
  <- infix<A>(_:_:)(v33, v34, v35, (uint64_t)v83, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  if (qword_10017C400 != -1) {
    swift_once();
  }
  uint64_t v36 = qword_10017F090;
  uint64_t v37 = *(void *)algn_10017F098;
  uint64_t v38 = qword_10017F0A0;
  Swift::String v39 = LNValue.asJson()();
  if (v40)
  {
    int v41 = sub_10002A66C((uint64_t)&v104);
    sub_10008B3E8(v41, v42, v43, v44, v45, v46, v47, v48, v73, v76, v78, v80, v82._countAndFlagsBits, (uint64_t)v82._object, v83[0], *(uint64_t *)&v83[8], v84, v85, v86,
      v87,
      v88,
      v89,
      v90,
      v91,
      v92,
      v93,
      v94,
      v95,
      v96,
      v97,
      v98,
      v99,
      v100,
      v101,
      v102,
      v103,
      v104,
      v105,
      v106,
      v107,
      v108,
      v109,
      v110,
      v111,
      v112,
      v113,
      v114[0]);
    sub_10002A500(v83);
    sub_10002A66C(v8 + 352);
    sub_10002A66C(v8 + 272);
    sub_10002A66C(v77);
    sub_10002A66C(v74);
    goto LABEL_21;
  }
  Swift::String v82 = v39;
  <- infix<A>(_:_:)(v36, v37, v38, (uint64_t)&v82, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  swift_bridgeObjectRelease();
  uint64_t v50 = QueryType.insert(_:_:)((uint64_t)&v104);
  uint64_t v52 = v51;
  uint64_t v54 = v53;
  swift_setDeallocating();
  sub_10006F150();
  int v55 = sub_10002A66C((uint64_t)&v104);
  sub_10008B3E8(v55, v56, v57, v58, v59, v60, v61, v62, v73, v76, v78, v80, v82._countAndFlagsBits, (uint64_t)v82._object, v83[0], *(uint64_t *)&v83[8], v84, v85, v86,
    v87,
    v88,
    v89,
    v90,
    v91,
    v92,
    v93,
    v94,
    v95,
    v96,
    v97,
    v98,
    v99,
    v100,
    v101,
    v102,
    v103,
    v104,
    v105,
    v106,
    v107,
    v108,
    v109,
    v110,
    v111,
    v112,
    v113,
    v114[0]);
  sub_10002A500(v83);
  v121.template._uint64_t countAndFlagsBits = v50;
  v121.template._object = v52;
  v121.bindings._rawValue = v54;
  Connection.run(_:)(v121);
  if (v63)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v64 = *(void *)(a1 + 96);
    uint64_t v120 = v64;
    uint64_t v65 = *(void *)(v64 + 16);
    if (v65)
    {
      swift_retain();
      sub_100059D90((uint64_t)&v120);
      id v66 = (void **)(v64 + 64);
      do
      {
        uint64_t v67 = (uint64_t)*(v66 - 3);
        uint64_t v68 = (uint64_t)*(v66 - 2);
        uint64_t v69 = (uint64_t)*(v66 - 1);
        id v70 = *v66;
        *(void *)&long long v115 = *(v66 - 4);
        *((void *)&v115 + 1) = v67;
        uint64_t v116 = v68;
        uint64_t v117 = v69;
        uint64_t v118 = v70;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v71 = v70;
        sub_10005A5C8(&v115, v79);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v66 += 5;
        --v65;
      }
      while (v65);
      sub_10000D818((uint64_t)&v120);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_10008A4C8()
{
  uint64_t v1 = v0;
  swift_bridgeObjectRetain();
  sub_10008B3CC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_10008B3CC();
  swift_bridgeObjectRelease();
  id v2 = *(id *)(v0 + 32);
  NSObject.hash(into:)();

  swift_bridgeObjectRetain();
  sub_10008B3CC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_10008B3CC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_10008B3CC();
  swift_bridgeObjectRelease();
  id v3 = *(id *)(v1 + 88);
  NSObject.hash(into:)();

  swift_bridgeObjectRetain();
  sub_100027188();

  return swift_bridgeObjectRelease();
}

void sub_10008A5CC(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    BOOL v5 = a1[2] == a2[2] && a1[3] == a2[3];
    if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      sub_10000D9D4(0, (unint64_t *)&qword_10017DD30);
      if (static NSObject.== infix(_:_:)())
      {
        BOOL v6 = a1[5] == a2[5] && a1[6] == a2[6];
        if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          BOOL v7 = a1[7] == a2[7] && a1[8] == a2[8];
          if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            BOOL v8 = a1[9] == a2[9] && a1[10] == a2[10];
            if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)())
              && (static NSObject.== infix(_:_:)() & 1) != 0)
            {
              sub_10001DF0C();
            }
          }
        }
      }
    }
  }
}

Swift::Int sub_10008A704()
{
  return Hasher._finalize()();
}

Swift::Int sub_10008A74C()
{
  return Hasher._finalize()();
}

void *sub_10008A78C()
{
  Table.init(_:database:)(__src, 0xD000000000000010, 0x8000000100143FA0, 0, 0);
  return memcpy(&unk_10017EF58, __src, 0xA8uLL);
}

uint64_t sub_10008A7E4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0[12])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v0[14])
  {
    swift_bridgeObjectRelease();
    if (v0[16])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 184, 7);
}

uint64_t sub_10008A880(uint64_t a1)
{
  return sub_100035F34(a1, (uint64_t)&qword_10017F000, 0x6E6564496E617073, 0xEE00726569666974);
}

uint64_t sub_10008A8AC(uint64_t a1)
{
  return sub_100035F34(a1, (uint64_t)&qword_10017F018, 0xD000000000000010, 0x8000000100143090);
}

uint64_t sub_10008A8D0(uint64_t a1)
{
  return sub_100035F34(a1, (uint64_t)&qword_10017F030, 0x79747265706F7270, 0xED0000656C746954);
}

uint64_t sub_10008A8FC(uint64_t a1)
{
  return sub_100035F34(a1, (uint64_t)&qword_10017F048, 0xD000000000000010, 0x8000000100143A80);
}

uint64_t sub_10008A920(uint64_t a1)
{
  return sub_100035F34(a1, (uint64_t)&qword_10017F060, 0xD000000000000011, 0x8000000100144A00);
}

uint64_t sub_10008A944(uint64_t a1)
{
  return sub_100035F34(a1, (uint64_t)&qword_10017F078, 0xD000000000000017, 0x80000001001449E0);
}

uint64_t sub_10008A968(uint64_t a1)
{
  return sub_100035F34(a1, (uint64_t)&qword_10017F090, 0x65756C6176, 0xE500000000000000);
}

uint64_t sub_10008A984@<X0>(uint64_t a1@<X8>)
{
  sub_10008A9C8(v3);
  return sub_10008AF98((uint64_t)v3, a1);
}

uint64_t sub_10008A9C0@<X0>(uint64_t a1@<X8>)
{
  return sub_10008A984(a1);
}

uint64_t sub_10008A9C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v2 - 8);
  BOOL v4 = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10017C3D8 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  uint64_t v31 = v33;
  uint64_t v32 = v34;
  if (qword_10017C3D0 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  uint64_t v6 = v33;
  uint64_t v5 = v34;
  swift_retain();
  BOOL v7 = sub_10005A8F4(v31, v32, v6, v5);
  uint64_t v28 = v6;
  uint64_t v29 = v7;
  uint64_t v30 = v5;
  swift_release();
  if (qword_10017C3E0 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  uint64_t v8 = v33;
  uint64_t v9 = v34;
  if (qword_10017C3E8 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  uint64_t v10 = v33;
  uint64_t v11 = v34;
  if (qword_10017C3F0 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  uint64_t v27 = v8;
  uint64_t v13 = v33;
  uint64_t v12 = v34;
  if (qword_10017C3F8 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  uint64_t v25 = v4;
  uint64_t v26 = v9;
  uint64_t v15 = v33;
  uint64_t v14 = v34;
  if (qword_10017C400 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  v24[1] = v33;
  void v24[2] = v34;
  sub_10000D9D4(0, (unint64_t *)&qword_10017EDC0);
  uint64_t v16 = LNStaticDeferredLocalizedString.init(localizedStringResourceJSON:)();
  uint64_t v27 = sub_10000D9D4(0, &qword_10017D0E8);
  uint64_t v17 = type metadata accessor for URL();
  sub_10000D5B0((uint64_t)v25, 1, 1, v17);
  uint64_t v18 = static LNValue.fromJSON(_:bundleURL:effectiveBundleIdentifier:)();
  sub_100035FE8((uint64_t)v25);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v21 = v31;
  uint64_t v20 = v32;
  int v23 = v29;
  uint64_t v22 = v30;
  *a1 = v28;
  a1[1] = v22;
  a1[2] = v21;
  a1[3] = v20;
  a1[4] = v16;
  a1[5] = v10;
  a1[6] = v11;
  a1[7] = v13;
  a1[8] = v12;
  a1[9] = v15;
  a1[10] = v14;
  a1[11] = v18;
  a1[12] = (uint64_t)v23;
  return result;
}

void *sub_10008AF2C@<X0>(void *(*a1)(void *__return_ptr)@<X2>, uint64_t a2@<X8>)
{
  uint64_t result = a1(v5);
  if (!v2) {
    return (void *)sub_10008AF98((uint64_t)v5, a2);
  }
  return result;
}

void *sub_10008AF7C@<X0>(uint64_t a1@<X8>)
{
  return sub_10008AF2C(*(void *(**)(void *__return_ptr))(v1 + 16), a1);
}

uint64_t sub_10008AF98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000BF1C(&qword_10017E918);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for LNAppShortcutSpanRecord(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for LNAppShortcutSpanRecord(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v6 = (void *)a2[4];
  uint64_t v5 = a2[5];
  a1[4] = v6;
  a1[5] = v5;
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  uint64_t v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  uint64_t v9 = (void *)a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v10 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v11 = v9;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for LNAppShortcutSpanRecord(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a2[4];
  uint64_t v5 = (void *)a1[4];
  a1[4] = v4;
  id v6 = v4;

  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = (void *)a2[11];
  uint64_t v8 = (void *)a1[11];
  a1[11] = v7;
  id v9 = v7;

  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for LNAppShortcutSpanRecord(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x68uLL);
}

uint64_t assignWithTake for LNAppShortcutSpanRecord(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void **)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);

  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for LNAppShortcutSpanRecord(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 104))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LNAppShortcutSpanRecord(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LNAppShortcutSpanRecord()
{
  return &type metadata for LNAppShortcutSpanRecord;
}

unint64_t sub_10008B380()
{
  unint64_t result = qword_10017F0A8;
  if (!qword_10017F0A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F0A8);
  }
  return result;
}

uint64_t sub_10008B3CC()
{
  return String.hash(into:)();
}

void *sub_10008B3E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char __dst, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char __src)
{
  return memcpy(&__dst, &__src, 0xA8uLL);
}

uint64_t sub_10008B404(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = 0;
  uint64_t v25 = result;
  uint64_t v26 = *(void *)(result + 16);
  int v19 = _swiftEmptyArrayStorage;
  uint64_t v27 = a3;
LABEL_2:
  uint64_t v4 = v3 << 6;
  while (1)
  {
    if (v26 == v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v19;
    }
    unint64_t v5 = v3;
    if (v3 >= *(void *)(v25 + 16)) {
      break;
    }
    uint64_t v7 = *(void *)(v25 + v4 + 32);
    uint64_t v6 = *(void *)(v25 + v4 + 40);
    uint64_t v8 = *(void *)(v25 + v4 + 56);
    uint64_t v24 = *(void *)(v25 + v4 + 48);
    uint64_t v9 = *(void *)(v25 + v4 + 64);
    uint64_t v10 = *(void *)(v25 + v4 + 72);
    uint64_t v11 = *(void *)(v25 + v4 + 80);
    char v22 = *(unsigned char *)(v25 + v4 + 89);
    char v23 = *(unsigned char *)(v25 + v4 + 88);
    if (v7 == a2 && v6 == a3)
    {
      uint64_t v7 = a2;
      uint64_t v6 = a3;
LABEL_12:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v13 = v19;
      unint64_t result = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v28 = v19;
      if ((result & 1) == 0)
      {
        unint64_t result = (uint64_t)sub_100057DDC(0, v19[2] + 1, 1);
        uint64_t v13 = v19;
      }
      unint64_t v15 = v13[2];
      unint64_t v14 = v13[3];
      unint64_t v16 = v15 + 1;
      a3 = v27;
      if (v15 >= v14 >> 1)
      {
        unint64_t v18 = v15 + 1;
        unint64_t v20 = v13[2];
        unint64_t result = (uint64_t)sub_100057DDC((char *)(v14 > 1), v15 + 1, 1);
        unint64_t v16 = v18;
        unint64_t v15 = v20;
        a3 = v27;
        uint64_t v13 = v28;
      }
      unint64_t v3 = v5 + 1;
      v13[2] = v16;
      int v19 = v13;
      uint64_t v17 = &v13[8 * v15];
      v17[4] = v7;
      void v17[5] = v6;
      v17[6] = v24;
      v17[7] = v8;
      v17[8] = v9;
      v17[9] = v10;
      v17[10] = v11;
      *((unsigned char *)v17 + 88) = v23;
      *((unsigned char *)v17 + 89) = v22;
      goto LABEL_2;
    }
    v4 += 64;
    ++v3;
    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    a3 = v27;
    if (result) {
      goto LABEL_12;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10008B5E0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v23 = *(void *)(result + 16);
  if (v23)
  {
    unint64_t v3 = 0;
    uint64_t v22 = result + 32;
    int v19 = (void *)(a2 + 56);
    unint64_t v20 = _swiftEmptyArrayStorage;
    uint64_t v21 = result;
    uint64_t v29 = a2;
    while (1)
    {
      if (v3 >= *(void *)(v2 + 16))
      {
LABEL_29:
        __break(1u);
        return result;
      }
      uint64_t v4 = v22 + (v3 << 6);
      uint64_t v5 = *(void *)(v4 + 8);
      uint64_t v6 = *(void *)(v4 + 16);
      uint64_t v7 = *(void *)(v4 + 24);
      uint64_t v8 = *(void *)(v4 + 40);
      uint64_t v27 = *(void *)(v4 + 32);
      uint64_t v28 = *(void *)v4;
      uint64_t v26 = *(void *)(v4 + 48);
      char v24 = *(unsigned char *)(v4 + 57);
      char v25 = *(unsigned char *)(v4 + 56);
      ++v3;
      uint64_t v9 = *(void *)(a2 + 16);
      if (!v9) {
        goto LABEL_19;
      }
      unint64_t result = *(void *)(v29 + 32);
      if (result != v6 || *(void *)(v29 + 40) != v7)
      {
        unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0) {
          break;
        }
      }
LABEL_24:
      uint64_t v2 = v21;
      a2 = v29;
      if (v3 == v23) {
        goto LABEL_27;
      }
    }
    if (v9 != 1)
    {
      uint64_t v11 = v19;
      uint64_t v12 = 1;
      while (1)
      {
        uint64_t v13 = v12 + 1;
        if (__OFADD__(v12, 1)) {
          break;
        }
        unint64_t result = *(v11 - 1);
        if (result == v6 && *v11 == v7) {
          goto LABEL_24;
        }
        unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if (result) {
          goto LABEL_24;
        }
        v11 += 2;
        ++v12;
        if (v13 == v9) {
          goto LABEL_19;
        }
      }
      __break(1u);
      goto LABEL_29;
    }
LABEL_19:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v15 = v20;
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      unint64_t result = (uint64_t)sub_100057DDC(0, v20[2] + 1, 1);
      unint64_t v15 = v20;
    }
    unint64_t v17 = v15[2];
    unint64_t v16 = v15[3];
    if (v17 >= v16 >> 1)
    {
      unint64_t result = (uint64_t)sub_100057DDC((char *)(v16 > 1), v17 + 1, 1);
      unint64_t v15 = v20;
    }
    long long v15[2] = v17 + 1;
    unint64_t v20 = v15;
    unint64_t v18 = &v15[8 * v17];
    v18[4] = v28;
    void v18[5] = v5;
    v18[6] = v6;
    id v18[7] = v7;
    v18[8] = v27;
    v18[9] = v8;
    v18[10] = v26;
    *((unsigned char *)v18 + 88) = v25;
    *((unsigned char *)v18 + 89) = v24;
    goto LABEL_24;
  }
  unint64_t v20 = _swiftEmptyArrayStorage;
LABEL_27:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (uint64_t)v20;
}

void *sub_10008B818(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  sub_1000578DC();
  uint64_t v3 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v18 = v3;
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v6 = *(v5 - 1);
      uint64_t v7 = *v5;
      swift_bridgeObjectRetain();
      uint64_t v8 = a2(v4, v6, v7);
      uint64_t v10 = v9;
      uint64_t v12 = v11;
      uint64_t v14 = v13;
      swift_bridgeObjectRelease();
      unint64_t v15 = _swiftEmptyArrayStorage[2];
      if (v15 >= _swiftEmptyArrayStorage[3] >> 1) {
        sub_1000578DC();
      }
      ++v4;
      v5 += 2;
      _swiftEmptyArrayStorage[2] = v15 + 1;
      unint64_t v16 = &_swiftEmptyArrayStorage[4 * v15];
      void v16[4] = v8;
      v16[5] = v10;
      v16[6] = v12;
      v16[7] = v14;
    }
    while (v18 != v4);
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void *sub_10008B95C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(swift_bridgeObjectRetain() + 64);
    uint64_t v6 = _swiftEmptyArrayStorage;
    uint64_t v15 = a2;
    do
    {
      uint64_t v7 = *(v5 - 3);
      uint64_t v8 = *(v5 - 1);
      uint64_t v17 = *(v5 - 2);
      uint64_t v18 = *(v5 - 4);
      uint64_t v9 = *v5;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10008B5E0(v9, a2);
      swift_bridgeObjectRetain();
      sub_100054458();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10001F26C();
        uint64_t v6 = v12;
      }
      unint64_t v10 = v6[2];
      if (v10 >= v6[3] >> 1)
      {
        sub_10001F26C();
        uint64_t v6 = v13;
      }
      _OWORD v6[2] = v10 + 1;
      uint64_t v11 = &v6[5 * v10];
      v11[4] = v18;
      v11[5] = v7;
      void v11[6] = v17;
      v11[7] = v8;
      v11[8] = a3;
      v5 += 5;
      --v4;
      a2 = v15;
    }
    while (v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_10008BB00()
{
  uint64_t v0 = sub_10000BF1C(&qword_10017DD60);
  sub_10000E948();
  uint64_t v2 = v1;
  __chkstk_darwin(v3);
  sub_10001B450();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = type metadata accessor for _RegexFactory();
  sub_10000E948();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  sub_10001B450();
  uint64_t v13 = v12 - v11;
  makeFactory()();
  sub_100034708();
  _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)();
  sub_10000BF1C(&qword_10017D7C0);
  sub_10000BF1C(&qword_10017D7B8);
  sub_100034754(&qword_10017D7D0, &qword_10017D7B8);
  sub_100034754(&qword_10017D808, &qword_10017DD60);
  _RegexFactory.accumulate<A, B, C>(_:_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v6, v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v13, v7);
}

uint64_t sub_10008BCC4()
{
  uint64_t v2 = v0;
  uint64_t result = sub_10008D164();
  if (v1) {
    return result;
  }
  uint64_t v79 = result;
  uint64_t v93 = _swiftEmptyArrayStorage;
  uint64_t v4 = (int *)_s7BuilderVMa();
  uint64_t v5 = *(void *)(v0 + v4[7]);
  uint64_t v89 = v0;
  uint64_t v78 = *(void *)(v5 + 16);
  if (!v78)
  {
LABEL_42:
    v92[0] = (uint64_t)_swiftEmptyDictionarySingleton;
    uint64_t v55 = *(void *)(*(void *)(v2 + v4[12]) + 16);
    if (v55)
    {
      uint64_t v56 = v2 + v4[5];
      uint64_t v57 = *(void *)(v56 + 48);
      uint64_t v82 = *(void *)(v56 + 40);
      int v58 = (void **)(swift_bridgeObjectRetain() + 48);
      do
      {
        uint64_t v84 = v55;
        int v59 = *v58;
        swift_bridgeObjectRetain();
        id v60 = v59;
        swift_bridgeObjectRetain();
        id v61 = [v60 entityIdentifier];
        uint64_t v91 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v88 = v62;

        id v63 = [v60 phraseTemplates];
        sub_10000D9D4(0, (unint64_t *)&qword_10017EDC0);
        uint64_t v86 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        sub_10000BF1C(&qword_10017D0E0);
        uint64_t v64 = Dictionary.init(dictionaryLiteral:)();
        sub_10000D9D4(0, &qword_10017D0E8);
        uint64_t v65 = Dictionary.init(dictionaryLiteral:)();
        type metadata accessor for LNPlatformName(0);
        sub_10000D9D4(0, &qword_10017F0B0);
        sub_1000933E0((unint64_t *)&unk_100180CF0, type metadata accessor for LNPlatformName);
        uint64_t v66 = Dictionary.init(dictionaryLiteral:)();
        id v67 = objc_allocWithZone((Class)LNAssistantIntentMetadata);
        id v68 = sub_1000919A4(v91, v88, v86, v64, v65, v66);
        sub_10008D368(v82, v57, v68, _swiftEmptyArrayStorage, v79, (uint64_t)v92);
        sub_100054518();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v58 += 3;
        uint64_t v55 = v84 - 1;
      }
      while (v84 != 1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return (uint64_t)v93;
  }
  uint64_t v76 = (void *)(v0 + v4[10]);
  uint64_t v77 = v4[11];
  uint64_t v69 = (uint64_t)v4;
  uint64_t v75 = v0 + v4[5];
  uint64_t v74 = v5 + 32;
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v6 = 0;
  *(void *)&long long v7 = 136315138;
  long long v71 = v7;
  id v70 = (char *)&type metadata for Any + 8;
  uint64_t v73 = result;
  while (v6 < *(void *)(result + 16))
  {
    uint64_t v83 = v6;
    uint64_t v8 = (uint64_t *)(v74 + 24 * v6);
    uint64_t v81 = *v8;
    uint64_t v9 = (void *)v8[2];
    uint64_t v87 = v8[1];
    swift_bridgeObjectRetain();
    id v10 = v9;
    id v11 = [v10 intentIdentifier];
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v14 = v13;

    sub_10000BEA0(v76, v76[3]);
    uint64_t v15 = *(void *)(v75 + 40);
    uint64_t v16 = *(void *)(v75 + 48);
    swift_bridgeObjectRetain();
    uint64_t v90 = (void *)sub_100063E84(v15, v16, v12, v14);
    swift_bridgeObjectRelease();
    uint64_t v17 = *(void *)(v2 + v77);
    uint64_t v85 = v10;
    id v18 = [v10 intentIdentifier:v69];
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = v20;

    if (*(void *)(v17 + 16)
      && (uint64_t v28 = sub_100021098(v19, v21, v22, v23, v24, v25, v26, v27, v69, (uint64_t)v70, v71, *((uint64_t *)&v71 + 1), v72, v73, v74, v75, (uint64_t)v76, v77, v78,
                  v79,
                  (uint64_t)v80,
                  v81,
                  v83,
                  (uint64_t)v85,
                  v87,
                  v89),
          (v29 & 1) != 0))
    {
      uint64_t v30 = *(void **)(*(void *)(v17 + 56) + 8 * v28);
      id v31 = v30;
    }
    else
    {
      uint64_t v30 = 0;
    }
    uint64_t v2 = v89;
    swift_bridgeObjectRelease();
    if (v90)
    {
      uint64_t v80 = v30;
      id v32 = [v90 identifier];
      swift_bridgeObjectRelease();

      id v33 = [v90 parameters];
      sub_10000D9D4(0, &qword_10017D0A8);
      unint64_t v34 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v34 >> 62)
      {
        sub_1000898AC();
        uint64_t result = _CocoaArrayWrapper.endIndex.getter();
        uint64_t v35 = result;
      }
      else
      {
        uint64_t v35 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
        uint64_t result = swift_bridgeObjectRetain();
      }
      uint64_t v36 = &selRef_initWithConnection_options_error_;
      if (v35)
      {
        if (v35 < 1) {
          goto LABEL_49;
        }
        uint64_t v37 = 0;
        uint64_t v38 = _swiftEmptyArrayStorage;
        do
        {
          if ((v34 & 0xC000000000000001) != 0) {
            id v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v39 = *(id *)(v34 + 8 * v37 + 32);
          }
          uint64_t v40 = v39;
          id v41 = [v39 v36[64]];
          self;
          if (swift_dynamicCastObjCClass())
          {

            uint64_t v42 = sub_10004FB6C(v40);
            uint64_t v44 = v43;

            if (v44)
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                sub_100094140();
                sub_10001E7C0();
                uint64_t v38 = v48;
              }
              unint64_t v46 = v38[2];
              unint64_t v45 = v38[3];
              if (v46 >= v45 >> 1)
              {
                sub_100035E4C(v45);
                sub_10001E7C0();
                uint64_t v38 = v49;
              }
              v38[2] = v46 + 1;
              uint64_t v47 = &v38[2 * v46];
              v47[4] = v42;
              void v47[5] = v44;
              uint64_t v36 = &selRef_initWithConnection_options_error_;
            }
          }
          else
          {
          }
          ++v37;
        }
        while (v35 != v37);
      }
      else
      {
        uint64_t v38 = _swiftEmptyArrayStorage;
      }
      swift_bridgeObjectRelease_n();
      v92[0] = (uint64_t)_swiftEmptyDictionarySingleton;
      uint64_t v2 = v89;
      if (v38) {
        goto LABEL_33;
      }
    }
    else
    {
      if (!v30)
      {
        if (qword_10017C460 != -1) {
          swift_once();
        }
        uint64_t v51 = type metadata accessor for Logger();
        sub_10000BEE4(v51, (uint64_t)qword_100181ED8);
        swift_bridgeObjectRetain();
        uint64_t v52 = Logger.logObject.getter();
        os_log_type_t v53 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v52, v53))
        {
          uint64_t v54 = swift_slowAlloc();
          v92[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v54 = v71;
          swift_bridgeObjectRetain();
          *(void *)(v54 + 4) = sub_100013090(v12, v14, v92);
          sub_100035DC0();
          _os_log_impl((void *)&_mh_execute_header, v52, v53, "%s does not have any metadata, skipping", (uint8_t *)v54, 0xCu);
          swift_arrayDestroy();
          uint64_t v2 = v89;
          sub_10000EB10();
          sub_10000EB10();

          swift_bridgeObjectRelease();
        }
        else
        {

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
        }
        goto LABEL_34;
      }
      uint64_t v80 = v30;
      id v50 = [v30 identifier];
      swift_bridgeObjectRelease();

      v92[0] = (uint64_t)_swiftEmptyDictionarySingleton;
    }
    uint64_t v38 = _swiftEmptyArrayStorage;
LABEL_33:
    sub_10008D368(v81, v87, v85, v38, v79, (uint64_t)v92);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100054518();

    swift_bridgeObjectRelease();
LABEL_34:
    unint64_t v6 = v83 + 1;
    uint64_t result = v73;
    if (v83 + 1 == v78)
    {
      swift_bridgeObjectRelease();
      uint64_t v4 = (int *)v69;
      goto LABEL_42;
    }
  }
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

uint64_t sub_10008C5DC()
{
  sub_10000BF1C(&qword_10017E470);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10013F1D0;
  *(void *)(v0 + 32) = String.subscript.getter();
  *(void *)(v0 + 40) = v1;
  *(void *)(v0 + 48) = v2;
  *(void *)(v0 + 56) = v3;
  uint64_t result = String.subscript.getter();
  *(void *)(v0 + 64) = result;
  *(void *)(v0 + 72) = v5;
  *(void *)(v0 + 80) = v6;
  *(void *)(v0 + 88) = v7;
  qword_100181D68 = v0;
  return result;
}

uint64_t sub_10008C6B0()
{
  uint64_t v0 = sub_10000BF1C(&qword_10017D7B8);
  sub_10000D844(v0, qword_100181D70);
  sub_10000BEE4(v0, (uint64_t)qword_100181D70);
  sub_10000BF1C(&qword_10017D7C0);
  sub_100034754(&qword_10017D7D0, &qword_10017D7B8);
  return Regex.init<A>(_:)();
}

uint64_t sub_10008C768@<X0>(uint64_t a1@<X8>)
{
  uint64_t v40 = a1;
  uint64_t v1 = sub_10000BF1C(&qword_10017DD60);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v37 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v28 - v5;
  uint64_t v7 = sub_10000BF1C(&qword_10017D7B8);
  uint64_t v38 = *(void *)(v7 - 8);
  uint64_t v39 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for _RegexFactory();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v42 = v10;
  uint64_t v43 = v11;
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_10000BF1C(&qword_10017D7F8);
  uint64_t v44 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  id v32 = (char *)&v28 - v17;
  uint64_t v47 = 31524;
  unint64_t v48 = 0xE200000000000000;
  sub_100034708();
  static RegexComponentBuilder.buildExpression<A>(_:)();
  makeFactory()();
  sub_10008CC68((uint64_t)v6);
  sub_10000BF1C(&qword_10017D7C0);
  sub_100034754(&qword_10017D808, &qword_10017DD60);
  uint64_t v30 = v9;
  uint64_t v31 = v1;
  _RegexFactory.capture<A, B>(_:)();
  uint64_t v35 = *(void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v36 = v2 + 8;
  v35(v6, v1);
  id v18 = *(void (**)(char *, uint64_t))(v43 + 8);
  v43 += 8;
  unint64_t v34 = v18;
  v18(v13, v42);
  Capture.init(_:)();
  sub_100034754(&qword_10017D810, &qword_10017D7F8);
  uint64_t v19 = v32;
  uint64_t v20 = v41;
  static RegexComponentBuilder.buildExpression<A>(_:)();
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t))(v44 + 8);
  v44 += 8;
  id v33 = v21;
  v21(v15, v20);
  uint64_t v45 = 125;
  unint64_t v46 = 0xE100000000000000;
  static RegexComponentBuilder.buildExpression<A>(_:)();
  uint64_t v45 = v49;
  unint64_t v46 = v50;
  char v29 = v6;
  static RegexComponentBuilder.buildPartialBlock<A>(first:)();
  swift_bridgeObjectRelease();
  makeFactory()();
  uint64_t v22 = v37;
  uint64_t v23 = v31;
  _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)();
  uint64_t v24 = v30;
  uint64_t v25 = v41;
  _RegexFactory.accumulate<A, B, C>(_:_:)();
  uint64_t v26 = v35;
  v35(v22, v23);
  v34(v13, v42);
  sub_10008BB00();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v24, v39);
  v26(v29, v23);
  return v33(v19, v25);
}

uint64_t sub_10008CC68@<X0>(uint64_t a1@<X8>)
{
  uint64_t v37 = a1;
  uint64_t v38 = type metadata accessor for RegexRepetitionBehavior();
  uint64_t v36 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v35 = (char *)&v29 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for _RegexFactory();
  uint64_t v33 = *(void *)(v2 - 8);
  uint64_t v34 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000BF1C(&qword_10017D818);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CharacterClass();
  uint64_t v30 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000BF1C(&qword_10017D820);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v31 = v11;
  uint64_t v32 = v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000BF1C(&qword_10017DD60);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  id v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v29 - v20;
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v29 - v23;
  static RegexComponent<>.word.getter();
  sub_10000D5B0((uint64_t)v7, 1, 1, v38);
  makeFactory()();
  sub_1000933E0((unint64_t *)&qword_10017D828, (void (*)(uint64_t))&type metadata accessor for CharacterClass);
  _RegexFactory.oneOrMore<A, B>(_:_:)();
  sub_10002A75C((uint64_t)v7, &qword_10017D818);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v4, v34);
  OneOrMore.init(_:)();
  uint64_t v25 = v31;
  OneOrMore.regex.getter();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v14, v25);
  uint64_t v26 = v35;
  static RegexRepetitionBehavior.reluctant.getter();
  Regex.repetitionBehavior(_:)();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v26, v38);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v16 + 8);
  v27(v18, v15);
  sub_100034754(&qword_10017D808, &qword_10017DD60);
  static RegexComponentBuilder.buildExpression<A>(_:)();
  v27(v21, v15);
  static RegexComponentBuilder.buildPartialBlock<A>(first:)();
  return ((uint64_t (*)(char *, uint64_t))v27)(v24, v15);
}

uint64_t sub_10008D164()
{
  uint64_t v1 = _s7BuilderVMa();
  uint64_t v2 = (void *)(v0 + *(int *)(v1 + 20));
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[4];
  sub_10000BEA0(v2, v3);
  sub_10000BF1C((uint64_t *)&unk_10017E690);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_10013EF20;
  uint64_t v6 = (uint64_t *)(v0 + *(int *)(v1 + 24));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  *(void *)(v5 + 32) = *v6;
  *(void *)(v5 + 40) = v8;
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 24);
  swift_bridgeObjectRetain();
  uint64_t v10 = v9(v5, v3, v4);
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = v2[3];
  uint64_t v14 = v2[4];
  sub_10000BEA0(v2, v13);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 32))(v7, v8, v13, v14);
  uint64_t v16 = v15;
  uint64_t v17 = *(void *)(v15 + 16);
  if (v17)
  {
    id v18 = (unsigned char *)(v15 + 48);
    while ((*v18 & 1) == 0)
    {
      v18 += 24;
      if (!--v17) {
        goto LABEL_5;
      }
    }
    uint64_t v21 = *((void *)v18 - 2);
    uint64_t v22 = *((void *)v18 - 1);
    swift_bridgeObjectRetain_n();
    sub_10002A9FC(v16, v21, v22);
    uint64_t v24 = v23;
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_10013F1D0;
    *(void *)(v19 + 32) = v21;
    *(void *)(v19 + 40) = v22;
    *(void *)(v19 + 48) = v10;
    *(void *)(v19 + 56) = v12;
    uint64_t v20 = v24;
  }
  else
  {
LABEL_5:
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_10013EF20;
    *(void *)(v19 + 32) = v10;
    *(void *)(v19 + 40) = v12;
    uint64_t v20 = v16;
  }
  sub_10002AF48(v20);
  swift_bridgeObjectRelease();
  sub_100054398();
  return v19;
}

uint64_t sub_10008D368(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v56 = (void *)a6;
  id v60 = a4;
  uint64_t v61 = a5;
  uint64_t v58 = a1;
  uint64_t v59 = a2;
  uint64_t v9 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v9 - 8);
  sub_100035D8C();
  uint64_t v54 = v10;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v53 - v12;
  uint64_t v14 = type metadata accessor for URL();
  sub_10000E948();
  uint64_t v16 = v15;
  __chkstk_darwin(v17);
  sub_10001B450();
  uint64_t v55 = v19 - v18;
  id v20 = [a3 phraseTemplates];
  sub_10000D9D4(0, (unint64_t *)&qword_10017EDC0);
  unint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v22 = [a3 intentIdentifier];
  uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v62 = v23;

  if (!(v21 >> 62))
  {
    uint64_t v24 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v24) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    sub_10000D5B0((uint64_t)v13, 1, 1, v14);
LABEL_14:
    sub_10002A75C((uint64_t)v13, (uint64_t *)&unk_10017D0C0);
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_13;
  }
LABEL_3:
  sub_100058BCC(0, (v21 & 0xC000000000000001) == 0, v21);
  if ((v21 & 0xC000000000000001) != 0) {
    id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v25 = *(id *)(v21 + 32);
  }
  uint64_t v26 = v25;
  swift_bridgeObjectRelease();
  id v27 = [v26 bundleURL];

  if (v27)
  {
    uint64_t v28 = v54;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v29 = 0;
  }
  else
  {
    uint64_t v29 = 1;
    uint64_t v28 = v54;
  }
  uint64_t v30 = v55;
  sub_10000D5B0(v28, v29, 1, v14);
  sub_1000932E4(v28, (uint64_t)v13);
  if (sub_10000D5D8((uint64_t)v13, 1, v14) == 1) {
    goto LABEL_14;
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v30, v13, v14);
  uint64_t v31 = self;
  URL._bridgeToObjectiveC()(v32);
  uint64_t v34 = v33;
  id v35 = [v31 ln_uniqueBundleWithURL:v33];

  if (v35)
  {
    uint64_t v36 = _s7BuilderVMa();
    uint64_t v37 = sub_100094250(*(void *)(v63 + *(int *)(v36 + 24)), *(void *)(v63 + *(int *)(v36 + 24) + 8), (uint64_t)"AssistantIntents");

    uint64_t v38 = sub_100094150();
    v39(v38);
    goto LABEL_16;
  }
  uint64_t v40 = sub_100094150();
  v41(v40);
LABEL_15:
  uint64_t v37 = 0;
LABEL_16:
  uint64_t v42 = sub_10008DF5C(v21, v37);
  swift_bridgeObjectRelease();
  id v43 = [a3 parameterValues];
  sub_10000BF1C(&qword_10017D0E0);
  uint64_t v44 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v45 = sub_10008E7D4(v44, v37, (uint64_t)v56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v46 = sub_1000949F4(a3);
  uint64_t v66 = &_swiftEmptySetSingleton;
  uint64_t v65 = _swiftEmptyArrayStorage;
  uint64_t v47 = v42[2];
  if (v47)
  {
    swift_bridgeObjectRetain();
    uint64_t v56 = v42;
    unint64_t v48 = v42 + 7;
    while (1)
    {
      uint64_t v49 = *(v48 - 1);
      uint64_t v50 = *v48;
      uint64_t v51 = *(v48 - 2);
      v64[0] = *(v48 - 3);
      v64[1] = v51;
      v64[2] = v49;
      v64[3] = v50;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10008F304(&v65, v64, v57, v62, v63, v61, v45, 0, v60, v46, (uint64_t *)&v66, v58, v59, a3);
      if (v7) {
        break;
      }
      v48 += 4;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!--v47)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_22:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v46 = (uint64_t)v65;
    swift_bridgeObjectRelease();
  }
  return v46;
}

void sub_10008D8B8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v6 - 8);
  sub_100035D8C();
  uint64_t v70 = v7;
  __chkstk_darwin(v8);
  long long v71 = (char *)&v63 - v9;
  uint64_t v72 = type metadata accessor for URL();
  sub_10000E948();
  uint64_t v69 = v10;
  __chkstk_darwin(v11);
  sub_10001B450();
  uint64_t v14 = v13 - v12;
  id v15 = *(id *)(a2 + 16);
  id v16 = [v15 intentIdentifier];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v19 = v18;

  uint64_t v20 = _s7BuilderVMa();
  sub_10000BEA0((void *)(a3 + *(int *)(v20 + 40)), *(void *)(a3 + *(int *)(v20 + 40) + 24));
  uint64_t v21 = a3 + *(int *)(v20 + 20);
  uint64_t v22 = *(void *)(v21 + 40);
  uint64_t v23 = *(void *)(v21 + 48);
  swift_bridgeObjectRetain();
  uint64_t v24 = v22;
  uint64_t v74 = v17;
  uint64_t v25 = v73;
  uint64_t v26 = (void *)sub_100063E84(v24, v23, v17, v19);
  id v75 = v15;
  if (v25)
  {
    swift_errorRelease();
    swift_bridgeObjectRelease();
    if (qword_10017C460 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    uint64_t v28 = (uint8_t *)sub_10000BEE4(v27, (uint64_t)qword_100181ED8);
    swift_bridgeObjectRetain();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.info.getter();
    BOOL v31 = os_log_type_enabled(v29, v30);
    uint64_t v32 = v74;
    if (v31)
    {
      swift_slowAlloc();
      uint64_t v77 = sub_100035C78();
      *(_DWORD *)uint64_t v28 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v76 = sub_100013090(v32, v19, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s does not have any metadata, skipping", v28, 0xCu);
      swift_arrayDestroy();
      sub_10000EB10();
      sub_10000EB10();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }

    return;
  }
  uint64_t v64 = v20;
  uint64_t v65 = v14;
  uint64_t v33 = (uint64_t)v71;
  id v66 = v26;
  uint64_t v67 = 0;
  swift_bridgeObjectRelease();
  uint64_t v34 = &selRef_initWithConnection_options_error_;
  id v35 = [v15 phrases];
  uint64_t v73 = sub_10000D9D4(0, (unint64_t *)&qword_10017EDC0);
  unint64_t v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v36 >> 62)
  {
    sub_1000898AC();
    uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v37 = *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v38 = v74;
  uint64_t v68 = a3;
  if (v37)
  {
    sub_100058BCC(0, (v36 & 0xC000000000000001) == 0, v36);
    if ((v36 & 0xC000000000000001) != 0) {
      id v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v39 = *(id *)(v36 + 32);
    }
    uint64_t v40 = v39;
    swift_bridgeObjectRelease();
    id v41 = [v40 bundleURL];

    if (v41)
    {
      uint64_t v42 = v70;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v43 = 0;
      uint64_t v44 = v65;
      uint64_t v34 = &selRef_initWithConnection_options_error_;
    }
    else
    {
      uint64_t v43 = 1;
      uint64_t v44 = v65;
      uint64_t v34 = &selRef_initWithConnection_options_error_;
      uint64_t v42 = v70;
    }
    uint64_t v45 = v72;
    sub_10000D5B0(v42, v43, 1, v72);
    sub_1000932E4(v42, v33);
    if (sub_10000D5D8(v33, 1, v45) != 1)
    {
      uint64_t v47 = v69;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 32))(v44, v33, v45);
      uint64_t v48 = v45;
      uint64_t v49 = self;
      URL._bridgeToObjectiveC()(v50);
      uint64_t v52 = v51;
      id v53 = [v49 ln_uniqueBundleWithURL:v51];

      if (v53)
      {
        uint64_t v54 = v48;
        uint64_t v46 = (void *)sub_100094250(*(void *)(v68 + *(int *)(v64 + 24)), *(void *)(v68 + *(int *)(v64 + 24) + 8), (uint64_t)"AssistantIntents");

        (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v65, v54);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v65, v48);
        uint64_t v46 = _swiftEmptyDictionarySingleton;
      }
      uint64_t v34 = &selRef_initWithConnection_options_error_;
      goto LABEL_23;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_10000D5B0(v33, 1, 1, v72);
  }
  sub_10002A75C(v33, (uint64_t *)&unk_10017D0C0);
  uint64_t v46 = _swiftEmptyDictionarySingleton;
LABEL_23:
  id v55 = [v15 v34[221]];
  unint64_t v56 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v57 = sub_10008DF5C(v56, (uint64_t)v46);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v73 = (uint64_t)v57;
  uint64_t v58 = v57[2];
  if (v58)
  {
    uint64_t v59 = (uint64_t *)(v73 + 56);
    do
    {
      uint64_t v60 = *(v59 - 1);
      uint64_t v61 = *v59;
      objc_allocWithZone((Class)LNExamplePhraseDescription);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100091B70(4, v38, v19, v60, v61, 0, 0, 0, 0);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      unint64_t v62 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (*(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= v62 >> 1)
      {
        sub_100035E4C(v62);
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v59 += 4;
      --v58;
    }
    while (v58);
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void *sub_10008DF5C(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v5) {
    goto LABEL_10;
  }
LABEL_3:
  sub_100058BCC(0, (a1 & 0xC000000000000001) == 0, a1);
  if ((a1 & 0xC000000000000001) != 0) {
    id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v6 = *(id *)(a1 + 32);
  }
  uint64_t v7 = v6;
  uint64_t v8 = swift_bridgeObjectRelease();
  if (a2
    && (id v9 = [v7 key],
        uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(),
        uint64_t v12 = v11,
        v9,
        uint64_t v13 = sub_10001B584(v10, v12, a2),
        uint64_t v8 = swift_bridgeObjectRelease(),
        v13))
  {
    uint64_t v21 = v13;
    swift_bridgeObjectRetain();
    sub_100091D00(&v21, (uint64_t (*)(uint64_t))sub_1000AC42C, sub_100091D84);
    uint64_t v14 = swift_bridgeObjectRelease();
    uint64_t v15 = v21;
    __chkstk_darwin(v14);
    uint64_t v20 = v7;
    id v16 = sub_10008B818(v15, sub_100034564);

    swift_release();
  }
  else
  {
    __chkstk_darwin(v8);
    uint64_t v20 = v2;
    sub_1000B3008((void (*)(void *__return_ptr, id *))sub_10009334C, (uint64_t)&v19, a1);
    id v16 = v17;
  }
  return v16;
}

uint64_t sub_10008E198(uint64_t a1, uint64_t a2)
{
  uint64_t v66 = sub_10000BF1C(&qword_10017D7B0);
  sub_10000E948();
  uint64_t v62 = v4;
  __chkstk_darwin(v5);
  sub_100035D8C();
  uint64_t v61 = v6;
  __chkstk_darwin(v7);
  uint64_t v65 = (char *)&v54 - v8;
  uint64_t v67 = (void *)a1;
  uint64_t v68 = a2;
  if (qword_10017C410 != -1) {
LABEL_25:
  }
    swift_once();
  uint64_t v9 = sub_10000BF1C(&qword_10017D7B8);
  sub_10000BEE4(v9, (uint64_t)qword_100181D70);
  sub_10000BF1C(&qword_10017D7C0);
  sub_100034670();
  sub_100034754(&qword_10017D7D0, &qword_10017D7B8);
  uint64_t v10 = BidirectionalCollection<>.matches<A, B>(of:)();
  uint64_t v11 = *(void *)(v10 + 16);
  uint64_t v12 = _swiftEmptyArrayStorage;
  uint64_t v57 = v10;
  if (v11)
  {
    id v75 = _swiftEmptyArrayStorage;
    sub_10005792C();
    uint64_t v63 = *(char **)(v62 + 16);
    uint64_t v64 = v62 + 16;
    unint64_t v13 = v10 + ((*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80));
    uint64_t v14 = *(void (**)(uint64_t, unint64_t, uint64_t))(v62 + 72);
    uint64_t v59 = (void (**)(char *, uint64_t))(v62 + 8);
    uint64_t v60 = v14;
    uint64_t v12 = v75;
    do
    {
      id v16 = v65;
      uint64_t v15 = v66;
      ((void (*)(char *, unint64_t, uint64_t))v63)(v65, v13, v66);
      Regex.Match.output.getter();
      uint64_t v17 = (uint64_t)v67;
      uint64_t v18 = v68;
      uint64_t v20 = v69;
      uint64_t v19 = v70;
      swift_bridgeObjectRelease();
      (*v59)(v16, v15);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10005792C();
        uint64_t v12 = v75;
      }
      unint64_t v22 = v12[2];
      unint64_t v21 = v12[3];
      if (v22 >= v21 >> 1)
      {
        sub_100035E4C(v21);
        sub_10005792C();
        uint64_t v12 = v75;
      }
      void v12[2] = v22 + 1;
      uint64_t v23 = &v12[4 * v22];
      v23[4] = v17;
      uint64_t v23[5] = v18;
      v23[6] = v20;
      v23[7] = v19;
      v13 += (unint64_t)v60;
      --v11;
    }
    while (v11);
    uint64_t v10 = v57;
  }
  uint64_t v67 = v12;
  swift_bridgeObjectRetain();
  sub_100091D00((uint64_t *)&v67, (uint64_t (*)(uint64_t))sub_1000AC440, sub_1000923EC);
  uint64_t v24 = v66;
  swift_bridgeObjectRelease();
  sub_10000BF1C(&qword_10017D7D8);
  sub_100034754(&qword_10017D7E0, &qword_10017D7D8);
  sub_1000346BC();
  uint64_t v25 = Sequence<>.joined(separator:)();
  uint64_t v27 = v26;
  swift_release();
  uint64_t v28 = *(char **)(v10 + 16);
  if (!v28)
  {
LABEL_22:
    swift_bridgeObjectRelease();
    return v25;
  }
  uint64_t v55 = v25;
  uint64_t v56 = v27;
  uint64_t v29 = *(void (**)(uint64_t, unint64_t, uint64_t))(v62 + 16);
  unint64_t v30 = v10 + ((*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80));
  uint64_t v59 = (void (**)(char *, uint64_t))(v62 + 8);
  uint64_t v60 = v29;
  v62 += 16;
  uint64_t v58 = *(void *)(v62 + 56);
  swift_bridgeObjectRetain();
  BOOL v31 = _swiftEmptyDictionarySingleton;
  uint64_t v32 = v61;
  while (1)
  {
    uint64_t v63 = v28;
    v60((uint64_t)v32, v30, v24);
    Regex.Match.output.getter();
    swift_bridgeObjectRelease();
    uint64_t v33 = v71;
    uint64_t v34 = v72;
    uint64_t v35 = v73;
    uint64_t v36 = v74;
    uint64_t v64 = Regex.Match.range.getter();
    uint64_t v65 = v37;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v67 = v31;
    sub_100035E38();
    unint64_t v39 = sub_1000211E0();
    uint64_t v41 = v31[2];
    BOOL v42 = (v40 & 1) == 0;
    Swift::Int v43 = v41 + v42;
    if (__OFADD__(v41, v42))
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    unint64_t v44 = v39;
    char v45 = v40;
    sub_10000BF1C(&qword_10017D7F0);
    Swift::Bool v46 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v43);
    uint64_t v24 = v66;
    if (v46) {
      break;
    }
LABEL_16:
    BOOL v31 = v67;
    if (v45)
    {
      sub_100035D08();
    }
    else
    {
      sub_100094100((uint64_t)&v67[v44 >> 6]);
      uint64_t v49 = (void *)(v31[6] + 32 * v44);
      *uint64_t v49 = v33;
      v49[1] = v34;
      v49[2] = v35;
      v49[3] = v36;
      sub_100035D08();
      uint64_t v50 = v31[2];
      BOOL v51 = __OFADD__(v50, 1);
      uint64_t v52 = v50 + 1;
      if (v51) {
        goto LABEL_24;
      }
      void v31[2] = v52;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v32 = v61;
    (*v59)(v61, v24);
    v30 += v58;
    uint64_t v28 = v63 - 1;
    if (v63 == (char *)1)
    {
      swift_bridgeObjectRelease();
      uint64_t v25 = v55;
      goto LABEL_22;
    }
  }
  sub_100035E38();
  unint64_t v47 = sub_1000211E0();
  if ((v45 & 1) == (v48 & 1))
  {
    unint64_t v44 = v47;
    goto LABEL_16;
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

void sub_10008E704(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  _s7BuilderVMa();
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 localizedStringForLocaleIdentifier:v4];

  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  id v9 = [v3 key];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  *a2 = v10;
  a2[1] = v12;
  a2[2] = v6;
  a2[3] = v8;
}

uint64_t sub_10008E7D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v209 = a3;
  uint64_t v184 = a1;
  if (a2 && (uint64_t v3 = a2, *(void *)(a2 + 16)))
  {
    uint64_t v186 = a1 + 64;
    sub_100094068();
    unint64_t v6 = v5 & v4;
    int64_t v188 = (unint64_t)(v7 + 63) >> 6;
    swift_bridgeObjectRetain();
    uint64_t v204 = 0;
    int64_t v8 = 0;
    id v9 = _swiftEmptyDictionarySingleton;
    if (!v6) {
      goto LABEL_5;
    }
LABEL_4:
    unint64_t v10 = __clz(__rbit64(v6));
    uint64_t v11 = (v6 - 1) & v6;
    for (unint64_t i = v10 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v8 << 6))
    {
      uint64_t v192 = v8;
      id v16 = (uint64_t *)(*(void *)(v184 + 48) + 16 * i);
      uint64_t v198 = v16[1];
      uint64_t v201 = *v16;
      unint64_t v17 = *(void *)(*(void *)(v184 + 56) + 8 * i);
      if (v17 >> 62)
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t v190 = v11;
      if (v18) {
        break;
      }
LABEL_57:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v6 = v190;
      int64_t v8 = v192;
      if (v190) {
        goto LABEL_4;
      }
LABEL_5:
      int64_t v13 = v8 + 1;
      if (__OFADD__(v8, 1)) {
        goto LABEL_130;
      }
      if (v13 >= v188)
      {
LABEL_115:
        swift_release();
        uint64_t v77 = 0;
        uint64_t v171 = (uint64_t)v204;
        goto LABEL_116;
      }
      unint64_t v14 = *(void *)(v186 + 8 * v13);
      ++v8;
      if (!v14)
      {
        int64_t v8 = v13 + 1;
        if (v13 + 1 >= v188) {
          goto LABEL_115;
        }
        unint64_t v14 = *(void *)(v186 + 8 * v8);
        if (!v14)
        {
          int64_t v8 = v13 + 2;
          if (v13 + 2 >= v188) {
            goto LABEL_115;
          }
          unint64_t v14 = *(void *)(v186 + 8 * v8);
          if (!v14)
          {
            int64_t v15 = v13 + 3;
            if (v15 >= v188) {
              goto LABEL_115;
            }
            unint64_t v14 = *(void *)(v186 + 8 * v15);
            if (!v14)
            {
              while (1)
              {
                int64_t v8 = v15 + 1;
                if (__OFADD__(v15, 1)) {
                  goto LABEL_132;
                }
                if (v8 >= v188) {
                  goto LABEL_115;
                }
                unint64_t v14 = *(void *)(v186 + 8 * v8);
                ++v15;
                if (v14) {
                  goto LABEL_18;
                }
              }
            }
            int64_t v8 = v15;
          }
        }
      }
LABEL_18:
      uint64_t v11 = (v14 - 1) & v14;
    }
    unint64_t v211 = v17 & 0xC000000000000001;
    uint64_t v19 = 4;
    uint64_t v20 = v198;
    uint64_t v195 = v17;
    uint64_t v210 = v18;
    while (1)
    {
      id v21 = v211 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v17 + 8 * v19);
      uint64_t v22 = v19 - 3;
      if (__OFADD__(v19 - 4, 1)) {
        break;
      }
      uint64_t v23 = v21;
      id v24 = [v21 key];
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v27 = v26;

      if (*(void *)(v3 + 16)
        && (v213 = v23,
            uint64_t v34 = sub_100021098(v25, v27, v28, v29, v30, v31, v32, v33, v173, v174, v175, v176, v178, v180, v182, v184, v185, v186, v188,
                    v190,
                    v192,
                    v195,
                    v198,
                    v201,
                    (uint64_t)v204,
                    v210),
            (v35 & 1) != 0))
      {
        uint64_t v36 = *(void *)(*(void *)(v3 + 56) + 8 * v34);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_100093428((uint64_t)v204);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        sub_100021098(v201, v20, v38, v39, v40, v41, v42, v43, v173, v174, v175, v176, v178, v180, v182, v184, v185, v186, v188,
          v190,
          v192,
          v195,
          v198,
          v201,
          (uint64_t)v204,
          v210);
        sub_1000941BC();
        if (v46) {
          goto LABEL_123;
        }
        uint64_t v47 = v44;
        char v48 = v45;
        sub_10000BF1C(&qword_10017F0D0);
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, (Swift::Int)_swiftEmptyDictionarySingleton))
        {
          uint64_t v55 = sub_100021098(v201, v20, v49, v50, v51, v52, v53, v54, v173, v174, v175, v176, v178, v180, v182, v184, v185, v186, v188,
                  v190,
                  v192,
                  v195,
                  v198,
                  v201,
                  v205,
                  v210);
          if ((v48 & 1) != (v56 & 1)) {
            goto LABEL_133;
          }
          uint64_t v47 = v55;
        }
        uint64_t v206 = v36;
        swift_bridgeObjectRelease();
        if ((v48 & 1) == 0)
        {
          sub_10009401C();
          uint64_t *v57 = v201;
          v57[1] = v20;
          *(void *)(_swiftEmptyDictionarySingleton[7] + 8 * v47) = _swiftEmptyArrayStorage;
          uint64_t v58 = _swiftEmptyDictionarySingleton[2];
          uint64_t v59 = v58 + 1;
          BOOL v60 = __OFADD__(v58, 1);
          swift_bridgeObjectRetain();
          if (v60) {
            goto LABEL_127;
          }
          _swiftEmptyDictionarySingleton[2] = v59;
        }
        uint64_t v61 = v3;
        swift_bridgeObjectRetain();
        uint64_t v62 = _swiftEmptyDictionarySingleton[7];
        swift_bridgeObjectRelease();
        uint64_t v63 = *(void *)(v206 + 16);
        uint64_t v64 = *(void *)(v62 + 8 * v47);
        uint64_t v65 = *(void *)(v64 + 16);
        if (__OFADD__(v65, v63)) {
          goto LABEL_124;
        }
        int v66 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v62 + 8 * v47) = v64;
        if (!v66 || v65 + v63 > *(void *)(v64 + 24) >> 1)
        {
          sub_10001E7C0();
          uint64_t v64 = v67;
          *(void *)(v62 + 8 * v47) = v67;
        }
        uint64_t v3 = v61;
        uint64_t v20 = v198;
        if (*(void *)(v206 + 16))
        {
          uint64_t v68 = *(void *)(v64 + 16);
          if ((*(void *)(v64 + 24) >> 1) - v68 < v63) {
            goto LABEL_126;
          }
          unint64_t v69 = v64 + 16 * v68 + 32;
          if (v206 + 32 < v69 + 16 * v63 && v69 < v206 + 32 + 16 * v63) {
            goto LABEL_134;
          }
          swift_arrayInitWithCopy();
          if (v63)
          {
            uint64_t v71 = *(void *)(v64 + 16);
            BOOL v46 = __OFADD__(v71, v63);
            uint64_t v72 = v71 + v63;
            if (v46) {
              goto LABEL_128;
            }
            *(void *)(v64 + 16) = v72;
          }
        }
        else if (v63)
        {
          goto LABEL_125;
        }
        swift_bridgeObjectRelease();
        *(void *)(v62 + 8 * v47) = v64;
        swift_bridgeObjectRelease();

        uint64_t v204 = sub_10008F2F4;
        unint64_t v17 = v195;
      }
      else
      {

        swift_bridgeObjectRelease();
      }
      ++v19;
      if (v22 == v210) {
        goto LABEL_57;
      }
    }
  }
  else
  {
    uint64_t v177 = a1 + 64;
    sub_100094068();
    uint64_t v75 = v74 & v73;
    int64_t v179 = (unint64_t)(v76 + 63) >> 6;
    swift_bridgeObjectRetain();
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    id v9 = _swiftEmptyDictionarySingleton;
    if (!v75) {
      goto LABEL_62;
    }
LABEL_61:
    sub_10009423C();
    for (unint64_t j = v80 | (v79 << 6); ; unint64_t j = __clz(__rbit64(v83)) + (v79 << 6))
    {
      uint64_t v183 = v79;
      uint64_t v85 = (uint64_t *)(*(void *)(v184 + 48) + 16 * j);
      uint64_t v86 = *v85;
      uint64_t v87 = v85[1];
      unint64_t v193 = *(void *)(*(void *)(v184 + 56) + 8 * j);
      if (v193 >> 62)
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        uint64_t v88 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v88 = *(void *)((v193 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t v181 = v75;
      if (v88) {
        break;
      }
LABEL_111:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v75 = v181;
      uint64_t v78 = v183;
      if (v181) {
        goto LABEL_61;
      }
LABEL_62:
      int64_t v82 = v78 + 1;
      if (__OFADD__(v78, 1)) {
        goto LABEL_129;
      }
      if (v82 >= v179)
      {
LABEL_114:
        swift_release();
        uint64_t v171 = 0;
LABEL_116:
        sub_100093428(v171);
        sub_100093428((uint64_t)v77);
        return (uint64_t)v9;
      }
      unint64_t v83 = *(void *)(v177 + 8 * v82);
      int64_t v79 = v78 + 1;
      if (!v83)
      {
        int64_t v79 = v82 + 1;
        if (v82 + 1 >= v179) {
          goto LABEL_114;
        }
        unint64_t v83 = *(void *)(v177 + 8 * v79);
        if (!v83)
        {
          int64_t v79 = v82 + 2;
          if (v82 + 2 >= v179) {
            goto LABEL_114;
          }
          unint64_t v83 = *(void *)(v177 + 8 * v79);
          if (!v83)
          {
            int64_t v84 = v82 + 3;
            if (v84 >= v179) {
              goto LABEL_114;
            }
            unint64_t v83 = *(void *)(v177 + 8 * v84);
            if (!v83)
            {
              while (1)
              {
                int64_t v79 = v84 + 1;
                if (__OFADD__(v84, 1)) {
                  goto LABEL_131;
                }
                if (v79 >= v179) {
                  goto LABEL_114;
                }
                unint64_t v83 = *(void *)(v177 + 8 * v79);
                ++v84;
                if (v83) {
                  goto LABEL_75;
                }
              }
            }
            int64_t v79 = v84;
          }
        }
      }
LABEL_75:
      uint64_t v75 = (v83 - 1) & v83;
    }
    uint64_t v189 = v86;
    unint64_t v191 = v193 & 0xC000000000000001;
    uint64_t v89 = 4;
    uint64_t v187 = v88;
    while (1)
    {
      id v90 = v191 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v193 + 8 * v89);
      uint64_t v91 = v90;
      if (__OFADD__(v89 - 4, 1)) {
        break;
      }
      uint64_t v202 = v89 - 3;
      id v92 = [v90 key];
      uint64_t v93 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v95 = v94;

      uint64_t v102 = *(void **)v209;
      uint64_t v207 = v89;
      if (*(void *)(*(void *)v209 + 16)
        && (uint64_t v103 = sub_100021098(v93, v95, v96, v97, v98, v99, v100, v101, v173, v174, v175, v177, v179, v181, v183, v184, v185, v187, v189,
                     v191,
                     v193,
                     v194,
                     v197,
                     v202,
                     v89,
                     v209),
            (v104 & 1) != 0))
      {
        uint64_t v105 = (uint64_t *)(v102[7] + 16 * v103);
        uint64_t v212 = v105[1];
        uint64_t v214 = *v105;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v106 = v87;
        uint64_t v200 = (uint64_t)v77;
        uint64_t v107 = v93;
        uint64_t v108 = v9;
        _s7BuilderVMa();
        NSString v109 = String._bridgeToObjectiveC()();
        id v110 = [v91 localizedStringForLocaleIdentifier:v109];

        uint64_t v214 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v112 = v111;

        swift_bridgeObjectRetain();
        uint64_t v212 = v112;
        swift_bridgeObjectRetain();
        char v113 = swift_isUniquelyReferenced_nonNull_native();
        id v215 = *(void **)v209;
        *(void *)uint64_t v209 = 0x8000000000000000;
        uint64_t v114 = v107;
        sub_100021098(v107, v95, v115, v116, v117, v118, v119, v120, v173, v174, v175, v177, v179, v181, v183, v184, v185, v187, v189,
          v191,
          v193,
          (uint64_t)v91,
          v200,
          v202,
          v207,
          v209);
        sub_10009427C();
        if (v46) {
          goto LABEL_120;
        }
        unint64_t v123 = v121;
        char v124 = v122;
        sub_10000BF1C(&qword_10017C8F0);
        Swift::Bool v125 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v113, v107);
        id v9 = v108;
        uint64_t v87 = v106;
        if (v125)
        {
          uint64_t v132 = sub_100021098(v114, v95, v126, v127, v128, v129, v130, v131, v173, v174, v175, v177, v179, v181, v183, v184, v185, v187, v189,
                   v191,
                   v193,
                   v196,
                   v199,
                   v202,
                   v207,
                   v209);
          if ((v124 & 1) != (v133 & 1)) {
            goto LABEL_133;
          }
          unint64_t v123 = v132;
        }
        if (v124)
        {
          uint64_t v134 = (uint64_t *)(v215[7] + 16 * v123);
          swift_bridgeObjectRelease();
          *uint64_t v134 = v214;
          v134[1] = v212;
        }
        else
        {
          v215[(v123 >> 6) + 8] |= 1 << v123;
          uint64_t v135 = (uint64_t *)(v215[6] + 16 * v123);
          *uint64_t v135 = v114;
          v135[1] = v95;
          uint64_t v136 = (uint64_t *)(v215[7] + 16 * v123);
          *uint64_t v136 = v214;
          v136[1] = v212;
          uint64_t v137 = v215[2];
          BOOL v46 = __OFADD__(v137, 1);
          uint64_t v138 = v137 + 1;
          if (v46) {
            goto LABEL_122;
          }
          v215[2] = v138;
          swift_bridgeObjectRetain();
        }
        *(void *)uint64_t v209 = v215;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        uint64_t v91 = (void *)v196;
        uint64_t v77 = (void (*)(void *@<X8>))v199;
      }
      swift_bridgeObjectRetain();
      sub_100093428((uint64_t)v77);
      char v139 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v140 = v189;
      sub_100021098(v189, v87, v141, v142, v143, v144, v145, v146, v173, v174, v175, v177, v179, v181, v183, v184, v185, v187, v189,
        v191,
        v193,
        v196,
        v199,
        v202,
        v207,
        v209);
      sub_1000941BC();
      if (v46) {
        goto LABEL_118;
      }
      uint64_t v149 = v147;
      char v150 = v148;
      sub_10000BF1C(&qword_10017F0D0);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v139, (Swift::Int)v9))
      {
        uint64_t v157 = sub_100021098(v140, v87, v151, v152, v153, v154, v155, v156, v173, v174, v175, v177, v179, v181, v183, v184, v185, v187, v189,
                 v191,
                 v193,
                 v194,
                 v197,
                 v203,
                 v208,
                 v209);
        if ((v150 & 1) != (v158 & 1)) {
          goto LABEL_133;
        }
        uint64_t v149 = v157;
      }
      swift_bridgeObjectRelease();
      if ((v150 & 1) == 0)
      {
        sub_10009401C();
        *char v159 = v140;
        v159[1] = v87;
        *(void *)(v9[7] + 8 * v149) = _swiftEmptyArrayStorage;
        uint64_t v160 = v9[2];
        uint64_t v161 = v160 + 1;
        BOOL v162 = __OFADD__(v160, 1);
        swift_bridgeObjectRetain();
        if (v162) {
          goto LABEL_121;
        }
        _OWORD v9[2] = v161;
      }
      swift_bridgeObjectRetain();
      uint64_t v163 = v9[7];
      swift_bridgeObjectRelease();
      uint64_t v164 = *(void *)(v163 + 8 * v149);
      char v165 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v163 + 8 * v149) = v164;
      long long v166 = v91;
      if ((v165 & 1) == 0)
      {
        sub_100094184();
        sub_10001E7C0();
        uint64_t v164 = v169;
        *(void *)(v163 + 8 * v149) = v169;
      }
      unint64_t v167 = *(void *)(v164 + 16);
      if (v167 >= *(void *)(v164 + 24) >> 1)
      {
        sub_10001E7C0();
        uint64_t v164 = v170;
        *(void *)(v163 + 8 * v149) = v170;
      }
      *(void *)(v164 + 16) = v167 + 1;
      uint64_t v168 = v164 + 16 * v167;
      *(void *)(v168 + 32) = v214;
      *(void *)(v168 + 40) = v212;
      swift_bridgeObjectRelease();

      uint64_t v89 = v208 + 1;
      uint64_t v77 = sub_10008F2F4;
      if (v203 == v187) {
        goto LABEL_111;
      }
    }
    __break(1u);
LABEL_118:
    __break(1u);
  }
  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  __break(1u);
LABEL_123:
  __break(1u);
LABEL_124:
  __break(1u);
LABEL_125:
  __break(1u);
LABEL_126:
  __break(1u);
LABEL_127:
  __break(1u);
LABEL_128:
  __break(1u);
LABEL_129:
  __break(1u);
LABEL_130:
  __break(1u);
LABEL_131:
  __break(1u);
LABEL_132:
  __break(1u);
LABEL_133:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_134:
  sub_1000940E8();
  sub_1000940D0();
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_10008F2F4(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
}

uint64_t sub_10008F304(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, void *a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t v72 = *a2;
  uint64_t v17 = a2[2];
  uint64_t v69 = a2[1];
  uint64_t v18 = a2[3];
  sub_10008E198(v17, v18);
  int64_t v80 = v19;
  uint64_t v21 = v20;
  _s7BuilderVMa();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v22 = swift_bridgeObjectRetain();
  uint64_t v23 = sub_10008B404(v22, a3, a4);
  uint64_t v25 = sub_10008F848(a3, a4, v72, v69, v17, v18, v21, v24, v64, v65, v66, a6, a7, v23, a8, a9, a10);
  if (v14)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v27 = v25;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  int64_t v28 = 0;
  uint64_t v70 = v27 + 64;
  uint64_t v29 = 1 << *(unsigned char *)(v27 + 32);
  if (v29 < 64) {
    uint64_t v30 = ~(-1 << v29);
  }
  else {
    uint64_t v30 = -1;
  }
  unint64_t v31 = v30 & *(void *)(v27 + 64);
  int64_t v73 = (unint64_t)(v29 + 63) >> 6;
  uint64_t v75 = v27;
  uint64_t v32 = a1;
  uint64_t v68 = v17;
  while (v31)
  {
    unint64_t v33 = __clz(__rbit64(v31));
    v31 &= v31 - 1;
    unint64_t v34 = v33 | (v28 << 6);
LABEL_23:
    int64_t v80 = v28;
    uint64_t v38 = (uint64_t *)(*(void *)(v27 + 48) + 16 * v34);
    uint64_t v39 = *v38;
    uint64_t v40 = v38[1];
    uint64_t v41 = (uint64_t *)(*(void *)(v27 + 56) + 16 * v34);
    uint64_t v42 = v41[1];
    uint64_t v77 = *v41;
    uint64_t v43 = *a11;
    if (!*(void *)(*a11 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v44 = Hasher._finalize()();
    uint64_t v45 = -1 << *(unsigned char *)(v43 + 32);
    unint64_t v46 = v44 & ~v45;
    uint64_t v47 = v43 + 56;
    if ((*(void *)(v43 + 56 + ((v46 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v46))
    {
      uint64_t v48 = *(void *)(v43 + 48);
      uint64_t v49 = (void *)(v48 + 16 * v46);
      BOOL v50 = *v49 == v39 && v49[1] == v40;
      if (!v50 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v67 = ~v45;
        unint64_t v51 = (v46 + 1) & ~v45;
        if ((*(void *)(v47 + ((v51 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v51))
        {
          uint64_t v52 = (void *)(v48 + 16 * v51);
          BOOL v53 = *v52 == v39 && v52[1] == v40;
          if (v53 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_36;
          }
          for (unint64_t i = v51 + 1; ; unint64_t i = v55 + 1)
          {
            unint64_t v55 = i & v67;
            if (((*(void *)(v47 + (((i & v67) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v67)) & 1) == 0) {
              break;
            }
            char v56 = (void *)(v48 + 16 * v55);
            BOOL v57 = *v56 == v39 && v56[1] == v40;
            if (v57 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
              goto LABEL_36;
            }
          }
        }
        goto LABEL_46;
      }
LABEL_36:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v32 = a1;
      uint64_t v17 = v68;
      uint64_t v27 = v75;
      int64_t v28 = v80;
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
LABEL_46:
      swift_bridgeObjectRelease();
      uint64_t v32 = a1;
      uint64_t v17 = v68;
LABEL_47:
      swift_bridgeObjectRetain();
      sub_100023984(&v79, v39, v40);
      swift_bridgeObjectRelease();
      id v58 = [a14 intentIdentifier];
      uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v61 = v60;

      id v62 = objc_allocWithZone((Class)LNExamplePhraseDescription);
      uint64_t v63 = swift_bridgeObjectRetain();
      sub_100091B70(0, v59, v61, v39, v40, v77, v42, v17, v63);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*v32 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v32 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized Array._endMutation()();
      uint64_t v27 = v75;
      int64_t v28 = v80;
    }
  }
  int64_t v35 = v28 + 1;
  if (__OFADD__(v28, 1))
  {
    __break(1u);
    goto LABEL_52;
  }
  if (v35 >= v73) {
    return swift_release();
  }
  unint64_t v36 = *(void *)(v70 + 8 * v35);
  ++v28;
  if (v36) {
    goto LABEL_22;
  }
  int64_t v28 = v35 + 1;
  if (v35 + 1 >= v73) {
    return swift_release();
  }
  unint64_t v36 = *(void *)(v70 + 8 * v28);
  if (v36) {
    goto LABEL_22;
  }
  int64_t v28 = v35 + 2;
  if (v35 + 2 >= v73) {
    return swift_release();
  }
  unint64_t v36 = *(void *)(v70 + 8 * v28);
  if (v36)
  {
LABEL_22:
    unint64_t v31 = (v36 - 1) & v36;
    unint64_t v34 = __clz(__rbit64(v36)) + (v28 << 6);
    goto LABEL_23;
  }
  int64_t v37 = v35 + 3;
  if (v37 >= v73) {
    return swift_release();
  }
  unint64_t v36 = *(void *)(v70 + 8 * v37);
  if (v36)
  {
    int64_t v28 = v37;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v28 = v37 + 1;
    if (__OFADD__(v37, 1)) {
      break;
    }
    if (v28 >= v73) {
      return swift_release();
    }
    unint64_t v36 = *(void *)(v70 + 8 * v28);
    ++v37;
    if (v36) {
      goto LABEL_22;
    }
  }
LABEL_52:
  __break(1u);
  return result;
}

uint64_t sub_10008F848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t isUniquelyReferenced_nonNull_native, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16, uint64_t a17)
{
  uint64_t v379 = a3;
  uint64_t v20 = a14;
  uint64_t v21 = String.subscript.getter();
  uint64_t v417 = v22;
  uint64_t v420 = v21;
  uint64_t v414 = v23;
  uint64_t v416 = a2;
  uint64_t v426 = v24;
  uint64_t v423 = a7;
  unint64_t v25 = *(void *)(a7 + 16);
  uint64_t v26 = *(void *)(a14 + 16);
  unint64_t v383 = isUniquelyReferenced_nonNull_native;
  if (!v26)
  {
    v389 = _swiftEmptyDictionarySingleton;
    goto LABEL_23;
  }
  unint64_t v413 = *(void *)(a7 + 16);
  swift_bridgeObjectRetain();
  uint64_t v27 = 0;
  int64_t v28 = _swiftEmptyDictionarySingleton;
  do
  {
    uint64_t v29 = *(void *)(v20 + v27 + 40);
    uint64_t v436 = *(void *)(v20 + v27 + 32);
    uint64_t v30 = *(void *)(v20 + v27 + 48);
    uint64_t v31 = *(void *)(v20 + v27 + 56);
    uint64_t v32 = *(void *)(v20 + v27 + 72);
    uint64_t v430 = v26;
    uint64_t v433 = *(void *)(v20 + v27 + 64);
    uint64_t v33 = *(void *)(v20 + v27 + 80);
    char v34 = *(unsigned char *)(v20 + v27 + 88);
    char v35 = *(unsigned char *)(v20 + v27 + 89);
    uint64_t v36 = v28[2];
    uint64_t v446 = v29;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    uint64_t v443 = v32;
    swift_bridgeObjectRetain();
    uint64_t v439 = v33;
    swift_bridgeObjectRetain();
    if (v36)
    {
      uint64_t v43 = v28;
      uint64_t v44 = sub_100021098(v30, v31, v37, v38, v39, v40, v41, v42, v352, v354, v356, v358, v360, v362, v364, v366, v368, v370, v372,
              v374,
              v377,
              v379,
              v380,
              v383,
              v384,
              v386);
      uint64_t v45 = _swiftEmptyArrayStorage;
      if (v46)
      {
        uint64_t v45 = *(void **)(v28[7] + 8 * v44);
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      uint64_t v43 = v28;
      uint64_t v45 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_100094140();
      sub_10001ED78();
      uint64_t v45 = v78;
    }
    unint64_t v48 = v45[2];
    unint64_t v47 = v45[3];
    if (v48 >= v47 >> 1)
    {
      sub_100094088(v47);
      sub_10001ED78();
      uint64_t v45 = v79;
    }
    v45[2] = v48 + 1;
    uint64_t v49 = &v45[8 * v48];
    v49[4] = v436;
    void v49[5] = v446;
    v49[6] = v30;
    v49[7] = v31;
    v49[8] = v433;
    v49[9] = v443;
    v49[10] = v439;
    *((unsigned char *)v49 + 88) = v34;
    *((unsigned char *)v49 + 89) = v35;
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v456 = v43;
    uint64_t v56 = sub_100021098(v30, v31, v50, v51, v52, v53, v54, v55, v352, v354, v356, v358, v360, v362, v364, v366, v368, v370, v372,
            v374,
            v377,
            v379,
            v380,
            v383,
            v384,
            v386);
    uint64_t v58 = v43[2];
    BOOL v59 = (v57 & 1) == 0;
    Swift::Int v60 = v58 + v59;
    if (__OFADD__(v58, v59))
    {
LABEL_307:
      __break(1u);
LABEL_308:
      swift_bridgeObjectRelease();
      swift_release();
LABEL_310:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (qword_10017C460 != -1) {
        goto LABEL_335;
      }
      goto LABEL_311;
    }
    uint64_t v61 = v56;
    char v62 = v57;
    sub_10000BF1C(&qword_10017F0B8);
    Swift::Bool v63 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v60);
    a2 = v416;
    if (v63)
    {
      sub_100021098(v30, v31, v64, v65, v66, v67, v68, v69, v352, v354, v356, v358, v360, v362, v364, v366, v368, v370, v372,
        v374,
        v377,
        v379,
        v380,
        v383,
        v384,
        v386);
      sub_100094118();
      if (!v204)
      {
LABEL_336:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
LABEL_337:
        sub_1000940E8();
        sub_1000940D0();
        _fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        goto LABEL_338;
      }
      uint64_t v61 = v70;
    }
    int64_t v28 = v456;
    if (v62)
    {
      uint64_t v71 = v456;
      uint64_t v72 = v456[7];
      swift_bridgeObjectRelease();
      *(void *)(v72 + 8 * v61) = v45;
      int64_t v28 = v71;
    }
    else
    {
      sub_100094044();
      uint64_t v74 = (uint64_t *)(v73 + 16 * v61);
      *uint64_t v74 = v30;
      v74[1] = v31;
      *(void *)(v28[7] + 8 * v61) = v45;
      uint64_t v75 = v28[2];
      BOOL v76 = __OFADD__(v75, 1);
      uint64_t v77 = v75 + 1;
      if (v76) {
        goto LABEL_316;
      }
      void v28[2] = v77;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    v27 += 64;
    uint64_t v20 = a14;
    --v26;
  }
  while (v430 != 1);
  v389 = v28;
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = v383;
  unint64_t v25 = v413;
LABEL_23:
  if (a15)
  {
    if (!v25)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (qword_10017C460 != -1) {
        goto LABEL_331;
      }
      goto LABEL_78;
    }
    swift_bridgeObjectRetain();
    sub_10001B680(v420, v417, v414, v426, v423);
    char v81 = v80;
    swift_bridgeObjectRelease();
    if (v81)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (qword_10017C460 != -1) {
        goto LABEL_333;
      }
      goto LABEL_81;
    }
  }
  if (v25 > 5)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_10017C460 == -1) {
      goto LABEL_28;
    }
    goto LABEL_328;
  }
  sub_1000427DC(a13, v450);
  uint64_t v434 = v450[0];
  int64_t v437 = v450[3];
  uint64_t v90 = v450[4];
  uint64_t v427 = v450[1];
  int64_t v431 = (unint64_t)(v450[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v91 = _swiftEmptyDictionarySingleton;
  if (!v90) {
    goto LABEL_32;
  }
LABEL_31:
  sub_10009423C();
  uint64_t v440 = v90;
  for (unint64_t i = v92 | (v437 << 6); ; unint64_t i = __clz(__rbit64(v95)) + (v96 << 6))
  {
    uint64_t v100 = *(void *)(*(void *)(v434 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v101 = String.subscript.getter();
    uint64_t v103 = v102;
    uint64_t v105 = v104;
    uint64_t v107 = v106;
    uint64_t v447 = v100;
    swift_bridgeObjectRetain();
    char v108 = swift_isUniquelyReferenced_nonNull_native();
    v456 = v91;
    uint64_t v444 = v101;
    unint64_t v109 = sub_1000211E0();
    uint64_t v111 = v91[2];
    BOOL v112 = (v110 & 1) == 0;
    char isUniquelyReferenced_nonNull_native = v111 + v112;
    if (__OFADD__(v111, v112))
    {
      __break(1u);
LABEL_316:
      __break(1u);
LABEL_317:
      __break(1u);
LABEL_318:
      __break(1u);
LABEL_319:
      __break(1u);
LABEL_320:
      __break(1u);
LABEL_321:
      __break(1u);
LABEL_322:
      __break(1u);
LABEL_323:
      __break(1u);
LABEL_324:
      __break(1u);
LABEL_325:
      __break(1u);
LABEL_326:
      __break(1u);
LABEL_327:
      __break(1u);
LABEL_328:
      swift_once();
LABEL_28:
      uint64_t v82 = type metadata accessor for Logger();
      sub_10000BEE4(v82, (uint64_t)qword_100181ED8);
      swift_bridgeObjectRetain_n();
      unint64_t v83 = (void *)Logger.logObject.getter();
      os_log_type_t v84 = static os_log_type_t.error.getter();
      if (sub_100035C94(v84))
      {
        sub_100035CD0();
        uint64_t v85 = sub_100035C78();
        sub_100094270(v85);
        sub_100035C28(4.8149e-34);
        uint64_t v86 = sub_100013090(v379, isUniquelyReferenced_nonNull_native, (uint64_t *)&v456);
        sub_100093FF4(v86);
        sub_100035DC0();
        uint64_t v89 = "Skipping phrase template with too many tokens: %s";
        goto LABEL_83;
      }
      goto LABEL_84;
    }
    unint64_t v113 = v109;
    char v114 = v110;
    sub_10000BF1C(&qword_10017C8F8);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v108, isUniquelyReferenced_nonNull_native))
    {
      sub_1000211E0();
      sub_100094118();
      if (!v204) {
        goto LABEL_336;
      }
      unint64_t v113 = v115;
    }
    uint64_t v91 = v456;
    if (v114)
    {
      uint64_t v116 = v456[7];
      swift_bridgeObjectRelease();
      *(void *)(v116 + 8 * v113) = v447;
    }
    else
    {
      sub_100094044();
      uint64_t v118 = (uint64_t *)(v117 + 32 * v113);
      *uint64_t v118 = v444;
      v118[1] = v103;
      v118[2] = v105;
      v118[3] = v107;
      *(void *)(v91[7] + 8 * v113) = v447;
      uint64_t v119 = v91[2];
      BOOL v76 = __OFADD__(v119, 1);
      uint64_t v120 = v119 + 1;
      if (v76) {
        goto LABEL_317;
      }
      v91[2] = v120;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a2 = v416;
    uint64_t v90 = v440;
    if (v440) {
      goto LABEL_31;
    }
LABEL_32:
    int64_t v94 = v437 + 1;
    if (__OFADD__(v437, 1)) {
      goto LABEL_318;
    }
    if (v94 >= v431) {
      break;
    }
    unint64_t v95 = *(void *)(v427 + 8 * v94);
    int64_t v96 = v437 + 1;
    if (!v95)
    {
      sub_100094230();
      if (v97 == v76) {
        break;
      }
      sub_100094224();
      if (!v95)
      {
        sub_100094230();
        if (v97 == v76) {
          break;
        }
        sub_100094224();
        if (!v95)
        {
          sub_100094230();
          if (v97 == v76) {
            break;
          }
          sub_100094224();
          if (!v95)
          {
            sub_100094230();
            if (v97 == v76) {
              break;
            }
            sub_100094224();
            if (!v95)
            {
              int64_t v96 = v98 + 5;
              if (v98 + 5 >= v431) {
                break;
              }
              unint64_t v95 = *(void *)(v427 + 8 * v96);
              if (!v95)
              {
                int64_t v99 = v437 + 7;
                do
                {
                  if (v99 >= v431) {
                    goto LABEL_65;
                  }
                  unint64_t v95 = *(void *)(v427 + 8 * v99++);
                }
                while (!v95);
                int64_t v96 = v99 - 1;
              }
            }
          }
        }
      }
    }
    int64_t v437 = v96;
    uint64_t v440 = (v95 - 1) & v95;
  }
LABEL_65:
  swift_release();
  uint64_t v121 = *(void *)(a12 + 16);
  unint64_t v122 = (unint64_t)_swiftEmptyArrayStorage;
  if (v121)
  {
    unint64_t v123 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    char v124 = _swiftEmptyArrayStorage;
    do
    {
      char isUniquelyReferenced_nonNull_native = *(v123 - 1);
      uint64_t v125 = *v123;
      uint64_t v126 = HIBYTE(*v123) & 0xF;
      if ((*v123 & 0x2000000000000000) == 0) {
        uint64_t v126 = isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFLL;
      }
      if (v126)
      {
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000940B8();
          sub_10001E7C0();
          char v124 = v130;
        }
        unint64_t v128 = v124[2];
        unint64_t v127 = v124[3];
        if (v128 >= v127 >> 1)
        {
          sub_100094128(v127);
          sub_10001E7C0();
          char v124 = v131;
        }
        v124[2] = v128 + 1;
        uint64_t v129 = &v124[2 * v128];
        v129[4] = isUniquelyReferenced_nonNull_native;
        v129[5] = v125;
        a2 = v416;
      }
      v123 += 2;
      --v121;
    }
    while (v121);
    swift_bridgeObjectRelease();
  }
  else
  {
    char v124 = _swiftEmptyArrayStorage;
  }
  uint64_t v142 = swift_isUniquelyReferenced_nonNull_native();
  v456 = v91;
  sub_10000CAB4((uint64_t)v124, v420, v417, v414, v426, v142);
  uint64_t v375 = (uint64_t)v456;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000BF1C(&qword_10017D4A0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013EF20;
  *(void *)(inited + 32) = a5;
  *(void *)(inited + 40) = a6;
  *(void *)(inited + 48) = a1;
  *(void *)(inited + 56) = a2;
  uint64_t v381 = inited;
  *(void *)(inited + 64) = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v144 = swift_bridgeObjectRetain();
  sub_100049C18(v144, v145, v146, v147, v148, v149, v150, v151, v352, v354, v356, v358, v360, v362, v364, v366, v368, a17, v372,
    v375,
    v377,
    v379,
    v381,
    v383,
    v384,
    v386);
  uint64_t v153 = v152;
  swift_bridgeObjectRelease();
  v456 = v153;
  sub_100091D00((uint64_t *)&v456, (uint64_t (*)(uint64_t))sub_1000AC454, sub_100033934);
  if (v387)
  {
LABEL_338:
    uint64_t result = swift_release();
    __break(1u);
    return result;
  }
  uint64_t v388 = 0;
  uint64_t v154 = v456;
  uint64_t v155 = v389;
  uint64_t v367 = v456[2];
  if (v367)
  {
    unint64_t v156 = 0;
    uint64_t v369 = (uint64_t)(v456 + 4);
    uint64_t v365 = (uint64_t)v456;
    do
    {
      if (v156 >= v154[2]) {
        goto LABEL_327;
      }
      uint64_t v373 = v156;
      uint64_t v157 = (unint64_t *)(v369 + 48 * v156);
      unint64_t v158 = *v157;
      unint64_t v159 = v157[1];
      uint64_t v160 = v157[2];
      uint64_t v161 = v157[3];
      swift_bridgeObjectRetain();
      uint64_t v448 = v160;
      uint64_t v162 = static String._fromSubstring(_:)();
      unint64_t v435 = v159;
      unint64_t v438 = v158;
      unint64_t v441 = v159 >> 16;
      uint64_t v432 = v161;
      if (v155[2]
        && (uint64_t v170 = sub_100021098(v162, v163, v164, v165, v166, v167, v168, v169, v353, v355, v357, v359, v361, v363, v365, v367, v369, v371, v373,
                     v376,
                     v378,
                     v379,
                     (uint64_t)v382,
                     v383,
                     v385,
                     v388),
            uint64_t v155 = v389,
            (v171 & 1) != 0))
      {
        uint64_t v172 = *(void *)(v389[7] + 8 * v170);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v363 = v382[2];
        if (v363)
        {
          uint64_t v359 = (uint64_t)(v382 + 4);
          uint64_t v390 = v172 + 32;
          uint64_t v391 = *(void *)(v172 + 16);
          swift_bridgeObjectRetain();
          uint64_t v378 = 0;
          uint64_t v173 = _swiftEmptyArrayStorage;
          uint64_t v385 = v172;
          while (!v391)
          {
            int64_t v179 = _swiftEmptyArrayStorage;
LABEL_136:
            uint64_t v215 = v179[2];
            uint64_t v216 = v173[2];
            if (__OFADD__(v216, v215))
            {
              __break(1u);
LABEL_330:
              __break(1u);
LABEL_331:
              swift_once();
LABEL_78:
              uint64_t v132 = type metadata accessor for Logger();
              sub_10000BEE4(v132, (uint64_t)qword_100181ED8);
              sub_10009419C();
              unint64_t v83 = (void *)Logger.logObject.getter();
              os_log_type_t v133 = static os_log_type_t.error.getter();
              if (sub_100035C94(v133))
              {
                sub_100035CD0();
                uint64_t v134 = sub_100035C78();
                sub_100094270(v134);
                sub_100035C28(4.8149e-34);
                uint64_t v135 = sub_100013090(a5, isUniquelyReferenced_nonNull_native, (uint64_t *)&v456);
                sub_100093FF4(v135);
                sub_100035DC0();
                goto LABEL_83;
              }
LABEL_84:

              swift_bridgeObjectRelease_n();
              return Dictionary.init(dictionaryLiteral:)();
            }
            char isUniquelyReferenced_nonNull_native = (uint64_t)v173;
            char v217 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v218 = isUniquelyReferenced_nonNull_native;
            if ((v217 & 1) == 0 || v216 + v215 > *(void *)(isUniquelyReferenced_nonNull_native + 24) >> 1)
            {
              sub_10001F26C();
              uint64_t v218 = v219;
            }
            if (v179[2])
            {
              uint64_t v220 = *(void *)(v218 + 16);
              if ((*(void *)(v218 + 24) >> 1) - v220 < v215)
              {
                __break(1u);
LABEL_333:
                swift_once();
LABEL_81:
                uint64_t v136 = type metadata accessor for Logger();
                sub_10000BEE4(v136, (uint64_t)qword_100181ED8);
                sub_10009419C();
                unint64_t v83 = (void *)Logger.logObject.getter();
                os_log_type_t v137 = static os_log_type_t.error.getter();
                if (!sub_100035C94(v137)) {
                  goto LABEL_84;
                }
                sub_100035CD0();
                uint64_t v138 = sub_100035C78();
                sub_100094270(v138);
                sub_100035C28(4.8149e-34);
                uint64_t v139 = sub_100013090(a5, isUniquelyReferenced_nonNull_native, (uint64_t *)&v456);
                sub_100093FF4(v139);
                sub_100035DC0();
LABEL_83:
                sub_100035E58((void *)&_mh_execute_header, v87, v88, v89);
                swift_arrayDestroy();
                sub_10000EB10();
                sub_10000EB10();

                return Dictionary.init(dictionaryLiteral:)();
              }
              unint64_t v221 = v218 + 40 * v220 + 32;
              sub_1000941F0();
              BOOL v224 = v224 || v221 >= v223;
              if (!v224) {
                goto LABEL_337;
              }
              char isUniquelyReferenced_nonNull_native = v222;
              sub_10000BF1C(&qword_10017D4A8);
              sub_1000941D0();
              if (v215)
              {
                uint64_t v225 = *(void *)(isUniquelyReferenced_nonNull_native + 16);
                BOOL v76 = __OFADD__(v225, v215);
                uint64_t v226 = v225 + v215;
                if (v76)
                {
                  __break(1u);
LABEL_335:
                  swift_once();
LABEL_311:
                  uint64_t v345 = type metadata accessor for Logger();
                  sub_10000BEE4(v345, (uint64_t)qword_100181ED8);
                  swift_bridgeObjectRetain_n();
                  v346 = (void *)Logger.logObject.getter();
                  os_log_type_t v347 = static os_log_type_t.error.getter();
                  if (sub_100035C94(v347))
                  {
                    sub_100035CD0();
                    uint64_t v348 = sub_100035C78();
                    sub_100094270(v348);
                    sub_100035C28(4.8149e-34);
                    uint64_t v349 = sub_100013090(v379, v383, (uint64_t *)&v456);
                    sub_100093FF4(v349);
                    sub_100035DC0();
                    sub_100035E58((void *)&_mh_execute_header, v350, v351, "Skipping phrase template with an unrecognized token: %s");
                    swift_arrayDestroy();
                    sub_10000EB10();
                    sub_10000EB10();
                  }
                  else
                  {

                    swift_bridgeObjectRelease_n();
                  }
                  uint64_t v140 = (void *)Dictionary.init(dictionaryLiteral:)();
                  goto LABEL_305;
                }
                *(void *)(isUniquelyReferenced_nonNull_native + 16) = v226;
              }
            }
            else
            {
              char isUniquelyReferenced_nonNull_native = v218;
              if (v215) {
                goto LABEL_330;
              }
            }
            swift_bridgeObjectRelease();
            ++v378;
            uint64_t v155 = v389;
            uint64_t v173 = (void *)isUniquelyReferenced_nonNull_native;
            if (v378 == v363)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
              v382 = (void *)isUniquelyReferenced_nonNull_native;
              goto LABEL_231;
            }
          }
          uint64_t v361 = (uint64_t)v173;
          uint64_t v174 = (void *)(v359 + 40 * v378);
          uint64_t v175 = v174[1];
          uint64_t v176 = v174[3];
          uint64_t v402 = v174[2];
          v404 = (void *)*v174;
          uint64_t v177 = v174[4];
          swift_bridgeObjectRetain();
          uint64_t v406 = v177;
          swift_bridgeObjectRetain();
          uint64_t v408 = v175;
          swift_bridgeObjectRetain();
          uint64_t v428 = v176;
          swift_bridgeObjectRetain();
          uint64_t v178 = 0;
          int64_t v179 = _swiftEmptyArrayStorage;
          while (2)
          {
            uint64_t v180 = (uint64_t *)(v390 + (v178 << 6));
            uint64_t v181 = v180[6];
            a5 = *(void *)(v181 + 16);
            if (!a5) {
              goto LABEL_133;
            }
            uint64_t v392 = v178;
            unint64_t v182 = v180[3];
            uint64_t v397 = v180[2];
            uint64_t v399 = *v180;
            uint64_t v183 = v180[5];
            uint64_t v396 = v180[4];
            char v394 = *((unsigned char *)v180 + 56);
            char v395 = *((unsigned char *)v180 + 57);
            uint64_t v424 = v180[1];
            swift_bridgeObjectRetain();
            unint64_t v421 = v182;
            swift_bridgeObjectRetain();
            uint64_t v418 = v183;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain_n();
            sub_10003456C();
            uint64_t v184 = 0;
LABEL_100:
            uint64_t v185 = (uint64_t *)(v181 + 32 + 16 * v184);
            uint64_t v186 = *v185;
            uint64_t v187 = v185[1];
            v456 = v404;
            uint64_t v457 = v408;
            uint64_t v451 = v186;
            uint64_t v452 = v187;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            String.replaceSubrange<A>(_:with:)();
            if (qword_10017C408 != -1) {
              swift_once();
            }
            uint64_t v188 = qword_100181D68;
            uint64_t v189 = *(void *)(qword_100181D68 + 16);
            if (v189)
            {
              if ((sub_10009336C(*(void *)(qword_100181D68 + 32), *(void *)(qword_100181D68 + 40), *(void *)(qword_100181D68 + 48), *(void *)(qword_100181D68 + 56), v438, v435, v448, v432) & 1) == 0)
              {
                if (v189 == 1) {
                  goto LABEL_105;
                }
                uint64_t v197 = (void *)(v188 + 88);
                uint64_t v198 = 1;
                while (1)
                {
                  uint64_t v199 = v198 + 1;
                  if (__OFADD__(v198, 1))
                  {
                    __break(1u);
                    goto LABEL_287;
                  }
                  sub_10009409C();
                  BOOL v204 = v204 && v200 == v432;
                  BOOL v205 = v204 && v201 == v203;
                  if (v205 && v202 == v441) {
                    break;
                  }
                  LOBYTE(v353) = 0;
                  if (_stringCompareInternal(_:_:_:_:expecting:)()) {
                    break;
                  }
                  ++v198;
                  v197 += 4;
                  if (v199 == v189) {
                    goto LABEL_105;
                  }
                }
                a2 = v416;
              }
              uint64_t v193 = v406;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
LABEL_105:
              uint64_t v190 = sub_100094168();
              char v192 = sub_1000B48B8(v190, v191, a16);
              swift_bridgeObjectRelease();
              unint64_t v122 = v421;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              uint64_t v193 = v406;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                sub_100094204();
                uint64_t v193 = v213;
              }
              unint64_t v195 = *(void *)(v193 + 16);
              unint64_t v194 = *(void *)(v193 + 24);
              if (v195 >= v194 >> 1)
              {
                sub_100035E4C(v194);
                sub_10001ED78();
                uint64_t v193 = v214;
              }
              *(void *)(v193 + 16) = v195 + 1;
              uint64_t v196 = v193 + (v195 << 6);
              *(void *)(v196 + 32) = v399;
              *(void *)(v196 + 40) = v424;
              *(void *)(v196 + 48) = v397;
              *(void *)(v196 + 56) = v421;
              *(void *)(v196 + 64) = v396;
              *(void *)(v196 + 72) = v418;
              *(void *)(v196 + 80) = v181;
              *(unsigned char *)(v196 + 88) = v394;
              *(unsigned char *)(v196 + 89) = (v192 | v395) & 1;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              a2 = v416;
            }
            swift_bridgeObjectRelease();
            uint64_t v207 = v456;
            char isUniquelyReferenced_nonNull_native = v457;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_1000940B8();
              sub_10001F26C();
              int64_t v179 = v211;
            }
            unint64_t v209 = v179[2];
            unint64_t v208 = v179[3];
            if (v209 >= v208 >> 1)
            {
              sub_100094128(v208);
              sub_10001F26C();
              int64_t v179 = v212;
            }
            ++v184;
            v179[2] = v209 + 1;
            uint64_t v210 = &v179[5 * v209];
            v210[4] = v207;
            v210[5] = isUniquelyReferenced_nonNull_native;
            v210[6] = v402;
            v210[7] = v428;
            v210[8] = v193;
            if (v184 == a5)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
              unint64_t v122 = (unint64_t)_swiftEmptyArrayStorage;
              uint64_t v178 = v392;
LABEL_133:
              if (++v178 == v391)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v173 = (void *)v361;
                goto LABEL_136;
              }
              continue;
            }
            goto LABEL_100;
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v382 = _swiftEmptyArrayStorage;
      }
      else
      {
        swift_bridgeObjectRelease();
        if (!*(void *)(v376 + 16)) {
          goto LABEL_308;
        }
        swift_bridgeObjectRetain();
        unint64_t v227 = sub_1000211E0();
        if ((v228 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_310;
        }
        uint64_t v229 = *(void *)(*(void *)(v376 + 56) + 8 * v227);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v398 = v382[2];
        if (v398)
        {
          uint64_t v230 = *(void *)(v229 + 16);
          uint64_t v405 = v229 + 32;
          swift_bridgeObjectRetain();
          uint64_t v231 = 0;
          id v232 = _swiftEmptyArrayStorage;
          uint64_t v403 = v230;
          do
          {
            uint64_t v401 = v231;
            if (v230)
            {
              v400 = v232;
              uint64_t v233 = &v382[5 * v231 + 4];
              uint64_t v234 = v233[1];
              uint64_t v235 = v233[3];
              uint64_t v407 = v233[2];
              v409 = (void *)*v233;
              uint64_t v236 = v233[4];
              v461 = _swiftEmptyArrayStorage;
              uint64_t v411 = v234;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              uint64_t v410 = v236;
              swift_bridgeObjectRetain();
              sub_100057D8C();
              uint64_t v237 = 0;
              v429 = v461;
              while (1)
              {
                uint64_t v238 = (uint64_t *)(v405 + 16 * v237);
                uint64_t v240 = *v238;
                uint64_t v239 = v238[1];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                uint64_t v419 = sub_100094168();
                uint64_t v422 = v241;
                sub_10000BF1C((uint64_t *)&unk_10017E690);
                unint64_t v122 = swift_allocObject();
                *(_OWORD *)(v122 + 16) = xmmword_10013EF20;
                *(void *)(v122 + 32) = v240;
                *(void *)(v122 + 40) = v239;
                v456 = v409;
                uint64_t v457 = v411;
                uint64_t v451 = v240;
                uint64_t v452 = v239;
                sub_10003456C();
                swift_bridgeObjectRetain_n();
                swift_bridgeObjectRetain();
                String.replaceSubrange<A>(_:with:)();
                if (qword_10017C408 != -1) {
                  swift_once();
                }
                uint64_t v242 = qword_100181D68;
                char v243 = *(void **)(qword_100181D68 + 16);
                if (v243)
                {
                  if (sub_10009336C(*(void *)(qword_100181D68 + 32), *(void *)(qword_100181D68 + 40), *(void *)(qword_100181D68 + 48), *(void *)(qword_100181D68 + 56), v438, v435, v448, v161))
                  {
LABEL_163:
                    swift_bridgeObjectRetain();
                    uint64_t v244 = v410;
                    swift_bridgeObjectRetain();
                    goto LABEL_193;
                  }
                  uint64_t v415 = v240;
                  if (v243 != (void *)1)
                  {
                    uint64_t v245 = v242 + 88;
                    uint64_t v246 = 1;
                    while (1)
                    {
                      int64_t v179 = (void *)(v246 + 1);
                      if (__OFADD__(v246, 1)) {
                        break;
                      }
                      sub_10009409C();
                      if (v204 && v247 == v161 && v248 == v250 && v249 == v441) {
                        goto LABEL_163;
                      }
                      LOBYTE(v353) = 0;
                      if (_stringCompareInternal(_:_:_:_:expecting:)()) {
                        goto LABEL_163;
                      }
                      ++v246;
                      v245 += 32;
                      if (v179 == v243) {
                        goto LABEL_180;
                      }
                    }
                    __break(1u);
LABEL_289:
                    uint64_t v197 = _swiftEmptyArrayStorage;
                    goto LABEL_290;
                  }
                }
                else
                {
                  uint64_t v415 = v240;
                }
LABEL_180:
                uint64_t v254 = sub_100094168();
                uint64_t v256 = v255;
                uint64_t v257 = a16[2];
                if (!v257)
                {
                  LODWORD(a5) = 0;
                  uint64_t v260 = v422;
                  goto LABEL_188;
                }
                uint64_t v258 = v254;
                BOOL v259 = a16[4] == v254 && a16[5] == v255;
                uint64_t v260 = v422;
                if (v259 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  LODWORD(a5) = 1;
                  goto LABEL_188;
                }
                if (v257 == 1)
                {
                  LODWORD(a5) = 0;
                  goto LABEL_188;
                }
                id v270 = a16 + 7;
                uint64_t v271 = 1;
                while (1)
                {
                  uint64_t v272 = v271 + 1;
                  if (__OFADD__(v271, 1))
                  {
                    __break(1u);
                    goto LABEL_307;
                  }
                  BOOL v273 = *(v270 - 1) == v258 && *v270 == v256;
                  if (v273 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                    break;
                  }
                  v270 += 2;
                  ++v271;
                  if (v272 == v257)
                  {
                    LODWORD(a5) = 0;
                    uint64_t v260 = v422;
                    goto LABEL_209;
                  }
                }
                LODWORD(a5) = 1;
                uint64_t v260 = v422;
LABEL_209:
                a2 = v416;
LABEL_188:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRetain_n();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain_n();
                swift_bridgeObjectRetain();
                uint64_t v244 = v410;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  sub_100094204();
                  uint64_t v244 = v274;
                }
                unint64_t v262 = *(void *)(v244 + 16);
                unint64_t v261 = *(void *)(v244 + 24);
                if (v262 >= v261 >> 1)
                {
                  sub_100094088(v261);
                  sub_10001ED78();
                  uint64_t v244 = v275;
                }
                *(void *)(v244 + 16) = v262 + 1;
                uint64_t v263 = v244 + (v262 << 6);
                *(void *)(v263 + 32) = a1;
                *(void *)(v263 + 40) = a2;
                *(void *)(v263 + 48) = v419;
                *(void *)(v263 + 56) = v260;
                *(void *)(v263 + 64) = v415;
                *(void *)(v263 + 72) = v239;
                *(void *)(v263 + 80) = v122;
                *(unsigned char *)(v263 + 88) = 1;
                *(unsigned char *)(v263 + 89) = a5;
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease_n();
LABEL_193:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v264 = v456;
                uint64_t v265 = v457;
                v266 = v429;
                v461 = v429;
                unint64_t v268 = v429[2];
                unint64_t v267 = v429[3];
                if (v268 >= v267 >> 1)
                {
                  sub_100035E4C(v267);
                  sub_100057D8C();
                  v266 = v461;
                }
                ++v237;
                v266[2] = v268 + 1;
                v429 = v266;
                id v269 = &v266[5 * v268];
                v269[4] = v264;
                v269[5] = v265;
                v269[6] = v407;
                v269[7] = v235;
                v269[8] = v244;
                uint64_t v230 = v403;
                uint64_t v161 = v432;
                if (v237 == v403)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  unint64_t v122 = (unint64_t)_swiftEmptyArrayStorage;
                  id v232 = v400;
                  char isUniquelyReferenced_nonNull_native = (uint64_t)v429;
                  goto LABEL_211;
                }
              }
            }
            char isUniquelyReferenced_nonNull_native = (uint64_t)_swiftEmptyArrayStorage;
LABEL_211:
            uint64_t v276 = *(void *)(isUniquelyReferenced_nonNull_native + 16);
            uint64_t v277 = v232[2];
            if (__OFADD__(v277, v276)) {
              goto LABEL_319;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0 || v277 + v276 > v232[3] >> 1)
            {
              sub_10001F26C();
              id v232 = v278;
            }
            if (*(void *)(isUniquelyReferenced_nonNull_native + 16))
            {
              uint64_t v279 = v232[2];
              if ((v232[3] >> 1) - v279 < v276) {
                goto LABEL_324;
              }
              unint64_t v280 = (unint64_t)&v232[5 * v279 + 4];
              sub_1000941F0();
              if (!v224 && v280 < v281) {
                goto LABEL_337;
              }
              sub_10000BF1C(&qword_10017D4A8);
              sub_1000941D0();
              if (v276)
              {
                uint64_t v283 = v232[2];
                BOOL v76 = __OFADD__(v283, v276);
                uint64_t v284 = v283 + v276;
                if (v76) {
                  goto LABEL_325;
                }
                v232[2] = v284;
              }
            }
            else if (v276)
            {
              goto LABEL_320;
            }
            uint64_t v231 = v401 + 1;
            swift_bridgeObjectRelease();
          }
          while (v401 + 1 != v398);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          v382 = v232;
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v382 = _swiftEmptyArrayStorage;
        }
        uint64_t v155 = v389;
      }
LABEL_231:
      swift_bridgeObjectRelease();
      unint64_t v156 = v373 + 1;
      uint64_t v154 = (void *)v365;
    }
    while (v373 + 1 != v367);
  }
  swift_bridgeObjectRelease();
  swift_release();
  v456 = _swiftEmptyArrayStorage;
  sub_1000427DC(v371, &v451);
  uint64_t v285 = v452;
  int64_t v286 = v454;
  uint64_t v287 = v455;
  int64_t v288 = (unint64_t)(v453 + 64) >> 6;
  swift_bridgeObjectRetain_n();
  if (!v287) {
    goto LABEL_234;
  }
LABEL_233:
  v287 &= v287 - 1;
  while (1)
  {
    swift_bridgeObjectRetain();
    sub_100054458();
    if (v287) {
      goto LABEL_233;
    }
LABEL_234:
    int64_t v289 = v286 + 1;
    if (__OFADD__(v286, 1)) {
      goto LABEL_321;
    }
    if (v289 >= v288) {
      break;
    }
    uint64_t v290 = *(void *)(v285 + 8 * v289);
    if (!v290)
    {
      int64_t v291 = v286 + 2;
      if (v286 + 2 >= v288) {
        break;
      }
      uint64_t v290 = *(void *)(v285 + 8 * v291);
      if (v290) {
        goto LABEL_245;
      }
      int64_t v291 = v286 + 3;
      if (v286 + 3 >= v288) {
        break;
      }
      uint64_t v290 = *(void *)(v285 + 8 * v291);
      if (v290) {
        goto LABEL_245;
      }
      int64_t v291 = v286 + 4;
      if (v286 + 4 >= v288) {
        break;
      }
      uint64_t v290 = *(void *)(v285 + 8 * v291);
      if (v290) {
        goto LABEL_245;
      }
      int64_t v291 = v286 + 5;
      if (v286 + 5 >= v288) {
        break;
      }
      uint64_t v290 = *(void *)(v285 + 8 * v291);
      if (v290)
      {
LABEL_245:
        int64_t v289 = v291;
      }
      else
      {
        int64_t v289 = v286 + 6;
        if (v286 + 6 >= v288) {
          break;
        }
        uint64_t v290 = *(void *)(v285 + 8 * v289);
        if (!v290)
        {
          int64_t v292 = v286 + 7;
          do
          {
            if (v292 >= v288) {
              goto LABEL_255;
            }
            uint64_t v290 = *(void *)(v285 + 8 * v292++);
          }
          while (!v290);
          int64_t v289 = v292 - 1;
        }
      }
    }
    uint64_t v287 = (v290 - 1) & v290;
    int64_t v286 = v289;
  }
LABEL_255:
  swift_bridgeObjectRelease();
  swift_release();
  int64_t v179 = v456;
  v461 = _swiftEmptyArrayStorage;
  sub_1000427DC(v371, &v456);
  uint64_t v293 = v457;
  int64_t v294 = v459;
  char isUniquelyReferenced_nonNull_native = v460;
  int64_t v295 = (unint64_t)(v458 + 64) >> 6;
  swift_bridgeObjectRetain_n();
  if (!isUniquelyReferenced_nonNull_native) {
    goto LABEL_257;
  }
  while (2)
  {
    isUniquelyReferenced_nonNull_native &= isUniquelyReferenced_nonNull_native - 1;
LABEL_270:
    swift_bridgeObjectRetain();
    sub_100054458();
    if (isUniquelyReferenced_nonNull_native) {
      continue;
    }
    break;
  }
LABEL_257:
  int64_t v296 = v294 + 1;
  if (__OFADD__(v294, 1)) {
    goto LABEL_322;
  }
  if (v296 >= v295) {
    goto LABEL_278;
  }
  uint64_t v297 = *(void *)(v293 + 8 * v296);
  if (v297)
  {
LABEL_269:
    char isUniquelyReferenced_nonNull_native = (v297 - 1) & v297;
    int64_t v294 = v296;
    goto LABEL_270;
  }
  int64_t v298 = v294 + 2;
  if (v294 + 2 >= v295) {
    goto LABEL_278;
  }
  uint64_t v297 = *(void *)(v293 + 8 * v298);
  if (v297) {
    goto LABEL_268;
  }
  int64_t v298 = v294 + 3;
  if (v294 + 3 >= v295) {
    goto LABEL_278;
  }
  uint64_t v297 = *(void *)(v293 + 8 * v298);
  if (v297) {
    goto LABEL_268;
  }
  int64_t v298 = v294 + 4;
  if (v294 + 4 >= v295) {
    goto LABEL_278;
  }
  uint64_t v297 = *(void *)(v293 + 8 * v298);
  if (v297) {
    goto LABEL_268;
  }
  int64_t v298 = v294 + 5;
  if (v294 + 5 >= v295) {
    goto LABEL_278;
  }
  uint64_t v297 = *(void *)(v293 + 8 * v298);
  if (v297)
  {
LABEL_268:
    int64_t v296 = v298;
    goto LABEL_269;
  }
  int64_t v296 = v294 + 6;
  if (v294 + 6 >= v295) {
    goto LABEL_278;
  }
  uint64_t v297 = *(void *)(v293 + 8 * v296);
  if (v297) {
    goto LABEL_269;
  }
  int64_t v299 = v294 + 7;
  while (v299 < v295)
  {
    uint64_t v297 = *(void *)(v293 + 8 * v299++);
    if (v297)
    {
      int64_t v296 = v299 - 1;
      goto LABEL_269;
    }
  }
LABEL_278:
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v300 = v461;
  uint64_t v301 = v461[2];
  if (!v301) {
    goto LABEL_289;
  }
  swift_bridgeObjectRetain();
  id v302 = v300 + 7;
  uint64_t v197 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v304 = *(v302 - 1);
    uint64_t v303 = *v302;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_100094184();
      sub_10001E7C0();
      uint64_t v197 = v307;
    }
    unint64_t v122 = v197[2];
    unint64_t v305 = v197[3];
    if (v122 >= v305 >> 1)
    {
      sub_100035E4C(v305);
      sub_10001E7C0();
      uint64_t v197 = v308;
    }
    v197[2] = v122 + 1;
    unint64_t v306 = &v197[2 * v122];
    v306[4] = v304;
    v306[5] = v303;
    v302 += 8;
    --v301;
  }
  while (v301);
LABEL_287:
  swift_bridgeObjectRelease();
LABEL_290:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v309 = sub_10008B95C((uint64_t)v382, (uint64_t)v197, (uint64_t)v179);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v461 = v309;
  sub_10009305C();
  uint64_t v310 = sub_1000F6E64(15, (uint64_t)v461);
  id v314 = sub_100050808(v310, v311, v312, v313);
  uint64_t v315 = v314[2];
  if (v315)
  {
    swift_bridgeObjectRetain();
    unint64_t v316 = v314 + 8;
    uint64_t v140 = _swiftEmptyDictionarySingleton;
    while (1)
    {
      uint64_t v442 = v315;
      char isUniquelyReferenced_nonNull_native = *(v316 - 4);
      uint64_t v317 = *(v316 - 3);
      uint64_t v318 = *(v316 - 1);
      uint64_t v319 = *v316;
      uint64_t v320 = *(v316 - 2);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v445 = sub_10009166C(v320, v318, v319);
      uint64_t v449 = v321;
      char v322 = swift_isUniquelyReferenced_nonNull_native();
      v461 = v140;
      sub_100021098(isUniquelyReferenced_nonNull_native, v317, v323, v324, v325, v326, v327, v328, v353, v355, v357, v359, v361, v363, v365, v367, v369, v371, v373,
        v376,
        v378,
        v379,
        (uint64_t)v382,
        v383,
        v385,
        v388);
      sub_10009427C();
      if (v76) {
        goto LABEL_323;
      }
      unint64_t v331 = v329;
      char v332 = v330;
      sub_10000BF1C(&qword_10017C8F0);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v322, v122))
      {
        sub_100021098(isUniquelyReferenced_nonNull_native, v317, v333, v334, v335, v336, v337, v338, v353, v355, v357, v359, v361, v363, v365, v367, v369, v371, v373,
          v376,
          v378,
          v379,
          (uint64_t)v382,
          v383,
          v385,
          v388);
        sub_100094118();
        if (!v204) {
          goto LABEL_336;
        }
        unint64_t v331 = v339;
      }
      uint64_t v140 = v461;
      if (v332)
      {
        unint64_t v340 = (uint64_t *)(v461[7] + 16 * v331);
        swift_bridgeObjectRelease();
        *unint64_t v340 = v445;
        v340[1] = v449;
      }
      else
      {
        sub_100094100((uint64_t)&v461[v331 >> 6]);
        uint64_t v341 = (uint64_t *)(v140[6] + 16 * v331);
        *uint64_t v341 = isUniquelyReferenced_nonNull_native;
        v341[1] = v317;
        id v342 = (uint64_t *)(v140[7] + 16 * v331);
        *id v342 = v445;
        v342[1] = v449;
        uint64_t v343 = v140[2];
        BOOL v76 = __OFADD__(v343, 1);
        uint64_t v344 = v343 + 1;
        if (v76) {
          goto LABEL_326;
        }
        v140[2] = v344;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      v316 += 5;
      --v315;
      if (v442 == 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_304;
      }
    }
  }
  uint64_t v140 = _swiftEmptyDictionarySingleton;
LABEL_304:
  swift_bridgeObjectRelease();
LABEL_305:
  swift_bridgeObjectRelease();
  return (uint64_t)v140;
}