uint64_t sub_10009166C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int v13;
  int v14;
  Swift::String v15;
  Swift::String v16;
  void *v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v38;
  uint64_t v39;

  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = 40;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v5 = a1;
  v6 = *(void *)(a3 + 16);
  if (v6)
  {
    v34 = a1;
    swift_bridgeObjectRetain();
    v7 = 0;
    v8 = _swiftEmptyArrayStorage;
    v35 = a3;
    while (1)
    {
      v36 = v8;
      v9 = *(void *)(a3 + v7 + 48);
      v10 = *(void *)(a3 + v7 + 56);
      v11 = *(void *)(a3 + v7 + 64);
      v12 = *(void **)(a3 + v7 + 72);
      v13 = *(unsigned __int8 *)(a3 + v7 + 88);
      v14 = *(unsigned __int8 *)(a3 + v7 + 89);
      if (v13 == 1)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        v15._countAndFlagsBits = v11;
        v15._object = v12;
        String.append(_:)(v15);
        swift_bridgeObjectRelease();
        v16._countAndFlagsBits = 34;
        v16._object = (void *)0xE100000000000000;
        String.append(_:)(v16);
        v11 = 34;
        v17 = (void *)0xE100000000000000;
        if (v14) {
          goto LABEL_7;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        v17 = v12;
        if (v14)
        {
LABEL_7:
          v38 = v9;
          v39 = v10;
          swift_bridgeObjectRetain();
          v20._countAndFlagsBits = 23357;
          v20._object = (void *)0xE200000000000000;
          String.append(_:)(v20);
          v21._countAndFlagsBits = v11;
          v21._object = v17;
          String.append(_:)(v21);
          swift_bridgeObjectRelease();
          v22._countAndFlagsBits = 93;
          v22._object = (void *)0xE100000000000000;
          String.append(_:)(v22);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_8;
        }
      }
      v38 = v9;
      v39 = v10;
      swift_bridgeObjectRetain();
      v18._countAndFlagsBits = 61;
      v18._object = (void *)0xE100000000000000;
      String.append(_:)(v18);
      v19._countAndFlagsBits = v11;
      v19._object = v17;
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_8:
      swift_bridgeObjectRelease();
      v8 = v36;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100094140();
        sub_10001E7C0();
        v8 = v26;
      }
      v24 = v8[2];
      v23 = v8[3];
      if (v24 >= v23 >> 1)
      {
        sub_100094088(v23);
        sub_10001E7C0();
        v8 = v27;
      }
      v8[2] = v24 + 1;
      v25 = &v8[2 * v24];
      v25[4] = v38;
      v25[5] = v39;
      v7 += 64;
      --v6;
      a3 = v35;
      if (!v6)
      {
        swift_bridgeObjectRelease();
        v5 = v34;
        break;
      }
    }
  }
  sub_10000BF1C(&qword_10017F0C0);
  sub_100034754(&qword_10017F0C8, &qword_10017F0C0);
  v28 = BidirectionalCollection<>.joined(separator:)();
  v30 = v29;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v31._countAndFlagsBits = v28;
  v31._object = v30;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v32._countAndFlagsBits = 41;
  v32._object = (void *)0xE100000000000000;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  return v5;
}

id sub_1000919A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000D9D4(0, (unint64_t *)&qword_10017EDC0);
  v9.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_10000BF1C(&qword_10017D0E0);
  v10.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_10000D9D4(0, &qword_10017D0E8);
  v11.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (a6)
  {
    type metadata accessor for LNPlatformName(0);
    sub_10000D9D4(0, &qword_10017F0B0);
    sub_1000933E0((unint64_t *)&unk_100180CF0, type metadata accessor for LNPlatformName);
    v12.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v12.super.isa = 0;
  }
  id v13 = [v6 initWithIntentIdentifier:v8 phraseTemplates:v9.super.isa parameterValues:v10.super.isa impliedValues:v11.super.isa availabilityAnnotations:v12.super.isa];

  return v13;
}

id sub_100091B70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (!a7)
  {
    NSString v14 = 0;
    if (a9) {
      goto LABEL_3;
    }
LABEL_5:
    NSString v15 = 0;
    goto LABEL_6;
  }
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (!a9) {
    goto LABEL_5;
  }
LABEL_3:
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
LABEL_6:
  id v16 = [v9 initWithKind:a1 parentIdentifier:v12 phrase:v13 expected:v14 phraseTemplate:v15];

  return v16;
}

uint64_t sub_100091C80(uint64_t *a1)
{
  return sub_100091D00(a1, (uint64_t (*)(uint64_t))sub_1000AC42C, sub_100091D84);
}

uint64_t sub_100091CC0(uint64_t *a1)
{
  return sub_100091D00(a1, (uint64_t (*)(uint64_t))sub_1000AC440, sub_1000923EC);
}

uint64_t sub_100091D00(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void *))
{
  uint64_t v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = a2(v6);
  }
  uint64_t v7 = *(void *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  uint64_t result = a3(v9);
  *a1 = v6;
  return result;
}

uint64_t sub_100091D84(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3) {
        return sub_100092AEC(0, v3, 1, a1);
      }
      return result;
    }
    goto LABEL_144;
  }
  uint64_t v5 = result;
  uint64_t result = (uint64_t)sub_1000E61FC(v3 / 2);
  uint64_t v95 = result;
  uint64_t v96 = v3;
  v97 = v6;
  v93 = a1;
  if (v3 <= 0)
  {
    v98 = (char *)_swiftEmptyArrayStorage;
    unint64_t v31 = _swiftEmptyArrayStorage[2];
LABEL_110:
    if (v31 < 2)
    {
LABEL_121:
      uint64_t result = swift_bridgeObjectRelease();
      if (v3 >= -1)
      {
        *(void *)(v95 + 16) = 0;
        return swift_bridgeObjectRelease();
      }
      goto LABEL_149;
    }
    uint64_t v85 = *v93;
    while (1)
    {
      unint64_t v86 = v31 - 2;
      if (v31 < 2) {
        break;
      }
      if (!v85) {
        goto LABEL_153;
      }
      v87 = v98;
      uint64_t v88 = *(void *)&v98[16 * v86 + 32];
      uint64_t v89 = *(void *)&v98[16 * v31 + 24];
      uint64_t result = sub_100092CB4((char *)(v85 + 16 * v88), (char *)(v85 + 16 * *(void *)&v98[16 * v31 + 16]), v85 + 16 * v89, v97);
      if (v1) {
        goto LABEL_106;
      }
      if (v89 < v88) {
        goto LABEL_139;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_1000ABB38((uint64_t)v98);
        v87 = (char *)result;
      }
      if (v86 >= *((void *)v87 + 2)) {
        goto LABEL_140;
      }
      v90 = &v87[16 * v86 + 32];
      *(void *)v90 = v88;
      *((void *)v90 + 1) = v89;
      unint64_t v91 = *((void *)v87 + 2);
      if (v31 > v91) {
        goto LABEL_141;
      }
      uint64_t result = (uint64_t)memmove(&v87[16 * v31 + 16], &v87[16 * v31 + 32], 16 * (v91 - v31));
      v98 = v87;
      *((void *)v87 + 2) = v91 - 1;
      unint64_t v31 = v91 - 1;
      Swift::Int v3 = v96;
      if (v91 <= 2) {
        goto LABEL_121;
      }
    }
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
    return result;
  }
  uint64_t v94 = v5;
  Swift::Int v7 = 0;
  uint64_t v8 = *a1;
  uint64_t v92 = *a1 + 8;
  v98 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    Swift::Int v9 = v7++;
    if (v7 >= v3) {
      goto LABEL_32;
    }
    NSDictionary v10 = (uint64_t *)(v8 + 16 * v7);
    uint64_t result = *v10;
    uint64_t v11 = v10[1];
    NSString v12 = (void *)(v8 + 16 * v9);
    if (result == *v12 && v11 == v12[1])
    {
      Swift::Int v15 = v9 + 2;
      if (v9 + 2 >= v3) {
        goto LABEL_31;
      }
      int v14 = 0;
LABEL_13:
      id v16 = (void *)(v92 + 16 * v15);
      do
      {
        uint64_t result = *(v16 - 1);
        v17 = (void *)(v8 + 16 * v7);
        if (result == *v17 && *v16 == v17[1])
        {
          if (v14) {
            goto LABEL_24;
          }
        }
        else
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((v14 ^ result)) {
            goto LABEL_23;
          }
        }
        v16 += 2;
        Swift::Int v19 = v15 + 1;
        Swift::Int v7 = v15;
        Swift::Int v15 = v19;
      }
      while (v19 < v3);
      Swift::Int v15 = v19;
      goto LABEL_23;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    int v14 = result;
    Swift::Int v15 = v9 + 2;
    if (v9 + 2 < v3) {
      goto LABEL_13;
    }
LABEL_23:
    Swift::Int v7 = v15;
    if ((v14 & 1) == 0) {
      goto LABEL_32;
    }
LABEL_24:
    if (v15 < v9) {
      goto LABEL_148;
    }
    if (v9 < v15)
    {
      uint64_t v20 = 16 * v15;
      uint64_t v21 = 16 * v9;
      Swift::Int v22 = v15;
      Swift::Int v23 = v9;
      do
      {
        if (v23 != --v22)
        {
          if (!v8) {
            goto LABEL_152;
          }
          uint64_t v24 = v8 + v20;
          uint64_t v25 = *(void *)(v8 + v21);
          uint64_t v26 = *(void *)(v8 + v21 + 8);
          *(_OWORD *)(v8 + v21) = *(_OWORD *)(v8 + v20 - 16);
          *(void *)(v24 - 16) = v25;
          *(void *)(v24 - 8) = v26;
        }
        ++v23;
        v20 -= 16;
        v21 += 16;
      }
      while (v23 < v22);
    }
LABEL_31:
    Swift::Int v7 = v15;
LABEL_32:
    if (v7 >= v3) {
      goto LABEL_41;
    }
    if (__OFSUB__(v7, v9)) {
      goto LABEL_143;
    }
    if (v7 - v9 >= v94) {
      goto LABEL_41;
    }
    if (__OFADD__(v9, v94)) {
      goto LABEL_146;
    }
    if (v9 + v94 >= v3) {
      Swift::Int v27 = v3;
    }
    else {
      Swift::Int v27 = v9 + v94;
    }
    if (v27 < v9) {
      goto LABEL_147;
    }
    if (v7 == v27)
    {
LABEL_41:
      v28 = v98;
    }
    else
    {
      v79 = (uint64_t *)(v8 + 16 * v7);
      v28 = v98;
      do
      {
        v80 = (uint64_t *)(v8 + 16 * v7);
        uint64_t result = *v80;
        uint64_t v81 = v80[1];
        Swift::Int v82 = v9;
        v83 = v79;
        do
        {
          if (result == *(v83 - 2) && v81 == *(v83 - 1)) {
            break;
          }
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            break;
          }
          if (!v8) {
            goto LABEL_150;
          }
          uint64_t result = *v83;
          uint64_t v81 = v83[1];
          *(_OWORD *)v83 = *((_OWORD *)v83 - 1);
          *(v83 - 1) = v81;
          *(v83 - 2) = result;
          v83 -= 2;
          ++v82;
        }
        while (v7 != v82);
        ++v7;
        v79 += 2;
      }
      while (v7 != v27);
      Swift::Int v7 = v27;
    }
    if (v7 < v9) {
      goto LABEL_142;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1000ABA40(0, *((void *)v28 + 2) + 1, 1, v28);
      v28 = (char *)result;
    }
    unint64_t v30 = *((void *)v28 + 2);
    unint64_t v29 = *((void *)v28 + 3);
    unint64_t v31 = v30 + 1;
    if (v30 >= v29 >> 1)
    {
      uint64_t result = (uint64_t)sub_1000ABA40((char *)(v29 > 1), v30 + 1, 1, v28);
      v28 = (char *)result;
    }
    *((void *)v28 + 2) = v31;
    v32 = v28 + 32;
    v33 = (Swift::Int *)&v28[16 * v30 + 32];
    Swift::Int *v33 = v9;
    v33[1] = v7;
    v98 = v28;
    if (v30) {
      break;
    }
    unint64_t v31 = 1;
LABEL_90:
    Swift::Int v3 = v96;
    if (v7 >= v96) {
      goto LABEL_110;
    }
  }
  while (1)
  {
    unint64_t v34 = v31 - 1;
    if (v31 >= 4)
    {
      v39 = &v32[2 * v31];
      uint64_t v40 = *(v39 - 8);
      uint64_t v41 = *(v39 - 7);
      BOOL v45 = __OFSUB__(v41, v40);
      uint64_t v42 = v41 - v40;
      if (v45) {
        goto LABEL_127;
      }
      uint64_t v44 = *(v39 - 6);
      uint64_t v43 = *(v39 - 5);
      BOOL v45 = __OFSUB__(v43, v44);
      uint64_t v37 = v43 - v44;
      char v38 = v45;
      if (v45) {
        goto LABEL_128;
      }
      unint64_t v46 = v31 - 2;
      v47 = &v32[2 * v31 - 4];
      uint64_t v49 = *v47;
      uint64_t v48 = v47[1];
      BOOL v45 = __OFSUB__(v48, v49);
      uint64_t v50 = v48 - v49;
      if (v45) {
        goto LABEL_129;
      }
      BOOL v45 = __OFADD__(v37, v50);
      uint64_t v51 = v37 + v50;
      if (v45) {
        goto LABEL_131;
      }
      if (v51 >= v42)
      {
        v69 = &v32[2 * v34];
        uint64_t v71 = *v69;
        uint64_t v70 = v69[1];
        BOOL v45 = __OFSUB__(v70, v71);
        uint64_t v72 = v70 - v71;
        if (v45) {
          goto LABEL_137;
        }
        BOOL v62 = v37 < v72;
        goto LABEL_79;
      }
    }
    else
    {
      if (v31 != 3)
      {
        uint64_t v63 = *((void *)v28 + 4);
        uint64_t v64 = *((void *)v28 + 5);
        BOOL v45 = __OFSUB__(v64, v63);
        uint64_t v56 = v64 - v63;
        char v57 = v45;
        goto LABEL_73;
      }
      uint64_t v36 = *((void *)v28 + 4);
      uint64_t v35 = *((void *)v28 + 5);
      BOOL v45 = __OFSUB__(v35, v36);
      uint64_t v37 = v35 - v36;
      char v38 = v45;
    }
    if (v38) {
      goto LABEL_130;
    }
    unint64_t v46 = v31 - 2;
    v52 = &v32[2 * v31 - 4];
    uint64_t v54 = *v52;
    uint64_t v53 = v52[1];
    BOOL v55 = __OFSUB__(v53, v54);
    uint64_t v56 = v53 - v54;
    char v57 = v55;
    if (v55) {
      goto LABEL_132;
    }
    v58 = &v32[2 * v34];
    uint64_t v60 = *v58;
    uint64_t v59 = v58[1];
    BOOL v45 = __OFSUB__(v59, v60);
    uint64_t v61 = v59 - v60;
    if (v45) {
      goto LABEL_134;
    }
    if (__OFADD__(v56, v61)) {
      goto LABEL_136;
    }
    if (v56 + v61 >= v37)
    {
      BOOL v62 = v37 < v61;
LABEL_79:
      if (v62) {
        unint64_t v34 = v46;
      }
      goto LABEL_81;
    }
LABEL_73:
    if (v57) {
      goto LABEL_133;
    }
    v65 = &v32[2 * v34];
    uint64_t v67 = *v65;
    uint64_t v66 = v65[1];
    BOOL v45 = __OFSUB__(v66, v67);
    uint64_t v68 = v66 - v67;
    if (v45) {
      goto LABEL_135;
    }
    if (v68 < v56) {
      goto LABEL_90;
    }
LABEL_81:
    unint64_t v73 = v34 - 1;
    if (v34 - 1 >= v31)
    {
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
      goto LABEL_138;
    }
    if (!v8) {
      goto LABEL_151;
    }
    v74 = &v32[2 * v73];
    uint64_t v75 = *v74;
    v76 = &v32[2 * v34];
    uint64_t v77 = v76[1];
    uint64_t result = sub_100092CB4((char *)(v8 + 16 * *v74), (char *)(v8 + 16 * *v76), v8 + 16 * v77, v97);
    if (v1) {
      break;
    }
    if (v77 < v75) {
      goto LABEL_124;
    }
    if (v34 > *((void *)v98 + 2)) {
      goto LABEL_125;
    }
    uint64_t *v74 = v75;
    v32[2 * v73 + 1] = v77;
    unint64_t v78 = *((void *)v98 + 2);
    if (v34 >= v78) {
      goto LABEL_126;
    }
    v28 = v98;
    unint64_t v31 = v78 - 1;
    uint64_t result = (uint64_t)memmove(&v32[2 * v34], v76 + 2, 16 * (v78 - 1 - v34));
    *((void *)v98 + 2) = v78 - 1;
    if (v78 <= 2) {
      goto LABEL_90;
    }
  }
LABEL_106:
  uint64_t result = swift_bridgeObjectRelease();
  if (v96 < -1) {
    goto LABEL_145;
  }
  *(void *)(v95 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000923EC(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3) {
        return sub_100092BB4(0, v3, 1, a1);
      }
      return result;
    }
    goto LABEL_164;
  }
  uint64_t v5 = result;
  uint64_t result = (uint64_t)sub_1000E6214(v3 / 2);
  uint64_t v113 = result;
  uint64_t v114 = v3;
  v115 = v6;
  v111 = a1;
  if (v3 <= 0)
  {
    v116 = (char *)_swiftEmptyArrayStorage;
    unint64_t v41 = _swiftEmptyArrayStorage[2];
LABEL_130:
    if (v41 < 2)
    {
LABEL_141:
      uint64_t result = swift_bridgeObjectRelease();
      if (v114 >= -1)
      {
        *(void *)(v113 + 16) = 0;
        return swift_bridgeObjectRelease();
      }
      goto LABEL_169;
    }
    uint64_t v102 = *v111;
    while (1)
    {
      unint64_t v103 = v41 - 2;
      if (v41 < 2) {
        break;
      }
      if (!v102) {
        goto LABEL_173;
      }
      v104 = v116;
      uint64_t v105 = *(void *)&v116[16 * v103 + 32];
      uint64_t v106 = *(void *)&v116[16 * v41 + 24];
      uint64_t result = sub_100092E5C((char *)(v102 + 32 * v105), (char *)(v102 + 32 * *(void *)&v116[16 * v41 + 16]), v102 + 32 * v106, v115);
      if (v1) {
        goto LABEL_126;
      }
      if (v106 < v105) {
        goto LABEL_159;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_1000ABB38((uint64_t)v116);
        v104 = (char *)result;
      }
      if (v103 >= *((void *)v104 + 2)) {
        goto LABEL_160;
      }
      v107 = &v104[16 * v103 + 32];
      *(void *)v107 = v105;
      *((void *)v107 + 1) = v106;
      unint64_t v108 = *((void *)v104 + 2);
      if (v41 > v108) {
        goto LABEL_161;
      }
      uint64_t result = (uint64_t)memmove(&v104[16 * v41 + 16], &v104[16 * v41 + 32], 16 * (v108 - v41));
      v116 = v104;
      *((void *)v104 + 2) = v108 - 1;
      unint64_t v41 = v108 - 1;
      if (v108 <= 2) {
        goto LABEL_141;
      }
    }
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    __break(1u);
LABEL_164:
    __break(1u);
LABEL_165:
    __break(1u);
LABEL_166:
    __break(1u);
LABEL_167:
    __break(1u);
LABEL_168:
    __break(1u);
LABEL_169:
    __break(1u);
LABEL_170:
    __break(1u);
LABEL_171:
    __break(1u);
LABEL_172:
    __break(1u);
LABEL_173:
    __break(1u);
    return result;
  }
  uint64_t v112 = v5;
  Swift::Int v7 = 0;
  uint64_t v8 = *a1;
  uint64_t v109 = *a1 - 32;
  uint64_t v110 = *a1 + 16;
  v116 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    Swift::Int v9 = v7++;
    if (v7 >= v3) {
      goto LABEL_45;
    }
    NSDictionary v10 = (unint64_t *)(v8 + 32 * v7);
    unint64_t v11 = *v10;
    unint64_t v12 = v10[1];
    uint64_t result = v10[2];
    unint64_t v13 = v10[3];
    int v14 = (void *)(v8 + 32 * v9);
    BOOL v15 = result == v14[2] && v13 == v14[3];
    BOOL v16 = v15 && v11 >> 16 == *v14 >> 16;
    if (v16 && v12 >> 16 == v14[1] >> 16)
    {
      Swift::Int v19 = v9 + 2;
      if (v9 + 2 >= v3) {
        goto LABEL_44;
      }
      int v18 = 0;
    }
    else
    {
      uint64_t result = _stringCompareInternal(_:_:_:_:expecting:)();
      int v18 = result;
      Swift::Int v19 = v9 + 2;
      if (v9 + 2 >= v3) {
        goto LABEL_36;
      }
    }
    uint64_t v20 = (uint64_t *)(v110 + 32 * v19);
    do
    {
      uint64_t result = *v20;
      uint64_t v21 = (void *)(v8 + 32 * v7);
      if (*v20 == v21[2]
        && v20[1] == v21[3]
        && (unint64_t)*(v20 - 2) >> 16 == *v21 >> 16
        && (unint64_t)*(v20 - 1) >> 16 == v21[1] >> 16)
      {
        if (v18)
        {
          Swift::Int v3 = v114;
          goto LABEL_37;
        }
      }
      else
      {
        uint64_t result = _stringCompareInternal(_:_:_:_:expecting:)();
        if ((v18 ^ result)) {
          goto LABEL_35;
        }
      }
      uint64_t v25 = v19 + 1;
      v20 += 4;
      Swift::Int v7 = v19;
      Swift::Int v19 = v25;
    }
    while (v25 < v114);
    Swift::Int v19 = v25;
LABEL_35:
    Swift::Int v3 = v114;
LABEL_36:
    Swift::Int v7 = v19;
    if (v18)
    {
LABEL_37:
      if (v19 < v9) {
        goto LABEL_168;
      }
      if (v9 < v19)
      {
        uint64_t v26 = 32 * v19;
        uint64_t v27 = 32 * v9;
        Swift::Int v28 = v19;
        Swift::Int v29 = v9;
        do
        {
          if (v29 != --v28)
          {
            if (!v8) {
              goto LABEL_172;
            }
            unint64_t v30 = (_OWORD *)(v8 + v27);
            uint64_t v31 = v8 + v26;
            uint64_t v32 = *(void *)(v8 + v27 + 16);
            uint64_t v33 = *(void *)(v8 + v27 + 24);
            long long v34 = *(_OWORD *)(v8 + v27);
            long long v35 = *(_OWORD *)(v8 + v26 - 16);
            *unint64_t v30 = *(_OWORD *)(v8 + v26 - 32);
            v30[1] = v35;
            *(_OWORD *)(v31 - 32) = v34;
            *(void *)(v31 - 16) = v32;
            *(void *)(v31 - 8) = v33;
          }
          ++v29;
          v26 -= 32;
          v27 += 32;
        }
        while (v29 < v28);
      }
LABEL_44:
      Swift::Int v7 = v19;
    }
LABEL_45:
    if (v7 >= v3) {
      goto LABEL_54;
    }
    if (__OFSUB__(v7, v9)) {
      goto LABEL_163;
    }
    if (v7 - v9 >= v112) {
      goto LABEL_54;
    }
    if (__OFADD__(v9, v112)) {
      goto LABEL_166;
    }
    if (v9 + v112 >= v3) {
      Swift::Int v36 = v3;
    }
    else {
      Swift::Int v36 = v9 + v112;
    }
    if (v36 < v9) {
      goto LABEL_167;
    }
    if (v7 == v36)
    {
LABEL_54:
      uint64_t v37 = v116;
    }
    else
    {
      uint64_t v89 = (unint64_t *)(v109 + 32 * v7);
      uint64_t v37 = v116;
      do
      {
        v90 = (unint64_t *)(v8 + 32 * v7);
        unint64_t v91 = *v90;
        unint64_t v92 = v90[1];
        uint64_t result = v90[2];
        unint64_t v93 = v90[3];
        Swift::Int v94 = v9;
        uint64_t v95 = v89;
        do
        {
          if (result == v95[2] && v93 == v95[3] && v91 >> 16 == *v95 >> 16 && v92 >> 16 == v95[1] >> 16) {
            break;
          }
          uint64_t result = _stringCompareInternal(_:_:_:_:expecting:)();
          if ((result & 1) == 0) {
            break;
          }
          if (!v8) {
            goto LABEL_170;
          }
          v99 = v95 + 4;
          unint64_t v91 = v95[4];
          unint64_t v92 = v95[5];
          uint64_t result = v95[6];
          unint64_t v93 = v95[7];
          long long v100 = *(_OWORD *)v95;
          long long v101 = *((_OWORD *)v95 + 1);
          *uint64_t v95 = v91;
          v95[1] = v92;
          v95[2] = result;
          v95[3] = v93;
          v95 -= 4;
          ++v94;
          _OWORD *v99 = v100;
          v99[1] = v101;
        }
        while (v7 != v94);
        ++v7;
        v89 += 4;
      }
      while (v7 != v36);
      Swift::Int v7 = v36;
    }
    if (v7 < v9) {
      goto LABEL_162;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v38 = v9;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1000ABA40(0, *((void *)v37 + 2) + 1, 1, v37);
      uint64_t v37 = (char *)result;
    }
    unint64_t v40 = *((void *)v37 + 2);
    unint64_t v39 = *((void *)v37 + 3);
    unint64_t v41 = v40 + 1;
    if (v40 >= v39 >> 1)
    {
      uint64_t result = (uint64_t)sub_1000ABA40((char *)(v39 > 1), v40 + 1, 1, v37);
      uint64_t v37 = (char *)result;
    }
    *((void *)v37 + 2) = v41;
    uint64_t v42 = v37 + 32;
    uint64_t v43 = &v37[16 * v40 + 32];
    *(void *)uint64_t v43 = v38;
    *((void *)v43 + 1) = v7;
    v116 = v37;
    if (v40) {
      break;
    }
    unint64_t v41 = 1;
LABEL_103:
    Swift::Int v3 = v114;
    if (v7 >= v114) {
      goto LABEL_130;
    }
  }
  while (1)
  {
    unint64_t v44 = v41 - 1;
    if (v41 >= 4)
    {
      uint64_t v49 = &v42[2 * v41];
      uint64_t v50 = *(v49 - 8);
      uint64_t v51 = *(v49 - 7);
      BOOL v55 = __OFSUB__(v51, v50);
      uint64_t v52 = v51 - v50;
      if (v55) {
        goto LABEL_147;
      }
      uint64_t v54 = *(v49 - 6);
      uint64_t v53 = *(v49 - 5);
      BOOL v55 = __OFSUB__(v53, v54);
      uint64_t v47 = v53 - v54;
      char v48 = v55;
      if (v55) {
        goto LABEL_148;
      }
      unint64_t v56 = v41 - 2;
      char v57 = &v42[2 * v41 - 4];
      uint64_t v59 = *v57;
      uint64_t v58 = v57[1];
      BOOL v55 = __OFSUB__(v58, v59);
      uint64_t v60 = v58 - v59;
      if (v55) {
        goto LABEL_149;
      }
      BOOL v55 = __OFADD__(v47, v60);
      uint64_t v61 = v47 + v60;
      if (v55) {
        goto LABEL_151;
      }
      if (v61 >= v52)
      {
        v79 = &v42[2 * v44];
        uint64_t v81 = *v79;
        uint64_t v80 = v79[1];
        BOOL v55 = __OFSUB__(v80, v81);
        uint64_t v82 = v80 - v81;
        if (v55) {
          goto LABEL_157;
        }
        BOOL v72 = v47 < v82;
        goto LABEL_92;
      }
    }
    else
    {
      if (v41 != 3)
      {
        uint64_t v73 = *((void *)v37 + 4);
        uint64_t v74 = *((void *)v37 + 5);
        BOOL v55 = __OFSUB__(v74, v73);
        uint64_t v66 = v74 - v73;
        char v67 = v55;
        goto LABEL_86;
      }
      uint64_t v46 = *((void *)v37 + 4);
      uint64_t v45 = *((void *)v37 + 5);
      BOOL v55 = __OFSUB__(v45, v46);
      uint64_t v47 = v45 - v46;
      char v48 = v55;
    }
    if (v48) {
      goto LABEL_150;
    }
    unint64_t v56 = v41 - 2;
    BOOL v62 = &v42[2 * v41 - 4];
    uint64_t v64 = *v62;
    uint64_t v63 = v62[1];
    BOOL v65 = __OFSUB__(v63, v64);
    uint64_t v66 = v63 - v64;
    char v67 = v65;
    if (v65) {
      goto LABEL_152;
    }
    uint64_t v68 = &v42[2 * v44];
    uint64_t v70 = *v68;
    uint64_t v69 = v68[1];
    BOOL v55 = __OFSUB__(v69, v70);
    uint64_t v71 = v69 - v70;
    if (v55) {
      goto LABEL_154;
    }
    if (__OFADD__(v66, v71)) {
      goto LABEL_156;
    }
    if (v66 + v71 >= v47)
    {
      BOOL v72 = v47 < v71;
LABEL_92:
      if (v72) {
        unint64_t v44 = v56;
      }
      goto LABEL_94;
    }
LABEL_86:
    if (v67) {
      goto LABEL_153;
    }
    uint64_t v75 = &v42[2 * v44];
    uint64_t v77 = *v75;
    uint64_t v76 = v75[1];
    BOOL v55 = __OFSUB__(v76, v77);
    uint64_t v78 = v76 - v77;
    if (v55) {
      goto LABEL_155;
    }
    if (v78 < v66) {
      goto LABEL_103;
    }
LABEL_94:
    unint64_t v83 = v44 - 1;
    if (v44 - 1 >= v41)
    {
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
      goto LABEL_158;
    }
    if (!v8) {
      goto LABEL_171;
    }
    v84 = &v42[2 * v83];
    uint64_t v85 = *v84;
    unint64_t v86 = &v42[2 * v44];
    uint64_t v87 = v86[1];
    uint64_t result = sub_100092E5C((char *)(v8 + 32 * *v84), (char *)(v8 + 32 * *v86), v8 + 32 * v87, v115);
    if (v1) {
      break;
    }
    if (v87 < v85) {
      goto LABEL_144;
    }
    if (v44 > *((void *)v116 + 2)) {
      goto LABEL_145;
    }
    uint64_t *v84 = v85;
    v42[2 * v83 + 1] = v87;
    unint64_t v88 = *((void *)v116 + 2);
    if (v44 >= v88) {
      goto LABEL_146;
    }
    uint64_t v37 = v116;
    unint64_t v41 = v88 - 1;
    uint64_t result = (uint64_t)memmove(&v42[2 * v44], v86 + 2, 16 * (v88 - 1 - v44));
    *((void *)v116 + 2) = v88 - 1;
    if (v88 <= 2) {
      goto LABEL_103;
    }
  }
LABEL_126:
  uint64_t result = swift_bridgeObjectRelease();
  if (v114 < -1) {
    goto LABEL_165;
  }
  *(void *)(v113 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_100092AEC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
    while (2)
    {
      Swift::Int v9 = (uint64_t *)(v7 + 16 * v4);
      uint64_t result = *v9;
      uint64_t v10 = v9[1];
      uint64_t v11 = v6;
      unint64_t v12 = (uint64_t *)v8;
      do
      {
        if (result == *(v12 - 2) && v10 == *(v12 - 1)) {
          break;
        }
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0) {
          break;
        }
        if (!v7)
        {
          __break(1u);
          return result;
        }
        uint64_t result = *v12;
        uint64_t v10 = v12[1];
        *(_OWORD *)unint64_t v12 = *((_OWORD *)v12 - 1);
        *(v12 - 1) = v10;
        *(v12 - 2) = result;
        v12 -= 2;
        ++v11;
      }
      while (v4 != v11);
      ++v4;
      v8 += 16;
      if (v4 != a2) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t sub_100092BB4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 32 * a3 - 32;
    while (2)
    {
      Swift::Int v9 = (unint64_t *)(v7 + 32 * v4);
      unint64_t v10 = *v9;
      unint64_t v11 = v9[1];
      uint64_t result = v9[2];
      unint64_t v12 = v9[3];
      uint64_t v13 = v6;
      int v14 = (void *)v8;
      do
      {
        if (result == v14[2] && v12 == v14[3] && v10 >> 16 == *v14 >> 16 && v11 >> 16 == v14[1] >> 16) {
          break;
        }
        uint64_t result = _stringCompareInternal(_:_:_:_:expecting:)();
        if ((result & 1) == 0) {
          break;
        }
        if (!v7)
        {
          __break(1u);
          return result;
        }
        int v18 = v14 + 4;
        unint64_t v10 = v14[4];
        unint64_t v11 = v14[5];
        uint64_t result = v14[6];
        unint64_t v12 = v14[7];
        long long v19 = *(_OWORD *)v14;
        long long v20 = *((_OWORD *)v14 + 1);
        *int v14 = v10;
        v14[1] = v11;
        v14[2] = result;
        v14[3] = v12;
        v14 -= 4;
        ++v13;
        *int v18 = v19;
        v18[1] = v20;
      }
      while (v4 != v13);
      ++v4;
      v8 += 32;
      if (v4 != a2) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t sub_100092CB4(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 16;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 16;
  if (v9 >= v11)
  {
    sub_100020AFC(a2, (uint64_t)(a3 - (void)a2) / 16, a4);
    unint64_t v12 = (unint64_t)&v4[16 * v11];
    if (v7 >= v6 || v10 < 16) {
      goto LABEL_47;
    }
    int v18 = (char *)(a3 - 16);
    while (1)
    {
      long long v19 = v18 + 16;
      long long v20 = (char *)(v12 - 16);
      BOOL v21 = *(void *)(v12 - 16) == *((void *)v6 - 2) && *(void *)(v12 - 8) == *((void *)v6 - 1);
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        BOOL v23 = v19 != (char *)v12 || (unint64_t)v18 >= v12;
        v12 -= 16;
        if (!v23) {
          goto LABEL_43;
        }
      }
      else
      {
        BOOL v22 = v19 != v6 || v18 >= v6;
        long long v20 = v6 - 16;
        v6 -= 16;
        if (!v22) {
          goto LABEL_43;
        }
      }
      *(_OWORD *)int v18 = *(_OWORD *)v20;
LABEL_43:
      v18 -= 16;
      if (v6 <= v7 || v12 <= (unint64_t)v4) {
        goto LABEL_47;
      }
    }
  }
  sub_100020AFC(a1, (a2 - a1) / 16, a4);
  unint64_t v12 = (unint64_t)&v4[16 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (1)
    {
      BOOL v14 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
      if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      BOOL v15 = v4;
      BOOL v14 = v7 == v4;
      v4 += 16;
      if (!v14) {
        goto LABEL_15;
      }
LABEL_16:
      v7 += 16;
      if ((unint64_t)v4 >= v12 || (unint64_t)v6 >= a3) {
        goto LABEL_21;
      }
    }
    BOOL v15 = v6;
    BOOL v14 = v7 == v6;
    v6 += 16;
    if (v14) {
      goto LABEL_16;
    }
LABEL_15:
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v15;
    goto LABEL_16;
  }
LABEL_21:
  uint64_t v6 = v7;
LABEL_47:
  sub_100020AFC(v4, (uint64_t)(v12 - (void)v4) / 16, v6);
  return 1;
}

uint64_t sub_100092E5C(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 32;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 32;
  if (v9 >= v11)
  {
    sub_10002091C(a2, (uint64_t)(a3 - (void)a2) / 32, a4);
    unint64_t v12 = (unint64_t)&v4[32 * v11];
    if (v7 >= v6 || v10 < 32) {
      goto LABEL_55;
    }
    long long v19 = (char *)(a3 - 32);
    while (1)
    {
      long long v20 = (char *)(v12 - 32);
      BOOL v21 = v19 + 32;
      BOOL v24 = *(void *)(v12 - 16) == *((void *)v6 - 2)
         && *(void *)(v12 - 8) == *((void *)v6 - 1)
         && *(void *)(v12 - 32) >> 16 == *((void *)v6 - 4) >> 16
         && *(void *)(v12 - 24) >> 16 == *((void *)v6 - 3) >> 16;
      if (v24 || (_stringCompareInternal(_:_:_:_:expecting:)() & 1) == 0)
      {
        BOOL v26 = v21 != (char *)v12 || (unint64_t)v19 >= v12;
        v12 -= 32;
        if (!v26) {
          goto LABEL_51;
        }
      }
      else
      {
        BOOL v25 = v21 != v6 || v19 >= v6;
        long long v20 = v6 - 32;
        v6 -= 32;
        if (!v25) {
          goto LABEL_51;
        }
      }
      long long v27 = *((_OWORD *)v20 + 1);
      *(_OWORD *)long long v19 = *(_OWORD *)v20;
      *((_OWORD *)v19 + 1) = v27;
LABEL_51:
      v19 -= 32;
      if (v6 <= v7 || v12 <= (unint64_t)v4) {
        goto LABEL_55;
      }
    }
  }
  sub_10002091C(a1, (a2 - a1) / 32, a4);
  unint64_t v12 = (unint64_t)&v4[32 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 32)
  {
    while (1)
    {
      BOOL v13 = *((void *)v6 + 2) == *((void *)v4 + 2) && *((void *)v6 + 3) == *((void *)v4 + 3);
      BOOL v14 = v13 && *(void *)v6 >> 16 == *(void *)v4 >> 16;
      BOOL v15 = v14 && *((void *)v6 + 1) >> 16 == *((void *)v4 + 1) >> 16;
      if (!v15 && (_stringCompareInternal(_:_:_:_:expecting:)() & 1) != 0) {
        break;
      }
      BOOL v16 = v4;
      BOOL v13 = v7 == v4;
      v4 += 32;
      if (!v13) {
        goto LABEL_19;
      }
LABEL_20:
      v7 += 32;
      if ((unint64_t)v4 >= v12 || (unint64_t)v6 >= a3) {
        goto LABEL_25;
      }
    }
    BOOL v16 = v6;
    BOOL v13 = v7 == v6;
    v6 += 32;
    if (v13) {
      goto LABEL_20;
    }
LABEL_19:
    long long v17 = *((_OWORD *)v16 + 1);
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v16;
    *((_OWORD *)v7 + 1) = v17;
    goto LABEL_20;
  }
LABEL_25:
  uint64_t v6 = v7;
LABEL_55:
  sub_10002091C(v4, (uint64_t)(v12 - (void)v4) / 32, v6);
  return 1;
}

void sub_10009305C()
{
  uint64_t v1 = *v0;
  unint64_t v2 = *(void *)(*v0 + 16);
  unint64_t v25 = v2 - 2;
  if (v2 >= 2)
  {
    unint64_t v3 = 0;
    while (1)
    {
      swift_stdlib_random();
      uint64_t v4 = (0 * (unsigned __int128)v2) >> 64;
      if (v2)
      {
        if (-(uint64_t)v2 % v2)
        {
          while (1)
            swift_stdlib_random();
        }
      }
      unint64_t v6 = v3 + v4;
      if (__OFADD__(v3, v4)) {
        break;
      }
      if (v3 != v6)
      {
        unint64_t v7 = *(void *)(v1 + 16);
        if (v3 >= v7) {
          goto LABEL_19;
        }
        if (v6 >= v7) {
          goto LABEL_20;
        }
        uint64_t v8 = (uint64_t *)(v1 + 32 + 40 * v3);
        uint64_t v9 = v8[2];
        uint64_t v10 = v8[3];
        uint64_t v11 = v8[4];
        unint64_t v12 = (uint64_t *)(v1 + 32 + 40 * v6);
        uint64_t v13 = v12[1];
        uint64_t v24 = *v12;
        uint64_t v14 = v12[3];
        uint64_t v22 = *v8;
        uint64_t v23 = v12[2];
        uint64_t v15 = v12[4];
        uint64_t v21 = v8[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000AC468();
          uint64_t v1 = v16;
        }
        if (v3 >= *(void *)(v1 + 16)) {
          goto LABEL_21;
        }
        long long v17 = (void *)(v1 + 32 + 40 * v3);
        void *v17 = v24;
        v17[1] = v13;
        v17[2] = v23;
        v17[3] = v14;
        v17[4] = v15;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v6 >= *(void *)(v1 + 16)) {
          goto LABEL_22;
        }
        int v18 = (void *)(v1 + 32 + 40 * v6);
        *int v18 = v22;
        v18[1] = v21;
        v18[2] = v9;
        v18[3] = v10;
        v18[4] = v11;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *long long v20 = v1;
      }
      --v2;
      if (v3++ == v25) {
        return;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }
}

uint64_t _s7BuilderVMa()
{
  uint64_t result = qword_10017F130;
  if (!qword_10017F130) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000932E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10009334C(void **a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t sub_10009336C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3 == a7 && a4 == a8 && a1 >> 16 == a5 >> 16 && a2 >> 16 == a6 >> 16) {
    return 1;
  }
  else {
    return _stringCompareInternal(_:_:_:_:expecting:)() & 1;
  }
}

uint64_t sub_1000933E0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100093428(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t _s18ExpectedInvocationVwxx()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s18ExpectedInvocationVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *_s18ExpectedInvocationVwca(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s18ExpectedInvocationVwta(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *_s18ExpectedInvocationVMa()
{
  return &_s18ExpectedInvocationVN;
}

char *sub_100093578(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Logger();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    long long v11 = *(_OWORD *)&a2[v8 + 24];
    *(_OWORD *)&a1[v8 + 24] = v11;
    (**(void (***)(char *, char *))(v11 - 8))(&a1[v8], &a2[v8]);
    uint64_t v12 = *((void *)v10 + 6);
    *((void *)v9 + 5) = *((void *)v10 + 5);
    *((void *)v9 + 6) = v12;
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = &a1[v13];
    uint64_t v16 = &a2[v13];
    uint64_t v17 = *((void *)v16 + 1);
    *(void *)uint64_t v15 = *(void *)v16;
    *((void *)v15 + 1) = v17;
    *(void *)&a1[v14] = *(void *)&a2[v14];
    uint64_t v18 = a3[9];
    *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
    *(void *)&a1[v18] = *(void *)&a2[v18];
    uint64_t v19 = a3[10];
    long long v20 = &a2[v19];
    long long v21 = *(_OWORD *)&a2[v19 + 24];
    *(_OWORD *)&a1[v19 + 24] = v21;
    uint64_t v22 = v21;
    BOOL v26 = **(void (***)(char *, char *, uint64_t))(v21 - 8);
    long long v27 = &a1[v19];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v26(v27, v20, v22);
    uint64_t v23 = a3[12];
    *(void *)&a1[a3[11]] = *(void *)&a2[a3[11]];
    *(void *)&a1[v23] = *(void *)&a2[v23];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100093794(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  sub_10000E788(a1 + *(int *)(a2 + 20));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000E788(a1 + *(int *)(a2 + 40));
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100093874(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  long long v10 = *(_OWORD *)(a2 + v7 + 24);
  *(_OWORD *)(a1 + v7 + 24) = v10;
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + v7, a2 + v7);
  uint64_t v11 = *(void *)(v9 + 48);
  *(void *)(v8 + 40) = *(void *)(v9 + 40);
  *(void *)(v8 + 48) = v11;
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)(a1 + v12);
  uint64_t v15 = (void *)(a2 + v12);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  *(void *)(a1 + v13) = *(void *)(a2 + v13);
  uint64_t v17 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + v17) = *(void *)(a2 + v17);
  uint64_t v18 = a3[10];
  uint64_t v19 = a2 + v18;
  long long v20 = *(_OWORD *)(a2 + v18 + 24);
  *(_OWORD *)(a1 + v18 + 24) = v20;
  uint64_t v21 = v20;
  uint64_t v24 = **(void (***)(uint64_t, uint64_t, uint64_t))(v20 - 8);
  uint64_t v25 = a1 + v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v24(v25, v19, v21);
  uint64_t v22 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(void *)(a1 + v22) = *(void *)(a2 + v22);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100093A40(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  sub_100034C9C((uint64_t *)(a1 + v7), (uint64_t *)(a2 + v7));
  *(void *)(v8 + 40) = *(void *)(v9 + 40);
  *(void *)(v8 + 48) = *(void *)(v9 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_100034C9C((uint64_t *)(a1 + a3[10]), (uint64_t *)(a2 + a3[10]));
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100093BB8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  long long v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
  *(void *)(v9 + 48) = *(void *)(v10 + 48);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  uint64_t v12 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  uint64_t v13 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  long long v16 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  *(_OWORD *)(v14 + 16) = v16;
  *(void *)(v14 + 32) = *(void *)(v15 + 32);
  uint64_t v17 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(void *)(a1 + v17) = *(void *)(a2 + v17);
  return a1;
}

uint64_t sub_100093CA0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  sub_10000E788(a1 + v7);
  long long v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
  *(void *)(v8 + 48) = *(void *)(v9 + 48);
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  *uint64_t v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[10];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  sub_10000E788(a1 + v16);
  long long v19 = *(_OWORD *)(v18 + 16);
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  *(_OWORD *)(v17 + 16) = v19;
  *(void *)(v17 + 32) = *(void *)(v18 + 32);
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100093DF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100093E04);
}

uint64_t sub_100093E04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Logger();
  sub_100035C48();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return sub_10000D5D8(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 24);
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t sub_100093E94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100093EA8);
}

void sub_100093EA8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for Logger();
  sub_100035C48();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    sub_10000D5B0(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  }
}

uint64_t sub_100093F34()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100093FF4(uint64_t a1)
{
  *(void *)(v1 - 168) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void sub_10009401C()
{
  *(void *)(v0 + 8 * (v1 >> 6) + 64) |= 1 << v1;
}

void sub_100094044()
{
  *(void *)(v0 + 8 * (v1 >> 6) + 64) |= 1 << v1;
}

BOOL sub_100094088@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_10009409C()
{
  return *(void *)(v0 - 8);
}

uint64_t sub_1000940B8()
{
  return 0;
}

void sub_100094100(uint64_t a1@<X8>)
{
  *(void *)(a1 + 64) |= 1 << v1;
}

BOOL sub_100094128@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_100094140()
{
  return 0;
}

uint64_t sub_100094150()
{
  return v0;
}

uint64_t sub_100094168()
{
  return static String._fromSubstring(_:)();
}

uint64_t sub_100094184()
{
  return 0;
}

uint64_t sub_10009419C()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_1000941D0()
{
  return swift_arrayInitWithCopy();
}

void sub_100094204()
{
  sub_10001ED78();
}

uint64_t sub_100094250@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return sub_1000AA3BC(0xD000000000000010, (a3 - 32) | 0x8000000000000000, a1, a2);
}

uint64_t sub_100094270(uint64_t result)
{
  *(void *)(v1 - 128) = result;
  return result;
}

void *sub_100094290()
{
  uint64_t v0 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchQoS.userInitiated.getter();
  sub_10000BF1C(&qword_10017F188);
  swift_allocObject();
  uint64_t result = sub_100049824(1uLL, 500, (uint64_t)v2);
  qword_100181D88 = (uint64_t)result;
  return result;
}

uint64_t sub_100094330()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_100181D90 = result;
  *(void *)algn_100181D98 = v1;
  return result;
}

void *sub_100094360(uint64_t a1, uint64_t a2)
{
  uint64_t v40 = a1;
  uint64_t v39 = type metadata accessor for Notification();
  uint64_t v3 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v37 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v37 - v6;
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v38 = v3;
  if (v8)
  {
    uint64_t v9 = (void *)LNMetadataChangedNotification;
    long long v43 = 0u;
    long long v44 = 0u;
    sub_10000BF1C(&qword_10017DF80);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10013F1D0;
    uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v42 = v11;
    id v12 = v9;
    sub_1000949B4();
    *(void *)(inited + 96) = &type metadata for Int;
    *(void *)(inited + 72) = 1;
    uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v42 = v13;
    sub_1000949B4();
    unint64_t v14 = sub_1000948BC();
    swift_bridgeObjectRetain();
    sub_100049CCC();
    uint64_t v16 = v15;
    swift_bridgeObjectRelease();
    sub_100053DA4(v16);
    swift_release();
    id v17 = sub_10000A720();
    *(void *)(inited + 168) = v14;
    *(void *)(inited + 144) = v17;
    Dictionary.init(dictionaryLiteral:)();
    Notification.init(name:object:userInfo:)();
    uint64_t v18 = (void *)sub_10001ED30(0, 1, 1, (uint64_t)_swiftEmptyArrayStorage);
    unint64_t v20 = v18[2];
    unint64_t v19 = v18[3];
    if (v20 >= v19 >> 1) {
      uint64_t v18 = (void *)sub_100094990(v19);
    }
    uint64_t v22 = v38;
    uint64_t v21 = v39;
    v18[2] = v20 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v22 + 32))((unint64_t)v18+ ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))+ *(void *)(v22 + 72) * v20, v7, v21);
  }
  else
  {
    uint64_t v18 = _swiftEmptyArrayStorage;
  }
  if (*(void *)(v40 + 16))
  {
    uint64_t v23 = (void *)LNMetadataChangedNotification;
    long long v43 = 0u;
    long long v44 = 0u;
    sub_10000BF1C(&qword_10017DF80);
    uint64_t v24 = swift_initStackObject();
    *(_OWORD *)(v24 + 16) = xmmword_10013F1D0;
    uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v42 = v25;
    id v26 = v23;
    sub_1000949D4();
    *(void *)(v24 + 96) = &type metadata for Int;
    *(void *)(v24 + 72) = 0;
    uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v42 = v27;
    sub_1000949D4();
    unint64_t v28 = sub_1000948BC();
    swift_bridgeObjectRetain();
    sub_100049CCC();
    uint64_t v30 = v29;
    swift_bridgeObjectRelease();
    sub_100053DA4(v30);
    swift_release();
    id v31 = sub_10000A720();
    *(void *)(v24 + 168) = v28;
    *(void *)(v24 + 144) = v31;
    Dictionary.init(dictionaryLiteral:)();
    uint64_t v32 = v37;
    Notification.init(name:object:userInfo:)();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v18 = (void *)sub_10001ED30(0, v18[2] + 1, 1, (uint64_t)v18);
    }
    unint64_t v34 = v18[2];
    unint64_t v33 = v18[3];
    uint64_t v35 = v38;
    if (v34 >= v33 >> 1) {
      uint64_t v18 = (void *)sub_100094990(v33);
    }
    v18[2] = v34 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v35 + 32))((unint64_t)v18+ ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ *(void *)(v35 + 72) * v34, v32, v39);
  }
  return v18;
}

uint64_t sub_1000947AC()
{
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v0._countAndFlagsBits = Set.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 0x65766F6D6572202CLL;
  v1._object = (void *)0xEB00000000203A64;
  String.append(_:)(v1);
  swift_bridgeObjectRetain();
  v2._countAndFlagsBits = Set.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0x203A6465646461;
}

uint64_t sub_1000948B4()
{
  return sub_1000947AC();
}

unint64_t sub_1000948BC()
{
  unint64_t result = qword_10017D668;
  if (!qword_10017D668)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10017D668);
  }
  return result;
}

ValueMetadata *type metadata accessor for RegistryUpdatedNotification()
{
  return &type metadata for RegistryUpdatedNotification;
}

ValueMetadata *type metadata accessor for NotifyingRegistryObserver()
{
  return &type metadata for NotifyingRegistryObserver;
}

unint64_t sub_10009491C(uint64_t a1)
{
  unint64_t result = sub_100094944();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100094944()
{
  unint64_t result = qword_10017F190;
  if (!qword_10017F190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F190);
  }
  return result;
}

uint64_t sub_100094990@<X0>(unint64_t a1@<X8>)
{
  return sub_10001ED30(a1 > 1, v1, 1, v2);
}

uint64_t sub_1000949B4()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t sub_1000949D4()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t sub_1000949F4(void *a1)
{
  id v63 = a1;
  id v1 = [a1 impliedValues];
  sub_10000D9D4(0, &qword_10017D0E8);
  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1000427DC(v2, &v65);
  uint64_t v3 = v65;
  uint64_t v4 = v68;
  unint64_t v5 = v69;
  uint64_t v61 = v66;
  int64_t v62 = (unint64_t)(v67 + 64) >> 6;
  uint64_t v56 = v2;
  swift_bridgeObjectRetain();
  uint64_t v6 = _swiftEmptyDictionarySingleton;
  long long v57 = xmmword_10013EF20;
  while (v5)
  {
    unint64_t v7 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v8 = v7 | (v4 << 6);
LABEL_26:
    uint64_t v16 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v8);
    uint64_t v18 = *v16;
    unint64_t v17 = v16[1];
    unint64_t v19 = *(void **)(*(void *)(v3 + 56) + 8 * v8);
    swift_bridgeObjectRetain();
    id v20 = v19;
    id v21 = [v63 intentIdentifier];
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v24 = v23;

    sub_100094DCC(v20, v18, v17, v22, v24, (uint64_t)&v70);
    swift_bridgeObjectRelease();
    sub_1000955C4((uint64_t)&v70, (uint64_t)v73);
    if (*((void *)&v73[0] + 1))
    {
      sub_10000BF1C(&qword_10017D4B0);
      uint64_t v25 = (_OWORD *)swift_allocObject();
      long long v26 = v73[0];
      long long v27 = v73[1];
      v25[1] = v57;
      v25[2] = v26;
      long long v28 = v74[0];
      v25[3] = v27;
      v25[4] = v28;
      uint64_t v59 = (uint64_t)v25;
      *(_OWORD *)((char *)v25 + 74) = *(_OWORD *)((char *)v74 + 10);
      swift_bridgeObjectRetain();
      HIDWORD(v58) = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v35 = sub_100021098(v18, v17, v29, v30, v31, v32, v33, v34, v55, v56, v57, *((uint64_t *)&v57 + 1), v58, v59, v61, v62, (uint64_t)v63, (uint64_t)v6, v65,
              v66,
              v67,
              v68,
              v69,
              v70,
              v71,
              v72);
      uint64_t v37 = v6[2];
      BOOL v38 = (v36 & 1) == 0;
      Swift::Int v39 = v37 + v38;
      if (__OFADD__(v37, v38)) {
        goto LABEL_39;
      }
      unint64_t v40 = v35;
      char v41 = v36;
      sub_10000BF1C(&qword_10017F0B8);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(SBYTE4(v58), v39))
      {
        uint64_t v48 = sub_100021098(v18, v17, v42, v43, v44, v45, v46, v47, v55, v56, v57, *((uint64_t *)&v57 + 1), v58, v60, v61, v62, (uint64_t)v63, (uint64_t)v64, v65,
                v66,
                v67,
                v68,
                v69,
                v70,
                v71,
                v72);
        if ((v41 & 1) != (v49 & 1)) {
          goto LABEL_41;
        }
        unint64_t v40 = v48;
      }
      uint64_t v6 = v64;
      if (v41)
      {
        uint64_t v50 = v64[7];
        swift_bridgeObjectRelease();
        *(void *)(v50 + 8 * v40) = v60;
      }
      else
      {
        v64[(v40 >> 6) + 8] |= 1 << v40;
        uint64_t v51 = (uint64_t *)(v64[6] + 16 * v40);
        *uint64_t v51 = v18;
        v51[1] = v17;
        *(void *)(v64[7] + 8 * v40) = v60;
        uint64_t v52 = v64[2];
        BOOL v13 = __OFADD__(v52, 1);
        uint64_t v53 = v52 + 1;
        if (v13) {
          goto LABEL_40;
        }
        v64[2] = v53;
        swift_bridgeObjectRetain();
      }

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {

      swift_bridgeObjectRelease();
    }
  }
  int64_t v9 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    if (v9 >= v62) {
      goto LABEL_37;
    }
    unint64_t v10 = *(void *)(v61 + 8 * v9);
    uint64_t v11 = v4 + 1;
    if (!v10)
    {
      sub_10009562C();
      if (v12 == v13) {
        goto LABEL_37;
      }
      sub_100095638();
      if (!v10)
      {
        sub_10009562C();
        if (v12 == v13) {
          goto LABEL_37;
        }
        sub_100095638();
        if (!v10)
        {
          sub_10009562C();
          if (v12 == v13) {
            goto LABEL_37;
          }
          sub_100095638();
          if (!v10)
          {
            sub_10009562C();
            if (v12 == v13) {
              goto LABEL_37;
            }
            sub_100095638();
            if (!v10)
            {
              uint64_t v11 = v14 + 5;
              if (v14 + 5 >= v62) {
                goto LABEL_37;
              }
              unint64_t v10 = *(void *)(v61 + 8 * v11);
              if (!v10)
              {
                int64_t v15 = v4 + 7;
                while (v15 < v62)
                {
                  unint64_t v10 = *(void *)(v61 + 8 * v15++);
                  if (v10)
                  {
                    uint64_t v11 = v15 - 1;
                    goto LABEL_25;
                  }
                }
LABEL_37:
                swift_release();
                swift_bridgeObjectRelease();
                return (uint64_t)v6;
              }
            }
          }
        }
      }
    }
LABEL_25:
    unint64_t v5 = (v10 - 1) & v10;
    unint64_t v8 = __clz(__rbit64(v10)) + (v11 << 6);
    uint64_t v4 = v11;
    goto LABEL_26;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_100094DCC(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  id v9 = [a1 valueType];
  self;
  uint64_t v10 = swift_dynamicCastObjCClass();
  if (v10)
  {
    uint64_t v11 = (void *)v10;
    id v12 = [a1 value];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    if (swift_dynamicCast())
    {
      swift_bridgeObjectRetain();
      unint64_t v13 = a3;
      swift_bridgeObjectRetain();
      id v14 = [v11 enumerationIdentifier];
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v17 = v16;

      unint64_t v47 = v17;
      v18._uint64_t countAndFlagsBits = 46;
      v18._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v18);
      String.append(_:)(v45);
      swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits = v15;
      unint64_t object = v47;
LABEL_4:

LABEL_31:
      uint64_t v35 = _swiftEmptyArrayStorage;
      uint64_t v37 = a4;
      uint64_t v36 = a2;
      goto LABEL_32;
    }
  }

  id v21 = [a1 valueType];
  self;
  if (swift_dynamicCastObjCClass())
  {
    sub_10000D9D4(0, (unint64_t *)&qword_10017DD30);
    id v22 = [self BOOLValueType];
    char v23 = static NSObject.== infix(_:_:)();

    if (v23)
    {
      id v24 = [a1 value];
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      if (swift_dynamicCast())
      {

        if (LOBYTE(v45._countAndFlagsBits)) {
          uint64_t countAndFlagsBits = 1163219540;
        }
        else {
          uint64_t countAndFlagsBits = 0x45534C4146;
        }
        if (LOBYTE(v45._countAndFlagsBits)) {
          unint64_t object = 0xE400000000000000;
        }
        else {
          unint64_t object = 0xE500000000000000;
        }
        goto LABEL_25;
      }
    }
  }

  id v9 = [a1 valueType];
  self;
  uint64_t v25 = (void *)swift_dynamicCastObjCClass();
  if (!v25) {
    goto LABEL_19;
  }
  id v26 = [v25 memberValueType];
  self;
  if (!swift_dynamicCastObjCClass())
  {

    goto LABEL_22;
  }

  id v27 = [a1 value];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_10000BF1C(&qword_10017DED8);
  if (swift_dynamicCast())
  {
    if (*(void *)(v45._countAndFlagsBits + 16))
    {
      uint64_t countAndFlagsBits = *(void *)(v45._countAndFlagsBits + 32);
      unint64_t object = *(void *)(v45._countAndFlagsBits + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      unint64_t v13 = a3;
      swift_bridgeObjectRetain();
      goto LABEL_4;
    }

    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_19:
  }
LABEL_22:
  id v28 = [a1 valueType];
  self;
  uint64_t v29 = swift_dynamicCastObjCClass();

  if (v29)
  {
    id v30 = [a1 value];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    if (swift_dynamicCast())
    {
      unint64_t object = (unint64_t)v45._object;
      uint64_t countAndFlagsBits = v45._countAndFlagsBits;
LABEL_25:
      swift_bridgeObjectRetain();
      unint64_t v13 = a3;
LABEL_30:
      swift_bridgeObjectRetain();
      goto LABEL_31;
    }
  }
  id v31 = [a1 valueType];
  char v32 = sub_100095460();

  unint64_t v13 = a3;
  if ((v32 & 1) != 0
    && (id v33 = [a1 value],
        _bridgeAnyObjectToAny(_:)(),
        swift_unknownObjectRelease(),
        (swift_dynamicCast() & 1) != 0)
    || (id v34 = [a1 value],
        _bridgeAnyObjectToAny(_:)(),
        swift_unknownObjectRelease(),
        swift_dynamicCast()))
  {
    unint64_t object = (unint64_t)v45._object;
    uint64_t countAndFlagsBits = v45._countAndFlagsBits;
    swift_bridgeObjectRetain();
    goto LABEL_30;
  }
  if (qword_10017C460 != -1) {
    swift_once();
  }
  uint64_t v38 = type metadata accessor for Logger();
  sub_10000BEE4(v38, (uint64_t)qword_100181ED8);
  swift_bridgeObjectRetain_n();
  Swift::Int v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v39, v40))
  {
    char v41 = (uint8_t *)swift_slowAlloc();
    uint64_t v46 = swift_slowAlloc();
    *(_DWORD *)char v41 = 136315138;
    swift_bridgeObjectRetain();
    sub_100013090(a2, a3, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Tried converting parameter %s to String but failed", v41, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v37 = 0;
  a5 = 0;
  uint64_t v36 = 0;
  unint64_t v13 = 0;
  uint64_t countAndFlagsBits = 0;
  unint64_t object = 0;
  uint64_t v35 = 0;
LABEL_32:
  *(void *)a6 = v37;
  *(void *)(a6 + 8) = a5;
  *(void *)(a6 + 16) = v36;
  *(void *)(a6 + 24) = v13;
  *(void *)(a6 + 32) = countAndFlagsBits;
  *(void *)(a6 + 40) = object;
  *(void *)(a6 + 48) = v35;
  *(_WORD *)(a6 + 56) = 0;
}

uint64_t sub_100095460()
{
  sub_10000D9D4(0, (unint64_t *)&qword_10017DD30);
  uint64_t v0 = self;
  id v1 = [v0 intValueType];
  char v2 = static NSObject.== infix(_:_:)();

  if (v2) {
    return 1;
  }
  id v3 = [v0 doubleValueType];
  char v4 = static NSObject.== infix(_:_:)();

  if (v4) {
    return 1;
  }
  id v5 = [v0 int16ValueType];
  char v6 = static NSObject.== infix(_:_:)();

  if (v6) {
    return 1;
  }
  id v7 = [v0 int32ValueType];
  char v8 = static NSObject.== infix(_:_:)();

  if (v8) {
    return 1;
  }
  id v10 = [v0 int64ValueType];
  char v11 = static NSObject.== infix(_:_:)();

  return v11 & 1;
}

uint64_t sub_1000955C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000BF1C((uint64_t *)&unk_10017F198);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100095644(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LNActionRecord();
  uint64_t v18 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  uint64_t v17 = (uint64_t)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  char v8 = (char *)&v15 - v7;
  unint64_t v19 = _swiftEmptyArrayStorage;
  uint64_t v16 = *(void *)(a1 + 16);
  if (v16)
  {
    unint64_t v9 = 0;
    uint64_t v15 = a2;
    while (v9 < *(void *)(a1 + 16))
    {
      unint64_t v10 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
      uint64_t v11 = *(void *)(v18 + 72);
      uint64_t v12 = sub_1000A3A48(a1 + v10 + v11 * v9, (uint64_t)v8, (void (*)(void))type metadata accessor for LNActionRecord);
      __chkstk_darwin(v12);
      *(&v15 - 2) = (uint64_t)v8;
      if (sub_100096E44(a2, sub_1000A3A9C))
      {
        sub_1000A3AF8((uint64_t)v8, v17, (void (*)(void))type metadata accessor for LNActionRecord);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000579CC();
        }
        unint64_t v13 = v19;
        unint64_t v14 = v19[2];
        if (v14 >= v19[3] >> 1)
        {
          sub_1000579CC();
          unint64_t v13 = v19;
        }
        v13[2] = v14 + 1;
        sub_1000A3AF8(v17, (uint64_t)v13 + v10 + v14 * v11, (void (*)(void))type metadata accessor for LNActionRecord);
        a2 = v15;
      }
      else
      {
        sub_1000A3AA4((uint64_t)v8, (void (*)(void))type metadata accessor for LNActionRecord);
      }
      if (v16 == ++v9) {
        goto LABEL_12;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_12:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000958E8(void *a1, uint64_t a2, uint64_t a3)
{
  sub_1000427DC(a2, &v72);
  uint64_t v5 = v72;
  uint64_t v71 = v75;
  unint64_t v6 = v76;
  uint64_t v69 = v73;
  int64_t v70 = (unint64_t)(v74 + 64) >> 6;
  swift_bridgeObjectRetain();
  while (1)
  {
    if (v6)
    {
      unint64_t v7 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v8 = v7 | (v71 << 6);
      goto LABEL_20;
    }
    int64_t v9 = v71 + 1;
    if (__OFADD__(v71, 1)) {
      break;
    }
    if (v9 >= v70) {
      goto LABEL_38;
    }
    unint64_t v10 = *(void *)(v69 + 8 * v9);
    uint64_t v11 = v71 + 1;
    if (!v10)
    {
      uint64_t v11 = v71 + 2;
      if (v71 + 2 >= v70) {
        goto LABEL_38;
      }
      unint64_t v10 = *(void *)(v69 + 8 * v11);
      if (!v10)
      {
        uint64_t v11 = v71 + 3;
        if (v71 + 3 >= v70) {
          goto LABEL_38;
        }
        unint64_t v10 = *(void *)(v69 + 8 * v11);
        if (!v10)
        {
          uint64_t v11 = v71 + 4;
          if (v71 + 4 >= v70) {
            goto LABEL_38;
          }
          unint64_t v10 = *(void *)(v69 + 8 * v11);
          if (!v10)
          {
            uint64_t v11 = v71 + 5;
            if (v71 + 5 >= v70) {
              goto LABEL_38;
            }
            unint64_t v10 = *(void *)(v69 + 8 * v11);
            if (!v10)
            {
              int64_t v12 = v71 + 6;
              while (v12 < v70)
              {
                unint64_t v10 = *(void *)(v69 + 8 * v12++);
                if (v10)
                {
                  uint64_t v11 = v12 - 1;
                  goto LABEL_19;
                }
              }
LABEL_38:
              swift_release();
              swift_bridgeObjectRelease();
              return (uint64_t)a1;
            }
          }
        }
      }
    }
LABEL_19:
    unint64_t v6 = (v10 - 1) & v10;
    unint64_t v8 = __clz(__rbit64(v10)) + (v11 << 6);
    uint64_t v71 = v11;
LABEL_20:
    unint64_t v13 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v8);
    uint64_t v15 = *v13;
    uint64_t v14 = v13[1];
    uint64_t v16 = *(void *)(a3 + 16);
    swift_bridgeObjectRetain();
    if (!v16)
    {
      swift_bridgeObjectRetain();
LABEL_25:
      sub_10000D9D4(0, &qword_10017D0A0);
      sub_100048188();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      Dictionary.init(dictionaryLiteral:)();
      goto LABEL_26;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v23 = sub_100021098(v15, v14, v17, v18, v19, v20, v21, v22, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75,
            v76,
            v77,
            (uint64_t)v78,
            v79,
            v80,
            v81,
            v82);
    if ((v24 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_25;
    }
    uint64_t v25 = *(void *)(*(void *)(a3 + 56) + 8 * v23);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000A1D28(v25);
    swift_bridgeObjectRelease();
LABEL_26:
    id v26 = objc_allocWithZone((Class)LNBundleActionsMetadata);
    id v27 = sub_1000A3524();
    if (v27)
    {
      id v37 = v27;
      HIDWORD(v66) = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v44 = sub_100021098(v15, v14, v38, v39, v40, v41, v42, v43, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75,
              v76,
              v77,
              (uint64_t)a1,
              v79,
              v80,
              v81,
              v82);
      uint64_t v45 = a1[2];
      HIDWORD(v68) = v46;
      BOOL v47 = (v46 & 1) == 0;
      Swift::Int v48 = v45 + v47;
      if (__OFADD__(v45, v47)) {
        goto LABEL_40;
      }
      unint64_t v67 = v44;
      sub_10000BF1C(&qword_10017F2B8);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(SBYTE4(v66), v48))
      {
        unint64_t v67 = sub_100021098(v15, v14, v49, v50, v51, v52, v53, v54, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75,
                v76,
                v77,
                (uint64_t)v78,
                v79,
                v80,
                v81,
                v82);
        if ((BYTE4(v68) & 1) != (v55 & 1)) {
          goto LABEL_42;
        }
      }
      a1 = v78;
      if ((v68 & 0x100000000) != 0)
      {
        uint64_t v56 = v78[7];

        *(void *)(v56 + 8 * v67) = v37;
      }
      else
      {
        v78[(v67 >> 6) + 8] |= 1 << v67;
        uint64_t v60 = (uint64_t *)(a1[6] + 16 * v67);
        *uint64_t v60 = v15;
        v60[1] = v14;
        *(void *)(a1[7] + 8 * v67) = v37;
        uint64_t v61 = a1[2];
        BOOL v62 = __OFADD__(v61, 1);
        uint64_t v63 = v61 + 1;
        if (v62) {
          goto LABEL_41;
        }
        a1[2] = v63;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v34 = sub_100021098(v15, v14, v28, v29, v30, v31, v32, v33, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75,
              v76,
              v77,
              (uint64_t)v78,
              v79,
              v80,
              v81,
              v82);
      char v36 = v35;
      swift_bridgeObjectRelease();
      if (v36)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v78 = a1;
        Swift::Int v58 = a1[3];
        sub_10000BF1C(&qword_10017F2B8);
        _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v58);
        a1 = v78;
        swift_bridgeObjectRelease();
        uint64_t v59 = *(void **)(a1[7] + 8 * v34);
        sub_10000D9D4(0, &qword_10017E9F8);
        _NativeDictionary._delete(at:)();

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
      }
    }
  }
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *sub_100095DB4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100057848();
    uint64_t v3 = *(void *)(type metadata accessor for LNBundleRecord() - 8);
    uint64_t v4 = *(void *)(v3 + 72);
    uint64_t v5 = (uint64_t *)(((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)) + a1 + 8);
    do
    {
      uint64_t v7 = *(v5 - 1);
      uint64_t v6 = *v5;
      unint64_t v9 = _swiftEmptyArrayStorage[2];
      unint64_t v8 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain();
      if (v9 >= v8 >> 1) {
        sub_100057848();
      }
      uint64_t v5 = (uint64_t *)((char *)v5 + v4);
      _swiftEmptyArrayStorage[2] = v9 + 1;
      unint64_t v10 = &_swiftEmptyArrayStorage[2 * v9];
      v10[4] = v7;
      v10[5] = v6;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

void *sub_100095EE4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v4 = type metadata accessor for LNActionRecord();
    uint64_t v5 = a1
       + ((*(unsigned __int8 *)(*(void *)(v4 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80));
    uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 72);
    do
    {
      id v7 = *(id *)(v5 + *(int *)(v4 + 24));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v5 += v6;
      --v2;
    }
    while (v2);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_100096000(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a1 >> 62)
  {
LABEL_21:
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    if (v7) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7)
    {
LABEL_3:
      uint64_t v20 = a3;
      a3 = 4;
      while (1)
      {
        if ((a1 & 0xC000000000000001) != 0) {
          id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v8 = *(id *)(a1 + 8 * a3);
        }
        unint64_t v9 = v8;
        uint64_t v10 = a3 - 3;
        if (__OFADD__(a3 - 4, 1))
        {
          __break(1u);
          goto LABEL_21;
        }
        uint64_t v11 = sub_10004FB6C(v8);
        if (!v12) {
          break;
        }
        if (v11 == a2 && v12 == v20)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v14 & 1) == 0) {
            break;
          }
        }
        sub_10000D9D4(0, (unint64_t *)&qword_10017DD30);
        id v15 = [v9 valueType];
        char v16 = static NSObject.== infix(_:_:)();

        if (v16)
        {
          uint64_t v17 = 1;
          goto LABEL_23;
        }
LABEL_17:
        ++a3;
        if (v10 == v7)
        {
          uint64_t v17 = 0;
          goto LABEL_23;
        }
      }

      goto LABEL_17;
    }
  }
  uint64_t v17 = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v17;
}

uint64_t sub_1000961BC()
{
  uint64_t v0 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v2 = v1;
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v5 = v4;
  char v6 = static Data.== infix(_:_:)();
  sub_10000DA10(v3, v5);
  sub_10000DA10(v0, v2);
  return v6 & 1;
}

BOOL sub_10009623C(char a1, char a2)
{
  return qword_100140728[a1] == qword_100140728[a2];
}

void sub_100096260(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

#error "10009634C: call analysis failed (funcsize=100)"

void sub_100096460(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t *a8, uint64_t a9, void (*a10)(id, uint64_t, uint64_t, uint64_t), void (*a11)(uint64_t, uint64_t, uint64_t))
{
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  uint64_t v13 = *a1;
  if (!*(void *)(*a1 + 16))
  {
    swift_bridgeObjectRetain();
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  uint64_t v20 = sub_100021098(v30, v31, v14, v15, v16, v17, v18, v19, v25, v26, v27, v28, (uint64_t)v29, v30, v31, a2, a3, a4, v35,
          v36,
          v37,
          v38,
          v39,
          v40,
          v41,
          v42);
  if ((v21 & 1) == 0)
  {
LABEL_5:
    sub_10000D9D4(0, a8);
    uint64_t v22 = Dictionary.init(dictionaryLiteral:)();
    goto LABEL_6;
  }
  uint64_t v22 = *(void *)(*(void *)(v13 + 56) + 8 * v20);
  swift_bridgeObjectRetain();
LABEL_6:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  id v23 = v29;
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  a10(v23, v27, v28, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  a11(v22, v30, v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void _LNMetadataProviderDirect.actions()()
{
  id v1 = v0;
  sub_1000A4230();
}

uint64_t _LNMetadataProviderDirect.actions(forBundleIdentifier:andActionIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000967B4(a1, a2, a3, a4, (uint64_t (*)(id, id, uint64_t, uint64_t, uint64_t, uint64_t))sub_100098D90);
}

void _LNMetadataProviderDirect.actionsConforming(to:logicalType:bundleIdentifier:)()
{
  sub_1000A41E4();
  v0;
  swift_bridgeObjectRetain();
  sub_10006FF2C();
  sub_1000983D4();
}

void _LNMetadataProviderDirect.actionsAndSystemProtocolDefaults(forBundleIdentifier:)()
{
  sub_1000A43DC();
  swift_bridgeObjectRetain();
  id v1 = v0;
  sub_100099908();
}

uint64_t _LNMetadataProviderDirect.actions(forBundleIdentifier:)()
{
  return sub_1000A2948();
}

void _LNMetadataProviderDirect.actionIdentifiers(forBundleIdentifier:)()
{
}

uint64_t _LNMetadataProviderDirect.action(forBundleIdentifier:andActionIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000967B4(a1, a2, a3, a4, (uint64_t (*)(id, id, uint64_t, uint64_t, uint64_t, uint64_t))sub_100097978);
}

uint64_t _LNMetadataProviderDirect.action(forBundleIdentifier:actionIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000967B4(a1, a2, a3, a4, (uint64_t (*)(id, id, uint64_t, uint64_t, uint64_t, uint64_t))sub_10009A83C);
}

uint64_t sub_1000967B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(id, id, uint64_t, uint64_t, uint64_t, uint64_t))
{
  id v11 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a5(v11, v11, a1, a2, a3, a4);
}

void _LNMetadataProviderDirect.actionsConforming(to:withParametersOfTypes:bundleIdentifier:)()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v1 = v0;
  sub_100098850();
}

void _LNMetadataProviderDirect.actions(withFullyQualifiedIdentifiers:)()
{
  v0;
  swift_bridgeObjectRetain();
  sub_1000A4508();
}

void _LNMetadataProviderDirect.bundles()()
{
  id v1 = v0;
  sub_100099D94();
}

void _LNMetadataProviderDirect.bundleRegistrations()()
{
  id v1 = v0;
  sub_1000A4230();
}

void _LNMetadataProviderDirect.queries()()
{
  id v1 = v0;
  sub_1000A4230();
}

void _LNMetadataProviderDirect.queries(forBundleIdentifier:ofType:)()
{
  sub_1000A41E4();
  v0;
  swift_bridgeObjectRetain();
  sub_10006FF2C();
  sub_10009B194();
}

void _LNMetadataProviderDirect.query(forBundleIdentifier:queryIdentifier:)()
{
}

void _LNMetadataProviderDirect.enums()()
{
  id v1 = v0;
  sub_1000A4230();
}

void _LNMetadataProviderDirect.enums(forBundleIdentifier:)()
{
}

void _LNMetadataProviderDirect.enum(forBundleIdentifier:enumIdentifier:)()
{
}

void _LNMetadataProviderDirect.entities()()
{
  id v1 = v0;
  sub_1000A4230();
}

void _LNMetadataProviderDirect.entities(forBundleIdentifier:)()
{
}

void sub_100096B20()
{
}

void _LNMetadataProviderDirect.entity(forBundleIdentifier:entityIdentifier:)()
{
}

void sub_100096BA0()
{
  id v1 = v0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10009B814();
}

void _LNMetadataProviderDirect.entityIdentifiers(forBundleIdentifier:)()
{
}

void sub_100096C5C()
{
  swift_bridgeObjectRetain();
  id v1 = v0;
  sub_10009A328();
}

id _LNMetadataProviderDirect.metadataVersion(forBundleIdentifier:error:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = v3;
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_1000A4558();
  return sub_10009BF60(v6, v7, v8, v9, a3);
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _LNMetadataProviderDirect.appShortcutsProviderMangledTypeName(forBundleIdentifier:)(Swift::String forBundleIdentifier)
{
  sub_1000A43DC();
  id v5 = v2;
  swift_bridgeObjectRetain();
  uint64_t v6 = (uint64_t)sub_10009C560((uint64_t)v5, v5, v4, v3);
  if (!v1 && !v7)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000A3D80();
    id v8 = objc_allocWithZone((Class)NSError);
    sub_1000A31C0(0, (uint64_t)v2, 9004, 0);
    uint64_t v6 = swift_willThrow();
  }
  result._unint64_t object = v7;
  result._uint64_t countAndFlagsBits = v6;
  return result;
}

uint64_t _LNMetadataProviderDirect.examplePhrases(forBundleIdentifier:)()
{
  return sub_1000A2948();
}

uint64_t sub_100096E44(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, id))
{
  sub_1000427DC(a1, v19);
  uint64_t v3 = v19[0];
  uint64_t v20 = v19[1];
  int64_t v4 = v19[3];
  unint64_t v5 = v19[4];
  int64_t v6 = (unint64_t)(v19[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  while (1)
  {
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v9 = v8 | (v4 << 6);
      goto LABEL_20;
    }
    int64_t v10 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    if (v10 >= v6) {
      goto LABEL_22;
    }
    unint64_t v11 = *(void *)(v20 + 8 * v10);
    int64_t v12 = v4 + 1;
    if (!v11)
    {
      int64_t v12 = v4 + 2;
      if (v4 + 2 >= v6) {
        goto LABEL_22;
      }
      unint64_t v11 = *(void *)(v20 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v4 + 3;
        if (v4 + 3 >= v6) {
          goto LABEL_22;
        }
        unint64_t v11 = *(void *)(v20 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v4 + 4;
          if (v4 + 4 >= v6) {
            goto LABEL_22;
          }
          unint64_t v11 = *(void *)(v20 + 8 * v12);
          if (!v11)
          {
            int64_t v12 = v4 + 5;
            if (v4 + 5 >= v6) {
              goto LABEL_22;
            }
            unint64_t v11 = *(void *)(v20 + 8 * v12);
            if (!v11)
            {
              int64_t v13 = v4 + 6;
              while (v13 < v6)
              {
                unint64_t v11 = *(void *)(v20 + 8 * v13++);
                if (v11)
                {
                  int64_t v12 = v13 - 1;
                  goto LABEL_19;
                }
              }
LABEL_22:
              swift_release();
              return 1;
            }
          }
        }
      }
    }
LABEL_19:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
    int64_t v4 = v12;
LABEL_20:
    uint64_t v14 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = *(void **)(*(void *)(v3 + 56) + 8 * v9);
    swift_bridgeObjectRetain();
    id v18 = v17;
    LOBYTE(v15) = a2(v15, v16, v18);

    uint64_t result = swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
    {
      swift_release();
      return 0;
    }
  }
  __break(1u);
  return result;
}

void ***_LNMetadataProviderDirect.__allocating_init(connection:options:)()
{
  sub_1000A43DC();
  id v3 = objc_allocWithZone(v0);
  return _LNMetadataProviderDirect.init(connection:options:)(v2, v1);
}

void ***_LNMetadataProviderDirect.init(connection:options:)(void *a1, uint64_t a2)
{
  uint64_t v51 = a2;
  id v3 = v2;
  ObjectType = (objc_class *)swift_getObjectType();
  sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  sub_1000283FC();
  __chkstk_darwin(v5);
  uint64_t v54 = (void ***)((char *)v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for URL();
  sub_10000E948();
  uint64_t v55 = v8;
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v11);
  uint64_t v50 = (char *)v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v44 - v13;
  uint64_t v56 = swift_allocBox();
  uint64_t v57 = v7;
  uint64_t v53 = v15;
  sub_10000D5B0(v15, 1, 1, v7);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = 0;
  uint64_t v65 = sub_1000A32A8;
  uint64_t v66 = v16;
  aBlock = _NSConcreteStackBlock;
  uint64_t v62 = 1107296256;
  uint64_t v63 = sub_100096260;
  uint64_t v64 = &unk_100171CC0;
  uint64_t v17 = _Block_copy(&aBlock);
  id v18 = v3;
  swift_retain();
  swift_release();
  id v19 = [a1 synchronousRemoteObjectProxyWithErrorHandler:v17];
  _Block_release(v17);
  p_aBlock = &aBlock;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_10000BF1C(&qword_10017F1A8);
  if (swift_dynamicCast())
  {
    int v46 = v18;
    v44[1] = v10;
    uint64_t v45 = v14;
    uint64_t v21 = v55;
    id v49 = a1;
    uint64_t v22 = v60;
    uint64_t v23 = swift_allocObject();
    uint64_t v24 = v56;
    *(void *)(v23 + 16) = v16;
    *(void *)(v23 + 24) = v24;
    uint64_t v65 = sub_1000A3308;
    uint64_t v66 = v23;
    aBlock = _NSConcreteStackBlock;
    uint64_t v62 = 1107296256;
    uint64_t v63 = sub_100006670;
    uint64_t v64 = &unk_100171D10;
    uint64_t v25 = _Block_copy(&aBlock);
    Swift::Int v48 = (void ***)v16;
    swift_retain();
    swift_retain();
    swift_release();
    BOOL v47 = v22;
    [v22 fetchDatabaseURL:v25];
    _Block_release(v25);
    uint64_t v26 = v53;
    swift_beginAccess();
    uint64_t v27 = v26;
    p_aBlock = v54;
    sub_1000A3B4C(v27, (uint64_t)v54, (uint64_t *)&unk_10017D0C0);
    if (sub_10000D5D8((uint64_t)p_aBlock, 1, v57) == 1)
    {

      sub_1000347E8((uint64_t)p_aBlock, (uint64_t *)&unk_10017D0C0);
      swift_beginAccess();
      if (!*(void *)(v16 + 16))
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        sub_1000A3D80();
        id v33 = objc_allocWithZone((Class)NSError);
        sub_1000A41BC();
      }
      id v34 = v49;
      p_aBlock = v48;
      swift_errorRetain();
      swift_willThrow();
      swift_release();
      swift_release();
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v29 = *(void (**)(char *, void ***, uint64_t))(v21 + 32);
      uint64_t v30 = (uint64_t)v45;
      v29(v45, p_aBlock, v57);
      URL.startAccessingSecurityScopedResource()();
      URL.absoluteString.getter();
      sub_1000A3D80();
      type metadata accessor for Connection();
      swift_allocObject();
      uint64_t v31 = v52;
      uint64_t v32 = Connection.init(_:readonly:)((uint64_t)p_aBlock, v30, 1);
      if (!v31)
      {
        uint64_t v36 = v32;
        swift_retain();
        Connection.busyTimeout.setter(0.5);
        uint64_t v37 = v50;
        uint64_t v38 = v57;
        (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v50, v30, v57);
        unint64_t v39 = (*(unsigned __int8 *)(v21 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
        uint64_t v40 = swift_allocObject();
        v29((char *)(v40 + v39), (void ***)v37, v38);
        swift_beginAccess();
        uint64_t v41 = *(void *)(v36 + 24);
        *(void *)(v36 + 24) = sub_1000A3394;
        *(void *)(v36 + 32) = v40;
        sub_100093428(v41);
        uint64_t v42 = v46;
        *(void *)&v46[OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_connection] = v36;
        v42[OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_requiresAssertion] = (v51 & 2) != 0;

        v59.receiver = v42;
        v59.super_class = ObjectType;
        p_aBlock = (void ***)[super init];
        swift_release();
        swift_unknownObjectRelease();

        sub_100013EC4();
        v43();
        swift_release();
        swift_release();
        return p_aBlock;
      }

      URL.stopAccessingSecurityScopedResource()();
      swift_willThrow();
      swift_unknownObjectRelease();

      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v30, v57);
      swift_release();
      swift_release();
    }
  }
  else
  {

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000A3D80();
    id v28 = objc_allocWithZone((Class)NSError);
    sub_1000A41BC();
    swift_willThrow();
    swift_release();
    swift_release();
  }
  swift_deallocPartialClassInstance();
  return p_aBlock;
}

uint64_t sub_100097700(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 16) = a1;
  swift_errorRelease();
  return swift_errorRetain();
}

uint64_t sub_100097754(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = swift_projectBox();
  uint64_t v10 = 1;
  swift_beginAccess();
  *(void *)(a3 + 16) = a2;
  swift_errorRetain();
  swift_errorRelease();
  if (a1)
  {
    id v11 = [a1 url];
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v10 = 0;
  }
  uint64_t v12 = type metadata accessor for URL();
  sub_10000D5B0((uint64_t)v8, v10, 1, v12);
  swift_beginAccess();
  return sub_100042E84((uint64_t)v8, v9);
}

id sub_10009791C(uint64_t a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v1[OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_connection] = a1;
  v1[OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_requiresAssertion] = 0;
  v5.receiver = v1;
  v5.super_class = ObjectType;
  return [super init];
}

void sub_100097978()
{
  sub_100018E30();
  int64_t v4 = v3;
  sub_1000A3E98();
  sub_1000A3D1C(__stack_chk_guard);
  sub_10000E948();
  __chkstk_darwin(v5);
  sub_1000A3C1C();
  sub_1000A3D34();
  if (!v19
    || (uint64_t v6 = self,
        id v7 = sub_1000A45AC(v6),
        unsigned int v8 = [v7 isApplication],
        v7,
        !v8))
  {
    sub_1000A3EA4();
    if (v1)
    {
      swift_bridgeObjectRelease();
LABEL_28:
      swift_bridgeObjectRelease();

      goto LABEL_29;
    }

    goto LABEL_10;
  }
  id v9 = [self *(SEL *)(v0 + 1840)];
  sub_10000BF1C(&qword_10017D0D0);
  *(_OWORD *)(sub_10001B414() + 16) = xmmword_10013EF30;
  sub_10000D9D4(0, (unint64_t *)&unk_10017F258);
  sub_1000A3BA4();
  sub_100018F2C();
  id v10 = sub_1000A3BB8();
  sub_1000A3FD4((uint64_t)v10);
  id v11 = v34;
  id v12 = objc_allocWithZone((Class)RBSAssertion);
  sub_1000A3CAC((uint64_t)"AppIntents Query");
  sub_1000A4074();
  if ([v13 acquireWithError:&v34])
  {
    id v14 = v34;
    sub_1000A3EA4();
    sub_1000A3F9C();
    if (v1)
    {
      sub_1000A3E80(v15);
      goto LABEL_12;
    }
    sub_1000A3E80(v15);

LABEL_10:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_29:
    sub_1000A3CD4();
    sub_100018E80();
    return;
  }
  id v16 = v34;
  sub_1000A4154();

  swift_willThrow();
LABEL_12:
  sub_1000A3D68();
  sub_10000BF1C(&qword_10017C810);
  sub_10000D9D4(0, &qword_10017F268);
  if (!sub_1000A3C60())
  {
LABEL_26:

    goto LABEL_27;
  }
  id v32 = v9;
  unsigned __int8 v17 = [v33 domain];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000A4604();
  BOOL v19 = v1 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v9 == v18;
  if (v19)
  {
    sub_10001B508();
  }
  else
  {
    sub_1000A3C84();
    sub_1000A4528();
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0)
    {

LABEL_27:
      swift_errorRelease();
      swift_bridgeObjectRelease();
      goto LABEL_28;
    }
  }
  swift_errorRelease();
  if ((id)getLNLogCategoryMetadata())
  {
    Logger.init(_:)();
    id v20 = v33;
    uint64_t v21 = (void *)sub_1000A40EC();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (sub_1000A3E04(v22))
    {
      sub_1000536D0();
      uint64_t v35 = sub_100060438();
      sub_1000A3DEC(4.8149e-34);
      id v23 = [v4 localizedDescription];
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v26 = v25;

      uint64_t v27 = sub_100013090(v24, v26, &v35);
      sub_1000A3D40(v27);

      swift_bridgeObjectRelease();
      sub_1000A3DAC((void *)&_mh_execute_header, v28, v29, "Failed to acquire assertions: %s");
      sub_1000A3F04();
      sub_10000EB10();
      sub_10000EB10();
    }
    else
    {
    }
    sub_100013EC4();
    v30();
    id v9 = v32;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000A3D80();
    id v31 = objc_allocWithZone((Class)NSError);
    sub_1000A3BD8();
    sub_1000A3CE0();

    goto LABEL_26;
  }
  __break(1u);
}

void sub_100097D9C()
{
}

void sub_100097DFC()
{
}

void sub_100097E5C()
{
  sub_100018E30();
  id v3 = v2;
  sub_1000A3E98();
  sub_1000A3D1C(__stack_chk_guard);
  sub_10000E948();
  __chkstk_darwin(v4);
  sub_10000EBF4();
  sub_1000A3D34();
  if (!v23
    || (id v5 = [self currentProcess],
        unsigned int v6 = [v5 isApplication],
        v5,
        !v6))
  {
    swift_retain();
    uint64_t v14 = sub_1000A44BC();
    uint64_t v15 = v3(v14);
    if (v0)
    {
      swift_bridgeObjectRelease();

      swift_release();
LABEL_28:
      sub_1000A3CD4();
      sub_100018E80();
      return;
    }
    uint64_t v16 = v15;
    swift_release();
    sub_1000705F0(v16);

    swift_bridgeObjectRelease();
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  id v7 = [self currentProcess];
  sub_10000BF1C(&qword_10017D0D0);
  uint64_t v8 = sub_10001B414();
  *(_OWORD *)(v8 + 16) = xmmword_10013EF30;
  sub_10000D9D4(0, (unint64_t *)&unk_10017F258);
  sub_1000A3BA4();
  sub_100018F2C();
  *(void *)(v8 + 32) = sub_1000A3BB8();
  specialized Array._endMutation()();
  id v9 = objc_allocWithZone((Class)RBSAssertion);
  id v10 = sub_1000A3C34((uint64_t)"AppIntents Query");
  v37[0] = 0;
  uint64_t v35 = v10;
  if ([v10 acquireWithError:v37])
  {
    id v11 = v37[0];
    swift_retain();
    uint64_t v12 = sub_1000A44A8();
    uint64_t v13 = v3(v12);
    if (v0)
    {
      swift_release();
      [v10 invalidate];
      goto LABEL_12;
    }
    uint64_t v31 = v13;
    swift_release();
    sub_1000705F0(v31);
    swift_bridgeObjectRelease();
    [v10 invalidate];

    goto LABEL_10;
  }
  id v17 = v37[0];
  _convertNSErrorToError(_:)();

  swift_willThrow();
LABEL_12:
  sub_1000A3D68();
  sub_10000BF1C(&qword_10017C810);
  sub_10000D9D4(0, &qword_10017F268);
  if (!swift_dynamicCast())
  {

    goto LABEL_27;
  }
  id v18 = [v36 domain];
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;

  BOOL v23 = v19 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v21 == v22;
  if (v23)
  {
    sub_1000A4490();
  }
  else
  {
    char v24 = sub_1000A3E38();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v24 & 1) == 0)
    {

LABEL_27:
      swift_errorRelease();
      swift_bridgeObjectRelease();

      goto LABEL_28;
    }
  }
  swift_errorRelease();
  if ((id)getLNLogCategoryMetadata())
  {
    Logger.init(_:)();
    id v25 = v36;
    unint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    uint64_t v28 = v27;
    if (os_log_type_enabled(v26, v27))
    {
      os_log_type_t v34 = v28;
      uint64_t v28 = sub_1000536D0();
      v37[2] = (id)sub_100060438();
      *(_DWORD *)uint64_t v28 = 136315138;
      id v29 = [v25 localizedDescription:v28 + 4];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v30 = sub_1000A3DD0();
      sub_1000A4290(v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v34, "Failed to acquire assertions: %s", (uint8_t *)v28, 0xCu);
      swift_arrayDestroy();
      sub_10000EB10();
      sub_10000EB10();
    }
    else
    {
    }
    sub_100013EC4();
    v32();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000A4594();
    id v33 = objc_allocWithZone((Class)NSError);
    sub_1000A3C00((uint64_t)v26, v28);
    sub_1000A3CE0();

    goto LABEL_27;
  }
  __break(1u);
}

void sub_1000983D4()
{
  sub_100018E30();
  uint64_t v4 = v3;
  sub_1000A3E98();
  sub_1000A3D1C(__stack_chk_guard);
  sub_10000E948();
  __chkstk_darwin(v5);
  sub_1000A3C1C();
  sub_1000A3D34();
  if (!v19
    || (unsigned int v6 = self,
        id v7 = sub_1000A45AC(v6),
        unsigned int v8 = [v7 isApplication],
        v7,
        !v8))
  {
    sub_1000A3ED4();
    if (v1)
    {
      swift_bridgeObjectRelease();

LABEL_28:
      swift_bridgeObjectRelease();
      goto LABEL_29;
    }

    goto LABEL_10;
  }
  id v9 = [self *(SEL *)(v0 + 1840)];
  sub_10000BF1C(&qword_10017D0D0);
  *(_OWORD *)(sub_10001B414() + 16) = xmmword_10013EF30;
  sub_10000D9D4(0, (unint64_t *)&unk_10017F258);
  sub_1000A3BA4();
  sub_100018F2C();
  id v10 = sub_1000A3BB8();
  sub_1000A3FD4((uint64_t)v10);
  id v11 = v31[0];
  id v12 = objc_allocWithZone((Class)RBSAssertion);
  sub_1000A3CAC((uint64_t)"AppIntents Query");
  sub_1000A4074();
  if ([v13 acquireWithError:v31])
  {
    id v14 = v31[0];
    sub_1000A3ED4();
    sub_1000A3F9C();
    if (v1)
    {
      sub_1000A3E80(v15);
      goto LABEL_12;
    }
    sub_1000A3E80(v15);

LABEL_10:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_29:
    sub_1000A3CD4();
    sub_100018E80();
    return;
  }
  id v16 = v31[0];
  sub_1000A4154();

  swift_willThrow();
LABEL_12:
  sub_1000A3D68();
  sub_10000BF1C(&qword_10017C810);
  sub_10000D9D4(0, &qword_10017F268);
  if (!sub_1000A3C60())
  {
LABEL_26:

    goto LABEL_27;
  }
  id v29 = v9;
  unsigned __int8 v17 = [v30 domain];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000A4604();
  BOOL v19 = v1 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v9 == v18;
  if (v19)
  {
    sub_10001B508();
  }
  else
  {
    sub_1000A3C84();
    sub_1000A4528();
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0)
    {

LABEL_27:
      swift_errorRelease();
      swift_bridgeObjectRelease();

      goto LABEL_28;
    }
  }
  swift_errorRelease();
  if ((id)getLNLogCategoryMetadata())
  {
    Logger.init(_:)();
    id v20 = v30;
    uint64_t v21 = (void *)sub_1000A40EC();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (sub_1000A3E04(v22))
    {
      sub_1000536D0();
      v31[2] = (id)sub_100060438();
      sub_1000A3DEC(4.8149e-34);
      id v23 = [v4 localizedDescription];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v24 = sub_1000A3DD0();
      sub_1000A3D40(v24);

      swift_bridgeObjectRelease();
      sub_1000A3DAC((void *)&_mh_execute_header, v25, v26, "Failed to acquire assertions: %s");
      sub_1000A3F04();
      sub_10000EB10();
      sub_10000EB10();
    }
    else
    {
    }
    sub_100013EC4();
    v27();
    id v9 = v29;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000A3D80();
    id v28 = objc_allocWithZone((Class)NSError);
    sub_1000A3BD8();
    sub_1000A3CE0();

    goto LABEL_26;
  }
  __break(1u);
}

void sub_1000987F0()
{
}

void sub_100098850()
{
  sub_100018E30();
  sub_1000A3E98();
  sub_1000A3D1C(__stack_chk_guard);
  sub_10000E948();
  __chkstk_darwin(v2);
  sub_1000A3C1C();
  sub_1000A3D34();
  if (!v19
    || (id v3 = [self currentProcess],
        unsigned int v4 = [v3 isApplication],
        v3,
        !v4))
  {
    sub_1000A416C();
    if (v0)
    {
LABEL_27:
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      goto LABEL_28;
    }

    goto LABEL_9;
  }
  id v5 = [self currentProcess];
  sub_10000BF1C(&qword_10017D0D0);
  uint64_t v6 = sub_10001B414();
  *(_OWORD *)(v6 + 16) = xmmword_10013EF30;
  sub_10000D9D4(0, (unint64_t *)&unk_10017F258);
  sub_1000A3BA4();
  sub_100018F2C();
  *(void *)(v6 + 32) = sub_1000A3BB8();
  specialized Array._endMutation()();
  id v7 = objc_allocWithZone((Class)RBSAssertion);
  unint64_t v8 = sub_1000A3FF0();
  id v10 = sub_1000A3E20(v8, v9, v5);
  id v36 = 0;
  if ([v10 acquireWithError:&v36])
  {
    id v11 = v36;
    sub_1000A416C();
    sub_1000A3F9C();
    if (v0)
    {
      [v10 *(SEL *)(v12 + 1488)];
      goto LABEL_11;
    }
    [v10 *(SEL *)(v12 + 1488)];

LABEL_9:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_28:
    sub_1000A3CD4();
    sub_100018E80();
    return;
  }
  id v13 = v36;
  _convertNSErrorToError(_:)();

  swift_willThrow();
LABEL_11:
  sub_1000A3D68();
  sub_10000BF1C(&qword_10017C810);
  sub_10000D9D4(0, &qword_10017F268);
  if (!swift_dynamicCast())
  {

    goto LABEL_26;
  }
  os_log_type_t v34 = v10;
  id v14 = [v35 domain];
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unsigned __int8 v17 = v16;

  BOOL v19 = v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18;
  if (v19)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v20 & 1) == 0)
    {

LABEL_26:
      swift_errorRelease();
      goto LABEL_27;
    }
  }
  swift_errorRelease();
  if ((id)getLNLogCategoryMetadata())
  {
    Logger.init(_:)();
    id v21 = v35;
    os_log_type_t v22 = sub_1000A40EC();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      os_log_type_t v33 = v23;
      uint64_t v24 = (_DWORD *)sub_1000536D0();
      uint64_t v25 = sub_100060438();
      sub_1000A4224(v25);
      *uint64_t v24 = 136315138;
      id v26 = [v17 localizedDescription:v24 + 1];
      unsigned __int8 v17 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v27 = sub_1000A3F24();
      sub_1000A4290(v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      sub_1000A420C((void *)&_mh_execute_header, v22, v33, "Failed to acquire assertions: %s");
      swift_arrayDestroy();
      sub_10000EB10();
      sub_10000EB10();
    }
    else
    {
    }
    sub_100013EC4();
    v28();
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v31 = v30;
    id v32 = objc_allocWithZone((Class)NSError);
    sub_1000A3C00(v29, v31);
    sub_1000A3CE0();

    goto LABEL_26;
  }
  __break(1u);
}

void sub_100098D30()
{
}

void sub_100098D90()
{
  sub_100018E30();
  unsigned int v4 = v3;
  sub_1000A3E98();
  sub_1000A3D1C(__stack_chk_guard);
  sub_10000E948();
  __chkstk_darwin(v5);
  sub_1000A3C1C();
  sub_1000A3D34();
  if (!v21
    || (uint64_t v6 = self,
        id v7 = sub_1000A45AC(v6),
        unsigned int v8 = [v7 isApplication],
        v7,
        !v8))
  {
    swift_retain();
    uint64_t v16 = sub_1000A4030();
    if (v1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_release();
LABEL_28:
      sub_1000A3CD4();
      sub_100018E80();
      return;
    }
    uint64_t v17 = v16;
    swift_release();
    sub_100095EE4(v17);

    swift_bridgeObjectRelease();
LABEL_10:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  id v9 = [self *(SEL *)(v0 + 1840)];
  sub_10000BF1C(&qword_10017D0D0);
  *(_OWORD *)(sub_10001B414() + 16) = xmmword_10013EF30;
  sub_10000D9D4(0, (unint64_t *)&unk_10017F258);
  sub_1000A3BA4();
  sub_100018F2C();
  id v10 = sub_1000A3BB8();
  sub_1000A3FD4((uint64_t)v10);
  id v11 = v32[0];
  id v12 = objc_allocWithZone((Class)RBSAssertion);
  sub_1000A3CAC((uint64_t)"AppIntents Query");
  sub_1000A4074();
  id v30 = v9;
  if ([v13 acquireWithError:v32])
  {
    id v14 = v32[0];
    swift_retain();
    uint64_t v15 = sub_1000A4030();
    if (v1)
    {
      swift_release();
      [v9 invalidate];
      goto LABEL_12;
    }
    uint64_t v27 = v15;
    swift_release();
    sub_100095EE4(v27);
    swift_bridgeObjectRelease();
    [v9 invalidate];

    goto LABEL_10;
  }
  id v18 = v32[0];
  sub_1000A4154();

  swift_willThrow();
LABEL_12:
  sub_1000A3D68();
  sub_10000BF1C(&qword_10017C810);
  sub_10000D9D4(0, &qword_10017F268);
  if (!sub_1000A3C60())
  {
LABEL_26:

    goto LABEL_27;
  }
  os_log_type_t v19 = [v31 domain];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000A4604();
  BOOL v21 = v1 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v9 == v20;
  if (v21)
  {
    sub_10001B508();
  }
  else
  {
    sub_1000A3C84();
    sub_1000A4528();
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
    {

LABEL_27:
      swift_errorRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_28;
    }
  }
  swift_errorRelease();
  if ((id)getLNLogCategoryMetadata())
  {
    Logger.init(_:)();
    id v22 = v31;
    os_log_type_t v23 = sub_1000A40EC();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (sub_1000A3E04(v24))
    {
      sub_1000536D0();
      v32[2] = (id)sub_100060438();
      sub_1000A42A8(4.8149e-34);
      id v25 = [v4 localizedDescription];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v26 = sub_1000A3DD0();
      sub_1000A4080(v26);

      swift_bridgeObjectRelease();
      sub_1000A405C((void *)&_mh_execute_header, v23, v19, "Failed to acquire assertions: %s");
      sub_1000A4450();
      sub_10000EB10();
      sub_10000EB10();
    }
    else
    {
    }
    sub_100013EC4();
    v28();
    id v9 = v30;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000A3D80();
    id v29 = objc_allocWithZone((Class)NSError);
    sub_1000A3BD8();
    sub_1000A3CE0();

    goto LABEL_26;
  }
  __break(1u);
}

void sub_100099268()
{
  sub_100018E30();
  sub_1000A43EC();
  type metadata accessor for Logger();
  sub_10000E948();
  __chkstk_darwin(v5);
  sub_10000EBF4();
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_requiresAssertion) != 1
    || (id v6 = [self currentProcess],
        unsigned int v7 = [v6 isApplication],
        v6,
        !v7))
  {
    swift_retain();
    sub_100044DE4((uint64_t)v44);
    sub_10000BEA0(v44, v45);
    if (qword_10017C2C0 != -1) {
      swift_once();
    }
    id v42 = v3;
    uint64_t v43 = v4;
    == infix<A>(_:_:)();
    sub_1000A4248();
    sub_1000A3F44();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v16 = (void *)sub_1000A431C();
    uint64_t v17 = sub_100045798(v16);
    if (v1)
    {
      sub_10000E788((uint64_t)v44);
      swift_bridgeObjectRelease();

      swift_release();
LABEL_31:
      sub_1000A3CD4();
      sub_100018E80();
      return;
    }
    uint64_t v18 = v17;
    sub_10000E788((uint64_t)v44);
    swift_release();
    sub_100095EE4(v18);

    swift_bridgeObjectRelease();
LABEL_13:
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
  uint64_t v40 = v2;
  id v8 = [self currentProcess];
  sub_10000BF1C(&qword_10017D0D0);
  uint64_t v9 = sub_10001B414();
  *(_OWORD *)(v9 + 16) = xmmword_10013EF30;
  sub_10000D9D4(0, (unint64_t *)&unk_10017F258);
  sub_1000A3BA4();
  sub_100018F2C();
  *(void *)(v9 + 32) = sub_1000A3BB8();
  specialized Array._endMutation()();
  id v10 = objc_allocWithZone((Class)RBSAssertion);
  id v11 = sub_1000A4194((uint64_t)"AppIntents Query");
  v44[0] = 0;
  unint64_t v39 = v11;
  if ([v11 acquireWithError:v44])
  {
    id v12 = v44[0];
    swift_retain();
    sub_100044DE4((uint64_t)v44);
    sub_10000BEA0(v44, v45);
    if (qword_10017C2C0 != -1) {
      swift_once();
    }
    sub_1000A45C4(&qword_100181A58);
    == infix<A>(_:_:)();
    sub_1000A43B8();
    sub_1000A3F70();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v13 = (void *)sub_1000A42EC();
    uint64_t v14 = sub_100045798(v13);
    uint64_t v15 = v1;
    if (v1)
    {
      sub_1000A42C0();
      [v11 invalidate];
      goto LABEL_15;
    }
    uint64_t v36 = v14;
    sub_1000A42C0();
    sub_100095EE4(v36);
    swift_bridgeObjectRelease();
    [v11 invalidate];

    goto LABEL_13;
  }
  id v19 = v44[0];
  uint64_t v15 = (void *)_convertNSErrorToError(_:)();

  swift_willThrow();
LABEL_15:
  id v20 = v40;
  v44[0] = v15;
  swift_errorRetain();
  sub_10000BF1C(&qword_10017C810);
  sub_10000D9D4(0, &qword_10017F268);
  if (!sub_1000A426C())
  {

    swift_errorRelease();
LABEL_30:
    swift_bridgeObjectRelease();

    goto LABEL_31;
  }
  id v21 = [v42 domain];
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = v23;

  if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v24 == v25)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v27 = sub_1000A4104();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v27 & 1) == 0)
    {

      swift_errorRelease();
      swift_bridgeObjectRelease();

      goto LABEL_31;
    }
  }
  swift_errorRelease();
  if ((id)getLNLogCategoryMetadata())
  {
    Logger.init(_:)();
    id v28 = v42;
    id v29 = sub_1000A45EC();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      sub_1000536D0();
      uint64_t v41 = sub_100060438();
      sub_1000A40D0(4.8149e-34);
      id v31 = [v3 localizedDescription];
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v34 = v33;

      uint64_t v35 = sub_100013090(v32, v34, &v41);
      sub_1000A3FA8(v35);

      swift_bridgeObjectRelease();
      sub_1000A405C((void *)&_mh_execute_header, v29, v30, "Failed to acquire assertions: %s");
      sub_1000A4430();
      sub_10000EB10();
      sub_10000EB10();
    }
    else
    {
    }
    sub_100013EC4();
    v37();
    id v20 = v40;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000A3D80();
    id v38 = objc_allocWithZone((Class)NSError);
    sub_1000A3BD8();
    sub_1000A3CE0();

    swift_errorRelease();
    goto LABEL_30;
  }
  __break(1u);
}

void sub_100099908()
{
  sub_100018E30();
  id v3 = v2;
  sub_1000A3E98();
  uint64_t v4 = sub_1000A3D1C(__stack_chk_guard);
  sub_10000E948();
  __chkstk_darwin(v5);
  sub_10000EBF4();
  sub_1000A3D34();
  if (!v17
    || (id v6 = [self currentProcess],
        unsigned int v7 = [v6 isApplication],
        v6,
        !v7))
  {
    sub_1000A437C();
    if (v0)
    {
LABEL_27:

      swift_bridgeObjectRelease();
      goto LABEL_28;
    }

    goto LABEL_9;
  }
  id v8 = [self currentProcess];
  sub_10000BF1C(&qword_10017D0D0);
  uint64_t v9 = sub_10001B414();
  *(_OWORD *)(v9 + 16) = xmmword_10013EF30;
  sub_10000D9D4(0, (unint64_t *)&unk_10017F258);
  sub_1000A3BA4();
  sub_100018F2C();
  *(void *)(v9 + 32) = sub_1000A3BB8();
  specialized Array._endMutation()();
  id v10 = objc_allocWithZone((Class)RBSAssertion);
  id v11 = sub_1000A3C34((uint64_t)"AppIntents Query");
  id v31 = 0;
  if ([v11 acquireWithError:&v31])
  {
    id v12 = v31;
    sub_1000A437C();
    sub_1000A3F9C();
    if (v0)
    {
      sub_1000A4540(v13);
      goto LABEL_11;
    }
    sub_1000A4540(v13);

LABEL_9:
    swift_bridgeObjectRelease();
LABEL_28:
    sub_1000A3CD4();
    sub_100018E80();
    return;
  }
  id v14 = v31;
  sub_1000A4404();

  swift_willThrow();
LABEL_11:
  sub_1000A3D68();
  sub_10000BF1C(&qword_10017C810);
  sub_10000D9D4(0, &qword_10017F268);
  if (!sub_1000A3CF8())
  {

    goto LABEL_26;
  }
  id v29 = v11;
  os_log_type_t v15 = [v30 domain];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000A44D0();
  BOOL v17 = v11 == (id)static String._unconditionallyBridgeFromObjectiveC(_:)() && v3 == v16;
  if (v17)
  {
    sub_1000A4490();
  }
  else
  {
    char v18 = sub_1000A412C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v18 & 1) == 0)
    {

LABEL_26:
      swift_errorRelease();
      goto LABEL_27;
    }
  }
  swift_errorRelease();
  if ((id)getLNLogCategoryMetadata())
  {
    Logger.init(_:)();
    id v19 = v30;
    id v20 = (void *)sub_1000A45EC();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (sub_100053660(v21))
    {
      sub_1000536D0();
      uint64_t v22 = sub_100060438();
      sub_1000A4224(v22);
      sub_1000A434C(4.8149e-34);
      id v23 = [v3 localizedDescription];
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_1000A44E8();
      uint64_t v24 = sub_1000A4470();
      sub_1000A40A8(v24);

      swift_bridgeObjectRelease();
      id v20 = v28;
      sub_1000A420C((void *)&_mh_execute_header, v27, v15, "Failed to acquire assertions: %s");
      sub_1000A3D8C();
      sub_10000EB10();
      sub_10000EB10();
    }
    else
    {
    }
    sub_100013EC4();
    v25();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000A4594();
    id v26 = objc_allocWithZone((Class)NSError);
    sub_1000A3C00((uint64_t)v20, v4);
    sub_1000A3CE0();

    goto LABEL_26;
  }
  __break(1u);
}

void sub_100099D34()
{
}

void sub_100099D94()
{
  sub_100018E30();
  uint64_t v2 = v1;
  uint64_t v3 = sub_1000A3D1C(__stack_chk_guard);
  sub_10000E948();
  __chkstk_darwin(v4);
  sub_100018E60();
  sub_1000A3D34();
  if (!v23
    || (id v5 = [self currentProcess],
        unsigned int v6 = [v5 isApplication],
        v5,
        !v6))
  {
    uint64_t v14 = swift_retain();
    uint64_t v15 = sub_1000F9084(v14);
    if (v0)
    {

      swift_release();
    }
    else
    {
      uint64_t v16 = v15;
      swift_release();
      sub_100095DB4(v16);

      swift_bridgeObjectRelease();
    }
    goto LABEL_26;
  }
  id v7 = [self currentProcess];
  sub_10000BF1C(&qword_10017D0D0);
  uint64_t v8 = sub_10001B414();
  *(_OWORD *)(v8 + 16) = xmmword_10013EF30;
  sub_10000D9D4(0, (unint64_t *)&unk_10017F258);
  sub_1000A3BA4();
  sub_100018F2C();
  *(void *)(v8 + 32) = sub_1000A3BB8();
  v36[0] = (id)v8;
  specialized Array._endMutation()();
  id v9 = objc_allocWithZone((Class)RBSAssertion);
  sub_1000A3E20(0xD000000000000010, 0x8000000100144B30, v7);
  sub_1000A4074();
  if ([v10 acquireWithError:v36])
  {
    id v11 = v36[0];
    uint64_t v12 = swift_retain();
    uint64_t v13 = sub_1000F9084(v12);
    if (!v0)
    {
      uint64_t v31 = v13;
      swift_release();
      sub_100095DB4(v31);
      swift_bridgeObjectRelease();
      [v7 invalidate];

LABEL_26:
      sub_1000A3CD4();
      sub_100018E80();
      return;
    }
    swift_release();
    [v7 invalidate];
  }
  else
  {
    id v17 = v36[0];
    sub_1000A4404();

    swift_willThrow();
  }
  sub_1000A3D68();
  sub_10000BF1C(&qword_10017C810);
  sub_10000D9D4(0, &qword_10017F268);
  if (!sub_1000A3CF8())
  {
LABEL_25:

    swift_errorRelease();
    goto LABEL_26;
  }
  id v18 = [v35 domain];
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;

  BOOL v23 = v19 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v21 == v22;
  if (v23)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v24 = sub_1000A3E38();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v24 & 1) == 0)
    {

      goto LABEL_25;
    }
  }
  swift_errorRelease();
  if ((id)getLNLogCategoryMetadata())
  {
    Logger.init(_:)();
    id v25 = v35;
    id v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (sub_100053660(v27))
    {
      id v28 = sub_1000536D0();
      v36[2] = (id)sub_100060438();
      unint64_t v34 = v28;
      LODWORD(v28->isa) = 136315138;
      id v29 = [v25 localizedDescription];
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_1000A44D0();
      sub_1000A3F24();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      os_log_type_t v30 = v26;
      id v26 = v34;
      sub_1000A420C((void *)&_mh_execute_header, v30, (os_log_type_t)v35, "Failed to acquire assertions: %s");
      swift_arrayDestroy();
      sub_10000EB10();
      sub_10000EB10();
    }
    else
    {
    }
    sub_100013EC4();
    v32();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000A45A0();
    id v33 = objc_allocWithZone((Class)NSError);
    sub_1000A3C00((uint64_t)v26, v3);
    sub_1000A3CE0();

    goto LABEL_25;
  }
  __break(1u);
}

void sub_10009A2C8()
{
}

void sub_10009A328()
{
  sub_100018E30();
  uint64_t v3 = v2;
  sub_1000A3E98();
  sub_1000A3D1C(__stack_chk_guard);
  sub_10000E948();
  __chkstk_darwin(v4);
  sub_10000EBF4();
  sub_1000A3D34();
  if (!v20
    || (id v5 = [self currentProcess],
        unsigned int v6 = [v5 isApplication],
        v5,
        !v6))
  {
    swift_retain();
    uint64_t v13 = sub_1000A44BC();
    v3(v13);

    swift_release();
    goto LABEL_24;
  }
  [self currentProcess];
  sub_10000BF1C(&qword_10017D0D0);
  uint64_t v7 = sub_10001B414();
  *(_OWORD *)(v7 + 16) = xmmword_10013EF30;
  sub_10000D9D4(0, (unint64_t *)&unk_10017F258);
  sub_1000A3BA4();
  sub_100018F2C();
  *(void *)(v7 + 32) = sub_1000A3BB8();
  specialized Array._endMutation()();
  id v8 = objc_allocWithZone((Class)RBSAssertion);
  id v9 = sub_1000A3C34((uint64_t)"AppIntents Query");
  id v34 = 0;
  if ([v9 acquireWithError:&v34])
  {
    id v10 = v34;
    swift_retain();
    uint64_t v11 = sub_1000A44A8();
    v3(v11);
    uint64_t v12 = v0;
    if (v0)
    {
      swift_release();
      uint64_t v32 = v9;
      [v9 invalidate];
      goto LABEL_9;
    }
    swift_release();
    [v9 invalidate];

LABEL_24:
    swift_bridgeObjectRelease();
    sub_1000A3CD4();
    sub_100018E80();
    return;
  }
  uint64_t v32 = v9;
  id v14 = v34;
  uint64_t v12 = (void *)_convertNSErrorToError(_:)();

  swift_willThrow();
LABEL_9:
  id v34 = v12;
  swift_errorRetain();
  sub_10000BF1C(&qword_10017C810);
  sub_10000D9D4(0, &qword_10017F268);
  if (!swift_dynamicCast())
  {
LABEL_23:

    swift_errorRelease();
    goto LABEL_24;
  }
  id v15 = [v33 domain];
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  BOOL v20 = v16 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v18 == v19;
  if (v20)
  {
    sub_1000A4490();
  }
  else
  {
    char v21 = sub_1000A3E38();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v21 & 1) == 0)
    {

      goto LABEL_23;
    }
  }
  swift_errorRelease();
  if ((id)getLNLogCategoryMetadata())
  {
    Logger.init(_:)();
    id v22 = v33;
    BOOL v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    uint64_t v25 = v24;
    if (os_log_type_enabled(v23, v24))
    {
      os_log_type_t v31 = v25;
      uint64_t v25 = sub_1000536D0();
      uint64_t v26 = sub_100060438();
      sub_1000A4224(v26);
      *(_DWORD *)uint64_t v25 = 136315138;
      id v27 = [v22 localizedDescription];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v28 = sub_1000A3DD0();
      sub_1000A441C(v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v31, "Failed to acquire assertions: %s", (uint8_t *)v25, 0xCu);
      sub_1000A3D8C();
      sub_10000EB10();
      sub_10000EB10();
    }
    else
    {
    }
    sub_100013EC4();
    v29();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000A4594();
    id v30 = objc_allocWithZone((Class)NSError);
    sub_1000A3C00((uint64_t)v23, v25);
    sub_1000A3CE0();

    goto LABEL_23;
  }
  __break(1u);
}

void sub_10009A83C()
{
  sub_100018E30();
  uint64_t v4 = v3;
  sub_1000A3E98();
  sub_1000A3D1C(__stack_chk_guard);
  sub_10000E948();
  __chkstk_darwin(v5);
  sub_1000A3C1C();
  sub_1000A3D34();
  if (!v19
    || (unsigned int v6 = self,
        id v7 = sub_1000A45AC(v6),
        unsigned int v8 = [v7 isApplication],
        v7,
        !v8))
  {
    sub_1000A3E50();
    if (v1)
    {
      swift_bridgeObjectRelease();
LABEL_28:
      swift_bridgeObjectRelease();

      goto LABEL_29;
    }

    goto LABEL_10;
  }
  id v9 = [self *(SEL *)(v0 + 1840)];
  sub_10000BF1C(&qword_10017D0D0);
  *(_OWORD *)(sub_10001B414() + 16) = xmmword_10013EF30;
  sub_10000D9D4(0, (unint64_t *)&unk_10017F258);
  sub_1000A3BA4();
  sub_100018F2C();
  id v10 = sub_1000A3BB8();
  sub_1000A3FD4((uint64_t)v10);
  id v11 = v34;
  id v12 = objc_allocWithZone((Class)RBSAssertion);
  sub_1000A3CAC((uint64_t)"AppIntents Query");
  sub_1000A4074();
  if ([v13 acquireWithError:&v34])
  {
    id v14 = v34;
    sub_1000A3E50();
    sub_1000A3F9C();
    if (v1)
    {
      sub_1000A3E80(v15);
      goto LABEL_12;
    }
    sub_1000A3E80(v15);

LABEL_10:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_29:
    sub_1000A3CD4();
    sub_100018E80();
    return;
  }
  id v16 = v34;
  sub_1000A4154();

  swift_willThrow();
LABEL_12:
  sub_1000A3D68();
  sub_10000BF1C(&qword_10017C810);
  sub_10000D9D4(0, &qword_10017F268);
  if (!sub_1000A3C60())
  {
LABEL_26:

    goto LABEL_27;
  }
  id v32 = v9;
  unsigned __int8 v17 = [v33 domain];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000A4604();
  BOOL v19 = v1 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v9 == v18;
  if (v19)
  {
    sub_10001B508();
  }
  else
  {
    sub_1000A3C84();
    sub_1000A4528();
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0)
    {

LABEL_27:
      swift_errorRelease();
      swift_bridgeObjectRelease();
      goto LABEL_28;
    }
  }
  swift_errorRelease();
  if ((id)getLNLogCategoryMetadata())
  {
    Logger.init(_:)();
    id v20 = v33;
    char v21 = (void *)sub_1000A40EC();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (sub_1000A3E04(v22))
    {
      sub_1000536D0();
      v35[0] = sub_100060438();
      sub_1000A3DEC(4.8149e-34);
      id v23 = [v4 localizedDescription];
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v26 = v25;

      uint64_t v27 = sub_100013090(v24, v26, v35);
      sub_1000A3D40(v27);

      swift_bridgeObjectRelease();
      sub_1000A3DAC((void *)&_mh_execute_header, v28, v29, "Failed to acquire assertions: %s");
      sub_1000A3F04();
      sub_10000EB10();
      sub_10000EB10();
    }
    else
    {
    }
    sub_100013EC4();
    v30();
    id v9 = v32;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000A3D80();
    id v31 = objc_allocWithZone((Class)NSError);
    sub_1000A3BD8();
    sub_1000A3CE0();

    goto LABEL_26;
  }
  __break(1u);
}

void sub_10009AC60()
{
}

void sub_10009ACC0()
{
  sub_100018E30();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = sub_1000A3D1C(__stack_chk_guard);
  sub_10000E948();
  __chkstk_darwin(v6);
  sub_100018E60();
  sub_1000A3D34();
  if (!v23
    || (id v7 = [self currentProcess],
        unsigned int v8 = [v7 isApplication],
        v7,
        !v8))
  {
    uint64_t v16 = sub_1000A4580();
    v2(v16);
    if (!v0)
    {

      goto LABEL_27;
    }
    goto LABEL_26;
  }
  id v9 = [self currentProcess];
  sub_10000BF1C(&qword_10017D0D0);
  uint64_t v10 = sub_10001B414();
  *(_OWORD *)(v10 + 16) = xmmword_10013EF30;
  sub_10000D9D4(0, (unint64_t *)&unk_10017F258);
  sub_1000A3BA4();
  sub_100018F2C();
  *(void *)(v10 + 32) = sub_1000A3BB8();
  v35[0] = (id)v10;
  specialized Array._endMutation()();
  id v11 = objc_allocWithZone((Class)RBSAssertion);
  sub_1000A3E20(0xD000000000000010, 0x8000000100144B30, v9);
  sub_1000A4074();
  if ([v12 acquireWithError:v35])
  {
    id v13 = v35[0];
    uint64_t v14 = sub_1000A4580();
    v2(v14);
    sub_1000A3F9C();
    if (!v0)
    {
      sub_1000A3E80(v15);

LABEL_27:
      sub_1000A3CD4();
      sub_100018E80();
      return;
    }
    sub_1000A3E80(v15);
  }
  else
  {
    id v17 = v35[0];
    sub_1000A4404();

    swift_willThrow();
  }
  sub_1000A3D68();
  sub_10000BF1C(&qword_10017C810);
  sub_10000D9D4(0, &qword_10017F268);
  if (!sub_1000A3CF8())
  {
LABEL_25:

    swift_errorRelease();
LABEL_26:

    goto LABEL_27;
  }
  id v18 = [v34 domain];
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;

  BOOL v23 = v19 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v21 == v22;
  if (v23)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v24 = sub_1000A3E38();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v24 & 1) == 0)
    {

      goto LABEL_25;
    }
  }
  swift_errorRelease();
  if ((id)getLNLogCategoryMetadata())
  {
    Logger.init(_:)();
    id v25 = v34;
    unint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (sub_100053660(v27))
    {
      uint64_t v28 = sub_1000536D0();
      uint64_t v29 = sub_100060438();
      sub_1000A4224(v29);
      id v33 = v28;
      LODWORD(v28->isa) = 136315138;
      [v25 localizedDescription];
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_1000A44D0();
      sub_1000A3F24();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      id v30 = v26;
      unint64_t v26 = v33;
      sub_1000A420C((void *)&_mh_execute_header, v30, (os_log_type_t)v34, "Failed to acquire assertions: %s");
      sub_1000A3D8C();
      sub_10000EB10();
      sub_10000EB10();
    }
    else
    {
    }
    sub_100013EC4();
    v31();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000A45A0();
    id v32 = objc_allocWithZone((Class)NSError);
    sub_1000A3C00((uint64_t)v26, v5);
    sub_1000A3CE0();

    goto LABEL_25;
  }
  __break(1u);
}

void sub_10009B134()
{
}

void sub_10009B194()
{
  sub_100018E30();
  id v38 = v1;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  sub_1000A3D1C(__stack_chk_guard);
  sub_10000E948();
  __chkstk_darwin(v8);
  sub_1000A3C1C();
  if (*(unsigned char *)(v7 + OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_requiresAssertion) != 1
    || (id v9 = [self currentProcess],
        unsigned int v10 = [v9 isApplication],
        v9,
        !v10))
  {
    swift_retain();
    uint64_t v19 = sub_1000A4004();
    if (v0)
    {
      swift_bridgeObjectRelease();

      swift_release();
LABEL_8:
      swift_bridgeObjectRelease();
LABEL_11:
      sub_1000A3CD4();
      sub_100018E80();
      return;
    }
    uint64_t v20 = v19;
    swift_release();
    sub_1000705F0(v20);

    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  id v11 = [self currentProcess];
  sub_10000BF1C(&qword_10017D0D0);
  uint64_t v12 = sub_10001B414();
  *(_OWORD *)(v12 + 16) = xmmword_10013EF30;
  sub_10000D9D4(0, (unint64_t *)&unk_10017F258);
  sub_1000A3BA4();
  sub_100018F2C();
  *(void *)(v12 + 32) = sub_1000A3BB8();
  v40[0] = (id)v12;
  specialized Array._endMutation()();
  id v13 = objc_allocWithZone((Class)RBSAssertion);
  unint64_t v14 = sub_1000A3FF0();
  sub_1000A3E20(v14, v15, v11);
  sub_1000A4074();
  if ([v16 acquireWithError:v40])
  {
    id v17 = v40[0];
    swift_retain();
    uint64_t v18 = sub_1000A4004();
    if (v0)
    {
      swift_release();
      [(id)v12 invalidate];
      goto LABEL_13;
    }
    uint64_t v34 = v18;
    swift_release();
    sub_1000705F0(v34);
    swift_bridgeObjectRelease();
    [(id)v12 invalidate];

LABEL_10:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  id v21 = v40[0];
  sub_1000A4154();

  swift_willThrow();
  uint64_t v3 = v38;
LABEL_13:
  sub_1000A3D68();
  sub_10000BF1C(&qword_10017C810);
  sub_10000D9D4(0, &qword_10017F268);
  if (!sub_1000A3C60())
  {

    swift_errorRelease();
    swift_bridgeObjectRelease();

    goto LABEL_8;
  }
  uint64_t v37 = (void *)v12;
  id v22 = [v39 domain];
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v25 = v24;

  if (v23 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v25 == v26)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v3 = v26;
    char v28 = sub_1000A3E38();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v28 & 1) == 0)
    {

LABEL_28:
      swift_errorRelease();
      swift_bridgeObjectRelease();

      goto LABEL_8;
    }
  }
  swift_errorRelease();
  if ((id)getLNLogCategoryMetadata())
  {
    Logger.init(_:)();
    id v29 = v39;
    id v30 = sub_1000A40EC();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (sub_1000A3E04(v31))
    {
      sub_1000536D0();
      v40[2] = (id)sub_100060438();
      sub_1000A42A8(4.8149e-34);
      id v32 = [v3 localizedDescription];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v33 = sub_1000A3DD0();
      sub_1000A4080(v33);

      swift_bridgeObjectRelease();
      sub_1000A405C((void *)&_mh_execute_header, v30, (os_log_type_t)v25, "Failed to acquire assertions: %s");
      sub_1000A4450();
      sub_10000EB10();
      sub_10000EB10();
    }
    else
    {
    }
    sub_100013EC4();
    v35();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000A3D80();
    id v36 = objc_allocWithZone((Class)NSError);
    sub_1000A3BD8();
    sub_1000A3CE0();

    goto LABEL_28;
  }
  __break(1u);
}

void sub_10009B6CC()
{
}

void sub_10009B740()
{
}

void sub_10009B7A0()
{
}

void sub_10009B814()
{
  sub_100018E30();
  uint64_t v56 = v3;
  uint64_t v58 = v2;
  uint64_t v5 = v4;
  uint64_t v60 = v6;
  uint64_t v61 = v7;
  uint64_t v9 = v8;
  id v11 = v10;
  uint64_t v12 = sub_1000A3D1C(__stack_chk_guard);
  sub_10000E948();
  uint64_t v55 = v13;
  __chkstk_darwin(v14);
  sub_1000A3C1C();
  sub_1000A3D34();
  if (!v35
    || (id v15 = [self currentProcess],
        unsigned int v16 = [v15 isApplication],
        v15,
        !v16))
  {
    uint64_t v27 = *(void *)&v11[OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_connection];
    swift_retain();
    v5(v9, v60, v58, v61, v27);
    if (v0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_release();
LABEL_34:
      sub_1000A3CD4();
      sub_100018E80();
      return;
    }
    if (v28)
    {

      swift_release();
    }
    else
    {
      v56(v9, v60, v58, v61, v27);
      uint64_t v49 = v37;
      swift_release();

      if (!v49) {
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
LABEL_12:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  id v17 = [self currentProcess];
  sub_10000BF1C(&qword_10017D0D0);
  uint64_t v18 = sub_10001B414();
  *(_OWORD *)(v18 + 16) = xmmword_10013EF30;
  sub_10000D9D4(0, (unint64_t *)&unk_10017F258);
  sub_1000A3BA4();
  sub_100018F2C();
  *(void *)(v18 + 32) = sub_1000A3BB8();
  specialized Array._endMutation()();
  id v19 = objc_allocWithZone((Class)RBSAssertion);
  unint64_t v20 = sub_1000A3FF0();
  id v22 = sub_1000A3E20(v20, v21, v17);
  id v63 = 0;
  if ([v22 acquireWithError:&v63])
  {
    id v23 = v63;
    swift_retain();
    uint64_t v24 = sub_1000A45D8();
    ((void (*)(uint64_t))v5)(v24);
    unint64_t v26 = v0;
    if (v0)
    {
      swift_release();
      [v22 invalidate];
      goto LABEL_14;
    }
    if (v25)
    {
      swift_release();
    }
    else
    {
      uint64_t v50 = sub_1000A45D8();
      ((void (*)(uint64_t))v56)(v50);
      uint64_t v52 = v51;
      swift_release();
      if (!v52) {
        goto LABEL_30;
      }
    }
    swift_bridgeObjectRelease();
LABEL_30:
    [v22 invalidate];

    goto LABEL_12;
  }
  id v29 = v63;
  unint64_t v26 = (void *)sub_1000A4154();

  swift_willThrow();
LABEL_14:
  id v63 = v26;
  swift_errorRetain();
  sub_10000BF1C(&qword_10017C810);
  sub_10000D9D4(0, &qword_10017F268);
  if (!swift_dynamicCast())
  {
LABEL_21:

    swift_errorRelease();
LABEL_33:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    goto LABEL_34;
  }
  id v59 = v22;
  id v30 = [v62 domain];
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v33 = v32;

  BOOL v35 = v31 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v33 == v34;
  if (v35)
  {
    swift_bridgeObjectRelease_n();
    id v22 = v59;
  }
  else
  {
    char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v22 = v59;
    if ((v36 & 1) == 0)
    {

      goto LABEL_21;
    }
  }
  swift_errorRelease();
  if ((id)getLNLogCategoryMetadata())
  {
    Logger.init(_:)();
    id v38 = v62;
    unint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)sub_1000536D0();
      uint64_t v53 = sub_100060438();
      uint64_t v64 = v53;
      *(_DWORD *)uint64_t v41 = 136315138;
      uint64_t v54 = v12;
      id v42 = [v38 localizedDescription];
      uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v57 = v11;
      unint64_t v45 = v44;

      uint64_t v46 = v43;
      id v22 = v59;
      uint64_t v47 = sub_100013090(v46, v45, &v64);
      sub_1000A441C(v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      id v11 = v57;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Failed to acquire assertions: %s", v41, 0xCu);
      uint64_t v33 = v53;
      swift_arrayDestroy();
      sub_10000EB10();
      sub_10000EB10();

      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v1, v54);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v1, v12);
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000A45A0();
    id v48 = objc_allocWithZone((Class)NSError);
    sub_1000A3C00((uint64_t)v39, v33);
    sub_1000A3CE0();

    swift_errorRelease();
    goto LABEL_33;
  }
  __break(1u);
}

void sub_10009BE8C()
{
}

void sub_10009BEEC()
{
}

id sub_10009BF60(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v50 = *(void *)(v9 - 8);
  uint64_t v51 = v9;
  __chkstk_darwin(v9);
  id v11 = (char *)v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_requiresAssertion) != 1
    || (id v12 = [self currentProcess],
        unsigned int v13 = [v12 isApplication],
        v12,
        !v13))
  {
    sub_1000A1994(a5, &v55);
    if (v5)
    {
LABEL_26:
      swift_bridgeObjectRelease();

      return a2;
    }

    goto LABEL_8;
  }
  id v14 = [self currentProcess];
  sub_10000BF1C(&qword_10017D0D0);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_10013EF30;
  sub_10000D9D4(0, (unint64_t *)&unk_10017F258);
  *(void *)(v15 + 32) = sub_10009EBEC();
  id v54 = (id)v15;
  specialized Array._endMutation()();
  id v16 = objc_allocWithZone((Class)RBSAssertion);
  id v17 = sub_1000A33F0(0xD000000000000010, 0x8000000100144B30, v14);
  id v54 = 0;
  if ([v17 acquireWithError:&v54])
  {
    id v18 = v54;
    sub_1000A1994(a5, &v55);
    id v19 = v5;
    if (v5)
    {
      [v17 invalidate];
      goto LABEL_10;
    }
    [v17 invalidate];

LABEL_8:
    a2 = v55;
    swift_bridgeObjectRelease();
    return a2;
  }
  id v20 = v54;
  id v19 = (void *)_convertNSErrorToError(_:)();

  swift_willThrow();
LABEL_10:
  id v54 = v19;
  swift_errorRetain();
  sub_10000BF1C(&qword_10017C810);
  sub_10000D9D4(0, &qword_10017F268);
  if (!swift_dynamicCast())
  {

    goto LABEL_25;
  }
  id v49 = v17;
  id v21 = v53;
  id v22 = [v53 domain];
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = v24;

  if (v23 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v25 == v26)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v28 & 1) == 0)
    {

LABEL_25:
      swift_errorRelease();
      goto LABEL_26;
    }
  }
  swift_errorRelease();
  id result = (id)getLNLogCategoryMetadata();
  if (result)
  {
    Logger.init(_:)();
    id v30 = v21;
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    int v33 = v32;
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v34 = swift_slowAlloc();
      int v47 = v33;
      BOOL v35 = (uint8_t *)v34;
      uint64_t v48 = swift_slowAlloc();
      uint64_t v56 = v48;
      uint64_t v46 = v35;
      *(_DWORD *)BOOL v35 = 136315138;
      v45[1] = v35 + 4;
      id v36 = [v30 localizedDescription];
      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v39 = v38;

      uint64_t v52 = sub_100013090(v37, v39, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v47, "Failed to acquire assertions: %s", v46, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    (*(void (**)(char *, uint64_t))(v50 + 8))(v11, v51);
    id v40 = v49;
    uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v43 = v42;
    id v44 = objc_allocWithZone((Class)NSError);
    sub_1000A31C0(v41, v43, 9006, 0);
    swift_willThrow();

    goto LABEL_25;
  }
  __break(1u);
  return result;
}

id sub_10009C560(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v48 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v11 = (char *)v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_requiresAssertion) != 1
    || (id v12 = [self currentProcess],
        unsigned int v13 = [v12 isApplication],
        v12,
        !v13))
  {
    uint64_t v9 = *(void *)&a2[OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_connection];
    swift_retain();
    sub_1000FCB78(a3, a4, (uint64_t)v56);
    if (v4)
    {
      swift_bridgeObjectRelease();

      swift_release();
      return (id)v9;
    }
    swift_release();
    sub_100083620((uint64_t)v56, (uint64_t)&v59, &qword_10017D790);
    if (*((void *)&v59 + 1))
    {
      long long v52 = v59;
      uint64_t v9 = v60;
      sub_100033814((uint64_t)&v52);
    }
    else
    {
      uint64_t v9 = 0;
    }
    id v17 = a2;
LABEL_20:

    swift_bridgeObjectRelease();
    return (id)v9;
  }
  id v14 = [self currentProcess];
  sub_10000BF1C(&qword_10017D0D0);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_10013EF30;
  sub_10000D9D4(0, (unint64_t *)&unk_10017F258);
  *(void *)(v15 + 32) = sub_10009EBEC();
  id v51 = (id)v15;
  specialized Array._endMutation()();
  id v16 = objc_allocWithZone((Class)RBSAssertion);
  id v17 = sub_1000A33F0(0xD000000000000010, 0x8000000100144B30, v14);
  id v51 = 0;
  if ([v17 acquireWithError:&v51])
  {
    id v18 = v51;
    swift_retain();
    sub_1000FCB78(a3, a4, (uint64_t)v55);
    id v19 = v4;
    if (v4)
    {
      swift_release();
      [v17 invalidate];
      goto LABEL_11;
    }
    swift_release();
    sub_100083620((uint64_t)v55, (uint64_t)&v57, &qword_10017D790);
    if (*((void *)&v57 + 1))
    {
      long long v53 = v57;
      uint64_t v9 = v58;
      sub_100033814((uint64_t)&v53);
    }
    else
    {
      uint64_t v9 = 0;
    }
    [v17 invalidate];

    goto LABEL_20;
  }
  id v20 = v51;
  id v19 = (void *)_convertNSErrorToError(_:)();

  swift_willThrow();
LABEL_11:
  id v51 = v19;
  swift_errorRetain();
  sub_10000BF1C(&qword_10017C810);
  sub_10000D9D4(0, &qword_10017F268);
  if (!swift_dynamicCast())
  {
LABEL_29:

    swift_errorRelease();
    swift_bridgeObjectRelease();

    return (id)v9;
  }
  os_log_t v47 = v50;
  id v21 = [v50 domain];
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = v23;

  if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v24 == v25)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v27 & 1) == 0)
    {

      goto LABEL_29;
    }
  }
  swift_errorRelease();
  id result = (id)getLNLogCategoryMetadata();
  if (result)
  {
    Logger.init(_:)();
    id v29 = v47;
    id v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    int v32 = v31;
    if (os_log_type_enabled(v30, v31))
    {
      os_log_t v47 = v30;
      uint64_t v33 = swift_slowAlloc();
      int v45 = v32;
      uint64_t v34 = (uint8_t *)v33;
      uint64_t v46 = swift_slowAlloc();
      uint64_t v54 = v46;
      id v44 = v34;
      *(_DWORD *)uint64_t v34 = 136315138;
      v43[1] = (uint64_t)(v34 + 4);
      BOOL v35 = v29;
      id v36 = [v29 localizedDescription];
      v43[0] = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v38 = v37;

      id v29 = v35;
      uint64_t v49 = sub_100013090(v43[0], v38, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      os_log_t v39 = v47;
      _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v45, "Failed to acquire assertions: %s", v44, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    (*(void (**)(char *, uint64_t))(v48 + 8))(v11, v9);
    uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v41;
    id v42 = objc_allocWithZone((Class)NSError);
    sub_1000A31C0(v40, v9, 9006, 0);
    swift_willThrow();

    goto LABEL_29;
  }
  __break(1u);
  return result;
}

void sub_10009CC9C()
{
  sub_100018E30();
  sub_1000A43EC();
  type metadata accessor for Logger();
  sub_10000E948();
  __chkstk_darwin(v5);
  sub_10000EBF4();
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_requiresAssertion) != 1
    || (id v6 = [self currentProcess],
        unsigned int v7 = [v6 isApplication],
        v6,
        !v7))
  {
    swift_retain();
    sub_1000F07F0((uint64_t)v44);
    sub_10000BEA0(v44, v45);
    if (qword_10017C4E8 != -1) {
      swift_once();
    }
    id v42 = v3;
    uint64_t v43 = v4;
    == infix<A>(_:_:)();
    sub_1000A4248();
    sub_1000A3F44();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v16 = (void *)sub_1000A431C();
    uint64_t v17 = sub_1000F0DD4(v16);
    if (v1)
    {
      sub_10000E788((uint64_t)v44);
      swift_bridgeObjectRelease();

      swift_release();
LABEL_31:
      sub_1000A3CD4();
      sub_100018E80();
      return;
    }
    uint64_t v18 = v17;
    sub_10000E788((uint64_t)v44);
    swift_release();
    sub_1000705F0(v18);

    swift_bridgeObjectRelease();
LABEL_13:
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
  uint64_t v40 = v2;
  id v8 = [self currentProcess];
  sub_10000BF1C(&qword_10017D0D0);
  uint64_t v9 = sub_10001B414();
  *(_OWORD *)(v9 + 16) = xmmword_10013EF30;
  sub_10000D9D4(0, (unint64_t *)&unk_10017F258);
  sub_1000A3BA4();
  sub_100018F2C();
  *(void *)(v9 + 32) = sub_1000A3BB8();
  specialized Array._endMutation()();
  id v10 = objc_allocWithZone((Class)RBSAssertion);
  id v11 = sub_1000A4194((uint64_t)"AppIntents Query");
  v44[0] = 0;
  os_log_t v39 = v11;
  if ([v11 acquireWithError:v44])
  {
    id v12 = v44[0];
    swift_retain();
    sub_1000F07F0((uint64_t)v44);
    sub_10000BEA0(v44, v45);
    if (qword_10017C4E8 != -1) {
      swift_once();
    }
    sub_1000A45C4(&qword_1001820C8);
    == infix<A>(_:_:)();
    sub_1000A43B8();
    sub_1000A3F70();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unsigned int v13 = (void *)sub_1000A42EC();
    uint64_t v14 = sub_1000F0DD4(v13);
    uint64_t v15 = v1;
    if (v1)
    {
      sub_1000A42C0();
      [v11 invalidate];
      goto LABEL_15;
    }
    uint64_t v36 = v14;
    sub_1000A42C0();
    sub_1000705F0(v36);
    swift_bridgeObjectRelease();
    [v11 invalidate];

    goto LABEL_13;
  }
  id v19 = v44[0];
  uint64_t v15 = (void *)_convertNSErrorToError(_:)();

  swift_willThrow();
LABEL_15:
  id v20 = v40;
  v44[0] = v15;
  swift_errorRetain();
  sub_10000BF1C(&qword_10017C810);
  sub_10000D9D4(0, &qword_10017F268);
  if (!sub_1000A426C())
  {

    swift_errorRelease();
LABEL_30:
    swift_bridgeObjectRelease();

    goto LABEL_31;
  }
  id v21 = [v42 domain];
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = v23;

  if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v24 == v25)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v27 = sub_1000A4104();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v27 & 1) == 0)
    {

      swift_errorRelease();
      swift_bridgeObjectRelease();

      goto LABEL_31;
    }
  }
  swift_errorRelease();
  if ((id)getLNLogCategoryMetadata())
  {
    Logger.init(_:)();
    id v28 = v42;
    id v29 = sub_1000A45EC();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      sub_1000536D0();
      uint64_t v41 = sub_100060438();
      sub_1000A40D0(4.8149e-34);
      id v31 = [v3 localizedDescription];
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v34 = v33;

      uint64_t v35 = sub_100013090(v32, v34, &v41);
      sub_1000A3FA8(v35);

      swift_bridgeObjectRelease();
      sub_1000A405C((void *)&_mh_execute_header, v29, v30, "Failed to acquire assertions: %s");
      sub_1000A4430();
      sub_10000EB10();
      sub_10000EB10();
    }
    else
    {
    }
    sub_100013EC4();
    v37();
    id v20 = v40;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000A3D80();
    id v38 = objc_allocWithZone((Class)NSError);
    sub_1000A3BD8();
    sub_1000A3CE0();

    swift_errorRelease();
    goto LABEL_30;
  }
  __break(1u);
}

void sub_10009D33C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v51 = a8;
  uint64_t v52 = a4;
  id v53 = a2;
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v48 = *(void *)(v13 - 8);
  uint64_t v49 = v13;
  __chkstk_darwin(v13);
  uint64_t v50 = (char *)v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_requiresAssertion) != 1
    || (id v15 = [self currentProcess],
        unsigned int v16 = [v15 isApplication],
        v15,
        !v16))
  {
    id v22 = v53;
    sub_1000A21C8((uint64_t)v53, a3, v52, a5, a6);
    if (v8)
    {
LABEL_26:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }

    goto LABEL_8;
  }
  id v17 = [self currentProcess];
  sub_10000BF1C(&qword_10017D0D0);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_10013EF30;
  sub_10000D9D4(0, (unint64_t *)&unk_10017F258);
  *(void *)(v18 + 32) = sub_10009EBEC();
  id v56 = (id)v18;
  specialized Array._endMutation()();
  id v19 = objc_allocWithZone((Class)RBSAssertion);
  id v20 = sub_1000A33F0(0xD000000000000010, 0x8000000100144B30, v17);
  id v56 = 0;
  if ([v20 acquireWithError:&v56])
  {
    id v21 = v56;
    id v22 = v53;
    sub_1000A21C8((uint64_t)v53, a3, v52, a5, a6);
    uint64_t v23 = v8;
    if (v8)
    {
      [v20 invalidate];
      goto LABEL_10;
    }
    [v20 invalidate];

LABEL_8:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  id v24 = v56;
  uint64_t v23 = (void *)_convertNSErrorToError(_:)();

  swift_willThrow();
  id v22 = v53;
LABEL_10:
  id v56 = v23;
  swift_errorRetain();
  sub_10000BF1C(&qword_10017C810);
  sub_10000D9D4(0, &qword_10017F268);
  if (!swift_dynamicCast())
  {

LABEL_25:
    swift_errorRelease();
    goto LABEL_26;
  }
  id v47 = v20;
  id v25 = v55;
  id v26 = [v55 domain];
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v29 = v28;

  if (v27 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v29 == v30)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v32 & 1) == 0)
    {

      swift_errorRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
  }
  swift_errorRelease();
  if ((id)getLNLogCategoryMetadata())
  {
    unint64_t v33 = v50;
    Logger.init(_:)();
    id v34 = v25;
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      unint64_t v37 = (uint8_t *)swift_slowAlloc();
      uint64_t v57 = swift_slowAlloc();
      *(_DWORD *)unint64_t v37 = 136315138;
      v46[1] = v37 + 4;
      id v38 = [v34 localizedDescription];
      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v41 = v40;

      uint64_t v54 = sub_100013090(v39, v41, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Failed to acquire assertions: %s", v37, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v48 + 8))(v50, v49);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v48 + 8))(v33, v49);
    }
    id v22 = v53;
    uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v44 = v43;
    id v45 = objc_allocWithZone((Class)NSError);
    sub_1000A31C0(v42, v44, 9006, 0);
    swift_willThrow();

    goto LABEL_25;
  }
  __break(1u);
}

void sub_10009D9B4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  id v52 = a2;
  uint64_t v53 = a4;
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v50 = *(void *)(v11 - 8);
  uint64_t v51 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_requiresAssertion) != 1
    || (id v14 = [self currentProcess],
        unsigned int v15 = [v14 isApplication],
        v14,
        !v15))
  {
    id v24 = v52;
    sub_1000A2734((uint64_t)v52, a3, v53, a5, a6);
    if (v6)
    {
      swift_bridgeObjectRelease();

      return;
    }

    goto LABEL_9;
  }
  id v16 = [self currentProcess];
  sub_10000BF1C(&qword_10017D0D0);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_10013EF30;
  sub_10000D9D4(0, (unint64_t *)&unk_10017F258);
  *(void *)(v17 + 32) = sub_10009EBEC();
  id v56 = (id)v17;
  specialized Array._endMutation()();
  id v18 = objc_allocWithZone((Class)RBSAssertion);
  id v19 = sub_1000A33F0(0xD000000000000010, 0x8000000100144B30, v16);
  id v56 = 0;
  id v49 = v19;
  if ([v19 acquireWithError:&v56])
  {
    id v20 = v56;
    id v21 = v52;
    sub_1000A2734((uint64_t)v52, a3, v53, a5, a6);
    id v22 = v6;
    if (v6)
    {
      id v23 = v49;
      [v49 invalidate];
      goto LABEL_11;
    }
    id v42 = v49;
    [v49 invalidate];

LABEL_9:
    swift_bridgeObjectRelease();
    return;
  }
  id v25 = v56;
  id v22 = (void *)_convertNSErrorToError(_:)();

  swift_willThrow();
  id v23 = v49;
LABEL_11:
  id v56 = v22;
  swift_errorRetain();
  sub_10000BF1C(&qword_10017C810);
  sub_10000D9D4(0, &qword_10017F268);
  if (!swift_dynamicCast())
  {
LABEL_25:

    swift_errorRelease();
    goto LABEL_26;
  }
  id v26 = v55;
  id v27 = [v55 domain];
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v30 = v29;

  if (v28 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v30 == v31)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v33 & 1) == 0)
    {

      swift_errorRelease();
LABEL_26:
      swift_bridgeObjectRelease();

      return;
    }
  }
  swift_errorRelease();
  if ((id)getLNLogCategoryMetadata())
  {
    Logger.init(_:)();
    id v34 = v26;
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      unint64_t v37 = (uint8_t *)swift_slowAlloc();
      uint64_t v48 = swift_slowAlloc();
      uint64_t v57 = v48;
      *(_DWORD *)unint64_t v37 = 136315138;
      id v38 = [v34 localizedDescription:v37 + 4, v48];
      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v41 = v40;

      uint64_t v54 = sub_100013090(v39, v41, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      id v23 = v49;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Failed to acquire assertions: %s", v37, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    (*(void (**)(char *, uint64_t))(v50 + 8))(v13, v51);
    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v45 = v44;
    id v46 = objc_allocWithZone((Class)NSError);
    sub_1000A31C0(v43, v45, 9006, 0);
    swift_willThrow();

    goto LABEL_25;
  }
  __break(1u);
}

id sub_10009DFD8(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v57 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unsigned int v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_requiresAssertion) != 1
    || (id v8 = [self currentProcess],
        unsigned int v9 = [v8 isApplication],
        v8,
        !v9))
  {
    swift_retain();
    sub_1000291FC();
    if (v2)
    {
      swift_errorRelease();
      swift_release();
    }
    else
    {
      uint64_t v21 = v19;
      swift_release();
      if (v21)
      {
        uint64_t v5 = sub_1000A3670(v21);

        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
    }
    uint64_t v5 = type metadata accessor for MetadataError();
    sub_1000A3628(&qword_10017F280, (void (*)(uint64_t))&type metadata accessor for MetadataError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v5 - 8) + 104))(v20, enum case for MetadataError.cacheLookupFailed(_:), v5);
    swift_willThrow();
LABEL_31:
    swift_bridgeObjectRelease();

    return (id)v5;
  }
  id v10 = [self currentProcess];
  sub_10000BF1C(&qword_10017D0D0);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_10013EF30;
  sub_10000D9D4(0, (unint64_t *)&unk_10017F258);
  *(void *)(v11 + 32) = sub_10009EBEC();
  id v60 = (id)v11;
  specialized Array._endMutation()();
  id v12 = objc_allocWithZone((Class)RBSAssertion);
  id v13 = sub_1000A33F0(0xD000000000000010, 0x8000000100144B30, v10);
  id v60 = 0;
  if ([v13 acquireWithError:&v60])
  {
    id v14 = v60;
    swift_retain();
    sub_1000291FC();
    if (v2)
    {
      swift_errorRelease();
      swift_release();
LABEL_6:
      uint64_t v16 = type metadata accessor for MetadataError();
      sub_1000A3628(&qword_10017F280, (void (*)(uint64_t))&type metadata accessor for MetadataError);
      uint64_t v17 = (void *)swift_allocError();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v16 - 8) + 104))(v18, enum case for MetadataError.cacheLookupFailed(_:), v16);
      swift_willThrow();
      [v13 invalidate];
      goto LABEL_14;
    }
    uint64_t v46 = v15;
    swift_release();
    if (!v46) {
      goto LABEL_6;
    }
    uint64_t v5 = sub_1000A3670(v46);
    swift_bridgeObjectRelease();
    [v13 invalidate];

LABEL_12:
    swift_bridgeObjectRelease();
    return (id)v5;
  }
  id v22 = v60;
  uint64_t v17 = (void *)_convertNSErrorToError(_:)();

  swift_willThrow();
LABEL_14:
  id v60 = v17;
  swift_errorRetain();
  sub_10000BF1C(&qword_10017C810);
  sub_10000D9D4(0, &qword_10017F268);
  if (!swift_dynamicCast())
  {

    goto LABEL_30;
  }
  id v56 = v13;
  id v23 = v59;
  id v24 = [v59 domain];
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v27 = v26;

  if (v25 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v27 == v28)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v30 & 1) == 0)
    {

LABEL_30:
      swift_errorRelease();
      goto LABEL_31;
    }
  }
  swift_errorRelease();
  id result = (id)getLNLogCategoryMetadata();
  if (result)
  {
    Logger.init(_:)();
    id v32 = v23;
    char v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    int v35 = v34;
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v36 = swift_slowAlloc();
      int v54 = v35;
      unint64_t v37 = (uint8_t *)v36;
      uint64_t v55 = swift_slowAlloc();
      uint64_t v61 = v55;
      uint64_t v53 = v37;
      *(_DWORD *)unint64_t v37 = 136315138;
      id v38 = [v32 localizedDescription:v37 + 4];
      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      os_log_t v52 = v33;
      unint64_t v40 = v32;
      uint64_t v41 = v39;
      unint64_t v43 = v42;

      uint64_t v44 = v41;
      id v32 = v40;
      uint64_t v58 = sub_100013090(v44, v43, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      os_log_t v45 = v52;
      _os_log_impl((void *)&_mh_execute_header, v52, (os_log_type_t)v54, "Failed to acquire assertions: %s", v53, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    (*(void (**)(char *, uint64_t))(v57 + 8))(v7, v5);
    id v47 = v56;
    uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v49;
    id v50 = objc_allocWithZone((Class)NSError);
    sub_1000A31C0(v48, v5, 9006, 0);
    swift_willThrow();

    goto LABEL_30;
  }
  __break(1u);
  return result;
}

void sub_10009E7B4()
{
  sub_100018E30();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = sub_1000A3D1C(__stack_chk_guard);
  sub_10000E948();
  __chkstk_darwin(v6);
  sub_10000EBF4();
  sub_1000A3D34();
  if (!v20
    || (id v7 = [self currentProcess],
        unsigned int v8 = [v7 isApplication],
        v7,
        !v8))
  {
    uint64_t v16 = sub_1000A43A0();
    v2(v16);
    if (v0)
    {
LABEL_27:
      swift_bridgeObjectRelease();

      goto LABEL_28;
    }

    goto LABEL_9;
  }
  id v9 = [self currentProcess];
  sub_10000BF1C(&qword_10017D0D0);
  uint64_t v10 = sub_10001B414();
  *(_OWORD *)(v10 + 16) = xmmword_10013EF30;
  sub_10000D9D4(0, (unint64_t *)&unk_10017F258);
  sub_1000A3BA4();
  sub_100018F2C();
  *(void *)(v10 + 32) = sub_1000A3BB8();
  specialized Array._endMutation()();
  id v11 = objc_allocWithZone((Class)RBSAssertion);
  id v12 = sub_1000A3C34((uint64_t)"AppIntents Query");
  id v34 = 0;
  if ([v12 acquireWithError:&v34])
  {
    id v13 = v34;
    uint64_t v14 = sub_1000A43A0();
    v2(v14);
    sub_1000A3F9C();
    if (v0)
    {
      sub_1000A4540(v15);
      goto LABEL_11;
    }
    sub_1000A4540(v15);

LABEL_9:
    swift_bridgeObjectRelease();
LABEL_28:
    sub_1000A3CD4();
    sub_100018E80();
    return;
  }
  id v17 = v34;
  sub_1000A4404();

  swift_willThrow();
LABEL_11:
  sub_1000A3D68();
  sub_10000BF1C(&qword_10017C810);
  sub_10000D9D4(0, &qword_10017F268);
  if (!sub_1000A3CF8())
  {

    goto LABEL_26;
  }
  id v32 = v12;
  os_log_type_t v18 = [v33 domain];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000A44D0();
  BOOL v20 = v12 == (id)static String._unconditionallyBridgeFromObjectiveC(_:)() && v0 == v19;
  if (v20)
  {
    sub_1000A4490();
  }
  else
  {
    char v21 = sub_1000A412C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v21 & 1) == 0)
    {

LABEL_26:
      swift_errorRelease();
      goto LABEL_27;
    }
  }
  swift_errorRelease();
  if ((id)getLNLogCategoryMetadata())
  {
    Logger.init(_:)();
    id v22 = v33;
    id v23 = (void *)sub_1000A45EC();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (sub_100053660(v24))
    {
      sub_1000536D0();
      uint64_t v25 = sub_100060438();
      sub_1000A4224(v25);
      sub_1000A434C(4.8149e-34);
      id v26 = [v0 localizedDescription];
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_1000A44E8();
      uint64_t v27 = sub_1000A4470();
      sub_1000A40A8(v27);

      swift_bridgeObjectRelease();
      id v23 = v31;
      sub_1000A420C((void *)&_mh_execute_header, v30, v18, "Failed to acquire assertions: %s");
      sub_1000A3D8C();
      sub_10000EB10();
      sub_10000EB10();
    }
    else
    {
    }
    sub_100013EC4();
    v28();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000A4594();
    id v29 = objc_allocWithZone((Class)NSError);
    sub_1000A3C00((uint64_t)v23, v5);
    sub_1000A3CE0();

    goto LABEL_26;
  }
  __break(1u);
}

id sub_10009EBEC()
{
  NSString v0 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [(id)swift_getObjCClassFromMetadata() attributeWithDomain:v0 name:v1];

  return v2;
}

uint64_t sub_10009EC80@<X0>(void *a1@<X8>)
{
  swift_retain();
  sub_100044DE4((uint64_t)v13);
  uint64_t v3 = sub_100045798(v13);
  sub_10000E788((uint64_t)v13);
  uint64_t result = swift_release();
  if (!v1)
  {
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v6 = swift_getKeyPath();
    uint64_t v7 = swift_getKeyPath();
    v13[0] = &_swiftEmptyDictionarySingleton;
    uint64_t v8 = *(void *)(v3 + 16);
    if (v8)
    {
      uint64_t v9 = *(void *)(type metadata accessor for LNActionRecord() - 8);
      unint64_t v10 = v3 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
      uint64_t v11 = *(void *)(v9 + 72);
      swift_bridgeObjectRetain();
      do
      {
        sub_1000962C8(v13, v10, v7, KeyPath, v6);
        v10 += v11;
        --v8;
      }
      while (v8);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      id v12 = (void *)v13[0];
    }
    else
    {
      swift_release();
      swift_release();
      id v12 = &_swiftEmptyDictionarySingleton;
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
    *a1 = v12;
  }
  return result;
}

uint64_t sub_10009EE70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v12 = *(void *)(a1 + OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_connection);
  swift_retain();
  id v13 = sub_1000461F4(a2, a3, a4, a5, v12);
  uint64_t result = swift_release();
  if (!v6)
  {
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v16 = swift_getKeyPath();
    uint64_t v17 = swift_getKeyPath();
    id v23 = &_swiftEmptyDictionarySingleton;
    uint64_t v18 = v13[2];
    if (v18)
    {
      uint64_t v19 = *(void *)(type metadata accessor for LNActionRecord() - 8);
      BOOL v20 = (char *)v13 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
      uint64_t v21 = *(void *)(v19 + 72);
      swift_bridgeObjectRetain();
      do
      {
        sub_1000962C8(&v23, v20, v17, KeyPath, v16);
        v20 += v21;
        --v18;
      }
      while (v18);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      id v22 = v23;
    }
    else
    {
      swift_release();
      swift_release();
      id v22 = &_swiftEmptyDictionarySingleton;
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
    *a6 = v22;
  }
  return result;
}

uint64_t sub_10009F1A0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v84 = a1;
  swift_retain();
  sub_100044DE4((uint64_t)v81);
  uint64_t v66 = a3;
  if (a2)
  {
    uint64_t v7 = v82;
    uint64_t v8 = v83;
    sub_10000BEA0(v81, (uint64_t)v82);
    if (qword_10017C2C0 != -1) {
LABEL_29:
    }
      swift_once();
    *(void *)&long long v77 = v84;
    *((void *)&v77 + 1) = a2;
    == infix<A>(_:_:)();
    uint64_t v79 = v7;
    uint64_t v80 = v8;
    sub_1000274F4((uint64_t *)&v77);
    QueryType.filter(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000E788((uint64_t)v81);
    sub_10000D698(&v77, (uint64_t)v81);
  }
  uint64_t v9 = v4;
  uint64_t v10 = sub_100045798(v81);
  uint64_t v8 = v9;
  sub_10000E788((uint64_t)v81);
  uint64_t result = swift_release();
  if (!v9)
  {
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v13 = swift_getKeyPath();
    uint64_t v14 = swift_getKeyPath();
    uint64_t v7 = _swiftEmptyDictionarySingleton;
    v81[0] = _swiftEmptyDictionarySingleton;
    uint64_t v15 = v10;
    uint64_t v16 = *(void *)(v10 + 16);
    if (v16)
    {
      uint64_t v72 = a2;
      uint64_t v17 = *(void *)(type metadata accessor for LNActionRecord() - 8);
      unint64_t v18 = v10 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
      uint64_t v19 = *(void *)(v17 + 72);
      uint64_t v71 = v15;
      swift_bridgeObjectRetain();
      do
      {
        sub_1000962C8(v81, v18, v14, KeyPath, v13);
        uint64_t v8 = 0;
        v18 += v19;
        --v16;
      }
      while (v16);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      BOOL v20 = (void *)v81[0];
      a2 = v72;
    }
    else
    {
      swift_release();
      swift_release();
      BOOL v20 = _swiftEmptyDictionarySingleton;
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_retain();
    uint64_t v21 = sub_100084F44(v84, a2);
    uint64_t v65 = (uint64_t)v20;
    swift_release();
    v81[0] = _swiftEmptyDictionarySingleton;
    uint64_t v22 = *(void *)(v21 + 16);
    uint64_t v64 = v21;
    if (v22)
    {
      id v23 = (uint64_t *)(v21 + 72);
      uint64_t v7 = _swiftEmptyDictionarySingleton;
      long long v68 = xmmword_10013EF20;
      do
      {
        uint64_t v24 = *(v23 - 5);
        a2 = *(v23 - 4);
        uint64_t v4 = *(v23 - 2);
        uint64_t v25 = *v23;
        uint64_t v73 = *(v23 - 3);
        uint64_t v75 = *(v23 - 1);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        uint64_t v84 = v25;
        swift_bridgeObjectRetain();
        unint64_t v33 = sub_100021098(v24, a2, v26, v27, v28, v29, v30, v31, v62, v63, v64, v65, (uint64_t)v66, v67, v68, *((uint64_t *)&v68 + 1), v69, v70, v71,
                v73,
                v75,
                v77,
                *((uint64_t *)&v77 + 1),
                v78,
                (uint64_t)v79,
                v80);
        uint64_t v34 = v7[2];
        BOOL v35 = (v32 & 1) == 0;
        uint64_t v36 = v34 + v35;
        if (__OFADD__(v34, v35))
        {
          __break(1u);
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
        char v37 = v32;
        if (v7[3] < v36)
        {
          sub_100022BFC(v36, 1);
          uint64_t v7 = (void *)v81[0];
          uint64_t v44 = sub_100021098(v24, a2, v38, v39, v40, v41, v42, v43, v62, v63, v64, v65, (uint64_t)v66, v67, v68, *((uint64_t *)&v68 + 1), v69, v70, v71,
                  v74,
                  v76,
                  v77,
                  *((uint64_t *)&v77 + 1),
                  v78,
                  (uint64_t)v79,
                  v80);
          if ((v37 & 1) != (v45 & 1))
          {
            uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          unint64_t v33 = v44;
        }
        if (v37)
        {
          uint64_t v70 = v4;
          swift_bridgeObjectRelease();
          uint64_t v46 = v7[7];
          uint64_t v47 = *(void *)(v46 + 8 * v33);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v67 = v46;
          *(void *)(v46 + 8 * v33) = v47;
          uint64_t v71 = v22;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_10001F2A0();
            uint64_t v47 = v59;
            *(void *)(v46 + 8 * v33) = v59;
          }
          unint64_t v49 = *(void *)(v47 + 16);
          unint64_t v50 = v49 + 1;
          if (v49 >= *(void *)(v47 + 24) >> 1)
          {
            uint64_t v63 = v49 + 1;
            sub_10001F2A0();
            unint64_t v50 = v49 + 1;
            uint64_t v47 = v60;
            *(void *)(v46 + 8 * v33) = v60;
          }
          *(void *)(v47 + 16) = v50;
          uint64_t v51 = (void *)(v47 + 48 * v49);
          v51[4] = v24;
          v51[5] = a2;
          uint64_t v22 = v71;
          v51[6] = v74;
          v51[7] = v70;
          uint64_t v52 = v84;
          v51[8] = v76;
          v51[9] = v52;
        }
        else
        {
          sub_10000BF1C(&qword_10017D520);
          uint64_t v53 = swift_allocObject();
          *(_OWORD *)(v53 + 16) = v68;
          *(void *)(v53 + 32) = v24;
          *(void *)(v53 + 40) = a2;
          *(void *)(v53 + 48) = v74;
          *(void *)(v53 + 56) = v4;
          uint64_t v54 = v84;
          *(void *)(v53 + 64) = v76;
          *(void *)(v53 + 72) = v54;
          v7[(v33 >> 6) + 8] |= 1 << v33;
          uint64_t v55 = (uint64_t *)(v7[6] + 16 * v33);
          *uint64_t v55 = v24;
          v55[1] = a2;
          *(void *)(v7[7] + 8 * v33) = v53;
          uint64_t v56 = v7[2];
          BOOL v57 = __OFADD__(v56, 1);
          uint64_t v58 = v56 + 1;
          if (v57) {
            goto LABEL_28;
          }
          v7[2] = v58;
        }
        v23 += 6;
        --v22;
      }
      while (v22);
    }
    swift_bridgeObjectRelease();
    swift_retain();
    uint64_t v61 = sub_1000958E8(_swiftEmptyDictionarySingleton, v65, (uint64_t)v7);
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v66 = v61;
  }
  return result;
}

uint64_t sub_10009F888@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t v27 = a5;
  uint64_t v28 = type metadata accessor for LNActionRecord();
  __chkstk_darwin(v28);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000BF1C((uint64_t *)&unk_10017F2A8);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v26 - v16;
  swift_retain();
  sub_100045584(a1, a2, a3, a4);
  uint64_t result = swift_release();
  if (!v5)
  {
    uint64_t v19 = v27;
    sub_100048F38();
    swift_bridgeObjectRelease();
    sub_1000A3B4C((uint64_t)v17, (uint64_t)v14, (uint64_t *)&unk_10017F2A8);
    uint64_t v20 = v28;
    if (sub_10000D5D8((uint64_t)v14, 1, v28) == 1)
    {
      sub_1000347E8((uint64_t)v14, (uint64_t *)&unk_10017F2A8);
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v23 = v22;
      id v24 = objc_allocWithZone((Class)NSError);
      sub_1000A31C0(v21, v23, 9004, 0);
      swift_willThrow();
      return sub_1000347E8((uint64_t)v17, (uint64_t *)&unk_10017F2A8);
    }
    else
    {
      sub_1000347E8((uint64_t)v17, (uint64_t *)&unk_10017F2A8);
      sub_1000A3AF8((uint64_t)v14, (uint64_t)v11, (void (*)(void))type metadata accessor for LNActionRecord);
      id v25 = *(id *)&v11[*(int *)(v20 + 24)];
      uint64_t result = sub_1000A3AA4((uint64_t)v11, (void (*)(void))type metadata accessor for LNActionRecord);
      *uint64_t v19 = v25;
    }
  }
  return result;
}

uint64_t sub_10009FBF0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  char v32 = a5;
  uint64_t v10 = sub_10000BF1C((uint64_t *)&unk_10017F2A8);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v29 - v14;
  __chkstk_darwin(v16);
  unint64_t v18 = (char *)&v29 - v17;
  swift_retain();
  sub_100045584(a1, a2, a3, a4);
  uint64_t v33 = v5;
  if (v5) {
    return swift_release();
  }
  uint64_t v30 = v12;
  uint64_t v31 = v18;
  sub_100048F38();
  swift_bridgeObjectRelease();
  uint64_t v20 = type metadata accessor for LNActionRecord();
  if (sub_10000D5D8((uint64_t)v15, 1, v20) == 1)
  {
    uint64_t v23 = (uint64_t)v31;
    uint64_t v24 = v33;
    sub_100045E0C(a1, a2, a3, a4, v21, v22, (uint64_t)v31);
    swift_release();
    uint64_t result = sub_1000347E8((uint64_t)v15, (uint64_t *)&unk_10017F2A8);
    if (v24) {
      return result;
    }
  }
  else
  {
    swift_release();
    uint64_t v23 = (uint64_t)v31;
    sub_1000A3AF8((uint64_t)v15, (uint64_t)v31, (void (*)(void))type metadata accessor for LNActionRecord);
    sub_10000D5B0(v23, 0, 1, v20);
  }
  uint64_t v25 = (uint64_t)v30;
  sub_100083620(v23, (uint64_t)v30, (uint64_t *)&unk_10017F2A8);
  int v26 = sub_10000D5D8(v25, 1, v20);
  uint64_t v27 = v32;
  if (v26 == 1)
  {
    uint64_t result = sub_1000347E8(v25, (uint64_t *)&unk_10017F2A8);
    id v28 = 0;
  }
  else
  {
    id v28 = *(id *)(v25 + *(int *)(v20 + 24));
    uint64_t result = sub_1000A3AA4(v25, (void (*)(void))type metadata accessor for LNActionRecord);
  }
  *uint64_t v27 = v28;
  return result;
}

uint64_t sub_10009FF90@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  id v28 = a4;
  swift_retain();
  sub_100044DE4((uint64_t)v25);
  if (a2)
  {
    uint64_t v8 = v26;
    uint64_t v9 = v27;
    sub_10000BEA0(v25, v26);
    if (qword_10017C2C0 != -1) {
      swift_once();
    }
    *(void *)&long long v22 = a1;
    *((void *)&v22 + 1) = a2;
    == infix<A>(_:_:)();
    uint64_t v23 = v8;
    uint64_t v24 = v9;
    sub_1000274F4((uint64_t *)&v22);
    QueryType.filter(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000E788((uint64_t)v25);
    sub_10000D698(&v22, (uint64_t)v25);
  }
  uint64_t v10 = sub_100045798(v25);
  sub_10000E788((uint64_t)v25);
  uint64_t result = swift_release();
  if (!v4)
  {
    swift_bridgeObjectRetain();
    sub_100095644(v10, a3);
    uint64_t v13 = v12;
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v15 = swift_getKeyPath();
    uint64_t v16 = swift_getKeyPath();
    v25[0] = _swiftEmptyDictionarySingleton;
    uint64_t v17 = *(void *)(v13 + 16);
    if (v17)
    {
      uint64_t v18 = *(void *)(type metadata accessor for LNActionRecord() - 8);
      uint64_t v19 = v13 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
      uint64_t v20 = *(void *)(v18 + 72);
      swift_bridgeObjectRetain();
      do
      {
        sub_1000962C8(v25, v19, v16, KeyPath, v15);
        v19 += v20;
        --v17;
      }
      while (v17);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v21 = (void *)v25[0];
    }
    else
    {
      swift_release();
      swift_release();
      uint64_t v21 = _swiftEmptyDictionarySingleton;
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
    void *v28 = v21;
  }
  return result;
}

uint64_t sub_1000A0268(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a4
                                                             + *(int *)(type metadata accessor for LNActionRecord() + 24)), "parameters"));
  sub_10000D9D4(0, &qword_10017D0A8);
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRetain();
  LOBYTE(v7) = sub_100096000(v8, a1, a2, a3);
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1000A04A4@<X0>(unint64_t a1@<X1>, void *a2@<X8>)
{
  swift_retain();
  uint64_t v5 = sub_100045AF0(a1);
  uint64_t result = swift_release();
  if (!v2)
  {
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v8 = swift_getKeyPath();
    uint64_t v9 = swift_getKeyPath();
    uint64_t v15 = _swiftEmptyDictionarySingleton;
    uint64_t v10 = v5[2];
    if (v10)
    {
      uint64_t v11 = *(void *)(type metadata accessor for LNActionRecord() - 8);
      uint64_t v12 = (char *)v5 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
      uint64_t v13 = *(void *)(v11 + 72);
      swift_bridgeObjectRetain();
      do
      {
        sub_1000962C8(&v15, v12, v9, KeyPath, v8);
        v12 += v13;
        --v10;
      }
      while (v10);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v14 = v15;
    }
    else
    {
      swift_release();
      swift_release();
      uint64_t v14 = _swiftEmptyDictionarySingleton;
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
    *a2 = v14;
  }
  return result;
}

uint64_t sub_1000A082C@<X0>(void *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for LNBundleRecord();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (void *)((char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = swift_retain();
  uint64_t v8 = sub_1000F9084(v7);
  uint64_t result = swift_release();
  if (!v1)
  {
    uint64_t v10 = *(void *)(v8 + 16);
    if (v10)
    {
      v21[1] = 0;
      long long v22 = a1;
      uint64_t v24 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v11 = *(unsigned __int8 *)(v4 + 80);
      v21[0] = v8;
      uint64_t v12 = v8 + ((v11 + 32) & ~v11);
      uint64_t v23 = *(void *)(v4 + 72);
      do
      {
        sub_1000A3A48(v12, (uint64_t)v6, (void (*)(void))type metadata accessor for LNBundleRecord);
        uint64_t v13 = *v6;
        uint64_t v14 = v6[1];
        uint64_t v15 = (uint64_t *)((char *)v6 + *(int *)(v3 + 24));
        uint64_t v16 = v3;
        uint64_t v17 = *v15;
        unint64_t v18 = v15[1];
        id v19 = objc_allocWithZone((Class)LNRegisteredBundleMetadata);
        swift_bridgeObjectRetain();
        sub_10000DADC(v17, v18);
        sub_1000A3498(v13, v14, v17, v18);
        sub_1000A3AA4((uint64_t)v6, (void (*)(void))type metadata accessor for LNBundleRecord);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        uint64_t v3 = v16;
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v12 += v23;
        --v10;
      }
      while (v10);
      uint64_t v20 = v24;
      uint64_t result = swift_bridgeObjectRelease();
      a1 = v22;
    }
    else
    {
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v20 = _swiftEmptyArrayStorage;
    }
    *a1 = v20;
  }
  return result;
}

uint64_t sub_1000A0B28@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = qword_10017C600;
  swift_retain();
  if (v4 != -1) {
    swift_once();
  }
  memcpy(__dst, &unk_100180A10, 0xA8uLL);
  v19[3] = (uint64_t)&type metadata for Table;
  v19[4] = (uint64_t)&protocol witness table for Table;
  v19[0] = swift_allocObject();
  memcpy((void *)(v19[0] + 16), &unk_100180A10, 0xA8uLL);
  sub_10002A390(__dst);
  Connection.prepareRowIterator(_:)(v19);
  uint64_t v5 = sub_10000E788((uint64_t)v19);
  if (v2) {
    return swift_release();
  }
  __chkstk_darwin(v5);
  swift_retain();
  RowIterator.compactMap<A>(_:)();
  uint64_t v8 = v6;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v10 = swift_getKeyPath();
  uint64_t v11 = swift_getKeyPath();
  v19[0] = (uint64_t)_swiftEmptyDictionarySingleton;
  uint64_t v12 = *(void *)(v8 + 16);
  if (v12)
  {
    uint64_t v21 = a1;
    swift_bridgeObjectRetain();
    uint64_t v13 = (void **)(v8 + 48);
    do
    {
      uint64_t v15 = (uint64_t)*(v13 - 1);
      uint64_t v14 = *v13;
      uint64_t v16 = (uint64_t)*(v13 - 2);
      swift_bridgeObjectRetain();
      id v17 = v14;
      sub_100096460(v19, v16, v15, (uint64_t)v17, v11, KeyPath, v10, (unint64_t *)&qword_10017E9C0, (uint64_t)LNQueryMetadata_ptr, (void (*)(id, uint64_t, uint64_t, uint64_t))sub_10000CBEC, (void (*)(uint64_t, uint64_t, uint64_t))sub_10004F830);

      swift_bridgeObjectRelease();
      v13 += 3;
      --v12;
    }
    while (v12);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    unint64_t v18 = (void *)v19[0];
    a1 = v21;
  }
  else
  {
    swift_release();
    swift_release();
    unint64_t v18 = _swiftEmptyDictionarySingleton;
  }
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  *a1 = v18;
  return result;
}

uint64_t sub_1000A0FFC@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = qword_10017C5E0;
  swift_retain();
  if (v4 != -1) {
    swift_once();
  }
  memcpy(__dst, &unk_100180910, 0xA8uLL);
  v19[3] = (uint64_t)&type metadata for Table;
  v19[4] = (uint64_t)&protocol witness table for Table;
  v19[0] = swift_allocObject();
  memcpy((void *)(v19[0] + 16), &unk_100180910, 0xA8uLL);
  sub_10002A390(__dst);
  Connection.prepareRowIterator(_:)(v19);
  uint64_t v5 = sub_10000E788((uint64_t)v19);
  if (v2) {
    return swift_release();
  }
  __chkstk_darwin(v5);
  swift_retain();
  RowIterator.compactMap<A>(_:)();
  uint64_t v8 = v6;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v10 = swift_getKeyPath();
  uint64_t v11 = swift_getKeyPath();
  v19[0] = (uint64_t)_swiftEmptyDictionarySingleton;
  uint64_t v12 = *(void *)(v8 + 16);
  if (v12)
  {
    uint64_t v21 = a1;
    swift_bridgeObjectRetain();
    uint64_t v13 = (void **)(v8 + 48);
    do
    {
      uint64_t v15 = (uint64_t)*(v13 - 1);
      uint64_t v14 = *v13;
      uint64_t v16 = (uint64_t)*(v13 - 2);
      swift_bridgeObjectRetain();
      id v17 = v14;
      sub_100096460(v19, v16, v15, (uint64_t)v17, v11, KeyPath, v10, (unint64_t *)&qword_10017E9B0, (uint64_t)LNEnumMetadata_ptr, (void (*)(id, uint64_t, uint64_t, uint64_t))sub_10000CCCC, (void (*)(uint64_t, uint64_t, uint64_t))sub_10004F848);

      swift_bridgeObjectRelease();
      v13 += 3;
      --v12;
    }
    while (v12);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    unint64_t v18 = (void *)v19[0];
    a1 = v21;
  }
  else
  {
    swift_release();
    swift_release();
    unint64_t v18 = _swiftEmptyDictionarySingleton;
  }
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  *a1 = v18;
  return result;
}

Class sub_1000A13C4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), unint64_t *a6)
{
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;
  id v12 = a1;
  a5(v9, v11);
  swift_bridgeObjectRelease();

  sub_10000D9D4(0, a6);
  v13.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();

  return v13.super.isa;
}

uint64_t sub_1000A14D0@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = qword_10017C5C0;
  swift_retain();
  if (v4 != -1) {
    swift_once();
  }
  memcpy(__dst, &unk_100180820, 0xA8uLL);
  v17[3] = (uint64_t)&type metadata for Table;
  v17[4] = (uint64_t)&protocol witness table for Table;
  v17[0] = swift_allocObject();
  memcpy((void *)(v17[0] + 16), &unk_100180820, 0xA8uLL);
  sub_10002A390(__dst);
  uint64_t v5 = sub_10010260C(v17);
  sub_10000E788((uint64_t)v17);
  uint64_t result = swift_release();
  if (!v2)
  {
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v8 = swift_getKeyPath();
    uint64_t v9 = swift_getKeyPath();
    v17[0] = (uint64_t)_swiftEmptyDictionarySingleton;
    uint64_t v10 = *(void *)(v5 + 16);
    if (v10)
    {
      id v19 = a1;
      swift_bridgeObjectRetain();
      uint64_t v11 = (void **)(v5 + 48);
      do
      {
        uint64_t v13 = (uint64_t)*(v11 - 1);
        id v12 = *v11;
        uint64_t v14 = (uint64_t)*(v11 - 2);
        swift_bridgeObjectRetain();
        id v15 = v12;
        sub_100096460(v17, v14, v13, (uint64_t)v15, v9, KeyPath, v8, (unint64_t *)&qword_10017E9A0, (uint64_t)LNEntityMetadata_ptr, (void (*)(id, uint64_t, uint64_t, uint64_t))sub_10000CCE4, (void (*)(uint64_t, uint64_t, uint64_t))sub_10004F860);

        swift_bridgeObjectRelease();
        v11 += 3;
        --v10;
      }
      while (v10);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v16 = (void *)v17[0];
      a1 = v19;
    }
    else
    {
      swift_release();
      swift_release();
      uint64_t v16 = _swiftEmptyDictionarySingleton;
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
    *a1 = v16;
  }
  return result;
}

Class sub_1000A1770(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t *a5)
{
  id v7 = a1;
  a4();

  sub_10000BF1C(a5);
  v8.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();

  return v8.super.isa;
}

Class sub_1000A1894(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  if (a3)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  id v10 = a1;
  a5(v7, v9);

  swift_bridgeObjectRelease();
  v11.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();

  return v11.super.isa;
}

id sub_1000A1994@<X0>(void *a1@<X3>, void *a2@<X8>)
{
  uint64_t v5 = sub_10000BF1C(&qword_10017F2A0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  sub_1000F95E8();
  id result = (id)swift_release();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for LNBundleRecord();
    if (sub_10000D5D8((uint64_t)v7, 1, v9) == 1)
    {
      id result = (id)sub_1000347E8((uint64_t)v7, &qword_10017F2A0);
      if (a1)
      {
        uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v12 = v11;
        id v13 = objc_allocWithZone((Class)NSError);
        id v14 = sub_1000A31C0(v10, v12, 9004, 0);
        id result = v14;
        uint64_t v15 = 0;
        *a1 = v14;
      }
      else
      {
        uint64_t v15 = 0;
      }
    }
    else
    {
      uint64_t v15 = *(void *)&v7[*(int *)(v9 + 32)];
      id result = (id)sub_1000A3AA4((uint64_t)v7, (void (*)(void))type metadata accessor for LNBundleRecord);
    }
    *a2 = v15;
  }
  return result;
}

id _LNMetadataProviderDirect.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

void _LNMetadataProviderDirect.init()()
{
}

void *sub_1000A1D28(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyDictionarySingleton;
  }
  id v25 = self;
  swift_bridgeObjectRetain();
  for (i = (uint64_t *)(a1 + 72); ; i += 6)
  {
    uint64_t v4 = *(i - 1);
    uint64_t v5 = *i;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    NSString v6 = String._bridgeToObjectiveC()();
    id v7 = [v25 protocolOrNilWithIdentifier:v6];

    if (!v7)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_14;
    }
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v9 = sub_1000214B0((uint64_t)v7);
    uint64_t v11 = _swiftEmptyDictionarySingleton[2];
    BOOL v12 = (v10 & 1) == 0;
    Swift::Int v13 = v11 + v12;
    if (__OFADD__(v11, v12)) {
      break;
    }
    unint64_t v14 = v9;
    char v15 = v10;
    sub_10000BF1C((uint64_t *)&unk_10017F2C0);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v13))
    {
      unint64_t v16 = sub_1000214B0((uint64_t)v7);
      if ((v15 & 1) != (v17 & 1)) {
        goto LABEL_19;
      }
      unint64_t v14 = v16;
    }
    if (v15)
    {
      unint64_t v18 = (void *)(_swiftEmptyDictionarySingleton[7] + 16 * v14);
      swift_bridgeObjectRelease();
      *unint64_t v18 = v4;
      v18[1] = v5;
    }
    else
    {
      _swiftEmptyDictionarySingleton[(v14 >> 6) + 8] |= 1 << v14;
      *(void *)(_swiftEmptyDictionarySingleton[6] + 8 * v14) = v7;
      id v19 = (void *)(_swiftEmptyDictionarySingleton[7] + 16 * v14);
      *id v19 = v4;
      v19[1] = v5;
      uint64_t v20 = _swiftEmptyDictionarySingleton[2];
      BOOL v21 = __OFADD__(v20, 1);
      uint64_t v22 = v20 + 1;
      if (v21) {
        goto LABEL_18;
      }
      _swiftEmptyDictionarySingleton[2] = v22;
      id v23 = v7;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

LABEL_14:
    swift_bridgeObjectRelease();
    if (!--v1)
    {
      swift_bridgeObjectRelease();
      return _swiftEmptyDictionarySingleton;
    }
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  sub_10000D9D4(0, &qword_10017D0A0);
  id result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_1000A1F6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void (**a6)(void, void, void))
{
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  id v11 = a5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10009D33C((uint64_t)v11, v11, a1, a2, &v16, &v15, a3, a4);
  uint64_t v12 = v15;
  if (v16)
  {
    swift_errorRetain();
    sub_10000D9D4(0, &qword_10017F250);
    swift_bridgeObjectRetain();
    v13.super.isa = Array._bridgeToObjectiveC()().super.isa;
    if (v12)
    {
LABEL_3:
      unint64_t v14 = (void *)_convertErrorToNSError(_:)();
      goto LABEL_6;
    }
  }
  else
  {
    swift_errorRetain();
    v13.super.isa = 0;
    if (v12) {
      goto LABEL_3;
    }
  }
  unint64_t v14 = 0;
LABEL_6:
  ((void (**)(void, Class, void *))a6)[2](a6, v13.super.isa, v14);

  swift_errorRelease();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  swift_bridgeObjectRelease();

  _Block_release(a6);
}

uint64_t _LNMetadataProviderDirect.autoShortcuts(forBundleIdentifier:localeIdentifier:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  id v11 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10009D33C((uint64_t)v11, v11, a1, a2, &v16, &v15, a3, a4);
  uint64_t v12 = v15;
  uint64_t v13 = v16;
  swift_bridgeObjectRetain();
  swift_errorRetain();
  a5(v13, v12);
  swift_errorRelease();
  swift_bridgeObjectRelease();
  swift_errorRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000A21C8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5)
{
  swift_retain();
  sub_1000FCB78(a2, a3, (uint64_t)v20);
  if (v5)
  {
    swift_release();
    uint64_t v10 = type metadata accessor for MetadataError();
    sub_1000A3628(&qword_10017F280, (void (*)(uint64_t))&type metadata accessor for MetadataError);
    uint64_t v11 = swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v10 - 8) + 104))(v12, enum case for MetadataError.cacheLookupFailed(_:), v10);
    swift_errorRelease();
    *a5 = v11;
    return swift_errorRelease();
  }
  swift_release();
  sub_1000A3880(v20);
  sub_100083620((uint64_t)v20, (uint64_t)v21, &qword_10017D790);
  if (v22)
  {
    swift_retain();
    sub_100028BA8();
    unint64_t v18 = v14;
    swift_release();
    if (!v18)
    {
      uint64_t v15 = type metadata accessor for MetadataError();
      sub_1000A3628(&qword_10017F280, (void (*)(uint64_t))&type metadata accessor for MetadataError);
      uint64_t v16 = swift_allocError();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v15 - 8) + 104))(v17, enum case for MetadataError.cacheLookupFailed(_:), v15);
      *a5 = v16;
      return swift_errorRelease();
    }
    id v19 = sub_100050930(1000, v18);
    swift_bridgeObjectRelease();
    *a4 = v19;
  }
  else
  {
    *a4 = _swiftEmptyArrayStorage;
  }
  return swift_bridgeObjectRelease();
}

void sub_1000A2518(uint64_t a1, uint64_t a2, void *a3, void (**a4)(void, void, void))
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  id v7 = a3;
  swift_bridgeObjectRetain();
  sub_10009D9B4((uint64_t)v7, v7, a1, a2, &v11, &v12);
  uint64_t v8 = v11;
  if (v12)
  {
    swift_errorRetain();
    swift_bridgeObjectRetain();
    sub_10000BF1C(&qword_10017D670);
    v9.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    if (v8)
    {
LABEL_3:
      uint64_t v10 = (void *)_convertErrorToNSError(_:)();
      goto LABEL_6;
    }
  }
  else
  {
    swift_errorRetain();
    v9.super.isa = 0;
    if (v8) {
      goto LABEL_3;
    }
  }
  uint64_t v10 = 0;
LABEL_6:
  ((void (**)(void, Class, void *))a4)[2](a4, v9.super.isa, v10);

  swift_errorRelease();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  swift_bridgeObjectRelease();

  _Block_release(a4);
}

uint64_t _LNMetadataProviderDirect.autoShortcuts(forLocaleIdentifier:completion:)(uint64_t a1, uint64_t a2, void (*a3)(void, void))
{
  id v5 = v3;
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_1000A4558();
  sub_10009D9B4(v6, v7, v8, v9, v10, v11);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  a3(0, 0);
  swift_errorRelease();
  swift_bridgeObjectRelease();
  swift_errorRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000A2734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  swift_retain();
  sub_1000291FC();
  if (v5)
  {
    swift_errorRelease();
    swift_release();
LABEL_3:
    uint64_t v9 = type metadata accessor for MetadataError();
    sub_1000A3628(&qword_10017F280, (void (*)(uint64_t))&type metadata accessor for MetadataError);
    uint64_t v10 = swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v9 - 8) + 104))(v11, enum case for MetadataError.cacheLookupFailed(_:), v9);
    *a4 = v10;
    return swift_errorRelease();
  }
  uint64_t v13 = v8;
  swift_release();
  if (!v13) {
    goto LABEL_3;
  }
  uint64_t v14 = sub_1000A3670(v13);
  swift_bridgeObjectRelease();
  *a5 = v14;
  return swift_bridgeObjectRelease();
}

uint64_t _LNMetadataProviderDirect.autoShortcuts(forLocaleIdentifier:)()
{
  return sub_1000A2948();
}

uint64_t sub_1000A2948()
{
  sub_1000A461C();
  swift_bridgeObjectRetain();
  uint64_t v1 = sub_1000A4364();
  return v0(v1);
}

void _LNMetadataProviderDirect.properties(forIdentifiers:)()
{
  v0;
  swift_bridgeObjectRetain();
  sub_1000A4508();
}

uint64_t sub_1000A2AD4@<X0>(void *a1@<X8>)
{
  uint64_t v47 = a1;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v48 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for LNAppShortcutParameterRecord();
  __chkstk_darwin(v5);
  id v7 = (char *)v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000BF1C((uint64_t *)&unk_10017FAE0);
  uint64_t v56 = *(void *)(v8 - 8);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v46 - v12;
  swift_retain();
  sub_10004EDAC();
  if (v1)
  {
    swift_errorRelease();
    swift_release();
    uint64_t v15 = type metadata accessor for MetadataError();
    sub_1000A3628(&qword_10017F280, (void (*)(uint64_t))&type metadata accessor for MetadataError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v15 - 8) + 104))(v16, enum case for MetadataError.cacheLookupFailed(_:), v15);
    return swift_willThrow();
  }
  uint64_t v18 = v14;
  uint64_t v52 = v5;
  uint64_t v53 = v13;
  unint64_t v50 = v10;
  uint64_t v51 = v7;
  uint64_t v54 = v4;
  swift_release();
  uint64_t v19 = *(void *)(v18 + 16);
  if (!v19)
  {
    uint64_t v22 = _swiftEmptyDictionarySingleton;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    void *v47 = v22;
    return result;
  }
  uint64_t v57 = v2;
  v46[1] = v18;
  void v46[2] = 0;
  uint64_t v20 = v18 + ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80));
  unint64_t v49 = (void (**)(uint64_t, uint64_t))(v48 + 8);
  uint64_t v21 = *(void *)(v56 + 72);
  uint64_t v55 = (void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16);
  uint64_t v56 = v21;
  swift_bridgeObjectRetain();
  uint64_t v22 = _swiftEmptyDictionarySingleton;
  uint64_t v24 = (uint64_t)v53;
  uint64_t v23 = (uint64_t)v54;
  uint64_t v26 = (uint64_t)v51;
  uint64_t v25 = v52;
  uint64_t v27 = (uint64_t)v50;
  while (1)
  {
    sub_1000A3B4C(v20, v24, (uint64_t *)&unk_10017FAE0);
    sub_1000A3B4C(v24, v27, (uint64_t *)&unk_10017FAE0);
    if (sub_10000D5D8(v27, 1, v25) == 1)
    {
      sub_1000347E8(v27, (uint64_t *)&unk_10017FAE0);
      goto LABEL_16;
    }
    sub_1000A3AF8(v27, v26, (void (*)(void))type metadata accessor for LNAppShortcutParameterRecord);
    id v28 = *v55;
    (*v55)(v23, v26, v57);
    id v29 = *(id *)(v26 + *(int *)(v25 + 36));
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v58 = v22;
    unint64_t v31 = sub_1000212E8(v23);
    uint64_t v33 = v22[2];
    BOOL v34 = (v32 & 1) == 0;
    Swift::Int v35 = v33 + v34;
    if (__OFADD__(v33, v34)) {
      break;
    }
    unint64_t v36 = v31;
    char v37 = v32;
    sub_10000BF1C(&qword_10017F288);
    Swift::Bool v38 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v35);
    uint64_t v24 = (uint64_t)v53;
    uint64_t v23 = (uint64_t)v54;
    if (v38)
    {
      unint64_t v39 = sub_1000212E8((uint64_t)v54);
      if ((v37 & 1) != (v40 & 1)) {
        goto LABEL_22;
      }
      unint64_t v36 = v39;
    }
    uint64_t v22 = v58;
    if (v37)
    {
      uint64_t v41 = v58[7];

      *(void *)(v41 + 8 * v36) = v29;
      uint64_t v42 = v57;
    }
    else
    {
      v58[(v36 >> 6) + 8] |= 1 << v36;
      uint64_t v42 = v57;
      v28(v22[6] + *(void *)(v48 + 72) * v36, v23, v57);
      *(void *)(v22[7] + 8 * v36) = v29;
      uint64_t v43 = v22[2];
      BOOL v44 = __OFADD__(v43, 1);
      uint64_t v45 = v43 + 1;
      if (v44) {
        goto LABEL_21;
      }
      v22[2] = v45;
    }
    swift_bridgeObjectRelease();
    (*v49)(v23, v42);
    uint64_t v26 = (uint64_t)v51;
    sub_1000A3AA4((uint64_t)v51, (void (*)(void))type metadata accessor for LNAppShortcutParameterRecord);
    uint64_t v25 = v52;
    uint64_t v27 = (uint64_t)v50;
LABEL_16:
    sub_1000347E8(v24, (uint64_t *)&unk_10017FAE0);
    v20 += v56;
    if (!--v19)
    {
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_1000A3168(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = [*a1 identifier];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  *a2 = v4;
  a2[1] = v6;
}

id sub_1000A31C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a4)
  {
    v8.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v8.super.isa = 0;
  }
  id v9 = [v4 initWithDomain:v7 code:a3 userInfo:v8.super.isa];

  return v9;
}

uint64_t sub_1000A3270()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000A32A8(uint64_t a1)
{
  return sub_100097700(a1, v1);
}

uint64_t sub_1000A32B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000A32C0()
{
  return swift_release();
}

uint64_t sub_1000A32C8()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A3308(void *a1, uint64_t a2)
{
  return sub_100097754(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1000A3310()
{
  type metadata accessor for URL();
  sub_1000283FC();
  v1 += 8;
  uint64_t v2 = *(unsigned __int8 *)(v1 + 72);
  uint64_t v3 = ((v2 + 16) & ~v2) + *(void *)(v1 + 56);
  uint64_t v4 = v2 | 7;
  sub_100013EC4();
  v5();

  return _swift_deallocObject(v0, v3, v4);
}

void sub_1000A3394()
{
}

id sub_1000A33F0(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000D9D4(0, (unint64_t *)&unk_10017F270);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v7 = [v3 initWithExplanation:v5 target:a3 attributes:isa];

  return v7;
}

id sub_1000A3498(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v9 = [v4 initWithBundleIdentifier:v7 installIdentifier:isa];
  sub_10000DA10(a3, a4);

  return v9;
}

id sub_1000A3524()
{
  sub_10000D9D4(0, &qword_10017E9F0);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_10000D9D4(0, &qword_10017D0A0);
  sub_100048188();
  Class v2 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v3 = [v0 initWithActions:isa systemProtocolDefaults:v2];

  return v3;
}

uint64_t type metadata accessor for _LNMetadataProviderDirect()
{
  return self;
}

uint64_t sub_1000A3628(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000A3670(uint64_t a1)
{
  sub_10000BF1C((uint64_t *)&unk_10017F290);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  id v3 = (void *)result;
  int64_t v4 = 0;
  uint64_t v28 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v6 = a1 + 64;
  uint64_t v5 = v7;
  uint64_t v8 = 1 << *(unsigned char *)(v6 - 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v5;
  uint64_t v26 = v6;
  int64_t v27 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = result + 64;
  if ((v9 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v12 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v12 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v4 << 6))
  {
    uint64_t v17 = (uint64_t *)(*(void *)(v28 + 48) + 16 * i);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    unint64_t v20 = *(void *)(*(void *)(v28 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v21 = sub_100050930(1000, v20);
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v11 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t v22 = (void *)(v3[6] + 16 * i);
    *uint64_t v22 = v18;
    v22[1] = v19;
    *(void *)(v3[7] + 8 * i) = v21;
    uint64_t v23 = v3[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v25;
    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v14 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_24;
    }
    if (v14 >= v27) {
      return (uint64_t)v3;
    }
    unint64_t v15 = *(void *)(v26 + 8 * v14);
    ++v4;
    if (!v15)
    {
      int64_t v4 = v14 + 1;
      if (v14 + 1 >= v27) {
        return (uint64_t)v3;
      }
      unint64_t v15 = *(void *)(v26 + 8 * v4);
      if (!v15)
      {
        int64_t v4 = v14 + 2;
        if (v14 + 2 >= v27) {
          return (uint64_t)v3;
        }
        unint64_t v15 = *(void *)(v26 + 8 * v4);
        if (!v15) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v10 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v27) {
    return (uint64_t)v3;
  }
  unint64_t v15 = *(void *)(v26 + 8 * v16);
  if (v15)
  {
    int64_t v4 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v4 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v4 >= v27) {
      return (uint64_t)v3;
    }
    unint64_t v15 = *(void *)(v26 + 8 * v4);
    ++v16;
    if (v15) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t *sub_1000A3880(uint64_t *a1)
{
  return a1;
}

uint64_t sub_1000A38B4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000A38F8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0[12])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v0[14])
  {
    swift_bridgeObjectRelease();
    if (v0[16])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 184, 7);
}

const char *sub_1000A3994()
{
  return "identifier";
}

void sub_1000A39A0(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t sub_1000A39B8(uint64_t a1, uint64_t a2)
{
  return sub_100103420(a1, a2, v2);
}

uint64_t sub_1000A39C0@<X0>(uint64_t *a1@<X8>)
{
  return sub_100103604(*(uint64_t (**)(void))(v1 + 16), a1);
}

void sub_1000A39DC(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t sub_1000A39F4(uint64_t a1, uint64_t a2)
{
  return sub_1001077F8(a1, a2, v2);
}

uint64_t sub_1000A39FC@<X0>(uint64_t *a1@<X8>)
{
  return sub_100107A1C(*(uint64_t (**)(void))(v1 + 16), a1);
}

void sub_1000A3A18(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1000A3A30(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t sub_1000A3A48(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_1000283FC();
  uint64_t v4 = sub_1000A456C();
  v5(v4);
  return a2;
}

uint64_t sub_1000A3A9C(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_1000A0268(a1, a2, a3, *(void *)(v3 + 16));
}

uint64_t sub_1000A3AA4(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_1000283FC();
  sub_100013EC4();
  v3();
  return a1;
}

uint64_t sub_1000A3AF8(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_1000283FC();
  uint64_t v4 = sub_100084E6C();
  v5(v4);
  return a2;
}

uint64_t sub_1000A3B4C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10000BF1C(a3);
  sub_1000283FC();
  uint64_t v4 = sub_1000A456C();
  v5(v4);
  return a2;
}

id sub_1000A3BB8()
{
  return sub_10009EBEC();
}

id sub_1000A3BD8()
{
  return sub_1000A31C0(v0, v1, 9006, 0);
}

id sub_1000A3C00(uint64_t a1, uint64_t a2)
{
  return sub_1000A31C0(a1, a2, 9006, 0);
}

id sub_1000A3C34@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A33F0(0xD000000000000010, (a1 - 32) | 0x8000000000000000, v1);
}

uint64_t sub_1000A3C60()
{
  return swift_dynamicCast();
}

uint64_t sub_1000A3C84()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

id sub_1000A3CAC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A33F0(0xD000000000000010, (a1 - 32) | 0x8000000000000000, v1);
}

uint64_t sub_1000A3CE0()
{
  return swift_willThrow();
}

uint64_t sub_1000A3CF8()
{
  return swift_dynamicCast();
}

uint64_t sub_1000A3D1C@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 88) = a1;
  return type metadata accessor for Logger();
}

uint64_t sub_1000A3D40(uint64_t a1)
{
  *(void *)(v1 - 128) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000A3D68()
{
  *(void *)(v1 - 112) = v0;
  return swift_errorRetain();
}

uint64_t sub_1000A3D8C()
{
  return swift_arrayDestroy();
}

void sub_1000A3DAC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  int v7 = *(_DWORD *)(v5 - 172);
  uint64_t v8 = *(uint8_t **)(v5 - 184);
  _os_log_impl(a1, v4, (os_log_type_t)v7, a4, v8, 0xCu);
}

uint64_t sub_1000A3DD0()
{
  return sub_100013090(v0, v1, (uint64_t *)(v2 - 96));
}

void sub_1000A3DEC(float a1)
{
  *(void *)(v2 - 184) = v1;
  *unint64_t v1 = a1;
  *(void *)(v2 - 192) = v1 + 1;
}

BOOL sub_1000A3E04(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

id sub_1000A3E20(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_1000A33F0(a1, a2, a3);
}

uint64_t sub_1000A3E38()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_1000A3E50()
{
  uint64_t v5 = *(void *)(v3 - 136);
  return sub_10009FBF0(v1, v5, v2, v0, (void *)(v3 - 96));
}

id sub_1000A3E80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(const char **)(a1 + 1488);
  return [v1 v3];
}

uint64_t sub_1000A3EA4()
{
  uint64_t v5 = *(void *)(v3 - 136);
  return sub_10009F888(v1, v5, v2, v0, (void *)(v3 - 104));
}

uint64_t sub_1000A3ED4()
{
  uint64_t v6 = *(void *)(v4 - 136);
  return sub_10009EE70(v0, v1, v2, v3, v6, (void *)(v4 - 104));
}

uint64_t sub_1000A3F04()
{
  return swift_arrayDestroy();
}

uint64_t sub_1000A3F24()
{
  return sub_100013090(v1, v0, (uint64_t *)(v2 - 96));
}

uint64_t sub_1000A3F44()
{
  return QueryType.filter(_:)();
}

uint64_t sub_1000A3F70()
{
  return QueryType.filter(_:)();
}

uint64_t sub_1000A3FA8(uint64_t a1)
{
  *(void *)(v1 - 200) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000A3FD4(uint64_t a1)
{
  *(void *)(v1 + 32) = a1;
  *(void *)(v2 - 112) = v1;
  return specialized Array._endMutation()();
}

unint64_t sub_1000A3FF0()
{
  return 0xD000000000000010;
}

uint64_t sub_1000A4004()
{
  uint64_t v5 = *(void *)(v3 - 144);
  return sub_100106E8C(v1, v0, v2, v5);
}

uint64_t sub_1000A4030()
{
  uint64_t v5 = *(void *)(v3 - 144);
  return sub_100045584(v1, v5, v2, v0);
}

void sub_1000A405C(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

void sub_1000A4074()
{
  *(void *)(v0 - 112) = 0;
}

uint64_t sub_1000A4080(uint64_t a1)
{
  *(void *)(v1 - 128) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000A40A8(uint64_t a1)
{
  *(void *)(v1 - 128) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void sub_1000A40D0(float a1)
{
  *(void *)(v2 - 256) = v1;
  *uint64_t v1 = a1;
  *(void *)(v2 - 264) = v1 + 1;
}

uint64_t sub_1000A40EC()
{
  return Logger.logObject.getter();
}

uint64_t sub_1000A4104()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_1000A412C()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_1000A4154()
{
  return _convertNSErrorToError(_:)();
}

uint64_t sub_1000A416C()
{
  return sub_10009FF90(v2, v0, v1, (void *)(v3 - 104));
}

id sub_1000A4194@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A33F0(0xD000000000000010, (a1 - 32) | 0x8000000000000000, v1);
}

id sub_1000A41BC()
{
  return sub_1000A31C0(v0, v1, 9003, 0);
}

uint64_t sub_1000A41E4()
{
  return swift_bridgeObjectRetain();
}

void sub_1000A420C(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t sub_1000A4224(uint64_t result)
{
  *(void *)(v1 - 152) = result;
  *(void *)(v1 - 96) = result;
  return result;
}

void sub_1000A4230()
{
  sub_10009ACC0();
}

uint64_t *sub_1000A4248()
{
  *(void *)(v2 - 152) = v0;
  *(void *)(v2 - 144) = v1;
  return sub_1000274F4((uint64_t *)(v2 - 176));
}

uint64_t sub_1000A426C()
{
  return swift_dynamicCast();
}

uint64_t sub_1000A4290(uint64_t a1)
{
  *(void *)(v1 - 128) = a1;
  return v1 - 128;
}

void sub_1000A42A8(float a1)
{
  *(void *)(v2 - 192) = v1;
  *uint64_t v1 = a1;
  *(void *)(v2 - 200) = v1 + 1;
}

uint64_t sub_1000A42C0()
{
  sub_10000E788(v0 - 136);
  return swift_release();
}

uint64_t sub_1000A42EC()
{
  sub_10000E788(v0 - 136);
  sub_10000D698((long long *)(v0 - 176), v0 - 136);
  return v0 - 136;
}

uint64_t sub_1000A431C()
{
  sub_10000E788(v0 - 136);
  sub_10000D698((long long *)(v0 - 176), v0 - 136);
  return v0 - 136;
}

void sub_1000A434C(float a1)
{
  *(void *)(v2 - 168) = v1;
  *uint64_t v1 = a1;
  *(void *)(v2 - 184) = v1 + 1;
}

uint64_t sub_1000A4364()
{
  return v0;
}

uint64_t sub_1000A437C()
{
  return sub_10009F1A0(v1, v0, (uint64_t *)(v2 - 104));
}

uint64_t sub_1000A43A0()
{
  return v0;
}

uint64_t *sub_1000A43B8()
{
  *(void *)(v2 - 152) = v0;
  *(void *)(v2 - 144) = v1;
  return sub_1000274F4((uint64_t *)(v2 - 176));
}

void sub_1000A43EC()
{
  *(void *)(v1 - 216) = v0;
}

uint64_t sub_1000A4404()
{
  return _convertNSErrorToError(_:)();
}

uint64_t sub_1000A441C(uint64_t a1)
{
  *(void *)(v1 - 120) = a1;
  return v1 - 120;
}

uint64_t sub_1000A4430()
{
  return swift_arrayDestroy();
}

uint64_t sub_1000A4450()
{
  return swift_arrayDestroy();
}

uint64_t sub_1000A4470()
{
  return sub_100013090(v0, v1, (uint64_t *)(v2 - 96));
}

uint64_t sub_1000A4490()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1000A44A8()
{
  return v0;
}

uint64_t sub_1000A44BC()
{
  return v0;
}

void sub_1000A44D0()
{
}

void sub_1000A44E8()
{
  *(void *)(v2 - 176) = v0;
}

void sub_1000A4508()
{
  sub_10009E7B4();
}

uint64_t sub_1000A4528()
{
  return swift_bridgeObjectRelease();
}

id sub_1000A4540@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(const char **)(a1 + 1488);
  return [v1 v3];
}

uint64_t sub_1000A4558()
{
  return v0;
}

uint64_t sub_1000A456C()
{
  return v0;
}

uint64_t sub_1000A4580()
{
  return v0;
}

id sub_1000A45AC(void *a1)
{
  return [a1 currentProcess];
}

uint64_t sub_1000A45C4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = *a1;
  uint64_t v4 = *(void *)(v2 - 232);
  *(void *)(v2 - 176) = v1;
  *(void *)(v2 - 168) = v4;
  return result;
}

uint64_t sub_1000A45D8()
{
  return v0;
}

uint64_t sub_1000A45EC()
{
  return Logger.logObject.getter();
}

void sub_1000A4604()
{
}

id sub_1000A461C()
{
  return v0;
}

uint64_t sub_1000A463C()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_1000A465C, v0, 0);
}

uint64_t sub_1000A465C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  swift_retain();
  uint64_t v23 = (char *)sub_100070E48();
  v22[3] = v23;
  swift_release();
  uint64_t v24 = *(void *)&v23[OBJC_IVAR____TtC10LinkDaemon8Registry_ready];
  v22[4] = v24;
  if (v24)
  {
    swift_retain();
    uint64_t v25 = (void *)swift_task_alloc();
    v22[5] = v25;
    *uint64_t v25 = v22;
    v25[1] = sub_1000A47C8;
    return Task<>.value.getter(v25, v24, (char *)&type metadata for () + 8, v26, v27, v28, v29, v30, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22);
  }
  else
  {

    unint64_t v31 = (uint64_t (*)(void))v22[1];
    return v31(0);
  }
}

uint64_t sub_1000A47C8()
{
  sub_100010BAC();
  uint64_t v1 = *(void *)(v0 + 16);
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1000A48D0, v1, 0);
}

uint64_t sub_1000A48D0()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t type metadata accessor for UpdateRegistryService()
{
  return self;
}

unint64_t sub_1000A495C()
{
  return 0xD00000000000001FLL;
}

uint64_t sub_1000A4978()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000411C4;
  return sub_1000A463C();
}

void *sub_1000A4A08(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v67 = a3;
  uint64_t v68 = a4;
  Swift::Int v7 = a1;
  if (a1 >> 62) {
    goto LABEL_28;
  }
  uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v8)
  {
    while (1)
    {
      uint64_t v79 = _swiftEmptyArrayStorage;
      sub_100057848();
      if (v8 < 0) {
        break;
      }
      uint64_t v64 = v5;
      uint64_t v65 = (void *)a2;
      uint64_t v9 = 0;
      unint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v69 = v8;
      unint64_t v70 = v7 & 0xC000000000000001;
      uint64_t v66 = v7;
      while (v8 != v9)
      {
        Swift::Int v11 = v7;
        if (v70) {
          id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v12 = *(id *)(v7 + 8 * v9 + 32);
        }
        uint64_t v13 = v12;
        id v14 = [v12 key];
        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v17 = v16;

        uint64_t v24 = *(void *)a2;
        if (*(void *)(*(void *)a2 + 16)
          && (uint64_t v25 = sub_100021098(v15, v17, v18, v19, v20, v21, v22, v23, v63, v64, (uint64_t)v65, v66, v67, v68, v69, v70, (uint64_t)v71, v73, v74,
                      (uint64_t)v76,
                      v78,
                      (uint64_t)v79,
                      v81,
                      v82,
                      v83,
                      v84),
              (v26 & 1) != 0))
        {
          uint64_t v27 = (uint64_t *)(*(void *)(v24 + 56) + 16 * v25);
          uint64_t v74 = *v27;
          uint64_t v28 = v13;
          uint64_t v29 = v27[1];
          swift_bridgeObjectRetain();

          swift_bridgeObjectRelease();
          Swift::Int v7 = v11;
          uint64_t v8 = v69;
        }
        else
        {
          NSString v30 = String._bridgeToObjectiveC()();
          uint64_t v72 = (uint64_t)v13;
          id v31 = [v13 localizedStringForLocaleIdentifier:v30];

          uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v29 = v32;

          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v34 = *(void *)a2;
          uint64_t v77 = *(void *)a2;
          *(void *)a2 = 0x8000000000000000;
          uint64_t v5 = v15;
          uint64_t v41 = sub_100021098(v15, v17, v35, v36, v37, v38, v39, v40, v63, v64, (uint64_t)v65, v66, v67, v68, v69, v70, v72, (uint64_t)v10, v75,
                  v77,
                  v78,
                  (uint64_t)v79,
                  v81,
                  v82,
                  v83,
                  v84);
          uint64_t v43 = *(void *)(v34 + 16);
          BOOL v44 = (v42 & 1) == 0;
          Swift::Int v7 = v43 + v44;
          if (__OFADD__(v43, v44)) {
            goto LABEL_26;
          }
          a2 = v41;
          char v45 = v42;
          sub_10000BF1C(&qword_10017C8F0);
          if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v7))
          {
            uint64_t v52 = sub_100021098(v5, v17, v46, v47, v48, v49, v50, v51, v63, v64, (uint64_t)v65, v66, v67, v68, v69, v70, (uint64_t)v71, v73, v74,
                    (uint64_t)v76,
                    v78,
                    v80,
                    v81,
                    v82,
                    v83,
                    v84);
            if ((v45 & 1) != (v53 & 1)) {
              goto LABEL_32;
            }
            a2 = v52;
          }
          if (v45)
          {
            uint64_t v54 = (uint64_t *)(v76[7] + 16 * a2);
            swift_bridgeObjectRelease();
            *uint64_t v54 = v74;
            v54[1] = v29;
          }
          else
          {
            v76[(a2 >> 6) + 8] |= 1 << a2;
            uint64_t v55 = (uint64_t *)(v76[6] + 16 * a2);
            *uint64_t v55 = v5;
            v55[1] = v17;
            uint64_t v56 = (uint64_t *)(v76[7] + 16 * a2);
            *uint64_t v56 = v74;
            v56[1] = v29;
            uint64_t v57 = v76[2];
            BOOL v58 = __OFADD__(v57, 1);
            uint64_t v59 = v57 + 1;
            if (v58) {
              goto LABEL_27;
            }
            v76[2] = v59;
            swift_bridgeObjectRetain();
          }
          a2 = (unint64_t)v65;
          void *v65 = v76;

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          Swift::Int v7 = v66;
          uint64_t v8 = v69;
          unint64_t v10 = (void *)v73;
        }
        uint64_t v79 = v10;
        unint64_t v60 = v10[2];
        uint64_t v5 = v60 + 1;
        if (v60 >= v10[3] >> 1) {
          sub_100057848();
        }
        ++v9;
        v10[2] = v5;
        uint64_t v61 = &v10[2 * v60];
        v61[4] = v74;
        v61[5] = v29;
        if (v8 == v9)
        {
          swift_bridgeObjectRelease();
          return v10;
        }
      }
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v8) {
        goto LABEL_29;
      }
    }
    __break(1u);
LABEL_32:
    uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
LABEL_29:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_1000A4DBC(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10000BF1C(&qword_10017D3E0);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v6 = v3;
  sub_1000A65F4(a1, 1, &v6);
  uint64_t v4 = v6;
  if (v1) {
    swift_release();
  }
  return v4;
}

void sub_1000A4E4C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t v128 = a7;
  uint64_t v132 = a3;
  uint64_t v8 = a2;
  uint64_t v123 = a1;
  v151 = _swiftEmptyArrayStorage;
  if (a2 >> 62) {
    goto LABEL_122;
  }
  uint64_t v9 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (2)
  {
    unint64_t v10 = _swiftEmptyArrayStorage;
    Swift::Int v11 = &selRef_initWithConnection_options_error_;
    if (v9)
    {
      *(void *)&long long v149 = _swiftEmptyArrayStorage;
      sub_100057A80();
      if (v9 < 0)
      {
        __break(1u);
        return;
      }
      uint64_t v12 = 0;
      unint64_t v10 = (void *)v149;
      do
      {
        if ((v8 & 0xC000000000000001) != 0) {
          id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v13 = *(id *)(v8 + 8 * v12 + 32);
        }
        id v14 = v13;
        id v15 = [v13 v11[41]];
        uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v18 = v17;

        *(void *)&long long v149 = v10;
        unint64_t v20 = v10[2];
        unint64_t v19 = v10[3];
        if (v20 >= v19 >> 1)
        {
          sub_100035E4C(v19);
          sub_100057A80();
          unint64_t v10 = (void *)v149;
        }
        ++v12;
        v10[2] = v20 + 1;
        uint64_t v21 = &v10[3 * v20];
        v21[4] = v16;
        v21[5] = v18;
        v21[6] = v14;
        Swift::Int v11 = &selRef_initWithConnection_options_error_;
      }
      while (v9 != v12);
    }
    uint64_t v22 = sub_1000A4DBC((uint64_t)v10);
    uint64_t v118 = 0;
    if ((unint64_t)v123 >> 62)
    {
      if (v123 < 0) {
        uint64_t v8 = v123;
      }
      else {
        uint64_t v8 = v123 & 0xFFFFFFFFFFFFFF8;
      }
      swift_bridgeObjectRetain();
      uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
      if (v23)
      {
LABEL_14:
        unint64_t v24 = 0;
        unint64_t v125 = v123 & 0xC000000000000001;
        uint64_t v120 = v123 & 0xFFFFFFFFFFFFFF8;
        uint64_t v119 = v123 + 32;
        uint64_t v122 = v128 + 80;
        v121 = (void *)LNValueTypeSpecificMetadataKeyLinkEnumerationSupportedValues;
        v131 = (void *)LNValueTypeSpecificMetadataKeyBoolTrueDisplayName;
        v130 = (void *)LNValueTypeSpecificMetadataKeyBoolFalseDisplayName;
        v129 = (char *)&type metadata for Any + 8;
        uint64_t v25 = &selRef_initWithConnection_options_error_;
        v135 = _swiftEmptyArrayStorage;
        v136 = v22;
        uint64_t v124 = v23;
        while (1)
        {
          if (v125)
          {
            unint64_t v26 = v24;
            id v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (v24 >= *(void *)(v120 + 16)) {
              goto LABEL_120;
            }
            unint64_t v26 = v24;
            id v27 = *(id *)(v119 + 8 * v24);
          }
          id v137 = v27;
          BOOL v28 = __OFADD__(v26, 1);
          uint64_t v8 = v26 + 1;
          if (v28)
          {
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
            goto LABEL_121;
          }
          uint64_t v127 = v8;
          id v29 = [v27 parameters];
          sub_10000D9D4(0, &qword_10017D0A8);
          unint64_t v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          if (!(v30 >> 62))
          {
            uint64_t v8 = *(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (v8) {
              break;
            }
            goto LABEL_115;
          }
          swift_bridgeObjectRetain();
          uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v8) {
            break;
          }
LABEL_115:

          swift_bridgeObjectRelease();
          unint64_t v24 = v127;
          if (v127 == v124) {
            goto LABEL_127;
          }
        }
        unint64_t v31 = 0;
        unint64_t v141 = v30 & 0xC000000000000001;
        unint64_t v138 = v30 + 32;
        uint64_t v139 = v30 & 0xFFFFFFFFFFFFFF8;
        uint64_t v140 = v8;
        while (1)
        {
          if (v141)
          {
            id v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (v31 >= *(void *)(v139 + 16)) {
              goto LABEL_118;
            }
            id v32 = *(id *)(v138 + 8 * v31);
          }
          uint64_t v33 = v32;
          BOOL v28 = __OFADD__(v31, 1);
          unint64_t v34 = v31 + 1;
          if (v28)
          {
            __break(1u);
LABEL_118:
            __break(1u);
            goto LABEL_119;
          }
          uint64_t v35 = sub_10004FB6C(v32);
          unint64_t v146 = v34;
          if (v36) {
            break;
          }
          id v52 = v33;
LABEL_87:

          unint64_t v31 = v146;
          if (v146 == v8) {
            goto LABEL_115;
          }
        }
        uint64_t v37 = v35;
        uint64_t v38 = v36;
        uint64_t v8 = (uint64_t)[v33 valueType];
        self;
        uint64_t v39 = (void *)swift_dynamicCastObjCClass();
        v147 = v33;
        if (v39)
        {
          id v40 = [v39 v25[161]];
          uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v43 = v42;

          if (v22[2])
          {
            uint64_t v50 = sub_100021098(v41, v43, v44, v45, v46, v47, v48, v49, v115, v116, v117, v118, v119, v120, (uint64_t)v121, v122, v123, v124, v125,
                    v126,
                    v127,
                    v128,
                    (uint64_t)v129,
                    (uint64_t)v130,
                    (uint64_t)v131,
                    v132);
            if (v51)
            {
              id v52 = *(id *)(v22[7] + 8 * v50);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              id v53 = [v52 v11[41]];
              uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v56 = v55;

              uint64_t v57 = v135[2];
              if (v57)
              {
                if (v135[4] == v54 && v135[5] == v56)
                {
                  swift_bridgeObjectRelease();
                  uint64_t v22 = v136;
LABEL_82:
                  uint64_t v25 = &selRef_initWithConnection_options_error_;
                  goto LABEL_83;
                }
                uint64_t v25 = &selRef_initWithConnection_options_error_;
                if (sub_1000A67C8())
                {
LABEL_38:
                  swift_bridgeObjectRelease();
                  uint64_t v22 = v136;
LABEL_83:
                  swift_bridgeObjectRelease();

                  swift_bridgeObjectRelease();
                  goto LABEL_86;
                }
                if (v57 != 1)
                {
                  BOOL v101 = v135[6] == v54 && v135[7] == v56;
                  if (v101 || (sub_1000A67C8() & 1) != 0) {
                    goto LABEL_38;
                  }
                  if (v57 != 2)
                  {
                    uint64_t v102 = v135 + 9;
                    uint64_t v103 = 2;
                    while (1)
                    {
                      uint64_t v104 = v103 + 1;
                      if (__OFADD__(v103, 1)) {
                        break;
                      }
                      BOOL v105 = *(v102 - 1) == v54 && *v102 == v56;
                      if (v105 || (sub_1000A67C8() & 1) != 0)
                      {
                        swift_bridgeObjectRelease();
                        Swift::Int v11 = &selRef_initWithConnection_options_error_;
                        uint64_t v22 = v136;
                        goto LABEL_82;
                      }
                      v102 += 2;
                      ++v103;
                      if (v104 == v57)
                      {
                        swift_bridgeObjectRelease();
                        Swift::Int v11 = &selRef_initWithConnection_options_error_;
                        goto LABEL_74;
                      }
                    }
LABEL_121:
                    __break(1u);
LABEL_122:
                    swift_bridgeObjectRetain();
                    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
                    swift_bridgeObjectRelease();
                    continue;
                  }
                }
                swift_bridgeObjectRelease();
              }
              else
              {
                swift_bridgeObjectRelease();
LABEL_74:
                uint64_t v25 = &selRef_initWithConnection_options_error_;
              }
              swift_bridgeObjectRelease();
              id v89 = [v52 v11[41]];
              uint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v92 = v91;

              if (swift_isUniquelyReferenced_nonNull_native())
              {
                unint64_t v93 = v135;
              }
              else
              {
                sub_100094140();
                sub_10001E7C0();
                unint64_t v93 = v113;
              }
              unint64_t v95 = v93[2];
              unint64_t v94 = v93[3];
              if (v95 >= v94 >> 1)
              {
                sub_100035E4C(v94);
                sub_10001E7C0();
                unint64_t v93 = v114;
              }
              v93[2] = v95 + 1;
              v135 = v93;
              uint64_t v96 = &v93[2 * v95];
              v96[4] = v90;
              v96[5] = v92;
              if ([v147 dynamicOptionsSupport])
              {

                swift_bridgeObjectRelease();
              }
              else
              {
                id v97 = [v52 cases];
                sub_10000D9D4(0, &qword_10017E130);
                unint64_t v145 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

                id v98 = [v147 typeSpecificMetadata];
                type metadata accessor for LNValueTypeSpecificMetadataKey(0);
                sub_10004FC48();
                uint64_t v99 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

                id v100 = v121;
                sub_10001B7C0(v99, &v149);

                swift_bridgeObjectRelease();
                if (v150)
                {
                  sub_10000BF1C(&qword_10017DED8);
                  if (swift_dynamicCast()) {
                    unint64_t v145 = (unint64_t)sub_10004B214(v145, v148);
                  }
                }
                else
                {
                  sub_100014958((uint64_t)&v149);
                }
                id v106 = [v137 v11[41]];
                uint64_t v143 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v108 = v107;

                id v109 = [v52 v11[41]];
                uint64_t v110 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v112 = v111;

                sub_1000A5B64(v143, v108, v110, v112, v37, v38, v145, v132, a4, a8);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                sub_100054458();

                id v52 = (id)v8;
              }
              goto LABEL_72;
            }
          }

          swift_bridgeObjectRelease();
          uint64_t v33 = v147;
        }
        else
        {
        }
        id v59 = [v33 valueType];
        self;
        if (swift_dynamicCastObjCClass())
        {
          sub_10000D9D4(0, (unint64_t *)&qword_10017DD30);
          id v60 = [self BOOLValueType];
          char v61 = static NSObject.== infix(_:_:)();

          if (v61)
          {
            id v62 = [v147 typeSpecificMetadata];
            type metadata accessor for LNValueTypeSpecificMetadataKey(0);
            sub_10004FC48();
            uint64_t v63 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

            id v64 = v131;
            sub_10001B7C0(v63, &v149);

            if (v150)
            {
              sub_10000D9D4(0, (unint64_t *)&qword_10017EDC0);
              if (sub_1000A6804()) {
                id v52 = v148;
              }
              else {
                id v52 = 0;
              }
            }
            else
            {
              sub_100014958((uint64_t)&v149);
              id v52 = 0;
            }
            id v83 = v130;
            sub_10001B7C0(v63, &v149);

            swift_bridgeObjectRelease();
            if (v150)
            {
              sub_10000D9D4(0, (unint64_t *)&qword_10017EDC0);
              if (sub_1000A6804()) {
                uint64_t v84 = v148;
              }
              else {
                uint64_t v84 = 0;
              }
            }
            else
            {
              sub_100014958((uint64_t)&v149);
              uint64_t v84 = 0;
            }
            id v85 = [v137 v11[41]];
            uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v88 = v87;

            sub_1000A602C(v86, v88, v37, v38, v52, v84, v132, a4, a8);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_100054458();

LABEL_72:
            uint64_t v22 = v136;
            goto LABEL_86;
          }

          swift_bridgeObjectRelease();
          uint64_t v33 = v147;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        id v52 = [v33 valueType];
        self;
        if (swift_dynamicCastObjCClass())
        {
          uint64_t v144 = sub_10004FB6C(v33);
          if (v65)
          {
            uint64_t v66 = v65;
            id v67 = v52;
            char v68 = sub_100095460();

            if (v68)
            {
              id v69 = [v137 v11[41]];
              uint64_t v142 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v71 = v70;

              uint64_t v72 = *(void *)(v128 + 16);
              if (v72)
              {
                uint64_t v126 = (uint64_t)v67;
                swift_bridgeObjectRetain();
                uint64_t v73 = (uint64_t *)v122;
                uint64_t v74 = _swiftEmptyArrayStorage;
                do
                {
                  uint64_t v76 = *(v73 - 2);
                  uint64_t v75 = *(v73 - 1);
                  uint64_t v77 = *v73;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  {
                    sub_100094140();
                    sub_10001ED78();
                    uint64_t v74 = v81;
                  }
                  unint64_t v79 = v74[2];
                  unint64_t v78 = v74[3];
                  if (v79 >= v78 >> 1)
                  {
                    sub_100035E4C(v78);
                    sub_10001ED78();
                    uint64_t v74 = v82;
                  }
                  _OWORD v74[2] = v79 + 1;
                  uint64_t v80 = &v74[8 * v79];
                  v80[4] = v142;
                  v80[5] = v71;
                  v80[6] = v144;
                  v80[7] = v66;
                  v80[8] = v76;
                  v80[9] = v75;
                  v80[10] = v77;
                  v73 += 8;
                  *((_WORD *)v80 + 44) = 0;
                  --v72;
                  id v52 = v147;
                }
                while (v72);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v25 = &selRef_initWithConnection_options_error_;
                id v67 = (id)v126;
              }
              else
              {
                swift_bridgeObjectRelease();
                id v52 = v147;
              }
              swift_bridgeObjectRelease();
              sub_100054458();

              Swift::Int v11 = &selRef_initWithConnection_options_error_;
              uint64_t v22 = v136;
              goto LABEL_86;
            }

            swift_bridgeObjectRelease();
          }
          else
          {
          }
          id v52 = v33;
        }
        else
        {
        }
LABEL_86:
        uint64_t v8 = v140;
        goto LABEL_87;
      }
    }
    else
    {
      uint64_t v8 = *(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      uint64_t v23 = v8;
      if (v8) {
        goto LABEL_14;
      }
    }
    break;
  }
LABEL_127:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void *sub_1000A5B64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  uint64_t v10 = a7;
  if (a7 >> 62) {
    goto LABEL_49;
  }
  uint64_t v11 = *(void *)((a7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v11; uint64_t v11 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v12 = 0;
    unint64_t v13 = v10 & 0xC000000000000001;
    uint64_t v57 = v10 + 32;
    uint64_t v58 = v10 & 0xFFFFFFFFFFFFFF8;
    id v14 = _swiftEmptyArrayStorage;
    char v68 = _swiftEmptyArrayStorage;
    unint64_t v59 = v10 & 0xC000000000000001;
    uint64_t v60 = v11;
    while (1)
    {
      if (v13)
      {
        id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v12 >= *(void *)(v58 + 16)) {
          goto LABEL_47;
        }
        id v15 = *(id *)(v57 + 8 * v12);
      }
      uint64_t v16 = v15;
      if (__OFADD__(v12++, 1))
      {
        __break(1u);
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
      swift_bridgeObjectRetain();
      id v18 = [v16 identifier];
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v20;

      uint64_t v22 = v14[2];
      if (v22)
      {
        BOOL v23 = v14[4] == v19 && v14[5] == v21;
        if (v23 || (sub_1000A67C8() & 1) != 0)
        {
LABEL_31:
          swift_bridgeObjectRelease();
LABEL_32:
          swift_bridgeObjectRelease();
          goto LABEL_33;
        }
        if (v22 != 1)
        {
          BOOL v46 = v14[6] == v19 && v14[7] == v21;
          if (v46 || (sub_1000A67C8() & 1) != 0) {
            goto LABEL_31;
          }
          if (v22 != 2) {
            break;
          }
        }
      }
      swift_bridgeObjectRelease();
LABEL_17:
      swift_bridgeObjectRelease();
      id v24 = [v16 identifier];
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v27 = v26;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100094140();
        sub_10001E7C0();
        id v14 = v50;
      }
      unint64_t v29 = v14[2];
      unint64_t v28 = v14[3];
      if (v29 >= v28 >> 1)
      {
        sub_100035E4C(v28);
        sub_10001E7C0();
        id v14 = v51;
      }
      v14[2] = v29 + 1;
      unint64_t v30 = &v14[2 * v29];
      v30[4] = v25;
      v30[5] = v27;
      sub_10004FBD0([v16 displayRepresentation]);
      sub_10000BF1C(&qword_10017D0D0);
      unint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10013EF30;
      id v32 = [v16 displayRepresentation];
      id v33 = [v32 title];

      *(void *)(inited + 32) = v33;
      specialized Array._endMutation()();
      sub_100054500();
      swift_bridgeObjectRetain();
      unint64_t v34 = sub_1000A4A08(inited, a10, a8, a9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v35._uint64_t countAndFlagsBits = 46;
      v35._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v35);
      id v36 = [v16 identifier];
      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v39 = v38;

      v40._uint64_t countAndFlagsBits = v37;
      v40._unint64_t object = v39;
      String.append(_:)(v40);
      swift_bridgeObjectRelease();
      uint64_t v41 = v68;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100094140();
        sub_10001ED78();
        uint64_t v41 = v52;
      }
      uint64_t v42 = v41;
      unint64_t v43 = v41[2];
      char v68 = v42;
      unint64_t v44 = v42[3];
      if (v43 >= v44 >> 1)
      {
        sub_100035E4C(v44);
        sub_10001ED78();
        char v68 = v53;
      }
      v68[2] = v43 + 1;
      uint64_t v45 = &v68[8 * v43];
      uint64_t v11 = v60;
      v45[4] = a1;
      v45[5] = a2;
      v45[6] = a5;
      v45[7] = a6;
      v45[8] = a3;
      v45[9] = a4;
      v45[10] = v34;
      *((_WORD *)v45 + 44) = 0;
      unint64_t v13 = v59;
LABEL_33:

      if (v12 == v11)
      {
        swift_bridgeObjectRelease();
        uint64_t v54 = v68;
        goto LABEL_51;
      }
    }
    uint64_t v56 = v10;
    uint64_t v47 = v14 + 9;
    uint64_t v10 = 2;
    while (1)
    {
      uint64_t v48 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        break;
      }
      BOOL v49 = *(v47 - 1) == v19 && *v47 == v21;
      if (v49 || (sub_1000A67C8() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v10 = v56;
        unint64_t v13 = v59;
        uint64_t v11 = v60;
        goto LABEL_32;
      }
      v47 += 2;
      ++v10;
      if (v48 == v22)
      {
        swift_bridgeObjectRelease();
        uint64_t v10 = v56;
        goto LABEL_17;
      }
    }
LABEL_48:
    __break(1u);
LABEL_49:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  uint64_t v54 = _swiftEmptyArrayStorage;
LABEL_51:
  swift_bridgeObjectRelease();
  return v54;
}

uint64_t sub_1000A602C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v82 = a3;
  uint64_t v83 = a7;
  uint64_t v81 = a1;
  uint64_t v87 = (uint64_t *)a9;
  uint64_t v14 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for URL();
  sub_1000A67E4();
  id v17 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  id v18 = sub_1000A64B4(0x64656C62616E65, 0xE700000000000000, 0x64656C62616E65, 0xE700000000000000, 0, 0, (uint64_t)v16);
  sub_1000A67E4();
  id v19 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  id v20 = sub_1000A64B4(0x64656C6261736964, 0xE800000000000000, 0x64656C6261736964, 0xE800000000000000, 0, 0, (uint64_t)v16);
  if (a5) {
    id v21 = a5;
  }
  else {
    id v21 = v18;
  }
  id v84 = a6;
  if (!a6) {
    id v84 = v20;
  }
  id v78 = v20;
  id v80 = v18;
  sub_10000BF1C((uint64_t *)&unk_10017E690);
  uint64_t v86 = swift_allocObject();
  long long v79 = xmmword_10013EF20;
  *(_OWORD *)(v86 + 16) = xmmword_10013EF20;
  id v22 = a5;
  id v23 = a6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v85 = v21;
  id v24 = [v21 key];
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v27 = v26;

  uint64_t v34 = *v87;
  uint64_t v35 = *(void *)(*v87 + 16);
  uint64_t v77 = a8;
  if (v35
    && (uint64_t v36 = sub_100021098(v25, v27, v28, v29, v30, v31, v32, v33, v77, (uint64_t)v78, v79, *((uint64_t *)&v79 + 1), (uint64_t)v80, v81, v82, v83, (uint64_t)v84, (uint64_t)v85, v86,
                (uint64_t)v87,
                v88,
                v89,
                v90,
                v91,
                v92,
                v93),
        (v37 & 1) != 0))
  {
    uint64_t v38 = (uint64_t *)(*(void *)(v34 + 56) + 16 * v36);
    uint64_t v40 = *v38;
    uint64_t v39 = v38[1];
    uint64_t v41 = v86;
    *(void *)(v86 + 32) = v40;
    *(void *)(v41 + 40) = v39;
    swift_bridgeObjectRetain();
  }
  else
  {
    NSString v42 = String._bridgeToObjectiveC()();
    uint64_t v43 = a2;
    uint64_t v44 = a4;
    id v45 = [v85 localizedStringForLocaleIdentifier:v42];

    uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v48 = v47;

    a4 = v44;
    a2 = v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10004F6C0();
    swift_bridgeObjectRelease();
    uint64_t v49 = v86;
    *(void *)(v86 + 32) = v46;
    *(void *)(v49 + 40) = v48;
  }
  swift_bridgeObjectRelease();
  uint64_t v50 = swift_allocObject();
  *(_OWORD *)(v50 + 16) = v79;
  *(void *)&long long v79 = a2;
  swift_bridgeObjectRetain();
  uint64_t v51 = a4;
  swift_bridgeObjectRetain();
  id v52 = v84;
  id v53 = [v84 key];
  uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v56 = v55;

  uint64_t v63 = *v87;
  if (*(void *)(*v87 + 16)
    && (uint64_t v64 = sub_100021098(v54, v56, v57, v58, v59, v60, v61, v62, v77, (uint64_t)v78, v79, *((uint64_t *)&v79 + 1), (uint64_t)v80, v81, v82, v83, (uint64_t)v84, (uint64_t)v85, v86,
                (uint64_t)v87,
                v88,
                v89,
                v90,
                v91,
                v92,
                v93),
        (v65 & 1) != 0))
  {
    uint64_t v66 = (uint64_t *)(*(void *)(v63 + 56) + 16 * v64);
    uint64_t v68 = *v66;
    uint64_t v67 = v66[1];
    swift_bridgeObjectRetain();
  }
  else
  {
    NSString v69 = String._bridgeToObjectiveC()();
    id v70 = [v52 localizedStringForLocaleIdentifier:v69];

    uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v67 = v71;

    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10004F6C0();
    swift_bridgeObjectRelease();
  }
  *(void *)(v50 + 32) = v68;
  *(void *)(v50 + 40) = v67;
  swift_bridgeObjectRelease();
  sub_10000BF1C(&qword_10017D4B0);
  uint64_t v72 = swift_allocObject();
  *(_OWORD *)(v72 + 16) = xmmword_10013F1D0;
  uint64_t v74 = v81;
  uint64_t v73 = v82;
  uint64_t v75 = v79;
  *(void *)(v72 + 32) = v81;
  *(void *)(v72 + 40) = v75;
  *(void *)(v72 + 48) = v73;
  *(void *)(v72 + 56) = v51;
  *(void *)(v72 + 64) = 1163219540;
  *(void *)(v72 + 72) = 0xE400000000000000;
  *(void *)(v72 + 80) = v86;
  *(_WORD *)(v72 + 88) = 0;
  *(void *)(v72 + 96) = v74;
  *(void *)(v72 + 104) = v75;
  *(void *)(v72 + 112) = v73;
  *(void *)(v72 + 120) = v51;
  *(void *)(v72 + 128) = 0x45534C4146;
  *(void *)(v72 + 136) = 0xE500000000000000;
  *(void *)(v72 + 144) = v50;
  *(_WORD *)(v72 + 152) = 0;

  return v72;
}

id sub_1000A64B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a4)
  {
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    if (a6)
    {
LABEL_3:
      NSString v14 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    NSString v13 = 0;
    if (a6) {
      goto LABEL_3;
    }
  }
  NSString v14 = 0;
LABEL_6:
  uint64_t v15 = type metadata accessor for URL();
  id v17 = 0;
  if (sub_10000D5D8(a7, 1, v15) != 1)
  {
    URL._bridgeToObjectiveC()(v16);
    id v17 = v18;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(a7, v15);
  }
  id v19 = [v8 initWithKey:v12 defaultValue:v13 table:v14 bundleURL:v17];

  return v19;
}

#error "1000A6668: call analysis failed (funcsize=116)"

uint64_t sub_1000A67C8()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_1000A67E4()
{
  return sub_10000D5B0(v0, 1, 1, v1);
}

uint64_t sub_1000A6804()
{
  return swift_dynamicCast();
}

uint64_t sub_1000A6824(uint64_t a1, uint64_t a2)
{
  if (qword_10017C428 != -1) {
    swift_once();
  }
  memcpy(__dst, &unk_100181DA0, sizeof(__dst));
  sub_10002A390(__dst);
  if (qword_10017C430 != -1) {
    swift_once();
  }
  sub_10002A9C0((uint64_t)&qword_100181E48);
  __src[0] = a1;
  __src[1] = a2;
  uint64_t v4 = == infix<A>(_:_:)();
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  memcpy(v13, __dst, sizeof(v13));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.filter(_:)(v4, v6, v8, (uint64_t)__src);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  sub_10002A500(__dst);
  memcpy(v16, __src, sizeof(v16));
  memcpy(__src, v16, sizeof(__src));
  AppIntents_SQLite::Delete v17 = QueryType.delete()();
  uint64_t countAndFlagsBits = v17.template._countAndFlagsBits;
  unint64_t object = v17.template._object;
  rawValue = v17.bindings._rawValue;
  sub_10002A500(v16);
  v18.template._uint64_t countAndFlagsBits = countAndFlagsBits;
  v18.template._unint64_t object = object;
  v18.bindings._rawValue = rawValue;
  Connection.run(_:)(v18);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_1000A6A14(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  id v7 = [a1 action];
  id v8 = [v7 identifier];

  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  id v12 = [a1 action];
  id v13 = [v12 parameters];

  sub_10000D9D4(0, (unint64_t *)&unk_10017FAC0);
  static Array._unconditionallyBridgeFromObjectiveC(_:)();

  NSString v14 = sub_1000A6F80();
  if (v4)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v16 = v14;
    uint64_t v17 = v15;
    uint64_t v25 = v11;
    swift_bridgeObjectRelease();
    uint64_t v23 = sub_1000E8A5C(a1);
    uint64_t v24 = v18;
    id v19 = [a1 context];
    id v20 = sub_1000A7090();
    uint64_t v22 = v21;

    *a4 = a2;
    a4[1] = a3;
    a4[2] = v9;
    a4[3] = v25;
    a4[4] = v16;
    a4[5] = v17;
    a4[6] = v23;
    a4[7] = v24;
    a4[8] = v20;
    a4[9] = v22;
  }
}

uint64_t sub_1000A6BFC(long long *a1)
{
  if (qword_10017C428 != -1) {
    swift_once();
  }
  memcpy(__dst, &unk_100181DA0, sizeof(__dst));
  memcpy(__src, &unk_100181DA0, sizeof(__src));
  sub_10002A390(__dst);
  if (qword_10017C430 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10002A9C0((uint64_t)&qword_100181E48);
  long long v23 = *a1;
  <- infix<A>(_:_:)(v2, v3, v4, (uint64_t)&v23, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  sub_10000BF1C(&qword_10017E940);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10013F9D0;
  if (qword_10017C438 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_10002A9C0((uint64_t)&qword_100181E60);
  long long v23 = a1[1];
  <- infix<A>(_:_:)(v5, v6, v7, (uint64_t)&v23, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  if (qword_10017C440 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_10002A9C0((uint64_t)&qword_100181E78);
  long long v23 = a1[2];
  <- infix<A>(_:_:)(v8, v9, v10, (uint64_t)&v23, (uint64_t)&type metadata for Data, (uint64_t)&protocol witness table for Data);
  if (qword_10017C448 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_100181E90;
  uint64_t v12 = *(void *)algn_100181E98;
  uint64_t v13 = qword_100181EA0;
  sub_1000A87C4((uint64_t)(a1 + 3), (uint64_t)v26);
  sub_1000A87C4((uint64_t)v26, (uint64_t)&v23);
  sub_100027B80((uint64_t)v26);
  <- infix<A>(_:_:)(v11, v12, v13, (uint64_t)&v23, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  sub_100033814((uint64_t)v26);
  if (qword_10017C450 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_10002A9C0((uint64_t)&qword_100181EA8);
  long long v23 = a1[4];
  <- infix<A>(_:_:)(v14, v15, v16, (uint64_t)&v23, (uint64_t)&type metadata for Data, (uint64_t)&protocol witness table for Data);
  uint64_t v17 = QueryType.insert(_:_:)((uint64_t)v24);
  id v19 = v18;
  uint64_t v21 = v20;
  swift_setDeallocating();
  sub_10006F150();
  sub_10002A66C((uint64_t)v24);
  memcpy(v28, __src, sizeof(v28));
  sub_10002A500(v28);
  v29.template._uint64_t countAndFlagsBits = v17;
  v29.template._unint64_t object = v19;
  v29.bindings._rawValue = v21;
  Connection.run(_:)(v29);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *sub_1000A6F80()
{
  uint64_t v0 = self;
  sub_10000D9D4(0, (unint64_t *)&unk_10017FAC0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v6 = 0;
  id v2 = [v0 archivedDataWithRootObject:isa requiringSecureCoding:1 error:&v6];

  id v3 = v6;
  if (v2)
  {
    uint64_t v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v4 = v3;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v4;
}

void *sub_1000A7090()
{
  id v5 = 0;
  id v1 = [self archivedDataWithRootObject:v0 requiringSecureCoding:1 error:&v5];
  id v2 = v5;
  if (v1)
  {
    id v3 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    id v3 = v2;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v3;
}

void *sub_1000A7168()
{
  Table.init(_:database:)(__src, 0x746E6176656C6572, 0xEF73746E65746E49, 0, 0);
  return memcpy(&unk_100181DA0, __src, 0xA8uLL);
}

uint64_t sub_1000A71C8(uint64_t a1)
{
  return sub_1000A7200(a1, (uint64_t)&qword_100181E48, 0x8000000100143090);
}

uint64_t sub_1000A71E4(uint64_t a1)
{
  return sub_1000A7200(a1, (uint64_t)&qword_100181E60, 0x80000001001448E0);
}

uint64_t sub_1000A7200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_10000BF1C((uint64_t *)&unk_10017E920);
  uint64_t v5 = sub_10002A7B8((unint64_t *)&qword_10017D650, (uint64_t *)&unk_10017E920);
  return ExpressionType.init(_:)(0xD000000000000010, a3, v4, v5);
}

uint64_t sub_1000A7270()
{
  uint64_t v0 = sub_10000BF1C((uint64_t *)&unk_10017E930);
  uint64_t v1 = sub_10002A7B8(&qword_10017D658, (uint64_t *)&unk_10017E930);
  return ExpressionType.init(_:)(0xD000000000000011, 0x8000000100144C50, v0, v1);
}

uint64_t sub_1000A72DC()
{
  uint64_t v0 = sub_10000BF1C(&qword_10017D678);
  uint64_t v1 = sub_10002A7B8(&qword_10017D680, &qword_10017D678);
  return ExpressionType.init(_:)(0x694B746567646977, 0xEA0000000000646ELL, v0, v1);
}

uint64_t sub_1000A7348()
{
  uint64_t v0 = sub_10000BF1C((uint64_t *)&unk_10017E930);
  uint64_t v1 = sub_10002A7B8(&qword_10017D658, (uint64_t *)&unk_10017E930);
  return ExpressionType.init(_:)(0x436465646F636E65, 0xEE00747865746E6FLL, v0, v1);
}

uint64_t sub_1000A73BC@<X0>(uint64_t a1@<X8>)
{
  if (qword_10017C428 != -1) {
    swift_once();
  }
  memcpy(__dst, &unk_100181DA0, sizeof(__dst));
  sub_10002A390(__dst);
  if (qword_10017C2B8 != -1) {
    swift_once();
  }
  memcpy(__src, &unk_1001819B0, sizeof(__src));
  sub_10002A390(__src);
  if (qword_10017C520 != -1) {
    swift_once();
  }
  memcpy(v207, &unk_1001821F8, sizeof(v207));
  sub_1000A8848(v208, v1, v2, v3, v4, v5, v6, v7, v163, v173, a1, v198[0], v198[1], v198[2], v198[3], v198[4], v198[5], v198[6], v198[7],
    v198[8],
    v198[9],
    v198[10],
    v198[11],
    v198[12],
    v198[13],
    v198[14],
    v198[15],
    v198[16],
    v198[17],
    v198[18],
    v198[19],
    v198[20],
    v199,
    v200,
    v201,
    v202,
    (uint64_t)v203,
    v204[0],
    v204[1],
    v204[2],
    v204[3],
    v204[4],
    v204[5],
    v204[6],
    v204[7],
    v204[8],
    v204[9],
    v204[10],
    v204[11],
    v204[12],
    v204[13],
    v204[14],
    v204[15],
    v204[16],
    v204[17],
    v204[18],
    v204[19],
    v204[20],
    __dst[0]);
  int v8 = sub_10002A390(v207);
  if (qword_10017C430 != -1) {
    int v8 = swift_once();
  }
  sub_1000A882C(v8, v9, v10, v11, v12, v13, v14, v15, v164, v174, v186, v198[0], v198[1], v198[2], v198[3], v198[4], v198[5], v198[6], v198[7],
    v198[8],
    v198[9],
    v198[10],
    v198[11],
    v198[12],
    v198[13],
    v198[14],
    v198[15],
    v198[16],
    v198[17],
    v198[18],
    v198[19],
    v198[20],
    v199,
    v200,
    v201,
    v202,
    (uint64_t)v203,
    v204[0],
    v204[1],
    v204[2],
    v204[3],
    v204[4],
    v204[5],
    v204[6],
    v204[7],
    v204[8],
    v204[9],
    v204[10],
    v204[11],
    v204[12],
    v204[13],
    v204[14],
    v204[15],
    v204[16],
    v204[17],
    v204[18],
    v204[19],
    v204[20],
    __dst[0]);
  sub_10002A390(__dst);
  uint64_t v16 = sub_1000A889C();
  uint64_t v19 = QueryType.namespace<A>(_:)(v16, v17, v18);
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  sub_10002A500(__dst);
  uint64_t v24 = sub_10000BF1C((uint64_t *)&unk_10017E920);
  v204[3] = v24;
  v204[4] = (uint64_t)&protocol witness table for Expression<A>;
  v204[0] = v19;
  v204[1] = v21;
  v204[2] = v23;
  sub_10000BF1C(&qword_10017D698);
  uint64_t v25 = swift_allocObject();
  uint64_t v33 = (void *)v25;
  *(_OWORD *)(v25 + 16) = xmmword_100140380;
  if (qword_10017C438 != -1) {
    LODWORD(v25) = swift_once();
  }
  sub_1000A882C(v25, v26, v27, v28, v29, v30, v31, v32, v165, v175, v187, v198[0], v198[1], v198[2], v198[3], v198[4], v198[5], v198[6], v198[7],
    v198[8],
    v198[9],
    v198[10],
    v198[11],
    v198[12],
    v198[13],
    v198[14],
    v198[15],
    v198[16],
    v198[17],
    v198[18],
    v198[19],
    v198[20],
    v199,
    v200,
    v201,
    v202,
    (uint64_t)v203,
    v204[0],
    v204[1],
    v204[2],
    v204[3],
    v204[4],
    v204[5],
    v204[6],
    v204[7],
    v204[8],
    v204[9],
    v204[10],
    v204[11],
    v204[12],
    v204[13],
    v204[14],
    v204[15],
    v204[16],
    v204[17],
    v204[18],
    v204[19],
    v204[20],
    __dst[0]);
  sub_10002A390(__dst);
  uint64_t v34 = sub_1000A88CC();
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  int v39 = sub_10002A500(__dst);
  v33[7] = v24;
  v33[8] = &protocol witness table for Expression<A>;
  v33[4] = v34;
  v33[5] = v36;
  v33[6] = v38;
  if (qword_10017C440 != -1) {
    int v39 = swift_once();
  }
  uint64_t v47 = qword_100181E78;
  uint64_t v48 = qword_100181E88;
  sub_1000A882C(v39, v40, v41, v42, v43, v44, v45, v46, v166, v176, v188, v198[0], v198[1], v198[2], v198[3], v198[4], v198[5], v198[6], v198[7],
    v198[8],
    v198[9],
    v198[10],
    v198[11],
    v198[12],
    v198[13],
    v198[14],
    v198[15],
    v198[16],
    v198[17],
    v198[18],
    v198[19],
    v198[20],
    v199,
    v200,
    v201,
    v202,
    (uint64_t)v203,
    v204[0],
    v204[1],
    v204[2],
    v204[3],
    v204[4],
    v204[5],
    v204[6],
    v204[7],
    v204[8],
    v204[9],
    v204[10],
    v204[11],
    v204[12],
    v204[13],
    v204[14],
    v204[15],
    v204[16],
    v204[17],
    v204[18],
    v204[19],
    v204[20],
    __dst[0]);
  sub_10002A390(__dst);
  uint64_t v49 = sub_1000A88CC();
  sub_1000A8860(v49, v50, v51, v52, v53, v54, v55, v56, v167, v177, v189, v198[0], v198[1], v198[2], v198[3], v198[4], v198[5], v198[6], v198[7],
    v198[8],
    v198[9],
    v198[10],
    v198[11],
    v198[12],
    v198[13],
    v198[14],
    v198[15],
    v198[16],
    v198[17],
    v198[18],
    v198[19],
    v198[20],
    v199,
    v200,
    v201,
    v202,
    (uint64_t)v203,
    v204[0],
    v204[1],
    v204[2],
    v204[3],
    v204[4],
    v204[5],
    v204[6],
    v204[7],
    v204[8],
    v204[9],
    v204[10],
    v204[11],
    v204[12],
    v204[13],
    v204[14],
    v204[15],
    v204[16],
    v204[17],
    v204[18],
    v204[19],
    v204[20],
    __dst[0]);
  uint64_t v57 = sub_10000BF1C((uint64_t *)&unk_10017E930);
  uint64_t v65 = v57;
  v33[12] = v57;
  v33[13] = &protocol witness table for Expression<A>;
  v33[9] = v47;
  v33[10] = v36;
  v33[11] = v48;
  if (qword_10017C448 != -1) {
    LODWORD(v57) = swift_once();
  }
  uint64_t v66 = qword_100181E90;
  uint64_t v67 = *(void *)algn_100181E98;
  sub_1000A882C(v57, v58, v59, v60, v61, v62, v63, v64, v168, v178, v190, v198[0], v198[1], v198[2], v198[3], v198[4], v198[5], v198[6], v198[7],
    v198[8],
    v198[9],
    v198[10],
    v198[11],
    v198[12],
    v198[13],
    v198[14],
    v198[15],
    v198[16],
    v198[17],
    v198[18],
    v198[19],
    v198[20],
    v199,
    v200,
    v201,
    v202,
    (uint64_t)v203,
    v204[0],
    v204[1],
    v204[2],
    v204[3],
    v204[4],
    v204[5],
    v204[6],
    v204[7],
    v204[8],
    v204[9],
    v204[10],
    v204[11],
    v204[12],
    v204[13],
    v204[14],
    v204[15],
    v204[16],
    v204[17],
    v204[18],
    v204[19],
    v204[20],
    __dst[0]);
  sub_10002A390(__dst);
  sub_10000BF1C((uint64_t *)&unk_10017D100);
  uint64_t v68 = sub_1000A88AC();
  sub_1000A8860(v68, v69, v70, v71, v72, v73, v74, v75, v169, v179, v191, v198[0], v198[1], v198[2], v198[3], v198[4], v198[5], v198[6], v198[7],
    v198[8],
    v198[9],
    v198[10],
    v198[11],
    v198[12],
    v198[13],
    v198[14],
    v198[15],
    v198[16],
    v198[17],
    v198[18],
    v198[19],
    v198[20],
    v199,
    v200,
    v201,
    v202,
    (uint64_t)v203,
    v204[0],
    v204[1],
    v204[2],
    v204[3],
    v204[4],
    v204[5],
    v204[6],
    v204[7],
    v204[8],
    v204[9],
    v204[10],
    v204[11],
    v204[12],
    v204[13],
    v204[14],
    v204[15],
    v204[16],
    v204[17],
    v204[18],
    v204[19],
    v204[20],
    __dst[0]);
  uint64_t v76 = sub_10000BF1C(&qword_10017D678);
  v33[17] = v76;
  v33[18] = &protocol witness table for Expression<A>;
  v33[14] = v66;
  v33[15] = v36;
  v33[16] = v67;
  if (qword_10017C450 != -1) {
    LODWORD(v76) = swift_once();
  }
  uint64_t v84 = qword_100181EA8;
  uint64_t v85 = unk_100181EB0;
  sub_1000A882C(v76, v77, v78, v79, v80, v81, v82, v83, v170, v180, v192, v198[0], v198[1], v198[2], v198[3], v198[4], v198[5], v198[6], v198[7],
    v198[8],
    v198[9],
    v198[10],
    v198[11],
    v198[12],
    v198[13],
    v198[14],
    v198[15],
    v198[16],
    v198[17],
    v198[18],
    v198[19],
    v198[20],
    v199,
    v200,
    v201,
    v202,
    (uint64_t)v203,
    v204[0],
    v204[1],
    v204[2],
    v204[3],
    v204[4],
    v204[5],
    v204[6],
    v204[7],
    v204[8],
    v204[9],
    v204[10],
    v204[11],
    v204[12],
    v204[13],
    v204[14],
    v204[15],
    v204[16],
    v204[17],
    v204[18],
    v204[19],
    v204[20],
    __dst[0]);
  sub_10002A390(__dst);
  uint64_t v86 = sub_1000A88AC();
  sub_1000A8860(v86, v87, v88, v89, v90, v91, v92, v93, v171, v181, v193, v198[0], v198[1], v198[2], v198[3], v198[4], v198[5], v198[6], v198[7],
    v198[8],
    v198[9],
    v198[10],
    v198[11],
    v198[12],
    v198[13],
    v198[14],
    v198[15],
    v198[16],
    v198[17],
    v198[18],
    v198[19],
    v198[20],
    v199,
    v200,
    v201,
    v202,
    (uint64_t)v203,
    v204[0],
    v204[1],
    v204[2],
    v204[3],
    v204[4],
    v204[5],
    v204[6],
    v204[7],
    v204[8],
    v204[9],
    v204[10],
    v204[11],
    v204[12],
    v204[13],
    v204[14],
    v204[15],
    v204[16],
    v204[17],
    v204[18],
    v204[19],
    v204[20],
    __dst[0]);
  v33[22] = v65;
  v33[23] = &protocol witness table for Expression<A>;
  v33[19] = v84;
  v33[20] = v36;
  v33[21] = v85;
  if (qword_10017C2D0 != -1) {
    swift_once();
  }
  uint64_t v94 = qword_100181A88;
  uint64_t v95 = unk_100181A90;
  uint64_t v96 = qword_100181A98;
  memcpy(v209, __src, 0xA8uLL);
  sub_10002A390(__src);
  uint64_t v97 = QueryType.namespace<A>(_:)(v94, v95, v96);
  uint64_t v99 = v98;
  uint64_t v101 = v100;
  sub_10002A500(__src);
  v33[27] = v24;
  v33[28] = &protocol witness table for Expression<A>;
  v33[24] = v97;
  v33[25] = v99;
  v33[26] = v101;
  if (qword_10017C548 != -1) {
    swift_once();
  }
  uint64_t v102 = qword_1001822D0;
  uint64_t v103 = *(void *)algn_1001822D8;
  uint64_t v104 = qword_1001822E0;
  memcpy(v209, v207, 0xA8uLL);
  sub_10002A390(v207);
  uint64_t v105 = QueryType.namespace<A>(_:)(v102, v103, v104);
  uint64_t v107 = v106;
  uint64_t v109 = v108;
  sub_10002A500(v207);
  v33[32] = sub_10000BF1C(&qword_10017DED0);
  v33[33] = &protocol witness table for Expression<A>;
  v33[29] = v105;
  v33[30] = v107;
  v33[31] = v109;
  SchemaType.select(_:_:)((uint64_t)v204, (uint64_t)v33, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table);
  swift_setDeallocating();
  sub_10006F144();
  sub_10000E788((uint64_t)v204);
  memcpy(v208, v209, sizeof(v208));
  uint64_t v199 = swift_allocObject();
  memcpy((void *)(v199 + 16), __src, 0xA8uLL);
  sub_1000A8848(v204, v110, v111, v112, v113, v114, v115, v116, v172, v182, v194, v198[0], v198[1], v198[2], v198[3], v198[4], v198[5], v198[6], v198[7],
    v198[8],
    v198[9],
    v198[10],
    v198[11],
    v198[12],
    v198[13],
    v198[14],
    v198[15],
    v198[16],
    v198[17],
    v198[18],
    v198[19],
    v198[20],
    v199,
    v200,
    v201,
    (uint64_t)&type metadata for Table,
    (uint64_t)&protocol witness table for Table,
    v204[0],
    v204[1],
    v204[2],
    v204[3],
    v204[4],
    v204[5],
    v204[6],
    v204[7],
    v204[8],
    v204[9],
    v204[10],
    v204[11],
    v204[12],
    v204[13],
    v204[14],
    v204[15],
    v204[16],
    v204[17],
    v204[18],
    v204[19],
    v204[20],
    __dst[0]);
  sub_10002A390(__dst);
  sub_10002A390(__src);
  uint64_t v117 = sub_1000A889C();
  QueryType.namespace<A>(_:)(v117, v118, v119);
  sub_10002A500(__dst);
  if (qword_10017C2C0 != -1) {
    swift_once();
  }
  uint64_t v120 = qword_100181A58;
  uint64_t v121 = unk_100181A60;
  uint64_t v122 = qword_100181A68;
  memcpy(v204, __src, sizeof(v204));
  sub_10002A390(__src);
  QueryType.namespace<A>(_:)(v120, v121, v122);
  sub_10002A500(__src);
  uint64_t v183 = == infix<A>(_:_:)();
  uint64_t v124 = v123;
  uint64_t v126 = v125;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v127 = qword_100181E60;
  uint64_t v128 = *(void *)algn_100181E68;
  uint64_t v129 = qword_100181E70;
  sub_1000A8848(v204, v130, v131, v132, v133, v134, v135, v136, (uint64_t)&protocol witness table for String, v183, v195, v198[0], v198[1], v198[2], v198[3], v198[4], v198[5], v198[6], v198[7],
    v198[8],
    v198[9],
    v198[10],
    v198[11],
    v198[12],
    v198[13],
    v198[14],
    v198[15],
    v198[16],
    v198[17],
    v198[18],
    v198[19],
    v198[20],
    v199,
    v200,
    v201,
    v202,
    (uint64_t)v203,
    v204[0],
    v204[1],
    v204[2],
    v204[3],
    v204[4],
    v204[5],
    v204[6],
    v204[7],
    v204[8],
    v204[9],
    v204[10],
    v204[11],
    v204[12],
    v204[13],
    v204[14],
    v204[15],
    v204[16],
    v204[17],
    v204[18],
    v204[19],
    v204[20],
    __dst[0]);
  sub_10002A390(__dst);
  QueryType.namespace<A>(_:)(v127, v128, v129);
  sub_10002A500(__dst);
  if (qword_10017C2C8 != -1) {
    swift_once();
  }
  memcpy(v204, __src, sizeof(v204));
  QueryType.namespace<A>(_:)(qword_100181A70, *(uint64_t *)algn_100181A78, qword_100181A80);
  sub_10002A500(__src);
  uint64_t v137 = == infix<A>(_:_:)();
  uint64_t v139 = v138;
  uint64_t v141 = v140;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v142 = && infix(_:_:)(v184, v124, v126, v137, v139, v141);
  uint64_t v144 = v143;
  uint64_t v146 = v145;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  memcpy(v198, v208, sizeof(v198));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.join(_:_:on:)(1, &v199, v142, v144, v146);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  sub_10002A500(v208);
  sub_10000E788((uint64_t)&v199);
  memcpy(v209, v204, 0xA8uLL);
  uint64_t v202 = (uint64_t)&type metadata for Table;
  v203 = &protocol witness table for Table;
  uint64_t v199 = swift_allocObject();
  memcpy((void *)(v199 + 16), v207, 0xA8uLL);
  sub_1000A8848(v198, v147, v148, v149, v150, v151, v152, v153, (uint64_t)&protocol witness table for String, v184, v196, v198[0], v198[1], v198[2], v198[3], v198[4], v198[5], v198[6], v198[7],
    v198[8],
    v198[9],
    v198[10],
    v198[11],
    v198[12],
    v198[13],
    v198[14],
    v198[15],
    v198[16],
    v198[17],
    v198[18],
    v198[19],
    v198[20],
    v199,
    v200,
    v201,
    v202,
    (uint64_t)v203,
    v204[0],
    v204[1],
    v204[2],
    v204[3],
    v204[4],
    v204[5],
    v204[6],
    v204[7],
    v204[8],
    v204[9],
    v204[10],
    v204[11],
    v204[12],
    v204[13],
    v204[14],
    v204[15],
    v204[16],
    v204[17],
    v204[18],
    v204[19],
    v204[20],
    __dst[0]);
  sub_10002A390(v207);
  uint64_t v154 = sub_1000A889C();
  QueryType.namespace<A>(_:)(v154, v155, v156);
  sub_10002A500(__dst);
  if (qword_10017C528 != -1) {
    swift_once();
  }
  memcpy(v198, v207, sizeof(v198));
  QueryType.namespace<A>(_:)(qword_1001822A0, *(uint64_t *)algn_1001822A8, qword_1001822B0);
  sub_10002A500(v207);
  uint64_t v157 = == infix<A>(_:_:)();
  uint64_t v159 = v158;
  uint64_t v161 = v160;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v197[3] = (uint64_t)&type metadata for Table;
  v197[4] = (uint64_t)&protocol witness table for Table;
  uint64_t *v197 = swift_allocObject();
  memcpy(v198, v209, sizeof(v198));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.join(_:_:on:)(1, &v199, v157, v159, v161);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  sub_10002A500(v209);
  return sub_10000E788((uint64_t)&v199);
}

uint64_t sub_1000A7F1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v4 - 8);
  int v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10017C430 != -1) {
    swift_once();
  }
  sub_10002A9C0((uint64_t)&qword_100181E48);
  Row.get<A>(_:)();
  uint64_t v8 = v28;
  uint64_t v7 = v29;
  if (qword_10017C548 != -1) {
    swift_once();
  }
  sub_10002A9C0((uint64_t)&qword_1001822D0);
  sub_1000A8880();
  if (qword_10017C2D0 != -1) {
    swift_once();
  }
  sub_10002A9C0((uint64_t)&qword_100181A88);
  sub_1000A8880();
  sub_10000D9D4(0, &qword_10017E9F0);
  uint64_t v10 = type metadata accessor for URL();
  sub_10000D5B0((uint64_t)v6, 1, 1, v10);
  int v11 = (void *)static LNActionMetadata.fromJSON(_:bundleMetadataVersion:bundleURL:effectiveBundleIdentifier:)();
  sub_10002A75C((uint64_t)v6, (uint64_t *)&unk_10017D0C0);
  swift_bridgeObjectRelease();
  if (qword_10017C440 != -1) {
    swift_once();
  }
  sub_10002A9C0((uint64_t)&qword_100181E78);
  sub_1000A8880();
  uint64_t v12 = v28;
  unint64_t v13 = v29;
  sub_1000A8438();
  sub_10000DA10(v12, v13);
  objc_allocWithZone((Class)LNAction);
  swift_bridgeObjectRetain();
  id v14 = v11;
  id v15 = sub_1000A85C0(v14);
  if (qword_10017C448 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_10002A9C0((uint64_t)&qword_100181E90);
  Row.get<A>(_:)(v16, v17, v18, a1, a2, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, v19, v27[0], (void *)v27[1], v28, v29, v30, v31, v32, v33, v34, v35, v36,
    v37);
  uint64_t v21 = v28;
  uint64_t v20 = v29;
  if (qword_10017C450 != -1) {
    swift_once();
  }
  sub_10002A9C0((uint64_t)&qword_100181EA8);
  sub_1000A8880();
  uint64_t v22 = v28;
  unint64_t v23 = v29;
  sub_10000D9D4(0, &qword_10017DD90);
  sub_10000D9D4(0, qword_10017F388);
  uint64_t v24 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
  if (v24)
  {
    sub_10000DA10(v22, v23);
    id v25 = objc_allocWithZone((Class)LNRelevantIntent);
    id v26 = sub_1000A8670(v8, v7, v15, v21, v20, v24);

    return (uint64_t)v26;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000A8438()
{
  sub_10000D9D4(0, &qword_10017DD90);
  sub_10000BF1C(&qword_10017D660);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_10013F1D0;
  *(void *)(v1 + 32) = sub_10000D9D4(0, (unint64_t *)&qword_10017D668);
  *(void *)(v1 + 40) = sub_10000D9D4(0, (unint64_t *)&unk_10017FAC0);
  static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v0)
  {
    if (v4)
    {
      sub_10000BF1C(&qword_10017E428);
      if (swift_dynamicCast()) {
        return v5;
      }
    }
    else
    {
      sub_10002A75C((uint64_t)v3, &qword_10017D3A0);
    }
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

id sub_1000A85C0(void *a1)
{
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000D9D4(0, (unint64_t *)&unk_10017FAC0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v5 = [v1 initWithMetadata:a1 bundleIdentifier:v3 parameters:isa];

  return v5;
}

id sub_1000A8670(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v7 = v6;
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a5)
  {
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v12 = 0;
  }
  id v13 = [v7 initWithBundleIdentifier:v11 action:a3 widgetKind:v12 context:a6];

  return v13;
}

uint64_t sub_1000A8728()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0[12])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v0[14])
  {
    swift_bridgeObjectRelease();
    if (v0[16])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 184, 7);
}

uint64_t sub_1000A87C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000BF1C((uint64_t *)&unk_10017D100);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *sub_1000A882C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char __src)
{
  return memcpy((void *)(v59 - 256), &__src, 0xA8uLL);
}

void *sub_1000A8848(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char __src)
{
  return memcpy(a1, &__src, 0xA8uLL);
}

void *sub_1000A8860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  return sub_10002A500(&a59);
}

void sub_1000A8880()
{
  Row.get<A>(_:)();
}

uint64_t sub_1000A889C()
{
  return v0;
}

uint64_t sub_1000A88AC()
{
  return QueryType.namespace<A>(_:)(v0, v1, v2);
}

uint64_t sub_1000A88CC()
{
  return QueryType.namespace<A>(_:)(v0, v1, v2);
}

uint64_t sub_1000A88EC(uint64_t a1)
{
  return sub_1000A893C(a1, qword_100181EC0, &LNLogCategoryExecution);
}

uint64_t sub_1000A8900(uint64_t a1)
{
  return sub_1000A893C(a1, qword_100181ED8, &LNLogCategoryGeneral);
}

uint64_t sub_1000A8914(uint64_t a1)
{
  return sub_1000A893C(a1, qword_100181EF0, &LNLogCategoryMetadata);
}

uint64_t sub_1000A8928(uint64_t a1)
{
  return sub_1000A893C(a1, qword_100181F08, &LNLogCategoryVocabulary);
}

uint64_t sub_1000A893C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = type metadata accessor for Logger();
  sub_10000D844(v5, a2);
  sub_10000BEE4(v5, (uint64_t)a2);
  uint64_t result = *a3;
  if (*a3)
  {
    String.init(cString:)();
    uint64_t result = LNLogSubsystem;
    if (LNLogSubsystem)
    {
      String.init(cString:)();
      return Logger.init(subsystem:category:)();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000A89CC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000D844(v0, qword_100181F20);
  sub_10000BEE4(v0, (uint64_t)qword_100181F20);
  uint64_t result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    String.init(cString:)();
    return Logger.init(subsystem:category:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000A8A50()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000D844(v0, qword_100181F38);
  sub_10000BEE4(v0, (uint64_t)qword_100181F38);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1000A8AD4()
{
  uint64_t result = type metadata accessor for LazyTask.State();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000A8B94@<X0>(uint64_t a1@<X8>)
{
  sub_1000AA108();
  uint64_t v4 = v3;
  uint64_t v6 = *(void *)(v5 + 80);
  uint64_t v7 = type metadata accessor for Result();
  __chkstk_darwin(v7);
  int v9 = (char *)&v11 - v8;
  sub_1000A8CFC();
  if (swift_getEnumCaseMultiPayload() != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, v9, v6);
  }
  if (*(unsigned char *)(v1 + 40) == 1) {
    sub_10010CC18((void (*)(void))sub_1000AA0D0, v1, v4, (uint64_t)&type metadata for () + 8, (uint64_t)&off_100171EF0);
  }
  return swift_willThrow();
}

void sub_1000A8CFC()
{
  sub_1000AA108();
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for Result();
  sub_10010CC18((void (*)(void))sub_1000AA0EC, v0, v2, v3, (uint64_t)&off_100171EF0);
}

uint64_t sub_1000A8DAC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v16 = a2;
  uint64_t v3 = *a1;
  uint64_t v4 = type metadata accessor for LazyTask.State();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v15 - v9;
  uint64_t v11 = (uint64_t)a1 + *(void *)(v3 + 128);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, v11, v4);
  uint64_t v12 = type metadata accessor for Result();
  if (sub_10000D5D8((uint64_t)v10, 1, v12) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v16, v10, v12);
  }
  uint64_t v13 = v16;
  ((void (*)(void))a1[3])();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v8, v13, v12);
  sub_10000D5B0((uint64_t)v8, 0, 1, v12);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 40))(v11, v8, v4);
  return swift_endAccess();
}

id *sub_1000A902C()
{
  swift_release();
  uint64_t v1 = (char *)v0 + *((void *)*v0 + 16);
  uint64_t v2 = type metadata accessor for LazyTask.State();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_1000A90F4()
{
  sub_1000A902C();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t type metadata accessor for LazyTask()
{
  return sub_100010B5C();
}

uint64_t type metadata accessor for LazyTask.State()
{
  return sub_100010B5C();
}

uint64_t sub_1000A917C()
{
  uint64_t result = type metadata accessor for Result();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_1000A91FC(uint64_t *__dst, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = __dst;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v5 + 64) <= *(void *)(v4 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  uint64_t v7 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    unsigned int v11 = *((unsigned __int8 *)a2 + v6);
    if (v11 > 1)
    {
      memcpy(__dst, a2, v6 + 1);
    }
    else if (v11 == 1)
    {
      (*(void (**)(uint64_t *))(v5 + 16))(__dst);
      *((unsigned char *)v3 + v6) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *))(v4 + 16))(__dst);
      *((unsigned char *)v3 + v6) = 0;
    }
  }
  else
  {
    uint64_t v10 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v3;
}

uint64_t sub_1000A935C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24) - 8;
  unint64_t v3 = *(void *)(*(void *)v2 + 64);
  if (v3 <= *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64)) {
    unint64_t v3 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  unsigned int v4 = *(unsigned __int8 *)(result + v3);
  if (v4 <= 1)
  {
    if (v4 == 1) {
      uint64_t v5 = *(void *)v2;
    }
    else {
      uint64_t v5 = *(void *)(*(void *)(a2 + 16) - 8);
    }
    return (*(uint64_t (**)(void))(v5 + 8))();
  }
  return result;
}

void *sub_1000A9418(void *__dst, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v4 + 64) <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v5 = *(void *)(v4 + 64);
  }
  unsigned int v6 = a2[v5];
  if (v6 > 1)
  {
    memcpy(__dst, a2, v5 + 1);
  }
  else if (v6 == 1)
  {
    (*(void (**)(void *))(v4 + 16))(__dst);
    *((unsigned char *)__dst + v5) = 1;
  }
  else
  {
    (*(void (**)(void *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(__dst);
    *((unsigned char *)__dst + v5) = 0;
  }
  return __dst;
}

unsigned __int8 *sub_1000A9534(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(void *)(v6 - 8);
  if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
    uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  unsigned int v10 = __dst[v9];
  unsigned int v11 = __src[v9];
  if (v10 > 1)
  {
    if (v11 <= 1)
    {
      if (v11 != 1)
      {
LABEL_36:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16))(__dst, __src, v5);
        __dst[v9] = 0;
        return __dst;
      }
      goto LABEL_21;
    }
LABEL_29:
    memcpy(__dst, __src, v9 + 1);
    return __dst;
  }
  if (v11 > 1)
  {
    BOOL v19 = v10 == 1;
    if (v10 == 1) {
      uint64_t v20 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v20 = *(void *)(*(void *)(a3 + 16) - 8);
    }
    if (v19) {
      uint64_t v21 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v21 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v20 + 8))(__dst, v21);
    goto LABEL_29;
  }
  if (__dst != __src)
  {
    BOOL v12 = v10 == 1;
    if (v10 == 1) {
      uint64_t v13 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v13 = *(void *)(*(void *)(a3 + 16) - 8);
    }
    if (v12) {
      uint64_t v14 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v14 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v13 + 8))(__dst, v14);
    unsigned int v15 = __src[v9];
    unsigned int v16 = v15 - 2;
    if (v15 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v17 = v9;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *__src;
          goto LABEL_33;
        case 2:
          int v18 = *(unsigned __int16 *)__src;
          goto LABEL_33;
        case 3:
          int v18 = *(unsigned __int16 *)__src | (__src[2] << 16);
          goto LABEL_33;
        case 4:
          int v18 = *(_DWORD *)__src;
LABEL_33:
          int v22 = (v18 | (v16 << (8 * v9))) + 2;
          unsigned int v15 = v18 + 2;
          if (v9 < 4) {
            unsigned int v15 = v22;
          }
          break;
        default:
          break;
      }
    }
    if (v15 != 1) {
      goto LABEL_36;
    }
LABEL_21:
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v8 + 16))(__dst, __src, v6);
    __dst[v9] = 1;
  }
  return __dst;
}

void *sub_1000A9768(void *__dst, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v4 + 64) <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v5 = *(void *)(v4 + 64);
  }
  unsigned int v6 = a2[v5];
  if (v6 > 1)
  {
    memcpy(__dst, a2, v5 + 1);
  }
  else if (v6 == 1)
  {
    (*(void (**)(void *))(v4 + 32))(__dst);
    *((unsigned char *)__dst + v5) = 1;
  }
  else
  {
    (*(void (**)(void *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(__dst);
    *((unsigned char *)__dst + v5) = 0;
  }
  return __dst;
}

unsigned __int8 *sub_1000A9884(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(void *)(v6 - 8);
  if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
    uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  unsigned int v10 = __dst[v9];
  unsigned int v11 = __src[v9];
  if (v10 > 1)
  {
    if (v11 <= 1)
    {
      if (v11 != 1)
      {
LABEL_36:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(__dst, __src, v5);
        __dst[v9] = 0;
        return __dst;
      }
      goto LABEL_21;
    }
LABEL_29:
    memcpy(__dst, __src, v9 + 1);
    return __dst;
  }
  if (v11 > 1)
  {
    BOOL v19 = v10 == 1;
    if (v10 == 1) {
      uint64_t v20 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v20 = *(void *)(*(void *)(a3 + 16) - 8);
    }
    if (v19) {
      uint64_t v21 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v21 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v20 + 8))(__dst, v21);
    goto LABEL_29;
  }
  if (__dst != __src)
  {
    BOOL v12 = v10 == 1;
    if (v10 == 1) {
      uint64_t v13 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v13 = *(void *)(*(void *)(a3 + 16) - 8);
    }
    if (v12) {
      uint64_t v14 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v14 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v13 + 8))(__dst, v14);
    unsigned int v15 = __src[v9];
    unsigned int v16 = v15 - 2;
    if (v15 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v17 = v9;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *__src;
          goto LABEL_33;
        case 2:
          int v18 = *(unsigned __int16 *)__src;
          goto LABEL_33;
        case 3:
          int v18 = *(unsigned __int16 *)__src | (__src[2] << 16);
          goto LABEL_33;
        case 4:
          int v18 = *(_DWORD *)__src;
LABEL_33:
          int v22 = (v18 | (v16 << (8 * v9))) + 2;
          unsigned int v15 = v18 + 2;
          if (v9 < 4) {
            unsigned int v15 = v22;
          }
          break;
        default:
          break;
      }
    }
    if (v15 != 1) {
      goto LABEL_36;
    }
LABEL_21:
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v8 + 32))(__dst, __src, v6);
    __dst[v9] = 1;
  }
  return __dst;
}

uint64_t sub_1000A9AB8(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  if (v3 <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) {
    unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_22;
  }
  unint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) > 3) {
    goto LABEL_6;
  }
  unsigned int v8 = ((a2 + ~(-1 << v5) - 253) >> v5) + 1;
  if (HIWORD(v8))
  {
    int v6 = *(_DWORD *)((char *)a1 + v4);
    if (v6) {
      goto LABEL_14;
    }
LABEL_22:
    unsigned int v10 = *((unsigned __int8 *)a1 + v3);
    if (v10 >= 2) {
      unsigned int v11 = (v10 ^ 0xFF) + 1;
    }
    else {
      unsigned int v11 = 0;
    }
    if (v11 >= 2) {
      return v11 - 1;
    }
    else {
      return 0;
    }
  }
  if (v8 > 0xFF)
  {
    int v6 = *(unsigned __int16 *)((char *)a1 + v4);
    if (*(unsigned __int16 *)((char *)a1 + v4)) {
      goto LABEL_14;
    }
    goto LABEL_22;
  }
  if (v8 < 2) {
    goto LABEL_22;
  }
LABEL_6:
  int v6 = *((unsigned __int8 *)a1 + v4);
  if (!*((unsigned char *)a1 + v4)) {
    goto LABEL_22;
  }
LABEL_14:
  int v9 = (v6 - 1) << v5;
  if (v4 > 3) {
    int v9 = 0;
  }
  if (v4)
  {
    if (v4 > 3) {
      LODWORD(v4) = 4;
    }
    switch((int)v4)
    {
      case 2:
        LODWORD(v4) = *a1;
        break;
      case 3:
        LODWORD(v4) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v4) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v4) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v4 | v9) + 254;
}

void sub_1000A9C08(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (*(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  }
  size_t v6 = v5 + 1;
  char v7 = 8 * (v5 + 1);
  if (a3 < 0xFE)
  {
    int v8 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v11 = ((a3 + ~(-1 << v7) - 253) >> v7) + 1;
    if (HIWORD(v11))
    {
      int v8 = 4;
    }
    else if (v11 >= 0x100)
    {
      int v8 = 2;
    }
    else
    {
      int v8 = v11 > 1;
    }
  }
  else
  {
    int v8 = 1;
  }
  if (a2 > 0xFD)
  {
    unsigned int v9 = a2 - 254;
    if (v6 < 4)
    {
      int v10 = (v9 >> v7) + 1;
      if (v5 != -1)
      {
        int v12 = v9 & ~(-1 << v7);
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v9;
      int v10 = 1;
    }
    switch(v8)
    {
      case 1:
        a1[v6] = v10;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v10;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x1000A9DDCLL);
      case 4:
        *(_DWORD *)&a1[v6] = v10;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v8)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = ~(_BYTE)a2;
        break;
    }
  }
}

uint64_t sub_1000A9E04(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  uint64_t v3 = *(void *)(*(void *)(a2 + 24) - 8);
  if (*(void *)(v3 + 64) > v2) {
    unint64_t v2 = *(void *)(v3 + 64);
  }
  unsigned int v4 = *(unsigned __int8 *)(a1 + v2);
  if (v4 >= 2) {
    return (v4 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

void sub_1000A9E4C(_WORD *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (*(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) > v4) {
    unint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  }
  if (a2 > 0xFE)
  {
    size_t v5 = (v4 + 1);
    if (v5 <= 3) {
      int v6 = ~(-1 << (8 * v5));
    }
    else {
      int v6 = -1;
    }
    if (v5)
    {
      int v7 = v6 & (a2 - 255);
      if (v5 <= 3) {
        int v8 = v5;
      }
      else {
        int v8 = 4;
      }
      bzero(a1, v5);
      switch(v8)
      {
        case 2:
          *a1 = v7;
          break;
        case 3:
          *a1 = v7;
          *((unsigned char *)a1 + 2) = BYTE2(v7);
          break;
        case 4:
          *(_DWORD *)a1 = v7;
          break;
        default:
          *(unsigned char *)a1 = v7;
          break;
      }
    }
  }
  else if (a2)
  {
    *((unsigned char *)a1 + v4) = -(char)a2;
  }
}

id sub_1000A9F54()
{
  return *(id *)(v0 + 16);
}

uint64_t sub_1000A9F5C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LazyTask.State();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  size_t v5 = (char *)&v9 - v4;
  uint64_t v6 = type metadata accessor for Result();
  sub_10000D5B0((uint64_t)v5, 1, 1, v6);
  uint64_t v7 = a1 + *(void *)(*(void *)a1 + 128);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 40))(v7, v5, v2);
  return swift_endAccess();
}

uint64_t sub_1000AA0D0()
{
  return sub_1000A9F5C(v0);
}

uint64_t sub_1000AA0EC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A8DAC(v1, a1);
}

void sub_1000AA120(void (*a1)(uint64_t *__return_ptr, void *), uint64_t a2, uint64_t a3)
{
  sub_1000427DC(a3, v34);
  uint64_t v35 = v34[0];
  int64_t v4 = v34[3];
  unint64_t v5 = v34[4];
  uint64_t v25 = v34[1];
  int64_t v26 = (unint64_t)(v34[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v6 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v5)
    {
      unint64_t v7 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v8 = v7 | (v4 << 6);
      goto LABEL_15;
    }
    int64_t v9 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    if (v9 >= v26) {
      goto LABEL_29;
    }
    unint64_t v10 = *(void *)(v25 + 8 * v9);
    if (!v10)
    {
      int64_t v11 = v4 + 2;
      if (v4 + 2 >= v26) {
        goto LABEL_29;
      }
      unint64_t v10 = *(void *)(v25 + 8 * v11);
      if (v10) {
        goto LABEL_13;
      }
      int64_t v11 = v4 + 3;
      if (v4 + 3 >= v26) {
        goto LABEL_29;
      }
      unint64_t v10 = *(void *)(v25 + 8 * v11);
      if (v10) {
        goto LABEL_13;
      }
      int64_t v11 = v4 + 4;
      if (v4 + 4 >= v26) {
        goto LABEL_29;
      }
      unint64_t v10 = *(void *)(v25 + 8 * v11);
      if (v10)
      {
LABEL_13:
        int64_t v9 = v11;
      }
      else
      {
        int64_t v9 = v4 + 5;
        if (v4 + 5 >= v26) {
          goto LABEL_29;
        }
        unint64_t v10 = *(void *)(v25 + 8 * v9);
        if (!v10)
        {
          int64_t v22 = v4 + 6;
          while (v22 < v26)
          {
            unint64_t v10 = *(void *)(v25 + 8 * v22++);
            if (v10)
            {
              int64_t v9 = v22 - 1;
              goto LABEL_14;
            }
          }
LABEL_29:
          swift_release();
          return;
        }
      }
    }
LABEL_14:
    unint64_t v5 = (v10 - 1) & v10;
    unint64_t v8 = __clz(__rbit64(v10)) + (v9 << 6);
    int64_t v4 = v9;
LABEL_15:
    int v12 = (void *)(*(void *)(v35 + 48) + 16 * v8);
    uint64_t v13 = v12[1];
    v33[0] = *v12;
    v33[1] = v13;
    swift_bridgeObjectRetain();
    a1(&v29, v33);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
    uint64_t v14 = v30;
    if (v30)
    {
      int64_t v15 = v4;
      uint64_t v16 = v29;
      long long v28 = v31;
      uint64_t v17 = v32;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10001E808();
        uint64_t v6 = v23;
      }
      int v18 = v6;
      unint64_t v19 = v6[2];
      uint64_t v20 = v18;
      if (v19 >= v18[3] >> 1)
      {
        sub_10001E808();
        uint64_t v20 = v24;
      }
      v20[2] = v19 + 1;
      uint64_t v21 = &v20[5 * v19];
      uint64_t v6 = v20;
      v21[4] = v16;
      v21[5] = v14;
      *((_OWORD *)v21 + 3) = v28;
      unsigned char v21[8] = v17;
      int64_t v4 = v15;
    }
  }
  __break(1u);
}

uint64_t sub_1000AA3BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = v4;
  uint64_t v9 = sub_10000BF1C(&qword_10017F490);
  sub_10000E948();
  uint64_t v98 = v10;
  __chkstk_darwin(v11);
  uint64_t v99 = (uint64_t)&v96 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Locale();
  sub_10000E948();
  uint64_t v15 = v14;
  __chkstk_darwin(v16);
  int v18 = (char *)&v96 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4)
  {
    uint64_t v19 = a4;
  }
  else
  {
    static Locale.current.getter();
    a3 = Locale.identifier.getter();
    uint64_t v19 = v20;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v13);
  }
  swift_bridgeObjectRetain();
  Class isa = (Class)[v5 localizations];
  if (!isa)
  {
    static Array._unconditionallyBridgeFromObjectiveC(_:)();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  int64_t v22 = self;
  sub_10000BF1C((uint64_t *)&unk_10017E690);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_10013EF20;
  *(void *)(v23 + 32) = a3;
  *(void *)(v23 + 40) = v19;
  Class v24 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v25 = [v22 preferredLocalizationsFromArray:isa forPreferences:v24];

  uint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  if (!*(void *)(v26 + 16))
  {
    swift_bridgeObjectRelease();
    sub_10000BF1C(&qword_10017DED8);
    return Dictionary.init(dictionaryLiteral:)();
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a2) {
    NSString v27 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v27 = 0;
  }
  NSString v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v30 = [v5 localizedStringsForTable:v27 localization:v29];

  uint64_t v31 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  sub_10000BF1C(&qword_10017F498);
  uint64_t v32 = v99;
  uint64_t v33 = Regex.init(_regexString:version:)();
  __chkstk_darwin(v33);
  *(&v96 - 2) = v32;
  swift_bridgeObjectRetain();
  sub_1000AA120((void (*)(uint64_t *__return_ptr, void *))sub_1000AAD6C, (uint64_t)(&v96 - 4), v31);
  uint64_t v35 = v34;
  swift_bridgeObjectRelease();
  uint64_t v102 = (void *)v35;
  swift_bridgeObjectRetain();
  sub_1000AAE4C((uint64_t *)&v102);
  swift_bridgeObjectRelease();
  uint64_t v36 = v102[2];
  if (!v36)
  {
    long long v28 = _swiftEmptyDictionarySingleton;
LABEL_36:
    (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v99, v9);
    swift_release();
    swift_bridgeObjectRelease();
    return (uint64_t)v28;
  }
  uint64_t v97 = v9;
  long long v28 = _swiftEmptyDictionarySingleton;
  uint64_t v96 = swift_retain();
  uint64_t v37 = (uint64_t *)(v96 + 64);
  uint64_t v100 = v31;
  while (1)
  {
    if (!*(void *)(v31 + 16)) {
      goto LABEL_33;
    }
    uint64_t v38 = *(v37 - 1);
    uint64_t v39 = *v37;
    uint64_t v40 = *(v37 - 4);
    uint64_t v41 = *(v37 - 3);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v48 = sub_100021098(v40, v41, v42, v43, v44, v45, v46, v47, v96, v97, v98, v99, v100, v101, (uint64_t)v102, v103, v104, v105, v106,
            v107,
            v108,
            v109,
            v110,
            v111,
            v112,
            v113);
    if ((v49 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      goto LABEL_33;
    }
    uint64_t v50 = (uint64_t *)(*(void *)(v31 + 56) + 16 * v48);
    uint64_t v51 = *v50;
    uint64_t v52 = v50[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v53 = v28[2];
    swift_bridgeObjectRetain();
    if (v53)
    {
      uint64_t v60 = sub_100021098(v38, v39, v54, v55, v56, v57, v58, v59, v96, v97, v98, v99, v100, v101, (uint64_t)v102, v103, v104, v105, v106,
              v107,
              v108,
              v109,
              v110,
              v111,
              v112,
              v113);
      int v61 = _swiftEmptyArrayStorage;
      if (v62)
      {
        int v61 = *(void **)(v28[7] + 8 * v60);
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      int v61 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v101 = v38;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_10001E7C0();
      int v61 = v93;
    }
    unint64_t v64 = v61[2];
    if (v64 >= v61[3] >> 1)
    {
      sub_10001E7C0();
      int v61 = v94;
    }
    v61[2] = v64 + 1;
    uint64_t v65 = &v61[2 * v64];
    v65[4] = v51;
    v65[5] = v52;
    swift_bridgeObjectRetain();
    char v66 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v73 = sub_100021098(v101, v39, v67, v68, v69, v70, v71, v72, v96, v97, v98, v99, v100, v101, (uint64_t)v28, v103, v104, v105, v106,
            v107,
            v108,
            v109,
            v110,
            v111,
            v112,
            v113);
    uint64_t v75 = v28[2];
    BOOL v76 = (v74 & 1) == 0;
    Swift::Int v77 = v75 + v76;
    if (__OFADD__(v75, v76)) {
      break;
    }
    unint64_t v78 = v73;
    char v79 = v74;
    sub_10000BF1C(&qword_10017F0D0);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v66, v77))
    {
      uint64_t v86 = sub_100021098(v101, v39, v80, v81, v82, v83, v84, v85, v96, v97, v98, v99, v100, v101, (uint64_t)v102, v103, v104, v105, v106,
              v107,
              v108,
              v109,
              v110,
              v111,
              v112,
              v113);
      if ((v79 & 1) != (v87 & 1)) {
        goto LABEL_40;
      }
      unint64_t v78 = v86;
    }
    long long v28 = v102;
    if (v79)
    {
      uint64_t v88 = v102[7];
      swift_bridgeObjectRelease();
      *(void *)(v88 + 8 * v78) = v61;
    }
    else
    {
      v102[(v78 >> 6) + 8] |= 1 << v78;
      uint64_t v89 = (void *)(v28[6] + 16 * v78);
      *uint64_t v89 = v101;
      v89[1] = v39;
      *(void *)(v28[7] + 8 * v78) = v61;
      uint64_t v90 = v28[2];
      BOOL v91 = __OFADD__(v90, 1);
      uint64_t v92 = v90 + 1;
      if (v91) {
        goto LABEL_39;
      }
      v28[2] = v92;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    uint64_t v31 = v100;
LABEL_33:
    v37 += 5;
    if (!--v36)
    {
      swift_release();
      uint64_t v9 = v97;
      goto LABEL_36;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_1000AAA54@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000BF1C(&qword_10017F4A8);
  __chkstk_darwin(v5 - 8);
  unint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000BF1C(&qword_10017F4B0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  sub_10000BF1C(&qword_10017F490);
  Regex.wholeMatch(in:)();
  if (v2)
  {
    swift_errorRelease();
    sub_10000D5B0((uint64_t)v7, 1, 1, v8);
LABEL_4:
    uint64_t result = sub_1000AC3CC((uint64_t)v7);
LABEL_5:
    *(void *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return result;
  }
  if (sub_10000D5D8((uint64_t)v7, 1, v8) == 1) {
    goto LABEL_4;
  }
  uint64_t v32 = v9;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
  swift_getKeyPath();
  Regex.Match.subscript.getter();
  swift_release();
  uint64_t v16 = v28;
  uint64_t v15 = v29;
  if (!((v29 ^ v28) >> 14))
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  uint64_t v26 = v30;
  uint64_t v27 = v31;
  uint64_t v17 = (unsigned __int8 *)sub_1000AC47C(v28, v29, (unint64_t)v30, v31, 10);
  if ((v18 & 0x100) != 0)
  {
    uint64_t v26 = sub_1000ABB4C(v16, v15, (uint64_t)v26, v27, 10);
    char v22 = v21;
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_13:
    uint64_t v20 = v32;
LABEL_14:
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v11, v8);
    goto LABEL_5;
  }
  char v19 = v18;
  uint64_t v26 = v17;
  swift_bridgeObjectRelease();
  uint64_t v20 = v32;
  if (v19) {
    goto LABEL_14;
  }
LABEL_11:
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  Regex.Match.subscript.getter();
  swift_release();
  uint64_t v23 = static String._fromSubstring(_:)();
  uint64_t v25 = v24;
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v11, v8);
  *(void *)a2 = v12;
  *(void *)(a2 + 8) = v13;
  *(void *)(a2 + 16) = v26;
  *(void *)(a2 + 24) = v23;
  *(void *)(a2 + 32) = v25;
  return result;
}

uint64_t sub_1000AAD6C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000AAA54(a1, a2);
}

void *sub_1000AAD88(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_10000BF1C(&qword_10017CD68);
  int64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1000AADF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v6 = String.UTF16View.index(_:offsetBy:)();
    sub_1000AC9E8(v6);
    return v7 | 4;
  }
  else
  {
    uint64_t v3 = String.UTF8View._foreignIndex(_:offsetBy:)();
    sub_1000AC9E8(v3);
    return v4 | 8;
  }
}

uint64_t sub_1000AAE4C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_1000AC3B8();
    uint64_t v2 = v3;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  uint64_t result = sub_1000AAEB8(v6);
  *a1 = v2;
  return result;
}

uint64_t sub_1000AAEB8(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3) {
        return sub_1000AB670(0, v3, 1, a1);
      }
      return result;
    }
    goto LABEL_149;
  }
  uint64_t v5 = result;
  uint64_t v124 = v1;
  uint64_t result = (uint64_t)sub_1000E6208(v3 / 2);
  uint64_t v116 = result;
  uint64_t v123 = v6;
  uint64_t v120 = v3;
  int v114 = a1;
  if (v3 <= 0)
  {
    uint64_t v9 = (char *)_swiftEmptyArrayStorage;
    unint64_t v53 = _swiftEmptyArrayStorage[2];
LABEL_114:
    if (v53 < 2)
    {
LABEL_125:
      uint64_t result = swift_bridgeObjectRelease();
      if (v120 >= -1)
      {
        *(void *)(v116 + 16) = 0;
        return swift_bridgeObjectRelease();
      }
      goto LABEL_154;
    }
    uint64_t v106 = *v114;
    while (1)
    {
      unint64_t v107 = v53 - 2;
      if (v53 < 2) {
        break;
      }
      if (!v106) {
        goto LABEL_158;
      }
      uint64_t v108 = *(void *)&v9[16 * v107 + 32];
      uint64_t v109 = *(void *)&v9[16 * v53 + 24];
      uint64_t result = sub_1000AB7B4((char *)(v106 + 40 * v108), (char *)(v106 + 40 * *(void *)&v9[16 * v53 + 16]), v106 + 40 * v109, v123);
      if (v124) {
        goto LABEL_110;
      }
      if (v109 < v108) {
        goto LABEL_144;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_1000ABB38((uint64_t)v9);
        uint64_t v9 = (char *)result;
      }
      if (v107 >= *((void *)v9 + 2)) {
        goto LABEL_145;
      }
      uint64_t v110 = &v9[16 * v107 + 32];
      *(void *)uint64_t v110 = v108;
      *((void *)v110 + 1) = v109;
      unint64_t v111 = *((void *)v9 + 2);
      if (v53 > v111) {
        goto LABEL_146;
      }
      uint64_t result = (uint64_t)memmove(&v9[16 * v53 + 16], &v9[16 * v53 + 32], 16 * (v111 - v53));
      *((void *)v9 + 2) = v111 - 1;
      unint64_t v53 = v111 - 1;
      if (v111 <= 2) {
        goto LABEL_125;
      }
    }
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
    return result;
  }
  uint64_t v115 = v5;
  uint64_t v7 = 0;
  uint64_t v8 = *a1;
  uint64_t v112 = *a1 + 32;
  uint64_t v113 = *a1 + 112;
  uint64_t v9 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v10 = v3;
  uint64_t v125 = *a1;
  while (1)
  {
    uint64_t result = v7++;
    uint64_t v118 = v9;
    uint64_t v119 = result;
    if (v7 < v10)
    {
      uint64_t v11 = (void *)(v8 + 40 * v7);
      uint64_t v12 = v11[2];
      uint64_t v13 = v11[3];
      uint64_t v14 = v11[4];
      uint64_t v15 = (void *)(v8 + 40 * result);
      uint64_t v16 = v15[2];
      BOOL v17 = v13 == v15[3] && v14 == v15[4];
      if (v17 || (uint64_t v8 = v125, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        int v18 = v12 < v16;
      }
      else
      {
        uint64_t v8 = v125;
        int v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      uint64_t result = v119;
      uint64_t v7 = v119 + 2;
      if (v119 + 2 < v120)
      {
        char v19 = (void *)(v113 + 40 * v119);
        while (1)
        {
          uint64_t v20 = *(v19 - 2);
          uint64_t v21 = *(v19 - 7);
          BOOL v22 = *(v19 - 1) == *(v19 - 6) && *v19 == *(v19 - 5);
          if (v22 || (uint64_t v8 = v125, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
          {
            int v23 = v20 < v21;
          }
          else
          {
            int v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
            uint64_t v8 = v125;
          }
          uint64_t v9 = v118;
          if ((v18 ^ v23)) {
            break;
          }
          ++v7;
          v19 += 5;
          if (v7 >= v120)
          {
            uint64_t v7 = v120;
            break;
          }
        }
        uint64_t result = v119;
      }
      if (v18)
      {
        if (v7 < result) {
          goto LABEL_151;
        }
        if (result < v7)
        {
          uint64_t v24 = 40 * v7;
          uint64_t v25 = 40 * result;
          uint64_t v26 = v7;
          uint64_t v27 = result;
          do
          {
            if (v27 != --v26)
            {
              if (!v8) {
                goto LABEL_157;
              }
              uint64_t v28 = v8 + v25;
              uint64_t v29 = v8 + v24;
              uint64_t v30 = *(void *)(v8 + v25);
              uint64_t v31 = *(void *)(v8 + v25 + 8);
              uint64_t v32 = *(void *)(v8 + v25 + 32);
              long long v33 = *(_OWORD *)(v8 + v25 + 16);
              uint64_t v34 = *(void *)(v8 + v24 - 8);
              long long v35 = *(_OWORD *)(v8 + v24 - 24);
              *(_OWORD *)uint64_t v28 = *(_OWORD *)(v8 + v24 - 40);
              *(_OWORD *)(v28 + 16) = v35;
              *(void *)(v28 + 32) = v34;
              *(void *)(v29 - 40) = v30;
              *(void *)(v29 - 32) = v31;
              *(_OWORD *)(v29 - 24) = v33;
              *(void *)(v29 - 8) = v32;
            }
            ++v27;
            v24 -= 40;
            v25 += 40;
          }
          while (v27 < v26);
        }
      }
    }
    if (v7 < v120)
    {
      if (__OFSUB__(v7, result)) {
        goto LABEL_148;
      }
      if (v7 - result < v115)
      {
        if (__OFADD__(result, v115)) {
          goto LABEL_152;
        }
        if (result + v115 >= v120) {
          uint64_t v36 = v120;
        }
        else {
          uint64_t v36 = result + v115;
        }
        if (v36 < result) {
          goto LABEL_153;
        }
        if (v7 != v36)
        {
          uint64_t v37 = (void *)(v112 + 40 * v7);
          uint64_t v117 = v36;
          do
          {
            uint64_t v38 = (void *)(v8 + 40 * v7);
            uint64_t v39 = v38[2];
            uint64_t v40 = v38[3];
            uint64_t v41 = v38[4];
            uint64_t v42 = result;
            uint64_t v121 = v37;
            do
            {
              uint64_t v43 = *(v37 - 7);
              BOOL v44 = v40 == *(v37 - 6) && v41 == *(v37 - 5);
              if (v44 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t v8 = v125, (result & 1) != 0))
              {
                if (v39 >= v43) {
                  break;
                }
              }
              else
              {
                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                uint64_t v8 = v125;
                if ((result & 1) == 0) {
                  break;
                }
              }
              if (!v8) {
                goto LABEL_155;
              }
              uint64_t v45 = v37 - 4;
              uint64_t v41 = *v37;
              uint64_t v46 = v37 - 9;
              uint64_t v47 = *(v37 - 5);
              *(v37 - 5) = *v37;
              v37 -= 5;
              uint64_t v48 = v37[1];
              uint64_t v49 = v37[2];
              uint64_t v39 = v37[3];
              uint64_t v40 = v37[4];
              long long v50 = v46[1];
              *(_OWORD *)uint64_t v45 = *v46;
              *((_OWORD *)v45 + 1) = v50;
              v45[4] = v47;
              *(v37 - 4) = v48;
              *(v37 - 3) = v49;
              *(v37 - 2) = v39;
              *(v37 - 1) = v40;
              ++v42;
            }
            while (v7 != v42);
            ++v7;
            uint64_t v37 = v121 + 5;
            uint64_t result = v119;
          }
          while (v7 != v117);
          uint64_t v7 = v117;
          uint64_t v9 = v118;
        }
      }
    }
    if (v7 < result) {
      goto LABEL_147;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1000ABA40(0, *((void *)v9 + 2) + 1, 1, v9);
      uint64_t v9 = (char *)result;
    }
    unint64_t v52 = *((void *)v9 + 2);
    unint64_t v51 = *((void *)v9 + 3);
    unint64_t v53 = v52 + 1;
    uint64_t v8 = v125;
    uint64_t v54 = v119;
    if (v52 >= v51 >> 1)
    {
      uint64_t result = (uint64_t)sub_1000ABA40((char *)(v51 > 1), v52 + 1, 1, v9);
      uint64_t v8 = v125;
      uint64_t v9 = (char *)result;
      uint64_t v54 = v119;
    }
    *((void *)v9 + 2) = v53;
    uint64_t v55 = v9 + 32;
    uint64_t v56 = &v9[16 * v52 + 32];
    *(void *)uint64_t v56 = v54;
    *((void *)v56 + 1) = v7;
    if (v52) {
      break;
    }
    unint64_t v53 = 1;
LABEL_105:
    Swift::Int v10 = v120;
    if (v7 >= v120) {
      goto LABEL_114;
    }
  }
  uint64_t v122 = v7;
  while (1)
  {
    unint64_t v57 = v53 - 1;
    if (v53 >= 4)
    {
      char v62 = &v55[2 * v53];
      uint64_t v63 = *(v62 - 8);
      uint64_t v64 = *(v62 - 7);
      BOOL v68 = __OFSUB__(v64, v63);
      uint64_t v65 = v64 - v63;
      if (v68) {
        goto LABEL_132;
      }
      uint64_t v67 = *(v62 - 6);
      uint64_t v66 = *(v62 - 5);
      BOOL v68 = __OFSUB__(v66, v67);
      uint64_t v60 = v66 - v67;
      char v61 = v68;
      if (v68) {
        goto LABEL_133;
      }
      unint64_t v69 = v53 - 2;
      uint64_t v70 = &v55[2 * v53 - 4];
      uint64_t v72 = *v70;
      uint64_t v71 = v70[1];
      BOOL v68 = __OFSUB__(v71, v72);
      uint64_t v73 = v71 - v72;
      if (v68) {
        goto LABEL_134;
      }
      BOOL v68 = __OFADD__(v60, v73);
      uint64_t v74 = v60 + v73;
      if (v68) {
        goto LABEL_136;
      }
      if (v74 >= v65)
      {
        uint64_t v92 = &v55[2 * v57];
        uint64_t v94 = *v92;
        uint64_t v93 = v92[1];
        BOOL v68 = __OFSUB__(v93, v94);
        uint64_t v95 = v93 - v94;
        if (v68) {
          goto LABEL_142;
        }
        BOOL v85 = v60 < v95;
        goto LABEL_94;
      }
    }
    else
    {
      if (v53 != 3)
      {
        uint64_t v86 = *((void *)v9 + 4);
        uint64_t v87 = *((void *)v9 + 5);
        BOOL v68 = __OFSUB__(v87, v86);
        uint64_t v79 = v87 - v86;
        char v80 = v68;
        goto LABEL_88;
      }
      uint64_t v59 = *((void *)v9 + 4);
      uint64_t v58 = *((void *)v9 + 5);
      BOOL v68 = __OFSUB__(v58, v59);
      uint64_t v60 = v58 - v59;
      char v61 = v68;
    }
    if (v61) {
      goto LABEL_135;
    }
    unint64_t v69 = v53 - 2;
    uint64_t v75 = &v55[2 * v53 - 4];
    uint64_t v77 = *v75;
    uint64_t v76 = v75[1];
    BOOL v78 = __OFSUB__(v76, v77);
    uint64_t v79 = v76 - v77;
    char v80 = v78;
    if (v78) {
      goto LABEL_137;
    }
    uint64_t v81 = &v55[2 * v57];
    uint64_t v83 = *v81;
    uint64_t v82 = v81[1];
    BOOL v68 = __OFSUB__(v82, v83);
    uint64_t v84 = v82 - v83;
    if (v68) {
      goto LABEL_139;
    }
    if (__OFADD__(v79, v84)) {
      goto LABEL_141;
    }
    if (v79 + v84 >= v60)
    {
      BOOL v85 = v60 < v84;
LABEL_94:
      if (v85) {
        unint64_t v57 = v69;
      }
      goto LABEL_96;
    }
LABEL_88:
    if (v80) {
      goto LABEL_138;
    }
    uint64_t v88 = &v55[2 * v57];
    uint64_t v90 = *v88;
    uint64_t v89 = v88[1];
    BOOL v68 = __OFSUB__(v89, v90);
    uint64_t v91 = v89 - v90;
    if (v68) {
      goto LABEL_140;
    }
    if (v91 < v79) {
      goto LABEL_105;
    }
LABEL_96:
    unint64_t v96 = v57 - 1;
    if (v57 - 1 >= v53)
    {
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
      goto LABEL_143;
    }
    if (!v8) {
      goto LABEL_156;
    }
    uint64_t v97 = v9;
    uint64_t v98 = v55;
    uint64_t v99 = &v55[2 * v96];
    uint64_t v100 = *v99;
    uint64_t v101 = v98;
    unint64_t v102 = v57;
    uint64_t v103 = &v98[2 * v57];
    uint64_t v104 = v103[1];
    uint64_t result = sub_1000AB7B4((char *)(v8 + 40 * *v99), (char *)(v8 + 40 * *v103), v8 + 40 * v104, v123);
    if (v124) {
      break;
    }
    if (v104 < v100) {
      goto LABEL_129;
    }
    if (v102 > *((void *)v97 + 2)) {
      goto LABEL_130;
    }
    uint64_t *v99 = v100;
    v101[2 * v96 + 1] = v104;
    unint64_t v105 = *((void *)v97 + 2);
    if (v102 >= v105) {
      goto LABEL_131;
    }
    uint64_t v55 = v101;
    uint64_t v9 = v97;
    uint64_t v124 = 0;
    unint64_t v53 = v105 - 1;
    uint64_t result = (uint64_t)memmove(v103, v103 + 2, 16 * (v105 - 1 - v102));
    *((void *)v97 + 2) = v105 - 1;
    uint64_t v8 = v125;
    uint64_t v7 = v122;
    if (v105 <= 2) {
      goto LABEL_105;
    }
  }
LABEL_110:
  uint64_t result = swift_bridgeObjectRelease();
  if (v120 < -1) {
    goto LABEL_150;
  }
  *(void *)(v116 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000AB670(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v20 = result;
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v22 = *a4;
    uint64_t v5 = (void *)(*a4 + 40 * a3 + 32);
    while (2)
    {
      uint64_t v6 = (void *)(v22 + 40 * v4);
      uint64_t v7 = v6[2];
      uint64_t v8 = v6[3];
      uint64_t v9 = v6[4];
      uint64_t v10 = v20;
      uint64_t v21 = v5;
      do
      {
        uint64_t v11 = *(v5 - 7);
        BOOL v12 = v8 == *(v5 - 6) && v9 == *(v5 - 5);
        if (v12 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
          if (v7 >= v11) {
            break;
          }
        }
        else
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            break;
          }
        }
        if (!v22)
        {
          __break(1u);
          return result;
        }
        uint64_t v13 = v5 - 4;
        uint64_t v9 = *v5;
        uint64_t v14 = v5 - 9;
        uint64_t v15 = *(v5 - 5);
        *(v5 - 5) = *v5;
        v5 -= 5;
        uint64_t v16 = v5[1];
        uint64_t v17 = v5[2];
        uint64_t v7 = v5[3];
        uint64_t v8 = v5[4];
        long long v18 = v14[1];
        *(_OWORD *)uint64_t v13 = *v14;
        *((_OWORD *)v13 + 1) = v18;
        v13[4] = v15;
        *(v5 - 4) = v16;
        *(v5 - 3) = v17;
        *(v5 - 2) = v7;
        *(v5 - 1) = v8;
        ++v10;
      }
      while (v4 != v10);
      ++v4;
      uint64_t v5 = v21 + 5;
      if (v4 != a2) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t sub_1000AB7B4(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t v6 = a2 - a1;
  uint64_t v7 = (a2 - a1) / 40;
  uint64_t v8 = a3 - (void)a2;
  uint64_t v9 = (uint64_t)(a3 - (void)a2) / 40;
  if (v7 >= v9)
  {
    sub_100020B58(a2, (uint64_t)(a3 - (void)a2) / 40, a4);
    uint64_t v11 = a4;
    BOOL v12 = &a4[40 * v9];
    if (v5 >= v4 || v8 < 40) {
      goto LABEL_54;
    }
    unint64_t v26 = a3 - 40;
    while (1)
    {
      uint64_t v27 = (char *)(v26 + 40);
      uint64_t v28 = *((void *)v12 - 3);
      uint64_t v29 = *((void *)v4 - 3);
      BOOL v30 = *((void *)v12 - 2) == *((void *)v4 - 2) && *((void *)v12 - 1) == *((void *)v4 - 1);
      if (v30
        || (uint64_t v40 = v12,
            char v31 = _stringCompareWithSmolCheck(_:_:expecting:)(),
            BOOL v12 = v40,
            uint64_t v27 = (char *)(v26 + 40),
            uint64_t v11 = a4,
            (v31 & 1) != 0))
      {
        if (v28 < v29) {
          goto LABEL_38;
        }
      }
      else
      {
        char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
        BOOL v12 = v40;
        uint64_t v27 = (char *)(v26 + 40);
        uint64_t v11 = a4;
        if (v34)
        {
LABEL_38:
          uint64_t v32 = v4 - 40;
          BOOL v33 = v27 != v4 || v26 >= (unint64_t)v4;
          v4 -= 40;
          if (!v33) {
            goto LABEL_50;
          }
          goto LABEL_49;
        }
      }
      uint64_t v32 = v12 - 40;
      BOOL v35 = v27 != v12 || v26 >= (unint64_t)v12;
      v12 -= 40;
      if (!v35) {
        goto LABEL_50;
      }
LABEL_49:
      long long v36 = *(_OWORD *)v32;
      long long v37 = *((_OWORD *)v32 + 1);
      *(void *)(v26 + 32) = *((void *)v32 + 4);
      *(_OWORD *)unint64_t v26 = v36;
      *(_OWORD *)(v26 + 16) = v37;
LABEL_50:
      v26 -= 40;
      if (v4 <= v5 || v12 <= v11) {
        goto LABEL_54;
      }
    }
  }
  sub_100020B58(a1, (a2 - a1) / 40, a4);
  uint64_t v11 = a4;
  BOOL v12 = &a4[40 * v7];
  if ((unint64_t)v4 < a3 && v6 >= 40)
  {
    unint64_t v13 = a3;
    do
    {
      uint64_t v14 = *((void *)v4 + 2);
      uint64_t v15 = *((void *)v11 + 2);
      BOOL v16 = *((void *)v4 + 3) == *((void *)v11 + 3) && *((void *)v4 + 4) == *((void *)v11 + 4);
      if (v16
        || (uint64_t v43 = v11,
            uint64_t v17 = v12,
            char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(),
            unint64_t v13 = a3,
            BOOL v12 = v17,
            uint64_t v11 = v43,
            (v18 & 1) != 0))
      {
        if (v14 < v15) {
          goto LABEL_11;
        }
      }
      else
      {
        char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
        unint64_t v13 = a3;
        BOOL v12 = v17;
        uint64_t v11 = v43;
        if (v21)
        {
LABEL_11:
          BOOL v16 = v5 == v4;
          char v19 = v4;
          v4 += 40;
          if (v16 && v5 < v4) {
            goto LABEL_23;
          }
          goto LABEL_22;
        }
      }
      BOOL v16 = v5 == v11;
      char v19 = v11;
      v11 += 40;
      if (v16 && v5 < v11) {
        goto LABEL_23;
      }
LABEL_22:
      long long v23 = *(_OWORD *)v19;
      long long v24 = *((_OWORD *)v19 + 1);
      *((void *)v5 + 4) = *((void *)v19 + 4);
      *(_OWORD *)uint64_t v5 = v23;
      *((_OWORD *)v5 + 1) = v24;
LABEL_23:
      v5 += 40;
    }
    while (v11 < v12 && (unint64_t)v4 < v13);
  }
  uint64_t v4 = v5;
LABEL_54:
  sub_100020B58(v11, (v12 - v11) / 40, v4);
  return 1;
}

char *sub_1000ABA40(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000BF1C(&qword_10017F4A0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  BOOL v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || &v13[16 * v8] <= v12) {
      memmove(v12, v13, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1000ABB38(uint64_t a1)
{
  return sub_1000ABA40(0, *(void *)(a1 + 16), 0, (char *)a1);
}

unsigned __int8 *sub_1000ABB4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  sub_1000AC558();
  swift_bridgeObjectRetain();
  uint64_t v7 = String.init<A>(_:)();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  uint64_t v7 = sub_1000ABEBC();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  unint64_t v13 = sub_1000ABC40(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13;
}

unsigned __int8 *sub_1000ABC40(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v15 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v16 = a3 + 48;
        unsigned __int8 v17 = a3 + 55;
        unsigned __int8 v18 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v16 = 58;
        }
        else
        {
          unsigned __int8 v18 = 97;
          unsigned __int8 v17 = 65;
        }
        if (result)
        {
          uint64_t v9 = 0;
          char v19 = result + 1;
          do
          {
            unsigned int v20 = *v19;
            if (v20 < 0x30 || v20 >= v16)
            {
              if (v20 < 0x41 || v20 >= v17)
              {
                uint64_t v13 = 0;
                if (v20 < 0x61 || v20 >= v18) {
                  return (unsigned __int8 *)v13;
                }
                char v21 = -87;
              }
              else
              {
                char v21 = -55;
              }
            }
            else
            {
              char v21 = -48;
            }
            uint64_t v22 = v9 * a3;
            if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
              return 0;
            }
            uint64_t v9 = v22 + (v20 + v21);
            if (__OFADD__(v22, (v20 + v21))) {
              return 0;
            }
            ++v19;
            --v15;
          }
          while (v15);
          return (unsigned __int8 *)v9;
        }
        return 0;
      }
      return 0;
    }
  }
  else
  {
    if (v4 != 45)
    {
      if (a2)
      {
        unsigned __int8 v23 = a3 + 48;
        unsigned __int8 v24 = a3 + 55;
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v23 = 58;
        }
        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v24 = 65;
        }
        if (result)
        {
          uint64_t v26 = 0;
          do
          {
            unsigned int v27 = *result;
            if (v27 < 0x30 || v27 >= v23)
            {
              if (v27 < 0x41 || v27 >= v24)
              {
                uint64_t v13 = 0;
                if (v27 < 0x61 || v27 >= v25) {
                  return (unsigned __int8 *)v13;
                }
                char v28 = -87;
              }
              else
              {
                char v28 = -55;
              }
            }
            else
            {
              char v28 = -48;
            }
            uint64_t v29 = v26 * a3;
            if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63) {
              return 0;
            }
            uint64_t v26 = v29 + (v27 + v28);
            if (__OFADD__(v29, (v27 + v28))) {
              return 0;
            }
            ++result;
            --v3;
          }
          while (v3);
          return (unsigned __int8 *)(v29 + (v27 + v28));
        }
        return 0;
      }
      return 0;
    }
    if (a2 >= 1)
    {
      uint64_t v5 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v6 = a3 + 48;
        unsigned __int8 v7 = a3 + 55;
        unsigned __int8 v8 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = 58;
        }
        else
        {
          unsigned __int8 v8 = 97;
          unsigned __int8 v7 = 65;
        }
        if (result)
        {
          uint64_t v9 = 0;
          for (unint64_t i = result + 1; ; ++i)
          {
            unsigned int v11 = *i;
            if (v11 < 0x30 || v11 >= v6)
            {
              if (v11 < 0x41 || v11 >= v7)
              {
                uint64_t v13 = 0;
                if (v11 < 0x61 || v11 >= v8) {
                  return (unsigned __int8 *)v13;
                }
                char v12 = -87;
              }
              else
              {
                char v12 = -55;
              }
            }
            else
            {
              char v12 = -48;
            }
            uint64_t v14 = v9 * a3;
            if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
              return 0;
            }
            uint64_t v9 = v14 - (v11 + v12);
            if (__OFSUB__(v14, (v11 + v12))) {
              return 0;
            }
            if (!--v5) {
              return (unsigned __int8 *)v9;
            }
          }
        }
        return 0;
      }
      return 0;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000ABEBC()
{
  unint64_t v0 = sub_1000ABF28();
  uint64_t v4 = sub_1000ABF5C(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1000ABF28()
{
  return String.subscript.getter();
}

uint64_t sub_1000ABF5C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = sub_1000AC0B4(a1, a2, a3, a4);
    if (!v9
      || (uint64_t v10 = v9,
          unsigned int v11 = sub_1000AAD88(v9, 0),
          unint64_t v12 = sub_1000AC1B4((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4),
          swift_bridgeObjectRetain(),
          swift_bridgeObjectRelease(),
          v12 == v10))
    {
      uint64_t v13 = static String._uncheckedFromUTF8(_:)();
      swift_release();
      return v13;
    }
    __break(1u);
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v14[0] = a3;
      v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      return static String._uncheckedFromUTF8(_:)();
    }
    if ((a3 & 0x1000000000000000) != 0) {
      goto LABEL_4;
    }
  }
  _StringObject.sharedUTF8.getter();
LABEL_4:

  return static String._uncheckedFromUTF8(_:)();
}

uint64_t sub_1000AC0B4(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    uint64_t result = sub_1000AADF0(result, a3, a4);
    unint64_t v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    uint64_t result = sub_1000AADF0(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v10 < a2 >> 16)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  return String.UTF8View._foreignDistance(from:to:)();
}

unint64_t sub_1000AC1B4(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_35;
  }
  if (a3 < 0) {
    goto LABEL_38;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_35:
    *uint64_t v9 = a4;
    v9[1] = a5;
    void v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    uint64_t result = v12;
    if ((v12 & 0xC) == v15) {
      uint64_t result = sub_1000AADF0(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
      }
      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
      }
    }
    if ((v12 & 0xC) == v15)
    {
      uint64_t result = sub_1000AADF0(v12, a6, a7);
      unint64_t v12 = result;
      if ((a7 & 0x1000000000000000) == 0)
      {
LABEL_27:
        unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_31;
      }
    }
    else if ((a7 & 0x1000000000000000) == 0)
    {
      goto LABEL_27;
    }
    if (v23 <= v12 >> 16) {
      goto LABEL_37;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_31:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_35;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_35;
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

void sub_1000AC3B8()
{
}

uint64_t sub_1000AC3CC(uint64_t a1)
{
  uint64_t v2 = sub_10000BF1C(&qword_10017F4A8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1000AC42C()
{
}

void sub_1000AC440()
{
}

void sub_1000AC454(uint64_t a1)
{
}

void sub_1000AC468()
{
}

uint64_t sub_1000AC47C(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t result = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    uint64_t v12 = HIBYTE(a4) & 0xF;
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v11 = v15;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    uint64_t v11 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v12 = a3 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v11 = (void *)_StringObject.sharedUTF8.getter();
  }
  uint64_t result = sub_1000AC5A4((uint64_t)v11, v12, a1, a2, a3, a4, a5);
  if (!v5)
  {
    char v16 = v14 & 1;
LABEL_8:
    LOBYTE(v15[0]) = (a4 & 0x1000000000000000) != 0;
  }
  return result;
}

unint64_t sub_1000AC558()
{
  unint64_t result = qword_10017F4B8;
  if (!qword_10017F4B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F4B8);
  }
  return result;
}

uint64_t sub_1000AC5A4(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7)
{
  unint64_t v11 = a3;
  uint64_t v12 = result;
  uint64_t v13 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0) {
    LOBYTE(v13) = 1;
  }
  uint64_t v14 = 4 << v13;
  uint64_t v15 = a3 & 0xC;
  unint64_t v16 = a3;
  if (v15 == 4 << v13)
  {
    unint64_t result = sub_1000AADF0(a3, a5, a6);
    unint64_t v16 = result;
  }
  uint64_t v17 = HIBYTE(a6) & 0xF;
  if ((a6 & 0x1000000000000000) != 0)
  {
    unint64_t v19 = a5 & 0xFFFFFFFFFFFFLL;
    if ((a6 & 0x2000000000000000) != 0) {
      unint64_t v19 = HIBYTE(a6) & 0xF;
    }
    if (v19 < v16 >> 16) {
      goto LABEL_96;
    }
    unint64_t result = String.UTF8View._foreignDistance(from:to:)();
    uint64_t v18 = result;
    uint64_t v17 = HIBYTE(a6) & 0xF;
  }
  else
  {
    uint64_t v18 = v16 >> 16;
  }
  if (v15 == v14)
  {
    uint64_t v20 = v17;
    unint64_t result = sub_1000AADF0(v11, a5, a6);
    uint64_t v17 = v20;
    unint64_t v11 = result;
  }
  if ((a4 & 0xC) == v14)
  {
    uint64_t v21 = a4;
    uint64_t v22 = v17;
    unint64_t result = sub_1000AADF0(v21, a5, a6);
    uint64_t v17 = v22;
    a4 = result;
    if ((a6 & 0x1000000000000000) == 0) {
      goto LABEL_11;
    }
  }
  else if ((a6 & 0x1000000000000000) == 0)
  {
LABEL_11:
    unint64_t result = (a4 >> 16) - (v11 >> 16);
    goto LABEL_22;
  }
  unint64_t v23 = a5 & 0xFFFFFFFFFFFFLL;
  if ((a6 & 0x2000000000000000) != 0) {
    unint64_t v23 = v17;
  }
  if (v23 < v11 >> 16) {
    goto LABEL_92;
  }
  if (v23 < a4 >> 16)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  unint64_t result = String.UTF8View._foreignDistance(from:to:)();
LABEL_22:
  uint64_t v24 = v18 + result;
  if (__OFADD__(v18, result))
  {
    __break(1u);
    goto LABEL_91;
  }
  if (v24 < v18)
  {
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  unsigned __int8 v25 = (unsigned __int8 *)(v12 + v18);
  if (!v12) {
    unsigned __int8 v25 = 0;
  }
  int v26 = *v25;
  if (v26 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        unsigned __int8 v37 = a7 + 48;
        unsigned __int8 v38 = a7 + 55;
        unsigned __int8 v39 = a7 + 87;
        if (a7 > 10)
        {
          unsigned __int8 v37 = 58;
        }
        else
        {
          unsigned __int8 v39 = 97;
          unsigned __int8 v38 = 65;
        }
        if (v25)
        {
          uint64_t v30 = 0;
          uint64_t v40 = v25 + 1;
          uint64_t v41 = result - 1;
          do
          {
            unsigned int v42 = *v40;
            if (v42 < 0x30 || v42 >= v37)
            {
              if (v42 < 0x41 || v42 >= v38)
              {
                uint64_t v35 = 0;
                if (v42 < 0x61 || v42 >= v39) {
                  return v35;
                }
                char v43 = -87;
              }
              else
              {
                char v43 = -55;
              }
            }
            else
            {
              char v43 = -48;
            }
            uint64_t v44 = v30 * a7;
            if ((unsigned __int128)(v30 * (__int128)a7) >> 64 != (v30 * a7) >> 63) {
              return 0;
            }
            uint64_t v30 = v44 + (v42 + v43);
            if (__OFADD__(v44, (v42 + v43))) {
              return 0;
            }
            ++v40;
            --v41;
          }
          while (v41);
          return v30;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_95;
  }
  if (v26 != 45)
  {
    if (v24 != v18)
    {
      unsigned __int8 v45 = a7 + 48;
      unsigned __int8 v46 = a7 + 55;
      unsigned __int8 v47 = a7 + 87;
      if (a7 > 10)
      {
        unsigned __int8 v45 = 58;
      }
      else
      {
        unsigned __int8 v47 = 97;
        unsigned __int8 v46 = 65;
      }
      if (v25)
      {
        uint64_t v48 = 0;
        do
        {
          unsigned int v49 = *v25;
          if (v49 < 0x30 || v49 >= v45)
          {
            if (v49 < 0x41 || v49 >= v46)
            {
              uint64_t v35 = 0;
              if (v49 < 0x61 || v49 >= v47) {
                return v35;
              }
              char v50 = -87;
            }
            else
            {
              char v50 = -55;
            }
          }
          else
          {
            char v50 = -48;
          }
          uint64_t v51 = v48 * a7;
          if ((unsigned __int128)(v48 * (__int128)a7) >> 64 != (v48 * a7) >> 63) {
            return 0;
          }
          uint64_t v48 = v51 + (v49 + v50);
          if (__OFADD__(v51, (v49 + v50))) {
            return 0;
          }
          ++v25;
          --result;
        }
        while (result);
        return v51 + (v49 + v50);
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      unsigned __int8 v27 = a7 + 48;
      unsigned __int8 v28 = a7 + 55;
      unsigned __int8 v29 = a7 + 87;
      if (a7 > 10)
      {
        unsigned __int8 v27 = 58;
      }
      else
      {
        unsigned __int8 v29 = 97;
        unsigned __int8 v28 = 65;
      }
      if (v25)
      {
        uint64_t v30 = 0;
        char v31 = v25 + 1;
        uint64_t v32 = result - 1;
        while (1)
        {
          unsigned int v33 = *v31;
          if (v33 < 0x30 || v33 >= v27)
          {
            if (v33 < 0x41 || v33 >= v28)
            {
              uint64_t v35 = 0;
              if (v33 < 0x61 || v33 >= v29) {
                return v35;
              }
              char v34 = -87;
            }
            else
            {
              char v34 = -55;
            }
          }
          else
          {
            char v34 = -48;
          }
          uint64_t v36 = v30 * a7;
          if ((unsigned __int128)(v30 * (__int128)a7) >> 64 != (v30 * a7) >> 63) {
            return 0;
          }
          uint64_t v30 = v36 - (v33 + v34);
          if (__OFSUB__(v36, (v33 + v34))) {
            return 0;
          }
          ++v31;
          if (!--v32) {
            return v30;
          }
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
  return result;
}

unint64_t sub_1000AC9E8(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFFFFCLL | v1 & 3;
}

id sub_1000ACA00()
{
  id result = [self defaultCenter];
  qword_100181F50 = (uint64_t)result;
  return result;
}

void *sub_1000ACA3C(uint64_t a1, uint64_t a2)
{
  uint64_t v42 = type metadata accessor for Notification();
  uint64_t v4 = *(void *)(v42 - 8);
  uint64_t v5 = __chkstk_darwin(v42);
  uint64_t v40 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v39 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  unint64_t v10 = "Handler";
  uint64_t v41 = v4;
  if (v9)
  {
    uint64_t v39 = a2;
    unint64_t v11 = (void *)LNTranscriptChangedNotification;
    long long v45 = 0u;
    long long v46 = 0u;
    sub_10000BF1C(&qword_10017DF80);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10013F1D0;
    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v44 = v13;
    id v14 = v11;
    sub_1000949B4();
    *(void *)(inited + 96) = &type metadata for Int;
    *(void *)(inited + 72) = 0;
    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v44 = v15;
    sub_1000949B4();
    unint64_t v16 = sub_1000948BC();
    swift_bridgeObjectRetain();
    sub_100049CCC();
    uint64_t v18 = v17;
    swift_bridgeObjectRelease();
    sub_100053DA4(v18);
    swift_release();
    id v19 = sub_10000A720();
    *(void *)(inited + 168) = v16;
    *(void *)(inited + 144) = v19;
    Dictionary.init(dictionaryLiteral:)();
    Notification.init(name:object:userInfo:)();
    uint64_t v20 = (void *)sub_10001ED30(0, 1, 1, (uint64_t)_swiftEmptyArrayStorage);
    unint64_t v22 = v20[2];
    unint64_t v21 = v20[3];
    if (v22 >= v21 >> 1) {
      uint64_t v20 = (void *)sub_100094990(v21);
    }
    uint64_t v24 = v41;
    uint64_t v23 = v42;
    v20[2] = v22 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v24 + 32))((unint64_t)v20+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(void *)(v24 + 72) * v22, v8, v23);
    a2 = v39;
    unint64_t v10 = "XPCEventHandler" + 8;
  }
  else
  {
    uint64_t v20 = _swiftEmptyArrayStorage;
  }
  if (*(void *)(a2 + 16))
  {
    unsigned __int8 v25 = (void *)LNTranscriptChangedNotification;
    long long v45 = 0u;
    long long v46 = 0u;
    sub_10000BF1C(&qword_10017DF80);
    uint64_t v26 = swift_initStackObject();
    *(_OWORD *)(v26 + 16) = *((_OWORD *)v10 + 29);
    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v44 = v27;
    id v28 = v25;
    sub_1000949D4();
    *(void *)(v26 + 96) = &type metadata for Int;
    *(void *)(v26 + 72) = 1;
    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v44 = v29;
    sub_1000949D4();
    unint64_t v30 = sub_1000948BC();
    swift_bridgeObjectRetain();
    sub_100049CCC();
    uint64_t v32 = v31;
    swift_bridgeObjectRelease();
    sub_100053DA4(v32);
    swift_release();
    id v33 = sub_10000A720();
    *(void *)(v26 + 168) = v30;
    *(void *)(v26 + 144) = v33;
    Dictionary.init(dictionaryLiteral:)();
    char v34 = v40;
    Notification.init(name:object:userInfo:)();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v20 = (void *)sub_10001ED30(0, v20[2] + 1, 1, (uint64_t)v20);
    }
    unint64_t v36 = v20[2];
    unint64_t v35 = v20[3];
    uint64_t v37 = v41;
    if (v36 >= v35 >> 1) {
      uint64_t v20 = (void *)sub_100094990(v35);
    }
    v20[2] = v36 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v37 + 32))((unint64_t)v20+ ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80))+ *(void *)(v37 + 72) * v36, v34, v42);
  }
  return v20;
}

ValueMetadata *type metadata accessor for NotifyingTranscriptObserver()
{
  return &type metadata for NotifyingTranscriptObserver;
}

void *sub_1000ACEA0(uint64_t a1, uint64_t a2)
{
  if (qword_10017C490 != -1) {
LABEL_50:
  }
    swift_once();
  uint64_t v4 = (void *)qword_100181F58;
  NSString v5 = sub_1000AE0C8();
  id v6 = [v4 localizedStringForLocaleIdentifier:v5];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (qword_10017C498 != -1) {
    swift_once();
  }
  uint64_t v7 = (void *)qword_100181F60;
  NSString v8 = sub_1000AE0C8();
  id v9 = [v7 localizedStringForLocaleIdentifier:v8];

  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v86 = (void *)v10;
  if (qword_10017C4A8 != -1) {
    swift_once();
  }
  NSString v11 = sub_1000AE0C8();
  id v12 = sub_1000AE120((uint64_t)v11);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v68 = sub_10001B398();
  unint64_t v69 = v68;
  unint64_t v76 = v68;
  unint64_t v67 = v68;
  uint64_t v75 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (qword_10017C4A0 != -1) {
    swift_once();
  }
  if ((qword_100181F68 & 0xC000000000000001) != 0)
  {
    uint64_t v71 = 0;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    unint64_t v15 = __CocoaDictionary.makeIterator()() | 0x8000000000000000;
  }
  else
  {
    uint64_t v16 = -1 << *(unsigned char *)(qword_100181F68 + 32);
    uint64_t v13 = ~v16;
    uint64_t v71 = qword_100181F68 + 64;
    uint64_t v17 = -v16;
    if (v17 < 64) {
      uint64_t v18 = ~(-1 << v17);
    }
    else {
      uint64_t v18 = -1;
    }
    unint64_t v14 = v18 & *(void *)(qword_100181F68 + 64);
    unint64_t v15 = qword_100181F68;
  }
  swift_bridgeObjectRetain();
  int64_t v19 = 0;
  int64_t v70 = (unint64_t)(v13 + 64) >> 6;
  uint64_t v20 = _swiftEmptyArrayStorage;
  uint64_t v73 = a1;
  unint64_t v74 = v15;
  uint64_t v72 = a2;
  while (1)
  {
    int64_t v84 = v19;
    if ((v15 & 0x8000000000000000) == 0) {
      break;
    }
    if (!__CocoaDictionary.Iterator.next()()) {
      goto LABEL_47;
    }
    sub_1000AE038();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v24 = v86;
    swift_unknownObjectRelease();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v25 = v86;
    swift_unknownObjectRelease();
    int64_t v23 = v84;
LABEL_35:
    if (!v24) {
      goto LABEL_47;
    }
    unint64_t v81 = v14;
    int64_t v82 = v23;
    uint64_t v83 = v20;
    NSString v31 = sub_1000AE0C8();
    uint64_t v79 = v25;
    id v32 = [v25 localizedStringForLocaleIdentifier:v31, v67, v68, v69];

    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v35 = v34;

    uint64_t v36 = qword_10017C4B0;
    swift_bridgeObjectRetain();
    if (v36 != -1) {
      swift_once();
    }
    NSString v37 = sub_1000AE0C8();
    id v38 = sub_1000AE120((uint64_t)v37);

    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v41 = v40;

    uint64_t v78 = v33;
    v42._uint64_t countAndFlagsBits = v33;
    v42._unint64_t object = v35;
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    uint64_t v77 = v39;
    uint64_t v85 = v41;
    NSString v43 = sub_1000AE0C8();
    char v80 = v24;
    id v44 = [v24 localizedStringForLocaleIdentifier:v43];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    a1 = 0x7265626D756E7B24;
    sub_1000AE108();
    uint64_t v45 = sub_1000AE0E0();
    a2 = v46;
    uint64_t v86 = (void *)v75;
    sub_1000AE108();
    unint64_t v67 = v76;
    uint64_t v47 = sub_1000AE0E0();
    uint64_t v49 = v48;
    swift_bridgeObjectRelease();
    sub_10000BF1C((uint64_t *)&unk_10017E690);
    uint64_t v50 = swift_allocObject();
    *(_OWORD *)(v50 + 16) = xmmword_10013EF20;
    *(void *)(v50 + 32) = v45;
    *(void *)(v50 + 40) = a2;
    uint64_t v51 = swift_allocObject();
    *(_OWORD *)(v51 + 16) = xmmword_10013EF20;
    *(void *)(v51 + 32) = v47;
    *(void *)(v51 + 40) = v49;
    unint64_t v52 = v83;
    uint64_t v53 = v83[2];
    if (__OFADD__(v53, 2))
    {
      __break(1u);
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    uint64_t v54 = v51;
    if (!swift_isUniquelyReferenced_nonNull_native() || v53 + 2 > v83[3] >> 1)
    {
      sub_10001ED78();
      unint64_t v52 = v55;
    }
    a2 = v72;
    a1 = v73;
    unint64_t v56 = v52[2];
    unint64_t v57 = v52[3];
    uint64_t v58 = v52;
    unint64_t v59 = v56 + 1;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v56 >= v57 >> 1)
    {
      sub_10001ED78();
      uint64_t v58 = v64;
    }
    v58[2] = v59;
    uint64_t v60 = &v58[8 * v56];
    v60[4] = 0;
    v60[5] = 0xE000000000000000;
    v60[6] = 0;
    v60[7] = 0xE000000000000000;
    v60[8] = v78;
    v60[9] = v35;
    v60[10] = v50;
    *((_WORD *)v60 + 44) = 0;
    unint64_t v61 = v56 + 2;
    unint64_t v62 = v58[3];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v59 >= v62 >> 1)
    {
      sub_10001ED78();
      uint64_t v58 = v65;
    }
    v58[2] = v61;
    uint64_t v63 = &v58[8 * v59];
    uint64_t v20 = v58;
    v63[4] = 0;
    v63[5] = 0xE000000000000000;
    v63[6] = 0;
    v63[7] = 0xE000000000000000;
    v63[8] = v77;
    v63[9] = v85;
    v63[10] = v54;
    *((_WORD *)v63 + 44) = 0;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    unint64_t v14 = v81;
    int64_t v19 = v82;
    unint64_t v15 = v74;
  }
  if (v14)
  {
    unint64_t v21 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    unint64_t v22 = v21 | (v19 << 6);
    int64_t v23 = v19;
LABEL_34:
    uint64_t v29 = *(void **)(*(void *)(v15 + 48) + 8 * v22);
    unint64_t v30 = *(void **)(*(void *)(v15 + 56) + 8 * v22);
    id v24 = v29;
    id v25 = v30;
    goto LABEL_35;
  }
  int64_t v26 = v19 + 1;
  if (__OFADD__(v19, 1)) {
    goto LABEL_49;
  }
  if (v26 >= v70) {
    goto LABEL_47;
  }
  unint64_t v27 = *(void *)(v71 + 8 * v26);
  int64_t v23 = v19 + 1;
  if (v27) {
    goto LABEL_33;
  }
  int64_t v23 = v19 + 2;
  if (v19 + 2 >= v70) {
    goto LABEL_47;
  }
  unint64_t v27 = *(void *)(v71 + 8 * v23);
  if (v27) {
    goto LABEL_33;
  }
  int64_t v23 = v19 + 3;
  if (v19 + 3 >= v70) {
    goto LABEL_47;
  }
  unint64_t v27 = *(void *)(v71 + 8 * v23);
  if (v27) {
    goto LABEL_33;
  }
  int64_t v23 = v19 + 4;
  if (v19 + 4 >= v70) {
    goto LABEL_47;
  }
  unint64_t v27 = *(void *)(v71 + 8 * v23);
  if (v27)
  {
LABEL_33:
    unint64_t v14 = (v27 - 1) & v27;
    unint64_t v22 = __clz(__rbit64(v27)) + (v23 << 6);
    goto LABEL_34;
  }
  int64_t v28 = v19 + 5;
  while (v28 < v70)
  {
    unint64_t v27 = *(void *)(v71 + 8 * v28++);
    if (v27)
    {
      int64_t v23 = v28 - 1;
      goto LABEL_33;
    }
  }
LABEL_47:
  sub_100027664();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v20;
}

id sub_1000AD6E8(uint64_t a1)
{
  return sub_1000AD750(a1, 0x80000001001450E0, 0x7265626D756E7B24, 0xE90000000000007DLL, &qword_100181F58);
}

id sub_1000AD71C(uint64_t a1)
{
  return sub_1000AD750(a1, 0x8000000100145090, 0xD000000000000015, 0x80000001001450C0, &qword_100181F60);
}

id sub_1000AD750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v9 - 8);
  NSString v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for URL();
  sub_10000D5B0((uint64_t)v11, 1, 1, v12);
  id v13 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  id result = sub_1000A64B4(0xD000000000000029, a2, a3, a4, 0, 0, (uint64_t)v11);
  *a5 = result;
  return result;
}

uint64_t sub_1000AD830()
{
  uint64_t v0 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = &v22[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000BF1C(&qword_10017F4C0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001408F0;
  uint64_t v4 = type metadata accessor for URL();
  sub_10000D5B0((uint64_t)v2, 1, 1, v4);
  id v5 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  *(void *)(inited + 32) = sub_1000A64B4(0xD000000000000020, 0x8000000100144D00, 7305076, 0xE300000000000000, 0, 0, (uint64_t)v2);
  sub_10000D5B0((uint64_t)v2, 1, 1, v4);
  id v6 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  *(void *)(inited + 40) = sub_1000A64B4(0xD000000000000023, 0x8000000100144D30, 50, 0xE100000000000000, 0, 0, (uint64_t)v2);
  sub_10000D5B0((uint64_t)v2, 1, 1, v4);
  id v7 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  *(void *)(inited + 48) = sub_1000A64B4(0xD000000000000021, 0x8000000100144D60, 1920298854, 0xE400000000000000, 0, 0, (uint64_t)v2);
  sub_10000D5B0((uint64_t)v2, 1, 1, v4);
  id v8 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  *(void *)(inited + 56) = sub_1000A64B4(0xD000000000000024, 0x8000000100144D90, 52, 0xE100000000000000, 0, 0, (uint64_t)v2);
  sub_10000D5B0((uint64_t)v2, 1, 1, v4);
  id v9 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  *(void *)(inited + 64) = sub_1000A64B4(0xD000000000000025, 0x8000000100144DC0, 0x6E65657472696874, 0xE800000000000000, 0, 0, (uint64_t)v2);
  sub_10000D5B0((uint64_t)v2, 1, 1, v4);
  id v10 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  *(void *)(inited + 72) = sub_1000A64B4(0xD000000000000028, 0x8000000100144DF0, 13105, 0xE200000000000000, 0, 0, (uint64_t)v2);
  sub_10000D5B0((uint64_t)v2, 1, 1, v4);
  id v11 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  *(void *)(inited + 80) = sub_1000A64B4(0xD000000000000026, 0x8000000100144E20, 0x6E6F79746E657774, 0xE900000000000065, 0, 0, (uint64_t)v2);
  sub_10000D5B0((uint64_t)v2, 1, 1, v4);
  id v12 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  *(void *)(inited + 88) = sub_1000A64B4(0xD000000000000029, 0x8000000100144E50, 12594, 0xE200000000000000, 0, 0, (uint64_t)v2);
  sub_10000D5B0((uint64_t)v2, 1, 1, v4);
  id v13 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  *(void *)(inited + 96) = sub_1000A64B4(0xD000000000000023, 0x8000000100144E80, 0x797472696874, 0xE600000000000000, 0, 0, (uint64_t)v2);
  sub_10000D5B0((uint64_t)v2, 1, 1, v4);
  id v14 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  *(void *)(inited + 104) = sub_1000A64B4(0xD000000000000026, 0x8000000100144EB0, 12339, 0xE200000000000000, 0, 0, (uint64_t)v2);
  sub_10000D5B0((uint64_t)v2, 1, 1, v4);
  id v15 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  *(void *)(inited + 112) = sub_1000A64B4(0xD00000000000002ELL, 0x8000000100144EE0, 0xD000000000000011, 0x8000000100144F10, 0, 0, (uint64_t)v2);
  sub_10000D5B0((uint64_t)v2, 1, 1, v4);
  id v16 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  *(void *)(inited + 120) = sub_1000A64B4(0xD000000000000031, 0x8000000100144F30, 3159345, 0xE300000000000000, 0, 0, (uint64_t)v2);
  sub_10000D5B0((uint64_t)v2, 1, 1, v4);
  id v17 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  *(void *)(inited + 128) = sub_1000A64B4(0xD00000000000002BLL, 0x8000000100144F70, 0x6E696F70206F7774, 0xEE00657669662074, 0, 0, (uint64_t)v2);
  sub_10000D5B0((uint64_t)v2, 1, 1, v4);
  id v18 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  *(void *)(inited + 136) = sub_1000A64B4(0xD00000000000002ELL, 0x8000000100144FA0, 3485234, 0xE300000000000000, 0, 0, (uint64_t)v2);
  sub_10000D5B0((uint64_t)v2, 1, 1, v4);
  id v19 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  *(void *)(inited + 144) = sub_1000A64B4(0xD00000000000002FLL, 0x8000000100144FD0, 0xD000000000000012, 0x8000000100145000, 0, 0, (uint64_t)v2);
  sub_10000D5B0((uint64_t)v2, 1, 1, v4);
  id v20 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  *(void *)(inited + 152) = sub_1000A64B4(0xD000000000000032, 0x8000000100145020, 875444017, 0xE400000000000000, 0, 0, (uint64_t)v2);
  sub_1000AE038();
  sub_1000AE078();
  uint64_t result = Dictionary.init(dictionaryLiteral:)();
  qword_100181F68 = result;
  return result;
}

id sub_1000ADE94()
{
  uint64_t v0 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URL();
  sub_10000D5B0((uint64_t)v2, 1, 1, v3);
  id v4 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  id result = sub_1000A64B4(0xD000000000000025, 0x8000000100145060, 0x657669746167656ELL, 0xE800000000000000, 0, 0, (uint64_t)v2);
  qword_100181F70 = (uint64_t)result;
  return result;
}

id sub_1000ADF6C()
{
  uint64_t v0 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URL();
  sub_10000D5B0((uint64_t)v2, 1, 1, v3);
  id v4 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  id result = sub_1000A64B4(0xD000000000000028, 0x8000000100144CD0, 45, 0xE100000000000000, 0, 0, (uint64_t)v2);
  qword_100181F78 = (uint64_t)result;
  return result;
}

unint64_t sub_1000AE038()
{
  unint64_t result = qword_10017EDC0;
  if (!qword_10017EDC0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10017EDC0);
  }
  return result;
}

unint64_t sub_1000AE078()
{
  unint64_t result = qword_10017F4C8;
  if (!qword_10017F4C8)
  {
    sub_1000AE038();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10017F4C8);
  }
  return result;
}

NSString sub_1000AE0C8()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_1000AE0E0()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t sub_1000AE108()
{
  *(void *)(v4 - 120) = v0;
  *(void *)(v4 - 112) = v1;
  *(void *)(v4 - 136) = v3;
  *(void *)(v4 - 128) = v2;
  return v4 - 120;
}

id sub_1000AE120(uint64_t a1)
{
  uint64_t v4 = *(const char **)(v2 + 376);
  return [v1 v4:a1];
}

void sub_1000AE140(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  unint64_t v5 = 0;
  uint64_t v6 = a1 + 32;
  while (v5 < *(void *)(v3 + 16))
  {
    uint64_t v7 = v5++;
    uint64_t v8 = *(void *)(a2 + 16);
    if (!v8) {
      goto LABEL_11;
    }
    id v9 = (uint64_t *)(v6 + 24 * v7);
    int v10 = *((_DWORD *)v9 + 4);
    if (*(_DWORD *)(a2 + 32) == v10)
    {
LABEL_13:
      uint64_t v13 = v9[1];
      uint64_t v17 = *v9;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_100057E60();
      }
      unint64_t v14 = _swiftEmptyArrayStorage[2];
      if (v14 >= _swiftEmptyArrayStorage[3] >> 1) {
        sub_100057E60();
      }
      _swiftEmptyArrayStorage[2] = v14 + 1;
      id v15 = &_swiftEmptyArrayStorage[3 * v14];
      uint64_t v3 = a1;
      v15[4] = v17;
      v15[5] = v13;
      *((_DWORD *)v15 + 12) = v10;
      if (v5 == v4) {
        goto LABEL_18;
      }
    }
    else
    {
      if (v8 != 1)
      {
        uint64_t v11 = 9;
        while (1)
        {
          uint64_t v12 = v11 - 7;
          if (__OFADD__(v11 - 8, 1)) {
            break;
          }
          if (*(_DWORD *)(a2 + 4 * v11) == v10) {
            goto LABEL_13;
          }
          ++v11;
          if (v12 == v8) {
            goto LABEL_11;
          }
        }
        __break(1u);
        break;
      }
LABEL_11:
      if (v5 == v4) {
        goto LABEL_18;
      }
    }
  }
  __break(1u);
}

void sub_1000AE2D4(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = type metadata accessor for ObservationStatusRegistry.ObservationStatusChangeListener();
  uint64_t v5 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  int v10 = (char *)v20 - v9;
  id v25 = _swiftEmptyArrayStorage;
  uint64_t v24 = *(void *)(a1 + 16);
  if (!v24)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  v20[1] = v2;
  unint64_t v21 = v7;
  unint64_t v11 = 0;
  uint64_t v22 = a1;
  while (v11 < *(void *)(a1 + 16))
  {
    unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v13 = *(void *)(v5 + 72);
    sub_100018800(a1 + v12 + v13 * v11, (uint64_t)v10);
    uint64_t v14 = *(void *)(a2 + 16);
    if (v14)
    {
      int v15 = *(_DWORD *)&v10[*(int *)(v23 + 20)];
      if (*(_DWORD *)(a2 + 32) == v15)
      {
LABEL_6:
        sub_1000B1928((uint64_t)v10, (uint64_t)v7);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_100057DFC();
        }
        id v16 = v25;
        unint64_t v17 = v25[2];
        if (v17 >= v25[3] >> 1)
        {
          sub_100057DFC();
          id v16 = v25;
        }
        v16[2] = v17 + 1;
        uint64_t v7 = v21;
        sub_1000B1928((uint64_t)v21, (uint64_t)v16 + v12 + v17 * v13);
        a1 = v22;
        goto LABEL_17;
      }
      if (v14 != 1)
      {
        uint64_t v18 = 9;
        while (1)
        {
          uint64_t v19 = v18 - 7;
          if (__OFADD__(v18 - 8, 1)) {
            break;
          }
          if (*(_DWORD *)(a2 + 4 * v18) == v15) {
            goto LABEL_6;
          }
          ++v18;
          if (v19 == v14) {
            goto LABEL_16;
          }
        }
        __break(1u);
        break;
      }
    }
LABEL_16:
    sub_100018864((uint64_t)v10);
LABEL_17:
    if (++v11 == v24) {
      goto LABEL_18;
    }
  }
  __break(1u);
}

uint64_t sub_1000AE524()
{
  uint64_t v1 = type metadata accessor for CocoaError.Code();
  sub_10000E948();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_1000B1B34();
  uint64_t v5 = type metadata accessor for URL();
  sub_10000E948();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_1000B1B18();
  uint64_t v10 = __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v35 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v35 - v13;
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  uint64_t v46 = PropertyListDecoder.init()();
  sub_1000AF01C((uint64_t)v14);
  uint64_t v40 = v3;
  uint64_t v43 = v0;
  uint64_t v44 = v1;
  if (qword_10017C478 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v16 = sub_10000BEE4(v15, (uint64_t)qword_100181F20);
  unint64_t v17 = *(void (**)(void, void, void))(v7 + 16);
  uint64_t v45 = v14;
  NSString v37 = v17;
  uint64_t v38 = v7 + 16;
  v17(v12, v14, v5);
  uint64_t v39 = v16;
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.info.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  uint64_t v42 = v7;
  if (v20)
  {
    unint64_t v21 = (uint8_t *)sub_1000536D0();
    uint64_t v36 = sub_100060438();
    uint64_t v48 = v36;
    *(_DWORD *)unint64_t v21 = 136315138;
    uint64_t v41 = (void (*)(char *, uint64_t))(v21 + 4);
    sub_1000B198C((unint64_t *)&qword_10017DD50, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v47 = sub_100013090(v22, v23, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v41 = *(void (**)(char *, uint64_t))(v7 + 8);
    sub_1000B1B88();
    v24();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Loading from %s", v21, 0xCu);
    swift_arrayDestroy();
    sub_10000EB10();
    sub_10000EB10();
  }
  else
  {
    uint64_t v41 = *(void (**)(char *, uint64_t))(v7 + 8);
    v41(v12, v5);
  }

  uint64_t v25 = Data.init(contentsOf:options:)();
  unint64_t v27 = v26;
  sub_10000BF1C(&qword_10017F4E0);
  sub_1000B19D4(&qword_10017F500, (void (*)(void))sub_1000B1A50);
  uint64_t v28 = dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  uint64_t v30 = v48;
  __chkstk_darwin(v28);
  *(&v35 - 2) = v30;
  id v32 = v31 + 4;
  uint64_t v33 = v5;
  char v34 = v31 + 6;
  os_unfair_lock_lock(v31 + 6);
  sub_1000B1A9C(v32);
  os_unfair_lock_unlock(v34);
  sub_1000172E0(v30);
  sub_10000DA10(v25, v27);
  swift_bridgeObjectRelease();
  v41(v45, v33);
  sub_1000AF504();
  return swift_release();
}

void sub_1000AEDD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (a5)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t sub_1000AEE88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v12 = a1 == a5 && a2 == a6;
  if (v12 || (char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v13 & 1) != 0))
  {
    if (a4)
    {
      if (a8)
      {
        BOOL v15 = a3 == a7 && a4 == a8;
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          return 1;
        }
      }
    }
    else if (!a8)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

Swift::Int sub_1000AEF24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Hasher.init(_seed:)();
  sub_1000AEDD4((uint64_t)v9, a1, a2, a3, a4);
  return Hasher._finalize()();
}

Swift::Int sub_1000AEF8C()
{
  return sub_1000AEF24(*v0, v0[1], v0[2], v0[3]);
}

void sub_1000AEF98(uint64_t a1)
{
  sub_1000AEDD4(a1, *v1, v1[1], v1[2], v1[3]);
}

Swift::Int sub_1000AEFA4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  Hasher.init(_seed:)();
  sub_1000AEDD4((uint64_t)v6, v1, v2, v4, v3);
  return Hasher._finalize()();
}

uint64_t sub_1000AF000(uint64_t *a1, uint64_t *a2)
{
  return sub_1000AEE88(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t sub_1000AF01C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v43 = a1;
  type metadata accessor for UTType();
  sub_10000E948();
  uint64_t v44 = v4;
  uint64_t v45 = v3;
  __chkstk_darwin(v3);
  sub_1000B1BD0();
  uint64_t v42 = v5;
  type metadata accessor for UUID();
  sub_10000E948();
  uint64_t v40 = v7;
  uint64_t v41 = v6;
  __chkstk_darwin(v6);
  sub_1000B1BD0();
  uint64_t v39 = v8;
  uint64_t v9 = type metadata accessor for URL.DirectoryHint();
  sub_10000E948();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  sub_1000B1B34();
  uint64_t v46 = type metadata accessor for URL();
  sub_10000E948();
  __chkstk_darwin(v13);
  sub_1000B1B18();
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v39 - v15;
  unint64_t v17 = self;
  id v18 = [v17 defaultManager];
  v47[0] = 0;
  id v19 = [v18 URLForDirectory:13 inDomain:1 appropriateForURL:0 create:1 error:v47];

  id v20 = v47[0];
  if (v19)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    id v21 = v20;

    v47[0] = (id)0x6C7070612E6D6F63;
    v47[1] = (id)0xEF646B6E696C2E65;
    (*(void (**)(uint64_t, void, uint64_t))(v11 + 104))(v2, enum case for URL.DirectoryHint.isDirectory(_:), v9);
    sub_10001B398();
    URL.appending<A>(component:directoryHint:)();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v2, v9);
    swift_bridgeObjectRelease();
    id v22 = [v17 defaultManager];
    URL._bridgeToObjectiveC()(v23);
    uint64_t v25 = v24;
    v47[0] = 0;
    unsigned __int8 v26 = [v22 createDirectoryAtURL:v24 withIntermediateDirectories:1 attributes:0 error:v47];

    id v27 = v47[0];
    if (v26)
    {
      uint64_t v28 = self;
      id v29 = v27;
      id v30 = [v28 bootUUID];
      uint64_t v31 = v39;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      UUID.uuidString.getter();
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v31, v41);
      id v32 = (void (*)(uint64_t))sub_1000AF484();
      swift_bridgeObjectRelease();
      uint64_t v33 = v42;
      static UTType.data.getter();
      URL.appendingPathComponent(_:conformingTo:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v33, v45);
      uint64_t v34 = sub_1000B1B6C();
      v32(v34);
      return ((uint64_t (*)(char *, uint64_t))v32)(v16, v1);
    }
    else
    {
      id v37 = v47[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
      uint64_t v38 = sub_1000B1B6C();
      ((void (*)(uint64_t))v27)(v38);
      return ((uint64_t (*)(char *, id))v27)(v16, v37);
    }
  }
  else
  {
    id v36 = v47[0];
    _convertNSErrorToError(_:)();

    return swift_willThrow();
  }
}

uint64_t sub_1000AF484()
{
  swift_bridgeObjectRetain();
  uint64_t v1 = String.init<A>(_:)();
  String.append<A>(contentsOf:)();
  return v1;
}

void sub_1000AF504()
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v2 = sub_10000BF1C(&qword_10017DCC0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10LinkDaemon25ObservationStatusRegistry_persistOperationQueued);
  uint64_t v6 = (char *)&v5[4];
  uint64_t v7 = v5 + 5;
  os_unfair_lock_lock(v5 + 5);
  sub_1000AF7D0(v6, &v21);
  os_unfair_lock_unlock(v7);
  if (v21)
  {
    if (qword_10017C478 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10000BEE4(v8, (uint64_t)qword_100181F20);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Queuing task to persist after 5 seconds", v11, 2u);
      sub_10000EB10();
    }

    uint64_t v12 = type metadata accessor for TaskPriority();
    sub_10000D5B0((uint64_t)v4, 1, 1, v12);
    uint64_t v13 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v14 = (void *)swift_allocObject();
    v14[2] = 0;
    void v14[3] = 0;
    v14[4] = v13;
    v14[5] = ObjectType;
    sub_1000B05FC((uint64_t)v4, (uint64_t)&unk_10017F4D8, (uint64_t)v14);
    swift_release();
  }
  else
  {
    if (qword_10017C478 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_10000BEE4(v15, (uint64_t)qword_100181F20);
    os_log_t v20 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v20, v16))
    {
      unint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v16, "Task to persist already queued - skipping...", v17, 2u);
      sub_10000EB10();
    }
    os_log_t v18 = v20;
  }
}

char *sub_1000AF7D0@<X0>(char *result@<X0>, BOOL *a2@<X8>)
{
  char v2 = *result;
  *uint64_t result = 1;
  *a2 = (v2 & 1) == 0;
  return result;
}

uint64_t sub_1000AF7E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[10] = a4;
  v5[11] = a5;
  uint64_t v6 = type metadata accessor for URL();
  v5[12] = v6;
  v5[13] = *(void *)(v6 - 8);
  v5[14] = swift_task_alloc();
  v5[15] = swift_task_alloc();
  v5[16] = swift_task_alloc();
  uint64_t v7 = (void *)swift_task_alloc();
  v5[17] = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_1000AF900;
  return static Task<>.sleep(nanoseconds:)(5000000000);
}

uint64_t sub_1000AF900()
{
  sub_100010BAC();
  uint64_t v2 = *v1;
  *(void *)(v3 + 144) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v2 + 8);
    return v4();
  }
  else
  {
    return _swift_task_switch(sub_1000AFA38, 0, 0);
  }
}

void sub_1000AFA38()
{
  uint64_t v44 = v0;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    goto LABEL_23;
  }
  uint64_t v3 = Strong;
  uint64_t v4 = self;
  unint64_t v5 = sub_1000B1814(v4);
  if (!v5) {
    goto LABEL_22;
  }
  unint64_t v6 = v5;
  uint64_t v42 = v3;
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  if (v7)
  {
    if (v7 >= 1)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if ((v6 & 0xC000000000000001) != 0) {
          id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v9 = *(id *)(v6 + 8 * i + 32);
        }
        os_log_type_t v10 = v9;
        LODWORD(v43[0]) = 0;
        BYTE4(v43[0]) = 1;
        static Int32._conditionallyBridgeFromObjectiveC(_:result:)();
      }
      goto LABEL_12;
    }
    __break(1u);
    swift_once();
    uint64_t v18 = type metadata accessor for Logger();
    sub_10000BEE4(v18, (uint64_t)qword_100181F20);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v19))
    {
      os_log_t v20 = (uint8_t *)sub_1000536D0();
      BOOL v21 = (void *)sub_100084E08();
      *(_DWORD *)os_log_t v20 = 138412290;
      swift_errorRetain();
      uint64_t v22 = _swift_stdlib_bridgeErrorToNSError();
      v0[5] = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *BOOL v21 = v22;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v19, "Failure determining store URL: %@", v20, 0xCu);
      sub_10000BF1C((uint64_t *)&unk_10017EB20);
      swift_arrayDestroy();
      sub_10000EB10();
      sub_10000EB10();

      swift_errorRelease();
      goto LABEL_23;
    }

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
LABEL_22:

    goto LABEL_23;
  }
LABEL_12:
  uint64_t v11 = v0[18];
  swift_bridgeObjectRelease_n();
  sub_1000B03F8();
  swift_bridgeObjectRelease();
  uint64_t v12 = *(uint64_t *)((char *)&v3->isa + OBJC_IVAR____TtC10LinkDaemon25ObservationStatusRegistry_persistOperationQueued);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v12 + 20));
  sub_1000B05F4((unsigned char *)(v12 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 20));
  if (v11) {
    return;
  }
  swift_release();
  uint64_t v13 = *(os_unfair_lock_s **)((char *)&v3->isa
                             + OBJC_IVAR____TtC10LinkDaemon25ObservationStatusRegistry_observationEntriesPerBundleIdentifier);
  uint64_t v14 = v13 + 4;
  uint64_t v15 = v13 + 6;
  os_unfair_lock_lock(v13 + 6);
  sub_100017A74(v14, v43);
  os_unfair_lock_unlock(v15);
  os_log_type_t v16 = v0 + 6;
  uint64_t v17 = v43[0];
  sub_1000AF01C(v0[16]);
  if (qword_10017C478 != -1) {
    swift_once();
  }
  uint64_t v24 = v0[15];
  uint64_t v23 = v0[16];
  uint64_t v25 = v0[12];
  uint64_t v26 = v0[13];
  uint64_t v27 = type metadata accessor for Logger();
  sub_10000BEE4(v27, (uint64_t)qword_100181F20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v24, v23, v25);
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v28, v29))
  {
    id v30 = (uint8_t *)sub_1000536D0();
    v43[0] = sub_100060438();
    *(_DWORD *)id v30 = 136315138;
    uint64_t v41 = (void (*)(void, void))(v30 + 4);
    sub_1000B198C((unint64_t *)&qword_10017DD50, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[9] = sub_100013090(v31, v32, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v33 = sub_1000B1B50();
    v34(v33);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Persisting to %s", v30, 0xCu);
    swift_arrayDestroy();
    sub_10000EB10();
    os_log_type_t v16 = v0 + 6;
    sub_10000EB10();
  }
  else
  {
    uint64_t v36 = sub_1000B1B50();
    v37(v36);
  }

  sub_1000172E0(v17);
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  *os_log_type_t v16 = v17;
  sub_10000BF1C(&qword_10017F4E0);
  sub_1000B19D4(&qword_10017F4E8, (void (*)(void))sub_1000B1874);
  uint64_t v38 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  unint64_t v40 = v39;
  swift_release();
  swift_bridgeObjectRelease();
  Data.write(to:options:)();
  v41(v0[16], v0[12]);
  sub_10000DA10(v38, v40);

LABEL_23:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v35 = (void (*)(void))v0[1];
  v35();
}

void sub_1000B03F8()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0
                            + OBJC_IVAR____TtC10LinkDaemon25ObservationStatusRegistry_observationEntriesPerBundleIdentifier);
  uint64_t v2 = (uint64_t *)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1000B18C0(v2, &v23);
  os_unfair_lock_unlock(v3);
  int64_t v4 = 0;
  uint64_t v5 = v23;
  uint64_t v6 = *(void *)(v23 + 64);
  uint64_t v22 = v23 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(v23 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & v6;
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  if ((v8 & v6) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v11 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    os_log_type_t v16 = (uint64_t *)(*(void *)(v5 + 48) + 32 * i);
    uint64_t v17 = *v16;
    unint64_t v18 = v16[1];
    unint64_t v19 = v16[2];
    unint64_t v20 = v16[3];
    uint64_t v21 = *(void *)(*(void *)(v5 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000F1D08(v17, v18, v19, v20, v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v13 >= v10) {
      goto LABEL_21;
    }
    unint64_t v14 = *(void *)(v22 + 8 * v13);
    ++v4;
    if (!v14)
    {
      int64_t v4 = v13 + 1;
      if (v13 + 1 >= v10) {
        goto LABEL_21;
      }
      unint64_t v14 = *(void *)(v22 + 8 * v4);
      if (!v14)
      {
        int64_t v4 = v13 + 2;
        if (v13 + 2 >= v10) {
          goto LABEL_21;
        }
        unint64_t v14 = *(void *)(v22 + 8 * v4);
        if (!v14) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v9 = (v14 - 1) & v14;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v10)
  {
LABEL_21:
    swift_release();
    return;
  }
  unint64_t v14 = *(void *)(v22 + 8 * v15);
  if (v14)
  {
    int64_t v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v4 >= v10) {
      goto LABEL_21;
    }
    unint64_t v14 = *(void *)(v22 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }
LABEL_23:
  __break(1u);
}

unsigned char *sub_1000B05F4(unsigned char *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t sub_1000B05FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  if (sub_10000D5D8(a1, 1, v5) == 1)
  {
    sub_100013C08(a1);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_1000B073C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000AE140(a2, a1);
  uint64_t v7 = v6;
  swift_bridgeObjectRetain();
  sub_1000AE2D4(a3, a1);
  return v7;
}

uint64_t sub_1000B07B8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v3 = a1;
  int v151 = a3;
  uint64_t v4 = *a1;
  uint64_t v5 = *a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(*a1 + 32);
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(*a1 + 64);
  int64_t v179 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v9 = 0;
  uint64_t v174 = _swiftEmptyDictionarySingleton;
  *(void *)&long long v10 = 136315650;
  long long v149 = v10;
  int v148 = (char *)&type metadata for Any + 8;
  *(void *)&long long v10 = 136315394;
  long long v146 = v10;
  while (1)
  {
    do
    {
LABEL_5:
      if (v8)
      {
        unint64_t v11 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v12 = v11 | (v9 << 6);
      }
      else
      {
        int64_t v13 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_100:
          __break(1u);
LABEL_101:
          __break(1u);
LABEL_102:
          __break(1u);
          goto LABEL_103;
        }
        if (v13 >= v179) {
          goto LABEL_98;
        }
        unint64_t v14 = *(void *)(v5 + 8 * v13);
        ++v9;
        if (!v14)
        {
          int64_t v9 = v13 + 1;
          if (v13 + 1 >= v179) {
            goto LABEL_98;
          }
          unint64_t v14 = *(void *)(v5 + 8 * v9);
          if (!v14)
          {
            int64_t v9 = v13 + 2;
            if (v13 + 2 >= v179) {
              goto LABEL_98;
            }
            unint64_t v14 = *(void *)(v5 + 8 * v9);
            if (!v14)
            {
              int64_t v9 = v13 + 3;
              if (v13 + 3 >= v179) {
                goto LABEL_98;
              }
              unint64_t v14 = *(void *)(v5 + 8 * v9);
              if (!v14)
              {
                int64_t v9 = v13 + 4;
                if (v13 + 4 >= v179) {
                  goto LABEL_98;
                }
                unint64_t v14 = *(void *)(v5 + 8 * v9);
                if (!v14)
                {
                  int64_t v15 = v13 + 5;
                  if (v15 >= v179) {
                    goto LABEL_98;
                  }
                  unint64_t v14 = *(void *)(v5 + 8 * v15);
                  if (!v14)
                  {
                    while (1)
                    {
                      int64_t v9 = v15 + 1;
                      if (__OFADD__(v15, 1)) {
                        goto LABEL_105;
                      }
                      if (v9 >= v179) {
                        break;
                      }
                      unint64_t v14 = *(void *)(v5 + 8 * v9);
                      ++v15;
                      if (v14) {
                        goto LABEL_24;
                      }
                    }
LABEL_98:
                    uint64_t result = swift_release();
                    void *v151 = v174;
                    return result;
                  }
                  int64_t v9 = v15;
                }
              }
            }
          }
        }
LABEL_24:
        unint64_t v8 = (v14 - 1) & v14;
        unint64_t v12 = __clz(__rbit64(v14)) + (v9 << 6);
      }
      uint64_t v16 = *v3;
    }
    while (!*(void *)(*v3 + 16));
    uint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v12);
    uint64_t v19 = *v17;
    unint64_t v18 = v17[1];
    swift_bridgeObjectRetain_n();
    uint64_t v26 = sub_100021098(v19, v18, v20, v21, v22, v23, v24, v25, v140, v141, v142, v143, v144, v145, v146, *((uint64_t *)&v146 + 1), v147, (uint64_t)v148, v149,
            *((uint64_t *)&v149 + 1),
            v150,
            (uint64_t)v151,
            v152,
            v153,
            v154,
            v155);
    if (v27) {
      break;
    }
    swift_bridgeObjectRelease_n();
  }
  int64_t v176 = v9;
  uint64_t v153 = v5;
  uint64_t v154 = v4;
  uint64_t v166 = v3;
  uint64_t v28 = (uint64_t *)(*(void *)(v16 + 56) + 24 * v26);
  uint64_t v29 = *v28;
  uint64_t v30 = v28[1];
  uint64_t v31 = v28[2];
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRelease();
  uint64_t v32 = sub_1000B073C(a2, v29, v30);
  uint64_t v167 = v33;
  swift_bridgeObjectRelease();
  uint64_t v155 = v32;
  uint64_t v34 = *(void *)(v32 + 16);
  uint64_t v35 = *(void *)(v29 + 16);
  swift_bridgeObjectRelease();
  uint64_t v181 = v31;
  if (v35 == v34)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v36 = v167;
  }
  else
  {
    swift_bridgeObjectRetain();
    id v37 = sub_100104B94(v19, v18, v29, v30, v31);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v182 = v174;
    sub_10000CEE0(v37, v19, v18, 0, 0, isUniquelyReferenced_nonNull_native);
    uint64_t v174 = v182;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_10017C478 != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    sub_10000BEE4(v39, (uint64_t)qword_100181F20);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    unint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = swift_slowAlloc();
      uint64_t v182 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = v146;
      os_log_type_t v177 = v41;
      swift_bridgeObjectRetain();
      sub_100013090(v19, v18, (uint64_t *)&v182);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v42 + 12) = 2080;
      type metadata accessor for UUID();
      sub_1000B198C((unint64_t *)&qword_10017D340, (void (*)(uint64_t))&type metadata accessor for UUID);
      swift_bridgeObjectRetain();
      uint64_t v43 = Set.description.getter();
      unint64_t v45 = v44;
      swift_bridgeObjectRelease();
      sub_100013090(v43, v45, (uint64_t *)&v182);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v40, v177, "Bundle %s event listeners pruned - posting observation status change for %s", (uint8_t *)v42, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    uint64_t v36 = v167;
    uint64_t v31 = v181;
  }
  uint64_t v46 = *(void *)(v36 + 16);
  BOOL v47 = __OFADD__(v34, v46);
  uint64_t v48 = v34 + v46;
  if (v47)
  {
LABEL_103:
    __break(1u);
    goto LABEL_104;
  }
  uint64_t v173 = v48;
  int64_t v49 = 0;
  uint64_t v178 = v31 + 64;
  uint64_t v50 = 1 << *(unsigned char *)(v31 + 32);
  if (v50 < 64) {
    uint64_t v51 = ~(-1 << v50);
  }
  else {
    uint64_t v51 = -1;
  }
  unint64_t v52 = v51 & *(void *)(v31 + 64);
  int64_t v180 = (unint64_t)(v50 + 63) >> 6;
  uint64_t v53 = (void *)v31;
  while (2)
  {
    if (v52)
    {
      unint64_t v54 = __clz(__rbit64(v52));
      v52 &= v52 - 1;
      unint64_t v55 = v54 | (v49 << 6);
      goto LABEL_61;
    }
    int64_t v56 = v49 + 1;
    if (__OFADD__(v49, 1))
    {
      __break(1u);
      goto LABEL_100;
    }
    int64_t v9 = v176;
    if (v56 >= v180)
    {
LABEL_94:
      swift_release();
      if (v173)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_10004F8DC(v155, v167, (uint64_t)v53, v19, v18);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v138 = sub_1000425CC(v19, v18);
        swift_bridgeObjectRelease();
        sub_1000B18DC(v138);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v5 = v153;
      uint64_t v4 = v154;
      uint64_t v3 = v166;
      goto LABEL_5;
    }
    unint64_t v57 = *(void *)(v178 + 8 * v56);
    ++v49;
    if (v57) {
      goto LABEL_60;
    }
    int64_t v49 = v56 + 1;
    if (v56 + 1 >= v180) {
      goto LABEL_94;
    }
    unint64_t v57 = *(void *)(v178 + 8 * v49);
    if (v57) {
      goto LABEL_60;
    }
    int64_t v49 = v56 + 2;
    if (v56 + 2 >= v180) {
      goto LABEL_94;
    }
    unint64_t v57 = *(void *)(v178 + 8 * v49);
    if (v57) {
      goto LABEL_60;
    }
    int64_t v49 = v56 + 3;
    if (v56 + 3 >= v180) {
      goto LABEL_94;
    }
    unint64_t v57 = *(void *)(v178 + 8 * v49);
    if (v57) {
      goto LABEL_60;
    }
    int64_t v49 = v56 + 4;
    if (v56 + 4 >= v180) {
      goto LABEL_94;
    }
    unint64_t v57 = *(void *)(v178 + 8 * v49);
    if (v57)
    {
LABEL_60:
      unint64_t v52 = (v57 - 1) & v57;
      unint64_t v55 = __clz(__rbit64(v57)) + (v49 << 6);
LABEL_61:
      if (!v53[2]) {
        continue;
      }
      unint64_t v59 = (uint64_t *)(*(void *)(v31 + 48) + 16 * v55);
      uint64_t v61 = *v59;
      unint64_t v60 = v59[1];
      swift_bridgeObjectRetain_n();
      uint64_t v68 = sub_100021098(v61, v60, v62, v63, v64, v65, v66, v67, v140, v141, v142, v143, v144, v145, v146, *((uint64_t *)&v146 + 1), v147, (uint64_t)v148, v149,
              *((uint64_t *)&v149 + 1),
              v150,
              (uint64_t)v151,
              v152,
              v153,
              v154,
              v155);
      if ((v69 & 1) == 0)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v31 = v181;
        continue;
      }
      int64_t v70 = (uint64_t *)(v53[7] + 16 * v68);
      uint64_t v71 = v70[1];
      uint64_t v169 = *v70;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v72 = sub_1000B073C(a2, v169, v71);
      uint64_t v164 = v73;
      uint64_t v165 = v72;
      uint64_t v162 = *(void *)(v72 + 16);
      uint64_t v156 = *(void *)(v169 + 16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v74 = v162;
      if (v156 != v162)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v170 = sub_100105060(v19, v18, v61, v60, v165, v164);
        swift_bridgeObjectRetain();
        HIDWORD(v145) = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v182 = v174;
        unint64_t v79 = sub_1000214F4(v19, v18, v61, v60, v75, v76, v77, v78, v140, v141, v142, v143, v144, v145, v146, *((uint64_t *)&v146 + 1), v147, (uint64_t)v148, v149,
                *((uint64_t *)&v149 + 1),
                v150,
                (uint64_t)v151,
                v152,
                v153,
                v154,
                v155);
        uint64_t v80 = v174[2];
        char v157 = v81;
        BOOL v82 = (v81 & 1) == 0;
        BOOL v47 = __OFADD__(v80, v82);
        Swift::Int v83 = v80 + v82;
        if (v47) {
          goto LABEL_106;
        }
        *(void *)uint64_t v159 = v79;
        Swift::Int v175 = v83;
        sub_10000BF1C(&qword_10017C8D8);
        Swift::Bool v84 = _NativeDictionary.ensureUnique(isUnique:capacity:)(SBYTE4(v145), v175);
        unint64_t v89 = *(void *)v159;
        if (v84)
        {
          unint64_t v90 = sub_1000214F4(v19, v18, v61, v60, v85, v86, v87, v88, v140, v141, v142, v143, v144, v145, v146, *((uint64_t *)&v146 + 1), v147, (uint64_t)v148, v149,
                  *((uint64_t *)&v149 + 1),
                  v150,
                  (uint64_t)v151,
                  v152,
                  v153,
                  v154,
                  v155);
          if ((v157 & 1) != (v91 & 1)) {
            goto LABEL_110;
          }
          unint64_t v89 = v90;
        }
        uint64_t v174 = v182;
        if (v157)
        {
          uint64_t v92 = v182[7];
          *(void *)uint64_t v160 = v89;
          swift_bridgeObjectRelease();
          *(void *)(v92 + 8 * *(void *)v160) = v170;
        }
        else
        {
          v182[(v89 >> 6) + 8] |= 1 << v89;
          uint64_t v93 = (uint64_t *)(v174[6] + 32 * v89);
          uint64_t *v93 = v19;
          v93[1] = v18;
          v93[2] = v61;
          v93[3] = v60;
          *(void *)(v174[7] + 8 * v89) = v170;
          uint64_t v94 = v174[2];
          BOOL v47 = __OFADD__(v94, 1);
          uint64_t v95 = v94 + 1;
          if (v47) {
            goto LABEL_107;
          }
          v174[2] = v95;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (qword_10017C478 != -1) {
          swift_once();
        }
        uint64_t v96 = type metadata accessor for Logger();
        sub_10000BEE4(v96, (uint64_t)qword_100181F20);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        uint64_t v97 = Logger.logObject.getter();
        os_log_type_t v98 = static os_log_type_t.info.getter();
        HIDWORD(v145) = v98;
        if (os_log_type_enabled(v97, v98))
        {
          uint64_t v158 = v97;
          uint64_t v99 = swift_slowAlloc();
          uint64_t v100 = swift_slowAlloc();
          uint64_t v182 = (void *)v100;
          *(_DWORD *)uint64_t v99 = v149;
          uint64_t v143 = v100;
          swift_bridgeObjectRetain();
          sub_100013090(v19, v18, (uint64_t *)&v182);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v99 + 12) = 2080;
          swift_bridgeObjectRetain();
          sub_100013090(v61, v60, (uint64_t *)&v182);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v99 + 22) = 2080;
          uint64_t v142 = v99 + 24;
          type metadata accessor for UUID();
          sub_1000B198C((unint64_t *)&qword_10017D340, (void (*)(uint64_t))&type metadata accessor for UUID);
          swift_bridgeObjectRetain();
          uint64_t v141 = Set.description.getter();
          unint64_t v144 = v101;
          swift_bridgeObjectRelease();
          sub_100013090(v141, v144, (uint64_t *)&v182);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v158, BYTE4(v145), "Entity type %s/%s event listeners pruned - posting observation status change for %s", (uint8_t *)v99, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        uint64_t v74 = v162;
      }
      uint64_t v102 = *(void *)(v164 + 16);
      BOOL v47 = __OFADD__(v74, v102);
      uint64_t v103 = v74 + v102;
      if (v47) {
        goto LABEL_101;
      }
      BOOL v47 = __OFADD__(v173, v103);
      v173 += v103;
      if (v47) {
        goto LABEL_102;
      }
      if (v103)
      {
        char v161 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v182 = v53;
        uint64_t v163 = sub_100021098(v61, v60, v112, v113, v114, v115, v116, v117, v140, v141, v142, v143, v144, v145, v146, *((uint64_t *)&v146 + 1), v147, (uint64_t)v148, v149,
                 *((uint64_t *)&v149 + 1),
                 v150,
                 (uint64_t)v151,
                 v152,
                 v153,
                 v154,
                 v155);
        uint64_t v118 = v53[2];
        char v171 = v119;
        BOOL v120 = (v119 & 1) == 0;
        Swift::Int v121 = v118 + v120;
        if (__OFADD__(v118, v120)) {
          goto LABEL_108;
        }
        sub_10000BF1C(&qword_10017C8D0);
        Swift::Bool v122 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v161, v121);
        unint64_t v129 = v163;
        if (v122)
        {
          uint64_t v130 = sub_100021098(v61, v60, v123, v124, v125, v126, v127, v128, v140, v141, v142, v143, v144, v145, v146, *((uint64_t *)&v146 + 1), v147, (uint64_t)v148, v149,
                   *((uint64_t *)&v149 + 1),
                   v150,
                   (uint64_t)v151,
                   v152,
                   v153,
                   v154,
                   v155);
          if ((v171 & 1) != (v131 & 1)) {
            goto LABEL_110;
          }
          unint64_t v129 = v130;
        }
        uint64_t v53 = v182;
        if (v171)
        {
          int v132 = (uint64_t *)(v182[7] + 16 * v129);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *int v132 = v165;
          v132[1] = v164;
        }
        else
        {
          v182[(v129 >> 6) + 8] |= 1 << v129;
          int v134 = (uint64_t *)(v53[6] + 16 * v129);
          *int v134 = v61;
          v134[1] = v60;
          int v135 = (uint64_t *)(v53[7] + 16 * v129);
          uint64_t *v135 = v165;
          v135[1] = v164;
          uint64_t v136 = v53[2];
          BOOL v47 = __OFADD__(v136, 1);
          uint64_t v137 = v136 + 1;
          if (v47) {
            goto LABEL_109;
          }
          v53[2] = v137;
          swift_bridgeObjectRetain();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_100021098(v61, v60, v104, v105, v106, v107, v108, v109, v140, v141, v142, v143, v144, v145, v146, *((uint64_t *)&v146 + 1), v147, (uint64_t)v148, v149,
          *((uint64_t *)&v149 + 1),
          v150,
          (uint64_t)v151,
          v152,
          v153,
          v154,
          v155);
        char v111 = v110;
        swift_bridgeObjectRelease();
        if ((v111 & 1) == 0)
        {
LABEL_83:
          swift_bridgeObjectRelease();
          uint64_t v31 = v181;
          continue;
        }
        char v172 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v182 = v53;
        Swift::Int v133 = v53[3];
        sub_10000BF1C(&qword_10017C8D0);
        _NativeDictionary.ensureUnique(isUnique:capacity:)(v172, v133);
        uint64_t v53 = v182;
        swift_bridgeObjectRelease();
        _NativeDictionary._delete(at:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      goto LABEL_83;
    }
    break;
  }
  int64_t v58 = v56 + 5;
  if (v58 >= v180) {
    goto LABEL_94;
  }
  unint64_t v57 = *(void *)(v178 + 8 * v58);
  if (v57)
  {
    int64_t v49 = v58;
    goto LABEL_60;
  }
  while (1)
  {
    int64_t v49 = v58 + 1;
    if (__OFADD__(v58, 1)) {
      break;
    }
    if (v49 >= v180) {
      goto LABEL_94;
    }
    unint64_t v57 = *(void *)(v178 + 8 * v49);
    ++v58;
    if (v57) {
      goto LABEL_60;
    }
  }
LABEL_104:
  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1000B1694(void *a1, uint64_t a2)
{
  *a1 = a2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000B16DC()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000B1714()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000B1754(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  unint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *unint64_t v8 = v2;
  v8[1] = sub_1000413FC;
  return sub_1000AF7E8(a1, v4, v5, v7, v6);
}

uint64_t sub_1000B1814(void *a1)
{
  id v1 = [a1 runningProcessIDs];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  sub_100014918();
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

unint64_t sub_1000B1874()
{
  unint64_t result = qword_10017F4F0;
  if (!qword_10017F4F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F4F0);
  }
  return result;
}

uint64_t sub_1000B18C0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_1000B07B8(a1, *(void *)(v2 + 24), a2);
}

uint64_t sub_1000B18DC(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000B1928(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ObservationStatusRegistry.ObservationStatusChangeListener();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B198C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000B19D4(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000BFDC(&qword_10017F4E0);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000B1A50()
{
  unint64_t result = qword_10017F508;
  if (!qword_10017F508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F508);
  }
  return result;
}

uint64_t sub_1000B1A9C(void *a1)
{
  return sub_1000B1694(a1, *(void *)(v1 + 16));
}

ValueMetadata *_s14descr10016E6D1V20AppNotificationTopicVMa()
{
  return &_s14descr10016E6D1V20AppNotificationTopicVN;
}

unint64_t sub_1000B1ACC()
{
  unint64_t result = qword_10017F510;
  if (!qword_10017F510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F510);
  }
  return result;
}

uint64_t sub_1000B1B34()
{
  return 0;
}

uint64_t sub_1000B1B50()
{
  return v0;
}

uint64_t sub_1000B1B6C()
{
  return v0;
}

uint64_t sub_1000B1B94()
{
  return static _ErrorCodeProtocol.~= infix(_:_:)(v3, v1, v2, v0);
}

uint64_t sub_1000B1BB8()
{
  return swift_arrayDestroy();
}

uint64_t sub_1000B1BF0()
{
  return v0;
}

uint64_t sub_1000B1C04(void *a1, uint64_t a2)
{
  id v4 = [a1 bundleIdentifier];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  uint64_t v8 = sub_10001B584(v5, v7, a2);
  swift_bridgeObjectRelease();
  if (v8)
  {
    id v9 = [a1 actionIdentifier];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10001D15C();
    LOBYTE(v9) = v10;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v11 = v9 ^ 1;
  }
  else
  {
    char v11 = 1;
  }
  return v11 & 1;
}

uint64_t sub_1000B1CE0(uint64_t a1)
{
  uint64_t v2 = Set.init(minimumCapacity:)();
  uint64_t v10 = v2;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    id v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      sub_100023984(&v9, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v10;
  }
  else
  {
    uint64_t v7 = v2;
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_1000B1D94(unint64_t a1)
{
  return sub_1000B2030(a1, &qword_10017D0A0, (uint64_t)LNSystemProtocol_ptr, &qword_10017FE50, (void (*)(id *, id))sub_100023B1C);
}

uint64_t sub_1000B1DC4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v19 - v7;
  uint64_t v9 = sub_10000BF1C(&qword_10017C788);
  __chkstk_darwin(v9 - 8);
  char v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B2318();
  uint64_t v22 = Set.init(minimumCapacity:)();
  uint64_t v19 = a1;
  uint64_t v12 = *(void *)(a1 + 16);
  if (v12)
  {
    uint64_t v13 = v3 + 16;
    unint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v15 = v19 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v20 = *(void *)(v13 + 56);
    uint64_t v21 = v14;
    uint64_t v16 = (void (**)(char *, char *, uint64_t))(v13 + 16);
    uint64_t v17 = (void (**)(char *, uint64_t))(v13 - 8);
    while (1)
    {
      v21(v11, v15, v2);
      sub_10000D5B0((uint64_t)v11, 0, 1, v2);
      if (sub_10000D5D8((uint64_t)v11, 1, v2) == 1) {
        break;
      }
      (*v16)(v6, v11, v2);
      sub_100023F48((uint64_t)v8, v6);
      (*v17)(v8, v2);
      v15 += v20;
      if (!--v12) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    sub_10000D5B0((uint64_t)v11, 1, 1, v2);
  }
  swift_bridgeObjectRelease();
  return v22;
}

uint64_t sub_1000B2000(unint64_t a1)
{
  return sub_1000B2030(a1, (unint64_t *)&qword_10017D468, (uint64_t)LNAppNotificationEvent_ptr, (unint64_t *)&qword_10017DF90, (void (*)(id *, id))sub_100024244);
}

uint64_t sub_1000B2030(unint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4, void (*a5)(id *, id))
{
  unint64_t v9 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  sub_10000D9D4(0, a2);
  sub_1000B2368(a4, a2);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v11 = result;
  uint64_t v16 = result;
  if (!v9)
  {
    uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v12) {
      goto LABEL_5;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    return v11;
  }
  swift_bridgeObjectRetain();
  uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v12) {
    goto LABEL_13;
  }
LABEL_5:
  if (v12 >= 1)
  {
    for (uint64_t i = 0; i != v12; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v14 = *(id *)(a1 + 8 * i + 32);
      }
      a5(&v15, v14);
    }
    swift_bridgeObjectRelease();
    return v16;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000B21A4()
{
  sub_10000BF1C(&qword_10017F518);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013FAC0;
  sub_100060554();
  *(void *)(v1 + 32) = 0xD000000000000010;
  *(void *)(v1 + 40) = v2;
  *(void *)(inited + 48) = sub_1000B1CE0((uint64_t)&off_10016ECF0);
  *(void *)(inited + 56) = 0xD000000000000015;
  sub_100060554();
  *(void *)(inited + 64) = v3;
  *(void *)(inited + 72) = sub_1000B1CE0((uint64_t)&off_10016ED20);
  *(void *)(inited + 80) = 0xD000000000000015;
  sub_100060554();
  *(void *)(inited + 88) = v4;
  *(void *)(inited + 96) = sub_1000B1CE0((uint64_t)&off_10016ED60);
  *(void *)(inited + 104) = 0xD00000000000001ALL;
  sub_100060554();
  *(void *)(inited + 112) = v5;
  *(void *)(inited + 120) = sub_1000B1CE0((uint64_t)&off_10016EDD0);
  *(void *)(inited + 128) = 0xD000000000000013;
  sub_100060554();
  *(void *)(inited + 136) = v6;
  *(void *)(inited + 144) = sub_1000B1CE0((uint64_t)&off_10016EE00);
  *(void *)(inited + 152) = 0xD00000000000001ALL;
  sub_100060554();
  *(void *)(inited + 160) = v7;
  *(void *)(inited + 168) = sub_1000B1CE0((uint64_t)&off_10016EE50);
  *(void *)(inited + 176) = 0xD000000000000010;
  sub_100060554();
  *(void *)(inited + 184) = v8;
  *(void *)(inited + 192) = sub_1000B1CE0((uint64_t)&off_10016EED0);
  sub_10000BF1C((uint64_t *)&unk_10017F520);
  return Dictionary.init(dictionaryLiteral:)();
}

unint64_t sub_1000B2318()
{
  unint64_t result = qword_10017D340;
  if (!qword_10017D340)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D340);
  }
  return result;
}

uint64_t sub_1000B2368(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000D9D4(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for AppShortcutDenyList()
{
  return &type metadata for AppShortcutDenyList;
}

void sub_1000B23C8(uint64_t a1, void *a2)
{
  id v50 = a2;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for LSLinkBundleRecord(0);
  __chkstk_darwin(v53);
  unint64_t v52 = (char *)v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v65 = _swiftEmptyArrayStorage;
  uint64_t v56 = *(void *)(a1 + 16);
  if (!v56)
  {
LABEL_27:

    swift_bridgeObjectRelease();
    return;
  }
  int64_t v49 = (char *)v44 - v10;
  uint64_t v48 = v7;
  uint64_t v51 = v4;
  unint64_t v12 = 0;
  uint64_t v13 = a1 + 32;
  BOOL v47 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v46 = (void (**)(char *, uint64_t))(v5 + 8);
  *(void *)&long long v11 = 136315138;
  long long v45 = v11;
  v44[1] = (char *)&type metadata for Any + 8;
  uint64_t v55 = a1;
  uint64_t v14 = v2;
  while (v12 < *(void *)(a1 + 16))
  {
    sub_10000C0D4(v13, (uint64_t)&v63);
    sub_10000BEA0(&v63, v64);
    sub_10000D9D4(0, &qword_10017E2E0);
    id v15 = (void *)static LSBundleRecord.with(bundleIdentifier:allowSystemAppPlaceholder:)();
    if (v14)
    {
      uint64_t v14 = 0;
      swift_errorRelease();
      type metadata accessor for DaemonRecord();
      uint64_t v16 = (void *)static DaemonRecord.from(bundleIdentifier:)();

      uint64_t v17 = (uint64_t)v52;
      sub_1000E8894();
      if (!v16)
      {
        type metadata accessor for FrameworkRecord();
        unint64_t v18 = (void *)static FrameworkRecord.from(bundleIdentifier:)();
        if (!v18)
        {
          uint64_t v31 = v17;
          goto LABEL_19;
        }
      }
      sub_1000E88E0(v17, (void (*)(void))type metadata accessor for LSLinkBundleRecord);
    }
    else
    {
      uint64_t v25 = v15;
      unsigned __int8 v26 = [v15 swift_isAppIntentsEnabled];
      uint64_t v27 = (uint64_t)v49;
      sub_1000E8894();
      if ((v26 & 1) == 0)
      {

        uint64_t v31 = v27;
LABEL_19:
        sub_1000E88E0(v31, (void (*)(void))type metadata accessor for LSLinkBundleRecord);
LABEL_20:
        uint64_t v54 = 0;
        uint64_t v32 = off_10017C4C0;
        id v33 = v50;
        if (v32 != (void *)-1) {
          swift_once();
        }
        uint64_t v34 = v51;
        uint64_t v35 = sub_10000BEE4(v51, (uint64_t)qword_100181FD0);
        uint64_t v36 = v48;
        (*v47)(v48, v35, v34);

        sub_10000C0D4((uint64_t)&v63, (uint64_t)v60);
        id v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v37, v38))
        {
          uint64_t v39 = swift_slowAlloc();
          *(void *)&long long v57 = swift_slowAlloc();
          *(_DWORD *)uint64_t v39 = v45;
          uint64_t v41 = v61;
          uint64_t v40 = v62;
          sub_10000BEA0(v60, v61);
          uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)(v40 + 8) + 8))(v41);
          *(void *)(v39 + 4) = sub_100013090(v42, v43, (uint64_t *)&v57);
          swift_bridgeObjectRelease();
          sub_10000E788((uint64_t)v60);
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "%s is not link enabled", (uint8_t *)v39, 0xCu);
          swift_arrayDestroy();
          a1 = v55;
          swift_slowDealloc();
          swift_slowDealloc();

          (*v46)(v36, v51);
        }
        else
        {
          sub_10000E788((uint64_t)v60);

          (*v46)(v36, v34);
        }
        sub_10000E788((uint64_t)&v63);
        uint64_t v14 = v54;
        goto LABEL_26;
      }
      uint64_t v28 = self;
      NSString v29 = String._bridgeToObjectiveC()();
      id v30 = [v28 applicationWithBundleIdentifier:v29];

      LOBYTE(v29) = [v30 isHidden];
      sub_1000E88E0(v27, (void (*)(void))type metadata accessor for LSLinkBundleRecord);
      if (v29) {
        goto LABEL_20;
      }
    }
    sub_10000D698(&v63, (uint64_t)v60);
    uint64_t v19 = v65;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_100057898();
      uint64_t v19 = v65;
    }
    unint64_t v20 = v19[2];
    if (v20 >= v19[3] >> 1)
    {
      sub_100057898();
      uint64_t v19 = v65;
    }
    uint64_t v21 = sub_10005FFB0((uint64_t)v60, v61);
    double v22 = __chkstk_darwin(v21);
    (*(void (**)(char *, double))(v24 + 16))((char *)v44 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), v22);
    uint64_t v58 = v53;
    unint64_t v59 = &off_100172A40;
    sub_1000274F4((uint64_t *)&v57);
    sub_1000EA1A4();
    v19[2] = v20 + 1;
    sub_10000D698(&v57, (uint64_t)&v19[5 * v20 + 4]);
    sub_10000E788((uint64_t)v60);
    a1 = v55;
LABEL_26:
    ++v12;
    v13 += 40;
    if (v56 == v12) {
      goto LABEL_27;
    }
  }
  __break(1u);
}

void *sub_1000B2AE8(uint64_t (*a1)(void), void *a2, unint64_t a3)
{
  unint64_t v4 = a3;
  if (a3 >> 62) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v7)
  {
    while (1)
    {
      unint64_t v8 = 0;
      uint64_t v16 = v4 & 0xFFFFFFFFFFFFFF8;
      unint64_t v17 = v4 & 0xC000000000000001;
      unint64_t v15 = v4;
      while (v17)
      {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_7:
        uint64_t v10 = v9;
        unint64_t v11 = v8 + 1;
        if (__OFADD__(v8, 1)) {
          goto LABEL_17;
        }
        unint64_t v12 = a2;
        sub_1000EFB78();
        char v13 = a1();
        if (v3)
        {
          swift_bridgeObjectRelease();

          swift_release();
          return v12;
        }
        if (v13)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          unint64_t v4 = v15;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
        ++v8;
        if (v11 == v7)
        {
          unint64_t v12 = _swiftEmptyArrayStorage;
          goto LABEL_20;
        }
      }
      if (v8 < *(void *)(v16 + 16)) {
        break;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      sub_1000F0170();
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      if (!v7) {
        goto LABEL_19;
      }
    }
    id v9 = *(id *)(v4 + 8 * v8 + 32);
    goto LABEL_7;
  }
LABEL_19:
  unint64_t v12 = _swiftEmptyArrayStorage;
LABEL_20:
  swift_bridgeObjectRelease();
  return v12;
}

void sub_1000B2C8C(uint64_t a1, uint64_t a2)
{
  *(void *)(swift_allocObject() + 16) = a2;
  uint64_t v3 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v3)
  {
    unint64_t v4 = 0;
    uint64_t v5 = a1 + 40;
    do
    {
      uint64_t v6 = (uint64_t *)(v5 + 16 * v4);
      unint64_t v7 = v4;
      while (1)
      {
        if (v7 >= *(void *)(a1 + 16))
        {
          __break(1u);
          return;
        }
        uint64_t v9 = *(v6 - 1);
        uint64_t v8 = *v6;
        unint64_t v4 = v7 + 1;
        swift_bridgeObjectRetain();
        sub_10001D15C();
        if (v10) {
          break;
        }
        swift_bridgeObjectRelease();
        v6 += 2;
        ++v7;
        if (v3 == v4) {
          goto LABEL_13;
        }
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_100057848();
      }
      unint64_t v11 = _swiftEmptyArrayStorage[2];
      unint64_t v12 = v11 + 1;
      if (v11 >= _swiftEmptyArrayStorage[3] >> 1)
      {
        sub_100057848();
        unint64_t v12 = v11 + 1;
      }
      _swiftEmptyArrayStorage[2] = v12;
      char v13 = &_swiftEmptyArrayStorage[2 * v11];
      v13[4] = v9;
      void v13[5] = v8;
      uint64_t v5 = a1 + 40;
    }
    while (v3 - 1 != v7);
  }
LABEL_13:
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
}

void sub_1000B2E20()
{
  sub_100018E30();
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = v0;
    sub_1000F00A4();
    uint64_t v3 = (void *)(v2 + 32);
    do
    {
      sub_10000BEA0(v3, v3[3]);
      sub_1000EF2D0();
      sub_10006FED8();
      uint64_t v5 = v4();
      uint64_t v7 = v6;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_100057848();
      }
      unint64_t v8 = _swiftEmptyArrayStorage[2];
      if (v8 >= _swiftEmptyArrayStorage[3] >> 1) {
        sub_100057848();
      }
      _swiftEmptyArrayStorage[2] = v8 + 1;
      uint64_t v9 = &_swiftEmptyArrayStorage[2 * v8];
      v9[4] = v5;
      v9[5] = v7;
      v3 += 5;
      --v1;
    }
    while (v1);
  }
  sub_100018E80();
}

void sub_1000B2F1C()
{
  sub_100018E30();
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = v0;
    sub_1000F00A4();
    uint64_t v3 = type metadata accessor for LNBundleRecord();
    sub_1000282DC(v3);
    uint64_t v6 = *(void *)(v5 + 72);
    uint64_t v7 = (uint64_t *)(((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + v2 + 8);
    do
    {
      uint64_t v9 = *(v7 - 1);
      uint64_t v8 = *v7;
      unint64_t v11 = _swiftEmptyArrayStorage[2];
      unint64_t v10 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain();
      if (v11 >= v10 >> 1) {
        sub_100057848();
      }
      uint64_t v7 = (uint64_t *)((char *)v7 + v6);
      _swiftEmptyArrayStorage[2] = v11 + 1;
      unint64_t v12 = &_swiftEmptyArrayStorage[2 * v11];
      v12[4] = v9;
      v12[5] = v8;
      --v1;
    }
    while (v1);
  }
  sub_100018E80();
}

void sub_1000B3008(void (*a1)(void *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v5 = a3;
  if (a3 >> 62) {
    goto LABEL_18;
  }
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v6)
  {
    uint64_t v23 = _swiftEmptyArrayStorage;
    sub_1000578DC();
    if (v6 < 0)
    {
      __break(1u);
      return;
    }
    uint64_t v7 = 0;
    uint64_t v8 = v23;
    unint64_t v18 = v5;
    unint64_t v19 = v5 & 0xC000000000000001;
    uint64_t v17 = v6;
    while (v6 != v7)
    {
      if (v19) {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v9 = *(id *)(v5 + 8 * v7 + 32);
      }
      unint64_t v10 = v9;
      id v21 = v9;
      a1(v22, &v21);
      if (v4)
      {
        swift_release();

        return;
      }

      uint64_t v12 = v22[0];
      uint64_t v11 = v22[1];
      uint64_t v13 = v22[2];
      uint64_t v14 = v22[3];
      uint64_t v23 = v8;
      unint64_t v15 = v8[2];
      if (v15 >= v8[3] >> 1)
      {
        sub_1000578DC();
        uint64_t v8 = v23;
      }
      ++v7;
      v8[2] = v15 + 1;
      uint64_t v16 = &v8[4 * v15];
      v16[4] = v12;
      v16[5] = v11;
      v16[6] = v13;
      v16[7] = v14;
      uint64_t v6 = v17;
      unint64_t v5 = v18;
      uint64_t v4 = 0;
      if (v17 == v7) {
        return;
      }
    }
    __break(1u);
LABEL_18:
    sub_1000F017C();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
}

void *sub_1000B319C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100057848();
    uint64_t v3 = (void *)(a1 + 32);
    do
    {
      uint64_t v4 = v3[3];
      uint64_t v5 = v3[4];
      sub_10000BEA0(v3, v4);
      uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
      uint64_t v8 = v7;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_100057848();
      }
      unint64_t v9 = _swiftEmptyArrayStorage[2];
      if (v9 >= _swiftEmptyArrayStorage[3] >> 1) {
        sub_100057848();
      }
      _swiftEmptyArrayStorage[2] = v9 + 1;
      unint64_t v10 = &_swiftEmptyArrayStorage[2 * v9];
      v10[4] = v6;
      v10[5] = v8;
      v3 += 5;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

void sub_1000B32C8(void (*a1)(uint64_t *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  if (a3 >> 62) {
    goto LABEL_18;
  }
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v6)
  {
    unint64_t v20 = _swiftEmptyArrayStorage;
    sub_100057FA4();
    if (v6 < 0)
    {
      __break(1u);
      return;
    }
    uint64_t v7 = 0;
    uint64_t v8 = v20;
    while (v6 != v7)
    {
      if ((a3 & 0xC000000000000001) != 0) {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v9 = *(id *)(a3 + 8 * v7 + 32);
      }
      unint64_t v10 = v9;
      id v17 = v9;
      a1(&v18, &v17);
      if (v4)
      {
        swift_release();

        return;
      }
      uint64_t v4 = 0;

      uint64_t v11 = v18;
      long long v12 = v19;
      unint64_t v20 = v8;
      unint64_t v13 = v8[2];
      if (v13 >= v8[3] >> 1)
      {
        long long v15 = v19;
        sub_100057FA4();
        long long v12 = v15;
        uint64_t v8 = v20;
      }
      ++v7;
      v8[2] = v13 + 1;
      uint64_t v14 = &v8[3 * v13];
      v14[4] = v11;
      *(_OWORD *)(v14 + 5) = v12;
      if (v6 == v7) {
        return;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
}

void *sub_1000B346C(uint64_t a1, char *a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  __chkstk_darwin(v5);
  uint64_t v36 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9)
  {
    uint64_t v37 = v6;
    v31[2] = v2;
    long long v45 = &a2[OBJC_IVAR____TtC10LinkDaemon8Registry_applicationSource];
    id v33 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v34 = (void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    swift_bridgeObjectRetain();
    v31[1] = a1;
    unint64_t v10 = (unint64_t *)(a1 + 40);
    uint64_t v11 = _swiftEmptyArrayStorage;
    *(void *)&long long v12 = 136315138;
    long long v32 = v12;
    v31[3] = (char *)&type metadata for Any + 8;
    uint64_t v35 = a2;
    do
    {
      uint64_t v14 = *(v10 - 1);
      unint64_t v13 = *v10;
      sub_10000BEA0(v45, *((void *)v45 + 3));
      swift_bridgeObjectRetain();
      sub_1000E5864((uint64_t)&v42);
      if (v43)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        os_log_type_t v38 = v11;
        long long v15 = off_10017C4C0;
        uint64_t v16 = a2;
        if (v15 != (void *)-1) {
          swift_once();
        }
        uint64_t v17 = v37;
        uint64_t v18 = sub_10000BEE4(v37, (uint64_t)qword_100181FD0);
        long long v19 = v36;
        (*v34)(v36, v18, v17);

        swift_bridgeObjectRetain_n();
        unint64_t v20 = Logger.logObject.getter();
        os_log_type_t v21 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v20, v21))
        {
          uint64_t v22 = swift_slowAlloc();
          *(void *)&v44[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v22 = v32;
          swift_bridgeObjectRetain();
          *(void *)(v22 + 4) = sub_100013090(v14, v13, (uint64_t *)v44);
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v20, v21, "Failed to map %s", (uint8_t *)v22, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*v33)(v19, v37);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          (*v33)(v19, v17);
        }
        swift_bridgeObjectRelease();
        a2 = v35;
        uint64_t v11 = v38;
      }
      if (v43)
      {
        sub_10000D698(&v42, (uint64_t)v44);
        sub_10000D698(v44, (uint64_t)&v42);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10001E7AC();
          uint64_t v11 = v28;
        }
        unint64_t v23 = v11[2];
        if (v23 >= v11[3] >> 1)
        {
          sub_10001E7AC();
          uint64_t v11 = v29;
        }
        uint64_t v24 = sub_10005FFB0((uint64_t)&v42, v43);
        double v25 = __chkstk_darwin(v24);
        (*(void (**)(char *, double))(v27 + 16))((char *)v31 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0), v25);
        uint64_t v40 = type metadata accessor for LSLinkBundleRecord(0);
        uint64_t v41 = &off_100172A40;
        sub_1000274F4((uint64_t *)&v39);
        sub_1000EA1A4();
        v11[2] = v23 + 1;
        sub_10000D698(&v39, (uint64_t)&v11[5 * v23 + 4]);
        sub_10000E788((uint64_t)&v42);
      }
      else
      {
        sub_1000347E8((uint64_t)&v42, &qword_10017F9A0);
      }
      v10 += 2;
      --v9;
    }
    while (v9);

    swift_bridgeObjectRelease();
  }
  else
  {

    return _swiftEmptyArrayStorage;
  }
  return v11;
}

void *sub_1000B3958(unint64_t a1, uint64_t (*a2)(void))
{
  if (a1 >> 62) {
    goto LABEL_17;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v4 = _swiftEmptyArrayStorage;
    uint64_t v5 = 4;
    uint64_t v17 = v3;
    while (1)
    {
      id v6 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v5);
      uint64_t v7 = v6;
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      uint64_t v9 = a2();
      uint64_t v11 = v10;

      if (v11)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100094140();
          sub_10001E7C0();
          uint64_t v4 = v14;
        }
        unint64_t v12 = v4[2];
        if (v12 >= v4[3] >> 1)
        {
          sub_10001E7C0();
          uint64_t v4 = v15;
        }
        v4[2] = v12 + 1;
        unint64_t v13 = &v4[2 * v12];
        v13[4] = v9;
        void v13[5] = v11;
        uint64_t v3 = v17;
      }
      ++v5;
      if (v8 == v3) {
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_17:
    sub_1000F017C();
  }
  uint64_t v4 = _swiftEmptyArrayStorage;
LABEL_19:
  swift_bridgeObjectRelease();
  return v4;
}

void *sub_1000B3AC4(uint64_t a1)
{
  uint64_t v2 = sub_10000BF1C(&qword_10017F2A0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for LNBundleRecord();
  v30[6] = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v26 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v24[1] = (char *)v24 - v8;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v24 - v10;
  __chkstk_darwin(v12);
  sub_1000427DC(a1, v30);
  int64_t v13 = v30[3];
  uint64_t v14 = v30[4];
  uint64_t v28 = v30[1];
  int64_t v29 = (unint64_t)(v30[2] + 64) >> 6;
  uint64_t result = (void *)swift_bridgeObjectRetain();
  uint64_t v27 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v14)
    {
      v14 &= v14 - 1;
      goto LABEL_20;
    }
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v16 >= v29) {
      goto LABEL_27;
    }
    uint64_t v17 = *(void *)(v28 + 8 * v16);
    int64_t v18 = v13 + 1;
    if (!v17)
    {
      int64_t v18 = v13 + 2;
      if (v13 + 2 >= v29) {
        goto LABEL_27;
      }
      uint64_t v17 = *(void *)(v28 + 8 * v18);
      if (!v17)
      {
        int64_t v18 = v13 + 3;
        if (v13 + 3 >= v29) {
          goto LABEL_27;
        }
        uint64_t v17 = *(void *)(v28 + 8 * v18);
        if (!v17)
        {
          int64_t v18 = v13 + 4;
          if (v13 + 4 >= v29) {
            goto LABEL_27;
          }
          uint64_t v17 = *(void *)(v28 + 8 * v18);
          if (!v17)
          {
            int64_t v18 = v13 + 5;
            if (v13 + 5 >= v29) {
              goto LABEL_27;
            }
            uint64_t v17 = *(void *)(v28 + 8 * v18);
            if (!v17)
            {
              int64_t v19 = v13 + 6;
              while (v19 < v29)
              {
                uint64_t v17 = *(void *)(v28 + 8 * v19++);
                if (v17)
                {
                  int64_t v18 = v19 - 1;
                  goto LABEL_19;
                }
              }
LABEL_27:
              swift_release();
              return v27;
            }
          }
        }
      }
    }
LABEL_19:
    uint64_t v14 = (v17 - 1) & v17;
    int64_t v13 = v18;
LABEL_20:
    sub_1000E8894();
    sub_1000EA1A4();
    sub_1000E8894();
    sub_10000D5B0((uint64_t)v4, 0, 1, v5);
    sub_1000E88E0((uint64_t)v11, (void (*)(void))type metadata accessor for LNBundleRecord);
    if (sub_10000D5D8((uint64_t)v4, 1, v5) == 1)
    {
      uint64_t result = (void *)sub_1000347E8((uint64_t)v4, &qword_10017F2A0);
    }
    else
    {
      double v25 = type metadata accessor for LNBundleRecord;
      sub_1000EA1A4();
      sub_1000EA1A4();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v27 = (void *)sub_10001F418(0, v27[2] + 1, 1, (uint64_t)v27);
      }
      unint64_t v21 = v27[2];
      unint64_t v20 = v27[3];
      uint64_t v22 = (uint64_t (*)())(v21 + 1);
      if (v21 >= v20 >> 1)
      {
        double v25 = (uint64_t (*)())(v21 + 1);
        unint64_t v23 = (void *)sub_10001F418(v20 > 1, v21 + 1, 1, (uint64_t)v27);
        uint64_t v22 = v25;
        uint64_t v27 = v23;
      }
      uint64_t v27[2] = v22;
      uint64_t result = (void *)sub_1000EA1A4();
    }
  }
  __break(1u);
  return result;
}

void sub_1000B3F04()
{
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(v0 + 16) + 16);
  os_unfair_lock_lock(v1);
  sub_1000EE43C(v2);
  os_unfair_lock_unlock(v1);
}

uint64_t sub_1000B3F84(uint64_t a1, char *a2)
{
  return sub_1000B3FB4(a2);
}

uint64_t sub_1000B3FB4(char *a1)
{
  char v3 = *a1;
  long long v21 = *(_OWORD *)(a1 + 8);
  uint64_t v4 = *((void *)a1 + 3);
  uint64_t v19 = *((void *)a1 + 4);
  uint64_t v20 = v4;
  char v5 = a1[40];
  uint64_t v6 = *((void *)a1 + 6);
  uint64_t v7 = *((void *)a1 + 7);
  uint64_t v8 = sub_10000BF1C(&qword_10017D3F8);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_unfair_lock_assert_owner((const os_unfair_lock *)(*(void *)(v1 + 16) + 16));
  *(unsigned char *)(v1 + 40) = 1;
  swift_beginAccess();
  if (*(void *)(*(void *)(v1 + 32) + 16))
  {
    swift_beginAccess();
    sub_1000B43C8((uint64_t)v11);
    swift_endAccess();
    uint64_t v22 = v3 & 1;
    long long v23 = v21;
    uint64_t v24 = v20;
    uint64_t v25 = v19;
    uint64_t v26 = v5 & 1;
    uint64_t v27 = v6;
    uint64_t v28 = v7;
    sub_1000EC69C(a1);
    CheckedContinuation.resume(returning:)();
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  else
  {
    swift_beginAccess();
    sub_1000EC69C(a1);
    sub_1000E6330((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10001E778);
    uint64_t v13 = *(void *)(*(void *)(v1 + 24) + 16);
    sub_1000E63A4(v13, (uint64_t (*)(BOOL))sub_10001E778);
    uint64_t v14 = *(void *)(v1 + 24);
    *(void *)(v14 + 16) = v13 + 1;
    long long v15 = (_OWORD *)(v14 + (v13 << 6));
    long long v16 = *(_OWORD *)a1;
    long long v17 = *((_OWORD *)a1 + 1);
    long long v18 = *((_OWORD *)a1 + 3);
    v15[4] = *((_OWORD *)a1 + 2);
    v15[5] = v18;
    void v15[2] = v16;
    v15[3] = v17;
    return swift_endAccess();
  }
}

void sub_1000B41CC()
{
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(v0 + 16) + 16);
  os_unfair_lock_lock(v1);
  sub_1000ECA4C(v2);
  os_unfair_lock_unlock(v1);
}

uint64_t sub_1000B424C(uint64_t a1, char *a2)
{
  swift_beginAccess();
  uint64_t v4 = *(void *)(*(void *)(a1 + 24) + 16);
  if (v4)
  {
    uint64_t v11 = a2;
    char v5 = (void *)(swift_bridgeObjectRetain() + 48);
    do
    {
      uint64_t v6 = (void (*)(uint64_t))v5[4];
      if (v6)
      {
        uint64_t v7 = v5[1];
        unint64_t v8 = v5[2];
        sub_1000ECA68();
        uint64_t v9 = swift_allocError();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_10006F8F4(v7, v8);
        sub_100059D80((uint64_t)v6);
        sub_100059D80((uint64_t)v6);
        v6(v9);
        swift_errorRelease();
        sub_100093428((uint64_t)v6);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10000DA68(v7, v8);
        sub_100093428((uint64_t)v6);
      }
      v5 += 8;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    a2 = v11;
  }
  *(void *)(a1 + 24) = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  return sub_1000B3FB4(a2);
}

void sub_1000B43C8(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10000BF1C(&qword_10017FF30);
  __chkstk_darwin(v3 - 8);
  char v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v1;
  if (!*(void *)(*v1 + 16))
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  sub_100048E40(*v1);
  uint64_t v7 = sub_10000BF1C(&qword_10017D3F8);
  if (sub_10000D5D8((uint64_t)v5, 1, v7) != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, v5, v7);
    if (*(void *)(v6 + 16))
    {
      sub_1000E6488(0, 1);
      return;
    }
    goto LABEL_6;
  }
LABEL_7:
  __break(1u);
}

void sub_1000B44D8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (os_unfair_lock_s *)(*(void *)(v1 + 16) + 16);
  os_unfair_lock_lock(v4);
  uint64_t v5 = v1 + 24;
  swift_beginAccess();
  if (*(void *)(*(void *)(v2 + 24) + 16))
  {
    swift_beginAccess();
    uint64_t v6 = *(void **)v5;
    if (*(void *)(*(void *)v5 + 16))
    {
      uint64_t v7 = v6[10];
      uint64_t v9 = v6[7];
      unint64_t v8 = v6[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10006F8F4(v9, v8);
      sub_100059D80(v7);
      sub_1000E65E0(0, 1);
      swift_endAccess();
      os_unfair_lock_unlock(v4);
      sub_10000BF1C(&qword_10017D3F8);
      CheckedContinuation.resume(returning:)();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (*(unsigned char *)(v2 + 40))
    {
      sub_10000BF1C(&qword_10017D3F8);
      CheckedContinuation.resume(returning:)();
    }
    else
    {
      swift_beginAccess();
      sub_1000E6330((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10001E764);
      uint64_t v10 = *(void *)(*(void *)(v2 + 32) + 16);
      sub_1000E63A4(v10, (uint64_t (*)(BOOL))sub_10001E764);
      uint64_t v11 = *(void *)(v2 + 32);
      *(void *)(v11 + 16) = v10 + 1;
      uint64_t v12 = sub_10000BF1C(&qword_10017D3F8);
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v11+ ((*(unsigned __int8 *)(*(void *)(v12 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v12 - 8) + 80))+ *(void *)(*(void *)(v12 - 8) + 72) * v10, a1, v12);
      swift_endAccess();
    }
    os_unfair_lock_unlock(v4);
  }
}

uint64_t sub_1000B46F4(uint64_t a1)
{
  swift_retain();
  sub_1000B44D8(a1);

  return swift_release();
}

uint64_t sub_1000B473C()
{
  sub_10000BF1C(&qword_10017DDB0);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(void *)(v0 + 16) = v1;
  *(void *)(v0 + 24) = _swiftEmptyArrayStorage;
  *(void *)(v0 + 32) = _swiftEmptyArrayStorage;
  *(unsigned char *)(v0 + 40) = 0;
  return v0;
}

void sub_1000B4784()
{
  sub_10000E990();
  unint64_t v1 = v0;
  if (v0 >> 62) {
    goto LABEL_17;
  }
  uint64_t v2 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    if ((v1 & 0xC000000000000001) != 0) {
      id v3 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v3 = *(id *)(v1 + 32);
    }
    uint64_t v4 = v3;
    sub_10000D9D4(0, &qword_10017D0A0);
    sub_1000EF10C();
    char v5 = static NSObject.== infix(_:_:)();

    if ((v5 & 1) != 0 || v2 == 1) {
      break;
    }
    uint64_t v6 = 5;
    while (1)
    {
      if ((v1 & 0xC000000000000001) != 0)
      {
        sub_1000EF584();
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        id v7 = *(id *)(v1 + 8 * v6);
      }
      unint64_t v8 = v7;
      uint64_t v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1)) {
        break;
      }
      char v10 = static NSObject.== infix(_:_:)();

      if ((v10 & 1) == 0)
      {
        ++v6;
        if (v9 != v2) {
          continue;
        }
      }
      goto LABEL_7;
    }
    __break(1u);
LABEL_17:
    sub_1000EFF64();
  }
LABEL_7:
  swift_bridgeObjectRelease();
  sub_10000E930();
}

uint64_t sub_1000B48B8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000B4980(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10000BF1C((uint64_t *)&unk_10017D390);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v6 = v3;
  sub_1000E6B68(a1, 1, (uint64_t *)&v6);
  uint64_t v4 = (uint64_t)v6;
  if (v1) {
    swift_release();
  }
  return v4;
}

void sub_1000B4A10()
{
  sub_10000E990();
  char v2 = v1;
  uint64_t v4 = v3;
  uint64_t v19 = type metadata accessor for OSSignpostID();
  sub_100028430();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  uint64_t v8 = sub_1000EF45C();
  sub_100028430();
  __chkstk_darwin(v9);
  sub_10000EBF4();
  if (qword_10017C5B8 != -1) {
    swift_once();
  }
  sub_10000BEE4(v8, (uint64_t)qword_100182420);
  sub_1000EF0F4();
  v10();
  uint64_t v11 = off_100172B00[v2];
  BOOL v12 = OSSignposter.logHandle.getter();
  os_signpost_type_t v13 = static os_signpost_type_t.begin.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v14 = v4;
    long long v15 = (uint8_t *)sub_1000EECD0();
    *(_WORD *)long long v15 = 0;
    os_signpost_id_t v16 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, v13, v16, v11, "", v15, 2u);
    uint64_t v4 = v14;
    sub_10000EB10();
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v0, v4, v19);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  sub_1000EF0E8();
  OSSignpostIntervalState.init(id:isOpen:)();
  uint64_t v17 = sub_1000EF054();
  v18(v17);
  sub_10000E930();
}

void sub_1000B4C00()
{
}

void sub_1000B4C38()
{
  sub_10000E990();
  char v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  type metadata accessor for OSSignpostID();
  sub_100028430();
  __chkstk_darwin(v8);
  sub_1000EED68();
  if (*v5 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for OSSignposter();
  sub_10000BEE4(v9, v3);
  unint64_t v10 = v1(v7);
  char v12 = v11;
  os_signpost_type_t v13 = OSSignposter.logHandle.getter();
  os_signpost_type_t v14 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0) {
    goto LABEL_12;
  }
  if ((v12 & 1) == 0)
  {
    if (v10)
    {
LABEL_11:
      long long v15 = (uint8_t *)sub_1000EECD0();
      *(_WORD *)long long v15 = 0;
      os_signpost_id_t v16 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, v14, v16, (const char *)v10, "", v15, 2u);
      sub_10000EB10();
LABEL_12:

      uint64_t v17 = sub_1000EF244();
      v18(v17);
      type metadata accessor for OSSignpostIntervalState();
      swift_allocObject();
      sub_1000EF888();
      OSSignpostIntervalState.init(id:isOpen:)();
      sub_10000E930();
      return;
    }
    __break(1u);
  }
  if (HIDWORD(v10))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v10 >> 11 != 27)
  {
    if (WORD1(v10) <= 0x10u)
    {
      unint64_t v10 = (unint64_t)&v19;
      goto LABEL_11;
    }
    goto LABEL_14;
  }
LABEL_15:
  __break(1u);
}

void sub_1000B4DEC(uint64_t a1, uint64_t a2)
{
  if (a2) {
    _convertErrorToNSError(_:)();
  }
  uint64_t v2 = sub_10000EBA4();
  id v5 = v3;
  v4(v2);
}

uint64_t sub_1000B4E58(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100084120((uint64_t)sub_1000B4E74);
}

uint64_t sub_1000B4E74()
{
  sub_10006039C();
  char v1 = *(void **)(v0 + 32);
  uint64_t v2 = self;
  id v3 = v1;
  swift_bridgeObjectRetain();
  sub_1000EEEDC((uint64_t)[v2 currentConnection]);
  uint64_t v4 = swift_task_alloc();
  id v5 = (void *)sub_1000EED44(v4);
  *id v5 = v6;
  v5[1] = sub_1000B4F44;
  uint64_t v7 = sub_1000EE488();
  return sub_1000C5A10(v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_1000B4F44()
{
  sub_10006039C();
  sub_100010BAC();
  uint64_t v3 = v2;
  sub_100060250();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_100010BC4();
  void *v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_100060358();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {

    uint64_t v10 = sub_1000EE6F0();
    return v11(v10);
  }
}

uint64_t sub_1000B5058(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100084120((uint64_t)sub_1000B5074);
}

uint64_t sub_1000B5074()
{
  sub_10006039C();
  char v1 = *(void **)(v0 + 32);
  uint64_t v2 = self;
  id v3 = v1;
  swift_bridgeObjectRetain();
  sub_1000EEEDC((uint64_t)[v2 currentConnection]);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_1000EED44(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_1000B4F44;
  uint64_t v7 = sub_1000EE488();
  return sub_1000C6278(v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_1000B5144(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100084120((uint64_t)sub_1000B5160);
}

uint64_t sub_1000B5160()
{
  sub_10006039C();
  char v1 = *(void **)(v0 + 32);
  uint64_t v2 = self;
  id v3 = v1;
  swift_bridgeObjectRetain();
  sub_1000EEEDC((uint64_t)[v2 currentConnection]);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_1000EED44(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_1000B4F44;
  uint64_t v7 = sub_1000EE488();
  return sub_1000C6AE0(v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_1000B5230()
{
  *(void *)(v1 + 16) = v0;
  return sub_100084120((uint64_t)sub_1000B5248);
}

uint64_t sub_1000B5248()
{
  sub_10000EC58();
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = self;
  id v3 = v1;
  sub_1000EF2C4((uint64_t)[v2 currentConnection]);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_1000EF0D0(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_1000B5304;
  uint64_t v7 = sub_1000EE488();
  return sub_1000C7348(v7, v8, v9, v10, v11);
}

uint64_t sub_1000B5304()
{
  sub_10006039C();
  sub_100010BAC();
  uint64_t v3 = v2;
  sub_100060250();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_100010BC4();
  void *v6 = v5;
  *(void *)(v3 + 40) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_100060358();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {

    uint64_t v10 = sub_1000EE6F0();
    return v11(v10);
  }
}

void sub_1000B5418()
{
  sub_10000E990();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = sub_10000BF1C(&qword_10017F840);
  uint64_t v7 = sub_1000EEDE8(v6);
  __chkstk_darwin(v7);
  uint64_t v59 = sub_1000EED80(v8, v55);
  sub_100028430();
  __chkstk_darwin(v9);
  sub_1000EF4D4(v10, v56);
  uint64_t v11 = type metadata accessor for URL();
  sub_100028430();
  __chkstk_darwin(v12);
  uint64_t v13 = sub_10000BF1C(&qword_10017F848);
  uint64_t v14 = sub_1000EEDE8(v13);
  __chkstk_darwin(v14);
  sub_1000EEE90();
  uint64_t v15 = type metadata accessor for URLResourceValues();
  sub_100028430();
  __chkstk_darwin(v16);
  uint64_t v17 = sub_1000EF440();
  long long v18 = (int *)type metadata accessor for LSLinkBundleRecord(v17);
  sub_1000283FC();
  __chkstk_darwin(v19);
  sub_1000A3C1C();
  uint64_t v20 = sub_1000E8A68(v3, (SEL *)&selRef_bundleIdentifier);
  if (!v21)
  {

    goto LABEL_13;
  }
  uint64_t v60 = v11;
  uint64_t *v0 = v20;
  v0[1] = v21;
  self;
  uint64_t v22 = swift_dynamicCastObjCClass();
  long long v23 = &selRef_initWithConnection_options_error_;
  if (!v22
    || (uint64_t v24 = (void *)v22,
        id v25 = v3,
        uint64_t v26 = sub_1000E8934(v24),
        long long v23 = &selRef_initWithConnection_options_error_,
        v27 >> 60 == 15))
  {
    id v28 = [v3 v23[65]];
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10000BF1C(&qword_10017F850);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10013EF20;
    *(void *)(inited + 32) = NSURLContentModificationDateKey;
    id v30 = NSURLContentModificationDateKey;
    sub_100082268(inited);
    URL.resourceValues(forKeys:)();
    sub_1000EECC4();
    v37();
    swift_bridgeObjectRelease();
    sub_1000F0028(v1, 0);
    sub_1000EEFC8(v1, 1, v15);
    if (v38)
    {

      sub_1000347E8(v1, &qword_10017F848);
    }
    else
    {
      sub_1000EF100();
      v43();
      URLResourceValues.contentModificationDate.getter();
      uint64_t v44 = sub_1000EF0E8();
      sub_1000EEFC8(v44, v45, v59);
      if (!v46)
      {
        sub_1000EFAD4();
        sub_1000EF100();
        v48();
        Date.timeIntervalSinceReferenceDate.getter();
        uint64_t v58 = sub_1000EF76C(v49);
        uint64_t v51 = v50;
        sub_1000EFABC();
        sub_1000EECC4();
        v52();
        sub_1000EF054();
        sub_100013EC4();
        v53();
        uint64_t v54 = (uint64_t *)((char *)v0 + v18[6]);
        *uint64_t v54 = v58;
        v54[1] = v51;
        goto LABEL_7;
      }

      sub_1000EF054();
      sub_1000EECC4();
      v47();
      sub_1000347E8(v57, &qword_10017F840);
    }
    swift_bridgeObjectRelease();
LABEL_13:
    sub_10000D5B0(v5, 1, 1, (uint64_t)v18);
    goto LABEL_16;
  }
  uint64_t v31 = (uint64_t *)((char *)v0 + v18[6]);
  *uint64_t v31 = v26;
  v31[1] = v27;
LABEL_7:
  id v32 = [v3 registrationDate];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  self;
  if (swift_dynamicCastObjCClass())
  {
    id v33 = v3;
    char v34 = sub_100013FF0();

    uint64_t v35 = v18[8];
    char v36 = v34 & 1;
  }
  else
  {
    uint64_t v35 = v18[8];
    char v36 = 1;
  }
  *((unsigned char *)v0 + v35) = v36;
  *((unsigned char *)v0 + v18[9]) = 0;
  id v39 = [v3 URL];
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v40 = sub_1000EF234();
  sub_10000D5B0(v40, v41, v42, v60);
  sub_1000EF50C();
  sub_1000E8894();
  sub_10000D5B0(v5, 0, 1, (uint64_t)v18);
  sub_1000E88E0((uint64_t)v0, (void (*)(void))type metadata accessor for LSLinkBundleRecord);
LABEL_16:
  sub_10000E930();
}

uint64_t sub_1000B5960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  v4[9] = a2;
  return sub_100084120((uint64_t)sub_1000B597C);
}

uint64_t sub_1000B597C()
{
  sub_10006039C();
  uint64_t v1 = (void *)v0[11];
  uint64_t v2 = self;
  id v3 = v1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v4 = [v2 currentConnection];
  v0[12] = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[13] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1000B5A90;
  uint64_t v6 = v0[11];
  uint64_t v7 = v0[8];
  uint64_t v8 = v0[9];
  return sub_1000C8D8C((uint64_t)v5, (uint64_t)v4, 0x7972747369676552, 0xEE00726F72726520, v6, v6, v7, v8);
}

uint64_t sub_1000B5A90()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v3 = v2;
  sub_100060250();
  *id v4 = v3;
  uint64_t v5 = *v1;
  sub_100010BC4();
  void *v6 = v5;
  *(void *)(v3 + 112) = v0;
  swift_task_dealloc();
  if (!v0) {

  }
  sub_100060358();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000B5B74()
{
  sub_1000EF3B0();
  unint64_t v1 = v0[8];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v2 = result;
    if (!result) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v2) {
      goto LABEL_9;
    }
  }
  if (v2 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v4 = 0;
  uint64_t v14 = v0[8] + 32;
  do
  {
    if ((v1 & 0xC000000000000001) != 0) {
      id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v5 = *(id *)(v14 + 8 * v4);
    }
    uint64_t v6 = v5;
    uint64_t v7 = v0[9];
    uint64_t v8 = v0[10];
    ++v4;
    NSString v9 = String._bridgeToObjectiveC()();
    uint64_t v10 = (void *)sub_10001B414();
    v10[2] = v7;
    v10[3] = v8;
    v10[4] = v6;
    v0[6] = sub_1000ECC38;
    v0[7] = v10;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_1000DEC40;
    v0[5] = &unk_100172940;
    uint64_t v11 = _Block_copy(v0 + 2);
    swift_bridgeObjectRetain();
    id v12 = v6;
    swift_release();
    sub_1000EF50C();
    AnalyticsSendEventLazy();
    _Block_release(v11);
  }
  while (v2 != v4);
LABEL_9:
  swift_bridgeObjectRelease();
  sub_100070028();
  return v13();
}

uint64_t sub_1000B5D70()
{
  sub_10000EC58();

  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

unint64_t *sub_1000B5DD0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) <= *(void *)(a2 + 16) >> 3)
  {
    sub_1000E716C(a1);
    return (unint64_t *)a2;
  }
  else
  {
    return sub_1000E7318(a1, a2);
  }
}

uint64_t sub_1000B5E34()
{
  sub_10000BF1C((uint64_t *)&unk_10017FFA0);
  uint64_t v0 = sub_1000EF060();
  *(_OWORD *)(v0 + 16) = xmmword_10013EF20;
  if (qword_10017C418 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_100181D88;
  *(void *)(v0 + 56) = &type metadata for NotifyingRegistryObserver;
  *(void *)(v0 + 64) = &off_100171C80;
  *(void *)(v0 + 32) = v1;
  qword_100181F80 = (uint64_t)sub_1000B5F30;
  *(void *)algn_100181F88 = 0;
  qword_100181F90 = (uint64_t)sub_1000B5F7C;
  unk_100181F98 = 0;
  qword_100181FA0 = (uint64_t)sub_1000B5FB0;
  unk_100181FA8 = 0;
  qword_100181FB0 = (uint64_t)sub_1000B5FF4;
  unk_100181FB8 = 0;
  qword_100181FC0 = v0;
  unk_100181FC8 = 0x4014000000000000;

  return swift_retain();
}

void sub_1000B5F30(void *a1@<X0>, void *a2@<X8>)
{
  sub_100109064(a1, __src);
  if (!v2) {
    memcpy(a2, __src, 0x88uLL);
  }
}

uint64_t sub_1000B5F7C()
{
  return static AssistantPrebuiltLibrary.library.getter();
}

uint64_t sub_1000B5FB0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for LSLinkBundleSource();
  uint64_t result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&off_1001720D8;
  *a1 = result;
  return result;
}

char *sub_1000B5FF4()
{
  uint64_t v1 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v14 - v9;
  uint64_t v11 = (char *)[self defaultManager];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000510DC();

  swift_bridgeObjectRelease();
  if (!v0)
  {
    type metadata accessor for Registry(0);
    URL.appendingPathComponent(_:isDirectory:)();
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v3, v10, v4);
    sub_10000D5B0((uint64_t)v3, 0, 1, v4);
    uint64_t v11 = sub_1000B6280((uint64_t)v7, (unint64_t)v3);
    sub_1000347E8((uint64_t)v3, (uint64_t *)&unk_10017D0C0);
    uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
    v13(v7, v4);
    v13(v10, v4);
  }
  return v11;
}

char *sub_1000B6280(uint64_t a1, unint64_t a2)
{
  unint64_t v108 = a2;
  uint64_t v101 = type metadata accessor for RegistryError(0);
  __chkstk_darwin(v101);
  uint64_t v102 = (char *)&v92 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v104 = (char *)&v92 - v4;
  uint64_t v5 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v5 - 8);
  uint64_t v106 = (uint64_t)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(char **)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v96 = (char *)&v92 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  char v110 = (char *)&v92 - v11;
  __chkstk_darwin(v12);
  uint64_t v105 = (char *)&v92 - v13;
  __chkstk_darwin(v14);
  uint64_t v100 = (char *)&v92 - v15;
  __chkstk_darwin(v16);
  uint64_t v114 = (char *)&v92 - v17;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v92 - v19;
  __chkstk_darwin(v21);
  long long v23 = (char *)&v92 - v22;
  uint64_t v112 = self;
  id v24 = [v112 defaultManager];
  URL.path.getter();
  NSString v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v118 = 0;
  unsigned int v26 = [v24 createDirectoryAtPath:v25 withIntermediateDirectories:1 attributes:0 error:&v118];

  if (!v26)
  {
    id v39 = v118;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return v20;
  }
  unint64_t v27 = v24;
  id v28 = v118;
  unint64_t v93 = (unint64_t)"staticVocabularyExtraction";
  URL.appendingPathComponent(_:)();
  if (off_10017C4C0 != (_UNKNOWN *)-1) {
    goto LABEL_62;
  }
  while (1)
  {
    uint64_t v94 = type metadata accessor for Logger();
    uint64_t v29 = sub_10000BEE4(v94, (uint64_t)qword_100181FD0);
    id v30 = (void (**)(char *, uint64_t, unint64_t))v8;
    uint64_t v31 = (void (*)(char *, char *, unint64_t))*((void *)v8 + 2);
    uint64_t v99 = v8 + 16;
    os_log_type_t v98 = v31;
    v31(v20, v23, v7);
    uint64_t v95 = v29;
    id v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.debug.getter();
    BOOL v34 = os_log_type_enabled(v32, v33);
    uint64_t v103 = v23;
    uint64_t v109 = v8;
    uint64_t v97 = (char *)v27;
    if (v34)
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      id v118 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 136315138;
      uint64_t v36 = URL.path.getter();
      uint64_t v115 = sub_100013090(v36, v37, (uint64_t *)&v118);
      long long v23 = v103;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v113 = (void (*)(_WORD *, unint64_t))*((void *)v109 + 1);
      v113(v20, v7);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Loading metadata store from %s", v35, 0xCu);
      swift_arrayDestroy();
      char v38 = v110;
      uint64_t v20 = v97;
      swift_slowDealloc();
      id v30 = (void (**)(char *, uint64_t, unint64_t))v109;
      swift_slowDealloc();
    }
    else
    {
      uint64_t v113 = (void (*)(_WORD *, unint64_t))*((void *)v8 + 1);
      v113(v20, v7);

      uint64_t v20 = (char *)v27;
      char v38 = v110;
    }
    unint64_t v40 = v7;
    uint64_t v41 = v106;
    sub_1000A3B4C(v108, v106, (uint64_t *)&unk_10017D0C0);
    if (sub_10000D5D8(v41, 1, v7) == 1)
    {
      uint64_t v42 = v20;
      sub_1000347E8(v41, (uint64_t *)&unk_10017D0C0);
      goto LABEL_39;
    }
    v30[4](v114, v41, v7);
    URL.path.getter();
    NSString v43 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v118 = 0;
    id v44 = [v20 contentsOfDirectoryAtPath:v43 error:&v118];

    id v45 = v118;
    unint64_t v111 = v7;
    if (!v44) {
      break;
    }
    uint64_t v46 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v47 = v45;

    uint64_t v48 = *(void *)(v46 + 16);
    uint64_t v106 = v46;
    if (v48)
    {
      sub_10001B398();
      double v49 = (char **)(v46 + 40);
      unint64_t v27 = _swiftEmptyArrayStorage;
      unint64_t v50 = v93 | 0x8000000000000000;
      unint64_t v108 = v93 | 0x8000000000000000;
      do
      {
        uint64_t v51 = *(v49 - 1);
        uint64_t v20 = *v49;
        id v118 = v51;
        char v119 = v20;
        uint64_t v115 = 0xD00000000000001BLL;
        unint64_t v116 = v50;
        swift_bridgeObjectRetain();
        if (StringProtocol.contains<A>(_:)())
        {
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v117 = (uint64_t)v27;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_100057848();
            unint64_t v27 = (void *)v117;
          }
          unint64_t v53 = v27[2];
          if (v53 >= v27[3] >> 1)
          {
            sub_100057848();
            unint64_t v27 = (void *)v117;
          }
          uint64_t v27[2] = v53 + 1;
          uint64_t v54 = &v27[2 * v53];
          v54[4] = v51;
          v54[5] = v20;
          unint64_t v50 = v108;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        v49 += 2;
        --v48;
      }
      while (v48);
    }
    else
    {
      unint64_t v27 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease();
    long long v23 = (char *)v27[2];
    if (!v23)
    {
      unint64_t v40 = v111;
      v113(v114, v111);
      swift_release();
LABEL_32:
      uint64_t v42 = v97;
      long long v23 = v103;
      goto LABEL_38;
    }
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v20 = (char *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Found a database at the old location, removing...", (uint8_t *)v20, 2u);
      swift_slowDealloc();
    }

    unint64_t v7 = 0;
    uint64_t v58 = v27 + 5;
    uint64_t v8 = v100;
    while (v7 < v27[2])
    {
      swift_bridgeObjectRetain();
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      id v59 = [v112 defaultManager];
      URL._bridgeToObjectiveC()(v60);
      uint64_t v62 = v61;
      id v118 = 0;
      uint64_t v20 = (char *)[v59 removeItemAtURL:v61 error:&v118];

      if (!v20)
      {
        id v65 = v118;
        swift_release();
        _convertNSErrorToError(_:)();

        swift_willThrow();
        unint64_t v66 = v111;
        v113(v8, v111);
        unint64_t v40 = v66;
        uint64_t v107 = 0;
        uint64_t v20 = v97;
        goto LABEL_34;
      }
      ++v7;
      id v63 = v118;
      v113(v8, v111);
      v58 += 2;
      if (v23 == (char *)v7)
      {
        swift_release();
        unint64_t v64 = v111;
        v113(v114, v111);
        unint64_t v40 = v64;
        goto LABEL_32;
      }
    }
    __break(1u);
LABEL_62:
    swift_once();
  }
  id v55 = v118;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  uint64_t v107 = 0;
LABEL_34:
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v67 = Logger.logObject.getter();
  os_log_type_t v68 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v67, v68))
  {
    char v69 = (uint8_t *)swift_slowAlloc();
    uint64_t v112 = (void *)swift_slowAlloc();
    *(_DWORD *)char v69 = 138412290;
    swift_errorRetain();
    int64_t v70 = (void *)_swift_stdlib_bridgeErrorToNSError();
    id v118 = v70;
    unint64_t v40 = v111;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v112 = v70;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v67, v68, "Failed to remove old database: %@", v69, 0xCu);
    sub_10000BF1C((uint64_t *)&unk_10017EB20);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  long long v23 = v103;
  uint64_t v42 = v20;
  swift_errorRelease();
  v113(v114, v40);
LABEL_38:
  char v38 = v110;
LABEL_39:
  type metadata accessor for MetadataStore();
  uint64_t v71 = (uint64_t)v105;
  v98(v105, v23, v40);
  uint64_t v72 = v107;
  uint64_t v73 = sub_100066BD4(v71);
  if (!v72)
  {
    uint64_t v20 = (char *)v73;
    v113(v23, v40);

    return v20;
  }
  uint64_t v115 = v72;
  swift_errorRetain();
  sub_10000BF1C(&qword_10017C810);
  if (!swift_dynamicCast())
  {
    uint64_t v20 = v104;
    goto LABEL_47;
  }
  uint64_t v74 = (uint64_t)v118;
  uint64_t v20 = v104;
  if (v119 == 2)
  {
    swift_errorRelease();
    Swift::Int v83 = Logger.logObject.getter();
    os_log_type_t v84 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v83, v84))
    {
      uint64_t v85 = swift_slowAlloc();
      *(_DWORD *)uint64_t v85 = 134218240;
      uint64_t v117 = v74;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v85 + 12) = 2048;
      uint64_t v117 = 103;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v83, v84, "Metadata store version mismatch detected (database: %lld, expected: %ld). Recreating the metadata store database", (uint8_t *)v85, 0x16u);
      swift_slowDealloc();
    }

    uint64_t v86 = v103;
    sub_100066D4C();
    v98(v38, v86, v40);
    uint64_t v87 = (uint64_t)v38;
    goto LABEL_60;
  }
  if (v119 == 3 && !v118)
  {
    swift_errorRelease();
    uint64_t v88 = Logger.logObject.getter();
    os_log_type_t v89 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v88, v89))
    {
      unint64_t v90 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v90 = 0;
      _os_log_impl((void *)&_mh_execute_header, v88, v89, "Dropping database and recreating due to database integrity issues", v90, 2u);
      swift_slowDealloc();
    }

    uint64_t v86 = v103;
    sub_100066D4C();
    char v91 = v96;
    v98(v96, v86, v40);
    uint64_t v87 = (uint64_t)v91;
LABEL_60:
    uint64_t v20 = (char *)sub_100066BD4(v87);
    v113(v86, v40);

    swift_errorRelease();
    return v20;
  }
  sub_10006FB84((uint64_t)v118, v119);
LABEL_47:
  swift_errorRelease();
  sub_1000B82C4();
  uint64_t v75 = (uint64_t)v102;
  if (qword_10017C480 != -1) {
    swift_once();
  }
  sub_10000BEE4(v94, (uint64_t)qword_100181F38);
  sub_1000E8894();
  uint64_t v76 = Logger.logObject.getter();
  os_log_type_t v77 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v76, v77))
  {
    uint64_t v78 = (uint8_t *)swift_slowAlloc();
    unint64_t v79 = (void *)swift_slowAlloc();
    unint64_t v111 = v40;
    id v118 = v79;
    *(_DWORD *)uint64_t v78 = 136315138;
    sub_1000B84B4();
    uint64_t v115 = sub_100013090(v80, v81, (uint64_t *)&v118);
    uint64_t v42 = v97;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000E88E0(v75, (void (*)(void))type metadata accessor for RegistryError);
    _os_log_impl((void *)&_mh_execute_header, v76, v77, "Error loading metadata store: %s", v78, 0xCu);
    swift_arrayDestroy();
    unint64_t v40 = v111;
    swift_slowDealloc();
    uint64_t v20 = v104;
    swift_slowDealloc();
  }
  else
  {
    sub_1000E88E0(v75, (void (*)(void))type metadata accessor for RegistryError);
  }

  sub_1000E63EC(&qword_10017F838, (void (*)(uint64_t))type metadata accessor for RegistryError);
  swift_allocError();
  sub_1000E8894();
  swift_willThrow();

  swift_errorRelease();
  sub_1000E88E0((uint64_t)v20, (void (*)(void))type metadata accessor for RegistryError);
  v113(v103, v40);
  return v20;
}

uint64_t sub_1000B7318()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000D844(v0, qword_100181FD0);
  sub_10000BEE4(v0, (uint64_t)qword_100181FD0);
  type metadata accessor for Registry(0);
  sub_10000BF1C((uint64_t *)&unk_10017EAF0);
  String.init<A>(describing:)();
  uint64_t result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    String.init(cString:)();
    return Logger.init(subsystem:category:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000B73C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void (*v39)(long long *__return_ptr, uint64_t);
  uint64_t v40;
  uint64_t (*v41)(uint64_t *);
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  void (*v52)(void);
  uint64_t v53;
  id v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  objc_class *ObjectType;
  objc_super v86;
  long long v87;
  uint64_t v88;
  _UNKNOWN **v89;
  long long v90;
  uint64_t v91;
  _UNKNOWN **v92;

  sub_100018E30();
  a19 = v23;
  a20 = v24;
  unsigned int v26 = v25;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v27 = sub_10000BF1C(&qword_10017DCC0);
  uint64_t v28 = sub_1000EEDE8(v27);
  __chkstk_darwin(v28);
  sub_1000B1BD0();
  unint64_t v81 = v29;
  uint64_t v30 = sub_10000BF1C(&qword_10017F5A8);
  uint64_t v31 = sub_1000EEDE8(v30);
  __chkstk_darwin(v31);
  sub_100018E60();
  *(void *)&v20[OBJC_IVAR____TtC10LinkDaemon8Registry_ready] = 0;
  id v32 = &v20[OBJC_IVAR____TtC10LinkDaemon8Registry_lastMetadataAudit];
  uint64_t v33 = sub_10000BF1C(&qword_10017F980);
  sub_10000D5B0(v22, 1, 1, v33);
  *(_DWORD *)id v32 = 0;
  BOOL v34 = v20;
  uint64_t v35 = &v32[*(int *)(sub_10000BF1C(&qword_10017F5B0) + 28)];
  uint64_t v36 = sub_10000BF1C(&qword_10017FF78);
  sub_1000EEDE8(v36);
  bzero(v35, *(void *)(v37 + 64));
  uint64_t v38 = sub_100083620(v22, (uint64_t)v35, &qword_10017F5A8);
  *(void *)&v34[OBJC_IVAR____TtC10LinkDaemon8Registry_appProtectionSubscription] = 0;
  id v39 = (void (*)(long long *__return_ptr, uint64_t))v26[4];
  Swift::Int v83 = v26[5];
  v39(&v90, v38);
  unint64_t v40 = (uint64_t)&v34[OBJC_IVAR____TtC10LinkDaemon8Registry_applicationSource];
  sub_10000D698(&v90, (uint64_t)&v34[OBJC_IVAR____TtC10LinkDaemon8Registry_applicationSource]);
  uint64_t v41 = (uint64_t (*)(uint64_t *))v26[6];
  BOOL v82 = v26[7];
  uint64_t v42 = v41(v26);
  os_log_type_t v84 = v21;
  if (v21)
  {
    swift_release();
    sub_100093428(v26[2]);
    swift_release();
    swift_release();
    a10 = v26[8];
    sub_10000D818((uint64_t)&a10);
    sub_10000E788(v40);
    swift_release();
    sub_1000347E8((uint64_t)v32, &qword_10017F5B0);

    swift_unknownObjectRelease();
    swift_deallocPartialClassInstance();
  }
  else
  {
    NSString v43 = (void *)v42;
    uint64_t v80 = OBJC_IVAR____TtC10LinkDaemon8Registry_store;
    *(void *)&v34[OBJC_IVAR____TtC10LinkDaemon8Registry_store] = v42;
    id v44 = type metadata accessor for MetadataStore();
    char v91 = v44;
    uint64_t v92 = &off_1001700F0;
    *(void *)&unint64_t v90 = v43;
    type metadata accessor for AppShortcutInterpolator();
    id v45 = swift_allocObject();
    sub_10005FFB0((uint64_t)&v90, v44);
    unint64_t v79 = &v77;
    sub_100028430();
    id v47 = v46;
    double v49 = *(void *)(v48 + 64);
    __chkstk_darwin(v50);
    uint64_t v78 = (v49 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v51 = (uint64_t *)((char *)&v77 - v78);
    unint64_t v52 = *(void (**)(void))(v47 + 16);
    sub_1000EF70C();
    v52();
    unint64_t v53 = *v51;
    uint64_t v88 = v44;
    os_log_type_t v89 = &off_1001700F0;
    *(void *)&uint64_t v87 = v53;
    uint64_t v54 = v43;
    swift_defaultActor_initialize();
    sub_10000D698(&v87, v45 + 112);
    sub_10000E788((uint64_t)&v90);

    unint64_t v79 = (uint64_t *)OBJC_IVAR____TtC10LinkDaemon8Registry_appShortcutInterpolator;
    *(void *)&v34[OBJC_IVAR____TtC10LinkDaemon8Registry_appShortcutInterpolator] = v45;
    id v55 = *(void **)&v34[v80];
    char v91 = v44;
    uint64_t v92 = &off_100170758;
    *(void *)&unint64_t v90 = v55;
    type metadata accessor for AssistantIntentPhraseInterpolator();
    uint64_t v56 = swift_allocObject();
    os_log_type_t v57 = sub_10005FFB0((uint64_t)&v90, v44);
    __chkstk_darwin(v57);
    uint64_t v58 = (uint64_t *)((char *)&v77 - v78);
    sub_1000EF70C();
    v52();
    id v59 = *v58;
    uint64_t v88 = v44;
    os_log_type_t v89 = &off_100170758;
    *(void *)&uint64_t v87 = v59;
    uint64_t v60 = v55;
    swift_defaultActor_initialize();
    sub_10000D698(&v87, v56 + 112);
    sub_10000E788((uint64_t)&v90);

    *(void *)&v34[OBJC_IVAR____TtC10LinkDaemon8Registry_examplePhraseInterpolator] = v56;
    uint64_t v61 = v26[8];
    *(void *)&v34[OBJC_IVAR____TtC10LinkDaemon8Registry_observers] = v61;
    uint64_t v62 = *(void **)&v34[v80];
    id v63 = v26[1];
    uint64_t v80 = *v26;
    unint64_t v64 = v26[2];
    id v65 = v26[3];
    type metadata accessor for Registry.IndexingQueue();
    swift_allocObject();
    swift_bridgeObjectRetain_n();
    unint64_t v66 = v62;
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v67 = sub_1000EF2B8();
    sub_100059D80(v67);
    os_log_type_t v68 = sub_10000EBA4();
    *(void *)&v34[OBJC_IVAR____TtC10LinkDaemon8Registry_indexingQueue] = sub_1000BCAC8(v68, v69, v56, v61, v80, v63, v64, v65);

    v86.receiver = v34;
    v86.super_class = ObjectType;
    int64_t v70 = [super init];
    uint64_t v71 = type metadata accessor for TaskPriority();
    uint64_t v72 = v81;
    sub_10000D5B0(v81, 1, 1, v71);
    uint64_t v73 = (void *)swift_allocObject();
    _OWORD v73[2] = 0;
    v73[3] = 0;
    v73[4] = v70;
    uint64_t v74 = (char *)v70;
    uint64_t v75 = sub_100011AA4(v72, (uint64_t)&unk_10017FF88, (uint64_t)v73);
    swift_release();
    uint64_t v76 = sub_1000EF2B8();
    sub_100093428(v76);

    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)&v74[OBJC_IVAR____TtC10LinkDaemon8Registry_ready] = v75;
    swift_release();
  }
  sub_100018E80();
}

uint64_t sub_1000B7974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  uint64_t v5 = type metadata accessor for Logger();
  v4[3] = v5;
  v4[4] = *(void *)(v5 - 8);
  v4[5] = swift_task_alloc();
  return _swift_task_switch(sub_1000B7A34, 0, 0);
}

uint64_t sub_1000B7A34()
{
  sub_100084ED0();
  sub_100013E0C();
  if (sub_1000B7DC0())
  {
    uint64_t v2 = (os_unfair_lock_s *)(*(void *)(v1 + 16) + OBJC_IVAR____TtC10LinkDaemon8Registry_lastMetadataAudit);
    os_unfair_lock_lock(v2);
    uint64_t v3 = (uint64_t)v2 + *(int *)(sub_10000BF1C(&qword_10017F5B0) + 28);
    sub_1000347E8(v3, &qword_10017F5A8);
    sub_10000BF1C(&qword_10017F980);
    Date.init()();
    id v4 = sub_1000B81C0();
    sub_1000EF64C((uint64_t)v4);
    swift_task_dealloc();
    sub_10000EB74();
    sub_100084D74();
    return v6(v5, v6, v7, v8, v9, v10, v11, v12);
  }
  else
  {
    uint64_t v14 = off_10017C4C0;
    id v15 = *(id *)(v1 + 16);
    if (v14 == (void *)-1)
    {
      uint64_t v16 = v15;
    }
    else
    {
      swift_once();
      uint64_t v16 = *(void **)(v1 + 16);
    }
    sub_1000EFC28();
    sub_10000BEE4(v0, (uint64_t)qword_100181FD0);
    uint64_t v17 = sub_1000EED50();
    v18(v17);

    os_log_type_t v19 = static os_log_type_t.default.getter();
    uint64_t v20 = Logger.logObject.getter();
    if (os_log_type_enabled(v20, v19))
    {
      uint64_t v21 = (_WORD *)sub_1000EECD0();
      sub_1000EF048(v21);
      sub_1000EE99C((void *)&_mh_execute_header, v22, v23, "Starting registry sync");
      sub_10000EB10();
    }
    sub_1000EFC28();

    uint64_t v24 = sub_1000EECF4();
    v25(v24);
    uint64_t v26 = swift_task_alloc();
    uint64_t v27 = (void *)sub_1000EED44(v26);
    *uint64_t v27 = v28;
    v27[1] = sub_1000B7C34;
    sub_100060358();
    sub_100084D74();
    return sub_1000B7E14(v29, v30, v31);
  }
}

uint64_t sub_1000B7C34()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000B7CFC()
{
  sub_100084ED0();
  sub_100013E0C();
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC10LinkDaemon8Registry_lastMetadataAudit);
  os_unfair_lock_lock(v1);
  uint64_t v2 = (uint64_t)v1 + *(int *)(sub_10000BF1C(&qword_10017F5B0) + 28);
  sub_1000347E8(v2, &qword_10017F5A8);
  sub_10000BF1C(&qword_10017F980);
  Date.init()();
  id v3 = sub_1000B81C0();
  sub_1000EF64C((uint64_t)v3);
  swift_task_dealloc();
  sub_10000EB74();
  sub_100084D74();
  return v5(v4, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1000B7DC0()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC10LinkDaemon8Registry_store);
  uint64_t v2 = *sub_10000BEA0((void *)(v0 + OBJC_IVAR____TtC10LinkDaemon8Registry_applicationSource), *(void *)(v0 + OBJC_IVAR____TtC10LinkDaemon8Registry_applicationSource + 24));

  return sub_1000EA258(v2, v1);
}

uint64_t sub_1000B7E14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for OSSignpostID();
  v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  return _swift_task_switch(sub_1000B7ED8, 0, 0);
}

uint64_t sub_1000B7ED8()
{
  sub_10000EC58();
  static OSSignpostID.exclusive.getter();
  sub_1000B4C38();
  v0[9] = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  v0[10] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000B7FB8;
  uint64_t v4 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v5 = v0[2];
  uint64_t v6 = v0[3];
  return sub_1000B8944((uint64_t)v2, v3, v5, v6, v4);
}

uint64_t sub_1000B7FB8()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000B8094()
{
  sub_10006039C();
  sub_1000E30D4();
  swift_release();
  uint64_t v0 = sub_1000EECF4();
  v1(v0);
  swift_task_dealloc();
  sub_10000EB74();
  return v2();
}

void sub_1000B814C()
{
}

id sub_1000B81C0()
{
  id v0 = [self sharedDatabaseContext];
  id v5 = 0;
  if ([v0 startAccessingReturningError:&v5])
  {
    id v1 = v5;
    id v2 = [v0 currentPersistentIdentifier];
    [v0 stopAccessing];
  }
  else
  {
    id v3 = v5;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    return 0;
  }
  return v2;
}

void sub_1000B82C4()
{
  sub_1000288B4();
  uint64_t v1 = v0;
  id v3 = v2;
  type metadata accessor for RegistryError(0);
  sub_1000283FC();
  __chkstk_darwin(v4);
  sub_100018E60();
  swift_errorRetain();
  sub_10000BF1C(&qword_10017C810);
  if (!swift_dynamicCast())
  {
    swift_errorRelease();
    swift_errorRetain();
    sub_10000D9D4(0, &qword_10017F268);
    if (swift_dynamicCast())
    {
      id v5 = [v13 domain];
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v8 = v7;

      if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
      {
        sub_10008469C();
      }
      else
      {
        sub_1000EF9E0();
        char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v11 & 1) == 0)
        {

          goto LABEL_14;
        }
      }
      id v12 = [v13 code];

      if (v12 == (id)1700)
      {
        sub_1000EF244();
        swift_storeEnumTagMultiPayload();
        goto LABEL_3;
      }
    }
LABEL_14:
    swift_errorRelease();
    *id v3 = v1;
    sub_1000EF244();
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    goto LABEL_15;
  }
  sub_1000EF584();
  sub_1000EA1A4();
LABEL_3:
  swift_errorRelease();
LABEL_15:
  sub_10000EB44();
}

void sub_1000B84B4()
{
  sub_1000288B4();
  type metadata accessor for UUID();
  sub_100028430();
  __chkstk_darwin(v1);
  sub_100018DBC();
  type metadata accessor for RegistryError(0);
  sub_1000283FC();
  __chkstk_darwin(v2);
  sub_100018E60();
  sub_1000EFAC8();
  sub_1000E8894();
  sub_1000EF590();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v10 = *v0;
      char v11 = (void *)v0[1];
      sub_1000EF118();
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease();
      uint64_t v22 = 0xD00000000000002BLL;
      uint64_t v23 = 0x8000000100145740;
      v12._uint64_t countAndFlagsBits = v10;
      v12._unint64_t object = v11;
      String.append(_:)(v12);
      goto LABEL_8;
    case 2u:
      sub_1000EF100();
      v13();
      sub_1000EF118();
      _StringGuts.grow(_:)(72);
      v14._uint64_t countAndFlagsBits = 0xD000000000000046;
      v14._unint64_t object = (void *)0x80000001001456F0;
      String.append(_:)(v14);
      sub_1000E63EC((unint64_t *)&qword_10017D010, (void (*)(uint64_t))&type metadata accessor for UUID);
      v15._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      sub_1000EEF84();
      v16();
      break;
    case 3u:
      uint64_t v8 = *v0;
      uint64_t v26 = *v0;
      swift_errorRetain();
      sub_10000BF1C(&qword_10017C810);
      if (swift_dynamicCast())
      {
        _StringGuts.grow(_:)(16);
        swift_bridgeObjectRelease();
        strcpy(v20, "SQLite error: ");
        char v21 = -18;
        v9._uint64_t countAndFlagsBits = Result.description.getter(v22, v23, v24, v25);
        String.append(_:)(v9);
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_bridgeObjectRelease();
        swift_release();
      }
      else
      {
        swift_errorRelease();
        uint64_t v22 = v8;
        swift_errorRetain();
        sub_10000D9D4(0, &qword_10017F268);
        if (swift_dynamicCast())
        {
          id v19 = [*(id *)v20 description];
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          swift_errorRelease();
        }
        else
        {
          swift_errorRelease();
          swift_getErrorValue();
          Error.localizedDescription.getter();
        }
      }
      swift_errorRelease();
      break;
    case 4u:
    case 6u:
      break;
    case 5u:
      sub_1000EF118();
      _StringGuts.grow(_:)(63);
      v17._unint64_t object = (void *)0x8000000100142F40;
      v17._uint64_t countAndFlagsBits = 0xD00000000000003DLL;
      String.append(_:)(v17);
      v18._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
      String.append(_:)(v18);
LABEL_8:
      swift_bridgeObjectRelease();
      break;
    default:
      uint64_t v3 = *v0;
      uint64_t v4 = (void *)v0[1];
      sub_1000EF118();
      _StringGuts.grow(_:)(53);
      v5._uint64_t countAndFlagsBits = 0xD000000000000016;
      v5._unint64_t object = (void *)0x80000001001457B0;
      String.append(_:)(v5);
      v6._uint64_t countAndFlagsBits = v3;
      v6._unint64_t object = v4;
      String.append(_:)(v6);
      swift_bridgeObjectRelease();
      v7._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
      v7._unint64_t object = (void *)0x80000001001457D0;
      String.append(_:)(v7);
      break;
  }
  sub_10000EBA4();
  sub_10000EB44();
}

uint64_t sub_1000B8944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[14] = a4;
  v5[15] = a5;
  v5[12] = a2;
  v5[13] = a3;
  type metadata accessor for RegistryError(0);
  v5[16] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v5[17] = v6;
  v5[18] = *(void *)(v6 - 8);
  v5[19] = swift_task_alloc();
  return _swift_task_switch(sub_1000B8A34, 0, 0);
}

uint64_t sub_1000B8A34(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_log_t log, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_100084668();
  a25 = v27;
  a26 = v28;
  sub_100084D3C();
  a24 = v26;
  uint64_t v29 = off_10017C4C0;
  id v30 = *(id *)(v26 + 96);
  if (v29 == (void *)-1)
  {
    uint64_t v31 = v30;
  }
  else
  {
    swift_once();
    uint64_t v31 = *(void **)(v26 + 96);
  }
  uint64_t v33 = *(void *)(v26 + 144);
  uint64_t v32 = *(void *)(v26 + 152);
  uint64_t v34 = *(void *)(v26 + 136);
  uint64_t v35 = sub_10000BEE4(v34, (uint64_t)qword_100181FD0);
  *(void *)(v26 + 160) = v35;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v32, v35, v34);

  uint64_t v36 = (void *)Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.default.getter();
  if (sub_1000A3E04(v37))
  {
    uint64_t v38 = (_WORD *)sub_1000EECD0();
    sub_1000EF048(v38);
    sub_1000EE99C((void *)&_mh_execute_header, v39, v40, "Updating the metadata store");
    sub_10000EB10();
  }
  uint64_t v41 = *(void *)(v26 + 104);

  uint64_t v42 = sub_1000EE9D8();
  v43(v42);
  uint64_t v44 = os_transaction_create();
  uint64_t v45 = v44;
  *(void *)(v26 + 168) = v44;
  if (v41)
  {
    uint64_t v71 = v44;
    uint64_t v46 = *(void *)(v26 + 112);
    uint64_t v47 = *(void *)(v26 + 104);
    uint64_t v48 = (void *)v47;
    uint64_t v49 = v46;
    uint64_t v50 = *(void *)(v26 + 120);
  }
  else
  {
    uint64_t v48 = sub_1000B9328();
    uint64_t v49 = v69;
    uint64_t v50 = v70;
    uint64_t v71 = v45;
    uint64_t v46 = *(void *)(v26 + 112);
    uint64_t v47 = *(void *)(v26 + 104);
  }
  sub_1000EF26C();
  sub_1000EE89C();
  swift_bridgeObjectRetain_n();
  sub_1000EA0C4(v47);
  uint64_t v51 = Logger.logObject.getter();
  os_log_type_t v52 = static os_log_type_t.default.getter();
  if (sub_1000A3E04(v52))
  {
    unint64_t v53 = (uint8_t *)sub_1000536D0();
    a14 = (void *)sub_100060438();
    *(_DWORD *)unint64_t v53 = 136315138;
    unint64_t v54 = sub_1000B9390((uint64_t)v48, v49, v50);
    *(void *)(v26 + 88) = sub_100013090(v54, v55, (uint64_t *)&a14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    sub_1000EEEE8();
    sub_10005079C();
    _os_log_impl((void *)&_mh_execute_header, v51, (os_log_type_t)v46, "Detected changes:\n %s", v53, 0xCu);
    sub_1000EF870();
    sub_10000EB10();
    sub_10000EB10();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    sub_1000EEEE8();
    sub_10005079C();
  }

  uint64_t v56 = *(void *)(v26 + 96);
  a14 = v48;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100055048();
  sub_10000BEA0((void *)(v56 + OBJC_IVAR____TtC10LinkDaemon8Registry_applicationSource), *(void *)(v56 + OBJC_IVAR____TtC10LinkDaemon8Registry_applicationSource + 24));
  swift_bridgeObjectRetain();
  uint64_t v57 = sub_1000E3438();
  unint64_t v59 = v58;
  uint64_t v60 = swift_allocObject();
  *(void *)(v60 + 16) = v71;
  swift_unknownObjectRetain();
  uint64_t v61 = sub_1000EFABC();
  sub_1000B9524(v61, v62, v57, v59, 1, v63, v60, v64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v65 = (void *)swift_task_alloc();
  *(void *)(v26 + 176) = v65;
  void *v65 = v26;
  v65[1] = sub_1000B8F9C;
  sub_100084164();
  return sub_1000BCC7C(v66);
}

uint64_t sub_1000B8F9C()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v3 = v2;
  sub_100060250();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_100010BC4();
  void *v6 = v5;
  *(void *)(v3 + 184) = v0;
  swift_task_dealloc();
  if (!v0) {
    sub_1000EA140((void *)(v3 + 16));
  }
  sub_100060358();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000B9080()
{
  sub_10006039C();
  uint64_t v0 = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v0, v1))
  {
    uint64_t v2 = (uint8_t *)sub_1000EECD0();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, v1, "Finished updating the metadata store", v2, 2u);
    sub_10000EB10();

    swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100070028();
  return v3();
}

uint64_t sub_1000B9168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  sub_1000EEE74();
  a21 = v23;
  a22 = v24;
  sub_1000EF9C4();
  a20 = v22;
  sub_1000EA140(v22 + 2);
  swift_unknownObjectRelease();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = v22[16];
    uint64_t v28 = (_DWORD *)sub_1000536D0();
    uint64_t v29 = sub_100060438();
    _DWORD *v28 = 136315138;
    a10 = v28 + 1;
    a11 = v29;
    sub_1000B82C4();
    sub_1000B84B4();
    uint64_t v31 = v30;
    unint64_t v33 = v32;
    sub_1000E88E0(v27, (void (*)(void))type metadata accessor for RegistryError);
    v22[10] = sub_100013090(v31, v33, &a11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    sub_1000EF250((void *)&_mh_execute_header, v25, v34, "Error updating the metadata store: %s");
    sub_100084978();
    sub_10000EB10();
    sub_10000EB10();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100070028();
  sub_100084994();
  return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12, a13, a14);
}

void *sub_1000B9328()
{
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC10LinkDaemon8Registry_store);
  sub_10000C0D4(v0 + OBJC_IVAR____TtC10LinkDaemon8Registry_applicationSource, (uint64_t)v5);
  uint64_t result = sub_1000B9664(v2, v5);
  if (v1) {
    return (void *)v4;
  }
  return result;
}

unint64_t sub_1000B9390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v30 = 0;
    unint64_t v31 = 0xE000000000000000;
    v7._uint64_t countAndFlagsBits = 0x646E75622077654ELL;
    v7._unint64_t object = (void *)0xED00000A3A73656CLL;
    String.append(_:)(v7);
    uint64_t v8 = a1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_1000BC5CC(v8, (uint64_t)&v30, v9, v10, v11, v12, v13, v14, v28, v29, SWORD2(v29), SBYTE6(v29), SHIBYTE(v29));
      v8 += 40;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void *)(a3 + 16);
    if (!v15) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  uint64_t v15 = *(void *)(a3 + 16);
  if (!v15 && !*(void *)(a2 + 16)) {
    return 0xD000000000000013;
  }
  uint64_t v30 = 0;
  unint64_t v31 = 0xE000000000000000;
  if (v15)
  {
LABEL_9:
    v16._unint64_t object = (void *)0x8000000100145860;
    v16._uint64_t countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v16);
    uint64_t v17 = a3 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_1000BC5CC(v17, (uint64_t)&v30, v18, v19, v20, v21, v22, v23, v28, v29, SWORD2(v29), SBYTE6(v29), SHIBYTE(v29));
      v17 += 40;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
  }
LABEL_12:
  uint64_t v24 = *(void *)(a2 + 16);
  if (v24)
  {
    v25._unint64_t object = (void *)0x8000000100145880;
    v25._uint64_t countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v25);
    os_log_type_t v26 = (void *)(a2 + 32);
    swift_bridgeObjectRetain();
    do
    {
      sub_1000BC804(v26, (uint64_t)&v30);
      v26 += 5;
      --v24;
    }
    while (v24);
    swift_bridgeObjectRelease();
  }
  return v30;
}

uint64_t sub_1000B9524@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  swift_bridgeObjectRetain();
  Swift::String v16 = sub_1000B319C(a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_10000DADC(a3, a4);
  sub_10000DA68(0, 0xF000000000000000);
  sub_100059D80(a6);
  sub_100093428(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10006F8F4(a3, a4);
  sub_100059D80(a6);
  sub_100093428(a6);
  sub_10000DA10(a3, a4);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  sub_10000DA68(a3, a4);
  uint64_t result = sub_100093428(a6);
  *(unsigned char *)a8 = a5;
  *(void *)(a8 + 8) = a1;
  *(void *)(a8 + 16) = v16;
  *(void *)(a8 + 24) = a3;
  *(void *)(a8 + 32) = a4;
  *(unsigned char *)(a8 + 40) = 0;
  *(void *)(a8 + 48) = a6;
  *(void *)(a8 + 56) = a7;
  return result;
}

void *sub_1000B9664(void *a1, void *a2)
{
  uint64_t v5 = type metadata accessor for LNBundleRecord();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v8 = (uint64_t *)((char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = sub_10000BF1C((uint64_t *)&unk_10017F940);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (uint64_t *)((char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = _swiftEmptyArrayStorage;
  uint64_t v38 = _swiftEmptyArrayStorage;
  uint64_t v36 = _swiftEmptyArrayStorage;
  uint64_t v37 = _swiftEmptyArrayStorage;
  uint64_t v14 = sub_1000684AC();
  if (v2)
  {
  }
  else
  {
    uint64_t v15 = v6;
    Swift::String v16 = a1;
    uint64_t v32 = v15;
    uint64_t v33 = v9;
    uint64_t v31 = 0;
    uint64_t v17 = *(void *)(v14 + 16);
    if (v17)
    {
      uint64_t v29 = a1;
      uint64_t v30 = a2;
      uint64_t v34 = _swiftEmptyArrayStorage;
      uint64_t v18 = v14;
      sub_100057F60();
      uint64_t v19 = *(unsigned __int8 *)(v32 + 80);
      uint64_t v28 = v18;
      uint64_t v13 = (void *)(v18 + ((v19 + 32) & ~v19));
      uint64_t v32 = *(void *)(v32 + 72);
      uint64_t v20 = v34;
      do
      {
        sub_1000E8894();
        uint64_t v22 = v8[1];
        *uint64_t v12 = *v8;
        v12[1] = v22;
        sub_1000E8894();
        swift_bridgeObjectRetain();
        sub_1000E88E0((uint64_t)v8, (void (*)(void))type metadata accessor for LNBundleRecord);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100057F60();
          uint64_t v20 = v34;
        }
        unint64_t v23 = v20[2];
        if (v23 >= v20[3] >> 1)
        {
          sub_100057F60();
          uint64_t v20 = v34;
        }
        void v20[2] = v23 + 1;
        sub_100083620((uint64_t)v12, (uint64_t)v20+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(void *)(v10 + 72) * v23, (uint64_t *)&unk_10017F940);
        uint64_t v13 = (void *)((char *)v13 + v32);
        --v17;
      }
      while (v17);
      swift_bridgeObjectRelease();
      Swift::String v16 = v29;
      a2 = v30;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v20 = _swiftEmptyArrayStorage;
    }
    uint64_t v24 = v31;
    uint64_t v35 = sub_1000B4980((uint64_t)v20);
    Swift::String v25 = sub_10000BEA0(a2, a2[3]);
    sub_1000E46F8(*v25, &v35, (uint64_t)&v36, (uint64_t *)&v37, (uint64_t *)&v38);
    if (!v24)
    {
      swift_beginAccess();
      uint64_t v27 = swift_bridgeObjectRetain();
      sub_1000B3AC4(v27);
      swift_bridgeObjectRelease();
      sub_100053FB4();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      sub_100055028();
      swift_endAccess();

      swift_beginAccess();
      uint64_t v13 = v38;
      swift_beginAccess();
      swift_bridgeObjectRelease();
      sub_10000E788((uint64_t)a2);
      return v13;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_10000E788((uint64_t)a2);
  return v13;
}

uint64_t sub_1000B9A94()
{
  v1[6] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[7] = v2;
  v1[8] = *(void *)(v2 - 8);
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  return _swift_task_switch(sub_1000B9B64, 0, 0);
}

#error "1000B9FC0: call analysis failed (funcsize=407)"

uint64_t sub_1000BA200()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

#error "1000BA6B4: call analysis failed (funcsize=370)"

uint64_t sub_1000BA8F4()
{
  sub_10006039C();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000BAA18()
{
  sub_10000EC58();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EB74();
  return v0();
}

uint64_t sub_1000BAA80@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char *a3@<X8>)
{
  id v142 = a2;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v145 = *(void (***)(char *, uint64_t, uint64_t))(v5 - 8);
  uint64_t v146 = v5;
  __chkstk_darwin(v5);
  unint64_t v144 = (char *)&v123 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v147 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v141 = (char *)&v123 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v123 - v10;
  __chkstk_darwin(v12);
  uint64_t v143 = (char *)&v123 - v13;
  __chkstk_darwin(v14);
  Swift::String v16 = (char *)&v123 - v15;
  uint64_t v17 = sub_10000BF1C(&qword_10017F5A8);
  __chkstk_darwin(v17 - 8);
  int v135 = (char *)&v123 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v123 - v20;
  uint64_t v22 = sub_10000BF1C(&qword_10017F980);
  __chkstk_darwin(v22);
  uint64_t v140 = (char *)&v123 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  os_log_type_t v26 = (char *)&v123 - v25;
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)&v123 - v28;
  uint64_t v138 = a1;
  uint64_t v30 = a1;
  uint64_t v32 = v31;
  sub_1000A3B4C(v30, (uint64_t)v21, &qword_10017F5A8);
  if (sub_10000D5D8((uint64_t)v21, 1, v32) == 1)
  {
    uint64_t result = sub_1000347E8((uint64_t)v21, &qword_10017F5A8);
    char v34 = 0;
    uint64_t v35 = a3;
    goto LABEL_19;
  }
  Swift::Int v133 = v11;
  uint64_t v136 = a3;
  uint64_t v131 = v32;
  uint64_t v36 = *(int *)(v32 + 48);
  uint64_t v37 = (void *)v7;
  uint64_t v38 = v147;
  uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v147 + 32);
  v39(v29, v21, v7);
  uint64_t v40 = *(void **)&v21[v36];
  *(void *)&v29[v36] = v40;
  uint64_t v41 = v38 + 16;
  uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v38 + 16);
  uint64_t v139 = v29;
  v42(v26, v29, v7);
  v39(v16, v26, v7);
  uint64_t v130 = v40;
  id v132 = v40;
  NSString v43 = v143;
  Date.init()();
  Date.timeIntervalSince(_:)();
  double v45 = v44;
  uint64_t v46 = off_10017C4C0;
  id v47 = v142;
  uint64_t v48 = v16;
  uint64_t v49 = v43;
  if (v46 != (void *)-1) {
    swift_once();
  }
  uint64_t v50 = v146;
  uint64_t v51 = sub_10000BEE4(v146, (uint64_t)qword_100181FD0);
  v145[2](v144, v51, v50);
  id v128 = v47;

  os_log_type_t v52 = v133;
  v42(v133, v48, (uint64_t)v37);
  unint64_t v53 = v141;
  int v134 = v42;
  v42(v141, v49, (uint64_t)v37);
  unint64_t v54 = v48;
  unint64_t v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.debug.getter();
  int v57 = v56;
  BOOL v58 = os_log_type_enabled(v55, v56);
  unint64_t v59 = v37;
  uint64_t v137 = v54;
  uint64_t v129 = v41;
  if (v58)
  {
    uint64_t v60 = swift_slowAlloc();
    uint64_t v127 = v51;
    id v142 = v37;
    os_log_t v125 = v55;
    uint64_t v61 = v60;
    uint64_t v126 = swift_slowAlloc();
    double v149 = *(double *)&v126;
    *(_DWORD *)uint64_t v61 = 136315650;
    uint64_t v123 = sub_1000E63EC((unint64_t *)&unk_10017F990, (void (*)(uint64_t))&type metadata accessor for Date);
    int v124 = v57;
    uint64_t v62 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v148 = sub_100013090(v62, v63, (uint64_t *)&v149);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v64 = v147;
    id v65 = *(void (**)(char *, id))(v147 + 8);
    v65(v52, v142);
    *(_WORD *)(v61 + 12) = 2080;
    uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v148 = sub_100013090(v66, v67, (uint64_t *)&v149);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v141 = (char *)v65;
    v65(v53, v142);
    uint64_t v68 = v64;
    *(_WORD *)(v61 + 22) = 2048;
    uint64_t v148 = *(void *)&v45;
    uint64_t v69 = v137;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    os_log_t v70 = v125;
    _os_log_impl((void *)&_mh_execute_header, v125, (os_log_type_t)v124, "Comparing %s to %s for audit: %fs", (uint8_t *)v61, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    id v71 = v142;
    uint64_t v72 = v127;
    swift_slowDealloc();

    ((void (*)(char *, uint64_t))v145[1])(v144, v146);
    uint64_t v35 = v136;
  }
  else
  {
    uint64_t v68 = v147;
    uint64_t v73 = *(void (**)(char *, void *))(v147 + 8);
    v73(v52, v59);
    uint64_t v141 = (char *)v73;
    v73(v53, v59);

    ((void (*)(char *, uint64_t))v145[1])(v144, v146);
    uint64_t v69 = v54;
    uint64_t v35 = v136;
    id v71 = v59;
    uint64_t v72 = v51;
  }
  double v74 = sub_10006D1AC();
  uint64_t v75 = (void (*)(char *, char *, id))v134;
  if (v74 >= v45)
  {
    uint64_t v94 = *(void *)&v74;

    uint64_t v95 = Logger.logObject.getter();
    os_log_type_t v96 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v95, v96))
    {
      uint64_t v97 = swift_slowAlloc();
      *(_DWORD *)uint64_t v97 = 134218240;
      double v149 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v97 + 12) = 2048;
      double v149 = *(double *)&v94;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v95, v96, "Debounce not exceeded %f < %f", (uint8_t *)v97, 0x16u);
      swift_slowDealloc();
    }

    os_log_type_t v98 = (void (*)(char *, id))v141;
    ((void (*)(char *, id))v141)(v143, v71);
    v98(v69, v71);
    uint64_t result = sub_1000347E8((uint64_t)v139, &qword_10017F980);
    char v34 = 0;
  }
  else
  {
    id v76 = sub_1000B81C0();
    uint64_t v77 = *(int *)(v131 + 48);
    uint64_t v78 = v140;
    v75(v140, v139, v71);
    unint64_t v79 = v130;
    *(void *)&v78[v77] = v130;
    uint64_t v147 = v68 + 8;
    ((void (*)(char *, id))v141)(v78, v71);
    if (!v79)
    {
LABEL_13:
      os_log_type_t v89 = v76;
      unint64_t v90 = Logger.logObject.getter();
      os_log_type_t v91 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v90, v91))
      {
        uint64_t v92 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v92 = 0;
        _os_log_impl((void *)&_mh_execute_header, v90, v91, "LSDatabaseContext appears unchanged, skipping audit", v92, 2u);
        swift_slowDealloc();
      }

      unint64_t v93 = (void (*)(char *, id))v141;
      ((void (*)(char *, id))v141)(v143, v71);
      v93(v137, v71);
      uint64_t result = sub_1000347E8((uint64_t)v139, &qword_10017F980);
      char v34 = 0;
      goto LABEL_19;
    }
    uint64_t v80 = v137;
    if (v76)
    {
      unint64_t v144 = (char *)v132;
      uint64_t v145 = (void (**)(char *, uint64_t, uint64_t))v76;
      uint64_t v81 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v83 = v82;
      uint64_t v84 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v86 = v85;
      LODWORD(v142) = static Data.== infix(_:_:)();
      uint64_t v87 = v144;
      sub_10000DA10(v84, v86);
      unint64_t v88 = v83;
      uint64_t v80 = v137;
      sub_10000DA10(v81, v88);

      if (v142)
      {

        uint64_t v35 = v136;
        goto LABEL_13;
      }
    }
    sub_1000347E8(v138, &qword_10017F5A8);
    id v99 = v132;
    uint64_t v100 = (uint64_t)v76;
    id v101 = v76;
    id v102 = v99;
    id v103 = v101;
    uint64_t v127 = v72;
    uint64_t v104 = Logger.logObject.getter();
    os_log_type_t v105 = static os_log_type_t.info.getter();
    BOOL v106 = os_log_type_enabled(v104, v105);
    uint64_t v146 = v100;
    if (v106)
    {
      uint64_t v107 = swift_slowAlloc();
      unint64_t v108 = (void (**)(char *, uint64_t, uint64_t))swift_slowAlloc();
      id v142 = v71;
      uint64_t v145 = v108;
      double v149 = *(double *)&v108;
      *(_DWORD *)uint64_t v107 = 136315394;
      uint64_t v148 = (uint64_t)v102;
      type metadata accessor for LSPersistentIdentifier(0);
      id v109 = v102;
      uint64_t v110 = String.init<A>(describing:)();
      uint64_t v148 = sub_100013090(v110, v111, (uint64_t *)&v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v107 + 12) = 2080;
      uint64_t v148 = v100;
      id v112 = v103;
      sub_10000BF1C(&qword_10017F988);
      uint64_t v113 = String.init<A>(describing:)();
      uint64_t v148 = sub_100013090(v113, v114, (uint64_t *)&v149);
      uint64_t v80 = v137;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v104, v105, "%s != %s", (uint8_t *)v107, 0x16u);
      swift_arrayDestroy();
      id v71 = v142;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v115 = v102;
    unint64_t v116 = Logger.logObject.getter();
    os_log_type_t v117 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v116, v117))
    {
      id v118 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v118 = 0;
      _os_log_impl((void *)&_mh_execute_header, v116, v117, "Audit conditions met, proceeding", v118, 2u);
      swift_slowDealloc();
    }

    uint64_t v119 = v131;
    uint64_t v120 = *(int *)(v131 + 48);
    uint64_t v121 = (uint64_t)v135;
    Date.init()();

    Swift::Bool v122 = (void (*)(char *, id))v141;
    ((void (*)(char *, id))v141)(v143, v71);
    v122(v80, v71);
    sub_1000347E8((uint64_t)v139, &qword_10017F980);
    *(void *)(v121 + v120) = v146;
    char v34 = 1;
    sub_10000D5B0(v121, 0, 1, v119);
    uint64_t result = sub_100083620(v121, v138, &qword_10017F5A8);
    uint64_t v35 = v136;
  }
LABEL_19:
  *uint64_t v35 = v34;
  return result;
}

uint64_t sub_1000BB7AC(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != 1) {
    return 0;
  }
  sub_10000BF1C((uint64_t *)&unk_10017F930);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013EF20;
  *(void *)(inited + 32) = 0x7365676E616863;
  *(void *)(inited + 40) = 0xE700000000000000;
  unint64_t v8 = sub_1000B9390(a2, a3, a4);
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v8;
  *(void *)(inited + 56) = v9;
  Dictionary.init(dictionaryLiteral:)();
  return 0x6146207469647541;
}

void sub_1000BB8A0()
{
}

uint64_t sub_1000BB9A4()
{
  return type metadata accessor for Registry(0);
}

uint64_t type metadata accessor for Registry(uint64_t a1)
{
  return sub_1000E6454(a1, (uint64_t *)&unk_10017F590);
}

void sub_1000BB9CC()
{
  sub_1000BBAA8();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1000BBAA8()
{
  if (!qword_10017F5A0)
  {
    sub_10000BFDC(&qword_10017F5A8);
    unint64_t v0 = type metadata accessor for Mutex();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10017F5A0);
    }
  }
}

char *sub_1000BBB04()
{
  if (&swift_runtimeSupportsNoncopyableTypes) {
    return (char *)sub_10000BF1C(&qword_10017F5B0);
  }
  else {
    return (char *)&type metadata for () + 8;
  }
}

uint64_t sub_1000BBB2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v48 = a1;
  uint64_t v47 = type metadata accessor for LNBundleRecord();
  __chkstk_darwin(v47);
  uint64_t v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)&v38 - v7;
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t *)((char *)&v38 - v10);
  if (qword_10017C458 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10000BEE4(v12, (uint64_t)qword_100181EC0);
  sub_1000E8894();
  sub_1000E8894();
  sub_1000E8894();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.fault.getter();
  int v15 = v14;
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v45 = a2;
    uint64_t v17 = v16;
    uint64_t v44 = swift_slowAlloc();
    uint64_t v51 = v44;
    *(_DWORD *)uint64_t v17 = 136315650;
    uint64_t v46 = v2;
    uint64_t v18 = *v11;
    unint64_t v19 = v11[1];
    swift_bridgeObjectRetain();
    uint64_t v49 = sub_100013090(v18, v19, &v51);
    uint64_t v41 = &v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v40 = type metadata accessor for LNBundleRecord;
    sub_1000E88E0((uint64_t)v11, (void (*)(void))type metadata accessor for LNBundleRecord);
    *(_WORD *)(v17 + 12) = 2080;
    uint64_t v20 = v47;
    uint64_t v21 = (uint64_t *)&v8[*(int *)(v47 + 24)];
    uint64_t v22 = *v21;
    unint64_t v23 = v21[1];
    uint64_t v39 = v5;
    sub_10000DADC(v22, v23);
    uint64_t v24 = Data.description.getter();
    os_log_t v42 = v13;
    uint64_t v25 = v24;
    int v43 = v15;
    unint64_t v27 = v26;
    sub_10000DA10(v22, v23);
    uint64_t v49 = sub_100013090(v25, v27, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v28 = v40;
    sub_1000E88E0((uint64_t)v8, (void (*)(void))v40);
    *(_WORD *)(v17 + 22) = 2080;
    uint64_t v29 = *(int *)(v20 + 24);
    uint64_t v30 = (uint64_t)v39;
    uint64_t v31 = (uint64_t *)&v39[v29];
    uint64_t v32 = *v31;
    unint64_t v33 = v31[1];
    sub_10000DADC(*v31, v33);
    uint64_t v34 = Data.description.getter();
    unint64_t v36 = v35;
    sub_10000DA10(v32, v33);
    uint64_t v49 = sub_100013090(v34, v36, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000E88E0(v30, (void (*)(void))v28);
    uint64_t v13 = v42;
    _os_log_impl((void *)&_mh_execute_header, v42, (os_log_type_t)v43, "Found non-unique bundle %s: %s vs %s", (uint8_t *)v17, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000E88E0((uint64_t)v11, (void (*)(void))type metadata accessor for LNBundleRecord);
    sub_1000E88E0((uint64_t)v8, (void (*)(void))type metadata accessor for LNBundleRecord);
    sub_1000E88E0((uint64_t)v5, (void (*)(void))type metadata accessor for LNBundleRecord);
  }

  return sub_1000E8894();
}

uint64_t sub_1000BBF48(void *a1, void *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v68 = (uint64_t *)a3;
  uint64_t v69 = a4;
  uint64_t v9 = sub_10000BF1C(&qword_10017F2A0);
  __chkstk_darwin(v9 - 8);
  uint64_t v73 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v64 - v12;
  uint64_t v14 = type metadata accessor for LNBundleRecord();
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = a1[3];
  uint64_t v17 = a1[4];
  sub_10000BEA0(a1, v18);
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)(v17 + 8) + 8))(v18);
  uint64_t v21 = v20;
  swift_beginAccess();
  sub_10001BA2C(v19, v21, *a2);
  swift_bridgeObjectRelease();
  if (sub_10000D5D8((uint64_t)v13, 1, v14) == 1)
  {
    sub_1000347E8((uint64_t)v13, &qword_10017F2A0);
    swift_endAccess();
    sub_10000BEA0(a1, a1[3]);
    sub_1000E057C();
    if (v22)
    {
      sub_10000C0D4((uint64_t)a1, (uint64_t)v70);
      swift_beginAccess();
      sub_1000E6330((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10001E7AC);
      uint64_t v23 = *(void *)(*a5 + 16);
      sub_1000E63A4(v23, (uint64_t (*)(BOOL))sub_10001E7AC);
      uint64_t v24 = sub_10005FFB0((uint64_t)v70, v71);
      double v25 = __chkstk_darwin(v24);
      unint64_t v27 = (char *)&v64 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v28 + 16))(v27, v25);
      sub_1000E8AF8(v23, (uint64_t)v27, a5);
      sub_10000E788((uint64_t)v70);
      swift_endAccess();
    }
  }
  else
  {
    uint64_t v66 = a2;
    uint64_t v67 = v5;
    sub_1000EA1A4();
    swift_endAccess();
    uint64_t v29 = (uint64_t *)&v16[*(int *)(v14 + 24)];
    uint64_t v30 = *v29;
    unint64_t v31 = v29[1];
    uint64_t v32 = a1[3];
    uint64_t v33 = a1[4];
    sub_10000BEA0(a1, v32);
    uint64_t v34 = *(void *)(v33 + 8);
    unint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t))(v34 + 24);
    sub_10000DADC(v30, v31);
    uint64_t v36 = v35(v32, v34);
    unint64_t v38 = v37;
    LOBYTE(v33) = static Data.== infix(_:_:)();
    sub_10000DA10(v36, v38);
    sub_10000DA10(v30, v31);
    if ((v33 & 1) == 0)
    {
      sub_10000BEA0(a1, a1[3]);
      sub_1000E057C();
      if (v39)
      {
        sub_10000C0D4((uint64_t)a1, (uint64_t)v70);
        uint64_t v40 = v68;
        swift_beginAccess();
        sub_1000E6330((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10001E7AC);
        uint64_t v41 = *(void *)(*v40 + 16);
        sub_1000E63A4(v41, (uint64_t (*)(BOOL))sub_10001E7AC);
        uint64_t v42 = sub_10005FFB0((uint64_t)v70, v71);
        double v43 = __chkstk_darwin(v42);
        uint64_t v45 = (char *)&v64 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, double))(v46 + 16))(v45, v43);
        sub_1000E8AF8(v41, (uint64_t)v45, v40);
      }
      else
      {
        uint64_t v47 = a1[3];
        uint64_t v48 = a1[4];
        uint64_t v49 = sub_10000BEA0(a1, v47);
        uint64_t v71 = v47;
        uint64_t v68 = *(uint64_t **)(v48 + 8);
        uint64_t v72 = (uint64_t)v68;
        id v65 = sub_1000274F4(v70);
        uint64_t v50 = *(void (**)(char *, uint64_t *, uint64_t, double))(*(void *)(v47 - 8) + 16);
        ((void (*)(uint64_t *, void *, uint64_t))v50)(v65, v49, v47);
        uint64_t v51 = v69;
        swift_beginAccess();
        sub_1000E6330((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10001F404);
        uint64_t v52 = *(void *)(*v51 + 16);
        uint64_t v53 = sub_1000E63A4(v52, (uint64_t (*)(BOOL))sub_10001F404);
        double v54 = __chkstk_darwin(v53);
        os_log_type_t v56 = (char *)&v64 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
        v50(v56, v65, v47, v54);
        sub_1000EAA00(v52, (uint64_t)v56, v51, v47, (uint64_t)v68);
      }
      sub_10000E788((uint64_t)v70);
      swift_endAccess();
    }
    sub_1000E88E0((uint64_t)v16, (void (*)(void))type metadata accessor for LNBundleRecord);
  }
  uint64_t v57 = a1[3];
  uint64_t v58 = a1[4];
  sub_10000BEA0(a1, v57);
  uint64_t v59 = (*(uint64_t (**)(uint64_t))(*(void *)(v58 + 8) + 8))(v57);
  uint64_t v61 = v60;
  swift_beginAccess();
  uint64_t v62 = (uint64_t)v73;
  sub_1000426E0(v59, v61);
  swift_endAccess();
  swift_bridgeObjectRelease();
  return sub_1000347E8(v62, &qword_10017F2A0);
}

void sub_1000BC5CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100018E30();
  uint64_t v14 = v13;
  type metadata accessor for Data.Iterator();
  sub_100028430();
  __chkstk_darwin(v15);
  sub_10000EBF4();
  sub_10000BEA0(v14, v14[3]);
  sub_10006FED8();
  v17._uint64_t countAndFlagsBits = v16();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._uint64_t countAndFlagsBits = 8250;
  v18._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v18);
  sub_10000BEA0(v14, v14[3]);
  uint64_t v19 = sub_1000EF568();
  uint64_t v21 = v20(v19);
  unint64_t v23 = v22;
  uint64_t v30 = v21;
  Data.makeIterator()();
  sub_1000E63EC(&qword_10017F910, (void (*)(uint64_t))&type metadata accessor for Data.Iterator);
  sub_1000EFE18();
  if ((a13 & 1) == 0)
  {
    do
    {
      sub_10000BF1C(&qword_10017F918);
      uint64_t v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = xmmword_10013EF20;
      *(void *)(v24 + 56) = &type metadata for UInt8;
      *(void *)(v24 + 64) = &protocol witness table for UInt8;
      *(unsigned char *)(v24 + 32) = a12;
      v25._uint64_t countAndFlagsBits = String.init(format:_:)();
      String.append(_:)(v25);
      swift_bridgeObjectRelease();
      sub_1000EFE18();
    }
    while (a13 != 1);
  }
  sub_1000EF9E0();
  sub_100013EC4();
  v26();
  sub_10000DA10(v30, v23);
  v27._uint64_t countAndFlagsBits = 0;
  v27._unint64_t object = (void *)0xE000000000000000;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._uint64_t countAndFlagsBits = 10;
  v28._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v28);
  v29._uint64_t countAndFlagsBits = 8237;
  v29._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  sub_100018E80();
}

uint64_t sub_1000BC804(void *a1, uint64_t a2)
{
  uint64_t v22 = a2;
  uint64_t v3 = type metadata accessor for Data.Iterator();
  uint64_t v21 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25._uint64_t countAndFlagsBits = 8237;
  v25._unint64_t object = (void *)0xE200000000000000;
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_10000BEA0(a1, v6);
  v8._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 8250;
  v9._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_10000BEA0(a1, v10);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 24))(v10, v11);
  unint64_t v14 = v13;
  v24._uint64_t countAndFlagsBits = 0;
  v24._unint64_t object = (void *)0xE000000000000000;
  uint64_t v20 = v12;
  Data.makeIterator()();
  sub_1000E63EC(&qword_10017F910, (void (*)(uint64_t))&type metadata accessor for Data.Iterator);
  dispatch thunk of IteratorProtocol.next()();
  if ((v27 & 1) == 0)
  {
    long long v23 = xmmword_10013EF20;
    do
    {
      char v15 = v26;
      sub_10000BF1C(&qword_10017F918);
      uint64_t v16 = swift_allocObject();
      *(_OWORD *)(v16 + 16) = v23;
      *(void *)(v16 + 56) = &type metadata for UInt8;
      *(void *)(v16 + 64) = &protocol witness table for UInt8;
      *(unsigned char *)(v16 + 32) = v15;
      v17._uint64_t countAndFlagsBits = String.init(format:_:)();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      dispatch thunk of IteratorProtocol.next()();
    }
    while (v27 != 1);
  }
  (*(void (**)(char *, uint64_t))(v21 + 8))(v5, v3);
  sub_10000DA10(v20, v14);
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v18._uint64_t countAndFlagsBits = 10;
  v18._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  String.append(_:)(v25);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000BCAC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  swift_defaultActor_initialize();
  *(unsigned char *)(v8 + 144) = 1;
  sub_10000BF1C((uint64_t *)&unk_10017FF90);
  swift_allocObject();
  uint64_t v17 = sub_1000B473C();
  *(void *)(v8 + 112) = a5;
  *(void *)(v8 + 120) = a6;
  *(void *)(v8 + 152) = a4;
  *(void *)(v8 + 160) = v17;
  *(void *)(v8 + 168) = 0;
  *(void *)(v8 + 176) = a1;
  *(void *)(v8 + 184) = a2;
  *(void *)(v8 + 192) = a3;
  *(void *)(v8 + 128) = a7;
  *(void *)(v8 + 136) = a8;
  return v8;
}

uint64_t sub_1000BCB70()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000BF1C(&qword_10017DCC0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B3F04();
  uint64_t v5 = type metadata accessor for TaskPriority();
  sub_10000D5B0((uint64_t)v4, 1, 1, v5);
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t v6[2] = 0;
  v6[3] = 0;
  v6[4] = v1;
  swift_retain();
  sub_100011AA4((uint64_t)v4, (uint64_t)&unk_10017FF40, (uint64_t)v6);
  return swift_release();
}

uint64_t sub_1000BCC5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_1000EE468, a4, 0);
}

uint64_t sub_1000BCC7C(uint64_t a1)
{
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = v1;
  return _swift_task_switch(sub_1000BCC9C, 0, 0);
}

uint64_t sub_1000BCC9C()
{
  sub_10006039C();
  uint64_t v1 = *(long long **)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 88);
  long long v3 = v1[3];
  long long v5 = *v1;
  long long v4 = v1[1];
  *(_OWORD *)(v0 + 48) = v1[2];
  *(_OWORD *)(v0 + 64) = v3;
  *(_OWORD *)(v0 + 16) = v5;
  *(_OWORD *)(v0 + 32) = v4;
  uint64_t v6 = swift_task_alloc();
  *(void *)(v0 + 96) = v6;
  *(void *)(v6 + 16) = v0 + 16;
  *(void *)(v6 + 24) = v2;
  sub_1000EC69C(v1);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1000BCDA4;
  sub_100060358();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t sub_1000BCDA4()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v3 = v2;
  sub_100060250();
  *long long v4 = v3;
  uint64_t v5 = *v1;
  sub_100010BC4();
  void *v6 = v5;
  *(void *)(v3 + 112) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  sub_100060358();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000BCE88()
{
  sub_100084274();
  sub_100013E0C();
  uint64_t v1 = v0[5];
  unint64_t v2 = v0[6];
  uint64_t v3 = v0[8];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000DA68(v1, v2);
  sub_100093428(v3);
  sub_100070028();
  sub_100084200();
  return v5(v4, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1000BCF10()
{
  sub_100084274();
  sub_100013E0C();
  swift_task_dealloc();
  uint64_t v1 = v0[5];
  unint64_t v2 = v0[6];
  uint64_t v3 = v0[8];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000DA68(v1, v2);
  sub_100093428(v3);
  sub_100084200();
  return v5(v4, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1000BCFA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000BF1C(&qword_10017DCC0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000BF1C(&qword_10017FF10);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  double v12 = __chkstk_darwin(v9);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9, v12);
  unint64_t v13 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v14 + v13, (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  uint64_t v15 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = sub_1000EC8E8;
  *(void *)(a2 + 56) = v14;
  sub_100093428(v15);
  long long v16 = *(_OWORD *)(a2 + 16);
  v21[0] = *(_OWORD *)a2;
  v21[1] = v16;
  long long v17 = *(_OWORD *)(a2 + 48);
  void v21[2] = *(_OWORD *)(a2 + 32);
  v21[3] = v17;
  sub_1000EC69C(v21);
  sub_1000B41CC();
  sub_1000EA140(v21);
  uint64_t v18 = type metadata accessor for TaskPriority();
  sub_10000D5B0((uint64_t)v8, 1, 1, v18);
  uint64_t v19 = (void *)swift_allocObject();
  v19[2] = 0;
  v19[3] = 0;
  v19[4] = a3;
  swift_retain();
  sub_100011AA4((uint64_t)v8, (uint64_t)&unk_10017FF20, (uint64_t)v19);
  return swift_release();
}

uint64_t sub_1000BD1CC(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain();
    sub_10000BF1C(&qword_10017FF10);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    sub_10000BF1C(&qword_10017FF10);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_1000BD230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_1000BD250, a4, 0);
}

uint64_t sub_1000BD250()
{
  sub_10000EC58();
  sub_1000BD2A8();
  sub_10000EB74();
  return v0();
}

void sub_1000BD2A8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000BF1C(&qword_10017DCC0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(v0 + 168))
  {
    if (off_10017C4C0 != (_UNKNOWN *)-1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10000BEE4(v5, (uint64_t)qword_100181FD0);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Starting processing task", v8, 2u);
      swift_slowDealloc();
    }

    uint64_t v9 = type metadata accessor for TaskPriority();
    sub_10000D5B0((uint64_t)v4, 1, 1, v9);
    uint64_t v10 = sub_1000E63EC(&qword_10017FEF0, (void (*)(uint64_t))type metadata accessor for Registry.IndexingQueue);
    uint64_t v11 = (void *)swift_allocObject();
    v11[2] = v1;
    v11[3] = v10;
    v11[4] = v1;
    swift_retain_n();
    *(void *)(v1 + 168) = sub_100011AA4((uint64_t)v4, (uint64_t)&unk_10017FEF8, (uint64_t)v11);
    swift_release();
  }
}

uint64_t sub_1000BD490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 248) = a4;
  return _swift_task_switch(sub_1000BD4B0, a4, 0);
}

uint64_t sub_1000BD4B0()
{
  sub_10000EC58();
  *(void *)(v0 + 216) = *(void *)(*(void *)(v0 + 248) + 160);
  sub_1000E63EC(&qword_10017FEF0, (void (*)(uint64_t))type metadata accessor for Registry.IndexingQueue);
  swift_retain();
  sub_100060358();
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_1000BD550()
{
  sub_10006039C();
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 256) = v1;
  *(void *)(v1 + 16) = v0 + 216;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 264) = v2;
  sub_10000BF1C((uint64_t *)&unk_10017FF00);
  *uint64_t v2 = v0;
  v2[1] = sub_1000BD644;
  sub_100060358();
  return withCheckedContinuation<A>(isolation:function:_:)(v3, v4, v5, 0x29287478656ELL, 0xE600000000000000, v6, v1, v7);
}

uint64_t sub_1000BD644()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v2 = *(void *)(v1 + 248);
  uint64_t v3 = *v0;
  sub_100010BC4();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_1000BD740, v2, 0);
}

uint64_t sub_1000BD740()
{
  sub_10006039C();
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 88);
  *(void *)(v0 + 272) = v1;
  *(void *)(v0 + 280) = v2;
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 104);
  *(void *)(v0 + 288) = v3;
  *(void *)(v0 + 296) = v4;
  uint64_t v5 = *(void *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 120);
  *(void *)(v0 + 304) = v5;
  *(void *)(v0 + 312) = v6;
  uint64_t v7 = *(void *)(v0 + 128);
  uint64_t v8 = *(void *)(v0 + 136);
  *(void *)(v0 + 320) = v7;
  *(void *)(v0 + 328) = v8;
  if (v2)
  {
    *(unsigned char *)(v0 + 16) = v1 & 1;
    *(void *)(v0 + 24) = v2;
    *(void *)(v0 + 32) = v3;
    *(void *)(v0 + 40) = v4;
    *(void *)(v0 + 48) = v5;
    *(unsigned char *)(v0 + 56) = v6 & 1;
    *(void *)(v0 + 64) = v7;
    *(void *)(v0 + 72) = v8;
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 336) = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_1000BD8EC;
    return sub_1000BDDA0(v0 + 16, 0);
  }
  else
  {
    swift_release();
    if (off_10017C4C0 != (_UNKNOWN *)-1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10000BEE4(v11, (uint64_t)qword_100181FD0);
    uint64_t v12 = (void *)Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (sub_1000A3E04(v13))
    {
      uint64_t v14 = (_WORD *)sub_1000EECD0();
      sub_1000EF048(v14);
      sub_1000EE99C((void *)&_mh_execute_header, v15, v16, "Processing task ending");
      sub_10000EB10();
    }
    uint64_t v17 = *(void *)(v0 + 248);

    *(void *)(v17 + 168) = 0;
    swift_release();
    sub_10000EB74();
    return v18();
  }
}

uint64_t sub_1000BD8EC()
{
  sub_10006039C();
  sub_10008412C();
  sub_100060250();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_100060250();
  *uint64_t v5 = v4;
  v8[43] = v6;
  v8[44] = v7;
  v8[45] = v0;
  swift_task_dealloc();
  sub_100084824();
  uint64_t v10 = *(void *)(v9 + 248);
  if (v0) {
    uint64_t v11 = sub_1000BDCE8;
  }
  else {
    uint64_t v11 = sub_1000BD9F0;
  }
  return _swift_task_switch(v11, v10, 0);
}

uint64_t sub_1000BD9F0()
{
  uint64_t v1 = *(void *)(v0[31] + 152);
  uint64_t v31 = *(void *)(v1 + 16);
  if (v31)
  {
    uint64_t v34 = v0 + 18;
    uint64_t v2 = v0[44];
    uint64_t v3 = v0[45];
    uint64_t v29 = *(void *)(v2 + 16);
    uint64_t v28 = v1 + 32;
    uint64_t v4 = swift_bridgeObjectRetain();
    unint64_t v7 = 0;
    char v27 = (uint64_t *)(v2 + 40);
    uint64_t v30 = v1;
    while (v7 < *(void *)(v1 + 16))
    {
      unint64_t v32 = v7;
      sub_10000C0D4(v28 + 40 * v7, (uint64_t)v34);
      sub_10000BEA0(v34, v0[21]);
      swift_bridgeObjectRetain();
      sub_1000B2E20();
      uint64_t v9 = v8;
      uint64_t v33 = v3;
      swift_bridgeObjectRelease();
      v0[28] = Set.init(minimumCapacity:)();
      uint64_t v10 = *(void *)(v9 + 16);
      if (v10)
      {
        uint64_t v11 = (uint64_t *)(v9 + 40);
        do
        {
          uint64_t v12 = *(v11 - 1);
          uint64_t v13 = *v11;
          swift_bridgeObjectRetain();
          sub_100023984(v0 + 25, v12, v13);
          swift_bridgeObjectRelease();
          v11 += 2;
          --v10;
        }
        while (v10);
      }
      swift_bridgeObjectRelease();
      sub_10008023C();
      swift_bridgeObjectRelease();
      sub_10000BEA0(v34, v0[21]);
      swift_bridgeObjectRetain();
      v0[29] = Set.init(minimumCapacity:)();
      uint64_t v14 = v27;
      for (uint64_t i = v29; i; --i)
      {
        uint64_t v16 = *(v14 - 1);
        uint64_t v17 = *v14;
        swift_bridgeObjectRetain();
        sub_100023984(v0 + 23, v16, v17);
        swift_bridgeObjectRelease();
        v14 += 2;
      }
      swift_bridgeObjectRelease();
      sub_10008023C();
      swift_bridgeObjectRelease();
      uint64_t v4 = sub_10000E788((uint64_t)v34);
      unint64_t v7 = v32 + 1;
      uint64_t v1 = v30;
      uint64_t v3 = v33;
      if (v32 + 1 == v31)
      {
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_11:
    uint64_t v18 = v0[40];
    unint64_t v20 = v0[38];
    uint64_t v19 = v0[39];
    uint64_t v22 = v0[36];
    uint64_t v21 = v0[37];
    uint64_t v24 = v0[34];
    uint64_t v23 = v0[35];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000EC7DC(v24, v23, v22, v21, v20, v19, v18);
    sub_100060358();
    sub_1000604B8();
  }
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_1000BDCE8()
{
  return swift_unexpectedError();
}

void *sub_1000BDD04@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t result = (*(void *(**)(void *__return_ptr))(v2 + 112))(__src);
  if (!v3)
  {
    memcpy(v8, __src, sizeof(v8));
    if (a1)
    {
      uint64_t v7 = swift_retain();
      sub_10010955C(v7);
      swift_release();
    }
    sub_10010AF38();
    return memcpy(a2, v8, 0x88uLL);
  }
  return result;
}

uint64_t sub_1000BDDA0(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 760) = a2;
  *(void *)(v3 + 480) = a1;
  *(void *)(v3 + 488) = v2;
  *(void *)(v3 + 496) = type metadata accessor for Schema.RuntimeError();
  *(void *)(v3 + 504) = swift_task_alloc();
  *(void *)(v3 + 512) = swift_task_alloc();
  *(void *)(v3 + 520) = swift_task_alloc();
  type metadata accessor for RegistryError(0);
  *(void *)(v3 + 528) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Data.Iterator();
  *(void *)(v3 + 536) = v4;
  *(void *)(v3 + 544) = *(void *)(v4 - 8);
  *(void *)(v3 + 552) = swift_task_alloc();
  *(void *)(v3 + 560) = swift_task_alloc();
  return _swift_task_switch(sub_1000BDEEC, v2, 0);
}

#error "1000BE15C: call analysis failed (funcsize=640)"

uint64_t sub_1000BE938()
{
  sub_10006039C();
  sub_10008412C();
  sub_100060250();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 640) = v0;
  swift_task_dealloc();
  sub_100084824();
  uint64_t v5 = *(void *)(v4 + 488);
  if (v0) {
    uint64_t v6 = sub_1000BFC34;
  }
  else {
    uint64_t v6 = sub_1000BEA34;
  }
  return _swift_task_switch(v6, v5, 0);
}

void sub_1000BEA34()
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v2 = *(void *)(v0 + 608);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_100094140();
    sub_10001E7C0();
    uint64_t v2 = v59;
  }
  unint64_t v3 = *(void *)(v2 + 16);
  if (v3 >= *(void *)(v2 + 24) >> 1)
  {
    sub_10001E7C0();
    uint64_t v2 = v60;
  }
  uint64_t v4 = *(void *)(v0 + 624);
  uint64_t v5 = *(void *)(v0 + 616);
  uint64_t v6 = *(void *)(v0 + 584);
  uint64_t v7 = *(void *)(v0 + 600) + 1;
  *(void *)(v2 + 16) = v3 + 1;
  uint64_t v8 = v2 + 16 * v3;
  *(void *)(v8 + 32) = v5;
  *(void *)(v8 + 40) = v4;
  if (v7 == v6)
  {
    uint64_t v9 = (unsigned char *)(v0 + 757);
    uint64_t v10 = *(void *)(v0 + 640);
    uint64_t v11 = *(void *)(v0 + 592);
    char v12 = *(unsigned char *)(v0 + 761);
    *(void *)(v0 + 648) = v2;
    uint64_t v13 = *(void *)(v0 + 488);
    swift_bridgeObjectRelease();
    sub_10000BF1C(&qword_10017FED0);
    uint64_t v14 = &type metadata for String;
    uint64_t v15 = Dictionary.init(dictionaryLiteral:)();
    sub_10000BF1C(&qword_10017FED8);
    uint64_t v16 = (void *)Dictionary.init(dictionaryLiteral:)();
    uint64_t v17 = *(uint64_t (**)(void))(v13 + 128);
    if (v17)
    {
      uint64_t v14 = *(unsigned char **)(*(void *)(v0 + 488) + 136);
      uint64_t v18 = v17();
      if (!v10)
      {
LABEL_10:
        sub_1000EED0C(v18);
        if (!v20)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v12 & 1) != 0 || *(void *)(*(void *)(v0 + 480) + 32) >> 60 == 15)
          {
            sub_1000EEFB8();
          }
          else
          {
            sub_1000EFCE0();
            if ((v42 & 1) != 0 || (v14[144] & 1) == 0)
            {
              uint64_t v43 = sub_1000EF10C();
              sub_10000DADC(v43, v44);
              uint64_t v45 = sub_1000EF10C();
              sub_1000C389C(v45, v46);
              uint64_t v47 = sub_1000EF10C();
              sub_10000DA68(v47, v48);
            }
          }
          uint64_t v36 = *(void **)(v0 + 480);
          uint64_t v35 = *(void *)(v0 + 488);
          sub_1000EC69C(v36);
          swift_retain();
          sub_1000EC69C(v36);
          swift_retain();
          unint64_t v37 = Logger.logObject.getter();
          uint64_t v38 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v37, (os_log_type_t)v38))
          {
            log = v37;
            sub_1000EFCCC();
            uint64_t v39 = sub_1000EF128();
            sub_100060438();
            *(_DWORD *)uint64_t v39 = 136315394;
            sub_100083620(v35 + 24, v38, &qword_10017FEE0);
            sub_100083620(v38, (uint64_t)v37, &qword_10017FEE0);
            sub_1000EF5D4();
            if (!v40 & v30)
            {
              unint64_t v49 = 0xE400000000000000;
            }
            else
            {
              sub_1000EFBEC();
              unint64_t v49 = 0xE000000000000000;
              sub_10000DADC(v15, (unint64_t)&qword_10017FEE0);
              Data.makeIterator()();
              sub_1000EC704(v38);
              sub_1000E63EC(&qword_10017F910, (void (*)(uint64_t))&type metadata accessor for Data.Iterator);
              sub_1000EFB84();
              if ((*v9 & 1) == 0)
              {
                do
                {
                  uint64_t v15 = *(void *)(v0 + 552);
                  uint64_t v16 = *(void **)(v0 + 536);
                  sub_10000BF1C(&qword_10017F918);
                  uint64_t v50 = sub_1000EF060();
                  *(_OWORD *)(v50 + 16) = xmmword_10013EF20;
                  *(void *)(v50 + 56) = &type metadata for UInt8;
                  *(void *)(v50 + 64) = &protocol witness table for UInt8;
                  v51._uint64_t countAndFlagsBits = sub_1000EEA60(v50);
                  String.append(_:)(v51);
                  swift_bridgeObjectRelease();
                  sub_1000F0008();
                }
                while (*v9 != 1);
                unint64_t v49 = 0xE000000000000000;
              }
              sub_1000EED2C();
              v52();
            }
            uint64_t v53 = sub_1000EF718();
            uint64_t v55 = sub_100013090(v53, v49, v54);
            sub_1000EFCAC(v55);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_1000EA140(v16);
            sub_1000EA140(v16);
            *(_WORD *)(v39 + 12) = 1024;
            int v56 = *(unsigned __int8 *)(v15 + 144);
            swift_release();
            *(_DWORD *)(v0 + 748) = v56;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release();
            unint64_t v37 = log;
            _os_log_impl((void *)&_mh_execute_header, log, (os_log_type_t)v38, "Finished applying change to version %s, isStoreDirty=%{BOOL}d", (uint8_t *)v39, 0x12u);
            swift_arrayDestroy();
            sub_10000EB10();
            sub_10000EB10();
          }
          else
          {
            uint64_t v41 = *(void **)(v0 + 480);
            swift_release();
            sub_1000EA140(v41);
            sub_1000EA140(v41);

            swift_release();
          }
          swift_release();
          sub_1000EFCF8();
          if (v37)
          {
            swift_errorRetain();
            ((void (*)(uint64_t))v37)(v11);
            swift_errorRelease();
          }
          sub_1000EF5C4();
          swift_errorRelease();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          sub_1000EEFEC();
          sub_1000842CC();
          __asm { BRAA            X3, X16 }
        }
        *(unsigned char *)(v0 + 762) = *(unsigned char *)(v19 + 40);
        *(void *)(v0 + 712) = _swiftEmptyArrayStorage;
        *(void *)(v0 + 704) = 0;
        *(void *)(v0 + 696) = v11;
        *(unsigned char *)(v0 + 763) = v12;
        *(void *)(v0 + 688) = v15;
        *(void *)(v0 + 680) = v16;
        swift_bridgeObjectRetain();
        sub_1000EFF4C();
        sub_1000EFCEC();
        uint64_t v21 = swift_task_alloc();
        uint64_t v22 = (void *)sub_1000EF7F8(v21);
        *uint64_t v22 = v23;
        v22[1] = sub_1000BF08C;
        sub_1000EF154();
        sub_1000842CC();
        sub_1000C1180(v24, v25, v26);
        return;
      }
      swift_errorRelease();
    }
    uint64_t v18 = 0;
    goto LABEL_10;
  }
  uint64_t v28 = *(void *)(v0 + 600) + 1;
  *(void *)(v0 + 608) = v2;
  sub_1000EFC34(v28);
  if (v30)
  {
    __break(1u);
  }
  else
  {
    sub_1000EF634(v29);
    swift_bridgeObjectRetain();
    uint64_t v31 = (void *)swift_task_alloc();
    *(void *)(v0 + 632) = v31;
    *uint64_t v31 = v0;
    v31[1] = sub_1000BE938;
    sub_1000EF584();
    sub_1000842CC();
    sub_1000C2EF4(v32, v33);
  }
}

uint64_t sub_1000BF08C()
{
  sub_10006039C();
  sub_10008412C();
  sub_100060250();
  *unint64_t v3 = v2;
  *unint64_t v3 = *v1;
  *(void *)(v2 + 736) = v0;
  swift_task_dealloc();
  sub_100084824();
  uint64_t v5 = *(void *)(v4 + 488);
  if (v0) {
    uint64_t v6 = sub_1000C047C;
  }
  else {
    uint64_t v6 = (uint64_t (*)(int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int128, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000BF188;
  }
  return _swift_task_switch(v6, v5, 0);
}

#error "1000BF880: call analysis failed (funcsize=670)"

void sub_1000BFC34()
{
  uint64_t v65 = v0;
  uint64_t v1 = (unsigned char *)(v0 + 757);
  uint64_t v2 = *(void *)(v0 + 640);
  swift_errorRelease();
  swift_errorRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  unint64_t v6 = *(void *)(v0 + 624);
  if (v5)
  {
    uint64_t v7 = *(void *)(v0 + 616);
    uint64_t v8 = *(void *)(v0 + 528);
    uint64_t v9 = sub_1000EE71C();
    uint64_t v63 = sub_1000EE704();
    *(_DWORD *)uint64_t v9 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)(v9 + 4) = sub_100013090(v7, v6, &v63);
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2080;
    sub_1000B82C4();
    sub_1000B84B4();
    uint64_t v11 = v10;
    unint64_t v13 = v12;
    sub_1000E88E0(v8, (void (*)(void))type metadata accessor for RegistryError);
    *(void *)(v9 + 14) = sub_100013090(v11, v13, &v63);
    uint64_t v1 = (unsigned char *)(v0 + 757);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error unregistering \"%s\" from the\nmetadata store: %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    sub_10000EB10();
    sub_10000EB10();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }

  if (v1[3] == 1)
  {
    uint64_t v15 = *(void *)(v0 + 480);
    uint64_t v14 = *(void *)(v0 + 488);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(unsigned char *)(v14 + 144) = 1;
    swift_willThrow();
    uint64_t v16 = *(void (**)(uint64_t))(v15 + 48);
    if (v16)
    {
      swift_errorRetain();
      v16(v2);
      swift_errorRelease();
    }
    sub_1000EF5C4();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100084420();
    sub_1000842CC();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v19 = *(void *)(v0 + 584);
  uint64_t v20 = *(void *)(v0 + 600) + 1;
  swift_errorRelease();
  if (v20 == v19)
  {
    *(void *)(v0 + 648) = *(void *)(v0 + 608);
    uint64_t v21 = *(void *)(v0 + 488);
    swift_bridgeObjectRelease();
    sub_10000BF1C(&qword_10017FED0);
    uint64_t v22 = Dictionary.init(dictionaryLiteral:)();
    sub_10000BF1C(&qword_10017FED8);
    uint64_t v23 = (void *)Dictionary.init(dictionaryLiteral:)();
    uint64_t v24 = *(uint64_t (**)(void))(v21 + 128);
    if (v24) {
      uint64_t v25 = v24();
    }
    else {
      uint64_t v25 = 0;
    }
    sub_1000EED0C(v25);
    if (!v27)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000EEFB8();
      uint64_t v43 = *(void **)(v0 + 480);
      uint64_t v42 = *(void *)(v0 + 488);
      sub_1000EC69C(v43);
      swift_retain();
      sub_1000EC69C(v43);
      swift_retain();
      uint64_t v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.default.getter();
      if (os_log_type_enabled((os_log_t)v44, v45))
      {
        log = v44;
        uint64_t v46 = sub_1000EF128();
        sub_100060438();
        *(_DWORD *)uint64_t v46 = 136315394;
        sub_100083620(v42 + 24, v0 + 344, &qword_10017FEE0);
        uint64_t v47 = sub_1000EFABC();
        sub_100083620(v47, v48, &qword_10017FEE0);
        sub_1000EF5D4();
        if (!v49 & v37)
        {
          unint64_t v51 = 0xE400000000000000;
        }
        else
        {
          sub_1000EFBEC();
          unint64_t v51 = 0xE000000000000000;
          uint64_t v63 = 0;
          unint64_t v64 = 0xE000000000000000;
          sub_10000DADC(v44, (unint64_t)&qword_10017FEE0);
          Data.makeIterator()();
          sub_1000EC704(v0 + 344);
          sub_1000E63EC(&qword_10017F910, (void (*)(uint64_t))&type metadata accessor for Data.Iterator);
          sub_1000EFB84();
          if ((*v1 & 1) == 0)
          {
            do
            {
              uint64_t v44 = *(void *)(v0 + 552);
              uint64_t v23 = *(void **)(v0 + 536);
              sub_10000BF1C(&qword_10017F918);
              uint64_t v52 = sub_1000EF060();
              *(_OWORD *)(v52 + 16) = xmmword_10013EF20;
              *(void *)(v52 + 56) = &type metadata for UInt8;
              *(void *)(v52 + 64) = &protocol witness table for UInt8;
              v53._uint64_t countAndFlagsBits = sub_1000EEA60(v52);
              String.append(_:)(v53);
              swift_bridgeObjectRelease();
              sub_1000F0008();
            }
            while (*v1 != 1);
            unint64_t v51 = v64;
          }
          sub_1000EED2C();
          v54();
        }
        uint64_t v55 = sub_1000EF718();
        uint64_t v57 = sub_100013090(v55, v51, v56);
        sub_1000EFCAC(v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1000EA140(v23);
        sub_1000EA140(v23);
        *(_WORD *)(v46 + 12) = 1024;
        int v58 = *(unsigned __int8 *)(v44 + 144);
        swift_release();
        *(_DWORD *)(v0 + 748) = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, log, v45, "Finished applying change to version %s, isStoreDirty=%{BOOL}d", (uint8_t *)v46, 0x12u);
        swift_arrayDestroy();
        sub_10000EB10();
        sub_10000EB10();
      }
      else
      {
        uint64_t v50 = *(void **)(v0 + 480);
        swift_release();
        sub_1000EA140(v50);
        sub_1000EA140(v50);

        swift_release();
      }
      swift_release();
      uint64_t v59 = *(void (**)(uint64_t))(*(void *)(v0 + 480) + 48);
      if (v59)
      {
        swift_errorRetain();
        v59(v2);
        swift_errorRelease();
      }
      sub_1000EF5C4();
      swift_errorRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_1000EEFEC();
      sub_1000842CC();
      __asm { BRAA            X3, X16 }
    }
    v1[5] = *(unsigned char *)(v26 + 40);
    *(void *)(v0 + 712) = _swiftEmptyArrayStorage;
    *(void *)(v0 + 704) = 0;
    *(void *)(v0 + 696) = v2;
    v1[6] = 1;
    *(void *)(v0 + 688) = v22;
    *(void *)(v0 + 680) = v23;
    swift_bridgeObjectRetain();
    sub_1000EFF4C();
    sub_1000EFCEC();
    uint64_t v28 = swift_task_alloc();
    uint64_t v29 = (void *)sub_1000EF7F8(v28);
    *uint64_t v29 = v30;
    v29[1] = sub_1000BF08C;
    sub_1000EF154();
    sub_1000842CC();
    sub_1000C1180(v31, v32, v33);
  }
  else
  {
    uint64_t v35 = *(void *)(v0 + 600) + 1;
    *(void *)(v0 + 592) = v2;
    v1[4] = 1;
    sub_1000EFC34(v35);
    if (v37)
    {
      __break(1u);
    }
    else
    {
      sub_1000EF634(v36);
      swift_bridgeObjectRetain();
      uint64_t v38 = (void *)swift_task_alloc();
      *(void *)(v0 + 632) = v38;
      *uint64_t v38 = v0;
      v38[1] = sub_1000BE938;
      sub_1000EF584();
      sub_1000842CC();
      sub_1000C2EF4(v39, v40);
    }
  }
}

#error "1000C0B2C: call analysis failed (funcsize=813)"

uint64_t sub_1000C1180(uint64_t a1, char a2, uint64_t a3)
{
  *(void *)(v4 + 24) = a3;
  *(void *)(v4 + 32) = v3;
  *(unsigned char *)(v4 + 112) = a2;
  *(void *)(v4 + 16) = a1;
  uint64_t v5 = type metadata accessor for OSSignpostID();
  *(void *)(v4 + 40) = v5;
  *(void *)(v4 + 48) = *(void *)(v5 - 8);
  *(void *)(v4 + 56) = swift_task_alloc();
  return _swift_task_switch(sub_1000C1248, v3, 0);
}

uint64_t sub_1000C1248()
{
  sub_10006039C();
  uint64_t v1 = v0[3];
  if (!v1)
  {
    uint64_t v2 = *(uint64_t (**)(void))(v0[4] + 128);
    if (v2) {
      uint64_t v1 = v2();
    }
    else {
      uint64_t v1 = 0;
    }
  }
  v0[8] = v1;
  swift_retain();
  static OSSignpostID.exclusive.getter();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000C12F4()
{
  sub_10000EC58();
  uint64_t v1 = *(void *)(v0 + 32);
  sub_1000B4C38();
  *(void *)(v0 + 72) = v2;
  return _swift_task_switch(sub_1000C1398, v1, 0);
}

uint64_t sub_1000C1398()
{
  sub_100084274();
  sub_100013E0C();
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[2];
  uint64_t v4 = *(void **)(v2 + 176);
  v0[10] = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[11] = v5;
  v5[2] = v2;
  v5[3] = v3;
  v5[4] = v1;
  v4;
  uint64_t v6 = swift_task_alloc();
  uint64_t v7 = (void *)sub_1000EFE78(v6);
  *uint64_t v7 = v8;
  v7[1] = sub_1000C1484;
  sub_100084200();
  return sub_100068D5C(v9, v10, v11, v12);
}

uint64_t sub_1000C1484()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v3 = v2;
  sub_100060250();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_100010BC4();
  void *v6 = v5;
  *(void *)(v3 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 32);
    uint64_t v8 = sub_1000C1698;
  }
  else
  {

    swift_task_dealloc();
    uint64_t v8 = sub_1000C157C;
    uint64_t v7 = 0;
  }
  return _swift_task_switch(v8, v7, 0);
}

uint64_t sub_1000C157C()
{
  sub_100084274();
  sub_100013E0C();
  sub_1000E30D4();
  swift_release();
  uint64_t v0 = sub_1000EE9D8();
  v1(v0);
  sub_1000EFE0C();
  sub_100084200();
  return _swift_task_switch(v2, v3, v4);
}

uint64_t sub_1000C1638()
{
  sub_10000EC58();
  swift_release();
  swift_task_dealloc();
  sub_100070028();
  return v0();
}

uint64_t sub_1000C1698()
{
  sub_10000EC58();

  swift_task_dealloc();
  sub_100060358();
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_1000C1700()
{
  sub_100084274();
  sub_100013E0C();
  sub_1000E30D4();
  swift_release();
  uint64_t v0 = sub_1000EE9D8();
  v1(v0);
  sub_1000EFE0C();
  sub_100084200();
  return _swift_task_switch(v2, v3, v4);
}

uint64_t sub_1000C17BC()
{
  sub_10000EC58();
  swift_release();
  swift_task_dealloc();
  sub_1000EFB58();
  return v0();
}

uint64_t sub_1000C181C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[55] = a2;
  v3[56] = a3;
  v3[54] = a1;
  sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  v3[57] = swift_task_alloc();
  return _swift_task_switch(sub_1000C18B8, a1, 0);
}

uint64_t sub_1000C18B8()
{
  sub_10006039C();
  sub_1000BDD04(v0[56], v0 + 2);
  v0[58] = 0;
  sub_100060358();
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_1000C196C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  sub_1000EEE74();
  a21 = v23;
  a22 = v24;
  sub_1000EF9C4();
  a20 = v22;
  if (off_10017C4C0 != (_UNKNOWN *)-1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  v22[59] = sub_10000BEE4(v25, (uint64_t)qword_100181FD0);
  uint64_t v26 = sub_1000EFAD4();
  sub_10000C0D4(v26, v27);
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.default.getter();
  if (sub_1000EE9BC(v29))
  {
    uint64_t v30 = (_DWORD *)sub_1000536D0();
    a11 = sub_100060438();
    *uint64_t v30 = 136315138;
    sub_10000BEA0(v22 + 25, v22[28]);
    sub_1000EF2D0();
    sub_10006FED8();
    uint64_t v32 = v31();
    v22[53] = sub_100013090(v32, v33, &a11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10000E788((uint64_t)(v22 + 25));
    sub_1000EF250((void *)&_mh_execute_header, v28, v34, "Registering \"%s\" in the metadata store");
    sub_100084978();
    sub_10000EB10();
    sub_10000EB10();
  }
  else
  {
    sub_10000E788((uint64_t)(v22 + 25));
  }

  sub_100084994();
  return _swift_task_switch(v35, v36, v37);
}

uint64_t sub_1000C1B10()
{
  sub_10000EC58();
  uint64_t v1 = *(void **)(*(void *)(v0 + 432) + 176);
  *(void *)(v0 + 480) = v1;
  id v2 = v1;
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000C1B7C()
{
  uint64_t v2 = *(void *)(v0 + 456);
  uint64_t v1 = *(void *)(v0 + 464);
  uint64_t v3 = *(void **)(v0 + 440);
  uint64_t v4 = sub_1000EE7A8(v3);
  uint64_t v6 = v5(v4);
  uint64_t v8 = v7;
  uint64_t v10 = v3[3];
  uint64_t v9 = v3[4];
  sub_10000BEA0(v3, v10);
  (*(void (**)(uint64_t))(*(void *)(v9 + 8) + 16))(v10);
  sub_10000BEA0(v3, v3[3]);
  uint64_t v11 = sub_1000EF568();
  uint64_t v13 = v12(v11);
  unint64_t v15 = v14;
  uint64_t v16 = sub_10000BEA0(v3, v3[3]);
  uint64_t v17 = type metadata accessor for LSLinkBundleRecord(0);
  uint64_t v18 = *(void *)(v0 + 104);
  unint64_t v19 = *(void *)(v0 + 32);
  char v20 = *((unsigned char *)v16 + *(int *)(v17 + 36));
  long long v21 = *(_OWORD *)(v0 + 40);
  uint64_t v22 = *(void *)(v0 + 56);
  unint64_t v23 = *(void *)(v0 + 64);
  *(void *)(v0 + 488) = v19;
  *(void *)(v0 + 496) = v23;
  sub_10006B1B0(v6, v8, v2, v13, v15, v20, v18, v19, v21, *((uint64_t *)&v21 + 1), v22, v23, *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 120), *(void *)(v0 + 128), *(void *)(v0 + 136),
    *(void *)(v0 + 144));
  *(void *)(v0 + 504) = v1;
  if (v1)
  {
    uint64_t v24 = *(void **)(v0 + 480);
    uint64_t v25 = *(void *)(v0 + 456);
    sub_10000DA10(v13, v15);
    swift_bridgeObjectRelease();

    sub_1000EC5A0(v0 + 16);
    sub_1000347E8(v25, (uint64_t *)&unk_10017D0C0);
    swift_task_dealloc();
    sub_100084420();
    sub_1000604B8();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v28 = *(void **)(v0 + 480);
  uint64_t v29 = *(void *)(v0 + 456);
  sub_10000DA10(v13, v15);
  swift_bridgeObjectRelease();

  sub_1000347E8(v29, (uint64_t *)&unk_10017D0C0);
  sub_1000604B8();
  return _swift_task_switch(v30, v31, v32);
}

uint64_t sub_1000C1D90()
{
  sub_10000EC58();
  *(void *)(v0 + 512) = *(void *)(*(void *)(v0 + 432) + 184);
  swift_retain();
  sub_100060358();
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_1000C1DFC()
{
  sub_10006039C();
  uint64_t v1 = v0[54];
  uint64_t v2 = self;
  swift_retain();
  v0[65] = [v2 sharedVocabulary];
  v0[66] = sub_1000B21A4();
  swift_release();
  return _swift_task_switch(sub_1000C1EAC, v1, 0);
}

uint64_t sub_1000C1EAC()
{
  sub_10000EC58();
  uint64_t v1 = *(void **)(*(void *)(v0 + 432) + 176);
  *(void *)(v0 + 536) = v1;
  id v2 = v1;
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000C1F18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24)
{
  sub_1000EF09C();
  a23 = v25;
  a24 = v26;
  sub_1000EF3B0();
  a22 = v24;
  uint64_t v27 = v24[63];
  uint64_t v28 = sub_1000EE7A8((void *)v24[55]);
  uint64_t v30 = v29(v28);
  v24[68] = sub_1000641A8(v30, v31);
  uint64_t v32 = (void *)v24[67];
  if (v27)
  {
    uint64_t v33 = (void *)v24[65];
    sub_1000EC5A0((uint64_t)(v24 + 2));
    swift_bridgeObjectRelease();

    swift_release();
    swift_bridgeObjectRelease();
    sub_10000C0D4(v24[55], (uint64_t)(v24 + 30));
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v34 = (void *)Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (sub_1000EE9BC(v35))
    {
      uint64_t v36 = (_DWORD *)sub_1000EE71C();
      a12 = sub_1000EE704();
      *uint64_t v36 = 136315394;
      sub_10000BEA0(v24 + 30, v24[33]);
      sub_10006FED8();
      uint64_t v38 = v37();
      uint64_t v40 = sub_100013090(v38, v39, &a12);
      sub_1000EF6D0(v40);
      swift_bridgeObjectRelease();
      sub_1000EFA5C();
      sub_10000BF1C(&qword_10017C810);
      uint64_t v41 = String.init<A>(describing:)();
      uint64_t v43 = sub_100013090(v41, v42, &a12);
      sub_1000EF8D4(v43);
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      swift_arrayDestroy();
      sub_10000EB10();
      sub_10000EB10();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      sub_10000E788((uint64_t)(v24 + 30));
      swift_errorRelease();
      swift_errorRelease();
    }
    v24[75] = 0;
  }
  else
  {
    unint64_t v46 = v24[62];
    uint64_t v47 = v24[55];
    swift_bridgeObjectRelease();

    uint64_t v48 = swift_task_alloc();
    *(void *)(v48 + 16) = v47;
    swift_bridgeObjectRetain();
    sub_1000B32C8((void (*)(uint64_t *__return_ptr, id *))sub_1000EC67C, v48, v46);
    v24[69] = v49;
    v24[70] = 0;
    swift_bridgeObjectRelease();
    swift_task_dealloc();
  }
  sub_1000EECA8();
  return _swift_task_switch(v50, v51, v52);
}

uint64_t sub_1000C21D4()
{
  sub_10000EC58();
  uint64_t v1 = *(void **)(*(void *)(v0 + 432) + 176);
  *(void *)(v0 + 568) = v1;
  id v2 = v1;
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000C2240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24)
{
  sub_1000EF09C();
  a23 = v25;
  a24 = v26;
  sub_1000EF3B0();
  a22 = v24;
  uint64_t v27 = v24[70];
  uint64_t v28 = sub_1000EE7A8((void *)v24[55]);
  uint64_t v30 = v29(v28);
  v24[72] = sub_1000683B4(v30, v31);
  if (v27)
  {
    uint64_t v32 = (void *)v24[71];
    uint64_t v33 = (void *)v24[65];
    swift_bridgeObjectRelease();

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000EC5A0((uint64_t)(v24 + 2));
    sub_10000C0D4(v24[55], (uint64_t)(v24 + 30));
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v34 = (void *)Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (sub_1000EE9BC(v35))
    {
      uint64_t v36 = (_DWORD *)sub_1000EE71C();
      a12 = sub_1000EE704();
      *uint64_t v36 = 136315394;
      sub_10000BEA0(v24 + 30, v24[33]);
      sub_10006FED8();
      uint64_t v38 = v37();
      uint64_t v40 = sub_100013090(v38, v39, &a12);
      sub_1000EF6D0(v40);
      swift_bridgeObjectRelease();
      sub_1000EFA5C();
      sub_10000BF1C(&qword_10017C810);
      uint64_t v41 = String.init<A>(describing:)();
      uint64_t v43 = sub_100013090(v41, v42, &a12);
      sub_1000EF8D4(v43);
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      swift_arrayDestroy();
      sub_10000EB10();
      sub_10000EB10();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      sub_10000E788((uint64_t)(v24 + 30));
      swift_errorRelease();
      swift_errorRelease();
    }
    v24[75] = 0;
    sub_1000EECA8();
    return _swift_task_switch(v50, v51, v52);
  }
  else
  {
    unint64_t v46 = (void *)v24[71];
    swift_bridgeObjectRelease();

    uint64_t v47 = (void *)swift_task_alloc();
    v24[73] = v47;
    void *v47 = v24;
    v47[1] = sub_1000C2540;
    sub_1000EECA8();
    return sub_1000066FC();
  }
}

uint64_t sub_1000C2540()
{
  sub_10006039C();
  sub_100010BAC();
  uint64_t v3 = v2;
  sub_100060250();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_100010BC4();
  void *v6 = v5;
  *(void *)(v3 + 592) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v0) {
    sub_1000EC5A0(v3 + 16);
  }
  sub_100060358();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000C2670()
{
  sub_1000EEE74();
  sub_1000EF9C4();
  uint64_t v15 = v0[74];
  if (qword_10017C2D8 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[65];
  uint64_t v2 = (void *)v0[55];
  uint64_t v3 = v2[4];
  sub_10000BEA0(v2, v2[3]);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)(v3 + 8) + 8);
  swift_retain();
  uint64_t v5 = sub_1000EF2B8();
  uint64_t v6 = v4(v5);
  uint64_t v8 = v7;
  sub_10000BF1C((uint64_t *)&unk_10017E690);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013EF20;
  *(void *)(inited + 32) = v6;
  *(void *)(inited + 40) = v8;
  swift_bridgeObjectRetain();
  sub_100082098(inited);
  sub_10007FFF0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  v0[75] = v15;
  sub_100084994();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_1000C27E0()
{
  sub_10000EC58();
  *(void *)(v0 + 608) = *(void *)(*(void *)(v0 + 432) + 192);
  swift_retain();
  sub_100060358();
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_1000C284C()
{
  sub_10006039C();
  uint64_t v1 = *(void *)(v0 + 608);
  uint64_t v2 = sub_1000EEA2C(*(void **)(v0 + 440));
  *(void *)(v0 + 616) = v3(v2);
  *(void *)(v0 + 624) = v4;
  return _swift_task_switch(sub_1000C28CC, v1, 0);
}

uint64_t sub_1000C28CC()
{
  sub_10006039C();
  uint64_t v1 = v0[75];
  sub_1000519BC(v0[77], v0[78], 0x53555F6E65, 0xE500000000000000);
  v0[79] = v1;
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_release();
    sub_100060358();
    return _swift_task_switch(v2, v3, v4);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_task_dealloc();
    sub_100070028();
    return v5();
  }
}

uint64_t sub_1000C29C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  sub_1000EEE74();
  a21 = v23;
  a22 = v24;
  sub_1000EF9C4();
  a20 = v22;
  sub_1000EC5A0((uint64_t)(v22 + 2));
  sub_1000EFF4C();
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)sub_1000536D0();
    a11 = sub_100060438();
    *(_DWORD *)uint64_t v27 = 136315138;
    sub_10000BEA0(v22 + 40, v22[43]);
    sub_10006FED8();
    uint64_t v29 = v28();
    v22[52] = sub_100013090(v29, v30, &a11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10000E788((uint64_t)(v22 + 40));
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "AutoShortcutsDonator failed to donate App Shortcuts to Siri Vocabulary and server for %s", v27, 0xCu);
    swift_arrayDestroy();
    sub_10000EB10();
    sub_10000EB10();
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    sub_10000E788((uint64_t)(v22 + 40));
  }

  if (qword_10017C2D8 != -1) {
    swift_once();
  }
  uint64_t v31 = (void *)v22[65];
  uint64_t v32 = (void *)v22[55];
  uint64_t v33 = v32[3];
  uint64_t v34 = v32[4];
  sub_10000BEA0(v32, v33);
  uint64_t v35 = *(void *)(v34 + 8);
  uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t))(v35 + 8);
  swift_retain();
  uint64_t v37 = v36(v33, v35);
  uint64_t v39 = v38;
  sub_10000BF1C((uint64_t *)&unk_10017E690);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013EF20;
  *(void *)(inited + 32) = v37;
  *(void *)(inited + 40) = v39;
  swift_bridgeObjectRetain();
  sub_100082098(inited);
  sub_10007FFF0();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v22[75] = 0;
  sub_100084994();
  return _swift_task_switch(v41, v42, v43);
}

uint64_t sub_1000C2C64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24)
{
  sub_1000EF09C();
  a23 = v26;
  a24 = v27;
  sub_1000EF3B0();
  a22 = v24;
  sub_10000C0D4(v24[55], (uint64_t)(v24 + 35));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.error.getter();
  if (sub_1000EE9BC(v29))
  {
    a10 = v24 + 51;
    a11 = v24 + 50;
    a12 = v24 + 45;
    uint64_t v30 = v24[79];
    uint64_t v31 = sub_1000EE71C();
    a13 = sub_1000EE704();
    *(_DWORD *)uint64_t v31 = 136315394;
    sub_10000BEA0(v24 + 35, v24[38]);
    sub_10006FED8();
    uint64_t v33 = v32();
    v24[51] = sub_100013090(v33, v34, &a13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10000E788((uint64_t)(v24 + 35));
    *(_WORD *)(v31 + 12) = 2080;
    v24[50] = v30;
    swift_errorRetain();
    sub_10000BF1C(&qword_10017C810);
    uint64_t v35 = String.init<A>(describing:)();
    v24[45] = sub_100013090(v35, v36, &a13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    swift_arrayDestroy();
    sub_10000EB10();
    sub_10000EB10();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    sub_10000E788((uint64_t)(v24 + 35));
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  sub_100070028();
  sub_1000EECA8();
  return v38(v37, v38, v39, v40, v41, v42, v43, v44, a9, a10, a11, a12, a13, a14, a15, a16);
}

id sub_1000C2E8C@<X0>(void **a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *a1;
  sub_10000BEA0(a2, a2[3]);
  sub_1000EF2D0();
  sub_10006FED8();
  *a3 = v5();
  a3[1] = v6;
  a3[2] = v4;
  return v4;
}

uint64_t sub_1000C2EF4(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for OSSignpostID();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  return _swift_task_switch(sub_1000C2FB8, v2, 0);
}

uint64_t sub_1000C2FB8()
{
  sub_10000EC58();
  static OSSignpostID.exclusive.getter();
  sub_100060358();
  return _swift_task_switch(v0, v1, v2);
}

uint64_t sub_1000C3018()
{
  sub_10000EC58();
  sub_1000B4C38();
  v0[8] = v1;
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)sub_1000EF3BC(v2);
  *uint64_t v3 = v4;
  v3[1] = sub_1000C30E8;
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];
  uint64_t v7 = v0[2];
  return sub_1000C33EC((uint64_t)v3, v7, v5, v6);
}

uint64_t sub_1000C30E8()
{
  sub_10000EC58();
  sub_100010BAC();
  sub_100060250();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_100010BC4();
  *uint64_t v5 = v4;
  *(void *)(v6 + 80) = v0;
  swift_task_dealloc();
  sub_100060358();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000C31C4()
{
  sub_100084274();
  sub_100013E0C();
  sub_1000E30D4();
  swift_release();
  uint64_t v0 = sub_1000EE9D8();
  v1(v0);
  sub_1000EFE0C();
  sub_100084200();
  return _swift_task_switch(v2, v3, v4);
}

uint64_t sub_1000C3280()
{
  sub_10000EC58();
  swift_task_dealloc();
  sub_100070028();
  return v0();
}

uint64_t sub_1000C32D8()
{
  sub_100084274();
  sub_100013E0C();
  sub_1000E30D4();
  swift_release();
  uint64_t v0 = sub_1000EE9D8();
  v1(v0);
  sub_1000EFE0C();
  sub_100084200();
  return _swift_task_switch(v2, v3, v4);
}

uint64_t sub_1000C3394()
{
  sub_10000EC58();
  swift_task_dealloc();
  sub_1000EFB48();
  return v0();
}

uint64_t sub_1000C33EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[10] = a3;
  v4[11] = a4;
  v4[9] = a2;
  return _swift_task_switch(sub_1000C3410, a4, 0);
}

uint64_t sub_1000C3410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  sub_1000EEE74();
  a21 = v23;
  a22 = v24;
  sub_1000EF9C4();
  a20 = v22;
  if (off_10017C4C0 != (_UNKNOWN *)-1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  os_log_type_t v26 = sub_10000BEE4(v25, (uint64_t)qword_100181FD0);
  swift_bridgeObjectRetain_n();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  BOOL v29 = sub_1000A3E04(v28);
  unint64_t v30 = v22[10];
  if (v29)
  {
    uint64_t v31 = v22[9];
    uint64_t v32 = (_DWORD *)sub_1000536D0();
    a10 = sub_100060438();
    _DWORD *v32 = 136315138;
    swift_bridgeObjectRetain();
    v22[8] = sub_100013090(v31, v30, &a10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    sub_1000EF34C((void *)&_mh_execute_header, v27, v26, "Attempting to unregister \"%s\" from the metadata store");
    swift_arrayDestroy();
    sub_10000EB10();
    sub_10000EB10();
  }
  else
  {

    sub_10008469C();
  }
  id v33 = *(id *)(v22[11] + 176);
  sub_10006CE50();
  v22[12] = 0;
  uint64_t v34 = v22[11];

  v22[13] = *(void *)(v34 + 184);
  uint64_t v35 = self;
  swift_retain();
  v22[14] = [v35 sharedVocabulary];
  v22[15] = sub_1000B21A4();
  sub_100060358();
  sub_100084994();
  return _swift_task_switch(v36, v37, v38);
}

uint64_t sub_1000C365C()
{
  sub_10006039C();
  uint64_t v1 = *(void *)(v0 + 96);
  sub_100005CCC(*(void *)(v0 + 72), *(void *)(v0 + 80), 8, *(void *)(v0 + 104), *(void **)(v0 + 112), *(void *)(v0 + 120));
  if (v1)
  {
    *(void *)(v0 + 128) = v1;
    uint64_t v2 = *(void *)(v0 + 88);
    uint64_t v3 = sub_1000C3830;
  }
  else
  {
    sub_100005CCC(*(void *)(v0 + 72), *(void *)(v0 + 80), 18, *(void *)(v0 + 104), *(void **)(v0 + 112), *(void *)(v0 + 120));
    uint64_t v4 = *(void *)(v0 + 88);
    sub_100005FF0();
    uint64_t v3 = sub_1000C3720;
    uint64_t v2 = v4;
  }
  return _swift_task_switch(v3, v2, 0);
}

uint64_t sub_1000C3720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1000847F4();
  sub_1000700D0();
  if (qword_10017C2D8 != -1) {
    swift_once();
  }
  uint64_t v11 = (void *)v10[14];
  uint64_t v13 = v10[9];
  uint64_t v12 = v10[10];
  sub_10000BF1C((uint64_t *)&unk_10017E690);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013EF20;
  *(void *)(inited + 32) = v13;
  *(void *)(inited + 40) = v12;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100082098(inited);
  sub_10007FFF0();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  sub_100070028();
  sub_100084744();
  return v16(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10);
}

uint64_t sub_1000C3830()
{
  sub_10000EC58();
  uint64_t v1 = *(void **)(v0 + 112);
  swift_release();

  swift_bridgeObjectRelease();
  sub_10000EB74();
  return v2();
}

uint64_t sub_1000C389C(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for OSSignpostID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static OSSignpostID.exclusive.getter();
  sub_1000B4C38();
  sub_1000C3A18(v2, a1, a2);
  sub_1000E30D4();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_1000C3A18(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v7 = type metadata accessor for RegistryError(0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Data.Iterator();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = *(id *)(a1 + 176);
  sub_100068A78();
  if (v3)
  {

    if (off_10017C4C0 != (_UNKNOWN *)-1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_10000BEE4(v15, (uint64_t)qword_100181FD0);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315138;
      *(void *)&long long v41 = v18 + 4;
      sub_1000B82C4();
      sub_1000B84B4();
      uint64_t v20 = v19;
      unint64_t v22 = v21;
      sub_1000E88E0((uint64_t)v9, (void (*)(void))type metadata accessor for RegistryError);
      uint64_t v46 = sub_100013090(v20, v22, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Error updating the metadata store last seen version: %s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {

    *(unsigned char *)(a1 + 144) = 0;
    if (off_10017C4C0 != (_UNKNOWN *)-1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_10000BEE4(v23, (uint64_t)qword_100181FD0);
    sub_10000DADC(a2, a3);
    sub_10000DADC(a2, a3);
    uint64_t v24 = Logger.logObject.getter();
    int v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, (os_log_type_t)v25))
    {
      int v35 = v25;
      uint64_t v37 = v11;
      os_log_t v38 = v24;
      os_log_type_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      uint64_t v46 = v34;
      uint64_t v36 = v26;
      *(_DWORD *)os_log_type_t v26 = 136315138;
      uint64_t v44 = 0;
      unint64_t v45 = 0xE000000000000000;
      sub_10000DADC(a2, a3);
      Data.makeIterator()();
      uint64_t v39 = a2;
      unint64_t v40 = a3;
      sub_10000DA10(a2, a3);
      sub_1000E63EC(&qword_10017F910, (void (*)(uint64_t))&type metadata accessor for Data.Iterator);
      dispatch thunk of IteratorProtocol.next()();
      if ((v43 & 1) == 0)
      {
        long long v41 = xmmword_10013EF20;
        do
        {
          char v27 = v42;
          sub_10000BF1C(&qword_10017F918);
          uint64_t v28 = swift_allocObject();
          *(_OWORD *)(v28 + 16) = v41;
          *(void *)(v28 + 56) = &type metadata for UInt8;
          *(void *)(v28 + 64) = &protocol witness table for UInt8;
          *(unsigned char *)(v28 + 32) = v27;
          v29._uint64_t countAndFlagsBits = String.init(format:_:)();
          String.append(_:)(v29);
          swift_bridgeObjectRelease();
          dispatch thunk of IteratorProtocol.next()();
        }
        while (v43 != 1);
      }
      unint64_t v30 = v36;
      (*(void (**)(char *, uint64_t))(v37 + 8))(v13, v10);
      uint64_t v44 = sub_100013090(v44, v45, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v32 = v39;
      unint64_t v31 = v40;
      sub_10000DA10(v39, v40);
      sub_10000DA10(v32, v31);
      uint64_t v24 = v38;
      _os_log_impl((void *)&_mh_execute_header, v38, (os_log_type_t)v35, "Updated metadata store last seen version to: %s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10000DA10(a2, a3);
      sub_10000DA10(a2, a3);
    }
  }
}

uint64_t sub_1000C4010()
{
  swift_release();
  sub_100093428(*(void *)(v0 + 128));
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_1000C4070()
{
  uint64_t v0 = sub_1000C4010();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for Registry.IndexingQueue()
{
  return self;
}

uint64_t sub_1000C40C0()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_100181FE8 = result;
  unk_100181FF0 = v1;
  return result;
}

uint64_t *sub_1000C40F0()
{
  if (qword_10017C4C8 != -1) {
    swift_once();
  }
  return &qword_100181FE8;
}

uint64_t sub_1000C413C()
{
  type metadata accessor for RegistryError(0);
  sub_1000283FC();
  __chkstk_darwin(v1);
  sub_1000EED68();
  sub_1000EEE14();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t result = 9002;
  switch(EnumCaseMultiPayload)
  {
    case 1:
      sub_1000E88E0(v0, (void (*)(void))type metadata accessor for RegistryError);
      uint64_t result = 9003;
      break;
    case 2:
      type metadata accessor for UUID();
      sub_1000283FC();
      sub_100013EC4();
      v4();
      uint64_t result = 9005;
      break;
    case 3:
      sub_1000E88E0(v0, (void (*)(void))type metadata accessor for RegistryError);
      uint64_t result = 9000;
      break;
    case 4:
      return result;
    case 5:
      uint64_t result = 9008;
      break;
    case 6:
      uint64_t result = 9007;
      break;
    default:
      sub_1000E88E0(v0, (void (*)(void))type metadata accessor for RegistryError);
      uint64_t result = 9001;
      break;
  }
  return result;
}

uint64_t sub_1000C42B4()
{
  type metadata accessor for RegistryError(0);
  sub_1000283FC();
  __chkstk_darwin(v1);
  sub_1000EED68();
  uint64_t v7 = Dictionary.init(dictionaryLiteral:)();
  sub_1000B84B4();
  sub_1000EFA20();
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000EFD84(v2, v3, v2, v3);
  sub_1000E8894();
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    sub_10000BF1C(&qword_10017C810);
    sub_10000D9D4(0, &qword_10017F268);
    if (swift_dynamicCast())
    {
      uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_1000EFD84(v4, v5, v4, v5);
    }
  }
  else
  {
    sub_1000E88E0(v0, (void (*)(void))type metadata accessor for RegistryError);
  }
  return v7;
}

uint64_t sub_1000C4450()
{
  sub_1000C40F0();
  uint64_t v0 = qword_100181FE8;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_1000C4494(uint64_t a1)
{
  uint64_t v2 = sub_1000E63EC(&qword_100180110, (void (*)(uint64_t))type metadata accessor for RegistryError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000C4500(uint64_t a1)
{
  uint64_t v2 = sub_1000E63EC(&qword_100180110, (void (*)(uint64_t))type metadata accessor for RegistryError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000C456C()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_100181FF8 = result;
  unk_100182000 = v1;
  return result;
}

uint64_t sub_1000C459C()
{
  if (qword_10017C4D0 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  return sub_10000EBA4();
}

uint64_t sub_1000C4600@<X0>(void *a1@<X8>)
{
  id v3 = objc_allocWithZone((Class)LNWeakProxy);
  id v4 = sub_1000E60B4(v1, (uint64_t)sub_1000C4674, 0);
  uint64_t result = sub_10000BF1C((uint64_t *)&unk_10017F870);
  a1[3] = result;
  *a1 = v4;
  return result;
}

uint64_t sub_1000C4674(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = sub_10000BF1C(&qword_10017DCC0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (Selector.description.getter() == a1 && v9 == a2)
  {
    return swift_bridgeObjectRelease();
  }
  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v13 = type metadata accessor for TaskPriority();
      sub_10000D5B0((uint64_t)v8, 1, 1, v13);
      id v14 = (void *)swift_allocObject();
      v14[2] = 0;
      void v14[3] = 0;
      v14[4] = a3;
      id v15 = a3;
      sub_100011AA4((uint64_t)v8, (uint64_t)&unk_10017F888, (uint64_t)v14);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1000C47CC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100013DD8;
  return sub_1000B9A94();
}

void sub_1000C485C()
{
  sub_100018E30();
  uint64_t v3 = v2;
  type metadata accessor for RegistryError(0);
  sub_1000283FC();
  __chkstk_darwin(v4);
  sub_1000EF408();
  uint64_t v5 = type metadata accessor for Logger();
  sub_100028430();
  __chkstk_darwin(v6);
  sub_1000EF424();
  if ((sub_1000C4C14() & 1) == 0)
  {
    sub_100062550();
    uint64_t v7 = off_10017C4C0;
    id v8 = v0;
    if (v7 != (void *)-1) {
      swift_once();
    }
    sub_10000BEE4(v5, (uint64_t)qword_100181FD0);
    sub_1000EF0F4();
    v9();

    swift_bridgeObjectRetain();
    id v10 = v3;
    char v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315650;
      swift_bridgeObjectRetain();
      uint64_t v14 = sub_100028714();
      sub_100013090(v14, v15, v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 12) = 1024;
      [v10 processIdentifier];

      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 18) = 2080;
      swift_storeEnumTagMultiPayload();
      sub_1000B84B4();
      sub_1000E88E0(v1, (void (*)(void))type metadata accessor for RegistryError);
      uint64_t v17 = sub_1000EFABC();
      sub_100013090(v17, v18, v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s with PID %d needs access to Registry: %s", (uint8_t *)v13, 0x1Cu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100013EC4();
      v20();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      uint64_t v21 = sub_1000EF054();
      v22(v21);
    }
  }
  [v3 resume];
  sub_100018E80();
}

uint64_t sub_1000C4C14()
{
  sub_10000D9D4(0, (unint64_t *)&qword_10017CE80);
  Class isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
  char v1 = sub_1000626C0(0xD000000000000018, 0x8000000100144700, isa);

  return v1 & 1;
}

void sub_1000C4C94(char *a1, void (**a2)(void, void, void))
{
  uint64_t v4 = sub_10000BF1C(&qword_10017DCC0);
  __chkstk_darwin(v4 - 8);
  unint64_t v85 = &v71[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v86 = type metadata accessor for Logger();
  uint64_t v84 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  uint64_t v87 = &v71[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for String.Encoding();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = &v71[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = &v71[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = (void *)type metadata accessor for URL();
  unint64_t v88 = (void (*)(void, void))*(v14 - 1);
  __chkstk_darwin(v14);
  unint64_t v83 = &v71[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v16);
  unint64_t v82 = &v71[-v17];
  __chkstk_darwin(v18);
  os_log_type_t v89 = &v71[-v19];
  __chkstk_darwin(v20);
  unint64_t v90 = &v71[-v21];
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = a2;
  uint64_t v23 = self;
  _Block_copy(a2);
  id v24 = [v23 currentConnection];
  if (!v24) {
    goto LABEL_4;
  }
  int v25 = v24;
  id v80 = a1;
  uint64_t v26 = *(void *)&a1[OBJC_IVAR____TtC10LinkDaemon8Registry_store] + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_URL;
  swift_beginAccess();
  sub_1000A3B4C(v26, (uint64_t)v13, (uint64_t *)&unk_10017D0C0);
  if (sub_10000D5D8((uint64_t)v13, 1, (uint64_t)v14) == 1)
  {

    sub_1000347E8((uint64_t)v13, (uint64_t *)&unk_10017D0C0);
LABEL_4:
    type metadata accessor for RegistryError(0);
    sub_1000E63EC(&qword_10017F838, (void (*)(uint64_t))type metadata accessor for RegistryError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    char v27 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void *))a2)[2](a2, 0, v27);

    swift_errorRelease();
    goto LABEL_8;
  }
  uint64_t v81 = v22;
  (*((void (**)(unsigned char *, unsigned char *, void *))v88 + 4))(v90, v13, v14);
  uint64_t v28 = (uint64_t)v89;
  URL.deletingLastPathComponent()();
  sub_1000627CC(v28);
  static String.Encoding.utf8.getter();
  uint64_t v29 = String.data(using:allowLossyConversion:)();
  unint64_t v31 = v30;
  swift_bridgeObjectRelease();
  (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
  unint64_t v79 = v31;
  if (v31 >> 60 == 15)
  {
    type metadata accessor for RegistryError(0);
    sub_1000E63EC(&qword_10017F838, (void (*)(uint64_t))type metadata accessor for RegistryError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    uint64_t v32 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void *))a2)[2](a2, 0, v32);

    swift_errorRelease();
    uint64_t v33 = (void (*)(unsigned char *, void *))*((void *)v88 + 1);
    v33(v89, v14);
    v33(v90, v14);
  }
  else
  {
    uint64_t v78 = v29;
    uint64_t v34 = off_10017C4C0;
    id v35 = v80;
    uint64_t v36 = v35;
    if (v34 != (void *)-1) {
      swift_once();
    }
    uint64_t v37 = v86;
    uint64_t v38 = sub_10000BEE4(v86, (uint64_t)qword_100181FD0);
    uint64_t v39 = v84;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v84 + 16))(v87, v38, v37);

    unint64_t v40 = v88;
    long long v41 = (void (*)(unsigned char *, unsigned char *, id))*((void *)v88 + 2);
    char v42 = v82;
    id v80 = v14;
    uint64_t v75 = v41;
    v41(v82, v89, v14);
    id v43 = v25;
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.default.getter();
    int v46 = v45;
    BOOL v47 = os_log_type_enabled(v44, v45);
    id v76 = v43;
    uint64_t v77 = v36;
    if (v47)
    {
      uint64_t v48 = swift_slowAlloc();
      uint64_t v73 = swift_slowAlloc();
      uint64_t v92 = v73;
      *(_DWORD *)uint64_t v48 = 67240450;
      int v72 = v46;
      LODWORD(v91) = [v43 processIdentifier];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v48 + 8) = 2080;
      sub_1000E63EC((unint64_t *)&qword_10017DD50, (void (*)(uint64_t))&type metadata accessor for URL);
      id v49 = v80;
      uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v91 = sub_100013090(v50, v51, &v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v52 = (void (*)(void, void))v40[1];
      uint64_t v74 = (unint64_t)(v40 + 1) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      unint64_t v88 = v52;
      v52(v42, v49);
      _os_log_impl((void *)&_mh_execute_header, v44, (os_log_type_t)v72, "Granting %{public}d read access to %s", (uint8_t *)v48, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(unsigned char *, uint64_t))(v39 + 8))(v87, v86);
    }
    else
    {

      uint64_t v53 = (void (*)(void, void))v40[1];
      uint64_t v74 = (unint64_t)(v40 + 1) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      unint64_t v88 = v53;
      v53(v42, v80);

      (*(void (**)(unsigned char *, uint64_t))(v39 + 8))(v87, v37);
    }
    id v54 = v80;
    v75(v83, v90, v80);
    id v55 = objc_allocWithZone((Class)NSSecurityScopedURLWrapper);
    uint64_t v57 = v78;
    unint64_t v56 = v79;
    sub_10000DADC(v78, v79);
    sub_1000E5FF8();
    uint64_t v59 = v58;
    uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v61 = v76;
    char v63 = sub_1000626C0(v60, v62, 0);
    swift_bridgeObjectRelease();
    uint64_t v64 = type metadata accessor for TaskPriority();
    uint64_t v65 = v85;
    sub_10000D5B0((uint64_t)v85, 1, 1, v64);
    uint64_t v66 = swift_allocObject();
    *(void *)(v66 + 16) = 0;
    *(void *)(v66 + 24) = 0;
    *(unsigned char *)(v66 + 32) = v63 & 1;
    uint64_t v67 = v77;
    *(void *)(v66 + 40) = v77;
    *(void *)(v66 + 48) = sub_1000EC3E8;
    *(void *)(v66 + 56) = v81;
    *(void *)(v66 + 64) = v59;
    id v68 = v67;
    swift_retain();
    id v69 = v59;
    sub_100011AA4((uint64_t)v65, (uint64_t)&unk_10017FEA8, v66);

    swift_release();
    sub_10000DA68(v57, v56);

    os_log_t v70 = (void (*)(unsigned char *, id))v88;
    v88(v89, v54);
    v70(v90, v54);
  }
LABEL_8:
  swift_release();
  _Block_release(a2);
}

uint64_t sub_1000C567C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 32) = a7;
  *(void *)(v8 + 40) = a8;
  *(void *)(v8 + 16) = a5;
  *(void *)(v8 + 24) = a6;
  *(unsigned char *)(v8 + 64) = a4;
  return _swift_task_switch(sub_1000C56A4, 0, 0);
}

uint64_t sub_1000C56A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_10000EC58();
  if (*(unsigned char *)(v22 + 64) == 1
    && (uint64_t v23 = *(void *)(*(void *)(v22 + 16) + OBJC_IVAR____TtC10LinkDaemon8Registry_ready),
        (*(void *)(v22 + 48) = v23) != 0))
  {
    swift_retain();
    id v24 = (void *)swift_task_alloc();
    *(void *)(v22 + 56) = v24;
    *id v24 = v22;
    v24[1] = sub_1000C579C;
    sub_1000843A4();
    return Task<>.value.getter(v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22);
  }
  else
  {
    uint64_t v33 = sub_1000EFD30();
    v34(v33);
    sub_10000EB74();
    return v35();
  }
}

uint64_t sub_1000C579C()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000C5880()
{
  sub_10000EC58();
  uint64_t v0 = sub_1000EFD30();
  v1(v0);
  sub_10000EB74();
  return v2();
}

uint64_t sub_1000C593C()
{
  *(void *)(v1 + 16) = v0;
  return sub_100084120((uint64_t)sub_1000C5954);
}

uint64_t sub_1000C5954()
{
  sub_10000EC58();
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = self;
  id v3 = v1;
  sub_1000EF2C4((uint64_t)[v2 currentConnection]);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_1000EF0D0(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_1000B5304;
  uint64_t v7 = sub_1000EE488();
  return sub_1000CACFC(v7, v8, v9, v10, v11);
}

uint64_t sub_1000C5A10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  v7[5] = a2;
  v7[6] = a3;
  v7[4] = a1;
  uint64_t v8 = type metadata accessor for Logger();
  v7[11] = v8;
  v7[12] = *(void *)(v8 - 8);
  v7[13] = swift_task_alloc();
  v7[14] = type metadata accessor for RegistryError(0);
  v7[15] = swift_task_alloc();
  v7[16] = swift_task_alloc();
  return _swift_task_switch(sub_1000C5B1C, 0, 0);
}

#error "1000C5CCC: call analysis failed (funcsize=218)"

uint64_t sub_1000C5EB4()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

#error "1000C6090: call analysis failed (funcsize=170)"

uint64_t sub_1000C6278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  v7[5] = a2;
  v7[6] = a3;
  v7[4] = a1;
  uint64_t v8 = type metadata accessor for Logger();
  v7[11] = v8;
  v7[12] = *(void *)(v8 - 8);
  v7[13] = swift_task_alloc();
  v7[14] = type metadata accessor for RegistryError(0);
  v7[15] = swift_task_alloc();
  v7[16] = swift_task_alloc();
  return _swift_task_switch(sub_1000C6384, 0, 0);
}

#error "1000C6534: call analysis failed (funcsize=218)"

uint64_t sub_1000C671C()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

#error "1000C68F8: call analysis failed (funcsize=170)"

uint64_t sub_1000C6AE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  v7[5] = a2;
  v7[6] = a3;
  v7[4] = a1;
  uint64_t v8 = type metadata accessor for Logger();
  v7[11] = v8;
  v7[12] = *(void *)(v8 - 8);
  v7[13] = swift_task_alloc();
  v7[14] = type metadata accessor for RegistryError(0);
  v7[15] = swift_task_alloc();
  v7[16] = swift_task_alloc();
  return _swift_task_switch(sub_1000C6BEC, 0, 0);
}

#error "1000C6D9C: call analysis failed (funcsize=218)"

uint64_t sub_1000C6F84()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

#error "1000C7160: call analysis failed (funcsize=170)"

uint64_t sub_1000C7348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[7] = a4;
  v5[8] = a5;
  void v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  uint64_t v6 = type metadata accessor for Logger();
  v5[9] = v6;
  v5[10] = *(void *)(v6 - 8);
  v5[11] = swift_task_alloc();
  v5[12] = type metadata accessor for RegistryError(0);
  v5[13] = swift_task_alloc();
  v5[14] = swift_task_alloc();
  return _swift_task_switch(sub_1000C7450, 0, 0);
}

#error "1000C7604: call analysis failed (funcsize=215)"

uint64_t sub_1000C77DC()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

#error "1000C79BC: call analysis failed (funcsize=167)"

uint64_t sub_1000C7B94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  v7[5] = a2;
  v7[6] = a3;
  v7[4] = a1;
  uint64_t v8 = type metadata accessor for Logger();
  v7[11] = v8;
  v7[12] = *(void *)(v8 - 8);
  v7[13] = swift_task_alloc();
  v7[14] = type metadata accessor for RegistryError(0);
  v7[15] = swift_task_alloc();
  v7[16] = swift_task_alloc();
  return _swift_task_switch(sub_1000C7CA0, 0, 0);
}

#error "1000C7E8C: call analysis failed (funcsize=236)"

uint64_t sub_1000C8080()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

#error "1000C829C: call analysis failed (funcsize=189)"

uint64_t sub_1000C8490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  v7[5] = a2;
  v7[6] = a3;
  v7[4] = a1;
  uint64_t v8 = type metadata accessor for Logger();
  v7[11] = v8;
  v7[12] = *(void *)(v8 - 8);
  v7[13] = swift_task_alloc();
  v7[14] = type metadata accessor for RegistryError(0);
  v7[15] = swift_task_alloc();
  v7[16] = swift_task_alloc();
  return _swift_task_switch(sub_1000C859C, 0, 0);
}

#error "1000C8788: call analysis failed (funcsize=236)"

uint64_t sub_1000C897C()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

#error "1000C8B98: call analysis failed (funcsize=189)"

uint64_t sub_1000C8D8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[10] = a8;
  v8[11] = v12;
  v8[8] = a6;
  v8[9] = a7;
  v8[6] = a4;
  v8[7] = a5;
  v8[4] = a2;
  v8[5] = a3;
  uint64_t v9 = type metadata accessor for Logger();
  v8[12] = v9;
  v8[13] = *(void *)(v9 - 8);
  v8[14] = swift_task_alloc();
  v8[15] = type metadata accessor for RegistryError(0);
  v8[16] = swift_task_alloc();
  v8[17] = swift_task_alloc();
  return _swift_task_switch(sub_1000C8EA0, 0, 0);
}

#error "1000C9040: call analysis failed (funcsize=214)"

uint64_t sub_1000C9224()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

#error "1000C93F0: call analysis failed (funcsize=166)"

uint64_t sub_1000C95D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  *(unsigned char *)(v8 + 176) = a8;
  *(void *)(v8 + 80) = a7;
  *(void *)(v8 + 88) = v12;
  *(void *)(v8 + 64) = a5;
  *(void *)(v8 + 72) = a6;
  *(void *)(v8 + 48) = a3;
  *(void *)(v8 + 56) = a4;
  *(void *)(v8 + 32) = a1;
  *(void *)(v8 + 40) = a2;
  uint64_t v9 = type metadata accessor for Logger();
  *(void *)(v8 + 96) = v9;
  *(void *)(v8 + 104) = *(void *)(v9 - 8);
  *(void *)(v8 + 112) = swift_task_alloc();
  *(void *)(v8 + 120) = type metadata accessor for RegistryError(0);
  *(void *)(v8 + 128) = swift_task_alloc();
  *(void *)(v8 + 136) = swift_task_alloc();
  return _swift_task_switch(sub_1000C96EC, 0, 0);
}

uint64_t sub_1000C96EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_10006039C();
  id v24 = *(void **)(v23 + 40);
  if (v24)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000EE8F8();
    sub_1000EE57C();
    sub_1000EE8E0();
    if (v22)
    {
      sub_1000EFD78(*(void *)(v23 + 64));
      if (v22)
      {
        swift_retain();
        uint64_t v25 = swift_task_alloc();
        uint64_t v26 = (void *)sub_1000EF0C4(v25);
        *uint64_t v26 = v27;
        v26[1] = sub_1000C9840;
        sub_1000843A4();
        return Task<>.value.getter(v28, v29, v30, v31, v32, v33, v34, v35, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                 a20,
                 a21,
                 a22);
      }
    }
  }
  uint64_t v36 = swift_task_alloc();
  uint64_t v37 = (void *)sub_1000EF0B8(v36);
  *uint64_t v37 = v38;
  v37[1] = sub_1000C99BC;
  uint64_t v39 = sub_1000EEE2C();
  return sub_1000DF1EC(v39, v40, v41, v42, v43);
}

uint64_t sub_1000C9840()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000C9924()
{
  sub_10000EC58();

  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_1000EF0B8(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_1000C99BC;
  uint64_t v4 = sub_1000EEE2C();
  return sub_1000DF1EC(v4, v5, v6, v7, v8);
}

uint64_t sub_1000C99BC()
{
  sub_10000EC58();
  sub_100010BAC();
  sub_100060250();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_100010BC4();
  *uint64_t v5 = v4;
  *(void *)(v6 + 168) = v0;
  swift_task_dealloc();
  sub_100060358();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000C9A98()
{
  sub_10006039C();
  uint64_t v1 = *(void **)(v0 + 88);
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100070028();
  return v2();
}

#error "1000C9C60: call analysis failed (funcsize=148)"

uint64_t sub_1000C9DA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[8] = a5;
  v6[9] = a6;
  v6[6] = a3;
  v6[7] = a4;
  v6[4] = a1;
  v6[5] = a2;
  uint64_t v7 = type metadata accessor for Logger();
  v6[10] = v7;
  v6[11] = *(void *)(v7 - 8);
  v6[12] = swift_task_alloc();
  v6[13] = type metadata accessor for RegistryError(0);
  v6[14] = swift_task_alloc();
  v6[15] = swift_task_alloc();
  return _swift_task_switch(sub_1000C9EA8, 0, 0);
}

uint64_t sub_1000C9EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_10006039C();
  id v24 = (void *)v23[5];
  if (v24)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000EE8F8();
    sub_1000EE57C();
    sub_1000EE8E0();
    if (v22)
    {
      uint64_t v25 = *(void *)(v23[8] + OBJC_IVAR____TtC10LinkDaemon8Registry_ready);
      v23[16] = v25;
      if (v25)
      {
        swift_retain();
        uint64_t v26 = swift_task_alloc();
        uint64_t v27 = (void *)sub_1000EF7E0(v26);
        *uint64_t v27 = v28;
        v27[1] = sub_1000C9FF8;
        sub_1000843A4();
        return Task<>.value.getter(v29, v30, v31, v32, v33, v34, v35, v36, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                 a20,
                 a21,
                 a22);
      }
    }
  }
  uint64_t v37 = swift_task_alloc();
  uint64_t v38 = (void *)sub_1000EEC9C(v37);
  *uint64_t v38 = v39;
  v38[1] = sub_1000CA16C;
  uint64_t v40 = sub_1000EEE2C();
  return sub_1000E0E34(v40, v41);
}

uint64_t sub_1000C9FF8()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000CA0DC()
{
  sub_10000EC58();

  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_1000EEC9C(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_1000CA16C;
  uint64_t v4 = sub_1000EEE2C();
  return sub_1000E0E34(v4, v5);
}

uint64_t sub_1000CA16C()
{
  sub_10000EC58();
  sub_100010BAC();
  sub_100060250();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_100010BC4();
  *uint64_t v5 = v4;
  *(void *)(v6 + 152) = v0;
  swift_task_dealloc();
  sub_100060358();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000CA248()
{
  sub_10006039C();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100070028();
  return v1();
}

#error "1000CA40C: call analysis failed (funcsize=143)"

uint64_t sub_1000CA538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[10] = a7;
  v8[11] = a8;
  v8[8] = a5;
  v8[9] = a6;
  v8[6] = a3;
  v8[7] = a4;
  v8[4] = a1;
  v8[5] = a2;
  uint64_t v9 = type metadata accessor for Logger();
  v8[12] = v9;
  v8[13] = *(void *)(v9 - 8);
  v8[14] = swift_task_alloc();
  v8[15] = type metadata accessor for RegistryError(0);
  v8[16] = swift_task_alloc();
  v8[17] = swift_task_alloc();
  return _swift_task_switch(sub_1000CA644, 0, 0);
}

uint64_t sub_1000CA644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_10006039C();
  id v24 = *(void **)(v23 + 40);
  if (v24)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000EE8F8();
    sub_1000EE57C();
    sub_1000EE8E0();
    if (v22)
    {
      sub_1000EFD78(*(void *)(v23 + 64));
      if (v22)
      {
        swift_retain();
        uint64_t v25 = swift_task_alloc();
        uint64_t v26 = (void *)sub_1000EF0C4(v25);
        *uint64_t v26 = v27;
        v26[1] = sub_1000CA794;
        sub_1000843A4();
        return Task<>.value.getter(v28, v29, v30, v31, v32, v33, v34, v35, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                 a20,
                 a21,
                 a22);
      }
    }
  }
  uint64_t v36 = swift_task_alloc();
  uint64_t v37 = (void *)sub_1000EF0B8(v36);
  *uint64_t v37 = v38;
  v37[1] = sub_1000CA90C;
  uint64_t v39 = sub_1000EEE2C();
  return sub_1000E1C08(v39, v40, v41, v42);
}

uint64_t sub_1000CA794()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000CA878()
{
  sub_10000EC58();

  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_1000EF0B8(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_1000CA90C;
  uint64_t v4 = sub_1000EEE2C();
  return sub_1000E1C08(v4, v5, v6, v7);
}

uint64_t sub_1000CA90C()
{
  sub_10000EC58();
  sub_100010BAC();
  sub_100060250();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_100010BC4();
  *uint64_t v5 = v4;
  *(void *)(v6 + 168) = v0;
  swift_task_dealloc();
  sub_100060358();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000CA9E8()
{
  sub_10006039C();

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100070028();
  return v1();
}

#error "1000CABB8: call analysis failed (funcsize=149)"

uint64_t sub_1000CACFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[7] = a4;
  v5[8] = a5;
  void v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  uint64_t v6 = type metadata accessor for Logger();
  v5[9] = v6;
  v5[10] = *(void *)(v6 - 8);
  v5[11] = swift_task_alloc();
  v5[12] = type metadata accessor for RegistryError(0);
  v5[13] = swift_task_alloc();
  v5[14] = swift_task_alloc();
  return _swift_task_switch(sub_1000CAE04, 0, 0);
}

#error "1000CAFB8: call analysis failed (funcsize=215)"

uint64_t sub_1000CB190()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

#error "1000CB370: call analysis failed (funcsize=167)"

uint64_t sub_1000CB548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[11] = a8;
  v8[12] = v12;
  v8[9] = a6;
  v8[10] = a7;
  v8[7] = a4;
  v8[8] = a5;
  v8[5] = a2;
  v8[6] = a3;
  v8[4] = a1;
  uint64_t v9 = type metadata accessor for Logger();
  v8[13] = v9;
  v8[14] = *(void *)(v9 - 8);
  v8[15] = swift_task_alloc();
  v8[16] = type metadata accessor for RegistryError(0);
  v8[17] = swift_task_alloc();
  v8[18] = swift_task_alloc();
  return _swift_task_switch(sub_1000CB660, 0, 0);
}

#error "1000CB7FC: call analysis failed (funcsize=218)"

uint64_t sub_1000CB9F4()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

#error "1000CBBBC: call analysis failed (funcsize=170)"

uint64_t sub_1000CBDB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[11] = a8;
  v8[12] = v12;
  v8[9] = a6;
  v8[10] = a7;
  v8[7] = a4;
  v8[8] = a5;
  v8[5] = a2;
  v8[6] = a3;
  v8[4] = a1;
  uint64_t v9 = type metadata accessor for Logger();
  v8[13] = v9;
  v8[14] = *(void *)(v9 - 8);
  v8[15] = swift_task_alloc();
  v8[16] = type metadata accessor for RegistryError(0);
  v8[17] = swift_task_alloc();
  v8[18] = swift_task_alloc();
  return _swift_task_switch(sub_1000CBECC, 0, 0);
}

#error "1000CC068: call analysis failed (funcsize=220)"

uint64_t sub_1000CC268()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

#error "1000CC430: call analysis failed (funcsize=172)"

uint64_t sub_1000CC630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[8] = a5;
  v6[9] = a6;
  v6[6] = a3;
  v6[7] = a4;
  v6[4] = a1;
  v6[5] = a2;
  uint64_t v7 = type metadata accessor for Logger();
  v6[10] = v7;
  v6[11] = *(void *)(v7 - 8);
  v6[12] = swift_task_alloc();
  v6[13] = type metadata accessor for RegistryError(0);
  v6[14] = swift_task_alloc();
  v6[15] = swift_task_alloc();
  return _swift_task_switch(sub_1000CC738, 0, 0);
}

#error "1000CC8EC: call analysis failed (funcsize=221)"

uint64_t sub_1000CCADC()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

#error "1000CCCB8: call analysis failed (funcsize=172)"

uint64_t sub_1000CCEA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  v7[5] = a2;
  v7[6] = a3;
  v7[4] = a1;
  uint64_t v8 = type metadata accessor for Logger();
  v7[11] = v8;
  v7[12] = *(void *)(v8 - 8);
  v7[13] = swift_task_alloc();
  v7[14] = type metadata accessor for RegistryError(0);
  v7[15] = swift_task_alloc();
  v7[16] = swift_task_alloc();
  return _swift_task_switch(sub_1000CCFB4, 0, 0);
}

#error "1000CD1A0: call analysis failed (funcsize=236)"

uint64_t sub_1000CD394()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

#error "1000CD5B0: call analysis failed (funcsize=189)"

uint64_t sub_1000CD7A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[7] = a4;
  v5[8] = a5;
  void v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  uint64_t v6 = type metadata accessor for Logger();
  v5[9] = v6;
  v5[10] = *(void *)(v6 - 8);
  v5[11] = swift_task_alloc();
  v5[12] = type metadata accessor for RegistryError(0);
  v5[13] = swift_task_alloc();
  v5[14] = swift_task_alloc();
  return _swift_task_switch(sub_1000CD8AC, 0, 0);
}

#error "1000CDA60: call analysis failed (funcsize=215)"

uint64_t sub_1000CDC38()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

#error "1000CDE18: call analysis failed (funcsize=167)"

uint64_t sub_1000CDFF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[7] = a4;
  v5[8] = a5;
  void v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  uint64_t v6 = type metadata accessor for Logger();
  v5[9] = v6;
  v5[10] = *(void *)(v6 - 8);
  v5[11] = swift_task_alloc();
  v5[12] = type metadata accessor for RegistryError(0);
  v5[13] = swift_task_alloc();
  v5[14] = swift_task_alloc();
  return _swift_task_switch(sub_1000CE0F8, 0, 0);
}

#error "1000CE2AC: call analysis failed (funcsize=215)"

uint64_t sub_1000CE484()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

#error "1000CE664: call analysis failed (funcsize=167)"

uint64_t sub_1000CE83C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[7] = a4;
  v5[8] = a5;
  void v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  uint64_t v6 = type metadata accessor for Logger();
  v5[9] = v6;
  v5[10] = *(void *)(v6 - 8);
  v5[11] = swift_task_alloc();
  v5[12] = type metadata accessor for RegistryError(0);
  v5[13] = swift_task_alloc();
  v5[14] = swift_task_alloc();
  return _swift_task_switch(sub_1000CE944, 0, 0);
}

#error "1000CEAF8: call analysis failed (funcsize=215)"

uint64_t sub_1000CECD0()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

#error "1000CEEB0: call analysis failed (funcsize=167)"

uint64_t sub_1000CF088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  v7[5] = a2;
  v7[6] = a3;
  v7[4] = a1;
  uint64_t v8 = type metadata accessor for Logger();
  v7[11] = v8;
  v7[12] = *(void *)(v8 - 8);
  v7[13] = swift_task_alloc();
  v7[14] = type metadata accessor for RegistryError(0);
  v7[15] = swift_task_alloc();
  v7[16] = swift_task_alloc();
  return _swift_task_switch(sub_1000CF194, 0, 0);
}

#error "1000CF344: call analysis failed (funcsize=218)"

uint64_t sub_1000CF52C()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

#error "1000CF708: call analysis failed (funcsize=170)"

uint64_t sub_1000CF8F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[7] = a4;
  v5[8] = a5;
  void v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  uint64_t v6 = type metadata accessor for Logger();
  v5[9] = v6;
  v5[10] = *(void *)(v6 - 8);
  v5[11] = swift_task_alloc();
  v5[12] = type metadata accessor for RegistryError(0);
  v5[13] = swift_task_alloc();
  v5[14] = swift_task_alloc();
  return _swift_task_switch(sub_1000CF9F8, 0, 0);
}

#error "1000CFBAC: call analysis failed (funcsize=215)"

uint64_t sub_1000CFD84()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

#error "1000CFF64: call analysis failed (funcsize=167)"

uint64_t sub_1000D013C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[11] = a8;
  v8[12] = v12;
  v8[9] = a6;
  v8[10] = a7;
  v8[7] = a4;
  v8[8] = a5;
  v8[5] = a2;
  v8[6] = a3;
  v8[4] = a1;
  uint64_t v9 = type metadata accessor for Logger();
  v8[13] = v9;
  v8[14] = *(void *)(v9 - 8);
  v8[15] = swift_task_alloc();
  v8[16] = type metadata accessor for RegistryError(0);
  v8[17] = swift_task_alloc();
  v8[18] = swift_task_alloc();
  return _swift_task_switch(sub_1000D0254, 0, 0);
}

#error "1000D03F0: call analysis failed (funcsize=218)"

uint64_t sub_1000D05E8()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

#error "1000D07B0: call analysis failed (funcsize=170)"

uint64_t sub_1000D09A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[10] = a6;
  v7[11] = a7;
  v7[8] = a4;
  v7[9] = a5;
  v7[6] = a2;
  v7[7] = a3;
  v7[5] = a1;
  uint64_t v8 = type metadata accessor for Logger();
  v7[12] = v8;
  v7[13] = *(void *)(v8 - 8);
  v7[14] = swift_task_alloc();
  v7[15] = type metadata accessor for RegistryError(0);
  v7[16] = swift_task_alloc();
  v7[17] = swift_task_alloc();
  return _swift_task_switch(sub_1000D0AE0, 0, 0);
}

#error "1000D0D40: call analysis failed (funcsize=288)"

uint64_t sub_1000D0F90()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

#error "1000D124C: call analysis failed (funcsize=241)"

uint64_t sub_1000D149C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[12] = a8;
  v8[13] = v12;
  v8[10] = a6;
  v8[11] = a7;
  v8[8] = a4;
  v8[9] = a5;
  v8[6] = a2;
  v8[7] = a3;
  v8[5] = a1;
  uint64_t v9 = type metadata accessor for Logger();
  v8[14] = v9;
  v8[15] = *(void *)(v9 - 8);
  v8[16] = swift_task_alloc();
  v8[17] = type metadata accessor for RegistryError(0);
  v8[18] = swift_task_alloc();
  v8[19] = swift_task_alloc();
  return _swift_task_switch(sub_1000D15B4, 0, 0);
}

uint64_t sub_1000D15B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_10006039C();
  id v24 = (void *)v23[5];
  if (v24)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000EE8F8();
    sub_1000EE57C();
    sub_1000EE8E0();
    if (v22)
    {
      uint64_t v25 = *(void *)(v23[8] + OBJC_IVAR____TtC10LinkDaemon8Registry_ready);
      v23[20] = v25;
      if (v25)
      {
        swift_retain();
        uint64_t v26 = (void *)swift_task_alloc();
        v23[21] = v26;
        *uint64_t v26 = v23;
        v26[1] = sub_1000D1718;
        sub_1000843A4();
        return Task<>.value.getter(v27, v28, v29, v30, v31, v32, v33, v34, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                 a20,
                 a21,
                 a22);
      }
    }
  }
  uint64_t v35 = (void *)swift_task_alloc();
  v23[22] = v35;
  *uint64_t v35 = v23;
  v35[1] = sub_1000D189C;
  uint64_t v36 = sub_1000EF144();
  return sub_1000D9DB4(v36, v37, v38, v39, v40, v41);
}

uint64_t sub_1000D1718()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000D17FC()
{
  sub_10000EC58();

  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 176) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000D189C;
  uint64_t v2 = sub_1000EF144();
  return sub_1000D9DB4(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_1000D189C()
{
  sub_10000EC58();
  sub_100010BAC();
  sub_100060250();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_100010BC4();
  *uint64_t v5 = v4;
  *(void *)(v6 + 184) = v0;
  swift_task_dealloc();
  sub_100060358();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000D1978()
{
  sub_100084ED0();
  sub_100013E0C();
  uint64_t v1 = *(void **)(v0 + 88);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000F013C();
  sub_100084D74();
  return v4(v2, v3, v4, v5, v6, v7, v8, v9);
}

#error "1000D1B70: call analysis failed (funcsize=161)"

uint64_t sub_1000D1CC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[9] = a5;
  v6[10] = v5;
  v6[7] = a3;
  v6[8] = a4;
  v6[5] = a1;
  v6[6] = a2;
  uint64_t v7 = type metadata accessor for Logger();
  v6[11] = v7;
  v6[12] = *(void *)(v7 - 8);
  v6[13] = swift_task_alloc();
  v6[14] = type metadata accessor for RegistryError(0);
  v6[15] = swift_task_alloc();
  v6[16] = swift_task_alloc();
  return _swift_task_switch(sub_1000D1DCC, 0, 0);
}

uint64_t sub_1000D1DCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_10006039C();
  id v24 = *(void **)(v23 + 40);
  if (v24)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000EE8F8();
    sub_1000EE57C();
    sub_1000EE8E0();
    if (v22)
    {
      sub_1000EEE68(*(void *)(v23 + 80));
      if (v22)
      {
        swift_retain();
        uint64_t v25 = swift_task_alloc();
        uint64_t v26 = (void *)sub_1000EEC9C(v25);
        *uint64_t v26 = v27;
        v26[1] = sub_1000D1F44;
        sub_1000843A4();
        return Task<>.value.getter(v28, v29, v30, v31, v32, v33, v34, v35, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                 a20,
                 a21,
                 a22);
      }
    }
  }
  sub_1000EEF90();
  uint64_t v41 = (uint64_t (*)(uint64_t))((char *)v36 + *v36);
  uint64_t v37 = swift_task_alloc();
  uint64_t v38 = (void *)sub_1000EF0C4(v37);
  *uint64_t v38 = v39;
  v38[1] = sub_1000D20E8;
  return v41(v23 + 16);
}

uint64_t sub_1000D1F44()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000D2028()
{
  sub_10006039C();

  sub_1000EEF90();
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)v1 + *v1);
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)sub_1000EF0C4(v2);
  *uint64_t v3 = v4;
  v3[1] = sub_1000D20E8;
  return v6(v0 + 16);
}

uint64_t sub_1000D20E8()
{
  sub_10000EC58();
  sub_100010BAC();
  sub_100060250();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_100010BC4();
  *uint64_t v5 = v4;
  *(void *)(v6 + 160) = v0;
  swift_task_dealloc();
  sub_100060358();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000D21C4()
{
  sub_10006039C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v0 = sub_100084F30();
  return v1(v0);
}

#error "1000D2394: call analysis failed (funcsize=149)"

uint64_t sub_1000D24C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[11] = a8;
  v8[12] = v12;
  v8[9] = a6;
  v8[10] = a7;
  v8[7] = a4;
  v8[8] = a5;
  v8[5] = a2;
  v8[6] = a3;
  v8[4] = a1;
  uint64_t v9 = type metadata accessor for Logger();
  v8[13] = v9;
  v8[14] = *(void *)(v9 - 8);
  v8[15] = swift_task_alloc();
  v8[16] = type metadata accessor for RegistryError(0);
  v8[17] = swift_task_alloc();
  v8[18] = swift_task_alloc();
  return _swift_task_switch(sub_1000D25DC, 0, 0);
}

uint64_t sub_1000D25DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_10006039C();
  id v24 = (void *)v23[4];
  if (v24)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000EE8F8();
    sub_1000EE57C();
    sub_1000EE8E0();
    if (v22)
    {
      sub_1000EFD6C(v23[7]);
      if (v22)
      {
        swift_retain();
        uint64_t v25 = swift_task_alloc();
        uint64_t v26 = (void *)sub_1000EF0B8(v25);
        *uint64_t v26 = v27;
        v26[1] = sub_1000D270C;
        sub_1000843A4();
        return Task<>.value.getter(v28, v29, v30, v31, v32, v33, v34, v35, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                 a20,
                 a21,
                 a22);
      }
    }
  }
  uint64_t v36 = *(void *)(v23[8] + OBJC_IVAR____TtC10LinkDaemon8Registry_appShortcutInterpolator);
  v23[21] = v36;
  return _swift_task_switch(sub_1000D2864, v36, 0);
}

uint64_t sub_1000D270C()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000D27F0()
{
  sub_10000EC58();

  uint64_t v1 = *(void *)(*(void *)(v0 + 64) + OBJC_IVAR____TtC10LinkDaemon8Registry_appShortcutInterpolator);
  *(void *)(v0 + 168) = v1;
  return _swift_task_switch(sub_1000D2864, v1, 0);
}

uint64_t sub_1000D2864()
{
  sub_10006039C();
  v0[22] = sub_10002B7FC(v0[9], v0[10], v0[11], v0[12]);
  v0[23] = 0;
  sub_100060358();
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_1000D28F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1000EF7C8();
  sub_1000700D0();
  uint64_t v11 = *(void **)(v10 + 64);
  sub_100050930(1000, *(void *)(v10 + 176));
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000EF788();
  return v14(v12, v13, v14, v15, v16, v17, v18, v19, a9, a10);
}

#error "1000D2B0C: call analysis failed (funcsize=160)"

uint64_t sub_1000D2C64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  v7[5] = a2;
  v7[6] = a3;
  v7[4] = a1;
  uint64_t v8 = type metadata accessor for Logger();
  v7[11] = v8;
  v7[12] = *(void *)(v8 - 8);
  v7[13] = swift_task_alloc();
  v7[14] = type metadata accessor for RegistryError(0);
  v7[15] = swift_task_alloc();
  v7[16] = swift_task_alloc();
  return _swift_task_switch(sub_1000D2D70, 0, 0);
}

uint64_t sub_1000D2D70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_10006039C();
  id v24 = (void *)v23[4];
  if (v24)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000EE8F8();
    sub_1000EE57C();
    sub_1000EE8E0();
    if (v22)
    {
      sub_1000EEE68(v23[7]);
      if (v22)
      {
        swift_retain();
        uint64_t v25 = swift_task_alloc();
        uint64_t v26 = (void *)sub_1000EEC9C(v25);
        *uint64_t v26 = v27;
        v26[1] = sub_1000D2EA0;
        sub_1000843A4();
        return Task<>.value.getter(v28, v29, v30, v31, v32, v33, v34, v35, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                 a20,
                 a21,
                 a22);
      }
    }
  }
  uint64_t v36 = *(void *)(v23[8] + OBJC_IVAR____TtC10LinkDaemon8Registry_appShortcutInterpolator);
  v23[19] = v36;
  return _swift_task_switch(sub_1000D2FF8, v36, 0);
}

uint64_t sub_1000D2EA0()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000D2F84()
{
  sub_10000EC58();

  uint64_t v1 = *(void *)(*(void *)(v0 + 64) + OBJC_IVAR____TtC10LinkDaemon8Registry_appShortcutInterpolator);
  *(void *)(v0 + 152) = v1;
  return _swift_task_switch(sub_1000D2FF8, v1, 0);
}

uint64_t sub_1000D2FF8()
{
  sub_10006039C();
  sub_10002BAF8(v0[9], v0[10]);
  v0[20] = v1;
  v0[21] = 0;
  sub_100060358();
  return _swift_task_switch(v2, v3, v4);
}

uint64_t sub_1000D3080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1000847F4();
  sub_1000700D0();
  uint64_t v11 = *(void **)(v10 + 64);
  sub_1000A3670(*(void *)(v10 + 160));
  sub_1000EF894();

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100084F30();
  sub_100084744();
  return v14(v12, v13, v14, v15, v16, v17, v18, v19, a9, a10);
}

#error "1000D3278: call analysis failed (funcsize=155)"

uint64_t sub_1000D33BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[9] = a5;
  v6[10] = a6;
  v6[7] = a3;
  v6[8] = a4;
  v6[5] = a1;
  v6[6] = a2;
  uint64_t v7 = type metadata accessor for Logger();
  v6[11] = v7;
  v6[12] = *(void *)(v7 - 8);
  v6[13] = swift_task_alloc();
  v6[14] = type metadata accessor for RegistryError(0);
  v6[15] = swift_task_alloc();
  v6[16] = swift_task_alloc();
  return _swift_task_switch(sub_1000D34C4, 0, 0);
}

uint64_t sub_1000D34C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_10006039C();
  id v24 = (void *)v23[5];
  if (v24)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000EE8F8();
    sub_1000EE57C();
    sub_1000EE8E0();
    if (v22)
    {
      sub_1000EEE68(v23[8]);
      if (v22)
      {
        swift_retain();
        uint64_t v25 = swift_task_alloc();
        uint64_t v26 = (void *)sub_1000EEC9C(v25);
        *uint64_t v26 = v27;
        v26[1] = sub_1000D361C;
        sub_1000843A4();
        return Task<>.value.getter(v28, v29, v30, v31, v32, v33, v34, v35, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                 a20,
                 a21,
                 a22);
      }
    }
  }
  uint64_t v36 = swift_task_alloc();
  uint64_t v37 = (void *)sub_1000EF0C4(v36);
  *uint64_t v37 = v38;
  v37[1] = sub_1000D379C;
  uint64_t v39 = v23[9];
  uint64_t v40 = v23[10];
  return sub_1000DD868((uint64_t)(v23 + 2), v39, v40);
}

uint64_t sub_1000D361C()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000D3700()
{
  sub_10000EC58();

  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_1000EF0C4(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_1000D379C;
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v5 = *(void *)(v0 + 80);
  return sub_1000DD868(v0 + 16, v4, v5);
}

uint64_t sub_1000D379C()
{
  sub_10000EC58();
  sub_100010BAC();
  sub_100060250();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_100010BC4();
  *uint64_t v5 = v4;
  *(void *)(v6 + 160) = v0;
  swift_task_dealloc();
  sub_100060358();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000D3878()
{
  sub_100084274();
  sub_100013E0C();

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000F013C();
  sub_100084200();
  return v3(v1, v2, v3, v4, v5, v6, v7, v8);
}

#error "1000D3A5C: call analysis failed (funcsize=153)"

uint64_t sub_1000D3B9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  v7[5] = a2;
  v7[6] = a3;
  v7[4] = a1;
  uint64_t v8 = type metadata accessor for Logger();
  v7[11] = v8;
  v7[12] = *(void *)(v8 - 8);
  v7[13] = swift_task_alloc();
  v7[14] = type metadata accessor for RegistryError(0);
  v7[15] = swift_task_alloc();
  v7[16] = swift_task_alloc();
  return _swift_task_switch(sub_1000D3CA8, 0, 0);
}

#error "1000D3E48: call analysis failed (funcsize=215)"

uint64_t sub_1000D4030()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

#error "1000D41FC: call analysis failed (funcsize=167)"

uint64_t sub_1000D43E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[8] = a4;
  v5[9] = a5;
  v5[6] = a2;
  v5[7] = a3;
  void v5[5] = a1;
  uint64_t v6 = type metadata accessor for Logger();
  v5[10] = v6;
  v5[11] = *(void *)(v6 - 8);
  v5[12] = swift_task_alloc();
  v5[13] = type metadata accessor for RegistryError(0);
  v5[14] = swift_task_alloc();
  v5[15] = swift_task_alloc();
  return _swift_task_switch(sub_1000D44EC, 0, 0);
}

uint64_t sub_1000D44EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_10006039C();
  id v24 = (void *)v23[5];
  if (v24)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000EE8F8();
    sub_1000EE57C();
    sub_1000EE8E0();
    if (v22)
    {
      uint64_t v25 = *(void *)(v23[8] + OBJC_IVAR____TtC10LinkDaemon8Registry_ready);
      v23[16] = v25;
      if (v25)
      {
        swift_retain();
        uint64_t v26 = swift_task_alloc();
        uint64_t v27 = (void *)sub_1000EF7E0(v26);
        *uint64_t v27 = v28;
        v27[1] = sub_1000D4640;
        sub_1000843A4();
        return Task<>.value.getter(v29, v30, v31, v32, v33, v34, v35, v36, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                 a20,
                 a21,
                 a22);
      }
    }
  }
  uint64_t v37 = swift_task_alloc();
  uint64_t v38 = (void *)sub_1000EEC9C(v37);
  *uint64_t v38 = v39;
  v38[1] = sub_1000D47B8;
  uint64_t v40 = sub_1000EF144();
  return sub_1000DE554(v40, v41);
}

uint64_t sub_1000D4640()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000D4724()
{
  sub_10000EC58();

  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_1000EEC9C(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_1000D47B8;
  uint64_t v4 = sub_1000EF144();
  return sub_1000DE554(v4, v5);
}

uint64_t sub_1000D47B8()
{
  sub_10000EC58();
  sub_100010BAC();
  sub_100060250();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_100010BC4();
  *uint64_t v5 = v4;
  *(void *)(v6 + 152) = v0;
  swift_task_dealloc();
  sub_100060358();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000D4894()
{
  sub_10006039C();

  uint64_t v1 = *(void *)(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

#error "1000D4A70: call analysis failed (funcsize=145)"

uint64_t sub_1000D4BBC(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1000D4C64;
  return sub_1000C593C();
}

uint64_t sub_1000D4C64()
{
  sub_10006039C();
  uint64_t v2 = v0;
  sub_100010BAC();
  uint64_t v4 = v3;
  sub_100060250();
  *uint64_t v5 = v4;
  uint64_t v7 = *(void **)(v6 + 16);
  uint64_t v8 = *v1;
  sub_100010BC4();
  *uint64_t v9 = v8;
  swift_task_dealloc();

  if (v2)
  {
    _convertErrorToNSError(_:)();
    sub_100084A84();
    sub_100084ACC();
  }
  else
  {
    sub_10000BF1C((uint64_t *)&unk_10017E9E0);
    Dictionary._bridgeToObjectiveC()();
    sub_100084AE4();
    sub_100084B48();
  }
  uint64_t v10 = sub_1000EE5B4();
  v11(v10);

  _Block_release(v4);
  sub_10000EB74();
  return v12();
}

uint64_t sub_1000D4DA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return sub_100084120((uint64_t)sub_1000D4DC4);
}

uint64_t sub_1000D4DC4()
{
  sub_10006039C();
  uint64_t v1 = sub_10006D400(v0[2], v0[3], v0[4], v0[5]);
  uint64_t v2 = (uint64_t (*)(uint64_t))v0[1];
  return v2(v1);
}

uint64_t sub_1000D4E70(int a1, int a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  v4[4] = v7;
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;
  v4[5] = v10;
  a4;
  uint64_t v12 = (void *)swift_task_alloc();
  v4[6] = v12;
  *uint64_t v12 = v4;
  v12[1] = sub_1000D4F6C;
  return sub_1000D4DA4(v6, v8, v9, v11);
}

uint64_t sub_1000D4F6C()
{
  sub_100084ED0();
  sub_100013E0C();
  uint64_t v2 = v0;
  sub_100010BAC();
  uint64_t v4 = v3;
  sub_100060250();
  *uint64_t v5 = v4;
  uint64_t v7 = *(void **)(v6 + 40);
  uint64_t v8 = *(void **)(v6 + 16);
  uint64_t v9 = *v1;
  sub_100010BC4();
  *uint64_t v10 = v9;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v2)
  {
    _convertErrorToNSError(_:)();
    sub_100084A84();
    sub_100084ACC();
  }
  else
  {
    sub_10000D9D4(0, &qword_10017E9F0);
    sub_1000EF008();
    sub_100084AE4();
    sub_100084B48();
  }
  uint64_t v11 = sub_1000EE5B4();
  v12(v11);

  _Block_release(v4);
  sub_10000EB74();
  sub_100084D74();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20);
}

uint64_t sub_1000D50D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return sub_100084120((uint64_t)sub_1000D50F8);
}

uint64_t sub_1000D50F8()
{
  sub_10006039C();
  uint64_t v1 = *(void **)(v0 + 48);
  uint64_t v2 = self;
  swift_bridgeObjectRetain();
  id v3 = v1;
  swift_bridgeObjectRetain();
  sub_1000EFA50((uint64_t)[v2 currentConnection]);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_1000EF7EC(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_1000D51E4;
  uint64_t v7 = sub_1000EE488();
  return sub_1000CB548(v7, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_1000D51E4()
{
  sub_10006039C();
  sub_100010BAC();
  uint64_t v3 = v2;
  sub_100060250();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_100010BC4();
  void *v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_100060358();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {

    uint64_t v10 = sub_1000EE6F0();
    return v11(v10);
  }
}

uint64_t sub_1000D52F8()
{
  sub_10000EC58();

  sub_1000EFB28();
  return v1();
}

uint64_t sub_1000D53F0(int a1, uint64_t a2, uint64_t a3, void *aBlock, void *a5)
{
  v5[2] = a5;
  v5[3] = _Block_copy(aBlock);
  sub_10000D9D4(0, &qword_10017D0A0);
  sub_100048188();
  uint64_t v9 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  v5[4] = v9;
  if (a3)
  {
    a3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;
  }
  else
  {
    uint64_t v11 = 0;
  }
  void v5[5] = v11;
  a5;
  uint64_t v12 = (void *)swift_task_alloc();
  v5[6] = v12;
  *uint64_t v12 = v5;
  v12[1] = sub_1000D5524;
  return sub_1000D50D8(v9, a2, a3, v11);
}

uint64_t sub_1000D5524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1000847F4();
  sub_1000700D0();
  sub_1000EE788();
  uint64_t v14 = v13;
  sub_100010BC4();
  *uint64_t v15 = v14;
  uint64_t v16 = *(void **)(v12 + 16);
  *uint64_t v15 = *v11;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  sub_1000EFB04();
  swift_bridgeObjectRelease();
  if (v10)
  {
    _convertErrorToNSError(_:)();
    sub_100084A84();
    sub_1000EF7A0();
  }
  else
  {
    sub_10000BF1C((uint64_t *)&unk_10017E9E0);
    Dictionary._bridgeToObjectiveC()();
    sub_100084AE4();
    sub_1000EF730();
  }
  uint64_t v17 = sub_1000EE5B4();
  v18(v17);

  _Block_release(v14);
  sub_100084394();
  sub_100084744();
  return v20(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10);
}

uint64_t sub_1000D568C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return sub_100084120((uint64_t)sub_1000D56AC);
}

uint64_t sub_1000D56AC()
{
  sub_100013E0C();
  uint64_t v1 = *(void **)(v0 + 48);
  uint64_t v2 = *(void **)(v0 + 16);
  uint64_t v3 = self;
  swift_bridgeObjectRetain();
  id v4 = v1;
  id v5 = v2;
  swift_bridgeObjectRetain();
  sub_1000EFA50((uint64_t)[v3 currentConnection]);
  uint64_t v6 = swift_task_alloc();
  uint64_t v7 = (void *)sub_1000EF7EC(v6);
  *uint64_t v7 = v8;
  v7[1] = sub_1000D51E4;
  sub_1000EE488();
  sub_100084200();
  return sub_1000CBDB4(v9, v10, v11, v12, v13, v14, v15, v16);
}

uint64_t sub_1000D57C0(void *a1, int a2, uint64_t a3, void *aBlock, void *a5)
{
  v5[2] = a1;
  v5[3] = a5;
  v5[4] = _Block_copy(aBlock);
  sub_10000D9D4(0, &qword_10017FE20);
  uint64_t v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  void v5[5] = v9;
  if (a3)
  {
    a3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;
  }
  else
  {
    uint64_t v11 = 0;
  }
  v5[6] = v11;
  id v12 = a1;
  a5;
  uint64_t v13 = (void *)swift_task_alloc();
  v5[7] = v13;
  *uint64_t v13 = v5;
  v13[1] = sub_1000D58FC;
  return sub_1000D568C((uint64_t)v12, v9, a3, v11);
}

uint64_t sub_1000D58FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1000EF7C8();
  sub_1000700D0();
  sub_1000EE788();
  uint64_t v15 = v14;
  sub_100010BC4();
  *uint64_t v16 = v15;
  uint64_t v17 = *(void **)(v13 + 24);
  uint64_t v18 = *(void **)(v13 + 16);
  *uint64_t v16 = *v12;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  sub_1000EFB04();
  swift_bridgeObjectRelease();
  if (v11)
  {
    _convertErrorToNSError(_:)();
    sub_100084A84();
    sub_1000EF7A0();
  }
  else
  {
    sub_10000BF1C((uint64_t *)&unk_10017E9E0);
    Dictionary._bridgeToObjectiveC()();
    sub_100084AE4();
    sub_1000EF730();
  }
  uint64_t v19 = *(void (***)(void, void, void))(v15 + 32);
  v19[2](v19, v11, v10);

  _Block_release(v19);
  sub_100084394();
  sub_1000EF788();
  return v21(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10);
}

uint64_t sub_1000D5AB0(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v3[4] = v6;
  a3;
  uint64_t v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_1000D5B84;
  return sub_1000B4E58(v5, v7);
}

uint64_t sub_1000D5B84()
{
  sub_100084274();
  sub_100013E0C();
  uint64_t v2 = v0;
  sub_100010BAC();
  id v4 = v3;
  sub_100060250();
  *uint64_t v5 = v4;
  uint64_t v7 = *(void **)(v6 + 32);
  uint64_t v8 = *(void **)(v6 + 16);
  uint64_t v9 = *v1;
  sub_100010BC4();
  *uint64_t v10 = v9;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  if (v2)
  {
    _convertErrorToNSError(_:)();
    sub_100084A84();
    sub_100084ACC();
  }
  else
  {
    sub_10000D9D4(0, &qword_10017E9F0);
    sub_1000EF008();
    sub_100084AE4();
    sub_100084B48();
  }
  uint64_t v11 = sub_1000EE5B4();
  v12(v11);

  _Block_release(v4);
  sub_10000EB74();
  sub_100084200();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20);
}

uint64_t sub_1000D5CD4(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_100084120((uint64_t)sub_1000D5CEC);
}

uint64_t sub_1000D5CEC()
{
  sub_10006039C();
  uint64_t v1 = (void *)v0[3];
  uint64_t v2 = self;
  id v3 = v1;
  swift_bridgeObjectRetain();
  v0[4] = [v2 currentConnection];
  id v4 = (void *)swift_task_alloc();
  v0[5] = v4;
  *id v4 = v0;
  v4[1] = sub_1000D5DC0;
  uint64_t v5 = sub_1000EE488();
  return sub_1000CC630(v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000D5DC0()
{
  sub_10006039C();
  sub_100010BAC();
  uint64_t v3 = v2;
  sub_100060250();
  *id v4 = v3;
  uint64_t v5 = *v1;
  sub_100010BC4();
  void *v6 = v5;
  *(void *)(v3 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_100060358();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {

    uint64_t v10 = sub_1000EE6F0();
    return v11(v10);
  }
}

uint64_t sub_1000D5ED4()
{
  sub_10000EC58();

  sub_10000EB74();
  return v1();
}

uint64_t sub_1000D5F50(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  sub_10000D9D4(0, &qword_10017E9D8);
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v3[4] = v5;
  a3;
  uint64_t v6 = (void *)swift_task_alloc();
  v3[5] = v6;
  void *v6 = v3;
  v6[1] = sub_1000D6038;
  return sub_1000D5CD4(v5);
}

uint64_t sub_1000D6038()
{
  sub_100084274();
  sub_100013E0C();
  uint64_t v2 = v0;
  sub_100010BAC();
  id v4 = v3;
  sub_100060250();
  *uint64_t v5 = v4;
  uint64_t v7 = *(void **)(v6 + 32);
  uint64_t v8 = *(void **)(v6 + 16);
  uint64_t v9 = *v1;
  sub_100010BC4();
  *uint64_t v10 = v9;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  if (v2)
  {
    _convertErrorToNSError(_:)();
    sub_100084A84();
    sub_100084ACC();
  }
  else
  {
    sub_10000BF1C((uint64_t *)&unk_10017E9E0);
    Dictionary._bridgeToObjectiveC()();
    sub_100084AE4();
    sub_100084B48();
  }
  uint64_t v11 = sub_1000EE5B4();
  v12(v11);

  _Block_release(v4);
  sub_10000EB74();
  sub_100084200();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20);
}

uint64_t sub_1000D6194(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100084120((uint64_t)sub_1000D61B0);
}

uint64_t sub_1000D61B0()
{
  sub_10006039C();
  uint64_t v2 = *(void **)(v1 + 32);
  self;
  sub_1000EF81C();
  id v3 = v2;
  sub_1000EEEDC((uint64_t)[v0 currentConnection]);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_1000EED44(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_1000B4F44;
  uint64_t v7 = sub_1000EE488();
  return sub_1000CCEA8(v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_1000D629C(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  if (a1)
  {
    a1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v7 = 0;
  }
  v3[4] = v7;
  a3;
  uint64_t v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_1000D6380;
  return sub_1000D6194(a1, v7);
}

uint64_t sub_1000D6380()
{
  sub_100084ED0();
  sub_100013E0C();
  sub_1000EE788();
  uint64_t v4 = v3;
  sub_100010BC4();
  *uint64_t v5 = v4;
  uint64_t v6 = *(void **)(v2 + 16);
  *uint64_t v5 = *v1;
  swift_task_dealloc();

  sub_1000EFB04();
  swift_bridgeObjectRelease();
  if (v0)
  {
    _convertErrorToNSError(_:)();
    sub_100084A84();
    sub_1000EF7A0();
  }
  else
  {
    sub_10000D9D4(0, &qword_10017E9F8);
    Dictionary._bridgeToObjectiveC()();
    sub_100084AE4();
    sub_1000EF730();
  }
  uint64_t v7 = sub_1000EE5B4();
  v8(v7);

  _Block_release(v4);
  sub_100084394();
  sub_100084D74();
  return v10(v9, v10, v11, v12, v13, v14, v15, v16);
}

uint64_t sub_1000D64D8(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100084120((uint64_t)sub_1000D64F4);
}

uint64_t sub_1000D64F4()
{
  sub_10006039C();
  uint64_t v2 = *(void **)(v1 + 32);
  self;
  sub_1000EF81C();
  id v3 = v2;
  sub_1000EEEDC((uint64_t)[v0 currentConnection]);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_1000EED44(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_1000B4F44;
  uint64_t v7 = sub_1000EE488();
  return sub_1000C7B94(v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_1000D65E0(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  if (a1)
  {
    a1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v7 = 0;
  }
  v3[4] = v7;
  a3;
  uint64_t v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_1000D66C4;
  return sub_1000D64D8(a1, v7);
}

uint64_t sub_1000D66C4()
{
  sub_100084ED0();
  sub_100013E0C();
  sub_1000EE788();
  uint64_t v4 = v3;
  sub_100010BC4();
  *uint64_t v5 = v4;
  uint64_t v6 = *(void **)(v2 + 16);
  *uint64_t v5 = *v1;
  swift_task_dealloc();

  sub_1000EFB04();
  swift_bridgeObjectRelease();
  if (v0)
  {
    _convertErrorToNSError(_:)();
    sub_100084A84();
    sub_1000EF7A0();
  }
  else
  {
    Array._bridgeToObjectiveC()();
    sub_100084AE4();
    sub_1000EF730();
  }
  uint64_t v7 = sub_1000EE5B4();
  v8(v7);

  _Block_release(v4);
  sub_100084394();
  sub_100084D74();
  return v10(v9, v10, v11, v12, v13, v14, v15, v16);
}

uint64_t sub_1000D6818(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1000D68C0;
  return sub_1000B5230();
}

uint64_t sub_1000D68C0()
{
  sub_10006039C();
  uint64_t v2 = v0;
  sub_100010BAC();
  uint64_t v4 = v3;
  sub_100060250();
  *uint64_t v5 = v4;
  uint64_t v7 = *(void **)(v6 + 16);
  uint64_t v8 = *v1;
  sub_100010BC4();
  *uint64_t v9 = v8;
  swift_task_dealloc();

  if (v2)
  {
    _convertErrorToNSError(_:)();
    sub_100084A84();
    sub_100084ACC();
  }
  else
  {
    Array._bridgeToObjectiveC()();
    sub_100084AE4();
    sub_100084B48();
  }
  uint64_t v10 = sub_1000EE5B4();
  v11(v10);

  _Block_release(v4);
  sub_10000EB74();
  return v12();
}

uint64_t sub_1000D69E8()
{
  *(void *)(v1 + 16) = v0;
  return sub_100084120((uint64_t)sub_1000D6A00);
}

uint64_t sub_1000D6A00()
{
  sub_10000EC58();
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = self;
  id v3 = v1;
  sub_1000EF2C4((uint64_t)[v2 currentConnection]);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_1000EF0D0(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_1000B5304;
  uint64_t v7 = sub_1000EE488();
  return sub_1000CD7A4(v7, v8, v9, v10, v11);
}

uint64_t sub_1000D6ADC(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1000D6B84;
  return sub_1000D69E8();
}

uint64_t sub_1000D6B84()
{
  sub_10006039C();
  uint64_t v2 = v0;
  sub_100010BAC();
  uint64_t v4 = v3;
  sub_100060250();
  *uint64_t v5 = v4;
  uint64_t v7 = *(void **)(v6 + 16);
  uint64_t v8 = *v1;
  sub_100010BC4();
  *uint64_t v9 = v8;
  swift_task_dealloc();

  if (v2)
  {
    _convertErrorToNSError(_:)();
    sub_100084A84();
    sub_100084ACC();
  }
  else
  {
    sub_10000D9D4(0, &qword_10017E9D0);
    sub_1000EF008();
    sub_100084AE4();
    sub_100084B48();
  }
  uint64_t v10 = sub_1000EE5B4();
  v11(v10);

  _Block_release(v4);
  sub_10000EB74();
  return v12();
}

uint64_t sub_1000D6CB8()
{
  *(void *)(v1 + 16) = v0;
  return sub_100084120((uint64_t)sub_1000D6CD0);
}

uint64_t sub_1000D6CD0()
{
  sub_10000EC58();
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = self;
  id v3 = v1;
  sub_1000EF2C4((uint64_t)[v2 currentConnection]);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_1000EF0D0(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_1000B5304;
  uint64_t v7 = sub_1000EE488();
  return sub_1000CDFF0(v7, v8, v9, v10, v11);
}

uint64_t sub_1000D6DAC(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1000D6E54;
  return sub_1000D6CB8();
}

uint64_t sub_1000D6E54()
{
  sub_10006039C();
  uint64_t v2 = v0;
  sub_100010BAC();
  uint64_t v4 = v3;
  sub_100060250();
  *uint64_t v5 = v4;
  uint64_t v7 = *(void **)(v6 + 16);
  uint64_t v8 = *v1;
  sub_100010BC4();
  *uint64_t v9 = v8;
  swift_task_dealloc();

  if (v2)
  {
    _convertErrorToNSError(_:)();
    sub_100084A84();
    sub_100084ACC();
  }
  else
  {
    sub_10000BF1C(&qword_10017E9A8);
    Dictionary._bridgeToObjectiveC()();
    sub_100084AE4();
    sub_100084B48();
  }
  uint64_t v10 = sub_1000EE5B4();
  v11(v10);

  _Block_release(v4);
  sub_10000EB74();
  return v12();
}

uint64_t sub_1000D6FB4(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v3[4] = v6;
  a3;
  uint64_t v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_1000D7088;
  return sub_1000B5058(v5, v7);
}

uint64_t sub_1000D7088()
{
  sub_100084274();
  sub_100013E0C();
  uint64_t v2 = v0;
  sub_100010BAC();
  uint64_t v4 = v3;
  sub_100060250();
  *uint64_t v5 = v4;
  uint64_t v7 = *(void **)(v6 + 32);
  uint64_t v8 = *(void **)(v6 + 16);
  uint64_t v9 = *v1;
  sub_100010BC4();
  *uint64_t v10 = v9;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  if (v2)
  {
    _convertErrorToNSError(_:)();
    sub_100084A84();
    sub_100084ACC();
  }
  else
  {
    sub_10000D9D4(0, (unint64_t *)&qword_10017E9A0);
    sub_1000EF008();
    sub_100084AE4();
    sub_100084B48();
  }
  uint64_t v11 = sub_1000EE5B4();
  v12(v11);

  _Block_release(v4);
  sub_10000EB74();
  sub_100084200();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20);
}

uint64_t sub_1000D71D8(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100084120((uint64_t)sub_1000D71F4);
}

uint64_t sub_1000D71F4()
{
  sub_10006039C();
  uint64_t v2 = *(void **)(v1 + 32);
  self;
  sub_1000EF81C();
  id v3 = v2;
  sub_1000EEEDC((uint64_t)[v0 currentConnection]);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_1000EED44(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_1000B4F44;
  uint64_t v7 = sub_1000EE488();
  return sub_1000C8490(v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_1000D72E0(int a1, int a2, int a3, void *a4)
{
  uint64_t v6 = sub_1000EFA98(a1, a2, a3, a4);
  uint64_t v7 = (void *)sub_10001B414();
  v7[2] = v4;
  v7[3] = v6;
  v7[4] = v5;
  id v8 = v4;
  id v9 = v5;
  uint64_t v10 = sub_10000EBA4();

  return sub_1000F7D3C(v10, v11);
}

uint64_t sub_1000D7344(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  if (a1)
  {
    a1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v7 = 0;
  }
  v3[4] = v7;
  a3;
  id v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *id v8 = v3;
  v8[1] = sub_1000EE460;
  return sub_1000D71D8(a1, v7);
}

uint64_t sub_1000D7428()
{
  *(void *)(v1 + 16) = v0;
  return sub_100084120((uint64_t)sub_1000D7440);
}

uint64_t sub_1000D7440()
{
  sub_10000EC58();
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = self;
  id v3 = v1;
  sub_1000EF2C4((uint64_t)[v2 currentConnection]);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_1000EF0D0(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_1000B5304;
  uint64_t v7 = sub_1000EE488();
  return sub_1000CE83C(v7, v8, v9, v10, v11);
}

uint64_t sub_1000D751C(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1000D75C4;
  return sub_1000D7428();
}

uint64_t sub_1000D75C4()
{
  sub_10006039C();
  uint64_t v2 = v0;
  sub_100010BAC();
  uint64_t v4 = v3;
  sub_100060250();
  *uint64_t v5 = v4;
  uint64_t v7 = *(void **)(v6 + 16);
  uint64_t v8 = *v1;
  sub_100010BC4();
  *uint64_t v9 = v8;
  swift_task_dealloc();

  if (v2)
  {
    _convertErrorToNSError(_:)();
    sub_100084A84();
    sub_100084ACC();
  }
  else
  {
    sub_10000BF1C(&qword_10017E9B8);
    Dictionary._bridgeToObjectiveC()();
    sub_100084AE4();
    sub_100084B48();
  }
  uint64_t v10 = sub_1000EE5B4();
  v11(v10);

  _Block_release(v4);
  sub_10000EB74();
  return v12();
}

uint64_t sub_1000D7724(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v3[4] = v6;
  a3;
  uint64_t v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_1000D77F8;
  return sub_1000B5144(v5, v7);
}

uint64_t sub_1000D77F8()
{
  sub_100084274();
  sub_100013E0C();
  uint64_t v2 = v0;
  sub_100010BAC();
  uint64_t v4 = v3;
  sub_100060250();
  *uint64_t v5 = v4;
  uint64_t v7 = *(void **)(v6 + 32);
  uint64_t v8 = *(void **)(v6 + 16);
  uint64_t v9 = *v1;
  sub_100010BC4();
  *uint64_t v10 = v9;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  if (v2)
  {
    _convertErrorToNSError(_:)();
    sub_100084A84();
    sub_100084ACC();
  }
  else
  {
    sub_10000D9D4(0, (unint64_t *)&qword_10017E9B0);
    sub_1000EF008();
    sub_100084AE4();
    sub_100084B48();
  }
  uint64_t v11 = sub_1000EE5B4();
  v12(v11);

  _Block_release(v4);
  sub_10000EB74();
  sub_100084200();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20);
}

uint64_t sub_1000D7948(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100084120((uint64_t)sub_1000D7964);
}

uint64_t sub_1000D7964()
{
  sub_10006039C();
  uint64_t v1 = *(void **)(v0 + 32);
  uint64_t v2 = self;
  id v3 = v1;
  swift_bridgeObjectRetain();
  sub_1000EEEDC((uint64_t)[v2 currentConnection]);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_1000EED44(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_1000D7A34;
  uint64_t v7 = sub_1000EE488();
  return sub_1000CF088(v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_1000D7A34()
{
  sub_10006039C();
  sub_100010BAC();
  uint64_t v3 = v2;
  sub_100060250();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_100010BC4();
  void *v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_100060358();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {

    uint64_t v10 = sub_1000EE6F0();
    return v11(v10);
  }
}

uint64_t sub_1000D7B48()
{
  sub_10000EC58();

  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000D7BC8(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v3[4] = v6;
  a3;
  uint64_t v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_1000D7C9C;
  return sub_1000D7948(v5, v7);
}

uint64_t sub_1000D7C9C()
{
  sub_100084274();
  sub_100013E0C();
  uint64_t v2 = v0;
  sub_100010BAC();
  uint64_t v4 = v3;
  sub_100060250();
  *uint64_t v5 = v4;
  uint64_t v7 = *(void **)(v6 + 32);
  uint64_t v8 = *(void **)(v6 + 16);
  uint64_t v9 = *v1;
  sub_100010BC4();
  *uint64_t v10 = v9;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  if (v2)
  {
    _convertErrorToNSError(_:)();
    sub_100084A84();
    sub_100084ACC();
  }
  else
  {
    sub_10000D9D4(0, (unint64_t *)&qword_100180CB0);
    sub_1000EF008();
    sub_100084AE4();
    sub_100084B48();
  }
  uint64_t v11 = sub_1000EE5B4();
  v12(v11);

  _Block_release(v4);
  sub_10000EB74();
  sub_100084200();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20);
}

uint64_t sub_1000D7DEC()
{
  *(void *)(v1 + 16) = v0;
  return sub_100084120((uint64_t)sub_1000D7E04);
}

uint64_t sub_1000D7E04()
{
  sub_10000EC58();
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = self;
  id v3 = v1;
  sub_1000EF2C4((uint64_t)[v2 currentConnection]);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_1000EF0D0(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_1000B5304;
  uint64_t v7 = sub_1000EE488();
  return sub_1000CF8F0(v7, v8, v9, v10, v11);
}

uint64_t sub_1000D7EE0(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1000D7F88;
  return sub_1000D7DEC();
}

uint64_t sub_1000D7F88()
{
  sub_10006039C();
  uint64_t v2 = v0;
  sub_100010BAC();
  uint64_t v4 = v3;
  sub_100060250();
  *uint64_t v5 = v4;
  uint64_t v7 = *(void **)(v6 + 16);
  uint64_t v8 = *v1;
  sub_100010BC4();
  *uint64_t v9 = v8;
  swift_task_dealloc();

  if (v2)
  {
    _convertErrorToNSError(_:)();
    sub_100084A84();
    sub_100084ACC();
  }
  else
  {
    sub_10000BF1C(&qword_10017FC50);
    Dictionary._bridgeToObjectiveC()();
    sub_100084AE4();
    sub_100084B48();
  }
  uint64_t v10 = sub_1000EE5B4();
  v11(v10);

  _Block_release(v4);
  sub_10000EB74();
  return v12();
}

uint64_t sub_1000D80C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return sub_100084120((uint64_t)sub_1000D80E8);
}

uint64_t sub_1000D80E8()
{
  sub_10006039C();
  uint64_t v1 = *(void **)(v0 + 48);
  uint64_t v2 = self;
  swift_bridgeObjectRetain();
  id v3 = v1;
  swift_bridgeObjectRetain();
  sub_1000EFA50((uint64_t)[v2 currentConnection]);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_1000EF7EC(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_1000D81D4;
  uint64_t v7 = sub_1000EE488();
  return sub_1000D013C(v7, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_1000D81D4()
{
  sub_10006039C();
  sub_100010BAC();
  uint64_t v3 = v2;
  sub_100060250();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_100010BC4();
  void *v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_100060358();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {

    uint64_t v10 = sub_1000EE6F0();
    return v11(v10);
  }
}

uint64_t sub_1000D8380(int a1, uint64_t a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;
  v4[4] = v8;
  if (a2)
  {
    a2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;
  }
  else
  {
    uint64_t v11 = 0;
  }
  v4[5] = v11;
  a4;
  uint64_t v12 = (void *)swift_task_alloc();
  v4[6] = v12;
  *uint64_t v12 = v4;
  v12[1] = sub_1000D848C;
  return sub_1000D80C8(v7, v9, a2, v11);
}

uint64_t sub_1000D848C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1000847F4();
  sub_1000700D0();
  sub_1000EE788();
  uint64_t v14 = v13;
  sub_100010BC4();
  *uint64_t v15 = v14;
  uint64_t v16 = *(void **)(v12 + 16);
  *uint64_t v15 = *v11;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  sub_1000EFB04();
  swift_bridgeObjectRelease();
  if (v10)
  {
    _convertErrorToNSError(_:)();
    sub_100084A84();
    sub_1000EF7A0();
  }
  else
  {
    sub_10000D9D4(0, (unint64_t *)&qword_10017E9C0);
    sub_1000EF008();
    sub_100084AE4();
    sub_1000EF730();
  }
  uint64_t v17 = sub_1000EE5B4();
  v18(v17);

  _Block_release(v14);
  sub_100084394();
  sub_100084744();
  return v20(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10);
}

uint64_t sub_1000D85E8(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100084120((uint64_t)sub_1000D8604);
}

uint64_t sub_1000D8604()
{
  sub_10006039C();
  uint64_t v1 = *(void **)(v0 + 32);
  uint64_t v2 = self;
  id v3 = v1;
  swift_bridgeObjectRetain();
  sub_1000EEEDC((uint64_t)[v2 currentConnection]);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_1000EED44(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_1000B4F44;
  uint64_t v7 = sub_1000EE488();
  return sub_1000D09A8(v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_1000D86F4(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v3[4] = v6;
  a3;
  uint64_t v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_1000D87C8;
  return sub_1000D85E8(v5, v7);
}

uint64_t sub_1000D87C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1000847F4();
  sub_1000700D0();
  uint64_t v13 = v10;
  sub_100084228();
  uint64_t v15 = v14;
  sub_100010BC4();
  *uint64_t v16 = v15;
  uint64_t v17 = *(void **)(v12 + 16);
  *uint64_t v16 = *v11;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  uint64_t v18 = *(void *)(v12 + 24);
  if (v13)
  {
    uint64_t v19 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t))(v18 + 16))(v18);
  }
  else
  {
    uint64_t v20 = sub_1000EF10C();
    v21(v20);
  }
  _Block_release(*(const void **)(v15 + 24));
  sub_1000EF9EC();
  sub_100084744();
  return v23(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10);
}

uint64_t sub_1000D892C()
{
  sub_10000EC58();
  v1[69] = v0;
  v1[68] = v2;
  v1[67] = v3;
  v1[66] = v4;
  v1[65] = v5;
  v1[63] = v6;
  v1[64] = v7;
  uint64_t v8 = type metadata accessor for Logger();
  v1[70] = v8;
  sub_1000282DC(v8);
  v1[71] = v9;
  v1[72] = swift_task_alloc();
  v1[73] = swift_task_alloc();
  sub_100060358();
  return _swift_task_switch(v10, v11, v12);
}

#error "1000D8E24: call analysis failed (funcsize=373)"

uint64_t sub_1000D9018()
{
  sub_10000EC58();
  sub_100060250();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  uint64_t v4 = *(void *)(v3 + 48);
  *(void *)(v1 + 656) = v4;
  if (v4) {
    swift_bridgeObjectRelease();
  }
  sub_100060358();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1000D9150(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_log_t log, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  sub_1000EE518();
  a27 = v30;
  a28 = v31;
  sub_1000EE77C();
  a26 = v28;
  uint64_t v32 = *(void *)(v28 + 544);
  id v33 = *(id *)(v28 + 432);

  if (v32)
  {
    uint64_t v34 = *(void *)(v28 + 608);
    unint64_t v35 = *(void *)(v28 + 544);
    uint64_t v36 = *(void *)(v28 + 536);
    swift_bridgeObjectRetain();
    uint64_t v37 = sub_1000EF2B8();
    sub_1000682AC(v37, v38, v36, v35, v39);
    if (v34)
    {
      uint64_t v40 = *(void **)(v28 + 616);
      uint64_t v41 = *(void **)(v28 + 600);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_1000EF324();
      sub_1000EE46C();
      return v43(v42, v43, v44, v45, v46, v47, v48, v49, a9, a10, log, a12, a13, a14, a15, a16, a17, a18, a19, a20);
    }
    swift_bridgeObjectRelease();
    uint64_t v59 = sub_1000EF10C();
    sub_100083620(v59, v60, v61);
    if (*(void *)(v28 + 192))
    {
      memcpy((void *)(v28 + 80), (const void *)(v28 + 184), 0x68uLL);
      swift_bridgeObjectRelease();
      id v62 = sub_1000FB5C0(v33, v28 + 80);
      sub_1000EB6B0((void *)(v28 + 288), (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000EB618);
      id v63 = v62;
      uint64_t v64 = (void *)sub_1000EF590();
      sub_1000EB6B0(v64, v65);
      uint64_t v66 = Logger.logObject.getter();
      os_log_type_t v67 = static os_log_type_t.default.getter();
      int v68 = v67;
      BOOL v69 = os_log_type_enabled(v66, v67);
      os_log_t v70 = *(void **)(v28 + 616);
      uint64_t v71 = *(void **)(v28 + 600);
      if (v69)
      {
        a9 = v28 + 488;
        a14 = *(void **)(v28 + 600);
        uint64_t v72 = sub_1000EE71C();
        a13 = sub_1000EE704();
        a16 = a13;
        *(_DWORD *)uint64_t v72 = 136315394;
        log = v66;
        id v73 = [v63 description];
        a12 = v70;
        uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        HIDWORD(a10) = v68;
        unint64_t v76 = v75;

        *(void *)(v28 + 480) = sub_100013090(v74, v76, &a16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        *(_WORD *)(v72 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v77 = sub_1000EF2B8();
        *(void *)(v28 + 488) = sub_100013090(v77, v78, v79);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1000EB6B0((void *)(v28 + 288), (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000EB70C);
        sub_1000F006C();
        _os_log_impl((void *)&_mh_execute_header, v66, BYTE4(a10), "Found %s for type %s", (uint8_t *)v72, 0x16u);
        swift_arrayDestroy();
        sub_10000EB10();
        sub_10000EB10();

        sub_1000F006C();
      }
      else
      {
        sub_1000EB6B0((void *)(v28 + 288), (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000EB70C);

        sub_1000F006C();
        sub_1000F006C();
      }
      goto LABEL_13;
    }
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    unint64_t v51 = Logger.logObject.getter();
    os_log_type_t v90 = static os_log_type_t.error.getter();
    if (sub_1000845C4(v90))
    {
      log = *(os_log_t *)(v28 + 536);
      unint64_t v91 = *(void *)(v28 + 512);
      a13 = *(void *)(v28 + 504);
      uint64_t v92 = sub_1000EE71C();
      a14 = (void *)sub_1000EE704();
      a16 = (uint64_t)a14;
      *(_DWORD *)uint64_t v92 = 136315394;
      a12 = (void *)(v28 + 480);
      swift_bridgeObjectRetain();
      *(void *)(v28 + 464) = sub_100013090((uint64_t)log, v35, &a16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100035DC0();
      *(_WORD *)(v92 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v28 + 472) = sub_100013090(a13, v91, &a16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_1000EEF6C();
      _os_log_impl((void *)&_mh_execute_header, v51, (os_log_type_t)(v28 + 32), "Did not find a matching span record for %s for %s", (uint8_t *)v92, 0x16u);
      swift_arrayDestroy();
      sub_10000EB10();
      sub_10000EB10();
    }
    else
    {
      sub_1000EEEE8();
      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    id v33 = v33;
    unint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.default.getter();
    if (sub_1000845C4(v52))
    {
      a13 = v28 + 456;
      a14 = (void *)(v28 + 464);
      uint64_t v53 = (_DWORD *)sub_1000536D0();
      a16 = sub_100060438();
      *uint64_t v53 = 136315138;
      a12 = v53 + 1;
      id v54 = [v33 action];
      id v55 = [v54 description];

      uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v58 = v57;

      *(void *)(v28 + 456) = sub_100013090(v56, v58, &a16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      sub_1000EF34C((void *)&_mh_execute_header, v51, v29, "No parameter identifier given, returning action %s");
      sub_100084978();
      sub_10000EB10();
      sub_10000EB10();
    }
    else
    {
    }
  }

  id v80 = *(void **)(v28 + 616);
  uint64_t v81 = *(void **)(v28 + 600);
  [v33 action];

LABEL_13:
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000EFB68();
  sub_1000EE46C();
  return v84(v82, v83, v84, v85, v86, v87, v88, v89, a9, a10, log, a12, a13, a14, a15, a16, a17, a18, a19, a20);
}

uint64_t sub_1000D9804()
{
  sub_100013E0C();
  uint64_t v1 = (void *)v0[81];
  uint64_t v2 = (void *)v0[77];
  uint64_t v3 = (void *)v0[75];
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EB74();
  return v4();
}

uint64_t sub_1000D98C8(uint64_t a1, void *a2, void *a3)
{
  return sub_1000DA504(a1, a2, a3, (uint64_t (*)(uint64_t, id))sub_1000F7C88, (uint64_t (*)(uint64_t, id))sub_1000F7CF0);
}

uint64_t sub_1000D9914()
{
  sub_1000288B4();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = _Block_copy(v8);
  sub_1000EF304();
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = v5;
  v10[3] = v3;
  v10[4] = v1;
  v10[5] = v9;
  v10[6] = v7;
  id v11 = v5;
  id v12 = v3;
  id v13 = v1;
  id v14 = v7;
  sub_10000EBA4();
  sub_10000EB44();
  return sub_1000F7D3C(v15, v16);
}

uint64_t sub_1000D99A0(int a1, int a2, uint64_t a3, void *aBlock, void *a5)
{
  v5[2] = a5;
  v5[3] = _Block_copy(aBlock);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5[4] = v8;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  void v5[5] = v9;
  if (a3)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;
  }
  else
  {
    uint64_t v11 = 0;
  }
  v5[6] = v11;
  a5;
  id v12 = (void *)swift_task_alloc();
  v5[7] = v12;
  *id v12 = v5;
  v12[1] = sub_1000D9AD4;
  return sub_1000D892C();
}

uint64_t sub_1000D9AD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1000847F4();
  sub_1000700D0();
  uint64_t v13 = v10;
  uint64_t v15 = v14;
  sub_100084228();
  uint64_t v16 = *(void **)(v12 + 16);
  uint64_t v17 = *v11;
  sub_100010BC4();
  *uint64_t v18 = v17;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void (***)(void, void, void))(v12 + 24);
  swift_bridgeObjectRelease();
  if (v13)
  {
    uint64_t v20 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    ((void (**)(void, void, void *))v19)[2](v19, 0, v20);

    _Block_release(v19);
  }
  else
  {
    ((void (**)(void, void *, void))v19)[2](v19, v15, 0);
    _Block_release(v19);
  }
  sub_100084744();
  return v22(v21, v22, v23, v24, v25, v26, v27, v28, a9, a10);
}

uint64_t sub_1000D9C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return sub_100084120((uint64_t)sub_1000D9CAC);
}

uint64_t sub_1000D9CAC()
{
  sub_10006039C();
  uint64_t v2 = v1[5];
  uint64_t v3 = (void *)v1[6];
  self;
  sub_1000EF030();
  id v4 = v3;
  swift_bridgeObjectRetain();
  sub_1000EFA50((uint64_t)[v0 currentConnection]);
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = (void *)sub_1000EF7EC(v5);
  void *v6 = v7;
  v6[1] = sub_1000D81D4;
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[3];
  uint64_t v10 = v1[4];
  uint64_t v11 = v1[2];
  return sub_1000D149C(v2, 0x7972747369676552, 0xEE00726F72726520, v8, v11, v9, v8, v10);
}

uint64_t sub_1000D9DB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[22] = a5;
  v6[23] = a6;
  v6[20] = a3;
  v6[21] = a4;
  v6[18] = a1;
  v6[19] = a2;
  uint64_t v7 = type metadata accessor for Logger();
  v6[24] = v7;
  v6[25] = *(void *)(v7 - 8);
  v6[26] = swift_task_alloc();
  return _swift_task_switch(sub_1000D9EA8, 0, 0);
}

uint64_t sub_1000D9EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26)
{
  sub_100084668();
  a25 = v27;
  a26 = v28;
  sub_100084D3C();
  a24 = v26;
  os_log_type_t v29 = self;
  sub_10000EBA4();
  NSString v30 = String._bridgeToObjectiveC()();
  id v31 = [v29 policyWithBundleIdentifier:v30];

  v26[15] = 0;
  id v32 = [v31 connectionWithError:v26 + 15];
  v26[27] = v32;

  id v33 = (void *)v26[15];
  if (v32)
  {
    id v34 = v33;
    NSString v35 = String._bridgeToObjectiveC()();
    v26[28] = v35;
    v26[2] = v26;
    v26[7] = v26 + 17;
    v26[3] = sub_1000DA2A4;
    uint64_t v36 = swift_continuation_init();
    v26[10] = _NSConcreteStackBlock;
    v26[11] = 0x40000000;
    v26[12] = sub_1000D98C8;
    v26[13] = &unk_1001724B0;
    v26[14] = v36;
    [v32 fetchActionForAutoShortcutPhrase:v35 completionHandler:v26 + 10];
    sub_100084164();
    return _swift_continuation_await(v37);
  }
  else
  {
    uint64_t v39 = (void *)v26[21];
    id v40 = v33;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    uint64_t v41 = off_10017C4C0;
    id v42 = v39;
    if (v41 != (void *)-1) {
      id v42 = (id)swift_once();
    }
    uint64_t v43 = v26[25];
    uint64_t v44 = (void *)v26[21];
    uint64_t v45 = sub_1000EE94C((uint64_t)v42, (uint64_t)qword_100181FD0);
    v46(v45);

    sub_100084840();
    uint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    BOOL v49 = sub_100084560(v48);
    uint64_t v50 = v26[25];
    uint64_t v51 = v26[24];
    unint64_t v52 = v26[20];
    if (v49)
    {
      a10 = v26 + 16;
      uint64_t v53 = v26[19];
      a12 = v26[24];
      a11 = v26[26];
      id v54 = (_DWORD *)sub_1000536D0();
      a14 = sub_100060438();
      *id v54 = 136315138;
      swift_bridgeObjectRetain();
      unsigned char v26[16] = sub_100013090(v53, v52, &a14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100084DA0();
      sub_1000EF34C((void *)&_mh_execute_header, v47, (os_log_type_t)v43, "Could not open connection to app: %s");
      swift_arrayDestroy();
      sub_10000EB10();
      sub_10000EB10();

      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(a11, v51);
    }
    else
    {
      sub_10005079C();

      uint64_t v55 = sub_1000EEC10();
      v57(v55, v56);
    }
    uint64_t v59 = v26[19];
    uint64_t v58 = v26[20];
    sub_1000EFFEC();
    sub_1000E63EC(&qword_10017F838, (void (*)(uint64_t))type metadata accessor for RegistryError);
    uint64_t v60 = sub_1000EE630();
    sub_1000F0060(v60, v61);
    *id v62 = v59;
    v62[1] = v58;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    swift_willThrow();
    swift_task_dealloc();
    sub_100084164();
    return v64(v63, v64, v65, v66, v67, v68, v69, v70, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  }
}

uint64_t sub_1000DA2A4()
{
  sub_10000EC58();
  sub_100010BAC();
  sub_100060250();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 232) = *(void *)(v3 + 48);
  sub_100060358();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_1000DA3B0()
{
  sub_10006039C();
  uint64_t v1 = *(void **)(v0 + 224);
  uint64_t v2 = *(void **)(v0 + 144);

  *uint64_t v2 = *(void *)(v0 + 136);
  swift_task_dealloc();
  sub_10000EB74();
  return v3();
}

uint64_t sub_1000DA45C()
{
  sub_100013E0C();
  uint64_t v1 = (void *)v0[28];
  uint64_t v2 = (void *)v0[27];
  swift_willThrow();

  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1000DA504(uint64_t result, void *a2, void *a3, uint64_t (*a4)(uint64_t, id), uint64_t (*a5)(uint64_t, id))
{
  uint64_t v5 = *(void *)(result + 32);
  if (a3)
  {
    id v6 = a3;
    uint64_t v7 = v5;
    uint64_t v8 = a4;
    return v8(v7, v6);
  }
  if (a2)
  {
    id v6 = a2;
    uint64_t v7 = v5;
    uint64_t v8 = a5;
    return v8(v7, v6);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000DA5B8(int a1, int a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  v4[4] = v7;
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;
  v4[5] = v10;
  a4;
  uint64_t v12 = (void *)swift_task_alloc();
  v4[6] = v12;
  *uint64_t v12 = v4;
  v12[1] = sub_1000DA6B4;
  return sub_1000D9C8C(v6, v8, v9, v11);
}

uint64_t sub_1000DA6B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1000847F4();
  sub_1000700D0();
  uint64_t v13 = v10;
  uint64_t v15 = v14;
  sub_10008412C();
  uint64_t v16 = *(void **)(v11 + 16);
  uint64_t v17 = *v12;
  sub_100010BC4();
  *uint64_t v18 = v17;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100084824();
  uint64_t v20 = *(const void **)(v19 + 24);
  if (v13)
  {
    uint64_t v21 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    uint64_t v22 = sub_100084380();
    v23(v22);

    _Block_release(v20);
  }
  else
  {
    uint64_t v24 = sub_100028714();
    v25(v24);
    _Block_release(v20);
  }
  sub_100084394();
  sub_100084744();
  return v27(v26, v27, v28, v29, v30, v31, v32, v33, a9, a10);
}

uint64_t sub_1000DA838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  uint64_t v6[2] = a1;
  v6[3] = a2;
  return sub_100084120((uint64_t)sub_1000DA858);
}

uint64_t sub_1000DA858()
{
  sub_100084274();
  sub_100013E0C();
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 64) = v5;
  long long v6 = *(_OWORD *)(v0 + 40);
  *(void *)(v5 + 16) = v1;
  *(void *)(v5 + 24) = v4;
  *(void *)(v5 + 32) = v3;
  *(void *)(v5 + 40) = v2;
  *(_OWORD *)(v5 + 48) = v6;
  *(void *)(v0 + 72) = [self currentConnection];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1000DA954;
  sub_1000EEEAC();
  sub_100084200();
  return sub_1000D1CC4(v8, v9, v10, v11, v12);
}

uint64_t sub_1000DA954()
{
  sub_10006039C();
  sub_100010BAC();
  uint64_t v3 = v2;
  sub_100060250();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_100010BC4();
  void *v6 = v5;
  *(void *)(v3 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_100060358();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {

    swift_task_dealloc();
    uint64_t v10 = sub_100084F30();
    return v11(v10);
  }
}

uint64_t sub_1000DAA6C()
{
  sub_10000EC58();

  swift_task_dealloc();
  sub_10000EB74();
  return v1();
}

uint64_t sub_1000DAAD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[3] = a2;
  v7[4] = a7;
  v7[2] = a1;
  sub_10000BF1C((uint64_t *)&unk_10017FAE0);
  v7[5] = swift_task_alloc();
  v7[6] = type metadata accessor for LNAppShortcutParameterRecord();
  v7[7] = swift_task_alloc();
  uint64_t v12 = (void *)swift_task_alloc();
  v7[8] = v12;
  *uint64_t v12 = v7;
  v12[1] = sub_1000DABFC;
  return sub_1000D9C8C(a3, a4, a5, a6);
}

uint64_t sub_1000DABFC()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v3 = v2;
  sub_100060250();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 72) = v5;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EB74();
    return v6();
  }
  else
  {
    sub_100060358();
    return _swift_task_switch(v8, v9, v10);
  }
}

uint64_t sub_1000DAD10()
{
  sub_100084AD8();
  uint64_t v1 = *(void *)(v0 + 80);
  id v2 = [*(id *)(v0 + 72) parameters];
  sub_10000D9D4(0, (unint64_t *)&unk_10017FAC0);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v26 = v3;
  sub_1000681B4();
  if (v1)
  {
    uint64_t v4 = *(void **)(v0 + 72);
    swift_bridgeObjectRelease();

LABEL_6:
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)(v0 + 40);
  sub_1000EEFC8(v5, 1, *(void *)(v0 + 48));
  if (v6)
  {
    uint64_t v7 = *(void **)(v0 + 72);
    uint64_t v8 = *(void *)(v0 + 32);
    swift_bridgeObjectRelease();
    sub_1000347E8(v5, (uint64_t *)&unk_10017FAE0);
    type metadata accessor for RegistryError(0);
    sub_1000E63EC(&qword_10017F838, (void (*)(uint64_t))type metadata accessor for RegistryError);
    swift_allocError();
    uint64_t v10 = v9;
    type metadata accessor for UUID();
    sub_1000283FC();
    (*(void (**)(uint64_t, uint64_t))(v11 + 16))(v10, v8);
    sub_100028714();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    goto LABEL_6;
  }
  uint64_t v14 = *(void *)(v0 + 56);
  sub_1000EFAD4();
  sub_1000EA1A4();
  uint64_t v15 = swift_task_alloc();
  *(void *)(v15 + 16) = v14;
  uint64_t v16 = sub_1000E8060((uint64_t (*)(void))sub_1000EB4C8, v15);
  if (v26 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v17 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v17 < v16)
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v19 = *(void *)(v0 + 48);
  uint64_t v18 = *(void *)(v0 + 56);
  sub_1000EEC10();
  sub_1000E66E0();
  swift_task_dealloc();
  id v20 = *(id *)(v18 + *(int *)(v19 + 36));
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
LABEL_17:
  }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  uint64_t v21 = *(void **)(v0 + 72);
  uint64_t v22 = *(void *)(v0 + 56);
  uint64_t v23 = *(void **)(v0 + 16);
  sub_1000EF9E0();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v25 = [v21 actionWithParameters:isa];

  sub_1000E88E0(v22, (void (*)(void))type metadata accessor for LNAppShortcutParameterRecord);
  *uint64_t v23 = v25;
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100070028();
LABEL_7:
  return v12();
}

uint64_t sub_1000DB14C(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, void *a5)
{
  v5[2] = a5;
  uint64_t v8 = type metadata accessor for UUID();
  v5[3] = v8;
  v5[4] = *(void *)(v8 - 8);
  uint64_t v9 = swift_task_alloc();
  void v5[5] = v9;
  v5[6] = _Block_copy(a4);
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;
  v5[7] = v11;
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;
  v5[8] = v14;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  a5;
  uint64_t v16 = (void *)swift_task_alloc();
  v5[9] = v16;
  *uint64_t v16 = v5;
  v16[1] = sub_1000DB2C8;
  return sub_1000DA838(v10, v12, v13, v15, v9);
}

uint64_t sub_1000DB2C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1000EF7C8();
  sub_1000700D0();
  sub_1000EEDF4();
  uint64_t v15 = v14;
  sub_100010BC4();
  *uint64_t v16 = v15;
  *uint64_t v16 = *v12;
  swift_task_dealloc();
  uint64_t v17 = (const void *)v13[6];
  uint64_t v18 = (void *)v13[2];
  (*(void (**)(void, void))(v13[4] + 8))(v13[5], v13[3]);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v11)
  {
    uint64_t v19 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    uint64_t v20 = sub_1000EF6A0();
    v21(v20);

    _Block_release(v17);
  }
  else
  {
    uint64_t v22 = sub_1000EF688();
    v23(v22);
    _Block_release(v17);
  }
  swift_task_dealloc();
  sub_1000EF9EC();
  sub_1000EF788();
  return v25(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

uint64_t sub_1000DB488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[8] = a7;
  v8[9] = v7;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  v8[3] = a2;
  return sub_100084120((uint64_t)sub_1000DB4AC);
}

uint64_t sub_1000DB4AC()
{
  sub_100084AD8();
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 56);
  long long v15 = *(_OWORD *)(v0 + 16);
  long long v16 = *(_OWORD *)(v0 + 32);
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 80) = v5;
  *(void *)(v5 + 16) = v2;
  *(_OWORD *)(v5 + 24) = v15;
  *(void *)(v5 + 40) = v4;
  *(void *)(v5 + 48) = v3;
  *(_OWORD *)(v5 + 56) = v16;
  *(void *)(v5 + 72) = v1;
  *(void *)(v0 + 88) = [self currentConnection];
  uint64_t v6 = swift_task_alloc();
  uint64_t v7 = (void *)sub_1000EFE78(v6);
  *uint64_t v7 = v8;
  v7[1] = sub_1000DB5C0;
  uint64_t v9 = sub_1000EEEAC();
  return sub_1000D1CC4(v9, v10, v11, v12, v13);
}

uint64_t sub_1000DB5C0()
{
  sub_10006039C();
  sub_100010BAC();
  uint64_t v3 = v2;
  sub_100060250();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_100010BC4();
  void *v6 = v5;
  *(void *)(v3 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_100060358();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {

    swift_task_dealloc();
    uint64_t v10 = sub_100084F30();
    return v11(v10);
  }
}

uint64_t sub_1000DB6D8()
{
  sub_10000EC58();

  swift_task_dealloc();
  sub_1000EFB58();
  return v1();
}

uint64_t sub_1000DB738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[25] = a8;
  v8[26] = v13;
  v8[23] = a6;
  v8[24] = a7;
  v8[21] = a4;
  v8[22] = a5;
  v8[19] = a2;
  v8[20] = a3;
  v8[18] = a1;
  sub_10000BF1C((uint64_t *)&unk_10017FAE0);
  v8[27] = swift_task_alloc();
  v8[28] = type metadata accessor for LNAppShortcutParameterRecord();
  v8[29] = swift_task_alloc();
  sub_10000BF1C(&qword_10017C788);
  v8[30] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UUID();
  v8[31] = v9;
  v8[32] = *(void *)(v9 - 8);
  v8[33] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Logger();
  v8[34] = v10;
  v8[35] = *(void *)(v10 - 8);
  v8[36] = swift_task_alloc();
  return _swift_task_switch(sub_1000DB928, 0, 0);
}

uint64_t sub_1000DB928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26)
{
  sub_100084668();
  a25 = v27;
  a26 = v28;
  sub_100084D3C();
  a24 = v26;
  uint64_t v29 = v26[22];
  uint64_t v30 = v26[23];
  uint64_t v31 = v26[20];
  uint64_t v32 = v26[21];
  v26[37] = *(void *)(v26[19] + OBJC_IVAR____TtC10LinkDaemon8Registry_store);
  uint64_t v33 = sub_100063E84(v31, v32, v29, v30);
  v26[38] = v33;
  v26[39] = 0;
  uint64_t v43 = (void *)v33;
  id v44 = [self policyWithActionMetadata:v33];
  v26[15] = 0;
  id v45 = [v44 connectionWithError:v26 + 15];
  v26[40] = v45;

  uint64_t v46 = (void *)v26[15];
  if (v45)
  {
    id v47 = v46;
    NSString v48 = String._bridgeToObjectiveC()();
    v26[41] = v48;
    v26[2] = v26;
    v26[7] = v26 + 17;
    v26[3] = sub_1000DBD60;
    uint64_t v49 = swift_continuation_init();
    v26[10] = _NSConcreteStackBlock;
    v26[11] = 0x40000000;
    v26[12] = sub_1000D98C8;
    v26[13] = &unk_100172470;
    v26[14] = v49;
    [v45 fetchActionForAutoShortcutPhrase:v48 completionHandler:v26 + 10];
    sub_100084164();
    return _swift_continuation_await(v50);
  }
  else
  {
    unint64_t v52 = (void *)v26[19];
    id v53 = v46;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    id v54 = off_10017C4C0;
    id v55 = v52;
    if (v54 != (void *)-1) {
      id v55 = (id)swift_once();
    }
    uint64_t v56 = (void *)v26[19];
    uint64_t v57 = sub_1000EE94C((uint64_t)v55, (uint64_t)qword_100181FD0);
    v58(v57);

    sub_100084840();
    uint64_t v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.error.getter();
    BOOL v61 = sub_100084560(v60);
    uint64_t v62 = v26[36];
    uint64_t v63 = v26[34];
    unint64_t v64 = v26[21];
    if (v61)
    {
      a9 = v26[20];
      a10 = v26 + 16;
      sub_1000536D0();
      a12 = v63;
      a11 = v62;
      a14 = sub_100060438();
      sub_1000EFF90(4.8149e-34);
      unsigned char v26[16] = sub_100013090(a9, v64, &a14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100035DC0();
      sub_1000EF250((void *)&_mh_execute_header, v59, v65, "Could not open connection to app: %s");
      swift_arrayDestroy();
      sub_10000EB10();
      sub_10000EB10();
    }
    else
    {
      sub_1000EEEE8();

      sub_1000EEC10();
    }
    sub_1000847DC();
    v66();
    uint64_t v68 = v26[20];
    uint64_t v67 = v26[21];
    type metadata accessor for RegistryError(0);
    sub_1000E63EC(&qword_10017F838, (void (*)(uint64_t))type metadata accessor for RegistryError);
    uint64_t v69 = swift_allocError();
    sub_1000F0060(v69, v70);
    *uint64_t v71 = v68;
    v71[1] = v67;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    swift_willThrow();

    sub_1000EFE38();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100084164();
    return v35(v34, v35, v36, v37, v38, v39, v40, v41, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  }
}

uint64_t sub_1000DBD60()
{
  sub_10000EC58();
  sub_100010BAC();
  sub_100060250();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 336) = *(void *)(v3 + 48);
  sub_100060358();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_1000DBE6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_1000EF09C();
  sub_1000EF3B0();
  uint64_t v17 = *(void *)(v16 + 248);
  uint64_t v18 = *(void **)(v16 + 136);

  uint64_t v19 = sub_1000EF10C();
  sub_1000A3B4C(v19, v20, v21);
  uint64_t v22 = sub_1000EF0E8();
  sub_1000EEFC8(v22, v23, v17);
  if (v24)
  {
    id v25 = *(void **)(v16 + 304);
    uint64_t v26 = *(void *)(v16 + 240);
    uint64_t v27 = *(void **)(v16 + 144);

    sub_1000347E8(v26, &qword_10017C788);
    *uint64_t v27 = v18;
LABEL_4:
    sub_1000EFE58();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    goto LABEL_11;
  }
  uint64_t v28 = *(void *)(v16 + 312);
  sub_1000EF100();
  v29();
  id v30 = [v18 parameters];
  sub_10000D9D4(0, (unint64_t *)&unk_10017FAC0);
  unint64_t v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  a11 = v31;
  sub_1000681B4();
  if (!v28)
  {
    uint64_t v35 = *(void *)(v16 + 216);
    uint64_t v36 = sub_1000EF0E8();
    sub_1000EEFC8(v36, v37, v38);
    if (v24)
    {
      uint64_t v39 = *(void **)(v16 + 320);
      uint64_t v40 = *(void **)(v16 + 304);
      swift_bridgeObjectRelease();
      sub_1000347E8(v35, (uint64_t *)&unk_10017FAE0);
      sub_1000EFFEC();
      sub_1000E63EC(&qword_10017F838, (void (*)(uint64_t))type metadata accessor for RegistryError);
      sub_1000EE630();
      sub_1000EFBCC();
      sub_1000EF0F4();
      v41();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();

      uint64_t v33 = sub_1000EFAC8();
      goto LABEL_10;
    }
    uint64_t v51 = *(void *)(v16 + 232);
    sub_100028714();
    sub_1000EA1A4();
    uint64_t v52 = swift_task_alloc();
    *(void *)(v52 + 16) = v51;
    uint64_t v53 = sub_1000E8060((uint64_t (*)(void))sub_1000EE400, v52);
    if (v31 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v54 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v54 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v54 < v53)
    {
      __break(1u);
    }
    else
    {
      uint64_t v56 = *(void *)(v16 + 224);
      uint64_t v55 = *(void *)(v16 + 232);
      sub_1000EF910();
      sub_1000E66E0();
      swift_task_dealloc();
      *(id *)(v55 + *(int *)(v56 + 36));
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      {
LABEL_18:
        uint64_t v57 = *(void **)(v16 + 320);
        uint64_t v58 = *(void **)(v16 + 304);
        a9 = *(void *)(v16 + 232);
        a10 = *(void **)(v16 + 144);
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        sub_1000EFAC8();
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v60 = [v18 actionWithParameters:isa];

        sub_10007017C();
        sub_1000847DC();
        v61();
        sub_1000E88E0(a9, (void (*)(void))type metadata accessor for LNAppShortcutParameterRecord);
        *a10 = v60;
        goto LABEL_4;
      }
    }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    goto LABEL_18;
  }
  uint64_t v32 = *(void **)(v16 + 304);

  swift_bridgeObjectRelease();
  uint64_t v33 = sub_1000EFAD4();
LABEL_10:
  v34(v33);
  sub_1000EFE58();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
LABEL_11:
  sub_1000EECA8();
  return v43(v42, v43, v44, v45, v46, v47, v48, v49, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_1000DC30C()
{
  sub_1000700D0();
  uint64_t v1 = (void *)v0[41];
  uint64_t v2 = (void *)v0[40];
  uint64_t v3 = (void *)v0[38];
  swift_willThrow();

  sub_1000EFE38();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1000DC3E0(id *a1, uint64_t a2)
{
  id v3 = [*a1 identifier];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  id v7 = [*(id *)(a2 + *(int *)(type metadata accessor for LNAppShortcutParameterRecord() + 36)) identifier];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  if (v4 == v8 && v6 == v10) {
    char v12 = 1;
  }
  else {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

uint64_t sub_1000DC574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, void *a6)
{
  uint64_t v6[2] = a6;
  sub_10000BF1C(&qword_10017C788);
  uint64_t v10 = swift_task_alloc();
  v6[3] = v10;
  v6[4] = _Block_copy(a5);
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;
  v6[5] = v12;
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;
  v6[6] = v15;
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;
  v6[7] = v18;
  if (a4)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = 0;
  }
  else
  {
    uint64_t v20 = 1;
  }
  uint64_t v21 = type metadata accessor for UUID();
  sub_10000D5B0(v10, v20, 1, v21);
  a6;
  uint64_t v22 = (void *)swift_task_alloc();
  v6[8] = v22;
  *uint64_t v22 = v6;
  v22[1] = sub_1000DC71C;
  return sub_1000DB488(v11, v13, v14, v16, v17, v19, v10);
}

uint64_t sub_1000DC71C()
{
  sub_100084AD8();
  sub_1000EEDF4();
  uint64_t v5 = v4;
  sub_100010BC4();
  void *v6 = v5;
  void *v6 = *v2;
  swift_task_dealloc();
  id v7 = (const void *)v3[4];
  uint64_t v8 = (void *)v3[2];
  sub_1000347E8(v3[3], &qword_10017C788);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v1)
  {
    uint64_t v9 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    uint64_t v10 = sub_1000EF6A0();
    v11(v10);

    _Block_release(v7);
  }
  else
  {
    uint64_t v12 = sub_1000EF688();
    v13(v12);
    _Block_release(v7);
  }
  swift_task_dealloc();
  sub_1000EF9EC();
  return v14();
}

uint64_t sub_1000DC8E4()
{
  sub_10000EC58();
  v1[6] = v2;
  v1[7] = v0;
  v1[4] = v3;
  v1[5] = v4;
  v1[3] = v5;
  uint64_t v6 = type metadata accessor for Logger();
  v1[8] = v6;
  sub_1000282DC(v6);
  v1[9] = v7;
  v1[10] = sub_1000EF3F0();
  sub_100060358();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_1000DC978()
{
  sub_1000EF3B0();
  uint64_t v1 = off_10017C4C0;
  id v2 = *(id *)(v0 + 56);
  if (v1 == (void *)-1)
  {
    uint64_t v3 = v2;
  }
  else
  {
    swift_once();
    uint64_t v3 = *(void **)(v0 + 56);
  }
  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v6 = *(void *)(v0 + 64);
  uint64_t v7 = *(void *)(v0 + 32);
  uint64_t v8 = sub_10000BEE4(v6, (uint64_t)qword_100181FD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v8, v6);

  sub_100084840();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  BOOL v11 = sub_1000845C4(v10);
  uint64_t v13 = *(void *)(v0 + 72);
  uint64_t v12 = *(void *)(v0 + 80);
  unint64_t v14 = *(void *)(v0 + 32);
  if (v11)
  {
    uint64_t v35 = *(void *)(v0 + 24);
    uint64_t v36 = *(void *)(v0 + 64);
    uint64_t v15 = (_DWORD *)sub_1000536D0();
    uint64_t v37 = sub_100060438();
    *uint64_t v15 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 16) = sub_100013090(v35, v14, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100084DA0();
    sub_1000EF34C((void *)&_mh_execute_header, v9, (os_log_type_t)v7, "Handling request for AppShortcut lookup with bundleIdentifier: %s");
    sub_1000EF870();
    sub_10000EB10();
    sub_10000EB10();

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v36);
  }
  else
  {
    sub_10005079C();

    uint64_t v16 = sub_1000EF244();
    v18(v16, v17);
  }
  uint64_t v19 = *(void **)(v0 + 56);
  uint64_t v20 = self;
  id v21 = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(void *)(v0 + 88) = [v20 currentConnection];
  uint64_t v22 = swift_task_alloc();
  uint64_t v23 = (void *)sub_1000EFE78(v22);
  *uint64_t v23 = v24;
  v23[1] = sub_1000DB5C0;
  sub_1000EE488();
  sub_1000EECA8();
  return sub_1000D24C4(v25, v26, v27, v28, v29, v30, v31, v32);
}

uint64_t sub_1000DCC14(void *a1, int a2, void *a3, void *a4, void *aBlock)
{
  uint64_t v8 = _Block_copy(aBlock);
  sub_100084BAC();
  uint64_t v9 = (void *)swift_allocObject();
  void v9[2] = a3;
  v9[3] = a4;
  v9[4] = v8;
  v9[5] = a1;
  id v10 = a3;
  id v11 = a4;
  id v12 = a1;
  uint64_t v13 = sub_10000EBA4();

  return sub_1000F7D3C(v13, v14);
}

uint64_t sub_1000DCC94(int a1, int a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4[4] = v6;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4[5] = v7;
  a4;
  uint64_t v8 = (void *)swift_task_alloc();
  v4[6] = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_1000DCD90;
  return sub_1000DC8E4();
}

uint64_t sub_1000DCD90()
{
  sub_100084ED0();
  sub_100013E0C();
  uint64_t v2 = v0;
  sub_100010BAC();
  uint64_t v4 = v3;
  sub_100060250();
  *uint64_t v5 = v4;
  uint64_t v7 = *(void **)(v6 + 40);
  uint64_t v8 = *(void **)(v6 + 16);
  uint64_t v9 = *v1;
  sub_100010BC4();
  *uint64_t v10 = v9;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v2)
  {
    _convertErrorToNSError(_:)();
    sub_100084A84();
    sub_100084ACC();
  }
  else
  {
    sub_10000D9D4(0, &qword_10017F250);
    sub_1000EF008();
    sub_100084AE4();
    sub_100084B48();
  }
  uint64_t v11 = sub_1000EE5B4();
  v12(v11);

  _Block_release(v4);
  sub_10000EB74();
  sub_100084D74();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20);
}

uint64_t sub_1000DCEFC()
{
  sub_10000EC58();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = type metadata accessor for Logger();
  v1[5] = v4;
  sub_1000282DC(v4);
  v1[6] = v5;
  v1[7] = sub_1000EF3F0();
  sub_100060358();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_1000DCF8C()
{
  sub_100084ED0();
  sub_100013E0C();
  uint64_t v1 = off_10017C4C0;
  id v2 = *(id *)(v0 + 32);
  if (v1 == (void *)-1)
  {
    uint64_t v3 = v2;
  }
  else
  {
    swift_once();
    uint64_t v3 = *(void **)(v0 + 32);
  }
  sub_10000BEE4(*(void *)(v0 + 40), (uint64_t)qword_100181FD0);
  uint64_t v4 = sub_1000EED50();
  v5(v4);

  uint64_t v6 = (void *)Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (sub_1000A3E04(v7))
  {
    uint64_t v8 = (_WORD *)sub_1000EECD0();
    sub_1000EF048(v8);
    sub_1000EE99C((void *)&_mh_execute_header, v9, v10, "Handling request for all AppShortcuts");
    sub_10000EB10();
  }
  uint64_t v11 = *(void **)(v0 + 32);

  uint64_t v12 = sub_1000EE9D8();
  v13(v12);
  uint64_t v14 = self;
  id v15 = v11;
  swift_bridgeObjectRetain();
  *(void *)(v0 + 64) = [v14 currentConnection];
  uint64_t v16 = swift_task_alloc();
  uint64_t v17 = (void *)sub_1000EF3BC(v16);
  void *v17 = v18;
  v17[1] = sub_1000DD118;
  sub_1000EE488();
  sub_100084D74();
  return sub_1000D2C64(v19, v20, v21, v22, v23, v24, v25);
}

uint64_t sub_1000DD118()
{
  sub_10006039C();
  sub_100010BAC();
  uint64_t v3 = v2;
  sub_100060250();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_100010BC4();
  void *v6 = v5;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_100060358();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {

    swift_task_dealloc();
    uint64_t v10 = sub_100084F30();
    return v11(v10);
  }
}

uint64_t sub_1000DD230()
{
  sub_10000EC58();

  swift_task_dealloc();
  sub_1000EFB48();
  return v1();
}

uint64_t sub_1000DD2B0(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3[4] = v5;
  a3;
  uint64_t v6 = (void *)swift_task_alloc();
  v3[5] = v6;
  void *v6 = v3;
  v6[1] = sub_1000DD384;
  return sub_1000DCEFC();
}

uint64_t sub_1000DD384()
{
  sub_100084274();
  sub_100013E0C();
  uint64_t v2 = v0;
  sub_100010BAC();
  uint64_t v4 = v3;
  sub_100060250();
  *uint64_t v5 = v4;
  uint64_t v7 = *(void **)(v6 + 32);
  uint64_t v8 = *(void **)(v6 + 16);
  uint64_t v9 = *v1;
  sub_100010BC4();
  *uint64_t v10 = v9;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  if (v2)
  {
    _convertErrorToNSError(_:)();
    sub_100084A84();
    sub_100084ACC();
  }
  else
  {
    sub_10000BF1C(&qword_10017D670);
    Dictionary._bridgeToObjectiveC()();
    sub_100084AE4();
    sub_100084B48();
  }
  uint64_t v11 = sub_1000EE5B4();
  v12(v11);

  _Block_release(v4);
  sub_10000EB74();
  sub_100084200();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20);
}

uint64_t sub_1000DD4E0()
{
  sub_10000EC58();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = type metadata accessor for Logger();
  v1[4] = v3;
  sub_1000282DC(v3);
  v1[5] = v4;
  v1[6] = sub_1000EF3F0();
  sub_100060358();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1000DD56C()
{
  sub_100084ED0();
  sub_100013E0C();
  uint64_t v1 = off_10017C4C0;
  id v2 = *(id *)(v0 + 24);
  if (v1 == (void *)-1)
  {
    uint64_t v3 = v2;
  }
  else
  {
    swift_once();
    uint64_t v3 = *(void **)(v0 + 24);
  }
  sub_10000BEE4(*(void *)(v0 + 32), (uint64_t)qword_100181FD0);
  uint64_t v4 = sub_1000EED50();
  v5(v4);

  uint64_t v6 = (void *)Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (sub_1000A3E04(v7))
  {
    uint64_t v8 = (_WORD *)sub_1000EECD0();
    sub_1000EF048(v8);
    sub_1000EE99C((void *)&_mh_execute_header, v9, v10, "Handling request for App Shortcut properties");
    sub_10000EB10();
  }
  uint64_t v11 = *(void **)(v0 + 24);

  uint64_t v12 = sub_1000EE9D8();
  v13(v12);
  uint64_t v14 = self;
  id v15 = v11;
  swift_bridgeObjectRetain();
  sub_1000EFA50((uint64_t)[v14 currentConnection]);
  uint64_t v16 = swift_task_alloc();
  uint64_t v17 = (void *)sub_1000EF7EC(v16);
  void *v17 = v18;
  v17[1] = sub_1000DD6F0;
  sub_1000EE488();
  sub_100084D74();
  return sub_1000D33BC(v19, v20, v21, v22, v23, v24);
}

uint64_t sub_1000DD6F0()
{
  sub_10006039C();
  sub_100010BAC();
  uint64_t v3 = v2;
  sub_100060250();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_100010BC4();
  void *v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_100060358();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {

    swift_task_dealloc();
    uint64_t v10 = sub_100084F30();
    return v11(v10);
  }
}

uint64_t sub_1000DD808()
{
  sub_10000EC58();

  swift_task_dealloc();
  sub_1000EFB28();
  return v1();
}

uint64_t sub_1000DD868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  v3[8] = type metadata accessor for LNAppShortcutParameterRecord();
  v3[9] = swift_task_alloc();
  v3[10] = *(void *)(sub_10000BF1C((uint64_t *)&unk_10017FAE0) - 8);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  return _swift_task_switch(sub_1000DD9C8, 0, 0);
}

unint64_t sub_1000DD9C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void (**a15)(void), void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_1000EE518();
  sub_1000EE77C();
  uint64_t v21 = sub_100068280(v20[4]);
  uint64_t v22 = *(void *)(v21 + 16);
  if (!v22)
  {
LABEL_16:
    uint64_t v53 = (void *)v20[2];
    swift_bridgeObjectRelease();
    *uint64_t v53 = _swiftEmptyDictionarySingleton;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100070028();
    sub_1000EE46C();
    return v55(v54, v55, v56, v57, v58, v59, v60, v61, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
  }
  uint64_t v23 = v20[10];
  a14 = v20[8];
  uint64_t v24 = v20[6];
  unint64_t v25 = v21 + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
  a15 = (void (**)(void))(v24 + 16);
  a10 = v21;
  a11 = v24;
  a13 = v24 + 8;
  uint64_t v26 = *(void *)(v23 + 72);
  swift_bridgeObjectRetain();
  a12 = v26;
  while (1)
  {
    uint64_t v27 = v20[11];
    uint64_t v28 = v20[8];
    uint64_t v29 = sub_1000EF910();
    sub_1000A3B4C(v29, v30, (uint64_t *)&unk_10017FAE0);
    uint64_t v31 = sub_10007017C();
    sub_1000A3B4C(v31, v32, (uint64_t *)&unk_10017FAE0);
    if (sub_10000D5D8(v27, 1, v28) == 1)
    {
      sub_1000347E8(v20[11], (uint64_t *)&unk_10017FAE0);
      goto LABEL_14;
    }
    uint64_t v33 = v20[9];
    uint64_t v34 = v20[7];
    sub_1000EA1A4();
    uint64_t v35 = *a15;
    sub_1000EF0F4();
    v35();
    id v36 = *(id *)(v33 + *(int *)(a14 + 36));
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    a16 = _swiftEmptyDictionarySingleton;
    unint64_t result = sub_1000212E8(v34);
    uint64_t v40 = _swiftEmptyDictionarySingleton[2];
    BOOL v41 = (v39 & 1) == 0;
    Swift::Int v42 = v40 + v41;
    if (__OFADD__(v40, v41))
    {
      __break(1u);
LABEL_23:
      __break(1u);
      return result;
    }
    unint64_t v43 = result;
    char v44 = v39;
    sub_10000BF1C(&qword_10017F288);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v42)) {
      break;
    }
LABEL_9:
    if (v44)
    {
      uint64_t v47 = _swiftEmptyDictionarySingleton[7];

      *(void *)(v47 + 8 * v43) = v36;
    }
    else
    {
      _swiftEmptyDictionarySingleton[(v43 >> 6) + 8] |= 1 << v43;
      sub_1000EF0F4();
      unint64_t result = ((uint64_t (*)(void))v35)();
      *(void *)(_swiftEmptyDictionarySingleton[7] + 8 * v43) = v36;
      uint64_t v48 = _swiftEmptyDictionarySingleton[2];
      BOOL v49 = __OFADD__(v48, 1);
      uint64_t v50 = v48 + 1;
      if (v49) {
        goto LABEL_23;
      }
      _swiftEmptyDictionarySingleton[2] = v50;
    }
    uint64_t v51 = v20[9];
    swift_bridgeObjectRelease();
    sub_100013EC4();
    v52();
    sub_1000E88E0(v51, (void (*)(void))type metadata accessor for LNAppShortcutParameterRecord);
    uint64_t v26 = a12;
LABEL_14:
    sub_1000347E8(v20[12], (uint64_t *)&unk_10017FAE0);
    v25 += v26;
    if (!--v22)
    {
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
  }
  unint64_t v45 = sub_1000212E8(v20[7]);
  if ((v44 & 1) == (v46 & 1))
  {
    unint64_t v43 = v45;
    goto LABEL_9;
  }
  sub_1000EE46C();
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_1000DDD68(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v3[4] = type metadata accessor for UUID();
  v3[5] = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  a3;
  uint64_t v5 = (void *)swift_task_alloc();
  v3[6] = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_1000DDE44;
  return sub_1000DD4E0();
}

uint64_t sub_1000DDE44()
{
  sub_100084274();
  sub_100013E0C();
  uint64_t v2 = v0;
  sub_100010BAC();
  uint64_t v4 = v3;
  sub_100060250();
  *uint64_t v5 = v4;
  uint64_t v7 = *(void **)(v6 + 40);
  uint64_t v8 = *(void **)(v6 + 16);
  uint64_t v9 = *v1;
  sub_100010BC4();
  *uint64_t v10 = v9;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  if (v2)
  {
    _convertErrorToNSError(_:)();
    sub_100084A84();
    sub_100084ACC();
  }
  else
  {
    uint64_t v7 = (void *)sub_10000D9D4(0, (unint64_t *)&unk_10017FAC0);
    sub_1000E63EC((unint64_t *)&qword_10017D340, (void (*)(uint64_t))&type metadata accessor for UUID);
    Dictionary._bridgeToObjectiveC()();
    sub_100084AE4();
    sub_100084B48();
  }
  uint64_t v11 = sub_1000EE5B4();
  v12(v11);

  _Block_release(v4);
  sub_10000EB74();
  sub_100084200();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20);
}

uint64_t sub_1000DDFE0(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100084120((uint64_t)sub_1000DDFFC);
}

uint64_t sub_1000DDFFC()
{
  sub_10006039C();
  uint64_t v1 = *(void **)(v0 + 32);
  uint64_t v2 = self;
  id v3 = v1;
  swift_bridgeObjectRetain();
  sub_1000EEEDC((uint64_t)[v2 currentConnection]);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_1000EED44(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_1000B4F44;
  uint64_t v7 = sub_1000EE488();
  return sub_1000D3B9C(v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_1000DE0EC(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v3[4] = v6;
  a3;
  uint64_t v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_1000DE1C0;
  return sub_1000DDFE0(v5, v7);
}

uint64_t sub_1000DE1C0()
{
  sub_100084274();
  sub_100013E0C();
  uint64_t v2 = v0;
  sub_100010BAC();
  uint64_t v4 = v3;
  sub_100060250();
  *uint64_t v5 = v4;
  uint64_t v7 = *(void **)(v6 + 32);
  uint64_t v8 = *(void **)(v6 + 16);
  uint64_t v9 = *v1;
  sub_100010BC4();
  *uint64_t v10 = v9;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  if (v2)
  {
    _convertErrorToNSError(_:)();
    sub_100084A84();
    sub_100084ACC();
  }
  else
  {
    sub_10000D9D4(0, &qword_10017ED80);
    sub_1000EF008();
    sub_100084AE4();
    sub_100084B48();
  }
  uint64_t v11 = sub_1000EE5B4();
  v12(v11);

  _Block_release(v4);
  sub_10000EB74();
  sub_100084200();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20);
}

uint64_t sub_1000DE310()
{
  *(void *)(v1 + 16) = v0;
  return sub_100084120((uint64_t)sub_1000DE328);
}

uint64_t sub_1000DE328()
{
  sub_10000EC58();
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = self;
  id v3 = v1;
  sub_1000EF2C4((uint64_t)[v2 currentConnection]);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_1000EF0D0(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_1000DE3E4;
  uint64_t v7 = sub_1000EE488();
  return sub_1000D43E4(v7, v8, v9, v10, v11);
}

uint64_t sub_1000DE3E4()
{
  sub_10006039C();
  sub_100010BAC();
  uint64_t v3 = v2;
  sub_100060250();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_100010BC4();
  void *v6 = v5;
  *(void *)(v3 + 40) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_100060358();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {

    uint64_t v10 = sub_1000EE6F0();
    return v11(v10);
  }
}

uint64_t sub_1000DE4F8()
{
  sub_10000EC58();

  sub_10000EB74();
  return v1();
}

uint64_t sub_1000DE554(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_1000DE574, 0, 0);
}

#error "1000DE684: call analysis failed (funcsize=186)"

uint64_t sub_1000DE880(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1000DE928;
  return sub_1000DE310();
}

uint64_t sub_1000DE928()
{
  sub_10006039C();
  uint64_t v2 = v0;
  sub_100010BAC();
  uint64_t v4 = v3;
  sub_100060250();
  *uint64_t v5 = v4;
  uint64_t v7 = *(void **)(v6 + 16);
  uint64_t v8 = *v1;
  sub_100010BC4();
  *uint64_t v9 = v8;
  swift_task_dealloc();

  if (v2)
  {
    _convertErrorToNSError(_:)();
    sub_100084A84();
    sub_100084ACC();
  }
  else
  {
    sub_10000BF1C(&qword_10017FA60);
    Dictionary._bridgeToObjectiveC()();
    sub_100084AE4();
    sub_100084B48();
  }
  uint64_t v10 = sub_1000EE5B4();
  v11(v10);

  _Block_release(v4);
  sub_10000EB74();
  return v12();
}

void sub_1000DEA68(uint64_t a1, uint64_t a2, void *a3)
{
  sub_10000BF1C((uint64_t *)&unk_10017FF60);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013F9D0;
  *(void *)(inited + 32) = 0xD000000000000010;
  *(void *)(inited + 40) = 0x8000000100143090;
  *(void *)(inited + 48) = String._bridgeToObjectiveC()();
  *(void *)(inited + 56) = 0xD000000000000010;
  *(void *)(inited + 64) = 0x8000000100145B10;
  id v5 = [a3 action];
  id v6 = [v5 identifier];

  if (v6)
  {
    *(void *)(inited + 72) = v6;
    strcpy((char *)(inited + 80), "relevanceType");
    *(_WORD *)(inited + 94) = -4864;
    id v7 = [a3 context];
    id v8 = [v7 analyticsDescription];

    if (v8)
    {
      *(void *)(inited + 96) = v8;
      *(void *)(inited + 104) = 0x694B746567646977;
      *(void *)(inited + 112) = 0xEA0000000000646ELL;
      sub_1000E8A68(a3, (SEL *)&selRef_widgetKind);
      NSString v9 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      *(void *)(inited + 120) = v9;
      sub_10000D9D4(0, (unint64_t *)&qword_10017DD30);
      Dictionary.init(dictionaryLiteral:)();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

Class sub_1000DEC40(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  if (v3)
  {
    sub_10000D9D4(0, (unint64_t *)&qword_10017DD30);
    v4.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v4.super.Class isa = 0;
  }

  return v4.super.isa;
}

uint64_t sub_1000DECDC(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = v3;
  *(unsigned char *)(v4 + 88) = a3;
  *(void *)(v4 + 16) = a1;
  return sub_100084120((uint64_t)sub_1000DECFC);
}

uint64_t sub_1000DECFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_1000700D0();
  uint64_t v23 = (char *)v22[4];
  uint64_t v24 = *(void *)&v23[OBJC_IVAR____TtC10LinkDaemon8Registry_ready];
  v22[5] = v24;
  if (v24)
  {
    swift_retain();
    uint64_t v25 = swift_task_alloc();
    uint64_t v26 = (void *)sub_1000EED44(v25);
    *uint64_t v26 = v27;
    v26[1] = sub_1000DEEAC;
    sub_1000843A4();
    return Task<>.value.getter(v28, v29, v30, v31, v32, v33, v34, v35, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22);
  }
  else
  {
    _StringGuts.grow(_:)(23);
    int v36 = swift_bridgeObjectRelease();
    sub_1000EEF10(v36, v37, v38, v39, v40, v41, v42, v43, v58, 0, 0xE000000000000000);
    sub_1000EF754();
    v22[7] = v59;
    char v44 = self;
    swift_bridgeObjectRetain();
    unint64_t v45 = v23;
    v22[8] = [v44 currentConnection];
    uint64_t v46 = swift_task_alloc();
    uint64_t v47 = (void *)sub_1000EF3BC(v46);
    void *v47 = v48;
    v47[1] = sub_1000DF09C;
    sub_1000EF078();
    return sub_1000C95D4(v49, v50, v51, v52, v53, v54, v55, v56);
  }
}

uint64_t sub_1000DEEAC()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000DEF90()
{
  sub_1000700D0();
  sub_1000EF73C();
  _StringGuts.grow(_:)(23);
  int v2 = swift_bridgeObjectRelease();
  sub_1000EEF10(v2, v3, v4, v5, v6, v7, v8, v9, v24, v25, v26);
  sub_1000EF754();
  *(void *)(v0 + 56) = v27;
  uint64_t v10 = self;
  swift_bridgeObjectRetain();
  id v11 = v1;
  *(void *)(v0 + 64) = [v10 currentConnection];
  uint64_t v12 = swift_task_alloc();
  uint64_t v13 = (void *)sub_1000EF3BC(v12);
  *uint64_t v13 = v14;
  v13[1] = sub_1000DF09C;
  sub_1000EF078();
  return sub_1000C95D4(v15, v16, v17, v18, v19, v20, v21, v22);
}

uint64_t sub_1000DF09C()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v3 = v2;
  sub_100060250();
  *int v4 = v3;
  uint64_t v5 = *v1;
  sub_100010BC4();
  void *v6 = v5;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc();
  if (!v0)
  {

    swift_bridgeObjectRelease();
  }
  sub_100060358();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000DF18C()
{
  sub_10000EC58();

  swift_bridgeObjectRelease();
  sub_1000EFB48();
  return v1();
}

uint64_t sub_1000DF1EC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  *(void *)(v5 + 96) = a3;
  *(void *)(v5 + 104) = a5;
  *(unsigned char *)(v5 + 192) = a4;
  *(void *)(v5 + 88) = a2;
  *(void *)(v5 + 112) = type metadata accessor for LSLinkBundleRecord(0);
  *(void *)(v5 + 120) = swift_task_alloc();
  sub_10000BF1C(&qword_10017EB18);
  *(void *)(v5 + 128) = swift_task_alloc();
  *(void *)(v5 + 136) = swift_task_alloc();
  *(void *)(v5 + 144) = swift_task_alloc();
  return _swift_task_switch(sub_1000DF2D4, 0, 0);
}

uint64_t sub_1000DF2D4()
{
  sub_1000700D0();
  uint64_t v1 = *(void *)(v0 + 112);
  sub_10000D9D4(0, &qword_10017E2E0);
  sub_10000EBA4();
  id v2 = sub_1000DFA90();
  *(void *)(v0 + 152) = v2;
  uint64_t v3 = sub_1000EF0E8();
  sub_10000D5B0(v3, v4, 1, v1);
  if (v2)
  {
    id v5 = v2;
    sub_1000B5418();
  }
  else
  {
    type metadata accessor for DaemonRecord();
    sub_1000EFDF8();
    if (static DaemonRecord.from(bundleIdentifier:)())
    {
      sub_1000DFC5C();
    }
    else
    {
      type metadata accessor for FrameworkRecord();
      sub_1000EFDF8();
      if (!static FrameworkRecord.from(bundleIdentifier:)()) {
        goto LABEL_8;
      }
      sub_1000E011C();
    }
  }
  uint64_t v6 = sub_1000EFAC8();
  sub_1000347E8(v6, v7);
  uint64_t v8 = sub_100028714();
  sub_100083620(v8, v9, &qword_10017EB18);
LABEL_8:
  uint64_t v10 = *(void *)(v0 + 128);
  uint64_t v11 = *(void *)(v0 + 112);
  sub_1000A3B4C(*(void *)(v0 + 144), v10, &qword_10017EB18);
  sub_1000EEFC8(v10, 1, v11);
  if (v12)
  {
    uint64_t v13 = *(void *)(v0 + 144);
    uint64_t v15 = *(void *)(v0 + 88);
    uint64_t v14 = *(void *)(v0 + 96);
    sub_1000347E8(*(void *)(v0 + 128), &qword_10017EB18);
    type metadata accessor for RegistryError(0);
    sub_1000E63EC(&qword_10017F838, (void (*)(uint64_t))type metadata accessor for RegistryError);
    uint64_t v16 = swift_allocError();
    sub_1000F0060(v16, v17);
    *uint64_t v18 = v15;
    v18[1] = v14;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    swift_willThrow();

LABEL_14:
    sub_1000347E8(v13, &qword_10017EB18);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EB74();
    return v24();
  }
  int v19 = *(unsigned __int8 *)(v0 + 192);
  sub_1000EA1A4();
  sub_1000E057C();
  if ((v20 & 1) == 0 && !v19)
  {
    uint64_t v13 = *(void *)(v0 + 144);
    uint64_t v21 = *(void *)(v0 + 120);
    sub_1000EFFEC();
    sub_1000E63EC(&qword_10017F838, (void (*)(uint64_t))type metadata accessor for RegistryError);
    uint64_t v22 = sub_1000EE630();
    sub_1000F0060(v22, v23);
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    sub_1000E88E0(v21, (void (*)(void))type metadata accessor for LSLinkBundleRecord);
    goto LABEL_14;
  }
  uint64_t v26 = *(void *)(v0 + 112);
  char v27 = *(unsigned char *)(v0 + 192);
  sub_10000BF1C(&qword_10017D360);
  uint64_t v28 = sub_1000EF060();
  *(void *)(v0 + 160) = v28;
  *(_OWORD *)(v28 + 16) = xmmword_10013EF20;
  *(void *)(v28 + 56) = v26;
  *(void *)(v28 + 64) = &off_100172A40;
  sub_1000274F4((uint64_t *)(v28 + 32));
  sub_1000E8894();
  *(unsigned char *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = v28;
  *(void *)(v0 + 32) = _swiftEmptyArrayStorage;
  *(_OWORD *)(v0 + 40) = xmmword_10013D670;
  *(unsigned char *)(v0 + 56) = v27;
  *(void *)(v0 + 64) = 0;
  *(void *)(v0 + 72) = 0;
  uint64_t v29 = (void *)swift_task_alloc();
  *(void *)(v0 + 168) = v29;
  *uint64_t v29 = v0;
  v29[1] = sub_1000DF6B4;
  uint64_t v30 = sub_1000EF888();
  return sub_1000BDDA0(v30, v31);
}

uint64_t sub_1000DF6B4()
{
  sub_10006039C();
  sub_100084228();
  sub_100060250();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_100060250();
  *id v5 = v4;
  *(void *)(v7 + 176) = v6;
  *(void *)(v7 + 184) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000EF284();
  if (!v0) {
    swift_bridgeObjectRelease();
  }
  sub_100060358();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_1000DF7D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28)
{
  sub_1000EE518();
  a27 = v29;
  a28 = v30;
  sub_1000EE77C();
  a26 = v28;
  uint64_t v31 = *(void *)(v28[13] + OBJC_IVAR____TtC10LinkDaemon8Registry_observers);
  uint64_t v52 = *(void *)(v31 + 16);
  if (v52)
  {
    a10 = v31 + 32;
    a11 = v28 + 10;
    uint64_t v32 = v28[23];
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v34 = 0;
    while (v34 < *(void *)(v31 + 16))
    {
      sub_10000BEA0((void *)(a10 + 40 * v34), *(void *)(a10 + 40 * v34 + 24));
      swift_bridgeObjectRetain();
      sub_1000B2E20();
      uint64_t v36 = v35;
      swift_bridgeObjectRelease();
      a14 = Set.init(minimumCapacity:)();
      uint64_t v37 = *(void *)(v36 + 16);
      if (v37)
      {
        a13 = v32;
        int v38 = (uint64_t *)(v36 + 40);
        do
        {
          uint64_t v39 = *(v38 - 1);
          uint64_t v40 = *v38;
          swift_bridgeObjectRetain();
          sub_100023984(&a15, v39, v40);
          swift_bridgeObjectRelease();
          v38 += 2;
          --v37;
        }
        while (v37);
      }
      swift_bridgeObjectRelease();
      ++v34;
      sub_10008023C();
      uint64_t result = swift_bridgeObjectRelease();
      if (v34 == v52) {
        goto LABEL_10;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_10:
    uint64_t v42 = v28[18];
    int v41 = (void *)v28[19];
    uint64_t v43 = v28[15];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_1000E88E0(v43, (void (*)(void))type metadata accessor for LSLinkBundleRecord);
    sub_1000347E8(v42, &qword_10017EB18);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100070028();
    sub_1000EE46C();
    return v45(v44, v45, v46, v47, v48, v49, v50, v51, a9, a10, a11, v52, a13, a14, a15, a16, a17, a18, a19, a20);
  }
  return result;
}

uint64_t sub_1000DF9D8()
{
  sub_10006039C();
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 120);

  sub_1000E88E0(v2, (void (*)(void))type metadata accessor for LSLinkBundleRecord);
  sub_1000347E8(v1, &qword_10017EB18);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EB74();
  return v3();
}

id sub_1000DFA90()
{
  type metadata accessor for DaemonRecord();
  uint64_t v0 = static DaemonRecord.from(bundleIdentifier:)();
  if (v0)
  {
    id v1 = (id)v0;
    DaemonRecord.attributionBundleIdentifier.getter();
    if (v2)
    {
      sub_10000D9D4(0, &qword_10017E2E0);
      uint64_t v6 = (void *)static LSBundleRecord.with(bundleIdentifier:allowSystemAppPlaceholder:)();
      swift_bridgeObjectRelease();
LABEL_8:

      return v6;
    }
  }
  sub_10000D9D4(0, &qword_10017E2E0);
  uint64_t v3 = (void *)static LSBundleRecord.with(bundleIdentifier:allowSystemAppPlaceholder:)();
  self;
  uint64_t v4 = swift_dynamicCastObjCClass();
  if (!v4) {
    return v3;
  }
  uint64_t v6 = (void *)v4;
  id v1 = v3;
  LSApplicationExtensionRecord.attributionBundleIdentifier.getter();
  if (v5)
  {
    uint64_t v6 = (void *)static LSBundleRecord.with(bundleIdentifier:allowSystemAppPlaceholder:)();
    swift_bridgeObjectRelease();

    goto LABEL_8;
  }
  id v7 = [v6 containingBundleRecord];

  if (v7)
  {

    return v7;
  }
  return v6;
}

void sub_1000DFC5C()
{
  sub_10000E990();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = sub_10000BF1C(&qword_10017F840);
  uint64_t v7 = sub_1000EEDE8(v6);
  __chkstk_darwin(v7);
  uint64_t v57 = sub_1000EED80(v8, v53);
  sub_100028430();
  uint64_t v55 = v9;
  __chkstk_darwin(v10);
  sub_1000EF4D4(v11, v53);
  uint64_t v12 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  uint64_t v13 = sub_1000EEDE8(v12);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000BF1C(&qword_10017F848);
  uint64_t v17 = sub_1000EEDE8(v16);
  __chkstk_darwin(v17);
  sub_1000EED68();
  uint64_t v18 = type metadata accessor for URLResourceValues();
  sub_100028430();
  uint64_t v59 = v19;
  __chkstk_darwin(v20);
  uint64_t v21 = sub_1000EF408();
  uint64_t v22 = type metadata accessor for LSLinkBundleRecord(v21);
  sub_1000283FC();
  __chkstk_darwin(v23);
  sub_1000EF424();
  *id v1 = DaemonRecord.bundleIdentifier.getter();
  v1[1] = v24;
  DaemonRecord.metadataURLs.getter();
  sub_100048EC4();
  swift_bridgeObjectRelease();
  uint64_t v25 = type metadata accessor for URL();
  sub_1000EEFC8((uint64_t)v15, 1, v25);
  if (v36)
  {
    sub_1000347E8((uint64_t)v15, (uint64_t *)&unk_10017D0C0);
    uint64_t v28 = sub_1000EF888();
    sub_10000D5B0(v28, v29, 1, v18);
LABEL_4:

    sub_1000347E8(v0, &qword_10017F848);
    goto LABEL_5;
  }
  uint64_t v58 = (int *)v22;
  uint64_t v54 = v5;
  sub_10000BF1C(&qword_10017F850);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013EF20;
  *(void *)(inited + 32) = NSURLContentModificationDateKey;
  char v27 = NSURLContentModificationDateKey;
  sub_100082268(inited);
  URL.resourceValues(forKeys:)();
  swift_bridgeObjectRelease();
  sub_100013EC4();
  v30();
  uint64_t v31 = sub_1000EF234();
  sub_10000D5B0(v31, v32, v33, v18);
  uint64_t v34 = sub_1000EF888();
  sub_1000EEFC8(v34, v35, v18);
  uint64_t v5 = v54;
  uint64_t v22 = (uint64_t)v58;
  if (v36) {
    goto LABEL_4;
  }
  sub_1000EF100();
  v37();
  uint64_t v38 = v56;
  URLResourceValues.contentModificationDate.getter();
  uint64_t v39 = sub_1000EF888();
  sub_1000EEFC8(v39, v40, v57);
  if (!v36)
  {
    sub_1000EF100();
    v43();
    Date.timeIntervalSinceReferenceDate.getter();
    uint64_t v45 = sub_1000EF76C(v44);
    uint64_t v56 = v46;
    uint64_t v47 = sub_1000EFABC();
    v48(v47);
    sub_1000EF2B8();
    sub_100013EC4();
    v49();
    uint64_t v50 = v58;
    uint64_t v51 = (uint64_t *)((char *)v1 + v58[6]);
    uint64_t v52 = v56;
    *uint64_t v51 = v45;
    v51[1] = v52;
    Date.init()();

    *((unsigned char *)v1 + v50[8]) = 1;
    *((unsigned char *)v1 + v50[9]) = 1;
    sub_10000D5B0((uint64_t)v1 + v50[5], 1, 1, v25);
    sub_1000EF9E0();
    sub_1000E8894();
    sub_10000D5B0(v5, 0, 1, (uint64_t)v50);
    sub_1000E88E0((uint64_t)v1, (void (*)(void))type metadata accessor for LSLinkBundleRecord);
    goto LABEL_6;
  }

  uint64_t v41 = sub_1000EF2B8();
  v42(v41);
  sub_1000347E8(v38, &qword_10017F840);
  uint64_t v22 = (uint64_t)v58;
LABEL_5:
  swift_bridgeObjectRelease();
  sub_10000D5B0(v5, 1, 1, v22);
LABEL_6:
  sub_10000E930();
}

void sub_1000E011C()
{
  sub_10000E990();
  uint64_t v2 = v1;
  uint64_t v57 = v3;
  uint64_t v4 = sub_10000BF1C(&qword_10017F840);
  uint64_t v5 = sub_1000EEDE8(v4);
  __chkstk_darwin(v5);
  sub_1000EED80(v6, v51[0]);
  sub_100028430();
  v51[1] = v8;
  uint64_t v52 = v7;
  __chkstk_darwin(v7);
  sub_1000B1BD0();
  v51[0] = v9;
  uint64_t v10 = type metadata accessor for URL();
  sub_100028430();
  __chkstk_darwin(v11);
  uint64_t v12 = sub_10000BF1C(&qword_10017F848);
  uint64_t v13 = sub_1000EEDE8(v12);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for URLResourceValues();
  sub_100028430();
  uint64_t v53 = v17;
  __chkstk_darwin(v18);
  uint64_t v19 = sub_1000EEE90();
  uint64_t v55 = type metadata accessor for LSLinkBundleRecord(v19);
  sub_1000283FC();
  __chkstk_darwin(v20);
  sub_1000A3C1C();
  uint64_t *v0 = FrameworkRecord.bundleIdentifier.getter();
  v0[1] = v21;
  id v56 = v2;
  FrameworkRecord.metadataURL.getter();
  sub_10000BF1C(&qword_10017F850);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013EF20;
  *(void *)(inited + 32) = NSURLContentModificationDateKey;
  uint64_t v23 = NSURLContentModificationDateKey;
  sub_100082268(inited);
  URL.resourceValues(forKeys:)();
  uint64_t v24 = v54;
  uint64_t v25 = sub_1000EF804();
  v26(v25);
  swift_bridgeObjectRelease();
  sub_1000F0028((uint64_t)v15, 0);
  sub_1000EEFC8((uint64_t)v15, 1, v16);
  if (v32)
  {

    char v27 = &qword_10017F848;
    uint64_t v28 = (uint64_t)v15;
  }
  else
  {
    sub_1000EF100();
    v29();
    URLResourceValues.contentModificationDate.getter();
    uint64_t v30 = sub_1000EF0E8();
    sub_1000EEFC8(v30, v31, v52);
    if (!v32)
    {
      sub_1000EF100();
      v34();
      Date.timeIntervalSinceReferenceDate.getter();
      uint64_t v36 = sub_1000EF76C(v35);
      uint64_t v38 = v37;
      uint64_t v39 = sub_1000EFF84();
      v40(v39);
      sub_1000847DC();
      v41();
      uint64_t v42 = v55;
      uint64_t v43 = (uint64_t *)((char *)v0 + *(int *)(v55 + 24));
      *uint64_t v43 = v36;
      v43[1] = v38;
      Date.init()();
      *((unsigned char *)v0 + *(int *)(v42 + 32)) = 1;
      *((unsigned char *)v0 + *(int *)(v42 + 36)) = 2;
      id v44 = v56;
      FrameworkRecord.bundleURL.getter();

      uint64_t v45 = sub_1000EF234();
      sub_10000D5B0(v45, v46, v47, v10);
      sub_1000E8894();
      uint64_t v48 = sub_1000EF234();
      sub_10000D5B0(v48, v49, v50, v42);
      sub_1000E88E0((uint64_t)v0, (void (*)(void))type metadata accessor for LSLinkBundleRecord);
      goto LABEL_5;
    }

    sub_1000EECC4();
    v33();
    char v27 = &qword_10017F840;
    uint64_t v28 = v24;
  }
  sub_1000347E8(v28, v27);
  swift_bridgeObjectRelease();
  sub_10000D5B0(v57, 1, 1, v55);
LABEL_5:
  sub_10000E930();
}

void sub_1000E057C()
{
  sub_1000288B4();
  uint64_t v0 = type metadata accessor for LSLinkBundleRecord(0);
  uint64_t v1 = sub_1000EEDE8(v0);
  __chkstk_darwin(v1);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v10 - v3;
  sub_10000D9D4(0, &qword_10017E2E0);
  sub_10007017C();
  uint64_t v5 = (void *)static LSBundleRecord.with(bundleIdentifier:allowSystemAppPlaceholder:)();
  unsigned int v6 = [v5 swift_isAppIntentsEnabled];
  sub_1000EF584();
  sub_1000E8894();
  if (v6)
  {
    uint64_t v7 = self;
    NSString v8 = String._bridgeToObjectiveC()();
    id v9 = [v7 applicationWithBundleIdentifier:v8];

    [v9 isHidden];
  }
  else
  {
  }
  sub_1000E88E0((uint64_t)v4, (void (*)(void))type metadata accessor for LSLinkBundleRecord);
  sub_10000EB44();
}

uint64_t sub_1000E0818(int a1, char a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;
  v4[4] = v8;
  a4;
  uint64_t v10 = (void *)swift_task_alloc();
  v4[5] = v10;
  *uint64_t v10 = v4;
  v10[1] = sub_1000E08FC;
  return sub_1000DECDC(v7, v9, a2);
}

uint64_t sub_1000E08FC()
{
  sub_100084ED0();
  sub_100013E0C();
  uint64_t v3 = v0;
  sub_10008412C();
  uint64_t v5 = v4;
  sub_100010BC4();
  void *v6 = v5;
  uint64_t v7 = *(void **)(v1 + 16);
  void *v6 = *v2;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  sub_100084824();
  if (v3)
  {
    uint64_t v8 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    uint64_t v9 = sub_10008436C();
    v10(v9);
  }
  else
  {
    uint64_t v11 = sub_100084380();
    v12(v11);
  }
  _Block_release(*(const void **)(v5 + 24));
  sub_100084394();
  sub_100084D74();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20);
}

uint64_t sub_1000E0A40()
{
  *(void *)(v1 + 16) = v0;
  return sub_100084120((uint64_t)sub_1000E0A58);
}

uint64_t sub_1000E0A58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_10000EC58();
  uint64_t v23 = *(char **)(v22 + 16);
  uint64_t v24 = *(void *)&v23[OBJC_IVAR____TtC10LinkDaemon8Registry_ready];
  *(void *)(v22 + 24) = v24;
  if (v24)
  {
    swift_retain();
    uint64_t v25 = swift_task_alloc();
    uint64_t v26 = (void *)sub_1000EF0D0(v25);
    *uint64_t v26 = v27;
    v26[1] = sub_1000E0BA8;
    sub_1000843A4();
    return Task<>.value.getter(v28, v29, v30, v31, v32, v33, v34, v35, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22);
  }
  else
  {
    uint64_t v36 = self;
    uint64_t v37 = v23;
    sub_1000EEEDC((uint64_t)[v36 currentConnection]);
    uint64_t v38 = swift_task_alloc();
    uint64_t v39 = (void *)sub_1000EED44(v38);
    void *v39 = v40;
    v39[1] = sub_1000E0D50;
    sub_1000EF17C();
    return sub_1000C9DA0(v41, v42, v43, v44, v45, v46);
  }
}

uint64_t sub_1000E0BA8()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000E0C8C()
{
  sub_10000EC58();
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = self;
  id v3 = v1;
  sub_1000EEEDC((uint64_t)[v2 currentConnection]);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_1000EED44(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_1000E0D50;
  sub_1000EF17C();
  return sub_1000C9DA0(v7, v8, v9, v10, v11, v12);
}

uint64_t sub_1000E0D50()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v3 = v2;
  sub_100060250();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_100010BC4();
  void *v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (!v0) {

  }
  sub_100060358();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000E0E34(uint64_t a1, uint64_t a2)
{
  v2[2] = a2;
  uint64_t v3 = type metadata accessor for Logger();
  v2[3] = v3;
  v2[4] = *(void *)(v3 - 8);
  v2[5] = swift_task_alloc();
  return _swift_task_switch(sub_1000E0EF4, 0, 0);
}

uint64_t sub_1000E0EF4()
{
  sub_100084274();
  sub_100013E0C();
  uint64_t v2 = off_10017C4C0;
  id v3 = *(id *)(v1 + 16);
  if (v2 == (void *)-1)
  {
    uint64_t v4 = v3;
  }
  else
  {
    swift_once();
    uint64_t v4 = *(void **)(v1 + 16);
  }
  sub_1000EFC28();
  *(void *)(v1 + 48) = sub_10000BEE4(v0, (uint64_t)qword_100181FD0);
  uint64_t v5 = sub_1000EED50();
  v6(v5);

  uint64_t v7 = (void *)Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (sub_1000A3E04(v8))
  {
    uint64_t v9 = (_WORD *)sub_1000EECD0();
    sub_1000EF048(v9);
    sub_1000EE99C((void *)&_mh_execute_header, v10, v11, "Resetting the metadata store");
    sub_10000EB10();
  }
  uint64_t v12 = *(void *)(v1 + 16);

  uint64_t v13 = sub_1000EECF4();
  v14(v13);
  *(void *)(v1 + 56) = *(void *)(v12 + OBJC_IVAR____TtC10LinkDaemon8Registry_indexingQueue);
  sub_100084200();
  return _swift_task_switch(v15, v16, v17);
}

uint64_t sub_1000E101C()
{
  *(unsigned char *)(*(void *)(v0 + 56) + 144) = 1;
  return sub_100084120((uint64_t)sub_1000E103C);
}

uint64_t sub_1000E103C()
{
  sub_10006039C();
  uint64_t v1 = *(void *)(v0 + 16);
  type metadata accessor for MetadataStore();
  sub_10006CE2C(*(void *)(v1 + OBJC_IVAR____TtC10LinkDaemon8Registry_store));
  uint64_t v2 = (void *)Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (sub_1000A3E04(v3))
  {
    uint64_t v4 = (_WORD *)sub_1000EECD0();
    sub_1000EF048(v4);
    sub_1000EE99C((void *)&_mh_execute_header, v5, v6, "Finished resetting the metadata store");
    sub_10000EB10();
  }

  swift_task_dealloc();
  sub_100070028();
  return v7();
}

uint64_t sub_1000E1138(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1000EE3C4;
  return sub_1000E0A40();
}

uint64_t sub_1000E11E0()
{
  sub_10000EC58();
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for OSSignpostID();
  v1[3] = v2;
  sub_1000282DC(v2);
  v1[4] = v3;
  v1[5] = sub_1000EF3F0();
  sub_100060358();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_1000E126C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_10000EC58();
  uint64_t v23 = *(void *)(v22[2] + OBJC_IVAR____TtC10LinkDaemon8Registry_ready);
  v22[6] = v23;
  if (v23)
  {
    swift_retain();
    uint64_t v24 = (void *)swift_task_alloc();
    v22[7] = v24;
    *uint64_t v24 = v22;
    v24[1] = sub_1000E13E0;
    sub_1000843A4();
    return Task<>.value.getter(v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22);
  }
  else
  {
    static OSSignpostID.exclusive.getter();
    sub_1000B4C38();
    v22[8] = v33;
    uint64_t v34 = swift_task_alloc();
    uint64_t v35 = (void *)sub_1000EF3BC(v34);
    *uint64_t v35 = v36;
    v35[1] = sub_1000E15A4;
    sub_100060358();
    return sub_1000B7E14(v37, v38, v39);
  }
}

uint64_t sub_1000E13E0()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000E14C4()
{
  sub_10000EC58();
  static OSSignpostID.exclusive.getter();
  sub_1000B4C38();
  *(void *)(v0 + 64) = v1;
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)sub_1000EF3BC(v2);
  *uint64_t v3 = v4;
  v3[1] = sub_1000E15A4;
  sub_100060358();
  return sub_1000B7E14(v5, v6, v7);
}

uint64_t sub_1000E15A4()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *v0;
  sub_100010BC4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_100060358();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000E166C()
{
  sub_10006039C();
  sub_1000EFC28();
  sub_1000E30D4();
  swift_release();
  uint64_t v0 = sub_1000EECF4();
  v1(v0);
  swift_task_dealloc();
  sub_100070028();
  return v2();
}

uint64_t sub_1000E1744(void *a1, int a2, void *aBlock)
{
  uint64_t v4 = _Block_copy(aBlock);
  sub_100070048();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = a1;
  id v6 = a1;
  uint64_t v7 = sub_10000EBA4();

  return sub_1000F7D3C(v7, v8);
}

uint64_t sub_1000E17A8(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1000E1850;
  return sub_1000E11E0();
}

uint64_t sub_1000E1850()
{
  sub_100084274();
  sub_100013E0C();
  uint64_t v3 = v0;
  sub_10008412C();
  uint64_t v5 = v4;
  sub_100010BC4();
  void *v6 = v5;
  uint64_t v7 = *(void **)(v1 + 16);
  void *v6 = *v2;
  swift_task_dealloc();

  sub_100084824();
  if (v3)
  {
    uint64_t v8 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    uint64_t v9 = sub_10008436C();
    v10(v9);
  }
  else
  {
    uint64_t v11 = sub_100084380();
    v12(v11);
  }
  _Block_release(*(const void **)(v5 + 24));
  sub_100084394();
  sub_100084200();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20);
}

uint64_t sub_1000E1978(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100084120((uint64_t)sub_1000E1994);
}

uint64_t sub_1000E1994()
{
  sub_1000700D0();
  sub_1000EF73C();
  _StringGuts.grow(_:)(25);
  int v2 = swift_bridgeObjectRelease();
  sub_1000EEF10(v2, v3, v4, v5, v6, v7, v8, v9, v18, v19, v21);
  sub_1000EF754();
  v0[5] = v22;
  uint64_t v10 = self;
  id v11 = v1;
  swift_bridgeObjectRetain();
  id v12 = [v10 currentConnection];
  v0[6] = v12;
  uint64_t v13 = (void *)swift_task_alloc();
  v0[7] = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_1000E1AB8;
  uint64_t v15 = v0[3];
  uint64_t v14 = v0[4];
  uint64_t v16 = v0[2];
  return sub_1000CA538((uint64_t)v13, (uint64_t)v12, v20, v22, v14, v14, v16, v15);
}

uint64_t sub_1000E1AB8()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v3 = v2;
  sub_100060250();
  *int v4 = v3;
  uint64_t v5 = *v1;
  sub_100010BC4();
  void *v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (!v0)
  {

    swift_bridgeObjectRelease();
  }
  sub_100060358();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000E1BA4()
{
  sub_10000EC58();

  swift_bridgeObjectRelease();
  sub_10000EB74();
  return v1();
}

uint64_t sub_1000E1C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[11] = a3;
  v4[12] = a4;
  v4[10] = a2;
  return _swift_task_switch(sub_1000E1C2C, 0, 0);
}

uint64_t sub_1000E1C2C()
{
  sub_10006039C();
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v1 = *(void *)(v0 + 96);
  sub_10000BF1C((uint64_t *)&unk_10017E690);
  uint64_t v3 = swift_allocObject();
  *(void *)(v0 + 104) = v3;
  *(_OWORD *)(v3 + 16) = xmmword_10013EF20;
  *(void *)(v3 + 32) = v2;
  *(void *)(v3 + 40) = v1;
  *(unsigned char *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = _swiftEmptyArrayStorage;
  *(void *)(v0 + 32) = v3;
  *(_OWORD *)(v0 + 40) = xmmword_10013D670;
  *(unsigned char *)(v0 + 56) = 0;
  *(void *)(v0 + 64) = 0;
  *(void *)(v0 + 72) = 0;
  swift_bridgeObjectRetain();
  int v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v4;
  *int v4 = v0;
  v4[1] = sub_1000E1D34;
  uint64_t v5 = sub_1000EF0E8();
  return sub_1000BDDA0(v5, v6);
}

uint64_t sub_1000E1D34()
{
  sub_10006039C();
  sub_100010BAC();
  uint64_t v3 = v2;
  sub_100060250();
  *int v4 = v3;
  uint64_t v5 = *v1;
  sub_100010BC4();
  void *v6 = v5;
  *(void *)(v3 + 120) = v7;
  *(void *)(v3 + 128) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000EF284();
    swift_bridgeObjectRelease();
  }
  sub_100060358();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_1000E1E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_100084668();
  a25 = v27;
  a26 = v28;
  sub_100084D3C();
  a24 = v26;
  uint64_t v29 = *(void *)(*(void *)(v26 + 80) + OBJC_IVAR____TtC10LinkDaemon8Registry_observers);
  uint64_t v30 = *(void *)(v26 + 120);
  uint64_t v46 = *(void *)(v29 + 16);
  if (v46)
  {
    uint64_t v31 = *(void *)(v30 + 16);
    a11 = v29 + 32;
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v33 = 0;
    a10 = v30 + 40;
    while (v33 < *(void *)(v29 + 16))
    {
      sub_10000BEA0((void *)(a11 + 40 * v33), *(void *)(a11 + 40 * v33 + 24));
      swift_bridgeObjectRetain();
      a13 = Set.init(minimumCapacity:)();
      uint64_t v34 = (uint64_t *)(v30 + 40);
      for (uint64_t i = v31; i; --i)
      {
        uint64_t v36 = *(v34 - 1);
        uint64_t v37 = *v34;
        swift_bridgeObjectRetain();
        sub_100023984(&a14, v36, v37);
        swift_bridgeObjectRelease();
        v34 += 2;
      }
      swift_bridgeObjectRelease();
      ++v33;
      sub_10008023C();
      uint64_t result = swift_bridgeObjectRelease();
      if (v33 == v46)
      {
        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
    sub_100070028();
    sub_100084164();
    return v39(v38, v39, v40, v41, v42, v43, v44, v45, a9, a10, a11, v46, a13, a14, a15, a16, a17, a18);
  }
  return result;
}

uint64_t sub_1000E1FC8()
{
  sub_10000EC58();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000EF284();
  sub_10000EB74();
  return v0();
}

uint64_t sub_1000E2058(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v3[4] = v6;
  a3;
  uint64_t v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_1000EE464;
  return sub_1000E1978(v5, v7);
}

uint64_t sub_1000E212C()
{
  return sub_1000C459C();
}

uint64_t sub_1000E2144()
{
  return 1;
}

_UNKNOWN **sub_1000E216C()
{
  uint64_t result = sub_1000E218C();
  qword_100182008 = (uint64_t)result;
  return result;
}

_UNKNOWN **sub_1000E218C()
{
  return &off_10016EC50;
}

uint64_t sub_1000E21D0()
{
  if (qword_10017C4D8 != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

uint64_t sub_1000E222C(void *a1, void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = a1[3];
  uint64_t v7 = a1[4];
  sub_10000BEA0(a1, v8);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)(v7 + 8) + 8))(v8);
  uint64_t v11 = v10;
  uint64_t v12 = a2[2];
  if (!v12) {
    goto LABEL_17;
  }
  uint64_t v13 = v9;
  if (a2[4] == v9 && a2[5] == v10) {
    return swift_bridgeObjectRelease();
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return swift_bridgeObjectRelease();
  }
  if (v12 == 1)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    uint64_t v21 = a1[3];
    uint64_t v20 = a1[4];
    sub_10000BEA0(a1, v21);
    (*(void (**)(uint64_t))(*(void *)(v20 + 8) + 8))(v21);
    sub_10001D15C();
    char v23 = v22;
    uint64_t result = swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {
      sub_10000C0D4((uint64_t)a1, (uint64_t)v31);
      swift_beginAccess();
      sub_1000E6330((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10001E7AC);
      uint64_t v24 = *(void *)(*a4 + 16);
      sub_1000E63A4(v24, (uint64_t (*)(BOOL))sub_10001E7AC);
      uint64_t v25 = sub_10005FFB0((uint64_t)v31, v32);
      double v26 = __chkstk_darwin(v25);
      uint64_t v28 = v31 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0) + 22;
      (*(void (**)(unsigned char *, double))(v29 + 16))(v28, v26);
      sub_1000E8AF8(v24, (uint64_t)v28, a4);
      sub_10000E788((uint64_t)v31);
      return swift_endAccess();
    }
  }
  else
  {
    uint64_t v16 = a2 + 7;
    uint64_t v17 = 1;
    while (1)
    {
      uint64_t v18 = v17 + 1;
      if (__OFADD__(v17, 1)) {
        break;
      }
      if (*(v16 - 1) == v13 && *v16 == v11) {
        return swift_bridgeObjectRelease();
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (result) {
        return swift_bridgeObjectRelease();
      }
      v16 += 2;
      ++v17;
      if (v18 == v12) {
        goto LABEL_17;
      }
    }
    __break(1u);
  }
  return result;
}

void sub_1000E24AC()
{
  sub_10000E990();
  uint64_t v3 = v2;
  uint64_t v34 = v4;
  unint64_t v35 = v5;
  uint64_t v7 = v6;
  uint64_t v8 = type metadata accessor for Logger();
  sub_100028430();
  __chkstk_darwin(v9);
  sub_1000EF4AC();
  sub_100028430();
  __chkstk_darwin(v10);
  sub_1000EF484();
  sub_1000EF0E8();
  sub_1000B4C38();
  uint64_t v11 = sub_1000EF59C();
  v12(v11);
  uint64_t v13 = off_10017C4C0;
  id v14 = v0;
  if (v13 != (void *)-1) {
    swift_once();
  }
  sub_10000BEE4(v8, (uint64_t)qword_100181FD0);
  sub_1000EF0F4();
  v15();

  swift_bridgeObjectRetain_n();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  unint64_t v18 = v35;
  if (os_log_type_enabled(v16, v17))
  {
    os_log_type_t v31 = v17;
    uint64_t v32 = v16;
    uint64_t v33 = v3;
    uint64_t v19 = (uint8_t *)sub_1000536D0();
    uint64_t v36 = sub_100060438();
    *(_DWORD *)uint64_t v19 = 136315138;
    uint64_t v20 = *(void *)(v7 + 16);
    uint64_t v21 = v34;
    if (v20)
    {
      sub_100057848();
      uint64_t v22 = v7 + 40;
      do
      {
        uint64_t v37 = 34;
        uint64_t v38 = (void *)0xE100000000000000;
        swift_bridgeObjectRetain();
        v23._uint64_t countAndFlagsBits = sub_1000EF10C();
        String.append(_:)(v23);
        sub_1000EF754();
        swift_bridgeObjectRelease();
        unint64_t v24 = _swiftEmptyArrayStorage[2];
        if (v24 >= _swiftEmptyArrayStorage[3] >> 1) {
          sub_100057848();
        }
        v22 += 16;
        _swiftEmptyArrayStorage[2] = v24 + 1;
        uint64_t v25 = &_swiftEmptyArrayStorage[2 * v24];
        v25[4] = 34;
        v25[5] = 0xE100000000000000;
        --v20;
      }
      while (v20);
      uint64_t v21 = v34;
      unint64_t v18 = v35;
    }
    uint64_t v37 = (uint64_t)_swiftEmptyArrayStorage;
    sub_10000BF1C(&qword_10017DED8);
    sub_100034754((unint64_t *)&qword_10017EC90, &qword_10017DED8);
    BidirectionalCollection<>.joined(separator:)();
    sub_1000EFA20();
    uint64_t v27 = swift_bridgeObjectRelease();
    uint64_t v37 = sub_1000F00C4(v27, v28, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_1000EEDD0();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v32, v31, "Detected uninstalled bundle(s): %s", v19, 0xCu);
    swift_arrayDestroy();
    sub_10000EB10();
    sub_10000EB10();

    sub_1000EEF84();
    v29();
    uint64_t v3 = v33;
  }
  else
  {

    sub_1000EEDD0();
    sub_1000EEC10();
    sub_1000EEF84();
    v26();
    uint64_t v21 = v34;
  }
  if (v3) {
    os_transaction_needs_more_time();
  }
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = v3;
  *(void *)(v30 + 24) = v1;
  LOBYTE(v37) = 0;
  uint64_t v38 = _swiftEmptyArrayStorage;
  uint64_t v39 = v7;
  uint64_t v40 = v21;
  unint64_t v41 = v18;
  char v42 = 0;
  uint64_t v43 = sub_1000EAB6C;
  uint64_t v44 = v30;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_retain();
  sub_10000DADC(v21, v18);
  sub_1000BCB70();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000F0104(v21);
  sub_10000E930();
}

void sub_1000E2940()
{
  sub_10000E990();
  uint64_t v3 = v2;
  uint64_t v35 = v4;
  unint64_t v36 = v5;
  uint64_t v7 = v6;
  uint64_t v8 = type metadata accessor for Logger();
  sub_100028430();
  __chkstk_darwin(v9);
  sub_1000EF4AC();
  sub_100028430();
  __chkstk_darwin(v10);
  sub_1000EF484();
  sub_1000B4C38();
  uint64_t v11 = sub_1000EF59C();
  v12(v11);
  uint64_t v13 = off_10017C4C0;
  id v14 = v0;
  if (v13 != (void *)-1) {
    swift_once();
  }
  sub_10000BEE4(v8, (uint64_t)qword_100181FD0);
  sub_1000EF0F4();
  v15();

  swift_bridgeObjectRetain_n();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v33 = v1;
    uint64_t v34 = v3;
    unint64_t v18 = (uint8_t *)sub_1000536D0();
    uint64_t v37 = sub_100060438();
    *(_DWORD *)unint64_t v18 = 136315138;
    uint64_t v19 = *(void *)(v7 + 16);
    if (v19)
    {
      sub_100057848();
      uint64_t v20 = v7 + 32;
      do
      {
        sub_10000C0D4(v20, (uint64_t)v38);
        uint64_t v21 = sub_1000EEA2C(v38);
        v23._uint64_t countAndFlagsBits = v22(v21);
        String.append(_:)(v23);
        swift_bridgeObjectRelease();
        sub_1000EF754();
        sub_10000E788((uint64_t)v38);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_100057848();
        }
        unint64_t v24 = _swiftEmptyArrayStorage[2];
        if (v24 >= _swiftEmptyArrayStorage[3] >> 1) {
          sub_100057848();
        }
        _swiftEmptyArrayStorage[2] = v24 + 1;
        uint64_t v25 = &_swiftEmptyArrayStorage[2 * v24];
        v25[4] = 34;
        v25[5] = 0xE100000000000000;
        v20 += 40;
        --v19;
      }
      while (v19);
      uint64_t v28 = v35;
      unint64_t v27 = v36;
    }
    else
    {
      uint64_t v28 = v35;
      unint64_t v27 = v36;
    }
    v38[0] = _swiftEmptyArrayStorage;
    sub_10000BF1C(&qword_10017DED8);
    sub_100034754((unint64_t *)&qword_10017EC90, &qword_10017DED8);
    BidirectionalCollection<>.joined(separator:)();
    sub_1000EFA20();
    uint64_t v29 = swift_bridgeObjectRelease();
    v38[0] = sub_1000F00C4(v29, v30, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_1000EEDD0();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "App Intents enabled bundle(s) installed: %s", v18, 0xCu);
    swift_arrayDestroy();
    sub_10000EB10();
    sub_10000EB10();

    sub_100013EC4();
    v31();
    uint64_t v1 = v33;
    uint64_t v3 = v34;
  }
  else
  {

    sub_1000EEDD0();
    sub_1000EFAC8();
    sub_1000EEF84();
    v26();
    uint64_t v28 = v35;
    unint64_t v27 = v36;
  }
  if (v3) {
    os_transaction_needs_more_time();
  }
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = v3;
  *(void *)(v32 + 24) = v1;
  LOBYTE(v38[0]) = 0;
  v38[1] = v7;
  v38[2] = _swiftEmptyArrayStorage;
  v38[3] = v28;
  v38[4] = v27;
  char v39 = 0;
  uint64_t v40 = sub_1000EAADC;
  uint64_t v41 = v32;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_retain();
  sub_10000DADC(v28, v27);
  sub_1000BCB70();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000F0104(v28);
  sub_10000E930();
}

void sub_1000E2E14()
{
  sub_10000E990();
  char v3 = v2;
  uint64_t v4 = type metadata accessor for OSSignpostError();
  sub_100028430();
  uint64_t v20 = v5;
  __chkstk_darwin(v6);
  sub_1000EEE90();
  uint64_t v21 = type metadata accessor for OSSignpostID();
  sub_100028430();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  uint64_t v10 = sub_1000EF45C();
  sub_100028430();
  __chkstk_darwin(v11);
  sub_100018E60();
  if (qword_10017C5B8 != -1) {
    swift_once();
  }
  sub_10000BEE4(v10, (uint64_t)qword_100182420);
  sub_1000EF0F4();
  v12();
  uint64_t v19 = off_100172B00[v3];
  uint64_t v13 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  os_signpost_type_t v18 = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v20 + 88))(v1, v4) == enum case for OSSignpostError.doubleEnd(_:))
    {
      id v14 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v1, v4);
      id v14 = "";
    }
    uint64_t v15 = (uint8_t *)sub_1000EECD0();
    *(_WORD *)uint64_t v15 = 0;
    os_signpost_id_t v16 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, v18, v16, v19, v14, v15, 2u);
    sub_10000EB10();
  }

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0, v21);
  sub_1000847DC();
  v17();
  sub_10000E930();
}

void sub_1000E309C()
{
}

void sub_1000E30D4()
{
  sub_10000E990();
  char v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = type metadata accessor for OSSignpostError();
  sub_100028430();
  uint64_t v28 = v10;
  __chkstk_darwin(v11);
  sub_1000EF440();
  uint64_t v29 = type metadata accessor for OSSignpostID();
  sub_100028430();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  os_signpost_id_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*v6 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for OSSignposter();
  sub_10000BEE4(v17, v4);
  unint64_t v18 = v2(v8);
  char v20 = v19;
  uint64_t v21 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  os_signpost_type_t v22 = static os_signpost_type_t.end.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0) {
    goto LABEL_15;
  }
  if ((v20 & 1) == 0)
  {
    if (v18)
    {
LABEL_11:
      swift_retain();
      checkForErrorAndConsumeState(state:)();
      swift_release();
      uint64_t v23 = v28;
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v28 + 88))(v0, v9) == enum case for OSSignpostError.doubleEnd(_:))
      {
        unint64_t v24 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v0, v9);
        unint64_t v24 = "";
      }
      uint64_t v25 = (uint8_t *)sub_1000EECD0();
      *(_WORD *)uint64_t v25 = 0;
      os_signpost_id_t v26 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, v22, v26, (const char *)v18, v24, v25, 2u);
      sub_10000EB10();
LABEL_15:

      (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v29);
      sub_10000E930();
      return;
    }
    __break(1u);
  }
  if (HIDWORD(v18))
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v18 >> 11 != 27)
  {
    if (WORD1(v18) <= 0x10u)
    {
      unint64_t v18 = (unint64_t)&v30;
      goto LABEL_11;
    }
    goto LABEL_17;
  }
LABEL_18:
  __break(1u);
}

uint64_t sub_1000E3338()
{
  return sub_1000E21D0();
}

uint64_t sub_1000E3350(void *a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  uint64_t v5 = sub_10000BEA0(a1, a1[3]);
  long long v6 = *((_OWORD *)v5 + 1);
  v8[0] = *(_OWORD *)v5;
  v8[1] = v6;
  uint64_t v9 = v5[4];
  return sub_1000E9678((uint64_t)v8, a2, v4);
}

uint64_t sub_1000E33A4()
{
  return sub_10000EBA4();
}

uint64_t sub_1000E33D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000A3B4C(v2 + *(int *)(a1 + 20), a2, (uint64_t *)&unk_10017D0C0);
}

uint64_t sub_1000E33FC(uint64_t a1)
{
  uint64_t v2 = v1 + *(int *)(a1 + 24);
  uint64_t v3 = *(void *)v2;
  sub_10000DADC(*(void *)v2, *(void *)(v2 + 8));
  return v3;
}

uint64_t sub_1000E3438()
{
  id v0 = [self defaultWorkspace];
  if (!v0) {
    __break(1u);
  }
  uint64_t v1 = v0;
  id v15 = 0;
  v16[0] = 0;
  [v0 getKnowledgeUUID:v16 andSequenceNumber:&v15];

  id v2 = v15;
  uint64_t v3 = (void *)v16[0];
  if (v16[0])
  {
    id v4 = v15;
    id v5 = v3;
    uint64_t v6 = sub_1000E3598();
    uint64_t v8 = v7;
  }
  else
  {
    type metadata accessor for __DataStorage();
    swift_allocObject();
    id v9 = v2;
    uint64_t v8 = __DataStorage.init(length:)() | 0x4000000000000000;
    uint64_t v6 = 0x1000000000;
  }
  v16[0] = v6;
  v16[1] = v8;
  if (v2) {
    id v10 = [v2 unsignedLongLongValue];
  }
  else {
    id v10 = 0;
  }
  id v15 = v10;
  uint64_t v11 = sub_1000E5F3C((uint64_t)&v15, (uint64_t)v16);
  unint64_t v13 = v12;
  Data.append(_:)();
  sub_10000DA10(v11, v13);

  return v16[0];
}

uint64_t sub_1000E3598()
{
  uint64_t v1 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
  v1[2] = 16;
  v1[5] = 0;
  v1[4] = 0;
  [v0 getUUIDBytes:v1 + 4];

  return sub_1000E5E7C((uint64_t)v1);
}

void sub_1000E3608(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = v4;
  int v134 = a4;
  uint64_t v135 = a3;
  uint64_t v136 = a2;
  uint64_t v6 = sub_10000BF1C((uint64_t *)&unk_10017F950);
  __chkstk_darwin(v6 - 8);
  uint64_t v129 = (uint64_t)&v118 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  Swift::Int v133 = (char *)&v118 - v9;
  uint64_t v10 = sub_10000BF1C(&qword_10017EB18);
  __chkstk_darwin(v10 - 8);
  Swift::Bool v122 = (char *)&v118 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v121 = (char *)&v118 - v13;
  __chkstk_darwin(v14);
  uint64_t v127 = (char *)&v118 - v15;
  __chkstk_darwin(v16);
  os_log_t v125 = (char *)&v118 - v17;
  __chkstk_darwin(v18);
  char v20 = (char *)&v118 - v19;
  uint64_t v21 = type metadata accessor for LSLinkBundleRecord(0);
  __chkstk_darwin(v21);
  uint64_t v120 = (char *)&v118 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v119 = (char *)&v118 - v24;
  __chkstk_darwin(v25);
  uint64_t v123 = (char *)&v118 - v26;
  __chkstk_darwin(v27);
  int v124 = (char *)&v118 - v28;
  __chkstk_darwin(v29);
  id v132 = (char *)&v118 - v30;
  type metadata accessor for DaemonRecord();
  unint64_t v31 = static DaemonRecord.enumerated.getter();
  sub_10000D9D4(0, (unint64_t *)&unk_10017F960);
  unint64_t v32 = static LSApplicationExtensionRecord.enumeratedStandaloneAppIntentsExtensions.getter();
  id v33 = [self enumeratorWithOptions:0];
  uint64_t v34 = &selRef_initWithConnection_options_error_;
  id v126 = v33;
  uint64_t v141 = v21;
  do
  {
    id v36 = [v33 v34[271]];
    id v37 = v36;
    if (v36)
    {
      uint64_t v137 = v35;
      id v38 = v36;
      sub_1000B5418();
      if (sub_10000D5D8((uint64_t)v20, 1, v21) == 1)
      {

        sub_1000347E8((uint64_t)v20, &qword_10017EB18);
      }
      else
      {
        char v39 = v20;
        uint64_t v40 = (uint64_t)v132;
        uint64_t v41 = sub_1000EA1A4();
        __chkstk_darwin(v41);
        *(&v118 - 2) = v40;
        swift_bridgeObjectRetain();
        unint64_t v31 = (unint64_t)sub_1000B2AE8((uint64_t (*)(void))sub_1000EE3C8, &v118 - 4, v31);
        uint64_t v42 = swift_bridgeObjectRelease();
        __chkstk_darwin(v42);
        *(&v118 - 2) = v40;
        swift_bridgeObjectRetain();
        uint64_t v43 = sub_1000B2AE8((uint64_t (*)(void))sub_1000EE3E4, &v118 - 4, v32);
        swift_bridgeObjectRelease();
        uint64_t v139 = v141;
        uint64_t v140 = &off_100172A40;
        sub_1000274F4(v138);
        sub_1000E8894();
        sub_1000E222C(v138, v136, v135, v134);
        if (v4)
        {

          sub_1000E88E0(v40, (void (*)(void))type metadata accessor for LSLinkBundleRecord);
          sub_10000E788((uint64_t)v138);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          return;
        }

        sub_1000E88E0(v40, (void (*)(void))type metadata accessor for LSLinkBundleRecord);
        sub_10000E788((uint64_t)v138);
        unint64_t v32 = (unint64_t)v43;
        id v33 = v126;
        uint64_t v21 = v141;
        char v20 = v39;
        uint64_t v34 = &selRef_initWithConnection_options_error_;
      }
      uint64_t v35 = v137;
    }
  }
  while (v37);
  unint64_t v44 = swift_bridgeObjectRetain();
  uint64_t v45 = sub_1000B3958(v44, (uint64_t (*)(void))&LSApplicationExtensionRecord.attributionBundleIdentifier.getter);
  unint64_t v131 = v32;
  swift_bridgeObjectRelease();
  uint64_t v46 = sub_1000B1CE0((uint64_t)v45);
  unint64_t v47 = swift_bridgeObjectRetain();
  uint64_t v48 = sub_1000B3958(v47, (uint64_t (*)(void))&DaemonRecord.attributionBundleIdentifier.getter);
  unint64_t v130 = v31;
  swift_bridgeObjectRelease();
  uint64_t v49 = sub_1000B1CE0((uint64_t)v48);
  uint64_t v50 = sub_100071038(v49, v46);
  uint64_t v51 = 0;
  uint64_t v52 = *(void *)(v50 + 56);
  id v132 = (char *)(v50 + 56);
  uint64_t v53 = 1 << *(unsigned char *)(v50 + 32);
  uint64_t v54 = -1;
  if (v53 < 64) {
    uint64_t v54 = ~(-1 << v53);
  }
  unint64_t v55 = v54 & v52;
  uint64_t v137 = (void *)((unint64_t)(v53 + 63) >> 6);
  id v56 = &qword_10017E2E0;
  uint64_t v57 = v125;
  uint64_t v128 = v50;
  if ((v54 & v52) == 0) {
    goto LABEL_13;
  }
LABEL_12:
  for (v55 &= v55 - 1; ; unint64_t v55 = (v59 - 1) & v59)
  {
    swift_bridgeObjectRetain();
    sub_10000D9D4(0, v56);
    uint64_t v62 = (void *)static LSBundleRecord.with(bundleIdentifier:allowSystemAppPlaceholder:)();
    if (v5)
    {
      swift_errorRelease();
      uint64_t v5 = 0;
    }
    else
    {
      uint64_t v63 = v56;
      id v64 = v62;
      sub_1000B5418();
      uint64_t v65 = (uint64_t)v57;
      uint64_t v66 = (uint64_t)v57;
      uint64_t v67 = v141;
      if (sub_10000D5D8(v65, 1, v141) == 1)
      {

        sub_1000347E8(v66, &qword_10017EB18);
        uint64_t v57 = (char *)v66;
      }
      else
      {
        uint64_t v68 = (uint64_t)v124;
        sub_1000EA1A4();
        uint64_t v139 = v67;
        uint64_t v140 = &off_100172A40;
        sub_1000274F4(v138);
        sub_1000E8894();
        sub_1000E222C(v138, v136, v135, v134);

        sub_1000E88E0(v68, (void (*)(void))type metadata accessor for LSLinkBundleRecord);
        sub_10000E788((uint64_t)v138);
        uint64_t v57 = v125;
      }
      id v56 = v63;
    }
    swift_bridgeObjectRelease();
    if (v55) {
      goto LABEL_12;
    }
LABEL_13:
    if (__OFADD__(v51++, 1))
    {
      __break(1u);
      goto LABEL_104;
    }
    if (v51 >= (uint64_t)v137)
    {
      unint64_t v55 = v131;
      goto LABEL_37;
    }
    unint64_t v55 = v131;
    uint64_t v59 = *(void *)&v132[8 * v51];
    if (!v59) {
      break;
    }
LABEL_23:
    ;
  }
  uint64_t v60 = v51 + 1;
  if (v51 + 1 >= (uint64_t)v137) {
    goto LABEL_37;
  }
  uint64_t v59 = *(void *)&v132[8 * v60];
  if (v59) {
    goto LABEL_22;
  }
  uint64_t v60 = v51 + 2;
  if (v51 + 2 >= (uint64_t)v137) {
    goto LABEL_37;
  }
  uint64_t v59 = *(void *)&v132[8 * v60];
  if (v59) {
    goto LABEL_22;
  }
  uint64_t v60 = v51 + 3;
  if (v51 + 3 >= (uint64_t)v137) {
    goto LABEL_37;
  }
  uint64_t v59 = *(void *)&v132[8 * v60];
  if (v59)
  {
LABEL_22:
    uint64_t v51 = v60;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v51 = v60 + 1;
    if (__OFADD__(v60, 1)) {
      goto LABEL_107;
    }
    if (v51 >= (uint64_t)v137) {
      break;
    }
    uint64_t v59 = *(void *)&v132[8 * v51];
    ++v60;
    if (v59) {
      goto LABEL_23;
    }
  }
LABEL_37:
  swift_release();
  if (v55 >> 62) {
    goto LABEL_108;
  }
  uint64_t v69 = *(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v69) {
    goto LABEL_51;
  }
LABEL_39:
  uint64_t v70 = 4;
  while (2)
  {
    if ((v55 & 0xC000000000000001) != 0) {
      id v71 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v71 = *(id *)(v55 + 8 * v70);
    }
    uint64_t v72 = v71;
    uint64_t v73 = v70 - 3;
    if (__OFADD__(v70 - 4, 1))
    {
LABEL_104:
      __break(1u);
      goto LABEL_105;
    }
    LSApplicationExtensionRecord.attributionBundleIdentifier.getter();
    uint64_t v75 = v74;
    swift_bridgeObjectRelease();
    if (v75)
    {

      goto LABEL_50;
    }
    id v76 = v72;
    uint64_t v77 = (uint64_t)v122;
    sub_1000B5418();
    uint64_t v78 = v141;
    if (sub_10000D5D8(v77, 1, v141) == 1)
    {

      sub_1000347E8(v77, &qword_10017EB18);
      goto LABEL_50;
    }
    uint64_t v79 = (uint64_t)v120;
    sub_1000EA1A4();
    uint64_t v139 = v78;
    uint64_t v140 = &off_100172A40;
    sub_1000274F4(v138);
    sub_1000E8894();
    sub_1000E222C(v138, v136, v135, v134);
    if (!v5)
    {
      sub_1000E88E0(v79, (void (*)(void))type metadata accessor for LSLinkBundleRecord);

      sub_10000E788((uint64_t)v138);
LABEL_50:
      ++v70;
      if (v73 == v69)
      {
        while (1)
        {
LABEL_51:
          swift_bridgeObjectRelease();
          unint64_t v80 = v130;
          if (v130 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v81 = _CocoaArrayWrapper.endIndex.getter();
            if (!v81)
            {
LABEL_65:
              swift_bridgeObjectRelease();
              type metadata accessor for FrameworkRecord();
              uint64_t v91 = static FrameworkRecord.enumerated.getter();
              int64_t v92 = 0;
              uint64_t v93 = *(void *)(v91 + 64);
              uint64_t v137 = (void *)(v91 + 64);
              uint64_t v94 = 1 << *(unsigned char *)(v91 + 32);
              uint64_t v95 = -1;
              if (v94 < 64) {
                uint64_t v95 = ~(-1 << v94);
              }
              unint64_t v55 = v95 & v93;
              int64_t v96 = (unint64_t)(v94 + 63) >> 6;
              id v132 = (char *)(v96 - 1);
              uint64_t v97 = (uint64_t)v133;
              if ((v95 & v93) != 0)
              {
LABEL_68:
                unint64_t v98 = __clz(__rbit64(v55));
                v55 &= v55 - 1;
                unint64_t v99 = v98 | (v92 << 6);
                goto LABEL_69;
              }
              while (1)
              {
                int64_t v107 = v92 + 1;
                if (__OFADD__(v92, 1)) {
                  goto LABEL_106;
                }
                if (v107 < v96)
                {
                  unint64_t v108 = *((void *)v137 + v107);
                  if (v108) {
                    goto LABEL_73;
                  }
                  v92 += 2;
                  if (v107 + 1 >= v96)
                  {
                    int64_t v92 = v107;
                  }
                  else
                  {
                    unint64_t v108 = *((void *)v137 + v92);
                    if (v108)
                    {
                      ++v107;
                      goto LABEL_73;
                    }
                    if (v107 + 2 < v96)
                    {
                      unint64_t v108 = *((void *)v137 + v107 + 2);
                      if (v108)
                      {
                        v107 += 2;
                        goto LABEL_73;
                      }
                      int64_t v116 = v107 + 3;
                      if (v107 + 3 < v96)
                      {
                        unint64_t v108 = *((void *)v137 + v116);
                        if (v108)
                        {
                          v107 += 3;
LABEL_73:
                          unint64_t v55 = (v108 - 1) & v108;
                          unint64_t v99 = __clz(__rbit64(v108)) + (v107 << 6);
                          int64_t v92 = v107;
LABEL_69:
                          uint64_t v100 = *(void *)(v91 + 48);
                          uint64_t v101 = type metadata accessor for URL();
                          uint64_t v102 = v129;
                          (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v101 - 8) + 16))(v129, v100 + *(void *)(*(void *)(v101 - 8) + 72) * v99, v101);
                          uint64_t v103 = *(void *)(v91 + 56);
                          uint64_t v104 = sub_10000BF1C((uint64_t *)&unk_10017F970);
                          os_log_type_t v105 = *(void **)(v103 + 8 * v99);
                          *(void *)(v102 + *(int *)(v104 + 48)) = v105;
                          sub_10000D5B0(v102, 0, 1, v104);
                          id v106 = v105;
                          uint64_t v97 = (uint64_t)v133;
                          goto LABEL_79;
                        }
                        while (1)
                        {
                          int64_t v107 = v116 + 1;
                          if (__OFADD__(v116, 1)) {
                            break;
                          }
                          if (v107 >= v96)
                          {
                            int64_t v92 = (int64_t)v132;
                            goto LABEL_78;
                          }
                          unint64_t v108 = *((void *)v137 + v107);
                          ++v116;
                          if (v108) {
                            goto LABEL_73;
                          }
                        }
                        __break(1u);
                        return;
                      }
                      int64_t v92 = v107 + 2;
                    }
                  }
                }
LABEL_78:
                uint64_t v109 = sub_10000BF1C((uint64_t *)&unk_10017F970);
                uint64_t v102 = v129;
                sub_10000D5B0(v129, 1, 1, v109);
                unint64_t v55 = 0;
LABEL_79:
                sub_100083620(v102, v97, (uint64_t *)&unk_10017F950);
                uint64_t v110 = sub_10000BF1C((uint64_t *)&unk_10017F970);
                if (sub_10000D5D8(v97, 1, v110) == 1)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();

                  swift_release();
                  return;
                }
                id v111 = *(id *)(v97 + *(int *)(v110 + 48));
                uint64_t v112 = (uint64_t)v127;
                sub_1000E011C();
                uint64_t v113 = v141;
                if (sub_10000D5D8(v112, 1, v141) == 1)
                {

                  sub_1000347E8(v112, &qword_10017EB18);
                }
                else
                {
                  uint64_t v114 = (uint64_t)v123;
                  sub_1000EA1A4();
                  uint64_t v139 = v113;
                  uint64_t v140 = &off_100172A40;
                  sub_1000274F4(v138);
                  sub_1000E8894();
                  sub_1000E222C(v138, v136, v135, v134);
                  if (v5)
                  {

                    sub_1000E88E0(v114, (void (*)(void))type metadata accessor for LSLinkBundleRecord);
                    swift_release();
                    sub_10000E788((uint64_t)v138);
                    uint64_t v117 = type metadata accessor for URL();
                    (*(void (**)(char *, uint64_t))(*(void *)(v117 - 8) + 8))(v133, v117);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    goto LABEL_102;
                  }
                  sub_1000E88E0(v114, (void (*)(void))type metadata accessor for LSLinkBundleRecord);

                  sub_10000E788((uint64_t)v138);
                }
                uint64_t v115 = type metadata accessor for URL();
                uint64_t v97 = (uint64_t)v133;
                (*(void (**)(char *, uint64_t))(*(void *)(v115 - 8) + 8))(v133, v115);
                if (v55) {
                  goto LABEL_68;
                }
              }
            }
          }
          else
          {
            uint64_t v81 = *(void *)((v130 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
            if (!v81) {
              goto LABEL_65;
            }
          }
          unint64_t v82 = v80 & 0xC000000000000001;
          uint64_t v83 = 4;
          while (1)
          {
            id v84 = v82 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v130 + 8 * v83);
            uint64_t v85 = v84;
            uint64_t v86 = v83 - 3;
            if (__OFADD__(v83 - 4, 1)) {
              break;
            }
            DaemonRecord.attributionBundleIdentifier.getter();
            uint64_t v88 = v87;
            swift_bridgeObjectRelease();
            if (v88)
            {
            }
            else
            {
              id v76 = v85;
              uint64_t v89 = (uint64_t)v121;
              sub_1000DFC5C();
              uint64_t v90 = v141;
              if (sub_10000D5D8(v89, 1, v141) == 1)
              {

                sub_1000347E8(v89, &qword_10017EB18);
              }
              else
              {
                uint64_t v79 = (uint64_t)v119;
                sub_1000EA1A4();
                uint64_t v139 = v90;
                uint64_t v140 = &off_100172A40;
                sub_1000274F4(v138);
                sub_1000E8894();
                sub_1000E222C(v138, v136, v135, v134);
                if (v5) {
                  goto LABEL_101;
                }
                sub_1000E88E0(v79, (void (*)(void))type metadata accessor for LSLinkBundleRecord);

                sub_10000E788((uint64_t)v138);
              }
            }
            ++v83;
            if (v86 == v81) {
              goto LABEL_65;
            }
          }
LABEL_105:
          __break(1u);
LABEL_106:
          __break(1u);
LABEL_107:
          __break(1u);
LABEL_108:
          swift_bridgeObjectRetain();
          uint64_t v69 = _CocoaArrayWrapper.endIndex.getter();
          if (v69) {
            goto LABEL_39;
          }
        }
      }
      continue;
    }
    break;
  }
LABEL_101:

  sub_1000E88E0(v79, (void (*)(void))type metadata accessor for LSLinkBundleRecord);
  swift_bridgeObjectRelease();
  sub_10000E788((uint64_t)v138);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_102:
  swift_bridgeObjectRelease();
}

void sub_1000E46F8(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v145 = a4;
  uint64_t v146 = a5;
  uint64_t v143 = a2;
  uint64_t v144 = a3;
  uint64_t v6 = sub_10000BF1C((uint64_t *)&unk_10017F950);
  __chkstk_darwin(v6 - 8);
  uint64_t v138 = (char *)&v129 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v141 = (char *)&v129 - v9;
  uint64_t v10 = sub_10000BF1C(&qword_10017EB18);
  __chkstk_darwin(v10 - 8);
  id v132 = (char *)&v129 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  unint64_t v131 = (char *)&v129 - v13;
  __chkstk_darwin(v14);
  uint64_t v148 = (char *)&v129 - v15;
  __chkstk_darwin(v16);
  uint64_t v135 = (char *)&v129 - v17;
  __chkstk_darwin(v18);
  char v20 = (char *)&v129 - v19;
  uint64_t v21 = type metadata accessor for LSLinkBundleRecord(0);
  __chkstk_darwin(v21);
  unint64_t v130 = (char *)&v129 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v129 = (char *)&v129 - v24;
  __chkstk_darwin(v25);
  Swift::Int v133 = (char *)&v129 - v26;
  __chkstk_darwin(v27);
  int v134 = (char *)&v129 - v28;
  __chkstk_darwin(v29);
  uint64_t v140 = (char *)&v129 - v30;
  type metadata accessor for DaemonRecord();
  unint64_t v147 = static DaemonRecord.enumerated.getter();
  sub_10000D9D4(0, (unint64_t *)&unk_10017F960);
  unint64_t v139 = static LSApplicationExtensionRecord.enumeratedStandaloneAppIntentsExtensions.getter();
  id v31 = [self enumeratorWithOptions:0];
  unint64_t v32 = &selRef_initWithConnection_options_error_;
  id v136 = v31;
  uint64_t v152 = v21;
  uint64_t v33 = (uint64_t)v140;
  do
  {
    id v35 = [v31 v32[271]];
    id v36 = v35;
    if (v35)
    {
      id v37 = v35;
      sub_1000B5418();
      if (sub_10000D5D8((uint64_t)v20, 1, v21) == 1)
      {

        sub_1000347E8((uint64_t)v20, &qword_10017EB18);
      }
      else
      {
        id v142 = v34;
        id v38 = v20;
        uint64_t v39 = sub_1000EA1A4();
        __chkstk_darwin(v39);
        *(&v129 - 2) = (char *)v33;
        unint64_t v40 = v147;
        swift_bridgeObjectRetain();
        uint64_t v41 = sub_1000B2AE8((uint64_t (*)(void))sub_1000EA1F0, &v129 - 4, v40);
        uint64_t v42 = swift_bridgeObjectRelease();
        __chkstk_darwin(v42);
        *(&v129 - 2) = (char *)v33;
        unint64_t v43 = v139;
        swift_bridgeObjectRetain();
        unint64_t v44 = sub_1000B2AE8((uint64_t (*)(void))sub_1000EA224, &v129 - 4, v43);
        swift_bridgeObjectRelease();
        uint64_t v21 = v152;
        uint64_t v150 = v152;
        int v151 = &off_100172A40;
        sub_1000274F4(v149);
        sub_1000E8894();
        sub_1000BBF48(v149, v143, v144, v145, v146);
        if (v5)
        {

          sub_1000E88E0(v33, (void (*)(void))type metadata accessor for LSLinkBundleRecord);
          sub_10000E788((uint64_t)v149);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          return;
        }

        sub_1000E88E0(v33, (void (*)(void))type metadata accessor for LSLinkBundleRecord);
        sub_10000E788((uint64_t)v149);
        unint64_t v139 = (unint64_t)v44;
        unint64_t v147 = (unint64_t)v41;
        id v31 = v136;
        char v20 = v38;
        unint64_t v32 = &selRef_initWithConnection_options_error_;
        uint64_t v34 = v142;
      }
    }
  }
  while (v36);
  unint64_t v45 = swift_bridgeObjectRetain();
  uint64_t v46 = sub_1000B3958(v45, (uint64_t (*)(void))&LSApplicationExtensionRecord.attributionBundleIdentifier.getter);
  swift_bridgeObjectRelease();
  uint64_t v47 = sub_1000B1CE0((uint64_t)v46);
  unint64_t v48 = swift_bridgeObjectRetain();
  uint64_t v49 = sub_1000B3958(v48, (uint64_t (*)(void))&DaemonRecord.attributionBundleIdentifier.getter);
  uint64_t v50 = v5;
  swift_bridgeObjectRelease();
  uint64_t v51 = sub_1000B1CE0((uint64_t)v49);
  uint64_t v52 = sub_100071038(v51, v47);
  uint64_t v53 = 0;
  uint64_t v54 = *(void *)(v52 + 56);
  uint64_t v140 = (char *)(v52 + 56);
  uint64_t v55 = 1 << *(unsigned char *)(v52 + 32);
  uint64_t v56 = -1;
  if (v55 < 64) {
    uint64_t v56 = ~(-1 << v55);
  }
  uint64_t v57 = v56 & v54;
  id v142 = (void *)((unint64_t)(v55 + 63) >> 6);
  uint64_t v58 = &qword_10017E2E0;
  unint64_t v59 = (unint64_t)v135;
  uint64_t v137 = v52;
  if ((v56 & v54) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  for (v57 &= v57 - 1; ; uint64_t v57 = (v61 - 1) & v61)
  {
    swift_bridgeObjectRetain();
    sub_10000D9D4(0, v58);
    id v64 = (void *)static LSBundleRecord.with(bundleIdentifier:allowSystemAppPlaceholder:)();
    if (v50)
    {
      swift_errorRelease();
      uint64_t v50 = 0;
    }
    else
    {
      uint64_t v50 = 0;
      uint64_t v65 = v58;
      id v66 = v64;
      sub_1000B5418();
      uint64_t v67 = v59;
      uint64_t v68 = v59;
      uint64_t v69 = v152;
      if (sub_10000D5D8(v67, 1, v152) == 1)
      {

        sub_1000347E8(v68, &qword_10017EB18);
        unint64_t v59 = v68;
      }
      else
      {
        uint64_t v70 = (uint64_t)v134;
        sub_1000EA1A4();
        uint64_t v150 = v69;
        int v151 = &off_100172A40;
        sub_1000274F4(v149);
        sub_1000E8894();
        sub_1000BBF48(v149, v143, v144, v145, v146);

        sub_1000E88E0(v70, (void (*)(void))type metadata accessor for LSLinkBundleRecord);
        sub_10000E788((uint64_t)v149);
        unint64_t v59 = (unint64_t)v135;
      }
      uint64_t v58 = v65;
    }
    swift_bridgeObjectRelease();
    if (v57) {
      goto LABEL_11;
    }
LABEL_12:
    if (__OFADD__(v53++, 1))
    {
      __break(1u);
      goto LABEL_106;
    }
    if (v53 >= (uint64_t)v142) {
      goto LABEL_35;
    }
    uint64_t v61 = *(void *)&v140[8 * v53];
    if (!v61) {
      break;
    }
LABEL_22:
    ;
  }
  uint64_t v62 = v53 + 1;
  if (v53 + 1 >= (uint64_t)v142) {
    goto LABEL_35;
  }
  uint64_t v61 = *(void *)&v140[8 * v62];
  if (v61) {
    goto LABEL_21;
  }
  uint64_t v62 = v53 + 2;
  if (v53 + 2 >= (uint64_t)v142) {
    goto LABEL_35;
  }
  uint64_t v61 = *(void *)&v140[8 * v62];
  if (v61) {
    goto LABEL_21;
  }
  uint64_t v62 = v53 + 3;
  if (v53 + 3 >= (uint64_t)v142) {
    goto LABEL_35;
  }
  uint64_t v61 = *(void *)&v140[8 * v62];
  if (v61)
  {
LABEL_21:
    uint64_t v53 = v62;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v53 = v62 + 1;
    if (__OFADD__(v62, 1)) {
      goto LABEL_109;
    }
    if (v53 >= (uint64_t)v142) {
      break;
    }
    uint64_t v61 = *(void *)&v140[8 * v53];
    ++v62;
    if (v61) {
      goto LABEL_22;
    }
  }
LABEL_35:
  swift_release();
  unint64_t v59 = v139;
  if (v139 >> 62) {
    goto LABEL_110;
  }
  uint64_t v71 = *(void *)((v139 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    uint64_t v72 = (uint64_t)v148;
    if (v71) {
      break;
    }
LABEL_51:
    swift_bridgeObjectRelease();
    unint64_t v84 = v147;
    if (v147 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v128 = _CocoaArrayWrapper.endIndex.getter();
      unint64_t v84 = v147;
      uint64_t v85 = v128;
      if (!v128)
      {
LABEL_66:
        swift_bridgeObjectRelease();
        type metadata accessor for FrameworkRecord();
        uint64_t v95 = static FrameworkRecord.enumerated.getter();
        uint64_t v96 = 0;
        uint64_t v97 = *(void *)(v95 + 64);
        uint64_t v137 = v95 + 64;
        id v142 = (void *)v95;
        uint64_t v98 = 1 << *(unsigned char *)(v95 + 32);
        uint64_t v99 = -1;
        if (v98 < 64) {
          uint64_t v99 = ~(-1 << v98);
        }
        unint64_t v59 = v99 & v97;
        uint64_t v140 = (char *)((unint64_t)(v98 + 63) >> 6);
        uint64_t v135 = v140 - 1;
        uint64_t v100 = (uint64_t *)&unk_10017F970;
        uint64_t v101 = (uint64_t *)&unk_10017F950;
        uint64_t v102 = (uint64_t)v141;
        if ((v99 & v97) != 0)
        {
LABEL_69:
          unint64_t v103 = __clz(__rbit64(v59));
          v59 &= v59 - 1;
          unint64_t v104 = v103 | (v96 << 6);
          goto LABEL_70;
        }
        while (1)
        {
          uint64_t v115 = v96 + 1;
          if (__OFADD__(v96, 1)) {
            goto LABEL_108;
          }
          if (v115 >= (uint64_t)v140)
          {
            uint64_t v110 = (uint64_t)v138;
          }
          else
          {
            uint64_t v110 = (uint64_t)v138;
            unint64_t v116 = *(void *)(v137 + 8 * v115);
            if (v116) {
              goto LABEL_74;
            }
            v96 += 2;
            if (v115 + 1 >= (uint64_t)v140)
            {
              uint64_t v96 = v115;
            }
            else
            {
              unint64_t v116 = *(void *)(v137 + 8 * v96);
              if (v116)
              {
                ++v115;
                goto LABEL_74;
              }
              if (v115 + 2 < (uint64_t)v140)
              {
                unint64_t v116 = *(void *)(v137 + 8 * (v115 + 2));
                if (v116)
                {
                  v115 += 2;
                  goto LABEL_74;
                }
                uint64_t v126 = v115 + 3;
                if (v115 + 3 < (uint64_t)v140)
                {
                  unint64_t v116 = *(void *)(v137 + 8 * v126);
                  if (v116)
                  {
                    v115 += 3;
LABEL_74:
                    unint64_t v59 = (v116 - 1) & v116;
                    unint64_t v104 = __clz(__rbit64(v116)) + (v115 << 6);
                    uint64_t v96 = v115;
LABEL_70:
                    os_log_type_t v105 = v142;
                    uint64_t v106 = *((void *)v142 + 6);
                    uint64_t v107 = type metadata accessor for URL();
                    uint64_t v108 = *(void *)(v107 - 8);
                    uint64_t v109 = v106 + *(void *)(v108 + 72) * v104;
                    uint64_t v110 = (uint64_t)v138;
                    (*(void (**)(char *, uint64_t, uint64_t))(v108 + 16))(v138, v109, v107);
                    uint64_t v111 = v105[7];
                    uint64_t v112 = sub_10000BF1C(v100);
                    uint64_t v113 = *(void **)(v111 + 8 * v104);
                    *(void *)(v110 + *(int *)(v112 + 48)) = v113;
                    sub_10000D5B0(v110, 0, 1, v112);
                    id v114 = v113;
                    uint64_t v102 = (uint64_t)v141;
                    uint64_t v72 = (uint64_t)v148;
                    goto LABEL_77;
                  }
                  while (1)
                  {
                    uint64_t v115 = v126 + 1;
                    if (__OFADD__(v126, 1)) {
                      break;
                    }
                    if (v115 >= (uint64_t)v140)
                    {
                      uint64_t v96 = (uint64_t)v135;
                      goto LABEL_76;
                    }
                    unint64_t v116 = *(void *)(v137 + 8 * v115);
                    ++v126;
                    if (v116) {
                      goto LABEL_74;
                    }
                  }
                  __break(1u);
                  return;
                }
                uint64_t v96 = v115 + 2;
              }
            }
          }
LABEL_76:
          uint64_t v117 = sub_10000BF1C(v100);
          sub_10000D5B0(v110, 1, 1, v117);
          unint64_t v59 = 0;
LABEL_77:
          sub_100083620(v110, v102, v101);
          uint64_t v118 = v102;
          uint64_t v119 = sub_10000BF1C(v100);
          if (sub_10000D5D8(v118, 1, v119) == 1)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            swift_release();
            return;
          }
          id v120 = *(id *)(v118 + *(int *)(v119 + 48));
          sub_1000E011C();
          uint64_t v121 = v152;
          if (sub_10000D5D8(v72, 1, v152) == 1)
          {

            sub_1000347E8(v72, &qword_10017EB18);
          }
          else
          {
            Swift::Bool v122 = v100;
            uint64_t v123 = v101;
            uint64_t v124 = (uint64_t)v133;
            sub_1000EA1A4();
            uint64_t v150 = v121;
            int v151 = &off_100172A40;
            sub_1000274F4(v149);
            sub_1000E8894();
            sub_1000BBF48(v149, v143, v144, v145, v146);
            if (v50)
            {

              sub_1000E88E0(v124, (void (*)(void))type metadata accessor for LSLinkBundleRecord);
              swift_release();
              sub_10000E788((uint64_t)v149);
              uint64_t v127 = type metadata accessor for URL();
              (*(void (**)(char *, uint64_t))(*(void *)(v127 - 8) + 8))(v141, v127);
              swift_bridgeObjectRelease();
              goto LABEL_104;
            }
            sub_1000E88E0(v124, (void (*)(void))type metadata accessor for LSLinkBundleRecord);

            sub_10000E788((uint64_t)v149);
            uint64_t v101 = v123;
            uint64_t v100 = v122;
          }
          uint64_t v125 = type metadata accessor for URL();
          uint64_t v102 = (uint64_t)v141;
          (*(void (**)(char *, uint64_t))(*(void *)(v125 - 8) + 8))(v141, v125);
          if (v59) {
            goto LABEL_69;
          }
        }
      }
    }
    else
    {
      uint64_t v85 = *(void *)((v147 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v85) {
        goto LABEL_66;
      }
    }
    unint64_t v86 = v84 & 0xC000000000000001;
    uint64_t v87 = 4;
    while (1)
    {
      id v88 = v86 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v84 + 8 * v87);
      uint64_t v89 = v88;
      uint64_t v90 = v87 - 3;
      if (__OFADD__(v87 - 4, 1)) {
        break;
      }
      DaemonRecord.attributionBundleIdentifier.getter();
      uint64_t v92 = v91;
      swift_bridgeObjectRelease();
      if (v92)
      {
      }
      else
      {
        id v79 = v89;
        uint64_t v93 = (uint64_t)v131;
        sub_1000DFC5C();
        uint64_t v94 = v152;
        if (sub_10000D5D8(v93, 1, v152) == 1)
        {

          sub_1000347E8(v93, &qword_10017EB18);
        }
        else
        {
          uint64_t v82 = (uint64_t)v129;
          sub_1000EA1A4();
          uint64_t v150 = v94;
          int v151 = &off_100172A40;
          sub_1000274F4(v149);
          sub_1000E8894();
          sub_1000BBF48(v149, v143, v144, v145, v146);
          if (v50) {
            goto LABEL_103;
          }
          sub_1000E88E0(v82, (void (*)(void))type metadata accessor for LSLinkBundleRecord);

          sub_10000E788((uint64_t)v149);
        }
      }
      ++v87;
      BOOL v83 = v90 == v85;
      unint64_t v84 = v147;
      uint64_t v72 = (uint64_t)v148;
      if (v83) {
        goto LABEL_66;
      }
    }
LABEL_107:
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    __break(1u);
LABEL_110:
    swift_bridgeObjectRetain();
    uint64_t v71 = _CocoaArrayWrapper.endIndex.getter();
  }
  uint64_t v73 = 4;
  while (2)
  {
    if ((v59 & 0xC000000000000001) != 0) {
      id v74 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v74 = *(id *)(v59 + 8 * v73);
    }
    uint64_t v75 = v74;
    uint64_t v76 = v73 - 3;
    if (__OFADD__(v73 - 4, 1))
    {
LABEL_106:
      __break(1u);
      goto LABEL_107;
    }
    LSApplicationExtensionRecord.attributionBundleIdentifier.getter();
    uint64_t v78 = v77;
    swift_bridgeObjectRelease();
    if (v78)
    {

      goto LABEL_49;
    }
    id v79 = v75;
    uint64_t v80 = (uint64_t)v132;
    sub_1000B5418();
    uint64_t v81 = v152;
    if (sub_10000D5D8(v80, 1, v152) == 1)
    {

      sub_1000347E8(v80, &qword_10017EB18);
      goto LABEL_49;
    }
    uint64_t v82 = (uint64_t)v130;
    sub_1000EA1A4();
    uint64_t v150 = v81;
    int v151 = &off_100172A40;
    sub_1000274F4(v149);
    sub_1000E8894();
    sub_1000BBF48(v149, v143, v144, v145, v146);
    if (!v50)
    {
      sub_1000E88E0(v82, (void (*)(void))type metadata accessor for LSLinkBundleRecord);

      sub_10000E788((uint64_t)v149);
LABEL_49:
      ++v73;
      BOOL v83 = v76 == v71;
      uint64_t v72 = (uint64_t)v148;
      if (v83) {
        goto LABEL_51;
      }
      continue;
    }
    break;
  }
LABEL_103:

  sub_1000E88E0(v82, (void (*)(void))type metadata accessor for LSLinkBundleRecord);
  swift_bridgeObjectRelease();
  sub_10000E788((uint64_t)v149);
  swift_bridgeObjectRelease();
LABEL_104:
  swift_bridgeObjectRelease();
}

uint64_t sub_1000E57D8(uint64_t a1, void *a2, uint64_t (*a3)(void))
{
  uint64_t v4 = a3();
  if (v5)
  {
    if (v4 == *a2 && v5 == a2[1])
    {
      swift_bridgeObjectRelease();
      char v8 = 0;
    }
    else
    {
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      char v8 = v7 ^ 1;
    }
  }
  else
  {
    char v8 = 1;
  }
  return v8 & 1;
}

void sub_1000E5864(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10000BF1C(&qword_10017EB18);
  uint64_t v4 = sub_1000EEDE8(v3);
  __chkstk_darwin(v4);
  sub_100018DBC();
  objc_allocWithZone((Class)LSApplicationRecord);
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_100028714();
  id v7 = sub_100081E04(v5, v6, 0);
  if (v7)
  {
    id v8 = v7;
    sub_1000B5418();
    uint64_t v9 = type metadata accessor for LSLinkBundleRecord(0);
    sub_1000EEFC8(v1, 1, v9);
    if (v10)
    {

      sub_1000347E8(v1, &qword_10017EB18);
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(void *)(a1 + 32) = 0;
    }
    else
    {
      *(void *)(a1 + 24) = v9;
      *(void *)(a1 + 32) = &off_100172A40;
      sub_1000274F4((uint64_t *)a1);
      sub_1000EA1A4();
    }
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
}

uint64_t DateFunctions.__deallocating_deinit()
{
  return _swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for LSLinkBundleSource()
{
  return self;
}

uint64_t destroy for Registry.IndexingQueue.Change(uint64_t *a1)
{
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v3 = a1[4];
  if (v3 >> 60 != 15) {
    uint64_t result = sub_10000DA10(a1[3], v3);
  }
  if (a1[6])
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for Registry.IndexingQueue.Change(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = (uint64_t *)(a2 + 24);
  unint64_t v6 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v5;
  }
  else
  {
    uint64_t v7 = *v5;
    sub_10000DADC(*v5, v6);
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = v6;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v8;
    *(void *)(a1 + 56) = v9;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  return a1;
}

uint64_t assignWithCopy for Registry.IndexingQueue.Change(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (uint64_t *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32) >> 60 == 15)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v6 = *v4;
      sub_10000DADC(*v4, *(void *)(a2 + 32));
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = v5;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
    sub_1000E5C5C(a1 + 24);
LABEL_6:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v4;
    goto LABEL_8;
  }
  uint64_t v7 = *v4;
  sub_10000DADC(*v4, *(void *)(a2 + 32));
  uint64_t v8 = *(void *)(a1 + 24);
  unint64_t v9 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v5;
  sub_10000DA10(v8, v9);
LABEL_8:
  uint64_t v10 = *(void *)(a1 + 48);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v11 = *(void *)(a2 + 48);
  if (!v10)
  {
    if (v11)
    {
      uint64_t v13 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = v11;
      *(void *)(a1 + 56) = v13;
      swift_retain();
      return a1;
    }
LABEL_14:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    return a1;
  }
  if (!v11)
  {
    swift_release();
    goto LABEL_14;
  }
  uint64_t v12 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = v11;
  *(void *)(a1 + 56) = v12;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1000E5C5C(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for Registry.IndexingQueue.Change(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for Registry.IndexingQueue.Change(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  long long v4 = (_OWORD *)(a2 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  if (v5 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v6 = *(void *)(a2 + 32);
  if (v6 >> 60 == 15)
  {
    sub_1000E5C5C(a1 + 24);
LABEL_4:
    *(_OWORD *)(a1 + 24) = *v4;
    goto LABEL_6;
  }
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)v4;
  *(void *)(a1 + 32) = v6;
  sub_10000DA10(v7, v5);
LABEL_6:
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a1 + 48);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  if (!v9)
  {
    if (v8)
    {
      uint64_t v11 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = v8;
      *(void *)(a1 + 56) = v11;
      return a1;
    }
LABEL_12:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    return a1;
  }
  if (!v8)
  {
    swift_release();
    goto LABEL_12;
  }
  uint64_t v10 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v10;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Registry.IndexingQueue.Change(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 64))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Registry.IndexingQueue.Change(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Registry.IndexingQueue.Change()
{
  return &type metadata for Registry.IndexingQueue.Change;
}

uint64_t type metadata accessor for RegistryError(uint64_t a1)
{
  return sub_1000E6454(a1, qword_100180028);
}

uint64_t sub_1000E5E7C(uint64_t a1)
{
  uint64_t v7 = sub_10000BF1C(&qword_10017F920);
  uint64_t v8 = sub_100034754(&qword_10017F928, &qword_10017F920);
  v6[0] = a1;
  sub_10000BEA0(v6, v7);
  swift_bridgeObjectRetain();
  uint64_t v2 = sub_1000EFAD4();
  sub_1000E8810(v2, v3, v4);
  swift_bridgeObjectRelease();
  sub_10000E788((uint64_t)v6);
  return sub_10000EBA4();
}

uint64_t sub_1000E5F3C(uint64_t a1, uint64_t a2)
{
  v8[3] = &type metadata for UnsafeRawBufferPointer;
  v8[4] = &protocol witness table for UnsafeRawBufferPointer;
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v2 = sub_10000BEA0(v8, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  uint64_t v3 = *v2;
  if (*v2 && (v4 = v2[1], uint64_t v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      uint64_t v6 = Data.InlineData.init(_:)();
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      uint64_t v6 = Data.LargeSlice.init(_:)();
    }
    else
    {
      uint64_t v6 = Data.InlineSlice.init(_:)();
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  sub_10000E788((uint64_t)v8);
  return v6;
}

void sub_1000E5FF8()
{
  sub_1000288B4();
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  char v6 = v5;
  URL._bridgeToObjectiveC()(v7);
  uint64_t v9 = v8;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [v0 initWithURL:v9 readonly:v6 & 1 scope:isa];

  sub_10000DA10(v4, v2);
  type metadata accessor for URL();
  sub_1000283FC();
  sub_100013EC4();
  v11();
  sub_10000EB44();
}

id sub_1000E60B4(void *a1, uint64_t a2, uint64_t a3)
{
  v8[4] = a2;
  void v8[5] = a3;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  _OWORD v8[2] = sub_1000E616C;
  v8[3] = &unk_1001721A0;
  char v5 = _Block_copy(v8);
  id v6 = [v3 initWithValue:a1 wrapper:v5];

  _Block_release(v5);
  swift_release();
  return v6;
}

uint64_t sub_1000E616C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  swift_retain();
  swift_unknownObjectRetain();
  v4(v5, v7, a3);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

void *sub_1000E61FC(uint64_t a1)
{
  return sub_1000E6220(a1);
}

void *sub_1000E6208(uint64_t a1)
{
  return sub_1000E629C(a1, &qword_10017D498);
}

void *sub_1000E6214(uint64_t a1)
{
  return sub_1000E6220(a1);
}

void *sub_1000E6220(uint64_t a1)
{
  if (a1 < 0)
  {
    sub_1000EFB10();
    __n128 result = (void *)sub_1000EFAE0();
    __break(1u);
  }
  else if (a1)
  {
    __n128 result = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    result[2] = a1;
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_1000E6290(uint64_t a1)
{
  return sub_1000E629C(a1, &qword_10017FF70);
}

void *sub_1000E629C(uint64_t a1, uint64_t *a2)
{
  if (a1 < 0)
  {
    sub_1000EFB10();
    __n128 result = (void *)sub_1000EFAE0();
    __break(1u);
  }
  else if (a1)
  {
    sub_10000BF1C(a2);
    __n128 result = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    result[2] = a1;
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_1000E6318()
{
  return sub_1000E6330((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10001E404);
}

uint64_t sub_1000E6330(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *unint64_t v1 = v3;
  if (!result)
  {
    uint64_t result = a1(result, *(void *)(v3 + 16) + 1, 1, v3);
    *unint64_t v1 = result;
  }
  return result;
}

uint64_t sub_1000E638C(uint64_t a1)
{
  return sub_1000E63A4(a1, (uint64_t (*)(BOOL))sub_10001E404);
}

uint64_t sub_1000E63A4(uint64_t result, uint64_t (*a2)(BOOL))
{
  unint64_t v3 = *(void *)(*(void *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    uint64_t result = a2(v3 > 1);
    *(void *)uint64_t v2 = result;
  }
  return result;
}

uint64_t sub_1000E63EC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for LSLinkBundleRecord(uint64_t a1)
{
  return sub_1000E6454(a1, qword_1001800B8);
}

uint64_t sub_1000E6454(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000E6488(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v6 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v7 = a1 - a2;
  if (__OFSUB__(0, v6))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (__OFADD__(v5, v7))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v5 - v6 > *(void *)(v4 + 24) >> 1) {
    uint64_t v4 = sub_10001E764();
  }
  uint64_t v8 = *(void *)(sub_10000BF1C(&qword_10017D3F8) - 8);
  unint64_t v9 = v4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  uint64_t v10 = *(void *)(v8 + 72);
  swift_arrayDestroy();
  if (!v6) {
    goto LABEL_13;
  }
  uint64_t v11 = *(void *)(v4 + 16);
  if (__OFSUB__(v11, a2)) {
    goto LABEL_19;
  }
  sub_100020A94(v9 + v10 * a2, v11 - a2);
  uint64_t v12 = *(void *)(v4 + 16);
  BOOL v13 = __OFADD__(v12, v7);
  uint64_t v14 = v12 - v6;
  if (!v13)
  {
    *(void *)(v4 + 16) = v14;
LABEL_13:
    *uint64_t v2 = v4;
    return;
  }
LABEL_20:
  __break(1u);
}

uint64_t sub_1000E65E0(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v6 = result;
  uint64_t v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (__OFADD__(v5, v8))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v5 - v7 > *(void *)(v4 + 24) >> 1)
  {
    sub_10001E778();
    uint64_t v4 = v9;
  }
  uint64_t v10 = (char *)(v4 + 32 + (v6 << 6));
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_13;
  }
  uint64_t v11 = *(void *)(v4 + 16);
  if (__OFSUB__(v11, a2)) {
    goto LABEL_19;
  }
  uint64_t result = (uint64_t)sub_100020AA0((char *)(v4 + 32 + (a2 << 6)), v11 - a2, v10);
  uint64_t v12 = *(void *)(v4 + 16);
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 - v7;
  if (!v13)
  {
    *(void *)(v4 + 16) = v14;
LABEL_13:
    *uint64_t v2 = v4;
    return result;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_1000E66E0()
{
  sub_10000E990();
  if (v4 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v0 = v5;
    uint64_t v2 = v4;
    if (!(*v1 >> 62))
    {
      uint64_t v6 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  sub_1000F0170();
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_4:
  if (v6 < v0)
  {
    __break(1u);
    goto LABEL_30;
  }
  if (__OFSUB__(v0, v2))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v3 = v2 - v0;
  if (__OFSUB__(0, v0 - v2))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (!(*v1 >> 62))
  {
    uint64_t v7 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_9;
  }
LABEL_32:
  sub_1000F0170();
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_9:
  uint64_t v8 = v7 + v3;
  if (__OFADD__(v7, v3))
  {
    __break(1u);
    goto LABEL_34;
  }
  unint64_t v9 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *unint64_t v1 = v9;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v9 & 0x8000000000000000) != 0
    || (v9 & 0x4000000000000000) != 0
    || (uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8, v8 > *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v9 >> 62))
    {
LABEL_15:
      swift_bridgeObjectRetain();
      unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      *unint64_t v1 = v9;
      uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_16;
    }
LABEL_34:
    sub_1000F0170();
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
LABEL_16:
  uint64_t v12 = (char *)(v11 + 32 + 8 * v2);
  sub_10000D9D4(0, (unint64_t *)&unk_10017FAC0);
  sub_1000EEC10();
  swift_arrayDestroy();
  if (!v3) {
    goto LABEL_24;
  }
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v13 = *(void *)(v11 + 16);
  }
  if (__OFSUB__(v13, v0))
  {
    __break(1u);
    goto LABEL_37;
  }
  uint64_t result = (uint64_t)sub_100020CA8((char *)(v11 + 32 + 8 * v0), v13 - v0, v12);
  if (v9 >> 62)
  {
LABEL_37:
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  uint64_t v15 = *(void *)(v11 + 16);
LABEL_22:
  if (__OFADD__(v15, v3))
  {
    __break(1u);
    return result;
  }
  *(void *)(v11 + 16) = v15 + v3;
LABEL_24:
  sub_10000E930();
  return specialized Array._endMutation()();
}

void sub_1000E6934()
{
  sub_1000288B4();
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  sub_1000EFDA4();
  if (v6 != v7)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v8 = v2 - v5;
  if (__OFSUB__(v2, v5))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = v5 - v2;
  if (__OFSUB__(0, v8))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v10 = v3 - v8;
  if (__OFADD__(v3, v9))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v10 > *(void *)(v0 + 24) >> 1)
  {
    if (v3 <= v10) {
      uint64_t v12 = v3 + v9;
    }
    else {
      uint64_t v12 = v3;
    }
    uint64_t v0 = sub_10001F460(isUniquelyReferenced_nonNull_native, v12, 1, v0);
  }
  uint64_t v13 = *(void *)(type metadata accessor for ObservationStatusRegistry.ObservationStatusChangeListener() - 8);
  unint64_t v14 = v0 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  uint64_t v15 = *(void *)(v13 + 72);
  swift_arrayDestroy();
  if (!v8) {
    goto LABEL_16;
  }
  uint64_t v16 = *(void *)(v0 + 16);
  if (__OFSUB__(v16, v2)) {
    goto LABEL_22;
  }
  sub_100020E38(v14 + v15 * v2, v16 - v2);
  uint64_t v17 = *(void *)(v0 + 16);
  BOOL v7 = __OFADD__(v17, v9);
  uint64_t v18 = v17 - v8;
  if (!v7)
  {
    *(void *)(v0 + 16) = v18;
LABEL_16:
    *unint64_t v1 = v0;
    sub_10000EB44();
    return;
  }
LABEL_23:
  __break(1u);
}

void sub_1000E6A74()
{
  sub_1000288B4();
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  sub_1000EFDA4();
  if (v6 != v7)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v8 = v5;
  uint64_t v9 = v2 - v5;
  if (__OFSUB__(v2, v5))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v10 = v5 - v2;
  if (__OFSUB__(0, v9))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (__OFADD__(v3, v10))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v3 - v9 > *(void *)(v0 + 24) >> 1)
  {
    sub_10001F4A8();
    uint64_t v0 = v11;
  }
  uint64_t v12 = (char *)(v0 + 32 + 24 * v8);
  swift_arrayDestroy();
  if (!v9) {
    goto LABEL_13;
  }
  uint64_t v13 = *(void *)(v0 + 16);
  if (__OFSUB__(v13, v2)) {
    goto LABEL_19;
  }
  sub_100020A28((char *)(v0 + 32 + 24 * v2), v13 - v2, v12);
  uint64_t v14 = *(void *)(v0 + 16);
  BOOL v7 = __OFADD__(v14, v10);
  uint64_t v15 = v14 - v9;
  if (!v7)
  {
    *(void *)(v0 + 16) = v15;
LABEL_13:
    *unint64_t v1 = v0;
    sub_10000EB44();
    return;
  }
LABEL_20:
  __break(1u);
}

uint64_t sub_1000E6B68(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  id v66 = a3;
  uint64_t v7 = type metadata accessor for LNBundleRecord();
  uint64_t v64 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v57 - v11;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v57 - v14;
  uint64_t v16 = sub_10000BF1C((uint64_t *)&unk_10017F940);
  __chkstk_darwin(v16);
  char v20 = (uint64_t *)((char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = *(void *)(a1 + 16);
  if (!v21) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v62 = (uint64_t)v20 + *(int *)(v17 + 48);
  uint64_t v63 = v4;
  uint64_t v22 = a1 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  uint64_t v60 = *(void *)(v18 + 72);
  uint64_t v58 = a1;
  swift_bridgeObjectRetain();
  uint64_t v61 = v20;
  unint64_t v59 = v12;
  while (1)
  {
    uint64_t v65 = v21;
    uint64_t v23 = (uint64_t)v9;
    sub_1000A3B4C(v22, (uint64_t)v20, (uint64_t *)&unk_10017F940);
    uint64_t v24 = *v20;
    uint64_t v25 = v20[1];
    uint64_t v69 = v24;
    uint64_t v70 = v25;
    uint64_t v26 = (uint64_t)v15;
    sub_1000EA1A4();
    uint64_t v27 = *v66;
    unint64_t v35 = sub_100021098(v24, v25, v28, v29, v30, v31, v32, v33, v57, v58, (uint64_t)v59, v60, (uint64_t)v61, v62, v63, v64, v65, (uint64_t)v66, v67,
            v68,
            v69,
            v70,
            v71,
            v72,
            v73,
            v74);
    uint64_t v36 = *(void *)(v27 + 16);
    BOOL v37 = (v34 & 1) == 0;
    uint64_t v38 = v36 + v37;
    if (__OFADD__(v36, v37))
    {
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_22;
    }
    char v39 = v34;
    if (*(void *)(v27 + 24) >= v38)
    {
      if ((a2 & 1) == 0)
      {
        sub_10000BF1C((uint64_t *)&unk_10017DD68);
        _NativeDictionary.copy()();
      }
    }
    else
    {
      sub_100022E4C(v38, a2 & 1);
      uint64_t v46 = sub_100021098(v24, v25, v40, v41, v42, v43, v44, v45, v57, v58, (uint64_t)v59, v60, (uint64_t)v61, v62, v63, v64, v65, (uint64_t)v66, v67,
              v68,
              v69,
              v70,
              v71,
              v72,
              v73,
              v74);
      if ((v39 & 1) != (v47 & 1)) {
        goto LABEL_21;
      }
      unint64_t v35 = v46;
    }
    uint64_t v48 = *v66;
    if (v39) {
      break;
    }
    *(void *)(v48 + 8 * (v35 >> 6) + 64) |= 1 << v35;
    uint64_t v50 = (uint64_t *)(*(void *)(v48 + 48) + 16 * v35);
    *uint64_t v50 = v24;
    v50[1] = v25;
    uint64_t v15 = (char *)v26;
    sub_1000EA1A4();
    uint64_t v51 = *(void *)(v48 + 16);
    BOOL v52 = __OFADD__(v51, 1);
    uint64_t v53 = v51 + 1;
    if (v52) {
      goto LABEL_20;
    }
    *(void *)(v48 + 16) = v53;
    uint64_t v9 = (char *)v23;
LABEL_14:
    char v20 = v61;
    v22 += v60;
    a2 = 1;
    uint64_t v21 = v65 - 1;
    if (v65 == 1) {
      return swift_bridgeObjectRelease_n();
    }
  }
  uint64_t v9 = (char *)v23;
  sub_1000E8894();
  uint64_t v15 = (char *)v26;
  uint64_t v49 = v63;
  sub_1000BBB2C(v23, (uint64_t)v59);
  if (!v49)
  {
    uint64_t v63 = 0;
    sub_1000E88E0(v23, (void (*)(void))type metadata accessor for LNBundleRecord);
    sub_1000E88E0(v26, (void (*)(void))type metadata accessor for LNBundleRecord);
    swift_bridgeObjectRelease();
    sub_1000ECBA8();
    goto LABEL_14;
  }
  sub_1000E88E0(v23, (void (*)(void))type metadata accessor for LNBundleRecord);
  uint64_t v72 = v49;
  swift_errorRetain();
  sub_10000BF1C(&qword_10017C810);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_1000E88E0(v26, (void (*)(void))type metadata accessor for LNBundleRecord);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_errorRelease();
  }
LABEL_22:
  uint64_t v67 = 0;
  uint64_t v68 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v55._unint64_t object = (void *)0x80000001001449C0;
  v55._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v55);
  _print_unlocked<A, B>(_:_:)();
  v56._uint64_t countAndFlagsBits = 39;
  v56._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v56);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_1000E70C0()
{
}

uint64_t sub_1000E70D8(unint64_t a1)
{
  if (a1 >> 62)
  {
    sub_1000EFF64();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t sub_1000E7144(uint64_t a1)
{
  return sub_10001F460(0, *(void *)(a1 + 16), 0, a1);
}

void sub_1000E7158()
{
}

uint64_t sub_1000E716C(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  if (!v6) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    uint64_t v14 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    swift_bridgeObjectRetain();
    sub_1000E7790(v15, v16);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v11 >= v7) {
      goto LABEL_24;
    }
    unint64_t v12 = *(void *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v12 = *(void *)(v3 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v12 = *(void *)(v3 + 8 * v8);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v6 = (v12 - 1) & v12;
  }
  int64_t v13 = v11 + 4;
  if (v13 < v7)
  {
    unint64_t v12 = *(void *)(v3 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        int64_t v8 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          goto LABEL_29;
        }
        if (v8 >= v7) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        ++v13;
        if (v12) {
          goto LABEL_21;
        }
      }
    }
    int64_t v8 = v13;
    goto LABEL_21;
  }
LABEL_24:

  return swift_release();
}

unint64_t *sub_1000E7318(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (*(void *)(a2 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v37 = a1 + 56;
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v35 = ~v5;
    if (-v5 < 64) {
      uint64_t v6 = ~(-1 << -(char)v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & v4;
    int64_t v36 = (unint64_t)(63 - v5) >> 6;
    uint64_t v8 = a2 + 56;
    swift_bridgeObjectRetain();
    int64_t v9 = 0;
    if (!v7) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v10 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v11 = v10 | (v9 << 6);
    while (1)
    {
      uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v19 = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v2 + 32);
      unint64_t v21 = v19 & ~v20;
      if ((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21)) {
        break;
      }
LABEL_37:
      swift_bridgeObjectRelease();
      if (v7) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v12 = v9 + 1;
      if (__OFADD__(v9, 1))
      {
        __break(1u);
        goto LABEL_50;
      }
      if (v12 >= v36) {
        goto LABEL_48;
      }
      unint64_t v13 = *(void *)(v37 + 8 * v12);
      int64_t v14 = v9 + 1;
      if (!v13)
      {
        int64_t v14 = v9 + 2;
        if (v9 + 2 >= v36) {
          goto LABEL_48;
        }
        unint64_t v13 = *(void *)(v37 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v9 + 3;
          if (v9 + 3 >= v36) {
            goto LABEL_48;
          }
          unint64_t v13 = *(void *)(v37 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v9 + 4;
            if (v9 + 4 >= v36) {
              goto LABEL_48;
            }
            unint64_t v13 = *(void *)(v37 + 8 * v14);
            if (!v13)
            {
              int64_t v15 = v9 + 5;
              if (v9 + 5 >= v36)
              {
LABEL_48:
                sub_100027664();
                return (unint64_t *)v2;
              }
              unint64_t v13 = *(void *)(v37 + 8 * v15);
              if (!v13)
              {
                while (1)
                {
                  int64_t v14 = v15 + 1;
                  if (__OFADD__(v15, 1)) {
                    break;
                  }
                  if (v14 >= v36) {
                    goto LABEL_48;
                  }
                  unint64_t v13 = *(void *)(v37 + 8 * v14);
                  ++v15;
                  if (v13) {
                    goto LABEL_22;
                  }
                }
LABEL_50:
                __break(1u);
              }
              int64_t v14 = v9 + 5;
            }
          }
        }
      }
LABEL_22:
      unint64_t v7 = (v13 - 1) & v13;
      unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
      int64_t v9 = v14;
    }
    uint64_t v22 = *(void *)(v2 + 48);
    uint64_t v23 = (void *)(v22 + 16 * v21);
    BOOL v24 = *v23 == v18 && v23[1] == v17;
    if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
      uint64_t v38 = a1;
      uint64_t v39 = v37;
      uint64_t v40 = v35;
      int64_t v41 = v9;
      unint64_t v42 = v7;
    }
    else
    {
      uint64_t v25 = ~v20;
      do
      {
        unint64_t v21 = (v21 + 1) & v25;
        if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
          goto LABEL_37;
        }
        uint64_t v26 = (void *)(v22 + 16 * v21);
        BOOL v27 = *v26 == v18 && v26[1] == v17;
      }
      while (!v27 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
      uint64_t v38 = a1;
      uint64_t v39 = v37;
      uint64_t v40 = v35;
      int64_t v41 = v9;
      unint64_t v42 = v7;
      uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
    }
    char v29 = *(unsigned char *)(v2 + 32);
    unint64_t v30 = (unint64_t)((1 << v29) + 63) >> 6;
    size_t v31 = 8 * v30;
    if ((v29 & 0x3Fu) < 0xE
      || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      memcpy((char *)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v31);
      uint64_t v32 = sub_1000E7920((unint64_t *)((char *)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0)), v30, v2, v21, &v38);
      swift_release();
      sub_100027664();
    }
    else
    {
      uint64_t v33 = (void *)swift_slowAlloc();
      memcpy(v33, (const void *)(v2 + 56), v31);
      uint64_t v32 = sub_1000E7920((unint64_t *)v33, v30, v2, v21, &v38);
      swift_release();
      sub_100027664();
      swift_slowDealloc();
    }
    return v32;
  }
  else
  {
    swift_release();
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

uint64_t sub_1000E7790(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  unint64_t v10 = (void *)(v9 + 16 * v8);
  BOOL v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v15 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v15;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      uint64_t v16 = (void *)(v9 + 16 * v8);
      BOOL v17 = *v16 == a1 && v16[1] == a2;
    }
    while (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v2;
  uint64_t v19 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100025DB0();
    uint64_t v13 = v19;
  }
  uint64_t v14 = *(void *)(*(void *)(v13 + 48) + 16 * v8);
  sub_1000E7EA4(v8);
  *uint64_t v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

unint64_t *sub_1000E7920(unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v39 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v40 = a3 + 56;
  while (2)
  {
    uint64_t v38 = v8;
    do
    {
      while (1)
      {
        int64_t v9 = a5[3];
        unint64_t v10 = a5[4];
        if (v10)
        {
          uint64_t v11 = (v10 - 1) & v10;
          unint64_t v12 = __clz(__rbit64(v10)) | (v9 << 6);
          goto LABEL_15;
        }
        int64_t v13 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_48;
        }
        int64_t v14 = (unint64_t)(a5[2] + 64) >> 6;
        int64_t v15 = a5[3];
        if (v13 >= v14) {
          goto LABEL_46;
        }
        uint64_t v16 = a5[1];
        unint64_t v17 = *(void *)(v16 + 8 * v13);
        if (!v17)
        {
          int64_t v18 = v9 + 2;
          int64_t v15 = v9 + 1;
          if (v9 + 2 >= v14) {
            goto LABEL_46;
          }
          unint64_t v17 = *(void *)(v16 + 8 * v18);
          if (!v17)
          {
            int64_t v15 = v9 + 2;
            if (v9 + 3 >= v14) {
              goto LABEL_46;
            }
            unint64_t v17 = *(void *)(v16 + 8 * (v9 + 3));
            if (v17)
            {
              int64_t v13 = v9 + 3;
              goto LABEL_14;
            }
            int64_t v18 = v9 + 4;
            int64_t v15 = v9 + 3;
            if (v9 + 4 >= v14) {
              goto LABEL_46;
            }
            unint64_t v17 = *(void *)(v16 + 8 * v18);
            if (!v17)
            {
              int64_t v13 = v9 + 5;
              int64_t v15 = v9 + 4;
              if (v9 + 5 >= v14) {
                goto LABEL_46;
              }
              unint64_t v17 = *(void *)(v16 + 8 * v13);
              if (!v17)
              {
                int64_t v36 = v9 + 6;
                while (v36 < v14)
                {
                  unint64_t v17 = *(void *)(v16 + 8 * v36++);
                  if (v17)
                  {
                    int64_t v13 = v36 - 1;
                    goto LABEL_14;
                  }
                }
                int64_t v15 = v14 - 1;
LABEL_46:
                a5[3] = v15;
                a5[4] = 0;
                swift_retain();
                return (unint64_t *)sub_1000E7C14(v39, a2, v38, a3);
              }
              goto LABEL_14;
            }
          }
          int64_t v13 = v18;
        }
LABEL_14:
        uint64_t v11 = (v17 - 1) & v17;
        unint64_t v12 = __clz(__rbit64(v17)) + (v13 << 6);
        int64_t v9 = v13;
LABEL_15:
        uint64_t v19 = (uint64_t *)(*(void *)(*a5 + 48) + 16 * v12);
        uint64_t v21 = *v19;
        uint64_t v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v22 = Hasher._finalize()();
        uint64_t v23 = -1 << *(unsigned char *)(a3 + 32);
        unint64_t v24 = v22 & ~v23;
        unint64_t v25 = v24 >> 6;
        uint64_t v26 = 1 << v24;
        if (((1 << v24) & *(void *)(v40 + 8 * (v24 >> 6))) == 0) {
          goto LABEL_32;
        }
        uint64_t v27 = *(void *)(a3 + 48);
        uint64_t v28 = (void *)(v27 + 16 * v24);
        BOOL v29 = *v28 == v21 && v28[1] == v20;
        if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
        uint64_t v31 = ~v23;
        for (unint64_t i = v24 + 1; ; unint64_t i = v33 + 1)
        {
          unint64_t v33 = i & v31;
          if (((*(void *)(v40 + (((i & v31) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v31)) & 1) == 0) {
            break;
          }
          char v34 = (void *)(v27 + 16 * v33);
          BOOL v35 = *v34 == v21 && v34[1] == v20;
          if (v35 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
            unint64_t v25 = v33 >> 6;
            uint64_t v26 = 1 << v33;
            goto LABEL_22;
          }
        }
LABEL_32:
        uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
      }
      uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
LABEL_22:
      unint64_t v30 = v39[v25];
      v39[v25] = v30 & ~v26;
    }
    while ((v26 & v30) == 0);
    uint64_t v8 = v38 - 1;
    if (__OFSUB__(v38, 1))
    {
LABEL_48:
      __break(1u);
      return result;
    }
    if (v38 != 1) {
      continue;
    }
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

uint64_t sub_1000E7C14(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
LABEL_35:
    swift_release();
    return (uint64_t)v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_10000BF1C((uint64_t *)&unk_10017D2F0);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v8 = (unsigned char *)result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_35;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_35;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_35;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    unint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << v8[32];
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t v28 = (void *)(*((void *)v8 + 6) + 16 * v23);
    void *v28 = v18;
    v28[1] = v19;
    ++*((void *)v8 + 2);
    if (__OFSUB__(v5--, 1)) {
      goto LABEL_38;
    }
    if (!v5) {
      goto LABEL_35;
    }
  }
  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_35;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_35;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

unint64_t sub_1000E7EA4(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        Swift::Int v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 >= v9 && v2 >= v11)
          {
LABEL_15:
            uint64_t v14 = *(void *)(v3 + 48);
            unint64_t v15 = (_OWORD *)(v14 + 16 * v2);
            uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
            BOOL v17 = v2 != v6 || v15 >= v16 + 1;
            int64_t v2 = v6;
            if (v17)
            {
              *unint64_t v15 = *v16;
              int64_t v2 = v6;
            }
          }
        }
        else if (v11 >= v9 || v2 >= v11)
        {
          goto LABEL_15;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v18 = *(void *)(v3 + 16);
  BOOL v19 = __OFSUB__(v18, 1);
  uint64_t v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_1000E8060(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t v4 = v2;
  swift_bridgeObjectRetain();
  sub_1000EF50C();
  sub_1000E870C();
  unint64_t v8 = v7;
  char v10 = v9;
  swift_bridgeObjectRelease();
  if (v3) {
    return v8;
  }
  if ((v10 & 1) == 0)
  {
    unint64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      goto LABEL_56;
    }
    if (*v4 >> 62)
    {
LABEL_57:
      sub_1000898AC();
      uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v12 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v11 != v12)
    {
      unint64_t v11 = v8 + 5;
      uint64_t v32 = a2;
      while (1)
      {
        unint64_t v13 = v11 - 4;
        unint64_t v14 = *v4;
        if ((*v4 & 0xC000000000000001) != 0)
        {
          id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if ((v13 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
            goto LABEL_57;
          }
          if (v13 >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_47;
          }
          id v15 = *(id *)(v14 + 8 * v11);
        }
        uint64_t v16 = v15;
        sub_1000EFB78();
        char v17 = a1();

        if ((v17 & 1) == 0)
        {
          if (v13 != v8)
          {
            unint64_t v18 = *v4;
            if ((*v4 & 0xC000000000000001) != 0)
            {
              id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              unint64_t v18 = *v4;
            }
            else
            {
              if ((v8 & 0x8000000000000000) != 0) {
                goto LABEL_50;
              }
              if (v8 >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_51;
              }
              id v19 = *(id *)(v18 + 8 * v8 + 32);
            }
            if ((v18 & 0xC000000000000001) != 0)
            {
              id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              unint64_t v18 = *v4;
            }
            else
            {
              if ((v13 & 0x8000000000000000) != 0) {
                goto LABEL_52;
              }
              if (v13 >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_53;
              }
              id v20 = *(id *)(v18 + 8 * v11);
            }
            int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
            *uint64_t v4 = v18;
            if (!isUniquelyReferenced_nonNull_bridgeObject
              || (v18 & 0x8000000000000000) != 0
              || (v18 & 0x4000000000000000) != 0)
            {
              unint64_t v18 = sub_1000E70D8(v18);
              *uint64_t v4 = v18;
            }
            unint64_t v22 = *(void **)((v18 & 0xFFFFFFFFFFFFFF8) + 8 * v8 + 0x20);
            *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 8 * v8 + 0x20) = v20;

            specialized Array._endMutation()();
            unint64_t v23 = *v4;
            int v24 = swift_isUniquelyReferenced_nonNull_bridgeObject();
            *uint64_t v4 = v23;
            if (!v24 || (v23 & 0x8000000000000000) != 0 || (v23 & 0x4000000000000000) != 0)
            {
              unint64_t v23 = sub_1000E70D8(v23);
              *uint64_t v4 = v23;
            }
            a2 = v32;
            if ((v13 & 0x8000000000000000) != 0) {
              goto LABEL_54;
            }
            uint64_t v25 = v23 & 0xFFFFFFFFFFFFFF8;
            if (v13 >= *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_55;
            }
            BOOL v26 = *(void **)(v25 + 8 * v11);
            *(void *)(v25 + 8 * v11) = v19;

            specialized Array._endMutation()();
          }
          if (__OFADD__(v8++, 1)) {
            goto LABEL_49;
          }
        }
        unint64_t v28 = v11 - 3;
        if (__OFADD__(v13, 1)) {
          goto LABEL_48;
        }
        if (*v4 >> 62)
        {
          sub_1000898AC();
          uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v29 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        ++v11;
        if (v28 == v29) {
          return v8;
        }
      }
    }
    return v8;
  }
  if (!(*v4 >> 62)) {
    return *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  sub_1000898AC();
  uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v31;
}

void sub_1000E8378()
{
  sub_100018E30();
  int64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for ObservationStatusRegistry.ObservationStatusChangeListener() - 8;
  __chkstk_darwin(v5);
  unint64_t v33 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v32 = (char *)v30 - v8;
  __chkstk_darwin(v9);
  char v34 = (char *)v30 - v11;
  uint64_t v12 = *v0;
  uint64_t v13 = *(void *)(*v0 + 16);
  if (!v13) {
    goto LABEL_11;
  }
  unint64_t v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = *(void *)(v10 + 72);
  swift_bridgeObjectRetain();
  unint64_t v16 = 0;
  v30[1] = v14;
  while (1)
  {
    sub_1000EFB78();
    char v17 = v4();
    if (v1)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    if (v17) {
      break;
    }
    ++v16;
    v14 += v15;
    if (v13 == v16) {
      goto LABEL_6;
    }
  }
  swift_bridgeObjectRelease();
  if (!__OFADD__(v16, 1))
  {
    unint64_t v18 = *(void *)(v12 + 16);
    if (v16 + 1 == v18)
    {
LABEL_11:
      sub_100018E80();
      return;
    }
    uint64_t v19 = v15 + v14;
    unint64_t v20 = v16 + 1;
    v30[0] = v0;
    uint64_t v31 = v15;
    while (v20 < v18)
    {
      unint64_t v21 = v2;
      uint64_t v35 = v19;
      uint64_t v22 = (uint64_t)v34;
      sub_1000E8894();
      sub_1000EFB78();
      char v23 = v4();
      sub_1000E88E0(v22, (void (*)(void))type metadata accessor for ObservationStatusRegistry.ObservationStatusChangeListener);
      if (v23)
      {
        int64_t v2 = v21;
        uint64_t v24 = v31;
      }
      else
      {
        int64_t v2 = v21;
        uint64_t v24 = v31;
        if (v20 != v16)
        {
          if ((v16 & 0x8000000000000000) != 0) {
            goto LABEL_32;
          }
          uint64_t v25 = *v2;
          unint64_t v26 = *(void *)(*v2 + 16);
          if (v16 >= v26) {
            goto LABEL_33;
          }
          sub_1000E8894();
          if (v20 >= v26) {
            goto LABEL_34;
          }
          sub_1000E8894();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          int64_t v2 = (uint64_t *)v30[0];
          *(void *)v30[0] = v25;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            uint64_t v25 = sub_1000E7144(v25);
            *int64_t v2 = v25;
          }
          if (v16 >= *(void *)(v25 + 16)) {
            goto LABEL_35;
          }
          sub_1000ECBA8();
          if (v20 >= *(void *)(*v2 + 16)) {
            goto LABEL_36;
          }
          sub_1000ECBA8();
        }
        if (__OFADD__(v16++, 1)) {
          goto LABEL_31;
        }
      }
      unint64_t v29 = v20 + 1;
      if (__OFADD__(v20, 1)) {
        goto LABEL_30;
      }
      unint64_t v18 = *(void *)(*v2 + 16);
      ++v20;
      uint64_t v19 = v35 + v24;
      if (v29 == v18) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
  __break(1u);
}

void sub_1000E870C()
{
  sub_100018E30();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  if (v1 >> 62)
  {
LABEL_13:
    if (v2 < 0) {
      uint64_t v0 = v2;
    }
    else {
      uint64_t v0 = v2 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v6 = 0;
  if (v5)
  {
    do
    {
      id v7 = (v2 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(v2 + 8 * v6 + 32);
      uint64_t v8 = v7;
      sub_1000EFB78();
      char v9 = v4();

      if (v0 || (v9 & 1) != 0) {
        break;
      }
      uint64_t v10 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
        __break(1u);
        goto LABEL_13;
      }
      ++v6;
    }
    while (v10 != v5);
  }
  sub_100018E80();
}

uint64_t sub_1000E8810@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    uint64_t result = Data.InlineData.init(_:)();
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = Data.LargeSlice.init(_:)();
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    uint64_t result = Data.InlineSlice.init(_:)();
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_1000E8888(void *a1)
{
  return sub_1000E8A68(a1, (SEL *)&selRef_bundleIdentifier);
}

uint64_t sub_1000E8894()
{
  uint64_t v1 = sub_1000EF8AC();
  v2(v1);
  sub_1000283FC();
  uint64_t v3 = sub_1000A456C();
  v4(v3);
  return v0;
}

uint64_t sub_1000E88E0(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_1000283FC();
  sub_100013EC4();
  v3();
  return a1;
}

uint64_t sub_1000E8934(void *a1)
{
  id v2 = [a1 uniqueInstallIdentifier];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_1000E89A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000E89B4()
{
  return swift_release();
}

uint64_t sub_1000E89C0()
{
  sub_10006039C();
  sub_1000EF020();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  sub_1000EEB34();
  return sub_1000C47CC();
}

uint64_t sub_1000E8A5C(void *a1)
{
  return sub_1000E8A68(a1, (SEL *)&selRef_widgetKind);
}

uint64_t sub_1000E8A68(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (v2)
  {
    uint64_t v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return sub_10000EBA4();
}

uint64_t sub_1000E8AC4(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v5[0] = *a2;
  v5[1] = v2;
  long long v3 = a2[3];
  v5[2] = a2[2];
  v5[3] = v3;
  return sub_1000B3F84(a1, (char *)v5);
}

uint64_t sub_1000E8AF8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v8 = type metadata accessor for LSLinkBundleRecord(0);
  char v9 = &off_100172A40;
  sub_1000274F4((uint64_t *)&v7);
  sub_1000EA1A4();
  uint64_t v5 = *a3;
  *(void *)(v5 + 16) = a1 + 1;
  return sub_10000D698(&v7, v5 + 40 * a1 + 32);
}

uint64_t sub_1000E8B8C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v76 = a2;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v70 - v10;
  __chkstk_darwin(v12);
  unint64_t v14 = (char *)&v70 - v13;
  uint64_t v81 = &unk_10016FFE8;
  uint64_t v82 = &off_100170008;
  uint64_t v15 = swift_allocObject();
  v80[0] = v15;
  long long v16 = *(_OWORD *)(a1 + 8);
  long long v83 = *(_OWORD *)(a1 + 24);
  v84[0] = v16;
  long long v17 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v15 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v15 + 32) = v17;
  *(void *)(v15 + 48) = *(void *)(a1 + 32);
  unint64_t v18 = sub_10000BEA0(v80, (uint64_t)&unk_10016FFE8);
  long long v19 = *((_OWORD *)v18 + 1);
  long long v86 = *(_OWORD *)v18;
  long long v87 = v19;
  uint64_t v88 = v18[4];
  swift_unknownObjectRetain();
  sub_100027B80((uint64_t)v84);
  sub_100027B80((uint64_t)&v83);
  uint64_t v20 = sub_10001BB90();
  if (!v21) {
    goto LABEL_19;
  }
  uint64_t v22 = v20;
  unint64_t v23 = v21;
  uint64_t v24 = sub_10000BEA0(v80, (uint64_t)v81);
  long long v25 = *((_OWORD *)v24 + 1);
  v84[1] = *(_OWORD *)v24;
  v84[2] = v25;
  uint64_t v85 = v24[4];
  uint64_t v26 = sub_10001BC40();
  if (!v26) {
    goto LABEL_18;
  }
  uint64_t v27 = v26;
  sub_10001B588(v77, 0x4449656C646E7562, 0xE900000000000073, v26);
  if (v78)
  {
    sub_10000BF1C(&qword_10017DED8);
    if (swift_dynamicCast())
    {
      uint64_t v28 = v79;
      if (*(void *)(v79 + 16))
      {
        sub_10001B588(v77, 0x686563616C507369, 0xED00007265646C6FLL, v27);
        swift_bridgeObjectRelease();
        if (v78)
        {
          if (swift_dynamicCast() & 1) != 0 && (v79)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v29 = off_10017C4C0;
            id v30 = a3;
            if (v29 != (void *)-1) {
              swift_once();
            }
            uint64_t v31 = sub_10000BEE4(v5, (uint64_t)qword_100181FD0);
            (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v11, v31, v5);

            uint64_t v32 = Logger.logObject.getter();
            os_log_type_t v33 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v32, v33))
            {
              char v34 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)char v34 = 0;
              _os_log_impl((void *)&_mh_execute_header, v32, v33, "Event ignored: application is placeholder", v34, 2u);
              swift_slowDealloc();
            }

            (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
            return sub_10000E788((uint64_t)v80);
          }
        }
        else
        {
          sub_1000347E8((uint64_t)v77, &qword_10017D3A0);
        }
        unint64_t v42 = off_10017C4C0;
        uint64_t v43 = a3;
        if (v42 != (void *)-1) {
          swift_once();
        }
        uint64_t v44 = sub_10000BEE4(v5, (uint64_t)qword_100181FD0);
        uint64_t v45 = *(void (**)(char *))(v6 + 16);
        uint64_t v74 = v44;
        v45(v8);

        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v46 = Logger.logObject.getter();
        os_log_type_t v47 = static os_log_type_t.default.getter();
        int v48 = v47;
        os_log_t v75 = v46;
        if (os_log_type_enabled(v46, v47))
        {
          uint64_t v49 = swift_slowAlloc();
          int v72 = v48;
          uint64_t v50 = v49;
          uint64_t v71 = swift_slowAlloc();
          v77[0] = v71;
          *(_DWORD *)uint64_t v50 = 136315394;
          swift_bridgeObjectRetain();
          uint64_t v79 = sub_100013090(v22, v23, v77);
          uint64_t v73 = v43;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v50 + 12) = 2080;
          uint64_t v70 = v50 + 14;
          swift_bridgeObjectRetain();
          uint64_t v51 = Array.description.getter();
          unint64_t v53 = v52;
          swift_bridgeObjectRelease();
          uint64_t v79 = sub_100013090(v51, v53, v77);
          uint64_t v43 = v73;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          os_log_t v54 = v75;
          _os_log_impl((void *)&_mh_execute_header, v75, (os_log_type_t)v72, "%s => %s", (uint8_t *)v50, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        if (v22 == 0xD00000000000002ELL && v23 == 0x8000000100145910
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          Swift::String v55 = v43;
          Swift::String v56 = sub_1000B346C(v28, v55);
          swift_bridgeObjectRelease();
          uint64_t v57 = v55;
          sub_1000B23C8((uint64_t)v56, v57);
          if (!*(void *)(v58 + 16))
          {
            swift_bridgeObjectRelease();
            return sub_10000E788((uint64_t)v80);
          }
          sub_10000BEA0(&v57[OBJC_IVAR____TtC10LinkDaemon8Registry_applicationSource], *(void *)&v57[OBJC_IVAR____TtC10LinkDaemon8Registry_applicationSource + 24]);
          uint64_t v59 = sub_1000E3438();
          unint64_t v61 = v60;
          sub_1000E2940();
          swift_bridgeObjectRelease();
          uint64_t v62 = v59;
          unint64_t v63 = v61;
        }
        else
        {
          if ((v22 != 0xD000000000000030 || v23 != 0x8000000100145940)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            uint64_t v67 = Logger.logObject.getter();
            os_log_type_t v68 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v67, v68))
            {
              uint64_t v69 = (uint8_t *)swift_slowAlloc();
              v77[0] = swift_slowAlloc();
              *(_DWORD *)uint64_t v69 = 136315138;
              swift_bridgeObjectRetain();
              uint64_t v79 = sub_100013090(v22, v23, v77);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v67, v68, "Event ignored: unknown event name - %s", v69, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_bridgeObjectRelease_n();
            }
            return sub_10000E788((uint64_t)v80);
          }
          swift_bridgeObjectRelease();
          sub_10000BEA0(&v43[OBJC_IVAR____TtC10LinkDaemon8Registry_applicationSource], *(void *)&v43[OBJC_IVAR____TtC10LinkDaemon8Registry_applicationSource + 24]);
          uint64_t v64 = sub_1000E3438();
          unint64_t v66 = v65;
          sub_1000E24AC();
          swift_bridgeObjectRelease();
          uint64_t v62 = v64;
          unint64_t v63 = v66;
        }
        sub_10000DA10(v62, v63);
        return sub_10000E788((uint64_t)v80);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
LABEL_18:
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000347E8((uint64_t)v77, &qword_10017D3A0);
LABEL_19:
  uint64_t v35 = off_10017C4C0;
  id v36 = a3;
  if (v35 != (void *)-1) {
    swift_once();
  }
  uint64_t v37 = sub_10000BEE4(v5, (uint64_t)qword_100181FD0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v14, v37, v5);

  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = (uint8_t *)swift_slowAlloc();
    v77[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v40 = 136315138;
    uint64_t v79 = sub_100013090(0x4449656C646E7562, 0xE900000000000073, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Event ignored: empty name, userInfo or %s", v40, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v14, v5);
  return sub_10000E788((uint64_t)v80);
}

uint64_t sub_1000E9678(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v72 = &unk_10016FFE8;
  uint64_t v73 = &off_100170008;
  uint64_t v10 = swift_allocObject();
  v71[0] = v10;
  long long v75 = *(_OWORD *)(a1 + 8);
  long long v74 = *(_OWORD *)(a1 + 24);
  long long v11 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v10 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v10 + 32) = v11;
  *(void *)(v10 + 48) = *(void *)(a1 + 32);
  uint64_t v12 = sub_10000BEA0(v71, (uint64_t)&unk_10016FFE8);
  long long v13 = *((_OWORD *)v12 + 1);
  long long v79 = *(_OWORD *)v12;
  long long v80 = v13;
  uint64_t v81 = v12[4];
  swift_unknownObjectRetain();
  sub_100027B80((uint64_t)&v75);
  sub_100027B80((uint64_t)&v74);
  uint64_t v14 = sub_10001BC40();
  if (v14)
  {
    sub_10001B588(&v76, 0x4449656C646E7562, 0xE900000000000073, v14);
    swift_bridgeObjectRelease();
    if (*((void *)&v77 + 1))
    {
      sub_1000347E8((uint64_t)&v76, &qword_10017D3A0);
      uint64_t v15 = sub_10000BEA0(v71, (uint64_t)v72);
      long long v76 = *(_OWORD *)v15;
      long long v77 = *((_OWORD *)v15 + 1);
      uint64_t v78 = v15[4];
      sub_1000E8B8C((uint64_t)&v76, a2, a3);
      return sub_10000E788((uint64_t)v71);
    }
  }
  else
  {
    long long v76 = 0u;
    long long v77 = 0u;
  }
  sub_1000347E8((uint64_t)&v76, &qword_10017D3A0);
  long long v16 = sub_10000BEA0(v71, (uint64_t)v72);
  uint64_t v18 = v16[3];
  uint64_t v17 = v16[4];
  if (v18 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v19)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v21 & 1) == 0) {
      return sub_10000E788((uint64_t)v71);
    }
  }
  uint64_t v22 = off_10017C4C0;
  unint64_t v23 = a3;
  if (v22 != (void *)-1) {
    swift_once();
  }
  uint64_t v24 = sub_10000BEE4(v6, (uint64_t)qword_100181FD0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v24, v6);

  long long v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Handling hidden app updates", v27, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  id v28 = [self hiddenAppBundleIdentifiers];
  uint64_t v29 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1000684AC();
  sub_1000B2F1C();
  uint64_t v31 = v30;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v32 = swift_bridgeObjectRetain();
  sub_1000B2C8C(v32, v29);
  uint64_t v34 = v33;
  v70[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v35 = &v23[OBJC_IVAR____TtC10LinkDaemon8Registry_applicationSource];
  uint64_t v36 = *sub_10000BEA0(&v23[OBJC_IVAR____TtC10LinkDaemon8Registry_applicationSource], *(void *)&v23[OBJC_IVAR____TtC10LinkDaemon8Registry_applicationSource + 24]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000E3608(v36, v31, v29, v70);
  uint64_t v64 = v35;
  unint64_t v65 = v23;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v37 = *(void *)(v34 + 16);
  uint64_t v66 = v34;
  if (v37)
  {
    swift_bridgeObjectRetain();
    uint64_t v38 = (unint64_t *)(v34 + 40);
    *(void *)&long long v39 = 136315138;
    long long v68 = v39;
    uint64_t v67 = (char *)&type metadata for Any + 8;
    do
    {
      uint64_t v41 = *(v38 - 1);
      unint64_t v40 = *v38;
      swift_bridgeObjectRetain_n();
      unint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = swift_slowAlloc();
        *(void *)&long long v76 = swift_slowAlloc();
        *(_DWORD *)uint64_t v44 = v68;
        swift_bridgeObjectRetain();
        *(void *)(v44 + 4) = sub_100013090(v41, v40, (uint64_t *)&v76);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Will hide application %s", (uint8_t *)v44, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v38 += 2;
      --v37;
    }
    while (v37);
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  uint64_t v45 = *(void *)(v70[0] + 16);
  if (v45)
  {
    uint64_t v46 = v70[0] + 32;
    v63[1] = v70[0];
    swift_bridgeObjectRetain();
    *(void *)&long long v47 = 136315138;
    long long v68 = v47;
    uint64_t v67 = (char *)&type metadata for Any + 8;
    do
    {
      sub_10000C0D4(v46, (uint64_t)&v76);
      int v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v48, v49))
      {
        uint64_t v50 = swift_slowAlloc();
        v69[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v50 = v68;
        uint64_t v52 = *((void *)&v77 + 1);
        uint64_t v51 = v78;
        sub_10000BEA0(&v76, *((uint64_t *)&v77 + 1));
        uint64_t v53 = (*(uint64_t (**)(uint64_t))(*(void *)(v51 + 8) + 8))(v52);
        *(void *)(v50 + 4) = sub_100013090(v53, v54, v69);
        swift_bridgeObjectRelease();
        sub_10000E788((uint64_t)&v76);
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "Will unhide application %s", (uint8_t *)v50, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        sub_10000E788((uint64_t)&v76);
      }
      v46 += 40;
      --v45;
    }
    while (v45);
    swift_bridgeObjectRelease();
  }
  Swift::String v55 = v64;
  sub_10000BEA0(v64, *((void *)v64 + 3));
  uint64_t v56 = sub_1000E3438();
  unint64_t v58 = v57;
  sub_1000E24AC();
  swift_bridgeObjectRelease();
  sub_10000DA10(v56, v58);
  sub_10000BEA0(v55, *((void *)v55 + 3));
  swift_bridgeObjectRetain();
  uint64_t v59 = sub_1000E3438();
  unint64_t v61 = v60;
  sub_1000E2940();
  swift_bridgeObjectRelease();
  sub_10000DA10(v59, v61);
  swift_bridgeObjectRelease();
  return sub_10000E788((uint64_t)v71);
}

int64_t sub_1000E9F94(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  if (v5 + 1 < (unint64_t)(result + 63) >> 6)
  {
    unint64_t v10 = *(void *)(v6 + 8 * v9);
    if (v10) {
      return __clz(__rbit64(v10)) + (v9 << 6);
    }
    unint64_t v11 = (unint64_t)(result + 63) >> 6;
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v11)
    {
      unint64_t v10 = *(void *)(v6 + 8 * v9);
      if (v10) {
        return __clz(__rbit64(v10)) + (v9 << 6);
      }
      while (v5 + 3 < v11)
      {
        unint64_t v10 = *(void *)(a4 + 80 + 8 * v5++);
        if (v10)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v10)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1000EA078()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v0 = sub_100084B84();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1000EA0B8(char a1)
{
  return sub_1000BB7AC(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1000EA0C4(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1000EA110()
{
  swift_unknownObjectRelease();
  uint64_t v0 = sub_1000624F4();

  return _swift_deallocObject(v0, v1, v2);
}

void *sub_1000EA140(void *a1)
{
  uint64_t v2 = a1[3];
  unint64_t v3 = a1[4];
  uint64_t v4 = a1[6];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000DA68(v2, v3);
  sub_100093428(v4);
  return a1;
}

uint64_t sub_1000EA1A4()
{
  uint64_t v1 = sub_1000EF8AC();
  v2(v1);
  sub_1000283FC();
  uint64_t v3 = sub_100084E6C();
  v4(v3);
  return v0;
}

uint64_t sub_1000EA1F0(uint64_t a1)
{
  return sub_1000E57D8(a1, *(void **)(v1 + 16), (uint64_t (*)(void))&DaemonRecord.attributionBundleIdentifier.getter) & 1;
}

uint64_t sub_1000EA224(uint64_t a1)
{
  return sub_1000E57D8(a1, *(void **)(v1 + 16), (uint64_t (*)(void))&LSApplicationExtensionRecord.attributionBundleIdentifier.getter) & 1;
}

uint64_t sub_1000EA258(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Data.Iterator();
  uint64_t v55 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v59 = (char *)v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)v47 - v7;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v57 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v56 = (char *)v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = type metadata accessor for LSLinkBundleSource();
  long long v68 = &off_1001720D8;
  v66[0] = a1;
  sub_10000BEA0(v66, v67);
  swift_retain();
  uint64_t v11 = sub_1000E3438();
  unint64_t v13 = v12;
  uint64_t v14 = sub_1000686B4();
  unint64_t v16 = v15;
  uint64_t v17 = qword_10017C368;
  id v18 = a2;
  uint64_t v19 = v56;
  if (v17 != -1) {
    swift_once();
  }
  uint64_t v20 = sub_10000BEE4(v9, (uint64_t)qword_100181B00);
  uint64_t v21 = v57;
  (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v19, v20, v9);

  sub_10000DADC(v11, v13);
  sub_10006F8F4(v14, v16);
  sub_10000DADC(v11, v13);
  sub_10006F8F4(v14, v16);
  uint64_t v22 = Logger.logObject.getter();
  uint64_t v54 = v9;
  unint64_t v23 = v22;
  int v50 = static os_log_type_t.default.getter();
  BOOL v24 = os_log_type_enabled(v23, (os_log_type_t)v50);
  unint64_t v25 = v16 >> 60;
  uint64_t v58 = v14;
  if (v24)
  {
    os_log_t v48 = v23;
    unint64_t v52 = v16 >> 60;
    os_log_type_t v26 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    v47[1] = v27;
    uint64_t v51 = v26;
    *(_DWORD *)os_log_type_t v26 = 136315394;
    uint64_t v63 = 0;
    unint64_t v64 = 0xE000000000000000;
    v65[0] = v27;
    sub_10000DADC(v11, v13);
    Data.makeIterator()();
    uint64_t v53 = v11;
    unint64_t v49 = v13;
    sub_10000DA10(v11, v13);
    sub_1000E63EC(&qword_10017F910, (void (*)(uint64_t))&type metadata accessor for Data.Iterator);
    dispatch thunk of IteratorProtocol.next()();
    if ((v62 & 1) == 0)
    {
      long long v60 = xmmword_10013EF20;
      do
      {
        char v28 = v61;
        sub_10000BF1C(&qword_10017F918);
        uint64_t v29 = swift_allocObject();
        *(_OWORD *)(v29 + 16) = v60;
        *(void *)(v29 + 56) = &type metadata for UInt8;
        *(void *)(v29 + 64) = &protocol witness table for UInt8;
        *(unsigned char *)(v29 + 32) = v28;
        v30._uint64_t countAndFlagsBits = String.init(format:_:)();
        String.append(_:)(v30);
        swift_bridgeObjectRelease();
        dispatch thunk of IteratorProtocol.next()();
      }
      while (v62 != 1);
    }
    uint64_t v31 = v51;
    uint64_t v32 = *(void (**)(char *, uint64_t))(v55 + 8);
    v55 += 8;
    v47[0] = v32;
    v32(v8, v4);
    uint64_t v63 = sub_100013090(v63, v64, v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v33 = v53;
    unint64_t v13 = v49;
    sub_10000DA10(v53, v49);
    sub_10000DA10(v33, v13);
    *((_WORD *)v31 + 6) = 2080;
    if (v52 <= 0xE)
    {
      uint64_t v63 = 0;
      unint64_t v64 = 0xE000000000000000;
      uint64_t v36 = v58;
      sub_10000DADC(v58, v16);
      uint64_t v37 = v59;
      Data.makeIterator()();
      sub_10000DA68(v36, v16);
      dispatch thunk of IteratorProtocol.next()();
      if ((v62 & 1) == 0)
      {
        long long v60 = xmmword_10013EF20;
        do
        {
          char v38 = v61;
          sub_10000BF1C(&qword_10017F918);
          uint64_t v39 = swift_allocObject();
          *(_OWORD *)(v39 + 16) = v60;
          *(void *)(v39 + 56) = &type metadata for UInt8;
          *(void *)(v39 + 64) = &protocol witness table for UInt8;
          *(unsigned char *)(v39 + 32) = v38;
          v40._uint64_t countAndFlagsBits = String.init(format:_:)();
          String.append(_:)(v40);
          uint64_t v37 = v59;
          swift_bridgeObjectRelease();
          dispatch thunk of IteratorProtocol.next()();
        }
        while (v62 != 1);
      }
      ((void (*)(char *, uint64_t))v47[0])(v37, v4);
      uint64_t v35 = v63;
      unint64_t v34 = v64;
      unint64_t v13 = v49;
    }
    else
    {
      unint64_t v34 = 0xE400000000000000;
      uint64_t v35 = 1701736302;
    }
    uint64_t v41 = v51;
    uint64_t v63 = sub_100013090(v35, v34, v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v42 = v58;
    sub_10000DA68(v58, v16);
    sub_10000DA68(v42, v16);
    os_log_t v43 = v48;
    _os_log_impl((void *)&_mh_execute_header, v48, (os_log_type_t)v50, "Application source version: %s\nMetadata store version: %s", v41, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v57 + 8))(v56, v54);
    unint64_t v25 = v52;
    uint64_t v11 = v53;
  }
  else
  {
    sub_10000DA10(v11, v13);
    sub_10000DA10(v11, v13);
    sub_10000DA68(v14, v16);
    sub_10000DA68(v14, v16);

    (*(void (**)(char *, uint64_t))(v21 + 8))(v19, v54);
  }
  if (v25 <= 0xE)
  {
    sub_10000DADC(v11, v13);
    uint64_t v45 = v58;
    sub_10006F8F4(v58, v16);
    char v44 = static Data.== infix(_:_:)();
    sub_10000DA68(v45, v16);
    sub_10000DA68(v45, v16);
    sub_10000DA10(v11, v13);
    sub_10000DA10(v11, v13);
  }
  else
  {
    sub_10000DA68(v11, v13);
    sub_10000DA68(v58, v16);
    char v44 = 0;
  }
  sub_10000E788((uint64_t)v66);
  return v44 & 1;
}

uint64_t sub_1000EAA00(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  uint64_t v9 = sub_1000274F4((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(v9, a2, a4);
  uint64_t v10 = *a3;
  *(void *)(v10 + 16) = a1 + 1;
  return sub_10000D698(&v12, v10 + 40 * a1 + 32);
}

uint64_t sub_1000EAA98()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v0 = sub_1000EF304();

  return _swift_deallocObject(v0, v1, v2);
}

void sub_1000EAADC()
{
}

uint64_t sub_1000EAB34()
{
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v0 = sub_100070048();

  return _swift_deallocObject(v0, v1, v2);
}

void sub_1000EAB6C()
{
}

uint64_t sub_1000EABC0()
{
  swift_bridgeObjectRelease();
  uint64_t v0 = sub_1000624F4();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1000EABF4()
{
  sub_10006039C();
  sub_1000EECE8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  uint64_t v3 = sub_1000843E8();
  return v4(v3);
}

uint64_t sub_1000EAC8C()
{
  sub_10006039C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  uint64_t v3 = sub_100084240();
  return v4(v3);
}

uint64_t sub_1000EAD24()
{
  sub_10006039C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  uint64_t v3 = sub_100084240();
  return v4(v3);
}

uint64_t sub_1000EADB8()
{
  _Block_release(*(const void **)(v0 + 32));
  uint64_t v1 = sub_100084BAC();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1000EADF8()
{
  sub_100084274();
  sub_100013E0C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  sub_100084200();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000EAEB0()
{
  sub_10006039C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  uint64_t v3 = sub_100084240();
  return v4(v3);
}

uint64_t sub_1000EAF48()
{
  sub_10006039C();
  sub_1000EECE8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  uint64_t v3 = sub_1000843E8();
  return v4(v3);
}

uint64_t sub_1000EAFE0()
{
  sub_10006039C();
  sub_1000EECE8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100011814;
  uint64_t v3 = sub_1000843E8();
  return v4(v3);
}

uint64_t sub_1000EB078()
{
  sub_10006039C();
  sub_1000EECE8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  uint64_t v3 = sub_1000843E8();
  return v4(v3);
}

uint64_t sub_1000EB110()
{
  sub_100084274();
  sub_100013E0C();
  sub_1000845B8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  sub_100084144();
  sub_100084200();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000EB1A4()
{
  _Block_release(*(const void **)(v0 + 48));

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000EB204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1000847F4();
  sub_1000700D0();
  uint64_t v10 = swift_task_alloc();
  uint64_t v11 = (void *)sub_1000841F4(v10);
  *uint64_t v11 = v12;
  v11[1] = sub_100013DD8;
  sub_100084744();
  return v19(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

uint64_t sub_1000EB2C0()
{
  sub_100084AD8();
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)sub_1000841F4(v3);
  *uint64_t v4 = v5;
  v4[1] = sub_100013DD8;
  uint64_t v6 = sub_1000EF214();
  return sub_1000DB738(v6, v7, v8, v9, v10, v11, v1, v2);
}

uint64_t sub_1000EB390()
{
  sub_100084ED0();
  sub_100013E0C();
  sub_1000EF1D8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  sub_100084610();
  sub_100084D74();
  return v8(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000EB424()
{
  sub_1000847F4();
  sub_1000700D0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  sub_1000EF214();
  sub_100084744();
  return sub_1000DAAD0(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1000EB4C8(id *a1)
{
  return sub_1000DC3E0(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_1000EB4EC()
{
  sub_100084274();
  sub_100013E0C();
  sub_1000845B8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  sub_100084144();
  sub_100084200();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000EB584()
{
  sub_100084ED0();
  sub_100013E0C();
  sub_1000EF1D8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  sub_100084610();
  sub_100084D74();
  return v8(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000EB618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v13 = a5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v14 = a12;
    return swift_bridgeObjectRetain();
  }
  return result;
}

void *sub_1000EB6B0(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_1000EB70C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000EB7A8()
{
  sub_10006039C();
  sub_1000EECE8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  uint64_t v3 = sub_1000843E8();
  return v4(v3);
}

uint64_t sub_1000EB840()
{
  sub_100084274();
  sub_100013E0C();
  sub_1000845B8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  sub_100084144();
  sub_100084200();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000EB8D8()
{
  sub_10006039C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  uint64_t v3 = sub_100084240();
  return v4(v3);
}

uint64_t sub_1000EB970()
{
  sub_10006039C();
  sub_1000EECE8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  uint64_t v3 = sub_1000843E8();
  return v4(v3);
}

uint64_t sub_1000EBA08()
{
  sub_10006039C();
  sub_1000EECE8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  uint64_t v3 = sub_1000843E8();
  return v4(v3);
}

uint64_t sub_1000EBAA0()
{
  sub_10006039C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  uint64_t v3 = sub_100084240();
  return v4(v3);
}

uint64_t sub_1000EBB38()
{
  sub_10006039C();
  sub_1000EECE8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  uint64_t v3 = sub_1000843E8();
  return v4(v3);
}

uint64_t sub_1000EBBD0()
{
  sub_10006039C();
  sub_1000EECE8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  uint64_t v3 = sub_1000843E8();
  return v4(v3);
}

uint64_t sub_1000EBC68()
{
  sub_10006039C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  uint64_t v3 = sub_100084240();
  return v4(v3);
}

uint64_t sub_1000EBD00()
{
  sub_10006039C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  uint64_t v3 = sub_100084240();
  return v4(v3);
}

uint64_t sub_1000EBD98()
{
  sub_10006039C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  uint64_t v3 = sub_100084240();
  return v4(v3);
}

uint64_t sub_1000EBE30()
{
  sub_10006039C();
  sub_1000EECE8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  uint64_t v3 = sub_1000843E8();
  return v4(v3);
}

uint64_t sub_1000EBEC8()
{
  sub_10006039C();
  sub_1000EECE8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  uint64_t v3 = sub_1000843E8();
  return v4(v3);
}

uint64_t sub_1000EBF60()
{
  sub_10006039C();
  sub_1000EECE8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  uint64_t v3 = sub_1000843E8();
  return v4(v3);
}

uint64_t sub_1000EBFF8()
{
  sub_10006039C();
  sub_1000EECE8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  uint64_t v3 = sub_1000843E8();
  return v4(v3);
}

uint64_t sub_1000EC090()
{
  _Block_release(*(const void **)(v0 + 40));
  uint64_t v1 = sub_1000EF304();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1000EC0E0()
{
  sub_100084ED0();
  sub_100013E0C();
  sub_1000EF1D8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  sub_100084610();
  sub_100084D74();
  return v8(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000EC174()
{
  _Block_release(*(const void **)(v0 + 40));
  uint64_t v1 = sub_1000EF304();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1000EC1BC()
{
  sub_100084ED0();
  sub_100013E0C();
  sub_1000EF1D8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  sub_100084610();
  sub_100084D74();
  return v8(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000EC254()
{
  sub_100084274();
  sub_100013E0C();
  sub_1000845B8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  sub_100084144();
  sub_100084200();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000EC2EC()
{
  _Block_release(*(const void **)(v0 + 16));

  uint64_t v1 = sub_100070048();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1000EC324()
{
  sub_10006039C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  uint64_t v3 = sub_100084240();
  return v4(v3);
}

uint64_t sub_1000EC3B8()
{
  _Block_release(*(const void **)(v0 + 16));
  uint64_t v1 = sub_1000624F4();

  return _swift_deallocObject(v1, v2, v3);
}

void sub_1000EC3E8(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1000EC3F0()
{
  swift_unknownObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1000EC440()
{
  sub_1000EF7C8();
  sub_1000700D0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  sub_1000EF788();
  return sub_1000C567C(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000EC504()
{
  sub_10006039C();
  sub_1000EECE8();
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)sub_1000841F4(v3);
  *uint64_t v4 = v5;
  v4[1] = sub_100011814;
  return sub_1000C181C(v0, v2, v1);
}

uint64_t sub_1000EC5A0(uint64_t a1)
{
  return a1;
}

id sub_1000EC67C@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  return sub_1000C2E8C(a1, *(void **)(v2 + 16), a2);
}

void *sub_1000EC69C(void *a1)
{
  uint64_t v2 = a1[3];
  unint64_t v3 = a1[4];
  uint64_t v4 = a1[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10006F8F4(v2, v3);
  sub_100059D80(v4);
  return a1;
}

uint64_t sub_1000EC704(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000EC738()
{
  sub_10006039C();
  sub_1000EF020();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  sub_1000EEB34();
  return sub_1000BD490(v3, v4, v5, v6);
}

uint64_t sub_1000EC7D4(uint64_t a1)
{
  return sub_1000B46F4(a1);
}

void sub_1000EC7DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000DA68(a4, a5);
    sub_100093428(a7);
  }
}

uint64_t sub_1000EC858(uint64_t a1)
{
  return sub_1000BCFA8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000EC860()
{
  sub_10000BF1C(&qword_10017FF10);
  sub_1000283FC();
  v1 += 8;
  uint64_t v2 = *(unsigned __int8 *)(v1 + 72);
  uint64_t v3 = ((v2 + 16) & ~v2) + *(void *)(v1 + 56);
  uint64_t v4 = v2 | 7;
  sub_100013EC4();
  v5();

  return _swift_deallocObject(v0, v3, v4);
}

uint64_t sub_1000EC8E8(uint64_t a1)
{
  sub_10000BF1C(&qword_10017FF10);

  return sub_1000BD1CC(a1);
}

uint64_t sub_1000EC960()
{
  sub_10006039C();
  sub_1000EF020();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  sub_1000EEB34();
  return sub_1000BD230(v3, v4, v5, v6);
}

uint64_t sub_1000EC9FC(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v5[0] = *a2;
  v5[1] = v2;
  long long v3 = a2[3];
  v5[2] = a2[2];
  v5[3] = v3;
  return sub_1000B424C(a1, (char *)v5);
}

uint64_t sub_1000ECA30()
{
  return sub_1000EC9FC(*(void *)(v0 + 16), *(_OWORD **)(v0 + 24));
}

uint64_t sub_1000ECA4C(uint64_t a1)
{
  return sub_100041FD8(a1, *(uint64_t (**)(void))(v1 + 16));
}

unint64_t sub_1000ECA68()
{
  unint64_t result = qword_10017FF28;
  if (!qword_10017FF28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FF28);
  }
  return result;
}

uint64_t sub_1000ECAB8()
{
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v0 = sub_100084B84();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1000ECAF0()
{
  sub_10006039C();
  sub_1000EF020();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  sub_1000EEB34();
  return sub_1000BCC5C(v3, v4, v5, v6);
}

uint64_t sub_1000ECB8C()
{
  return sub_1000E8AC4(*(void *)(v0 + 16), *(_OWORD **)(v0 + 24));
}

uint64_t sub_1000ECBA8()
{
  uint64_t v2 = sub_1000EF8AC();
  v3(v2);
  sub_1000283FC();
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v0, v1);
  return v0;
}

uint64_t sub_1000ECC00()
{
  swift_bridgeObjectRelease();

  uint64_t v1 = sub_100084B84();

  return _swift_deallocObject(v1, v2, v3);
}

void sub_1000ECC38()
{
  sub_1000DEA68(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1000ECC48()
{
  swift_unknownObjectRelease();

  uint64_t v1 = sub_100084B84();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1000ECC80()
{
  sub_10006039C();
  sub_1000EF020();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100013DD8;
  sub_1000EEB34();
  return sub_1000B7974(v3, v4, v5, v6);
}

unsigned char *storeEnumTagSinglePayload for Registry.IndexingQueue.Change.ChangeError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000ECDB8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for Registry.IndexingQueue.Change.ChangeError()
{
  return &type metadata for Registry.IndexingQueue.Change.ChangeError;
}

uint64_t *sub_1000ECDF0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        uint64_t v7 = a2[1];
        *a1 = *a2;
        a1[1] = v7;
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 2u:
        uint64_t v9 = type metadata accessor for UUID();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
        goto LABEL_8;
      case 3u:
        uint64_t v10 = *a2;
        swift_errorRetain();
        *a1 = v10;
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_1000ECF78(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 1:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 2:
      uint64_t v3 = type metadata accessor for UUID();
      unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      uint64_t result = v4(a1, v3);
      break;
    case 3:
      uint64_t result = swift_errorRelease();
      break;
    default:
      return result;
  }
  return result;
}

void *sub_1000ED068(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain();
      goto LABEL_6;
    case 2u:
      uint64_t v7 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      goto LABEL_6;
    case 3u:
      uint64_t v8 = *a2;
      swift_errorRetain();
      *a1 = v8;
LABEL_6:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *sub_1000ED1AC(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000E88E0((uint64_t)a1, (void (*)(void))type metadata accessor for RegistryError);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_7;
      case 2u:
        uint64_t v6 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        goto LABEL_7;
      case 3u:
        uint64_t v7 = *a2;
        swift_errorRetain();
        *a1 = v7;
LABEL_7:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *sub_1000ED324(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v6 = type metadata accessor for UUID();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_1000ED3DC(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000E88E0((uint64_t)a1, (void (*)(void))type metadata accessor for RegistryError);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000ED4C4()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1000ED4D4()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *sub_1000ED570(void *a1, void *a2, int *a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for URL();
    swift_bridgeObjectRetain();
    if (sub_10000D5D8((uint64_t)v10, 1, v11))
    {
      uint64_t v12 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
      sub_10000D5B0((uint64_t)v9, 0, 1, v11);
    }
    uint64_t v14 = a3[6];
    uint64_t v15 = (void *)((char *)v4 + v14);
    uint64_t v16 = (void *)((char *)a2 + v14);
    uint64_t v17 = *v16;
    unint64_t v18 = v16[1];
    sub_10000DADC(*v16, v18);
    *uint64_t v15 = v17;
    v15[1] = v18;
    uint64_t v19 = a3[7];
    uint64_t v20 = (char *)v4 + v19;
    uint64_t v21 = (char *)a2 + v19;
    uint64_t v22 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
    uint64_t v23 = a3[9];
    *((unsigned char *)v4 + a3[8]) = *((unsigned char *)a2 + a3[8]);
    *((unsigned char *)v4 + v23) = *((unsigned char *)a2 + v23);
  }
  return v4;
}

uint64_t sub_1000ED734(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for URL();
  if (!sub_10000D5D8(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  sub_10000DA10(*(void *)(a1 + a2[6]), *(void *)(a1 + a2[6] + 8));
  uint64_t v6 = a1 + a2[7];
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);

  return v8(v6, v7);
}

void *sub_1000ED81C(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  swift_bridgeObjectRetain();
  if (sub_10000D5D8((uint64_t)v9, 1, v10))
  {
    uint64_t v11 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    sub_10000D5B0((uint64_t)v8, 0, 1, v10);
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  sub_10000DADC(*v14, v16);
  *uint64_t v13 = v15;
  v13[1] = v16;
  uint64_t v17 = a3[7];
  unint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  uint64_t v20 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
  uint64_t v21 = a3[9];
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  *((unsigned char *)a1 + v21) = *((unsigned char *)a2 + v21);
  return a1;
}

void *sub_1000ED990(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  int v10 = sub_10000D5D8((uint64_t)v7, 1, v9);
  int v11 = sub_10000D5D8((uint64_t)v8, 1, v9);
  if (!v10)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v13 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  sub_10000D5B0((uint64_t)v7, 0, 1, v9);
LABEL_7:
  uint64_t v14 = a3[6];
  uint64_t v15 = (void *)((char *)a1 + v14);
  unint64_t v16 = (void *)((char *)a2 + v14);
  uint64_t v17 = *v16;
  unint64_t v18 = v16[1];
  sub_10000DADC(*v16, v18);
  uint64_t v19 = *v15;
  unint64_t v20 = v15[1];
  *uint64_t v15 = v17;
  v15[1] = v18;
  sub_10000DA10(v19, v20);
  uint64_t v21 = a3[7];
  uint64_t v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  uint64_t v24 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 24))(v22, v23, v24);
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  return a1;
}

_OWORD *sub_1000EDBA0(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  if (sub_10000D5D8((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    sub_10000D5B0((uint64_t)v7, 0, 1, v9);
  }
  uint64_t v11 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  uint64_t v15 = a3[9];
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  *((unsigned char *)a1 + v15) = *((unsigned char *)a2 + v15);
  return a1;
}

void *sub_1000EDCEC(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  int v11 = sub_10000D5D8((uint64_t)v8, 1, v10);
  int v12 = sub_10000D5D8((uint64_t)v9, 1, v10);
  if (!v11)
  {
    uint64_t v13 = *(void *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    uint64_t v14 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  sub_10000D5B0((uint64_t)v8, 0, 1, v10);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = *(void *)((char *)a1 + v15);
  unint64_t v17 = *(void *)((char *)a1 + v15 + 8);
  *(_OWORD *)((char *)a1 + v15) = *(_OWORD *)((char *)a2 + v15);
  sub_10000DA10(v16, v17);
  uint64_t v18 = a3[7];
  uint64_t v19 = (char *)a1 + v18;
  unint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 40))(v19, v20, v21);
  uint64_t v22 = a3[9];
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  *((unsigned char *)a1 + v22) = *((unsigned char *)a2 + v22);
  return a1;
}

uint64_t sub_1000EDED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000EDEEC);
}

uint64_t sub_1000EDEEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    sub_10000BF1C((uint64_t *)&unk_10017D0C0);
    sub_100035C48();
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 20);
    }
    else
    {
      uint64_t v10 = type metadata accessor for Date();
      uint64_t v11 = *(int *)(a3 + 28);
    }
    return sub_10000D5D8(a1 + v11, a2, v10);
  }
}

uint64_t sub_1000EDF9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000EDFB0);
}

uint64_t sub_1000EDFB0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_10000BF1C((uint64_t *)&unk_10017D0C0);
    sub_100035C48();
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 20);
    }
    else
    {
      uint64_t v10 = type metadata accessor for Date();
      uint64_t v11 = *(int *)(a4 + 28);
    }
    return sub_10000D5B0(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_1000EE05C()
{
  sub_100048AF4();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_1000EE14C()
{
  return sub_1000E63EC(&qword_10017F838, (void (*)(uint64_t))type metadata accessor for RegistryError);
}

unint64_t sub_1000EE19C()
{
  unint64_t result = qword_100180108;
  if (!qword_100180108)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180108);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for LSLinkBundleRecord.RecordType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for LSLinkBundleRecord.RecordType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000EE33CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LSLinkBundleRecord.RecordType()
{
  return &type metadata for LSLinkBundleRecord.RecordType;
}

unint64_t sub_1000EE378()
{
  unint64_t result = qword_100180118;
  if (!qword_100180118)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100180118);
  }
  return result;
}

uint64_t sub_1000EE3C8(uint64_t a1)
{
  return sub_1000EA1F0(a1) & 1;
}

uint64_t sub_1000EE3E4(uint64_t a1)
{
  return sub_1000EA224(a1) & 1;
}

uint64_t sub_1000EE400(id *a1)
{
  return sub_1000EB4C8(a1) & 1;
}

id sub_1000EE420@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  return sub_1000EC67C(a1, a2);
}

uint64_t sub_1000EE43C(uint64_t a1)
{
  return sub_1000ECA4C(a1);
}

uint64_t sub_1000EE488()
{
  return v0;
}

uint64_t sub_1000EE4B8()
{
  return swift_slowAlloc();
}

uint64_t sub_1000EE4E8(uint64_t a1, uint64_t a2)
{
  sub_10000BEE4(v3, a2);
  return v2;
}

uint64_t sub_1000EE534(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000EE558(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000EE57C()
{
  return sub_1000626C0(v0, v1, 0);
}

uint64_t sub_1000EE5A0()
{
  return v0;
}

uint64_t sub_1000EE5B4()
{
  return *(void *)(v0 + 24);
}

uint64_t sub_1000EE5D0(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain();
}

void sub_1000EE5F0(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, os_log_type_t type)
{
  _os_log_impl(a1, v12, type, a4, v13, 0x16u);
}

uint64_t sub_1000EE610()
{
  return swift_arrayDestroy();
}

uint64_t sub_1000EE630()
{
  return swift_allocError();
}

uint64_t sub_1000EE650()
{
  return swift_allocError();
}

BOOL sub_1000EE670(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000EE68C()
{
  return swift_slowAlloc();
}

void sub_1000EE6A8()
{
  *(_WORD *)(v0 + 12) = 2080;
  sub_1000B84B4();
}

uint64_t sub_1000EE6C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  return sub_100013090(v7, v8, (uint64_t *)va);
}

uint64_t sub_1000EE6E0()
{
  return v0;
}

uint64_t sub_1000EE6F0()
{
  return v0;
}

uint64_t sub_1000EE704()
{
  return swift_slowAlloc();
}

uint64_t sub_1000EE71C()
{
  return swift_slowAlloc();
}

uint64_t sub_1000EE734(uint64_t a1, uint64_t a2)
{
  sub_10000BEE4(v3, a2);
  return v2;
}

uint64_t sub_1000EE764()
{
  return swift_arrayDestroy();
}

uint64_t sub_1000EE7A8(void *a1)
{
  sub_10000BEA0(a1, v1);
  return v1;
}

void sub_1000EE7DC()
{
  sub_1000B82C4();
}

uint64_t sub_1000EE7F4()
{
  return sub_1000E8894();
}

void sub_1000EE80C()
{
  uint64_t v2 = *(void **)(v0 + 64);
}

uint64_t sub_1000EE858(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  return sub_100013090(a1, a2, (uint64_t *)va);
}

void sub_1000EE870()
{
  uint64_t v2 = *(void **)(v0 + 64);
}

uint64_t sub_1000EE890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return a13;
}

uint64_t sub_1000EE89C()
{
  return swift_bridgeObjectRetain_n();
}

void sub_1000EE8C0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 0x16u);
}

uint64_t sub_1000EE8E0()
{
  return swift_bridgeObjectRelease();
}

id sub_1000EE8F8()
{
  return v0;
}

uint64_t sub_1000EE94C(uint64_t a1, uint64_t a2)
{
  sub_10000BEE4(v3, a2);
  return v2;
}

uint64_t sub_1000EE97C(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain();
}

void sub_1000EE99C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v4, a4, v6, 2u);
}

BOOL sub_1000EE9BC(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000EE9D8()
{
  return v0;
}

uint64_t sub_1000EEA1C()
{
  return v0 + 8;
}

uint64_t sub_1000EEA2C(void *a1)
{
  sub_10000BEA0(a1, v1);
  return v1;
}

uint64_t sub_1000EEA60(uint64_t a1)
{
  *(unsigned char *)(a1 + 32) = v1;
  return String.init(format:_:)();
}

uint64_t sub_1000EEA84(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000EEAA8(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000EEACC()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EEAE4(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000EEB08()
{
  return v0;
}

uint64_t sub_1000EEB18()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000EEB44(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000EEB68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  return sub_100013090(v5, v6, (uint64_t *)va);
}

void sub_1000EEB84()
{
  *(_WORD *)(v0 + 12) = 2080;
  sub_1000B84B4();
}

void sub_1000EEBF0(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, os_log_type_t type)
{
  _os_log_impl(a1, v11, type, a4, v12, 0x16u);
}

uint64_t sub_1000EEC10()
{
  return v0;
}

void sub_1000EEC1C()
{
  uint64_t v2 = *(void **)(v0 + 64);
}

void sub_1000EEC3C()
{
  uint64_t v2 = *(void **)(v0 + 32);
}

uint64_t sub_1000EEC60(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain();
}

BOOL sub_1000EEC80(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000EEC9C(uint64_t result)
{
  *(void *)(v1 + 144) = result;
  return result;
}

uint64_t sub_1000EECD0()
{
  return swift_slowAlloc();
}

uint64_t sub_1000EECF4()
{
  return v0;
}

uint64_t sub_1000EED0C(uint64_t a1)
{
  v1[82] = a1;
  uint64_t result = *(void *)(v1[60] + 8);
  v1[83] = result;
  v1[59] = result;
  v1[84] = *(void *)(result + 16);
  return result;
}

uint64_t sub_1000EED44(uint64_t result)
{
  *(void *)(v1 + 48) = result;
  return result;
}

uint64_t sub_1000EED50()
{
  return v0;
}

uint64_t sub_1000EED80@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 176) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for Date();
}

uint64_t sub_1000EEDAC(uint64_t a1)
{
  *(void *)(v1 + 32) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000EEDD0()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1000EEDE8(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_1000EEE14()
{
  return sub_1000E8894();
}

uint64_t sub_1000EEE2C()
{
  return *(void *)(v0 + 32);
}

uint64_t sub_1000EEE4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  return sub_100013090(v7, v8, (uint64_t *)va);
}

void sub_1000EEE68(uint64_t a1@<X8>)
{
  *(void *)(v2 + 136) = *(void *)(a1 + v1);
}

uint64_t sub_1000EEE90()
{
  return 0;
}

uint64_t sub_1000EEEAC()
{
  return v0;
}

uint64_t sub_1000EEEDC(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

uint64_t sub_1000EEEE8()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1000EEF00()
{
  return v0;
}

void sub_1000EEF10(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14 = v11;
  uint64_t v15 = v12;
  String.append(_:)(*(Swift::String *)&v14);
}

void sub_1000EEF38()
{
  *(_WORD *)(v0 + 12) = 2080;
  sub_1000B84B4();
}

uint64_t sub_1000EEF54()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_1000EEF6C()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1000EEFA0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  return sub_100013090(a1, a2, (uint64_t *)va);
}

void sub_1000EEFB8()
{
  *(unsigned char *)(*(void *)(v0 + 488) + 144) = 1;
}

uint64_t sub_1000EEFC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10000D5D8(a1, a2, a3);
}

uint64_t sub_1000EEFE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return a12;
}

NSArray sub_1000EF008()
{
  return Array._bridgeToObjectiveC()();
}

uint64_t sub_1000EF030()
{
  return swift_bridgeObjectRetain();
}

_WORD *sub_1000EF048(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t sub_1000EF054()
{
  return v0;
}

uint64_t sub_1000EF060()
{
  return swift_allocObject();
}

void sub_1000EF078()
{
  *(void *)(v1 + 16) = *(void *)(v0 + 32);
}

uint64_t sub_1000EF0B8(uint64_t result)
{
  *(void *)(v1 + 160) = result;
  return result;
}

uint64_t sub_1000EF0C4(uint64_t result)
{
  *(void *)(v1 + 152) = result;
  return result;
}

uint64_t sub_1000EF0D0(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

uint64_t sub_1000EF0E8()
{
  return v0;
}

uint64_t sub_1000EF10C()
{
  return v0;
}

void sub_1000EF118()
{
  *(void *)(v0 - 104) = 0;
  *(void *)(v0 - 96) = 0xE000000000000000;
}

uint64_t sub_1000EF128()
{
  return swift_slowAlloc();
}

uint64_t sub_1000EF144()
{
  return v0;
}

uint64_t sub_1000EF154()
{
  return v0;
}

__n128 sub_1000EF19C(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __n128 a19)
{
  __n128 result = a19;
  a1[1] = a19;
  return result;
}

uint64_t sub_1000EF1AC(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000EF1E8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000EF214()
{
  return v0;
}

uint64_t sub_1000EF234()
{
  return v0;
}

uint64_t sub_1000EF244()
{
  return v0;
}

void sub_1000EF250(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, a2, v5, a4, v4, 0xCu);
}

uint64_t sub_1000EF26C()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_1000EF284()
{
  sub_10000DA68(0, 0xF000000000000000);
  return sub_100093428(0);
}

uint64_t sub_1000EF2B8()
{
  return v0;
}

uint64_t sub_1000EF2C4(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t sub_1000EF2E4@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v12[86] = v11;
  v12[85] = a11;
  return v12[83] + 40 * a1 + 32;
}

uint64_t sub_1000EF304()
{
  return v0;
}

uint64_t sub_1000EF314()
{
  return v0 + 8;
}

uint64_t sub_1000EF324()
{
  return v0 + 8;
}

uint64_t sub_1000EF334(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  return sub_100013090(a1, a2, (uint64_t *)va);
}

void sub_1000EF34C(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t sub_1000EF364()
{
  return swift_errorRelease();
}

uint64_t sub_1000EF38C()
{
  return swift_bridgeObjectRetain();
}

void sub_1000EF3A4(uint64_t a1@<X8>)
{
  *(void *)(v2 + 120) = *(void *)(a1 + v1);
}

uint64_t sub_1000EF3BC(uint64_t result)
{
  *(void *)(v1 + 72) = result;
  return result;
}

uint64_t sub_1000EF3C8(uint64_t result)
{
  *(void *)(v1 + 128) = result;
  return result;
}

uint64_t sub_1000EF3D4()
{
  return v0;
}

uint64_t sub_1000EF3F0()
{
  return swift_task_alloc();
}

uint64_t sub_1000EF408()
{
  return 0;
}

uint64_t sub_1000EF440()
{
  return 0;
}

uint64_t sub_1000EF45C()
{
  return type metadata accessor for OSSignposter();
}

uint64_t sub_1000EF484()
{
  return static OSSignpostID.exclusive.getter();
}

uint64_t sub_1000EF4AC()
{
  return type metadata accessor for OSSignpostID();
}

void sub_1000EF4D4(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 192) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1000EF50C()
{
  return v0;
}

void sub_1000EF518()
{
  uint64_t v2 = *(void **)(v0 + 64);
}

void sub_1000EF540()
{
  uint64_t v2 = *(void **)(v0 + 64);
}

uint64_t sub_1000EF568()
{
  return v0;
}

uint64_t sub_1000EF584()
{
  return v0;
}

uint64_t sub_1000EF590()
{
  return v0;
}

uint64_t sub_1000EF59C()
{
  return v0;
}

uint64_t sub_1000EF5B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return a12;
}

uint64_t sub_1000EF5E4()
{
  return *(void *)(v0 + 40);
}

uint64_t sub_1000EF624()
{
  return *(void *)(v0 + 72);
}

void sub_1000EF634(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + 16 * a1;
  *(void *)(v2 + 616) = *(void *)(v3 + 32);
  *(void *)(v2 + 624) = *(void *)(v3 + 40);
}

void sub_1000EF64C(uint64_t a1)
{
  *(void *)(v2 + v4) = a1;
  sub_10000D5B0(v2, 0, 1, v3);
  os_unfair_lock_unlock(v1);
}

uint64_t sub_1000EF688()
{
  return v0;
}

uint64_t sub_1000EF6A0()
{
  return v0;
}

uint64_t sub_1000EF6D0(uint64_t a1)
{
  *(void *)(v1 + 368) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000EF6F4()
{
  return *(void *)(v0 + 552);
}

uint64_t sub_1000EF718()
{
  return v0;
}

void sub_1000EF754()
{
  uint64_t v1 = 34;
  unint64_t v2 = 0xE100000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t sub_1000EF76C(double a1)
{
  *(double *)(v1 - 144) = a1;
  return Data.init(bytes:count:)(v1 - 144, 8);
}

uint64_t sub_1000EF7E0(uint64_t result)
{
  *(void *)(v1 + 136) = result;
  return result;
}

uint64_t sub_1000EF7EC(uint64_t result)
{
  *(void *)(v1 + 64) = result;
  return result;
}

uint64_t sub_1000EF7F8(uint64_t result)
{
  *(void *)(v1 + 728) = result;
  return result;
}

uint64_t sub_1000EF804()
{
  return v0;
}

uint64_t sub_1000EF81C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000EF834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  *a11 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000EF870()
{
  return swift_arrayDestroy();
}

uint64_t sub_1000EF888()
{
  return v0;
}

uint64_t sub_1000EF894()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000EF8AC()
{
  return 0;
}

uint64_t sub_1000EF8BC()
{
  return v0;
}

uint64_t sub_1000EF8D4(uint64_t a1)
{
  *(void *)(v1 + 384) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000EF8F8()
{
  return v0;
}

uint64_t sub_1000EF910()
{
  return v0;
}

void sub_1000EF91C()
{
  sub_100099268();
}

void sub_1000EF940()
{
  sub_100097DFC();
}

void sub_1000EF964()
{
  sub_10009CC9C();
}

void sub_1000EF988()
{
  sub_100097D9C();
}

BOOL sub_1000EF9D0@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_1000EF9E0()
{
  return v0;
}

uint64_t sub_1000EF9EC()
{
  return v0 + 8;
}

void sub_1000EF9FC()
{
  uint64_t v2 = *(void **)(v0 + 64);
}

void sub_1000EFA2C()
{
  uint64_t v2 = *(void **)(v0 + 72);
}

uint64_t sub_1000EFA50(uint64_t result)
{
  *(void *)(v1 + 56) = result;
  return result;
}

uint64_t sub_1000EFA5C()
{
  sub_10000E788(v2);
  *(_WORD *)(v3 + 12) = 2080;
  *(void *)(v1 + 376) = v0;
  return swift_errorRetain();
}

void *sub_1000EFA98(int a1, int a2, int a3, void *aBlock)
{
  return _Block_copy(aBlock);
}

uint64_t sub_1000EFABC()
{
  return v0;
}

uint64_t sub_1000EFAC8()
{
  return v0;
}

uint64_t sub_1000EFAD4()
{
  return v0;
}

uint64_t sub_1000EFAE0()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_1000EFB28()
{
  return v0 + 8;
}

uint64_t sub_1000EFB38()
{
  return v0 + 8;
}

uint64_t sub_1000EFB48()
{
  return v0 + 8;
}

uint64_t sub_1000EFB58()
{
  return v0 + 8;
}

uint64_t sub_1000EFB84()
{
  return dispatch thunk of IteratorProtocol.next()();
}

void sub_1000EFBA8()
{
  sub_100057848();
}

uint64_t sub_1000EFBD8()
{
  *(void *)(v2 - 96) = v0;
  return v1;
}

void sub_1000EFC34(uint64_t a1@<X8>)
{
  *(void *)(v1 + 600) = a1;
}

uint64_t sub_1000EFCAC(uint64_t result)
{
  *(void *)(v1 + 448) = result;
  return result;
}

void sub_1000EFCEC()
{
  *(void *)(v0 + 720) = 3;
}

uint64_t sub_1000EFD30()
{
  return *(void *)(v0 + 40);
}

void sub_1000EFD6C(uint64_t a1@<X8>)
{
  *(void *)(v2 + 152) = *(void *)(a1 + v1);
}

void sub_1000EFD78(uint64_t a1@<X8>)
{
  *(void *)(v2 + 144) = *(void *)(a1 + v1);
}

uint64_t sub_1000EFD84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10004B44C(v4 - 88, a3, a4);
}

uint64_t sub_1000EFDB8(uint64_t a1)
{
  *(void *)(v1 + 32) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000EFDD8(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000EFDF8()
{
  return v0;
}

uint64_t sub_1000EFE18()
{
  return dispatch thunk of IteratorProtocol.next()();
}

uint64_t sub_1000EFE38()
{
  return swift_task_dealloc();
}

uint64_t sub_1000EFE58()
{
  return swift_task_dealloc();
}

uint64_t sub_1000EFE78(uint64_t result)
{
  *(void *)(v1 + 96) = result;
  return result;
}

uint64_t sub_1000EFE84()
{
  return BidirectionalCollection<>.joined(separator:)();
}

void sub_1000EFEA4()
{
  sub_10009A2C8();
}

void sub_1000EFEC4()
{
  sub_100099D34();
}

void sub_1000EFEE4()
{
  sub_100099908();
}

void sub_1000EFF04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *(void *)(v13 - 16) = a13;
}

void sub_1000EFF18(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(a6 + 16) = a1;
  uint64_t v9 = a6 + 16 * v6;
  *(void *)(v9 + 32) = v7;
  *(void *)(v9 + 40) = v8;
}

void sub_1000EFF2C()
{
  sub_100098D30();
}

uint64_t sub_1000EFF4C()
{
  return sub_10000C0D4(v0, v1);
}

uint64_t sub_1000EFF64()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000EFF84()
{
  return v0;
}

uint64_t sub_1000EFF90(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000EFFEC()
{
  return type metadata accessor for RegistryError(0);
}

uint64_t sub_1000F0008()
{
  return dispatch thunk of IteratorProtocol.next()();
}

uint64_t sub_1000F0028(uint64_t a1, uint64_t a2)
{
  return sub_10000D5B0(a1, a2, 1, v2);
}

void sub_1000F0040()
{
  uint64_t v2 = *(void **)(v0 + 64);
}

uint64_t sub_1000F0060(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_1000F006C()
{
  return sub_1000EB6B0(v1, v0);
}

uint64_t sub_1000F0084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100043D44(0, v4, a3, v3);
}

void sub_1000F00A4()
{
  sub_100057848();
}

uint64_t sub_1000F00C4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_100013090(v3, v4, a3);
}

uint64_t sub_1000F0104(uint64_t a1)
{
  sub_10000DA68(a1, v1);
  sub_100093428(v2);
  return swift_release();
}

uint64_t sub_1000F013C()
{
  return v0;
}

void sub_1000F0150()
{
  sub_100057848();
}

uint64_t sub_1000F017C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000F019C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1000F07F0((uint64_t)v17);
  if (a2)
  {
    uint64_t v8 = v18;
    uint64_t v9 = v19;
    sub_10000BEA0(v17, v18);
    if (qword_10017C4E8 != -1) {
      swift_once();
    }
    sub_10002A9C0((uint64_t)&qword_1001820C8);
    *(void *)&long long v14 = a1;
    *((void *)&v14 + 1) = a2;
    == infix<A>(_:_:)();
    uint64_t v15 = v8;
    uint64_t v16 = v9;
    sub_1000274F4((uint64_t *)&v14);
    QueryType.filter(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000E788((uint64_t)v17);
    sub_10000D698(&v14, (uint64_t)v17);
  }
  if (a4)
  {
    uint64_t v10 = v18;
    uint64_t v11 = v19;
    sub_10000BEA0(v17, v18);
    if (qword_10017C4F0 != -1) {
      swift_once();
    }
    sub_10002A9C0((uint64_t)&qword_1001820E0);
    *(void *)&long long v14 = a3;
    *((void *)&v14 + 1) = a4;
    == infix<A>(_:_:)();
    uint64_t v15 = v10;
    uint64_t v16 = v11;
    sub_1000274F4((uint64_t *)&v14);
    QueryType.filter(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000E788((uint64_t)v17);
    sub_10000D698(&v14, (uint64_t)v17);
  }
  uint64_t v12 = sub_1000F0DD4(v17);
  sub_10000E788((uint64_t)v17);
  return v12;
}

uint64_t sub_1000F03D4(uint64_t a1, void *a2)
{
  Swift::String v5 = LNExamplePhraseDescription.asJson()();
  uint64_t result = v5._countAndFlagsBits;
  if (!v6)
  {
    if (qword_10017C4E0 != -1) {
      swift_once();
    }
    memcpy(__dst, &unk_100182020, sizeof(__dst));
    memcpy(__src, &unk_100182020, sizeof(__src));
    sub_10002A390(__dst);
    if (qword_10017C4E8 != -1) {
      swift_once();
    }
    uint64_t v7 = sub_10002A9C0((uint64_t)&qword_1001820C8);
    v25._uint64_t countAndFlagsBits = a1;
    v25._unint64_t object = a2;
    <- infix<A>(_:_:)(v7, v8, v9, (uint64_t)&v25, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
    sub_10000BF1C(&qword_10017E940);
    *(_OWORD *)(swift_initStackObject() + 16) = xmmword_10013EF20;
    if (qword_10017C4F8 != -1) {
      swift_once();
    }
    uint64_t v10 = sub_10002A9C0((uint64_t)&qword_1001820F8);
    Swift::String v25 = v5;
    <- infix<A>(_:_:)(v10, v11, v12, (uint64_t)&v25, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
    swift_bridgeObjectRelease();
    uint64_t v13 = QueryType.insert(_:_:)((uint64_t)v26);
    uint64_t v15 = v14;
    unint64_t v17 = v16;
    swift_setDeallocating();
    sub_10006F150();
    sub_10002A66C((uint64_t)v26);
    memcpy(v29, __src, sizeof(v29));
    sub_10002A500(v29);
    v30.template._uint64_t countAndFlagsBits = v13;
    v30.template._unint64_t object = v15;
    v30.bindings._rawValue = v17;
    Connection.run(_:)(v30);
    if (v18)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v26[0] = v18;
      swift_errorRetain();
      sub_10000BF1C(&qword_10017C810);
      if (swift_dynamicCast())
      {
        swift_errorRelease();
        uint64_t v19 = __src[1];
        int v20 = __src[2];
        uint64_t v21 = __src[3];
        if (LODWORD(__src[2]) == 19)
        {
          type metadata accessor for Schema.RuntimeError();
          sub_100047EA4();
          swift_allocError();
          *uint64_t v22 = 0xD0000000000000FALL;
          v22[1] = 0x8000000100143860;
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          swift_release();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v23 = __src[0];
          sub_100047E58();
          swift_allocError();
          *(void *)uint64_t v24 = v23;
          *(void *)(v24 + 8) = v19;
          *(_DWORD *)(v24 + 16) = v20;
          *(void *)(v24 + 24) = v21;
          swift_willThrow();
        }
      }
      return swift_errorRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

void *sub_1000F0720()
{
  Table.init(_:database:)(__src, 0x50656C706D617865, 0xEE00736573617268, 0, 0);
  return memcpy(&unk_100182020, __src, 0xA8uLL);
}

uint64_t sub_1000F0780(uint64_t a1)
{
  return sub_100035F34(a1, (uint64_t)&qword_1001820C8, 0xD000000000000010, 0x8000000100143090);
}

uint64_t sub_1000F07A4(uint64_t a1)
{
  return sub_100035F34(a1, (uint64_t)&qword_1001820E0, 0xD000000000000010, 0x8000000100143C00);
}

uint64_t sub_1000F07C8(uint64_t a1)
{
  return sub_100035F34(a1, (uint64_t)&qword_1001820F8, 0x7470697263736564, 0xEB000000006E6F69);
}

uint64_t sub_1000F07F0@<X0>(uint64_t a1@<X8>)
{
  if (qword_10017C4E0 != -1) {
    swift_once();
  }
  memcpy(__dst, &unk_100182020, sizeof(__dst));
  sub_10002A390(__dst);
  if (qword_10017C520 != -1) {
    swift_once();
  }
  memcpy(__src, &unk_1001821F8, sizeof(__src));
  memcpy(v99, __dst, 0xA8uLL);
  int v1 = sub_10002A390(__src);
  if (qword_10017C4E8 != -1) {
    int v1 = swift_once();
  }
  uint64_t v9 = qword_1001820C8;
  uint64_t v10 = unk_1001820D0;
  uint64_t v11 = qword_1001820D8;
  sub_1000F1170(v1, v2, v3, v4, v5, v6, v7, v8, v74, v79, a1, v90[0], v90[1], v90[2], v90[3], v90[4], v90[5], v90[6], v90[7],
    v90[8],
    v90[9],
    v90[10],
    v90[11],
    v90[12],
    v90[13],
    v90[14],
    v90[15],
    v90[16],
    v90[17],
    v90[18],
    v90[19],
    v90[20],
    v91,
    v92,
    v93,
    (uint64_t)v94,
    (uint64_t)v95,
    v96[0],
    v96[1],
    v96[2],
    v96[3],
    v96[4],
    v96[5],
    v96[6],
    v96[7],
    v96[8],
    v96[9],
    v96[10],
    v96[11],
    v96[12],
    v96[13],
    v96[14],
    v96[15],
    v96[16],
    v96[17],
    v96[18],
    v96[19],
    v96[20],
    __dst[0]);
  sub_10002A390(__dst);
  uint64_t v12 = QueryType.namespace<A>(_:)(v9, v10, v11);
  sub_1000F118C(v12, v13, v14, v15, v16, v17, v18, v19, v75, v80, v85, v90[0], v90[1], v90[2], v90[3], v90[4], v90[5], v90[6], v90[7],
    v90[8],
    v90[9],
    v90[10],
    v90[11],
    v90[12],
    v90[13],
    v90[14],
    v90[15],
    v90[16],
    v90[17],
    v90[18],
    v90[19],
    v90[20],
    v91,
    v92,
    v93,
    (uint64_t)v94,
    (uint64_t)v95,
    v96[0],
    v96[1],
    v96[2],
    v96[3],
    v96[4],
    v96[5],
    v96[6],
    v96[7],
    v96[8],
    v96[9],
    v96[10],
    v96[11],
    v96[12],
    v96[13],
    v96[14],
    v96[15],
    v96[16],
    v96[17],
    v96[18],
    v96[19],
    v96[20],
    __dst[0]);
  uint64_t v20 = sub_10000BF1C((uint64_t *)&unk_10017E920);
  v90[3] = v20;
  v90[4] = (uint64_t)&protocol witness table for Expression<A>;
  v90[0] = (uint64_t)v96;
  v90[1] = v9;
  v90[2] = v10;
  sub_10000BF1C(&qword_10017D698);
  uint64_t v21 = swift_allocObject();
  uint64_t v29 = (void *)v21;
  *(_OWORD *)(v21 + 16) = xmmword_10013F1E0;
  if (qword_10017C4F0 != -1) {
    LODWORD(v21) = swift_once();
  }
  uint64_t v30 = qword_1001820E0;
  uint64_t v31 = *(void *)algn_1001820E8;
  uint64_t v32 = qword_1001820F0;
  sub_1000F1170(v21, v22, v23, v24, v25, v26, v27, v28, v76, v81, v86, v90[0], v90[1], v90[2], v90[3], v90[4], v90[5], v90[6], v90[7],
    v90[8],
    v90[9],
    v90[10],
    v90[11],
    v90[12],
    v90[13],
    v90[14],
    v90[15],
    v90[16],
    v90[17],
    v90[18],
    v90[19],
    v90[20],
    v91,
    v92,
    v93,
    (uint64_t)v94,
    (uint64_t)v95,
    v96[0],
    v96[1],
    v96[2],
    v96[3],
    v96[4],
    v96[5],
    v96[6],
    v96[7],
    v96[8],
    v96[9],
    v96[10],
    v96[11],
    v96[12],
    v96[13],
    v96[14],
    v96[15],
    v96[16],
    v96[17],
    v96[18],
    v96[19],
    v96[20],
    __dst[0]);
  sub_10002A390(__dst);
  uint64_t v33 = QueryType.namespace<A>(_:)(v30, v31, v32);
  int v41 = sub_1000F118C(v33, v34, v35, v36, v37, v38, v39, v40, v77, v82, v87, v90[0], v90[1], v90[2], v90[3], v90[4], v90[5], v90[6], v90[7],
                        v90[8],
                        v90[9],
                        v90[10],
                        v90[11],
                        v90[12],
                        v90[13],
                        v90[14],
                        v90[15],
                        v90[16],
                        v90[17],
                        v90[18],
                        v90[19],
                        v90[20],
                        v91,
                        v92,
                        v93,
                        (uint64_t)v94,
                        (uint64_t)v95,
                        v96[0],
                        v96[1],
                        v96[2],
                        v96[3],
                        v96[4],
                        v96[5],
                        v96[6],
                        v96[7],
                        v96[8],
                        v96[9],
                        v96[10],
                        v96[11],
                        v96[12],
                        v96[13],
                        v96[14],
                        v96[15],
                        v96[16],
                        v96[17],
                        v96[18],
                        v96[19],
                        v96[20],
                        __dst[0]);
  v29[7] = v20;
  v29[8] = &protocol witness table for Expression<A>;
  v29[4] = v96;
  v29[5] = v30;
  v29[6] = v31;
  if (qword_10017C4F8 != -1) {
    int v41 = swift_once();
  }
  uint64_t v49 = qword_1001820F8;
  uint64_t v50 = unk_100182100;
  uint64_t v51 = qword_100182108;
  sub_1000F1170(v41, v42, v43, v44, v45, v46, v47, v48, v78, v83, v88, v90[0], v90[1], v90[2], v90[3], v90[4], v90[5], v90[6], v90[7],
    v90[8],
    v90[9],
    v90[10],
    v90[11],
    v90[12],
    v90[13],
    v90[14],
    v90[15],
    v90[16],
    v90[17],
    v90[18],
    v90[19],
    v90[20],
    v91,
    v92,
    v93,
    (uint64_t)v94,
    (uint64_t)v95,
    v96[0],
    v96[1],
    v96[2],
    v96[3],
    v96[4],
    v96[5],
    v96[6],
    v96[7],
    v96[8],
    v96[9],
    v96[10],
    v96[11],
    v96[12],
    v96[13],
    v96[14],
    v96[15],
    v96[16],
    v96[17],
    v96[18],
    v96[19],
    v96[20],
    __dst[0]);
  sub_10002A390(__dst);
  uint64_t v52 = QueryType.namespace<A>(_:)(v49, v50, v51);
  uint64_t v54 = v53;
  uint64_t v56 = v55;
  sub_10002A500(__dst);
  v29[12] = v20;
  v29[13] = &protocol witness table for Expression<A>;
  v29[9] = v52;
  v29[10] = v54;
  v29[11] = v56;
  if (qword_10017C548 != -1) {
    swift_once();
  }
  uint64_t v57 = qword_1001822D0;
  uint64_t v58 = *(void *)algn_1001822D8;
  uint64_t v59 = qword_1001822E0;
  memcpy(v96, __src, sizeof(v96));
  sub_10002A390(__src);
  uint64_t v60 = QueryType.namespace<A>(_:)(v57, v58, v59);
  uint64_t v62 = v61;
  uint64_t v64 = v63;
  sub_10002A500(__src);
  v29[17] = sub_10000BF1C(&qword_10017DED0);
  v29[18] = &protocol witness table for Expression<A>;
  v29[14] = v60;
  v29[15] = v62;
  v29[16] = v64;
  SchemaType.select(_:_:)((uint64_t)v90, (uint64_t)v29, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table);
  swift_setDeallocating();
  sub_10006F144();
  sub_10000E788((uint64_t)v90);
  memcpy(v99, v96, 0xA8uLL);
  uint64_t v94 = &type metadata for Table;
  uint64_t v95 = &protocol witness table for Table;
  uint64_t v91 = swift_allocObject();
  memcpy((void *)(v91 + 16), __src, 0xA8uLL);
  uint64_t v65 = qword_1001820C8;
  uint64_t v66 = unk_1001820D0;
  uint64_t v67 = qword_1001820D8;
  memcpy(v90, __dst, sizeof(v90));
  sub_10002A390(__src);
  QueryType.namespace<A>(_:)(v65, v66, v67);
  sub_10002A500(__dst);
  if (qword_10017C528 != -1) {
    swift_once();
  }
  memcpy(v90, __src, sizeof(v90));
  QueryType.namespace<A>(_:)(qword_1001822A0, *(uint64_t *)algn_1001822A8, qword_1001822B0);
  sub_10002A500(__src);
  uint64_t v68 = == infix<A>(_:_:)();
  uint64_t v70 = v69;
  uint64_t v72 = v71;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v89[3] = (uint64_t)&type metadata for Table;
  v89[4] = (uint64_t)&protocol witness table for Table;
  *uint64_t v89 = swift_allocObject();
  memcpy(v90, v99, sizeof(v90));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.join(_:_:on:)(1, &v91, v68, v70, v72);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  sub_10002A500(v99);
  return sub_10000E788((uint64_t)&v91);
}

uint64_t sub_1000F0DD4(void *a1)
{
  uint64_t v3 = Connection.prepareRowIterator(_:)(a1);
  if (!v1)
  {
    __chkstk_darwin(v3);
    swift_retain();
    RowIterator.compactMap<A>(_:)();
    uint64_t v2 = v5;
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  return v2;
}

uint64_t sub_1000F0EE0()
{
  if (qword_10017C4E8 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  if (qword_10017C4F8 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  sub_1000F1084();
  static LNExamplePhraseDescription.fromJSON(_:)();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1000F1044()
{
  return sub_1000F0EE0();
}

uint64_t sub_1000F104C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  if (!v2)
  {
    *a1 = result;
    a1[1] = v5;
    a1[2] = v6;
  }
  return result;
}

unint64_t sub_1000F1084()
{
  unint64_t result = qword_100180CB0;
  if (!qword_100180CB0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100180CB0);
  }
  return result;
}

uint64_t sub_1000F10C4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0[12])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v0[14])
  {
    swift_bridgeObjectRelease();
    if (v0[16])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 184, 7);
}

ValueMetadata *type metadata accessor for LNExamplePhraseRecord()
{
  return &type metadata for LNExamplePhraseRecord;
}

void *sub_1000F1170(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char __dst,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char __src)
{
  return memcpy(&__dst, &__src, 0xA8uLL);
}

void *sub_1000F118C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  return sub_10002A500(&a59);
}

void *sub_1000F11AC()
{
  Table.init(_:database:)(__src, 0xD00000000000001ELL, 0x8000000100143F20, 0, 0);
  return memcpy(&unk_100182110, __src, 0xA8uLL);
}

uint64_t sub_1000F1204(uint64_t a1)
{
  return sub_100035F34(a1, (uint64_t)&qword_1001821B8, 0xD000000000000010, 0x8000000100143090);
}

uint64_t sub_1000F1228(uint64_t a1)
{
  return sub_100035F34(a1, (uint64_t)&qword_1001821D0, 0x657669746167656ELL, 0xEF73657361726850);
}

ValueMetadata *type metadata accessor for LNAssistantIntentNegativePhraseRecord()
{
  return &type metadata for LNAssistantIntentNegativePhraseRecord;
}

uint64_t sub_1000F1264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  _OWORD v5[4] = a3;
  v5[2] = a1;
  return _swift_task_switch(sub_1000F128C, 0, 0);
}

uint64_t sub_1000F128C()
{
  uint64_t v11 = v0;
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 32);
  long long v9 = *(_OWORD *)(v0 + 16);
  uint64_t v3 = *(os_unfair_lock_s **)(*(void *)(v0 + 48)
                            + OBJC_IVAR____TtC10LinkDaemon25ObservationStatusRegistry_observationEntriesPerBundleIdentifier);
  uint64_t v4 = swift_task_alloc();
  *(_OWORD *)(v4 + 16) = v9;
  *(void *)(v4 + 32) = v2;
  *(void *)(v4 + 40) = v1;
  uint64_t v5 = (uint64_t *)&v3[4];
  v3 += 6;
  os_unfair_lock_lock(v3);
  sub_1000F3990(v5, v10);
  os_unfair_lock_unlock(v3);
  uint64_t v6 = v10[0];
  swift_task_dealloc();
  int v7 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v7(v6);
}

uint64_t sub_1000F1384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  *(_DWORD *)(v6 + 140) = a6;
  uint64_t v7 = sub_1000F3A00(a1, a2, a3, a4, a5);
  sub_1000F39CC(v7);
  *(void *)(v6 + 112) = v8;
  *(void *)(v6 + 120) = swift_task_alloc();
  *(void *)(v6 + 128) = swift_task_alloc();
  return _swift_task_switch(sub_1000F1428, 0, 0);
}

uint64_t sub_1000F1428()
{
  uint64_t v40 = v0;
  UUID.init()();
  if (qword_10017C478 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 112);
  uint64_t v5 = type metadata accessor for Logger();
  sub_10000BEE4(v5, (uint64_t)qword_100181F20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v2, v3);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = *(void *)(v0 + 112);
  uint64_t v9 = *(void *)(v0 + 120);
  uint64_t v11 = *(void *)(v0 + 104);
  if (v8)
  {
    uint64_t v36 = *(void *)(v0 + 104);
    int v12 = *(_DWORD *)(v0 + 140);
    uint64_t v33 = *(void *)(v0 + 80);
    uint64_t v34 = *(void *)(v0 + 88);
    unint64_t v13 = *(void *)(v0 + 72);
    uint64_t v35 = *(void *)(v0 + 120);
    uint64_t v14 = *(void *)(v0 + 64);
    os_log_type_t type = v7;
    uint64_t v15 = swift_slowAlloc();
    v39[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 67109890;
    *(_DWORD *)(v0 + 136) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 8) = 2080;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 32) = sub_100013090(v14, v13, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v15 + 18) = 2080;
    *(void *)(v0 + 16) = v33;
    *(void *)(v0 + 24) = v34;
    swift_bridgeObjectRetain();
    sub_10000BF1C((uint64_t *)&unk_10017D100);
    uint64_t v16 = String.init<A>(describing:)();
    *(void *)(v0 + 40) = sub_100013090(v16, v17, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100018ED4();
    *(_WORD *)(v15 + 28) = 2080;
    sub_1000F38E4();
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 48) = sub_100013090(v18, v19, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v20(v35, v36);
    _os_log_impl((void *)&_mh_execute_header, v6, type, "%d Registering for observation status changes for %s/%s: %s", (uint8_t *)v15, 0x26u);
    swift_arrayDestroy();
    sub_10000EB10();
    sub_10000EB10();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    sub_100018ED4();
    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v20(v9, v11);
  }

  uint64_t v21 = *(void *)(v0 + 128);
  uint64_t v23 = *(void *)(v0 + 88);
  uint64_t v22 = *(void *)(v0 + 96);
  int v24 = *(_DWORD *)(v0 + 140);
  uint64_t v25 = *(void *)(v0 + 80);
  *(_OWORD *)typea = *(_OWORD *)(v0 + 64);
  uint64_t v26 = *(void *)(v0 + 56);
  uint64_t v27 = *(void *)(v22 + OBJC_IVAR____TtC10LinkDaemon25ObservationStatusRegistry_observationEntriesPerBundleIdentifier);
  uint64_t v28 = swift_task_alloc();
  *(_OWORD *)(v28 + 16) = *(_OWORD *)typea;
  *(void *)(v28 + 32) = v21;
  *(_DWORD *)(v28 + 40) = v24;
  *(void *)(v28 + 48) = v25;
  *(void *)(v28 + 56) = v23;
  *(void *)(v28 + 64) = v22;
  os_unfair_lock_lock((os_unfair_lock_t)(v27 + 24));
  sub_1000F3964((void *)(v27 + 16), v26);
  uint64_t v29 = *(void *)(v0 + 128);
  uint64_t v30 = *(void *)(v0 + 104);
  os_unfair_lock_unlock((os_unfair_lock_t)(v27 + 24));
  swift_task_dealloc();
  v20(v29, v30);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v31 = *(uint64_t (**)(void))(v0 + 8);
  return v31();
}

uint64_t sub_1000F187C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  *(_DWORD *)(v6 + 132) = a6;
  uint64_t v7 = sub_1000F3A00(a1, a2, a3, a4, a5);
  sub_1000F39CC(v7);
  *(void *)(v6 + 112) = v8;
  *(void *)(v6 + 120) = swift_task_alloc();
  return _swift_task_switch(sub_1000F1910, 0, 0);
}

uint64_t sub_1000F1910()
{
  uint64_t v32 = v0;
  if (qword_10017C478 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v5 = type metadata accessor for Logger();
  sub_10000BEE4(v5, (uint64_t)qword_100181F20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    int v8 = *(_DWORD *)(v0 + 132);
    uint64_t v27 = *(void *)(v0 + 80);
    uint64_t v26 = *(void *)(v0 + 72);
    unint64_t v9 = *(void *)(v0 + 64);
    uint64_t v25 = *(void *)(v0 + 56);
    log = v6;
    uint64_t v10 = swift_slowAlloc();
    v31[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 67109890;
    *(_DWORD *)(v0 + 128) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 8) = 2080;
    sub_1000F38E4();
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 32) = sub_100013090(v11, v12, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v13 = sub_1000F39E8();
    v14(v13);
    *(_WORD *)(v10 + 18) = 2080;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 40) = sub_100013090(v25, v9, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v10 + 28) = 2080;
    *(void *)(v0 + 16) = v26;
    *(void *)(v0 + 24) = v27;
    swift_bridgeObjectRetain();
    sub_10000BF1C((uint64_t *)&unk_10017D100);
    uint64_t v15 = String.init<A>(describing:)();
    *(void *)(v0 + 48) = sub_100013090(v15, v16, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100018ED4();
    _os_log_impl((void *)&_mh_execute_header, log, v7, "%d Unregistering %s for observation status changes for %s/%s", (uint8_t *)v10, 0x26u);
    swift_arrayDestroy();
    sub_10000EB10();
    sub_10000EB10();
  }
  else
  {
    uint64_t v17 = sub_1000F39E8();
    v18(v17);
    swift_bridgeObjectRelease_n();
    sub_100018ED4();
  }
  uint64_t v20 = *(void *)(v0 + 88);
  uint64_t v19 = *(void *)(v0 + 96);
  long long v29 = *(_OWORD *)(v0 + 56);
  *(_OWORD *)os_log_type_t type = *(_OWORD *)(v0 + 72);
  uint64_t v21 = *(void *)(v19 + OBJC_IVAR____TtC10LinkDaemon25ObservationStatusRegistry_observationEntriesPerBundleIdentifier);
  uint64_t v22 = swift_task_alloc();
  *(_OWORD *)(v22 + 16) = v29;
  *(_OWORD *)(v22 + 32) = *(_OWORD *)type;
  *(void *)(v22 + 48) = v20;
  *(void *)(v22 + 56) = v19;
  os_unfair_lock_lock((os_unfair_lock_t)(v21 + 24));
  sub_1000F38C0((uint64_t *)(v21 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v21 + 24));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
  return v23();
}

uint64_t sub_1000F1D08(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v41 = a1;
  unint64_t v42 = a3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000BF1C(&qword_10017C788);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(a5 + 56);
  uint64_t v43 = a5 + 56;
  uint64_t v16 = 1 << *(unsigned char *)(a5 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v15;
  int64_t v44 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v51 = v9 + 16;
  uint64_t v52 = a5;
  int v48 = (uint64_t (**)(char *, uint64_t))(v9 + 8);
  uint64_t v49 = (void (**)(char *, char *, uint64_t))(v9 + 32);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v20 = 0;
  unint64_t v47 = 0x8000000100145BD0;
  *(void *)&long long v21 = 136315650;
  long long v40 = v21;
  v39[1] = (char *)&type metadata for Any + 8;
  uint64_t v50 = v14;
  if (!v18) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v22 = __clz(__rbit64(v18));
  uint64_t v23 = (v18 - 1) & v18;
  for (unint64_t i = v22 | (v20 << 6); ; unint64_t i = __clz(__rbit64(v26)) + (v20 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v14, *(void *)(v52 + 48) + *(void *)(v9 + 72) * i, v8);
    sub_10000D5B0((uint64_t)v14, 0, 1, v8);
    if (sub_10000D5D8((uint64_t)v14, 1, v8) == 1) {
      return swift_release();
    }
    unint64_t v53 = v23;
    int64_t v54 = v20;
    (*v49)(v11, v14, v8);
    unint64_t v56 = 0;
    unint64_t v57 = 0xE000000000000000;
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    unint64_t v56 = 0xD000000000000022;
    unint64_t v57 = v47;
    v28._uint64_t countAndFlagsBits = UUID.uuidString.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    uint64_t v29 = v56;
    unint64_t v30 = v57;
    if (qword_10017C478 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_10000BEE4(v31, (uint64_t)qword_100181F20);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      uint64_t v55 = v46;
      *(_DWORD *)uint64_t v34 = v40;
      swift_bridgeObjectRetain();
      uint64_t v45 = v29;
      *(void *)(v34 + 4) = sub_100013090(v29, v30, &v55);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v34 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v34 + 14) = sub_100013090(v41, a2, &v55);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v34 + 22) = 2080;
      unint64_t v56 = v42;
      unint64_t v57 = a4;
      swift_bridgeObjectRetain();
      sub_10000BF1C((uint64_t *)&unk_10017D100);
      uint64_t v35 = String.init<A>(describing:)();
      *(void *)(v34 + 24) = sub_100013090(v35, v36, &v55);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Posting observation status change notification %s for %s/%s", (uint8_t *)v34, 0x20u);
      swift_arrayDestroy();
      sub_10000EB10();
      sub_10000EB10();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    id v37 = [self defaultCenter];
    NSString v38 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v37 postNotificationName:v38 object:0];

    uint64_t result = (*v48)(v11, v8);
    uint64_t v14 = v50;
    unint64_t v18 = v53;
    int64_t v20 = v54;
    if (v53) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v44) {
      goto LABEL_27;
    }
    unint64_t v26 = *(void *)(v43 + 8 * v25);
    ++v20;
    if (!v26)
    {
      int64_t v20 = v25 + 1;
      if (v25 + 1 >= v44) {
        goto LABEL_27;
      }
      unint64_t v26 = *(void *)(v43 + 8 * v20);
      if (!v26)
      {
        int64_t v20 = v25 + 2;
        if (v25 + 2 >= v44) {
          goto LABEL_27;
        }
        unint64_t v26 = *(void *)(v43 + 8 * v20);
        if (!v26) {
          break;
        }
      }
    }
LABEL_18:
    uint64_t v23 = (v26 - 1) & v26;
  }
  int64_t v27 = v25 + 3;
  if (v27 >= v44)
  {
LABEL_27:
    sub_10000D5B0((uint64_t)v14, 1, 1, v8);
    return swift_release();
  }
  unint64_t v26 = *(void *)(v43 + 8 * v27);
  if (v26)
  {
    int64_t v20 = v27;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v20 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v20 >= v44) {
      goto LABEL_27;
    }
    unint64_t v26 = *(void *)(v43 + 8 * v20);
    ++v27;
    if (v26) {
      goto LABEL_18;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_1000F22FC(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  if (qword_10017C478 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_10000BEE4(v9, (uint64_t)qword_100181F20);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.info.getter();
  uint64_t v32 = a2;
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315394;
    swift_bridgeObjectRetain();
    sub_100013090(v32, a3, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 12) = 2080;
    v33[1] = a5;
    swift_bridgeObjectRetain();
    sub_10000BF1C((uint64_t *)&unk_10017D100);
    uint64_t v13 = String.init<A>(describing:)();
    v33[0] = sub_100013090(v13, v14, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    unint64_t v15 = a5;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Requesting isObserved for %s/%s'", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a2 = v32;
    swift_slowDealloc();
  }
  else
  {

    unint64_t v15 = a5;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v16 = *a1;
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_10001B904(a2, a3, v16);
  uint64_t v19 = v18;
  swift_bridgeObjectRelease();
  if (!v17) {
    goto LABEL_19;
  }
  if (*(void *)(v17 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain_n();
    int64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v20, v21))
    {
      unint64_t v22 = (uint8_t *)swift_slowAlloc();
      v33[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v22 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v34 = sub_100013090(v32, a3, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "isObserved true for %s", v22, 0xCu);
      char v23 = 1;
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      char v23 = 1;
    }
    goto LABEL_20;
  }
  if (!v15)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_18:
    swift_bridgeObjectRelease();
LABEL_19:
    char v23 = 0;
    goto LABEL_20;
  }
  swift_bridgeObjectRetain_n();
  uint64_t v24 = sub_10001B9A8(a4, v15, v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v24) {
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
  uint64_t v25 = *(void *)(v24 + 16);
  swift_bridgeObjectRelease();
  if (!v25) {
    goto LABEL_18;
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  unint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = swift_slowAlloc();
    v33[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v34 = sub_100013090(v32, a3, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v28 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v34 = sub_100013090(a4, v15, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "isObserved true for %s/%s", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  char v23 = 1;
LABEL_20:
  *a6 = v23;
}

uint64_t sub_1000F2908@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v74 = a9;
  uint64_t v73 = a8;
  uint64_t v64 = a6;
  LODWORD(v65) = a5;
  uint64_t v14 = type metadata accessor for ObservationStatusRegistry.ObservationStatusChangeListener();
  uint64_t v15 = v14 - 8;
  uint64_t v66 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  int64_t v20 = (char *)&v64 - v19;
  uint64_t v72 = a1;
  uint64_t v21 = *a1;
  swift_bridgeObjectRetain();
  uint64_t v75 = a2;
  uint64_t v22 = sub_10001B904(a2, a3, v21);
  uint64_t v24 = v23;
  unint64_t v26 = v25;
  unint64_t v76 = a3;
  swift_bridgeObjectRelease();
  if (v22)
  {
    os_log_type_t v27 = (void *)v22;
  }
  else
  {
    uint64_t v24 = _swiftEmptyArrayStorage;
    os_log_type_t v27 = _swiftEmptyArrayStorage;
  }
  uint64_t v77 = v27;
  if (v22) {
    uint64_t v28 = v26;
  }
  else {
    uint64_t v28 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v29 = type metadata accessor for UUID();
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16);
  uint64_t v71 = a4;
  uint64_t v67 = v29;
  uint64_t v68 = v30 + 16;
  uint64_t v69 = v31;
  ((void (*)(char *, uint64_t))v31)(v20, a4);
  *(_DWORD *)&v20[*(int *)(v15 + 28)] = v65;
  if (a7)
  {
    uint64_t v65 = v20;
    swift_bridgeObjectRetain();
    uint64_t v32 = v64;
    uint64_t v33 = sub_10001B9A8(v64, a7, v28);
    if (v33) {
      uint64_t v35 = (void *)v33;
    }
    else {
      uint64_t v35 = _swiftEmptyArrayStorage;
    }
    if (v33) {
      unint64_t v36 = v34;
    }
    else {
      unint64_t v36 = _swiftEmptyArrayStorage;
    }
    uint64_t v81 = v35;
    id v37 = v28;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v36 = (void *)sub_10001F460(0, v36[2] + 1, 1, (uint64_t)v36);
    }
    uint64_t v38 = (uint64_t)v65;
    unint64_t v40 = v36[2];
    unint64_t v39 = v36[3];
    if (v40 >= v39 >> 1) {
      unint64_t v36 = (void *)sub_10001F460(v39 > 1, v40 + 1, 1, (uint64_t)v36);
    }
    v36[2] = v40 + 1;
    sub_100018800(v38, (uint64_t)v36+ ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80))+ *(void *)(v66 + 72) * v40);
    uint64_t v82 = v36;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v79 = (uint64_t)v37;
    sub_10000CE08(v35, v36, v32, a7, isUniquelyReferenced_nonNull_native);
    uint64_t v70 = (void *)v79;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_10017C478 != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    sub_10000BEE4(v42, (uint64_t)qword_100181F20);
    unint64_t v43 = v76;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    int64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = swift_slowAlloc();
      uint64_t v83 = swift_slowAlloc();
      *(_DWORD *)uint64_t v46 = 136315906;
      swift_bridgeObjectRetain();
      uint64_t v79 = sub_100013090(v75, v43, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v46 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v79 = sub_100013090(v32, a7, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v46 + 22) = 2048;
      swift_beginAccess();
      uint64_t v78 = v81[2];
      unint64_t v43 = v76;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v46 + 32) = 2048;
      uint64_t v38 = (uint64_t)v65;
      uint64_t v78 = v82[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "%s/%s: # of event listeners for %ld # of observation status change clients): %ld", (uint8_t *)v46, 0x2Au);
      swift_arrayDestroy();
      uint64_t v47 = v75;
      swift_slowDealloc();
      swift_slowDealloc();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v47 = v75;
    }
    uint64_t v49 = (uint64_t)v77;
  }
  else
  {
    sub_100018800((uint64_t)v20, (uint64_t)v17);
    char v48 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v38 = (uint64_t)v20;
    uint64_t v70 = v28;
    if ((v48 & 1) == 0) {
      uint64_t v24 = (void *)sub_10001F460(0, v24[2] + 1, 1, (uint64_t)v24);
    }
    uint64_t v49 = (uint64_t)v77;
    unint64_t v51 = v24[2];
    unint64_t v50 = v24[3];
    if (v51 >= v50 >> 1) {
      uint64_t v24 = (void *)sub_10001F460(v50 > 1, v51 + 1, 1, (uint64_t)v24);
    }
    void v24[2] = v51 + 1;
    sub_1000B1928((uint64_t)v17, (uint64_t)v24+ ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80))+ *(void *)(v66 + 72) * v51);
    uint64_t v52 = qword_10017C478;
    swift_bridgeObjectRetain();
    if (v52 != -1) {
      swift_once();
    }
    uint64_t v53 = type metadata accessor for Logger();
    sub_10000BEE4(v53, (uint64_t)qword_100181F20);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    unint64_t v43 = v76;
    swift_bridgeObjectRetain_n();
    int64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = swift_slowAlloc();
      uint64_t v66 = swift_slowAlloc();
      uint64_t v81 = (void *)v66;
      *(_DWORD *)uint64_t v56 = 136315906;
      swift_bridgeObjectRetain();
      uint64_t v79 = sub_100013090(v75, v43, (uint64_t *)&v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v56 + 12) = 2080;
      uint64_t v79 = v64;
      uint64_t v80 = 0;
      sub_10000BF1C((uint64_t *)&unk_10017D100);
      uint64_t v57 = v38;
      uint64_t v58 = String.init<A>(describing:)();
      uint64_t v79 = sub_100013090(v58, v59, (uint64_t *)&v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v56 + 22) = 2048;
      uint64_t v60 = v77[2];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v79 = v60;
      uint64_t v38 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_WORD *)(v56 + 32) = 2048;
      uint64_t v61 = v24[2];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v79 = v61;
      unint64_t v43 = v76;
      uint64_t v49 = (uint64_t)v77;
      uint64_t v47 = v75;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "%s/%s: # of event listeners for %ld # of observation status change clients): %ld", (uint8_t *)v56, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      uint64_t v47 = v75;
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v62 = (uint64_t)v70;
  swift_bridgeObjectRetain();
  sub_10004F8DC(v49, (uint64_t)v24, v62, v47, v43);
  swift_bridgeObjectRelease();
  sub_1000AF504();
  sub_100018864(v38);
  v69(v74, v71, v67);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000F3210(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = *a1;
  swift_bridgeObjectRetain();
  uint64_t v38 = a2;
  uint64_t v10 = sub_10001B904(a2, a3, v9);
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v15 = swift_bridgeObjectRelease();
  if (v10) {
    uint64_t v16 = (void *)v10;
  }
  else {
    uint64_t v16 = _swiftEmptyArrayStorage;
  }
  if (v10) {
    uint64_t v17 = v12;
  }
  else {
    uint64_t v17 = _swiftEmptyArrayStorage;
  }
  if (v10) {
    uint64_t v18 = v14;
  }
  else {
    uint64_t v18 = _swiftEmptyDictionarySingleton;
  }
  if (!a5)
  {
    unint64_t v40 = v16;
    uint64_t v42 = v17;
    __chkstk_darwin(v15);
    sub_1000E8378();
    if (v42[2] < v29)
    {
      __break(1u);
    }
    else
    {
      sub_1000E6934();
      uint64_t v30 = qword_10017C478;
      uint64_t v37 = (uint64_t)v40;
      swift_bridgeObjectRetain();
      uint64_t v36 = (uint64_t)v42;
      swift_bridgeObjectRetain();
      if (v30 == -1)
      {
LABEL_23:
        uint64_t v31 = type metadata accessor for Logger();
        sub_10000BEE4(v31, (uint64_t)qword_100181F20);
        swift_bridgeObjectRetain_n();
        uint64_t v32 = Logger.logObject.getter();
        os_log_type_t v33 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v32, v33))
        {
          uint64_t v34 = swift_slowAlloc();
          uint64_t v43 = swift_slowAlloc();
          *(_DWORD *)uint64_t v34 = 136315650;
          swift_bridgeObjectRetain();
          sub_100013090(v38, a3, &v43);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v34 + 12) = 2048;
          swift_beginAccess();
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v34 + 22) = 2048;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v32, v33, "%s: # of event listeners for  %ld # of observation status change clients): %ld", (uint8_t *)v34, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          goto LABEL_28;
        }

LABEL_27:
        swift_bridgeObjectRelease_n();
        goto LABEL_28;
      }
    }
    swift_once();
    goto LABEL_23;
  }
  uint64_t v36 = (uint64_t)v17;
  uint64_t v37 = (uint64_t)v16;
  swift_bridgeObjectRetain();
  uint64_t v19 = sub_10001B9A8(a4, a5, v18);
  if (v19) {
    uint64_t v21 = (void *)v19;
  }
  else {
    uint64_t v21 = _swiftEmptyArrayStorage;
  }
  if (v19) {
    uint64_t v22 = v20;
  }
  else {
    uint64_t v22 = _swiftEmptyArrayStorage;
  }
  unint64_t v39 = v21;
  uint64_t v41 = v22;
  __chkstk_darwin(v19);
  sub_1000E8378();
  if (v41[2] < v23)
  {
    __break(1u);
  }
  else
  {
    sub_1000E6934();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10000CE08(v39, v41, a4, a5, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_10017C478 == -1) {
      goto LABEL_19;
    }
  }
  swift_once();
LABEL_19:
  uint64_t v25 = type metadata accessor for Logger();
  sub_10000BEE4(v25, (uint64_t)qword_100181F20);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  unint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.info.getter();
  if (!os_log_type_enabled(v26, v27))
  {

    swift_bridgeObjectRelease_n();
    goto LABEL_27;
  }
  uint64_t v28 = swift_slowAlloc();
  uint64_t v43 = swift_slowAlloc();
  *(_DWORD *)uint64_t v28 = 136315906;
  swift_bridgeObjectRetain();
  sub_100013090(v38, a3, &v43);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  *(_WORD *)(v28 + 12) = 2080;
  swift_bridgeObjectRetain();
  sub_100013090(a4, a5, &v43);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  *(_WORD *)(v28 + 22) = 2048;
  swift_beginAccess();
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v28 + 32) = 2048;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  _os_log_impl((void *)&_mh_execute_header, v26, v27, "%s/%s: # of event listeners for  %ld # of observation status change clients): %ld", (uint8_t *)v28, 0x2Au);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

LABEL_28:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10004F8DC(v37, v36, (uint64_t)v18, v38, a3);
  swift_bridgeObjectRelease();
  sub_1000AF504();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000F38C0(uint64_t *a1)
{
  return sub_1000F3210(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

unint64_t sub_1000F38E4()
{
  unint64_t result = qword_10017D010;
  if (!qword_10017D010)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D010);
  }
  return result;
}

uint64_t sub_1000F3934()
{
  return static UUID.== infix(_:_:)() & 1;
}

uint64_t sub_1000F3964@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000F2908(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(_DWORD *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), a2);
}

void sub_1000F3990(uint64_t *a1@<X0>, char *a2@<X8>)
{
  sub_1000F22FC(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), a2);
}

uint64_t sub_1000F39B0()
{
  return sub_1000F3934() & 1;
}

uint64_t sub_1000F39CC(uint64_t a1)
{
  *(void *)(v1 + 104) = a1;
  return a1 - 8;
}

uint64_t sub_1000F39E8()
{
  return v0;
}

uint64_t sub_1000F3A00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[11] = a5;
  v6[12] = v5;
  v6[9] = a3;
  v6[10] = a4;
  v6[7] = a1;
  v6[8] = a2;
  return type metadata accessor for UUID();
}

uint64_t sub_1000F3A20()
{
  return swift_initClassMetadata2();
}

void sub_1000F3A80(void *a1)
{
}

void sub_1000F3AA4(void *a1)
{
  unsigned int v2 = [a1 processIdentifier];
  id v3 = (id)LNDaemonObservationStatusRegistryXPCInterface();
  [a1 setExportedInterface:v3];

  sub_1000168C0(aBlock);
  uint64_t v4 = v16;
  if (v16)
  {
    uint64_t v5 = sub_10000BEA0(aBlock, (uint64_t)v16);
    uint64_t v6 = *(v4 - 1);
    double v7 = __chkstk_darwin(v5);
    uint64_t v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v6 + 16))(v9, v7);
    uint64_t v10 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, void *))(v6 + 8))(v9, v4);
    sub_10000E788((uint64_t)aBlock);
  }
  else
  {
    uint64_t v10 = 0;
  }
  [a1 setExportedObject:v10];
  swift_unknownObjectRelease();
  uint64_t v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v12 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v13 = swift_allocObject();
  *(_DWORD *)(v13 + 16) = v2;
  *(void *)(v13 + 24) = v11;
  *(void *)(v13 + 32) = v12;
  uint64_t v17 = sub_1000F686C;
  uint64_t v18 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000125A8;
  uint64_t v16 = &unk_100172E48;
  uint64_t v14 = _Block_copy(aBlock);
  swift_release();
  [a1 setInvalidationHandler:v14];
  _Block_release(v14);
}

void sub_1000F3D18(void *a1)
{
  swift_getObjectType();
  unsigned int v2 = [a1 processIdentifier];
  id v3 = sub_10003771C(a1);
  [a1 setExportedInterface:v3];

  sub_1000168C0(aBlock);
  uint64_t v4 = v18;
  if (v18)
  {
    uint64_t v5 = sub_10000BEA0(aBlock, (uint64_t)v18);
    uint64_t v6 = *(v4 - 1);
    double v7 = __chkstk_darwin(v5);
    uint64_t v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v6 + 16))(v9, v7);
    uint64_t v10 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, void *))(v6 + 8))(v9, v4);
    sub_10000E788((uint64_t)aBlock);
  }
  else
  {
    uint64_t v10 = 0;
  }
  [a1 setExportedObject:v10];
  swift_unknownObjectRelease();
  id v11 = sub_100037B08();
  if (v11)
  {
    uint64_t v12 = v11;
    [a1 setRemoteObjectInterface:v11];
  }
  uint64_t v13 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v14 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v15 = swift_allocObject();
  *(_DWORD *)(v15 + 16) = v2;
  *(void *)(v15 + 24) = v13;
  *(void *)(v15 + 32) = v14;
  uint64_t v19 = sub_1000F6940;
  uint64_t v20 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000125A8;
  uint64_t v18 = &unk_100172EC0;
  uint64_t v16 = _Block_copy(aBlock);
  swift_release();
  [a1 setInvalidationHandler:v16];
  _Block_release(v16);
}

void sub_1000F3FD0(void *a1)
{
  unsigned int v2 = [a1 processIdentifier];
  id v3 = (id)LNDaemonSuggestionsXPCInterface();
  [a1 setExportedInterface:v3];

  sub_1000168C0(aBlock);
  uint64_t v4 = v16;
  if (v16)
  {
    uint64_t v5 = sub_10000BEA0(aBlock, (uint64_t)v16);
    uint64_t v6 = *(v4 - 1);
    double v7 = __chkstk_darwin(v5);
    uint64_t v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v6 + 16))(v9, v7);
    uint64_t v10 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, void *))(v6 + 8))(v9, v4);
    sub_10000E788((uint64_t)aBlock);
  }
  else
  {
    uint64_t v10 = 0;
  }
  [a1 setExportedObject:v10];
  swift_unknownObjectRelease();
  uint64_t v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v12 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v13 = swift_allocObject();
  *(_DWORD *)(v13 + 16) = v2;
  *(void *)(v13 + 24) = v11;
  *(void *)(v13 + 32) = v12;
  uint64_t v17 = sub_1000F6950;
  uint64_t v18 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000125A8;
  uint64_t v16 = &unk_100172F38;
  uint64_t v14 = _Block_copy(aBlock);
  swift_release();
  [a1 setInvalidationHandler:v14];
  _Block_release(v14);
}

void sub_1000F4244(void *a1)
{
  unsigned int v2 = [a1 processIdentifier];
  id v3 = (id)LNDaemonRegistryXPCInterface();
  [a1 setExportedInterface:v3];

  sub_1000C4600(aBlock);
  uint64_t v4 = v16;
  if (v16)
  {
    uint64_t v5 = sub_10000BEA0(aBlock, (uint64_t)v16);
    uint64_t v6 = *(v4 - 1);
    double v7 = __chkstk_darwin(v5);
    uint64_t v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v6 + 16))(v9, v7);
    uint64_t v10 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, void *))(v6 + 8))(v9, v4);
    sub_10000E788((uint64_t)aBlock);
  }
  else
  {
    uint64_t v10 = 0;
  }
  [a1 setExportedObject:v10];
  swift_unknownObjectRelease();
  uint64_t v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v12 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v13 = swift_allocObject();
  *(_DWORD *)(v13 + 16) = v2;
  *(void *)(v13 + 24) = v11;
  *(void *)(v13 + 32) = v12;
  uint64_t v17 = sub_1000F6960;
  uint64_t v18 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000125A8;
  uint64_t v16 = &unk_100172FB0;
  uint64_t v14 = _Block_copy(aBlock);
  swift_release();
  [a1 setInvalidationHandler:v14];
  _Block_release(v14);
}

void sub_1000F44B8(void *a1)
{
  unsigned int v2 = [a1 processIdentifier];
  id v3 = (id)LNDaemonExtensionXPCInterface();
  [a1 setExportedInterface:v3];

  sub_1000168C0(aBlock);
  uint64_t v4 = v16;
  if (v16)
  {
    uint64_t v5 = sub_10000BEA0(aBlock, (uint64_t)v16);
    uint64_t v6 = *(v4 - 1);
    double v7 = __chkstk_darwin(v5);
    uint64_t v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v6 + 16))(v9, v7);
    uint64_t v10 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, void *))(v6 + 8))(v9, v4);
    sub_10000E788((uint64_t)aBlock);
  }
  else
  {
    uint64_t v10 = 0;
  }
  [a1 setExportedObject:v10];
  swift_unknownObjectRelease();
  uint64_t v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v12 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v13 = swift_allocObject();
  *(_DWORD *)(v13 + 16) = v2;
  *(void *)(v13 + 24) = v11;
  *(void *)(v13 + 32) = v12;
  uint64_t v17 = sub_1000F69B0;
  uint64_t v18 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000125A8;
  uint64_t v16 = &unk_100173028;
  uint64_t v14 = _Block_copy(aBlock);
  swift_release();
  [a1 setInvalidationHandler:v14];
  _Block_release(v14);
}

uint64_t sub_1000F472C()
{
  sub_10000EC58();
  uint64_t v0 = sub_1000F6A14();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_1000F69F0;
  uint64_t v10 = (uint64_t (*)(void))sub_1000F6A98((uint64_t)v1, v3, v4, v5, v6, v7, v8, v9, v12);
  return v10();
}

void sub_1000F47B4(void *a1)
{
}

uint64_t sub_1000F47D8(void *a1)
{
  return sub_1000716D4(a1) & 1;
}

uint64_t sub_1000F4800()
{
  sub_10000EC58();
  uint64_t v0 = sub_1000F6A14();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_1000F4888;
  uint64_t v10 = (uint64_t (*)(void))sub_1000F6A98((uint64_t)v1, v3, v4, v5, v6, v7, v8, v9, v12);
  return v10();
}

uint64_t sub_1000F4888()
{
  sub_10000EC58();
  sub_100010BAC();
  swift_task_dealloc();
  sub_10000EB74();
  return v0();
}

void sub_1000F4950(void *a1)
{
}

uint64_t sub_1000F4974()
{
  sub_10000EC58();
  uint64_t v0 = sub_1000F6A14();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_1000F69F0;
  uint64_t v10 = (uint64_t (*)(void))sub_1000F6A98((uint64_t)v1, v3, v4, v5, v6, v7, v8, v9, v12);
  return v10();
}

void sub_1000F49FC(void *a1)
{
}

uint64_t sub_1000F4A20()
{
  sub_10000EC58();
  uint64_t v0 = sub_1000F6A14();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_1000F69F0;
  uint64_t v10 = (uint64_t (*)(void))sub_1000F6A98((uint64_t)v1, v3, v4, v5, v6, v7, v8, v9, v12);
  return v10();
}

uint64_t sub_1000F4AA8()
{
  sub_10000EC58();
  v1[2] = v0;
  sub_1000F6A34();
  v1[3] = v2;
  v1[4] = *(void *)(v3 + 80);
  sub_100028430();
  v1[5] = v4;
  v1[6] = swift_task_alloc();
  return _swift_task_switch(sub_1000F4B68, v0, 0);
}

uint64_t sub_1000F4B68()
{
  uint64_t v1 = v0[6];
  [*(id *)(v0[2] + 112) invalidate];
  sub_1000A8B94(v1);
  uint64_t v2 = *(void *)(v0[3] + 88);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v2 + 32) + **(int **)(v2 + 32));
  uint64_t v3 = (void *)swift_task_alloc();
  v0[7] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000F4CCC;
  uint64_t v4 = v0[4];
  return v6(v4, v2);
}

uint64_t sub_1000F4CCC()
{
  sub_100010BAC();
  uint64_t v2 = v1;
  uint64_t v4 = v3[6];
  uint64_t v5 = v3[5];
  uint64_t v6 = v3[4];
  *(void *)(v1 + 64) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
  {
    uint64_t v7 = *(void *)(v2 + 16);
    return _swift_task_switch(sub_1000F4E4C, v7, 0);
  }
  else
  {
    swift_task_dealloc();
    sub_10000EB74();
    return v8();
  }
}

uint64_t sub_1000F4E4C()
{
  sub_10000EC58();
  swift_task_dealloc();
  sub_10000EB74();
  return v0();
}

uint64_t sub_1000F4EA8(uint64_t a1, void *a2)
{
  uint64_t ObjectType = swift_getObjectType();
  sub_1000F6A34();
  v42[0] = v3;
  uint64_t v5 = *(void *)(v4 + 80);
  sub_100028430();
  v42[1] = v6;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v42 - v8;
  uint64_t v10 = type metadata accessor for Logger();
  sub_100028430();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = v5;
  uint64_t v49 = v5;
  sub_10000BF1C((uint64_t *)&unk_10017EAF0);
  String.init<A>(describing:)();
  uint64_t result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    String.init(cString:)();
    Logger.init(subsystem:category:)();
    id v17 = a2;
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    BOOL v20 = os_log_type_enabled(v18, v19);
    uint64_t v44 = v10;
    uint64_t v45 = v12;
    uint64_t v43 = v15;
    if (v20)
    {
      uint64_t v21 = (uint8_t *)sub_10006FE08();
      uint64_t v49 = sub_100060438();
      *(_DWORD *)uint64_t v21 = 136315138;
      unint64_t v22 = sub_1000F5528(v17);
      uint64_t v48 = sub_1000F6ABC(v22, v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Incoming %s", v21, 0xCu);
      swift_arrayDestroy();
      uint64_t v15 = v43;
      sub_10000EB10();
      sub_10000EB10();
    }
    else
    {
    }
    uint64_t v24 = v47;
    sub_1000A8B94((uint64_t)v9);
    uint64_t v25 = *(void *)(v42[0] + 88);
    (*(void (**)(id, uint64_t, uint64_t))(v25 + 16))(v17, v24, v25);
    char v27 = (*(uint64_t (**)(id, uint64_t, uint64_t))(v25 + 24))(v17, v24, v25);
    uint64_t v28 = sub_1000F6AA4();
    v29(v28);
    id v30 = v17;
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    BOOL v33 = os_log_type_enabled(v31, v32);
    if (v27)
    {
      if (v33)
      {
        uint64_t v34 = (uint8_t *)sub_10006FE08();
        uint64_t v49 = sub_100060438();
        unint64_t v35 = sub_1000F6A70(4.8149e-34);
        uint64_t v37 = sub_1000F6ABC(v35, v36);
        sub_1000F6A48(v37);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Accepting %s", v34, 0xCu);
        uint64_t v26 = 1;
        swift_arrayDestroy();
        sub_10000EB10();
        sub_10000EB10();

        (*(void (**)(id, uint64_t))(v45 + 8))(v17, v44);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v45 + 8))(v15, v44);
        return 1;
      }
    }
    else
    {
      if (v33)
      {
        uint64_t v38 = (uint8_t *)sub_10006FE08();
        uint64_t v49 = sub_100060438();
        unint64_t v39 = sub_1000F6A70(4.8149e-34);
        uint64_t v41 = sub_1000F6ABC(v39, v40);
        sub_1000F6A48(v41);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Rejecting %s", v38, 0xCu);
        swift_arrayDestroy();
        sub_10000EB10();
        sub_10000EB10();

        (*(void (**)(id, uint64_t))(v45 + 8))(v17, v44);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v45 + 8))(v15, v44);
      }
      return 0;
    }
    return v26;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_1000F5528(void *a1)
{
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  [a1 processIdentifier];
  v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 0x72657320726F6620;
  v4._unint64_t object = (void *)0xEE00222065636976;
  String.append(_:)(v4);
  v5._uint64_t countAndFlagsBits = (*(uint64_t (**)(void))(*(void *)(v1 + 88) + 8))();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 34;
  v6._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0xD000000000000018;
}

uint64_t sub_1000F5640(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5 = a3;
  id v6 = a4;
  uint64_t v7 = swift_retain();
  char v8 = sub_1000F4EA8(v7, v6);

  swift_release();
  return v8 & 1;
}

void sub_1000F56A4()
{
}

void sub_1000F56DC()
{
}

uint64_t sub_1000F56F4()
{
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_1000F5724()
{
  sub_1000F56F4();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for XPCListenerEntryPoint()
{
  return sub_100010B5C();
}

uint64_t sub_1000F5768()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000F57FC()
{
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_1000F69F0;
  return sub_1000F4AA8();
}

void sub_1000F588C(int a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[0] = type metadata accessor for ObservationStatusRegistry();
  sub_10000BF1C((uint64_t *)&unk_10017EAF0);
  String.init<A>(describing:)();
  if (LNLogSubsystem)
  {
    String.init(cString:)();
    Logger.init(subsystem:category:)();
    id v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t v16 = v2;
      v18[0] = v9;
      *(_DWORD *)uint64_t v8 = 67109378;
      LODWORD(v17) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v8 + 8) = 2080;
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v17 = sub_100013090(v10, v11, v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Invalidated XPC connection from PID %d for service \"%s\"", (uint8_t *)v8, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v16);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v13 = (void *)Strong;
      swift_beginAccess();
      uint64_t v14 = (void *)swift_unknownObjectWeakLoadStrong();
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1000F5B44(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[0] = type metadata accessor for Transcript();
  sub_10000BF1C((uint64_t *)&unk_10017EAF0);
  String.init<A>(describing:)();
  if (LNLogSubsystem)
  {
    String.init(cString:)();
    Logger.init(subsystem:category:)();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v18[0] = v5;
      v18[1] = a3;
      uint64_t v11 = swift_slowAlloc();
      v20[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 67109378;
      LODWORD(v19) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 8) = 2080;
      if (qword_10017C2A8 != -1) {
        swift_once();
      }
      uint64_t v13 = qword_100181990;
      unint64_t v12 = *(void *)algn_100181998;
      swift_bridgeObjectRetain();
      uint64_t v19 = sub_100013090(v13, v12, v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Invalidated XPC connection from PID %d for service \"%s\"", (uint8_t *)v11, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, void))(v6 + 8))(v8, v18[0]);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v15 = (void *)Strong;
      swift_beginAccess();
      uint64_t v16 = (void *)swift_unknownObjectWeakLoadStrong();
      if (v16)
      {
        uint64_t v17 = v16;
        sub_100036D70(v16);

        uint64_t v15 = v17;
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1000F5E50(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for SuggestedActionsService();
  sub_10000BF1C((uint64_t *)&unk_10017EAF0);
  String.init<A>(describing:)();
  if (LNLogSubsystem)
  {
    String.init(cString:)();
    Logger.init(subsystem:category:)();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v17[0] = v5;
      v17[1] = a3;
      uint64_t v11 = swift_slowAlloc();
      v19[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 67109378;
      LODWORD(v18) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 8) = 2080;
      if (qword_10017C360 != -1) {
        swift_once();
      }
      uint64_t v13 = qword_100181AE8;
      unint64_t v12 = qword_100181AF0;
      swift_bridgeObjectRetain();
      uint64_t v18 = sub_100013090(v13, v12, v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Invalidated XPC connection from PID %d for service \"%s\"", (uint8_t *)v11, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, void))(v6 + 8))(v8, v17[0]);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v15 = (void *)Strong;
      swift_beginAccess();
      uint64_t v16 = (void *)swift_unknownObjectWeakLoadStrong();
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1000F6150(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for Registry(0);
  sub_10000BF1C((uint64_t *)&unk_10017EAF0);
  String.init<A>(describing:)();
  if (LNLogSubsystem)
  {
    String.init(cString:)();
    Logger.init(subsystem:category:)();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v17[0] = v5;
      v17[1] = a3;
      uint64_t v11 = swift_slowAlloc();
      v19[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 67109378;
      LODWORD(v18) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 8) = 2080;
      if (qword_10017C4D0 != -1) {
        swift_once();
      }
      uint64_t v13 = qword_100181FF8;
      unint64_t v12 = qword_100182000;
      swift_bridgeObjectRetain();
      uint64_t v18 = sub_100013090(v13, v12, v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Invalidated XPC connection from PID %d for service \"%s\"", (uint8_t *)v11, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, void))(v6 + 8))(v8, v17[0]);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v15 = (void *)Strong;
      swift_beginAccess();
      uint64_t v16 = (void *)swift_unknownObjectWeakLoadStrong();
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1000F6450(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for ExtensionService();
  sub_10000BF1C((uint64_t *)&unk_10017EAF0);
  String.init<A>(describing:)();
  if (LNLogSubsystem)
  {
    String.init(cString:)();
    Logger.init(subsystem:category:)();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v17[0] = v5;
      v17[1] = a3;
      uint64_t v11 = swift_slowAlloc();
      v19[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 67109378;
      LODWORD(v18) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 8) = 2080;
      if (qword_10017C518 != -1) {
        swift_once();
      }
      uint64_t v13 = qword_1001821E8;
      unint64_t v12 = qword_1001821F0;
      swift_bridgeObjectRetain();
      uint64_t v18 = sub_100013090(v13, v12, v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Invalidated XPC connection from PID %d for service \"%s\"", (uint8_t *)v11, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, void))(v6 + 8))(v8, v17[0]);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v15 = (void *)Strong;
      swift_beginAccess();
      uint64_t v16 = (void *)swift_unknownObjectWeakLoadStrong();
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000F6750()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 88));
  return v0;
}

uint64_t sub_1000F67C0()
{
  sub_1000F6750();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t type metadata accessor for UncheckedConcurrentValue()
{
  return sub_100010B5C();
}

uint64_t sub_1000F6830()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000F686C()
{
  sub_1000F588C(*(_DWORD *)(v0 + 16));
}

uint64_t sub_1000F6878(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000F6888()
{
  return swift_release();
}

void sub_1000F6890(void *a1)
{
}

uint64_t sub_1000F68B4()
{
  sub_10000EC58();
  uint64_t v0 = sub_1000F6A14();
  uint64_t v1 = (void *)sub_1000841F4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_1000F69F0;
  os_log_type_t v10 = (uint64_t (*)(void))sub_1000F6A98((uint64_t)v1, v3, v4, v5, v6, v7, v8, v9, v12);
  return v10();
}

void sub_1000F6940()
{
  sub_1000F5B44(*(_DWORD *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

void sub_1000F6950()
{
  sub_1000F5E50(*(_DWORD *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

void sub_1000F6960()
{
  sub_1000F6150(*(_DWORD *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1000F6970()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1000F69B0()
{
  sub_1000F6450(*(_DWORD *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1000F69F8(void *a1)
{
  return sub_1000F47D8(a1) & 1;
}

uint64_t sub_1000F6A14()
{
  return swift_task_alloc();
}

uint64_t sub_1000F6A48(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

unint64_t sub_1000F6A70(float a1)
{
  *uint64_t v1 = a1;
  return sub_1000F5528(v2);
}

uint64_t sub_1000F6A98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return a9;
}

uint64_t sub_1000F6AA4()
{
  return v0;
}

uint64_t sub_1000F6ABC(uint64_t a1, unint64_t a2)
{
  return sub_100013090(a1, a2, (uint64_t *)(v2 - 88));
}

#error "1000F6B5C: call analysis failed (funcsize=144)"

void sub_1000F6D14(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  int64_t v13 = a4 >> 1;
  uint64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3)) {
    goto LABEL_19;
  }
  if (v6)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v6 < 0)
    {
LABEL_20:
      __break(1u);
      return;
    }
    uint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        break;
      }
      if (a3 + v9 >= v13 || v9 >= v6) {
        goto LABEL_18;
      }
      id v12 = *(id *)(a2 + 8 * a3 + 8 * v9);
      sub_1000F70A0(v12);

      if (v5)
      {

        swift_release();
        goto LABEL_16;
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      ++v9;
      if (v10 == v6)
      {

        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

LABEL_16:
  sub_1000F7BB0();
}

uint64_t sub_1000F6E64(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = sub_1000F7B64(0, result, v3);
  if (v4) {
    unint64_t v5 = v3;
  }
  else {
    unint64_t v5 = result;
  }
  if ((v5 & 0x8000000000000000) != 0) {
    goto LABEL_9;
  }
  if (v3 >= v5) {
    return a2;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1000F6ED4(uint64_t a1, unint64_t a2)
{
  return sub_1000F6EE8(a1, a2, &qword_100180D00);
}

uint64_t sub_1000F6EE8(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    char v4 = a3;
    unint64_t v3 = a2;
    uint64_t v5 = a1;
    unint64_t v6 = a2 >> 62;
    if (!(a2 >> 62))
    {
      uint64_t v7 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_4:
  uint64_t result = sub_1000F7B64(0, v5, v7);
  if (v9) {
    uint64_t v10 = v7;
  }
  else {
    uint64_t v10 = result;
  }
  if (v10 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v12 < 0)
    {
LABEL_25:
      __break(1u);
      return result;
    }
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v11 < v10)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if ((v3 & 0xC000000000000001) != 0 && v10)
  {
    sub_10000D9D4(0, v4);
    Swift::Int v13 = 0;
    do
    {
      Swift::Int v14 = v13 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v13);
      Swift::Int v13 = v14;
    }
    while (v10 != v14);
  }
  if (!v6) {
    return v3 & 0xFFFFFFFFFFFFFF8;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = _CocoaArrayWrapper.subscript.getter();
  swift_bridgeObjectRelease_n();
  return v15;
}

id sub_1000F70A0(void *a1)
{
  uint64_t v2 = sub_10000BF1C(&qword_10017C788);
  __chkstk_darwin(v2 - 8);
  uint64_t v75 = (uint64_t)&v73 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  unint64_t v6 = (char *)&v73 - v5;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v74 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v73 - v11;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v73 - v14;
  id v79 = [objc_allocWithZone((Class)KVItemBuilder) init];
  id v16 = [a1 localizedPhrase];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v19 = v18;

  uint64_t v81 = v17;
  unint64_t v82 = v19;
  sub_10001B398();
  uint64_t v20 = StringProtocol.hash.getter();
  swift_bridgeObjectRelease();
  uint64_t v78 = a1;
  id v21 = [a1 parameterIdentifier];
  uint64_t v76 = v8;
  if (v21)
  {
    unint64_t v22 = v21;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v23 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v23(v6, v12, v7);
    sub_10000D5B0((uint64_t)v6, 0, 1, v7);
    if (sub_10000D5D8((uint64_t)v6, 1, v7) != 1)
    {
      v23(v15, v6, v7);
      uint64_t v81 = 0x726F68736F747561;
      unint64_t v82 = 0xEF2F2F3A74756374;
      id v24 = [v77 actionIdentifier];
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      char v27 = v26;

      v28._uint64_t countAndFlagsBits = v25;
      v28._unint64_t object = v27;
      String.append(_:)(v28);
      swift_bridgeObjectRelease();
      v29._uint64_t countAndFlagsBits = 35;
      v29._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v29);
      uint64_t v80 = v20;
      v30._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31._uint64_t countAndFlagsBits = 35;
      v31._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v31);
      sub_1000F38E4();
      v32._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v76 + 8))(v15, v7);
      goto LABEL_6;
    }
  }
  else
  {
    sub_10000D5B0((uint64_t)v6, 1, 1, v7);
  }
  sub_10000D600((uint64_t)v6);
  uint64_t v81 = 0x726F68736F747561;
  unint64_t v82 = 0xEF2F2F3A74756374;
  id v33 = [v77 actionIdentifier];
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v36 = v35;

  v37._uint64_t countAndFlagsBits = v34;
  v37._unint64_t object = v36;
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  v38._uint64_t countAndFlagsBits = 35;
  v38._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v38);
  uint64_t v80 = v20;
  v39._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v39);
  swift_bridgeObjectRelease();
LABEL_6:
  NSString v40 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v81 = 0;
  id v41 = v79;
  id v42 = [v79 setItemType:8 itemId:v40 error:&v81];

  id v43 = (id)v81;
  uint64_t v44 = v78;
  if (!v42)
  {
LABEL_19:
    id v56 = v43;
    goto LABEL_20;
  }
  id v45 = (id)v81;

  id v46 = [v44 basePhraseTemplate];
  uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v49 = v48;

  uint64_t v81 = 0;
  id v50 = sub_10000D3C0(301, v47, v49, (uint64_t)&v81, v41);
  id v51 = (id)v81;
  if (!v50)
  {
    id v56 = v51;
LABEL_20:
    _convertNSErrorToError(_:)();

    goto LABEL_21;
  }

  id v52 = [v44 localizedPhrase];
  uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v55 = v54;

  uint64_t v81 = 0;
  id v56 = sub_10000D3C0(300, v53, v55, (uint64_t)&v81, v41);
  id v57 = (id)v81;
  if (!v56)
  {
    uint64_t v69 = v57;
    _convertNSErrorToError(_:)();

LABEL_21:
    swift_willThrow();

    return v56;
  }

  id v58 = [v44 parameterIdentifier];
  if (!v58)
  {
    uint64_t v62 = v75;
    sub_10000D5B0(v75, 1, 1, v7);
    goto LABEL_16;
  }
  unint64_t v59 = v58;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v60 = v76;
  uint64_t v61 = *(void (**)(uint64_t, char *, uint64_t))(v76 + 32);
  uint64_t v62 = v75;
  v61(v75, v12, v7);
  sub_10000D5B0(v62, 0, 1, v7);
  if (sub_10000D5D8(v62, 1, v7) == 1)
  {
LABEL_16:
    sub_10000D600(v62);
    goto LABEL_17;
  }
  uint64_t v63 = v62;
  uint64_t v64 = v74;
  v61((uint64_t)v74, (char *)v63, v7);
  uint64_t v65 = UUID.uuidString.getter();
  uint64_t v81 = 0;
  id v67 = sub_10000D3C0(302, v65, v66, (uint64_t)&v81, v41);
  id v68 = (id)v81;
  if (!v67)
  {
    id v56 = v68;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v60 + 8))(v64, v7);
    return v56;
  }

  (*(void (**)(char *, uint64_t))(v60 + 8))(v64, v7);
LABEL_17:
  uint64_t v81 = 0;
  id v70 = [v41 buildItemWithError:&v81];
  id v43 = (id)v81;
  if (!v70) {
    goto LABEL_19;
  }
  id v56 = v70;
  id v71 = (id)v81;

  return v56;
}

void sub_1000F7800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_1000F7BF8();
  uint64_t v12 = _swiftEmptyArrayStorage;
  if (v11 < 1) {
    goto LABEL_14;
  }
  uint64_t v13 = (void *)v11;
  id v14 = [v9 orderedPhrases];
  sub_10000D9D4(0, (unint64_t *)&qword_10017C780);
  unint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v15 >> 62))
  {
    uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v16) {
      goto LABEL_4;
    }
LABEL_12:
    swift_bridgeObjectRelease();
LABEL_13:
    sub_1000F6EE8((uint64_t)v13, (unint64_t)_swiftEmptyArrayStorage, (unint64_t *)&qword_10017C780);
    id v18 = sub_1000F7C14();
    sub_1000F7BCC(v18);

    swift_unknownObjectRelease();
LABEL_14:
    sub_1000F7BB0();
    return;
  }
  sub_1000F7C68();
  uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v16) {
    goto LABEL_12;
  }
LABEL_4:
  if (v16 >= 1)
  {
    sub_1000F7C54();
    do
    {
      uint64_t v17 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      if ([v17 *(SEL *)(v10 + 2280)])
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        sub_1000F7C34();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
      }
      uint64_t v12 = (void *)((char *)v12 + 1);
    }
    while ((void *)v16 != v12);
    swift_bridgeObjectRelease();
    uint64_t v13 = a9;
    goto LABEL_13;
  }
  __break(1u);
}

void sub_1000F79B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_1000F7BF8();
  uint64_t v12 = _swiftEmptyArrayStorage;
  if (v11 < 1) {
    goto LABEL_14;
  }
  uint64_t v13 = (void *)v11;
  id v14 = [v9 orderedPhrases];
  sub_10000D9D4(0, (unint64_t *)&qword_10017C780);
  unint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v15 >> 62))
  {
    uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v16) {
      goto LABEL_4;
    }
LABEL_12:
    swift_bridgeObjectRelease();
LABEL_13:
    sub_1000F6EE8((uint64_t)v13, (unint64_t)_swiftEmptyArrayStorage, (unint64_t *)&qword_10017C780);
    id v18 = sub_1000F7C14();
    sub_1000F7BCC(v18);

    swift_unknownObjectRelease();
LABEL_14:
    sub_1000F7BB0();
    return;
  }
  sub_1000F7C68();
  uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v16) {
    goto LABEL_12;
  }
LABEL_4:
  if (v16 >= 1)
  {
    sub_1000F7C54();
    do
    {
      uint64_t v17 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      if ([v17 *(SEL *)(v10 + 2280)])
      {
      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        sub_1000F7C34();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      uint64_t v12 = (void *)((char *)v12 + 1);
    }
    while ((void *)v16 != v12);
    swift_bridgeObjectRelease();
    uint64_t v13 = a9;
    goto LABEL_13;
  }
  __break(1u);
}

uint64_t sub_1000F7B64(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if (a2 < 1)
  {
    if (v3 <= 0 && v3 > a2) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000000000000) == 0 && v3 < (unint64_t)a2)
  {
    return 0;
  }
  BOOL v5 = __OFADD__(result, a2);
  result += a2;
  if (v5) {
    goto LABEL_14;
  }
  return result;
}

void sub_1000F7BCC(void *a1)
{
  sub_1000F6D14(v1, v4, v2, v3, a1);
}

id sub_1000F7C14()
{
  return v0;
}

uint64_t sub_1000F7C34()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t sub_1000F7C68()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000F7C8C(uint64_t a1, uint64_t a2)
{
  sub_10000BF1C(&qword_10017C810);
  uint64_t v4 = swift_allocError();
  *uint64_t v5 = a2;

  return _swift_continuation_throwingResumeWithError(a1, v4);
}

uint64_t sub_1000F7CF8(uint64_t a1, uint64_t a2)
{
  **(void **)(*(void *)(a1 + 64) + 40) = a2;
  return _swift_continuation_throwingResume();
}

uint64_t sub_1000F7D18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void **)(*(void *)(a1 + 64) + 40);
  *uint64_t v4 = a2;
  v4[1] = a3;
  v4[2] = a4;
  return _swift_continuation_throwingResume();
}

uint64_t sub_1000F7D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000BF1C(&qword_10017DCC0);
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TaskPriority();
  sub_10000D5B0((uint64_t)v6, 1, 1, v7);
  uint64_t v8 = (void *)swift_allocObject();
  _OWORD v8[2] = 0;
  v8[3] = 0;
  v8[4] = a1;
  void v8[5] = a2;
  uint64_t v9 = (void *)swift_allocObject();
  void v9[2] = 0;
  v9[3] = 0;
  v9[4] = &unk_1001803E0;
  v9[5] = v8;
  sub_1000F8DD8((uint64_t)v6, (uint64_t)&unk_1001803F0, (uint64_t)v9);
  return swift_release();
}

uint64_t sub_1000F7E40()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_1001821E8 = result;
  unk_1001821F0 = v1;
  return result;
}

uint64_t sub_1000F7E70()
{
  if (qword_10017C518 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1001821E8;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_1000F7ED8(uint64_t a1, uint64_t a2)
{
  v3[27] = a2;
  v3[28] = v2;
  v3[26] = a1;
  return _swift_task_switch(sub_1000F7EFC, 0, 0);
}

uint64_t sub_1000F7EFC()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 18;
  unint64_t v3 = v1 + 23;
  if (sub_1000F844C())
  {
    uint64_t v4 = v1 + 2;
    uint64_t v5 = self;
    NSString v6 = String._bridgeToObjectiveC()();
    v1[31] = v6;
    v1[2] = v1;
    v1[7] = v3;
    v1[3] = sub_1000F822C;
    v1[22] = swift_continuation_init();
    v1[18] = _NSConcreteStackBlock;
    v1[19] = 0x40000000;
    uint64_t v7 = &unk_100173160;
  }
  else
  {
    uint64_t v4 = v1 + 10;
    uint64_t v5 = self;
    NSString v6 = String._bridgeToObjectiveC()();
    v1[29] = v6;
    v1[10] = v1;
    v1[15] = v3;
    v1[11] = sub_1000F80DC;
    v1[22] = swift_continuation_init();
    v1[18] = _NSConcreteStackBlock;
    v1[19] = 0x40000000;
    uint64_t v7 = &unk_100173178;
  }
  v1[20] = sub_1000F84AC;
  v1[21] = v7;
  [v5 getConnectionHostInterfaceForBundleIdentifier:v6 completionHandler:v2];
  return _swift_continuation_await(v4);
}

uint64_t sub_1000F80DC()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *(void *)(v0 + 112);
  *(void *)(v2 + 240) = v1;
  if (v1) {
    unint64_t v3 = sub_1000F837C;
  }
  else {
    unint64_t v3 = sub_1000F81C4;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000F81C4()
{
  sub_10006039C();

  uint64_t v1 = sub_1000F9068();
  return v2(v1);
}

uint64_t sub_1000F822C()
{
  sub_10000EC58();
  sub_100010BAC();
  uint64_t v1 = *(void *)(v0 + 48);
  *(void *)(v2 + 256) = v1;
  if (v1) {
    unint64_t v3 = sub_1000F83E4;
  }
  else {
    unint64_t v3 = sub_1000F8314;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000F8314()
{
  sub_10006039C();

  uint64_t v1 = sub_1000F9068();
  return v2(v1);
}

uint64_t sub_1000F837C()
{
  sub_10006039C();
  uint64_t v1 = *(void **)(v0 + 232);
  swift_willThrow();

  sub_10000EB74();
  return v2();
}

uint64_t sub_1000F83E4()
{
  sub_10006039C();
  uint64_t v1 = *(void **)(v0 + 248);
  swift_willThrow();

  sub_10000EB74();
  return v2();
}

BOOL sub_1000F844C()
{
  sub_1000F9028();
  swift_bridgeObjectRetain();
  id v0 = sub_1000F8880();

  return v0 == 0;
}

uint64_t sub_1000F84AC(uint64_t result, void *a2, void *a3, void *a4)
{
  uint64_t v4 = *(void *)(result + 32);
  if (a4) {
    return sub_1000F7C8C(v4, (uint64_t)a4);
  }
  if (a2)
  {
    id v6 = a2;
    id v7 = a3;
    uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;

    return sub_1000F7D18(v4, (uint64_t)v6, v8, v10);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000F85C0(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v3[4] = v6;
  a3;
  uint64_t v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_1000F8694;
  return sub_1000F7ED8(v5, v7);
}

uint64_t sub_1000F8694(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *v4;
  uint64_t v10 = *(void **)(*v4 + 16);
  uint64_t v11 = *v4;
  sub_100010BC4();
  *uint64_t v12 = v11;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  uint64_t v13 = *(void (***)(void, void, void, void))(v9 + 24);
  if (v5)
  {
    id v14 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    ((void (**)(void, void, void, void *))v13)[2](v13, 0, 0, v14);

    _Block_release(v13);
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    ((void (**)(void, void *, Class, void))v13)[2](v13, a1, isa, 0);

    _Block_release(v13);
    sub_10000DA10(a2, a3);
  }
  uint64_t v16 = *(uint64_t (**)(void))(v11 + 8);
  return v16();
}

id sub_1000F8880()
{
  NSString v0 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v1 = [(id)swift_getObjCClassFromMetadata() daemonRecordWithBundleIdentifier:v0];

  return v1;
}

id sub_1000F88E4()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return [super init];
}

uint64_t type metadata accessor for ExtensionService()
{
  return self;
}

uint64_t sub_1000F8968()
{
  return sub_1000F7E70();
}

uint64_t sub_1000F8980()
{
  _Block_release(*(const void **)(v0 + 24));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000F89C8()
{
  sub_10006039C();
  uint64_t v1 = v0[2];
  objc_super v2 = (void *)v0[3];
  uint64_t v3 = (void *)v0[4];
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_1000841F4(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_100011814;
  uint64_t v7 = (uint64_t (*)(int, void *, void *))((char *)&dword_1001803C0 + dword_1001803C0);
  return v7(v1, v2, v3);
}

uint64_t sub_1000F8A74(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_100013DD8;
  return v6();
}

uint64_t sub_1000F8B44()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = (int *)v0[4];
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_1000841F4(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_100013DD8;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1001803D8 + dword_1001803D8);
  return v7(v1, v2, v3);
}

uint64_t sub_1000F8C00(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_100013DD8;
  return v7();
}

uint64_t sub_1000F8CD0()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000F8D10(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = (int *)v1[4];
  uint64_t v6 = swift_task_alloc();
  uint64_t v7 = (void *)sub_1000841F4(v6);
  *uint64_t v7 = v8;
  v7[1] = sub_100013DD8;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1001803E8 + dword_1001803E8);
  return v9(a1, v3, v4, v5);
}

uint64_t sub_1000F8DD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  if (sub_10000D5D8(a1, 1, v6) == 1)
  {
    sub_100013C08(a1);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1000F8F40()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000F8F78()
{
  sub_10006039C();
  uint64_t v2 = v1;
  uint64_t v3 = *(int **)(v0 + 16);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_1000841F4(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_100011814;
  uint64_t v7 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1001803F8 + dword_1001803F8);
  return v7(v2, v3);
}

unint64_t sub_1000F9028()
{
  unint64_t result = qword_100180418;
  if (!qword_100180418)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100180418);
  }
  return result;
}

uint64_t sub_1000F9068()
{
  return v0;
}

#error "1000F9134: call analysis failed (funcsize=98)"

#error "1000F931C: call analysis failed (funcsize=109)"

#error "1000F94E4: call analysis failed (funcsize=103)"

void sub_1000F95E8()
{
  sub_100018E30();
  char v2 = v1;
  unint64_t v23 = v3;
  if (qword_10017C520 != -1) {
    swift_once();
  }
  memcpy(v22, &unk_1001821F8, 0xA8uLL);
  sub_10002A390(v22);
  if (qword_10017C528 != -1) {
    swift_once();
  }
  sub_10002A9C0((uint64_t)&qword_1001822A0);
  uint64_t v4 = == infix<A>(_:_:)();
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  memcpy(__dst, v22, sizeof(__dst));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.filter(_:)(v4, v6, v8, (uint64_t)__src);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  sub_10002A500(v22);
  if (v2)
  {
    memcpy(__dst, __src, sizeof(__dst));
    if (qword_10017C540 != -1) {
      swift_once();
    }
    sub_10002A9C0((uint64_t)&qword_100180438);
    v19[0] = 0;
    uint64_t v9 = == infix<A>(_:_:)();
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    memcpy(v18, __dst, sizeof(v18));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    QueryType.filter(_:)(v9, v11, v13, (uint64_t)v19);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    sub_10002A500(__dst);
    memcpy(__src, v19, sizeof(__src));
  }
  __dst[3] = &type metadata for Table;
  __dst[4] = &protocol witness table for Table;
  __dst[0] = sub_100070120();
  memcpy((void *)(__dst[0] + 16), __src, 0xA8uLL);
  uint64_t v14 = Connection.pluck(_:)(__dst);
  uint64_t v16 = v15;
  sub_10000E788((uint64_t)__dst);
  if (!v0)
  {
    if (v14)
    {
      sub_1000FA704(v14, v16, v23);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v17 = type metadata accessor for LNBundleRecord();
      sub_10000D5B0((uint64_t)v23, 1, 1, v17);
    }
  }
  sub_100018E80();
}

void sub_1000F98F0()
{
  sub_100018E30();
  char v1 = v0;
  if (qword_10017C520 != -1) {
    swift_once();
  }
  memcpy(__dst, &unk_1001821F8, sizeof(__dst));
  sub_10002A390(__dst);
  if (qword_10017C528 != -1) {
    swift_once();
  }
  uint64_t v2 = v1[1];
  __src[0] = *v1;
  __src[1] = v2;
  swift_bridgeObjectRetain();
  uint64_t v3 = == infix<A>(_:_:)();
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  memcpy(v19, __dst, 0xA8uLL);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.filter(_:)(v3, v5, v7, (uint64_t)__src);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  sub_10002A500(__dst);
  memcpy(v22, __src, 0xA8uLL);
  sub_10000BF1C(&qword_10017E940);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_10013F1D0;
  if (qword_10017C538 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100180420;
  uint64_t v10 = *(void *)algn_100180428;
  uint64_t v11 = qword_100180430;
  uint64_t v12 = type metadata accessor for LNBundleRecord();
  v19[0] = *(_OWORD *)((char *)v1 + *(int *)(v12 + 24));
  <- infix<A>(_:_:)(v9, v10, v11, (uint64_t)v19, (uint64_t)&type metadata for Data, (uint64_t)&protocol witness table for Data);
  if (qword_10017C540 != -1) {
    swift_once();
  }
  uint64_t v13 = sub_10002A9C0((uint64_t)&qword_100180438);
  *(void *)&v19[0] = *(void *)((char *)v1 + *(int *)(v12 + 28));
  <- infix<A>(_:_:)(v13, v14, v15, (uint64_t)v19, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int);
  memcpy(v19, v22, 0xA8uLL);
  AppIntents_SQLite::Update v23 = QueryType.update(_:)((Swift::OpaquePointer)v8);
  uint64_t countAndFlagsBits = v23.template._countAndFlagsBits;
  unint64_t object = v23.template._object;
  rawValue = v23.bindings._rawValue;
  swift_bridgeObjectRelease();
  sub_10002A500(v22);
  v24.template._uint64_t countAndFlagsBits = countAndFlagsBits;
  v24.template._unint64_t object = object;
  v24.bindings._rawValue = rawValue;
  Connection.run(_:)(v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100018E80();
}

void sub_1000F9C10()
{
  sub_100018E30();
  uint64_t v34 = v0;
  uint64_t v2 = v1;
  uint64_t v3 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10017C520 != -1) {
    swift_once();
  }
  memcpy(v39, &unk_1001821F8, 0xA8uLL);
  memcpy(v38, &unk_1001821F8, sizeof(v38));
  sub_10002A390(v39);
  if (qword_10017C528 != -1) {
    swift_once();
  }
  uint64_t v6 = sub_10002A9C0((uint64_t)&qword_1001822A0);
  uint64_t v7 = v2[1];
  v36[0] = *v2;
  v36[1] = v7;
  <- infix<A>(_:_:)(v6, v8, v9, (uint64_t)v36, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  sub_10000BF1C(&qword_10017E940);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013F9D0;
  uint64_t v33 = inited + 32;
  if (qword_10017C530 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_1001822C8;
  uint64_t v31 = qword_1001822C0;
  uint64_t v32 = qword_1001822B8;
  uint64_t v12 = (int *)type metadata accessor for LNBundleRecord();
  sub_10006F758((uint64_t)v2 + v12[5], (uint64_t)v5);
  uint64_t v13 = type metadata accessor for URL();
  if (sub_10000D5D8((uint64_t)v5, 1, v13) == 1)
  {
    sub_10002A75C((uint64_t)v5, (uint64_t *)&unk_10017D0C0);
    uint64_t countAndFlagsBits = 0;
    unint64_t object = 0;
  }
  else
  {
    Swift::String v16 = URL.path(percentEncoded:)(0);
    uint64_t countAndFlagsBits = v16._countAndFlagsBits;
    unint64_t object = v16._object;
    (*(void (**)(char *, uint64_t))(*(void *)(v13 - 8) + 8))(v5, v13);
  }
  *(void *)&long long v35 = countAndFlagsBits;
  *((void *)&v35 + 1) = object;
  <- infix<A>(_:_:)(v32, v31, v11, (uint64_t)&v35, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  swift_bridgeObjectRelease();
  if (qword_10017C538 != -1) {
    swift_once();
  }
  uint64_t v17 = sub_10002A9C0((uint64_t)&qword_100180420);
  long long v35 = *(_OWORD *)((char *)v2 + v12[6]);
  <- infix<A>(_:_:)(v17, v18, v19, (uint64_t)&v35, (uint64_t)&type metadata for Data, (uint64_t)&protocol witness table for Data);
  if (qword_10017C540 != -1) {
    swift_once();
  }
  uint64_t v20 = sub_10002A9C0((uint64_t)&qword_100180438);
  *(void *)&long long v35 = *(void *)((char *)v2 + v12[7]);
  <- infix<A>(_:_:)(v20, v21, v22, (uint64_t)&v35, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int);
  if (qword_10017C548 != -1) {
    swift_once();
  }
  uint64_t v23 = sub_10002A9C0((uint64_t)&qword_1001822D0);
  *(void *)&long long v35 = *(void *)((char *)v2 + v12[8]);
  <- infix<A>(_:_:)(v23, v24, v25, (uint64_t)&v35, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int);
  uint64_t v26 = QueryType.insert(_:_:)((uint64_t)v37);
  Swift::String v28 = v27;
  Swift::String v30 = v29;
  swift_setDeallocating();
  sub_10006F150();
  sub_10002A66C((uint64_t)v37);
  memcpy(v36, v38, 0xA8uLL);
  sub_10002A500(v36);
  v40.template._uint64_t countAndFlagsBits = v26;
  v40.template._unint64_t object = v28;
  v40.bindings._rawValue = v30;
  Connection.run(_:)(v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100018E80();
}

void sub_1000FA05C()
{
  sub_100018E30();
  uint64_t v1 = v0;
  if (qword_10017C520 != -1) {
    swift_once();
  }
  memcpy(__dst, &unk_1001821F8, sizeof(__dst));
  __src[0] = v1;
  sub_10002A390(__dst);
  if (qword_10017C528 != -1) {
    swift_once();
  }
  sub_10000BF1C(&qword_10017DED8);
  uint64_t v2 = sub_100034754(&qword_100180458, &qword_10017DED8);
  sub_1000FB5A0(v2, v3, v4, v5, v2, (uint64_t)&protocol witness table for String);
  sub_1000FB51C();
  memcpy(v9, __dst, sizeof(v9));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000FB4B0((uint64_t)__src);
  sub_10005079C();
  sub_10001B508();
  sub_10002A500(__dst);
  memcpy(v12, __src, sizeof(v12));
  memcpy(__src, v12, sizeof(__src));
  AppIntents_SQLite::Delete v13 = QueryType.delete()();
  uint64_t countAndFlagsBits = v13.template._countAndFlagsBits;
  unint64_t object = v13.template._object;
  rawValue = v13.bindings._rawValue;
  sub_10002A500(v12);
  v14.template._uint64_t countAndFlagsBits = countAndFlagsBits;
  v14.template._unint64_t object = object;
  v14.bindings._rawValue = rawValue;
  Connection.run(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100018E80();
}

uint64_t sub_1000FA23C()
{
  id v0 = [self standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_10000DB9C((uint64_t)v5, (uint64_t)v6, &qword_10017D3A0);
  if (v7)
  {
    if (swift_dynamicCast()) {
      return v4;
    }
  }
  else
  {
    sub_10002A75C((uint64_t)v6, &qword_10017D3A0);
  }
  return 3;
}

uint64_t sub_1000FA358@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10006F758(v2 + *(int *)(a1 + 20), a2);
}

uint64_t sub_1000FA368()
{
  uint64_t v0 = sub_10000EBA4();
  sub_10000DADC(v0, v1);
  return sub_10000EBA4();
}

void *sub_1000FA39C()
{
  Table.init(_:database:)(__src, 0x73656C646E7562, 0xE700000000000000, 0, 0);
  return memcpy(&unk_1001821F8, __src, 0xA8uLL);
}

uint64_t sub_1000FA3F0()
{
  uint64_t v0 = sub_10000BF1C((uint64_t *)&unk_10017E920);
  uint64_t v1 = sub_100034754((unint64_t *)&qword_10017D650, (uint64_t *)&unk_10017E920);
  return ExpressionType.init(_:)(0x4449656C646E7562, 0xE800000000000000, v0, v1);
}

uint64_t sub_1000FA46C()
{
  uint64_t v0 = sub_10000BF1C(&qword_10017D678);
  uint64_t v1 = sub_100034754(&qword_10017D680, &qword_10017D678);
  return ExpressionType.init(_:)(7107189, 0xE300000000000000, v0, v1);
}

uint64_t sub_1000FA4E0()
{
  uint64_t v0 = sub_10000BF1C((uint64_t *)&unk_10017E930);
  uint64_t v1 = sub_100034754(&qword_10017D658, (uint64_t *)&unk_10017E930);
  return ExpressionType.init(_:)(0xD000000000000011, 0x8000000100145D40, v0, v1);
}

uint64_t sub_1000FA560()
{
  uint64_t v0 = sub_10000BF1C(&qword_10017DED0);
  uint64_t v1 = sub_100034754((unint64_t *)&qword_100180450, &qword_10017DED0);
  return ExpressionType.init(_:)(0xD000000000000013, 0x8000000100145D80, v0, v1);
}

uint64_t sub_1000FA5E0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0[12])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v0[14])
  {
    swift_bridgeObjectRelease();
    if (v0[16])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 184, 7);
}

uint64_t sub_1000FA67C()
{
  uint64_t v0 = sub_10000BF1C(&qword_10017DED0);
  uint64_t v1 = sub_100034754((unint64_t *)&qword_100180450, &qword_10017DED0);
  return ExpressionType.init(_:)(0x617461646174656DLL, 0xEF6E6F6973726556, v0, v1);
}

uint64_t sub_1000FA704@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10017C528 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  uint64_t v11 = v26;
  uint64_t v10 = v27;
  if (qword_10017C530 != -1) {
    swift_once();
  }
  Row.get<A>(_:)(qword_1001822B8, qword_1001822C0, qword_1001822C8, a1, a2, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, v9, v22, v23, v24, v25, (uint64_t)v26, v27, v28, v29, v30, v31, v32,
    v33);
  uint64_t v12 = v27;
  if (qword_10017C538 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  AppIntents_SQLite::Delete v13 = v26;
  uint64_t v24 = v27;
  if (qword_10017C540 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  uint64_t v23 = v26;
  if (qword_10017C548 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  uint64_t v15 = v26;
  if (v12)
  {
    URL.init(fileURLWithPath:)();
    uint64_t v16 = type metadata accessor for URL();
    sub_10000D5B0((uint64_t)v8, 0, 1, v16);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v17 = type metadata accessor for URL();
    sub_10000D5B0((uint64_t)v8, 1, 1, v17);
  }
  uint64_t v18 = v23;
  *a3 = v11;
  a3[1] = v10;
  uint64_t v19 = (int *)type metadata accessor for LNBundleRecord();
  sub_10000DB9C((uint64_t)v8, (uint64_t)a3 + v19[5], (uint64_t *)&unk_10017D0C0);
  uint64_t v20 = (void *)((char *)a3 + v19[6]);
  uint64_t v21 = v24;
  *uint64_t v20 = v13;
  v20[1] = v21;
  *(void *)((char *)a3 + v19[7]) = v18;
  *(void *)((char *)a3 + v19[8]) = v15;
  return sub_10000D5B0((uint64_t)a3, 0, 1, (uint64_t)v19);
}

uint64_t type metadata accessor for LNBundleRecord()
{
  uint64_t result = qword_1001804B8;
  if (!qword_1001804B8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000FAAF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_1000FA704(a1, a2, a3);
}

uint64_t *sub_1000FAB00(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for URL();
    swift_bridgeObjectRetain();
    if (sub_10000D5D8((uint64_t)v10, 1, v11))
    {
      uint64_t v12 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
      sub_10000D5B0((uint64_t)v9, 0, 1, v11);
    }
    uint64_t v14 = a3[6];
    uint64_t v15 = (uint64_t *)((char *)v4 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = *v16;
    unint64_t v18 = v16[1];
    sub_10000DADC(*v16, v18);
    *uint64_t v15 = v17;
    v15[1] = v18;
    uint64_t v19 = a3[8];
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(uint64_t *)((char *)v4 + v19) = *(uint64_t *)((char *)a2 + v19);
  }
  return v4;
}

uint64_t sub_1000FAC7C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for URL();
  if (!sub_10000D5D8(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  uint64_t v6 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  uint64_t v7 = *v6;
  unint64_t v8 = v6[1];

  return sub_10000DA10(v7, v8);
}

void *sub_1000FAD24(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  unint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  swift_bridgeObjectRetain();
  if (sub_10000D5D8((uint64_t)v9, 1, v10))
  {
    uint64_t v11 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    sub_10000D5B0((uint64_t)v8, 0, 1, v10);
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  sub_10000DADC(*v14, v16);
  *uint64_t v13 = v15;
  v13[1] = v16;
  uint64_t v17 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + v17) = *(void *)((char *)a2 + v17);
  return a1;
}

void *sub_1000FAE50(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  int v10 = sub_10000D5D8((uint64_t)v7, 1, v9);
  int v11 = sub_10000D5D8((uint64_t)v8, 1, v9);
  if (!v10)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v13 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  sub_10000D5B0((uint64_t)v7, 0, 1, v9);
LABEL_7:
  uint64_t v14 = a3[6];
  uint64_t v15 = (void *)((char *)a1 + v14);
  unint64_t v16 = (void *)((char *)a2 + v14);
  uint64_t v17 = *v16;
  unint64_t v18 = v16[1];
  sub_10000DADC(*v16, v18);
  uint64_t v19 = *v15;
  unint64_t v20 = v15[1];
  *uint64_t v15 = v17;
  v15[1] = v18;
  sub_10000DA10(v19, v20);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  return a1;
}

_OWORD *sub_1000FB018(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  if (sub_10000D5D8((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    sub_10000D5B0((uint64_t)v7, 0, 1, v9);
  }
  uint64_t v11 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v11) = *(void *)((char *)a2 + v11);
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  return a1;
}

void *sub_1000FB120(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  unint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  int v11 = sub_10000D5D8((uint64_t)v8, 1, v10);
  int v12 = sub_10000D5D8((uint64_t)v9, 1, v10);
  if (!v11)
  {
    uint64_t v13 = *(void *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    uint64_t v14 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  sub_10000D5B0((uint64_t)v8, 0, 1, v10);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = *(void *)((char *)a1 + v15);
  unint64_t v17 = *(void *)((char *)a1 + v15 + 8);
  *(_OWORD *)((char *)a1 + v15) = *(_OWORD *)((char *)a2 + v15);
  sub_10000DA10(v16, v17);
  uint64_t v18 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
  return a1;
}

uint64_t sub_1000FB2C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000FB2D8);
}

uint64_t sub_1000FB2D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    return sub_10000D5D8(v9, a2, v8);
  }
}

uint64_t sub_1000FB364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000FB378);
}

uint64_t sub_1000FB378(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
    uint64_t v8 = v5 + *(int *)(a4 + 20);
    return sub_10000D5B0(v8, a2, a2, v7);
  }
  return result;
}

void sub_1000FB3FC()
{
  sub_100048AF4();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1000FB4B0@<X0>(uint64_t a1@<X8>)
{
  return QueryType.filter(_:)(v1, v2, v3, a1);
}

void *sub_1000FB4D4(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char __src)
{
  a30 = a1;
  return memcpy(&a9, &__src, 0xA8uLL);
}

void sub_1000FB4F8()
{
  RowIterator.compactMap<A>(_:)();
}

uint64_t sub_1000FB52C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  return sub_10000E788((uint64_t)&a30);
}

uint64_t sub_1000FB568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  return Connection.prepareRowIterator(_:)(&a30);
}

uint64_t sub_1000FB5A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return Collection<>.contains(_:)(v6, v7, v8, v9, a5, a6);
}

id sub_1000FB5C0(void *a1, uint64_t a2)
{
  id v4 = [a1 action];
  id v5 = [v4 parameters];

  sub_10000D9D4(0, (unint64_t *)&unk_10017FAC0);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v104 = v6;
  id v7 = sub_1000FCB40();
  id v8 = [v7 identifier];

  uint64_t v89 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  id v11 = sub_1000FCB40();
  char v88 = [v11 openAppWhenRun];

  id v12 = sub_1000FCB40();
  uint64_t v87 = sub_1000FCAC8(v12);
  uint64_t v14 = v13;
  uint64_t v16 = *(void *)(a2 + 72);
  unint64_t v15 = *(void *)(a2 + 80);
  uint64_t v95 = a2;
  swift_bridgeObjectRetain();
  id v17 = [a1 identifiersByTypeMap];
  uint64_t v18 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v100 = v16;
  unint64_t v101 = v15;
  uint64_t v19 = sub_1000FC1F8(v18, sub_1000FCB38, (uint64_t)v99);
  swift_bridgeObjectRelease();
  unint64_t v20 = *(void *)(v19 + 16);
  if (v20 >= 2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_10017C458 != -1) {
      goto LABEL_121;
    }
    goto LABEL_3;
  }
  uint64_t v94 = v14;
  uint64_t v92 = v10;
  if (!v20)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_10017C458 != -1) {
      swift_once();
    }
    uint64_t v81 = type metadata accessor for Logger();
    sub_10000BEE4(v81, (uint64_t)qword_100181EC0);
    swift_bridgeObjectRetain();
    unint64_t v82 = Logger.logObject.getter();
    os_log_type_t v83 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v82, v83))
    {
      unint64_t v84 = (uint8_t *)swift_slowAlloc();
      uint64_t v103 = swift_slowAlloc();
      *(_DWORD *)unint64_t v84 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v102 = sub_100013090(v16, v15, &v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v82, v83, "Cannot find parameter of type %s to bind value", v84, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    id v25 = sub_1000FCB40();
    goto LABEL_103;
  }
  uint64_t v93 = v19;
  swift_bridgeObjectRelease();
  uint64_t v27 = v10;
  uint64_t v26 = v19;
  int64_t v28 = 0;
  uint64_t v90 = v19 + 64;
  uint64_t v29 = 1 << *(unsigned char *)(v19 + 32);
  uint64_t v30 = -1;
  if (v29 < 64) {
    uint64_t v30 = ~(-1 << v29);
  }
  unint64_t v31 = v30 & *(void *)(v19 + 64);
  int64_t v91 = (unint64_t)(v29 + 63) >> 6;
  uint64_t v32 = v14;
  if (!v31) {
    goto LABEL_11;
  }
LABEL_10:
  unint64_t v33 = __clz(__rbit64(v31));
  uint64_t v34 = (v31 - 1) & v31;
  for (unint64_t i = v33 | (v28 << 6); ; unint64_t i = __clz(__rbit64(v37)) + (v28 << 6))
  {
    unint64_t v96 = v34;
    int64_t v97 = v28;
    Swift::String v39 = (uint64_t *)(*(void *)(v26 + 48) + 16 * i);
    uint64_t v40 = v39[1];
    uint64_t v98 = *v39;
    unint64_t v41 = v104;
    if (v104 >> 62)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
      if (!v42)
      {
LABEL_83:
        swift_bridgeObjectRelease();
LABEL_84:
        if (v41 >> 62)
        {
          sub_100035DA0();
          uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v43 = *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        goto LABEL_86;
      }
    }
    else
    {
      uint64_t v42 = *(void *)((v104 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v42) {
        goto LABEL_83;
      }
    }
    uint64_t v43 = 0;
    uint64_t v44 = 5;
    while (1)
    {
      id v45 = (v41 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(v41 + 8 * v43 + 32);
      id v46 = v45;
      id v47 = [v45 identifier];
      uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v50 = v49;

      if (v48 == v98 && v50 == v40) {
        break;
      }
      char v52 = sub_1000FCB58();

      swift_bridgeObjectRelease();
      if (v52) {
        goto LABEL_40;
      }
      uint64_t v53 = v43 + 1;
      if (__OFADD__(v43, 1))
      {
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
        goto LABEL_111;
      }
      ++v43;
      ++v44;
      if (v53 == v42)
      {
        swift_bridgeObjectRelease();
        unint64_t v41 = v104;
        uint64_t v27 = v92;
        goto LABEL_84;
      }
    }
    swift_bridgeObjectRelease();

LABEL_40:
    swift_bridgeObjectRelease();
    uint64_t v54 = v43 + 1;
    uint64_t v27 = v92;
    if (__OFADD__(v43, 1)) {
      goto LABEL_118;
    }
    unint64_t v41 = v104;
    if (v104 >> 62)
    {
      sub_100035DA0();
      uint64_t v55 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v55 = *(void *)((v104 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    while (v54 != v55)
    {
      unint64_t v56 = v44 - 4;
      if ((v41 & 0xC000000000000001) != 0)
      {
        id v57 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if ((v56 & 0x8000000000000000) != 0) {
          goto LABEL_107;
        }
        if (v56 >= *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_108;
        }
        id v57 = *(id *)(v41 + 8 * v44);
      }
      id v58 = v57;
      id v59 = [v57 identifier];
      uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v62 = v61;

      if (v60 == v98 && v62 == v40)
      {

        swift_bridgeObjectRelease();
      }
      else
      {
        char v64 = sub_1000FCB58();

        swift_bridgeObjectRelease();
        if ((v64 & 1) == 0)
        {
          if (v56 != v43)
          {
            uint64_t v65 = v104;
            if ((v104 & 0xC000000000000001) != 0)
            {
              uint64_t v68 = specialized _ArrayBuffer._getElementSlowPath(_:)();
              id v69 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else
            {
              if (v43 < 0) {
                goto LABEL_112;
              }
              unint64_t v66 = *(void *)((v104 & 0xFFFFFFFFFFFFFF8) + 0x10);
              if (v43 >= v66) {
                goto LABEL_113;
              }
              id v67 = *(id *)(v104 + 8 * v43 + 32);
              if ((v56 & 0x8000000000000000) != 0) {
                goto LABEL_114;
              }
              if (v56 >= v66) {
                goto LABEL_115;
              }
              uint64_t v68 = (uint64_t)v67;
              id v69 = *(id *)(v65 + 8 * v44);
            }
            id v70 = v69;
            if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
              || v65 < 0
              || (v65 & 0x4000000000000000) != 0)
            {
              uint64_t v65 = sub_1000E70D4(v65);
              unint64_t v104 = v65;
            }
            id v71 = *(void **)((v65 & 0xFFFFFFFFFFFFFF8) + 8 * v43 + 0x20);
            *(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 8 * v43 + 0x20) = v70;

            specialized Array._endMutation()();
            uint64_t v72 = v104;
            if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
              || v72 < 0
              || (v72 & 0x4000000000000000) != 0)
            {
              uint64_t v72 = sub_1000E70D4(v72);
              unint64_t v104 = v72;
            }
            if ((v56 & 0x8000000000000000) != 0) {
              goto LABEL_116;
            }
            uint64_t v73 = v72 & 0xFFFFFFFFFFFFFF8;
            if (v56 >= *(void *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_117;
            }
            uint64_t v74 = *(void **)(v73 + 8 * v44);
            *(void *)(v73 + 8 * v44) = v68;

            specialized Array._endMutation()();
          }
          if (__OFADD__(v43++, 1)) {
            goto LABEL_110;
          }
        }
      }
      uint64_t v54 = v44 - 3;
      if (__OFADD__(v56, 1)) {
        goto LABEL_109;
      }
      unint64_t v41 = v104;
      if (v104 >> 62)
      {
        sub_100035DA0();
        uint64_t v55 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v55 = *(void *)((v104 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      ++v44;
    }
LABEL_86:
    if (v41 >> 62)
    {
      sub_100035DA0();
      uint64_t v76 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v76 = *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v76 < v43)
    {
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
      goto LABEL_120;
    }
    sub_1000E66E0();
    id v77 = *(void **)(v95 + 88);
    id v78 = objc_allocWithZone((Class)LNProperty);
    id v79 = v77;
    id v80 = sub_1000FC04C(v98, v40, v77);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v104 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v104 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    uint64_t v26 = v93;
    uint64_t v32 = v94;
    unint64_t v31 = v96;
    int64_t v28 = v97;
    if (v96) {
      goto LABEL_10;
    }
LABEL_11:
    int64_t v36 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      goto LABEL_119;
    }
    if (v36 >= v91) {
      goto LABEL_100;
    }
    unint64_t v37 = *(void *)(v90 + 8 * v36);
    ++v28;
    if (!v37)
    {
      int64_t v28 = v36 + 1;
      if (v36 + 1 >= v91) {
        goto LABEL_100;
      }
      unint64_t v37 = *(void *)(v90 + 8 * v28);
      if (!v37)
      {
        int64_t v28 = v36 + 2;
        if (v36 + 2 >= v91) {
          goto LABEL_100;
        }
        unint64_t v37 = *(void *)(v90 + 8 * v28);
        if (!v37) {
          break;
        }
      }
    }
LABEL_24:
    uint64_t v34 = (v37 - 1) & v37;
  }
  int64_t v38 = v36 + 3;
  if (v38 >= v91)
  {
LABEL_100:
    swift_release();
    id v85 = objc_allocWithZone((Class)LNAction);
    return sub_1000FC0B0(v89, v27, v87, v32, v88, 0, 0);
  }
  unint64_t v37 = *(void *)(v90 + 8 * v38);
  if (v37)
  {
    int64_t v28 = v38;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v28 = v38 + 1;
    if (__OFADD__(v38, 1)) {
      break;
    }
    if (v28 >= v91) {
      goto LABEL_100;
    }
    unint64_t v37 = *(void *)(v90 + 8 * v28);
    ++v38;
    if (v37) {
      goto LABEL_24;
    }
  }
LABEL_120:
  __break(1u);
LABEL_121:
  swift_once();
LABEL_3:
  uint64_t v21 = type metadata accessor for Logger();
  sub_10000BEE4(v21, (uint64_t)qword_100181EC0);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Cannot support matching of the same parameter type more than once", v24, 2u);
    swift_slowDealloc();
  }

  id v25 = sub_1000FCB40();
LABEL_103:

  return v25;
}

uint64_t sub_1000FC020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a3 == a5 && a4 == a6) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

id sub_1000FC04C(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v3 initWithIdentifier:v5 value:a3];

  return v6;
}

id sub_1000FC0B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6, void *a7)
{
  id v8 = v7;
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a4)
  {
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v14 = 0;
  }
  sub_10000D9D4(0, &qword_10017D0A0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_10000D9D4(0, (unint64_t *)&unk_10017FAC0);
  Class v16 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v17 = [v8 initWithIdentifier:v13 mangledTypeName:v14 openAppWhenRun:a5 & 1 outputFlags:a6 outputType:a7 systemProtocols:isa parameters:v16];

  return v17;
}

uint64_t sub_1000FC1F8(uint64_t isStackAllocationSafe, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6 = isStackAllocationSafe;
  char v7 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v8 = (unint64_t)((1 << v7) + 63) >> 6;
  if ((v7 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    uint64_t v9 = (uint64_t *)((char *)&v13 - ((8 * v8 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_100023234(0, v8, v9);
    uint64_t v10 = sub_1000FC37C((uint64_t)v9, v8, v6, a2);
    if (v3) {
      swift_willThrow();
    }
    else {
      return v10;
    }
  }
  else
  {
    id v11 = (void *)swift_slowAlloc();
    sub_100023234(0, v8, v11);
    a3 = sub_1000FC37C((uint64_t)v11, v8, v6, a2);
    swift_slowDealloc();
  }
  return a3;
}

uint64_t sub_1000FC37C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  os_log_type_t v23 = (unint64_t *)result;
  uint64_t v24 = 0;
  int64_t v6 = 0;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v26 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v10 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v11 = v10 | (v6 << 6);
      goto LABEL_20;
    }
    int64_t v12 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v12 >= v26) {
      return sub_1000FC818(v23, a2, v24, a3);
    }
    unint64_t v13 = *(void *)(v25 + 8 * v12);
    ++v6;
    if (!v13)
    {
      int64_t v6 = v12 + 1;
      if (v12 + 1 >= v26) {
        return sub_1000FC818(v23, a2, v24, a3);
      }
      unint64_t v13 = *(void *)(v25 + 8 * v6);
      if (!v13)
      {
        int64_t v6 = v12 + 2;
        if (v12 + 2 >= v26) {
          return sub_1000FC818(v23, a2, v24, a3);
        }
        unint64_t v13 = *(void *)(v25 + 8 * v6);
        if (!v13) {
          break;
        }
      }
    }
LABEL_19:
    unint64_t v9 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v6 << 6);
LABEL_20:
    unint64_t v15 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v11);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = (uint64_t *)(*(void *)(a3 + 56) + 16 * v11);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    LOBYTE(v20) = a4(v16, v17, v20, v19);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v20)
    {
      *(unint64_t *)((char *)v23 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      if (__OFADD__(v24++, 1))
      {
        __break(1u);
        return sub_1000FC818(v23, a2, v24, a3);
      }
    }
  }
  int64_t v14 = v12 + 3;
  if (v14 >= v26) {
    return sub_1000FC818(v23, a2, v24, a3);
  }
  unint64_t v13 = *(void *)(v25 + 8 * v14);
  if (v13)
  {
    int64_t v6 = v14;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v6 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v6 >= v26) {
      return sub_1000FC818(v23, a2, v24, a3);
    }
    unint64_t v13 = *(void *)(v25 + 8 * v6);
    ++v14;
    if (v13) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1000FC584(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (uint64_t)_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_10000BF1C(&qword_100180500);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = result;
  unint64_t v33 = a1;
  uint64_t v34 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_40;
      }
      if (v15 >= v34) {
        return v9;
      }
      unint64_t v16 = v33[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= v34) {
          return v9;
        }
        unint64_t v16 = v33[v11];
        if (!v16)
        {
          uint64_t v11 = v15 + 2;
          if (v15 + 2 >= v34) {
            return v9;
          }
          unint64_t v16 = v33[v11];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= v34) {
              return v9;
            }
            unint64_t v16 = v33[v17];
            if (!v16)
            {
              while (1)
              {
                uint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v11 >= v34) {
                  return v9;
                }
                unint64_t v16 = v33[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v11 = v17;
          }
        }
      }
LABEL_24:
      unint64_t v10 = (v16 - 1) & v16;
      unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    uint64_t v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    uint64_t v21 = *(void **)(*(void *)(v4 + 56) + 8 * v14);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    id v22 = v21;
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v23 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) == 0) {
      break;
    }
    unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(void *)(v12 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    unint64_t v31 = (void *)(*(void *)(v9 + 48) + 16 * v26);
    *unint64_t v31 = v20;
    v31[1] = v19;
    *(void *)(*(void *)(v9 + 56) + 8 * v26) = v22;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1)) {
      goto LABEL_39;
    }
    if (!v5) {
      return v9;
    }
  }
  char v27 = 0;
  unint64_t v28 = (unint64_t)(63 - v23) >> 6;
  while (++v25 != v28 || (v27 & 1) == 0)
  {
    BOOL v29 = v25 == v28;
    if (v25 == v28) {
      unint64_t v25 = 0;
    }
    v27 |= v29;
    uint64_t v30 = *(void *)(v12 + 8 * v25);
    if (v30 != -1)
    {
      unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1000FC818(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (uint64_t)_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_10000BF1C(&qword_10017EF48);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = result;
  unint64_t v37 = a1;
  uint64_t v38 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v39 = v11;
      unint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_40;
      }
      if (v15 >= v38) {
        return v9;
      }
      unint64_t v16 = v37[v15];
      uint64_t v17 = v11 + 1;
      if (!v16)
      {
        uint64_t v17 = v11 + 2;
        if (v11 + 2 >= v38) {
          return v9;
        }
        unint64_t v16 = v37[v17];
        if (!v16)
        {
          uint64_t v17 = v11 + 3;
          if (v11 + 3 >= v38) {
            return v9;
          }
          unint64_t v16 = v37[v17];
          if (!v16)
          {
            uint64_t v18 = v11 + 4;
            if (v11 + 4 >= v38) {
              return v9;
            }
            unint64_t v16 = v37[v18];
            if (!v16)
            {
              while (1)
              {
                uint64_t v17 = v18 + 1;
                if (__OFADD__(v18, 1)) {
                  goto LABEL_41;
                }
                if (v17 >= v38) {
                  return v9;
                }
                unint64_t v16 = v37[v17];
                ++v18;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v17 = v11 + 4;
          }
        }
      }
LABEL_24:
      unint64_t v10 = (v16 - 1) & v16;
      uint64_t v39 = v17;
      unint64_t v14 = __clz(__rbit64(v16)) + (v17 << 6);
    }
    uint64_t v19 = v4;
    uint64_t v20 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v14);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    uint64_t v23 = (uint64_t *)(*(void *)(v4 + 56) + 16 * v14);
    uint64_t v24 = *v23;
    uint64_t v25 = v23[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v26 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) == 0) {
      break;
    }
    unint64_t v29 = __clz(__rbit64((-1 << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(void *)(v12 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    uint64_t v34 = (void *)(*(void *)(v9 + 48) + 16 * v29);
    *uint64_t v34 = v22;
    v34[1] = v21;
    uint64_t v35 = (void *)(*(void *)(v9 + 56) + 16 * v29);
    *uint64_t v35 = v24;
    v35[1] = v25;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1)) {
      goto LABEL_39;
    }
    uint64_t v4 = v19;
    uint64_t v11 = v39;
    if (!v5) {
      return v9;
    }
  }
  char v30 = 0;
  unint64_t v31 = (unint64_t)(63 - v26) >> 6;
  while (++v28 != v31 || (v30 & 1) == 0)
  {
    BOOL v32 = v28 == v31;
    if (v28 == v31) {
      unint64_t v28 = 0;
    }
    v30 |= v32;
    uint64_t v33 = *(void *)(v12 + 8 * v28);
    if (v33 != -1)
    {
      unint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1000FCAC8(void *a1)
{
  id v2 = [a1 mangledTypeName];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_1000FCB38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000FC020(a1, a2, a3, a4, *(void *)(v4 + 16), *(void *)(v4 + 24));
}

id sub_1000FCB40()
{
  uint64_t v3 = *(const char **)(v1 + 984);
  return [v0 v3];
}

uint64_t sub_1000FCB58()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_1000FCB78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (qword_10017C550 != -1) {
    swift_once();
  }
  memcpy(__dst, &unk_1001822E8, sizeof(__dst));
  sub_10002A390(__dst);
  if (qword_10017C558 != -1) {
    swift_once();
  }
  __src[0] = a1;
  __src[1] = a2;
  uint64_t v7 = == infix<A>(_:_:)();
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  memcpy(v21, __dst, sizeof(v21));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.filter(_:)(v7, v9, v11, (uint64_t)__src);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  sub_10002A500(__dst);
  memcpy(v26, __src, sizeof(v26));
  __src[3] = &type metadata for Table;
  __src[4] = &protocol witness table for Table;
  __src[0] = swift_allocObject();
  memcpy((void *)(__src[0] + 16), v26, 0xA8uLL);
  uint64_t v12 = Connection.pluck(_:)(__src);
  uint64_t v14 = v13;
  uint64_t result = sub_10000E788((uint64_t)__src);
  if (!v3)
  {
    if (v12)
    {
      sub_1000FD218(v12, v14, (uint64_t *)v23);
      long long v19 = v23[1];
      long long v20 = v23[0];
      uint64_t v16 = v24;
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      long long v18 = v19;
      long long v17 = v20;
    }
    else
    {
      uint64_t v16 = 0;
      long long v17 = 0uLL;
      long long v18 = 0uLL;
    }
    *(_OWORD *)a3 = v17;
    *(_OWORD *)(a3 + 16) = v18;
    *(void *)(a3 + 32) = v16;
  }
  return result;
}

uint64_t sub_1000FCDBC(long long *a1)
{
  if (qword_10017C550 != -1) {
    swift_once();
  }
  memcpy(__dst, &unk_1001822E8, sizeof(__dst));
  memcpy(__src, &unk_1001822E8, sizeof(__src));
  sub_10002A390(__dst);
  if (qword_10017C558 != -1) {
    swift_once();
  }
  long long v11 = *a1;
  <- infix<A>(_:_:)(qword_100182390, *(uint64_t *)algn_100182398, qword_1001823A0, (uint64_t)&v11, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  sub_10000BF1C(&qword_10017E940);
  *(_OWORD *)(swift_initStackObject() + 16) = xmmword_10013F1D0;
  if (qword_10017C560 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1001823A8;
  uint64_t v3 = unk_1001823B0;
  uint64_t v4 = qword_1001823B8;
  sub_1000A87C4((uint64_t)(a1 + 1), (uint64_t)v14);
  sub_1000A87C4((uint64_t)v14, (uint64_t)&v11);
  sub_100027B80((uint64_t)v14);
  <- infix<A>(_:_:)(v2, v3, v4, (uint64_t)&v11, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  sub_100033814((uint64_t)v14);
  if (qword_10017C568 != -1) {
    swift_once();
  }
  *(void *)&long long v11 = *((void *)a1 + 4);
  <- infix<A>(_:_:)(qword_1001823C0, *(uint64_t *)algn_1001823C8, qword_1001823D0, (uint64_t)&v11, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int);
  uint64_t v5 = QueryType.insert(_:_:)((uint64_t)v12);
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  swift_setDeallocating();
  sub_10006F150();
  sub_10002A66C((uint64_t)v12);
  memcpy(v16, __src, sizeof(v16));
  sub_10002A500(v16);
  v17.template._uint64_t countAndFlagsBits = v5;
  v17.template._unint64_t object = v7;
  v17.bindings._rawValue = v9;
  Connection.run(_:)(v17);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *sub_1000FD07C()
{
  Table.init(_:database:)(__src, 0xD000000000000019, 0x8000000100143F60, 0, 0);
  return memcpy(&unk_1001822E8, __src, 0xA8uLL);
}

uint64_t sub_1000FD0D4()
{
  uint64_t v0 = sub_10000BF1C((uint64_t *)&unk_10017E920);
  uint64_t v1 = sub_10002A7B8((unint64_t *)&qword_10017D650, (uint64_t *)&unk_10017E920);
  return ExpressionType.init(_:)(0xD000000000000010, 0x8000000100143090, v0, v1);
}

uint64_t sub_1000FD140()
{
  uint64_t v0 = sub_10000BF1C(&qword_10017D678);
  uint64_t v1 = sub_10002A7B8(&qword_10017D680, &qword_10017D678);
  return ExpressionType.init(_:)(0xD00000000000001ELL, 0x8000000100145DC0, v0, v1);
}

uint64_t sub_1000FD1AC()
{
  uint64_t v0 = sub_10000BF1C(&qword_10017DED0);
  uint64_t v1 = sub_10002A7B8((unint64_t *)&qword_100180450, &qword_10017DED0);
  return ExpressionType.init(_:)(0xD000000000000011, 0x8000000100145DA0, v0, v1);
}

void sub_1000FD218(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (qword_10017C558 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  uint64_t v8 = v11;
  uint64_t v7 = v13;
  if (qword_10017C560 != -1) {
    swift_once();
  }
  Row.get<A>(_:)(qword_1001823A8, unk_1001823B0, qword_1001823B8, a1, a2, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, v6, v9, v10, v11, v13, v15, v16, v17, v18, v19, v20, v21,
    v22);
  if (qword_10017C568 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  *a3 = v8;
  a3[1] = v7;
  a3[2] = v12;
  a3[3] = v14;
  a3[4] = v12;
}

uint64_t sub_1000FD3E0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0[12])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v0[14])
  {
    swift_bridgeObjectRelease();
    if (v0[16])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 184, 7);
}

void *initializeWithCopy for LNAppShortcutBundleMetadataRecord(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for LNAppShortcutBundleMetadataRecord(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

void *assignWithTake for LNAppShortcutBundleMetadataRecord(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

ValueMetadata *type metadata accessor for LNAppShortcutBundleMetadataRecord()
{
  return &type metadata for LNAppShortcutBundleMetadataRecord;
}

uint64_t sub_1000FD59C()
{
  swift_retain();
  Statement.makeIterator()();
  swift_release();
  unint64_t v0 = (unint64_t)Statement.failableNext()();
  if (v1) {
    goto LABEL_20;
  }
  unint64_t v2 = v0;
  uint64_t v3 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (!v2)
    {
      swift_release();
      return (uint64_t)v3;
    }
    if (!*(void *)(v2 + 16)) {
      break;
    }
    sub_1000FE754(v2 + 32, (uint64_t)v12);
    if (v13)
    {
      sub_10000BF1C(&qword_10017DEC8);
      if (swift_dynamicCast()) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_1000FE7BC((uint64_t)v12);
    }
    uint64_t v14 = 0;
    uint64_t v15 = 0;
LABEL_10:
    swift_bridgeObjectRelease();
    uint64_t v4 = v15;
    if (v15)
    {
      uint64_t v6 = v14;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10001E7C0();
        uint64_t v3 = v9;
      }
      unint64_t v7 = v3[2];
      if (v7 >= v3[3] >> 1)
      {
        sub_10001E7C0();
        uint64_t v3 = v10;
      }
      v3[2] = v7 + 1;
      uint64_t v8 = &v3[2 * v7];
      v8[4] = v6;
      void v8[5] = v4;
    }
    unint64_t v2 = (unint64_t)Statement.failableNext()();
    if (v5) {
      goto LABEL_20;
    }
  }
  __break(1u);
LABEL_20:
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

void sub_1000FD74C()
{
  unint64_t v0 = (sqlite3 *)Connection.handle.getter();
  sqlite3_extended_result_codes(v0, 1);
  uint64_t v3 = 1;
  uint64_t v1 = (sqlite3 *)Connection.handle.getter();
  sqlite3_file_control(v1, 0, 10, &v3);
  sub_100018F2C();
  v2._uint64_t countAndFlagsBits = 0xD000000000000018;
  Connection.execute(_:)(v2);
}

BOOL sub_1000FD7E4()
{
  Connection.run(_:_:)(0xD000000000000016, 0x80000001001464F0, (uint64_t)_swiftEmptyArrayStorage);
  uint64_t v0 = sub_1000FD59C();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    Swift::String v2 = (uint64_t *)(v0 + 40);
    do
    {
      uint64_t v3 = *(v2 - 1);
      uint64_t v4 = *v2;
      BOOL v5 = v3 == 27503 && v4 == 0xE200000000000000;
      if (!v5 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_100057848();
        }
        unint64_t v6 = _swiftEmptyArrayStorage[2];
        if (v6 >= _swiftEmptyArrayStorage[3] >> 1) {
          sub_100057848();
        }
        _swiftEmptyArrayStorage[2] = v6 + 1;
        unint64_t v7 = &_swiftEmptyArrayStorage[2 * v6];
        v7[4] = v3;
        v7[5] = v4;
      }
      v2 += 2;
      --v1;
    }
    while (v1);
  }
  swift_bridgeObjectRelease();
  uint64_t v8 = _swiftEmptyArrayStorage[2];
  swift_release();
  return v8 == 0;
}

void sub_1000FD964()
{
  _StringGuts.grow(_:)(3764);
  sub_1000FE994(0xD000000000000025, (uint64_t)"PRAGMA foreign_keys=0;\n\nCREATE TABLE ");
  v0._uint64_t countAndFlagsBits = 0x6769666E6F63;
  v0._unint64_t object = (void *)0xE600000000000000;
  String.append(_:)(v0);
  sub_1000FE868();
  v1._uint64_t countAndFlagsBits = 7955819;
  v1._unint64_t object = (void *)0xE300000000000000;
  String.append(_:)(v1);
  v2._uint64_t countAndFlagsBits = 0xD000000000000020;
  v2._unint64_t object = (void *)0x8000000100145E10;
  String.append(_:)(v2);
  sub_1000FEAA0();
  v3._uint64_t countAndFlagsBits = sub_1000FEAC0();
  String.append(_:)(v3);
  sub_1000FE8B0();
  sub_1000FE868();
  sub_1000FE88C();
  v4._uint64_t countAndFlagsBits = 0xD000000000000020;
  v4._unint64_t object = (void *)0x8000000100145E10;
  String.append(_:)(v4);
  v5._uint64_t countAndFlagsBits = 7107189;
  v5._unint64_t object = (void *)0xE300000000000000;
  String.append(_:)(v5);
  sub_1000FE968();
  v6._uint64_t countAndFlagsBits = sub_1000FEAC0();
  String.append(_:)(v6);
  sub_100018F2C();
  unint64_t object = v7._object;
  v7._uint64_t countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v7);
  v8._unint64_t object = (void *)0x8000000100145D80;
  v8._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v8);
  sub_100018F2C();
  uint64_t v98 = v9._object;
  v9._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = 0x617461646174656DLL;
  v10._unint64_t object = (void *)0xEF6E6F6973726556;
  String.append(_:)(v10);
  sub_1000FE994(0xD00000000000001FLL, (uint64_t)" INT NOT NULL\n);\n\nCREATE TABLE ");
  sub_1000FE950(0x6E6F69746361);
  sub_1000FE868();
  sub_1000FE84C();
  sub_1000FE8D4();
  sub_1000FE8EC();
  sub_100018F2C();
  uint64_t v94 = v11._object;
  uint64_t countAndFlagsBits = v11._countAndFlagsBits;
  String.append(_:)(v11);
  sub_1000FE914();
  v12._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v12._unint64_t object = (void *)0x8000000100145F50;
  String.append(_:)(v12);
  sub_1000FE84C();
  sub_1000FE9DC();
  sub_1000FE8EC();
  v13._uint64_t countAndFlagsBits = 0xD000000000000013;
  v13._unint64_t object = (void *)0x8000000100145F70;
  String.append(_:)(v13);
  sub_1000FE84C();
  sub_1000FE81C();
  sub_1000FE8B0();
  sub_1000FE938();
  sub_1000FE88C();
  sub_1000FE994(0xD000000000000038, (uint64_t)") ON DELETE CASCADE\n);\nCREATE INDEX actionIdentifier ON ");
  sub_1000FE950(0x6E6F69746361);
  sub_1000FE938();
  sub_1000FE84C();
  sub_1000FE9DC();
  sub_1000FE8EC();
  v14._uint64_t countAndFlagsBits = sub_1000FEAC0();
  uint64_t v15 = v14._object;
  String.append(_:)(v14);
  sub_1000FE994(0xD00000000000001ELL, (uint64_t)"defaultActionForSystemProtocol");
  sub_1000FE868();
  sub_1000FE84C();
  sub_1000FE8D4();
  sub_1000FEA40();
  sub_1000FE8D4();
  sub_100018F2C();
  int64_t v97 = (void *)v16;
  sub_1000FEB24(v17, v16);
  sub_100018F2C();
  v18._uint64_t countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v18);
  sub_1000FE84C();
  sub_1000FE9DC();
  sub_1000FEA40();
  v19._uint64_t countAndFlagsBits = 0xD000000000000013;
  v19._unint64_t object = (void *)0x8000000100145F70;
  String.append(_:)(v19);
  sub_1000FE84C();
  sub_1000FE81C();
  sub_1000FE8B0();
  sub_1000FE938();
  sub_1000FE88C();
  sub_100018F2C();
  uint64_t v100 = v20._object;
  v20._uint64_t countAndFlagsBits = 0xD000000000000025;
  String.append(_:)(v20);
  sub_1000FEB3C();
  sub_1000FE868();
  sub_1000FE84C();
  sub_1000FE8D4();
  sub_1000FEA1C();
  sub_1000FE994(0xD000000000000057, (uint64_t)" TEXT GENERATED ALWAYS AS (json_extract(metadata, '$.typeName')) VIRTUAL NOT NULL,\n    ");
  sub_1000FE914();
  v21._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v21._unint64_t object = (void *)0x8000000100145F50;
  String.append(_:)(v21);
  sub_1000FE84C();
  sub_1000FE9DC();
  sub_1000FEA1C();
  v22._uint64_t countAndFlagsBits = 0xD000000000000013;
  v22._unint64_t object = (void *)0x8000000100145F70;
  String.append(_:)(v22);
  sub_1000FE84C();
  sub_1000FE81C();
  sub_1000FE8B0();
  sub_1000FE938();
  sub_1000FE88C();
  sub_1000FE994(0xD000000000000032, (uint64_t)") ON DELETE CASCADE\n);\nCREATE INDEX entityType ON ");
  sub_1000FEB3C();
  sub_1000FE938();
  sub_1000FE84C();
  sub_1000FE9DC();
  sub_1000FEA1C();
  v23._uint64_t countAndFlagsBits = 0xD000000000000011;
  v23._unint64_t object = v15;
  String.append(_:)(v23);
  sub_1000FE950(0x656972657571);
  sub_1000FE868();
  sub_1000FE84C();
  sub_1000FE8D4();
  sub_1000FE914();
  sub_1000FE8D4();
  sub_1000FE9F4();
  sub_1000FE994(0xD000000000000058, (uint64_t)" TEXT GENERATED ALWAYS AS (json_extract(metadata, '$.queryType')) VIRTUAL NOT NULL,\n    ");
  v24._uint64_t countAndFlagsBits = 0x6564497972657571;
  v24._unint64_t object = (void *)0xEF7265696669746ELL;
  String.append(_:)(v24);
  sub_1000FE994(0xD000000000000060, (uint64_t)" TEXT GENERATED ALWAYS AS (json_extract(metadata, '$.identifier')) VIRTUAL NOT NULL,\n    UNIQUE(");
  sub_1000FE84C();
  sub_1000FE9DC();
  sub_1000FE9F4();
  v25._uint64_t countAndFlagsBits = 0xD000000000000013;
  v25._unint64_t object = (void *)0x8000000100145F70;
  String.append(_:)(v25);
  sub_1000FE84C();
  sub_1000FE81C();
  sub_1000FE8B0();
  sub_1000FE938();
  sub_1000FE88C();
  sub_1000FE994(0xD000000000000031, (uint64_t)") ON DELETE CASCADE\n);\nCREATE INDEX queryType ON ");
  sub_1000FE950(0x656972657571);
  sub_1000FE938();
  sub_1000FE84C();
  sub_1000FE9DC();
  sub_1000FE9F4();
  v26._uint64_t countAndFlagsBits = 0xD000000000000011;
  v26._unint64_t object = v15;
  String.append(_:)(v26);
  v27._uint64_t countAndFlagsBits = 0x736D756E65;
  v27._unint64_t object = (void *)0xE500000000000000;
  String.append(_:)(v27);
  sub_1000FE868();
  sub_1000FE84C();
  sub_1000FE8D4();
  sub_1000FE8EC();
  v28._unint64_t object = v94;
  v28._uint64_t countAndFlagsBits = countAndFlagsBits;
  String.append(_:)(v28);
  sub_1000FE914();
  v29._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v29._unint64_t object = (void *)0x8000000100145F50;
  String.append(_:)(v29);
  sub_1000FE84C();
  sub_1000FE9DC();
  sub_1000FE8EC();
  v30._uint64_t countAndFlagsBits = 0xD000000000000013;
  v30._unint64_t object = (void *)0x8000000100145F70;
  String.append(_:)(v30);
  sub_1000FE84C();
  sub_1000FE81C();
  sub_1000FE8B0();
  sub_1000FE938();
  sub_1000FE88C();
  v31._uint64_t countAndFlagsBits = 0xD000000000000025;
  v31._unint64_t object = v100;
  String.append(_:)(v31);
  sub_1000FE994(0xD000000000000019, (uint64_t)"appShortcutBundleMetadata");
  sub_1000FE868();
  sub_1000FE84C();
  sub_1000FE8D4();
  v32._unint64_t object = (void *)0x8000000100145DC0;
  v32._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v32);
  sub_1000FE968();
  sub_1000FEAEC((uint64_t)"shortcutTileColor");
  sub_100018F2C();
  v33._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v33);
  sub_1000FE84C();
  sub_1000FE81C();
  sub_1000FE8B0();
  sub_1000FE938();
  sub_1000FE88C();
  v34._uint64_t countAndFlagsBits = 0xD000000000000025;
  v34._unint64_t object = v100;
  String.append(_:)(v34);
  v35._uint64_t countAndFlagsBits = 0x74726F6853707061;
  v35._unint64_t object = (void *)0xEC00000073747563;
  String.append(_:)(v35);
  sub_1000FE868();
  sub_1000FE84C();
  sub_1000FE8D4();
  sub_1000FE914();
  sub_100018F2C();
  unint64_t v96 = v36._object;
  v36._uint64_t countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v36);
  sub_1000FE84C();
  sub_1000FE81C();
  sub_1000FE8B0();
  sub_1000FE938();
  sub_1000FE88C();
  v37._uint64_t countAndFlagsBits = 0xD000000000000025;
  v37._unint64_t object = v100;
  String.append(_:)(v37);
  sub_1000FE994(0xD000000000000015, (uint64_t)"appShortcutParameters");
  sub_1000FE868();
  sub_1000FEAEC((uint64_t)"appShortcutParameterId");
  sub_1000FE8D4();
  sub_1000FE84C();
  sub_1000FE8D4();
  sub_100018F2C();
  v38._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v38);
  sub_1000FE8D4();
  sub_1000FEA70();
  sub_1000FE8D4();
  sub_100018F2C();
  uint64_t v93 = (void *)v39;
  sub_1000FEB24(v40, v39);
  sub_1000FE8D4();
  v41._uint64_t countAndFlagsBits = 0x79747265706F7270;
  v41._unint64_t object = (void *)0xE800000000000000;
  String.append(_:)(v41);
  sub_1000FE8D4();
  sub_1000FEAEC((uint64_t)"optionsCollectionTitle");
  sub_1000FE968();
  v42._uint64_t countAndFlagsBits = sub_1000FEAC0();
  String.append(_:)(v42);
  sub_1000FE994(0xD000000000000017, (uint64_t)" TEXT,\n    FOREIGN KEY(");
  sub_1000FE84C();
  sub_1000FE81C();
  sub_1000FE8B0();
  sub_1000FE938();
  sub_1000FE88C();
  v43._uint64_t countAndFlagsBits = 0xD000000000000025;
  v43._unint64_t object = v100;
  String.append(_:)(v43);
  sub_1000FEB24(v44, 0x8000000100143320);
  sub_1000FE868();
  sub_1000FE84C();
  sub_1000FE8D4();
  v45._uint64_t countAndFlagsBits = 0xD000000000000010;
  v45._unint64_t object = (void *)0x8000000100143340;
  String.append(_:)(v45);
  sub_1000FE8D4();
  v46._uint64_t countAndFlagsBits = 0x446465646F636E65;
  v46._unint64_t object = (void *)0xEB00000000617461;
  String.append(_:)(v46);
  sub_100018F2C();
  v47._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v47);
  sub_1000FE84C();
  sub_1000FE9DC();
  v48._uint64_t countAndFlagsBits = 0xD000000000000010;
  v48._unint64_t object = (void *)0x8000000100143340;
  String.append(_:)(v48);
  sub_100018F2C();
  unint64_t v101 = v49._object;
  v49._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v49);
  sub_1000FE84C();
  sub_1000FE81C();
  sub_1000FE8B0();
  sub_1000FE938();
  sub_1000FE88C();
  v50._uint64_t countAndFlagsBits = 0xD000000000000025;
  v50._unint64_t object = v100;
  String.append(_:)(v50);
  sub_1000FEB24(v51, 0x8000000100143F80);
  sub_1000FE868();
  sub_1000FE84C();
  sub_1000FE8D4();
  v52._uint64_t countAndFlagsBits = 0xD000000000000010;
  v52._unint64_t object = v97;
  String.append(_:)(v52);
  sub_1000FE8D4();
  sub_1000FEAA0();
  v53._uint64_t countAndFlagsBits = 0xD000000000000013;
  v53._unint64_t object = v98;
  String.append(_:)(v53);
  v54._uint64_t countAndFlagsBits = 0x746169636F737361;
  v54._unint64_t object = (void *)0xEE00617461446465;
  String.append(_:)(v54);
  v55._unint64_t object = (void *)0x80000001001462B0;
  v55._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v55);
  sub_1000FE84C();
  sub_1000FE9DC();
  sub_1000FEB08();
  v56._uint64_t countAndFlagsBits = 0xD000000000000013;
  v56._unint64_t object = (void *)0x8000000100145F70;
  String.append(_:)(v56);
  sub_1000FE84C();
  sub_1000FE81C();
  sub_1000FE8B0();
  sub_1000FE938();
  sub_1000FE88C();
  v57._uint64_t countAndFlagsBits = 0xD000000000000025;
  v57._unint64_t object = v100;
  String.append(_:)(v57);
  v58._uint64_t countAndFlagsBits = 0x746E6176656C6572;
  v58._unint64_t object = (void *)0xEF73746E65746E49;
  String.append(_:)(v58);
  sub_1000FE868();
  sub_1000FE84C();
  sub_1000FE8D4();
  sub_1000FEB08();
  sub_1000FE8D4();
  sub_100018F2C();
  v59._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v59);
  v60._uint64_t countAndFlagsBits = 0xD000000000000014;
  v60._unint64_t object = object;
  String.append(_:)(v60);
  v61._unint64_t object = (void *)0xEA0000000000646ELL;
  v61._uint64_t countAndFlagsBits = 0x694B746567646977;
  String.append(_:)(v61);
  sub_1000FE968();
  v62._uint64_t countAndFlagsBits = 0x436465646F636E65;
  v62._unint64_t object = (void *)0xEE00747865746E6FLL;
  String.append(_:)(v62);
  sub_100018F2C();
  v63._uint64_t countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v63);
  sub_1000FE84C();
  sub_1000FE9DC();
  sub_1000FEB08();
  sub_1000FE81C();
  sub_1000FE950(0x6E6F69746361);
  sub_1000FE938();
  sub_1000FE84C();
  sub_1000FE9DC();
  sub_1000FE8EC();
  v64._uint64_t countAndFlagsBits = 0xD000000000000025;
  v64._unint64_t object = v100;
  String.append(_:)(v64);
  sub_100018F2C();
  uint64_t v102 = (void *)v65;
  sub_1000FEB24(v66, v65);
  sub_1000FE868();
  sub_1000FE9AC();
  sub_1000FE8D4();
  sub_1000FE84C();
  sub_1000FE8D4();
  sub_1000FEA70();
  sub_1000FE8D4();
  v67._uint64_t countAndFlagsBits = 0xD000000000000010;
  v67._unint64_t object = v93;
  String.append(_:)(v67);
  sub_1000FE8D4();
  sub_100018F2C();
  v68._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v68);
  sub_1000FE8D4();
  sub_100018F2C();
  v69._uint64_t countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v69);
  sub_1000FE8D4();
  sub_1000FEAA0();
  sub_1000FE994(0xD000000000000021, (uint64_t)" TEXT NOT NULL,\n    PRIMARY KEY (");
  sub_1000FE9AC();
  v70._uint64_t countAndFlagsBits = 8236;
  v70._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v70);
  sub_1000FE84C();
  v71._uint64_t countAndFlagsBits = 0xD000000000000012;
  v71._unint64_t object = v101;
  String.append(_:)(v71);
  sub_1000FE84C();
  sub_1000FE81C();
  sub_1000FE8B0();
  sub_1000FE938();
  sub_1000FE88C();
  v72._uint64_t countAndFlagsBits = 0xD000000000000025;
  v72._unint64_t object = v100;
  String.append(_:)(v72);
  v73._uint64_t countAndFlagsBits = 0xD000000000000017;
  v73._unint64_t object = (void *)0x8000000100143C20;
  String.append(_:)(v73);
  sub_1000FE868();
  sub_1000FEAD0();
  sub_1000FE8D4();
  v74._uint64_t countAndFlagsBits = 0x6D796E6F6E7973;
  v74._unint64_t object = (void *)0xE700000000000000;
  String.append(_:)(v74);
  sub_1000FE8D4();
  sub_1000FE84C();
  v75._uint64_t countAndFlagsBits = 0xD000000000000020;
  v75._unint64_t object = v96;
  String.append(_:)(v75);
  sub_1000FEAD0();
  sub_1000FE9DC();
  sub_1000FE84C();
  v76._uint64_t countAndFlagsBits = 0xD000000000000015;
  v76._unint64_t object = (void *)0x8000000100146330;
  String.append(_:)(v76);
  v77._uint64_t countAndFlagsBits = 0xD000000000000010;
  v77._unint64_t object = v102;
  String.append(_:)(v77);
  sub_1000FE938();
  sub_1000FE9AC();
  sub_1000FE9DC();
  sub_1000FE84C();
  sub_1000FE994(0xD000000000000046, (uint64_t)")\n        ON DELETE CASCADE\n);\n\nCREATE INDEX idx_parentId_bundleId ON ");
  v78._uint64_t countAndFlagsBits = 0xD000000000000017;
  v78._unint64_t object = (void *)0x8000000100143C20;
  String.append(_:)(v78);
  sub_1000FE938();
  sub_1000FEAD0();
  v79._uint64_t countAndFlagsBits = 8236;
  v79._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v79);
  sub_1000FE84C();
  v80._uint64_t countAndFlagsBits = 0xD000000000000011;
  v80._unint64_t object = v15;
  String.append(_:)(v80);
  v81._uint64_t countAndFlagsBits = 0x50656C706D617865;
  v81._unint64_t object = (void *)0xEE00736573617268;
  String.append(_:)(v81);
  sub_1000FE868();
  sub_1000FE84C();
  sub_1000FE8D4();
  sub_1000FEAD0();
  sub_1000FE994(0xD000000000000062, (uint64_t)" TEXT GENERATED ALWAYS AS (json_extract(description, '$.parentIdentifier')) VIRTUAL NOT NULL,\n    ");
  v82._uint64_t countAndFlagsBits = 1684957547;
  v82._unint64_t object = (void *)0xE400000000000000;
  String.append(_:)(v82);
  sub_1000FE994(0xD000000000000056, (uint64_t)" TEXT GENERATED ALWAYS AS (json_extract(description, '$.kind')) VIRTUAL NOT NULL,\n    ");
  v83._uint64_t countAndFlagsBits = 0x7470697263736564;
  v83._unint64_t object = (void *)0xEB000000006E6F69;
  String.append(_:)(v83);
  sub_1000FEB60();
  sub_1000FE84C();
  v84._uint64_t countAndFlagsBits = 0xD000000000000015;
  v84._unint64_t object = (void *)0x8000000100146330;
  String.append(_:)(v84);
  sub_1000FE8B0();
  sub_1000FE938();
  sub_1000FE88C();
  sub_1000FE994(0xD00000000000002DLL, (uint64_t)")\n        ON DELETE CASCADE\n);\n\nCREATE TABLE ");
  v85._uint64_t countAndFlagsBits = 0x6E61747369737361;
  v85._unint64_t object = (void *)0xEF746E65746E4974;
  String.append(_:)(v85);
  sub_1000FE868();
  sub_1000FE84C();
  sub_1000FE8D4();
  sub_1000FE914();
  sub_1000FEB60();
  sub_1000FE84C();
  sub_1000FE81C();
  sub_1000FE8B0();
  sub_1000FE938();
  sub_1000FE88C();
  v86._uint64_t countAndFlagsBits = 0xD000000000000025;
  v86._unint64_t object = v100;
  String.append(_:)(v86);
  v87._unint64_t object = (void *)0x8000000100143F20;
  v87._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v87);
  sub_1000FE868();
  sub_1000FE84C();
  sub_1000FE8D4();
  v88._uint64_t countAndFlagsBits = 0x657669746167656ELL;
  v88._unint64_t object = (void *)0xEF73657361726850;
  String.append(_:)(v88);
  sub_1000FEB60();
  sub_1000FE84C();
  sub_1000FE81C();
  sub_1000FE8B0();
  sub_1000FE938();
  sub_1000FE88C();
  v89._uint64_t countAndFlagsBits = 0xD000000000000025;
  v89._unint64_t object = v100;
  String.append(_:)(v89);
  sub_100018F2C();
  v90._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v90);
  sub_1000FE868();
  sub_1000FE84C();
  sub_1000FE8D4();
  sub_1000FE914();
  sub_1000FEB60();
  sub_1000FE84C();
  sub_1000FE81C();
  sub_1000FE8B0();
  sub_1000FE938();
  sub_1000FE88C();
  sub_1000FE994(0xD000000000000045, (uint64_t)") ON DELETE CASCADE\n);\n\nPRAGMA foreign_keys=1;\nPRAGMA user_version = ");
  v91._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v91);
  swift_bridgeObjectRelease();
  v92._uint64_t countAndFlagsBits = 59;
  v92._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v92);
  qword_1001823D8 = 0;
  unk_1001823E0 = 0xE000000000000000;
}

uint64_t sub_1000FE754(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000BF1C(&qword_10017DEC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000FE7BC(uint64_t a1)
{
  uint64_t v2 = sub_10000BF1C(&qword_10017DEC0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1000FE81C()
{
  uint64_t v1 = 0x4552454645522029;
  unint64_t v2 = 0xED0000205345434ELL;
  String.append(_:)(*(Swift::String *)&v1);
}

void sub_1000FE84C()
{
  unint64_t v2 = 0xD000000000000010;
  uint64_t v3 = v0;
  String.append(_:)(*(Swift::String *)&v2);
}

void sub_1000FE868()
{
  uint64_t v1 = 0x202020200A2820;
  unint64_t v2 = 0xE700000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

void sub_1000FE88C()
{
  uint64_t v1 = 0x4449656C646E7562;
  unint64_t v2 = 0xE800000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

void sub_1000FE8B0()
{
  uint64_t v1 = 0x73656C646E7562;
  unint64_t v2 = 0xE700000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

void sub_1000FE8D4()
{
  uint64_t v3 = v0;
  uint64_t v4 = v1;
  String.append(_:)(*(Swift::String *)&v3);
}

void sub_1000FE8EC()
{
  uint64_t v1 = 0x696669746E656469;
  unint64_t v2 = 0xEA00000000007265;
  String.append(_:)(*(Swift::String *)&v1);
}

void sub_1000FE914()
{
  uint64_t v1 = 0x617461646174656DLL;
  unint64_t v2 = 0xE800000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

void sub_1000FE938()
{
  uint64_t v1 = 40;
  unint64_t v2 = 0xE100000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

void sub_1000FE950(uint64_t a1)
{
  uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL | 0x73000000000000;
  unint64_t v3 = 0xE700000000000000;
  String.append(_:)(*(Swift::String *)&v2);
}

void sub_1000FE968()
{
  uint64_t v1 = 0x200A2C5458455420;
  unint64_t v2 = 0xEB00000000202020;
  String.append(_:)(*(Swift::String *)&v1);
}

void sub_1000FE994(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

void sub_1000FE9AC()
{
  uint64_t v1 = 0x6E6564496E617073;
  unint64_t v2 = 0xEE00726569666974;
  String.append(_:)(*(Swift::String *)&v1);
}

void sub_1000FE9DC()
{
  uint64_t v1 = 44;
  unint64_t v2 = 0xE100000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

void sub_1000FE9F4()
{
  uint64_t v1 = 0x7079547972657571;
  unint64_t v2 = 0xE900000000000065;
  String.append(_:)(*(Swift::String *)&v1);
}

void sub_1000FEA1C()
{
  uint64_t v1 = 0x656D614E65707974;
  unint64_t v2 = 0xE800000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

void sub_1000FEA40()
{
  uint64_t v1 = 0x72506D6574737973;
  unint64_t v2 = 0xEE006C6F636F746FLL;
  String.append(_:)(*(Swift::String *)&v1);
}

void sub_1000FEA70()
{
  uint64_t v1 = 0x79747265706F7270;
  unint64_t v2 = 0xED0000656C746954;
  String.append(_:)(*(Swift::String *)&v1);
}

void sub_1000FEAA0()
{
  uint64_t v1 = 0x65756C6176;
  unint64_t v2 = 0xE500000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t sub_1000FEAC0()
{
  return v0;
}

void sub_1000FEAD0()
{
  unint64_t v2 = 0xD000000000000010;
  uint64_t v3 = v0;
  String.append(_:)(*(Swift::String *)&v2);
}

void sub_1000FEAEC(uint64_t a1@<X8>)
{
  uint64_t v4 = v1;
  unint64_t v3 = (a1 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&v4);
}

void sub_1000FEB08()
{
  unint64_t v2 = 0xD000000000000010;
  uint64_t v3 = v0;
  String.append(_:)(*(Swift::String *)&v2);
}

void sub_1000FEB24(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = 0xD000000000000010;
  String.append(_:)(*(Swift::String *)(&a2 - 1));
}

void sub_1000FEB3C()
{
  uint64_t v1 = 0x7365697469746E65;
  unint64_t v2 = 0xE800000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

void sub_1000FEB60()
{
  uint64_t v3 = v0;
  uint64_t v4 = v1;
  String.append(_:)(*(Swift::String *)&v3);
}

uint64_t sub_1000FEB78(uint64_t a1, uint64_t a2)
{
  if (qword_10017C578 != -1) {
    swift_once();
  }
  memcpy(v15, &unk_100180508, sizeof(v15));
  sub_10002A390(v15);
  if (qword_10017C580 != -1) {
    swift_once();
  }
  sub_10002A9C0((uint64_t)&qword_1001805B0);
  v14[0] = a1;
  v14[1] = a2;
  uint64_t v5 = == infix<A>(_:_:)();
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  memcpy(v13, v15, sizeof(v13));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.filter(_:)(v5, v7, v9, (uint64_t)v14);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  sub_10002A500(v15);
  memcpy(__dst, v14, sizeof(__dst));
  void v14[3] = &type metadata for Table;
  v14[4] = &protocol witness table for Table;
  v14[0] = swift_allocObject();
  memcpy((void *)(v14[0] + 16), __dst, 0xA8uLL);
  Connection.prepareRowIterator(_:)(v14);
  uint64_t v10 = sub_10000E788((uint64_t)v14);
  if (!v2)
  {
    __chkstk_darwin(v10);
    swift_retain();
    RowIterator.compactMap<A>(_:)();
    uint64_t v7 = v12;
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  return v7;
}

uint64_t sub_1000FEE20(uint64_t a1)
{
  if (qword_10017C578 != -1) {
    swift_once();
  }
  memcpy(__dst, &unk_100180508, 0xA8uLL);
  sub_10000BF1C(&qword_10017E940);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013F9D0;
  sub_10002A390(__dst);
  if (qword_10017C580 != -1) {
    swift_once();
  }
  uint64_t v3 = sub_10002A9C0((uint64_t)&qword_1001805B0);
  v22[0] = *(_OWORD *)a1;
  <- infix<A>(_:_:)(v3, v4, v5, (uint64_t)v22, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  if (qword_10017C588 != -1) {
    swift_once();
  }
  uint64_t v6 = sub_10002A9C0((uint64_t)&qword_1001805C8);
  v22[0] = *(_OWORD *)(a1 + 16);
  <- infix<A>(_:_:)(v6, v7, v8, (uint64_t)v22, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  if (qword_10017C590 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_10002A9C0((uint64_t)&qword_1001805E0);
  *(void *)&v22[0] = *(void *)(a1 + 32);
  <- infix<A>(_:_:)(v9, v10, v11, (uint64_t)v22, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int);
  if (qword_10017C598 != -1) {
    swift_once();
  }
  uint64_t v12 = qword_1001805F8;
  uint64_t v13 = unk_100180600;
  uint64_t v14 = qword_100180608;
  unint64_t v15 = *(void *)(a1 + 48);
  if (v15 >> 60 == 15)
  {
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v17 = *(void *)(a1 + 40);
    sub_10000DADC(v17, *(void *)(a1 + 48));
    uint64_t v16 = sub_1000FF580(v17, v15);
    sub_10000DA68(v17, v15);
  }
  *(void *)&v22[0] = v16;
  <- infix<A>(_:_:)(v12, v13, v14, (uint64_t)v22, (uint64_t)&type metadata for Blob, (uint64_t)&protocol witness table for Blob);
  swift_bridgeObjectRelease();
  memcpy(v22, __dst, 0xA8uLL);
  AppIntents_SQLite::Insert v24 = QueryType.insert(or:_:)(AppIntents_SQLite_OnConflict_replace, (Swift::OpaquePointer)inited);
  uint64_t countAndFlagsBits = v24.template._countAndFlagsBits;
  unint64_t object = v24.template._object;
  rawValue = v24.bindings._rawValue;
  swift_bridgeObjectRelease();
  sub_10002A500(__dst);
  v25.template._uint64_t countAndFlagsBits = countAndFlagsBits;
  v25.template._unint64_t object = object;
  v25.bindings._rawValue = rawValue;
  Connection.run(_:)(v25);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *sub_1000FF140()
{
  Table.init(_:database:)(__src, 0xD000000000000010, 0x8000000100143F80, 0, 0);
  return memcpy(&unk_100180508, __src, 0xA8uLL);
}

uint64_t sub_1000FF198(uint64_t a1)
{
  return sub_1000A7200(a1, (uint64_t)&qword_1001805B0, 0x8000000100143090);
}

uint64_t sub_1000FF1B4(uint64_t a1)
{
  return sub_1000A7200(a1, (uint64_t)&qword_1001805C8, 0x80000001001448E0);
}

uint64_t sub_1000FF1D0()
{
  uint64_t v0 = sub_10000BF1C(&qword_10017DED0);
  uint64_t v1 = sub_10002A7B8((unint64_t *)&qword_100180450, &qword_10017DED0);
  return ExpressionType.init(_:)(0x65756C6176, 0xE500000000000000, v0, v1);
}

uint64_t sub_1000FF234()
{
  uint64_t v0 = sub_10000BF1C(&qword_100180610);
  uint64_t v1 = sub_10002A7B8(&qword_100180618, &qword_100180610);
  return ExpressionType.init(_:)(0x746169636F737361, 0xEE00617461446465, v0, v1);
}

uint64_t sub_1000FF2A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (qword_10017C580 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  uint64_t v7 = v16;
  uint64_t v6 = v18;
  if (qword_10017C588 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  uint64_t v9 = v16;
  uint64_t v8 = v18;
  if (qword_10017C590 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  uint64_t v11 = v16;
  if (qword_10017C598 != -1) {
    swift_once();
  }
  Row.get<A>(_:)(qword_1001805F8, unk_100180600, qword_100180608, a1, a2, (uint64_t)&type metadata for Blob, (uint64_t)&protocol witness table for Blob, v10, v14, v15, v16, v18, v19, v20, v21, v22, v23, v24, v25,
    v26);
  uint64_t result = v17;
  if (v17) {
    uint64_t result = sub_1000E5E7C(v17);
  }
  else {
    unint64_t v13 = 0xF000000000000000;
  }
  *a3 = v7;
  a3[1] = v6;
  a3[2] = v9;
  a3[3] = v8;
  a3[4] = v11;
  a3[5] = result;
  a3[6] = v13;
  return result;
}

void *sub_1000FF4F4@<X0>(void *(*a1)(void *__return_ptr)@<X2>, uint64_t a2@<X8>)
{
  uint64_t result = a1(v5);
  if (!v2) {
    return (void *)sub_1000FF7FC((uint64_t)v5, a2);
  }
  return result;
}

uint64_t sub_1000FF544@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_1000FF2A8(a1, a2, v5);
  return sub_1000FF7FC((uint64_t)v5, a3);
}

void *sub_1000FF580(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Data.Iterator();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = _swiftEmptyArrayStorage;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_12;
      }
      uint64_t v9 = HIDWORD(a1) - (int)a1;
LABEL_6:
      if (v9)
      {
        if (v9 >= 1)
        {
          sub_10000BF1C(&qword_10017CD68);
          uint64_t v8 = (void *)swift_allocObject();
          size_t v12 = j__malloc_size(v8);
          _OWORD v8[2] = v9;
          v8[3] = 2 * v12 - 64;
        }
        sub_10000DADC(a1, a2);
        uint64_t v13 = Data._copyContents(initializing:)();
        sub_10000DA10(a1, a2);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        if (v13 != v9)
        {
          __break(1u);
LABEL_12:
          __break(1u);
LABEL_13:
          __break(1u);
          JUMPOUT(0x1000FF72CLL);
        }
      }
      return v8;
    case 2uLL:
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v10 = *(void *)(a1 + 24);
      uint64_t v9 = v10 - v11;
      if (!__OFSUB__(v10, v11)) {
        goto LABEL_6;
      }
      goto LABEL_13;
    case 3uLL:
      return v8;
    default:
      uint64_t v9 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1000FF73C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0[12])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v0[14])
  {
    swift_bridgeObjectRelease();
    if (v0[16])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 184, 7);
}

uint64_t sub_1000FF7D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1000FF544(a1, a2, a3);
}

void *sub_1000FF7E0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000FF4F4(*(void *(**)(void *__return_ptr))(v1 + 16), a1);
}

uint64_t sub_1000FF7FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000BF1C(&qword_100180620);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for LNIntentEnablementRecord(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v3 = *(void *)(a1 + 48);
  if (v3 >> 60 != 15)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    return sub_10000DA10(v4, v3);
  }
  return result;
}

uint64_t initializeWithCopy for LNIntentEnablementRecord(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = a2[3];
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = a2[4];
  uint64_t v5 = a2 + 5;
  unint64_t v6 = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)v5;
  }
  else
  {
    uint64_t v7 = *v5;
    sub_10000DADC(*v5, v6);
    *(void *)(a1 + 40) = v7;
    *(void *)(a1 + 48) = v6;
  }
  return a1;
}

void *assignWithCopy for LNIntentEnablementRecord(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  uint64_t v4 = a2 + 5;
  unint64_t v5 = a2[6];
  if (a1[6] >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      sub_10000DADC(*v4, v5);
      uint64_t v8 = a1[5];
      unint64_t v9 = a1[6];
      a1[5] = v7;
      a1[6] = v5;
      sub_10000DA10(v8, v9);
      return a1;
    }
    sub_1000E5C5C((uint64_t)(a1 + 5));
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 5) = *(_OWORD *)v4;
    return a1;
  }
  uint64_t v6 = *v4;
  sub_10000DADC(*v4, v5);
  a1[5] = v6;
  a1[6] = v5;
  return a1;
}

void *assignWithTake for LNIntentEnablementRecord(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  uint64_t v6 = a2 + 5;
  unint64_t v7 = a1[6];
  if (v7 >> 60 != 15)
  {
    unint64_t v8 = a2[6];
    if (v8 >> 60 != 15)
    {
      uint64_t v9 = a1[5];
      a1[5] = *v6;
      a1[6] = v8;
      sub_10000DA10(v9, v7);
      return a1;
    }
    sub_1000E5C5C((uint64_t)(a1 + 5));
  }
  *(_OWORD *)(a1 + 5) = *(_OWORD *)v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for LNIntentEnablementRecord(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LNIntentEnablementRecord(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LNIntentEnablementRecord()
{
  return &type metadata for LNIntentEnablementRecord;
}

uint64_t sub_1000FFB80(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(sub_1000FFBA0, 0, 0);
}

uint64_t sub_1000FFBA0()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  sub_1000FFD00(v1);
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000FFC2C(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    swift_beginAccess();
    *(void *)(a2 + 16) = v3;
    swift_errorRetain();
    return swift_errorRelease();
  }
  return result;
}

void sub_1000FFC94(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

void sub_1000FFD00(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  uint64_t v1 = *(void *)(a1 + 24);
  aBlock = v2;
  uint64_t v17 = v1;
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = 46;
  v3._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  v4._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  sub_10000D9D4(0, (unint64_t *)&unk_10017DD20);
  id v5 = sub_100100114((uint64_t)aBlock, v17, 0);
  id v6 = (id)LNAppNotificationEventListenerXPCInterface();
  [v5 setRemoteObjectInterface:v6];

  [v5 resume];
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = 0;
  unint64_t v8 = (void *)(v7 + 16);
  uint64_t v20 = sub_1000A32A8;
  uint64_t v21 = v7;
  aBlock = _NSConcreteStackBlock;
  uint64_t v17 = 1107296256;
  uint64_t v18 = sub_100096260;
  uint64_t v19 = &unk_100173340;
  uint64_t v9 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  id v10 = [v5 synchronousRemoteObjectProxyWithErrorHandler:v9];
  _Block_release(v9);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  swift_beginAccess();
  if (*v8)
  {
    swift_errorRetain();
    swift_willThrow();

    sub_10000E788((uint64_t)v22);
    swift_bridgeObjectRelease();
    swift_release();
    return;
  }
  sub_100010008((uint64_t)v22, (uint64_t)&aBlock);
  sub_10000BF1C(&qword_1001806E0);
  if (swift_dynamicCast())
  {
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = 0;
    sub_10000D9D4(0, (unint64_t *)&qword_10017D468);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    uint64_t v20 = sub_100100288;
    uint64_t v21 = v11;
    aBlock = _NSConcreteStackBlock;
    uint64_t v17 = 1107296256;
    uint64_t v18 = sub_1000FFC94;
    uint64_t v19 = &unk_100173368;
    uint64_t v13 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    [v15 sendAppNotificationEvents:isa reply:v13];
    _Block_release(v13);

    swift_beginAccess();
    if (*(void *)(v11 + 16))
    {
      swift_errorRetain();
      swift_willThrow();
      swift_release();
      sub_10000E788((uint64_t)v22);
      swift_bridgeObjectRelease();
      swift_release();
      swift_unknownObjectRelease();

      return;
    }
    swift_release();
    [v5 invalidate];
    swift_unknownObjectRelease();
  }
  else
  {
    sub_10010023C();
    swift_allocError();
    *uint64_t v14 = 0;
    swift_willThrow();
  }

  sub_10000E788((uint64_t)v22);
  swift_bridgeObjectRelease();
  swift_release();
}

id sub_100100114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v4 initWithMachServiceName:v5 options:a3];

  return v6;
}

uint64_t sub_100100190()
{
  swift_bridgeObjectRelease();

  return _swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for AppNotificationEventListenerClient()
{
  return self;
}

uint64_t sub_1001001EC()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100100224(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100100234()
{
  return swift_release();
}

unint64_t sub_10010023C()
{
  unint64_t result = qword_1001806E8;
  if (!qword_1001806E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001806E8);
  }
  return result;
}

uint64_t sub_100100288(uint64_t a1)
{
  return sub_1000FFC2C(a1, v1);
}

unsigned char *storeEnumTagSinglePayload for AppNotificationEventListenerClient.Errors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10010035CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppNotificationEventListenerClient.Errors()
{
  return &type metadata for AppNotificationEventListenerClient.Errors;
}

unint64_t sub_100100398()
{
  unint64_t result = qword_1001806F0[0];
  if (!qword_1001806F0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001806F0);
  }
  return result;
}

uint64_t sub_1001003EC(uint64_t a1)
{
  return sub_1001005D8(a1, qword_1001823E8, &qword_10017C458, (uint64_t)qword_100181EC0);
}

id sub_100100418()
{
  id result = (id)getLNLogCategoryExecution();
  if (result) {
    qword_100182400 = (uint64_t)result;
  }
  else {
    __break(1u);
  }
  return result;
}

void sub_100100448()
{
}

uint64_t sub_1001004D0(uint64_t a1)
{
  return sub_1001005D8(a1, qword_100182408, &qword_10017C468, (uint64_t)qword_100181EF0);
}

void sub_1001004FC()
{
}

uint64_t sub_1001005AC(uint64_t a1)
{
  return sub_1001005D8(a1, qword_100182420, &qword_10017C470, (uint64_t)qword_100181F08);
}

uint64_t sub_1001005D8(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v18 - v12;
  uint64_t v14 = type metadata accessor for OSSignposter();
  sub_10000D844(v14, a2);
  sub_10000BEE4(v14, (uint64_t)a2);
  if (*a3 != -1) {
    swift_once();
  }
  uint64_t v15 = sub_10000BEE4(v7, a4);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v16(v13, v15, v7);
  v16(v11, (uint64_t)v13, v7);
  OSSignposter.init(logger:)();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
}

uint64_t sub_100100770()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Optional();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return result;
}

id *sub_100100860()
{
  unint64_t v1 = (char *)v0 + qword_100182438;
  type metadata accessor for Logger();
  sub_100010140();
  (*(void (**)(char *))(v2 + 8))(v1);

  int v3 = (char *)v0 + *((void *)*v0 + 16);
  type metadata accessor for Optional();
  sub_100010140();
  (*(void (**)(char *))(v4 + 8))(v3);
  swift_release();
  return v0;
}

uint64_t sub_100100950()
{
  sub_100100860();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t type metadata accessor for NotificationDebouncer()
{
  return sub_100010B5C();
}

uint64_t _s14ParameterValueVwxx()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _s14ParameterValueVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s14ParameterValueVwca(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  return a1;
}

__n128 _s14ParameterValueVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s14ParameterValueVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  return a1;
}

uint64_t _s14ParameterValueVwet(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 58))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s14ParameterValueVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 58) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 58) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *_s14ParameterValueVMa()
{
  return &_s14ParameterValueVN;
}

uint64_t sub_100100C68(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v4 || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), char v6 = 0, (v5 & 1) != 0))
  {
    BOOL v7 = *(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24);
    if (v7 || (char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(), v6 = 0, (v8 & 1) != 0))
    {
      BOOL v9 = *(void *)(a1 + 32) == *(void *)(a2 + 32) && *(void *)(a1 + 40) == *(void *)(a2 + 40);
      if (v9 || (char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(), v6 = 0, (v10 & 1) != 0))
      {
        if ((sub_10001DE3C(*(void **)(a1 + 48), *(void **)(a2 + 48)) & 1) != 0
          && ((*(unsigned __int8 *)(a1 + 56) ^ *(unsigned __int8 *)(a2 + 56)) & 1) == 0)
        {
          char v6 = ((*(unsigned char *)(a1 + 57) & 1) == 0) ^ *(unsigned char *)(a2 + 57);
        }
        else
        {
          char v6 = 0;
        }
      }
    }
  }
  return v6 & 1;
}

uint64_t sub_100100D40@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Schema.RuntimeError();
  __chkstk_darwin(v4);
  char v6 = (uint64_t *)((char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  BOOL v9 = (char *)&v24 - v8;
  uint64_t v10 = type metadata accessor for MetadataError();
  sub_10000E948();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  sub_10001B450();
  uint64_t v16 = v15 - v14;
  uint64_t v25 = a1;
  swift_errorRetain();
  sub_10000BF1C(&qword_10017C810);
  if (swift_dynamicCast())
  {
    swift_errorRelease();
    (*(void (**)(void *, uint64_t, uint64_t))(v12 + 32))(a2, v16, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    swift_errorRelease();
    uint64_t v25 = a1;
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      swift_errorRelease();
      sub_100101000((uint64_t)v9, (uint64_t)a2);
    }
    else
    {
      swift_errorRelease();
      uint64_t v29 = a1;
      swift_errorRetain();
      if (!swift_dynamicCast())
      {
        swift_errorRelease();
        *a2 = a1;
        return swift_storeEnumTagMultiPayload();
      }
      uint64_t v18 = v25;
      uint64_t v19 = v26;
      int v20 = v27;
      uint64_t v21 = v28;
      sub_100047E58();
      uint64_t v22 = swift_allocError();
      *(void *)uint64_t v23 = v18;
      *(void *)(v23 + 8) = v19;
      *(_DWORD *)(v23 + 16) = v20;
      *(void *)(v23 + 24) = v21;
      swift_errorRelease();
      uint64_t *v6 = v22;
      swift_storeEnumTagMultiPayload();
      sub_100101000((uint64_t)v6, (uint64_t)a2);
    }
  }
  return swift_errorRelease();
}

uint64_t type metadata accessor for Schema.RuntimeError()
{
  uint64_t result = qword_1001807E8;
  if (!qword_1001807E8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100101000(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Schema.RuntimeError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_100101064(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v6 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v7 = type metadata accessor for MetadataError();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        break;
      case 2u:
      case 3u:
        uint64_t v8 = *a2;
        swift_errorRetain();
        *a1 = v8;
        break;
      default:
        uint64_t v9 = a2[1];
        *a1 = *a2;
        a1[1] = v9;
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1001011F0(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 4:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 1:
      uint64_t v3 = type metadata accessor for MetadataError();
      uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      uint64_t result = v4(a1, v3);
      break;
    case 2:
    case 3:
      uint64_t result = swift_errorRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *sub_1001012E4(uint64_t *a1, uint64_t *a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v4 = type metadata accessor for MetadataError();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
      break;
    case 2u:
    case 3u:
      uint64_t v5 = *a2;
      swift_errorRetain();
      *a1 = v5;
      break;
    default:
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *sub_100101420(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    sub_10010157C((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v4 = type metadata accessor for MetadataError();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
        break;
      case 2u:
      case 3u:
        uint64_t v5 = *a2;
        swift_errorRetain();
        *a1 = v5;
        break;
      default:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10010157C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Schema.RuntimeError();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_1001015D8(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for MetadataError();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_100101690(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10010157C((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for MetadataError();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100101758()
{
  uint64_t result = type metadata accessor for MetadataError();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_1001017FC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for MetadataError();
  sub_10000E948();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  sub_10001B450();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = type metadata accessor for Schema.RuntimeError();
  __chkstk_darwin(v9);
  sub_10001B450();
  uint64_t v12 = (uint64_t *)(v11 - v10);
  sub_100101ACC(v1, v11 - v10);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(v4 + 32))(v8, v12, v2);
      uint64_t v16 = MetadataError.errorDescription.getter();
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v8, v2);
      return v16;
    case 2u:
      sub_100101B30();
      _StringGuts.grow(_:)(28);
      swift_bridgeObjectRelease();
      unint64_t v24 = 0xD00000000000001ALL;
      goto LABEL_6;
    case 3u:
      sub_100101B30();
      _StringGuts.grow(_:)(40);
      swift_bridgeObjectRelease();
      unint64_t v24 = 0xD000000000000026;
LABEL_6:
      swift_errorRetain();
      sub_10000BF1C(&qword_10017C810);
      v17._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      swift_errorRelease();
      return v24;
    case 4u:
      uint64_t v18 = *v12;
      uint64_t v19 = (void *)v12[1];
      sub_100101B30();
      _StringGuts.grow(_:)(55);
      v20._uint64_t countAndFlagsBits = 0x20656C646E7542;
      v20._unint64_t object = (void *)0xE700000000000000;
      String.append(_:)(v20);
      v21._uint64_t countAndFlagsBits = v18;
      v21._unint64_t object = v19;
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      v22._uint64_t countAndFlagsBits = 0xD00000000000002ELL;
      v22._unint64_t object = (void *)0x80000001001466B0;
      String.append(_:)(v22);
      return v24;
    default:
      uint64_t v13 = *v12;
      uint64_t v14 = (void *)v12[1];
      sub_100101B30();
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      unint64_t v24 = 0xD00000000000001DLL;
      v15._uint64_t countAndFlagsBits = v13;
      v15._unint64_t object = v14;
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      return v24;
  }
}

uint64_t sub_100101ACC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Schema.RuntimeError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_100101B30()
{
  *(void *)(v0 - 64) = 0;
  *(void *)(v0 - 56) = 0xE000000000000000;
}

uint64_t sub_100101B40(uint64_t a1, uint64_t a2)
{
  if (qword_10017C5C0 != -1) {
    swift_once();
  }
  memcpy(__dst, &unk_100180820, sizeof(__dst));
  if (a2)
  {
    sub_10002A390(__dst);
    if (qword_10017C5C8 != -1) {
      swift_once();
    }
    uint64_t v3 = == infix<A>(_:_:)();
    uint64_t v5 = v4;
    uint64_t v7 = v6;
    memcpy(__src, __dst, sizeof(__src));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    QueryType.filter(_:)(v3, v5, v7, (uint64_t)v11);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    sub_10002A500(__dst);
    uint64_t v8 = v11;
  }
  else
  {
    sub_10002A390(__dst);
    uint64_t v8 = __dst;
  }
  memcpy(__src, v8, sizeof(__src));
  v11[3] = &type metadata for Table;
  v11[4] = &protocol witness table for Table;
  v11[0] = swift_allocObject();
  memcpy((void *)(v11[0] + 16), __src, 0xA8uLL);
  uint64_t v9 = sub_10010260C(v11);
  sub_10000E788((uint64_t)v11);
  return v9;
}

uint64_t sub_100101D44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (qword_10017C5C0 != -1) {
    swift_once();
  }
  memcpy(__dst, &unk_100180820, sizeof(__dst));
  sub_10002A390(__dst);
  if (qword_10017C5C8 != -1) {
    swift_once();
  }
  __src[0] = a1;
  __src[1] = a2;
  uint64_t v11 = == infix<A>(_:_:)();
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  if (qword_10017C5D0 != -1) {
    swift_once();
  }
  __src[0] = a3;
  __src[1] = a4;
  uint64_t v16 = == infix<A>(_:_:)();
  uint64_t v19 = && infix(_:_:)(v11, v13, v15, v16, v17, v18);
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  memcpy(v26, __dst, sizeof(v26));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.filter(_:)(v19, v21, v23, (uint64_t)__src);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  sub_10002A500(__dst);
  memcpy(v29, __src, sizeof(v29));
  __src[3] = &type metadata for Table;
  __src[4] = &protocol witness table for Table;
  __src[0] = swift_allocObject();
  memcpy((void *)(__src[0] + 16), v29, 0xA8uLL);
  uint64_t v24 = Connection.pluck(_:)(__src);
  sub_10000E788((uint64_t)__src);
  if (!v5)
  {
    if (v24)
    {
      a5 = sub_100102718();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      return 0;
    }
  }
  return a5;
}

uint64_t sub_10010203C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_100045F38(a1, a2, a3, a4, 0x7365697469746E65, (void *)0xE800000000000000, 0xD000000000000010, 0x8000000100143090, 0x656D614E65707974, (void *)0xE800000000000000, 0x617461646174656DLL, (void *)0xE800000000000000, 0xD000000000000021, (void *)0x8000000100146750);
  if (!v5)
  {
    if (v10)
    {
      a5 = sub_100101D44(a1, a2, v9, v10, a5);
      swift_bridgeObjectRelease();
    }
    else
    {
      return 0;
    }
  }
  return a5;
}

ValueMetadata *sub_100102164(uint64_t a1, uint64_t a2)
{
  if (qword_10017C5C0 != -1) {
    swift_once();
  }
  memcpy(__dst, &unk_100180820, 0xA8uLL);
  memcpy(v23, &unk_100180820, sizeof(v23));
  if (qword_10017C5D0 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_1001808E0;
  uint64_t v5 = *(void *)algn_1001808E8;
  uint64_t v6 = qword_1001808F0;
  memcpy(v22, __dst, sizeof(v22));
  sub_10002A390(__dst);
  uint64_t v7 = &type metadata for Table;
  uint64_t v8 = QueryType.namespace<A>(_:)(v4, v5, v6);
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  sub_10002A500(__dst);
  v22[3] = sub_10000BF1C((uint64_t *)&unk_10017E920);
  void v22[4] = &protocol witness table for Expression<A>;
  v22[0] = v8;
  v22[1] = v10;
  v22[2] = v12;
  SchemaType.select(_:_:)((uint64_t)v22, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table);
  sub_10000E788((uint64_t)v22);
  if (a2)
  {
    memcpy(v23, __src, sizeof(v23));
    if (qword_10017C5C8 != -1) {
      swift_once();
    }
    v22[0] = a1;
    v22[1] = a2;
    uint64_t v13 = == infix<A>(_:_:)();
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    memcpy(v21, v23, sizeof(v21));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    QueryType.filter(_:)(v13, v15, v17, (uint64_t)v22);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    sub_10002A500(v23);
    memcpy(__src, v22, sizeof(__src));
  }
  v23[3] = &type metadata for Table;
  v23[4] = &protocol witness table for Table;
  v23[0] = swift_allocObject();
  memcpy((void *)(v23[0] + 16), __src, 0xA8uLL);
  uint64_t v18 = __dst[23];
  Connection.prepareRowIterator(_:)(v23);
  sub_10000E788((uint64_t)v23);
  if (!v18)
  {
    RowIterator.compactMap<A>(_:)();
    uint64_t v7 = v20;
    swift_bridgeObjectRelease();
    swift_release();
  }
  return v7;
}

void *sub_1001024B8()
{
  Table.init(_:database:)(__src, 0x7365697469746E65, 0xE800000000000000, 0, 0);
  return memcpy(&unk_100180820, __src, 0xA8uLL);
}

uint64_t sub_10010250C(uint64_t a1)
{
  return sub_100035F34(a1, (uint64_t)&qword_1001808C8, 0xD000000000000010, 0x8000000100143090);
}

uint64_t sub_100102530(uint64_t a1)
{
  return sub_100035F34(a1, (uint64_t)&qword_1001808E0, 0x656D614E65707974, 0xE800000000000000);
}

uint64_t sub_100102550(uint64_t a1)
{
  return sub_100035F34(a1, (uint64_t)&qword_1001808F8, 0x617461646174656DLL, 0xE800000000000000);
}

uint64_t sub_100102570()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0[12])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v0[14])
  {
    swift_bridgeObjectRelease();
    if (v0[16])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 184, 7);
}

uint64_t sub_10010260C(void *a1)
{
  uint64_t v3 = Connection.prepareRowIterator(_:)(a1);
  if (!v1)
  {
    __chkstk_darwin(v3);
    swift_retain();
    RowIterator.compactMap<A>(_:)();
    uint64_t v2 = v5;
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  return v2;
}

uint64_t sub_100102718()
{
  uint64_t v0 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10017C5C8 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  uint64_t v3 = v6[2];
  if (qword_10017C5D8 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  sub_1001029BC();
  uint64_t v4 = type metadata accessor for URL();
  sub_10000D5B0((uint64_t)v2, 1, 1, v4);
  static LNEntityMetadata.fromJSON(_:bundleURL:effectiveBundleIdentifier:)();
  sub_100035FE8((uint64_t)v2);
  swift_bridgeObjectRelease();
  return v3;
}

void sub_1001028F8(void *a1@<X8>)
{
  if (qword_10017C5D0 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  if (v1)
  {
    swift_errorRelease();
    uint64_t v3 = 0;
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v3 = v5;
    uint64_t v4 = v6;
  }
  *a1 = v3;
  a1[1] = v4;
}

unint64_t sub_1001029BC()
{
  unint64_t result = qword_10017E9A0;
  if (!qword_10017E9A0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10017E9A0);
  }
  return result;
}

uint64_t sub_100102A00(uint64_t a1, uint64_t a2)
{
  return sub_1001029FC(a1, a2, v2);
}

uint64_t sub_100102A08@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  if (!v2)
  {
    *a1 = result;
    a1[1] = v5;
    a1[2] = v6;
  }
  return result;
}

ValueMetadata *type metadata accessor for LNEntityRecord()
{
  return &type metadata for LNEntityRecord;
}

uint64_t sub_100102A50(uint64_t a1, uint64_t a2)
{
  if (qword_10017C5E0 != -1) {
    swift_once();
  }
  memcpy(__dst, &unk_100180910, 0xA8uLL);
  if (a2)
  {
    sub_10002A390(__dst);
    if (qword_10017C5E8 != -1) {
      swift_once();
    }
    sub_10002A9C0((uint64_t)&qword_1001809B8);
    v15[0] = a1;
    v15[1] = a2;
    uint64_t v6 = == infix<A>(_:_:)();
    uint64_t v3 = v7;
    uint64_t v9 = v8;
    memcpy(v14, __dst, sizeof(v14));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    QueryType.filter(_:)(v6, v3, v9, (uint64_t)v15);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    sub_10002A500(__dst);
    uint64_t v10 = v15;
  }
  else
  {
    sub_10002A390(__dst);
    uint64_t v10 = __dst;
  }
  memcpy(v16, v10, sizeof(v16));
  v15[3] = &type metadata for Table;
  v15[4] = &protocol witness table for Table;
  v15[0] = swift_allocObject();
  memcpy((void *)(v15[0] + 16), v16, 0xA8uLL);
  Connection.prepareRowIterator(_:)(v15);
  uint64_t v11 = sub_10000E788((uint64_t)v15);
  if (!v2)
  {
    __chkstk_darwin(v11);
    swift_retain();
    RowIterator.compactMap<A>(_:)();
    uint64_t v3 = v13;
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  return v3;
}

uint64_t sub_100102D14(uint64_t a1, void *a2)
{
  Swift::String v5 = LNEnumMetadata.asJson(prettyPrinted:)(0);
  uint64_t result = v5._countAndFlagsBits;
  if (!v6)
  {
    if (qword_10017C5E0 != -1) {
      swift_once();
    }
    memcpy(__dst, &unk_100180910, sizeof(__dst));
    memcpy(__src, &unk_100180910, sizeof(__src));
    sub_10002A390(__dst);
    if (qword_10017C5E8 != -1) {
      swift_once();
    }
    uint64_t v7 = sub_10002A9C0((uint64_t)&qword_1001809B8);
    v18._uint64_t countAndFlagsBits = a1;
    v18._unint64_t object = a2;
    <- infix<A>(_:_:)(v7, v8, v9, (uint64_t)&v18, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
    sub_10000BF1C(&qword_10017E940);
    *(_OWORD *)(swift_initStackObject() + 16) = xmmword_10013EF20;
    if (qword_10017C5F8 != -1) {
      swift_once();
    }
    uint64_t v10 = sub_10002A9C0((uint64_t)&qword_1001809E8);
    Swift::String v18 = v5;
    <- infix<A>(_:_:)(v10, v11, v12, (uint64_t)&v18, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
    swift_bridgeObjectRelease();
    uint64_t v13 = QueryType.insert(_:_:)((uint64_t)v19);
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    swift_setDeallocating();
    sub_10006F150();
    sub_10002A66C((uint64_t)v19);
    memcpy(v22, __src, sizeof(v22));
    sub_10002A500(v22);
    v23.template._uint64_t countAndFlagsBits = v13;
    v23.template._unint64_t object = v15;
    v23.bindings._rawValue = v17;
    Connection.run(_:)(v23);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100102F4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (qword_10017C5E0 != -1) {
    swift_once();
  }
  memcpy(__dst, &unk_100180910, sizeof(__dst));
  sub_10002A390(__dst);
  if (qword_10017C5E8 != -1) {
    swift_once();
  }
  sub_10002A9C0((uint64_t)&qword_1001809B8);
  __src[0] = a1;
  __src[1] = a2;
  uint64_t v11 = == infix<A>(_:_:)();
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  if (qword_10017C5F0 != -1) {
    swift_once();
  }
  sub_10002A9C0((uint64_t)&unk_1001809D0);
  __src[0] = a3;
  __src[1] = a4;
  uint64_t v16 = == infix<A>(_:_:)();
  uint64_t v19 = && infix(_:_:)(v11, v13, v15, v16, v17, v18);
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  memcpy(v26, __dst, sizeof(v26));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.filter(_:)(v19, v21, v23, (uint64_t)__src);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  sub_10002A500(__dst);
  memcpy(v29, __src, sizeof(v29));
  __src[3] = &type metadata for Table;
  __src[4] = &protocol witness table for Table;
  __src[0] = swift_allocObject();
  memcpy((void *)(__src[0] + 16), v29, 0xA8uLL);
  uint64_t v24 = Connection.pluck(_:)(__src);
  sub_10000E788((uint64_t)__src);
  if (!v5)
  {
    if (v24)
    {
      a5 = sub_100103424();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      return 0;
    }
  }
  return a5;
}

uint64_t sub_10010323C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_100045F38(a1, a2, a3, a4, 0x736D756E65, (void *)0xE500000000000000, 0xD000000000000010, 0x8000000100143090, 0x696669746E656469, (void *)0xEA00000000007265, 0x617461646174656DLL, (void *)0xE800000000000000, 0xD000000000000021, (void *)0x8000000100146750);
  if (!v5)
  {
    if (v10)
    {
      a5 = sub_100102F4C(a1, a2, v9, v10, a5);
      swift_bridgeObjectRelease();
    }
    else
    {
      return 0;
    }
  }
  return a5;
}

void *sub_100103368()
{
  Table.init(_:database:)(__src, 0x736D756E65, 0xE500000000000000, 0, 0);
  return memcpy(&unk_100180910, __src, 0xA8uLL);
}

uint64_t sub_1001033B8(uint64_t a1)
{
  return sub_100035F34(a1, (uint64_t)&qword_1001809B8, 0xD000000000000010, 0x8000000100143090);
}

uint64_t sub_1001033DC(uint64_t a1)
{
  return sub_100035F34(a1, (uint64_t)&unk_1001809D0, 0x696669746E656469, 0xEA00000000007265);
}

uint64_t sub_100103400(uint64_t a1)
{
  return sub_100035F34(a1, (uint64_t)&qword_1001809E8, 0x617461646174656DLL, 0xE800000000000000);
}

uint64_t sub_100103424()
{
  uint64_t v0 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10017C5E8 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  uint64_t v3 = v6[2];
  if (qword_10017C5F8 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  sub_1001036D8();
  uint64_t v4 = type metadata accessor for URL();
  sub_10000D5B0((uint64_t)v2, 1, 1, v4);
  static LNEnumMetadata.fromJSON(_:bundleURL:effectiveBundleIdentifier:)();
  sub_100035FE8((uint64_t)v2);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_100103604@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_10010363C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0[12])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v0[14])
  {
    swift_bridgeObjectRelease();
    if (v0[16])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 184, 7);
}

unint64_t sub_1001036D8()
{
  unint64_t result = qword_10017E9B0;
  if (!qword_10017E9B0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10017E9B0);
  }
  return result;
}

uint64_t sub_100103718@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  if (!v2)
  {
    *a1 = result;
    a1[1] = v5;
    a1[2] = v6;
  }
  return result;
}

ValueMetadata *type metadata accessor for LNEnumRecord()
{
  return &type metadata for LNEnumRecord;
}

void *sub_100103760(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_21;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v5)
  {
    while (1)
    {
      unint64_t v6 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_7:
        uint64_t v8 = v7;
        unint64_t v9 = v6 + 1;
        if (__OFADD__(v6, 1)) {
          goto LABEL_20;
        }
        id v10 = [v7 entityType];
        uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v13 = v12;

        if (v11 == a2 && v13 == a3)
        {
          swift_bridgeObjectRelease();
LABEL_15:
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          goto LABEL_16;
        }
        char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v15) {
          goto LABEL_15;
        }

LABEL_16:
        ++v6;
        if (v9 == v5) {
          goto LABEL_22;
        }
      }
      if (v6 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      if (!v5) {
        goto LABEL_22;
      }
    }
    id v7 = *(id *)(a1 + 8 * v6 + 32);
    goto LABEL_7;
  }
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100103924(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v25 = a1;
  sub_1000427DC(a2, v24);
  uint64_t v7 = v24[0];
  int64_t v8 = v24[3];
  unint64_t v9 = v24[4];
  uint64_t v20 = v24[1];
  int64_t v21 = (unint64_t)(v24[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  if (!v9) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v11 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v12 = v11 | (v8 << 6);
  while (1)
  {
    uint64_t v16 = *(void *)(v7 + 56);
    uint64_t v17 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v12);
    uint64_t v18 = v17[1];
    v22[0] = *v17;
    v22[1] = v18;
    long long v23 = *(_OWORD *)(v16 + 16 * v12);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100105514((uint64_t)&v25, v22, a3, a4);
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      break;
    }
    if (v13 >= v21) {
      goto LABEL_24;
    }
    unint64_t v14 = *(void *)(v20 + 8 * v13);
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v21) {
        goto LABEL_24;
      }
      unint64_t v14 = *(void *)(v20 + 8 * v15);
      if (v14) {
        goto LABEL_12;
      }
      int64_t v15 = v8 + 3;
      if (v8 + 3 >= v21) {
        goto LABEL_24;
      }
      unint64_t v14 = *(void *)(v20 + 8 * v15);
      if (v14) {
        goto LABEL_12;
      }
      int64_t v15 = v8 + 4;
      if (v8 + 4 >= v21) {
        goto LABEL_24;
      }
      unint64_t v14 = *(void *)(v20 + 8 * v15);
      if (v14)
      {
LABEL_12:
        int64_t v13 = v15;
      }
      else
      {
        int64_t v13 = v8 + 5;
        if (v8 + 5 >= v21) {
          goto LABEL_24;
        }
        unint64_t v14 = *(void *)(v20 + 8 * v13);
        if (!v14)
        {
          int64_t v19 = v8 + 6;
          while (v19 < v21)
          {
            unint64_t v14 = *(void *)(v20 + 8 * v19++);
            if (v14)
            {
              int64_t v13 = v19 - 1;
              goto LABEL_13;
            }
          }
LABEL_24:
          swift_bridgeObjectRelease();
          swift_release();
          return v25;
        }
      }
    }
LABEL_13:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v13 << 6);
    int64_t v8 = v13;
  }
  __break(1u);
  return result;
}

void *sub_100103B70(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + 16);
  int64_t v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    v14[0] = v1;
    uint64_t v17 = _swiftEmptyArrayStorage;
    sub_100057EB8();
    int64_t v8 = v17;
    uint64_t v9 = *(void *)(type metadata accessor for ObservationStatusRegistry.ObservationStatusChangeListener() - 8);
    uint64_t v10 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v16 = *(void *)(v9 + 72);
    unint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v14[1] = v4 + 32;
    int64_t v15 = v11;
    do
    {
      v15(v6, v10, v3);
      uint64_t v17 = v8;
      unint64_t v12 = v8[2];
      if (v12 >= v8[3] >> 1)
      {
        sub_100057EB8();
        int64_t v8 = v17;
      }
      _OWORD v8[2] = v12 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v12, v6, v3);
      v10 += v16;
      --v7;
    }
    while (v7);
  }
  return v8;
}

uint64_t sub_100103D78(uint64_t a1, unint64_t a2, unint64_t a3, char *a4)
{
  if (qword_10017C478 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10000BEE4(v8, (uint64_t)qword_100181F20);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    v21[0] = sub_1000EE704();
    *(_DWORD *)uint64_t v11 = 67109634;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 8) = 2080;
    swift_bridgeObjectRetain();
    sub_100013090(a1, a2, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v11 + 18) = 2080;
    v20[1] = a4;
    swift_bridgeObjectRetain();
    sub_10000BF1C((uint64_t *)&unk_10017D100);
    uint64_t v12 = String.init<A>(describing:)();
    v20[0] = (char *)sub_100013090(v12, v13, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Setting isObserved status to %{BOOL}d for: %s/%s", (uint8_t *)v11, 0x1Cu);
    swift_arrayDestroy();
    sub_10000EB10();
    sub_10000EB10();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v14 = swift_bridgeObjectRelease_n();
  }
  __chkstk_darwin(v14);
  uint64_t v16 = (uint64_t *)&v15[4];
  uint64_t v17 = v15 + 6;
  os_unfair_lock_lock(v15 + 6);
  sub_100106D2C(v16, v20);
  os_unfair_lock_unlock(v17);
  uint64_t v18 = v20[0];
  sub_1000AF504();
  if (*((void *)v18 + 2)) {
    sub_1000F1D08(a1, a2, a3, (unint64_t)a4, (uint64_t)v18);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001040B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[11] = a3;
  v4[12] = v3;
  v4[9] = a1;
  v4[10] = a2;
  return _swift_task_switch(sub_1001040D8, 0, 0);
}

uint64_t sub_1001040D8()
{
  uint64_t v32 = v0;
  if (qword_10017C478 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  unint64_t v2 = sub_10000BEE4(v1, (uint64_t)qword_100181F20);
  *(void *)(v0 + 104) = v2;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.default.getter();
  BOOL v5 = os_log_type_enabled(v3, (os_log_type_t)v4);
  unint64_t v7 = *(void *)(v0 + 80);
  unint64_t v6 = *(void *)(v0 + 88);
  if (v5)
  {
    uint64_t v8 = *(void *)(v0 + 72);
    unint64_t v2 = swift_slowAlloc();
    uint64_t v30 = sub_100060438();
    uint64_t v31 = v30;
    *(_DWORD *)unint64_t v2 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 56) = sub_100013090(v8, v7, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100106E40();
    *(_WORD *)(v2 + 12) = 2048;
    if (v6 >> 62)
    {
      swift_bridgeObjectRetain();
      unint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v6 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    *(void *)(v0 + 64) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, (os_log_type_t)v4, "Received events for %s: %ld", (uint8_t *)v2, 0x16u);
    uint64_t v4 = v30;
    swift_arrayDestroy();
    sub_10000EB10();
    sub_10000EB10();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    sub_1000A4490();
  }

  uint64_t v9 = sub_1001069D0();
  *(void *)(v0 + 112) = v9;
  char v10 = *((unsigned char *)v9 + 32);
  *(unsigned char *)(v0 + 168) = v10;
  uint64_t v11 = -1;
  uint64_t v12 = -1 << v10;
  if (-v12 < 64) {
    uint64_t v11 = ~(-1 << -(char)v12);
  }
  if ((v11 & v9[8]) != 0)
  {
    uint64_t v13 = 0;
LABEL_12:
    sub_100106E0C(v13);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    BOOL v16 = os_log_type_enabled(v14, v15);
    unint64_t v17 = *(void *)(v0 + 80);
    if (v16)
    {
      uint64_t v18 = *(void *)(v0 + 72);
      uint64_t v19 = sub_100060438();
      *(void *)(v0 + 48) = sub_1000EE704();
      *(_DWORD *)uint64_t v19 = 136315650;
      swift_bridgeObjectRetain();
      *(void *)(v19 + 4) = sub_100013090(v18, v17, (uint64_t *)(v0 + 48));
      sub_100106E40();
      *(_WORD *)(v19 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v19 + 14) = sub_100013090(v6, v2, (uint64_t *)(v0 + 48));
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v19 + 22) = 2048;
      if ((v4 & 0xC000000000000001) != 0) {
        uint64_t v20 = __CocoaSet.count.getter();
      }
      else {
        uint64_t v20 = *(void *)(v4 + 16);
      }
      swift_bridgeObjectRelease();
      *(void *)(v19 + 24) = v20;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s: Sending events to %s: %ld", (uint8_t *)v19, 0x20u);
      swift_arrayDestroy();
      sub_10000EB10();
      sub_10000EB10();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      sub_1000A4490();
      swift_bridgeObjectRelease_n();
    }
    type metadata accessor for AppNotificationEventListenerClient();
    uint64_t inited = swift_initStackObject();
    long long v23 = sub_100106E58(inited);
    *(void *)(v0 + 144) = v23;
    swift_bridgeObjectRelease();
    uint64_t v24 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v24;
    *uint64_t v24 = v0;
    v24[1] = sub_10010463C;
    return sub_1000FFB80((uint64_t)v23);
  }
  unint64_t v21 = 63 - v12;
  if (v21 > 0x7F)
  {
    if (v9[9])
    {
LABEL_18:
      sub_100106E78();
      goto LABEL_12;
    }
    if (v21 >= 0xC0)
    {
      if (v9[10]) {
        goto LABEL_18;
      }
      if (v21 >= 0x100)
      {
        if (v9[11]) {
          goto LABEL_18;
        }
        if (v21 >= 0x140)
        {
          if (v9[12]) {
            goto LABEL_18;
          }
          unint64_t v26 = v21 >> 6;
          uint64_t v27 = 13;
          while (v27 - 8 < v26)
          {
            if (v9[v27++]) {
              goto LABEL_18;
            }
          }
        }
      }
    }
  }
  swift_release();
  uint64_t v29 = *(uint64_t (**)(void))(v0 + 8);
  return v29();
}

uint64_t sub_10010463C()
{
  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    unint64_t v2 = sub_100104ADC;
  }
  else {
    unint64_t v2 = sub_100104770;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100104770()
{
  swift_setDeallocating();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(v2 + 120);
  if (*(void *)(v2 + 128))
  {
    sub_100106E78();
LABEL_3:
    sub_100106E0C(v6);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    unint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    unint64_t v10 = *(void *)(v2 + 80);
    if (v9)
    {
      uint64_t v11 = *(void *)(v2 + 72);
      uint64_t v12 = sub_100060438();
      *(void *)(v2 + 48) = sub_1000EE704();
      *(_DWORD *)uint64_t v12 = 136315650;
      swift_bridgeObjectRetain();
      *(void *)(v12 + 4) = sub_100013090(v11, v10, (uint64_t *)(v2 + 48));
      sub_100106E40();
      *(_WORD *)(v12 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v12 + 14) = sub_100013090(v3, v1, (uint64_t *)(v2 + 48));
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v12 + 22) = 2048;
      if ((v0 & 0xC000000000000001) != 0) {
        uint64_t v13 = __CocoaSet.count.getter();
      }
      else {
        uint64_t v13 = *(void *)(v0 + 16);
      }
      swift_bridgeObjectRelease();
      *(void *)(v12 + 24) = v13;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s: Sending events to %s: %ld", (uint8_t *)v12, 0x20u);
      swift_arrayDestroy();
      sub_10000EB10();
      sub_10000EB10();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      sub_1000A4490();
      swift_bridgeObjectRelease_n();
    }

    type metadata accessor for AppNotificationEventListenerClient();
    uint64_t inited = swift_initStackObject();
    uint64_t v18 = sub_100106E58(inited);
    *(void *)(v2 + 144) = v18;
    swift_bridgeObjectRelease();
    uint64_t v19 = (void *)swift_task_alloc();
    *(void *)(v2 + 152) = v19;
    *uint64_t v19 = v2;
    v19[1] = sub_10010463C;
    return sub_1000FFB80((uint64_t)v18);
  }
  int64_t v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  unint64_t v15 = (1 << *(unsigned char *)(v2 + 168)) + 63;
  uint64_t result = *(void *)(v2 + 112);
  if (v14 < (uint64_t)(v15 >> 6))
  {
    uint64_t v16 = result + 64;
    uint64_t v6 = v5 + 1;
    if (*(void *)(result + 64 + 8 * v14)) {
      goto LABEL_3;
    }
    int64_t v20 = v15 >> 6;
    uint64_t v6 = v14 + 1;
    if (v14 + 1 < v20)
    {
      if (*(void *)(v16 + 8 * v6)) {
        goto LABEL_3;
      }
      uint64_t v6 = v14 + 2;
      if (v14 + 2 < v20)
      {
        if (*(void *)(v16 + 8 * v6)) {
          goto LABEL_3;
        }
        uint64_t v21 = v14 + 3;
        if (v21 < v20)
        {
          if (*(void *)(v16 + 8 * v21))
          {
            uint64_t v6 = v21;
            goto LABEL_3;
          }
          while (1)
          {
            uint64_t v6 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              break;
            }
            if (v6 >= v20) {
              goto LABEL_26;
            }
            ++v21;
            if (*(void *)(v16 + 8 * v6)) {
              goto LABEL_3;
            }
          }
LABEL_30:
          __break(1u);
          return result;
        }
      }
    }
  }
LABEL_26:
  swift_release();
  uint64_t v22 = *(uint64_t (**)(void))(v2 + 8);
  return v22();
}

uint64_t sub_100104ADC()
{
  swift_setDeallocating();
  swift_bridgeObjectRelease();
  swift_release();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

BOOL sub_100104B58(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0) {
    uint64_t v1 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v1 = *(void *)(a1 + 16);
  }
  return v1 == 0;
}

void *sub_100104B94(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = type metadata accessor for ObservationStatusRegistry.ObservationStatusChangeListener();
  uint64_t v9 = sub_1000282DC(v8);
  uint64_t v11 = v10;
  __chkstk_darwin(v9);
  sub_10001B450();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = type metadata accessor for UUID();
  sub_10000E948();
  uint64_t v17 = v16;
  __chkstk_darwin(v18);
  sub_10001B450();
  uint64_t v21 = v20 - v19;
  Swift::String v38 = &_swiftEmptySetSingleton;
  if (*(void *)(a3 + 16) || (uint64_t v22 = a4, (v23 = *(void *)(a4 + 16)) == 0))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    Swift::String v37 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100057EB8();
    uint64_t v24 = v22 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v36 = *(void *)(v11 + 72);
    do
    {
      sub_100018800(v24, v14);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v21, v14, v15);
      sub_100018864(v14);
      uint64_t v25 = (uint64_t)v37;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100057EB8();
        uint64_t v25 = (uint64_t)v37;
      }
      unint64_t v26 = *(void *)(v25 + 16);
      if (v26 >= *(void *)(v25 + 24) >> 1)
      {
        sub_100057EB8();
        uint64_t v25 = (uint64_t)v37;
      }
      *(void *)(v25 + 16) = v26 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v17 + 32))(v25+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))+ *(void *)(v17 + 72) * v26, v21, v15);
      Swift::String v37 = (void *)v25;
      v24 += v36;
      --v23;
    }
    while (v23);
    swift_bridgeObjectRelease();
    Swift::String v38 = (void *)sub_1000B1DC4(v25);
  }
  uint64_t v27 = a1;
  if (qword_10017C478 != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  sub_10000BEE4(v28, (uint64_t)qword_100181F20);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = sub_100060438();
    Swift::String v37 = (void *)sub_100060438();
    *(_DWORD *)uint64_t v31 = 136315650;
    swift_bridgeObjectRetain();
    sub_100013090(a1, a2, (uint64_t *)&v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100106E40();
    *(_WORD *)(v31 + 12) = 2048;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_WORD *)(v31 + 22) = 2048;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v27 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s: # of event listeners %ld # of observation status change clients %ld", (uint8_t *)v31, 0x20u);
    swift_arrayDestroy();
    sub_10000EB10();
    sub_10000EB10();
  }
  else
  {

    sub_1000A4490();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v32 = sub_100103924((uint64_t)&_swiftEmptySetSingleton, a5, v27, a2);
  swift_bridgeObjectRelease();
  sub_100105860(v32);
  return v38;
}

void *sub_100105060(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for ObservationStatusRegistry.ObservationStatusChangeListener();
  uint64_t v13 = sub_1000282DC(v12);
  uint64_t v15 = v14;
  __chkstk_darwin(v13);
  sub_10001B450();
  uint64_t v18 = v17 - v16;
  uint64_t v19 = type metadata accessor for UUID();
  sub_10000E948();
  uint64_t v21 = v20;
  __chkstk_darwin(v22);
  sub_10001B450();
  uint64_t v25 = v24 - v23;
  if (*(void *)(a5 + 16)) {
    return &_swiftEmptySetSingleton;
  }
  uint64_t v40 = a3;
  uint64_t v42 = v25;
  uint64_t v27 = *(void *)(a6 + 16);
  if (!v27) {
    return &_swiftEmptySetSingleton;
  }
  uint64_t v41 = v18;
  if (qword_10017C478 != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  sub_10000BEE4(v28, (uint64_t)qword_100181F20);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v29, v39))
  {
    Swift::String v38 = v29;
    uint64_t v30 = swift_slowAlloc();
    Swift::String v43 = (void *)sub_1000EE704();
    *(_DWORD *)uint64_t v30 = 136315906;
    swift_bridgeObjectRetain();
    sub_100013090(a1, a2, (uint64_t *)&v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v30 + 12) = 2080;
    swift_bridgeObjectRetain();
    sub_100013090(v40, a4, (uint64_t *)&v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v30 + 22) = 2048;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 32) = 2048;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "%s/%s: # of event listeners %ld # of observation status change clients %ld", (uint8_t *)v30, 0x2Au);
    swift_arrayDestroy();
    sub_10000EB10();
    sub_10000EB10();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  Swift::String v43 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  sub_100057EB8();
  uint64_t v31 = a6 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  uint64_t v32 = *(void *)(v15 + 72);
  uint64_t v33 = v19;
  uint64_t v34 = v42;
  do
  {
    sub_100018800(v31, v41);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v34, v41, v19);
    sub_100018864(v41);
    uint64_t v35 = (uint64_t)v43;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_100057EB8();
      uint64_t v35 = (uint64_t)v43;
    }
    unint64_t v36 = *(void *)(v35 + 16);
    if (v36 >= *(void *)(v35 + 24) >> 1)
    {
      sub_100057EB8();
      uint64_t v35 = (uint64_t)v43;
    }
    *(void *)(v35 + 16) = v36 + 1;
    unint64_t v37 = v35
        + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))
        + *(void *)(v21 + 72) * v36;
    uint64_t v34 = v42;
    uint64_t v19 = v33;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v21 + 32))(v37, v42, v33);
    Swift::String v43 = (void *)v35;
    v31 += v32;
    --v27;
  }
  while (v27);
  swift_bridgeObjectRelease();
  return (void *)sub_1000B1DC4(v35);
}

void sub_100105514(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v6 = a2[1];
  uint64_t v13 = *a2;
  uint64_t v7 = swift_bridgeObjectRetain();
  uint64_t v8 = sub_100103B70(v7);
  swift_bridgeObjectRelease();
  sub_100105B84((uint64_t)v8);
  if (qword_10017C478 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_10000BEE4(v9, (uint64_t)qword_100181F20);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315906;
    swift_bridgeObjectRetain();
    sub_100013090(a3, a4, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 12) = 2080;
    swift_bridgeObjectRetain();
    sub_100013090(v13, v6, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 22) = 2048;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 32) = 2048;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s/%s: # of event listeners %ld # of observation status change clients %ld", (uint8_t *)v12, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_100105860(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v25 - v7;
  uint64_t v9 = sub_10000BF1C(&qword_10017C788);
  uint64_t result = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v13 = 0;
  uint64_t v28 = a1;
  uint64_t v16 = *(void *)(a1 + 56);
  uint64_t v15 = a1 + 56;
  uint64_t v14 = v16;
  uint64_t v17 = 1 << *(unsigned char *)(v15 - 24);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & v14;
  uint64_t v25 = v15;
  int64_t v26 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v27 = v3 + 16;
  if ((v18 & v14) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v20 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  for (unint64_t i = v20 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v23)) + (v13 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v12, *(void *)(v28 + 48) + *(void *)(v3 + 72) * i, v2);
    sub_10000D5B0((uint64_t)v12, 0, 1, v2);
    if (sub_10000D5D8((uint64_t)v12, 1, v2) == 1) {
      return swift_release();
    }
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v12, v2);
    sub_100023F48((uint64_t)v8, v6);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    if (v19) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v22 >= v26) {
      goto LABEL_24;
    }
    unint64_t v23 = *(void *)(v25 + 8 * v22);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v26) {
        goto LABEL_24;
      }
      unint64_t v23 = *(void *)(v25 + 8 * v13);
      if (!v23)
      {
        int64_t v13 = v22 + 2;
        if (v22 + 2 >= v26) {
          goto LABEL_24;
        }
        unint64_t v23 = *(void *)(v25 + 8 * v13);
        if (!v23)
        {
          int64_t v13 = v22 + 3;
          if (v22 + 3 >= v26) {
            goto LABEL_24;
          }
          unint64_t v23 = *(void *)(v25 + 8 * v13);
          if (!v23) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v19 = (v23 - 1) & v23;
  }
  int64_t v24 = v22 + 4;
  if (v24 >= v26)
  {
LABEL_24:
    sub_10000D5B0((uint64_t)v12, 1, 1, v2);
    return swift_release();
  }
  unint64_t v23 = *(void *)(v25 + 8 * v24);
  if (v23)
  {
    int64_t v13 = v24;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v13 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v13 >= v26) {
      goto LABEL_24;
    }
    unint64_t v23 = *(void *)(v25 + 8 * v13);
    ++v24;
    if (v23) {
      goto LABEL_20;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_100105B84(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v19 - v7;
  uint64_t v9 = sub_10000BF1C(&qword_10017C788);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = a1;
  uint64_t v12 = *(void *)(a1 + 16);
  if (v12)
  {
    uint64_t v13 = v3 + 16;
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v15 = v20 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v21 = *(void *)(v13 + 56);
    int64_t v22 = v14;
    uint64_t v16 = (void (**)(char *, char *, uint64_t))(v13 + 16);
    uint64_t v17 = (void (**)(char *, uint64_t))(v13 - 8);
    while (1)
    {
      v22(v11, v15, v2);
      sub_10000D5B0((uint64_t)v11, 0, 1, v2);
      if (sub_10000D5D8((uint64_t)v11, 1, v2) == 1) {
        break;
      }
      (*v16)(v6, v11, v2);
      sub_100023F48((uint64_t)v8, v6);
      (*v17)(v8, v2);
      v15 += v21;
      if (!--v12) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    sub_10000D5B0((uint64_t)v11, 1, 1, v2);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100105D9C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char **a9@<X8>, int a10)
{
  LODWORD(v82) = a10;
  uint64_t v16 = *a1;
  swift_bridgeObjectRetain();
  uint64_t v87 = a2;
  uint64_t v17 = sub_10001B904(a2, a3, v16);
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  unint64_t v85 = a3;
  swift_bridgeObjectRelease();
  int64_t v22 = _swiftEmptyArrayStorage;
  if (v17) {
    unint64_t v23 = v19;
  }
  else {
    unint64_t v23 = _swiftEmptyArrayStorage;
  }
  uint64_t v84 = (uint64_t)v23;
  if (v17) {
    int64_t v24 = (void *)v17;
  }
  else {
    int64_t v24 = _swiftEmptyArrayStorage;
  }
  if (v17) {
    uint64_t v25 = v21;
  }
  else {
    uint64_t v25 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v86 = (uint64_t)v25;
  if (!a5)
  {
    uint64_t v89 = (uint64_t)v24;
    if (a6)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v28 = v84;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v29 = v85;
      uint64_t v30 = (char *)sub_100104B94(v87, v85, (uint64_t)v24, v84, (uint64_t)v25);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
LABEL_93:
        sub_10001F4A8();
        int64_t v24 = v72;
      }
      unint64_t v33 = v24[2];
      if (v33 >= v24[3] >> 1)
      {
        sub_10001F4A8();
        int64_t v24 = v73;
      }
      void v24[2] = v33 + 1;
      uint64_t v34 = &v24[3 * v33];
      v34[4] = a7;
      void v34[5] = a8;
      *((_DWORD *)v34 + 12) = v82;
      goto LABEL_46;
    }
LABEL_33:
    uint64_t v28 = v84;
    uint64_t v29 = v85;
    if (v24[2])
    {
      swift_bridgeObjectRetain();
      uint64_t v41 = swift_bridgeObjectRetain();
      a5 = sub_100106D6C(v41, a7, a8);
      char v43 = v42;
      uint64_t result = swift_bridgeObjectRelease();
      if ((v43 & 1) == 0)
      {
        uint64_t v28 = a5 + 1;
        if (__OFADD__(a5, 1)) {
          goto LABEL_99;
        }
        uint64_t v44 = (char *)v24[2];
        if ((char *)v28 != v44)
        {
          uint64_t v60 = 3 * a5;
          uint64_t v30 = (char *)(a5 + 1);
          uint64_t v61 = a7;
          while ((v28 & 0x8000000000000000) == 0)
          {
            if (v30 >= v44) {
              goto LABEL_89;
            }
            Swift::String v62 = &v24[v60];
            if (v24[v60 + 7] != v61 || v24[v60 + 8] != a8)
            {
              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
              if (result)
              {
                uint64_t v61 = a7;
              }
              else
              {
                if (v30 != (char *)a5)
                {
                  if (a5 >= (unint64_t)v44) {
                    goto LABEL_96;
                  }
                  uint64_t v64 = (uint64_t)&v24[3 * a5 + 4];
                  uint64_t v80 = *(void *)v64;
                  uint64_t v81 = *(void *)(v64 + 8);
                  int v79 = *(_DWORD *)(v64 + 16);
                  uint64_t v65 = v62[8];
                  uint64_t v82 = v62[7];
                  int v66 = v24[v60 + 9];
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  {
                    sub_1000E7158();
                    int64_t v24 = v69;
                  }
                  Swift::String v67 = &v24[3 * a5];
                  v67[4] = v82;
                  v67[5] = v65;
                  *((_DWORD *)v67 + 12) = v66;
                  uint64_t result = swift_bridgeObjectRelease();
                  if ((unint64_t)v30 >= v24[2]) {
                    goto LABEL_97;
                  }
                  Swift::String v68 = &v24[v60];
                  v68[7] = v80;
                  v68[8] = v81;
                  *((_DWORD *)v68 + 18) = v79;
                  swift_bridgeObjectRelease();
                  uint64_t v89 = (uint64_t)v24;
                  uint64_t v29 = v85;
                }
                uint64_t v61 = a7;
                BOOL v58 = __OFADD__(a5++, 1);
                if (v58)
                {
                  __break(1u);
                  goto LABEL_93;
                }
              }
            }
            ++v30;
            uint64_t v44 = (char *)v24[2];
            v60 += 3;
            if (v30 == v44) {
              goto LABEL_38;
            }
          }
LABEL_88:
          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          __break(1u);
          goto LABEL_91;
        }
        uint64_t v30 = (char *)(a5 + 1);
LABEL_38:
        uint64_t v28 = v84;
        if ((uint64_t)v30 < (uint64_t)a5)
        {
          __break(1u);
          goto LABEL_40;
        }
      }
      sub_1000E6A74();
      int64_t v24 = (void *)v89;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v30 = (char *)sub_100104B94(v87, v29, v89, v28, v86);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v30 = (char *)&_swiftEmptySetSingleton;
    }
LABEL_46:
    Swift::String v45 = a9;
    uint64_t v47 = v86;
    goto LABEL_47;
  }
  swift_bridgeObjectRetain();
  uint64_t v26 = sub_10001B9A8(a4, a5, v25);
  if (v26) {
    uint64_t v28 = v26;
  }
  else {
    uint64_t v28 = (uint64_t)_swiftEmptyArrayStorage;
  }
  if (v26) {
    int64_t v22 = v27;
  }
  uint64_t v89 = v28;
  uint64_t v80 = (uint64_t)v22;
  uint64_t v81 = a4;
  if (a6)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v29 = v85;
    uint64_t v30 = (char *)sub_100105060(v87, v85, a4, a5, v28, (uint64_t)v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (swift_isUniquelyReferenced_nonNull_native())
    {
LABEL_18:
      unint64_t v31 = *(void *)(v28 + 16);
      if (v31 >= *(void *)(v28 + 24) >> 1)
      {
        sub_10001F4A8();
        uint64_t v28 = v71;
      }
      *(void *)(v28 + 16) = v31 + 1;
      uint64_t v32 = v28 + 24 * v31;
      *(void *)(v32 + 32) = a7;
      *(void *)(v32 + 40) = a8;
      *(_DWORD *)(v32 + 48) = v82;
      goto LABEL_42;
    }
LABEL_91:
    sub_10001F4A8();
    uint64_t v28 = v70;
    goto LABEL_18;
  }
  if (!*(void *)(v28 + 16))
  {
LABEL_40:
    uint64_t v30 = (char *)&_swiftEmptySetSingleton;
    Swift::String v45 = a9;
    uint64_t v29 = v85;
LABEL_43:
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10000CE08(v28, v80, v81, a5, isUniquelyReferenced_nonNull_native);
    uint64_t v47 = v86;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v28 = v84;
LABEL_47:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10004F8DC((uint64_t)v24, v28, v47, v87, v29);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *Swift::String v45 = v30;
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v35 = swift_bridgeObjectRetain();
  uint64_t v29 = sub_100106D6C(v35, a7, a8);
  char v37 = v36;
  uint64_t result = swift_bridgeObjectRelease();
  if (v37)
  {
LABEL_41:
    sub_1000E6A74();
    uint64_t v28 = v89;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v29 = v85;
    uint64_t v30 = (char *)sub_100105060(v87, v85, v81, a5, v89, v80);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_42:
    Swift::String v45 = a9;
    goto LABEL_43;
  }
  uint64_t v39 = v29 + 1;
  if (__OFADD__(v29, 1)) {
    goto LABEL_98;
  }
  uint64_t v40 = *(char **)(v28 + 16);
  if ((char *)v39 == v40)
  {
    uint64_t v30 = (char *)(v29 + 1);
LABEL_31:
    if ((uint64_t)v30 < v29)
    {
      __break(1u);
      goto LABEL_33;
    }
    goto LABEL_41;
  }
  uint64_t v48 = 24 * v29;
  uint64_t v30 = (char *)(v29 + 1);
  uint64_t v49 = a7;
  Swift::String v78 = v24;
  while (1)
  {
    if (v39 < 0)
    {
      __break(1u);
LABEL_87:
      __break(1u);
      goto LABEL_88;
    }
    if (v30 >= v40) {
      goto LABEL_87;
    }
    uint64_t v50 = v28 + v48;
    if (*(void *)(v28 + v48 + 56) != v49 || *(void *)(v28 + v48 + 64) != a8) {
      break;
    }
LABEL_66:
    ++v30;
    uint64_t v40 = *(char **)(v28 + 16);
    v48 += 24;
    if (v30 == v40) {
      goto LABEL_31;
    }
  }
  int64_t v24 = (void *)a5;
  unint64_t v52 = a8;
  a8 = v39;
  a5 = v52;
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result)
  {
    uint64_t v49 = a7;
    uint64_t v39 = a8;
LABEL_65:
    a8 = a5;
    a5 = (unint64_t)v24;
    int64_t v24 = v78;
    goto LABEL_66;
  }
  if (v30 == (char *)v29)
  {
    uint64_t v39 = a8;
    uint64_t v49 = a7;
LABEL_64:
    BOOL v58 = __OFADD__(v29++, 1);
    if (v58) {
      goto LABEL_90;
    }
    goto LABEL_65;
  }
  if (v29 < (unint64_t)v40)
  {
    LODWORD(v82) = 3 * v29;
    uint64_t v53 = v28 + 32 + 24 * v29;
    uint64_t v75 = *(void *)v53;
    uint64_t v76 = *(void *)(v53 + 8);
    int v74 = *(_DWORD *)(v53 + 16);
    uint64_t v54 = *(void *)(v50 + 64);
    uint64_t v77 = *(void *)(v50 + 56);
    int v55 = *(_DWORD *)(v28 + v48 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1000E7158();
      uint64_t v28 = v59;
    }
    uint64_t v56 = v28 + 24 * v29;
    *(void *)(v56 + 32) = v77;
    *(void *)(v56 + 40) = v54;
    *(_DWORD *)(v56 + 48) = v55;
    uint64_t result = swift_bridgeObjectRelease();
    if ((unint64_t)v30 >= *(void *)(v28 + 16)) {
      goto LABEL_95;
    }
    uint64_t v57 = v28 + v48;
    *(void *)(v57 + 56) = v75;
    *(void *)(v57 + 64) = v76;
    *(_DWORD *)(v57 + 72) = v74;
    swift_bridgeObjectRelease();
    uint64_t v89 = v28;
    uint64_t v49 = a7;
    uint64_t v39 = a8;
    goto LABEL_64;
  }
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
  return result;
}

uint64_t *sub_100106584(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t i = a1[2];
  if (i)
  {
    uint64_t v5 = a1;
    if (a3 >> 62)
    {
LABEL_31:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v48 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      uint64_t v48 = v6;
    }
    uint64_t v43 = (uint64_t)v5;
    uint64_t v47 = (uint64_t)(v5 + 4);
    unint64_t v46 = sub_100106CEC();
    uint64_t v7 = _swiftEmptyDictionarySingleton;
    uint64_t v44 = i;
    unint64_t v45 = sub_10004B010();
    uint64_t v8 = 0;
    while (1)
    {
      if (v8 == i)
      {
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      uint64_t v9 = (uint64_t *)(v47 + 24 * v8);
      uint64_t v11 = *v9;
      uint64_t v10 = v9[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v12 = Set.init(minimumCapacity:)();
      uint64_t v54 = v12;
      uint64_t v51 = v8;
      if (v6)
      {
        if (v6 < 1) {
          goto LABEL_29;
        }
        for (unint64_t i = 0; i != v6; ++i)
        {
          if ((a3 & 0xC000000000000001) != 0) {
            id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v13 = *(id *)(a3 + 8 * i + 32);
          }
          sub_100024244(&v53, v13);
        }
        swift_bridgeObjectRelease();
        uint64_t v49 = v54;
      }
      else
      {
        uint64_t v49 = v12;
        swift_bridgeObjectRelease();
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v15 = v11;
      uint64_t v16 = v11;
      uint64_t v17 = v10;
      uint64_t v5 = v7;
      uint64_t v24 = sub_100021098(v16, v10, v18, v19, v20, v21, v22, v23, v43, v44, v45, v46, v47, v48, v49, v51, (uint64_t)v53, (uint64_t)v7, v55,
              v56,
              v57,
              v58,
              v59,
              v60,
              v61,
              v62);
      uint64_t v26 = v7[2];
      BOOL v27 = (v25 & 1) == 0;
      Swift::Int v28 = v26 + v27;
      if (__OFADD__(v26, v27)) {
        goto LABEL_28;
      }
      unint64_t i = v24;
      char v29 = v25;
      sub_10000BF1C(&qword_10017C8E8);
      uint64_t v5 = &v54;
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v28))
      {
        uint64_t v5 = (uint64_t *)v54;
        uint64_t v36 = sub_100021098(v15, v17, v30, v31, v32, v33, v34, v35, v43, v44, v45, v46, v47, v48, v50, v52, (uint64_t)v53, v54, v55,
                v56,
                v57,
                v58,
                v59,
                v60,
                v61,
                v62);
        if ((v29 & 1) != (v37 & 1))
        {
          uint64_t result = (uint64_t *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
        unint64_t i = v36;
      }
      uint64_t v7 = (uint64_t *)v54;
      if (v29)
      {
        uint64_t v5 = *(uint64_t **)(v54 + 56);
        swift_bridgeObjectRelease();
        v5[i] = v50;
      }
      else
      {
        *(void *)(v54 + 8 * (i >> 6) + 64) |= 1 << i;
        Swift::String v38 = (uint64_t *)(v7[6] + 16 * i);
        *Swift::String v38 = v15;
        v38[1] = v17;
        *(void *)(v7[7] + 8 * i) = v50;
        uint64_t v39 = v7[2];
        BOOL v40 = __OFADD__(v39, 1);
        uint64_t v41 = v39 + 1;
        if (v40) {
          goto LABEL_30;
        }
        v7[2] = v41;
        swift_bridgeObjectRetain();
      }
      uint64_t v8 = v52 + 1;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t i = v44;
      if (v52 + 1 == v44)
      {
        swift_bridgeObjectRelease();
        return v7;
      }
    }
  }
  return _swiftEmptyDictionarySingleton;
}

uint64_t sub_100106878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v9 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v11 = *(v9 - 1);
      uint64_t v10 = *v9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v12 = swift_bridgeObjectRetain();
      id v13 = sub_100103760(v12, a3, a4);
      uint64_t v14 = (void *)sub_1000B2000((unint64_t)v13);
      if (sub_100104B58((uint64_t)v14))
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRetain();
        unint64_t v15 = sub_10001B584(v11, v10, a5);
        swift_bridgeObjectRelease();
        if (v15)
        {
          sub_1000711BC(v15, v14);
          uint64_t v14 = v16;
        }
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        sub_10000CFF8((uint64_t)v14, v11, v10, isUniquelyReferenced_nonNull_native);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      v9 += 3;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return a5;
}

uint64_t *sub_1001069D0()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0
                            + OBJC_IVAR____TtC10LinkDaemon25ObservationStatusRegistry_observationEntriesPerBundleIdentifier);
  uint64_t v2 = (uint64_t *)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_100106CCC(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t sub_100106A44@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X4>, uint64_t **a5@<X8>)
{
  uint64_t v8 = *a1;
  swift_bridgeObjectRetain();
  uint64_t v9 = (uint64_t *)sub_10001B904(a2, a3, v8);
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  if (!v9)
  {
    sub_10000BF1C(&qword_100180A08);
    uint64_t result = Dictionary.init(dictionaryLiteral:)();
    uint64_t v14 = (uint64_t *)result;
LABEL_24:
    *a5 = v14;
    return result;
  }
  uint64_t v14 = sub_100106584(v9, v11, a4);
  uint64_t v33 = v13 + 64;
  uint64_t v15 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v13 + 64);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  int64_t v19 = 0;
  int64_t v34 = (unint64_t)(v15 + 63) >> 6;
  if (!v17) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v20 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  for (unint64_t i = v20 | (v19 << 6); ; unint64_t i = __clz(__rbit64(v23)) + (v19 << 6))
  {
    char v25 = (uint64_t *)(*(void *)(v13 + 48) + 16 * i);
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    Swift::Int v28 = (uint64_t *)(*(void *)(v13 + 56) + 16 * i);
    uint64_t v29 = *v28;
    uint64_t v30 = v28[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v31 = sub_100106878(v29, v30, v26, v27, (uint64_t)v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v14 = (uint64_t *)v31;
    if (v17) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v22 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v22 >= v34) {
      goto LABEL_22;
    }
    unint64_t v23 = *(void *)(v33 + 8 * v22);
    ++v19;
    if (!v23)
    {
      int64_t v19 = v22 + 1;
      if (v22 + 1 >= v34) {
        goto LABEL_22;
      }
      unint64_t v23 = *(void *)(v33 + 8 * v19);
      if (!v23)
      {
        int64_t v19 = v22 + 2;
        if (v22 + 2 >= v34) {
          goto LABEL_22;
        }
        unint64_t v23 = *(void *)(v33 + 8 * v19);
        if (!v23) {
          break;
        }
      }
    }
LABEL_19:
    unint64_t v17 = (v23 - 1) & v23;
  }
  int64_t v24 = v22 + 3;
  if (v24 >= v34)
  {
LABEL_22:
    uint64_t result = swift_release();
    goto LABEL_24;
  }
  unint64_t v23 = *(void *)(v33 + 8 * v24);
  if (v23)
  {
    int64_t v19 = v24;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v19 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v19 >= v34) {
      goto LABEL_22;
    }
    unint64_t v23 = *(void *)(v33 + 8 * v19);
    ++v24;
    if (v23) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100106CCC@<X0>(uint64_t *a1@<X0>, uint64_t **a2@<X8>)
{
  return sub_100106A44(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 40), a2);
}

unint64_t sub_100106CEC()
{
  unint64_t result = qword_10017D468;
  if (!qword_10017D468)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10017D468);
  }
  return result;
}

uint64_t sub_100106D2C@<X0>(uint64_t *a1@<X0>, char **a2@<X8>)
{
  return sub_100105D9C(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(unsigned char *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), a2, *(_DWORD *)(v2 + 72));
}

uint64_t sub_100106D6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (void *)(a1 + 40);
    while (1)
    {
      BOOL v8 = *(v7 - 1) == a2 && *v7 == a3;
      if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      v7 += 3;
      if (v4 == ++v6) {
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    uint64_t v6 = 0;
  }
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_100106E0C@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 128) = v1;
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_100106E40()
{
  return swift_bridgeObjectRelease_n();
}

void *sub_100106E58(uint64_t a1)
{
  *(void *)(v3 + 136) = a1;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v2;
  return sub_100049D70(v1);
}

uint64_t sub_100106E8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_10017C600 != -1) {
    swift_once();
  }
  memcpy(__dst, &unk_100180A10, 0xA8uLL);
  if (a2)
  {
    sub_10002A390(__dst);
    if (qword_10017C608 != -1) {
      swift_once();
    }
    sub_10002A9C0((uint64_t)&qword_100180AB8);
    v25[0] = a1;
    v25[1] = a2;
    uint64_t v9 = == infix<A>(_:_:)();
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    memcpy(v24, __dst, sizeof(v24));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    QueryType.filter(_:)(v9, v11, v13, (uint64_t)v25);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    sub_10002A500(__dst);
    uint64_t v14 = v25;
  }
  else
  {
    sub_10002A390(__dst);
    uint64_t v14 = __dst;
  }
  memcpy(v26, v14, sizeof(v26));
  if (a4)
  {
    if (qword_10017C620 != -1) {
      swift_once();
    }
    sub_10002A9C0((uint64_t)&unk_100180B00);
    v24[0] = a3;
    v24[1] = a4;
    uint64_t v15 = == infix<A>(_:_:)();
    a3 = v16;
    uint64_t v18 = v17;
    memcpy(v23, v26, sizeof(v23));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    QueryType.filter(_:)(v15, a3, v18, (uint64_t)v24);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    sub_10002A500(v26);
    int64_t v19 = v24;
  }
  else
  {
    int64_t v19 = v26;
  }
  memcpy(v25, v19, sizeof(v25));
  v24[3] = &type metadata for Table;
  v24[4] = &protocol witness table for Table;
  v24[0] = swift_allocObject();
  memcpy((void *)(v24[0] + 16), v25, 0xA8uLL);
  Connection.prepareRowIterator(_:)(v24);
  uint64_t v20 = sub_10000E788((uint64_t)v24);
  if (!v4)
  {
    __chkstk_darwin(v20);
    swift_retain();
    RowIterator.compactMap<A>(_:)();
    a3 = v22;
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  return a3;
}

uint64_t sub_10010724C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (qword_10017C600 != -1) {
    swift_once();
  }
  memcpy(__dst, &unk_100180A10, sizeof(__dst));
  sub_10002A390(__dst);
  if (qword_10017C608 != -1) {
    swift_once();
  }
  sub_10002A9C0((uint64_t)&qword_100180AB8);
  __src[0] = a1;
  __src[1] = a2;
  uint64_t v11 = == infix<A>(_:_:)();
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  if (qword_10017C610 != -1) {
    swift_once();
  }
  sub_10002A9C0((uint64_t)&unk_100180AD0);
  __src[0] = a3;
  __src[1] = a4;
  uint64_t v16 = == infix<A>(_:_:)();
  uint64_t v19 = && infix(_:_:)(v11, v13, v15, v16, v17, v18);
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  memcpy(v26, __dst, sizeof(v26));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.filter(_:)(v19, v21, v23, (uint64_t)__src);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  sub_10002A500(__dst);
  memcpy(v29, __src, sizeof(v29));
  __src[3] = &type metadata for Table;
  __src[4] = &protocol witness table for Table;
  __src[0] = swift_allocObject();
  memcpy((void *)(__src[0] + 16), v29, 0xA8uLL);
  uint64_t v24 = Connection.pluck(_:)(__src);
  sub_10000E788((uint64_t)__src);
  if (!v5)
  {
    if (v24)
    {
      a5 = sub_1001077FC();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      return 0;
    }
  }
  return a5;
}

uint64_t sub_10010753C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_100045F38(a1, a2, a3, a4, 0x73656972657571, (void *)0xE700000000000000, 0xD000000000000010, 0x8000000100143090, 0x6564497972657571, (void *)0xEF7265696669746ELL, 0x617461646174656DLL, (void *)0xE800000000000000, 0xD000000000000021, (void *)0x8000000100146750);
  if (!v5)
  {
    if (v10)
    {
      a5 = sub_10010724C(a1, a2, v9, v10, a5);
      swift_bridgeObjectRelease();
    }
    else
    {
      return 0;
    }
  }
  return a5;
}

void *sub_100107674()
{
  Table.init(_:database:)(__src, 0x73656972657571, 0xE700000000000000, 0, 0);
  return memcpy(&unk_100180A10, __src, 0xA8uLL);
}

uint64_t sub_1001076C8(uint64_t a1)
{
  return sub_100035F34(a1, (uint64_t)&qword_100180AB8, 0xD000000000000010, 0x8000000100143090);
}

uint64_t sub_1001076EC(uint64_t a1)
{
  return sub_100035F34(a1, (uint64_t)&unk_100180AD0, 0x6564497972657571, 0xEF7265696669746ELL);
}

uint64_t sub_100107718(uint64_t a1)
{
  return sub_100035F34(a1, (uint64_t)&qword_100180AE8, 0x617461646174656DLL, 0xE800000000000000);
}

uint64_t sub_100107738()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0[12])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v0[14])
  {
    swift_bridgeObjectRelease();
    if (v0[16])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 184, 7);
}

uint64_t sub_1001077D4(uint64_t a1)
{
  return sub_100035F34(a1, (uint64_t)&unk_100180B00, 0x7079547972657571, 0xE900000000000065);
}

uint64_t sub_1001077FC()
{
  uint64_t v0 = sub_10000BF1C((uint64_t *)&unk_10017D0C0);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10017C608 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  uint64_t v3 = v6[2];
  if (qword_10017C618 != -1) {
    swift_once();
  }
  Row.get<A>(_:)();
  sub_1001079DC();
  uint64_t v4 = type metadata accessor for URL();
  sub_10000D5B0((uint64_t)v2, 1, 1, v4);
  static LNQueryMetadata.fromJSON(_:bundleURL:effectiveBundleIdentifier:)();
  sub_100035FE8((uint64_t)v2);
  swift_bridgeObjectRelease();
  return v3;
}

unint64_t sub_1001079DC()
{
  unint64_t result = qword_10017E9C0;
  if (!qword_10017E9C0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10017E9C0);
  }
  return result;
}

uint64_t sub_100107A1C@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_100107A54@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  if (!v2)
  {
    *a1 = result;
    a1[1] = v5;
    a1[2] = v6;
  }
  return result;
}

ValueMetadata *type metadata accessor for LNQueryRecord()
{
  return &type metadata for LNQueryRecord;
}

void sub_100107A9C()
{
  sub_100048AF4();
  if (v0 <= 0x3F) {
    swift_initClassMetadata2();
  }
}

uint64_t sub_100107B60()
{
  sub_10002A75C(v0 + qword_100182448, (uint64_t *)&unk_10017D0C0);
  swift_bridgeObjectRelease();
  sub_10002A75C(v0 + qword_100180B28, (uint64_t *)&unk_10017D0C0);
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_100107BE4(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v6 = qword_10017C2A0;
  swift_bridgeObjectRetain();
  id v7 = a3;
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10000BEE4(v8, (uint64_t)qword_100181978);
  id v9 = v7;
  swift_bridgeObjectRetain();
  id v10 = v9;
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315394;
    swift_bridgeObjectRetain();
    sub_100013090(a1, a2, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v13 + 12) = 2080;
    uint64_t v14 = sub_10010830C(v10);
    if (v15)
    {
      unint64_t v16 = v15;
    }
    else
    {
      uint64_t v14 = 0x6E776F6E6B6E753CLL;
      unint64_t v16 = 0xE90000000000003ELL;
    }
    sub_100013090(v14, v16, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Created StreamReference %s at %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return a1;
}

uint64_t sub_100107E3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_10000BF1C((uint64_t *)&unk_100180C28);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.lastPathComponent.getter();
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6)
  {
    uint64_t v7 = *(void *)(sub_10000BF1C(&qword_10017DD60) - 8);
    uint64_t v8 = a2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v9 = *(void *)(v7 + 72);
    uint64_t v12 = a2;
    swift_bridgeObjectRetain();
    while (1)
    {
      Regex.wholeMatch(in:)();
      uint64_t v10 = sub_10000BF1C((uint64_t *)&unk_100180C38);
      if (sub_10000D5D8((uint64_t)v5, 1, v10) != 1) {
        break;
      }
      sub_10002A75C((uint64_t)v5, (uint64_t *)&unk_100180C28);
      v8 += v9;
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    sub_10002A75C((uint64_t)v5, (uint64_t *)&unk_100180C28);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
LABEL_6:
    swift_bridgeObjectRelease();
    return 0;
  }
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_100108028(uint64_t a1, uint64_t a2, void *a3)
{
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = 544497952;
  v4._unint64_t object = (void *)0xE400000000000000;
  String.append(_:)(v4);
  uint64_t v5 = sub_10010830C(a3);
  if (v6)
  {
    unint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0x6E776F6E6B6E753CLL;
    unint64_t v7 = 0xE90000000000003ELL;
  }
  unint64_t v8 = v7;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
}

uint64_t sub_1001080B4()
{
  sub_100107B60();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t type metadata accessor for StreamManager()
{
  return sub_100010B5C();
}

uint64_t Select.template.getter(uint64_t a1)
{
  return a1;
}

uint64_t sub_100108158()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001081B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v5 = a1 == a4 && a2 == a5;
  if (!v5 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  sub_100062D58();
  return static NSObject.== infix(_:_:)() & 1;
}

Swift::Int sub_100108220()
{
  return Hasher._finalize()();
}

uint64_t sub_100108280()
{
  return Select.template.getter(*v0);
}

Swift::Int sub_100108288()
{
  return sub_100108220();
}

uint64_t sub_100108290()
{
  return sub_100108158();
}

Swift::Int sub_100108298()
{
  return Hasher._finalize()();
}

uint64_t sub_1001082F0(uint64_t *a1, uint64_t *a2)
{
  return sub_1001081B4(*a1, a1[1], a1[2], *a2, a2[1]);
}

uint64_t sub_10010830C(void *a1)
{
  id v1 = [a1 datastorePath];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

ValueMetadata *type metadata accessor for StreamReference()
{
  return &type metadata for StreamReference;
}

unsigned char *storeEnumTagSinglePayload for StreamManagerError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10010844CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StreamManagerError()
{
  return &type metadata for StreamManagerError;
}

unint64_t sub_100108488()
{
  unint64_t result = qword_100180C48;
  if (!qword_100180C48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180C48);
  }
  return result;
}

unint64_t sub_1001084D8()
{
  unint64_t result = qword_100180C50;
  if (!qword_100180C50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180C50);
  }
  return result;
}

uint64_t sub_100108524()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_1001085B8(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  uint64_t v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  uint64_t v9 = a2[13];
  a1[12] = a2[12];
  a1[13] = v9;
  uint64_t v11 = a2[15];
  a1[14] = a2[14];
  a1[15] = v11;
  a1[16] = a2[16];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1001086B8(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[14] = a2[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[16] = a2[16];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_100108840(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x88uLL);
}

uint64_t sub_100108848(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100108930(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 136))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100108970(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 136) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 136) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for ApplicationMetadata()
{
}

void *sub_1001089DC(unint64_t a1, void *a2)
{
  if (a1 >> 62) {
    goto LABEL_21;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      uint64_t v19 = v3;
      unint64_t v4 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_7:
        uint64_t v6 = v5;
        unint64_t v7 = v4 + 1;
        if (__OFADD__(v4, 1)) {
          goto LABEL_20;
        }
        id v8 = [v5 parentIdentifier];
        uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v11 = v10;

        id v12 = [a2 identifier];
        uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v15 = v14;

        if (v9 == v13 && v11 == v15)
        {
          swift_bridgeObjectRelease_n();
LABEL_15:
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          goto LABEL_16;
        }
        char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v17) {
          goto LABEL_15;
        }

LABEL_16:
        ++v4;
        if (v7 == v19) {
          goto LABEL_22;
        }
      }
      if (v4 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
      if (!v3) {
        goto LABEL_22;
      }
    }
    id v5 = *(id *)(a1 + 8 * v4 + 32);
    goto LABEL_7;
  }
LABEL_22:

  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100108BD8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t result = (uint64_t)_swiftEmptyArrayStorage;
  if (v4)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t result = a3(v3);
    if (result < 0 || (unint64_t v8 = result, result >= 1 << *(unsigned char *)(v3 + 32)))
    {
LABEL_13:
      __break(1u);
      return (uint64_t)_swiftEmptyArrayStorage;
    }
    else
    {
      int v9 = v7;
      uint64_t v10 = v3 + 64;
      uint64_t v12 = v3;
      while ((*(void *)(v10 + 8 * (v8 >> 6)) & (1 << v8)) != 0)
      {
        if (v9 != *(_DWORD *)(v3 + 36)) {
          goto LABEL_17;
        }
        id v11 = *(id *)(*(void *)(v3 + 56) + 8 * v8);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        uint64_t v3 = v12;
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        uint64_t result = specialized ContiguousArray._endMutation()();
        if ((uint64_t)v8 >= -(-1 << *(unsigned char *)(v12 + 32))) {
          goto LABEL_18;
        }
        if ((*(void *)(v10 + 8 * (v8 >> 6)) & (1 << v8)) == 0) {
          goto LABEL_19;
        }
        if (v9 != *(_DWORD *)(v12 + 36)) {
          goto LABEL_20;
        }
        uint64_t result = _HashTable.occupiedBucket(after:)();
        if (!--v4) {
          return (uint64_t)_swiftEmptyArrayStorage;
        }
        unint64_t v8 = result;
        if ((result & 0x8000000000000000) == 0)
        {
          int v9 = *(_DWORD *)(v12 + 36);
          if (result < 1 << *(unsigned char *)(v12 + 32)) {
            continue;
          }
        }
        goto LABEL_13;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100108D78(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = a2;
  unint64_t v45 = _swiftEmptyArrayStorage;
  uint64_t result = sub_1000427DC(a1, &v39);
  uint64_t v3 = v39;
  uint64_t v4 = v40;
  uint64_t v38 = v42;
  unint64_t v5 = v43;
  int64_t v6 = (unint64_t)(v41 + 64) >> 6;
  int v7 = (void *)LNSystemEntityProtocolIdentifierUniqueEntity;
  uint64_t v36 = LNSystemEntityProtocolIdentifierUniqueEntity;
  while (1)
  {
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v9 = v8 | (v38 << 6);
      goto LABEL_20;
    }
    int64_t v10 = v38 + 1;
    if (__OFADD__(v38, 1)) {
      break;
    }
    if (v10 >= v6) {
      goto LABEL_30;
    }
    unint64_t v11 = *(void *)(v4 + 8 * v10);
    uint64_t v12 = v38 + 1;
    if (!v11)
    {
      uint64_t v12 = v38 + 2;
      if (v38 + 2 >= v6) {
        goto LABEL_30;
      }
      unint64_t v11 = *(void *)(v4 + 8 * v12);
      if (!v11)
      {
        uint64_t v12 = v38 + 3;
        if (v38 + 3 >= v6) {
          goto LABEL_30;
        }
        unint64_t v11 = *(void *)(v4 + 8 * v12);
        if (!v11)
        {
          uint64_t v12 = v38 + 4;
          if (v38 + 4 >= v6) {
            goto LABEL_30;
          }
          unint64_t v11 = *(void *)(v4 + 8 * v12);
          if (!v11)
          {
            uint64_t v12 = v38 + 5;
            if (v38 + 5 >= v6) {
              goto LABEL_30;
            }
            unint64_t v11 = *(void *)(v4 + 8 * v12);
            if (!v11)
            {
              int64_t v13 = v38 + 6;
              while (v13 < v6)
              {
                unint64_t v11 = *(void *)(v4 + 8 * v13++);
                if (v11)
                {
                  uint64_t v12 = v13 - 1;
                  goto LABEL_19;
                }
              }
LABEL_30:
              swift_release();
              uint64_t v33 = v45;
              swift_bridgeObjectRelease();
              return (uint64_t)v33;
            }
          }
        }
      }
    }
LABEL_19:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
    uint64_t v38 = v12;
LABEL_20:
    id v14 = *(id *)(*(void *)(v3 + 56) + 8 * v9);
    id v15 = [v14 systemProtocolMetadata];
    type metadata accessor for LNSystemEntityProtocolIdentifier(0);
    sub_10000BF1C((uint64_t *)&unk_10017C7F0);
    sub_10010C93C(&qword_10017CB48, type metadata accessor for LNSystemEntityProtocolIdentifier);
    uint64_t v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (!*(void *)(v16 + 16))
    {

      goto LABEL_27;
    }
    id v17 = v7;
    sub_1000210C4();
    if (v18)
    {
      uint64_t v19 = v3;
      int64_t v20 = v6;
      uint64_t v21 = v4;

      swift_bridgeObjectRelease();
      id v22 = [v14 identifier];
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v25 = v24;

      if (*(void *)(v37 + 16)
        && (sub_100021098(v23, v25, v26, v27, v28, v29, v30, v31, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44,
              (uint64_t)v45,
              v46,
              v47,
              v48,
              v49,
              v50,
              v51),
            (v32 & 1) != 0))
      {

        uint64_t result = swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        uint64_t result = specialized ContiguousArray._endMutation()();
      }
      uint64_t v4 = v21;
      int64_t v6 = v20;
      uint64_t v3 = v19;
      int v7 = (void *)v36;
    }
    else
    {

LABEL_27:
      uint64_t result = swift_bridgeObjectRelease();
    }
  }
  __break(1u);
  return result;
}

void sub_100109064(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  if (qword_10017C628 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10000BEE4(v5, (uint64_t)qword_100182450);
  sub_10000C0D4((uint64_t)a1, (uint64_t)v36);
  int64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    unint64_t v8 = (uint8_t *)sub_10006FE08();
    uint64_t v39 = swift_slowAlloc();
    *(_DWORD *)unint64_t v8 = 136315138;
    uint64_t v9 = v37;
    sub_10000BEA0(v36, v37);
    sub_1000EF2D0();
    uint64_t v11 = v10(v9);
    sub_100013090(v11, v12, &v39);
    sub_10010CB80();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10000E788((uint64_t)v36);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Loading combined static metadata for bundle %s", v8, 0xCu);
    swift_arrayDestroy();
    uint64_t v3 = v2;
    sub_10000EB10();
    sub_10000EB10();
  }
  else
  {
    sub_10000E788((uint64_t)v36);
  }

  sub_10000D9D4(0, &qword_100180C90);
  uint64_t v13 = a1[3];
  sub_10000BEA0(a1, v13);
  sub_1000EF2D0();
  v14(v13);
  id v15 = (void *)LNBundleMetadata.init(bundleIdentifier:)();
  if (!v3)
  {
    uint64_t v16 = v15;
    id v17 = [v15 generator];

    if (v17)
    {
      sub_10000C0D4((uint64_t)a1, (uint64_t)v36);
      char v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v18, v19))
      {
        int64_t v20 = (uint8_t *)sub_10006FE08();
        uint64_t v39 = swift_slowAlloc();
        *(_DWORD *)int64_t v20 = 136315138;
        sub_10000BEA0(v36, v37);
        uint64_t v21 = sub_10010CB04();
        uint64_t v23 = v22(v21);
        sub_100013090(v23, v24, &v39);
        sub_10010CB80();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10000E788((uint64_t)v36);
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Ingesting static metadata for %s", v20, 0xCu);
        swift_arrayDestroy();
        sub_10000EB10();
        sub_10000EB10();
      }
      else
      {
        sub_10000E788((uint64_t)v36);
      }

      sub_10000D9D4(0, &qword_10017D0A0);
      sub_100048188();
      uint64_t v32 = Dictionary.init(dictionaryLiteral:)();
      uint64_t v33 = sub_10000BEA0(a1, a1[3]);
      sub_10010C3F4((uint64_t)v33, v32, v16, __src);

      swift_bridgeObjectRelease();
      memcpy(a2, __src, 0x88uLL);
    }
    else
    {
      sub_10000C0D4((uint64_t)a1, (uint64_t)v36);
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = (uint8_t *)sub_10006FE08();
        uint64_t v39 = swift_slowAlloc();
        *(_DWORD *)uint64_t v27 = 136315138;
        sub_10000BEA0(v36, v37);
        uint64_t v28 = sub_10010CB04();
        uint64_t v30 = v29(v28);
        sub_100013090(v30, v31, &v39);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10000E788((uint64_t)v36);
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Undefined compile time metadata generator for %s", v27, 0xCu);
        swift_arrayDestroy();
        sub_10000EB10();
        sub_10000EB10();
      }
      else
      {
        sub_10000E788((uint64_t)v36);
      }

      sub_10010C8F0();
      swift_allocError();
      *uint64_t v34 = 2;
      swift_willThrow();
    }
  }
}

uint64_t sub_10010955C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v242 = a1;
  uint64_t v3 = sub_10000BF1C(&qword_100180C60);
  __chkstk_darwin(v3 - 8);
  sub_1000B1BD0();
  uint64_t v228 = v4;
  unint64_t v5 = type metadata accessor for AssistantPrebuiltEntity();
  sub_10000E948();
  uint64_t v214 = v6;
  __chkstk_darwin(v7);
  sub_1000B1BD0();
  uint64_t v230 = v8;
  uint64_t v9 = sub_10000BF1C(&qword_100180C68);
  __chkstk_darwin(v9 - 8);
  sub_1000B1BD0();
  v229 = v10;
  uint64_t v11 = (uint64_t *)type metadata accessor for AssistantPrebuiltEnum();
  sub_10000E948();
  uint64_t v215 = v12;
  __chkstk_darwin(v13);
  sub_1000B1BD0();
  uint64_t v231 = v14;
  uint64_t v15 = sub_10000BF1C((uint64_t *)&unk_100180C70);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (uint64_t)&v206 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v238 = (uint64_t *)type metadata accessor for AssistantPrebuiltIntent();
  sub_10000E948();
  *(void *)&long long v216 = v18;
  __chkstk_darwin(v19);
  sub_1000B1BD0();
  v233 = v20;
  uint64_t v21 = type metadata accessor for Logger();
  sub_10000E948();
  unint64_t v23 = v22;
  __chkstk_darwin(v24);
  os_log_type_t v26 = (uint64_t *)((char *)&v206 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v27);
  *(void *)&long long v224 = (char *)&v206 - v28;
  __chkstk_darwin(v29);
  v226 = (char *)&v206 - v30;
  __chkstk_darwin(v31);
  unint64_t v33 = (unint64_t)&v206 - v32;
  if (qword_10017C468 != -1) {
    goto LABEL_136;
  }
  while (1)
  {
    uint64_t v34 = sub_10000BEE4(v21, (uint64_t)qword_100181EF0);
    uint64_t v35 = *(void (**)(unint64_t, uint64_t, uint64_t))(v23 + 16);
    unint64_t v239 = v33;
    uint64_t v234 = v21;
    v35(v33, v34, v21);
    uint64_t v36 = v2[1];
    uint64_t v225 = *v2;
    uint64_t v21 = v2[2];
    unint64_t v236 = v5;
    v237 = (unint64_t *)(v2 + 2);
    unint64_t v218 = v23;
    unint64_t v235 = v36;
    if (!((unint64_t)v21 >> 62))
    {
      unint64_t v33 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      goto LABEL_4;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    sub_10010CB38();
    if ((v33 & 0x8000000000000000) != 0) {
      break;
    }
LABEL_4:
    v240 = (unint64_t *)v2;
    v241 = v26;
    v232 = v11;
    uint64_t v21 = (uint64_t)v237;
    if (!v33)
    {
LABEL_43:
      uint64_t v21 = (uint64_t)(v2 + 9);
      unint64_t v5 = v2[9];
      if (v5 >> 62) {
        goto LABEL_139;
      }
      uint64_t v95 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_45:
      unint64_t v23 = v239;
      if (v95)
      {
        unint64_t v33 = 0;
        unint64_t v220 = v215 + 16;
        v233 = (void **)(v215 + 32);
        v227 = &v244;
        *(void *)&long long v223 = v215 + 8;
        v226 = (char *)(v218 + 8);
        *(void *)&long long v37 = 136315394;
        long long v216 = v37;
        unint64_t v213 = (unint64_t)&type metadata for Any + 8;
        *(void *)&long long v37 = 136315650;
        long long v219 = v37;
        v237 = (unint64_t *)v95;
        v238 = (uint64_t *)v21;
        do
        {
          if (v95 == v33) {
            goto LABEL_126;
          }
          v96.Class isa = *(Class *)v21;
          if ((*(void *)v21 & 0xC000000000000001) != 0)
          {
            id v97 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (v33 >= *(void *)(((unint64_t)v96.isa & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_127;
            }
            id v97 = *((id *)v96.isa + v33 + 4);
          }
          uint64_t v98 = v97;
          unint64_t v99 = sub_1000344C0(v97, (SEL *)&selRef_assistantDefinedSchemas, &qword_100180C80);
          if (v99)
          {
            uint64_t v17 = v99;
            unint64_t v5 = v99 & 0xFFFFFFFFFFFFFF8;
            if (v99 >> 62)
            {
              if (!_CocoaArrayWrapper.endIndex.getter())
              {
LABEL_79:

                swift_bridgeObjectRelease();
                uint64_t v21 = (uint64_t)v238;
                goto LABEL_80;
              }
            }
            else if (!*(void *)((v99 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              goto LABEL_79;
            }
            if ((v17 & 0xC000000000000001) != 0)
            {
              id v100 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else
            {
              if (!*(void *)(v5 + 16)) {
                goto LABEL_131;
              }
              id v100 = *(id *)(v17 + 32);
            }
            unint64_t v101 = v100;
            swift_bridgeObjectRelease();
            uint64_t v102 = AssistantPrebuiltLibrary.enums.getter();
            uint64_t v103 = sub_10010B2AC();
            if (*(void *)(v102 + 16)
              && (sub_100021098(v103, v104, v105, v106, v107, v108, v109, v110, v206, v207, v208, *((uint64_t *)&v208 + 1), v209, *((uint64_t *)&v209 + 1), v210, v211, v212, v213, v214,
                    v215,
                    v216,
                    *((uint64_t *)&v216 + 1),
                    v217,
                    v218,
                    v219,
                    *((uint64_t *)&v219 + 1)),
                  (v111 & 1) != 0))
            {
              sub_10010CB24();
              uint64_t v112 = (uint64_t)v229;
              v113(v229);
              uint64_t v114 = 0;
            }
            else
            {
              uint64_t v114 = 1;
              uint64_t v112 = (uint64_t)v229;
            }
            sub_10000D5B0(v112, v114, 1, (uint64_t)v11);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (sub_10000D5D8(v112, 1, (uint64_t)v11) == 1)
            {
              sub_10010C170(v112, &qword_100180C68);
              v244 = &unk_100173A98;
              sub_10000BF1C((uint64_t *)&unk_10017EAF0);
              String.init<A>(describing:)();
              uint64_t result = LNLogSubsystem;
              if (!LNLogSubsystem) {
                goto LABEL_147;
              }
              uint64_t v17 = v115;
              String.init(cString:)();
              Logger.init(subsystem:category:)();
              unint64_t v5 = v101;
              id v116 = v98;
              id v117 = (id)v5;
              id v118 = v116;
              uint64_t v119 = Logger.logObject.getter();
              os_log_type_t v120 = static os_log_type_t.error.getter();
              if (sub_1000A3E04(v120))
              {
                uint64_t v17 = swift_slowAlloc();
                uint64_t v121 = swift_slowAlloc();
                sub_10010CC0C(v121, (uint64_t)&v245);
                *(_DWORD *)uint64_t v17 = v216;
                LODWORD(v221) = v5;
                id v122 = [v117 name];
                uint64_t v123 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v125 = v124;

                uint64_t v243 = sub_100013090(v123, v125, (uint64_t *)&v244);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                swift_bridgeObjectRelease();
                *(_WORD *)(v17 + 12) = 2080;
                id v126 = [v118 identifier];
                uint64_t v11 = (uint64_t *)static String._unconditionallyBridgeFromObjectiveC(_:)();

                unint64_t v23 = v239;
                uint64_t v127 = sub_10010CBEC();
                sub_10010CBB8(v127);

                uint64_t v2 = (uint64_t *)v240;
                swift_bridgeObjectRelease();
                unint64_t v5 = (unint64_t)v222;
                swift_arrayDestroy();
                sub_10000EB10();
                sub_10000EB10();
              }
              else
              {
              }
              sub_100013EC4();
              v151();
              os_log_type_t v26 = v241;
              uint64_t v95 = (uint64_t)v237;
              uint64_t v21 = (uint64_t)v238;
            }
            else
            {
              ((void (*)(uint64_t, uint64_t, uint64_t *))*v233)(v231, v112, v11);
              unint64_t v128 = v235;
              swift_bridgeObjectRetain_n();
              id v129 = v101;
              id v130 = v98;
              id v131 = v129;
              id v132 = v130;
              Swift::Int v133 = Logger.logObject.getter();
              os_log_type_t v134 = static os_log_type_t.info.getter();
              int v135 = v134;
              if (os_log_type_enabled(v133, v134))
              {
                uint64_t v136 = swift_slowAlloc();
                uint64_t v137 = swift_slowAlloc();
                sub_10010CC0C(v137, (uint64_t)&v245);
                *(_DWORD *)uint64_t v136 = v219;
                LODWORD(v221) = v135;
                uint64_t v138 = sub_10010B2AC();
                uint64_t v243 = sub_100013090(v138, v139, (uint64_t *)&v244);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                swift_bridgeObjectRelease();
                *(_WORD *)(v136 + 12) = 2080;
                swift_bridgeObjectRetain();
                uint64_t v140 = sub_100013090(v225, v128, (uint64_t *)&v244);
                sub_10010CAE4(v140);
                swift_bridgeObjectRelease_n();
                *(_WORD *)(v136 + 22) = 2080;
                id v141 = [v132 identifier];
                uint64_t v142 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v144 = v143;

                uint64_t v145 = sub_100013090(v142, v144, (uint64_t *)&v244);
                sub_10010CAE4(v145);

                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v133, (os_log_type_t)v221, "Applying %s to %s:%s", (uint8_t *)v136, 0x20u);
                swift_arrayDestroy();
                sub_10000EB10();
                sub_10000EB10();
              }
              else
              {

                swift_bridgeObjectRelease_n();
              }

              uint64_t v11 = (uint64_t *)v240;
              uint64_t v2 = v241;
              uint64_t v146 = (void *)AssistantPrebuiltEnum.metadata.getter();
              sub_10010B2AC();
              NSString v147 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
              os_log_type_t v26 = (uint64_t *)[v132 copyWithDescriptiveMetadataFromEnum:v146 usingLibraryKey:v147];

              uint64_t v21 = (uint64_t)v238;
              uint64_t v17 = *v238;
              int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
              *(void *)uint64_t v21 = v17;
              unint64_t v5 = (unint64_t)v232;
              if (!isUniquelyReferenced_nonNull_bridgeObject || v17 < 0 || (v17 & 0x4000000000000000) != 0)
              {
                uint64_t v17 = sub_1000E70D4(v17);
                *(void *)uint64_t v21 = v17;
              }
              unint64_t v23 = v239;
              if (v33 >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_134;
              }
              double v149 = *(void **)((v17 & 0xFFFFFFFFFFFFFF8) + 8 * v33 + 0x20);
              *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 8 * v33 + 0x20) = v26;

              specialized Array._endMutation()();
              sub_100013EC4();
              v150();
              os_log_type_t v26 = v2;
              uint64_t v2 = v11;
              uint64_t v11 = (uint64_t *)v5;
              uint64_t v95 = (uint64_t)v237;
            }
          }
          else
          {
          }
LABEL_80:
          ++v33;
        }
        while (v95 != v33);
      }
      unint64_t v152 = v2[8];
      v2 += 8;
      uint64_t v21 = v152;
      if (v152 >> 62) {
        goto LABEL_141;
      }
      unint64_t v33 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_85;
    }
    unint64_t v23 = 0;
    uint64_t v211 = v216 + 16;
    v222 = (void (**)(void **, uint64_t, uint64_t *))(v216 + 32);
    v221 = &v244;
    *(void *)&long long v219 = v216 + 8;
    unint64_t v220 = v218 + 8;
    *(void *)&long long v37 = 136315394;
    long long v208 = v37;
    uint64_t v207 = (uint64_t)&type metadata for Any + 8;
    *(void *)&long long v37 = 136315650;
    long long v209 = v37;
    *(void *)&long long v223 = v17;
    v227 = (void **)v33;
    while (v33 != v23)
    {
      Class v38 = *(Class *)v21;
      if ((*(void *)v21 & 0xC000000000000001) != 0)
      {
        id v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v23 >= *(void *)(((unint64_t)v38 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_125;
        }
        id v39 = *((id *)v38 + v23 + 4);
      }
      uint64_t v40 = v39;
      unint64_t v41 = sub_1000344C0(v39, (SEL *)&selRef_assistantDefinedSchemas, &qword_100180C80);
      if (v41)
      {
        unint64_t v42 = v41;
        unint64_t v5 = v41 & 0xFFFFFFFFFFFFFF8;
        if (v41 >> 62)
        {
          if (!_CocoaArrayWrapper.endIndex.getter())
          {
LABEL_39:

            swift_bridgeObjectRelease();
            uint64_t v21 = (uint64_t)v237;
            goto LABEL_40;
          }
        }
        else if (!*(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_39;
        }
        if ((v42 & 0xC000000000000001) != 0)
        {
          id v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)(v5 + 16)) {
            goto LABEL_130;
          }
          id v43 = *(id *)(v42 + 32);
        }
        uint64_t v44 = v43;
        swift_bridgeObjectRelease();
        uint64_t v45 = AssistantPrebuiltLibrary.intents.getter();
        uint64_t v46 = sub_10010B2AC();
        if (*(void *)(v45 + 16)
          && (sub_100021098(v46, v47, v48, v49, v50, v51, v52, v53, v206, v207, v208, *((uint64_t *)&v208 + 1), v209, *((uint64_t *)&v209 + 1), v210, v211, v212, v213, v214,
                v215,
                v216,
                *((uint64_t *)&v216 + 1),
                v217,
                v218,
                v219,
                *((uint64_t *)&v219 + 1)),
              (v54 & 1) != 0))
        {
          sub_10010CB24();
          v55(v17);
          uint64_t v56 = 0;
        }
        else
        {
          uint64_t v56 = 1;
        }
        uint64_t v57 = v238;
        sub_10000D5B0(v17, v56, 1, (uint64_t)v238);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (sub_10000D5D8(v17, 1, (uint64_t)v57) == 1)
        {
          sub_10010C170(v17, (uint64_t *)&unk_100180C70);
          v244 = &unk_100173A98;
          sub_10000BF1C((uint64_t *)&unk_10017EAF0);
          String.init<A>(describing:)();
          uint64_t result = LNLogSubsystem;
          if (!LNLogSubsystem) {
            goto LABEL_146;
          }
          String.init(cString:)();
          Logger.init(subsystem:category:)();
          unint64_t v5 = v44;
          id v59 = v40;
          id v60 = (id)v5;
          id v61 = v59;
          uint64_t v62 = Logger.logObject.getter();
          os_log_type_t v63 = static os_log_type_t.error.getter();
          if (sub_1000A3E04(v63))
          {
            uint64_t v64 = swift_slowAlloc();
            uint64_t v65 = swift_slowAlloc();
            sub_10010CC0C(v65, (uint64_t)&v239);
            id v66 = [v60 name:sub_10010CB68((uint64_t)&v232).n128_f64[0]];
            uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v69 = v68;

            uint64_t v70 = sub_100013090(v67, v69, (uint64_t *)&v244);
            sub_10010CBD8(v70);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v64 + 12) = 2080;
            id v71 = [v61 identifier];
            uint64_t v11 = (uint64_t *)static String._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v17 = v223;
            uint64_t v72 = sub_10010CBEC();
            sub_10010CBB8(v72);

            uint64_t v2 = (uint64_t *)v240;
            swift_bridgeObjectRelease();
            unint64_t v5 = v213;
            swift_arrayDestroy();
            sub_10000EB10();
            sub_10000EB10();
          }
          else
          {
          }
          sub_100013EC4();
          v94();
          os_log_type_t v26 = v241;
          uint64_t v21 = (uint64_t)v237;
        }
        else
        {
          (*v222)(v233, v17, v57);
          unint64_t v73 = v235;
          swift_bridgeObjectRetain_n();
          id v74 = v44;
          uint64_t v75 = v40;
          id v76 = v74;
          uint64_t v77 = v75;
          Swift::String v78 = Logger.logObject.getter();
          os_log_type_t v79 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v78, v79))
          {
            uint64_t v75 = (_WORD *)swift_slowAlloc();
            uint64_t v80 = swift_slowAlloc();
            sub_10010CC0C(v80, (uint64_t)&v239);
            sub_10010CB68((uint64_t)&v234);
            uint64_t v81 = sub_10010B2AC();
            uint64_t v83 = sub_100013090(v81, v82, (uint64_t *)&v244);
            sub_10010CBD8(v83);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            v75[6] = 2080;
            swift_bridgeObjectRetain();
            uint64_t v84 = sub_100013090(v225, v73, (uint64_t *)&v244);
            sub_10010CAE4(v84);
            swift_bridgeObjectRelease_n();
            v75[11] = 2080;
            id v85 = [v77 identifier];
            uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v88 = v87;

            uint64_t v89 = sub_100013090(v86, v88, (uint64_t *)&v244);
            sub_10010CAE4(v89);

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v78, BYTE4(v212), "Applying %s to %s:%s", (uint8_t *)v75, 0x20u);
            swift_arrayDestroy();
            sub_10000EB10();
            sub_10000EB10();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }

          uint64_t v11 = (uint64_t *)v240;
          uint64_t v2 = v241;
          Swift::String v90 = (void *)AssistantPrebuiltIntent.metadata.getter();
          sub_10010B2AC();
          String._bridgeToObjectiveC()();
          sub_10010CB38();
          os_log_type_t v26 = (uint64_t *)[v77 copyWithDescriptiveMetadataFromAction:v90 usingLibraryKey:v75];

          uint64_t v21 = (uint64_t)v237;
          unint64_t v33 = *v237;
          int v91 = swift_isUniquelyReferenced_nonNull_bridgeObject();
          *(void *)uint64_t v21 = v33;
          unint64_t v5 = (unint64_t)v232;
          uint64_t v17 = v223;
          if (!v91 || (v33 & 0x8000000000000000) != 0 || (v33 & 0x4000000000000000) != 0)
          {
            unint64_t v33 = sub_1000E70D4(v33);
            *(void *)uint64_t v21 = v33;
          }
          if (v23 >= *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_133;
          }
          Swift::String v92 = *(void **)((v33 & 0xFFFFFFFFFFFFFF8) + 8 * v23 + 0x20);
          *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 8 * v23 + 0x20) = v26;

          specialized Array._endMutation()();
          sub_100013EC4();
          v93();
          os_log_type_t v26 = v2;
          uint64_t v2 = v11;
          uint64_t v11 = (uint64_t *)v5;
        }
        unint64_t v33 = (unint64_t)v227;
      }
      else
      {
      }
LABEL_40:
      if (v33 == ++v23) {
        goto LABEL_43;
      }
    }
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    swift_once();
  }
  __break(1u);
LABEL_139:
  swift_bridgeObjectRetain();
  uint64_t v95 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if ((v95 & 0x8000000000000000) == 0) {
    goto LABEL_45;
  }
  __break(1u);
LABEL_141:
  if (v21 < 0) {
    unint64_t v5 = v21;
  }
  else {
    unint64_t v5 = v21 & 0xFFFFFFFFFFFFFF8;
  }
  swift_bridgeObjectRetain();
  _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = sub_10010CB38();
  if ((v33 & 0x8000000000000000) == 0)
  {
LABEL_85:
    if (!v33)
    {
LABEL_123:
      sub_100013EC4();
      v205();
      return swift_bridgeObjectRelease();
    }
    unint64_t v23 = 0;
    v226 = (char *)(v214 + 16);
    v237 = (unint64_t *)(v214 + 32);
    v233 = &v244;
    uint64_t v231 = v214 + 8;
    uint64_t v17 = (uint64_t)&selRef_assistantDefinedSchemas;
    uint64_t v11 = (uint64_t *)LNAssistantDefinedSchemaConformance_ptr;
    v232 = (uint64_t *)(v218 + 8);
    *(void *)&long long v37 = 136315394;
    long long v223 = v37;
    v222 = (void (**)(void **, uint64_t, uint64_t *))((char *)&type metadata for Any + 8);
    *(void *)&long long v37 = 136315650;
    long long v224 = v37;
    v240 = (unint64_t *)v2;
    v238 = (uint64_t *)v33;
    while (1)
    {
      if (v33 == v23) {
        goto LABEL_128;
      }
      uint64_t v153 = *v2;
      if ((*v2 & 0xC000000000000001) != 0)
      {
        id v154 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v23 >= *(void *)((v153 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_129;
        }
        id v154 = *(id *)(v153 + 8 * v23 + 32);
      }
      uint64_t v155 = v154;
      unint64_t v156 = sub_1000344C0(v154, (SEL *)&selRef_assistantDefinedSchemas, &qword_100180C80);
      if (v156)
      {
        uint64_t v21 = v156;
        unint64_t v5 = v156 & 0xFFFFFFFFFFFFFF8;
        if (v156 >> 62)
        {
          if (!_CocoaArrayWrapper.endIndex.getter())
          {
LABEL_119:

            swift_bridgeObjectRelease();
            goto LABEL_120;
          }
        }
        else if (!*(void *)((v156 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_119;
        }
        if ((v21 & 0xC000000000000001) != 0)
        {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)(v5 + 16)) {
            goto LABEL_132;
          }
          id v157 = *(id *)(v21 + 32);
        }
        sub_10010CB38();
        uint64_t v17 = AssistantPrebuiltLibrary.entities.getter();
        uint64_t v158 = sub_10010B2AC();
        if (*(void *)(v17 + 16)
          && (sub_100021098(v158, v159, v160, v161, v162, v163, v164, v165, v206, v207, v208, *((uint64_t *)&v208 + 1), v209, *((uint64_t *)&v209 + 1), v210, v211, v212, v213, v214,
                v215,
                v216,
                *((uint64_t *)&v216 + 1),
                v217,
                v218,
                v219,
                *((uint64_t *)&v219 + 1)),
              (v166 & 1) != 0))
        {
          sub_10010CB24();
          uint64_t v167 = v228;
          v168(v228);
          uint64_t v169 = 0;
        }
        else
        {
          uint64_t v169 = 1;
          uint64_t v167 = v228;
        }
        uint64_t v170 = v236;
        sub_10000D5B0(v167, v169, 1, v236);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (sub_10000D5D8(v167, 1, v170) == 1)
        {
          sub_10010C170(v167, &qword_100180C60);
          v244 = &unk_100173A98;
          sub_10000BF1C((uint64_t *)&unk_10017EAF0);
          String.init<A>(describing:)();
          uint64_t result = LNLogSubsystem;
          if (!LNLogSubsystem) {
            goto LABEL_148;
          }
          String.init(cString:)();
          Logger.init(subsystem:category:)();
          unint64_t v5 = (unint64_t)(id)v33;
          id v171 = v155;
          id v172 = (id)v5;
          id v173 = v171;
          uint64_t v21 = Logger.logObject.getter();
          os_log_type_t v174 = static os_log_type_t.error.getter();
          if (sub_1000A3E04(v174))
          {
            uint64_t v175 = swift_slowAlloc();
            v229 = (void *)swift_slowAlloc();
            v244 = v229;
            *(_DWORD *)uint64_t v175 = v223;
            LODWORD(v227) = v5;
            id v176 = [v172 name];
            uint64_t v177 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v179 = v178;

            uint64_t v180 = sub_100013090(v177, v179, (uint64_t *)&v244);
            sub_10010CB50(v180);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v175 + 12) = 2080;
            id v181 = [v173 identifier];
            uint64_t v182 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v184 = v183;

            uint64_t v185 = v182;
            os_log_type_t v26 = v241;
            uint64_t v186 = sub_100013090(v185, v184, (uint64_t *)&v244);
            sub_10010CBA4(v186);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            uint64_t v2 = (uint64_t *)v240;
            swift_bridgeObjectRelease();
            unint64_t v5 = (unint64_t)v229;
            swift_arrayDestroy();
            sub_10000EB10();
            sub_10000EB10();
          }
          else
          {
          }
        }
        else
        {
          ((void (*)(uint64_t, uint64_t, uint64_t))*v237)(v230, v167, v170);
          unint64_t v187 = v235;
          swift_bridgeObjectRetain_n();
          id v188 = (id)v33;
          uint64_t v189 = v155;
          id v190 = v188;
          uint64_t v11 = v189;
          uint64_t v191 = Logger.logObject.getter();
          os_log_type_t v192 = static os_log_type_t.info.getter();
          int v193 = v192;
          if (os_log_type_enabled(v191, v192))
          {
            uint64_t v189 = (_WORD *)swift_slowAlloc();
            v229 = (void *)swift_slowAlloc();
            v244 = v229;
            *(_DWORD *)uint64_t v189 = v224;
            LODWORD(v227) = v193;
            uint64_t v194 = sub_10010B2AC();
            uint64_t v196 = sub_100013090(v194, v195, (uint64_t *)&v244);
            sub_10010CB50(v196);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            v189[6] = 2080;
            swift_bridgeObjectRetain();
            uint64_t v197 = sub_100013090(v225, v187, (uint64_t *)&v244);
            sub_10010CBA4(v197);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            v189[11] = 2080;
            id v198 = [v11 identifier];
            uint64_t v199 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v201 = v200;

            os_log_type_t v26 = v241;
            uint64_t v243 = sub_100013090(v199, v201, (uint64_t *)&v244);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v191, (os_log_type_t)v227, "Applying %s to %s:%s", (uint8_t *)v189, 0x20u);
            swift_arrayDestroy();
            sub_10000EB10();
            sub_10000EB10();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }

          unint64_t v5 = AssistantPrebuiltEntity.metadata.getter();
          sub_10010B2AC();
          String._bridgeToObjectiveC()();
          sub_10010CB38();
          uint64_t v21 = (uint64_t)[v11 copyWithDescriptiveMetadataFromEntity:v5 usingLibraryKey:v189];

          uint64_t v2 = (uint64_t *)v240;
          unint64_t v33 = *v240;
          int v202 = swift_isUniquelyReferenced_nonNull_bridgeObject();
          *uint64_t v2 = v33;
          if (!v202 || (v33 & 0x8000000000000000) != 0 || (v33 & 0x4000000000000000) != 0)
          {
            unint64_t v33 = sub_1000E70D4(v33);
            *uint64_t v2 = v33;
          }
          if (v23 >= *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_135;
          }
          v203 = *(void **)((v33 & 0xFFFFFFFFFFFFFF8) + 8 * v23 + 0x20);
          *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 8 * v23 + 0x20) = v21;

          uint64_t v21 = (uint64_t)v2;
          specialized Array._endMutation()();
        }
        sub_100013EC4();
        v204();
        unint64_t v33 = (unint64_t)v238;
        uint64_t v17 = (uint64_t)&selRef_assistantDefinedSchemas;
        uint64_t v11 = (uint64_t *)LNAssistantDefinedSchemaConformance_ptr;
      }
      else
      {
      }
LABEL_120:
      if (v33 == ++v23) {
        goto LABEL_123;
      }
    }
  }
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
  return result;
}

void sub_10010AF38()
{
  uint64_t v2 = (uint64_t *)(v0 + 16);
  unint64_t v1 = *(void *)(v0 + 16);
  if (v1 >> 62) {
    goto LABEL_30;
  }
  uint64_t v3 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v3)
  {
    unint64_t v4 = 0;
    os_log_type_t v26 = (void *)LNSystemProtocolIdentifierAssistantIntent;
    uint64_t v27 = (void *)LNSystemProtocolIdentifierAssistantInvocableIntent;
    uint64_t v28 = v3;
    while (1)
    {
      uint64_t v5 = *v2;
      unint64_t v6 = *v2 & 0xC000000000000001;
      sub_100058BCC(v4, v6 == 0, *v2);
      id v7 = v6 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v5 + 8 * v4 + 32);
      id v8 = v7;
      unint64_t v9 = swift_bridgeObjectRetain();
      unint64_t v10 = (unint64_t)sub_1001089DC(v9, v8);
      id v11 = [v8 systemProtocolMetadata];
      type metadata accessor for LNSystemProtocolIdentifier(0);
      sub_10000BF1C((uint64_t *)&unk_10017C7F0);
      sub_10010C93C(&qword_10017D0B0, type metadata accessor for LNSystemProtocolIdentifier);
      uint64_t v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      if (v10 >> 62)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v13 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      if (v13)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        if (!*(void *)(v12 + 16))
        {
          swift_bridgeObjectRelease();
LABEL_22:

          swift_bridgeObjectRelease();
          goto LABEL_23;
        }
        id v23 = v26;
        sub_1000210C4();
        char v25 = v24;
        swift_bridgeObjectRelease();

        if ((v25 & 1) == 0) {
          goto LABEL_22;
        }
      }
      id v14 = objc_allocWithZone((Class)LNEmptySystemProtocolMetadata);
      id v15 = v27;
      id v16 = [v14 init];
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v29 = v12;
      sub_10010C794((uint64_t)v16, v15, isUniquelyReferenced_nonNull_native, &v29);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v19 = [v8 actionMetadataWithSystemProtocolMetadata:isa];

      uint64_t v20 = *v2;
      int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *uint64_t v2 = v20;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v20 < 0 || (v20 & 0x4000000000000000) != 0)
      {
        uint64_t v20 = sub_1000E70D4(v20);
        *uint64_t v2 = v20;
      }
      if ((v4 & 0x8000000000000000) != 0) {
        break;
      }
      if (v4 >= *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_29;
      }
      unint64_t v22 = *(void **)((v20 & 0xFFFFFFFFFFFFFF8) + 8 * v4 + 0x20);
      *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 8 * v4 + 0x20) = v19;

      specialized Array._endMutation()();
      swift_bridgeObjectRelease();

LABEL_23:
      if (v28 == ++v4) {
        return;
      }
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v3 < 0)
    {
      __break(1u);
      return;
    }
  }
}

uint64_t sub_10010B2AC()
{
  unint64_t v1 = v0;
  id v2 = [v0 version];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  if (v3 == 0x302E302E31 && v5 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v7)
  {
LABEL_8:
    id v17 = [v1 name];
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    return v16;
  }
  id v8 = [v1 name];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v19 = v9;
  v10._uint64_t countAndFlagsBits = 45;
  v10._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  id v11 = [v1 version];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v14 = v13;

  v15._uint64_t countAndFlagsBits = v12;
  v15._unint64_t object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  return v19;
}

unint64_t sub_10010B420(char a1)
{
  if (!a1) {
    return 0xD000000000000033;
  }
  if (a1 == 1) {
    return 0xD00000000000003CLL;
  }
  return 0xD000000000000028;
}

unint64_t sub_10010B47C()
{
  return sub_10010B420(*v0);
}

uint64_t sub_10010B484()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000D844(v0, qword_100182450);
  sub_10000BEE4(v0, (uint64_t)qword_100182450);
  sub_10000BF1C((uint64_t *)&unk_10017EAF0);
  String.init<A>(describing:)();
  uint64_t result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    String.init(cString:)();
    return Logger.init(subsystem:category:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10010B530()
{
  id v2 = [v0 queries];
  uint64_t v102 = sub_10000D9D4(0, (unint64_t *)&qword_10017E9C0);
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1000427DC(v3, &v117);
  uint64_t v109 = v117;
  uint64_t v111 = v120;
  unint64_t v4 = v121;
  uint64_t v106 = v118;
  int64_t v107 = (unint64_t)(v119 + 64) >> 6;
  uint64_t v104 = v3;
  swift_bridgeObjectRetain();
  uint64_t v5 = &_swiftEmptyDictionarySingleton;
  if (!v4) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v6 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  unint64_t v7 = v6 | (v111 << 6);
  while (1)
  {
    id v15 = *(id *)(*(void *)(v109 + 56) + 8 * v7);
    id v16 = [v15 entityType];
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;

    uint64_t v20 = v5[2];
    swift_bridgeObjectRetain();
    if (v20)
    {
      uint64_t v27 = sub_100021098(v17, v19, v21, v22, v23, v24, v25, v26, v102, v104, (uint64_t)v105, v106, v107, v109, v111, v113, v114, v115, v116,
              v117,
              v118,
              v119,
              v120,
              v121,
              v122,
              v123);
      uint64_t v28 = _swiftEmptyArrayStorage;
      if (v29)
      {
        uint64_t v28 = *(void **)(v5[7] + 8 * v27);
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      uint64_t v28 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease();
    unint64_t v116 = (unint64_t)v28;
    id v30 = v15;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v116 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v116 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v31 = v116;

    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v38 = sub_100021098(v17, v19, v32, v33, v34, v35, v36, v37, v102, v104, (uint64_t)v105, v106, v107, v109, v111, v113, v114, v115, (uint64_t)v5,
            v117,
            v118,
            v119,
            v120,
            v121,
            v122,
            v123);
    uint64_t v40 = v5[2];
    BOOL v41 = (v39 & 1) == 0;
    Swift::Int v42 = v40 + v41;
    if (__OFADD__(v40, v41))
    {
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    unint64_t v43 = v38;
    char v44 = v39;
    sub_10000BF1C(&qword_100180CC8);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v42))
    {
      uint64_t v51 = sub_100021098(v17, v19, v45, v46, v47, v48, v49, v50, v102, v104, (uint64_t)v105, v106, v107, v109, v111, v113, v114, v115, v116,
              v117,
              v118,
              v119,
              v120,
              v121,
              v122,
              v123);
      if ((v44 & 1) != (v52 & 1)) {
        goto LABEL_81;
      }
      unint64_t v43 = v51;
    }
    uint64_t v5 = (void *)v116;
    if (v44)
    {
      uint64_t v53 = *(void *)(v116 + 56);
      swift_bridgeObjectRelease();
      *(void *)(v53 + 8 * v43) = v31;
    }
    else
    {
      *(void *)(v116 + 8 * (v43 >> 6) + 64) |= 1 << v43;
      char v54 = (uint64_t *)(v5[6] + 16 * v43);
      *char v54 = v17;
      v54[1] = v19;
      *(void *)(v5[7] + 8 * v43) = v31;
      uint64_t v55 = v5[2];
      BOOL v12 = __OFADD__(v55, 1);
      uint64_t v56 = v55 + 1;
      if (v12) {
        goto LABEL_53;
      }
      _OWORD v5[2] = v56;
      swift_bridgeObjectRetain();
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v8 = v111 + 1;
    if (__OFADD__(v111, 1)) {
      goto LABEL_54;
    }
    if (v8 >= v107) {
      break;
    }
    unint64_t v9 = *(void *)(v106 + 8 * v8);
    uint64_t v10 = v111 + 1;
    if (!v9)
    {
      sub_10006051C();
      if (v11 == v12) {
        break;
      }
      sub_10010CB98();
      if (!v9)
      {
        sub_10006051C();
        if (v11 == v12) {
          break;
        }
        sub_10010CB98();
        if (!v9)
        {
          sub_10006051C();
          if (v11 == v12) {
            break;
          }
          sub_10010CB98();
          if (!v9)
          {
            sub_10006051C();
            if (v11 == v12) {
              break;
            }
            sub_10010CB98();
            if (!v9)
            {
              uint64_t v10 = v13 + 5;
              if (v13 + 5 >= v107) {
                break;
              }
              unint64_t v9 = *(void *)(v106 + 8 * v10);
              if (!v9)
              {
                int64_t v14 = v111 + 7;
                do
                {
                  if (v14 >= v107) {
                    goto LABEL_41;
                  }
                  unint64_t v9 = *(void *)(v106 + 8 * v14++);
                }
                while (!v9);
                uint64_t v10 = v14 - 1;
              }
            }
          }
        }
      }
    }
    unint64_t v4 = (v9 - 1) & v9;
    unint64_t v7 = __clz(__rbit64(v9)) + (v10 << 6);
    uint64_t v111 = v10;
  }
LABEL_41:
  swift_release();
  swift_bridgeObjectRelease();
  id v57 = [v105 entities];
  sub_10000D9D4(0, (unint64_t *)&qword_10017E9A0);
  uint64_t v58 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t isUniquelyReferenced_nonNull_native = 0;
  unint64_t v59 = sub_100108D78(v58, (uint64_t)v5);
  unint64_t v4 = v59;
  if (v59 >> 62) {
    goto LABEL_56;
  }
  uint64_t v60 = *(void *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v60)
  {
    while (1)
    {
      unint64_t v116 = (unint64_t)_swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)();
      if (v60 < 0) {
        break;
      }
      uint64_t v61 = 0;
      while (v60 != v61)
      {
        if ((v4 & 0xC000000000000001) != 0) {
          id v62 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v62 = *(id *)(v4 + 8 * v61 + 32);
        }
        os_log_type_t v63 = v62;
        uint64_t v113 = (uint64_t)v62;
        sub_10010BCD0((void **)&v113, &v114);

        if (isUniquelyReferenced_nonNull_native) {
          goto LABEL_82;
        }
        ++v61;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        if (v60 == v61)
        {
          unint64_t v64 = v116;
          swift_bridgeObjectRelease();
          goto LABEL_58;
        }
      }
LABEL_55:
      __break(1u);
LABEL_56:
      swift_bridgeObjectRetain();
      uint64_t v60 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v60) {
        goto LABEL_57;
      }
    }
    __break(1u);
LABEL_81:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
LABEL_82:
    uint64_t result = swift_release();
    __break(1u);
  }
  else
  {
LABEL_57:
    swift_bridgeObjectRelease();
    unint64_t v64 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_58:
    id v65 = [v105 queries:v102];
    id v66 = (void *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (v64 >> 62) {
      goto LABEL_78;
    }
    uint64_t v67 = *(void *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (v67)
    {
      uint64_t v108 = v64;
      unint64_t v110 = v64 & 0xC000000000000001;
      uint64_t v68 = 4;
      while (1)
      {
        id v69 = v110 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v64 + 8 * v68);
        uint64_t v70 = v69;
        if (__OFADD__(v68 - 4, 1)) {
          break;
        }
        id v71 = [v69 identifier];
        uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v74 = v73;

        id v75 = v70;
        char v76 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v83 = sub_100021098(v72, v74, v77, v78, v79, v80, v81, v82, v103, v104, (uint64_t)v105, v106, v108, v110, v68 - 3, v113, v114, v115, (uint64_t)v66,
                v117,
                v118,
                v119,
                v120,
                v121,
                v122,
                v123);
        uint64_t v85 = v66[2];
        BOOL v86 = (v84 & 1) == 0;
        unint64_t v64 = v85 + v86;
        if (__OFADD__(v85, v86)) {
          goto LABEL_76;
        }
        unint64_t v87 = v83;
        char v88 = v84;
        sub_10000BF1C(&qword_100180CD0);
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v76, v64))
        {
          uint64_t v95 = sub_100021098(v72, v74, v89, v90, v91, v92, v93, v94, v103, v104, (uint64_t)v105, v106, v108, v110, v112, v113, v114, v115, v116,
                  v117,
                  v118,
                  v119,
                  v120,
                  v121,
                  v122,
                  v123);
          if ((v88 & 1) != (v96 & 1)) {
            goto LABEL_81;
          }
          unint64_t v87 = v95;
        }
        id v66 = (void *)v116;
        if (v88)
        {
          uint64_t v97 = *(void *)(v116 + 56);

          *(void *)(v97 + 8 * v87) = v75;
        }
        else
        {
          *(void *)(v116 + 8 * (v87 >> 6) + 64) |= 1 << v87;
          uint64_t v98 = (uint64_t *)(v66[6] + 16 * v87);
          uint64_t *v98 = v72;
          v98[1] = v74;
          *(void *)(v66[7] + 8 * v87) = v75;
          uint64_t v99 = v66[2];
          BOOL v12 = __OFADD__(v99, 1);
          uint64_t v100 = v99 + 1;
          if (v12) {
            goto LABEL_77;
          }
          v66[2] = v100;
          swift_bridgeObjectRetain();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        ++v68;
        unint64_t v64 = v108;
        if (v112 == v67) {
          goto LABEL_74;
        }
      }
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      swift_bridgeObjectRetain();
      uint64_t v67 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_74:
    swift_bridgeObjectRelease();
    return (uint64_t)v66;
  }
  return result;
}

id sub_10010BCD0@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  id v2 = *a1;
  _StringGuts.grow(_:)(23);
  id v3 = [v2 identifier];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();

  v7._unint64_t object = (void *)0x80000001001467D0;
  v7._uint64_t countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v7);
  uint64_t v8 = v4;
  uint64_t v9 = v6;
  id v10 = [v2 identifier];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  uint64_t v14 = Dictionary.init(dictionaryLiteral:)();
  id v15 = [v2 effectiveBundleIdentifiers];
  uint64_t v16 = sub_10010C1C8(v2);
  id v17 = [v2 visibilityMetadata];
  id v18 = objc_allocWithZone((Class)LNQueryMetadata);
  id result = sub_10010BE84(v8, v9, v11, v13, 0, 0xE000000000000000, v14, v15, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, v16, 1, 0, v17, 0, 0, 0);
  *a2 = result;
  return result;
}

id sub_10010BE84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, char a15, uint64_t a16, uint64_t a17)
{
  NSString v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v24.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_10000D9D4(0, &qword_100180CD8);
  v23.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_10000D9D4(0, (unint64_t *)&unk_100180CE0);
  v17.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (a11)
  {
    type metadata accessor for LNPlatformName(0);
    sub_10000D9D4(0, &qword_10017F0B0);
    sub_10010C93C((unint64_t *)&unk_100180CF0, type metadata accessor for LNPlatformName);
    v18.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v18.super.Class isa = 0;
  }
  if (a17)
  {
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v19 = 0;
  }
  LOBYTE(v22) = a15 & 1;
  id v20 = [v28 initWithIdentifier:v27 entityType:v26 mangledTypeName:v25 mangledTypeNameByBundleIdentifier:v24.super.isa effectiveBundleIdentifiers:a8 parameters:v23.super.isa sortingOptions:v17.super.isa availabilityAnnotations:v18.super.isa capabilities:a12 descriptionMetadata:a13 visibilityMetadata:a14 defaultQueryForEntity:v22 fullyQualifiedIdentifier:v19];

  return v20;
}

uint64_t sub_10010C10C(void *a1)
{
  id v1 = [a1 autoShortcutProviderMangledName];
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_10010C170(uint64_t a1, uint64_t *a2)
{
  sub_10000BF1C(a2);
  sub_100013EC4();
  v3();
  return a1;
}

uint64_t sub_10010C1C8(void *a1)
{
  id v1 = [a1 availabilityAnnotations];
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  type metadata accessor for LNPlatformName(0);
  sub_10000D9D4(0, &qword_10017F0B0);
  sub_10010C93C((unint64_t *)&unk_100180CF0, type metadata accessor for LNPlatformName);
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_10010C28C(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for LSLinkBundleRecord(0);
  void v17[3] = v4;
  v17[4] = (uint64_t)&off_100172A40;
  uint64_t v5 = sub_1000274F4(v17);
  sub_100082E84(a1, (uint64_t)v5);
  LODWORD(a1) = [self isAppShortcutsOmittingAppNameEnabled];
  sub_10000C0D4((uint64_t)v17, (uint64_t)v16);
  if (!a1)
  {
    sub_10000E788((uint64_t)v16);
    goto LABEL_5;
  }
  char v6 = *((unsigned char *)sub_10000BEA0(v16, v16[3]) + *(int *)(v4 + 32));
  sub_10000E788((uint64_t)v16);
  if ((v6 & 1) == 0)
  {
LABEL_5:
    id v9 = [a2 autoShortcuts];
    sub_10000D9D4(0, &qword_100180D00);
    unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v11 = sub_1000F6ED4(10, v10);
    uint64_t v8 = (uint64_t)sub_100050820(v11, v12, v13, v14);
    goto LABEL_6;
  }
  id v7 = [a2 autoShortcuts];
  sub_10000D9D4(0, &qword_100180D00);
  uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

LABEL_6:
  sub_10000E788((uint64_t)v17);
  return v8;
}

uint64_t sub_10010C3F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v45 = type metadata accessor for LSLinkBundleRecord(0);
  uint64_t v46 = &off_100172A40;
  id v7 = sub_1000274F4(v44);
  sub_100082E84(a1, (uint64_t)v7);
  uint64_t v38 = v7[1];
  uint64_t v39 = *v7;
  swift_bridgeObjectRetain();
  id v8 = [a3 actions];
  sub_10000D9D4(0, &qword_10017E9F0);
  uint64_t v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v37 = sub_100108BD8(v9, (uint64_t)v43, sub_100082EE8);
  swift_bridgeObjectRelease();
  uint64_t v10 = sub_10010C10C(a3);
  uint64_t v35 = v11;
  uint64_t v36 = v10;
  id v34 = [a3 shortcutTileColor];
  uint64_t v12 = sub_10000BEA0(v44, v45);
  uint64_t v33 = sub_10010C28C((uint64_t)v12, a3);
  id v13 = [a3 entities];
  sub_10000D9D4(0, (unint64_t *)&qword_10017E9A0);
  uint64_t v14 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v32 = sub_100108BD8(v14, (uint64_t)v42, sub_100082EE8);
  swift_bridgeObjectRelease();
  id v15 = [a3 enums];
  sub_10000D9D4(0, (unint64_t *)&qword_10017E9B0);
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  sub_100049D6C();
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = sub_10010B530();
  uint64_t v19 = sub_100108BD8(v18, (uint64_t)v41, sub_100082EE8);
  swift_bridgeObjectRelease();
  id v20 = [a3 version];
  uint64_t v21 = sub_1000344C0(a3, (SEL *)&selRef_negativePhrases, (unint64_t *)&unk_100180CB8);
  if (v21) {
    uint64_t v22 = (void *)v21;
  }
  else {
    uint64_t v22 = _swiftEmptyArrayStorage;
  }
  uint64_t v23 = sub_1000344C0(a3, (SEL *)&selRef_examplePhrases, (unint64_t *)&qword_100180CB0);
  if (v23) {
    NSDictionary v24 = (void *)v23;
  }
  else {
    NSDictionary v24 = _swiftEmptyArrayStorage;
  }
  uint64_t v25 = sub_1000344C0(a3, (SEL *)&selRef_assistantIntents, (unint64_t *)&unk_10017EA10);
  if (v25) {
    NSString v26 = (void *)v25;
  }
  else {
    NSString v26 = _swiftEmptyArrayStorage;
  }
  uint64_t v27 = sub_1000344C0(a3, (SEL *)&selRef_assistantIntentNegativePhrases, (unint64_t *)&unk_100180CA0);
  if (v27) {
    uint64_t v28 = (void *)v27;
  }
  else {
    uint64_t v28 = _swiftEmptyArrayStorage;
  }
  uint64_t v29 = sub_1000344C0(a3, (SEL *)&selRef_assistantEntities, (unint64_t *)&unk_10017EA00);
  if (v29) {
    id v30 = (void *)v29;
  }
  else {
    id v30 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  uint64_t result = sub_10000E788((uint64_t)v44);
  *a4 = v39;
  a4[1] = v38;
  a4[2] = v37;
  a4[3] = v36;
  a4[4] = v35;
  a4[5] = (uint64_t)v34;
  a4[6] = v33;
  a4[7] = a2;
  a4[8] = v32;
  a4[9] = v17;
  a4[10] = v19;
  a4[11] = (uint64_t)v20;
  a4[12] = (uint64_t)v22;
  a4[13] = (uint64_t)v24;
  a4[14] = (uint64_t)v26;
  a4[15] = (uint64_t)v28;
  a4[16] = (uint64_t)v30;
  return result;
}

id sub_10010C794(uint64_t a1, void *a2, char a3, void *a4)
{
  id v7 = (void *)*a4;
  sub_1000210C4();
  uint64_t v10 = v7[2];
  BOOL v11 = (v9 & 1) == 0;
  Swift::Int v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v13 = v8;
  char v14 = v9;
  sub_10000BF1C(&qword_100180C88);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v12)) {
    goto LABEL_5;
  }
  sub_1000210C4();
  if ((v14 & 1) != (v16 & 1))
  {
LABEL_11:
    type metadata accessor for LNSystemProtocolIdentifier(0);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v13 = v15;
LABEL_5:
  uint64_t v17 = (void *)*a4;
  if (v14)
  {
    uint64_t v18 = v17[7];
    id result = (id)swift_unknownObjectRelease();
    *(void *)(v18 + 8 * v13) = a1;
  }
  else
  {
    sub_10010C8AC(v13, (uint64_t)a2, a1, v17);
    return a2;
  }
  return result;
}

unint64_t sub_10010C8AC(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(void *)(a4[6] + 8 * result) = a2;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

unint64_t sub_10010C8F0()
{
  unint64_t result = qword_100180C98;
  if (!qword_100180C98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180C98);
  }
  return result;
}

uint64_t sub_10010C93C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *sub_10010C984(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10010CA50);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for ApplicationMetadataExtractor.Errors()
{
}

void type metadata accessor for ApplicationMetadataExtractor()
{
}

unint64_t sub_10010CA98()
{
  unint64_t result = qword_100180D08;
  if (!qword_100180D08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180D08);
  }
  return result;
}

uint64_t sub_10010CAE4(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_10010CB04()
{
  return v0;
}

uint64_t sub_10010CB38()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_10010CB50(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return v1 - 104;
}

__n128 sub_10010CB68@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(a1 - 256);
  *uint64_t v2 = result.n128_u32[0];
  *(_DWORD *)(v3 - 396) = v1;
  return result;
}

uint64_t sub_10010CBA4(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return v1 - 104;
}

uint64_t sub_10010CBB8(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_10010CBD8(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return v1 - 104;
}

uint64_t sub_10010CBEC()
{
  return sub_100013090(v0, v1, (uint64_t *)(v2 - 96));
}

uint64_t sub_10010CC0C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 - 256) = result;
  *(void *)(v2 - 96) = result;
  return result;
}

void sub_10010CC18(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  BOOL v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a5 + 8))(a3, a5);
  [v11 lock];

  a1();
  sub_10010CCD4(v6, a3, a4, a5);
}

void sub_10010CCD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v4 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a2, a4);
  [v4 unlock];
}

const char *Double.declaredDatatype.unsafeMutableAddressor()
{
  return "REAL";
}

void static Double.declaredDatatype.getter()
{
}

uint64_t sub_10010CD54()
{
  return 1279346002;
}

double sub_10010CD64@<D0>(double *a1@<X0>, void *a2@<X8>)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

double sub_10010CD70@<D0>(void *a1@<X8>)
{
  double result = *v1;
  *a1 = *(void *)v1;
  return result;
}

const char *Int64.declaredDatatype.unsafeMutableAddressor()
{
  return "INTEGER";
}

uint64_t static Int64.declaredDatatype.getter()
{
  return 0x52454745544E49;
}

const char *String.declaredDatatype.unsafeMutableAddressor()
{
  return "TEXT";
}

void static String.declaredDatatype.getter()
{
}

uint64_t static String.fromDatatypeValue(_:)()
{
  return sub_10010D510();
}

uint64_t _s10Foundation4UUIDV17AppIntents_SQLiteE16declaredDatatypeSSvgZ_0()
{
  return 1415071060;
}

uint64_t sub_10010CDF8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String.fromDatatypeValue(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10010CE28@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String.fromDatatypeValue(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

const char *Blob.declaredDatatype.unsafeMutableAddressor()
{
  return "BLOB";
}

void static Blob.declaredDatatype.getter()
{
}

uint64_t static Data.declaredDatatype.getter()
{
  return 1112493122;
}

uint64_t sub_10010CE80@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = Blob.bytes.getter(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10010CEAC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Blob.bytes.getter(*v1);
  *a1 = result;
  return result;
}

char *Bool.declaredDatatype.unsafeMutableAddressor()
{
  return static Bool.declaredDatatype;
}

uint64_t static Bool.declaredDatatype.getter()
{
  return sub_10010D500();
}

uint64_t static Bool.declaredDatatype.setter(uint64_t a1, uint64_t a2)
{
  return sub_10010D508(a1, a2, static Bool.declaredDatatype);
}

uint64_t (*static Bool.declaredDatatype.modify())()
{
  return j__swift_endAccess;
}

BOOL static Bool.fromDatatypeValue(_:)(uint64_t a1)
{
  return a1 != 0;
}

uint64_t Bool.datatypeValue.getter(char a1)
{
  return a1 & 1;
}

uint64_t sub_10010CF5C()
{
  return sub_10010D0F4();
}

BOOL sub_10010CF6C@<W0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = static Bool.fromDatatypeValue(_:)(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10010CF9C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Bool.datatypeValue.getter(*v1);
  *a1 = result;
  return result;
}

char *Int.declaredDatatype.unsafeMutableAddressor()
{
  return static Int.declaredDatatype;
}

uint64_t static Int.declaredDatatype.getter()
{
  return sub_10010D500();
}

uint64_t sub_10010CFE0()
{
  return sub_10010D510();
}

uint64_t static Int.declaredDatatype.setter(uint64_t a1, uint64_t a2)
{
  return sub_10010D508(a1, a2, static Int.declaredDatatype);
}

uint64_t sub_10010D03C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  *a3 = a1;
  *a4 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*static Int.declaredDatatype.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_10010D0E4()
{
  return sub_10010D0F4();
}

uint64_t sub_10010D0F4()
{
  return sub_10010D510();
}

void *sub_10010D148@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_10010D154(void *a1@<X8>)
{
  *a1 = *v1;
}

void *variable initialization expression of TableBuilder.definitions()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t variable initialization expression of QueryClauses.select()
{
  sub_10000BF1C(&qword_10017D698);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10013EF20;
  uint64_t v1 = sub_10000BF1C(&qword_100180D58);
  *(void *)(v0 + 64) = &protocol witness table for Expression<A>;
  *(void *)(v0 + 32) = 42;
  *(void *)(v0 + 40) = 0xE100000000000000;
  *(void *)(v0 + 48) = _swiftEmptyArrayStorage;
  *(void *)(v0 + 56) = v1;
  return 0;
}

uint64_t variable initialization expression of QueryClauses.filters()
{
  return 0;
}

uint64_t variable initialization expression of QueryClauses.group()
{
  return 0;
}

uint64_t variable initialization expression of QueryClauses.limit()
{
  return 0;
}

double variable initialization expression of Connection.busyTimeout()
{
  return 0.0;
}

void *variable initialization expression of Connection.functions()
{
  return &_swiftEmptyDictionarySingleton;
}

uint64_t variable initialization expression of Connection.queue()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_10001B450();
  uint64_t v4 = v3 - v2;
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  sub_10001B450();
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v6);
  sub_10001B450();
  sub_10010D428();
  sub_10004AFC0();
  sub_10000BF1C(&qword_10017C760);
  sub_100027C2C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  static DispatchQoS.unspecified.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v1 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

unint64_t sub_10010D428()
{
  unint64_t result = qword_10017C750;
  if (!qword_10017C750)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10017C750);
  }
  return result;
}

_UNKNOWN **sub_10010D46C()
{
  return &protocol witness table for Double;
}

_UNKNOWN **sub_10010D478()
{
  return &protocol witness table for Int64;
}

_UNKNOWN **sub_10010D484()
{
  return &protocol witness table for String;
}

_UNKNOWN **sub_10010D490()
{
  return &protocol witness table for Blob;
}

void type metadata accessor for ComparisonResult()
{
  if (!qword_100180EE0)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_100180EE0);
    }
  }
}

uint64_t _s17AppIntents_SQLite9StatementC6handle33_E09230218008A0440B080F1AB3693645LLs13OpaquePointerVSgvpfi_0()
{
  return 0;
}

uint64_t sub_10010D500()
{
  return sub_10010CFE0();
}

uint64_t sub_10010D508(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_10010D03C(a1, a2, a3, a3 + 1);
}

uint64_t sub_10010D510()
{
  return v0;
}

uint64_t sub_10010D51C()
{
  return swift_beginAccess();
}

uint64_t _s17AppIntents_SQLite9StatementC21___lazy_storage___row33_E09230218008A0440B080F1AB3693645LLAA6CursorVSgvpfi_0()
{
  return 0;
}

Swift::String __swiftcall SchemaType.drop(ifExists:)(Swift::Bool ifExists)
{
  sub_10011E194();
  uint64_t v2 = static Table.identifier.getter();
  sub_10010DAE8(v2, v3, v4, ifExists);
  uint64_t v5 = sub_100115C60((uint64_t)v8);
  result._unint64_t object = v6;
  result._uint64_t countAndFlagsBits = v5;
  return result;
}

void sub_10010D5C4()
{
  sub_10000E990();
  uint64_t v3 = v2;
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[7];
  if (!v4)
  {
    swift_bridgeObjectRetain();
LABEL_6:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v23 = sub_100116C18();
    uint64_t v25 = v24;
    swift_bridgeObjectRelease();
    if (v5)
    {
      sub_10000BF1C(&qword_10017D698);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10013F1D0;
      uint64_t v27 = sub_10000BF1C(&qword_100180D58);
      *(void *)(inited + 56) = v27;
      *(void *)(inited + 64) = &protocol witness table for Expression<A>;
      swift_bridgeObjectRetain();
      uint64_t v28 = sub_100116BF8();
      uint64_t v30 = v29;
      swift_bridgeObjectRelease();
      *(void *)(inited + 32) = v28;
      *(void *)(inited + 40) = v30;
      *(void *)(inited + 48) = _swiftEmptyArrayStorage;
      *(void *)(inited + 96) = v27;
      *(void *)(inited + 104) = &protocol witness table for Expression<A>;
      *(void *)(inited + 72) = v23;
      *(void *)(inited + 80) = v25;
      *(void *)(inited + 88) = _swiftEmptyArrayStorage;
      sub_1001165B0(v3);
      swift_setDeallocating();
      sub_10011491C(&qword_10017E910);
      swift_bridgeObjectRelease();
    }
    else
    {
      v3[3] = sub_10000BF1C(&qword_100180D58);
      v3[4] = (uint64_t)&protocol witness table for Expression<A>;
      swift_bridgeObjectRelease();
      *uint64_t v3 = v23;
      v3[1] = v25;
      v3[2] = (uint64_t)_swiftEmptyArrayStorage;
    }
    goto LABEL_11;
  }
  uint64_t v6 = v0[4];
  if ((v1 & 1) == 0) {
    goto LABEL_6;
  }
  sub_10000BF1C(&qword_10017D698);
  uint64_t v7 = swift_initStackObject();
  *(_OWORD *)(v7 + 16) = xmmword_10013F1E0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = sub_100116C18();
  uint64_t v37 = v9;
  if (v5)
  {
    uint64_t v10 = swift_initStackObject();
    *(_OWORD *)(v10 + 16) = xmmword_10013F1D0;
    uint64_t v36 = v6;
    uint64_t v11 = sub_10000BF1C(&qword_100180D58);
    *(void *)(v10 + 56) = v11;
    *(void *)(v10 + 64) = &protocol witness table for Expression<A>;
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_100116BF8();
    uint64_t v14 = v13;
    uint64_t v15 = swift_bridgeObjectRelease();
    *(void *)(v10 + 32) = v12;
    *(void *)(v10 + 40) = v14;
    *(void *)(v10 + 48) = _swiftEmptyArrayStorage;
    *(void *)(v10 + 96) = v11;
    *(void *)(v10 + 104) = &protocol witness table for Expression<A>;
    *(void *)(v10 + 72) = v8;
    *(void *)(v10 + 80) = v37;
    *(void *)(v10 + 88) = _swiftEmptyArrayStorage;
    sub_100116B6C(v15, v16, v17, v18, v19, v20, v21, v22, v35, (uint64_t *)(v7 + 32));
    swift_setDeallocating();
    sub_10011491C(&qword_10017E910);
    uint64_t v6 = v36;
  }
  else
  {
    *(void *)(v7 + 56) = sub_10000BF1C(&qword_100180D58);
    *(void *)(v7 + 64) = &protocol witness table for Expression<A>;
    *(void *)(v7 + 32) = v8;
    *(void *)(v7 + 40) = v37;
    *(void *)(v7 + 48) = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  uint64_t v31 = sub_10000BF1C(&qword_100180D58);
  *(void *)(v7 + 96) = v31;
  *(void *)(v7 + 104) = &protocol witness table for Expression<A>;
  *(void *)(v7 + 72) = 21313;
  *(void *)(v7 + 80) = 0xE200000000000000;
  *(void *)(v7 + 88) = _swiftEmptyArrayStorage;
  *(void *)(v7 + 136) = v31;
  *(void *)(v7 + 144) = &protocol witness table for Expression<A>;
  uint64_t v32 = sub_100117940(34, (void *)0xE100000000000000, v6, v4);
  uint64_t v34 = v33;
  swift_bridgeObjectRelease();
  *(void *)(v7 + 112) = v32;
  *(void *)(v7 + 120) = v34;
  *(void *)(v7 + 128) = _swiftEmptyArrayStorage;
  sub_1001163E0(v7, v3);
  swift_setDeallocating();
  sub_10011491C(&qword_10017E910);
LABEL_11:
  sub_10000E930();
}

void sub_10010D8C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  sub_100115BA8();
  a51 = v52;
  a52 = v53;
  char v55 = v54;
  uint64_t v57 = v56;
  unint64_t v59 = v58;
  uint64_t v61 = v60;
  sub_10000BF1C(&qword_100180EE8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013F1E0;
  a17 = 0x20504F5244;
  a18 = 0xE500000000000000;
  v63._uint64_t countAndFlagsBits = v61;
  v63._unint64_t object = v59;
  String.append(_:)(v63);
  uint64_t v64 = a17;
  unint64_t v65 = a18;
  uint64_t v66 = sub_10000BF1C(&qword_100180D58);
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  *(void *)(inited + 32) = v64;
  *(void *)(inited + 40) = v65;
  *(void *)(inited + 48) = _swiftEmptyArrayStorage;
  *(void *)(inited + 56) = v66;
  if (v55)
  {
    long long v67 = xmmword_100141980;
    uint64_t v68 = _swiftEmptyArrayStorage;
    id v69 = &protocol witness table for Expression<A>;
  }
  else
  {
    *(double *)&long long v67 = sub_100116528();
  }
  *(void *)(inited + 96) = v66;
  *(void *)(inited + 104) = v69;
  *(_OWORD *)(inited + 72) = v67;
  *(void *)(inited + 88) = v68;
  sub_1001156D4(v57, inited + 112);
  uint64_t v70 = _swiftEmptyArrayStorage;
  for (uint64_t i = 32; i != 152; i += 40)
  {
    sub_100115B28(inited + i, (uint64_t)&a17, &qword_100180EF0);
    sub_1001150E4((uint64_t)&a17, (uint64_t)&a9);
    if (a11)
    {
      sub_10000D698(&a9, (uint64_t)&a13);
      sub_10000D698(&a13, (uint64_t)&a9);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        char v74 = sub_100094140();
        sub_100114C6C(v74, v75, v76, v70, &qword_10017D698, &qword_10017E910);
        uint64_t v70 = v77;
      }
      unint64_t v73 = v70[2];
      unint64_t v72 = v70[3];
      if (v73 >= v72 >> 1)
      {
        sub_100114C6C(v72 > 1, v73 + 1, 1, v70, &qword_10017D698, &qword_10017E910);
        uint64_t v70 = v78;
      }
      v70[2] = v73 + 1;
      sub_10000D698(&a9, (uint64_t)&v70[5 * v73 + 4]);
    }
    else
    {
      sub_100115734((uint64_t)&a9, &qword_100180EF0);
    }
  }
  swift_bridgeObjectRelease();
  sub_1001163E0((uint64_t)v70, &a17);
  swift_bridgeObjectRelease();
  sub_100115C9C(&a17);
  sub_100115C60((uint64_t)&a17);
  sub_100115B8C();
}

uint64_t sub_10010DAE8(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  sub_10000BF1C(&qword_100180EE8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013F1E0;
  v25[0] = 0x20504F5244;
  v25[1] = 0xE500000000000000;
  v9._uint64_t countAndFlagsBits = a1;
  v9._unint64_t object = a2;
  String.append(_:)(v9);
  uint64_t v10 = sub_10000BF1C(&qword_100180D58);
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  *(void *)(inited + 32) = 0x20504F5244;
  *(void *)(inited + 40) = 0xE500000000000000;
  *(void *)(inited + 48) = _swiftEmptyArrayStorage;
  *(void *)(inited + 56) = v10;
  if (a4)
  {
    long long v11 = xmmword_100141980;
    uint64_t v12 = _swiftEmptyArrayStorage;
    uint64_t v13 = &protocol witness table for Expression<A>;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v13 = 0;
    uint64_t v12 = 0;
    long long v11 = 0uLL;
  }
  *(void *)(inited + 96) = v10;
  *(void *)(inited + 104) = v13;
  *(_OWORD *)(inited + 72) = v11;
  *(void *)(inited + 88) = v12;
  sub_1001156D4(a3, inited + 112);
  uint64_t v14 = _swiftEmptyArrayStorage;
  for (uint64_t i = 32; i != 152; i += 40)
  {
    sub_100115B28(inited + i, (uint64_t)v25, &qword_100180EF0);
    sub_1001150E4((uint64_t)v25, (uint64_t)&v22);
    if (v23)
    {
      sub_10000D698(&v22, (uint64_t)v24);
      sub_10000D698(v24, (uint64_t)&v22);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100114C6C(0, v14[2] + 1, 1, v14, &qword_10017D698, &qword_10017E910);
        uint64_t v14 = v18;
      }
      unint64_t v17 = v14[2];
      unint64_t v16 = v14[3];
      if (v17 >= v16 >> 1)
      {
        sub_100114C6C(v16 > 1, v17 + 1, 1, v14, &qword_10017D698, &qword_10017E910);
        uint64_t v14 = v19;
      }
      void v14[2] = v17 + 1;
      sub_10000D698(&v22, (uint64_t)&v14[5 * v17 + 4]);
    }
    else
    {
      sub_100115734((uint64_t)&v22, &qword_100180EF0);
    }
  }
  swift_bridgeObjectRelease();
  sub_10011750C((uint64_t)v14, v25);
  swift_bridgeObjectRelease();
  sub_10000BEA0(v25, v25[3]);
  uint64_t countAndFlagsBits = Expressible.asSQL()()._countAndFlagsBits;
  sub_10000E788((uint64_t)v25);
  return countAndFlagsBits;
}

void Table.create(temporary:ifNotExists:withoutRowid:block:)()
{
  sub_10000E990();
  uint64_t v2 = v1;
  char v4 = v3;
  type metadata accessor for TableBuilder();
  *(void *)(swift_allocObject() + 16) = _swiftEmptyArrayStorage;
  v2();
  sub_10000BF1C(&qword_100180EE8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013F1E0;
  uint64_t v6 = v0[6];
  uint64_t v7 = v0[7];
  if (v0[5])
  {
    uint64_t v8 = v0[4];
    uint64_t v9 = v0[5];
  }
  else
  {
    uint64_t v8 = v0[2];
    uint64_t v9 = v0[3];
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_1001169E0();
  uint64_t v51 = sub_100117940(v10, v11, v8, v9);
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  if (v7)
  {
    sub_10000BF1C(&qword_10017D698);
    uint64_t v14 = swift_initStackObject();
    *(_OWORD *)(v14 + 16) = xmmword_10013F1D0;
    char v50 = v4;
    uint64_t v15 = sub_10000BF1C(&qword_100180D58);
    *(void *)(v14 + 56) = v15;
    *(void *)(v14 + 64) = &protocol witness table for Expression<A>;
    swift_bridgeObjectRetain();
    uint64_t v16 = sub_1001169E0();
    uint64_t v18 = sub_100117940(v16, v17, v6, v7);
    uint64_t v20 = v19;
    swift_bridgeObjectRelease();
    *(void *)(v14 + 32) = v18;
    *(void *)(v14 + 40) = v20;
    *(void *)(v14 + 48) = _swiftEmptyArrayStorage;
    *(void *)(v14 + 96) = v15;
    *(void *)(v14 + 104) = &protocol witness table for Expression<A>;
    *(void *)(v14 + 72) = v51;
    *(void *)(v14 + 80) = v13;
    char v4 = v50;
    *(void *)(v14 + 88) = _swiftEmptyArrayStorage;
    sub_1001165B0(v55);
    swift_setDeallocating();
    sub_10011491C(&qword_10017E910);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v56 = sub_10000BF1C(&qword_100180D58);
    uint64_t v57 = &protocol witness table for Expression<A>;
    swift_bridgeObjectRelease();
    v55[0] = v51;
    v55[1] = v13;
    v55[2] = (uint64_t)_swiftEmptyArrayStorage;
  }
  uint64_t v21 = static Table.identifier.getter();
  sub_10010E148(v21, v22, v23, v24, v25, v26);
  sub_10000E788((uint64_t)v55);
  uint64_t v27 = swift_bridgeObjectRetain();
  sub_10011750C(v27, v55);
  uint64_t v28 = v56;
  uint64_t v29 = v57;
  uint64_t v30 = sub_10000BEA0(v55, v56);
  uint64_t v31 = sub_100118150(v30, 0, 0xE000000000000000, v28, v29);
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  sub_10000E788((uint64_t)v55);
  swift_bridgeObjectRelease();
  uint64_t v36 = sub_10000BF1C(&qword_100180D58);
  *(void *)(inited + 96) = v36;
  *(void *)(inited + 104) = &protocol witness table for Expression<A>;
  *(void *)(inited + 72) = v31;
  *(void *)(inited + 80) = v33;
  *(void *)(inited + 88) = v35;
  if (v4)
  {
    long long v37 = xmmword_100141990;
    uint64_t v38 = _swiftEmptyArrayStorage;
    uint64_t v39 = &protocol witness table for Expression<A>;
  }
  else
  {
    *(double *)&long long v37 = sub_100116528();
  }
  *(void *)(inited + 136) = v36;
  *(void *)(inited + 144) = v39;
  *(_OWORD *)(inited + 112) = v37;
  uint64_t v40 = 32;
  *(void *)(inited + 128) = v38;
  BOOL v41 = _swiftEmptyArrayStorage;
  do
  {
    sub_100115B28(inited + v40, (uint64_t)v55, &qword_100180EF0);
    sub_1001150E4((uint64_t)v55, (uint64_t)&v52);
    if (v53)
    {
      sub_10000D698(&v52, (uint64_t)v54);
      sub_10000D698(v54, (uint64_t)&v52);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        char v44 = sub_100094140();
        sub_1001166E0(v44, v45, v46, v41);
        BOOL v41 = v47;
      }
      unint64_t v43 = v41[2];
      unint64_t v42 = v41[3];
      if (v43 >= v42 >> 1)
      {
        char v48 = sub_100035E4C(v42);
        sub_1001166E0(v48, v43 + 1, 1, v41);
        BOOL v41 = v49;
      }
      v41[2] = v43 + 1;
      sub_10000D698(&v52, (uint64_t)&v41[5 * v43 + 4]);
    }
    else
    {
      sub_100115734((uint64_t)&v52, &qword_100180EF0);
    }
    v40 += 40;
  }
  while (v40 != 152);
  swift_bridgeObjectRelease();
  sub_1001163E0((uint64_t)v41, v55);
  swift_bridgeObjectRelease();
  sub_100115C9C(v55);
  sub_1000A3D80();
  swift_release();
  sub_100115C60((uint64_t)v55);
  sub_10000E930();
}

uint64_t sub_10010E148@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 a4@<W3>, char a5@<W4>, uint64_t *a6@<X8>)
{
  int v11 = a4;
  sub_10000BF1C(&qword_100180EE8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013F540;
  uint64_t v13 = sub_10000BF1C(&qword_100180D58);
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  *(void *)(inited + 32) = 0x455441455243;
  *(void *)(inited + 40) = 0xE600000000000000;
  *(void *)(inited + 48) = _swiftEmptyArrayStorage;
  *(void *)(inited + 56) = v13;
  if (v11 == 2)
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v14 = 0x5241524F504D4554;
    if ((v11 & 1) == 0) {
      uint64_t v14 = 0x455551494E55;
    }
    unint64_t v15 = 0xE900000000000059;
    if ((v11 & 1) == 0) {
      unint64_t v15 = 0xE600000000000000;
    }
    uint64_t v18 = &protocol witness table for Expression<A>;
    uint64_t v16 = _swiftEmptyArrayStorage;
    uint64_t v17 = v13;
  }
  *(void *)(inited + 72) = v14;
  *(void *)(inited + 80) = v15;
  *(void *)(inited + 88) = v16;
  *(void *)(inited + 96) = v17;
  *(void *)(inited + 136) = v13;
  *(void *)(inited + 144) = &protocol witness table for Expression<A>;
  *(void *)(inited + 104) = v18;
  *(void *)(inited + 112) = a1;
  *(void *)(inited + 120) = a2;
  *(void *)(inited + 128) = _swiftEmptyArrayStorage;
  if (a5)
  {
    long long v19 = xmmword_1001419A0;
    uint64_t v20 = _swiftEmptyArrayStorage;
    uint64_t v21 = &protocol witness table for Expression<A>;
  }
  else
  {
    *(double *)&long long v19 = sub_100116528();
  }
  *(void *)(inited + 176) = v13;
  *(void *)(inited + 184) = v21;
  *(_OWORD *)(inited + 152) = v19;
  *(void *)(inited + 168) = v20;
  sub_1001156D4(a3, inited + 192);
  swift_bridgeObjectRetain();
  uint64_t v22 = _swiftEmptyArrayStorage;
  for (uint64_t i = 32; i != 232; i += 40)
  {
    sub_100115B28(inited + i, (uint64_t)v32, &qword_100180EF0);
    sub_1001150E4((uint64_t)v32, (uint64_t)&v29);
    if (v30)
    {
      sub_10000D698(&v29, (uint64_t)v31);
      sub_10000D698(v31, (uint64_t)&v29);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1001166E0(0, v22[2] + 1, 1, v22);
        uint64_t v22 = v26;
      }
      unint64_t v25 = v22[2];
      unint64_t v24 = v22[3];
      if (v25 >= v24 >> 1)
      {
        sub_1001166E0(v24 > 1, v25 + 1, 1, v22);
        uint64_t v22 = v27;
      }
      uint64_t v22[2] = v25 + 1;
      sub_10000D698(&v29, (uint64_t)&v22[5 * v25 + 4]);
    }
    else
    {
      sub_100115734((uint64_t)&v29, &qword_100180EF0);
    }
  }
  swift_setDeallocating();
  sub_10011491C(&qword_100180EF0);
  sub_1001163E0((uint64_t)v22, a6);
  return swift_bridgeObjectRelease();
}

void Table.create(_:temporary:ifNotExists:)()
{
}

#error "10010E4DC: call analysis failed (funcsize=82)"

uint64_t sub_10010E544@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 a4@<W3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, unint64_t a12)
{
  int v20 = a4;
  sub_10000BF1C(&qword_100180EE8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001419B0;
  sub_1001156D4(a1, inited + 32);
  uint64_t v22 = sub_10000BF1C(&qword_100180D58);
  uint64_t v23 = v22;
  *(void *)(inited + 104) = &protocol witness table for Expression<A>;
  *(void *)(inited + 72) = a2;
  *(void *)(inited + 80) = a3;
  *(void *)(inited + 88) = _swiftEmptyArrayStorage;
  *(void *)(inited + 96) = v22;
  if (v20 == 2)
  {
    unint64_t v24 = 0;
    unint64_t v25 = 0;
    NSString v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
  }
  else
  {
    unint64_t v24 = 0xD000000000000019;
    if ((v20 & 1) == 0) {
      unint64_t v24 = 0x205952414D495250;
    }
    unint64_t v25 = 0x8000000100146960;
    if ((v20 & 1) == 0) {
      unint64_t v25 = 0xEB0000000059454BLL;
    }
    uint64_t v28 = &protocol witness table for Expression<A>;
    NSString v26 = _swiftEmptyArrayStorage;
    uint64_t v27 = v22;
  }
  *(void *)(inited + 112) = v24;
  *(void *)(inited + 120) = v25;
  *(void *)(inited + 128) = v26;
  *(void *)(inited + 136) = v27;
  *(void *)(inited + 144) = v28;
  if (a5)
  {
    uint64_t v29 = 0;
    unint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
  }
  else
  {
    unint64_t v30 = 0xE800000000000000;
    uint64_t v29 = 0x4C4C554E20544F4ELL;
    uint64_t v31 = _swiftEmptyArrayStorage;
    uint64_t v32 = v22;
    uint64_t v33 = &protocol witness table for Expression<A>;
  }
  *(void *)(inited + 152) = v29;
  *(void *)(inited + 160) = v30;
  *(void *)(inited + 168) = v31;
  *(void *)(inited + 176) = v32;
  *(void *)(inited + 184) = v33;
  if (a6)
  {
    long long v34 = xmmword_1001419C0;
    uint64_t v35 = _swiftEmptyArrayStorage;
    uint64_t v36 = &protocol witness table for Expression<A>;
    uint64_t v37 = v22;
  }
  else
  {
    uint64_t v37 = 0;
    uint64_t v36 = 0;
    uint64_t v35 = 0;
    long long v34 = 0uLL;
  }
  *(void *)(inited + 216) = v37;
  *(void *)(inited + 224) = v36;
  *(_OWORD *)(inited + 192) = v34;
  *(void *)(inited + 208) = v35;
  sub_100115B28(a7, (uint64_t)&v49, &qword_100180EF0);
  if (v50)
  {
    sub_10000D698(&v49, (uint64_t)v48);
    swift_bridgeObjectRetain();
    sub_10011484C((uint64_t)v48, (uint64_t *)(inited + 232));
    sub_10000E788((uint64_t)v48);
  }
  else
  {
    *(void *)(inited + 264) = 0;
    *(_OWORD *)(inited + 232) = 0u;
    *(_OWORD *)(inited + 248) = 0u;
    swift_bridgeObjectRetain();
  }
  sub_100115B28(a8, (uint64_t)&v49, &qword_100180EF0);
  if (v50)
  {
    sub_10000D698(&v49, (uint64_t)v48);
    sub_10011788C(v48, 0x544C5541464544, 0xE700000000000000, (uint64_t *)(inited + 272));
    sub_10000E788((uint64_t)v48);
  }
  else
  {
    *(void *)(inited + 304) = 0;
    *(_OWORD *)(inited + 272) = 0u;
    *(_OWORD *)(inited + 288) = 0u;
  }
  sub_10011467C(a10, inited + 312);
  if (a12 == 3)
  {
    *(void *)(inited + 384) = 0;
    *(_OWORD *)(inited + 352) = 0u;
    *(_OWORD *)(inited + 368) = 0u;
  }
  else
  {
    sub_10000BF1C(&qword_10017D698);
    uint64_t v38 = swift_initStackObject();
    *(_OWORD *)(v38 + 16) = xmmword_10013F1D0;
    *(void *)(v38 + 32) = 0x4554414C4C4F43;
    *(void *)(v38 + 40) = 0xE700000000000000;
    *(void *)(v38 + 48) = _swiftEmptyArrayStorage;
    *(void *)(v38 + 56) = v23;
    *(void *)(v38 + 96) = &type metadata for Collation;
    *(void *)(v38 + 104) = &protocol witness table for Collation;
    *(void *)(v38 + 64) = &protocol witness table for Expression<A>;
    *(void *)(v38 + 72) = a11;
    *(void *)(v38 + 80) = a12;
    sub_100115B14(a11, a12);
    sub_10011750C(v38, (uint64_t *)(inited + 352));
    swift_setDeallocating();
    sub_10011491C(&qword_10017E910);
  }
  uint64_t v39 = _swiftEmptyArrayStorage;
  for (uint64_t i = 32; i != 392; i += 40)
  {
    sub_100115B28(inited + i, (uint64_t)&v49, &qword_100180EF0);
    sub_1001150E4((uint64_t)&v49, (uint64_t)&v46);
    if (v47)
    {
      sub_10000D698(&v46, (uint64_t)v48);
      sub_10000D698(v48, (uint64_t)&v46);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100114C6C(0, v39[2] + 1, 1, v39, &qword_10017D698, &qword_10017E910);
        uint64_t v39 = v43;
      }
      unint64_t v42 = v39[2];
      unint64_t v41 = v39[3];
      if (v42 >= v41 >> 1)
      {
        sub_100114C6C(v41 > 1, v42 + 1, 1, v39, &qword_10017D698, &qword_10017E910);
        uint64_t v39 = v44;
      }
      void v39[2] = v42 + 1;
      sub_10000D698(&v46, (uint64_t)&v39[5 * v42 + 4]);
    }
    else
    {
      sub_100115734((uint64_t)&v46, &qword_100180EF0);
    }
  }
  swift_setDeallocating();
  sub_10011491C(&qword_100180EF0);
  sub_10011750C((uint64_t)v39, a9);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10010E9F0(uint64_t a1)
{
  sub_10000BF1C(&qword_10017D698);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013F9D0;
  uint64_t v4 = sub_10000BF1C(&qword_100180D58);
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  *(void *)(inited + 32) = 0x4154205245544C41;
  *(void *)(inited + 40) = 0xEB00000000454C42;
  *(void *)(inited + 48) = _swiftEmptyArrayStorage;
  *(void *)(inited + 56) = v4;
  uint64_t v6 = v1[5];
  uint64_t v5 = v1[6];
  uint64_t v7 = v1[7];
  if (v6)
  {
    uint64_t v8 = v1[4];
    uint64_t v9 = v6;
  }
  else
  {
    uint64_t v10 = v1 + 2;
    uint64_t v8 = v1[2];
    uint64_t v9 = v10[1];
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_100117940(34, (void *)0xE100000000000000, v8, v9);
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  if (v7)
  {
    uint64_t v14 = swift_initStackObject();
    *(_OWORD *)(v14 + 16) = xmmword_10013F1D0;
    *(void *)(v14 + 56) = v4;
    *(void *)(v14 + 64) = &protocol witness table for Expression<A>;
    swift_bridgeObjectRetain();
    uint64_t v15 = sub_100117940(34, (void *)0xE100000000000000, v5, v7);
    uint64_t v16 = a1;
    uint64_t v18 = v17;
    swift_bridgeObjectRelease();
    *(void *)(v14 + 32) = v15;
    *(void *)(v14 + 40) = v18;
    a1 = v16;
    *(void *)(v14 + 48) = _swiftEmptyArrayStorage;
    *(void *)(v14 + 96) = v4;
    *(void *)(v14 + 104) = &protocol witness table for Expression<A>;
    *(void *)(v14 + 72) = v11;
    *(void *)(v14 + 80) = v13;
    *(void *)(v14 + 88) = _swiftEmptyArrayStorage;
    sub_10011750C(v14, (uint64_t *)(inited + 72));
    swift_setDeallocating();
    sub_10011491C(&qword_10017E910);
  }
  else
  {
    *(void *)(inited + 96) = v4;
    *(void *)(inited + 104) = &protocol witness table for Expression<A>;
    *(void *)(inited + 72) = v11;
    *(void *)(inited + 80) = v13;
    *(void *)(inited + 88) = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  *(void *)(inited + 136) = v4;
  *(void *)(inited + 144) = &protocol witness table for Expression<A>;
  *(void *)(inited + 112) = 0x554C4F4320444441;
  *(void *)(inited + 120) = 0xEA00000000004E4DLL;
  *(void *)(inited + 128) = _swiftEmptyArrayStorage;
  sub_1001156D4(a1, inited + 152);
  sub_10011750C(inited, v21);
  swift_setDeallocating();
  sub_10011491C(&qword_10017E910);
  sub_10000BEA0(v21, v21[3]);
  uint64_t countAndFlagsBits = Expressible.asSQL()()._countAndFlagsBits;
  sub_10000E788((uint64_t)v21);
  return countAndFlagsBits;
}

#error "10010ED74: call analysis failed (funcsize=83)"

void Table.addColumn<A>(_:check:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  sub_10000E990();
  uint64_t v56 = v21;
  uint64_t v57 = v22;
  uint64_t v24 = v23;
  uint64_t v59 = v25;
  uint64_t v60 = v26;
  uint64_t v58 = v27;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v34 = type metadata accessor for Optional();
  sub_10000E948();
  uint64_t v36 = v35;
  sub_100116CA8();
  __chkstk_darwin(v37);
  uint64_t v39 = (char *)&v55 - v38;
  v68[3] = type metadata accessor for Expression();
  v68[4] = &protocol witness table for Expression<A>;
  v68[0] = v33;
  v68[1] = v31;
  v68[2] = v29;
  uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t))(a21 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v41 = v40(v24, a21);
  uint64_t v42 = v57;
  uint64_t v55 = v41;
  uint64_t v44 = v43;
  if (v57)
  {
    *((void *)&v66 + 1) = sub_10000BF1C(&qword_100180F00);
    long long v67 = &protocol witness table for Expression<A>;
    uint64_t v45 = v58;
    *(void *)&long long v65 = v58;
    *((void *)&v65 + 1) = v42;
    *(void *)&long long v66 = v59;
  }
  else
  {
    long long v67 = 0;
    long long v65 = 0u;
    long long v66 = 0u;
    uint64_t v45 = v58;
  }
  sub_1000EF0F4();
  v47(v46);
  if (sub_10000D5D8((uint64_t)v39, 1, v24) == 1)
  {
    sub_10002A464(v45, v42);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v39, v34);
    uint64_t v64 = 0;
    long long v62 = 0u;
    long long v63 = 0u;
  }
  else
  {
    uint64_t v48 = *(void *)(a21 + 8);
    *((void *)&v63 + 1) = v24;
    uint64_t v64 = v48;
    sub_1000274F4((uint64_t *)&v62);
    sub_100115CD4();
    sub_100116A58();
    v50(v49);
    sub_10002A464(v45, v42);
  }
  memset(v61, 0, sizeof(v61));
  uint64_t v51 = sub_100116860();
  sub_100116484(v51, v52, v44, (uint64_t)&v65, (uint64_t)&v62, v53, v54, 0, 3uLL);
  swift_bridgeObjectRelease();
  sub_100115734((uint64_t)v61, &qword_100180EF8);
  sub_100115734((uint64_t)&v62, &qword_100180EF0);
  sub_100115734((uint64_t)&v65, &qword_100180EF0);
  sub_10000E788((uint64_t)v68);
  sub_10010E9F0((uint64_t)v69);
  sub_10000E788((uint64_t)v69);
  sub_10000E930();
}

void Table.addColumn<A>(_:check:defaultValue:)()
{
  sub_10000E990();
  uint64_t v33 = v0;
  uint64_t v4 = v3;
  uint64_t v32 = v5;
  uint64_t v31 = v6;
  uint64_t v29 = v7;
  unint64_t v30 = v8;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  sub_100116C6C();
  uint64_t v13 = type metadata accessor for Optional();
  sub_10000E948();
  uint64_t v15 = v14;
  sub_100116CA8();
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v28 - v17;
  v39[3] = sub_100116AE8();
  v39[4] = &protocol witness table for Expression<A>;
  v39[0] = v2;
  v39[1] = v12;
  void v39[2] = v10;
  long long v19 = *(void (**)(uint64_t))(v1 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v20 = sub_1001169C8();
  v19(v20);
  uint64_t v21 = v29;
  sub_1001165CC();
  v38[3] = sub_10000BF1C(&qword_100180F08);
  v38[4] = &protocol witness table for Expression<A>;
  v38[0] = v30;
  v38[1] = v21;
  v38[2] = v31;
  sub_1000EF0F4();
  v22();
  if (sub_10000D5D8((uint64_t)v18, 1, v4) == 1)
  {
    uint64_t v23 = *(void (**)(char *, uint64_t))(v15 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23(v18, v13);
    uint64_t v37 = 0;
    long long v35 = 0u;
    long long v36 = 0u;
  }
  else
  {
    uint64_t v24 = *(void *)(v1 + 8);
    *((void *)&v36 + 1) = v4;
    uint64_t v37 = v24;
    sub_1000274F4((uint64_t *)&v35);
    sub_100115CD4();
    sub_100116A58();
    v25();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  sub_10011609C();
  uint64_t v29 = 0;
  unint64_t v30 = 3;
  uint64_t v26 = sub_100116860();
  sub_100116484(v26, v12, v10, (uint64_t)v38, (uint64_t)&v35, v27, v28, v29, v30);
  swift_bridgeObjectRelease();
  sub_100115734((uint64_t)&v34, &qword_100180EF8);
  sub_100115734((uint64_t)&v35, &qword_100180EF0);
  sub_100115734((uint64_t)v38, &qword_100180EF0);
  sub_10000E788((uint64_t)v39);
  sub_10010E9F0((uint64_t)v40);
  sub_10000E788((uint64_t)v40);
  sub_10000E930();
}

#error "10010F408: call analysis failed (funcsize=92)"

#error "10010F578: call analysis failed (funcsize=87)"

#error "10010F6F8: call analysis failed (funcsize=92)"

#error "10010F880: call analysis failed (funcsize=95)"

#error "10010F9E0: call analysis failed (funcsize=82)"

#error "10010FB28: call analysis failed (funcsize=78)"

void Table.addColumn<A>(_:check:defaultValue:collate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unint64_t a21,uint64_t a22,uint64_t a23)
{
  sub_10000E990();
  uint64_t v56 = v24;
  uint64_t v57 = v23;
  uint64_t v60 = v25;
  uint64_t v61 = v26;
  uint64_t v58 = v28;
  uint64_t v59 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v35 = type metadata accessor for Optional();
  sub_10000E948();
  uint64_t v37 = v36;
  sub_100116CA8();
  __chkstk_darwin(v38);
  uint64_t v40 = (char *)v55 - v39;
  v69[3] = sub_100116904();
  uint64_t v69[4] = &protocol witness table for Expression<A>;
  v69[0] = v34;
  v69[1] = v32;
  v69[2] = v30;
  uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t))(a23 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v42 = v41(a22, a23);
  uint64_t v43 = v58;
  v55[0] = v44;
  v55[1] = v42;
  if (v58)
  {
    *((void *)&v67 + 1) = sub_10000BF1C(&qword_100180F00);
    uint64_t v68 = &protocol witness table for Expression<A>;
    uint64_t v45 = v59;
    *(void *)&long long v66 = v59;
    *((void *)&v66 + 1) = v43;
    *(void *)&long long v67 = v60;
  }
  else
  {
    uint64_t v45 = v59;
    uint64_t v68 = 0;
    long long v66 = 0u;
    long long v67 = 0u;
  }
  sub_1000EF0F4();
  v46();
  if (sub_10000D5D8((uint64_t)v40, 1, a22) == 1)
  {
    sub_10002A464(v45, v43);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v40, v35);
    uint64_t v65 = 0;
    long long v63 = 0u;
    long long v64 = 0u;
  }
  else
  {
    uint64_t v47 = *(void *)(a23 + 8);
    *((void *)&v64 + 1) = a22;
    uint64_t v65 = v47;
    sub_1000274F4((uint64_t *)&v63);
    sub_100115CD4();
    sub_100116A58();
    v48();
    sub_10002A464(v45, v43);
  }
  uint64_t v49 = v55[0];
  memset(v62, 0, sizeof(v62));
  uint64_t v54 = v56;
  uint64_t v50 = sub_100116860();
  sub_100116484(v50, v51, v49, (uint64_t)&v66, (uint64_t)&v63, v52, v53, v54, a21);
  swift_bridgeObjectRelease();
  sub_100115734((uint64_t)v62, &qword_100180EF8);
  sub_100115734((uint64_t)&v63, &qword_100180EF0);
  sub_100115734((uint64_t)&v66, &qword_100180EF0);
  sub_10000E788((uint64_t)v69);
  sub_10010E9F0((uint64_t)v70);
  sub_10000E788((uint64_t)v70);
  sub_10000E930();
}

{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(void);
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  void (*v50)(void);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned char v59[80];
  long long v60;
  long long v61;
  uint64_t v62;
  void v63[5];
  void v64[5];
  uint64_t v65[6];

  sub_10000E990();
  uint64_t v58 = v23;
  uint64_t v57 = v24;
  uint64_t v55 = v25;
  uint64_t v52 = v26;
  uint64_t v54 = v27;
  uint64_t v53 = v28;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v56 = a21;
  uint64_t v35 = type metadata accessor for Optional();
  sub_10000E948();
  uint64_t v37 = v36;
  sub_100116CA8();
  __chkstk_darwin(v38);
  uint64_t v40 = (char *)&v51 - v39;
  v64[3] = sub_1001166A0();
  v64[4] = &protocol witness table for Expression<A>;
  v64[0] = v34;
  v64[1] = v32;
  v64[2] = v30;
  uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t))(a23 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v42 = v41(a22, a23);
  uint64_t v43 = v52;
  uint64_t v44 = v42;
  uint64_t v46 = v45;
  v63[3] = sub_10000BF1C(&qword_100180F08);
  v63[4] = &protocol witness table for Expression<A>;
  v63[0] = v53;
  v63[1] = v54;
  void v63[2] = v43;
  sub_1000EF0F4();
  v47();
  if (sub_10000D5D8((uint64_t)v40, 1, a22) == 1)
  {
    uint64_t v48 = *(void (**)(char *, uint64_t))(v37 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v48(v40, v35);
    long long v62 = 0;
    uint64_t v60 = 0u;
    uint64_t v61 = 0u;
  }
  else
  {
    uint64_t v49 = *(void *)(a23 + 8);
    *((void *)&v61 + 1) = a22;
    long long v62 = v49;
    sub_1000274F4((uint64_t *)&v60);
    sub_100115CD4();
    sub_100116A58();
    v50();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  sub_10011609C();
  sub_100116484((uint64_t)v64, v44, v46, (uint64_t)v63, (uint64_t)&v60, v65, (uint64_t)v59, v57, v56);
  swift_bridgeObjectRelease();
  sub_100115734((uint64_t)v59, &qword_100180EF8);
  sub_100115734((uint64_t)&v60, &qword_100180EF0);
  sub_100115734((uint64_t)v63, &qword_100180EF0);
  sub_10000E788((uint64_t)v64);
  sub_10010E9F0((uint64_t)v65);
  sub_10000E788((uint64_t)v65);
  sub_10000E930();
}

uint64_t sub_1001100A8(uint64_t a1)
{
  sub_10000BF1C(&qword_10017D698);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013F9D0;
  uint64_t v4 = sub_10000BF1C(&qword_100180D58);
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  *(void *)(inited + 32) = 0x4154205245544C41;
  *(void *)(inited + 40) = 0xEB00000000454C42;
  *(void *)(inited + 48) = _swiftEmptyArrayStorage;
  *(void *)(inited + 56) = v4;
  uint64_t v5 = v1[6];
  uint64_t v6 = v1[7];
  if (!v1[5]) {
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_100116C38();
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  if (v6)
  {
    uint64_t v10 = swift_initStackObject();
    *(_OWORD *)(v10 + 16) = xmmword_10013F1D0;
    *(void *)(v10 + 56) = v4;
    *(void *)(v10 + 64) = &protocol witness table for Expression<A>;
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_1001169E0();
    uint64_t v13 = sub_100117940(v11, v12, v5, v6);
    uint64_t v14 = a1;
    uint64_t v16 = v15;
    uint64_t v17 = swift_bridgeObjectRelease();
    *(void *)(v10 + 32) = v13;
    *(void *)(v10 + 40) = v16;
    a1 = v14;
    *(void *)(v10 + 48) = _swiftEmptyArrayStorage;
    *(void *)(v10 + 96) = v4;
    *(void *)(v10 + 104) = &protocol witness table for Expression<A>;
    *(void *)(v10 + 72) = v7;
    *(void *)(v10 + 80) = v9;
    *(void *)(v10 + 88) = _swiftEmptyArrayStorage;
    sub_100116B6C(v17, v18, v19, v20, v21, v22, v23, v24, v32, (uint64_t *)(inited + 72));
    swift_setDeallocating();
    sub_10011491C(&qword_10017E910);
  }
  else
  {
    *(void *)(inited + 96) = v4;
    *(void *)(inited + 104) = &protocol witness table for Expression<A>;
    *(void *)(inited + 72) = v7;
    *(void *)(inited + 80) = v9;
    *(void *)(inited + 88) = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  *(void *)(inited + 136) = v4;
  *(void *)(inited + 144) = &protocol witness table for Expression<A>;
  *(void *)(inited + 112) = 0x5420454D414E4552;
  *(void *)(inited + 120) = 0xE90000000000004FLL;
  *(void *)(inited + 128) = _swiftEmptyArrayStorage;
  uint64_t v25 = *(void *)(a1 + 16);
  uint64_t v26 = *(void *)(a1 + 24);
  *(void *)(inited + 176) = v4;
  *(void *)(inited + 184) = &protocol witness table for Expression<A>;
  swift_bridgeObjectRetain();
  uint64_t v27 = sub_100117940(34, (void *)0xE100000000000000, v25, v26);
  uint64_t v29 = v28;
  swift_bridgeObjectRelease();
  *(void *)(inited + 152) = v27;
  *(void *)(inited + 160) = v29;
  *(void *)(inited + 168) = _swiftEmptyArrayStorage;
  sub_1001163E0(inited, v33);
  swift_setDeallocating();
  sub_10011491C(&qword_10017E910);
  uint64_t v30 = sub_100115C9C(v33);
  return sub_100115BC4(v30);
}

void Table.createIndex(_:unique:ifNotExists:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_100116428();
  a57 = v59;
  a58 = v60;
  char v62 = v61;
  uint64_t v64 = v63;
  sub_10000BF1C(&qword_100180EE8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013F9D0;
  sub_100110590(v64, &a17);
  uint64_t v66 = sub_100116AC0();
  sub_10010E148(v66, v67, v68, v69, v62, v70);
  sub_10000E788((uint64_t)&a17);
  uint64_t v71 = sub_10000BF1C(&qword_100180D58);
  *(void *)(inited + 104) = &protocol witness table for Expression<A>;
  *(void *)(inited + 72) = 20047;
  *(void *)(inited + 80) = 0xE200000000000000;
  unint64_t v72 = _swiftEmptyArrayStorage;
  *(void *)(inited + 88) = _swiftEmptyArrayStorage;
  *(void *)(inited + 96) = v71;
  if (!*(void *)(v58 + 40)) {
    swift_bridgeObjectRetain();
  }
  *(void *)(inited + 136) = v71;
  *(void *)(inited + 144) = &protocol witness table for Expression<A>;
  swift_bridgeObjectRetain();
  uint64_t v73 = sub_100116C38();
  uint64_t v75 = v74;
  swift_bridgeObjectRelease();
  *(void *)(inited + 112) = v73;
  *(void *)(inited + 120) = v75;
  *(void *)(inited + 128) = _swiftEmptyArrayStorage;
  sub_10011750C(v64, &a17);
  uint64_t v76 = a20;
  uint64_t v77 = a21;
  uint64_t v78 = sub_10000BEA0(&a17, a20);
  uint64_t v79 = sub_100118150(v78, 0, 0xE000000000000000, v76, v77);
  uint64_t v81 = v80;
  uint64_t v83 = v82;
  sub_10000E788((uint64_t)&a17);
  *(void *)(inited + 176) = v71;
  *(void *)(inited + 184) = &protocol witness table for Expression<A>;
  uint64_t v84 = 32;
  *(void *)(inited + 152) = v79;
  *(void *)(inited + 160) = v81;
  *(void *)(inited + 168) = v83;
  do
  {
    sub_100115B28(inited + v84, (uint64_t)&a17, &qword_100180EF0);
    sub_1001150E4((uint64_t)&a17, (uint64_t)&a9);
    if (a11)
    {
      sub_10000D698(&a9, (uint64_t)&a13);
      sub_10000D698(&a13, (uint64_t)&a9);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        char v87 = sub_100094140();
        sub_1001166E0(v87, v88, v89, v72);
        unint64_t v72 = v90;
      }
      unint64_t v86 = v72[2];
      unint64_t v85 = v72[3];
      if (v86 >= v85 >> 1)
      {
        char v91 = sub_100035E4C(v85);
        sub_1001166E0(v91, v86 + 1, 1, v72);
        unint64_t v72 = v92;
      }
      v72[2] = v86 + 1;
      sub_10000D698(&a9, (uint64_t)&v72[5 * v86 + 4]);
    }
    else
    {
      sub_100115734((uint64_t)&a9, &qword_100180EF0);
    }
    v84 += 40;
  }
  while (v84 != 192);
  swift_bridgeObjectRelease();
  sub_1001163E0((uint64_t)v72, &a17);
  swift_bridgeObjectRelease();
  sub_100115C9C(&a17);
  sub_100115C60((uint64_t)&a17);
  sub_100116468();
}

uint64_t sub_100110590@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10000BF1C((uint64_t *)&unk_10017E690);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_10013F1E0;
  *(void *)(v5 + 32) = 0x7865646E69;
  *(void *)(v5 + 40) = 0xE500000000000000;
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[6];
  uint64_t v8 = v2[7];
  *(void *)(v5 + 48) = v2[2];
  *(void *)(v5 + 56) = v6;
  *(void *)(v5 + 64) = 28271;
  *(void *)(v5 + 72) = 0xE200000000000000;
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v42 = v7;
  uint64_t v43 = a2;
  if (v9)
  {
    swift_bridgeObjectRetain();
    sub_100057848();
    uint64_t v10 = a1 + 32;
    do
    {
      sub_1001156D4(v10, (uint64_t)&v46);
      uint64_t v11 = v48;
      uint64_t v12 = v49;
      sub_10000BEA0(&v46, v48);
      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
      uint64_t v15 = v14;
      swift_bridgeObjectRelease();
      sub_10000E788((uint64_t)&v46);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_100057848();
      }
      unint64_t v16 = _swiftEmptyArrayStorage[2];
      if (v16 >= _swiftEmptyArrayStorage[3] >> 1) {
        sub_100057848();
      }
      _swiftEmptyArrayStorage[2] = v16 + 1;
      uint64_t v17 = &_swiftEmptyArrayStorage[2 * v16];
      v17[4] = v13;
      uint64_t v17[5] = v15;
      v10 += 40;
      --v9;
    }
    while (v9);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v46._uint64_t countAndFlagsBits = v5;
  sub_100054398();
  sub_10000BF1C(&qword_10017DED8);
  sub_100115AC0();
  BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  Swift::String v18 = String.lowercased()();
  swift_bridgeObjectRelease();
  uint64_t v19 = ((unint64_t)v18._object >> 56) & 0xF;
  Swift::String v46 = v18;
  if (((uint64_t)v18._object & 0x2000000000000000) == 0) {
    uint64_t v19 = v18._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v47 = 0;
  uint64_t v48 = v19;
  swift_bridgeObjectRetain();
  Swift::String_optional v20 = String.Iterator.next()();
  if (!v20.value._object)
  {
    uint64_t v23 = 0;
    uint64_t v24 = 0xE000000000000000;
LABEL_48:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v34 = sub_100117940(34, (void *)0xE100000000000000, v23, v24);
    uint64_t v36 = v35;
    swift_bridgeObjectRelease();
    if (v8)
    {
      sub_10000BF1C(&qword_10017D698);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10013F1D0;
      uint64_t v38 = sub_10000BF1C(&qword_100180D58);
      *(void *)(inited + 56) = v38;
      *(void *)(inited + 64) = &protocol witness table for Expression<A>;
      swift_bridgeObjectRetain();
      uint64_t v39 = sub_100117940(34, (void *)0xE100000000000000, v42, v8);
      uint64_t v41 = v40;
      swift_bridgeObjectRelease();
      *(void *)(inited + 32) = v39;
      *(void *)(inited + 40) = v41;
      *(void *)(inited + 48) = _swiftEmptyArrayStorage;
      *(void *)(inited + 96) = v38;
      *(void *)(inited + 104) = &protocol witness table for Expression<A>;
      *(void *)(inited + 72) = v34;
      *(void *)(inited + 80) = v36;
      *(void *)(inited + 88) = _swiftEmptyArrayStorage;
      sub_10011750C(inited, v43);
      swift_setDeallocating();
      sub_10011491C(&qword_10017E910);
      return swift_bridgeObjectRelease();
    }
    else
    {
      v43[3] = sub_10000BF1C(&qword_100180D58);
      v43[4] = (uint64_t)&protocol witness table for Expression<A>;
      uint64_t result = swift_bridgeObjectRelease();
      *uint64_t v43 = v34;
      v43[1] = v36;
      uint64_t v43[2] = (uint64_t)_swiftEmptyArrayStorage;
    }
    return result;
  }
  uint64_t countAndFlagsBits = v20.value._countAndFlagsBits;
  unint64_t object = v20.value._object;
  uint64_t v23 = 0;
  uint64_t v24 = 0xE000000000000000;
  while (1)
  {
    BOOL v25 = countAndFlagsBits == 34 && object == (void *)0xE100000000000000;
    if (!v25 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_45:
    Swift::String_optional v33 = String.Iterator.next()();
    uint64_t countAndFlagsBits = v33.value._countAndFlagsBits;
    unint64_t object = v33.value._object;
    if (!v33.value._object) {
      goto LABEL_48;
    }
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if ((result & 1) == 0)
  {
    if (countAndFlagsBits != 97 || object != (void *)0xE100000000000000)
    {
      if (_stringCompareWithSmolCheck(_:_:expecting:)())
      {
LABEL_31:
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if (result) {
          goto LABEL_52;
        }
        if (countAndFlagsBits == 48 && object == (void *)0xE100000000000000) {
          goto LABEL_41;
        }
        if (_stringCompareWithSmolCheck(_:_:expecting:)())
        {
LABEL_42:
          uint64_t v44 = v23;
          uint64_t v45 = v24;
          swift_bridgeObjectRetain();
          uint64_t v31 = 95;
          unint64_t v32 = 0xE100000000000000;
LABEL_44:
          String.append(_:)(*(Swift::String *)&v31);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v23 = v44;
          uint64_t v24 = v45;
          goto LABEL_45;
        }
        if (countAndFlagsBits != 57 || object != (void *)0xE100000000000000)
        {
LABEL_41:
          if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
            goto LABEL_42;
          }
        }
LABEL_43:
        uint64_t v44 = v23;
        uint64_t v45 = v24;
        swift_bridgeObjectRetain();
        uint64_t v31 = countAndFlagsBits;
        unint64_t v32 = (unint64_t)object;
        goto LABEL_44;
      }
      if (countAndFlagsBits == 122 && object == (void *)0xE100000000000000) {
        goto LABEL_43;
      }
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_43;
    }
    goto LABEL_31;
  }
  __break(1u);
LABEL_52:
  __break(1u);
  return result;
}

#error "100110ACC: call analysis failed (funcsize=20)"

void View.create(_:temporary:ifNotExists:)()
{
}

void sub_100110B00()
{
  sub_10000E990();
  uint64_t v33 = v1;
  uint64_t v34 = v2;
  char v30 = v3;
  char v5 = v4;
  uint64_t v7 = v6;
  sub_10000BF1C(&qword_100180EE8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013F1E0;
  uint64_t v29 = v0[6];
  uint64_t v9 = v0[7];
  if (v0[5])
  {
    uint64_t v10 = v0[4];
    uint64_t v35 = v0[5];
  }
  else
  {
    uint64_t v10 = v0[2];
    uint64_t v35 = v0[3];
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v31 = sub_100117940(34, (void *)0xE100000000000000, v10, v35);
  uint64_t v32 = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = _swiftEmptyArrayStorage;
  if (v9)
  {
    sub_10000BF1C(&qword_10017D698);
    uint64_t v13 = swift_initStackObject();
    *(_OWORD *)(v13 + 16) = xmmword_10013F1D0;
    uint64_t v14 = sub_10000BF1C(&qword_100180D58);
    *(void *)(v13 + 56) = v14;
    *(void *)(v13 + 64) = &protocol witness table for Expression<A>;
    swift_bridgeObjectRetain();
    uint64_t v15 = sub_1001169E0();
    uint64_t v17 = sub_100117940(v15, v16, v29, v9);
    uint64_t v19 = v18;
    swift_bridgeObjectRelease();
    *(void *)(v13 + 32) = v17;
    *(void *)(v13 + 40) = v19;
    *(void *)(v13 + 48) = _swiftEmptyArrayStorage;
    *(void *)(v13 + 96) = v14;
    *(void *)(v13 + 104) = &protocol witness table for Expression<A>;
    *(void *)(v13 + 72) = v31;
    *(void *)(v13 + 80) = v32;
    *(void *)(v13 + 88) = _swiftEmptyArrayStorage;
    sub_1001165B0(v39);
    swift_setDeallocating();
    sub_10011491C(&qword_10017E910);
    swift_bridgeObjectRelease();
  }
  else
  {
    v39[3] = sub_10000BF1C(&qword_100180D58);
    v39[4] = (uint64_t)&protocol witness table for Expression<A>;
    swift_bridgeObjectRelease();
    v39[0] = v31;
    v39[1] = v32;
    void v39[2] = (uint64_t)_swiftEmptyArrayStorage;
  }
  if (v5) {
    unsigned __int8 v20 = 1;
  }
  else {
    unsigned __int8 v20 = 2;
  }
  sub_10010E148(v33, v34, (uint64_t)v39, v20, v30 & 1, (uint64_t *)(inited + 32));
  sub_10000E788((uint64_t)v39);
  *(void *)(inited + 96) = sub_10000BF1C(&qword_100180D58);
  *(void *)(inited + 104) = &protocol witness table for Expression<A>;
  *(void *)(inited + 72) = 21313;
  *(void *)(inited + 80) = 0xE200000000000000;
  *(void *)(inited + 88) = _swiftEmptyArrayStorage;
  uint64_t v21 = v7[3];
  uint64_t v22 = v7[4];
  sub_10000BEA0(v7, v21);
  *(void *)(inited + 136) = v21;
  *(void *)(inited + 144) = *(void *)(v22 + 8);
  sub_1000274F4((uint64_t *)(inited + 112));
  sub_100115CD4();
  sub_100115E8C();
  v23();
  for (uint64_t i = 32; i != 152; i += 40)
  {
    sub_100115B28(inited + i, (uint64_t)v39, &qword_100180EF0);
    sub_1001150E4((uint64_t)v39, (uint64_t)&v36);
    if (v37)
    {
      sub_10000D698(&v36, (uint64_t)v38);
      sub_10000D698(v38, (uint64_t)&v36);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100116204(0, v12[2] + 1);
        uint64_t v12 = v27;
      }
      unint64_t v26 = v12[2];
      unint64_t v25 = v12[3];
      if (v26 >= v25 >> 1)
      {
        sub_100116204(v25 > 1, v26 + 1);
        uint64_t v12 = v28;
      }
      v12[2] = v26 + 1;
      sub_10000D698(&v36, (uint64_t)&v12[5 * v26 + 4]);
    }
    else
    {
      sub_100115734((uint64_t)&v36, &qword_100180EF0);
    }
  }
  swift_bridgeObjectRelease();
  sub_1001163E0((uint64_t)v12, v39);
  swift_bridgeObjectRelease();
  sub_100115C9C(v39);
  sub_1000A3D80();
  sub_100115C60((uint64_t)v39);
  sub_10000E930();
}

#error "100110FFC: call analysis failed (funcsize=102)"

void VirtualTable.create(_:ifNotExists:)()
{
  sub_10000E990();
  uint64_t v1 = v0;
  char v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v32 = v8;
  sub_10000BF1C(&qword_100180EE8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013F1E0;
  uint64_t v10 = v1[7];
  if (v1[5])
  {
    uint64_t v11 = v1[4];
    uint64_t v12 = v1[5];
  }
  else
  {
    uint64_t v11 = v1[2];
    uint64_t v12 = v1[3];
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v30 = sub_100117940(34, (void *)0xE100000000000000, v11, v12);
  uint64_t v31 = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = _swiftEmptyArrayStorage;
  if (v10)
  {
    sub_10000BF1C(&qword_10017D698);
    char v28 = v3;
    uint64_t v15 = swift_initStackObject();
    *(_OWORD *)(v15 + 16) = xmmword_10013F1D0;
    uint64_t v29 = v7;
    uint64_t v16 = v5;
    uint64_t v17 = sub_10000BF1C(&qword_100180D58);
    *(void *)(v15 + 56) = v17;
    *(void *)(v15 + 64) = &protocol witness table for Expression<A>;
    swift_bridgeObjectRetain();
    uint64_t v18 = sub_100116BD8();
    uint64_t v20 = v19;
    swift_bridgeObjectRelease();
    *(void *)(v15 + 32) = v18;
    *(void *)(v15 + 40) = v20;
    *(void *)(v15 + 48) = _swiftEmptyArrayStorage;
    *(void *)(v15 + 96) = v17;
    *(void *)(v15 + 104) = &protocol witness table for Expression<A>;
    *(void *)(v15 + 72) = v30;
    *(void *)(v15 + 80) = v31;
    uint64_t v5 = v16;
    uint64_t v7 = v29;
    *(void *)(v15 + 88) = _swiftEmptyArrayStorage;
    sub_1001165B0(v36);
    swift_setDeallocating();
    sub_10011491C(&qword_10017E910);
    char v3 = v28;
    swift_bridgeObjectRelease();
  }
  else
  {
    void v36[3] = sub_10000BF1C(&qword_100180D58);
    id v36[4] = (uint64_t)&protocol witness table for Expression<A>;
    swift_bridgeObjectRelease();
    v36[0] = v30;
    v36[1] = v31;
    v36[2] = (uint64_t)_swiftEmptyArrayStorage;
  }
  sub_10010E148(0x204C415554524956, 0xED0000454C424154, (uint64_t)v36, 2u, v3 & 1, (uint64_t *)(inited + 32));
  sub_10000E788((uint64_t)v36);
  uint64_t v21 = sub_10000BF1C(&qword_100180D58);
  *(void *)(inited + 72) = 0x474E495355;
  *(void *)(inited + 80) = 0xE500000000000000;
  *(void *)(inited + 88) = _swiftEmptyArrayStorage;
  *(void *)(inited + 96) = v21;
  *(void *)(inited + 136) = &type metadata for Module;
  *(void *)(inited + 144) = &protocol witness table for Module;
  *(void *)(inited + 104) = &protocol witness table for Expression<A>;
  *(void *)(inited + 112) = v32;
  *(void *)(inited + 120) = v7;
  *(void *)(inited + 128) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  for (uint64_t i = 32; i != 152; i += 40)
  {
    sub_100115B28(inited + i, (uint64_t)v36, &qword_100180EF0);
    sub_1001150E4((uint64_t)v36, (uint64_t)&v33);
    if (v34)
    {
      sub_10000D698(&v33, (uint64_t)v35);
      sub_10000D698(v35, (uint64_t)&v33);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100116204(0, v14[2] + 1);
        uint64_t v14 = v25;
      }
      unint64_t v24 = v14[2];
      unint64_t v23 = v14[3];
      if (v24 >= v23 >> 1)
      {
        char v26 = sub_100035E4C(v23);
        sub_100116204(v26, v24 + 1);
        uint64_t v14 = v27;
      }
      void v14[2] = v24 + 1;
      sub_10000D698(&v33, (uint64_t)&v14[5 * v24 + 4]);
    }
    else
    {
      sub_100115734((uint64_t)&v33, &qword_100180EF0);
    }
  }
  swift_bridgeObjectRelease();
  sub_1001163E0((uint64_t)v14, v36);
  swift_bridgeObjectRelease();
  sub_100115C9C(v36);
  sub_1000A3D80();
  sub_100115C60((uint64_t)v36);
  sub_10000E930();
}

uint64_t VirtualTable.rename(_:)(uint64_t a1)
{
  return sub_1001100A8(a1);
}

#error "100111444: call analysis failed (funcsize=57)"

#error "10011153C: call analysis failed (funcsize=58)"

#error "100111628: call analysis failed (funcsize=55)"

#error "1001116BC: call analysis failed (funcsize=55)"

#error "10011180C: call analysis failed (funcsize=58)"

#error "100111954: call analysis failed (funcsize=80)"

#error "100111A58: call analysis failed (funcsize=59)"

#error "100111B48: call analysis failed (funcsize=56)"

#error "100111C74: call analysis failed (funcsize=71)"

#error "100111D08: call analysis failed (funcsize=56)"

#error "100111E64: call analysis failed (funcsize=60)"

#error "100111F5C: call analysis failed (funcsize=58)"

#error "1001120A8: call analysis failed (funcsize=81)"

uint64_t TableBuilder.column<A>(_:primaryKey:check:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = v9;
  unsigned __int8 v15 = a4 & 1;
  v24[0] = a1;
  v24[1] = a2;
  long long v24[2] = a3;
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(a9 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v17 = a8;
  v16(a8, a9);
  sub_1001165CC();
  v23[3] = sub_10000BF1C(&qword_100180F08);
  v23[4] = &protocol witness table for Expression<A>;
  v23[0] = a5;
  v23[1] = a6;
  _OWORD v23[2] = a7;
  uint64_t v22 = 0;
  memset(v21, 0, sizeof(v21));
  sub_1001164C0();
  uint64_t v18 = sub_100115DAC();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10011514C((uint64_t)v24, a9, v17, v15, 0, 0, (uint64_t)v23, (uint64_t)v21, (uint64_t)v20, 0, 3uLL, v10, v18, (uint64_t)&protocol witness table for Expression<A>);
  swift_bridgeObjectRelease();
  sub_100115734((uint64_t)v20, &qword_100180EF8);
  sub_100115734((uint64_t)v21, &qword_100180EF0);
  sub_100115D60();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

#error "1001122C8: call analysis failed (funcsize=54)"

#error "1001123AC: call analysis failed (funcsize=59)"

#error "1001124AC: call analysis failed (funcsize=59)"

#error "10011259C: call analysis failed (funcsize=57)"

#error "10011269C: call analysis failed (funcsize=57)"

#error "10011278C: call analysis failed (funcsize=56)"

#error "100112880: call analysis failed (funcsize=62)"

#error "10011297C: call analysis failed (funcsize=63)"

#error "100112AE4: call analysis failed (funcsize=62)"

#error "100112BF4: call analysis failed (funcsize=66)"

#error "100112D00: call analysis failed (funcsize=61)"

#error "100112D98: call analysis failed (funcsize=54)"

#error "100112EF4: call analysis failed (funcsize=63)"

#error "100113060: call analysis failed (funcsize=89)"

#error "100113184: call analysis failed (funcsize=69)"

#error "100113274: call analysis failed (funcsize=54)"

#error "1001133D4: call analysis failed (funcsize=84)"

#error "10011346C: call analysis failed (funcsize=55)"

uint64_t TableBuilder.primaryKey<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10000BF1C(&qword_10017D698);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013EF20;
  *(void *)(inited + 56) = sub_100116B00();
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 40) = a2;
  *(void *)(inited + 48) = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1001135C0(inited);
  swift_setDeallocating();
  return sub_10011491C(&qword_10017E910);
}

uint64_t sub_1001135C0(uint64_t a1)
{
  sub_1001177BC(a1, 0x205952414D495250, 0xEB0000000059454BLL, (uint64_t *)v5);
  sub_10011498C(&qword_10017D698, &qword_10017E910);
  uint64_t v2 = *(void *)(*(void *)(v1 + 16) + 16);
  sub_100114A9C(v2);
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)(v3 + 16) = v2 + 1;
  return sub_10000D698(v5, v3 + 40 * v2 + 32);
}

uint64_t TableBuilder.primaryKey<A, B>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_10000BF1C(&qword_10017D698);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013F1D0;
  *(void *)(inited + 56) = type metadata accessor for Expression();
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 40) = a2;
  *(void *)(inited + 48) = a3;
  *(void *)(inited + 96) = sub_100116904();
  *(void *)(inited + 104) = &protocol witness table for Expression<A>;
  *(void *)(inited + 72) = a4;
  *(void *)(inited + 80) = a5;
  *(void *)(inited + 88) = a6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1001135C0(inited);
  swift_setDeallocating();
  return sub_10011491C(&qword_10017E910);
}

uint64_t TableBuilder.primaryKey<A, B, C>(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10000BF1C(&qword_10017D698);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013F1E0;
  *(void *)(inited + 56) = sub_100116670();
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 40) = a2;
  *(void *)(inited + 48) = a3;
  *(void *)(inited + 96) = sub_100116B00();
  *(void *)(inited + 104) = &protocol witness table for Expression<A>;
  *(void *)(inited + 72) = a4;
  *(void *)(inited + 80) = a5;
  *(void *)(inited + 88) = a6;
  *(void *)(inited + 136) = type metadata accessor for Expression();
  *(void *)(inited + 144) = &protocol witness table for Expression<A>;
  *(void *)(inited + 112) = a7;
  *(void *)(inited + 120) = a8;
  *(void *)(inited + 128) = a9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1001135C0(inited);
  swift_setDeallocating();
  return sub_10011491C(&qword_10017E910);
}

void TableBuilder.primaryKey<A, B, C, D>(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_100115BA8();
  uint64_t v73 = v58;
  uint64_t v74 = v59;
  uint64_t v61 = v60;
  uint64_t v63 = v62;
  uint64_t v65 = v64;
  uint64_t v67 = v66;
  uint64_t v69 = v68;
  uint64_t v71 = v70;
  sub_10000BF1C(&qword_10017D698);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013F9D0;
  *(void *)(inited + 56) = sub_100115DAC();
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  *(void *)(inited + 32) = v71;
  *(void *)(inited + 40) = v69;
  *(void *)(inited + 48) = v67;
  *(void *)(inited + 96) = type metadata accessor for Expression();
  *(void *)(inited + 104) = &protocol witness table for Expression<A>;
  *(void *)(inited + 72) = v65;
  *(void *)(inited + 80) = v63;
  *(void *)(inited + 88) = v61;
  *(void *)(inited + 136) = sub_100116904();
  *(void *)(inited + 144) = &protocol witness table for Expression<A>;
  *(void *)(inited + 112) = v73;
  *(void *)(inited + 120) = v74;
  *(void *)(inited + 128) = a55;
  *(void *)(inited + 176) = type metadata accessor for Expression();
  *(void *)(inited + 184) = &protocol witness table for Expression<A>;
  *(void *)(inited + 152) = a56;
  *(void *)(inited + 160) = a57;
  *(void *)(inited + 168) = a58;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1001135C0(inited);
  swift_setDeallocating();
  sub_10011491C(&qword_10017E910);
  sub_100115B8C();
}

Swift::Void __swiftcall TableBuilder.unique(_:)(Swift::OpaquePointer a1)
{
  sub_1001177BC((uint64_t)a1._rawValue, 0x455551494E55, 0xE600000000000000, (uint64_t *)v2);
  sub_10011498C(&qword_10017D698, &qword_10017E910);
  sub_1001169EC();
  sub_100116748();
  sub_10000D698(v2, v1);
}

uint64_t TableBuilder.check(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  TableBuilder.check(_:)(a1, a2, a3);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

{
  uint64_t v6;
  void v8[5];
  long long v9[2];

  v8[3] = sub_10000BF1C(&qword_100180F08);
  v8[4] = &protocol witness table for Expression<A>;
  v8[0] = a1;
  v8[1] = a2;
  _OWORD v8[2] = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10011788C(v8, 0x4B43454843, 0xE500000000000000, (uint64_t *)v9);
  sub_10000E788((uint64_t)v8);
  sub_10011498C(&qword_10017D698, &qword_10017E910);
  sub_1001169EC();
  sub_100116748();
  return sub_10000D698(v9, v6);
}

AppIntents_SQLite::TableBuilder::Dependency_optional __swiftcall TableBuilder.Dependency.init(rawValue:)(Swift::String rawValue)
{
  unint64_t object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._unint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100173B60, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return (AppIntents_SQLite::TableBuilder::Dependency_optional)5;
  }
  else {
    return (AppIntents_SQLite::TableBuilder::Dependency_optional)v3;
  }
}

uint64_t TableBuilder.Dependency.rawValue.getter(char a1)
{
  uint64_t result = 0x4F49544341204F4ELL;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x5443495254534552;
      break;
    case 2:
      uint64_t result = 0x4C4C554E20544553;
      break;
    case 3:
      uint64_t result = 0x4146454420544553;
      break;
    case 4:
      uint64_t result = 0x45444143534143;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100113CC4(unsigned __int8 *a1, char *a2)
{
  return sub_100129B08(*a1, *a2);
}

Swift::Int sub_100113CD0()
{
  return sub_100129F6C(*v0);
}

uint64_t sub_100113CD8()
{
  return sub_10012A084();
}

Swift::Int sub_100113CE0(uint64_t a1)
{
  return sub_10012A39C(a1, *v1);
}

AppIntents_SQLite::TableBuilder::Dependency_optional sub_100113CE8@<W0>(Swift::String *a1@<X0>, AppIntents_SQLite::TableBuilder::Dependency_optional *a2@<X8>)
{
  result.value = TableBuilder.Dependency.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t sub_100113D18@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = TableBuilder.Dependency.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t TableBuilder.foreignKey<A>(_:references:_:update:delete:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8, char a9)
{
  v15[0] = a1;
  v15[1] = a2;
  void v15[2] = a3;
  v14[0] = a5;
  v14[1] = a6;
  void v14[2] = a7;
  uint64_t v12 = type metadata accessor for Expression();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100115290((uint64_t)v15, a4, (uint64_t)v14, a8, a9, v9, v12, v12, (uint64_t)&protocol witness table for Expression<A>, (uint64_t)&protocol witness table for Expression<A>);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  void v15[3];
  void v16[3];

  v16[0] = a1;
  v16[1] = a2;
  void v16[2] = a3;
  v15[0] = a5;
  v15[1] = a6;
  void v15[2] = a7;
  type metadata accessor for Optional();
  uint64_t v12 = sub_100115CF8();
  uint64_t v13 = sub_1001166A0();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100115290((uint64_t)v16, a4, (uint64_t)v15, a8, a9, v9, v12, v13, (uint64_t)&protocol witness table for Expression<A>, (uint64_t)&protocol witness table for Expression<A>);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void TableBuilder.foreignKey<A, B>(_:references:_:update:delete:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,unsigned __int8 a26,char a27)
{
  sub_10000E990();
  uint64_t v54 = v27;
  uint64_t v53 = v28;
  uint64_t v52 = v29;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v51 = v34;
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  sub_10000BF1C(&qword_10017D698);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013F1D0;
  uint64_t v42 = sub_100116904();
  *(void *)(inited + 56) = v42;
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  *(void *)(inited + 32) = v40;
  *(void *)(inited + 40) = v38;
  *(void *)(inited + 48) = v36;
  uint64_t v43 = type metadata accessor for Expression();
  *(void *)(inited + 96) = v43;
  *(void *)(inited + 104) = &protocol witness table for Expression<A>;
  *(void *)(inited + 72) = v51;
  *(void *)(inited + 80) = v33;
  *(void *)(inited + 88) = v31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100116594(v61);
  swift_setDeallocating();
  sub_10011491C(&qword_10017E910);
  sub_1001156D4(v52, (uint64_t)v59);
  uint64_t v44 = swift_initStackObject();
  *(_OWORD *)(v44 + 16) = xmmword_10013F1D0;
  *(void *)(v44 + 32) = v53;
  *(void *)(v44 + 56) = v42;
  *(void *)(v44 + 64) = &protocol witness table for Expression<A>;
  *(void *)(v44 + 40) = a21;
  *(void *)(v44 + 48) = a22;
  *(void *)(v44 + 96) = v43;
  *(void *)(v44 + 104) = &protocol witness table for Expression<A>;
  *(void *)(v44 + 72) = a23;
  *(void *)(v44 + 80) = a24;
  *(void *)(v44 + 88) = a25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100116594(v60);
  swift_setDeallocating();
  sub_10011491C(&qword_10017E910);
  sub_1001156D4((uint64_t)v59, (uint64_t)v55);
  sub_1001156D4((uint64_t)v60, (uint64_t)v56);
  uint64_t v45 = v62;
  uint64_t v46 = v63;
  uint64_t v47 = sub_10000BEA0(v61, v62);
  uint64_t v48 = v57;
  uint64_t v49 = v58;
  uint64_t v50 = sub_10000BEA0(v56, v57);
  sub_100115290((uint64_t)v47, (uint64_t)v55, (uint64_t)v50, a26, a27, v54, v45, v48, v46, v49);
  sub_100115734((uint64_t)v59, &qword_100180F10);
  sub_10000E788((uint64_t)v61);
  sub_10000E788((uint64_t)v56);
  sub_10000E788((uint64_t)v55);
  sub_10000E930();
}

void TableBuilder.foreignKey<A, B, C>(_:references:_:update:delete:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,unsigned __int8 a32,char a33)
{
  sub_10000E990();
  uint64_t v61 = v33;
  uint64_t v58 = v34;
  uint64_t v60 = v35;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  uint64_t v57 = v40;
  uint64_t v42 = v41;
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  sub_10000BF1C(&qword_10017D698);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013F1E0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v59 = sub_1001166A0();
  *(void *)(inited + 56) = v59;
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  *(void *)(inited + 32) = v46;
  *(void *)(inited + 40) = v44;
  *(void *)(inited + 48) = v42;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v48 = type metadata accessor for Expression();
  *(void *)(inited + 96) = v48;
  *(void *)(inited + 104) = &protocol witness table for Expression<A>;
  *(void *)(inited + 72) = v57;
  *(void *)(inited + 80) = v39;
  *(void *)(inited + 88) = v37;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v49 = type metadata accessor for Expression();
  *(void *)(inited + 136) = v49;
  *(void *)(inited + 144) = &protocol witness table for Expression<A>;
  *(void *)(inited + 112) = v60;
  *(void *)(inited + 120) = v58;
  *(void *)(inited + 128) = a21;
  sub_100116594(v68);
  swift_setDeallocating();
  sub_10011491C(&qword_10017E910);
  sub_1001156D4(a22, (uint64_t)v66);
  uint64_t v50 = swift_initStackObject();
  *(_OWORD *)(v50 + 16) = xmmword_10013F1E0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v50 + 32) = a23;
  *(void *)(v50 + 40) = a24;
  *(void *)(v50 + 56) = v59;
  *(void *)(v50 + 64) = &protocol witness table for Expression<A>;
  *(void *)(v50 + 48) = a25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v50 + 96) = v48;
  *(void *)(v50 + 104) = &protocol witness table for Expression<A>;
  *(void *)(v50 + 72) = a26;
  *(void *)(v50 + 80) = a27;
  *(void *)(v50 + 88) = a28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v50 + 136) = v49;
  *(void *)(v50 + 144) = &protocol witness table for Expression<A>;
  *(void *)(v50 + 112) = a29;
  *(void *)(v50 + 120) = a30;
  *(void *)(v50 + 128) = a31;
  sub_100116594(v67);
  swift_setDeallocating();
  sub_10011491C(&qword_10017E910);
  sub_1001156D4((uint64_t)v66, (uint64_t)v62);
  sub_1001156D4((uint64_t)v67, (uint64_t)v63);
  uint64_t v51 = v69;
  uint64_t v52 = v70;
  uint64_t v53 = sub_10000BEA0(v68, v69);
  uint64_t v54 = v64;
  uint64_t v55 = v65;
  uint64_t v56 = sub_10000BEA0(v63, v64);
  sub_100115290((uint64_t)v53, (uint64_t)v62, (uint64_t)v56, a32, a33, v61, v51, v54, v52, v55);
  sub_100115734((uint64_t)v66, &qword_100180F10);
  sub_10000E788((uint64_t)v68);
  sub_10000E788((uint64_t)v63);
  sub_10000E788((uint64_t)v62);
  sub_10000E930();
}

uint64_t sub_100114510@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  sub_1001156D4(a1, (uint64_t)v14);
  sub_1001156D4(a2, (uint64_t)v15);
  sub_10000BF1C(&qword_10017D698);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013F1E0;
  uint64_t v6 = sub_10000BF1C(&qword_100180D58);
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  *(void *)(inited + 32) = 0x434E455245464552;
  *(void *)(inited + 40) = 0xEA00000000005345;
  *(void *)(inited + 48) = _swiftEmptyArrayStorage;
  *(void *)(inited + 56) = v6;
  sub_10000BEA0(v14, v14[3]);
  sub_10011E3F8();
  uint64_t v7 = v16;
  uint64_t v8 = v17;
  uint64_t v9 = sub_10000BEA0(v15, v16);
  uint64_t v10 = sub_100118150(v9, 0, 0xE000000000000000, v7, v8);
  *(void *)(inited + 136) = v6;
  *(void *)(inited + 144) = &protocol witness table for Expression<A>;
  *(void *)(inited + 112) = v10;
  *(void *)(inited + 120) = v11;
  *(void *)(inited + 128) = v12;
  sub_10011750C(inited, a3);
  swift_setDeallocating();
  sub_10011491C(&qword_10017E910);
  return sub_100115734((uint64_t)v14, &qword_100180F10);
}

double sub_10011467C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100115B28(a1, (uint64_t)__src, &qword_100180EF8);
  if (__src[3])
  {
    memcpy(v4, __src, sizeof(v4));
    sub_100114510((uint64_t)v4, (uint64_t)&v4[40], (uint64_t *)a2);
    sub_100115734((uint64_t)v4, &qword_100180F10);
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t TableBuilder.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TableBuilder.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return _swift_deallocClassInstance(v0, 24, 7);
}

uint64_t Module.init(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1001169E0();
  uint64_t v6 = sub_100117940(v3, v4, v5, a2);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t Module.expression.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10011750C(a3, v9);
  uint64_t v5 = v10;
  uint64_t v6 = v11;
  uint64_t v7 = sub_10000BEA0(v9, v10);
  sub_100118150(v7, a1, a2, v5, v6);
  sub_1000A3D80();
  return sub_100115C60((uint64_t)v9);
}

uint64_t sub_100114840()
{
  return Module.expression.getter(*v0, v0[1], v0[2]);
}

uint64_t sub_10011484C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10000BF1C(&qword_10017D698);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013F1D0;
  uint64_t v5 = sub_10000BF1C(&qword_100180D58);
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  *(void *)(inited + 32) = 0x4B43454843;
  *(void *)(inited + 40) = 0xE500000000000000;
  *(void *)(inited + 48) = _swiftEmptyArrayStorage;
  *(void *)(inited + 56) = v5;
  sub_1001156D4(a1, inited + 72);
  sub_10011750C(inited, a2);
  swift_setDeallocating();
  return sub_10011491C(&qword_10017E910);
}

uint64_t sub_10011491C(uint64_t *a1)
{
  sub_10000BF1C(a1);
  swift_arrayDestroy();

  return _swift_deallocClassInstance(v1, 32, 7);
}

void sub_100114978()
{
}

void sub_10011498C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v5 = *v2;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *Swift::String v2 = v5;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100114C6C(0, v5[2] + 1, 1, v5, a1, a2);
    *Swift::String v2 = v7;
  }
}

uint64_t sub_1001149F0()
{
  return sub_100114A08((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100114D84);
}

uint64_t sub_100114A08(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v3;
  if (!result)
  {
    uint64_t result = a1(result, *(void *)(v3 + 16) + 1, 1, v3);
    *uint64_t v1 = result;
  }
  return result;
}

uint64_t type metadata accessor for TableBuilder()
{
  return self;
}

void sub_100114A88(uint64_t a1)
{
}

void sub_100114A9C(uint64_t a1)
{
  unint64_t v2 = *(void *)(*(void *)v1 + 24);
  if (a1 + 1 > (uint64_t)(v2 >> 1))
  {
    char v3 = sub_100035E4C(v2);
    sub_100114C6C(v3, v4, 1, v5, v6, v7);
    *(void *)uint64_t v1 = v8;
  }
}

uint64_t sub_100114AE0(uint64_t a1)
{
  return sub_100114AF8(a1, (uint64_t (*)(BOOL))sub_100114D84);
}

uint64_t sub_100114AF8(uint64_t result, uint64_t (*a2)(BOOL))
{
  unint64_t v3 = *(void *)(*(void *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    uint64_t result = a2(v3 > 1);
    *(void *)uint64_t v2 = result;
  }
  return result;
}

void sub_100114B40(char a1, uint64_t a2, char a3, void *a4)
{
}

void sub_100114B54()
{
  sub_1000286D8();
  if (v4)
  {
    sub_1000282CC();
    if (v5 != v6)
    {
      sub_100028360();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_1000282BC();
    }
  }
  sub_1000283EC();
  if (v3)
  {
    sub_10000BF1C(&qword_10017DEB8);
    uint64_t v7 = (void *)swift_allocObject();
    size_t v8 = j__malloc_size(v7);
    sub_100116BB4((uint64_t)(v8 - 32) / 40);
  }
  else
  {
    uint64_t v7 = _swiftEmptyArrayStorage;
  }
  if (v1)
  {
    if (v7 != v0 || &v0[5 * v2 + 4] <= v7 + 4) {
      memmove(v7 + 4, v0 + 4, 40 * v2);
    }
    v0[2] = 0;
  }
  else
  {
    sub_10000BF1C(&qword_10017DEC0);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
}

void sub_100114C58(char a1, uint64_t a2, char a3, void *a4)
{
}

void sub_100114C6C(char a1, uint64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    sub_1000282CC();
    if (v10 != v11)
    {
      sub_100028360();
      if (v10)
      {
        __break(1u);
        return;
      }
      sub_1000282BC();
    }
  }
  else
  {
    uint64_t v9 = a2;
  }
  uint64_t v12 = a4[2];
  if (v9 <= v12) {
    uint64_t v13 = a4[2];
  }
  else {
    uint64_t v13 = v9;
  }
  if (v13)
  {
    sub_10000BF1C(a5);
    uint64_t v14 = (void *)swift_allocObject();
    size_t v15 = j__malloc_size(v14);
    void v14[2] = v12;
    void v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
  }
  else
  {
    uint64_t v14 = _swiftEmptyArrayStorage;
  }
  if (a1)
  {
    if (v14 != a4 || &a4[5 * v12 + 4] <= v14 + 4) {
      memmove(v14 + 4, a4 + 4, 40 * v12);
    }
    a4[2] = 0;
  }
  else
  {
    sub_10000BF1C(a6);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
}

void *sub_100114D84(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000BF1C(&qword_100180FD8);
    char v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 88);
  }
  else
  {
    char v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || &a4[11 * v8 + 4] <= v10 + 4) {
      memmove(v10 + 4, a4 + 4, 88 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_10000BF1C(&qword_100180FE0);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void sub_100114EAC()
{
  sub_1000286D8();
  if (v4)
  {
    sub_1000282CC();
    if (v5 != v6)
    {
      sub_100028360();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_1000282BC();
    }
  }
  sub_1000283EC();
  if (v3)
  {
    sub_10000BF1C(&qword_10017E940);
    int64_t v7 = (char *)swift_allocObject();
    size_t v8 = j__malloc_size(v7);
    sub_100116BB4((uint64_t)(v8 - 32) / 80);
  }
  else
  {
    int64_t v7 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v9 = v7 + 32;
  char v10 = v0 + 32;
  if (v1)
  {
    if (v7 != v0 || &v10[80 * v2] <= v9) {
      memmove(v9, v10, 80 * v2);
    }
    *((void *)v0 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
}

void sub_100114F98()
{
  sub_1000286D8();
  if (v4)
  {
    sub_1000282CC();
    if (v5 != v6)
    {
      sub_100028360();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_1000282BC();
    }
  }
  sub_1000283EC();
  if (v3)
  {
    sub_10000BF1C(&qword_10017E470);
    int64_t v7 = (char *)swift_allocObject();
    size_t v8 = j__malloc_size(v7);
    sub_100116BB4((uint64_t)(v8 - 32) / 32);
  }
  else
  {
    int64_t v7 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v9 = v7 + 32;
  char v10 = v0 + 32;
  if (v1)
  {
    if (v7 != v0 || &v10[32 * v2] <= v9) {
      memmove(v9, v10, 32 * v2);
    }
    *((void *)v0 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
}

char *sub_100115074(char *result, uint64_t a2, char *a3)
{
  if (a3 != result || &result[40 * a2] <= a3) {
    return (char *)sub_100115C8C(a3, result);
  }
  return result;
}

char *sub_10011509C(char *result, uint64_t a2, char *a3)
{
  if (a3 != result || &result[80 * a2] <= a3) {
    return (char *)sub_100115C8C(a3, result);
  }
  return result;
}

char *sub_1001150C4(char *result, uint64_t a2, char *a3)
{
  if (a3 != result || &result[8 * a2] <= a3) {
    return (char *)sub_100115C8C(a3, result);
  }
  return result;
}

uint64_t sub_1001150E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000BF1C(&qword_100180EF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10011514C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, char a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  v27[3] = a13;
  v27[4] = a14;
  uint64_t v21 = sub_1000274F4(v27);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a13 - 8) + 16))(v21, a1, a13);
  sub_10010E544((uint64_t)v27, a2, a3, a4, a5, a6, a7, a8, (uint64_t *)v26, a9, a10, a11);
  sub_10011498C(&qword_10017D698, &qword_10017E910);
  uint64_t v22 = *(void *)(*(void *)(a12 + 16) + 16);
  sub_100114A9C(v22);
  uint64_t v23 = *(void *)(a12 + 16);
  *(void *)(v23 + 16) = v22 + 1;
  sub_10000D698(v26, v23 + 40 * v22 + 32);
  return sub_10000E788((uint64_t)v27);
}

uint64_t sub_100115290(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v18 = a4;
  v51[3] = a7;
  v51[4] = a9;
  uint64_t v19 = sub_1000274F4(v51);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 16))(v19, a1, a7);
  v50[3] = a8;
  v50[4] = a10;
  uint64_t v20 = sub_1000274F4(v50);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a8 - 8) + 16))(v20, a3, a8);
  sub_1001156D4(a2, (uint64_t)v48);
  sub_1001156D4((uint64_t)v50, (uint64_t)v49);
  sub_10000BF1C(&qword_100180EE8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013F9D0;
  sub_10011788C(v51, 0x204E474945524F46, 0xEB0000000059454BLL, (uint64_t *)(inited + 32));
  sub_1001156D4((uint64_t)v48, (uint64_t)v46);
  sub_1001156D4((uint64_t)v49, (uint64_t)v47);
  sub_100114510((uint64_t)v46, (uint64_t)v47, (uint64_t *)(inited + 72));
  sub_10000E788((uint64_t)v47);
  sub_10000E788((uint64_t)v46);
  if (v18 == 5)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    unint64_t v24 = 0;
    uint64_t v25 = 0;
    char v26 = 0;
  }
  else
  {
    *(void *)&v46[0] = 0x5441445055204E4FLL;
    *((void *)&v46[0] + 1) = 0xEA00000000002045;
    v27._uint64_t countAndFlagsBits = TableBuilder.Dependency.rawValue.getter(a4);
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    uint64_t v23 = *((void *)&v46[0] + 1);
    uint64_t v22 = *(void *)&v46[0];
    uint64_t v25 = sub_10000BF1C(&qword_100180D58);
    char v26 = &protocol witness table for Expression<A>;
    unint64_t v24 = _swiftEmptyArrayStorage;
  }
  *(void *)(inited + 112) = v22;
  *(void *)(inited + 120) = v23;
  *(void *)(inited + 128) = v24;
  *(void *)(inited + 136) = v25;
  *(void *)(inited + 144) = v26;
  if (a5 == 5)
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
  }
  else
  {
    *(void *)&v46[0] = 0x54454C4544204E4FLL;
    *((void *)&v46[0] + 1) = 0xEA00000000002045;
    v33._uint64_t countAndFlagsBits = TableBuilder.Dependency.rawValue.getter(a5);
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    uint64_t v29 = *((void *)&v46[0] + 1);
    uint64_t v28 = *(void *)&v46[0];
    uint64_t v31 = sub_10000BF1C(&qword_100180D58);
    uint64_t v32 = &protocol witness table for Expression<A>;
    uint64_t v30 = _swiftEmptyArrayStorage;
  }
  *(void *)(inited + 152) = v28;
  *(void *)(inited + 160) = v29;
  uint64_t v34 = 32;
  *(void *)(inited + 168) = v30;
  *(void *)(inited + 176) = v31;
  *(void *)(inited + 184) = v32;
  uint64_t v35 = _swiftEmptyArrayStorage;
  do
  {
    sub_100115B28(inited + v34, (uint64_t)v46, &qword_100180EF0);
    sub_1001150E4((uint64_t)v46, (uint64_t)&v43);
    if (v44)
    {
      sub_10000D698(&v43, (uint64_t)v45);
      sub_10000D698(v45, (uint64_t)&v43);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100114C6C(0, v35[2] + 1, 1, v35, &qword_10017D698, &qword_10017E910);
        uint64_t v35 = v38;
      }
      unint64_t v37 = v35[2];
      unint64_t v36 = v35[3];
      if (v37 >= v36 >> 1)
      {
        sub_100114C6C(v36 > 1, v37 + 1, 1, v35, &qword_10017D698, &qword_10017E910);
        uint64_t v35 = v39;
      }
      long long v35[2] = v37 + 1;
      sub_10000D698(&v43, (uint64_t)&v35[5 * v37 + 4]);
    }
    else
    {
      sub_100115734((uint64_t)&v43, &qword_100180EF0);
    }
    v34 += 40;
  }
  while (v34 != 192);
  swift_bridgeObjectRelease();
  sub_10011750C((uint64_t)v35, (uint64_t *)v46);
  swift_bridgeObjectRelease();
  sub_10011498C(&qword_10017D698, &qword_10017E910);
  uint64_t v40 = *(void *)(*(void *)(a6 + 16) + 16);
  sub_100114A9C(v40);
  uint64_t v41 = *(void *)(a6 + 16);
  *(void *)(v41 + 16) = v40 + 1;
  sub_10000D698(v46, v41 + 40 * v40 + 32);
  sub_100115734((uint64_t)v48, &qword_100180F10);
  sub_10000E788((uint64_t)v51);
  return sub_10000E788((uint64_t)v50);
}

uint64_t sub_1001156D4(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  sub_100115CD4();
  (*v3)(a2);
  return a2;
}

uint64_t sub_100115734(uint64_t a1, uint64_t *a2)
{
  sub_10000BF1C(a2);
  sub_100115CD4();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

unint64_t sub_100115790()
{
  unint64_t result = qword_100180F18;
  if (!qword_100180F18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180F18);
  }
  return result;
}

unint64_t sub_1001157E0()
{
  unint64_t result = qword_100180F20;
  if (!qword_100180F20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180F20);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TableBuilder.Dependency(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 4) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v5 = v6 - 5;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for TableBuilder.Dependency(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100115980);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

void type metadata accessor for TableBuilder.Dependency()
{
}

unsigned char *storeEnumTagSinglePayload for PrimaryKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100115A80);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for PrimaryKey()
{
}

void type metadata accessor for Module()
{
}

unint64_t sub_100115AC0()
{
  unint64_t result = qword_10017EC90;
  if (!qword_10017EC90)
  {
    sub_10000BFDC(&qword_10017DED8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017EC90);
  }
  return result;
}

uint64_t sub_100115B14(uint64_t a1, unint64_t a2)
{
  if (a2 >= 3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100115B28(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10000BF1C(a3);
  sub_100115CD4();
  sub_100115E8C();
  v4();
  return a2;
}

uint64_t sub_100115BC4(uint64_t a1)
{
  sub_10000E788(v1 - 128);
  return a1;
}

uint64_t sub_100115C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 - 112) = a1;
  *(void *)(v3 - 104) = a2;
  *(void *)(v3 - 96) = a3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100115C48()
{
  return v0;
}

uint64_t sub_100115C60(uint64_t a1)
{
  sub_10000E788(a1);
  return v1;
}

double sub_100115C7C()
{
  *(void *)(v0 - 128) = 0;
  double result = 0.0;
  *(_OWORD *)(v0 - 160) = 0u;
  *(_OWORD *)(v0 - 144) = 0u;
  return result;
}

void *sub_100115C8C@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

uint64_t sub_100115C9C(void *a1)
{
  sub_10000BEA0(a1, v1);
  return Expressible.asSQL()()._countAndFlagsBits;
}

uint64_t sub_100115CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  return sub_100115734((uint64_t)&a29, v29);
}

uint64_t sub_100115CF8()
{
  return type metadata accessor for Expression();
}

uint64_t sub_100115D10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 - 112) = a1;
  *(void *)(v3 - 104) = a2;
  *(void *)(v3 - 96) = a3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100115D60()
{
  return sub_100115734(v1 - 152, v0);
}

uint64_t sub_100115D94()
{
  return sub_100115734(v1 - 160, v0);
}

uint64_t sub_100115DAC()
{
  return type metadata accessor for Expression();
}

uint64_t sub_100115DC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 - 112) = a1;
  *(void *)(v3 - 104) = a2;
  *(void *)(v3 - 96) = a3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100115E14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 - 112) = a1;
  *(void *)(v3 - 104) = a2;
  *(void *)(v3 - 96) = a3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100115E98()
{
  return v0 - 112;
}

uint64_t sub_100115ED4()
{
  return v0 - 112;
}

uint64_t sub_100115F10()
{
  return v0 - 112;
}

uint64_t sub_100115F48()
{
  return sub_10002A464(v0, v1);
}

uint64_t sub_100115F74()
{
  return v0;
}

uint64_t sub_100115F8C()
{
  return v0 - 112;
}

uint64_t sub_100115FC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 - 112) = a1;
  *(void *)(v3 - 104) = a2;
  *(void *)(v3 - 96) = a3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100115FE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 - 112) = a1;
  *(void *)(v3 - 104) = a2;
  *(void *)(v3 - 96) = a3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_10011602C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 - 112) = a1;
  *(void *)(v3 - 104) = a2;
  *(void *)(v3 - 96) = a3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100116070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return sub_10011514C(a1, v15, v14, 2u, 1, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

double sub_10011609C()
{
  double result = 0.0;
  *(_OWORD *)(v0 - 272) = 0u;
  *(_OWORD *)(v0 - 288) = 0u;
  *(_OWORD *)(v0 - 304) = 0u;
  *(_OWORD *)(v0 - 320) = 0u;
  *(_OWORD *)(v0 - 336) = 0u;
  return result;
}

uint64_t sub_1001160D0()
{
  return v0 - 112;
}

uint64_t sub_100116104()
{
  return v0 - 112;
}

uint64_t sub_100116150()
{
  return v0 - 112;
}

uint64_t sub_10011619C()
{
  return v0 - 112;
}

uint64_t sub_1001161CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 - 112) = a1;
  *(void *)(v3 - 104) = a2;
  *(void *)(v3 - 96) = a3;
  return swift_bridgeObjectRetain();
}

void sub_100116204(char a1, uint64_t a2)
{
  sub_100114C6C(a1, a2, 1, v2, v3, v4);
}

double sub_100116224()
{
  return 0.0;
}

uint64_t sub_100116238@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t *a5@<X8>, uint64_t a6, uint64_t a7, unint64_t a8)
{
  return sub_10010E544(a1, a2, v8, 2u, 0, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_100116258()
{
  return v0 - 168;
}

uint64_t sub_100116280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,long long a29,long long a30,uint64_t a31)
{
  *(void *)(v35 - 128) = a1;
  *(void *)(v35 - 120) = v31;
  *(void *)(v35 - 152) = v34;
  *(void *)(v35 - 144) = v33;
  *(void *)(v35 - 136) = v32;
  a31 = 0;
  a29 = 0u;
  a30 = 0u;
  return sub_1001156D4(a15, (uint64_t)&a19);
}

uint64_t sub_1001162B4(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 - 112) = result;
  *(void *)(v3 - 104) = a2;
  *(void *)(v3 - 96) = a3;
  return result;
}

uint64_t sub_1001162DC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100116300(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  return sub_10011514C(a1, v30, v29, a4, 0, 0, a7, (uint64_t)&a29, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_10011634C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,long long a29,long long a30,uint64_t a31)
{
  *(void *)(v35 - 128) = a1;
  *(void *)(v35 - 120) = v32;
  *(void *)(v35 - 152) = v31;
  *(void *)(v35 - 144) = v34;
  *(void *)(v35 - 136) = v33;
  a31 = 0;
  a29 = 0u;
  a30 = 0u;
  return sub_1001156D4(a15, (uint64_t)&a19);
}

uint64_t sub_100116380()
{
  return v0;
}

uint64_t sub_100116398()
{
  return v0 - 168;
}

void sub_1001163E0(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10011750C(a1, a2);
}

uint64_t sub_1001163F8()
{
  return sub_10002A464(v1, v0);
}

uint64_t sub_100116444()
{
  return v0 - 168;
}

uint64_t sub_100116484@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t *a6@<X8>, uint64_t a7, uint64_t a8, unint64_t a9)
{
  return sub_10010E544(a1, a2, a3, 2u, 1, 0, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_1001164A0()
{
  return v0 - 112;
}

uint64_t sub_1001164D0()
{
  return sub_10002A464(v1, v0);
}

uint64_t sub_1001164FC()
{
  return sub_10002A464(v1, v0);
}

double sub_100116528()
{
  return 0.0;
}

double sub_100116550()
{
  return 0.0;
}

double sub_100116560()
{
  return 0.0;
}

uint64_t sub_100116574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, char a19)
{
  return sub_10011514C(a1, a2, v19, 2u, 1, a19, a7, a8, a9, a10, a11, a12, a13, a14);
}

void sub_100116594(uint64_t *a1@<X8>)
{
  sub_10011750C(v1, a1);
}

void sub_1001165B0(uint64_t *a1@<X8>)
{
  sub_10011750C(v1, a1);
}

uint64_t sub_1001165D8()
{
  return sub_10002A464(v1, v0);
}

uint64_t *sub_100116604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(void *)(v37 - 128) = a1;
  *(void *)(v37 - 120) = v31;
  *(void *)(v37 - 152) = v35;
  *(void *)(v37 - 144) = v33;
  *(void *)(v37 - 136) = v32;
  uint64_t v39 = *(void *)(v36 + 8);
  a30 = v34;
  a31 = v39;
  return sub_1000274F4(&a27);
}

uint64_t *sub_10011662C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  *(void *)(v39 - 128) = a1;
  *(void *)(v39 - 120) = v33;
  *(void *)(v39 - 152) = v37;
  *(void *)(v39 - 144) = v35;
  *(void *)(v39 - 136) = v34;
  uint64_t v41 = *(void *)(v38 + 8);
  a32 = v36;
  a33 = v41;
  return sub_1000274F4(&a29);
}

uint64_t sub_100116654()
{
  return v0;
}

uint64_t sub_100116670()
{
  return type metadata accessor for Expression();
}

uint64_t sub_100116688()
{
  return type metadata accessor for Expression();
}

uint64_t sub_1001166A0()
{
  return type metadata accessor for Expression();
}

uint64_t sub_1001166B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,long long a29,long long a30,uint64_t a31)
{
  a31 = 0;
  a29 = 0u;
  a30 = 0u;
  return sub_1001156D4(a16, (uint64_t)&a19);
}

void sub_1001166E0(char a1, uint64_t a2, char a3, void *a4)
{
  sub_100114C6C(a1, a2, a3, a4, v4, v5);
}

uint64_t sub_1001166F8()
{
  return type metadata accessor for Optional();
}

uint64_t sub_100116720()
{
  return swift_bridgeObjectRetain();
}

void sub_100116748()
{
  *(void *)(*(void *)(v0 + 16) + 16) = v1 + 1;
}

uint64_t sub_100116764(uint64_t a1)
{
  return sub_10002A464(a1, v1);
}

uint64_t sub_1001167B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  return sub_100115734((uint64_t)&a31, v31);
}

uint64_t sub_1001167E4()
{
  sub_10000E788(v0 - 168);
  return sub_10010E9F0(v0 - 128);
}

uint64_t sub_100116814()
{
  sub_10000E788(v0 - 168);
  return sub_10010E9F0(v0 - 128);
}

uint64_t sub_100116860()
{
  return v0 - 168;
}

uint64_t sub_100116870()
{
  return v0 - 112;
}

uint64_t sub_100116888()
{
  return v0 - 168;
}

uint64_t sub_1001168A0(uint64_t result)
{
  *(void *)(v5 - 128) = result;
  *(void *)(v5 - 120) = v1;
  *(void *)(v5 - 152) = v3;
  *(void *)(v5 - 144) = v4;
  *(void *)(v5 - 136) = v2;
  return result;
}

uint64_t sub_1001168B0(uint64_t a1)
{
  return sub_10002A464(a1, v1);
}

uint64_t sub_1001168C8()
{
  return v0;
}

uint64_t sub_1001168E0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100116904()
{
  return type metadata accessor for Expression();
}

uint64_t sub_100116958(uint64_t result)
{
  *(void *)(v5 - 136) = result;
  *(void *)(v5 - 128) = v1;
  *(void *)(v5 - 160) = v2;
  *(void *)(v5 - 152) = v3;
  *(void *)(v5 - 144) = v4;
  return result;
}

uint64_t sub_100116968(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 - 112) = a1;
  *(void *)(v3 - 104) = a2;
  *(void *)(v3 - 96) = a3;
  return swift_bridgeObjectRetain();
}

double sub_10011698C()
{
  return 0.0;
}

uint64_t sub_1001169A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,long long a29,long long a30,uint64_t a31)
{
  a31 = 0;
  a29 = 0u;
  a30 = 0u;
  return sub_1001156D4(a16, (uint64_t)&a19);
}

uint64_t sub_1001169C8()
{
  return v0;
}

uint64_t sub_1001169E0()
{
  return 34;
}

void sub_1001169EC()
{
  uint64_t v2 = *(void *)(*(void *)(v0 + 16) + 16);
  sub_100114A9C(v2);
}

uint64_t sub_100116A10()
{
  return v0;
}

uint64_t sub_100116A28()
{
  return type metadata accessor for Optional();
}

uint64_t sub_100116A40()
{
  return type metadata accessor for Optional();
}

void sub_100116A64()
{
  *(void *)(v3 - 160) = v2;
  *(void *)(v3 - 152) = v1;
  *(void *)(v3 - 144) = v0;
}

double sub_100116A98()
{
  return 0.0;
}

double sub_100116AAC()
{
  return 0.0;
}

uint64_t sub_100116AC0()
{
  return 0x5845444E49;
}

double sub_100116AD4()
{
  return 0.0;
}

uint64_t sub_100116AE8()
{
  return type metadata accessor for Expression();
}

uint64_t sub_100116B00()
{
  return type metadata accessor for Expression();
}

uint64_t sub_100116B18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return sub_10011514C(a1, v15, v14, 2u, 0, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_100116B4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return sub_10011514C(a1, v15, v14, 2u, 1, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

void sub_100116B6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10)
{
  sub_10011750C(v10, a10);
}

void sub_100116BB4(uint64_t a1@<X8>)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = 2 * a1;
}

uint64_t sub_100116BC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  return sub_100115734((uint64_t)&a28, v28);
}

uint64_t sub_100116BD8()
{
  return sub_100117940(34, (void *)0xE100000000000000, v1, v0);
}

uint64_t sub_100116BF8()
{
  return sub_100117940(34, (void *)0xE100000000000000, v0, v1);
}

uint64_t sub_100116C18()
{
  return sub_100117940(34, (void *)0xE100000000000000, v1, v0);
}

uint64_t sub_100116C38()
{
  return sub_100117940(34, (void *)0xE100000000000000, v0, v1);
}

uint64_t sub_100116C6C()
{
  return 0;
}

uint64_t static Table.identifier.getter()
{
  return 0x454C424154;
}

Swift::String __swiftcall Blob.toHex()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = v0;
    swift_bridgeObjectRetain();
    sub_100057848();
    sub_1001173A4();
    uint64_t v3 = 0;
    do
    {
      unsigned int v4 = *(unsigned __int8 *)(v2 + v3 + 32);
      if (v4 >= 0x10) {
        uint64_t v5 = 0;
      }
      else {
        uint64_t v5 = 48;
      }
      if (v4 >= 0x10) {
        unint64_t v6 = 0xE000000000000000;
      }
      else {
        unint64_t v6 = 0xE100000000000000;
      }
      uint64_t v7 = String.init<A>(_:radix:uppercase:)();
      uint64_t v9 = v8;
      swift_bridgeObjectRetain();
      v10._uint64_t countAndFlagsBits = v7;
      v10._unint64_t object = v9;
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v11 = _swiftEmptyArrayStorage[2];
      if (v11 >= _swiftEmptyArrayStorage[3] >> 1) {
        sub_100057848();
      }
      ++v3;
      _swiftEmptyArrayStorage[2] = v11 + 1;
      uint64_t v12 = &_swiftEmptyArrayStorage[2 * v11];
      v12[4] = v5;
      v12[5] = v6;
    }
    while (v1 != v3);
    swift_bridgeObjectRelease();
  }
  sub_10000BF1C(&qword_10017DED8);
  sub_100115AC0();
  uint64_t v13 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = v13;
  uint64_t v17 = v15;
  result._unint64_t object = v17;
  result._uint64_t countAndFlagsBits = v16;
  return result;
}

uint64_t Blob.description.getter()
{
  Swift::String v0 = Blob.toHex()();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 39;
  v1._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 10104;
}

uint64_t sub_100116EBC()
{
  return Blob.description.getter();
}

uint64_t sub_100116EC4(void *a1, void *a2)
{
  return == infix(_:_:)(*a1, *a2);
}

BOOL sub_100116ED4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32)) {
    return 0;
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v4 = v2 - 2;
  uint64_t v5 = (unsigned __int8 *)(a1 + 33);
  unint64_t v6 = (unsigned __int8 *)(a2 + 33);
  do
  {
    int v8 = *v5++;
    int v7 = v8;
    int v10 = *v6++;
    int v9 = v10;
    BOOL v12 = v4-- != 0;
    BOOL result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

void sub_100116F48()
{
  sub_100117134();
  void *v0 = v1;
}

void sub_100116F8C()
{
  sub_100117224();
  void *v0 = v1;
}

char *sub_100116FD0(char *a1, int64_t a2, char a3)
{
  BOOL result = sub_100117034(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

void sub_100116FF0()
{
  sub_100117134();
  void *v0 = v1;
}

char *sub_100117034(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000BF1C(&qword_10017E940);
    int v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    int v10 = (char *)_swiftEmptyArrayStorage;
  }
  if (v5)
  {
    sub_10011509C((char *)(a4 + 32), v8, v10 + 32);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

void sub_100117134()
{
  sub_1000283A8();
  if (v6)
  {
    sub_1000282CC();
    if (v8 != v9)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return;
      }
      sub_1000282BC();
    }
  }
  else
  {
    uint64_t v7 = v4;
  }
  uint64_t v10 = *(void *)(v0 + 16);
  if (v7 <= v10) {
    uint64_t v11 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v11 = v7;
  }
  if (v11)
  {
    sub_10000BF1C(v5);
    BOOL v12 = (void *)swift_allocObject();
    size_t v13 = j__malloc_size(v12);
    v12[2] = v10;
    v12[3] = 2 * ((uint64_t)(v13 - 32) / 40);
  }
  else
  {
    BOOL v12 = _swiftEmptyArrayStorage;
  }
  if (v3)
  {
    v1(v0 + 32, v10, v12 + 4);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    sub_10000BF1C(v2);
    sub_1001174EC();
  }
  swift_release();
}

void sub_100117224()
{
  sub_1000283A8();
  if (v6)
  {
    sub_1000282CC();
    if (v8 != v9)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return;
      }
      sub_1000282BC();
    }
  }
  else
  {
    uint64_t v7 = v4;
  }
  uint64_t v10 = *(void *)(v0 + 16);
  if (v7 <= v10) {
    uint64_t v11 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v11 = v7;
  }
  if (v11)
  {
    sub_10000BF1C(v5);
    BOOL v12 = (void *)swift_allocObject();
    size_t v13 = j__malloc_size(v12);
    v12[2] = v10;
    v12[3] = 2 * ((uint64_t)(v13 - 32) / 8);
  }
  else
  {
    BOOL v12 = _swiftEmptyArrayStorage;
  }
  if (v3)
  {
    v1(v0 + 32, v10, v12 + 4);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    sub_10000BF1C(v2);
    sub_1001174EC();
  }
  swift_release();
}

void *_s17AppIntents_SQLite4BlobV5bytes6lengthACSV_SitcfC_0(const void *a1, int64_t a2)
{
  if (!a2) {
    return _swiftEmptyArrayStorage;
  }
  if (a2 <= 0)
  {
    uint64_t v4 = _swiftEmptyArrayStorage;
  }
  else
  {
    sub_10000BF1C(&qword_10017CD68);
    uint64_t v4 = (void *)swift_allocObject();
    size_t v5 = j__malloc_size(v4);
    v4[2] = a2;
    v4[3] = 2 * v5 - 64;
  }
  memcpy(v4 + 4, a1, a2);
  return v4;
}

unint64_t sub_1001173A4()
{
  unint64_t result = qword_100180FE8;
  if (!qword_100180FE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180FE8);
  }
  return result;
}

ValueMetadata *type metadata accessor for Blob()
{
  return &type metadata for Blob;
}

void *sub_100117400(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000BF1C((uint64_t *)&unk_10017E690);
  char v3 = (void *)swift_allocObject();
  j__malloc_size(v3);
  sub_1001174D8();
  v3[2] = v1;
  v3[3] = v4;
  uint64_t v5 = sub_100132E48((uint64_t)&v7, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_100027664();
  if (v5 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

uint64_t sub_1001174EC()
{
  return swift_arrayInitWithCopy();
}

void sub_10011750C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = a2;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = (void *)(a1 + 32);
    swift_bridgeObjectRetain();
    uint64_t v5 = _swiftEmptyArrayStorage;
    char v6 = _swiftEmptyArrayStorage;
    while (1)
    {
      uint64_t v7 = v4[3];
      uint64_t v8 = v4[4];
      sub_10000BEA0(v4, v7);
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
      uint64_t v11 = v10;
      uint64_t v13 = v12;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10001E7C0();
        uint64_t v5 = v22;
      }
      unint64_t v14 = v5[2];
      if (v14 >= v5[3] >> 1)
      {
        sub_10001E7C0();
        uint64_t v5 = v23;
      }
      long long v5[2] = v14 + 1;
      uint64_t v15 = &v5[2 * v14];
      v15[4] = v9;
      v15[5] = v11;
      uint64_t v16 = *(void *)(v13 + 16);
      uint64_t v17 = v6[2];
      if (__OFADD__(v17, v16)) {
        break;
      }
      swift_bridgeObjectRetain();
      if (!swift_isUniquelyReferenced_nonNull_native() || v17 + v16 > v6[3] >> 1)
      {
        sub_100114B54();
        char v6 = v18;
      }
      if (*(void *)(v13 + 16))
      {
        if ((v6[3] >> 1) - v6[2] < v16) {
          goto LABEL_23;
        }
        sub_10000BF1C(&qword_10017DEC0);
        swift_arrayInitWithCopy();
        if (v16)
        {
          uint64_t v19 = v6[2];
          BOOL v20 = __OFADD__(v19, v16);
          uint64_t v21 = v19 + v16;
          if (v20) {
            goto LABEL_24;
          }
          uint64_t v6[2] = v21;
        }
      }
      else if (v16)
      {
        goto LABEL_22;
      }
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      v4 += 5;
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        uint64_t v2 = a2;
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  else
  {
    char v6 = _swiftEmptyArrayStorage;
LABEL_20:
    sub_10000BF1C(&qword_10017DED8);
    sub_100034754((unint64_t *)&qword_10017EC90, &qword_10017DED8);
    uint64_t v24 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v26 = v25;
    swift_bridgeObjectRelease();
    v2[3] = sub_10000BF1C(&qword_100180D58);
    v2[4] = (uint64_t)&protocol witness table for Expression<A>;
    *uint64_t v2 = v24;
    v2[1] = v26;
    long long v2[2] = (uint64_t)v6;
  }
}

uint64_t sub_1001177BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  swift_bridgeObjectRetain();
  v6._uint64_t countAndFlagsBits = 32;
  v6._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  uint64_t v7 = v18;
  uint64_t v8 = v19;
  sub_10011750C(a1, &v18);
  uint64_t v9 = v20;
  uint64_t v10 = v21;
  uint64_t v11 = sub_10000BEA0(&v18, v20);
  uint64_t v12 = sub_100118154((uint64_t)v11, v7, v8, v9, v10);
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  sub_10000E788((uint64_t)&v18);
  swift_bridgeObjectRelease();
  uint64_t result = sub_10000BF1C(&qword_100180D58);
  a4[3] = result;
  a4[4] = (uint64_t)&protocol witness table for Expression<A>;
  *a4 = v12;
  a4[1] = v14;
  a4[2] = v16;
  return result;
}

uint64_t sub_10011788C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  swift_bridgeObjectRetain();
  v6._uint64_t countAndFlagsBits = 32;
  v6._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = sub_10000BEA0(a1, v7);
  uint64_t v10 = sub_100118154((uint64_t)v9, a2, a3, v7, v8);
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  uint64_t result = sub_10000BF1C(&qword_100180D58);
  a4[3] = result;
  a4[4] = (uint64_t)&protocol witness table for Expression<A>;
  *a4 = v10;
  a4[1] = v12;
  a4[2] = v14;
  return result;
}

uint64_t sub_100117940(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  swift_bridgeObjectRetain();
  uint64_t v8 = sub_10011E7B8(0, 0xE000000000000000, a3, a4, a1, a2);
  uint64_t v10 = v9;
  sub_1001182B8();
  v11._uint64_t countAndFlagsBits = v8;
  v11._unint64_t object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  sub_1001182B8();
  return 0;
}

uint64_t sub_1001179F8(void *a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = 40;
  v3._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  uint64_t v4 = a1[4];
  sub_10000BEA0(a1, a1[3]);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 8);
  uint64_t v6 = sub_1001182A4();
  uint64_t v7 = v5(v6);
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = v7;
  v10._unint64_t object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 41;
  v11._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  uint64_t v12 = sub_1001182A4();
  v5(v12);
  swift_bridgeObjectRelease();

  return Int64.datatypeValue.getter(a2);
}

uint64_t * infix(_:_:)()
{
  return 42;
}

void sub_100117B10()
{
  qword_100182468 = -1;
}

uint64_t sub_100117B20(uint64_t a1, uint64_t a2, char a3, uint64_t a4, void *a5)
{
  sub_10000BF1C(&qword_10017D698);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013F1D0;
  sub_10000C0D4(a1, inited + 32);
  sub_10000C0D4(a2, inited + 72);
  uint64_t v11 = sub_100117BF0(inited, a3, a4, a5);
  swift_setDeallocating();
  sub_10006F144();
  return v11;
}

uint64_t sub_100117BF0(uint64_t a1, char a2, uint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for Expression();
  uint64_t v21 = 32;
  unint64_t v22 = 0xE100000000000000;
  v9._uint64_t countAndFlagsBits = a3;
  v9._unint64_t object = a4;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = 32;
  v10._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  sub_10011750C(a1, &v21);
  swift_bridgeObjectRelease();
  uint64_t v11 = v24;
  uint64_t v12 = v25;
  sub_10000BEA0(&v21, v24);
  v20[0] = ((uint64_t (*)(uint64_t, _UNKNOWN **))v12[1])(v11, v12);
  v20[1] = v13;
  void v20[2] = v14;
  uint64_t v15 = sub_10000BF1C(&qword_100180D58);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v17 = sub_100034754(&qword_100181010, &qword_100180D58);
  ExpressionType.init<A>(_:)((uint64_t)v20, v8, v15, WitnessTable, v17);
  sub_10000E788((uint64_t)&v21);
  uint64_t v18 = v26;
  if (a2)
  {
    uint64_t v24 = v8;
    uint64_t v25 = &protocol witness table for Expression<A>;
    uint64_t v21 = v26;
    unint64_t v22 = v27;
    uint64_t v23 = v28;
    uint64_t v18 = sub_1001179F8(&v21, 0);
    sub_10000E788((uint64_t)&v21);
  }
  return v18;
}

uint64_t sub_100117D98(uint64_t a1)
{
  sub_1000FE754(a1, (uint64_t)&v8);
  if (v9)
  {
    sub_10000D698(&v8, (uint64_t)v10);
    sub_10000C0D4((uint64_t)v10, (uint64_t)&v8);
    sub_10000BF1C(&qword_10017DEC8);
    if (swift_dynamicCast())
    {
      uint64_t v6 = 10104;
      uint64_t v7 = 0xE200000000000000;
      Swift::String v1 = Blob.toHex()();
      String.append(_:)(v1);
      swift_bridgeObjectRelease();
      v2._uint64_t countAndFlagsBits = 39;
      v2._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v2);
      swift_bridgeObjectRelease();
      uint64_t v3 = 10104;
    }
    else
    {
      if (!swift_dynamicCast())
      {
        sub_10000D698(&v8, (uint64_t)&v6);
        _print_unlocked<A, B>(_:_:)();
        uint64_t v3 = 0;
        sub_10000E788((uint64_t)&v6);
        uint64_t v4 = (long long *)v10;
        goto LABEL_9;
      }
      uint64_t v3 = sub_100117940(39, (void *)0xE100000000000000, v6, v7);
      swift_bridgeObjectRelease();
    }
    sub_10000E788((uint64_t)v10);
    uint64_t v4 = &v8;
LABEL_9:
    sub_10000E788((uint64_t)v4);
    return v3;
  }
  sub_1000FE7BC((uint64_t)&v8);
  return 1280070990;
}

uint64_t sub_100117F24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v9 = &v13[-v8 - 8];
  uint64_t v10 = swift_getAssociatedTypeWitness();
  __chkstk_darwin(v10);
  sub_10000C0D4(a1, (uint64_t)v13);
  sub_10000BF1C(&qword_10017DEC8);
  swift_dynamicCast();
  (*(void (**)(char *, uint64_t, uint64_t))(a3 + 48))(v9, a2, a3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  return swift_dynamicCast();
}

uint64_t sub_1001180E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1000FE754(a1, (uint64_t)v6);
  if (v7)
  {
    sub_100117F24((uint64_t)v6, a2, a3);
    return sub_10000E788((uint64_t)v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100118154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v20 = a4;
  uint64_t v21 = a5;
  uint64_t v9 = sub_1000274F4(v19);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(v9, a1, a4);
  swift_bridgeObjectRetain();
  v10._uint64_t countAndFlagsBits = 40;
  v10._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  sub_10000BEA0(v19, v20);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 8);
  uint64_t v12 = v11(a4, a5);
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = v12;
  v15._unint64_t object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = 41;
  v16._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  uint64_t v17 = sub_1001182A4();
  ((void (*)(uint64_t))v11)(v17);
  swift_bridgeObjectRelease();
  sub_10000E788((uint64_t)v19);
  return a2;
}

uint64_t sub_1001182A4()
{
  return v0;
}

uint64_t sub_1001182B8()
{
  return Character.write<A>(to:)();
}

void sub_1001182DC()
{
  sub_100059E50();
  if (v5)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_100059F50() || v4 > *(void *)(v2 + 24) >> 1)
  {
    sub_100059F24();
    sub_100114B54();
    uint64_t v2 = v6;
  }
  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  sub_100059E28();
  if (v7 != v5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_10000BF1C(&qword_10017DEC0);
  swift_arrayInitWithCopy();
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    *Swift::String v1 = v2;
    return;
  }
  sub_100059F18();
  if (!v5)
  {
    *(void *)(v2 + 16) = v8;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_1001183AC(uint64_t a1)
{
}

void sub_1001183CC()
{
  sub_100059E50();
  if (v5)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_100059F50() || v4 > *(void *)(v2 + 24) >> 1)
  {
    sub_100059F24();
    sub_100114EAC();
    uint64_t v2 = v6;
  }
  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  sub_100059E28();
  if (v7 != v5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  swift_arrayInitWithCopy();
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    *Swift::String v1 = v2;
    return;
  }
  sub_100059F18();
  if (!v5)
  {
    *(void *)(v2 + 16) = v8;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_10011848C(uint64_t a1)
{
}

void sub_1001184AC(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *v4;
  uint64_t v7 = *(void *)(*v4 + 16);
  if (__OFADD__(v7, v5))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_100059F50() || v7 + v5 > *(void *)(v6 + 24) >> 1)
  {
    sub_100059F24();
    uint64_t v6 = a2();
  }
  if (!*(void *)(v3 + 16))
  {
    if (!v5) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  sub_100059E28();
  if (v10 != v11)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_10000BF1C(a3);
  swift_arrayInitWithCopy();
  if (!v5)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    *uint64_t v4 = v6;
    return;
  }
  sub_100059F18();
  if (!v11)
  {
    *(void *)(v6 + 16) = v12;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

uint64_t sub_100118598(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v7 = sub_10011861C(a4);
  uint64_t v9 = sub_100117B20(a1, a2, a3, v7, v8);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_10011861C(char a1)
{
  uint64_t result = 43;
  switch(a1)
  {
    case 1:
      uint64_t result = 45;
      break;
    case 2:
      uint64_t result = 21071;
      break;
    case 3:
      uint64_t result = 4476481;
      break;
    case 4:
      uint64_t result = 542396238;
      break;
    case 5:
      uint64_t result = 42;
      break;
    case 6:
      uint64_t result = 47;
      break;
    case 7:
      uint64_t result = 37;
      break;
    case 8:
      uint64_t result = 15420;
      break;
    case 9:
      uint64_t result = 15934;
      break;
    case 10:
      uint64_t result = 38;
      break;
    case 11:
      uint64_t result = 124;
      break;
    case 12:
      uint64_t result = 126;
      break;
    case 13:
      uint64_t result = 61;
      break;
    case 14:
      uint64_t result = 15649;
      break;
    case 15:
      uint64_t result = 62;
      break;
    case 16:
      uint64_t result = 60;
      break;
    case 17:
      uint64_t result = 15678;
      break;
    case 18:
      uint64_t result = 15676;
      break;
    case 19:
      uint64_t result = 31868;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100118760(void *a1, char a2)
{
  uint64_t v3 = sub_10011861C(a2);
  uint64_t v4 = sub_1001179F8(a1, v3);
  swift_bridgeObjectRelease();
  return v4;
}

#error "1001187F4: call analysis failed (funcsize=11)"

#error "100118830: call analysis failed (funcsize=12)"

#error "10011886C: call analysis failed (funcsize=12)"

void sub_10011887C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,_UNKNOWN **a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,_UNKNOWN **a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  sub_10011D37C();
  a49 = v50;
  a50 = v51;
  uint64_t v53 = v52;
  uint64_t v55 = v54;
  uint64_t v57 = v56;
  uint64_t v59 = v58;
  uint64_t v61 = v60;
  uint64_t v63 = v62;
  uint64_t v65 = v64;
  a36 = sub_10000BF1C(v66);
  a37 = &protocol witness table for Expression<A>;
  a33 = v65;
  a34 = v63;
  a35 = v61;
  a31 = sub_10000BF1C(v53);
  a32 = &protocol witness table for Expression<A>;
  a28 = v59;
  a29 = v57;
  a30 = v55;
  sub_10000BF1C(&qword_10017D698);
  uint64_t inited = (__n128 *)swift_initStackObject();
  sub_10011D46C(inited, (__n128)xmmword_10013F1D0);
  sub_10000C0D4((uint64_t)&a28, (uint64_t)&inited[4].n128_i64[1]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10011750C((uint64_t)inited, &a9);
  uint64_t v68 = sub_10011D2E8(&a9);
  v69(v68);
  sub_10011D410((uint64_t)&a9);
  sub_10011D65C();
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_10006F144();
  sub_10000E788((uint64_t)&a28);
  sub_10000E788((uint64_t)&a33);
  sub_10011D510();
  sub_10011D360();
}

#error "1001189D8: call analysis failed (funcsize=11)"

void sub_1001189E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,_UNKNOWN **a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,_UNKNOWN **a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  sub_10011D37C();
  a49 = v50;
  a50 = v51;
  uint64_t v53 = v52;
  uint64_t v55 = v54;
  uint64_t v57 = v56;
  uint64_t v59 = v58;
  uint64_t v61 = v60;
  uint64_t v63 = v62;
  a37 = sub_10000BF1C(v64);
  a38 = &protocol witness table for Expression<A>;
  a34 = v63;
  a35 = v61;
  a36 = v59;
  a32 = a37;
  a33 = &protocol witness table for Expression<A>;
  a29 = v57;
  a30 = v55;
  a31 = v53;
  sub_10000BF1C(&qword_10017D698);
  uint64_t inited = (__n128 *)swift_initStackObject();
  sub_10011D51C(inited, (__n128)xmmword_10013F1D0);
  sub_10000C0D4((uint64_t)&a29, (uint64_t)&inited[4].n128_i64[1]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10011750C((uint64_t)inited, &a10);
  uint64_t v66 = sub_10011D2E8(&a10);
  v67(v66);
  sub_10011D410((uint64_t)&a10);
  sub_10011D65C();
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_10006F144();
  sub_10000E788((uint64_t)&a29);
  sub_10000E788((uint64_t)&a34);
  sub_10011D510();
  sub_10011D360();
}

void + infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,_UNKNOWN **a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,_UNKNOWN **a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  sub_100118B34(a1, a2, a3, a4, a5, (uint64_t)&unk_10017E920, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    a46,
    a47,
    a48);
}

{
  sub_100118B34(a1, a2, a3, a4, a5, (uint64_t)&qword_10017D678, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    a46,
    a47,
    a48);
}

void sub_100118B34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,_UNKNOWN **a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,_UNKNOWN **a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  sub_10011D75C();
  a47 = v53;
  a48 = v54;
  sub_10011D710();
  a37 = sub_10000BF1C(v55);
  a38 = &protocol witness table for Expression<A>;
  a34 = v52;
  a35 = v51;
  a36 = v50;
  a32 = &type metadata for String;
  a33 = &protocol witness table for String;
  a29 = v49;
  a30 = v48;
  sub_10000BF1C(&qword_10017D698);
  uint64_t inited = (__n128 *)swift_initStackObject();
  sub_10011D6F4(inited, (__n128)xmmword_10013F1D0);
  sub_10011DF10();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v57 = swift_bridgeObjectRetain();
  sub_10011DE0C(v57);
  uint64_t v58 = sub_10011D2E8(&a10);
  v59(v58);
  sub_10011D410((uint64_t)&a10);
  sub_10011D65C();
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_10006F144();
  sub_10000E788((uint64_t)&a29);
  sub_10000E788((uint64_t)&a34);
  sub_10011D510();
  sub_10011D7C0();
}

void + infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,_UNKNOWN **a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,_UNKNOWN **a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  sub_100118C4C(a1, a2, a3, a4, a5, (uint64_t)&unk_10017E920, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    a46,
    a47,
    a48);
}

{
  sub_100118C4C(a1, a2, a3, a4, a5, (uint64_t)&qword_10017D678, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    a46,
    a47,
    a48);
}

void sub_100118C4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,_UNKNOWN **a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,_UNKNOWN **a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  sub_10011D75C();
  a47 = v48;
  a48 = v49;
  uint64_t v51 = v50;
  uint64_t v53 = v52;
  uint64_t v55 = v54;
  a37 = &type metadata for String;
  a38 = &protocol witness table for String;
  a34 = v56;
  a35 = v57;
  a32 = sub_10000BF1C(v58);
  a33 = &protocol witness table for Expression<A>;
  a29 = v55;
  a30 = v53;
  a31 = v51;
  sub_10000BF1C(&qword_10017D698);
  uint64_t inited = (__n128 *)swift_initStackObject();
  sub_10011D6F4(inited, (__n128)xmmword_10013F1D0);
  sub_10011DF10();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v60 = swift_bridgeObjectRetain();
  sub_10011DE0C(v60);
  uint64_t v61 = sub_10011D2E8(&a10);
  v62(v61);
  sub_10011D410((uint64_t)&a10);
  sub_10011D65C();
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_10006F144();
  sub_10000E788((uint64_t)&a29);
  sub_10000E788((uint64_t)&a34);
  sub_10011D510();
  sub_10011D7C0();
}

uint64_t + infix<A>(_:_:)()
{
  return sub_100118F90();
}

{
  sub_10011DCD0();
  return sub_100119038();
}

{
  sub_10011DCD0();
  return sub_1001190E0();
}

{
  sub_10011DCD0();
  return sub_1001191B4();
}

uint64_t + infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_10011923C(a1, a2, a3, a4, a5, a6, a7, 0);
}

{
  return sub_1001192DC(a1, a2, a3, a4, a5, a6, a7, 0);
}

{
  return sub_100119380(a1, a2, a3, a4, a5, a6, a7, 0);
}

{
  return sub_100119424(a1, a2, a3, a4, a5, a6, a7, 0);
}

uint64_t - infix<A>(_:_:)()
{
  return sub_100118F90();
}

{
  sub_10011D9F0();
  return sub_100119038();
}

{
  sub_10011D9F0();
  return sub_1001190E0();
}

{
  sub_10011D9F0();
  return sub_1001191B4();
}

uint64_t - infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_10011923C(a1, a2, a3, a4, a5, a6, a7, 1);
}

{
  return sub_1001192DC(a1, a2, a3, a4, a5, a6, a7, 1);
}

{
  return sub_100119380(a1, a2, a3, a4, a5, a6, a7, 1);
}

{
  return sub_100119424(a1, a2, a3, a4, a5, a6, a7, 1);
}

uint64_t * infix<A>(_:_:)()
{
  return sub_100118F90();
}

{
  sub_10011DA18();
  return sub_100119038();
}

{
  sub_10011DA18();
  return sub_1001190E0();
}

{
  sub_10011DA18();
  return sub_1001191B4();
}

uint64_t * infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_10011923C(a1, a2, a3, a4, a5, a6, a7, 5);
}

{
  return sub_1001192DC(a1, a2, a3, a4, a5, a6, a7, 5);
}

{
  return sub_100119380(a1, a2, a3, a4, a5, a6, a7, 5);
}

{
  return sub_100119424(a1, a2, a3, a4, a5, a6, a7, 5);
}

uint64_t / infix<A>(_:_:)()
{
  return sub_100118F90();
}

{
  sub_10011DA04();
  return sub_100119038();
}

{
  sub_10011DA04();
  return sub_1001190E0();
}

{
  sub_10011DA04();
  return sub_1001191B4();
}

#error "100118FE0: call analysis failed (funcsize=32)"

#error "100119088: call analysis failed (funcsize=32)"

#error "10011915C: call analysis failed (funcsize=43)"

#error "100119200: call analysis failed (funcsize=31)"

uint64_t / infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_10011923C(a1, a2, a3, a4, a5, a6, a7, 6);
}

{
  return sub_1001192DC(a1, a2, a3, a4, a5, a6, a7, 6);
}

{
  return sub_100119380(a1, a2, a3, a4, a5, a6, a7, 6);
}

{
  return sub_100119424(a1, a2, a3, a4, a5, a6, a7, 6);
}

#error "100119264: call analysis failed (funcsize=37)"

#error "100119308: call analysis failed (funcsize=38)"

uint64_t sub_100119380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10011D4BC(a1, a2, a3, a4, a5, a6, a7, a8, v18, v19, v20, v21, v22, v23[0], v23[1], v23[2], v23[3], v23[4]);
  sub_100115CD4();
  sub_100115E8C();
  v8();
  sub_100116670();
  sub_10011D9D0();
  uint64_t v9 = swift_bridgeObjectRetain();
  sub_10011D6B8(v9, v10, v11, v12, v13, v14, v15, v16, v18, v19, v20, v21, v22, v23[0]);
  sub_10000E788((uint64_t)&v18);
  return sub_10011D31C((uint64_t)v23);
}

uint64_t sub_100119424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10011D4BC(a1, a2, a3, a4, a5, a6, a7, a8, v18, v19, v20, v21, v22, v23[0], v23[1], v23[2], v23[3], v23[4]);
  sub_100115CD4();
  sub_100115E8C();
  v8();
  type metadata accessor for Optional();
  sub_100116670();
  sub_10011D9D0();
  uint64_t v9 = swift_bridgeObjectRetain();
  sub_10011D6B8(v9, v10, v11, v12, v13, v14, v15, v16, v18, v19, v20, v21, v22, v23[0]);
  sub_10000E788((uint64_t)&v18);
  return sub_10011D31C((uint64_t)v23);
}

uint64_t - prefix<A>(_:)()
{
  sub_10011DD7C();
  sub_10011E0EC();
  swift_bridgeObjectRetain();
  sub_100118760(v1, 1);
  return sub_10011D31C((uint64_t)v1);
}

{
  void v1[5];

  sub_10011DF40();
  type metadata accessor for Expression();
  sub_10011E0CC();
  swift_bridgeObjectRetain();
  sub_100118760(v1, 1);
  return sub_10011D31C((uint64_t)v1);
}

uint64_t % infix<A>(_:_:)()
{
  return sub_100119894();
}

{
  sub_10011E0A0();
  return sub_10011993C();
}

{
  sub_10011E0A0();
  return sub_1001199E4();
}

{
  sub_10011E0A0();
  return sub_100119AB8();
}

uint64_t % infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100119B40(a1, a2, a3, a4, a5, a6, 7);
}

{
  return sub_100119BE0(a1, a2, a3, a4, a5, a6, 7);
}

uint64_t % infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_100119C84(a1, a2, a3, a4, a5, a6, 7, a8);
}

{
  return sub_100119D28(a1, a2, a3, a4, a5, a6, 7, a8);
}

uint64_t << infix<A>(_:_:)()
{
  return sub_100119894();
}

{
  sub_10011E050();
  return sub_10011993C();
}

{
  sub_10011E050();
  return sub_1001199E4();
}

{
  sub_10011E050();
  return sub_100119AB8();
}

uint64_t << infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100119B40(a1, a2, a3, a4, a5, a6, 8);
}

{
  return sub_100119BE0(a1, a2, a3, a4, a5, a6, 8);
}

uint64_t << infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_100119C84(a1, a2, a3, a4, a5, a6, 8, a8);
}

{
  return sub_100119D28(a1, a2, a3, a4, a5, a6, 8, a8);
}

uint64_t >> infix<A>(_:_:)()
{
  return sub_100119894();
}

{
  sub_10011E044();
  return sub_10011993C();
}

{
  sub_10011E044();
  return sub_1001199E4();
}

{
  sub_10011E044();
  return sub_100119AB8();
}

uint64_t >> infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100119B40(a1, a2, a3, a4, a5, a6, 9);
}

{
  return sub_100119BE0(a1, a2, a3, a4, a5, a6, 9);
}

uint64_t >> infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_100119C84(a1, a2, a3, a4, a5, a6, 9, a8);
}

{
  return sub_100119D28(a1, a2, a3, a4, a5, a6, 9, a8);
}

uint64_t & infix<A>(_:_:)()
{
  return sub_100119894();
}

{
  sub_10011E038();
  return sub_10011993C();
}

{
  sub_10011E038();
  return sub_1001199E4();
}

{
  sub_10011E038();
  return sub_100119AB8();
}

uint64_t & infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100119B40(a1, a2, a3, a4, a5, a6, 10);
}

{
  return sub_100119BE0(a1, a2, a3, a4, a5, a6, 10);
}

uint64_t & infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_100119C84(a1, a2, a3, a4, a5, a6, 10, a8);
}

{
  return sub_100119D28(a1, a2, a3, a4, a5, a6, 10, a8);
}

uint64_t | infix<A>(_:_:)()
{
  return sub_100119894();
}

{
  sub_10011E02C();
  return sub_10011993C();
}

{
  sub_10011E02C();
  return sub_1001199E4();
}

{
  sub_10011E02C();
  return sub_100119AB8();
}

#error "1001198E4: call analysis failed (funcsize=32)"

#error "10011998C: call analysis failed (funcsize=32)"

#error "100119A60: call analysis failed (funcsize=43)"

#error "100119B04: call analysis failed (funcsize=31)"

uint64_t | infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100119B40(a1, a2, a3, a4, a5, a6, 11);
}

{
  return sub_100119BE0(a1, a2, a3, a4, a5, a6, 11);
}

#error "100119B68: call analysis failed (funcsize=37)"

#error "100119C0C: call analysis failed (funcsize=38)"

uint64_t | infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_100119C84(a1, a2, a3, a4, a5, a6, 11, a8);
}

{
  return sub_100119D28(a1, a2, a3, a4, a5, a6, 11, a8);
}

uint64_t sub_100119C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10011D4BC(a1, a2, a3, a4, a5, a6, a7, a8, v18, v19, v20, v21, v22, v23[0], v23[1], v23[2], v23[3], v23[4]);
  sub_100115CD4();
  sub_100115E8C();
  v8();
  sub_100116670();
  sub_10011D9D0();
  uint64_t v9 = swift_bridgeObjectRetain();
  sub_10011D6B8(v9, v10, v11, v12, v13, v14, v15, v16, v18, v19, v20, v21, v22, v23[0]);
  sub_10000E788((uint64_t)&v18);
  return sub_10011D31C((uint64_t)v23);
}

uint64_t sub_100119D28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10011D4BC(a1, a2, a3, a4, a5, a6, a7, a8, v18, v19, v20, v21, v22, v23[0], v23[1], v23[2], v23[3], v23[4]);
  sub_100115CD4();
  sub_100115E8C();
  v8();
  type metadata accessor for Optional();
  sub_100116670();
  sub_10011D9D0();
  uint64_t v9 = swift_bridgeObjectRetain();
  sub_10011D6B8(v9, v10, v11, v12, v13, v14, v15, v16, v18, v19, v20, v21, v22, v23[0]);
  sub_10000E788((uint64_t)&v18);
  return sub_10011D31C((uint64_t)v23);
}

#error "100119E34: call analysis failed (funcsize=24)"

uint64_t ~ prefix<A>(_:)()
{
  sub_10011DD7C();
  sub_10011E0EC();
  swift_bridgeObjectRetain();
  sub_100118760(v1, 12);
  return sub_10011D31C((uint64_t)v1);
}

{
  void v1[5];

  sub_10011DF40();
  type metadata accessor for Expression();
  sub_10011E0CC();
  swift_bridgeObjectRetain();
  sub_100118760(v1, 12);
  return sub_10011D31C((uint64_t)v1);
}

#error "100119F0C: call analysis failed (funcsize=24)"

void sub_100119F1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t (*a25)(void),uint64_t (*a26)(uint64_t),uint64_t (*a27)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t),void (*a28)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  sub_10011DE64();
  uint64_t v32 = v31;
  uint64_t v47 = v33;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  sub_10011DE54();
  uint64_t v38 = a25();
  uint64_t v46 = a26(v38);
  uint64_t v40 = v39;
  uint64_t v42 = v41;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v43 = a27(v30, v29, v28, v37, v35, v47, v32);
  a28(v46, v40, v42, v43, v44, v45, v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10011DC58();
  sub_10011DDF0();
}

#error "10011A108: call analysis failed (funcsize=24)"

#error "10011A178: call analysis failed (funcsize=24)"

uint64_t ^ infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_10011A268(a1, a2, a3, a4, a5, a6, & infix<A>(_:_:), ~ prefix<A>(_:), | infix<A>(_:_:), & infix<A>(_:_:));
}

{
  return sub_10011A268(a1, a2, a3, a4, a5, a6, & infix<A>(_:_:), ~ prefix<A>(_:), | infix<A>(_:_:), & infix<A>(_:_:));
}

{
  return sub_10011A3CC(a1, a2, a3, a4, a5, a6, & infix<A>(_:_:), ~ prefix<A>(_:), | infix<A>(_:_:), & infix<A>(_:_:));
}

{
  return sub_10011A3CC(a1, a2, a3, a4, a5, a6, & infix<A>(_:_:), ~ prefix<A>(_:), | infix<A>(_:_:), & infix<A>(_:_:));
}

#error "10011A2AC: call analysis failed (funcsize=33)"

#error "10011A410: call analysis failed (funcsize=33)"

uint64_t == infix<A>(_:_:)()
{
  return sub_10011A6B4();
}

{
  sub_10011D5B4();
  return sub_10011A7B0();
}

{
  sub_10011D5B4();
  return sub_10011A8B4();
}

{
  sub_10011D5B4();
  return sub_10011A9C4();
}

{
  sub_10011E160();
  return sub_10011AAC4();
}

#error "10011A518: call analysis failed (funcsize=9)"

#error "10011A53C: call analysis failed (funcsize=9)"

#error "10011A560: call analysis failed (funcsize=9)"

uint64_t === infix<A>(_:_:)()
{
  return sub_10011A6B4();
}

{
  sub_10011D5EC();
  return sub_10011A7B0();
}

{
  sub_10011D5EC();
  return sub_10011A8B4();
}

{
  sub_10011D5EC();
  return sub_10011A9C4();
}

{
  sub_10011D800();
  return sub_10011AAC4();
}

#error "10011A638: call analysis failed (funcsize=9)"

#error "10011A65C: call analysis failed (funcsize=9)"

#error "10011A680: call analysis failed (funcsize=9)"

uint64_t != infix<A>(_:_:)()
{
  return sub_10011A6B4();
}

{
  sub_10011D608();
  return sub_10011A7B0();
}

{
  sub_10011D608();
  return sub_10011A8B4();
}

{
  sub_10011D608();
  return sub_10011A9C4();
}

{
  sub_10011DFA4();
  return sub_10011AAC4();
}

#error "10011A700: call analysis failed (funcsize=51)"

#error "10011A804: call analysis failed (funcsize=53)"

#error "10011A914: call analysis failed (funcsize=56)"

#error "10011AA14: call analysis failed (funcsize=52)"

#error "10011AAE8: call analysis failed (funcsize=57)"

#error "10011ABC8: call analysis failed (funcsize=9)"

void sub_10011ABD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  sub_10000E990();
  uint64_t v70 = v23;
  uint64_t v71 = v22;
  uint64_t v72 = v25;
  uint64_t v73 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v30 = sub_10011E05C();
  sub_100028430();
  uint64_t v32 = v31;
  __chkstk_darwin(v33);
  sub_10011DD1C();
  __chkstk_darwin(v34);
  uint64_t v36 = (char *)&v68 - v35;
  sub_100028430();
  uint64_t v38 = v37;
  __chkstk_darwin(v39);
  uint64_t v41 = (char *)&v68 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000EF0F4();
  v42();
  if (sub_10000D5D8((uint64_t)v36, 1, v27) == 1)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v36, v30);
    uint64_t v43 = type metadata accessor for Expression();
    uint64_t v81 = v43;
    uint64_t v82 = &protocol witness table for Expression<A>;
    uint64_t v78 = v71;
    uint64_t v79 = v29;
    uint64_t v80 = v73;
    sub_100059F24();
    sub_10000D5B0(v44, v45, v46, v47);
    uint64_t v76 = v43;
    uint64_t v77 = &protocol witness table for Expression<A>;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t WitnessTable = swift_getWitnessTable();
    swift_getWitnessTable();
    ExpressionType<>.init(value:)(v21, v43, WitnessTable, v72, (uint64_t)v75);
    sub_10000BF1C(&qword_10017D698);
    uint64_t inited = (__n128 *)swift_initStackObject();
    sub_10011D46C(inited, (__n128)xmmword_10013F1D0);
    sub_10011DF28();
    uint64_t v50 = sub_1000EEC10();
    sub_10011750C(v50, v51);
    uint64_t v52 = sub_10011D2E8(v74);
    v53(v52);
    sub_10000E788((uint64_t)v74);
    sub_10011DC58();
    sub_10011D488(v54, v55, v56, v57, v58, v59);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    sub_10006F144();
  }
  else
  {
    uint64_t v69 = v38;
    sub_1000EF100();
    v60();
    uint64_t v81 = type metadata accessor for Expression();
    uint64_t v82 = &protocol witness table for Expression<A>;
    uint64_t v78 = v71;
    uint64_t v79 = v29;
    uint64_t v80 = v73;
    uint64_t v61 = *(_UNKNOWN ***)(v72 + 8);
    uint64_t v76 = v27;
    uint64_t v77 = v61;
    uint64_t v62 = sub_1000274F4(v75);
    (*(void (**)(uint64_t *, char *, uint64_t))(v38 + 16))(v62, v41, v27);
    sub_10000BF1C(&qword_10017D698);
    uint64_t v63 = (__n128 *)swift_initStackObject();
    sub_10011D46C(v63, (__n128)xmmword_10013F1D0);
    sub_10000C0D4((uint64_t)v75, (uint64_t)&v63[4].n128_i64[1]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10011E174();
    uint64_t v64 = sub_10000BEA0(v74, v74[3]);
    sub_10011D404();
    v65();
    sub_10011D9B0();
    sub_10011D488((uint64_t)v64, (void *)(v38 + 16), a21, v66, v67, &qword_100180F08);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    sub_10006F144();
    (*(void (**)(char *, uint64_t))(v69 + 8))(v41, v27);
  }
  sub_10011DDCC();
  sub_10000E930();
}

#error "10011AFCC: call analysis failed (funcsize=9)"

void sub_10011AFDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  sub_10011D75C();
  a47 = v48;
  a48 = v49;
  sub_10011D8F4(v50, v51, v52, v53, v54, v55);
  sub_100115CD4();
  sub_100115E8C();
  v56();
  uint64_t v57 = sub_100116B00();
  sub_10011DF88(v57, (uint64_t)&protocol witness table for Expression<A>);
  sub_10000BF1C(&qword_10017D698);
  uint64_t inited = (__n128 *)swift_initStackObject();
  sub_10011D6F4(inited, (__n128)xmmword_10013F1D0);
  sub_10000C0D4((uint64_t)&a29, (uint64_t)&inited[4].n128_i64[1]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10011D4A0(&a10);
  uint64_t v59 = sub_10011D2B4(&a10);
  uint64_t v61 = v60(v59);
  uint64_t v62 = sub_10011D44C(v61);
  sub_10011D33C(v62, v63, v64, v65, v66, &qword_100180F00);
  sub_10011D398();
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_10006F144();
  sub_10000E788((uint64_t)&a29);
  sub_10011D3B8((uint64_t)&a34);
  sub_10011D7C0();
}

#error "10011B0EC: call analysis failed (funcsize=9)"

void sub_10011B0FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  sub_10000E990();
  uint64_t v62 = v24;
  uint64_t v63 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v64 = v29;
  uint64_t v65 = v30;
  uint64_t v31 = (void *)sub_10011E05C();
  sub_100028430();
  uint64_t v33 = v32;
  __chkstk_darwin(v34);
  sub_10011DD1C();
  __chkstk_darwin(v35);
  uint64_t v37 = (char *)&v60 - v36;
  sub_100028430();
  uint64_t v39 = v38;
  __chkstk_darwin(v40);
  sub_1000A3C1C();
  sub_1000EF0F4();
  v41();
  if (sub_10000D5D8((uint64_t)v37, 1, v28) == 1)
  {
    (*(void (**)(char *, void *))(v33 + 8))(v37, v31);
    uint64_t v42 = sub_1001166A0();
    sub_10000D5B0(v22, 1, 1, v28);
    uint64_t v72 = v42;
    uint64_t v73 = &protocol witness table for Expression<A>;
    uint64_t WitnessTable = swift_getWitnessTable();
    swift_getWitnessTable();
    ExpressionType<>.init(value:)(v22, v42, WitnessTable, v26, (uint64_t)v71);
    uint64_t v69 = v42;
    uint64_t v70 = &protocol witness table for Expression<A>;
    sub_10011E018();
    sub_10000BF1C(&qword_10017D698);
    uint64_t inited = (__n128 *)swift_initStackObject();
    sub_10011D46C(inited, (__n128)xmmword_10013F1D0);
    sub_10000C0D4((uint64_t)v68, (uint64_t)&inited[4].n128_i64[1]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10011750C((uint64_t)inited, v66);
    sub_10000BEA0(v66, v67);
    sub_10011D404();
    v45();
    sub_10000E788((uint64_t)v66);
    sub_10011D510();
    sub_10011D488(v46, v47, v48, v49, v50, v51);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    sub_10006F144();
  }
  else
  {
    uint64_t v61 = v39;
    sub_1000EF100();
    v52();
    uint64_t v53 = *(_UNKNOWN ***)(v26 + 8);
    uint64_t v72 = v28;
    uint64_t v73 = v53;
    uint64_t v54 = sub_1000274F4(v71);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v39 + 16))(v54, v21, v28);
    uint64_t v69 = sub_1001166A0();
    uint64_t v70 = &protocol witness table for Expression<A>;
    sub_10011E018();
    sub_10000BF1C(&qword_10017D698);
    uint64_t v55 = (__n128 *)swift_initStackObject();
    sub_10011D46C(v55, (__n128)xmmword_10013F1D0);
    sub_10000C0D4((uint64_t)v68, (uint64_t)&v55[4].n128_i64[1]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10011E174();
    uint64_t v56 = sub_10000BEA0(v66, v67);
    sub_10011D404();
    v57();
    sub_10011D9B0();
    sub_10011D488((uint64_t)v56, v31, a21, v58, v59, &qword_100180F08);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    sub_10006F144();
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v21, v28);
  }
  sub_10000E788((uint64_t)v68);
  sub_10000E788((uint64_t)v71);
  sub_1000EEC10();
  sub_10000E930();
}

uint64_t !== infix<A>(_:_:)()
{
  return sub_10011A6B4();
}

{
  sub_10011D4EC();
  return sub_10011A7B0();
}

{
  sub_10011D4EC();
  return sub_10011A8B4();
}

{
  sub_10011D4EC();
  return sub_10011A9C4();
}

{
  sub_10011D554();
  return sub_10011AAC4();
}

#error "10011B5A0: call analysis failed (funcsize=9)"

void sub_10011B5B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  sub_10000E990();
  uint64_t v67 = v23;
  uint64_t v64 = v25;
  uint64_t v65 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v63 = v30;
  uint64_t v66 = a21;
  uint64_t v31 = (void *)sub_10011E05C();
  sub_100028430();
  uint64_t v33 = v32;
  __chkstk_darwin(v34);
  sub_10011DD38();
  __chkstk_darwin(v35);
  uint64_t v37 = (char *)&v62 - v36;
  sub_100028430();
  uint64_t v39 = v38;
  __chkstk_darwin(v40);
  sub_1000A3C1C();
  sub_1000EF0F4();
  v41();
  if (sub_10000D5D8((uint64_t)v37, 1, v27) == 1)
  {
    (*(void (**)(char *, void *))(v33 + 8))(v37, v31);
    uint64_t v42 = sub_1001166A0();
    uint64_t v75 = v42;
    uint64_t v76 = &protocol witness table for Expression<A>;
    uint64_t v72 = v63;
    uint64_t v73 = v29;
    uint64_t v74 = v65;
    sub_10000D5B0(v21, 1, 1, v27);
    uint64_t v70 = v42;
    uint64_t v71 = &protocol witness table for Expression<A>;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t WitnessTable = swift_getWitnessTable();
    swift_getWitnessTable();
    ExpressionType<>.init(value:)(v21, v42, WitnessTable, v64, (uint64_t)v69);
    sub_10000BF1C(&qword_10017D698);
    uint64_t inited = (__n128 *)swift_initStackObject();
    sub_10011D46C(inited, (__n128)xmmword_10013F1D0);
    sub_10011DF28();
    sub_10011DD00();
    uint64_t v45 = sub_10011D2E8(v68);
    uint64_t v47 = v46(v45);
    uint64_t v49 = v48;
    uint64_t v51 = v50;
    sub_10000E788((uint64_t)v68);
    sub_10011D488(v47, v49, v51, v52, v53, &qword_100180F08);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    sub_10006F144();
  }
  else
  {
    uint64_t v62 = v39;
    sub_1000EF100();
    v54();
    uint64_t v75 = sub_1001166A0();
    uint64_t v76 = &protocol witness table for Expression<A>;
    uint64_t v72 = v63;
    uint64_t v73 = v29;
    uint64_t v74 = v65;
    uint64_t v55 = *(_UNKNOWN ***)(v64 + 8);
    uint64_t v70 = v27;
    uint64_t v71 = v55;
    uint64_t v56 = sub_1000274F4(v69);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v39 + 16))(v56, v22, v27);
    sub_10000BF1C(&qword_10017D698);
    uint64_t v57 = (__n128 *)swift_initStackObject();
    sub_10011D46C(v57, (__n128)xmmword_10013F1D0);
    sub_10011DF28();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10011DD00();
    uint64_t v58 = sub_10000BEA0(v68, v68[3]);
    sub_10011D404();
    v59();
    sub_10011D9B0();
    sub_10011D488((uint64_t)v58, v31, v39 + 16, v60, v61, &qword_100180F08);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    sub_10006F144();
    (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v22, v27);
  }
  sub_10011DDCC();
  sub_10000E930();
}

#error "10011B97C: call analysis failed (funcsize=9)"

#error "10011B9A0: call analysis failed (funcsize=9)"

void sub_10011B9B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  sub_10000E990();
  uint64_t v71 = v22;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v68 = v27;
  uint64_t v69 = v28;
  uint64_t v67 = v29;
  uint64_t v31 = v30;
  uint64_t v70 = a21;
  uint64_t v32 = sub_10011E05C();
  sub_100028430();
  uint64_t v34 = v33;
  __chkstk_darwin(v35);
  sub_10011DD38();
  __chkstk_darwin(v36);
  uint64_t v38 = (char *)&v66 - v37;
  sub_100028430();
  uint64_t v40 = v39;
  __chkstk_darwin(v41);
  uint64_t v43 = (char *)&v66 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000EF0F4();
  v44();
  if (sub_10000D5D8((uint64_t)v38, 1, v26) == 1)
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v38, v32);
    uint64_t v45 = type metadata accessor for Expression();
    sub_10000D5B0(v21, 1, 1, v26);
    uint64_t v79 = v45;
    uint64_t v80 = &protocol witness table for Expression<A>;
    uint64_t WitnessTable = swift_getWitnessTable();
    swift_getWitnessTable();
    ExpressionType<>.init(value:)(v21, v45, WitnessTable, v24, (uint64_t)v78);
    uint64_t v76 = v45;
    uint64_t v77 = &protocol witness table for Expression<A>;
    uint64_t v73 = v67;
    uint64_t v74 = v68;
    uint64_t v75 = v69;
    sub_10000BF1C(&qword_10017D698);
    uint64_t inited = (__n128 *)swift_initStackObject();
    sub_10011D46C(inited, (__n128)xmmword_10013F1D0);
    sub_10011DF28();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10011DD00();
    uint64_t v48 = sub_10011D2E8(v72);
    uint64_t v50 = v49(v48);
    uint64_t v52 = v51;
    uint64_t v54 = v53;
    sub_10000E788((uint64_t)v72);
    sub_10011D488(v50, v52, v54, v55, v56, &qword_100180F08);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    sub_10006F144();
  }
  else
  {
    uint64_t v66 = v40;
    sub_1000EF100();
    v57();
    uint64_t v58 = *(_UNKNOWN ***)(v24 + 8);
    uint64_t v79 = v26;
    uint64_t v80 = v58;
    uint64_t v59 = sub_1000274F4(v78);
    (*(void (**)(uint64_t *, char *, uint64_t))(v40 + 16))(v59, v43, v26);
    uint64_t v76 = type metadata accessor for Expression();
    uint64_t v77 = &protocol witness table for Expression<A>;
    uint64_t v73 = v67;
    uint64_t v74 = v68;
    uint64_t v60 = v69;
    uint64_t v75 = v69;
    sub_10000BF1C(&qword_10017D698);
    uint64_t v61 = (__n128 *)swift_initStackObject();
    sub_10011D46C(v61, (__n128)xmmword_10013F1D0);
    sub_10011DF28();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10011DD00();
    uint64_t v62 = sub_10011D2E8(v72);
    v63(v62);
    sub_10011D9B0();
    sub_10011D488(v60, v31, v32, v64, v65, &qword_100180F08);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    sub_10006F144();
    (*(void (**)(char *, uint64_t))(v66 + 8))(v43, v26);
  }
  sub_10011DDCC();
  sub_10000E930();
}

uint64_t > infix<A>(_:_:)()
{
  return sub_10011A6B4();
}

{
  sub_10011D598();
  return sub_10011A7B0();
}

{
  sub_10011D598();
  return sub_10011A8B4();
}

{
  sub_10011D598();
  return sub_10011A9C4();
}

{
  sub_10011DA2C();
  return sub_10011AAC4();
}

#error "10011BE34: call analysis failed (funcsize=9)"

#error "10011BE58: call analysis failed (funcsize=9)"

#error "10011BE7C: call analysis failed (funcsize=9)"

uint64_t >= infix<A>(_:_:)()
{
  return sub_10011A6B4();
}

{
  sub_10011D624();
  return sub_10011A7B0();
}

{
  sub_10011D624();
  return sub_10011A8B4();
}

{
  sub_10011D624();
  return sub_10011A9C4();
}

{
  sub_10011D7D8();
  return sub_10011AAC4();
}

#error "10011BF54: call analysis failed (funcsize=9)"

void sub_10011BF64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,_UNKNOWN **a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  sub_10011D37C();
  a49 = v50;
  a50 = v51;
  uint64_t v53 = v52;
  uint64_t v55 = v54;
  uint64_t v57 = v56;
  uint64_t v59 = v58;
  uint64_t v61 = v60;
  type metadata accessor for Optional();
  a37 = sub_100115CF8();
  a38 = &protocol witness table for Expression<A>;
  a34 = v61;
  a35 = v59;
  a36 = v57;
  uint64_t v62 = *(void *)(v53 + 8);
  a32 = v55;
  a33 = v62;
  sub_1000274F4(&a29);
  sub_100115CD4();
  sub_100115E8C();
  v63();
  sub_10000BF1C(&qword_10017D698);
  uint64_t inited = (__n128 *)swift_initStackObject();
  sub_10011D51C(inited, (__n128)xmmword_10013F1D0);
  sub_10000C0D4((uint64_t)&a29, (uint64_t)&inited[4].n128_i64[1]);
  swift_bridgeObjectRetain();
  uint64_t v65 = swift_bridgeObjectRetain();
  sub_10011DFD8(v65);
  uint64_t v66 = a13;
  uint64_t v67 = sub_10000BEA0(&a10, a13);
  sub_10011D3D8();
  uint64_t v69 = v68();
  sub_10011DCE0(v69);
  sub_10011D3E8(v66, v67, v70, v71, v72, &qword_100180F08);
  sub_10011E140();
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_10006F144();
  sub_10000E788((uint64_t)&a29);
  sub_10000E788((uint64_t)&a34);
  sub_10011DC58();
  sub_10011D360();
}

#error "10011C0D8: call analysis failed (funcsize=9)"

#error "10011C0FC: call analysis failed (funcsize=9)"

void sub_10011C10C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  sub_10011D75C();
  a47 = v48;
  a48 = v49;
  sub_10011DE54();
  uint64_t v51 = *(void *)(v50 + 8);
  a37 = v52;
  a38 = v51;
  sub_1000274F4(&a34);
  sub_100115CD4();
  sub_100115E8C();
  v53();
  type metadata accessor for Optional();
  uint64_t v54 = sub_100115CF8();
  sub_10011DF88(v54, (uint64_t)&protocol witness table for Expression<A>);
  sub_10000BF1C(&qword_10017D698);
  uint64_t inited = (__n128 *)swift_initStackObject();
  sub_10011D6F4(inited, (__n128)xmmword_10013F1D0);
  sub_10011DF10();
  swift_bridgeObjectRetain();
  uint64_t v56 = swift_bridgeObjectRetain();
  sub_10011DFD8(v56);
  uint64_t v57 = a13;
  uint64_t v58 = sub_10000BEA0(&a10, a13);
  sub_10011D3D8();
  uint64_t v60 = v59();
  sub_10011DCE0(v60);
  sub_10011D3E8(v57, v58, v61, v62, v63, &qword_100180F08);
  sub_10011E140();
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_10006F144();
  sub_10000E788((uint64_t)&a29);
  sub_10000E788((uint64_t)&a34);
  sub_10011DC58();
  sub_10011D7C0();
}

uint64_t < infix<A>(_:_:)()
{
  return sub_10011A6B4();
}

{
  sub_10011D5D0();
  return sub_10011A7B0();
}

{
  sub_10011D5D0();
  return sub_10011A8B4();
}

{
  sub_10011D5D0();
  return sub_10011A9C4();
}

{
  sub_10011DA40();
  return sub_10011AAC4();
}

#error "10011C318: call analysis failed (funcsize=9)"

#error "10011C33C: call analysis failed (funcsize=9)"

#error "10011C360: call analysis failed (funcsize=9)"

uint64_t <= infix<A>(_:_:)()
{
  return sub_10011A6B4();
}

{
  sub_10011D640();
  return sub_10011A7B0();
}

{
  sub_10011D640();
  return sub_10011A8B4();
}

{
  sub_10011D640();
  return sub_10011A9C4();
}

{
  sub_10011D7EC();
  return sub_10011AAC4();
}

#error "10011C438: call analysis failed (funcsize=9)"

#error "10011C45C: call analysis failed (funcsize=9)"

#error "10011C480: call analysis failed (funcsize=9)"

uint64_t sub_10011C494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_10011E0AC();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8._unint64_t object = (void *)0x8000000100146980;
  v8._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v8);
  uint64_t v16 = a2;
  sub_10000BF1C(&qword_10017DEB8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013F1D0;
  uint64_t v10 = *(void (**)(uint64_t))(a6 + 56);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(void *)(inited + 56) = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)(inited + 64) = AssociatedConformanceWitness;
  sub_1000274F4((uint64_t *)(inited + 32));
  uint64_t v13 = sub_10011E08C();
  v10(v13);
  type metadata accessor for ClosedRange();
  *(void *)(inited + 96) = AssociatedTypeWitness;
  *(void *)(inited + 104) = AssociatedConformanceWitness;
  sub_1000274F4((uint64_t *)(inited + 72));
  uint64_t v14 = sub_10011E08C();
  v10(v14);
  swift_bridgeObjectRetain();
  sub_1001182DC();
  return v16;
}

void sub_10011C628()
{
  sub_10011D37C();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_10011E0AC();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 0x4E41203F203D3E20;
  v6._unint64_t object = (void *)0xEA00000000002044;
  String.append(_:)(v6);
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = v5;
  v7._unint64_t object = v3;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 1059077152;
  v8._unint64_t object = (void *)0xE400000000000000;
  String.append(_:)(v8);
  sub_10000BF1C(&qword_10017DEB8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013EF20;
  uint64_t v10 = *(void (**)(uint64_t))(v1 + 56);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(void *)(inited + 56) = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)(inited + 64) = AssociatedConformanceWitness;
  sub_1000274F4((uint64_t *)(inited + 32));
  uint64_t v13 = sub_1000EEC10();
  v10(v13);
  swift_bridgeObjectRetain();
  sub_1001182DC();
  swift_bridgeObjectRetain();
  sub_1001182DC();
  uint64_t v14 = swift_initStackObject();
  *(_OWORD *)(v14 + 16) = xmmword_10013EF20;
  type metadata accessor for Range();
  *(void *)(v14 + 56) = AssociatedTypeWitness;
  *(void *)(v14 + 64) = AssociatedConformanceWitness;
  sub_1000274F4((uint64_t *)(v14 + 32));
  uint64_t v15 = sub_1000EEC10();
  v10(v15);
  sub_1001182DC();
  sub_10011D360();
}

uint64_t ~= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10011DA54(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

{
  return sub_10011DA54(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t ~= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_10011DDA4(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_10011C8A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  swift_bridgeObjectRetain();
  v13._uint64_t countAndFlagsBits = a10;
  v13._unint64_t object = a11;
  String.append(_:)(v13);
  sub_10000BF1C(&qword_10017DEB8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013EF20;
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(a6 + 56);
  *(void *)(inited + 56) = swift_getAssociatedTypeWitness();
  *(void *)(inited + 64) = swift_getAssociatedConformanceWitness();
  sub_1000274F4((uint64_t *)(inited + 32));
  v15(a5, a6);
  swift_bridgeObjectRetain();
  sub_1001182DC();
  return a2;
}

void *sub_10011C9E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
    sub_100116F48();
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = (uint64_t *)(a1 + 48);
    do
    {
      uint64_t v6 = *(v4 - 2);
      uint64_t v5 = *(v4 - 1);
      uint64_t v7 = *v4;
      uint64_t v15 = v2;
      unint64_t v8 = v2[2];
      unint64_t v9 = v2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v8 >= v9 >> 1)
      {
        sub_100116F48();
        uint64_t v2 = v15;
      }
      uint64_t v13 = sub_10000BF1C(&qword_100180F00);
      uint64_t v14 = &protocol witness table for Expression<A>;
      *(void *)&long long v11 = v6;
      *((void *)&v11 + 1) = v5;
      uint64_t v12 = v7;
      long long v2[2] = v8 + 1;
      sub_10000D698(&v11, (uint64_t)&v2[5 * v8 + 4]);
      v4 += 3;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void sub_10011CAFC(uint64_t a1)
{
  uint64_t v1 = sub_10011C9E8(a1);
  sub_10011750C((uint64_t)v1, v9);
  uint64_t v2 = v10;
  uint64_t v3 = sub_10000BEA0(v9, v10);
  sub_10011D3D8();
  uint64_t v5 = v4();
  sub_10011DCE0(v5);
  sub_10011D3E8(v2, v3, v6, v7, v8, &qword_100180F00);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10011DC58();
}

#error "10011CBE8: call analysis failed (funcsize=12)"

uint64_t && infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_10011CC20(a1, a2, a3, a4, a5, a6, &unk_100180F00, &qword_100180F08);
}

{
  return sub_10011CC20(a1, a2, a3, a4, a5, a6, &qword_100180F08, &qword_100180F00);
}

#error "10011CCA8: call analysis failed (funcsize=69)"

#error "10011CD74: call analysis failed (funcsize=12)"

void && infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,void *a32,_UNKNOWN **a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,_UNKNOWN **a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  sub_10011DA74(a1, a2, a3, a4, (uint64_t)&qword_100180F00, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    a46,
    a47,
    a48);
}

{
  sub_10011DA74(a1, a2, a3, a4, (uint64_t)&qword_100180F08, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    a46,
    a47,
    a48);
}

void sub_10011CD9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,void *a32,_UNKNOWN **a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,_UNKNOWN **a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  sub_10011D75C();
  a47 = v51;
  a48 = v52;
  char v54 = v53;
  sub_10011DE54();
  uint64_t v56 = sub_10000BF1C(v55);
  a38 = &protocol witness table for Expression<A>;
  a34 = v50;
  a35 = v49;
  a36 = v48;
  a37 = v56;
  a32 = &type metadata for Bool;
  a33 = &protocol witness table for Bool;
  a29 = v54;
  sub_10000BF1C(&qword_10017D698);
  uint64_t inited = (__n128 *)swift_initStackObject();
  sub_10011D6F4(inited, (__n128)xmmword_10013F1D0);
  sub_10011DF10();
  swift_bridgeObjectRetain();
  uint64_t v58 = swift_bridgeObjectRetain();
  sub_10011DFF8(v58);
  uint64_t v59 = sub_10011D2E8(&a10);
  v60(v59);
  sub_10011D410((uint64_t)&a10);
  sub_10011D65C();
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_10006F144();
  sub_10000E788((uint64_t)&a29);
  sub_10000E788((uint64_t)&a34);
  sub_10011D510();
  sub_10011D7C0();
}

void && infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,_UNKNOWN **a33,char a34,uint64_t a35,uint64_t a36,void *a37,_UNKNOWN **a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  sub_10011DA88(a1, a2, a3, a4, (uint64_t)&qword_100180F00, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    a46,
    a47,
    a48);
}

{
  sub_10011DA88(a1, a2, a3, a4, (uint64_t)&qword_100180F08, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    a46,
    a47,
    a48);
}

void sub_10011CEBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,_UNKNOWN **a33,char a34,uint64_t a35,uint64_t a36,void *a37,_UNKNOWN **a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  sub_10011D75C();
  a47 = v48;
  a48 = v49;
  uint64_t v51 = v50;
  uint64_t v53 = v52;
  uint64_t v55 = v54;
  a37 = &type metadata for Bool;
  a38 = &protocol witness table for Bool;
  a34 = v56;
  a32 = sub_10000BF1C(v57);
  a33 = &protocol witness table for Expression<A>;
  a29 = v55;
  a30 = v53;
  a31 = v51;
  sub_10000BF1C(&qword_10017D698);
  uint64_t inited = (__n128 *)swift_initStackObject();
  sub_10011D6F4(inited, (__n128)xmmword_10013F1D0);
  sub_10011DF10();
  swift_bridgeObjectRetain();
  uint64_t v59 = swift_bridgeObjectRetain();
  sub_10011DFF8(v59);
  uint64_t v60 = sub_10011D2E8(&a10);
  v61(v60);
  sub_10011D410((uint64_t)&a10);
  sub_10011D65C();
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_10006F144();
  sub_10000E788((uint64_t)&a29);
  sub_10000E788((uint64_t)&a34);
  sub_10011D510();
  sub_10011D7C0();
}

#error "10011CFF0: call analysis failed (funcsize=11)"

#error "10011D02C: call analysis failed (funcsize=12)"

#error "10011D068: call analysis failed (funcsize=12)"

#error "10011D09C: call analysis failed (funcsize=11)"

void || infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,void *a32,_UNKNOWN **a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,_UNKNOWN **a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  sub_10011DB18(a1, a2, a3, a4, (uint64_t)&qword_100180F00, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    a46,
    a47,
    a48);
}

{
  sub_10011DB18(a1, a2, a3, a4, (uint64_t)&qword_100180F08, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    a46,
    a47,
    a48);
}

void || infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,_UNKNOWN **a33,char a34,uint64_t a35,uint64_t a36,void *a37,_UNKNOWN **a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  sub_10011DB28(a1, a2, a3, a4, (uint64_t)&qword_100180F00, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    a46,
    a47,
    a48);
}

{
  sub_10011DB28(a1, a2, a3, a4, (uint64_t)&qword_100180F08, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    a46,
    a47,
    a48);
}

uint64_t ! prefix(_:)(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_10011D0F4(a1, a2, a3, &qword_100180F00);
}

{
  return sub_10011D0F4(a1, a2, a3, &qword_100180F08);
}

uint64_t sub_10011D0F4(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = sub_10011D1B8(a1, a2, a3, 542396238, 0xE400000000000000, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_10011D188(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10011D1B8(a1, a2, a3, a4, a5, (uint64_t *)&unk_10017E920);
}

uint64_t sub_10011D194(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10011D1B8(a1, a2, a3, a4, a5, &qword_10017D678);
}

uint64_t sub_10011D1A0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10011D1B8(a1, a2, a3, a4, a5, &qword_100180F00);
}

uint64_t sub_10011D1AC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10011D1B8(a1, a2, a3, a4, a5, &qword_100180F08);
}

uint64_t sub_10011D1B8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v19 = sub_10000BF1C(a6);
  uint64_t v20 = &protocol witness table for Expression<A>;
  uint64_t v16 = a1;
  uint64_t v17 = a2;
  uint64_t v18 = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10._uint64_t countAndFlagsBits = 40;
  v10._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  sub_10000BEA0(&v16, v19);
  uint64_t v11 = v16;
  uint64_t v12 = v17;
  swift_bridgeObjectRetain();
  v13._uint64_t countAndFlagsBits = v11;
  v13._unint64_t object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 41;
  v14._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  swift_bridgeObjectRetain();
  sub_10000E788((uint64_t)&v16);
  return a4;
}

uint64_t sub_10011D2B4(void *a1)
{
  sub_10000BEA0(a1, v1);
  return v1;
}

uint64_t sub_10011D2E8(void *a1)
{
  sub_10000BEA0(a1, v1);
  return v1;
}

uint64_t sub_10011D31C(uint64_t a1)
{
  sub_10000E788(a1);
  return v1;
}

uint64_t sub_10011D33C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  return sub_10011D1B8(v6, v7, v8, 0, 0xE000000000000000, a6);
}

uint64_t sub_10011D398()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_10011D3B8(uint64_t a1)
{
  sub_10000E788(a1);
  return v1;
}

uint64_t sub_10011D3E8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  return sub_10011D1B8(a1, a2, v6, 0, 0xE000000000000000, a6);
}

uint64_t sub_10011D410(uint64_t a1)
{
  sub_10000E788(a1);
  return sub_10011D1B8(v2, v3, v4, 0, 0xE000000000000000, v1);
}

uint64_t sub_10011D44C(uint64_t a1, ...)
{
  va_start(va, a1);
  return sub_10000E788((uint64_t)va);
}

uint64_t sub_10011D46C(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return sub_10000C0D4(v2 - 128, (uint64_t)&a1[2]);
}

uint64_t sub_10011D488(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  return sub_10011D1B8(a1, a2, a3, 0, 0xE000000000000000, a6);
}

void sub_10011D4A0(uint64_t *a1@<X8>)
{
  sub_10011750C(v1, a1);
}

uint64_t *sub_10011D4BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v19 = *(void *)(a6 + 8);
  a17 = a5;
  a18 = v19;
  return sub_1000274F4(&a14);
}

uint64_t sub_10011D51C(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return sub_10000C0D4(v2 - 120, (uint64_t)&a1[2]);
}

uint64_t sub_10011D538@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v5 - 96) = result;
  *(void *)(v5 - 88) = a2;
  *(void *)(v5 - 120) = v4;
  *(void *)(v5 - 112) = v3;
  *(void *)(v5 - 104) = v2;
  return result;
}

uint64_t *sub_10011D570@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  a11 = a1;
  a12 = a2;
  a8 = v16;
  a9 = v15;
  a10 = v14;
  uint64_t v18 = *(void *)(v12 + 8);
  a6 = v13;
  a7 = v18;
  return sub_1000274F4(&a3);
}

uint64_t sub_10011D65C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_10011D694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  return sub_100118598((uint64_t)&a14, (uint64_t)&a9, 1, v14);
}

uint64_t sub_10011D6B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  return sub_100118598((uint64_t)&a14, (uint64_t)&a9, 1, v14);
}

uint64_t sub_10011D6F4(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return sub_10000C0D4(v2 - 104, (uint64_t)&a1[2]);
}

uint64_t sub_10011D774()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10011D790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return a10;
}

uint64_t sub_10011D814()
{
  return type metadata accessor for Expression();
}

uint64_t sub_10011D84C()
{
  return type metadata accessor for Expression();
}

uint64_t sub_10011D884()
{
  return type metadata accessor for Expression();
}

uint64_t sub_10011D8BC()
{
  return type metadata accessor for Optional();
}

uint64_t *sub_10011D8F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = *(void *)(a6 + 8);
  *(void *)(v6 - 80) = a5;
  *(void *)(v6 - 72) = v8;
  return sub_1000274F4((uint64_t *)(v6 - 104));
}

uint64_t sub_10011D92C()
{
  return type metadata accessor for Expression();
}

uint64_t sub_10011D990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10000E788((uint64_t)&a9);
}

uint64_t sub_10011D9B0()
{
  return sub_10000E788(v0 + 160);
}

uint64_t sub_10011D9D0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10011DA54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return sub_10011C8A8(a1, a2, a3, a4, a5, a6, a7, a8, a9, v9 & 0xFFFF00000000FFFFLL | 0x3F203D0000, v10);
}

void sub_10011DA74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,void *a32,_UNKNOWN **a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,_UNKNOWN **a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  sub_10011CD9C(a1, a2, a3, a4, a5, 0x20444E4120, 0xE500000000000000, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    a46,
    a47,
    a48);
}

void sub_10011DA88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,_UNKNOWN **a33,char a34,uint64_t a35,uint64_t a36,void *a37,_UNKNOWN **a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  sub_10011CEBC(a1, a2, a3, a4, a5, 0x20444E4120, 0xE500000000000000, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    a46,
    a47,
    a48);
}

void _s17AppIntents_SQLite3andyAA10ExpressionVySbGSayAEGF_0(uint64_t a1)
{
}

uint64_t sub_10011DAB0()
{
  return type metadata accessor for Expression();
}

uint64_t sub_10011DAE4()
{
  return type metadata accessor for Optional();
}

void sub_10011DB18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,void *a32,_UNKNOWN **a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,_UNKNOWN **a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  sub_10011CD9C(a1, a2, a3, a4, a5, 542265120, 0xE400000000000000, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    a46,
    a47,
    a48);
}

void sub_10011DB28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,_UNKNOWN **a33,char a34,uint64_t a35,uint64_t a36,void *a37,_UNKNOWN **a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  sub_10011CEBC(a1, a2, a3, a4, a5, 542265120, 0xE400000000000000, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    a46,
    a47,
    a48);
}

void _s17AppIntents_SQLite2oryAA10ExpressionVySbGSayAEGF_0(uint64_t a1)
{
}

uint64_t sub_10011DB64()
{
  return type metadata accessor for Optional();
}

uint64_t sub_10011DB98()
{
  return type metadata accessor for Expression();
}

uint64_t sub_10011DBC8()
{
  return type metadata accessor for Optional();
}

uint64_t sub_10011DC1C()
{
  return v0;
}

uint64_t sub_10011DC3C()
{
  return type metadata accessor for Expression();
}

uint64_t sub_10011DC64()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10011DC90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  return sub_10000C0D4((uint64_t)&a29, v29 + 72);
}

uint64_t _s17AppIntents_SQLite2teoiyAA10ExpressionVySbSgGSNyxG_ADyxSgGtAA5ValueRzSLRzAaJ8DatatypeAaJPRpzSLAMRQlF_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_10011C494(a1, a2, a3, a4, a5, a6);
}

void _s17AppIntents_SQLite2teoiyAA10ExpressionVySbSgGSnyxG_ADyxSgGtAA5ValueRzSLRzAaJ8DatatypeAaJPRpzSLAMRQlF_0()
{
}

uint64_t sub_10011DCE0(uint64_t a1, ...)
{
  va_start(va, a1);
  return sub_10000E788((uint64_t)va);
}

void sub_10011DD00()
{
  sub_10011750C(v1, (uint64_t *)(v0 + 160));
}

uint64_t *sub_10011DD54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  *(void *)(v32 - 96) = a1;
  *(void *)(v32 - 88) = a2;
  *(void *)(v32 - 120) = v31;
  *(void *)(v32 - 112) = v29;
  *(void *)(v32 - 104) = v28;
  uint64_t v34 = *(void *)(v27 + 8);
  a26 = v30;
  a27 = v34;
  return sub_1000274F4(&a23);
}

uint64_t sub_10011DD7C()
{
  return type metadata accessor for Expression();
}

uint64_t sub_10011DDA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(v8 + 16);
  return sub_10011C8A8(a1, a2, a3, a4, a5, a6, a7, a8, v11, 1059077152, (void *)0xE400000000000000);
}

uint64_t sub_10011DDCC()
{
  sub_10000E788(v1 - 168);
  sub_10000E788(v1 - 128);
  return v0;
}

void sub_10011DE0C(uint64_t a1, ...)
{
  va_start(va, a1);
  sub_10011750C(v1, (uint64_t *)va);
}

uint64_t sub_10011DE30()
{
  return type metadata accessor for Optional();
}

uint64_t sub_10011DE80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  return sub_100118598((uint64_t)&a14, (uint64_t)&a9, 1, v14);
}

uint64_t sub_10011DEA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  return sub_100118598((uint64_t)&a14, (uint64_t)&a9, 1, v14);
}

uint64_t sub_10011DEC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  return sub_100118598((uint64_t)&a14, (uint64_t)&a9, 1, v14);
}

uint64_t sub_10011DEEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  return sub_100118598((uint64_t)&a14, (uint64_t)&a9, 1, v14);
}

uint64_t sub_10011DF10()
{
  return sub_10000C0D4(v1 - 144, v0 + 72);
}

uint64_t sub_10011DF28()
{
  return sub_10000C0D4(v1 - 168, v0 + 72);
}

uint64_t sub_10011DF40()
{
  return type metadata accessor for Optional();
}

uint64_t sub_10011DF64(uint64_t a1)
{
  *(void *)(v5 - 104) = a1;
  *(void *)(v5 - 96) = v4;
  *(void *)(v5 - 128) = v3;
  *(void *)(v5 - 120) = v2;
  *(void *)(v5 - 112) = v1;
  return type metadata accessor for Optional();
}

uint64_t sub_10011DF88@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v5 - 120) = result;
  *(void *)(v5 - 112) = a2;
  *(void *)(v5 - 144) = v4;
  *(void *)(v5 - 136) = v3;
  *(void *)(v5 - 128) = v2;
  return result;
}

uint64_t sub_10011DFB8()
{
  return swift_bridgeObjectRelease();
}

void sub_10011DFD8(uint64_t a1, ...)
{
  va_start(va, a1);
  sub_10011750C(v1, (uint64_t *)va);
}

void sub_10011DFF8(uint64_t a1, ...)
{
  va_start(va, a1);
  sub_10011750C(v1, (uint64_t *)va);
}

void sub_10011E018()
{
  uint64_t v2 = v0[4];
  *(void *)(v1 - 168) = v0[3];
  *(void *)(v1 - 160) = v2;
  *(void *)(v1 - 152) = v0[5];
}

uint64_t sub_10011E05C()
{
  return type metadata accessor for Optional();
}

uint64_t sub_10011E074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  return sub_10000C0D4((uint64_t)&a28, v28 + 72);
}

uint64_t sub_10011E08C()
{
  return v0;
}

void sub_10011E0AC()
{
  *(void *)(v0 - 104) = 0;
  *(void *)(v0 - 96) = 0xE000000000000000;
  _StringGuts.grow(_:)(18);
}

uint64_t sub_10011E0CC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10011E0EC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10011E10C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_10011E140()
{
  return swift_bridgeObjectRelease();
}

void sub_10011E174()
{
  sub_10011750C(v1, (uint64_t *)(v0 + 160));
}

void sub_10011E194()
{
  sub_10000E990();
  uint64_t v3 = v2;
  char v34 = v4;
  uint64_t v35 = v5;
  sub_100028430();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_100129448();
  Swift::String v10 = *(void (**)(void))(v9 + 16);
  uint64_t v11 = v0;
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v10)(v36, v12, v9);
  uint64_t v13 = v36[4];
  uint64_t v14 = v36[5];
  swift_bridgeObjectRetain();
  sub_10002A500(v36);
  if (v14)
  {
    if (v34)
    {
      sub_10000BF1C(&qword_10017D698);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10013F1E0;
      uint64_t v16 = sub_10012959C();
      v10(v16);
      swift_bridgeObjectRetain();
      sub_10002A500(v38);
      uint64_t v17 = sub_1001294B4();
      sub_10011E940(v17, v18, v19);
      swift_bridgeObjectRelease();
      uint64_t v20 = sub_10000BF1C(&qword_100180D58);
      *(void *)(inited + 104) = &protocol witness table for Expression<A>;
      *(void *)(inited + 72) = 21313;
      *(void *)(inited + 80) = 0xE200000000000000;
      *(void *)(inited + 88) = _swiftEmptyArrayStorage;
      *(void *)(inited + 96) = v20;
      *(void *)(inited + 136) = v20;
      *(void *)(inited + 144) = &protocol witness table for Expression<A>;
      uint64_t v21 = sub_1001169E0();
      uint64_t v23 = sub_100117940(v21, v22, v13, v14);
      uint64_t v25 = v24;
      swift_bridgeObjectRelease();
      *(void *)(inited + 112) = v23;
      *(void *)(inited + 120) = v25;
      *(void *)(inited + 128) = _swiftEmptyArrayStorage;
      sub_1001163E0(inited, v35);
      swift_setDeallocating();
      sub_10006F144();
      goto LABEL_9;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v26 = sub_10012959C();
  v10(v26);
  uint64_t v27 = v37[4];
  uint64_t v28 = v37[5];
  swift_bridgeObjectRetain();
  sub_10002A500(v37);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v1, v11, v3);
  if (v28)
  {
    uint64_t v29 = sub_100129798();
    v30(v29);
  }
  else
  {
    uint64_t v31 = sub_10012959C();
    v10(v31);
    uint64_t v32 = sub_100129798();
    v33(v32);
    uint64_t v27 = v38[2];
    uint64_t v28 = v38[3];
    swift_bridgeObjectRetain();
    sub_10002A500(v38);
  }
  sub_10011E940(v27, v28, v35);
  swift_bridgeObjectRelease();
LABEL_9:
  sub_10000E930();
}

const char *Table.identifier.unsafeMutableAddressor()
{
  return "TABLE";
}

void sub_10011E3F8()
{
  sub_10000E990();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  sub_100028430();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  sub_1001297F0();
  if (v11)
  {
    sub_1000349CC();
    sub_10000E930();
    sub_10011E194();
  }
  else
  {
    uint64_t v13 = *(void (**)(uint64_t))(v3 + 16);
    uint64_t v14 = sub_1001299E4();
    v13(v14);
    uint64_t v15 = v28[5];
    uint64_t v27 = v28[4];
    swift_bridgeObjectRetain();
    sub_10002A500(v28);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v1, v0, v5);
    if (v15)
    {
      uint64_t v16 = sub_1001296F0();
      v17(v16);
      uint64_t v18 = v27;
    }
    else
    {
      uint64_t v19 = sub_1001299E4();
      v13(v19);
      uint64_t v20 = sub_1001296F0();
      v21(v20);
      uint64_t v18 = v29[2];
      uint64_t v15 = v29[3];
      swift_bridgeObjectRetain();
      sub_10002A500(v29);
    }
    v7[3] = sub_10000BF1C(&qword_100180D58);
    v7[4] = (uint64_t)&protocol witness table for Expression<A>;
    uint64_t v22 = sub_1001169E0();
    uint64_t v24 = sub_100117940(v22, v23, v18, v15);
    uint64_t v26 = v25;
    swift_bridgeObjectRelease();
    *uint64_t v7 = v24;
    v7[1] = v26;
    v7[2] = (uint64_t)_swiftEmptyArrayStorage;
    sub_10000E930();
  }
}

void *sub_10011E590(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100057848();
    uint64_t v3 = a1 + 56;
    do
    {
      swift_bridgeObjectRetain();
      uint64_t v4 = static String._fromSubstring(_:)();
      uint64_t v6 = v5;
      swift_bridgeObjectRelease();
      unint64_t v7 = _swiftEmptyArrayStorage[2];
      if (v7 >= _swiftEmptyArrayStorage[3] >> 1) {
        sub_100057848();
      }
      _swiftEmptyArrayStorage[2] = v7 + 1;
      uint64_t v8 = &_swiftEmptyArrayStorage[2 * v7];
      v8[4] = v4;
      void v8[5] = v6;
      v3 += 32;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

void *sub_10011E690(void (*a1)(void *__return_ptr, void *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    uint64_t v18 = _swiftEmptyArrayStorage;
    sub_100057848();
    uint64_t v6 = _swiftEmptyArrayStorage;
    uint64_t v8 = (uint64_t *)(a3 + 40);
    while (1)
    {
      uint64_t v9 = *v8;
      v16[0] = *(v8 - 1);
      v16[1] = v9;
      swift_bridgeObjectRetain();
      a1(v17, v16);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      swift_bridgeObjectRelease();
      uint64_t v11 = v17[0];
      uint64_t v10 = v17[1];
      uint64_t v18 = v6;
      unint64_t v12 = v6[2];
      if (v12 >= v6[3] >> 1)
      {
        sub_100057848();
        uint64_t v6 = v18;
      }
      v8 += 2;
      uint64_t v6[2] = v12 + 1;
      uint64_t v13 = &v6[2 * v12];
      v13[4] = v11;
      void v13[5] = v10;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_10011E7B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Swift::String_optional v9 = String.Iterator.next()();
  if (v9.value._object)
  {
    uint64_t countAndFlagsBits = v9.value._countAndFlagsBits;
    unint64_t object = v9.value._object;
    do
    {
      BOOL v12 = countAndFlagsBits == a5 && object == a6;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        Character.write<A>(to:)();
      }
      Character.write<A>(to:)();
      swift_bridgeObjectRetain();
      v13._uint64_t countAndFlagsBits = 0;
      v13._unint64_t object = (void *)0xE000000000000000;
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Swift::String_optional v14 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v14.value._countAndFlagsBits;
      unint64_t object = v14.value._object;
    }
    while (v14.value._object);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10011E940@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_1001169E0();
  uint64_t v8 = sub_100117940(v6, v7, a1, a2);
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  sub_10012983C();
  v11();
  uint64_t v13 = v22[6];
  uint64_t v12 = v22[7];
  swift_bridgeObjectRetain();
  sub_10002A500(v22);
  if (v12)
  {
    sub_10000BF1C(&qword_10017D698);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10013F1D0;
    uint64_t v15 = sub_10000BF1C(&qword_100180D58);
    *(void *)(inited + 56) = v15;
    *(void *)(inited + 64) = &protocol witness table for Expression<A>;
    uint64_t v16 = sub_1001169E0();
    uint64_t v18 = sub_100117940(v16, v17, v13, v12);
    uint64_t v20 = v19;
    swift_bridgeObjectRelease();
    *(void *)(inited + 32) = v18;
    *(void *)(inited + 40) = v20;
    *(void *)(inited + 48) = _swiftEmptyArrayStorage;
    *(void *)(inited + 96) = v15;
    *(void *)(inited + 104) = &protocol witness table for Expression<A>;
    *(void *)(inited + 72) = v8;
    *(void *)(inited + 80) = v10;
    *(void *)(inited + 88) = _swiftEmptyArrayStorage;
    sub_10011750C(inited, a3);
    swift_setDeallocating();
    return sub_10006F144();
  }
  else
  {
    uint64_t result = sub_10000BF1C(&qword_100180D58);
    a3[4] = (uint64_t)&protocol witness table for Expression<A>;
    *a3 = v8;
    a3[1] = v10;
    a3[2] = (uint64_t)_swiftEmptyArrayStorage;
    a3[3] = result;
  }
  return result;
}

const char *View.identifier.unsafeMutableAddressor()
{
  return "VIEW";
}

const char *VirtualTable.identifier.unsafeMutableAddressor()
{
  return "VIRTUAL TABLE";
}

uint64_t sub_10011EAD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v14 = && infix(_:_:)(a4, a5, a6, a1, a2, a3);
    uint64_t v16 = v15;
    uint64_t v18 = v17;
    a7[3] = sub_10000BF1C(&qword_100180F08);
    a7[4] = (uint64_t)&protocol witness table for Expression<A>;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *a7 = v14;
    a7[1] = v16;
    a7[2] = v18;
  }
  else
  {
    a7[4] = 0;
    *(_OWORD *)a7 = 0u;
    *((_OWORD *)a7 + 1) = 0u;
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10011EBC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a1 = && infix(_:_:)(a1, a2, a3, a4, a5, a6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t SchemaType.select(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10011EE34(a1, a2, a3, a4, 0);
}

uint64_t sub_10011EC94(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void (*v10)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(unsigned char *, uint64_t, uint64_t);
  uint64_t (*v15)(unsigned char *, void);
  uint64_t v16;
  uint64_t v18;
  unsigned char v21[32];
  void v22[21];
  void v23[21];
  void v24[22];

  uint64_t v10 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(a5 + 16);
  v10(v22, a3, a5);
  uint64_t v11 = v22[3];
  uint64_t v18 = v22[2];
  swift_bridgeObjectRetain();
  sub_10002A500(v22);
  v10(v23, a3, a5);
  uint64_t v13 = v23[6];
  uint64_t v12 = v23[7];
  swift_bridgeObjectRetain();
  sub_10002A500(v23);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 40))(v18, v11, v13, v12, a4, a6);
  v10(v24, a3, a5);
  (*(void (**)(void *, uint64_t, uint64_t))(a6 + 24))(v24, a4, a6);
  uint64_t v14 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(a6 + 32);
  swift_bridgeObjectRetain();
  uint64_t v15 = (uint64_t (*)(unsigned char *, void))v14(v21, a4, a6);
  *(unsigned char *)uint64_t v16 = a1;
  *(void *)(v16 + 8) = a2;
  swift_bridgeObjectRelease();
  return v15(v21, 0);
}

uint64_t SchemaType.select(distinct:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10011EE34(a1, a2, a3, a4, 1);
}

uint64_t sub_10011EE34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  sub_10000BF1C(&qword_10017D698);
  uint64_t v10 = sub_1000EF060();
  *(_OWORD *)(v10 + 16) = xmmword_10013EF20;
  sub_1001156D4(a1, v10 + 32);
  swift_bridgeObjectRetain();
  sub_1001183AC(a2);
  sub_10011EC94(a5, v10, a3, a3, *(void *)(a4 + 8), *(void *)(a4 + 8));

  return swift_bridgeObjectRelease();
}

uint64_t SchemaType.select(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100129610(0, a1, a3, a2, *(void *)(a3 + 8));
}

uint64_t SchemaType.select(distinct:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100129610(1, a1, a3, a2, *(void *)(a3 + 8));
}

uint64_t SchemaType.select(_:)()
{
  return sub_10011EF64();
}

uint64_t SchemaType.select(distinct:)()
{
  return sub_10011EF64();
}

uint64_t sub_10011EF64()
{
  sub_10000E990();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  unint64_t v7 = v6;
  sub_10000BF1C(&qword_10017D698);
  uint64_t v8 = sub_1000EF060();
  *(_OWORD *)(v8 + 16) = xmmword_10013EF20;
  uint64_t v9 = sub_1001295B0();
  uint64_t v10 = v7(v9);
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  *(void *)(v8 + 56) = sub_10000BF1C(&qword_100180D58);
  *(void *)(v8 + 64) = &protocol witness table for Expression<A>;
  *(void *)(v8 + 32) = v10;
  *(void *)(v8 + 40) = v12;
  *(void *)(v8 + 48) = v14;
  v1(v8, v5, v3);
  sub_10000E930();
  return swift_bridgeObjectRelease();
}

void *SchemaType.select<A>(_:)()
{
  return sub_10011F060();
}

{
  return sub_10011F114();
}

uint64_t type metadata accessor for ScalarQuery()
{
  return sub_100010B5C();
}

void *SchemaType.select<A>(distinct:)()
{
  return sub_10011F060();
}

{
  return sub_10011F114();
}

void *sub_10011F060()
{
  sub_100129490();
  sub_10000BF1C(&qword_10017D698);
  *(_OWORD *)(sub_1000EF060() + 16) = xmmword_10013EF20;
  uint64_t v1 = type metadata accessor for Expression();
  sub_100129558(v1, (uint64_t)&protocol witness table for Expression<A>);
  uint64_t v2 = swift_bridgeObjectRetain();
  sub_10012965C(v2, v3, v4, v5, v6, (uint64_t)&protocol witness table for ScalarQuery<A>);
  swift_bridgeObjectRelease();
  return memcpy(v0, v8, 0xA8uLL);
}

void *sub_10011F114()
{
  sub_100129490();
  sub_10000BF1C(&qword_10017D698);
  *(_OWORD *)(sub_1000EF060() + 16) = xmmword_10013EF20;
  type metadata accessor for Optional();
  uint64_t v1 = type metadata accessor for Expression();
  sub_100129558(v1, (uint64_t)&protocol witness table for Expression<A>);
  uint64_t v2 = swift_bridgeObjectRetain();
  sub_10012965C(v2, v3, v4, v5, v6, (uint64_t)&protocol witness table for ScalarQuery<A>);
  swift_bridgeObjectRelease();
  return memcpy(v0, v8, 0xA8uLL);
}

void *SchemaType.count.getter@<X0>(void *a1@<X8>)
{
  sub_10011D1B8(42, (void *)0xE100000000000000, (uint64_t)_swiftEmptyArrayStorage, 0x746E756F63, 0xE500000000000000, &qword_100180D58);
  SchemaType.select<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return memcpy(a1, __src, 0xA8uLL);
}

uint64_t QueryType.union(_:)(uint64_t a1)
{
  sub_100115CD4();
  sub_100115E8C();
  v2();
  sub_100129708();
  uint64_t v4 = (uint64_t (*)(uint64_t *, void))v3();
  uint64_t v6 = v5;
  sub_100114978();
  uint64_t v7 = *(void *)(*(void *)(v6 + 160) + 16);
  sub_100114A88(v7);
  uint64_t v8 = *(void *)(v6 + 160);
  *(void *)(v8 + 16) = v7 + 1;
  sub_1001156D4(a1, v8 + 40 * v7 + 32);
  return v4(&v10, 0);
}

uint64_t QueryType.join(_:on:)()
{
  sub_1000288B4();
  sub_100129460();
  swift_bridgeObjectRetain();
  uint64_t v0 = (void *)sub_100129500();
  QueryType.join(_:on:)(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  sub_10000EB44();
  return swift_bridgeObjectRelease();
}

uint64_t QueryType.join(_:on:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return QueryType.join(_:_:on:)(1, a1, a2, a3, a4);
}

uint64_t QueryType.join(_:_:on:)(char a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_100115CD4();
  sub_100115E8C();
  v9();
  sub_1001156D4((uint64_t)a2, (uint64_t)v33);
  sub_10000BEA0(a2, a2[3]);
  sub_10012983C();
  v10();
  uint64_t v11 = sub_100129770();
  sub_10002A464(v11, v12);
  sub_10002A500(v34);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v13 = sub_100129770();
  sub_10011EAD8(v13, v14, v15, a3, a4, a5, v16);
  uint64_t v17 = sub_100129770();
  sub_10002A5D0(v17, v18);
  if (*(void *)&__src[24])
  {
    sub_10000D698((long long *)__src, (uint64_t)&v29);
  }
  else
  {
    uint64_t v31 = sub_10000BF1C(&qword_100180F08);
    uint64_t v32 = &protocol witness table for Expression<A>;
    *(void *)&long long v29 = a3;
    *((void *)&v29 + 1) = a4;
    uint64_t v30 = a5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100115734((uint64_t)__src, &qword_100180EF0);
  }
  __src[0] = a1;
  sub_10000D698(v33, (uint64_t)&__src[8]);
  sub_10000D698(&v29, (uint64_t)&__src[48]);
  sub_100129708();
  uint64_t v20 = (uint64_t (*)(unsigned char *, void))v19();
  uint64_t v22 = v21;
  sub_1001149F0();
  uint64_t v23 = *(void *)(*(void *)(v22 + 64) + 16);
  sub_100114AE0(v23);
  uint64_t v24 = *(void *)(v22 + 64);
  *(void *)(v24 + 16) = v23 + 1;
  memcpy((void *)(v24 + 88 * v23 + 32), __src, 0x58uLL);
  return v20(v27, 0);
}

uint64_t QueryType.join(_:_:on:)()
{
  sub_10000E990();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  char v9 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.join(_:_:on:)(v9, v7, v5, v3, v1);
  swift_bridgeObjectRelease();
  sub_10000E930();
  return swift_bridgeObjectRelease();
}

uint64_t QueryType.filter(_:)()
{
  sub_1000288B4();
  sub_1001295E4();
  swift_bridgeObjectRetain();
  sub_100129684();
  swift_bridgeObjectRelease();
  sub_10000EB44();
  return swift_bridgeObjectRelease();
}

uint64_t QueryType.filter(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_100115CD4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a4, v10, v9);
  sub_10012983C();
  v11();
  uint64_t v12 = sub_1001296AC();
  sub_10002A464(v12, v13);
  sub_10002A500(v33);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_1001296AC();
  uint64_t v30 = a1;
  uint64_t v31 = a3;
  uint64_t v17 = sub_10011EBC4(v14, v15, v16, a1, a2, a3);
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v22 = sub_1001296AC();
  sub_10002A5D0(v22, v23);
  if (!v19)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = v31;
    swift_bridgeObjectRetain();
    uint64_t v19 = a2;
    uint64_t v17 = v30;
  }
  sub_100129708();
  uint64_t v25 = (uint64_t (*)(char *, void))v24();
  uint64_t v27 = v26[9];
  uint64_t v28 = v26[10];
  v26[9] = v17;
  void v26[10] = v19;
  v26[11] = v21;
  sub_10002A5D0(v27, v28);
  return v25(v32, 0);
}

uint64_t QueryType.group(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return _s17AppIntents_SQLite9QueryTypePAAE5group_6havingxSayAA11Expressible_pG_AA10ExpressionVySbSgGtF_0(a1, 0, 0, 0, a2, a3, a4);
}

uint64_t _s17AppIntents_SQLite9QueryTypePAAE5group_6havingxSayAA11Expressible_pG_AA10ExpressionVySbSgGtF_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(a7, v7, a5);
  uint64_t v14 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(a6 + 32);
  swift_bridgeObjectRetain();
  sub_10002A464(a2, a3);
  uint64_t v15 = (uint64_t (*)(unsigned char *, void))v14(v21, a5, a6);
  uint64_t v17 = v16[12];
  uint64_t v18 = v16[13];
  uint64_t v19 = v16[14];
  v16[12] = a1;
  v16[13] = a2;
  v16[14] = a3;
  v16[15] = a4;
  sub_10002A614(v17, v18, v19);
  return v15(v21, 0);
}

uint64_t QueryType.group(_:having:)()
{
  sub_10000E990();
  sub_100129520();
  sub_10000BF1C(&qword_10017D698);
  uint64_t v1 = sub_1000EF060();
  *(_OWORD *)(v1 + 16) = xmmword_10013EF20;
  sub_1001156D4(v0, v1 + 32);
  sub_1001294E0();
  QueryType.group(_:having:)();
  sub_10000E930();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000288B4();
  sub_100129460();
  swift_bridgeObjectRetain();
  uint64_t v0 = sub_100129500();
  _s17AppIntents_SQLite9QueryTypePAAE5group_6havingxSayAA11Expressible_pG_AA10ExpressionVySbSgGtF_0(v0, v1, v2, v3, v4, v5, v6);
  swift_bridgeObjectRelease();
  sub_10000EB44();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_10000E990();
  sub_100129520();
  sub_10000BF1C(&qword_10017D698);
  uint64_t v1 = sub_1000EF060();
  *(_OWORD *)(v1 + 16) = xmmword_10013EF20;
  sub_1001156D4(v0, v1 + 32);
  uint64_t v2 = sub_1001294E0();
  _s17AppIntents_SQLite9QueryTypePAAE5group_6havingxSayAA11Expressible_pG_AA10ExpressionVySbSgGtF_0(v2, v3, v4, v5, v6, v7, v8);
  sub_10000E930();
  return swift_bridgeObjectRelease();
}

uint64_t QueryType.order(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100115CD4();
  sub_100115E8C();
  v6();
  uint64_t v7 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(a3 + 32);
  swift_bridgeObjectRetain();
  uint64_t v8 = (uint64_t (*)(unsigned char *, void))v7(v11, a2, a3);
  *(void *)(v9 + 128) = a1;
  swift_bridgeObjectRelease();
  return v8(v11, 0);
}

uint64_t QueryType.limit(_:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_10011FBB4(a1, a2 & 1, 0, 1, a3, a4, a5);
}

uint64_t sub_10011FBB4@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(a7, v7, a5);
  char v14 = a4 & 1;
  char v16 = a2 & 1;
  BOOL v15 = (a2 & 1) == 0;
  if (a2) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = a1;
  }
  if (v15)
  {
    char v18 = v14;
  }
  else
  {
    a3 = 0;
    char v18 = 0;
  }
  uint64_t v19 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(a6 + 32))(v22, a5, a6);
  *(void *)(v20 + 136) = v17;
  *(void *)(v20 + 144) = a3;
  *(unsigned char *)(v20 + 152) = v18;
  *(unsigned char *)(v20 + 153) = v16;
  return v19(v22, 0);
}

uint64_t QueryType.limit(_:offset:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_10011FBB4(a1, 0, a2, 0, a3, a4, a5);
}

void sub_10011FCC0()
{
  sub_1001297B0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_10000BF1C(&qword_10017D698);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013F9D0;
  if (*v0) {
    uint64_t v6 = 0x44205443454C4553;
  }
  else {
    uint64_t v6 = 0x5443454C4553;
  }
  if (*v0) {
    unint64_t v7 = 0xEF54434E49545349;
  }
  else {
    unint64_t v7 = 0xE600000000000000;
  }
  uint64_t v8 = sub_10000BF1C(&qword_100180D58);
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  *(void *)(inited + 32) = v6;
  *(void *)(inited + 40) = v7;
  *(void *)(inited + 48) = _swiftEmptyArrayStorage;
  *(void *)(inited + 56) = v8;
  uint64_t v9 = swift_bridgeObjectRetain();
  sub_100129540(v9, (uint64_t *)(inited + 72));
  swift_bridgeObjectRelease();
  *(void *)(inited + 136) = v8;
  *(void *)(inited + 144) = &protocol witness table for Expression<A>;
  *(void *)(inited + 112) = 1297044038;
  *(void *)(inited + 120) = 0xE400000000000000;
  *(void *)(inited + 128) = _swiftEmptyArrayStorage;
  v2(1);
  sub_1001163E0(inited, v4);
  swift_setDeallocating();
  sub_10006F144();
  sub_100129718();
}

uint64_t sub_10011FDE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  void (*v6)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void v13[21];
  void v14[22];

  sub_10000BF1C(&qword_10017D698);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013F9D0;
  uint64_t v6 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(a2 + 16);
  v6(v13, a1, a2);
  sub_10002A500(v13);
  if (LOBYTE(v13[0])) {
    unint64_t v7 = 0x44205443454C4553;
  }
  else {
    unint64_t v7 = 0x5443454C4553;
  }
  if (LOBYTE(v13[0])) {
    uint64_t v8 = 0xEF54434E49545349;
  }
  else {
    uint64_t v8 = 0xE600000000000000;
  }
  uint64_t v9 = sub_10000BF1C(&qword_100180D58);
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  *(void *)(inited + 32) = v7;
  *(void *)(inited + 40) = v8;
  *(void *)(inited + 48) = _swiftEmptyArrayStorage;
  *(void *)(inited + 56) = v9;
  v6(v14, a1, a2);
  uint64_t v10 = v14[1];
  swift_bridgeObjectRetain();
  sub_10002A500(v14);
  sub_10011750C(v10, (uint64_t *)(inited + 72));
  swift_bridgeObjectRelease();
  *(void *)(inited + 136) = v9;
  *(void *)(inited + 144) = &protocol witness table for Expression<A>;
  *(void *)(inited + 112) = 1297044038;
  *(void *)(inited + 120) = 0xE400000000000000;
  *(void *)(inited + 128) = _swiftEmptyArrayStorage;
  sub_10011E194();
  sub_10011750C(inited, a3);
  swift_setDeallocating();
  return sub_10006F144();
}

void sub_10011FF8C()
{
  sub_10000E990();
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v18 = v4;
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v17 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_100116F48();
    uint64_t v6 = _swiftEmptyArrayStorage;
    unint64_t v7 = (unsigned __int8 *)(v4 + 32);
    do
    {
      sub_1001203A4(v7, v14);
      uint64_t v17 = v6;
      unint64_t v9 = v6[2];
      unint64_t v8 = v6[3];
      if (v9 >= v8 >> 1)
      {
        sub_100035E4C(v8);
        sub_100116F48();
      }
      uint64_t v10 = v15;
      uint64_t v11 = v16;
      sub_10005FFB0((uint64_t)v14, v15);
      sub_100028430();
      __chkstk_darwin(v12);
      sub_1001297F0();
      sub_1001296E0();
      v13();
      sub_10012829C(v9, v1, (uint64_t *)&v17, v10, v11);
      sub_10000E788((uint64_t)v14);
      uint64_t v6 = v17;
      v7 += 88;
      --v5;
    }
    while (v5);
    sub_10000D818((uint64_t)&v18);
    sub_1001163E0((uint64_t)v6, v3);
    swift_release();
  }
  else
  {
    sub_100129400();
  }
  sub_10000E930();
}

uint64_t sub_1001200F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void (*v6)(void *__return_ptr);
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  void *v22;
  unsigned __int8 v24[88];
  uint64_t v25[3];
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void v29[8];
  uint64_t v30;
  void v31[8];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  uint64_t v6 = *(void (**)(void *__return_ptr))(a2 + 16);
  v6(v29);
  unint64_t v7 = v30;
  char v34 = v30;
  swift_bridgeObjectRetain();
  sub_10002A500(v29);
  unint64_t v8 = *(void *)(v7 + 16);
  uint64_t result = sub_10000D818((uint64_t)&v34);
  if (v8)
  {
    ((void (*)(void *__return_ptr, uint64_t, uint64_t))v6)(v31, a1, a2);
    uint64_t v10 = v32;
    uint64_t v33 = v32;
    swift_bridgeObjectRetain();
    sub_10002A500(v31);
    uint64_t v11 = *(void *)(v10 + 16);
    if (v11)
    {
      uint64_t v28 = _swiftEmptyArrayStorage;
      sub_100116F48();
      uint64_t v12 = v10 + 32;
      do
      {
        sub_100115B28(v12, (uint64_t)v24, &qword_100180FE0);
        sub_1001203A4(v24, v25);
        sub_100115734((uint64_t)v24, &qword_100180FE0);
        uint64_t v13 = v28;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100116F48();
          uint64_t v13 = v28;
        }
        char v14 = v13[2];
        if (v14 >= v13[3] >> 1) {
          sub_100116F48();
        }
        uint64_t v15 = v26;
        uint64_t v16 = v27;
        uint64_t v17 = sub_10005FFB0((uint64_t)v25, v26);
        uint64_t v18 = __chkstk_darwin(v17);
        uint64_t v20 = &v24[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
        (*(void (**)(unsigned __int8 *, double))(v21 + 16))(v20, v18);
        sub_10012829C(v14, (uint64_t)v20, (uint64_t *)&v28, v15, v16);
        sub_10000E788((uint64_t)v25);
        v12 += 88;
        --v11;
      }
      while (v11);
      uint64_t v22 = v28;
      sub_10000D818((uint64_t)&v33);
    }
    else
    {
      sub_10000D818((uint64_t)&v33);
      uint64_t v22 = _swiftEmptyArrayStorage;
    }
    sub_10011750C((uint64_t)v22, (uint64_t *)a3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1001203A4@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X8>)
{
  int v4 = *a1;
  sub_1001156D4((uint64_t)(a1 + 8), (uint64_t)v15);
  sub_1001156D4((uint64_t)(a1 + 48), (uint64_t)v16);
  sub_10000D698(v15, (uint64_t)v18);
  sub_10000D698(v16, (uint64_t)v17);
  sub_10000BF1C(&qword_10017D698);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013F9D0;
  *(void *)&v15[0] = 0xE000000000000000;
  unint64_t v6 = 0xE500000000000000;
  uint64_t v7 = 0x52454E4E49;
  if (v4 != 1)
  {
    uint64_t v7 = 0x54554F205446454CLL;
    unint64_t v6 = 0xEA00000000005245;
  }
  if (v4) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0x53534F5243;
  }
  if (v4) {
    unint64_t v9 = v6;
  }
  else {
    unint64_t v9 = 0xE500000000000000;
  }
  unint64_t v10 = v9;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 0x4E494F4A20;
  v11._unint64_t object = (void *)0xE500000000000000;
  String.append(_:)(v11);
  uint64_t v12 = *(void *)&v15[0];
  uint64_t v13 = sub_10000BF1C(&qword_100180D58);
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  *(void *)(inited + 32) = 0;
  *(void *)(inited + 40) = v12;
  *(void *)(inited + 48) = _swiftEmptyArrayStorage;
  *(void *)(inited + 56) = v13;
  sub_10000BEA0(v18, v18[3]);
  sub_10011E194();
  *(void *)(inited + 136) = v13;
  *(void *)(inited + 144) = &protocol witness table for Expression<A>;
  *(void *)(inited + 112) = 20047;
  *(void *)(inited + 120) = 0xE200000000000000;
  *(void *)(inited + 128) = _swiftEmptyArrayStorage;
  sub_1001156D4((uint64_t)v17, inited + 152);
  sub_10011750C(inited, a2);
  swift_setDeallocating();
  sub_10006F144();
  sub_10000E788((uint64_t)v17);
  return sub_10000E788((uint64_t)v18);
}

uint64_t JoinType.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x53534F5243;
  }
  if (a1 == 1) {
    return 0x52454E4E49;
  }
  return 0x54554F205446454CLL;
}

double sub_1001205E8@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = v1[10];
  if (!v3) {
    return sub_100129400();
  }
  uint64_t v4 = v1[11];
  uint64_t v5 = v1[9];
  sub_10000BF1C(&qword_10017D698);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013F1D0;
  uint64_t v7 = sub_10000BF1C(&qword_100180D58);
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  *(void *)(inited + 32) = 0x4552454857;
  *(void *)(inited + 40) = 0xE500000000000000;
  *(void *)(inited + 48) = _swiftEmptyArrayStorage;
  *(void *)(inited + 56) = v7;
  *(void *)(inited + 96) = sub_10000BF1C(&qword_100180F08);
  *(void *)(inited + 104) = &protocol witness table for Expression<A>;
  *(void *)(inited + 72) = v5;
  *(void *)(inited + 80) = v3;
  *(void *)(inited + 88) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1001163E0(inited, a1);
  swift_setDeallocating();
  sub_10006F144();
  return result;
}

double sub_1001206D4@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  (*(void (**)(void *__return_ptr))(a1 + 16))(v6);
  sub_100129250((uint64_t)&v7, (uint64_t)v8, &qword_100181228);
  sub_1001292B0(v8);
  sub_10002A500(v6);
  sub_100129250((uint64_t)v8, (uint64_t)&v9, &qword_100181228);
  if (*((void *)&v9 + 1))
  {
    long long v11 = v9;
    uint64_t v12 = v10;
    sub_10000BF1C(&qword_10017D698);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10013F1D0;
    uint64_t v4 = sub_10000BF1C(&qword_100180D58);
    *(void *)(inited + 64) = &protocol witness table for Expression<A>;
    *(void *)(inited + 32) = 0x4552454857;
    *(void *)(inited + 40) = 0xE500000000000000;
    *(void *)(inited + 48) = _swiftEmptyArrayStorage;
    *(void *)(inited + 56) = v4;
    *(void *)(inited + 96) = sub_10000BF1C(&qword_100180F08);
    *(void *)(inited + 104) = &protocol witness table for Expression<A>;
    *(_OWORD *)(inited + 72) = v11;
    *(void *)(inited + 88) = v12;
    sub_10011750C(inited, (uint64_t *)a2);
    swift_setDeallocating();
    sub_10006F144();
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

void sub_100120828(uint64_t *a1@<X8>)
{
  uint64_t v3 = v1[12];
  if (v3)
  {
    uint64_t v4 = v1[13];
    uint64_t v5 = v1[14];
    uint64_t v6 = v1[15];
    sub_10000BF1C(&qword_10017D698);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10013F1D0;
    uint64_t v8 = sub_10000BF1C(&qword_100180D58);
    *(void *)(inited + 64) = &protocol witness table for Expression<A>;
    *(void *)(inited + 32) = 0x59422050554F5247;
    *(void *)(inited + 40) = 0xE800000000000000;
    *(void *)(inited + 48) = _swiftEmptyArrayStorage;
    *(void *)(inited + 56) = v8;
    swift_bridgeObjectRetain();
    sub_10002A464(v4, v5);
    sub_100129540(v3, (uint64_t *)(inited + 72));
    sub_1001163E0(inited, (uint64_t *)v11);
    swift_setDeallocating();
    sub_10006F144();
    swift_bridgeObjectRelease();
    if (v5)
    {
      uint64_t v9 = swift_initStackObject();
      *(_OWORD *)(v9 + 16) = xmmword_10013F1D0;
      sub_1001156D4((uint64_t)v11, v9 + 32);
      uint64_t v10 = swift_initStackObject();
      *(_OWORD *)(v10 + 16) = xmmword_10013F1D0;
      *(void *)(v10 + 56) = v8;
      *(void *)(v10 + 64) = &protocol witness table for Expression<A>;
      *(void *)(v10 + 32) = 0x474E49564148;
      *(void *)(v10 + 40) = 0xE600000000000000;
      *(void *)(v10 + 48) = _swiftEmptyArrayStorage;
      *(void *)(v10 + 96) = sub_10000BF1C(&qword_100180F08);
      *(void *)(v10 + 104) = &protocol witness table for Expression<A>;
      *(void *)(v10 + 72) = v4;
      *(void *)(v10 + 80) = v5;
      *(void *)(v10 + 88) = v6;
      sub_1001163E0(v10, (uint64_t *)(v9 + 72));
      swift_setDeallocating();
      sub_10006F144();
      sub_1001163E0(v9, a1);
      swift_setDeallocating();
      sub_10006F144();
      sub_10000E788((uint64_t)v11);
    }
    else
    {
      sub_10000D698(v11, (uint64_t)a1);
    }
  }
  else
  {
    sub_100129400();
  }
}

uint64_t sub_100120A0C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  (*(void (**)(void *__return_ptr))(a1 + 16))(v13);
  sub_100129250((uint64_t)&v14, (uint64_t)v15, &qword_100181220);
  sub_10012921C(v15);
  sub_10002A500(v13);
  uint64_t result = sub_100129250((uint64_t)v15, (uint64_t)v16, &qword_100181220);
  uint64_t v4 = v16[0];
  if (v16[0])
  {
    uint64_t v6 = v16[1];
    uint64_t v5 = v16[2];
    uint64_t v7 = v16[3];
    sub_10000BF1C(&qword_10017D698);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10013F1D0;
    uint64_t v9 = sub_10000BF1C(&qword_100180D58);
    *(void *)(inited + 64) = &protocol witness table for Expression<A>;
    *(void *)(inited + 32) = 0x59422050554F5247;
    *(void *)(inited + 40) = 0xE800000000000000;
    *(void *)(inited + 48) = _swiftEmptyArrayStorage;
    *(void *)(inited + 56) = v9;
    sub_10011750C(v4, (uint64_t *)(inited + 72));
    sub_10011750C(inited, (uint64_t *)v12);
    swift_setDeallocating();
    sub_10006F144();
    swift_bridgeObjectRelease();
    if (v5)
    {
      uint64_t v10 = swift_initStackObject();
      *(_OWORD *)(v10 + 16) = xmmword_10013F1D0;
      sub_1001156D4((uint64_t)v12, v10 + 32);
      uint64_t v11 = swift_initStackObject();
      *(_OWORD *)(v11 + 16) = xmmword_10013F1D0;
      *(void *)(v11 + 56) = v9;
      *(void *)(v11 + 64) = &protocol witness table for Expression<A>;
      *(void *)(v11 + 32) = 0x474E49564148;
      *(void *)(v11 + 40) = 0xE600000000000000;
      *(void *)(v11 + 48) = _swiftEmptyArrayStorage;
      *(void *)(v11 + 96) = sub_10000BF1C(&qword_100180F08);
      *(void *)(v11 + 104) = &protocol witness table for Expression<A>;
      *(void *)(v11 + 72) = v6;
      *(void *)(v11 + 80) = v5;
      *(void *)(v11 + 88) = v7;
      sub_10011750C(v11, (uint64_t *)(v10 + 72));
      swift_setDeallocating();
      sub_10006F144();
      sub_10011750C(v10, (uint64_t *)a2);
      swift_setDeallocating();
      sub_10006F144();
      return sub_10000E788((uint64_t)v12);
    }
    else
    {
      return sub_10000D698(v12, a2);
    }
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

double sub_100120C48@<D0>(uint64_t *a1@<X8>)
{
  if (!*(void *)(*(void *)(v1 + 128) + 16)) {
    return sub_100129400();
  }
  sub_10000BF1C(&qword_10017D698);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013F1D0;
  uint64_t v4 = sub_10000BF1C(&qword_100180D58);
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  *(void *)(inited + 32) = 0x594220524544524FLL;
  *(void *)(inited + 40) = 0xE800000000000000;
  *(void *)(inited + 48) = _swiftEmptyArrayStorage;
  *(void *)(inited + 56) = v4;
  uint64_t v5 = swift_bridgeObjectRetain();
  sub_100129540(v5, (uint64_t *)(inited + 72));
  swift_bridgeObjectRelease();
  sub_1001163E0(inited, a1);
  swift_setDeallocating();
  sub_10006F144();
  return result;
}

double sub_100120D24@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void (*v6)(void *__return_ptr);
  uint64_t v7;
  uint64_t v8;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  double result;
  void v13[16];
  uint64_t v14;
  void v15[21];
  uint64_t v16;

  uint64_t v6 = *(void (**)(void *__return_ptr))(a2 + 16);
  v6(v13);
  uint64_t v7 = v14;
  uint64_t v16 = v14;
  swift_bridgeObjectRetain();
  sub_10002A500(v13);
  uint64_t v8 = *(void *)(v7 + 16);
  sub_10000D818((uint64_t)&v16);
  if (v8)
  {
    sub_10000BF1C(&qword_10017D698);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10013F1D0;
    uint64_t v10 = sub_10000BF1C(&qword_100180D58);
    *(void *)(inited + 64) = &protocol witness table for Expression<A>;
    *(void *)(inited + 32) = 0x594220524544524FLL;
    *(void *)(inited + 40) = 0xE800000000000000;
    *(void *)(inited + 48) = _swiftEmptyArrayStorage;
    *(void *)(inited + 56) = v10;
    ((void (*)(void *__return_ptr, uint64_t, uint64_t))v6)(v15, a1, a2);
    uint64_t v11 = v15[16];
    swift_bridgeObjectRetain();
    sub_10002A500(v15);
    sub_10011750C(v11, (uint64_t *)(inited + 72));
    swift_bridgeObjectRelease();
    sub_10011750C(inited, (uint64_t *)a3);
    swift_setDeallocating();
    sub_10006F144();
  }
  else
  {
    *(void *)(a3 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

void sub_100120E94(uint64_t *a1@<X8>)
{
  memcpy(__dst, v1, sizeof(__dst));
  sub_100129250((uint64_t)&__dst[136], (uint64_t)v10, &qword_100181020);
  sub_100129250((uint64_t)v10, (uint64_t)&v11, &qword_100181020);
  if (v13)
  {
    sub_100129400();
  }
  else
  {
    char v3 = v12;
    v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    if (v3)
    {
      uint64_t v5 = sub_10000BF1C(&qword_100180D58);
      a1[4] = (uint64_t)&protocol witness table for Expression<A>;
      *a1 = 0x2054494D494CLL;
      a1[1] = 0xE600000000000000;
      a1[2] = (uint64_t)_swiftEmptyArrayStorage;
      a1[3] = v5;
    }
    else
    {
      sub_10000BF1C(&qword_10017D698);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10013F1D0;
      uint64_t v7 = sub_10000BF1C(&qword_100180D58);
      *(void *)(inited + 64) = &protocol witness table for Expression<A>;
      *(void *)(inited + 32) = 0x2054494D494CLL;
      *(void *)(inited + 40) = 0xE600000000000000;
      *(void *)(inited + 48) = _swiftEmptyArrayStorage;
      *(void *)(inited + 56) = v7;
      v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      *(void *)(inited + 96) = v7;
      *(void *)(inited + 104) = &protocol witness table for Expression<A>;
      *(void *)(inited + 72) = 0x2054455346464FLL;
      *(void *)(inited + 80) = 0xE700000000000000;
      *(void *)(inited + 88) = _swiftEmptyArrayStorage;
      sub_1001163E0(inited, a1);
      swift_setDeallocating();
      sub_10006F144();
    }
  }
}

uint64_t sub_100121064@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  (*(void (**)(void *__return_ptr))(a1 + 16))(v9);
  sub_10002A500(v9);
  sub_100129250((uint64_t)&v10, (uint64_t)v11, &qword_100181020);
  uint64_t result = sub_100129250((uint64_t)v11, (uint64_t)&v12, &qword_100181020);
  if (v14)
  {
    *(void *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  else
  {
    char v4 = v13;
    v5._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    if (v4)
    {
      uint64_t result = sub_10000BF1C(&qword_100180D58);
      *(void *)(a2 + 32) = &protocol witness table for Expression<A>;
      *(void *)a2 = 0x2054494D494CLL;
      *(void *)(a2 + 8) = 0xE600000000000000;
      *(void *)(a2 + 16) = _swiftEmptyArrayStorage;
      *(void *)(a2 + 24) = result;
    }
    else
    {
      sub_10000BF1C(&qword_10017D698);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10013F1D0;
      uint64_t v7 = sub_10000BF1C(&qword_100180D58);
      *(void *)(inited + 64) = &protocol witness table for Expression<A>;
      *(void *)(inited + 32) = 0x2054494D494CLL;
      *(void *)(inited + 40) = 0xE600000000000000;
      *(void *)(inited + 48) = _swiftEmptyArrayStorage;
      *(void *)(inited + 56) = v7;
      v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      *(void *)(inited + 96) = v7;
      *(void *)(inited + 104) = &protocol witness table for Expression<A>;
      *(void *)(inited + 72) = 0x2054455346464FLL;
      *(void *)(inited + 80) = 0xE700000000000000;
      *(void *)(inited + 88) = _swiftEmptyArrayStorage;
      sub_10011750C(inited, (uint64_t *)a2);
      swift_setDeallocating();
      return sub_10006F144();
    }
  }
  return result;
}

void sub_100121254()
{
  sub_10000E990();
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v23 = v2;
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v15 = (uint64_t *)v1;
    uint64_t v22 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_100116F48();
    uint64_t v4 = v2 + 32;
    Swift::String v5 = _swiftEmptyArrayStorage;
    do
    {
      sub_1001156D4(v4, (uint64_t)v16);
      sub_10000BF1C(&qword_10017D698);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10013F1D0;
      *(void *)(inited + 56) = sub_10000BF1C(&qword_100180D58);
      *(void *)(inited + 64) = &protocol witness table for Expression<A>;
      *(void *)(inited + 32) = 0x4E4F494E55;
      *(void *)(inited + 40) = 0xE500000000000000;
      *(void *)(inited + 48) = _swiftEmptyArrayStorage;
      uint64_t v8 = v17;
      uint64_t v7 = v18;
      sub_10000BEA0(v16, v17);
      *(void *)(inited + 96) = v8;
      *(void *)(inited + 104) = *(void *)(v7 + 8);
      sub_1000274F4((uint64_t *)(inited + 72));
      sub_100115CD4();
      sub_100115E8C();
      v9();
      sub_1001163E0(inited, v19);
      swift_setDeallocating();
      sub_10006F144();
      sub_10000E788((uint64_t)v16);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1001299D0();
        sub_100116F48();
        Swift::String v5 = v22;
      }
      unint64_t v10 = v5[2];
      if (v10 >= v5[3] >> 1) {
        sub_100116F48();
      }
      uint64_t v11 = v20;
      uint64_t v12 = v21;
      sub_10005FFB0((uint64_t)v19, v20);
      sub_100028430();
      __chkstk_darwin(v13);
      sub_100129448();
      sub_1001296E0();
      v14();
      sub_10012829C(v10, v8, (uint64_t *)&v22, v11, v12);
      sub_10000E788((uint64_t)v19);
      Swift::String v5 = v22;
      v4 += 40;
      --v3;
    }
    while (v3);
    sub_10000D818((uint64_t)&v23);
    sub_1001163E0((uint64_t)v5, v15);
    swift_release();
  }
  else
  {
    *(void *)(v1 + 32) = 0;
    *(_OWORD *)uint64_t v1 = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
  }
  sub_10000E930();
}

uint64_t sub_1001214CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void (*v6)(void *__return_ptr);
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  long long v29;
  void v30[3];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[3];
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void v37[20];
  uint64_t v38;
  void v39[20];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  uint64_t v6 = *(void (**)(void *__return_ptr))(a2 + 16);
  v6(v37);
  uint64_t v7 = v38;
  uint64_t v42 = v38;
  swift_bridgeObjectRetain();
  sub_10002A500(v37);
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t result = sub_10000D818((uint64_t)&v42);
  if (v8)
  {
    ((void (*)(void *__return_ptr, uint64_t, uint64_t))v6)(v39, a1, a2);
    unint64_t v10 = v40;
    uint64_t v41 = v40;
    swift_bridgeObjectRetain();
    sub_10002A500(v39);
    uint64_t v11 = *(void *)(v10 + 16);
    if (v11)
    {
      uint64_t v28 = a3;
      uint64_t v36 = _swiftEmptyArrayStorage;
      sub_100116F48();
      uint64_t v12 = v10 + 32;
      uint64_t v13 = _swiftEmptyArrayStorage;
      long long v29 = xmmword_10013F1D0;
      do
      {
        sub_1001156D4(v12, (uint64_t)v30);
        sub_10000BF1C(&qword_10017D698);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = v29;
        *(void *)(inited + 56) = sub_10000BF1C(&qword_100180D58);
        *(void *)(inited + 64) = &protocol witness table for Expression<A>;
        *(void *)(inited + 32) = 0x4E4F494E55;
        *(void *)(inited + 40) = 0xE500000000000000;
        *(void *)(inited + 48) = _swiftEmptyArrayStorage;
        uint64_t v16 = v31;
        uint64_t v15 = v32;
        uint64_t v17 = sub_10000BEA0(v30, v31);
        *(void *)(inited + 96) = v16;
        *(void *)(inited + 104) = *(void *)(v15 + 8);
        uint64_t v18 = sub_1000274F4((uint64_t *)(inited + 72));
        (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(v18, v17, v16);
        sub_10011750C(inited, v33);
        swift_setDeallocating();
        sub_10006F144();
        sub_10000E788((uint64_t)v30);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100116F48();
          uint64_t v13 = v36;
        }
        uint64_t v19 = v13[2];
        if (v19 >= v13[3] >> 1) {
          sub_100116F48();
        }
        uint64_t v20 = v34;
        uint64_t v21 = v35;
        uint64_t v22 = sub_10005FFB0((uint64_t)v33, v34);
        uint64_t v23 = __chkstk_darwin(v22);
        uint64_t v25 = (char *)&v27 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, double))(v26 + 16))(v25, v23);
        sub_10012829C(v19, (uint64_t)v25, (uint64_t *)&v36, v20, v21);
        sub_10000E788((uint64_t)v33);
        uint64_t v13 = v36;
        v12 += 40;
        --v11;
      }
      while (v11);
      sub_10000D818((uint64_t)&v41);
      a3 = v28;
    }
    else
    {
      sub_10000D818((uint64_t)&v41);
      uint64_t v13 = _swiftEmptyArrayStorage;
    }
    sub_10011750C((uint64_t)v13, (uint64_t *)a3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t QueryType.alias(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100115CD4();
  sub_100115E8C();
  v8();
  uint64_t v9 = *(void (**)(uint64_t))(a4 + 16);
  uint64_t v10 = sub_1001298B0();
  v9(v10);
  uint64_t v12 = v21[2];
  uint64_t v11 = v21[3];
  swift_bridgeObjectRetain();
  sub_10002A500(v21);
  uint64_t v13 = sub_1001298B0();
  v9(v13);
  uint64_t v15 = v22[6];
  uint64_t v14 = v22[7];
  swift_bridgeObjectRetain();
  sub_10002A500(v22);
  uint64_t v16 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(a4 + 32))(v20, a3, a4);
  uint64_t v18 = v17;
  void v17[2] = v12;
  void v17[3] = v11;
  swift_bridgeObjectRelease();
  void v18[4] = a1;
  v18[5] = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18[6] = v15;
  v18[7] = v14;
  swift_bridgeObjectRelease();
  return v16(v20, 0);
}

uint64_t QueryType.insert(_:_:)(uint64_t a1)
{
  sub_10000BF1C(&qword_10017E940);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013EF20;
  sub_100128334(a1, inited + 32);
  swift_bridgeObjectRetain();
  sub_1001183CC();
  uint64_t v3 = sub_1001296BC();
  QueryType.insert(_:)((Swift::OpaquePointer)v3);
  sub_100129410();
  swift_bridgeObjectRelease();
  return sub_100129380();
}

AppIntents_SQLite::Insert __swiftcall QueryType.insert(_:)(Swift::OpaquePointer a1)
{
  uint64_t v3 = sub_100122048((uint64_t)a1._rawValue, v1, v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100121A38);
  result.bindings._rawValue = v5;
  result.template._unint64_t object = v4;
  result.template._uint64_t countAndFlagsBits = v3;
  return result;
}

void sub_100121A38(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4 = a1;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    uint64_t v7 = a2 + 32;
    swift_bridgeObjectRetain();
    uint64_t v8 = _swiftEmptyArrayStorage;
    while (1)
    {
      sub_100128334(v7, (uint64_t)&v58);
      sub_10000BF1C(&qword_10017D698);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10013EF20;
      sub_1001156D4((uint64_t)&v58, inited + 32);
      unint64_t v10 = v8[2];
      swift_bridgeObjectRetain();
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (!isUniquelyReferenced_nonNull_native || (unint64_t v12 = v8[3] >> 1, v13 = v8, v12 <= v10))
      {
        sub_100114B40(isUniquelyReferenced_nonNull_native, v10 + 1, 1, v8);
        uint64_t v13 = v14;
        unint64_t v12 = v14[3] >> 1;
      }
      if (v12 <= v13[2]) {
        break;
      }
      sub_10000BF1C(&qword_10017E910);
      swift_arrayInitWithCopy();
      ++v13[2];
      swift_bridgeObjectRelease();
      uint64_t v15 = swift_initStackObject();
      *(_OWORD *)(v15 + 16) = xmmword_10013EF20;
      sub_1001156D4((uint64_t)&v62, v15 + 32);
      unint64_t v16 = v6[2];
      swift_bridgeObjectRetain();
      int v17 = swift_isUniquelyReferenced_nonNull_native();
      if (!v17 || (v18 = v6[3] >> 1, uint64_t v19 = v6, v18 <= v16))
      {
        sub_100114B40(v17, v16 + 1, 1, v6);
        uint64_t v19 = v20;
        unint64_t v18 = v20[3] >> 1;
      }
      if (v18 <= v19[2]) {
        goto LABEL_28;
      }
      swift_arrayInitWithCopy();
      ++v19[2];
      swift_bridgeObjectRelease();
      sub_10002A66C((uint64_t)&v58);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v7 += 80;
      uint64_t v6 = v19;
      uint64_t v8 = v13;
      if (!--v5)
      {
        swift_bridgeObjectRelease();
        char v4 = a1;
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_28:
    __break(1u);
  }
  else
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
    uint64_t v19 = _swiftEmptyArrayStorage;
LABEL_14:
    sub_10000BF1C(&qword_100180EE8);
    uint64_t v21 = swift_initStackObject();
    *(_OWORD *)(v21 + 16) = xmmword_1001408F0;
    uint64_t v22 = sub_10000BF1C(&qword_100180D58);
    *(void *)(v21 + 56) = v22;
    *(void *)(v21 + 64) = &protocol witness table for Expression<A>;
    *(void *)(v21 + 32) = 0x545245534E49;
    *(void *)(v21 + 40) = 0xE600000000000000;
    *(void *)(v21 + 48) = _swiftEmptyArrayStorage;
    if (v4 == 5)
    {
      uint64_t v23 = 0;
      unint64_t v24 = 0;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
    }
    else
    {
      uint64_t v58 = 2118223;
      unint64_t v59 = 0xE300000000000000;
      v28._uint64_t countAndFlagsBits = OnConflict.rawValue.getter(v4);
      String.append(_:)(v28);
      swift_bridgeObjectRelease();
      uint64_t v23 = v58;
      unint64_t v24 = v59;
      uint64_t v27 = &protocol witness table for Expression<A>;
      uint64_t v26 = v22;
      uint64_t v25 = _swiftEmptyArrayStorage;
    }
    *(void *)(v21 + 72) = v23;
    *(void *)(v21 + 80) = v24;
    *(void *)(v21 + 88) = v25;
    *(void *)(v21 + 96) = v26;
    *(void *)(v21 + 136) = v22;
    *(void *)(v21 + 144) = &protocol witness table for Expression<A>;
    *(void *)(v21 + 104) = v27;
    *(void *)(v21 + 112) = 1330925129;
    *(void *)(v21 + 120) = 0xE400000000000000;
    *(void *)(v21 + 128) = _swiftEmptyArrayStorage;
    sub_1000349CC();
    sub_10011E194();
    sub_10011750C((uint64_t)v13, &v58);
    uint64_t v29 = v60;
    uint64_t v30 = v61;
    uint64_t v31 = sub_10000BEA0(&v58, v60);
    uint64_t v32 = sub_100118150(v31, 0, 0xE000000000000000, v29, v30);
    uint64_t v34 = v33;
    uint64_t v36 = v35;
    sub_10000E788((uint64_t)&v58);
    *(void *)(v21 + 192) = v32;
    *(void *)(v21 + 200) = v34;
    *(void *)(v21 + 208) = v36;
    *(void *)(v21 + 216) = v22;
    *(void *)(v21 + 256) = v22;
    *(void *)(v21 + 264) = &protocol witness table for Expression<A>;
    *(void *)(v21 + 224) = &protocol witness table for Expression<A>;
    *(void *)(v21 + 232) = 0x5345554C4156;
    *(void *)(v21 + 240) = 0xE600000000000000;
    *(void *)(v21 + 248) = _swiftEmptyArrayStorage;
    sub_10011750C((uint64_t)v19, &v58);
    uint64_t v37 = v60;
    uint64_t v38 = v61;
    uint64_t v39 = sub_10000BEA0(&v58, v60);
    uint64_t v40 = sub_100118150(v39, 0, 0xE000000000000000, v37, v38);
    uint64_t v42 = v41;
    uint64_t v44 = v43;
    sub_10000E788((uint64_t)&v58);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v21 + 296) = v22;
    *(void *)(v21 + 304) = &protocol witness table for Expression<A>;
    *(void *)(v21 + 272) = v40;
    *(void *)(v21 + 280) = v42;
    *(void *)(v21 + 288) = v44;
    uint64_t v45 = _swiftEmptyArrayStorage;
    sub_1001206D4(a4, v21 + 312);
    for (uint64_t i = 32; i != 352; i += 40)
    {
      sub_100115B28(v21 + i, (uint64_t)&v58, &qword_100180EF0);
      sub_100129250((uint64_t)&v58, (uint64_t)&v55, &qword_100180EF0);
      if (v56)
      {
        sub_10000D698(&v55, (uint64_t)v57);
        sub_10000D698(v57, (uint64_t)&v55);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100114B40(0, v45[2] + 1, 1, v45);
          uint64_t v45 = v49;
        }
        unint64_t v48 = v45[2];
        unint64_t v47 = v45[3];
        if (v48 >= v47 >> 1)
        {
          sub_100114B40(v47 > 1, v48 + 1, 1, v45);
          uint64_t v45 = v50;
        }
        long long v45[2] = v48 + 1;
        sub_10000D698(&v55, (uint64_t)&v45[5 * v48 + 4]);
      }
      else
      {
        sub_100115734((uint64_t)&v55, &qword_100180EF0);
      }
    }
    swift_bridgeObjectRelease();
    sub_10011750C((uint64_t)v45, &v58);
    swift_bridgeObjectRelease();
    uint64_t v51 = v60;
    uint64_t v52 = v61;
    sub_10000BEA0(&v58, v60);
    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v51, v52);
    sub_10000E788((uint64_t)&v58);
  }
}

uint64_t QueryType.insert(or:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001228F0(a1, a2, a3, a4, (uint64_t (*)(void))QueryType.insert(or:_:));
}

AppIntents_SQLite::Insert __swiftcall QueryType.insert(or:_:)(AppIntents_SQLite::OnConflict or, Swift::OpaquePointer _)
{
  uint64_t v4 = sub_1001228F0(or, (uint64_t)_._rawValue, v2, v3, (uint64_t (*)(void))sub_100121A38);
  result.bindings._rawValue = v6;
  result.template._unint64_t object = v5;
  result.template._uint64_t countAndFlagsBits = v4;
  return result;
}

AppIntents_SQLite::Insert __swiftcall QueryType.insertMany(_:)(Swift::OpaquePointer a1)
{
  uint64_t v3 = sub_100122048((uint64_t)a1._rawValue, v1, v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100122064);
  result.bindings._rawValue = v5;
  result.template._unint64_t object = v4;
  result.template._uint64_t countAndFlagsBits = v3;
  return result;
}

uint64_t sub_100122048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  return a4(5, a1, a2, a3);
}

void sub_100122064(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    int v69 = a1;
    uint64_t v71 = a3;
    uint64_t v72 = a4;
    uint64_t v5 = *(void *)(a2 + 32);
    uint64_t v73 = a2 + 32;
    uint64_t v74 = v4;
    uint64_t v6 = *(void *)(v5 + 16);
    if (v6)
    {
      *(void *)&long long v78 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      sub_100116F48();
      uint64_t v7 = v5 + 32;
      uint64_t v8 = _swiftEmptyArrayStorage;
      do
      {
        sub_100128334(v7, (uint64_t)&v80);
        sub_1001156D4((uint64_t)&v80, (uint64_t)&v85);
        sub_10002A66C((uint64_t)&v80);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100116F48();
          uint64_t v8 = (void *)v78;
        }
        unint64_t v9 = v8[2];
        if (v9 >= v8[3] >> 1) {
          sub_100116F48();
        }
        uint64_t v10 = v86;
        uint64_t v11 = v87;
        uint64_t v12 = sub_10005FFB0((uint64_t)&v85, v86);
        double v13 = __chkstk_darwin(v12);
        uint64_t v15 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, double))(v16 + 16))(v15, v13);
        sub_10012829C(v9, (uint64_t)v15, (uint64_t *)&v78, v10, v11);
        sub_10000E788((uint64_t)&v85);
        uint64_t v8 = (void *)v78;
        v7 += 80;
        --v6;
      }
      while (v6);
      uint64_t v70 = (void *)v78;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v70 = _swiftEmptyArrayStorage;
    }
    *(void *)&long long v85 = _swiftEmptyArrayStorage;
    uint64_t v17 = v74;
    sub_100116F8C();
    uint64_t v18 = 0;
    long long v77 = xmmword_10013EF20;
    do
    {
      if (v18 == v17) {
        goto LABEL_51;
      }
      uint64_t v19 = *(void *)(v73 + 8 * v18);
      uint64_t v20 = *(void *)(v19 + 16);
      if (v20)
      {
        uint64_t v75 = *(void *)(v73 + 8 * v18);
        uint64_t v76 = v18;
        uint64_t v21 = v19 + 32;
        swift_bridgeObjectRetain();
        uint64_t v22 = _swiftEmptyArrayStorage;
        while (1)
        {
          sub_100128334(v21, (uint64_t)&v80);
          sub_10000BF1C(&qword_10017D698);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = v77;
          sub_1001156D4((uint64_t)&v84, inited + 32);
          unint64_t v24 = v22[2];
          swift_bridgeObjectRetain();
          int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          if (!isUniquelyReferenced_nonNull_native || (unint64_t v26 = v22[3] >> 1, v27 = v22, v26 <= v24))
          {
            sub_100114B40(isUniquelyReferenced_nonNull_native, v24 + 1, 1, v22);
            uint64_t v27 = v28;
            unint64_t v26 = v28[3] >> 1;
          }
          if (v26 <= v27[2]) {
            break;
          }
          sub_10000BF1C(&qword_10017E910);
          swift_arrayInitWithCopy();
          ++v27[2];
          swift_setDeallocating();
          sub_10006F144();
          sub_10002A66C((uint64_t)&v80);
          swift_bridgeObjectRelease();
          v21 += 80;
          uint64_t v22 = v27;
          if (!--v20)
          {
            swift_bridgeObjectRelease();
            uint64_t v18 = v76;
            goto LABEL_23;
          }
        }
        __break(1u);
LABEL_51:
        __break(1u);
        return;
      }
      uint64_t v27 = _swiftEmptyArrayStorage;
LABEL_23:
      uint64_t v29 = v85;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100116F8C();
        uint64_t v29 = v85;
      }
      unint64_t v30 = *(void *)(v29 + 16);
      if (v30 >= *(void *)(v29 + 24) >> 1)
      {
        sub_100116F8C();
        uint64_t v29 = v85;
      }
      ++v18;
      *(void *)(v29 + 16) = v30 + 1;
      *(void *)(v29 + 8 * v30 + 32) = v27;
      uint64_t v17 = v74;
    }
    while (v18 != v74);
    sub_10000BF1C(&qword_100180EE8);
    uint64_t v31 = swift_initStackObject();
    *(_OWORD *)(v31 + 16) = xmmword_1001408F0;
    uint64_t v32 = sub_10000BF1C(&qword_100180D58);
    *(void *)(v31 + 56) = v32;
    *(void *)(v31 + 64) = &protocol witness table for Expression<A>;
    *(void *)(v31 + 32) = 0x545245534E49;
    *(void *)(v31 + 40) = 0xE600000000000000;
    *(void *)(v31 + 48) = _swiftEmptyArrayStorage;
    if (v69 == 5)
    {
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
    }
    else
    {
      *(void *)&long long v80 = 2118223;
      *((void *)&v80 + 1) = 0xE300000000000000;
      v38._uint64_t countAndFlagsBits = OnConflict.rawValue.getter(v69);
      String.append(_:)(v38);
      swift_bridgeObjectRelease();
      uint64_t v34 = *((void *)&v80 + 1);
      uint64_t v33 = v80;
      uint64_t v37 = &protocol witness table for Expression<A>;
      uint64_t v36 = v32;
      uint64_t v35 = _swiftEmptyArrayStorage;
    }
    *(void *)(v31 + 72) = v33;
    *(void *)(v31 + 80) = v34;
    *(void *)(v31 + 88) = v35;
    *(void *)(v31 + 96) = v36;
    *(void *)(v31 + 136) = v32;
    *(void *)(v31 + 144) = &protocol witness table for Expression<A>;
    *(void *)(v31 + 104) = v37;
    *(void *)(v31 + 112) = 1330925129;
    *(void *)(v31 + 120) = 0xE400000000000000;
    *(void *)(v31 + 128) = _swiftEmptyArrayStorage;
    sub_1000349CC();
    sub_10011E194();
    sub_10011750C((uint64_t)v70, (uint64_t *)&v80);
    uint64_t v39 = v82;
    uint64_t v40 = v83;
    uint64_t v41 = sub_10000BEA0(&v80, v82);
    uint64_t v42 = sub_100118150(v41, 0, 0xE000000000000000, v39, v40);
    uint64_t v44 = v43;
    uint64_t v46 = v45;
    sub_10000E788((uint64_t)&v80);
    swift_bridgeObjectRelease();
    *(void *)(v31 + 192) = v42;
    *(void *)(v31 + 200) = v44;
    *(void *)(v31 + 208) = v46;
    *(void *)(v31 + 216) = v32;
    *(void *)(v31 + 256) = v32;
    *(void *)(v31 + 264) = &protocol witness table for Expression<A>;
    *(void *)(v31 + 224) = &protocol witness table for Expression<A>;
    *(void *)(v31 + 232) = 0x5345554C4156;
    *(void *)(v31 + 240) = 0xE600000000000000;
    *(void *)(v31 + 248) = _swiftEmptyArrayStorage;
    uint64_t v47 = *(void *)(v29 + 16);
    if (v47)
    {
      uint64_t v76 = v31;
      *(void *)&long long v77 = v32;
      *(void *)&long long v85 = _swiftEmptyArrayStorage;
      sub_100116F48();
      uint64_t v48 = 0;
      uint64_t v49 = (void *)v85;
      do
      {
        uint64_t v50 = swift_bridgeObjectRetain();
        sub_10011750C(v50, (uint64_t *)&v80);
        uint64_t v51 = v82;
        uint64_t v52 = v83;
        uint64_t v53 = sub_10000BEA0(&v80, v82);
        uint64_t v54 = sub_100118150(v53, 0, 0xE000000000000000, v51, v52);
        uint64_t v56 = v55;
        uint64_t v58 = v57;
        sub_10000E788((uint64_t)&v80);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100116F48();
          uint64_t v49 = (void *)v85;
        }
        unint64_t v59 = v49[2];
        if (v59 >= v49[3] >> 1)
        {
          sub_100116F48();
          uint64_t v49 = (void *)v85;
        }
        ++v48;
        *(void *)&long long v80 = v54;
        *((void *)&v80 + 1) = v56;
        uint64_t v82 = v77;
        uint64_t v83 = &protocol witness table for Expression<A>;
        uint64_t v81 = v58;
        v49[2] = v59 + 1;
        sub_10000D698(&v80, (uint64_t)&v49[5 * v59 + 4]);
      }
      while (v47 != v48);
      swift_release();
      uint64_t v31 = v76;
    }
    else
    {
      swift_release();
      uint64_t v49 = _swiftEmptyArrayStorage;
    }
    sub_10011750C((uint64_t)v49, (uint64_t *)(v31 + 272));
    swift_bridgeObjectRelease();
    sub_1001206D4(v72, v31 + 312);
    uint64_t v60 = _swiftEmptyArrayStorage;
    for (uint64_t i = 32; i != 352; i += 40)
    {
      sub_100115B28(v31 + i, (uint64_t)&v80, &qword_100180EF0);
      sub_100129250((uint64_t)&v80, (uint64_t)&v78, &qword_100180EF0);
      if (v79)
      {
        sub_10000D698(&v78, (uint64_t)&v85);
        sub_10000D698(&v85, (uint64_t)&v78);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100114B40(0, v60[2] + 1, 1, v60);
          uint64_t v60 = v64;
        }
        unint64_t v63 = v60[2];
        unint64_t v62 = v60[3];
        if (v63 >= v62 >> 1)
        {
          sub_100114B40(v62 > 1, v63 + 1, 1, v60);
          uint64_t v60 = v65;
        }
        v60[2] = v63 + 1;
        sub_10000D698(&v78, (uint64_t)&v60[5 * v63 + 4]);
      }
      else
      {
        sub_100115734((uint64_t)&v78, &qword_100180EF0);
      }
    }
    swift_bridgeObjectRelease();
    sub_10011750C((uint64_t)v60, (uint64_t *)&v80);
    swift_bridgeObjectRelease();
    uint64_t v66 = v82;
    uint64_t v67 = v83;
    sub_10000BEA0(&v80, v82);
    ((void (*)(uint64_t, _UNKNOWN **))v67[1])(v66, v67);
    sub_10000E788((uint64_t)&v80);
  }
  else
  {
    QueryType.insert()();
  }
}

AppIntents_SQLite::Insert __swiftcall QueryType.insertMany(or:_:)(AppIntents_SQLite::OnConflict or, Swift::OpaquePointer _)
{
  uint64_t v4 = sub_1001228F0(or, (uint64_t)_._rawValue, v2, v3, (uint64_t (*)(void))sub_100122064);
  result.bindings._rawValue = v6;
  result.template._unint64_t object = v5;
  result.template._uint64_t countAndFlagsBits = v4;
  return result;
}

uint64_t sub_1001228F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t OnConflict.rawValue.getter(char a1)
{
  uint64_t result = 0x4543414C504552;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x4B4341424C4C4F52;
      break;
    case 2:
      uint64_t result = 0x54524F4241;
      break;
    case 3:
      uint64_t result = 1279869254;
      break;
    case 4:
      uint64_t result = 0x45524F4E4749;
      break;
    default:
      return result;
  }
  return result;
}

AppIntents_SQLite::Insert __swiftcall QueryType.insert()()
{
  sub_1001297B0();
  uint64_t v13 = v0;
  uint64_t v14 = v1;
  sub_10000BF1C(&qword_10017D698);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013F1E0;
  uint64_t v3 = sub_10000BF1C(&qword_100180D58);
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  sub_1001294C0();
  *(void *)(inited + 32) = v4;
  *(void *)(inited + 40) = v5;
  *(void *)(inited + 48) = _swiftEmptyArrayStorage;
  *(void *)(inited + 56) = v6;
  sub_1000349CC();
  sub_10011E194();
  *(void *)(inited + 136) = v3;
  *(void *)(inited + 144) = &protocol witness table for Expression<A>;
  strcpy((char *)(inited + 112), "DEFAULT VALUES");
  *(unsigned char *)(inited + 127) = -18;
  *(void *)(inited + 128) = _swiftEmptyArrayStorage;
  sub_1001163E0(inited, v12);
  swift_setDeallocating();
  sub_10006F144();
  uint64_t v7 = sub_100129304(v12);
  v8(v7);
  sub_10000E788((uint64_t)v12);
  sub_100129380();
  sub_100129718();
  result.bindings._rawValue = v11;
  result.template._unint64_t object = v10;
  result.template._uint64_t countAndFlagsBits = v9;
  return result;
}

void QueryType.insert(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  sub_1001297B0();
  a43 = v44;
  a44 = v45;
  uint64_t v47 = v46;
  sub_10000BF1C(&qword_10017D698);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013F1E0;
  uint64_t v49 = sub_10000BF1C(&qword_100180D58);
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  sub_1001294C0();
  *(void *)(inited + 32) = v50;
  *(void *)(inited + 40) = v51;
  *(void *)(inited + 48) = _swiftEmptyArrayStorage;
  *(void *)(inited + 56) = v52;
  sub_1000349CC();
  sub_10011E194();
  sub_10000BEA0(v47, v47[3]);
  sub_10011D404();
  uint64_t v54 = v53();
  *(void *)(inited + 136) = v49;
  *(void *)(inited + 144) = &protocol witness table for Expression<A>;
  *(void *)(inited + 112) = v54;
  *(void *)(inited + 120) = v55;
  *(void *)(inited + 128) = v56;
  sub_1001163E0(inited, &a28);
  swift_setDeallocating();
  sub_10006F144();
  uint64_t v57 = sub_100129304(&a28);
  v58(v57);
  sub_10000E788((uint64_t)&a28);
  sub_100129380();
  sub_100129718();
}

void QueryType.upsert(_:onConflictOf:)()
{
  sub_10000E990();
  uint64_t v1 = v0;
  uint64_t v25 = v2;
  swift_bridgeObjectRetain();
  uint64_t v3 = sub_100122FD4((uint64_t)sub_100128390, (uint64_t)v24, v1);
  int64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    unint64_t v30 = _swiftEmptyArrayStorage;
    sub_100116FD0(0, v4, 0);
    uint64_t v5 = v3 + 32;
    do
    {
      sub_100128334(v5, (uint64_t)v28);
      sub_1001156D4((uint64_t)v28, (uint64_t)v27);
      uint64_t v6 = sub_10011E7B8(0, 0xE000000000000000, 0x646564756C637865, 0xE800000000000000, 34, (void *)0xE100000000000000);
      uint64_t v8 = v7;
      v29[0] = 0;
      v29[1] = 0xE000000000000000;
      Character.write<A>(to:)();
      v9._uint64_t countAndFlagsBits = v6;
      v9._unint64_t object = v8;
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      Character.write<A>(to:)();
      uint64_t v10 = v29[0];
      uint64_t v11 = v29[1];
      sub_1001156D4((uint64_t)v27, (uint64_t)__src);
      sub_10000BF1C(&qword_10017D698);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10013F1D0;
      uint64_t v13 = sub_10000BF1C(&qword_100180D58);
      *(void *)(inited + 56) = v13;
      *(void *)(inited + 64) = &protocol witness table for Expression<A>;
      *(void *)(inited + 32) = v10;
      *(void *)(inited + 40) = v11;
      *(void *)(inited + 48) = _swiftEmptyArrayStorage;
      sub_10000BEA0(v27, v27[3]);
      sub_10011D404();
      uint64_t v15 = v14();
      *(void *)(inited + 96) = v13;
      *(void *)(inited + 104) = &protocol witness table for Expression<A>;
      *(void *)(inited + 72) = v15;
      *(void *)(inited + 80) = v16;
      *(void *)(inited + 88) = v17;
      sub_10011750C(inited, &__src[5]);
      swift_setDeallocating();
      sub_10006F144();
      memcpy(v29, __src, sizeof(v29));
      sub_10000E788((uint64_t)v27);
      sub_10002A66C((uint64_t)v28);
      uint64_t v18 = v30;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v19 = (char *)sub_1001299D0();
        sub_100116FD0(v19, v20, v21);
        uint64_t v18 = v30;
      }
      unint64_t v23 = v18[2];
      unint64_t v22 = v18[3];
      if (v23 >= v22 >> 1)
      {
        sub_100116FD0((char *)(v22 > 1), v23 + 1, 1);
        uint64_t v18 = v30;
      }
      void v18[2] = v23 + 1;
      memcpy(&v18[10 * v23 + 4], v29, 0x50uLL);
      v5 += 80;
      --v4;
    }
    while (v4);
  }
  swift_bridgeObjectRelease();
  QueryType.upsert(_:onConflictOf:set:)();
  sub_100129410();
  swift_bridgeObjectRelease();
  sub_100129380();
  sub_10000E930();
}

uint64_t sub_100122EF8(void *a1, void *a2)
{
  sub_10000BEA0(a1, a1[3]);
  Swift::String v3 = Expressible.asSQL()();
  sub_10000BEA0(a2, a2[3]);
  Swift::String v4 = Expressible.asSQL()();
  if (v3._countAndFlagsBits == v4._countAndFlagsBits && v3._object == v4._object)
  {
    swift_bridgeObjectRelease_n();
    char v7 = 0;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v7 = v6 ^ 1;
  }
  return v7 & 1;
}

uint64_t sub_100122FD4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  uint64_t v5 = _swiftEmptyArrayStorage;
  uint64_t v18 = _swiftEmptyArrayStorage;
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6)
  {
    char v7 = (uint64_t (*)(unsigned char *))result;
    unint64_t v8 = 0;
    uint64_t v9 = a3 + 32;
    uint64_t v14 = *(void *)(a3 + 16);
    while (v8 < *(void *)(v4 + 16))
    {
      sub_100128334(v9, (uint64_t)__src);
      char v10 = v7(__src);
      if (v3)
      {
        sub_10002A66C((uint64_t)__src);
        swift_release();
        swift_bridgeObjectRelease();
        return (uint64_t)v5;
      }
      if (v10)
      {
        uint64_t v11 = v7;
        memcpy(__dst, __src, sizeof(__dst));
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_100116FD0(0, v5[2] + 1, 1);
        }
        uint64_t v5 = v18;
        unint64_t v13 = v18[2];
        unint64_t v12 = v18[3];
        if (v13 >= v12 >> 1)
        {
          sub_100116FD0((char *)(v12 > 1), v13 + 1, 1);
          uint64_t v5 = v18;
        }
        long long v5[2] = v13 + 1;
        AppIntents_SQLite::Insert result = (uint64_t)memcpy(&v5[10 * v13 + 4], __dst, 0x50uLL);
        char v7 = v11;
        uint64_t v6 = v14;
        uint64_t v4 = a3;
      }
      else
      {
        AppIntents_SQLite::Insert result = sub_10002A66C((uint64_t)__src);
      }
      ++v8;
      v9 += 80;
      if (v6 == v8) {
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return (uint64_t)v5;
  }
  return result;
}

void sub_100123164(uint64_t (*a1)(void *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  uint64_t v17 = *(void *)(a3 + 16);
  if (v17)
  {
    uint64_t v5 = a1;
    unint64_t v6 = 0;
    char v7 = (uint64_t *)(a3 + 40);
    unint64_t v8 = _swiftEmptyArrayStorage;
    while (v6 < *(void *)(v4 + 16))
    {
      uint64_t v10 = *(v7 - 1);
      uint64_t v9 = *v7;
      v18[0] = v10;
      v18[1] = v9;
      swift_bridgeObjectRetain();
      char v11 = v5(v18);
      if (v3)
      {
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }
      if (v11)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v19 = v8;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_100057848();
          unint64_t v8 = v19;
        }
        unint64_t v13 = v8[2];
        if (v13 >= v8[3] >> 1)
        {
          sub_100057848();
          unint64_t v8 = v19;
        }
        _OWORD v8[2] = v13 + 1;
        uint64_t v14 = &v8[2 * v13];
        void v14[4] = v10;
        v14[5] = v9;
        uint64_t v4 = a3;
        uint64_t v5 = a1;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      ++v6;
      v7 += 2;
      if (v17 == v6) {
        goto LABEL_16;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_16:
    swift_bridgeObjectRelease();
  }
}

void QueryType.upsert(_:onConflictOf:set:)()
{
  sub_10000E990();
  uint64_t v74 = v4;
  uint64_t v76 = v0;
  uint64_t v82 = v5;
  long long v78 = v6;
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v80 = v8;
  if (v7)
  {
    uint64_t v9 = v3 + 32;
    uint64_t v84 = v97;
    uint64_t v72 = v3;
    swift_bridgeObjectRetain();
    uint64_t v10 = _swiftEmptyArrayStorage;
    char v11 = _swiftEmptyArrayStorage;
    while (1)
    {
      sub_100128334(v9, (uint64_t)&v93);
      sub_10000BF1C(&qword_10017D698);
      uint64_t inited = (__n128 *)swift_initStackObject();
      sub_100129868(inited, v13, v14, v15, v16, v17, v18, v19, v72, v74, v76, (uint64_t)v78, v80, v82, (uint64_t)v84, v86, v20);
      sub_1001156D4((uint64_t)&v93, v1);
      unint64_t v21 = v11[2];
      swift_bridgeObjectRetain();
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (!isUniquelyReferenced_nonNull_native || (unint64_t v23 = v11[3] >> 1, v24 = v11, v23 <= v21))
      {
        sub_100114B40(isUniquelyReferenced_nonNull_native, v21 + 1, 1, v11);
        unint64_t v24 = v25;
        unint64_t v23 = v25[3] >> 1;
      }
      if (v23 <= v24[2]) {
        break;
      }
      sub_10000BF1C(&qword_10017E910);
      swift_arrayInitWithCopy();
      ++v24[2];
      swift_bridgeObjectRelease();
      unint64_t v26 = (__n128 *)swift_initStackObject();
      sub_100129868(v26, v27, v28, v29, v30, v31, v32, v33, v73, v75, v77, v79, v81, v83, v85, v87, v34);
      sub_1001156D4((uint64_t)v84, v1);
      unint64_t v35 = v10[2];
      swift_bridgeObjectRetain();
      int v36 = swift_isUniquelyReferenced_nonNull_native();
      if (!v36 || (unint64_t v37 = v10[3] >> 1, v38 = v10, v37 <= v35))
      {
        sub_100114B40(v36, v35 + 1, 1, v10);
        Swift::String v38 = v39;
        unint64_t v37 = v39[3] >> 1;
      }
      if (v37 <= v38[2]) {
        goto LABEL_32;
      }
      uint64_t v2 = 40;
      swift_arrayInitWithCopy();
      ++v38[2];
      swift_bridgeObjectRelease();
      sub_10002A66C((uint64_t)&v93);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v9 += 80;
      uint64_t v10 = v38;
      char v11 = v24;
      if (!--v7)
      {
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_32:
    __break(1u);
  }
  else
  {
    unint64_t v24 = _swiftEmptyArrayStorage;
    Swift::String v38 = _swiftEmptyArrayStorage;
LABEL_14:
    sub_10000BF1C(&qword_100180EE8);
    uint64_t v40 = swift_allocObject();
    *(_OWORD *)(v40 + 16) = xmmword_100141BE0;
    uint64_t v41 = sub_10000BF1C(&qword_100180D58);
    *(void *)(v40 + 32) = 0x545245534E49;
    *(void *)(v40 + 40) = 0xE600000000000000;
    *(void *)(v40 + 48) = _swiftEmptyArrayStorage;
    *(void *)(v40 + 56) = v41;
    *(void *)(v40 + 96) = v41;
    *(void *)(v40 + 104) = &protocol witness table for Expression<A>;
    *(void *)(v40 + 64) = &protocol witness table for Expression<A>;
    *(void *)(v40 + 72) = 1330925129;
    *(void *)(v40 + 80) = 0xE400000000000000;
    *(void *)(v40 + 88) = _swiftEmptyArrayStorage;
    sub_1000349CC();
    sub_10011E194();
    sub_100129540((uint64_t)v24, (uint64_t *)&v93);
    sub_10012961C();
    sub_100129968();
    *(void *)(v40 + 152) = v40 + 112;
    *(void *)(v40 + 160) = v2;
    *(void *)(v40 + 168) = v1;
    *(void *)(v40 + 176) = v41;
    *(void *)(v40 + 216) = v41;
    *(void *)(v40 + 224) = &protocol witness table for Expression<A>;
    *(void *)(v40 + 184) = &protocol witness table for Expression<A>;
    *(void *)(v40 + 192) = 0x5345554C4156;
    *(void *)(v40 + 200) = 0xE600000000000000;
    *(void *)(v40 + 208) = _swiftEmptyArrayStorage;
    sub_100129540((uint64_t)v38, (uint64_t *)&v93);
    sub_10012961C();
    sub_100129968();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v40 + 256) = v41;
    *(void *)(v40 + 264) = &protocol witness table for Expression<A>;
    *(void *)(v40 + 232) = v40 + 112;
    *(void *)(v40 + 240) = v2;
    *(void *)(v40 + 248) = v1;
    sub_1001206D4(v82, v40 + 272);
    *(void *)(v40 + 336) = v41;
    *(void *)(v40 + 344) = &protocol witness table for Expression<A>;
    *(void *)(v40 + 312) = 0x4C464E4F43204E4FLL;
    *(void *)(v40 + 320) = 0xEB00000000544349;
    *(void *)(v40 + 328) = _swiftEmptyArrayStorage;
    uint64_t v42 = v78[3];
    uint64_t v43 = v78[4];
    uint64_t v44 = sub_10000BEA0(v78, v42);
    uint64_t v45 = v43;
    uint64_t v46 = _swiftEmptyArrayStorage;
    *(void *)(v40 + 352) = sub_100118150(v44, 0, 0xE000000000000000, v42, v45);
    *(void *)(v40 + 360) = v47;
    *(void *)(v40 + 368) = v48;
    *(void *)(v40 + 376) = v41;
    uint64_t v88 = v41;
    *(void *)(v40 + 416) = v41;
    *(void *)(v40 + 424) = &protocol witness table for Expression<A>;
    *(void *)(v40 + 384) = &protocol witness table for Expression<A>;
    strcpy((char *)(v40 + 392), "DO UPDATE SET");
    *(_WORD *)(v40 + 406) = -4864;
    *(void *)(v40 + 408) = _swiftEmptyArrayStorage;
    unint64_t v49 = v80;
    uint64_t v50 = *(void *)(v80 + 16);
    if (v50)
    {
      *(void *)&long long v89 = _swiftEmptyArrayStorage;
      sub_100116F48();
      uint64_t v51 = v80 + 32;
      uint64_t v46 = _swiftEmptyArrayStorage;
      do
      {
        sub_100128334(v51, (uint64_t)&v93);
        sub_10000BF1C(&qword_10017D698);
        uint64_t v52 = swift_initStackObject();
        *(_OWORD *)(v52 + 16) = xmmword_10013F1D0;
        sub_1001156D4((uint64_t)&v93, v52 + 32);
        sub_1001156D4((uint64_t)v97, v52 + 72);
        sub_10011750C(v52, (uint64_t *)&v91);
        sub_10000BEA0(&v91, v92);
        sub_10011D404();
        uint64_t v54 = v53();
        uint64_t v56 = v55;
        uint64_t v58 = v57;
        sub_10000E788((uint64_t)&v91);
        swift_setDeallocating();
        sub_10006F144();
        sub_10002A66C((uint64_t)&v93);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100116F48();
          uint64_t v46 = (void *)v89;
        }
        unint64_t v49 = v46[2];
        unint64_t v59 = v46[3];
        if (v49 >= v59 >> 1)
        {
          sub_100035E4C(v59);
          sub_100116F48();
          uint64_t v46 = (void *)v89;
        }
        *(void *)&long long v93 = v54;
        *((void *)&v93 + 1) = v56;
        uint64_t v95 = v88;
        char v96 = &protocol witness table for Expression<A>;
        uint64_t v94 = v58;
        long long v46[2] = v49 + 1;
        sub_10000D698(&v93, (uint64_t)&v46[5 * v49 + 4]);
        v51 += 80;
        --v50;
      }
      while (v50);
    }
    sub_100129540((uint64_t)v46, (uint64_t *)(v40 + 432));
    swift_bridgeObjectRelease();
    uint64_t v60 = _swiftEmptyArrayStorage;
    for (uint64_t i = 32; i != 472; i += 40)
    {
      sub_100115B28(v40 + i, (uint64_t)&v93, &qword_100180EF0);
      sub_100129250((uint64_t)&v93, (uint64_t)&v89, &qword_100180EF0);
      if (v90)
      {
        sub_10000D698(&v89, (uint64_t)&v91);
        sub_10000D698(&v91, (uint64_t)&v89);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100114B40(0, v60[2] + 1, 1, v60);
          uint64_t v60 = v65;
        }
        uint64_t v62 = v60[2];
        sub_10012987C();
        if (v64)
        {
          char v66 = sub_10001B520(v63);
          sub_100114B40(v66, v67, v68, v60);
          uint64_t v60 = v69;
        }
        v60[2] = v49;
        sub_10000D698(&v89, (uint64_t)&v60[5 * v62 + 4]);
      }
      else
      {
        sub_100115734((uint64_t)&v89, &qword_100180EF0);
      }
    }
    swift_bridgeObjectRelease();
    sub_1001163E0((uint64_t)v60, (uint64_t *)&v93);
    swift_bridgeObjectRelease();
    uint64_t v70 = sub_100129304(&v93);
    v71(v70);
    sub_100129410();
    sub_10000E788((uint64_t)&v93);
    sub_100129380();
    sub_10000E930();
  }
}

AppIntents_SQLite::Update __swiftcall QueryType.update(_:)(Swift::OpaquePointer a1)
{
  sub_10000E990();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  sub_10000BF1C(&qword_100180EE8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013FAC0;
  uint64_t v9 = sub_10000BF1C(&qword_100180D58);
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  *(void *)(inited + 32) = 0x455441445055;
  *(void *)(inited + 40) = 0xE600000000000000;
  uint64_t v10 = _swiftEmptyArrayStorage;
  *(void *)(inited + 48) = _swiftEmptyArrayStorage;
  *(void *)(inited + 56) = v9;
  sub_1000349CC();
  uint64_t v37 = v5;
  sub_10011E194();
  *(void *)(inited + 136) = v9;
  *(void *)(inited + 144) = &protocol witness table for Expression<A>;
  *(void *)(inited + 112) = 5522771;
  *(void *)(inited + 120) = 0xE300000000000000;
  *(void *)(inited + 128) = _swiftEmptyArrayStorage;
  uint64_t v11 = *(void *)(v7 + 16);
  if (v11)
  {
    uint64_t v35 = v3;
    uint64_t v36 = v1;
    *(void *)&long long v39 = _swiftEmptyArrayStorage;
    sub_100116F48();
    uint64_t v12 = v7 + 32;
    uint64_t v10 = _swiftEmptyArrayStorage;
    long long v38 = xmmword_10013F1D0;
    do
    {
      sub_100128334(v12, (uint64_t)v41);
      sub_10000BF1C(&qword_10017D698);
      uint64_t v13 = swift_initStackObject();
      *(_OWORD *)(v13 + 16) = v38;
      sub_1001156D4((uint64_t)v41, v13 + 32);
      sub_1001156D4((uint64_t)&v42, v13 + 72);
      sub_10011750C(v13, (uint64_t *)&v43);
      swift_setDeallocating();
      sub_10006F144();
      sub_10002A66C((uint64_t)v41);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100116F48();
        uint64_t v10 = (void *)v39;
      }
      unint64_t v15 = v10[2];
      unint64_t v14 = v10[3];
      if (v15 >= v14 >> 1)
      {
        sub_100035E4C(v14);
        sub_100116F48();
      }
      uint64_t v16 = v44;
      uint64_t v17 = v45;
      sub_10005FFB0((uint64_t)&v43, v44);
      sub_100028430();
      __chkstk_darwin(v18);
      __n128 v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_1001296E0();
      v21();
      sub_10012829C(v15, (uint64_t)v20, (uint64_t *)&v39, v16, v17);
      sub_10000E788((uint64_t)&v43);
      uint64_t v10 = (void *)v39;
      v12 += 80;
      --v11;
    }
    while (v11);
    uint64_t v3 = v35;
  }
  sub_100129540((uint64_t)v10, (uint64_t *)(inited + 152));
  swift_bridgeObjectRelease();
  uint64_t v22 = v37;
  sub_1001206D4(v3, inited + 192);
  sub_100120D24(v22, v3, inited + 232);
  sub_100121064(v3, inited + 272);
  unint64_t v23 = _swiftEmptyArrayStorage;
  for (uint64_t i = 32; i != 312; i += 40)
  {
    sub_100115B28(inited + i, (uint64_t)v41, &qword_100180EF0);
    sub_100129250((uint64_t)v41, (uint64_t)&v39, &qword_100180EF0);
    if (v40)
    {
      sub_10000D698(&v39, (uint64_t)&v43);
      sub_10000D698(&v43, (uint64_t)&v39);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1001293DC();
        unint64_t v23 = v27;
      }
      unint64_t v26 = v23[2];
      unint64_t v25 = v23[3];
      if (v26 >= v25 >> 1)
      {
        char v28 = sub_100035E4C(v25);
        sub_100114B40(v28, v26 + 1, 1, v23);
        unint64_t v23 = v29;
      }
      _OWORD v23[2] = v26 + 1;
      sub_10000D698(&v39, (uint64_t)&v23[5 * v26 + 4]);
    }
    else
    {
      sub_100115734((uint64_t)&v39, &qword_100180EF0);
    }
  }
  swift_bridgeObjectRelease();
  sub_1001163E0((uint64_t)v23, v41);
  swift_bridgeObjectRelease();
  sub_10000BEA0(v41, v41[3]);
  sub_10011D404();
  v30();
  sub_10000E788((uint64_t)v41);
  sub_10000E930();
  result.bindings._rawValue = v33;
  result.template._unint64_t object = v32;
  result.template._uint64_t countAndFlagsBits = v31;
  return result;
}

AppIntents_SQLite::Delete __swiftcall QueryType.delete()()
{
  uint64_t v1 = v0;
  sub_10000BF1C(&qword_100180EE8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013F540;
  uint64_t v3 = sub_10000BF1C(&qword_100180D58);
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  *(void *)(inited + 32) = 0x46204554454C4544;
  *(void *)(inited + 40) = 0xEB000000004D4F52;
  uint64_t v4 = _swiftEmptyArrayStorage;
  *(void *)(inited + 48) = _swiftEmptyArrayStorage;
  *(void *)(inited + 56) = v3;
  sub_1001296BC();
  sub_1000349CC();
  sub_10011E194();
  sub_1001296BC();
  sub_1001206D4(v5, v6);
  uint64_t v7 = sub_1001296BC();
  sub_100120D24(v7, v8, v9);
  sub_1001296BC();
  sub_100121064(v10, v11);
  for (uint64_t i = 32; i != 232; i += 40)
  {
    sub_100115B28(inited + i, (uint64_t)v29, &qword_100180EF0);
    sub_100129250((uint64_t)v29, (uint64_t)&v26, &qword_100180EF0);
    if (v27)
    {
      sub_10000D698(&v26, (uint64_t)v28);
      sub_10000D698(v28, (uint64_t)&v26);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100114B40(0, v4[2] + 1, 1, v4);
        uint64_t v4 = v16;
      }
      uint64_t v13 = v4[2];
      sub_10012987C();
      if (v15)
      {
        char v17 = sub_10001B520(v14);
        sub_100114B40(v17, v18, v19, v4);
        uint64_t v4 = v20;
      }
      v4[2] = v1;
      sub_10000D698(&v26, (uint64_t)&v4[5 * v13 + 4]);
    }
    else
    {
      sub_100115734((uint64_t)&v26, &qword_100180EF0);
    }
  }
  swift_bridgeObjectRelease();
  sub_1001163E0((uint64_t)v4, v29);
  swift_bridgeObjectRelease();
  uint64_t v21 = sub_100129304(v29);
  v22(v21);
  sub_10000E788((uint64_t)v29);
  uint64_t v23 = sub_100129380();
  result.bindings._rawValue = v25;
  result.template._unint64_t object = v24;
  result.template._uint64_t countAndFlagsBits = v23;
  return result;
}

uint64_t QueryType.exists.getter()
{
  sub_10000BF1C(&qword_10017D698);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013F1D0;
  uint64_t v1 = sub_10000BF1C(&qword_100180D58);
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  strcpy((char *)(inited + 32), "SELECT EXISTS");
  *(_WORD *)(inited + 46) = -4864;
  *(void *)(inited + 48) = _swiftEmptyArrayStorage;
  *(void *)(inited + 56) = v1;
  sub_10011D404();
  uint64_t v3 = v2();
  uint64_t v6 = sub_10011D1B8(v3, v4, v5, 0, 0xE000000000000000, &qword_100180D58);
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(inited + 96) = v1;
  *(void *)(inited + 104) = &protocol witness table for Expression<A>;
  *(void *)(inited + 72) = v6;
  *(void *)(inited + 80) = v8;
  *(void *)(inited + 88) = v10;
  sub_1001163E0(inited, v14);
  swift_setDeallocating();
  sub_10006F144();
  uint64_t v11 = sub_100129304(v14);
  v12(v11);
  sub_100129410();
  sub_10000E788((uint64_t)v14);
  return sub_100129380();
}

uint64_t QueryType.namespace<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Expression();
  sub_10000BF1C(&qword_10017D698);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013F1D0;
  sub_1000349CC();
  sub_10011E194();
  *(void *)(inited + 96) = v6;
  *(void *)(inited + 104) = &protocol witness table for Expression<A>;
  *(void *)(inited + 72) = a1;
  *(void *)(inited + 80) = a2;
  *(void *)(inited + 88) = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10011750C(inited, v16);
  swift_setDeallocating();
  sub_10006F144();
  sub_10000BEA0(v16, v16[3]);
  sub_10011D404();
  v15[0] = v8();
  v15[1] = v9;
  long long v15[2] = v10;
  uint64_t v11 = sub_10000BF1C(&qword_100180D58);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v13 = sub_100034754(&qword_100181010, &qword_100180D58);
  ExpressionType.init<A>(_:)((uint64_t)v15, v6, v11, WitnessTable, v13);
  sub_10000E788((uint64_t)v16);
  return v16[5];
}

uint64_t QueryType.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Optional();

  return QueryType.namespace<A>(_:)(a1, a2, a3);
}

uint64_t QueryType.subscript.getter()
{
  uint64_t v0 = sub_1001295B0();
  uint64_t v2 = v1(v0);
  QueryType.namespace<A>(_:)(v2, v3, v4);
  sub_100129410();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_100129380();
}

void sub_100124390()
{
  sub_1000288B4();
  sub_10000BF1C(&qword_100180EE8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013FAC0;
  sub_10011FCC0();
  sub_10011FF8C();
  sub_1001205E8((uint64_t *)(inited + 112));
  sub_100120828((uint64_t *)(inited + 152));
  sub_100121254();
  sub_100120C48((uint64_t *)(inited + 232));
  sub_100120E94((uint64_t *)(inited + 272));
  uint64_t v2 = _swiftEmptyArrayStorage;
  for (uint64_t i = 32; i != 312; i += 40)
  {
    sub_100115B28(inited + i, (uint64_t)v20, &qword_100180EF0);
    sub_100129250((uint64_t)v20, (uint64_t)&v17, &qword_100180EF0);
    if (v18)
    {
      sub_10000D698(&v17, (uint64_t)&v19);
      sub_10000D698(&v19, (uint64_t)&v17);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1001293DC();
        uint64_t v2 = v14;
      }
      sub_10012987C();
      if (v13)
      {
        sub_100114B40(v12 > 1, v0, 1, v2);
        uint64_t v2 = (void *)v4;
      }
      sub_100129914(v4, v5, v6, v7, v8, v9, v10, v11, v17);
    }
    else
    {
      sub_100115734((uint64_t)&v17, &qword_100180EF0);
    }
  }
  swift_bridgeObjectRelease();
  sub_1001163E0((uint64_t)v2, v20);
  swift_bridgeObjectRelease();
  uint64_t v15 = sub_100129304(v20);
  v16(v15);
  sub_10000E788((uint64_t)v20);
  sub_10012989C();
  sub_10000EB44();
}

void QueryType.expression.getter()
{
  sub_1000288B4();
  sub_10000BF1C(&qword_100180EE8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10013FAC0;
  uint64_t v1 = sub_1001294B4();
  sub_10011FDE8(v1, v2, v3);
  uint64_t v4 = sub_1001294B4();
  sub_1001200F8(v4, v5, v6);
  sub_1001294B4();
  sub_1001206D4(v7, v8);
  sub_1001294B4();
  sub_100120A0C(v9, v10);
  uint64_t v11 = sub_1001294B4();
  sub_1001214CC(v11, v12, v13);
  uint64_t v14 = sub_1001294B4();
  sub_100120D24(v14, v15, v16);
  sub_1001294B4();
  sub_100121064(v17, v18);
  long long v19 = _swiftEmptyArrayStorage;
  for (uint64_t i = 32; i != 312; i += 40)
  {
    sub_100115B28(inited + i, (uint64_t)v40, &qword_100180EF0);
    sub_100129250((uint64_t)v40, (uint64_t)&v37, &qword_100180EF0);
    if (v38)
    {
      sub_10000D698(&v37, (uint64_t)&v39);
      sub_10000D698(&v39, (uint64_t)&v37);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1001293DC();
        long long v19 = v31;
      }
      sub_10012987C();
      if (v30)
      {
        char v32 = sub_10001B520(v29);
        sub_100114B40(v32, v33, v34, v19);
        long long v19 = (void *)v21;
      }
      sub_100129914(v21, v22, v23, v24, v25, v26, v27, v28, v37);
    }
    else
    {
      sub_100115734((uint64_t)&v37, &qword_100180EF0);
    }
  }
  swift_bridgeObjectRelease();
  sub_1001163E0((uint64_t)v19, v40);
  swift_bridgeObjectRelease();
  uint64_t v35 = sub_100129304(v40);
  v36(v35);
  sub_10000E788((uint64_t)v40);
  sub_10012989C();
  sub_10000EB44();
}

uint64_t (*Update.template.modify())(void)
{
  return Int64.datatypeValue.getter;
}

void sub_1001246FC()
{
}

uint64_t static View.identifier.getter()
{
  return 1464158550;
}

void sub_100124724()
{
  memcpy(__dst, v0, sizeof(__dst));
  sub_100124390();
}

uint64_t static VirtualTable.identifier.getter()
{
  return 0x204C415554524956;
}

void *VirtualTable.clauses.setter(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  sub_100129948(a1, a2, a3, a4, a5, a6, a7, a8, v11, v12[0]);
  sub_10002A500(v12);
  return memcpy(v9, v8, 0xA8uLL);
}

double ScalarQuery.init(_:database:)()
{
  sub_1001296C8();
  sub_10000BF1C(&qword_10017D698);
  *(_OWORD *)(sub_1000EF060() + 16) = xmmword_10013EF20;
  sub_10000BF1C(&qword_100180D58);
  sub_1001298D8((uint64_t)&protocol witness table for Expression<A>);
  return sub_100129338(v0, (uint64_t)_swiftEmptyArrayStorage);
}

uint64_t _s17AppIntents_SQLite5TableV7clausesAA12QueryClausesVvg_0@<X0>(uint64_t a1@<X8>)
{
  return sub_1001283B0(v1, a1);
}

void *sub_100124854(const void *a1)
{
  memcpy(__dst, v1, sizeof(__dst));
  sub_10002A500(__dst);
  return memcpy(v1, a1, 0xA8uLL);
}

void sub_1001248A4()
{
}

uint64_t Select.template.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t Select.bindings.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*Update.bindings.modify())(void)
{
  return Int64.datatypeValue.getter;
}

uint64_t sub_100124938@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = Int64.datatypeValue.getter(a1);
  *a2 = result;
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

uint64_t sub_100124968(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001249B4()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1001249E4()
{
  return swift_bridgeObjectRetain();
}

AppIntents_SQLite::Row_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> RowIterator.failableNext()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  unint64_t v4 = (unint64_t)Statement.failableNext()();
  if (!v5)
  {
    uint64_t v3 = (void *)v4;
    if (v4) {
      swift_bridgeObjectRetain();
    }
    else {
      uint64_t v2 = 0;
    }
  }
  uint64_t v6 = v2;
  uint64_t v7 = v3;
  result.value.values._rawValue = v7;
  result.value.columnNames._rawValue = v6;
  return result;
}

void RowIterator.map<A>(_:)()
{
  sub_100018E30();
  uint64_t v1 = v0;
  sub_100115CD4();
  __chkstk_darwin(v2);
  sub_100129448();
  Array.init()();
  unint64_t v3 = (unint64_t)Statement.failableNext()();
  uint64_t v5 = v4;
  if (v4)
  {
LABEL_2:
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v6 = v3;
    while (v6)
    {
      uint64_t v7 = swift_bridgeObjectRetain();
      v1(v7, v6);
      if (v5)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_2;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for Array();
      Array.append(_:)();
      unint64_t v6 = (unint64_t)Statement.failableNext()();
      uint64_t v5 = v8;
      if (v8) {
        goto LABEL_2;
      }
    }
  }
  sub_100018E80();
}

void RowIterator.compactMap<A>(_:)()
{
  sub_100018E30();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v28 = v5;
  uint64_t v29 = v6;
  uint64_t v26 = type metadata accessor for Optional();
  sub_100028430();
  uint64_t v22 = v7;
  sub_100116CA8();
  __chkstk_darwin(v8);
  sub_100129808();
  sub_100028430();
  uint64_t v23 = v9;
  __chkstk_darwin(v10);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v22 - v12;
  Array.init()();
  unint64_t v14 = (unint64_t)Statement.failableNext()();
  uint64_t v16 = v15;
  if (v15)
  {
LABEL_2:
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v17 = v14;
    uint64_t v27 = v4;
    uint64_t v24 = (void (**)(void, void))(v23 + 2);
    uint64_t v25 = (void (**)(char *, uint64_t, uint64_t))(v23 + 4);
    ++v23;
    uint64_t v18 = (void (**)(uint64_t, uint64_t))(v22 + 8);
    while (v17)
    {
      uint64_t v19 = swift_bridgeObjectRetain();
      v28(v19, v17);
      if (v16)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_2;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (sub_10000D5D8(v0, 1, v2) == 1)
      {
        (*v18)(v0, v26);
      }
      else
      {
        (*v25)(v13, v0, v2);
        sub_100115E8C();
        v20();
        type metadata accessor for Array();
        Array.append(_:)();
        (*v23)(v13, v2);
      }
      unint64_t v17 = (unint64_t)Statement.failableNext()();
      uint64_t v16 = v21;
      if (v21) {
        goto LABEL_2;
      }
    }
  }
  sub_100018E80();
}

void *sub_100124DF4@<X0>(AppIntents_SQLite::Row_optional *a1@<X8>)
{
  AppIntents_SQLite::Row_optional v3 = RowIterator.failableNext()();
  AppIntents_SQLite::Row_optional result = v3.value.columnNames._rawValue;
  if (!v4) {
    *a1 = v3;
  }
  return result;
}

uint64_t sub_100124E24@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10013021C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t Connection.prepare(_:)(void *a1)
{
  sub_10000BEA0(a1, a1[3]);
  sub_10011D404();
  uint64_t v4 = v3();
  uint64_t v6 = v5;
  Connection.prepare(_:_:)(v4, v7, (uint64_t)_swiftEmptyArrayStorage);
  if (v1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = Statement.bind(_:)(v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v10 = sub_100124F8C(a1);
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v9;
    *(void *)(v11 + 24) = v10;
    sub_10000BF1C(&qword_100181018);
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = sub_1001283EC;
    *(void *)(result + 24) = v11;
  }
  return result;
}

uint64_t sub_100124F8C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = swift_allocObject();
  *(void *)(v4 + 16) = &_swiftEmptyDictionarySingleton;
  id v129 = (void *)(v4 + 16);
  os_log_type_t v134 = (void *)v5;
  *(void *)(v5 + 16) = 0;
  uint64_t v6 = (void *)(v5 + 16);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v142 = a1;
  sub_10000BEA0(a1, v7);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v8 + 16))(v164, v7, v8);
  uint64_t v9 = v164[1];
  swift_bridgeObjectRetain();
  sub_10002A500(v164);
  uint64_t v130 = *(void *)(v9 + 16);
  if (!v130)
  {
    swift_bridgeObjectRelease();
LABEL_90:
    swift_beginAccess();
    uint64_t v96 = *(void *)(v4 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
    return v96;
  }
  uint64_t v133 = v9 + 32;
  uint64_t v127 = v6;
  swift_beginAccess();
  unint64_t v10 = 0;
  unint64_t v144 = &v155;
  uint64_t v145 = v154;
  long long v137 = xmmword_10013EF20;
  uint64_t v131 = v9;
  id v132 = (void *)v4;
  while (2)
  {
    if (v10 >= *(void *)(v9 + 16))
    {
LABEL_97:
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
      goto LABEL_102;
    }
    uint64_t v135 = v10;
    sub_1001156D4(v133 + 40 * v10, (uint64_t)v161);
    uint64_t v11 = v162;
    uint64_t v12 = v163;
    sub_10000BEA0(v161, v162);
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
    unint64_t v15 = v14;
    swift_bridgeObjectRelease();
    uint64_t v16 = HIBYTE(v15) & 0xF;
    if ((v15 & 0x2000000000000000) == 0) {
      uint64_t v16 = v13 & 0xFFFFFFFFFFFFLL;
    }
    if (!v16)
    {
      swift_bridgeObjectRelease();
      uint64_t v146 = _swiftEmptyArrayStorage;
      goto LABEL_36;
    }
    uint64_t v138 = v2;
    uint64_t v17 = 7;
    if (((v15 >> 60) & ((v13 & 0x800000000000000) == 0)) != 0) {
      uint64_t v17 = 11;
    }
    uint64_t v128 = v17 | (v16 << 16);
    unint64_t v18 = 4 * v16;
    unint64_t v19 = 15;
    unint64_t v20 = 15;
    unint64_t v21 = 15;
    uint64_t v146 = _swiftEmptyArrayStorage;
    uint64_t v143 = 4 * v16;
    do
    {
      if (String.subscript.getter() == 46 && v22 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v24 & 1) == 0)
        {
          unint64_t v19 = String.index(after:)();
          continue;
        }
      }
      if (v20 >> 14 != v19 >> 14)
      {
        if (v19 >> 14 < v20 >> 14)
        {
          __break(1u);
          goto LABEL_97;
        }
        uint64_t v25 = String.subscript.getter();
        uint64_t v27 = v26;
        uint64_t v29 = v28;
        uint64_t v31 = v30;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100114F98();
          uint64_t v146 = v34;
        }
        unint64_t v32 = v146[2];
        if (v32 >= v146[3] >> 1)
        {
          sub_100114F98();
          uint64_t v146 = v35;
        }
        v146[2] = v32 + 1;
        uint64_t v33 = &v146[4 * v32];
        v33[4] = v25;
        v33[5] = v27;
        v33[6] = v29;
        v33[7] = v31;
        unint64_t v18 = v143;
      }
      unint64_t v19 = String.index(after:)();
      unint64_t v20 = v19;
      unint64_t v21 = v19;
    }
    while (v18 != v19 >> 14);
    if (v18 == v20 >> 14)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      if (v18 < v21 >> 14) {
        goto LABEL_100;
      }
      uint64_t v36 = String.subscript.getter();
      uint64_t v38 = v37;
      uint64_t v40 = v39;
      uint64_t v42 = v41;
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100114F98();
        uint64_t v146 = v122;
      }
      unint64_t v43 = v146[2];
      if (v43 >= v146[3] >> 1)
      {
        sub_100114F98();
        uint64_t v146 = v123;
      }
      v146[2] = v43 + 1;
      uint64_t v44 = &v146[4 * v43];
      v44[4] = v36;
      v44[5] = v38;
      v44[6] = v40;
      v44[7] = v42;
    }
    uint64_t v2 = v138;
LABEL_36:
    uint64_t v45 = sub_10011E590((uint64_t)v146);
    swift_bridgeObjectRelease();
    if (!v45[2]) {
      goto LABEL_98;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1001291E8();
      uint64_t v45 = v121;
    }
    uint64_t v46 = v45[2];
    if (!v46) {
      goto LABEL_99;
    }
    uint64_t v139 = v2;
    uint64_t v47 = v46 - 1;
    uint64_t v48 = &v45[2 * v47];
    uint64_t v50 = v48[4];
    uint64_t v49 = v48[5];
    long long v45[2] = v47;
    uint64_t v153 = v45;
    swift_bridgeObjectRetain();
    sub_10000BF1C(&qword_10017DED8);
    sub_100034754((unint64_t *)&qword_10017EC90, &qword_10017DED8);
    uint64_t v51 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v53 = v52;
    swift_bridgeObjectRelease();
    if (v50 == 42 && v49 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_52:
      sub_1001156D4((uint64_t)v142, (uint64_t)v158);
      sub_10000BF1C(&qword_10017D698);
      uint64_t v87 = swift_allocObject();
      *(_OWORD *)(v87 + 16) = v137;
      *(void *)(v87 + 56) = sub_10000BF1C(&qword_100180D58);
      *(void *)(v87 + 64) = &protocol witness table for Expression<A>;
      *(void *)(v87 + 32) = 42;
      *(void *)(v87 + 40) = 0xE100000000000000;
      *(void *)(v87 + 48) = _swiftEmptyArrayStorage;
      uint64_t v88 = v159;
      uint64_t v89 = v160;
      sub_10005FFB0((uint64_t)v158, v159);
      uint64_t v90 = (void (*)(void **, void))(*(uint64_t (**)(void **, uint64_t, uint64_t))(v89 + 32))(&v153, v88, v89);
      *(unsigned char *)uint64_t v91 = 0;
      *(void *)(v91 + 8) = v87;
      swift_bridgeObjectRelease();
      v90(&v153, 0);
      sub_10000BF1C(&qword_100180FC8);
      uint64_t v92 = swift_allocObject();
      *(_OWORD *)(v92 + 16) = v137;
      uint64_t v147 = v92;
      sub_1001156D4((uint64_t)v158, v92 + 32);
      uint64_t v93 = v142[3];
      uint64_t v94 = v142[4];
      sub_10000BEA0(v142, v93);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v94 + 16))(v165, v93, v94);
      uint64_t v95 = v166;
      uint64_t v170 = v166;
      swift_bridgeObjectRetain();
      sub_10002A500(v165);
      uint64_t v96 = *(void *)(v95 + 16);
      if (v96)
      {
        id v157 = _swiftEmptyArrayStorage;
        sub_100116FF0();
        uint64_t v97 = v95 + 32;
        uint64_t v98 = v157;
        do
        {
          sub_100115B28(v97, (uint64_t)&v153, &qword_100180FE0);
          LOBYTE(v148) = (_BYTE)v153;
          sub_1001156D4((uint64_t)v145, (uint64_t)&v149);
          sub_1001156D4((uint64_t)v144, (uint64_t)v152);
          sub_10000D698(&v149, (uint64_t)v156);
          sub_10000E788((uint64_t)v152);
          sub_100115734((uint64_t)&v153, &qword_100180FE0);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_100116FF0();
            uint64_t v98 = v157;
          }
          unint64_t v99 = v98[2];
          if (v99 >= v98[3] >> 1)
          {
            sub_100116FF0();
            uint64_t v98 = v157;
          }
          v98[2] = v99 + 1;
          sub_10000D698(v156, (uint64_t)&v98[5 * v99 + 4]);
          v97 += 88;
          --v96;
        }
        while (v96);
        sub_10000D818((uint64_t)&v170);
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_10000D818((uint64_t)&v170);
        swift_bridgeObjectRelease();
        uint64_t v98 = _swiftEmptyArrayStorage;
      }
      uint64_t v153 = (void *)v147;
      sub_10011848C((uint64_t)v98);
      uint64_t v100 = v153;
      uint64_t v101 = HIBYTE(v53) & 0xF;
      if ((v53 & 0x2000000000000000) == 0) {
        uint64_t v101 = v51 & 0xFFFFFFFFFFFFLL;
      }
      if (v101)
      {
        uint64_t v102 = v153[2];
        if (v102)
        {
          uint64_t v96 = (uint64_t)(v153 + 4);
          while (1)
          {
            sub_1001156D4(v96, (uint64_t)&v153);
            sub_10000BEA0(&v153, v154[2]);
            sub_1000349CC();
            sub_10011E194();
            uint64_t v103 = v150;
            uint64_t v104 = v151;
            sub_10000BEA0(&v148, v150);
            uint64_t v105 = (*(uint64_t (**)(uint64_t, uint64_t))(v104 + 8))(v103, v104);
            uint64_t v107 = v106;
            swift_bridgeObjectRelease();
            if (v105 == v51 && v107 == v53) {
              break;
            }
            char v109 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            sub_10000E788((uint64_t)&v148);
            if (v109) {
              goto LABEL_79;
            }
            sub_10000E788((uint64_t)&v153);
            v96 += 40;
            if (!--v102) {
              goto LABEL_91;
            }
          }
          swift_bridgeObjectRelease();
          sub_10000E788((uint64_t)&v148);
LABEL_79:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v96 = v141;
          swift_retain();
          uint64_t v4 = (uint64_t)v132;
          sub_100125F00(&v153, v141, 1, v132, v134);
          uint64_t v2 = v139;
          uint64_t v9 = v131;
          uint64_t v116 = v135;
          if (!v139)
          {
            swift_release();
            sub_10000E788((uint64_t)&v153);
            sub_10000E788((uint64_t)v158);
            goto LABEL_87;
          }
          swift_retain();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          sub_10000E788((uint64_t)&v153);
        }
        else
        {
LABEL_91:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_10012840C();
          swift_allocError();
          *(void *)uint64_t v124 = v51;
          *(void *)(v124 + 8) = v53;
          *(void *)(v124 + 16) = 0;
          *(unsigned char *)(v124 + 24) = 0;
          swift_willThrow();
        }
LABEL_93:
        sub_10000E788((uint64_t)v158);
        sub_10000E788((uint64_t)v161);
        swift_release();
        swift_release();
        return v96;
      }
      swift_bridgeObjectRelease();
      uint64_t v110 = v100[2];
      uint64_t v2 = v139;
      if (v110)
      {
        uint64_t v96 = (uint64_t)(v100 + 4);
        uint64_t v4 = (uint64_t)v132;
        while (1)
        {
          sub_1001156D4(v96, (uint64_t)&v153);
          uint64_t v111 = v2;
          uint64_t v112 = v142[3];
          uint64_t v113 = v142[4];
          sub_10000BEA0(v142, v112);
          (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v113 + 16))(v167, v112, v113);
          uint64_t v114 = v168;
          uint64_t v169 = v168;
          swift_bridgeObjectRetain();
          sub_10002A500(v167);
          uint64_t v115 = *(void *)(v114 + 16);
          sub_10000D818((uint64_t)&v169);
          swift_retain();
          sub_100125F00(&v153, v141, v115 != 0, v132, v134);
          uint64_t v2 = v111;
          if (v111) {
            break;
          }
          swift_retain();
          swift_retain();
          sub_10000E788((uint64_t)&v153);
          swift_release();
          swift_release();
          swift_release();
          v96 += 40;
          if (!--v110)
          {
            swift_bridgeObjectRelease();
            goto LABEL_86;
          }
        }
        swift_release();
        sub_10000E788((uint64_t)&v153);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_93;
      }
      swift_bridgeObjectRelease();
      uint64_t v4 = (uint64_t)v132;
LABEL_86:
      sub_10000E788((uint64_t)v158);
      uint64_t v116 = v135;
      uint64_t v9 = v131;
LABEL_87:
      unint64_t v10 = v116 + 1;
      sub_10000E788((uint64_t)v161);
      if (v10 == v130)
      {
        swift_bridgeObjectRelease();
        goto LABEL_90;
      }
      continue;
    }
    break;
  }
  char v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v55) {
    goto LABEL_52;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v56 = v162;
  uint64_t v57 = v163;
  sub_10000BEA0(v161, v162);
  uint64_t v58 = (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 8))(v56, v57);
  uint64_t v60 = v59;
  swift_bridgeObjectRelease();
  uint64_t v61 = *v127;
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v148 = (void *)*v129;
  unint64_t v63 = v148;
  void *v129 = 0x8000000000000000;
  uint64_t v70 = sub_100021098(v58, v60, v64, v65, v66, v67, v68, v69, v126, (uint64_t)v127, v128, (uint64_t)v129, v130, v131, (uint64_t)v132, v133, (uint64_t)v134, v135, v137,
          *((uint64_t *)&v137 + 1),
          v2,
          v141,
          (uint64_t)v142,
          v143,
          (uint64_t)v144,
          (uint64_t)v145);
  uint64_t v72 = v63[2];
  BOOL v73 = (v71 & 1) == 0;
  Swift::Int v74 = v72 + v73;
  if (__OFADD__(v72, v73)) {
    goto LABEL_101;
  }
  unint64_t v75 = v70;
  char v76 = v71;
  sub_10000BF1C(&qword_100181218);
  Swift::Bool v77 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v74);
  uint64_t v4 = (uint64_t)v132;
  if (!v77) {
    goto LABEL_49;
  }
  uint64_t v84 = sub_100021098(v58, v60, v78, v79, v80, v81, v82, v83, v126, (uint64_t)v127, v128, (uint64_t)v129, v130, v131, (uint64_t)v132, v133, (uint64_t)v134, v136, v137,
          *((uint64_t *)&v137 + 1),
          v140,
          v141,
          (uint64_t)v142,
          v143,
          (uint64_t)v144,
          (uint64_t)v145);
  if ((v76 & 1) == (v85 & 1))
  {
    unint64_t v75 = v84;
LABEL_49:
    uint64_t v86 = v148;
    if (v76)
    {
      *(void *)(v148[7] + 8 * v75) = v61;
      goto LABEL_83;
    }
    v148[(v75 >> 6) + 8] |= 1 << v75;
    uint64_t v117 = (uint64_t *)(v86[6] + 16 * v75);
    *uint64_t v117 = v58;
    v117[1] = v60;
    *(void *)(v86[7] + 8 * v75) = v61;
    uint64_t v118 = v86[2];
    BOOL v119 = __OFADD__(v118, 1);
    uint64_t v120 = v118 + 1;
    if (!v119)
    {
      v86[2] = v120;
      swift_bridgeObjectRetain();
LABEL_83:
      void *v129 = v86;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      uint64_t v2 = v140;
      uint64_t v9 = v131;
      uint64_t v116 = v136;
      if (!__OFADD__(*v127, 1))
      {
        ++*v127;
        goto LABEL_87;
      }
LABEL_102:
      __break(1u);
    }
    __break(1u);
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100125CF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  sub_10000BF1C(&qword_100181210);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_100129198;
  *(void *)(v7 + 24) = v6;
  *a3 = v7;
  swift_retain();

  return swift_bridgeObjectRetain();
}

uint64_t sub_100125D88@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t result = (unint64_t)Statement.failableNext()();
  if (v5)
  {
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    uint64_t v6 = result;
    if (result) {
      uint64_t result = swift_bridgeObjectRetain();
    }
    else {
      a1 = 0;
    }
    *a2 = a1;
    a2[1] = v6;
  }
  return result;
}

uint64_t Connection.prepareRowIterator(_:)(void *a1)
{
  uint64_t v3 = a1[3];
  sub_10000BEA0(a1, v3);
  sub_10011D404();
  uint64_t v5 = v4();
  uint64_t v7 = v6;
  Connection.prepare(_:_:)(v5, v8, (uint64_t)_swiftEmptyArrayStorage);
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = Statement.bind(_:)(v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    sub_100124F8C(a1);
  }
  return v3;
}

uint64_t sub_100125F00(void *a1, uint64_t a2, int a3, void *a4, void *a5)
{
  uint64_t v95 = (void *)a2;
  uint64_t v92 = a4;
  uint64_t v93 = a5;
  LODWORD(v91) = a3;
  sub_10000BEA0(a1, a1[3]);
  uint64_t DynamicType = swift_getDynamicType();
  uint64_t v8 = a1[3];
  uint64_t v7 = a1[4];
  sub_10000BEA0(a1, v8);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v7 + 16))(v111, v8, v7);
  uint64_t v9 = v111[3];
  uint64_t v94 = v111[2];
  swift_bridgeObjectRetain();
  sub_10002A500(v111);
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_10000BEA0(a1, v10);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v11 + 16))(v112, v10, v11);
  uint64_t v12 = v112[6];
  uint64_t v13 = v112[7];
  swift_bridgeObjectRetain();
  sub_10002A500(v112);
  unint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 40);
  uint64_t v109 = DynamicType;
  uint64_t v110 = v7;
  sub_1000274F4(v108);
  v14(v94, v9, v12, v13, DynamicType, v7);
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  sub_10000BEA0(a1, v15);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v16 + 16))(v113, v15, v16);
  char v17 = v113[0];
  uint64_t v18 = v113[1];
  swift_bridgeObjectRetain();
  sub_10002A500(v113);
  uint64_t v19 = v109;
  uint64_t v20 = v110;
  sub_10005FFB0((uint64_t)v108, v109);
  unint64_t v21 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v20 + 32))(&v104, v19, v20);
  *(unsigned char *)uint64_t v22 = v17;
  *(void *)(v22 + 8) = v18;
  swift_bridgeObjectRelease();
  v21(&v104, 0);
  uint64_t v24 = v109;
  uint64_t v23 = v110;
  uint64_t v25 = sub_10000BEA0(v108, v109);
  uint64_t v26 = *(void *)(v24 - 8);
  double v27 = __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v91 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v26 + 16))(v29, v27);
  uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)(v23 + 8) + 8))(v24);
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  (*(void (**)(char *, uint64_t))(v26 + 8))(v29, v24);
  uint64_t v35 = v96;
  Connection.prepare(_:_:)(v30, v32, (uint64_t)_swiftEmptyArrayStorage);
  uint64_t v96 = v35;
  if (v35)
  {
    swift_bridgeObjectRelease();
LABEL_24:
    swift_bridgeObjectRelease();
    return sub_10000E788((uint64_t)v108);
  }
  uint64_t v95 = a1;
  Statement.bind(_:)(v34);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v36 = Statement.columnNames.getter();
  swift_release();
  uint64_t v37 = *(void *)(v36 + 16);
  if (v37)
  {
    uint64_t v101 = _swiftEmptyArrayStorage;
    sub_100057848();
    uint64_t v38 = v101;
    uint64_t v94 = v36;
    uint64_t v39 = (uint64_t *)(v36 + 40);
    do
    {
      uint64_t v40 = *(v39 - 1);
      uint64_t v41 = *v39;
      swift_bridgeObjectRetain();
      uint64_t v42 = v40;
      uint64_t v43 = v96;
      uint64_t v44 = sub_10011E7B8(0, 0xE000000000000000, v42, v41, 34, (void *)0xE100000000000000);
      uint64_t v46 = v45;
      uint64_t v96 = v43;
      uint64_t v104 = 0;
      uint64_t v105 = 0xE000000000000000;
      Character.write<A>(to:)();
      v47._uint64_t countAndFlagsBits = v44;
      v47._unint64_t object = v46;
      String.append(_:)(v47);
      swift_bridgeObjectRelease();
      Character.write<A>(to:)();
      swift_bridgeObjectRelease();
      uint64_t v48 = v104;
      uint64_t v49 = v105;
      uint64_t v101 = v38;
      unint64_t v50 = v38[2];
      if (v50 >= v38[3] >> 1)
      {
        sub_100057848();
        uint64_t v38 = v101;
      }
      v39 += 2;
      long long v38[2] = v50 + 1;
      uint64_t v51 = &v38[2 * v50];
      v51[4] = v48;
      v51[5] = v49;
      --v37;
    }
    while (v37);
    uint64_t v52 = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v52 = swift_bridgeObjectRelease();
    uint64_t v38 = _swiftEmptyArrayStorage;
  }
  if (v91)
  {
    __chkstk_darwin(v52);
    *(&v91 - 2) = v53;
    uint64_t v54 = v96;
    uint64_t v38 = sub_10011E690((void (*)(void *__return_ptr, void *))sub_1001291FC, (uint64_t)(&v91 - 4), (uint64_t)v38);
    uint64_t v96 = v54;
    swift_bridgeObjectRelease();
  }
  uint64_t v55 = v38[2];
  uint64_t v91 = (uint64_t)v38;
  if (!v55) {
    goto LABEL_24;
  }
  uint64_t v56 = v92 + 2;
  uint64_t v57 = v93 + 2;
  swift_beginAccess();
  swift_beginAccess();
  uint64_t v58 = v38 + 5;
  uint64_t v92 = v57;
  uint64_t v93 = v56;
  while (1)
  {
    uint64_t v60 = *(v58 - 1);
    uint64_t v59 = *v58;
    uint64_t v61 = *v57;
    uint64_t v94 = v55;
    uint64_t v95 = (void *)v61;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v114 = (void *)*v56;
    unint64_t v63 = v114;
    *uint64_t v56 = 0x8000000000000000;
    uint64_t v70 = sub_100021098(v60, v59, v64, v65, v66, v67, v68, v69, v91, (uint64_t)v92, (uint64_t)v93, v94, (uint64_t)v95, v96, v97, v98, v99, v100, (uint64_t)v101,
            v102,
            v103,
            v104,
            v105,
            v106,
            v107,
            v108[0]);
    uint64_t v72 = v63[2];
    BOOL v73 = (v71 & 1) == 0;
    Swift::Int v74 = v72 + v73;
    if (__OFADD__(v72, v73)) {
      break;
    }
    unint64_t v75 = v70;
    char v76 = v71;
    sub_10000BF1C(&qword_100181218);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v74))
    {
      uint64_t v83 = sub_100021098(v60, v59, v77, v78, v79, v80, v81, v82, v91, (uint64_t)v92, (uint64_t)v93, v94, (uint64_t)v95, v96, v97, v98, v99, v100, (uint64_t)v101,
              v102,
              v103,
              v104,
              v105,
              v106,
              v107,
              v108[0]);
      if ((v76 & 1) != (v84 & 1)) {
        goto LABEL_28;
      }
      unint64_t v75 = v83;
    }
    char v85 = v114;
    if (v76)
    {
      *(void *)(v114[7] + 8 * v75) = v95;
    }
    else
    {
      v114[(v75 >> 6) + 8] |= 1 << v75;
      uint64_t v86 = (uint64_t *)(v85[6] + 16 * v75);
      *uint64_t v86 = v60;
      v86[1] = v59;
      *(void *)(v85[7] + 8 * v75) = v95;
      uint64_t v87 = v85[2];
      BOOL v88 = __OFADD__(v87, 1);
      uint64_t v89 = v87 + 1;
      if (v88) {
        goto LABEL_27;
      }
      v85[2] = v89;
      swift_bridgeObjectRetain();
    }
    uint64_t v56 = v93;
    void *v93 = v85;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t v57 = v92;
    if (__OFADD__(*v92, 1)) {
      goto LABEL_26;
    }
    v58 += 2;
    ++*v92;
    uint64_t v55 = v94 - 1;
    if (v94 == 1) {
      goto LABEL_24;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_1001265D4(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (void *)a1[1];
  uint64_t v17 = 0;
  unint64_t v18 = 0xE000000000000000;
  sub_10000BEA0(a2, a2[3]);
  sub_1000349CC();
  sub_10011E194();
  uint64_t v6 = v15;
  uint64_t v7 = v16;
  sub_10000BEA0(v14, v15);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  uint64_t v17 = v8;
  unint64_t v18 = v10;
  sub_10000E788((uint64_t)v14);
  v11._uint64_t countAndFlagsBits = 46;
  v11._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  v12._uint64_t countAndFlagsBits = v4;
  v12._unint64_t object = v5;
  String.append(_:)(v12);
  unint64_t v13 = v18;
  *a3 = v17;
  a3[1] = v13;
}

uint64_t Connection.scalar<A>(_:)(void *__src)
{
  memcpy(__dst, __src, sizeof(__dst));
  type metadata accessor for ScalarQuery();
  QueryType.expression.getter();
  sub_100129818(v2, v3, v4, v5);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v1)
  {
    sub_100129848(result);
    return sub_100115734((uint64_t)__dst, &qword_10017DEC0);
  }
  return result;
}

void Connection.scalar<A>(_:)()
{
  sub_100018E30();
  uint64_t v2 = v1;
  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  sub_100028430();
  sub_100116CA8();
  __chkstk_darwin(v3);
  sub_100028430();
  sub_100116CA8();
  __chkstk_darwin(v4);
  sub_100129808();
  memcpy(v15, v2, 0xA8uLL);
  type metadata accessor for Optional();
  type metadata accessor for ScalarQuery();
  QueryType.expression.getter();
  Connection.scalar(_:_:)(v5, v6, v7, (uint64_t)v15);
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000BF1C(&qword_10017DEC0);
    if (swift_dynamicCast())
    {
      uint64_t v8 = sub_100129398();
      v9(v8);
      uint64_t v10 = sub_100129420();
      v11(v10);
      uint64_t v12 = sub_100129780();
    }
    else
    {
      sub_10012974C();
      uint64_t v12 = sub_100129734();
    }
    v13(v12);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    sub_10012999C(AssociatedTypeWitness);
  }
  sub_100018E80();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t AssociatedTypeWitness;
  void v20[5];

  sub_100018E30();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  sub_100028430();
  sub_100116CA8();
  __chkstk_darwin(v7);
  sub_100028430();
  sub_100116CA8();
  __chkstk_darwin(v8);
  sub_100129808();
  v20[0] = v6;
  v20[1] = v4;
  void v20[2] = v2;
  type metadata accessor for Optional();
  unint64_t v9 = type metadata accessor for Select();
  uint64_t v10 = ExpressionType.expression.getter(v9, (uint64_t)&protocol witness table for Select<A>);
  Connection.scalar(_:_:)(v10, v11, v12, (uint64_t)v20);
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000BF1C(&qword_10017DEC0);
    if (swift_dynamicCast())
    {
      unint64_t v13 = sub_100129398();
      v14(v13);
      uint64_t v15 = sub_100129420();
      v16(v15);
      uint64_t v17 = sub_100129780();
    }
    else
    {
      sub_10012974C();
      uint64_t v17 = sub_100129734();
    }
    v18(v17);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    sub_10012999C(AssociatedTypeWitness);
  }
  sub_100018E80();
}

uint64_t Connection.scalar<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[0] = a1;
  v10[1] = a2;
  v10[2] = a3;
  uint64_t v4 = type metadata accessor for Select();
  uint64_t v5 = ExpressionType.expression.getter(v4, (uint64_t)&protocol witness table for Select<A>);
  sub_100129818(v5, v6, v7, v8);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v3)
  {
    sub_100129848(result);
    return sub_100115734((uint64_t)v10, &qword_10017DEC0);
  }
  return result;
}

uint64_t Connection.pluck(_:)(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10000BEA0(a1, v3);
  sub_10000BEA0(a1, a1[3]);
  sub_10012983C();
  v5();
  sub_10002A500(v15);
  sub_100129250((uint64_t)&v16, (uint64_t)v17, &qword_100181020);
  sub_100129250((uint64_t)v17, (uint64_t)v18, &qword_100181020);
  if (v21) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v19;
  }
  char v7 = v21 | v20;
  void v14[3] = v3;
  void v14[4] = v4;
  uint64_t v8 = sub_1000274F4(v14);
  sub_10011FBB4(1, 0, v6, v7 & 1, v3, v4, (uint64_t)v8);
  Connection.prepareRowIterator(_:)(v14);
  uint64_t v10 = v9;
  sub_10000E788((uint64_t)v14);
  if (!v1)
  {
    unint64_t v11 = (unint64_t)Statement.failableNext()();
    if (v12)
    {
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      if (v11)
      {
        swift_bridgeObjectRetain();
        uint64_t v4 = v10;
      }
      else
      {
        uint64_t v4 = 0;
      }
      swift_release();
      swift_bridgeObjectRelease();
    }
  }
  return v4;
}

Swift::Int64 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Connection.run(_:)(AppIntents_SQLite::Insert a1)
{
  return sub_100126EC0(a1.template._countAndFlagsBits, (uint64_t)a1.template._object, (uint64_t)a1.bindings._rawValue, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10012A7B8);
}

uint64_t sub_100126E38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_1001297CC(a1, a2, a3, a4);
  if (!v5)
  {
    swift_release();
    char v7 = (sqlite3 *)Connection.handle.getter();
    uint64_t result = sqlite3_last_insert_rowid(v7);
    *uint64_t v4 = result;
  }
  return result;
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Connection.run(_:)(AppIntents_SQLite::Update a1)
{
  return sub_100126EC0(a1.template._countAndFlagsBits, (uint64_t)a1.template._object, (uint64_t)a1.bindings._rawValue, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10012A8E4);
}

uint64_t sub_100126EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100126F5C(a1, a2, a3, a4);
}

uint64_t sub_100126EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v9 = swift_retain();
  uint64_t v10 = a4(v9, v4, a1, a2, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100126F5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_1001297CC(a1, a2, a3, a4);
  if (!v5)
  {
    swift_release();
    char v7 = (sqlite3 *)Connection.handle.getter();
    uint64_t result = sqlite3_changes(v7);
    *uint64_t v4 = (int)result;
  }
  return result;
}

#error "100126FC0: call analysis failed (funcsize=18)"

#error "100127008: call analysis failed (funcsize=17)"

void Row.get<A>(_:)()
{
  sub_100018E30();
  uint64_t v31 = v1;
  uint64_t v32 = v2;
  uint64_t v4 = v3;
  uint64_t v29 = v6;
  uint64_t v30 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v13 = type metadata accessor for Optional();
  sub_100028430();
  uint64_t v28 = v14;
  sub_100116CA8();
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v27 - v16;
  uint64_t v18 = type metadata accessor for Expression();
  uint64_t v33 = v12;
  uint64_t v34 = v10;
  uint64_t v35 = v8;
  uint64_t v19 = type metadata accessor for Expression();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v21 = swift_getWitnessTable();
  ExpressionType.init<A>(_:)((uint64_t)&v33, v18, v19, WitnessTable, v21);
  Row.get<A>(_:)(v36, v37, v38, v30, v31, v4, v32, v22, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v0)
  {
    uint64_t v24 = v28;
    uint64_t v23 = v29;
    if (sub_10000D5D8((uint64_t)v17, 1, v4) == 1)
    {
      ((void (*)(char *, uint64_t))v24[1])(v17, v13);
      sub_10012840C();
      swift_allocError();
      *(void *)uint64_t v25 = v12;
      *(void *)(v25 + 8) = v10;
      *(void *)(v25 + 16) = 0;
      *(unsigned char *)(v25 + 24) = 3;
      swift_bridgeObjectRetain();
      swift_willThrow();
    }
    else
    {
      sub_100115CD4();
      (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v23, v17, v4);
    }
  }
  sub_100018E80();
}

void Row.get<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_100018E30();
  a19 = v21;
  a20 = v22;
  uint64_t v63 = v23;
  uint64_t v64 = v20;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  swift_bridgeObjectRetain();
  unint64_t v38 = sub_100126FA4(v35, v33, v31);
  char v40 = v39;
  swift_bridgeObjectRelease();
  if ((v40 & 1) == 0)
  {
    sub_1001274A8(v38, v29, v27, v25, v37);
LABEL_11:
    sub_100018E80();
    return;
  }
  uint64_t v60 = v37;
  uint64_t v61 = v29;
  uint64_t v41 = swift_bridgeObjectRetain();
  uint64_t v42 = sub_100117400(v41);
  uint64_t v43 = swift_bridgeObjectRelease();
  __chkstk_darwin(v43);
  v59[2] = v27;
  v59[3] = v25;
  uint64_t v62 = v35;
  v59[4] = v35;
  v59[5] = v33;
  uint64_t v44 = v64;
  v59[6] = v63;
  sub_100123164((uint64_t (*)(void *))sub_100128458, (uint64_t)v59, (uint64_t)v42);
  uint64_t v46 = v45;
  uint64_t v47 = v45[2];
  if (v47 == 1)
  {
    uint64_t v52 = v27;
    uint64_t v53 = v45[4];
    uint64_t v54 = v45[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    unint64_t v55 = sub_100126FA4(v53, v54, v31);
    char v57 = v56;
    swift_bridgeObjectRelease();
    if ((v57 & 1) == 0)
    {
      sub_1001274A8(v55, v61, v52, v25, v60);
      goto LABEL_11;
    }
    __break(1u);
  }
  else
  {
    if (v47)
    {
      sub_10012840C();
      swift_allocError();
      *(void *)uint64_t v58 = v62;
      *(void *)(v58 + 8) = v33;
      *(void *)(v58 + 16) = v46;
      *(unsigned char *)(v58 + 24) = 2;
      swift_bridgeObjectRetain();
      goto LABEL_10;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v48 = sub_100117400(v31);
    swift_bridgeObjectRelease();
    a10 = v48;
    sub_1001279D0((uint64_t *)&a10);
    uint64_t v49 = v62;
    if (!v44)
    {
      swift_bridgeObjectRelease();
      uint64_t v50 = (uint64_t)a10;
      sub_10012840C();
      swift_allocError();
      *(void *)uint64_t v51 = v49;
      *(void *)(v51 + 8) = v33;
      *(void *)(v51 + 16) = v50;
      *(unsigned char *)(v51 + 24) = 1;
LABEL_10:
      swift_willThrow();
      goto LABEL_11;
    }
  }
  swift_release();
  __break(1u);
}

void sub_1001274A8(unint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v23 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v21 = (char *)&v21 - v9;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v14 = (char *)&v21 - v13;
  uint64_t v15 = *(void *)(v10 - 8);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v21 - v17;
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (*(void *)(a2 + 16) <= a1)
  {
LABEL_8:
    __break(1u);
    return;
  }
  sub_100115B28(a2 + 40 * a1 + 32, (uint64_t)v24, &qword_10017DEC0);
  sub_10000BF1C(&qword_10017DEC0);
  if (swift_dynamicCast())
  {
    sub_10000D5B0((uint64_t)v14, 0, 1, v10);
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v14, v10);
    (*(void (**)(char *, uint64_t, uint64_t))(a4 + 48))(v18, a3, a4);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v10);
    uint64_t v19 = v23;
    uint64_t v20 = swift_dynamicCast() ^ 1;
  }
  else
  {
    uint64_t v20 = 1;
    sub_10000D5B0((uint64_t)v14, 1, 1, v10);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    uint64_t v19 = v23;
  }
  sub_10000D5B0(v19, v20, 1, a3);
}

uint64_t sub_1001277A0(uint64_t a1, uint64_t a2, void *a3)
{
  swift_bridgeObjectRetain();
  v5._uint64_t countAndFlagsBits = a2;
  v5._unint64_t object = a3;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 46;
  v6._unint64_t object = (void *)0xE100000000000000;
  LOBYTE(a3) = String.hasSuffix(_:)(v6);
  swift_bridgeObjectRelease();
  return a3 & 1;
}

AppIntents_SQLite::JoinType_optional __swiftcall JoinType.init(rawValue:)(Swift::String rawValue)
{
  unint64_t object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._unint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100173BF8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return (AppIntents_SQLite::JoinType_optional)3;
  }
  else {
    return (AppIntents_SQLite::JoinType_optional)v3;
  }
}

uint64_t sub_100127884(char *a1, char *a2)
{
  return sub_100129A0C(*a1, *a2);
}

Swift::Int sub_100127890()
{
  return sub_100129F84(*v0);
}

uint64_t sub_100127898(uint64_t a1)
{
  return sub_10012A00C(a1, *v1);
}

Swift::Int sub_1001278A0(uint64_t a1)
{
  return sub_10012A408(a1, *v1);
}

AppIntents_SQLite::JoinType_optional sub_1001278A8@<W0>(Swift::String *a1@<X0>, AppIntents_SQLite::JoinType_optional *a2@<X8>)
{
  result.value = JoinType.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t sub_1001278D8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = JoinType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

AppIntents_SQLite::OnConflict_optional __swiftcall OnConflict.init(rawValue:)(Swift::String rawValue)
{
  unint64_t object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._unint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100173C60, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return (AppIntents_SQLite::OnConflict_optional)5;
  }
  else {
    return (AppIntents_SQLite::OnConflict_optional)v3;
  }
}

uint64_t sub_100127950(unsigned __int8 *a1, char *a2)
{
  return sub_100129CD4(*a1, *a2);
}

Swift::Int sub_10012795C()
{
  return sub_100129F90(*v0);
}

uint64_t sub_100127964()
{
  return sub_10012A174();
}

Swift::Int sub_10012796C(uint64_t a1)
{
  return sub_10012A384(a1, *v1);
}

AppIntents_SQLite::OnConflict_optional sub_100127974@<W0>(Swift::String *a1@<X0>, AppIntents_SQLite::OnConflict_optional *a2@<X8>)
{
  result.value = OnConflict.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t sub_1001279A4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = OnConflict.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1001279D0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_1000AC42C();
    uint64_t v2 = v3;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  uint64_t result = sub_100127A3C(v6);
  *a1 = v2;
  return result;
}

uint64_t sub_100127A3C(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_147;
    }
    if (v3) {
      return sub_100092AEC(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 < -1) {
    goto LABEL_146;
  }
  uint64_t v99 = result;
  uint64_t v96 = a1;
  if (v3 <= 1)
  {
    Swift::String v5 = _swiftEmptyArrayStorage;
    uint64_t v102 = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v36 = _swiftEmptyArrayStorage[2];
      uint64_t v8 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_113;
    }
    uint64_t v98 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(result + 16) = v3 / 2;
    uint64_t v98 = (void *)result;
    uint64_t v102 = (char *)(result + 32);
  }
  Swift::Int v6 = 0;
  uint64_t v7 = *a1;
  uint64_t v97 = v7 + 8;
  uint64_t v8 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v100 = v3;
  while (1)
  {
    Swift::Int v9 = v6++;
    if (v6 >= v3) {
      goto LABEL_39;
    }
    uint64_t v10 = (uint64_t *)(v7 + 16 * v6);
    uint64_t result = *v10;
    uint64_t v11 = v10[1];
    uint64_t v12 = (void *)(v7 + 16 * v9);
    if (result == *v12 && v11 == v12[1])
    {
      Swift::Int v15 = v9 + 2;
      if (v9 + 2 >= v3) {
        goto LABEL_38;
      }
      int v14 = 0;
    }
    else
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      int v14 = result;
      Swift::Int v15 = v9 + 2;
      if (v9 + 2 >= v3) {
        goto LABEL_30;
      }
    }
    uint64_t v16 = (void *)(v97 + 16 * v15);
    do
    {
      uint64_t result = *(v16 - 1);
      uint64_t v17 = (void *)(v7 + 16 * v6);
      if (result == *v17 && *v16 == v17[1])
      {
        if (v14) {
          goto LABEL_31;
        }
      }
      else
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((v14 ^ result)) {
          goto LABEL_30;
        }
      }
      v16 += 2;
      Swift::Int v19 = v15 + 1;
      Swift::Int v6 = v15;
      Swift::Int v15 = v19;
    }
    while (v19 < v3);
    Swift::Int v15 = v19;
LABEL_30:
    Swift::Int v6 = v15;
    if (v14)
    {
LABEL_31:
      if (v15 < v9) {
        goto LABEL_150;
      }
      if (v9 < v15)
      {
        uint64_t v20 = 16 * v15;
        uint64_t v21 = 16 * v9;
        Swift::Int v22 = v15;
        Swift::Int v23 = v9;
        do
        {
          if (v23 != --v22)
          {
            if (!v7) {
              goto LABEL_153;
            }
            uint64_t v24 = v7 + v20;
            uint64_t v25 = *(void *)(v7 + v21);
            uint64_t v26 = *(void *)(v7 + v21 + 8);
            *(_OWORD *)(v7 + v21) = *(_OWORD *)(v7 + v20 - 16);
            *(void *)(v24 - 16) = v25;
            *(void *)(v24 - 8) = v26;
          }
          ++v23;
          v20 -= 16;
          v21 += 16;
        }
        while (v23 < v22);
      }
LABEL_38:
      Swift::Int v6 = v15;
    }
LABEL_39:
    if (v6 < v3)
    {
      if (__OFSUB__(v6, v9)) {
        goto LABEL_145;
      }
      if (v6 - v9 < v99) {
        break;
      }
    }
LABEL_59:
    if (v6 < v9) {
      goto LABEL_140;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1000ABA40(0, *((void *)v8 + 2) + 1, 1, v8);
      uint64_t v8 = (char *)result;
    }
    unint64_t v35 = *((void *)v8 + 2);
    unint64_t v34 = *((void *)v8 + 3);
    unint64_t v36 = v35 + 1;
    if (v35 >= v34 >> 1)
    {
      uint64_t result = (uint64_t)sub_1000ABA40((char *)(v34 > 1), v35 + 1, 1, v8);
      uint64_t v8 = (char *)result;
    }
    *((void *)v8 + 2) = v36;
    uint64_t v37 = v8 + 32;
    unint64_t v38 = &v8[16 * v35 + 32];
    *(void *)unint64_t v38 = v9;
    *((void *)v38 + 1) = v6;
    if (v35)
    {
      Swift::Int v101 = v6;
      while (1)
      {
        unint64_t v39 = v36 - 1;
        if (v36 >= 4)
        {
          uint64_t v44 = &v37[2 * v36];
          uint64_t v45 = *(v44 - 8);
          uint64_t v46 = *(v44 - 7);
          BOOL v50 = __OFSUB__(v46, v45);
          uint64_t v47 = v46 - v45;
          if (v50) {
            goto LABEL_129;
          }
          uint64_t v49 = *(v44 - 6);
          uint64_t v48 = *(v44 - 5);
          BOOL v50 = __OFSUB__(v48, v49);
          uint64_t v42 = v48 - v49;
          char v43 = v50;
          if (v50) {
            goto LABEL_130;
          }
          unint64_t v51 = v36 - 2;
          uint64_t v52 = &v37[2 * v36 - 4];
          uint64_t v54 = *v52;
          uint64_t v53 = v52[1];
          BOOL v50 = __OFSUB__(v53, v54);
          uint64_t v55 = v53 - v54;
          if (v50) {
            goto LABEL_131;
          }
          BOOL v50 = __OFADD__(v42, v55);
          uint64_t v56 = v42 + v55;
          if (v50) {
            goto LABEL_133;
          }
          if (v56 >= v47)
          {
            Swift::Int v74 = &v37[2 * v39];
            uint64_t v76 = *v74;
            uint64_t v75 = v74[1];
            BOOL v50 = __OFSUB__(v75, v76);
            uint64_t v77 = v75 - v76;
            if (v50) {
              goto LABEL_139;
            }
            BOOL v67 = v42 < v77;
            goto LABEL_97;
          }
        }
        else
        {
          if (v36 != 3)
          {
            uint64_t v68 = *((void *)v8 + 4);
            uint64_t v69 = *((void *)v8 + 5);
            BOOL v50 = __OFSUB__(v69, v68);
            uint64_t v61 = v69 - v68;
            char v62 = v50;
            goto LABEL_91;
          }
          uint64_t v41 = *((void *)v8 + 4);
          uint64_t v40 = *((void *)v8 + 5);
          BOOL v50 = __OFSUB__(v40, v41);
          uint64_t v42 = v40 - v41;
          char v43 = v50;
        }
        if (v43) {
          goto LABEL_132;
        }
        unint64_t v51 = v36 - 2;
        char v57 = &v37[2 * v36 - 4];
        uint64_t v59 = *v57;
        uint64_t v58 = v57[1];
        BOOL v60 = __OFSUB__(v58, v59);
        uint64_t v61 = v58 - v59;
        char v62 = v60;
        if (v60) {
          goto LABEL_134;
        }
        uint64_t v63 = &v37[2 * v39];
        uint64_t v65 = *v63;
        uint64_t v64 = v63[1];
        BOOL v50 = __OFSUB__(v64, v65);
        uint64_t v66 = v64 - v65;
        if (v50) {
          goto LABEL_136;
        }
        if (__OFADD__(v61, v66)) {
          goto LABEL_138;
        }
        if (v61 + v66 >= v42)
        {
          BOOL v67 = v42 < v66;
LABEL_97:
          if (v67) {
            unint64_t v39 = v51;
          }
          goto LABEL_99;
        }
LABEL_91:
        if (v62) {
          goto LABEL_135;
        }
        uint64_t v70 = &v37[2 * v39];
        uint64_t v72 = *v70;
        uint64_t v71 = v70[1];
        BOOL v50 = __OFSUB__(v71, v72);
        uint64_t v73 = v71 - v72;
        if (v50) {
          goto LABEL_137;
        }
        if (v73 < v61) {
          goto LABEL_108;
        }
LABEL_99:
        unint64_t v78 = v39 - 1;
        if (v39 - 1 >= v36)
        {
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
          goto LABEL_149;
        }
        uint64_t v79 = v7;
        if (!v7) {
          goto LABEL_152;
        }
        uint64_t v80 = v8;
        uint64_t v81 = &v37[2 * v78];
        uint64_t v82 = *v81;
        uint64_t v83 = v37;
        unint64_t v84 = v39;
        char v85 = &v37[2 * v39];
        uint64_t v86 = v85[1];
        uint64_t v87 = v79;
        uint64_t result = sub_1001280E0((char *)(v79 + 16 * *v81), (char *)(v79 + 16 * *v85), v79 + 16 * v86, v102);
        if (v1)
        {
LABEL_110:
          swift_bridgeObjectRelease();
          v98[2] = 0;
          return swift_bridgeObjectRelease();
        }
        if (v86 < v82) {
          goto LABEL_126;
        }
        if (v84 > *((void *)v80 + 2)) {
          goto LABEL_127;
        }
        *uint64_t v81 = v82;
        v83[2 * v78 + 1] = v86;
        unint64_t v88 = *((void *)v80 + 2);
        if (v84 >= v88) {
          goto LABEL_128;
        }
        uint64_t v8 = v80;
        unint64_t v36 = v88 - 1;
        uint64_t result = (uint64_t)memmove(v85, v85 + 2, 16 * (v88 - 1 - v84));
        uint64_t v37 = v83;
        *((void *)v80 + 2) = v88 - 1;
        uint64_t v7 = v87;
        Swift::Int v6 = v101;
        if (v88 <= 2) {
          goto LABEL_108;
        }
      }
    }
    unint64_t v36 = 1;
LABEL_108:
    Swift::Int v3 = v100;
    if (v6 >= v100)
    {
      Swift::String v5 = v98;
LABEL_113:
      uint64_t result = (uint64_t)v8;
      uint64_t v98 = v5;
      if (v36 >= 2)
      {
        uint64_t v89 = *v96;
        do
        {
          unint64_t v90 = v36 - 2;
          if (v36 < 2) {
            goto LABEL_141;
          }
          if (!v89) {
            goto LABEL_154;
          }
          uint64_t v91 = result;
          uint64_t v92 = *(void *)(result + 32 + 16 * v90);
          uint64_t v93 = *(void *)(result + 32 + 16 * (v36 - 1) + 8);
          uint64_t result = sub_1001280E0((char *)(v89 + 16 * v92), (char *)(v89 + 16 * *(void *)(result + 32 + 16 * (v36 - 1))), v89 + 16 * v93, v102);
          if (v1) {
            goto LABEL_110;
          }
          if (v93 < v92) {
            goto LABEL_142;
          }
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)sub_1000ABB38(v91);
            uint64_t v91 = result;
          }
          if (v90 >= *(void *)(v91 + 16)) {
            goto LABEL_143;
          }
          uint64_t v94 = (void *)(v91 + 32 + 16 * v90);
          *uint64_t v94 = v92;
          v94[1] = v93;
          unint64_t v95 = *(void *)(v91 + 16);
          if (v36 > v95) {
            goto LABEL_144;
          }
          memmove((void *)(v91 + 32 + 16 * (v36 - 1)), (const void *)(v91 + 32 + 16 * v36), 16 * (v95 - v36));
          uint64_t result = v91;
          *(void *)(v91 + 16) = v95 - 1;
          unint64_t v36 = v95 - 1;
        }
        while (v95 > 2);
      }
      swift_bridgeObjectRelease();
      v98[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  if (__OFADD__(v9, v99)) {
    goto LABEL_148;
  }
  if (v9 + v99 >= v3) {
    Swift::Int v27 = v3;
  }
  else {
    Swift::Int v27 = v9 + v99;
  }
  if (v27 >= v9)
  {
    if (v6 != v27)
    {
      uint64_t v28 = (uint64_t *)(v7 + 16 * v6);
      do
      {
        uint64_t v29 = (uint64_t *)(v7 + 16 * v6);
        uint64_t result = *v29;
        uint64_t v30 = v29[1];
        Swift::Int v31 = v9;
        uint64_t v32 = v28;
        do
        {
          if (result == *(v32 - 2) && v30 == *(v32 - 1)) {
            break;
          }
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            break;
          }
          if (!v7) {
            goto LABEL_151;
          }
          uint64_t result = *v32;
          uint64_t v30 = v32[1];
          *(_OWORD *)uint64_t v32 = *((_OWORD *)v32 - 1);
          *(v32 - 1) = v30;
          *(v32 - 2) = result;
          v32 -= 2;
          ++v31;
        }
        while (v6 != v31);
        ++v6;
        v28 += 2;
      }
      while (v6 != v27);
      Swift::Int v6 = v27;
    }
    goto LABEL_59;
  }
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
  return result;
}