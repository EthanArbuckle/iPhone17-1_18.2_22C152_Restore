BOOL sub_100005ACC(id a1, BMStoreEvent *a2, BOOL *a3)
{
  return 1;
}

void sub_100005B94(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.coreidvd.dip-bluetooth-manager.queue", 0);
  +[BluetoothManager setSharedInstanceQueue:v1];
}

int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init(subsystem:category:)();
  setDefaultLogger(_:)();
  v11 = *(void (**)(char *, uint64_t))(v8 + 8);
  v11(v10, v7);
  v12._countAndFlagsBits = 0x6476646965726F63;
  v12._object = (void *)0xE800000000000000;
  setProcessName(_:)(v12);
  byte_1007600A0 = isInternalBuild()();
  id v13 = [self sharedConnection];
  if (v13)
  {
    v15 = v13;
    unsigned int v16 = [v13 effectiveBoolValueForSetting:MCFeatureDiagnosticsSubmissionAllowed];

    BOOL v14 = v16 == 1;
  }
  else
  {
    BOOL v14 = 0;
  }
  byte_1007600A1 = v14;
  qword_1007600A8 = 0xD000000000000014;
  unk_1007600B0 = 0x800000010062AAA0;
  if ((_set_user_dir_suffix() & 1) == 0)
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for DIPError.Code.internalError(_:), v3);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000768C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v11(v10, v7);
    swift_errorRelease();
  }
  qword_1007600B8 = (uint64_t)dispatch_group_create();
  qword_1007600C0 = 0;
  type metadata accessor for DaemonInitializer();
  swift_allocObject();
  qword_1007600C0 = (uint64_t)sub_100037558();
  swift_release();
  id v18 = [self currentRunLoop];
  [v18 run];

  exit(0);
}

uint64_t sub_100005FF4(uint64_t a1, uint64_t a2)
{
  return sub_10000722C(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100006020(uint64_t a1, uint64_t a2)
{
  return sub_10000722C(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

BOOL sub_100006040(void *a1, void *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_100006054()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10000609C()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000060C8()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void *sub_10000610C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

BOOL sub_100006120(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_100006150(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_100006164(void *result)
{
  *v1 &= *result;
  return result;
}

_DWORD *sub_100006178@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

id sub_100006188()
{
  return *v0;
}

uint64_t sub_100006190@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_100006198(uint64_t a1)
{
  uint64_t v2 = sub_10000768C(&qword_10071F970, type metadata accessor for DIIdentityError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100006204(uint64_t a1)
{
  uint64_t v2 = sub_10000768C(&qword_10071F970, type metadata accessor for DIIdentityError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100006274(uint64_t a1)
{
  uint64_t v2 = sub_10000768C(&qword_10071F9A0, type metadata accessor for DIIdentityError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_1000062E0(uint64_t a1)
{
  uint64_t v2 = sub_10000768C(&qword_10071F930, type metadata accessor for DIIdentityFatalError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10000634C(uint64_t a1)
{
  uint64_t v2 = sub_10000768C(&qword_10071F930, type metadata accessor for DIIdentityFatalError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000063B8(uint64_t a1)
{
  uint64_t v2 = sub_10000768C(&qword_10071F968, type metadata accessor for DIIdentityFatalError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

void sub_100006424(void *a1@<X8>)
{
  *a1 = 0;
}

void *sub_10000642C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_100006440@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

void *sub_100006454@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_100006480@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_1000064A4(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_1000064B8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1000064CC(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_1000064E0(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_1000064F4(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_100006508()
{
  return *v0 == 0;
}

uint64_t sub_100006518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

void *sub_100006530(void *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t sub_100006544(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_1000065BC(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_10000663C@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

void sub_100006680(void *a1@<X8>)
{
  *a1 = *v1;
}

void sub_10000668C(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_100006698(uint64_t a1)
{
  uint64_t v2 = sub_10000768C(&qword_10071F9B0, type metadata accessor for CIImageRepresentationOption);
  uint64_t v3 = sub_10000768C(&qword_10071F9B8, type metadata accessor for CIImageRepresentationOption);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

void *sub_100006754@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100006760()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100006770(uint64_t a1)
{
  uint64_t v2 = sub_10000768C(&qword_10071F9A0, type metadata accessor for DIIdentityError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_1000067DC(uint64_t a1)
{
  uint64_t v2 = sub_10000768C(&qword_10071F9A0, type metadata accessor for DIIdentityError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100006848(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000768C(&qword_10071F9A0, type metadata accessor for DIIdentityError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_1000068D8()
{
  id v1 = *v0;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_100006910(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000768C(&qword_10071F9A0, type metadata accessor for DIIdentityError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

void *sub_100006990@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_1000069A0()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1000069B0(uint64_t a1)
{
  uint64_t v2 = sub_10000768C(&qword_10071F968, type metadata accessor for DIIdentityFatalError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100006A1C(uint64_t a1)
{
  uint64_t v2 = sub_10000768C(&qword_10071F968, type metadata accessor for DIIdentityFatalError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100006A88(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000768C(&qword_10071F968, type metadata accessor for DIIdentityFatalError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_100006B18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000768C(&qword_10071F968, type metadata accessor for DIIdentityFatalError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_100006B94()
{
  return Hasher._finalize()();
}

uint64_t sub_100006BF4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_10013FAC4();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_100006C34(uint64_t a1)
{
  uint64_t v2 = sub_10000768C(&qword_10071F798, type metadata accessor for DIHttpHeaderName);
  uint64_t v3 = sub_10000768C((unint64_t *)&unk_10071F7A0, type metadata accessor for DIHttpHeaderName);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

BOOL sub_100006CF0(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100006D04(uint64_t a1)
{
  uint64_t v2 = sub_10000768C(&qword_10071FA00, type metadata accessor for FileAttributeKey);
  uint64_t v3 = sub_10000768C(&qword_10071FA08, type metadata accessor for FileAttributeKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100006DC0(uint64_t a1)
{
  uint64_t v2 = sub_10000768C(&qword_10071F9E0, type metadata accessor for PKPaymentRequestClientAnalyticsParameters);
  uint64_t v3 = sub_10000768C(&qword_10071F9E8, type metadata accessor for PKPaymentRequestClientAnalyticsParameters);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100006E7C(uint64_t a1)
{
  uint64_t v2 = sub_10000768C(&qword_10071F9C0, type metadata accessor for DIAttributeImageEncoding);
  uint64_t v3 = sub_10000768C(&qword_10071F9C8, type metadata accessor for DIAttributeImageEncoding);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100006F38@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100006F64(uint64_t a1)
{
  uint64_t v2 = sub_10000768C(&qword_10071F9D0, type metadata accessor for DISharingOption);
  uint64_t v3 = sub_10000768C(&qword_10071F9D8, type metadata accessor for DISharingOption);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100007020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000768C(&qword_10071F9A0, type metadata accessor for DIIdentityError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_1000070A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000768C(&qword_10071F968, type metadata accessor for DIIdentityFatalError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100007128@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_100007170(uint64_t a1)
{
  uint64_t v2 = sub_10000768C(&qword_10071F9F0, type metadata accessor for FileProtectionType);
  uint64_t v3 = sub_10000768C(&qword_10071F9F8, type metadata accessor for FileProtectionType);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000722C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_100007270()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000072C4()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100007338()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

unint64_t sub_1000073C4(uint64_t a1)
{
  uint64_t v2 = sub_100007764((uint64_t *)&unk_100723460);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  char v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007764(&qword_10071F7B0);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_100007840(v12, (uint64_t)v5);
    unint64_t result = sub_1000077A8((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    unint64_t result = (unint64_t)sub_1000078A8(v9, (_OWORD *)(v7[7] + 32 * v16));
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void type metadata accessor for PDSPushEnvironment(uint64_t a1)
{
}

void type metadata accessor for SecAccessControl(uint64_t a1)
{
}

void type metadata accessor for NFSecureElementHWType(uint64_t a1)
{
}

void type metadata accessor for CLAuthorizationStatus(uint64_t a1)
{
}

void type metadata accessor for SecCertificate(uint64_t a1)
{
}

void type metadata accessor for SecKey(uint64_t a1)
{
}

void type metadata accessor for DIHttpHeaderName(uint64_t a1)
{
}

uint64_t sub_100007644()
{
  return sub_10000768C(&qword_10071F780, type metadata accessor for DIHttpHeaderName);
}

uint64_t sub_10000768C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000076D4()
{
  return sub_10000768C(&qword_10071F788, type metadata accessor for DIHttpHeaderName);
}

uint64_t sub_10000771C()
{
  return sub_10000768C(&qword_10071F790, type metadata accessor for DIHttpHeaderName);
}

uint64_t sub_100007764(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

unint64_t sub_1000077A8(uint64_t a1)
{
  type metadata accessor for DIPError.PropertyKey();
  sub_10000768C((unint64_t *)&qword_10071F7B8, (void (*)(uint64_t))&type metadata accessor for DIPError.PropertyKey);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return sub_1000078B8(a1, v2);
}

uint64_t sub_100007840(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764((uint64_t *)&unk_100723460);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_OWORD *sub_1000078A8(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_1000078B8(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v4 = type metadata accessor for DIPError.PropertyKey();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    unint64_t v11 = v13;
    uint64_t v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      sub_10000768C(&qword_10071F7C0, (void (*)(uint64_t))&type metadata accessor for DIPError.PropertyKey);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

void type metadata accessor for SecTrust(uint64_t a1)
{
}

void type metadata accessor for DIUploadContainer(uint64_t a1)
{
}

void type metadata accessor for CIImageRepresentationOption(uint64_t a1)
{
}

void type metadata accessor for DIAttributeImageEncoding(uint64_t a1)
{
}

void type metadata accessor for DISharingOption(uint64_t a1)
{
}

__n128 initializeWithTake for DIPConversation(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void type metadata accessor for PKPaymentRequestClientAnalyticsParameters(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for ImageDimension(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ImageDimension(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CLLocationCoordinate2D(uint64_t a1)
{
}

void type metadata accessor for PKPendingProvisioningStatus(uint64_t a1)
{
}

void type metadata accessor for DIIdentityFatalError(uint64_t a1)
{
}

void type metadata accessor for DIIdentityError(uint64_t a1)
{
}

void type metadata accessor for FileProtectionType(uint64_t a1)
{
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
}

void type metadata accessor for IdentityProofingOptions(uint64_t a1)
{
}

void type metadata accessor for COSEKeyOKPCurve(uint64_t a1)
{
}

void type metadata accessor for COSEKeyEC2Curve(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for CGImage(uint64_t a1)
{
}

uint64_t sub_100007C4C()
{
  return sub_10000768C(&qword_10071F860, type metadata accessor for IdentityProofingOptions);
}

uint64_t sub_100007C94()
{
  return sub_10000768C(&qword_10071F868, type metadata accessor for IdentityProofingOptions);
}

uint64_t sub_100007CDC()
{
  return sub_10000768C(&qword_10071F870, type metadata accessor for IdentityProofingOptions);
}

uint64_t sub_100007D24()
{
  return sub_10000768C(&qword_10071F878, type metadata accessor for IdentityProofingOptions);
}

uint64_t sub_100007D6C()
{
  return sub_10000768C(&qword_10071F880, type metadata accessor for FileAttributeKey);
}

uint64_t sub_100007DB4()
{
  return sub_10000768C(&qword_10071F888, type metadata accessor for FileAttributeKey);
}

uint64_t sub_100007DFC()
{
  return sub_10000768C(&qword_10071F890, type metadata accessor for FileProtectionType);
}

uint64_t sub_100007E44()
{
  return sub_10000768C(&qword_10071F898, type metadata accessor for FileProtectionType);
}

uint64_t sub_100007E8C()
{
  return sub_10000768C(&qword_10071F8A0, type metadata accessor for FileProtectionType);
}

uint64_t sub_100007ED4()
{
  return sub_10000768C(&qword_10071F8A8, type metadata accessor for DIIdentityError);
}

uint64_t sub_100007F1C()
{
  return sub_10000768C(&qword_10071F8B0, type metadata accessor for DIIdentityError);
}

uint64_t sub_100007F64()
{
  return sub_10000768C(&qword_10071F8B8, type metadata accessor for DIIdentityFatalError);
}

uint64_t sub_100007FAC()
{
  return sub_10000768C(&qword_10071F8C0, type metadata accessor for DIIdentityFatalError);
}

uint64_t sub_100007FF4()
{
  return sub_10000768C(&qword_10071F8C8, type metadata accessor for PKPaymentRequestClientAnalyticsParameters);
}

uint64_t sub_10000803C()
{
  return sub_10000768C(&qword_10071F8D0, type metadata accessor for PKPaymentRequestClientAnalyticsParameters);
}

uint64_t sub_100008084()
{
  return sub_10000768C(&qword_10071F8D8, type metadata accessor for DISharingOption);
}

uint64_t sub_1000080CC()
{
  return sub_10000768C(&qword_10071F8E0, type metadata accessor for DISharingOption);
}

uint64_t sub_100008114()
{
  return sub_10000768C(&qword_10071F8E8, type metadata accessor for DIAttributeImageEncoding);
}

uint64_t sub_10000815C()
{
  return sub_10000768C(&qword_10071F8F0, type metadata accessor for DIAttributeImageEncoding);
}

uint64_t sub_1000081A4()
{
  return sub_10000768C(&qword_10071F8F8, type metadata accessor for DIAttributeImageEncoding);
}

uint64_t sub_1000081EC()
{
  return sub_10000768C(&qword_10071F900, type metadata accessor for CIImageRepresentationOption);
}

uint64_t sub_100008234()
{
  return sub_10000768C(&qword_10071F908, type metadata accessor for CIImageRepresentationOption);
}

uint64_t sub_10000827C()
{
  return sub_10000768C(&qword_10071F910, type metadata accessor for DIUploadContainer);
}

uint64_t sub_1000082C4()
{
  return sub_10000768C(&qword_10071F918, type metadata accessor for CIImageRepresentationOption);
}

uint64_t sub_10000830C()
{
  return sub_10000768C(&qword_10071F920, type metadata accessor for DISharingOption);
}

uint64_t sub_100008354()
{
  return sub_10000768C(&qword_10071F928, type metadata accessor for PKPaymentRequestClientAnalyticsParameters);
}

uint64_t sub_10000839C()
{
  return sub_10000768C(&qword_10071F930, type metadata accessor for DIIdentityFatalError);
}

uint64_t sub_1000083E4()
{
  return sub_10000768C(&qword_10071F938, type metadata accessor for DIIdentityFatalError);
}

uint64_t sub_10000842C()
{
  return sub_10000768C(&qword_10071F940, type metadata accessor for DIIdentityFatalError);
}

uint64_t sub_100008474()
{
  return sub_10000768C(&qword_10071F948, _s3__C4CodeOMa_0);
}

void _s3__C4CodeOMa_0(uint64_t a1)
{
}

uint64_t sub_1000084D0()
{
  return sub_10000768C(&qword_10071F950, _s3__C4CodeOMa_0);
}

unint64_t sub_10000851C()
{
  unint64_t result = qword_10071F958;
  if (!qword_10071F958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10071F958);
  }
  return result;
}

uint64_t sub_100008570()
{
  return sub_10000768C(&qword_10071F960, _s3__C4CodeOMa_0);
}

uint64_t sub_1000085B8()
{
  return sub_10000768C(&qword_10071F968, type metadata accessor for DIIdentityFatalError);
}

uint64_t sub_100008600()
{
  return sub_10000768C(&qword_10071F970, type metadata accessor for DIIdentityError);
}

uint64_t sub_100008648()
{
  return sub_10000768C(&qword_10071F978, type metadata accessor for DIIdentityError);
}

uint64_t sub_100008690()
{
  return sub_10000768C(&qword_10071F980, type metadata accessor for DIIdentityError);
}

uint64_t sub_1000086D8()
{
  return sub_10000768C(&qword_10071F988, type metadata accessor for Code);
}

void type metadata accessor for Code(uint64_t a1)
{
}

void sub_100008734(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_10000877C()
{
  return sub_10000768C(&qword_10071F990, type metadata accessor for Code);
}

uint64_t sub_1000087C4()
{
  return sub_10000768C(&qword_10071F998, type metadata accessor for Code);
}

uint64_t sub_10000880C()
{
  return sub_10000768C(&qword_10071F9A0, type metadata accessor for DIIdentityError);
}

uint64_t sub_100008854()
{
  return sub_10000768C(&qword_10071F9A8, type metadata accessor for FileAttributeKey);
}

uint64_t sub_1000088E4()
{
  uint64_t v0 = sub_100007764((uint64_t *)&unk_1007271F0);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v14 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for NWPath();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  unint64_t v9 = (char *)&v14 - v8;
  dispatch thunk of NetworkMonitor.currentPath.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_100009C38((uint64_t)v2);
    char v10 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v2, v3);
    char v11 = NWPath.isExpensive.getter();
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
    if (v11) {
      char v10 = 1;
    }
    else {
      char v10 = NWPath.isConstrained.getter();
    }
    uint64_t v12 = *(void (**)(char *, uint64_t))(v4 + 8);
    v12(v7, v3);
    v12(v9, v3);
  }
  return v10 & 1;
}

uint64_t sub_100008ACC(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 288) = a2;
  *(void *)(v3 + 88) = a1;
  *(void *)(v3 + 96) = v2;
  uint64_t v4 = type metadata accessor for Logger();
  *(void *)(v3 + 104) = v4;
  *(void *)(v3 + 112) = *(void *)(v4 - 8);
  *(void *)(v3 + 120) = swift_task_alloc();
  *(void *)(v3 + 128) = swift_task_alloc();
  *(void *)(v3 + 136) = swift_task_alloc();
  *(void *)(v3 + 144) = type metadata accessor for IdentityProofingStaticWorkflow(0);
  *(void *)(v3 + 152) = swift_task_alloc();
  *(void *)(v3 + 160) = swift_task_alloc();
  sub_100007764((uint64_t *)&unk_1007271F0);
  *(void *)(v3 + 168) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for NWPath();
  *(void *)(v3 + 176) = v5;
  *(void *)(v3 + 184) = *(void *)(v5 - 8);
  *(void *)(v3 + 192) = swift_task_alloc();
  *(void *)(v3 + 200) = swift_task_alloc();
  return _swift_task_switch(sub_100008C88, 0, 0);
}

uint64_t sub_100008C88()
{
  uint64_t v1 = v0[22];
  uint64_t v2 = v0[23];
  uint64_t v3 = v0[21];
  dispatch thunk of NetworkMonitor.currentPath.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100009C38(v0[21]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4(0);
  }
  else
  {
    uint64_t v6 = v0[12];
    (*(void (**)(void, void, void))(v0[23] + 32))(v0[25], v0[21], v0[22]);
    v0[26] = *(void *)(v6 + 24);
    swift_retain();
    sub_10052E944();
    swift_release();
    v0[27] = sub_10052E944();
    uint64_t v7 = (void *)swift_task_alloc();
    v0[28] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_100008E7C;
    uint64_t v8 = v0[20];
    return sub_10052DED8(v8, 0xD000000000000024, 0x800000010062AD00, 0xD000000000000027, 0x800000010062AD30);
  }
}

uint64_t sub_100008E7C()
{
  *(void *)(*(void *)v1 + 232) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1000091D8;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_100008F98;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100008F98()
{
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 96);
  swift_release();
  uint64_t v4 = v1 + *(int *)(v2 + 52);
  *(void *)(v0 + 240) = *(void *)v4;
  *(unsigned char *)(v0 + 289) = *(unsigned char *)(v4 + 8);
  sub_100009C98(v1);
  *(void *)(v0 + 248) = *(void *)(v3 + 24);
  swift_retain();
  sub_10052E944();
  swift_release();
  *(void *)(v0 + 256) = sub_10052E944();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 264) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1000090BC;
  uint64_t v6 = *(void *)(v0 + 152);
  return sub_10052DED8(v6, 0xD000000000000024, 0x800000010062AD00, 0xD000000000000027, 0x800000010062AD30);
}

uint64_t sub_1000090BC()
{
  *(void *)(*(void *)v1 + 272) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1000098F8;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_1000094B4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000091D8()
{
  uint64_t v21 = v0;
  swift_release();
  swift_release();
  defaultLogger()();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v18 = v0[22];
    uint64_t v19 = v0[25];
    uint64_t v16 = v0[15];
    uint64_t v17 = v0[23];
    uint64_t v14 = v0[14];
    uint64_t v15 = v0[13];
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    v0[6] = sub_100110D58(v4, v5, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Received an error while fetching the static workflow to get the upload threshold %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v16, v15);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v19, v18);
  }
  else
  {
    uint64_t v6 = v0[25];
    uint64_t v7 = v0[22];
    uint64_t v8 = v0[23];
    uint64_t v10 = v0[14];
    uint64_t v9 = v0[15];
    uint64_t v11 = v0[13];

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12(0);
}

uint64_t sub_1000094B4()
{
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v1 = *(void *)(v0 + 152);
  swift_release();
  uint64_t v3 = v1 + *(int *)(v2 + 56);
  uint64_t v4 = *(void *)v3;
  int v5 = *(unsigned __int8 *)(v3 + 8);
  sub_100009C98(v1);
  if (v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v4;
  }
  uint64_t v42 = v6;
  defaultLogger()();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = *(void *)(v0 + 88);
    if (*(unsigned char *)(v0 + 289)) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = *(void *)(v0 + 240);
    }
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 134218496;
    *(void *)(v0 + 80) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(void *)(v0 + 72) = v10;
    *(_WORD *)(v11 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 22) = 1024;
    *(_DWORD *)(v0 + 284) = v10 < v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Comparing the uploadSize %lld with the bill shock threshold %ld. isDataGreaterThanBillShockThreshold: %{BOOL}d", (uint8_t *)v11, 0x1Cu);
    swift_slowDealloc();
  }

  v41 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 112) + 8);
  v41(*(void *)(v0 + 136), *(void *)(v0 + 104));
  defaultLogger()();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = *(void *)(v0 + 88);
    if (*(unsigned char *)(v0 + 289)) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = *(void *)(v0 + 240);
    }
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 134218496;
    *(void *)(v0 + 56) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 2048;
    *(void *)(v0 + 64) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 22) = 1024;
    *(_DWORD *)(v0 + 280) = v42 < v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Comparing the uploadSize %lld with the low data mode threshold %ld. isDataGreaterThanLowDataModeThreshold: %{BOOL}d", (uint8_t *)v16, 0x1Cu);
    swift_slowDealloc();
  }
  int v17 = *(unsigned __int8 *)(v0 + 289);
  uint64_t v18 = v12;
  uint64_t v19 = *(void *)(v0 + 240);
  uint64_t v21 = *(void *)(v0 + 192);
  uint64_t v20 = *(void *)(v0 + 200);
  uint64_t v22 = *(void *)(v0 + 176);
  uint64_t v23 = *(void *)(v0 + 184);
  uint64_t v24 = *(void *)(v0 + 128);
  uint64_t v25 = *(void *)(v0 + 104);
  uint64_t v40 = *(void *)(v0 + 88);

  if (v17) {
    uint64_t v26 = 0;
  }
  else {
    uint64_t v26 = v19;
  }
  v41(v24, v25);
  char v27 = NWPath.isExpensive.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v21, v20, v22);
  uint64_t v29 = *(void *)(v0 + 192);
  uint64_t v28 = *(void *)(v0 + 200);
  uint64_t v30 = *(void *)(v0 + 176);
  uint64_t v31 = *(void *)(v0 + 184);
  if ((v27 & 1) != 0 && v26 < v40)
  {
    v32 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
    v32(*(void *)(v0 + 192), *(void *)(v0 + 176));
    v32(v28, v30);
    uint64_t v33 = 1;
  }
  else
  {
    int v34 = *(unsigned __int8 *)(v0 + 288);
    uint64_t v35 = *(void *)(v0 + 88);
    int v36 = NWPath.isConstrained.getter();
    v37 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
    v37(v29, v30);
    v37(v28, v30);
    uint64_t v33 = v36 & (v34 ^ 1) & (v42 < v35);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v38 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v38(v33);
}

uint64_t sub_1000098F8()
{
  uint64_t v21 = v0;
  swift_release();
  swift_release();
  defaultLogger()();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v18 = v0[22];
    uint64_t v19 = v0[25];
    uint64_t v16 = v0[15];
    uint64_t v17 = v0[23];
    uint64_t v14 = v0[14];
    uint64_t v15 = v0[13];
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    v0[6] = sub_100110D58(v4, v5, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Received an error while fetching the static workflow to get the upload threshold %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v16, v15);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v19, v18);
  }
  else
  {
    uint64_t v6 = v0[25];
    uint64_t v7 = v0[22];
    uint64_t v8 = v0[23];
    uint64_t v10 = v0[14];
    uint64_t v9 = v0[15];
    uint64_t v11 = v0[13];

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12(0);
}

uint64_t sub_100009BD4()
{
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IdentityProofingUploadsHelper()
{
  return self;
}

uint64_t sub_100009C38(uint64_t a1)
{
  uint64_t v2 = sub_100007764((uint64_t *)&unk_1007271F0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100009C98(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for IdentityProofingStaticWorkflow(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_100009CF4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for COSESignatureValidator();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    long long v9 = *(_OWORD *)((char *)a2 + v8 + 24);
    *(_OWORD *)((char *)a1 + v8 + 24) = v9;
    (**(void (***)(void))(v9 - 8))();
    uint64_t v10 = *(int *)(a3 + 24);
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for DIPCertUsage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  }
  return a1;
}

uint64_t sub_100009E50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for COSESignatureValidator();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1 + *(int *)(a2 + 20));
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  uint64_t v6 = type metadata accessor for DIPCertUsage();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

uint64_t _s8coreidvd24DigitalPresentmentHelperVwxx_0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100009F54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for COSESignatureValidator();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  long long v8 = *(_OWORD *)(a2 + v7 + 24);
  *(_OWORD *)(a1 + v7 + 24) = v8;
  (**(void (***)(void))(v8 - 8))();
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for DIPCertUsage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  return a1;
}

uint64_t sub_10000A060(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for COSESignatureValidator();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  sub_10000A128((uint64_t *)(a1 + *(int *)(a3 + 20)), (uint64_t *)(a2 + *(int *)(a3 + 20)));
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for DIPCertUsage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t *sub_10000A128(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        unint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *unint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t sub_10000A358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for COSESignatureValidator();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  long long v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(void *)(v9 + 32) = *(void *)(v10 + 32);
  uint64_t v12 = a1 + v8;
  uint64_t v13 = a2 + v8;
  uint64_t v14 = type metadata accessor for DIPCertUsage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t sub_10000A428(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for COSESignatureValidator();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1 + v7);
  long long v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for DIPCertUsage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t sub_10000A50C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000A520);
}

uint64_t sub_10000A520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for COSESignatureValidator();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 24);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for DIPCertUsage();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 24);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_10000A650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000A664);
}

uint64_t sub_10000A664(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for COSESignatureValidator();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for DIPCertUsage();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 24);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

uint64_t type metadata accessor for TrustValidator()
{
  uint64_t result = qword_10071FC10;
  if (!qword_10071FC10) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10000A7E0()
{
  uint64_t result = type metadata accessor for COSESignatureValidator();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for DIPCertUsage();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_10000A8B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a4;
  v6[5] = a6;
  v6[2] = a1;
  v6[3] = a2;
  uint64_t v10 = type metadata accessor for DIPError.Code();
  v6[6] = v10;
  v6[7] = *(void *)(v10 - 8);
  v6[8] = swift_task_alloc();
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 + 8) + **(int **)(a5 + 8));
  uint64_t v11 = (void *)swift_task_alloc();
  v6[9] = v11;
  *uint64_t v11 = v6;
  v11[1] = sub_10000AA18;
  return v13(a2, a3, a5);
}

uint64_t sub_10000AA18()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_10000AB68, 0, 0);
  }
}

uint64_t sub_10000AB68()
{
  uint64_t v1 = COSE_Sign1.payload.getter();
  if (v2 >> 60 == 15)
  {
    (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for DIPError.Code.coseCannotParseResponse(_:), v0[6]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
  else
  {
    uint64_t v3 = v1;
    unint64_t v4 = v2;
    type metadata accessor for CBORDecoder();
    swift_allocObject();
    CBORDecoder.init()();
    dispatch thunk of CBORDecoder.decode<A>(_:from:)();
    swift_release();
    sub_10000C5E0(v3, v4);
  }
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10000AD3C@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v35 = a4;
  uint64_t v36 = a3;
  int v34 = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  v32 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v31 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v31 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v31 - v15;
  uint64_t v17 = sub_100007764(&qword_10071FC60);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for COSESignatureValidator();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v31 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = a1;
  sub_10000C64C(a1, (uint64_t)v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    uint64_t v24 = *(void (**)(char *, void, uint64_t))(v6 + 104);
    uint64_t v31 = v16;
    v24(v16, enum case for DIPError.Code.coseUnknownAlgorithm(_:), v5);
    v24(v14, enum case for DIPError.Code.coseInvalidPublicKey(_:), v5);
    v24(v11, enum case for DIPError.Code.coseMisformattedSignature(_:), v5);
    v24(v32, enum case for DIPError.Code.coseInvalidSignature(_:), v5);
    COSESignatureValidator.init(errorCodeUnknownAlgorithm:errorCodeInvalidPublicKey:errorCodeMisformattedSignature:errorCodeInvalidSignature:)();
    sub_10000C6CC(v33, &qword_10071FC60);
    sub_10000C6CC((uint64_t)v19, &qword_10071FC60);
    uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
  }
  else
  {
    sub_10000C6CC(v33, &qword_10071FC60);
    uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    v25(v23, v19, v20);
  }
  uint64_t v26 = v35;
  v25(v35, v23, v20);
  uint64_t v27 = type metadata accessor for TrustValidator();
  sub_10000C6B4(v34, (uint64_t)&v26[*(int *)(v27 + 20)]);
  uint64_t v28 = &v26[*(int *)(v27 + 24)];
  uint64_t v29 = type metadata accessor for DIPCertUsage();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 32))(v28, v36, v29);
}

uint64_t sub_10000B0E8(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v2[4] = v4;
  v2[5] = *(void *)(v4 - 8);
  v2[6] = swift_task_alloc();
  uint64_t v5 = (void *)swift_task_alloc();
  v2[7] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000B1DC;
  return sub_10000B730(a1);
}

uint64_t sub_10000B1DC(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 64) = a1;
  *(void *)(v3 + 72) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_10000B5E0;
  }
  else {
    uint64_t v4 = sub_10000B2F0;
  }
  return _swift_task_switch(v4, 0, 0);
}

void sub_10000B2F0()
{
  unint64_t v1 = v0[8];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v2)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      id v3 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        return;
      }
      id v3 = *(id *)(v0[8] + 32);
    }
    uint64_t v4 = v0[9];
    swift_bridgeObjectRelease();
    sub_10000BD44();

    if (!v4)
    {
      swift_task_dealloc();
      uint64_t v9 = (void (*)(void))v0[1];
      goto LABEL_12;
    }
    uint64_t v5 = enum case for DIPError.Code.coseInvalidResponse(_:);
  }
  else
  {
    uint64_t v7 = v0[5];
    uint64_t v6 = v0[6];
    uint64_t v8 = v0[4];
    swift_bridgeObjectRelease();
    uint64_t v5 = enum case for DIPError.Code.coseInvalidResponse(_:);
    (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v6, enum case for DIPError.Code.coseInvalidResponse(_:), v8);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
  (*(void (**)(void, uint64_t, void))(v0[5] + 104))(v0[6], v5, v0[4]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v9 = (void (*)(void))v0[1];
LABEL_12:
  v9();
}

uint64_t sub_10000B5E0()
{
  (*(void (**)(void, void, void))(v0[5] + 104))(v0[6], enum case for DIPError.Code.coseInvalidResponse(_:), v0[4]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  unint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10000B730(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return _swift_task_switch(sub_10000B7F0, 0, 0);
}

uint64_t sub_10000B7F0()
{
  if (COSE_Sign1.x509Chain.getter())
  {
    uint64_t v1 = decodeCertificateChain(fromDER:)();
    v0[7] = v1;
    swift_bridgeObjectRelease();
    uint64_t v2 = v0[3];
    uint64_t v3 = type metadata accessor for TrustValidator();
    uint64_t v4 = (void *)(v2 + *(int *)(v3 + 20));
    uint64_t v5 = v4[3];
    uint64_t v6 = v4[4];
    sub_10000C728(v4, v5);
    uint64_t v7 = v2 + *(int *)(v3 + 24);
    uint64_t v8 = (void *)swift_task_alloc();
    v0[8] = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_10000BA2C;
    return dispatch thunk of OIDVerifying.verifyChain(_:forUsage:)(v1, v7, v5, v6);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[5] + 104))(v0[6], enum case for DIPError.Code.coseInvalidResponse(_:), v0[4]);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_10000BA2C(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 72) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v1)
  {
    uint64_t v5 = sub_10000BBFC;
  }
  else
  {
    *(void *)(v4 + 80) = a1;
    uint64_t v5 = sub_10000BB78;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10000BB78()
{
  uint64_t v1 = *(void **)(v0 + 80);
  uint64_t v2 = SecTrustRef.certificateChain.getter();

  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

uint64_t sub_10000BBFC()
{
  (*(void (**)(void, void, void))(v0[5] + 104))(v0[6], enum case for DIPError.Code.internalError(_:), v0[4]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10000BD44()
{
  uint64_t v0 = type metadata accessor for DIPError.Code();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100007764(&qword_10071FC78);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for PublicKeyAlgorithm();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = SecCertificateRef.rawECPublicKeyData()();
  if (v12 >> 60 == 15)
  {
    uint64_t v13 = *(void (**)(char *, void, uint64_t))(v1 + 104);
    v13(v3, enum case for DIPError.Code.coseInvalidPublicKey(_:), v0);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v14 = v0;
  }
  else
  {
    uint64_t v35 = v11;
    unint64_t v36 = v12;
    uint64_t v33 = v0;
    int v34 = v3;
    SecCertificateRef.publicKeyAlgorithm()();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      sub_10000C6CC((uint64_t)v6, &qword_10071FC78);
      uint64_t v13 = *(void (**)(char *, void, uint64_t))(v1 + 104);
      uint64_t v14 = v33;
      uint64_t v3 = v34;
      v13(v34, enum case for DIPError.Code.coseInvalidPublicKey(_:), v33);
      sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000C588();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      sub_10000C5E0(v35, v36);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
      uint64_t v15 = COSE_Sign1.payload.getter();
      if (v16 >> 60 == 15)
      {
        uint64_t v13 = *(void (**)(char *, void, uint64_t))(v1 + 104);
        uint64_t v17 = v33;
        uint64_t v3 = v34;
        v13(v34, enum case for DIPError.Code.coseInvalidResponse(_:), v33);
        unint64_t v37 = sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_10000C588();
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        sub_10000C5E0(v35, v36);
        uint64_t v18 = v7;
        uint64_t v14 = v17;
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v18);
      }
      else
      {
        uint64_t v19 = v15;
        unint64_t v20 = v16;
        uint64_t v21 = COSE_Sign1.signature.getter();
        unint64_t v32 = v20;
        unint64_t v23 = v22;
        COSE_Sign1.algorithmIdentifier.getter();
        uint64_t v29 = v21;
        unint64_t v30 = v23;
        unint64_t v24 = v32;
        uint64_t v25 = v35;
        uint64_t v31 = v19;
        unint64_t v26 = v37;
        COSESignatureValidator.validateSignature(signature:publicKeyData:publicKeyAlgorithm:algorithmIdentifier:payload:)();
        uint64_t v3 = v34;
        if (!v26)
        {
          (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
          sub_10000C5F4(v29, v30);
          sub_10000C5E0(v31, v24);
          return sub_10000C5E0(v25, v36);
        }
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        sub_10000C5F4(v29, v30);
        sub_10000C5E0(v31, v24);
        sub_10000C5E0(v25, v36);
        uint64_t v13 = *(void (**)(char *, void, uint64_t))(v1 + 104);
        uint64_t v14 = v33;
      }
    }
  }
  v13(v3, enum case for DIPError.Code.coseInvalidSignature(_:), v14);
  swift_errorRetain();
  sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  return swift_errorRelease();
}

uint64_t sub_10000C400(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10000C494;
  return sub_10000B0E8(a1);
}

uint64_t sub_10000C494()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

unint64_t sub_10000C588()
{
  unint64_t result = qword_10071F6E0;
  if (!qword_10071F6E0)
  {
    type metadata accessor for DIPError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10071F6E0);
  }
  return result;
}

uint64_t sub_10000C5E0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10000C5F4(a1, a2);
  }
  return a1;
}

uint64_t sub_10000C5F4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_10000C64C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_10071FC60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000C6B4(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_10000C6CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100007764(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *sub_10000C728(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_10000C76C()
{
  uint64_t result = sub_100017CA4();
  qword_1007600C8 = result;
  unk_1007600D0 = v1;
  return result;
}

uint64_t sub_10000C790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ImageQualitySettings();
  uint64_t v202 = *(void *)(v6 - 8);
  uint64_t v203 = v6;
  __chkstk_darwin(v6);
  v201 = (char *)&v187 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100007764(&qword_10071FCA8);
  __chkstk_darwin(v8 - 8);
  v210 = (char *)&v187 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v206 = type metadata accessor for IQACode();
  uint64_t v189 = *(void *)(v206 - 8);
  __chkstk_darwin(v206);
  uint64_t v11 = (char *)&v187 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v190 = type metadata accessor for IQCType();
  uint64_t v188 = *(void *)(v190 - 8);
  __chkstk_darwin(v190);
  uint64_t v13 = (uint64_t *)((char *)&v187 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = type metadata accessor for IQComplexSignal();
  uint64_t v208 = *(void *)(v14 - 8);
  uint64_t v209 = v14;
  __chkstk_darwin(v14);
  uint64_t v207 = (uint64_t)&v187 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v196 = type metadata accessor for Logger();
  uint64_t v195 = *(void *)(v196 - 8);
  __chkstk_darwin(v196);
  v194 = (char *)&v187 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v193 = type metadata accessor for DIPError.Code();
  uint64_t v192 = *(void *)(v193 - 8);
  __chkstk_darwin(v193);
  uint64_t v18 = (char *)&v187 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for IQImageType();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  unint64_t v22 = (char *)&v187 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for ImageQualityCriteria();
  uint64_t v199 = *(void *)(v23 - 8);
  uint64_t v200 = v23;
  uint64_t v24 = __chkstk_darwin(v23);
  v198 = (char *)&v187 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v187 - v26;
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  uint64_t v205 = a1;
  v28(v22, a1, v19);
  uint64_t v29 = *(uint64_t (**)(char *, uint64_t))(v20 + 88);
  uint64_t v204 = v19;
  int v30 = v29(v22, v19);
  v191 = v18;
  if (v30 == enum case for IQImageType.frontScan(_:))
  {
    sub_10000FA7C();
  }
  else if (v30 == enum case for IQImageType.backScan(_:))
  {
    sub_10001028C();
  }
  else if (v30 == enum case for IQImageType.idFront(_:))
  {
    sub_1000109B0();
  }
  else if (v30 == enum case for IQImageType.idBack(_:))
  {
    sub_100011E24();
  }
  else if (v30 == enum case for IQImageType.selfie(_:))
  {
    sub_100013298();
  }
  else if (v30 == enum case for IQImageType.liveness(_:))
  {
    sub_100014834();
  }
  else
  {
    if (v30 != enum case for IQImageType.passive(_:))
    {
      uint64_t v215 = 0;
      unint64_t v216 = 0xE000000000000000;
      _StringGuts.grow(_:)(53);
      v184._countAndFlagsBits = 0xD000000000000033;
      v184._object = (void *)0x800000010062B060;
      String.append(_:)(v184);
      uint64_t v185 = v204;
      _print_unlocked<A, B>(_:_:)();
      (*(void (**)(char *, void, uint64_t))(v192 + 104))(v18, enum case for DIPError.Code.unexpectedDaemonState(_:), v193);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1000193AC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      v186 = v194;
      defaultLogger()();
      DIPRecordError(_:message:log:)();
      (*(void (**)(char *, uint64_t))(v195 + 8))(v186, v196);
      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v185);
      return 0;
    }
    sub_100015AC8();
  }
  uint64_t v31 = v207;
  sub_100016D5C(a2, a3, v207);
  sub_100007764(&qword_10071FCB0);
  uint64_t v32 = v208;
  unint64_t v33 = (*(unsigned __int8 *)(v208 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v208 + 80);
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_100610730;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v32 + 16))(v34 + v33, v31, v209);
  v197 = v27;
  ImageQualityCriteria.complexSignals.setter();
  uint64_t v214 = a2;
  swift_bridgeObjectRetain();
  uint64_t v35 = *(void *)(IQComplexSignal.signals.getter() + 16);
  swift_bridgeObjectRelease();
  if (v35)
  {
    IQComplexSignal.identifier.getter();
    uint64_t v36 = IQACode.toString.getter();
    uint64_t v38 = v37;
    (*(void (**)(char *, unint64_t))(v189 + 8))(v11, v206);
    *uint64_t v13 = v36;
    v13[1] = v38;
    uint64_t v39 = v188;
    uint64_t v40 = v190;
    (*(void (**)(uint64_t *, void, uint64_t))(v188 + 104))(v13, enum case for IQCType.complex(_:), v190);
    uint64_t v41 = (uint64_t)v210;
    (*(void (**)(char *, uint64_t *, uint64_t))(v39 + 32))(v210, v13, v40);
    sub_10001783C(0, 0, v41);
  }
  type metadata accessor for MetricsFlags();
  uint64_t v212 = 0;
  sub_1000193AC(&qword_10071FCB8, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
  dispatch thunk of OptionSet.init(rawValue:)();
  uint64_t v42 = v215;
  uint64_t v213 = v215;
  uint64_t v43 = self;
  id v44 = [v43 standardUserDefaults];
  v45._object = (void *)0x800000010062B0C0;
  v45._countAndFlagsBits = 0xD000000000000026;
  Swift::Bool v46 = NSUserDefaults.internalBool(forKey:)(v45);

  if (v46)
  {
    uint64_t v47 = static MetricsFlags.blurriness.getter();
    uint64_t v215 = v47;
    uint64_t v211 = v42;
    sub_1000193AC(&qword_10071FCC8, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    swift_retain();
    dispatch thunk of SetAlgebra.intersection(_:)();
    sub_1000193AC(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v211 = v47;
      dispatch thunk of SetAlgebra.formUnion(_:)();
    }
  }
  id v48 = [v43 standardUserDefaults];
  v49._object = (void *)0x800000010062B0F0;
  v49._countAndFlagsBits = 0xD000000000000024;
  Swift::Bool v50 = NSUserDefaults.internalBool(forKey:)(v49);

  if (v50)
  {
    uint64_t v51 = static MetricsFlags.exposure.getter();
    uint64_t v215 = v51;
    uint64_t v211 = v213;
    sub_1000193AC(&qword_10071FCC8, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    swift_retain();
    dispatch thunk of SetAlgebra.intersection(_:)();
    sub_1000193AC(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v211 = v51;
      dispatch thunk of SetAlgebra.formUnion(_:)();
    }
  }
  id v52 = [v43 standardUserDefaults];
  v53._countAndFlagsBits = 0xD00000000000002BLL;
  v53._object = (void *)0x800000010062B120;
  v210 = (char *)0xD00000000000002BLL;
  Swift::Bool v54 = NSUserDefaults.internalBool(forKey:)(v53);

  if (v54)
  {
    uint64_t v55 = static MetricsFlags.cardDistortion.getter();
    uint64_t v215 = v55;
    uint64_t v211 = v213;
    sub_1000193AC(&qword_10071FCC8, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    swift_retain();
    dispatch thunk of SetAlgebra.intersection(_:)();
    sub_1000193AC(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v211 = v55;
      dispatch thunk of SetAlgebra.formUnion(_:)();
    }
  }
  id v56 = [v43 standardUserDefaults];
  v57._object = (void *)0x800000010062B150;
  v57._countAndFlagsBits = 0xD00000000000002FLL;
  Swift::Bool v58 = NSUserDefaults.internalBool(forKey:)(v57);

  if (v58)
  {
    uint64_t v59 = static MetricsFlags.faceToImageRatio.getter();
    uint64_t v215 = v59;
    uint64_t v211 = v213;
    sub_1000193AC(&qword_10071FCC8, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    swift_retain();
    dispatch thunk of SetAlgebra.intersection(_:)();
    sub_1000193AC(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v211 = v59;
      dispatch thunk of SetAlgebra.formUnion(_:)();
    }
  }
  id v60 = [v43 standardUserDefaults];
  v61._object = (void *)0x800000010062B180;
  v61._countAndFlagsBits = 0xD00000000000002FLL;
  Swift::Bool v62 = NSUserDefaults.internalBool(forKey:)(v61);

  if (v62)
  {
    uint64_t v63 = static MetricsFlags.faceCenteredRatio.getter();
    uint64_t v215 = v63;
    uint64_t v211 = v213;
    sub_1000193AC(&qword_10071FCC8, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    swift_retain();
    dispatch thunk of SetAlgebra.intersection(_:)();
    sub_1000193AC(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v211 = v63;
      dispatch thunk of SetAlgebra.formUnion(_:)();
    }
  }
  id v64 = [v43 standardUserDefaults];
  v65._object = (void *)0x800000010062B1B0;
  v65._countAndFlagsBits = 0xD000000000000026;
  Swift::Bool v66 = NSUserDefaults.internalBool(forKey:)(v65);

  if (v66)
  {
    uint64_t v67 = static MetricsFlags.headPitch.getter();
    uint64_t v215 = v67;
    uint64_t v211 = v213;
    sub_1000193AC(&qword_10071FCC8, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    swift_retain();
    dispatch thunk of SetAlgebra.intersection(_:)();
    sub_1000193AC(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v211 = v67;
      dispatch thunk of SetAlgebra.formUnion(_:)();
    }
  }
  id v68 = [v43 standardUserDefaults];
  v69._countAndFlagsBits = 0xD000000000000025;
  v69._object = (void *)0x800000010062B1E0;
  unint64_t v206 = 0xD000000000000025;
  Swift::Bool v70 = NSUserDefaults.internalBool(forKey:)(v69);

  if (v70)
  {
    uint64_t v71 = static MetricsFlags.headRoll.getter();
    uint64_t v215 = v71;
    uint64_t v211 = v213;
    sub_1000193AC(&qword_10071FCC8, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    swift_retain();
    dispatch thunk of SetAlgebra.intersection(_:)();
    sub_1000193AC(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v211 = v71;
      dispatch thunk of SetAlgebra.formUnion(_:)();
    }
  }
  id v72 = [v43 standardUserDefaults];
  v73._object = (void *)0x800000010062B210;
  v73._countAndFlagsBits = 0xD000000000000024;
  Swift::Bool v74 = NSUserDefaults.internalBool(forKey:)(v73);

  if (v74)
  {
    uint64_t v75 = static MetricsFlags.headYaw.getter();
    uint64_t v215 = v75;
    uint64_t v211 = v213;
    sub_1000193AC(&qword_10071FCC8, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    swift_retain();
    dispatch thunk of SetAlgebra.intersection(_:)();
    sub_1000193AC(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v211 = v75;
      dispatch thunk of SetAlgebra.formUnion(_:)();
    }
  }
  id v76 = [v43 standardUserDefaults];
  v77._object = (void *)0x800000010062B240;
  v77._countAndFlagsBits = 0xD00000000000002FLL;
  Swift::Bool v78 = NSUserDefaults.internalBool(forKey:)(v77);

  if (v78)
  {
    uint64_t v79 = static MetricsFlags.blinkingConfidence.getter();
    uint64_t v215 = v79;
    uint64_t v211 = v213;
    sub_1000193AC(&qword_10071FCC8, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    swift_retain();
    dispatch thunk of SetAlgebra.intersection(_:)();
    sub_1000193AC(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v211 = v79;
      dispatch thunk of SetAlgebra.formUnion(_:)();
    }
  }
  id v80 = [v43 standardUserDefaults];
  v81._countAndFlagsBits = 0xD000000000000033;
  v81._object = (void *)0x800000010062B270;
  Swift::Bool v82 = NSUserDefaults.internalBool(forKey:)(v81);

  if (v82)
  {
    uint64_t v83 = static MetricsFlags.prescriptionConfidence.getter();
    uint64_t v215 = v83;
    uint64_t v211 = v213;
    sub_1000193AC(&qword_10071FCC8, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    swift_retain();
    dispatch thunk of SetAlgebra.intersection(_:)();
    sub_1000193AC(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v211 = v83;
      dispatch thunk of SetAlgebra.formUnion(_:)();
    }
  }
  id v84 = [v43 standardUserDefaults];
  v85._countAndFlagsBits = 0xD000000000000031;
  v85._object = (void *)0x800000010062B2B0;
  Swift::Bool v86 = NSUserDefaults.internalBool(forKey:)(v85);

  if (v86)
  {
    uint64_t v87 = static MetricsFlags.sunglassesConfidence.getter();
    uint64_t v215 = v87;
    uint64_t v211 = v213;
    sub_1000193AC(&qword_10071FCC8, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    swift_retain();
    dispatch thunk of SetAlgebra.intersection(_:)();
    sub_1000193AC(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v211 = v87;
      dispatch thunk of SetAlgebra.formUnion(_:)();
    }
  }
  id v88 = [v43 standardUserDefaults];
  v89._object = (void *)0x800000010062B2F0;
  v89._countAndFlagsBits = 0xD00000000000002FLL;
  Swift::Bool v90 = NSUserDefaults.internalBool(forKey:)(v89);

  if (v90)
  {
    uint64_t v91 = static MetricsFlags.facemaskConfidence.getter();
    uint64_t v215 = v91;
    uint64_t v211 = v213;
    sub_1000193AC(&qword_10071FCC8, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    swift_retain();
    dispatch thunk of SetAlgebra.intersection(_:)();
    sub_1000193AC(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v211 = v91;
      dispatch thunk of SetAlgebra.formUnion(_:)();
    }
  }
  id v92 = [v43 standardUserDefaults];
  v93._object = (void *)0x800000010062B320;
  v93._countAndFlagsBits = 0xD00000000000002FLL;
  Swift::Bool v94 = NSUserDefaults.internalBool(forKey:)(v93);

  if (v94)
  {
    uint64_t v95 = static MetricsFlags.headgearConfidence.getter();
    uint64_t v215 = v95;
    uint64_t v211 = v213;
    sub_1000193AC(&qword_10071FCC8, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    swift_retain();
    dispatch thunk of SetAlgebra.intersection(_:)();
    sub_1000193AC(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v211 = v95;
      dispatch thunk of SetAlgebra.formUnion(_:)();
    }
  }
  id v96 = [v43 standardUserDefaults];
  v97._object = (void *)0x800000010062B350;
  v97._countAndFlagsBits = (uint64_t)v210;
  Swift::Bool v98 = NSUserDefaults.internalBool(forKey:)(v97);

  if (v98)
  {
    uint64_t v99 = static MetricsFlags.faceConfidence.getter();
    uint64_t v215 = v99;
    uint64_t v211 = v213;
    sub_1000193AC(&qword_10071FCC8, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    swift_retain();
    dispatch thunk of SetAlgebra.intersection(_:)();
    sub_1000193AC(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v211 = v99;
      dispatch thunk of SetAlgebra.formUnion(_:)();
    }
  }
  id v100 = [v43 standardUserDefaults];
  v101._object = (void *)0x800000010062B380;
  v101._countAndFlagsBits = 0xD000000000000028;
  Swift::Bool v102 = NSUserDefaults.internalBool(forKey:)(v101);

  if (v102)
  {
    uint64_t v103 = static MetricsFlags.captureTime.getter();
    uint64_t v215 = v103;
    uint64_t v211 = v213;
    sub_1000193AC(&qword_10071FCC8, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    swift_retain();
    dispatch thunk of SetAlgebra.intersection(_:)();
    sub_1000193AC(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v211 = v103;
      dispatch thunk of SetAlgebra.formUnion(_:)();
    }
  }
  id v104 = [v43 standardUserDefaults];
  v105._countAndFlagsBits = 0xD000000000000030;
  v105._object = (void *)0x800000010062B3B0;
  Swift::Bool v106 = NSUserDefaults.internalBool(forKey:)(v105);

  if (v106)
  {
    uint64_t v107 = static MetricsFlags.faceCaptureQuality.getter();
    uint64_t v215 = v107;
    uint64_t v211 = v213;
    sub_1000193AC(&qword_10071FCC8, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    swift_retain();
    dispatch thunk of SetAlgebra.intersection(_:)();
    sub_1000193AC(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v211 = v107;
      dispatch thunk of SetAlgebra.formUnion(_:)();
    }
  }
  id v108 = [v43 standardUserDefaults];
  v109._object = (void *)0x800000010062B3F0;
  v109._countAndFlagsBits = 0xD000000000000029;
  Swift::Bool v110 = NSUserDefaults.internalBool(forKey:)(v109);

  if (v110)
  {
    uint64_t v111 = static MetricsFlags.documentSize.getter();
    uint64_t v215 = v111;
    uint64_t v211 = v213;
    sub_1000193AC(&qword_10071FCC8, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    swift_retain();
    dispatch thunk of SetAlgebra.intersection(_:)();
    sub_1000193AC(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v211 = v111;
      dispatch thunk of SetAlgebra.formUnion(_:)();
    }
  }
  id v112 = [v43 standardUserDefaults];
  v113._object = (void *)0x800000010062B420;
  v113._countAndFlagsBits = 0xD00000000000002DLL;
  Swift::Bool v114 = NSUserDefaults.internalBool(forKey:)(v113);

  if (v114)
  {
    uint64_t v115 = static MetricsFlags.documentRotation.getter();
    uint64_t v215 = v115;
    uint64_t v211 = v213;
    sub_1000193AC(&qword_10071FCC8, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    swift_retain();
    dispatch thunk of SetAlgebra.intersection(_:)();
    sub_1000193AC(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v211 = v115;
      dispatch thunk of SetAlgebra.formUnion(_:)();
    }
  }
  id v116 = [v43 standardUserDefaults];
  v117._object = (void *)0x800000010062B450;
  v117._countAndFlagsBits = 0xD000000000000029;
  Swift::Bool v118 = NSUserDefaults.internalBool(forKey:)(v117);

  if (v118)
  {
    uint64_t v119 = static MetricsFlags.documentSkew.getter();
    uint64_t v215 = v119;
    uint64_t v211 = v213;
    sub_1000193AC(&qword_10071FCC8, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    swift_retain();
    dispatch thunk of SetAlgebra.intersection(_:)();
    sub_1000193AC(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v211 = v119;
      dispatch thunk of SetAlgebra.formUnion(_:)();
    }
  }
  id v120 = [v43 standardUserDefaults];
  v121._object = (void *)0x800000010062B480;
  v121._countAndFlagsBits = 0xD000000000000028;
  Swift::Bool v122 = NSUserDefaults.internalBool(forKey:)(v121);

  if (v122)
  {
    uint64_t v123 = static MetricsFlags.targetDrift.getter();
    uint64_t v215 = v123;
    uint64_t v211 = v213;
    sub_1000193AC(&qword_10071FCC8, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    swift_retain();
    dispatch thunk of SetAlgebra.intersection(_:)();
    sub_1000193AC(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v211 = v123;
      dispatch thunk of SetAlgebra.formUnion(_:)();
    }
  }
  id v124 = [v43 standardUserDefaults];
  v125._object = (void *)0x800000010062B4B0;
  v125._countAndFlagsBits = v206;
  Swift::Bool v126 = NSUserDefaults.internalBool(forKey:)(v125);

  if (v126)
  {
    uint64_t v127 = static MetricsFlags.numFaces.getter();
    uint64_t v215 = v127;
    uint64_t v211 = v213;
    sub_1000193AC(&qword_10071FCC8, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    swift_retain();
    dispatch thunk of SetAlgebra.intersection(_:)();
    sub_1000193AC(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v211 = v127;
      dispatch thunk of SetAlgebra.formUnion(_:)();
    }
  }
  id v128 = [v43 standardUserDefaults];
  v129._object = (void *)0x800000010062B4E0;
  v129._countAndFlagsBits = v206;
  Swift::Bool v130 = NSUserDefaults.internalBool(forKey:)(v129);

  if (v130)
  {
    uint64_t v131 = static MetricsFlags.luxLevel.getter();
    uint64_t v215 = v131;
    uint64_t v211 = v213;
    sub_1000193AC(&qword_10071FCC8, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    swift_retain();
    dispatch thunk of SetAlgebra.intersection(_:)();
    sub_1000193AC(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v211 = v131;
      dispatch thunk of SetAlgebra.formUnion(_:)();
    }
  }
  id v132 = [v43 standardUserDefaults];
  v133._object = (void *)0x800000010062B510;
  v133._countAndFlagsBits = (uint64_t)v210;
  Swift::Bool v134 = NSUserDefaults.internalBool(forKey:)(v133);

  if (v134)
  {
    uint64_t v135 = static MetricsFlags.pdf417Detected.getter();
    uint64_t v215 = v135;
    uint64_t v211 = v213;
    sub_1000193AC(&qword_10071FCC8, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    swift_retain();
    dispatch thunk of SetAlgebra.intersection(_:)();
    sub_1000193AC(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v211 = v135;
      dispatch thunk of SetAlgebra.formUnion(_:)();
    }
  }
  id v136 = [v43 standardUserDefaults];
  v137._countAndFlagsBits = 0xD00000000000002ELL;
  v137._object = (void *)0x800000010062B540;
  unint64_t v206 = 0xD00000000000002ELL;
  Swift::Bool v138 = NSUserDefaults.internalBool(forKey:)(v137);

  if (v138)
  {
    uint64_t v139 = static MetricsFlags.isAAMVACompliant.getter();
    uint64_t v215 = v139;
    uint64_t v211 = v213;
    sub_1000193AC(&qword_10071FCC8, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    swift_retain();
    dispatch thunk of SetAlgebra.intersection(_:)();
    sub_1000193AC(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v211 = v139;
      dispatch thunk of SetAlgebra.formUnion(_:)();
    }
  }
  id v140 = [v43 standardUserDefaults];
  v141._object = (void *)0x800000010062B570;
  v141._countAndFlagsBits = 0xD00000000000002CLL;
  Swift::Bool v142 = NSUserDefaults.internalBool(forKey:)(v141);

  if (v142)
  {
    uint64_t v143 = static MetricsFlags.isAutoCaptured.getter();
    uint64_t v215 = v143;
    uint64_t v211 = v213;
    sub_1000193AC(&qword_10071FCC8, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    swift_retain();
    dispatch thunk of SetAlgebra.intersection(_:)();
    sub_1000193AC(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v211 = v143;
      dispatch thunk of SetAlgebra.formUnion(_:)();
    }
  }
  id v144 = [v43 standardUserDefaults];
  v145._object = (void *)0x800000010062B5A0;
  v145._countAndFlagsBits = 0xD000000000000026;
  Swift::Bool v146 = NSUserDefaults.internalBool(forKey:)(v145);

  if (v146)
  {
    uint64_t v147 = static MetricsFlags.issuerNumber.getter();
    uint64_t v215 = v147;
    uint64_t v211 = v213;
    sub_1000193AC(&qword_10071FCC8, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    swift_retain();
    dispatch thunk of SetAlgebra.intersection(_:)();
    sub_1000193AC(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v211 = v147;
      dispatch thunk of SetAlgebra.formUnion(_:)();
    }
  }
  id v148 = [v43 standardUserDefaults];
  v149._object = (void *)0x800000010062B5D0;
  v149._countAndFlagsBits = 0xD00000000000002DLL;
  Swift::Bool v150 = NSUserDefaults.internalBool(forKey:)(v149);

  if (v150)
  {
    uint64_t v151 = static MetricsFlags.originalVertices.getter();
    uint64_t v215 = v151;
    uint64_t v211 = v213;
    sub_1000193AC(&qword_10071FCC8, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    swift_retain();
    dispatch thunk of SetAlgebra.intersection(_:)();
    sub_1000193AC(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v211 = v151;
      dispatch thunk of SetAlgebra.formUnion(_:)();
    }
  }
  id v152 = [v43 standardUserDefaults];
  v153._object = (void *)0x800000010062B600;
  v153._countAndFlagsBits = (uint64_t)v210;
  Swift::Bool v154 = NSUserDefaults.internalBool(forKey:)(v153);

  if (v154)
  {
    uint64_t v155 = static MetricsFlags.targetVertices.getter();
    uint64_t v215 = v155;
    uint64_t v211 = v213;
    sub_1000193AC(&qword_10071FCC8, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    swift_retain();
    dispatch thunk of SetAlgebra.intersection(_:)();
    sub_1000193AC(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v211 = v155;
      dispatch thunk of SetAlgebra.formUnion(_:)();
    }
  }
  id v156 = [v43 standardUserDefaults];
  v157._object = (void *)0x800000010062B630;
  v157._countAndFlagsBits = 0xD00000000000002DLL;
  Swift::Bool v158 = NSUserDefaults.internalBool(forKey:)(v157);

  if (v158)
  {
    uint64_t v159 = static MetricsFlags.rectangleCorners.getter();
    uint64_t v215 = v159;
    uint64_t v211 = v213;
    sub_1000193AC(&qword_10071FCC8, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    swift_retain();
    dispatch thunk of SetAlgebra.intersection(_:)();
    sub_1000193AC(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v211 = v159;
      dispatch thunk of SetAlgebra.formUnion(_:)();
    }
  }
  id v160 = [v43 standardUserDefaults];
  v161._object = (void *)0x800000010062B660;
  v161._countAndFlagsBits = 0xD00000000000002CLL;
  Swift::Bool v162 = NSUserDefaults.internalBool(forKey:)(v161);

  if (v162)
  {
    uint64_t v163 = static MetricsFlags.documentCorners.getter();
    uint64_t v215 = v163;
    uint64_t v211 = v213;
    sub_1000193AC(&qword_10071FCC8, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    swift_retain();
    dispatch thunk of SetAlgebra.intersection(_:)();
    sub_1000193AC(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v211 = v163;
      dispatch thunk of SetAlgebra.formUnion(_:)();
    }
  }
  id v164 = [v43 standardUserDefaults];
  v165._countAndFlagsBits = 0xD000000000000027;
  v165._object = (void *)0x800000010062B690;
  Swift::Bool v166 = NSUserDefaults.internalBool(forKey:)(v165);

  if (v166)
  {
    uint64_t v167 = static MetricsFlags.fuzzyMatch.getter();
    uint64_t v215 = v167;
    uint64_t v211 = v213;
    sub_1000193AC(&qword_10071FCC8, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    swift_retain();
    dispatch thunk of SetAlgebra.intersection(_:)();
    sub_1000193AC(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v211 = v167;
      dispatch thunk of SetAlgebra.formUnion(_:)();
    }
  }
  id v168 = [v43 standardUserDefaults];
  v169._countAndFlagsBits = 0xD00000000000002ALL;
  v169._object = (void *)0x800000010062B6C0;
  Swift::Bool v170 = NSUserDefaults.internalBool(forKey:)(v169);

  if (v170)
  {
    uint64_t v171 = static MetricsFlags.livenessChute.getter();
    uint64_t v215 = v171;
    uint64_t v211 = v213;
    sub_1000193AC(&qword_10071FCC8, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    swift_retain();
    dispatch thunk of SetAlgebra.intersection(_:)();
    sub_1000193AC(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v211 = v171;
      dispatch thunk of SetAlgebra.formUnion(_:)();
    }
  }
  id v172 = [v43 standardUserDefaults];
  v173._object = (void *)0x800000010062B6F0;
  v173._countAndFlagsBits = 0xD00000000000002CLL;
  Swift::Bool v174 = NSUserDefaults.internalBool(forKey:)(v173);

  uint64_t v176 = v200;
  v175 = v201;
  uint64_t v177 = v199;
  if (v174)
  {
    uint64_t v178 = static MetricsFlags.isFlashEnabled.getter();
    uint64_t v215 = v178;
    uint64_t v211 = v213;
    sub_1000193AC(&qword_10071FCC8, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    swift_retain();
    dispatch thunk of SetAlgebra.intersection(_:)();
    sub_1000193AC(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v211 = v178;
      dispatch thunk of SetAlgebra.formUnion(_:)();
    }
  }
  v179 = v197;
  (*(void (**)(char *, char *, uint64_t))(v177 + 16))(v198, v197, v176);
  uint64_t v215 = 0;
  unint64_t v216 = 0xE000000000000000;
  swift_retain();
  v180._countAndFlagsBits = 0x6C616E7265746E69;
  v180._object = (void *)0xE90000000000002DLL;
  String.append(_:)(v180);
  _print_unlocked<A, B>(_:_:)();
  ImageQualitySettings.init(criteria:priority:metrics:modelVersion:)();
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_1000193AC(&qword_10071FCC0, (void (*)(uint64_t))&type metadata accessor for ImageQualitySettings);
  uint64_t v181 = v203;
  uint64_t v182 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v202 + 8))(v175, v181);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v208 + 8))(v207, v209);
  (*(void (**)(char *, uint64_t))(v177 + 8))(v179, v176);
  return v182;
}

uint64_t sub_10000FA7C()
{
  BYTE2(v37) = 2;
  LOWORD(v37) = 513;
  LOBYTE(v36) = 1;
  LOBYTE(v35) = 1;
  LOBYTE(v34) = 1;
  ImageQualityCriteria.init(minBlurriness:maxBlurriness:minExposure:maxExposure:minCardDistortion:maxCardDistortion:minFaceToImageRatio:maxFaceToImageRatio:minHeadPitch:maxHeadPitch:minHeadRoll:maxHeadRoll:minHeadYaw:maxHeadYaw:minBlinkingConfidence:maxBlinkingConfidence:minPrescriptionConfidence:maxPrescriptionConfidence:minSunglassesConfidence:maxSunglassesConfidence:minFacemaskConfidence:maxFacemaskConfidence:minHeadgearConfidence:maxHeadgearConfidence:minFaceConfidence:maxFaceConfidence:minFaceCaptureQuality:maxFaceCaptureQuality:minDocumentSize:maxDocumentSize:minDocumentRotation:maxDocumentRotation:minDocumentSkew:maxDocumentSkew:maxLeftDrift:maxRightDrift:maxUpDrift:maxDownDrift:minNumFaces:maxNumFaces:minLuxLevel:maxLuxLevel:pdf417Detected:isAAMVACompliant:issuerNumber:complexSignals:ocrKeywords:)();
  type metadata accessor for MetricsFlags();
  static MetricsFlags.documentSize.getter();
  uint64_t v0 = self;
  id v1 = objc_retainAutoreleasedReturnValue(objc_msgSend(v0, "standardUserDefaults", 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0,
           v34,
           0,
           v35,
           0,
           v36,
           0,
           v37,
           0,
           0,
           0,
           0));
  v2._object = (void *)0x800000010062B750;
  v2._countAndFlagsBits = 0xD000000000000036;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"nternal Image Quality Settings", v2);
  uint64_t v4 = v3;

  if ((v4 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v5 = [v0 standardUserDefaults];
    v6._object = (void *)0x800000010062B790;
    v6._countAndFlagsBits = 0xD000000000000036;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"heck-min-document-size", v6);
    swift_release();
  }
  ImageQualityCriteria.minDocumentSize.setter();
  ImageQualityCriteria.maxDocumentSize.setter();
  static MetricsFlags.documentRotation.getter();
  id v7 = [v0 standardUserDefaults];
  v8._object = (void *)0x800000010062B7D0;
  v8._countAndFlagsBits = 0xD00000000000003ALL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"heck-max-document-size", v8);
  uint64_t v10 = v9;

  if ((v10 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v11 = [v0 standardUserDefaults];
    v12._object = (void *)0x800000010062B810;
    v12._countAndFlagsBits = 0xD00000000000003ALL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"heck-min-document-rotation", v12);
    swift_release();
  }
  ImageQualityCriteria.minDocumentRotation.setter();
  ImageQualityCriteria.maxDocumentRotation.setter();
  static MetricsFlags.documentSkew.getter();
  id v13 = [v0 standardUserDefaults];
  v14._object = (void *)0x800000010062B850;
  v14._countAndFlagsBits = 0xD000000000000036;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"heck-max-document-rotation", v14);
  uint64_t v16 = v15;

  if ((v16 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v17 = [v0 standardUserDefaults];
    v18._object = (void *)0x800000010062B890;
    v18._countAndFlagsBits = 0xD000000000000036;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"heck-min-document-skew", v18);
    swift_release();
  }
  ImageQualityCriteria.minDocumentSkew.setter();
  ImageQualityCriteria.maxDocumentSkew.setter();
  id v19 = [v0 standardUserDefaults];
  v20._object = (void *)0x800000010062B8D0;
  v20._countAndFlagsBits = 0xD00000000000002FLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"heck-max-document-skew", v20);

  ImageQualityCriteria.maxLeftDrift.setter();
  id v21 = [v0 standardUserDefaults];
  v22._countAndFlagsBits = 0xD000000000000030;
  v22._object = (void *)0x800000010062B900;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.front-scan.check-left-drift", v22);

  ImageQualityCriteria.maxRightDrift.setter();
  id v23 = [v0 standardUserDefaults];
  v24._countAndFlagsBits = 0xD00000000000002DLL;
  v24._object = (void *)0x800000010062B940;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"heck-right-drift", v24);

  ImageQualityCriteria.maxUpDrift.setter();
  id v25 = [v0 standardUserDefaults];
  v26._object = (void *)0x800000010062B970;
  v26._countAndFlagsBits = 0xD00000000000002FLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.front-scan.check-up-drift", v26);

  ImageQualityCriteria.maxDownDrift.setter();
  static MetricsFlags.faceToImageRatio.getter();
  id v27 = [v0 standardUserDefaults];
  v28._object = (void *)0x800000010062B9A0;
  v28._countAndFlagsBits = 0xD00000000000003CLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.front-scan.check-down-drift", v28);
  uint64_t v30 = v29;

  if ((v30 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v31 = [v0 standardUserDefaults];
    v32._object = (void *)0x800000010062B9E0;
    v32._countAndFlagsBits = 0xD00000000000003CLL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"heck-min-face-to-image-ratio", v32);
    swift_release();
  }
  ImageQualityCriteria.minFaceToImageRatio.setter();
  return ImageQualityCriteria.maxFaceToImageRatio.setter();
}

uint64_t sub_10001028C()
{
  BYTE2(v31) = 2;
  LOWORD(v31) = 513;
  LOBYTE(v30) = 1;
  LOBYTE(v29) = 1;
  LOBYTE(v28) = 1;
  ImageQualityCriteria.init(minBlurriness:maxBlurriness:minExposure:maxExposure:minCardDistortion:maxCardDistortion:minFaceToImageRatio:maxFaceToImageRatio:minHeadPitch:maxHeadPitch:minHeadRoll:maxHeadRoll:minHeadYaw:maxHeadYaw:minBlinkingConfidence:maxBlinkingConfidence:minPrescriptionConfidence:maxPrescriptionConfidence:minSunglassesConfidence:maxSunglassesConfidence:minFacemaskConfidence:maxFacemaskConfidence:minHeadgearConfidence:maxHeadgearConfidence:minFaceConfidence:maxFaceConfidence:minFaceCaptureQuality:maxFaceCaptureQuality:minDocumentSize:maxDocumentSize:minDocumentRotation:maxDocumentRotation:minDocumentSkew:maxDocumentSkew:maxLeftDrift:maxRightDrift:maxUpDrift:maxDownDrift:minNumFaces:maxNumFaces:minLuxLevel:maxLuxLevel:pdf417Detected:isAAMVACompliant:issuerNumber:complexSignals:ocrKeywords:)();
  type metadata accessor for MetricsFlags();
  static MetricsFlags.documentSize.getter();
  uint64_t v0 = self;
  id v1 = objc_retainAutoreleasedReturnValue(objc_msgSend(v0, "standardUserDefaults", 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0,
           v28,
           0,
           v29,
           0,
           v30,
           0,
           v31,
           0,
           0,
           0,
           0));
  v2._object = (void *)0x800000010062BA20;
  v2._countAndFlagsBits = 0xD000000000000035;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"heck-max-face-to-image-ratio", v2);
  uint64_t v4 = v3;

  if ((v4 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v5 = [v0 standardUserDefaults];
    v6._object = (void *)0x800000010062BA60;
    v6._countAndFlagsBits = 0xD000000000000035;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"eck-min-document-size", v6);
    swift_release();
  }
  ImageQualityCriteria.minDocumentSize.setter();
  ImageQualityCriteria.maxDocumentSize.setter();
  static MetricsFlags.documentRotation.getter();
  id v7 = [v0 standardUserDefaults];
  v8._object = (void *)0x800000010062BAA0;
  v8._countAndFlagsBits = 0xD000000000000039;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"eck-max-document-size", v8);
  uint64_t v10 = v9;

  if ((v10 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v11 = [v0 standardUserDefaults];
    v12._object = (void *)0x800000010062BAE0;
    v12._countAndFlagsBits = 0xD000000000000039;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"eck-min-document-rotation", v12);
    swift_release();
  }
  ImageQualityCriteria.minDocumentRotation.setter();
  ImageQualityCriteria.maxDocumentRotation.setter();
  static MetricsFlags.documentSkew.getter();
  id v13 = [v0 standardUserDefaults];
  v14._object = (void *)0x800000010062BB20;
  v14._countAndFlagsBits = 0xD000000000000035;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"eck-max-document-rotation", v14);
  uint64_t v16 = v15;

  if ((v16 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v17 = [v0 standardUserDefaults];
    v18._object = (void *)0x800000010062BB60;
    v18._countAndFlagsBits = 0xD000000000000035;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"eck-min-document-skew", v18);
    swift_release();
  }
  ImageQualityCriteria.minDocumentSkew.setter();
  ImageQualityCriteria.maxDocumentSkew.setter();
  id v19 = [v0 standardUserDefaults];
  v20._object = (void *)0x800000010062BBA0;
  v20._countAndFlagsBits = 0xD00000000000002ELL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"eck-max-document-skew", v20);

  ImageQualityCriteria.maxLeftDrift.setter();
  id v21 = [v0 standardUserDefaults];
  v22._countAndFlagsBits = 0xD00000000000002FLL;
  v22._object = (void *)0x800000010062BBD0;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.back-scan.check-left-drift", v22);

  ImageQualityCriteria.maxRightDrift.setter();
  id v23 = [v0 standardUserDefaults];
  v24._countAndFlagsBits = 0xD00000000000002CLL;
  v24._object = (void *)0x800000010062BC00;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.back-scan.check-right-drift", v24);

  ImageQualityCriteria.maxUpDrift.setter();
  id v25 = [v0 standardUserDefaults];
  v26._object = (void *)0x800000010062BC30;
  v26._countAndFlagsBits = 0xD00000000000002ELL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.back-scan.check-up-drift", v26);

  return ImageQualityCriteria.maxDownDrift.setter();
}

void sub_1000109B0()
{
  BYTE2(v113) = 2;
  LOWORD(v113) = 513;
  LOBYTE(v112) = 1;
  LOBYTE(v111) = 1;
  LOBYTE(v110) = 1;
  ImageQualityCriteria.init(minBlurriness:maxBlurriness:minExposure:maxExposure:minCardDistortion:maxCardDistortion:minFaceToImageRatio:maxFaceToImageRatio:minHeadPitch:maxHeadPitch:minHeadRoll:maxHeadRoll:minHeadYaw:maxHeadYaw:minBlinkingConfidence:maxBlinkingConfidence:minPrescriptionConfidence:maxPrescriptionConfidence:minSunglassesConfidence:maxSunglassesConfidence:minFacemaskConfidence:maxFacemaskConfidence:minHeadgearConfidence:maxHeadgearConfidence:minFaceConfidence:maxFaceConfidence:minFaceCaptureQuality:maxFaceCaptureQuality:minDocumentSize:maxDocumentSize:minDocumentRotation:maxDocumentRotation:minDocumentSkew:maxDocumentSkew:maxLeftDrift:maxRightDrift:maxUpDrift:maxDownDrift:minNumFaces:maxNumFaces:minLuxLevel:maxLuxLevel:pdf417Detected:isAAMVACompliant:issuerNumber:complexSignals:ocrKeywords:)();
  type metadata accessor for MetricsFlags();
  static MetricsFlags.blurriness.getter();
  uint64_t v0 = self;
  id v1 = objc_retainAutoreleasedReturnValue(objc_msgSend(v0, "standardUserDefaults", 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0,
           v110,
           0,
           v111,
           0,
           v112,
           0,
           v113,
           0,
           0,
           0,
           0));
  v2._object = (void *)0x800000010062BC60;
  v2._countAndFlagsBits = 0xD000000000000031;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.back-scan.check-down-drift", v2);
  uint64_t v4 = v3;

  if ((v4 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v5 = [v0 standardUserDefaults];
    v6._object = (void *)0x800000010062BCA0;
    v6._countAndFlagsBits = 0xD000000000000031;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-blurriness", v6);
    swift_release();
  }
  ImageQualityCriteria.minBlurriness.setter();
  ImageQualityCriteria.maxBlurriness.setter();
  static MetricsFlags.exposure.getter();
  id v7 = [v0 standardUserDefaults];
  v8._object = (void *)0x800000010062BCE0;
  v8._countAndFlagsBits = 0xD00000000000002FLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-blurriness", v8);
  uint64_t v10 = v9;

  if ((v10 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v11 = [v0 standardUserDefaults];
    v12._object = (void *)0x800000010062BD10;
    v12._countAndFlagsBits = 0xD00000000000002FLL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.front-id.check-min-exposure", v12);
    swift_release();
  }
  ImageQualityCriteria.minExposure.setter();
  ImageQualityCriteria.maxExposure.setter();
  static MetricsFlags.cardDistortion.getter();
  id v13 = [v0 standardUserDefaults];
  v14._object = (void *)0x800000010062BD40;
  v14._countAndFlagsBits = 0xD000000000000036;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.front-id.check-max-exposure", v14);
  uint64_t v16 = v15;

  if ((v16 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v17 = [v0 standardUserDefaults];
    v18._object = (void *)0x800000010062BD80;
    v18._countAndFlagsBits = 0xD000000000000036;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-card-distortion", v18);
    swift_release();
  }
  ImageQualityCriteria.minCardDistortion.setter();
  ImageQualityCriteria.maxCardDistortion.setter();
  static MetricsFlags.faceToImageRatio.getter();
  id v19 = [v0 standardUserDefaults];
  v20._object = (void *)0x800000010062BDC0;
  v20._countAndFlagsBits = 0xD00000000000003ALL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-card-distortion", v20);
  uint64_t v22 = v21;

  if ((v22 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v23 = [v0 standardUserDefaults];
    v24._object = (void *)0x800000010062BE00;
    v24._countAndFlagsBits = 0xD00000000000003ALL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-face-to-image-ratio", v24);
    swift_release();
  }
  ImageQualityCriteria.minFaceToImageRatio.setter();
  ImageQualityCriteria.maxFaceToImageRatio.setter();
  static MetricsFlags.faceCenteredRatio.getter();
  id v25 = [v0 standardUserDefaults];
  v26._object = (void *)0x800000010062BE40;
  v26._countAndFlagsBits = 0xD00000000000003ALL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-face-to-image-ratio", v26);
  uint64_t v28 = v27;

  if ((v28 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v29 = [v0 standardUserDefaults];
    v30._object = (void *)0x800000010062BE80;
    v30._countAndFlagsBits = 0xD00000000000003ALL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-face-centered-ratio", v30);
    swift_release();
  }
  ImageQualityCriteria.minFaceCenteredRatio.setter();
  ImageQualityCriteria.maxFaceCenteredRatio.setter();
  static MetricsFlags.headPitch.getter();
  id v31 = [v0 standardUserDefaults];
  v32._object = (void *)0x800000010062BEC0;
  v32._countAndFlagsBits = 0xD000000000000031;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-face-centered-ratio", v32);
  uint64_t v34 = v33;

  if ((v34 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v35 = [v0 standardUserDefaults];
    v36._object = (void *)0x800000010062BF00;
    v36._countAndFlagsBits = 0xD000000000000031;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-head-pitch", v36);
    swift_release();
  }
  ImageQualityCriteria.minHeadPitch.setter();
  ImageQualityCriteria.maxHeadPitch.setter();
  static MetricsFlags.headRoll.getter();
  id v37 = [v0 standardUserDefaults];
  v38._object = (void *)0x800000010062BF40;
  v38._countAndFlagsBits = 0xD000000000000030;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-head-pitch", v38);
  uint64_t v40 = v39;

  if ((v40 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v41 = [v0 standardUserDefaults];
    v42._object = (void *)0x800000010062BF80;
    v42._countAndFlagsBits = 0xD000000000000030;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-head-roll", v42);
    swift_release();
  }
  ImageQualityCriteria.minHeadRoll.setter();
  ImageQualityCriteria.maxHeadRoll.setter();
  static MetricsFlags.headYaw.getter();
  id v43 = [v0 standardUserDefaults];
  v44._object = (void *)0x800000010062BFC0;
  v44._countAndFlagsBits = 0xD00000000000002FLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-head-roll", v44);
  uint64_t v46 = v45;

  if ((v46 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v47 = [v0 standardUserDefaults];
    v48._object = (void *)0x800000010062BFF0;
    v48._countAndFlagsBits = 0xD00000000000002FLL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.front-id.check-min-head-yaw", v48);
    swift_release();
  }
  ImageQualityCriteria.minHeadYaw.setter();
  ImageQualityCriteria.maxHeadYaw.setter();
  static MetricsFlags.blinkingConfidence.getter();
  id v49 = [v0 standardUserDefaults];
  v50._object = (void *)0x800000010062C020;
  v50._countAndFlagsBits = 0xD00000000000003ALL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.front-id.check-max-head-yaw", v50);
  uint64_t v52 = v51;

  if ((v52 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v53 = [v0 standardUserDefaults];
    v54._object = (void *)0x800000010062C060;
    v54._countAndFlagsBits = 0xD00000000000003ALL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-blinking-confidence", v54);
    swift_release();
  }
  ImageQualityCriteria.minBlinkingConfidence.setter();
  ImageQualityCriteria.maxBlinkingConfidence.setter();
  static MetricsFlags.prescriptionConfidence.getter();
  id v55 = [v0 standardUserDefaults];
  v56._object = (void *)0x800000010062C0A0;
  v56._countAndFlagsBits = 0xD00000000000003ELL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-blinking-confidence", v56);
  uint64_t v58 = v57;

  if ((v58 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v59 = [v0 standardUserDefaults];
    v60._object = (void *)0x800000010062C0E0;
    v60._countAndFlagsBits = 0xD00000000000003ELL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-prescription-confidence", v60);
    swift_release();
  }
  ImageQualityCriteria.minPrescriptionConfidence.setter();
  ImageQualityCriteria.maxPrescriptionConfidence.setter();
  static MetricsFlags.sunglassesConfidence.getter();
  id v61 = [v0 standardUserDefaults];
  v62._object = (void *)0x800000010062C120;
  v62._countAndFlagsBits = 0xD00000000000003CLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-prescription-confidence", v62);
  uint64_t v64 = v63;

  if ((v64 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v65 = [v0 standardUserDefaults];
    v66._object = (void *)0x800000010062C160;
    v66._countAndFlagsBits = 0xD00000000000003CLL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-sunglasses-confidence", v66);
    swift_release();
  }
  ImageQualityCriteria.minSunglassesConfidence.setter();
  ImageQualityCriteria.maxSunglassesConfidence.setter();
  static MetricsFlags.facemaskConfidence.getter();
  id v67 = [v0 standardUserDefaults];
  v68._object = (void *)0x800000010062C1A0;
  v68._countAndFlagsBits = 0xD00000000000003ALL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-sunglasses-confidence", v68);
  uint64_t v70 = v69;

  if ((v70 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v71 = [v0 standardUserDefaults];
    v72._object = (void *)0x800000010062C1E0;
    v72._countAndFlagsBits = 0xD00000000000003ALL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-facemask-confidence", v72);
    swift_release();
  }
  ImageQualityCriteria.minFacemaskConfidence.setter();
  ImageQualityCriteria.maxFacemaskConfidence.setter();
  static MetricsFlags.headgearConfidence.getter();
  id v73 = [v0 standardUserDefaults];
  v74._object = (void *)0x800000010062C220;
  v74._countAndFlagsBits = 0xD00000000000003ALL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-facemask-confidence", v74);
  uint64_t v76 = v75;

  if ((v76 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v77 = [v0 standardUserDefaults];
    v78._object = (void *)0x800000010062C260;
    v78._countAndFlagsBits = 0xD00000000000003ALL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-headgear-confidence", v78);
    swift_release();
  }
  ImageQualityCriteria.minHeadgearConfidence.setter();
  ImageQualityCriteria.maxHeadgearConfidence.setter();
  static MetricsFlags.faceConfidence.getter();
  id v79 = [v0 standardUserDefaults];
  v80._object = (void *)0x800000010062C2A0;
  v80._countAndFlagsBits = 0xD000000000000036;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-headgear-confidence", v80);
  uint64_t v82 = v81;

  if ((v82 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v83 = [v0 standardUserDefaults];
    v84._object = (void *)0x800000010062C2E0;
    v84._countAndFlagsBits = 0xD000000000000036;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-face-confidence", v84);
    swift_release();
  }
  ImageQualityCriteria.minFaceConfidence.setter();
  ImageQualityCriteria.maxFaceConfidence.setter();
  static MetricsFlags.faceCaptureQuality.getter();
  id v85 = [v0 standardUserDefaults];
  v86._object = (void *)0x800000010062C320;
  v86._countAndFlagsBits = 0xD00000000000003BLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-face-confidence", v86);
  uint64_t v88 = v87;

  if ((v88 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v89 = [v0 standardUserDefaults];
    v90._object = (void *)0x800000010062C360;
    v90._countAndFlagsBits = 0xD00000000000003BLL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-face-capture-quality", v90);
    swift_release();
  }
  ImageQualityCriteria.minFaceCaptureQuality.setter();
  ImageQualityCriteria.maxFaceCaptureQuality.setter();
  static MetricsFlags.numFaces.getter();
  id v91 = [v0 standardUserDefaults];
  v92._object = (void *)0x800000010062C3A0;
  v92._countAndFlagsBits = 0xD000000000000030;
  Swift::Int_optional v114 = NSUserDefaults.internalInt(forKey:)(v92);
  Swift::Bool is_nil = v114.is_nil;

  if (is_nil)
  {
    swift_release();
  }
  else
  {
    id v94 = [v0 standardUserDefaults];
    v95._object = (void *)0x800000010062C3E0;
    v95._countAndFlagsBits = 0xD000000000000030;
    NSUserDefaults.internalInt(forKey:)(v95);
    swift_release();
  }
  ImageQualityCriteria.minNumFaces.setter();
  ImageQualityCriteria.maxNumFaces.setter();
  static MetricsFlags.luxLevel.getter();
  id v96 = [v0 standardUserDefaults];
  v97._object = (void *)0x800000010062C420;
  v97._countAndFlagsBits = 0xD000000000000030;
  Swift::Int_optional v115 = NSUserDefaults.internalInt(forKey:)(v97);
  Swift::Bool v98 = v115.is_nil;

  if (v98)
  {
    swift_release();
  }
  else
  {
    id v99 = [v0 standardUserDefaults];
    v100._object = (void *)0x800000010062C460;
    v100._countAndFlagsBits = 0xD000000000000030;
    NSUserDefaults.internalInt(forKey:)(v100);
    swift_release();
  }
  ImageQualityCriteria.minLuxLevel.setter();
  ImageQualityCriteria.maxLuxLevel.setter();
  id v101 = [v0 standardUserDefaults];
  v102._countAndFlagsBits = 0xD000000000000032;
  v102._object = (void *)0x800000010062C4A0;
  Swift::String_optional v103 = NSUserDefaults.internalString(forKey:)(v102);

  sub_100018860(v103.value._countAndFlagsBits, (uint64_t)v103.value._object);
  swift_bridgeObjectRelease();
  ImageQualityCriteria.pdf417Detected.setter();
  id v104 = [v0 standardUserDefaults];
  v105._countAndFlagsBits = 0xD000000000000035;
  v105._object = (void *)0x800000010062C4E0;
  Swift::String_optional v106 = NSUserDefaults.internalString(forKey:)(v105);

  sub_100018860(v106.value._countAndFlagsBits, (uint64_t)v106.value._object);
  swift_bridgeObjectRelease();
  ImageQualityCriteria.isAAMVACompliant.setter();
  id v107 = [v0 standardUserDefaults];
  v108._countAndFlagsBits = 0xD00000000000002DLL;
  v108._object = (void *)0x800000010062C520;
  object = NSUserDefaults.internalString(forKey:)(v108).value._object;

  if (object) {
    ImageQualityCriteria.issuerNumber.setter();
  }
}

void sub_100011E24()
{
  BYTE2(v113) = 2;
  LOWORD(v113) = 513;
  LOBYTE(v112) = 1;
  LOBYTE(v111) = 1;
  LOBYTE(v110) = 1;
  ImageQualityCriteria.init(minBlurriness:maxBlurriness:minExposure:maxExposure:minCardDistortion:maxCardDistortion:minFaceToImageRatio:maxFaceToImageRatio:minHeadPitch:maxHeadPitch:minHeadRoll:maxHeadRoll:minHeadYaw:maxHeadYaw:minBlinkingConfidence:maxBlinkingConfidence:minPrescriptionConfidence:maxPrescriptionConfidence:minSunglassesConfidence:maxSunglassesConfidence:minFacemaskConfidence:maxFacemaskConfidence:minHeadgearConfidence:maxHeadgearConfidence:minFaceConfidence:maxFaceConfidence:minFaceCaptureQuality:maxFaceCaptureQuality:minDocumentSize:maxDocumentSize:minDocumentRotation:maxDocumentRotation:minDocumentSkew:maxDocumentSkew:maxLeftDrift:maxRightDrift:maxUpDrift:maxDownDrift:minNumFaces:maxNumFaces:minLuxLevel:maxLuxLevel:pdf417Detected:isAAMVACompliant:issuerNumber:complexSignals:ocrKeywords:)();
  type metadata accessor for MetricsFlags();
  static MetricsFlags.blurriness.getter();
  uint64_t v0 = self;
  id v1 = objc_retainAutoreleasedReturnValue(objc_msgSend(v0, "standardUserDefaults", 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0,
           v110,
           0,
           v111,
           0,
           v112,
           0,
           v113,
           0,
           0,
           0,
           0));
  v2._object = (void *)0x800000010062C550;
  v2._countAndFlagsBits = 0xD000000000000030;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.front-id.check-issuer-num", v2);
  uint64_t v4 = v3;

  if ((v4 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v5 = [v0 standardUserDefaults];
    v6._object = (void *)0x800000010062C590;
    v6._countAndFlagsBits = 0xD000000000000030;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-blurriness", v6);
    swift_release();
  }
  ImageQualityCriteria.minBlurriness.setter();
  ImageQualityCriteria.maxBlurriness.setter();
  static MetricsFlags.exposure.getter();
  id v7 = [v0 standardUserDefaults];
  v8._object = (void *)0x800000010062C5D0;
  v8._countAndFlagsBits = 0xD00000000000002ELL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-blurriness", v8);
  uint64_t v10 = v9;

  if ((v10 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v11 = [v0 standardUserDefaults];
    v12._object = (void *)0x800000010062C600;
    v12._countAndFlagsBits = 0xD00000000000002ELL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.back-id.check-min-exposure", v12);
    swift_release();
  }
  ImageQualityCriteria.minExposure.setter();
  ImageQualityCriteria.maxExposure.setter();
  static MetricsFlags.cardDistortion.getter();
  id v13 = [v0 standardUserDefaults];
  v14._object = (void *)0x800000010062C630;
  v14._countAndFlagsBits = 0xD000000000000035;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.back-id.check-max-exposure", v14);
  uint64_t v16 = v15;

  if ((v16 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v17 = [v0 standardUserDefaults];
    v18._object = (void *)0x800000010062C670;
    v18._countAndFlagsBits = 0xD000000000000035;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-card-distortion", v18);
    swift_release();
  }
  ImageQualityCriteria.minCardDistortion.setter();
  ImageQualityCriteria.maxCardDistortion.setter();
  static MetricsFlags.faceToImageRatio.getter();
  id v19 = [v0 standardUserDefaults];
  v20._object = (void *)0x800000010062C6B0;
  v20._countAndFlagsBits = 0xD000000000000039;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-card-distortion", v20);
  uint64_t v22 = v21;

  if ((v22 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v23 = [v0 standardUserDefaults];
    v24._object = (void *)0x800000010062C6F0;
    v24._countAndFlagsBits = 0xD000000000000039;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-face-to-image-ratio", v24);
    swift_release();
  }
  ImageQualityCriteria.minFaceToImageRatio.setter();
  ImageQualityCriteria.maxFaceToImageRatio.setter();
  static MetricsFlags.faceCenteredRatio.getter();
  id v25 = [v0 standardUserDefaults];
  v26._object = (void *)0x800000010062C730;
  v26._countAndFlagsBits = 0xD000000000000039;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-face-to-image-ratio", v26);
  uint64_t v28 = v27;

  if ((v28 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v29 = [v0 standardUserDefaults];
    v30._object = (void *)0x800000010062C770;
    v30._countAndFlagsBits = 0xD000000000000039;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-face-centered-ratio", v30);
    swift_release();
  }
  ImageQualityCriteria.minFaceCenteredRatio.setter();
  ImageQualityCriteria.maxFaceCenteredRatio.setter();
  static MetricsFlags.headPitch.getter();
  id v31 = [v0 standardUserDefaults];
  v32._object = (void *)0x800000010062C7B0;
  v32._countAndFlagsBits = 0xD000000000000030;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-face-centered-ratio", v32);
  uint64_t v34 = v33;

  if ((v34 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v35 = [v0 standardUserDefaults];
    v36._object = (void *)0x800000010062C7F0;
    v36._countAndFlagsBits = 0xD000000000000030;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-head-pitch", v36);
    swift_release();
  }
  ImageQualityCriteria.minHeadPitch.setter();
  ImageQualityCriteria.maxHeadPitch.setter();
  static MetricsFlags.headRoll.getter();
  id v37 = [v0 standardUserDefaults];
  v38._object = (void *)0x800000010062C830;
  v38._countAndFlagsBits = 0xD00000000000002FLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-head-pitch", v38);
  uint64_t v40 = v39;

  if ((v40 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v41 = [v0 standardUserDefaults];
    v42._object = (void *)0x800000010062C860;
    v42._countAndFlagsBits = 0xD00000000000002FLL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.back-id.check-min-head-roll", v42);
    swift_release();
  }
  ImageQualityCriteria.minHeadRoll.setter();
  ImageQualityCriteria.maxHeadRoll.setter();
  static MetricsFlags.headYaw.getter();
  id v43 = [v0 standardUserDefaults];
  v44._object = (void *)0x800000010062C890;
  v44._countAndFlagsBits = 0xD00000000000002ELL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.back-id.check-max-head-roll", v44);
  uint64_t v46 = v45;

  if ((v46 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v47 = [v0 standardUserDefaults];
    v48._object = (void *)0x800000010062C8C0;
    v48._countAndFlagsBits = 0xD00000000000002ELL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.back-id.check-min-head-yaw", v48);
    swift_release();
  }
  ImageQualityCriteria.minHeadYaw.setter();
  ImageQualityCriteria.maxHeadYaw.setter();
  static MetricsFlags.blinkingConfidence.getter();
  id v49 = [v0 standardUserDefaults];
  v50._object = (void *)0x800000010062C8F0;
  v50._countAndFlagsBits = 0xD000000000000039;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.back-id.check-max-head-yaw", v50);
  uint64_t v52 = v51;

  if ((v52 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v53 = [v0 standardUserDefaults];
    v54._object = (void *)0x800000010062C930;
    v54._countAndFlagsBits = 0xD000000000000039;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-blinking-confidence", v54);
    swift_release();
  }
  ImageQualityCriteria.minBlinkingConfidence.setter();
  ImageQualityCriteria.maxBlinkingConfidence.setter();
  static MetricsFlags.prescriptionConfidence.getter();
  id v55 = [v0 standardUserDefaults];
  v56._object = (void *)0x800000010062C970;
  v56._countAndFlagsBits = 0xD00000000000003DLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-blinking-confidence", v56);
  uint64_t v58 = v57;

  if ((v58 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v59 = [v0 standardUserDefaults];
    v60._object = (void *)0x800000010062C9B0;
    v60._countAndFlagsBits = 0xD00000000000003DLL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-prescription-confidence", v60);
    swift_release();
  }
  ImageQualityCriteria.minPrescriptionConfidence.setter();
  ImageQualityCriteria.maxPrescriptionConfidence.setter();
  static MetricsFlags.sunglassesConfidence.getter();
  id v61 = [v0 standardUserDefaults];
  v62._object = (void *)0x800000010062C9F0;
  v62._countAndFlagsBits = 0xD00000000000003BLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-prescription-confidence", v62);
  uint64_t v64 = v63;

  if ((v64 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v65 = [v0 standardUserDefaults];
    v66._object = (void *)0x800000010062CA30;
    v66._countAndFlagsBits = 0xD00000000000003BLL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-sunglasses-confidence", v66);
    swift_release();
  }
  ImageQualityCriteria.minSunglassesConfidence.setter();
  ImageQualityCriteria.maxSunglassesConfidence.setter();
  static MetricsFlags.facemaskConfidence.getter();
  id v67 = [v0 standardUserDefaults];
  v68._object = (void *)0x800000010062CA70;
  v68._countAndFlagsBits = 0xD000000000000039;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-sunglasses-confidence", v68);
  uint64_t v70 = v69;

  if ((v70 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v71 = [v0 standardUserDefaults];
    v72._object = (void *)0x800000010062CAB0;
    v72._countAndFlagsBits = 0xD000000000000039;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-facemask-confidence", v72);
    swift_release();
  }
  ImageQualityCriteria.minFacemaskConfidence.setter();
  ImageQualityCriteria.maxFacemaskConfidence.setter();
  static MetricsFlags.headgearConfidence.getter();
  id v73 = [v0 standardUserDefaults];
  v74._object = (void *)0x800000010062CAF0;
  v74._countAndFlagsBits = 0xD000000000000039;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-facemask-confidence", v74);
  uint64_t v76 = v75;

  if ((v76 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v77 = [v0 standardUserDefaults];
    v78._object = (void *)0x800000010062CB30;
    v78._countAndFlagsBits = 0xD000000000000039;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-headgear-confidence", v78);
    swift_release();
  }
  ImageQualityCriteria.minHeadgearConfidence.setter();
  ImageQualityCriteria.maxHeadgearConfidence.setter();
  static MetricsFlags.faceConfidence.getter();
  id v79 = [v0 standardUserDefaults];
  v80._object = (void *)0x800000010062CB70;
  v80._countAndFlagsBits = 0xD000000000000035;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-headgear-confidence", v80);
  uint64_t v82 = v81;

  if ((v82 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v83 = [v0 standardUserDefaults];
    v84._object = (void *)0x800000010062CBB0;
    v84._countAndFlagsBits = 0xD000000000000035;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-face-confidence", v84);
    swift_release();
  }
  ImageQualityCriteria.minFaceConfidence.setter();
  ImageQualityCriteria.maxFaceConfidence.setter();
  static MetricsFlags.faceCaptureQuality.getter();
  id v85 = [v0 standardUserDefaults];
  v86._object = (void *)0x800000010062CBF0;
  v86._countAndFlagsBits = 0xD00000000000003ALL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-face-confidence", v86);
  uint64_t v88 = v87;

  if ((v88 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v89 = [v0 standardUserDefaults];
    v90._object = (void *)0x800000010062CC30;
    v90._countAndFlagsBits = 0xD00000000000003ALL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-face-capture-quality", v90);
    swift_release();
  }
  ImageQualityCriteria.minFaceCaptureQuality.setter();
  ImageQualityCriteria.maxFaceCaptureQuality.setter();
  static MetricsFlags.numFaces.getter();
  id v91 = [v0 standardUserDefaults];
  v92._object = (void *)0x800000010062CC70;
  v92._countAndFlagsBits = 0xD00000000000002FLL;
  Swift::Int_optional v114 = NSUserDefaults.internalInt(forKey:)(v92);
  Swift::Bool is_nil = v114.is_nil;

  if (is_nil)
  {
    swift_release();
  }
  else
  {
    id v94 = [v0 standardUserDefaults];
    v95._object = (void *)0x800000010062CCA0;
    v95._countAndFlagsBits = 0xD00000000000002FLL;
    NSUserDefaults.internalInt(forKey:)(v95);
    swift_release();
  }
  ImageQualityCriteria.minNumFaces.setter();
  ImageQualityCriteria.maxNumFaces.setter();
  static MetricsFlags.luxLevel.getter();
  id v96 = [v0 standardUserDefaults];
  v97._object = (void *)0x800000010062CCD0;
  v97._countAndFlagsBits = 0xD00000000000002FLL;
  Swift::Int_optional v115 = NSUserDefaults.internalInt(forKey:)(v97);
  Swift::Bool v98 = v115.is_nil;

  if (v98)
  {
    swift_release();
  }
  else
  {
    id v99 = [v0 standardUserDefaults];
    v100._object = (void *)0x800000010062CD00;
    v100._countAndFlagsBits = 0xD00000000000002FLL;
    NSUserDefaults.internalInt(forKey:)(v100);
    swift_release();
  }
  ImageQualityCriteria.minLuxLevel.setter();
  ImageQualityCriteria.maxLuxLevel.setter();
  id v101 = [v0 standardUserDefaults];
  v102._countAndFlagsBits = 0xD000000000000031;
  v102._object = (void *)0x800000010062CD30;
  Swift::String_optional v103 = NSUserDefaults.internalString(forKey:)(v102);

  sub_100018860(v103.value._countAndFlagsBits, (uint64_t)v103.value._object);
  swift_bridgeObjectRelease();
  ImageQualityCriteria.pdf417Detected.setter();
  id v104 = [v0 standardUserDefaults];
  v105._countAndFlagsBits = 0xD000000000000034;
  v105._object = (void *)0x800000010062CD70;
  Swift::String_optional v106 = NSUserDefaults.internalString(forKey:)(v105);

  sub_100018860(v106.value._countAndFlagsBits, (uint64_t)v106.value._object);
  swift_bridgeObjectRelease();
  ImageQualityCriteria.isAAMVACompliant.setter();
  id v107 = [v0 standardUserDefaults];
  v108._countAndFlagsBits = 0xD00000000000002CLL;
  v108._object = (void *)0x800000010062CDB0;
  object = NSUserDefaults.internalString(forKey:)(v108).value._object;

  if (object) {
    ImageQualityCriteria.issuerNumber.setter();
  }
}

void sub_100013298()
{
  BYTE2(v121) = 2;
  LOWORD(v121) = 513;
  LOBYTE(v120) = 1;
  LOBYTE(v119) = 1;
  LOBYTE(v118) = 1;
  ImageQualityCriteria.init(minBlurriness:maxBlurriness:minExposure:maxExposure:minCardDistortion:maxCardDistortion:minFaceToImageRatio:maxFaceToImageRatio:minHeadPitch:maxHeadPitch:minHeadRoll:maxHeadRoll:minHeadYaw:maxHeadYaw:minBlinkingConfidence:maxBlinkingConfidence:minPrescriptionConfidence:maxPrescriptionConfidence:minSunglassesConfidence:maxSunglassesConfidence:minFacemaskConfidence:maxFacemaskConfidence:minHeadgearConfidence:maxHeadgearConfidence:minFaceConfidence:maxFaceConfidence:minFaceCaptureQuality:maxFaceCaptureQuality:minDocumentSize:maxDocumentSize:minDocumentRotation:maxDocumentRotation:minDocumentSkew:maxDocumentSkew:maxLeftDrift:maxRightDrift:maxUpDrift:maxDownDrift:minNumFaces:maxNumFaces:minLuxLevel:maxLuxLevel:pdf417Detected:isAAMVACompliant:issuerNumber:complexSignals:ocrKeywords:)();
  type metadata accessor for MetricsFlags();
  static MetricsFlags.blurriness.getter();
  uint64_t v0 = self;
  id v1 = objc_retainAutoreleasedReturnValue(objc_msgSend(v0, "standardUserDefaults", 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0,
           v118,
           0,
           v119,
           0,
           v120,
           0,
           v121,
           0,
           0,
           0,
           0));
  v2._object = (void *)0x800000010062CDE0;
  v2._countAndFlagsBits = 0xD00000000000002FLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.back-id.check-issuer-num", v2);
  uint64_t v4 = v3;

  if ((v4 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v5 = [v0 standardUserDefaults];
    v6._object = (void *)0x800000010062CE10;
    v6._countAndFlagsBits = 0xD00000000000002FLL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.selfie.check-min-blurriness", v6);
    swift_release();
  }
  ImageQualityCriteria.minBlurriness.setter();
  ImageQualityCriteria.maxBlurriness.setter();
  static MetricsFlags.exposure.getter();
  id v7 = [v0 standardUserDefaults];
  v8._object = (void *)0x800000010062CE40;
  v8._countAndFlagsBits = 0xD00000000000002DLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.selfie.check-max-blurriness", v8);
  uint64_t v10 = v9;

  if ((v10 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v11 = [v0 standardUserDefaults];
    v12._object = (void *)0x800000010062CE70;
    v12._countAndFlagsBits = 0xD00000000000002DLL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.selfie.check-min-exposure", v12);
    swift_release();
  }
  ImageQualityCriteria.minExposure.setter();
  ImageQualityCriteria.maxExposure.setter();
  static MetricsFlags.cardDistortion.getter();
  id v13 = [v0 standardUserDefaults];
  v14._object = (void *)0x800000010062CEA0;
  v14._countAndFlagsBits = 0xD000000000000034;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.selfie.check-max-exposure", v14);
  uint64_t v16 = v15;

  if ((v16 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v17 = [v0 standardUserDefaults];
    v18._object = (void *)0x800000010062CEE0;
    v18._countAndFlagsBits = 0xD000000000000034;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-min-card-distortion", v18);
    swift_release();
  }
  ImageQualityCriteria.minCardDistortion.setter();
  ImageQualityCriteria.maxCardDistortion.setter();
  static MetricsFlags.faceToImageRatio.getter();
  id v19 = [v0 standardUserDefaults];
  v20._object = (void *)0x800000010062CF20;
  v20._countAndFlagsBits = 0xD000000000000038;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-max-card-distortion", v20);
  uint64_t v22 = v21;

  if ((v22 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v23 = [v0 standardUserDefaults];
    v24._object = (void *)0x800000010062CF60;
    v24._countAndFlagsBits = 0xD000000000000038;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-min-face-to-image-ratio", v24);
    swift_release();
  }
  ImageQualityCriteria.minFaceToImageRatio.setter();
  ImageQualityCriteria.maxFaceToImageRatio.setter();
  static MetricsFlags.faceCenteredRatio.getter();
  id v25 = [v0 standardUserDefaults];
  v26._object = (void *)0x800000010062CFA0;
  v26._countAndFlagsBits = 0xD000000000000038;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-max-face-to-image-ratio", v26);
  uint64_t v28 = v27;

  if ((v28 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v29 = [v0 standardUserDefaults];
    v30._object = (void *)0x800000010062CFE0;
    v30._countAndFlagsBits = 0xD000000000000038;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-min-face-centered-ratio", v30);
    swift_release();
  }
  ImageQualityCriteria.minFaceCenteredRatio.setter();
  ImageQualityCriteria.maxFaceCenteredRatio.setter();
  static MetricsFlags.headPitch.getter();
  id v31 = [v0 standardUserDefaults];
  v32._object = (void *)0x800000010062D020;
  v32._countAndFlagsBits = 0xD00000000000002FLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-max-face-centered-ratio", v32);
  uint64_t v34 = v33;

  if ((v34 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v35 = [v0 standardUserDefaults];
    v36._object = (void *)0x800000010062D050;
    v36._countAndFlagsBits = 0xD00000000000002FLL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.selfie.check-min-head-pitch", v36);
    swift_release();
  }
  ImageQualityCriteria.minHeadPitch.setter();
  ImageQualityCriteria.maxHeadPitch.setter();
  static MetricsFlags.headRoll.getter();
  id v37 = [v0 standardUserDefaults];
  v38._object = (void *)0x800000010062D080;
  v38._countAndFlagsBits = 0xD00000000000002ELL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.selfie.check-max-head-pitch", v38);
  uint64_t v40 = v39;

  if ((v40 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v41 = [v0 standardUserDefaults];
    v42._object = (void *)0x800000010062D0B0;
    v42._countAndFlagsBits = 0xD00000000000002ELL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.selfie.check-min-head-roll", v42);
    swift_release();
  }
  ImageQualityCriteria.minHeadRoll.setter();
  ImageQualityCriteria.maxHeadRoll.setter();
  static MetricsFlags.headYaw.getter();
  id v43 = [v0 standardUserDefaults];
  v44._object = (void *)0x800000010062D0E0;
  v44._countAndFlagsBits = 0xD00000000000002DLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.selfie.check-max-head-roll", v44);
  uint64_t v46 = v45;

  if ((v46 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v47 = [v0 standardUserDefaults];
    v48._object = (void *)0x800000010062D110;
    v48._countAndFlagsBits = 0xD00000000000002DLL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.selfie.check-min-head-yaw", v48);
    swift_release();
  }
  ImageQualityCriteria.minHeadYaw.setter();
  ImageQualityCriteria.maxHeadYaw.setter();
  static MetricsFlags.blinkingConfidence.getter();
  id v49 = [v0 standardUserDefaults];
  v50._object = (void *)0x800000010062D140;
  v50._countAndFlagsBits = 0xD000000000000038;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.selfie.check-max-head-yaw", v50);
  uint64_t v52 = v51;

  if ((v52 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v53 = [v0 standardUserDefaults];
    v54._object = (void *)0x800000010062D180;
    v54._countAndFlagsBits = 0xD000000000000038;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-min-blinking-confidence", v54);
    swift_release();
  }
  ImageQualityCriteria.minBlinkingConfidence.setter();
  ImageQualityCriteria.maxBlinkingConfidence.setter();
  static MetricsFlags.prescriptionConfidence.getter();
  id v55 = [v0 standardUserDefaults];
  v56._object = (void *)0x800000010062D1C0;
  v56._countAndFlagsBits = 0xD00000000000003CLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-max-blinking-confidence", v56);
  uint64_t v58 = v57;

  if ((v58 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v59 = [v0 standardUserDefaults];
    v60._object = (void *)0x800000010062D200;
    v60._countAndFlagsBits = 0xD00000000000003CLL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-min-prescription-confidence", v60);
    swift_release();
  }
  ImageQualityCriteria.minPrescriptionConfidence.setter();
  ImageQualityCriteria.maxPrescriptionConfidence.setter();
  static MetricsFlags.sunglassesConfidence.getter();
  id v61 = [v0 standardUserDefaults];
  v62._object = (void *)0x800000010062D240;
  v62._countAndFlagsBits = 0xD00000000000003ALL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-max-prescription-confidence", v62);
  uint64_t v64 = v63;

  if ((v64 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v65 = [v0 standardUserDefaults];
    v66._object = (void *)0x800000010062D280;
    v66._countAndFlagsBits = 0xD00000000000003ALL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-min-sunglasses-confidence", v66);
    swift_release();
  }
  ImageQualityCriteria.minSunglassesConfidence.setter();
  ImageQualityCriteria.maxSunglassesConfidence.setter();
  static MetricsFlags.facemaskConfidence.getter();
  id v67 = [v0 standardUserDefaults];
  v68._object = (void *)0x800000010062D2C0;
  v68._countAndFlagsBits = 0xD000000000000038;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-max-sunglasses-confidence", v68);
  uint64_t v70 = v69;

  if ((v70 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v71 = [v0 standardUserDefaults];
    v72._object = (void *)0x800000010062D300;
    v72._countAndFlagsBits = 0xD000000000000038;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-min-facemask-confidence", v72);
    swift_release();
  }
  ImageQualityCriteria.minFacemaskConfidence.setter();
  ImageQualityCriteria.maxFacemaskConfidence.setter();
  static MetricsFlags.headgearConfidence.getter();
  id v73 = [v0 standardUserDefaults];
  v74._object = (void *)0x800000010062D340;
  v74._countAndFlagsBits = 0xD000000000000038;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-max-facemask-confidence", v74);
  uint64_t v76 = v75;

  if ((v76 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v77 = [v0 standardUserDefaults];
    v78._object = (void *)0x800000010062D380;
    v78._countAndFlagsBits = 0xD000000000000038;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-min-headgear-confidence", v78);
    swift_release();
  }
  ImageQualityCriteria.minHeadgearConfidence.setter();
  ImageQualityCriteria.maxHeadgearConfidence.setter();
  static MetricsFlags.faceConfidence.getter();
  id v79 = [v0 standardUserDefaults];
  v80._object = (void *)0x800000010062D3C0;
  v80._countAndFlagsBits = 0xD000000000000034;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-max-headgear-confidence", v80);
  uint64_t v82 = v81;

  if ((v82 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v83 = [v0 standardUserDefaults];
    v84._object = (void *)0x800000010062D400;
    v84._countAndFlagsBits = 0xD000000000000034;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-min-face-confidence", v84);
    swift_release();
  }
  ImageQualityCriteria.minFaceConfidence.setter();
  ImageQualityCriteria.maxFaceConfidence.setter();
  static MetricsFlags.faceCaptureQuality.getter();
  id v85 = [v0 standardUserDefaults];
  v86._object = (void *)0x800000010062D440;
  v86._countAndFlagsBits = 0xD000000000000039;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-max-face-confidence", v86);
  uint64_t v88 = v87;

  if ((v88 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v89 = [v0 standardUserDefaults];
    v90._object = (void *)0x800000010062D480;
    v90._countAndFlagsBits = 0xD000000000000039;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-min-face-capture-quality", v90);
    swift_release();
  }
  ImageQualityCriteria.minFaceCaptureQuality.setter();
  ImageQualityCriteria.maxFaceCaptureQuality.setter();
  id v91 = [v0 standardUserDefaults];
  v92._object = (void *)0x800000010062D4C0;
  v92._countAndFlagsBits = 0xD00000000000002BLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-max-face-capture-quality", v92);

  ImageQualityCriteria.maxLeftDrift.setter();
  id v93 = [v0 standardUserDefaults];
  v94._countAndFlagsBits = 0xD00000000000002CLL;
  v94._object = (void *)0x800000010062D4F0;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.selfie.check-left-drift", v94);

  ImageQualityCriteria.maxRightDrift.setter();
  id v95 = [v0 standardUserDefaults];
  v96._countAndFlagsBits = 0xD000000000000029;
  v96._object = (void *)0x800000010062D520;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.selfie.check-right-drift", v96);

  ImageQualityCriteria.maxUpDrift.setter();
  id v97 = [v0 standardUserDefaults];
  v98._object = (void *)0x800000010062D550;
  v98._countAndFlagsBits = 0xD00000000000002BLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.selfie.check-up-drift", v98);

  ImageQualityCriteria.maxDownDrift.setter();
  static MetricsFlags.numFaces.getter();
  id v99 = [v0 standardUserDefaults];
  v100._object = (void *)0x800000010062D580;
  v100._countAndFlagsBits = 0xD00000000000002ELL;
  Swift::Int_optional v122 = NSUserDefaults.internalInt(forKey:)(v100);
  Swift::Bool is_nil = v122.is_nil;

  if (is_nil)
  {
    swift_release();
  }
  else
  {
    id v102 = [v0 standardUserDefaults];
    v103._object = (void *)0x800000010062D5B0;
    v103._countAndFlagsBits = 0xD00000000000002ELL;
    NSUserDefaults.internalInt(forKey:)(v103);
    swift_release();
  }
  ImageQualityCriteria.minNumFaces.setter();
  ImageQualityCriteria.maxNumFaces.setter();
  static MetricsFlags.luxLevel.getter();
  id v104 = [v0 standardUserDefaults];
  v105._object = (void *)0x800000010062D5E0;
  v105._countAndFlagsBits = 0xD00000000000002ELL;
  Swift::Int_optional v123 = NSUserDefaults.internalInt(forKey:)(v105);
  Swift::Bool v106 = v123.is_nil;

  if (v106)
  {
    swift_release();
  }
  else
  {
    id v107 = [v0 standardUserDefaults];
    v108._object = (void *)0x800000010062D610;
    v108._countAndFlagsBits = 0xD00000000000002ELL;
    NSUserDefaults.internalInt(forKey:)(v108);
    swift_release();
  }
  ImageQualityCriteria.minLuxLevel.setter();
  ImageQualityCriteria.maxLuxLevel.setter();
  id v109 = [v0 standardUserDefaults];
  v110._countAndFlagsBits = 0xD000000000000030;
  v110._object = (void *)0x800000010062D640;
  Swift::String_optional v111 = NSUserDefaults.internalString(forKey:)(v110);

  sub_100018860(v111.value._countAndFlagsBits, (uint64_t)v111.value._object);
  swift_bridgeObjectRelease();
  ImageQualityCriteria.pdf417Detected.setter();
  id v112 = [v0 standardUserDefaults];
  v113._countAndFlagsBits = 0xD000000000000033;
  v113._object = (void *)0x800000010062D680;
  Swift::String_optional v114 = NSUserDefaults.internalString(forKey:)(v113);

  sub_100018860(v114.value._countAndFlagsBits, (uint64_t)v114.value._object);
  swift_bridgeObjectRelease();
  ImageQualityCriteria.isAAMVACompliant.setter();
  id v115 = [v0 standardUserDefaults];
  v116._object = (void *)0x800000010062D6C0;
  v116._countAndFlagsBits = 0xD00000000000002BLL;
  object = NSUserDefaults.internalString(forKey:)(v116).value._object;

  if (object) {
    ImageQualityCriteria.issuerNumber.setter();
  }
}

uint64_t sub_100014834()
{
  BYTE2(v101) = 2;
  LOWORD(v101) = 513;
  LOBYTE(v100) = 1;
  LOBYTE(v99) = 1;
  LOBYTE(v98) = 1;
  ImageQualityCriteria.init(minBlurriness:maxBlurriness:minExposure:maxExposure:minCardDistortion:maxCardDistortion:minFaceToImageRatio:maxFaceToImageRatio:minHeadPitch:maxHeadPitch:minHeadRoll:maxHeadRoll:minHeadYaw:maxHeadYaw:minBlinkingConfidence:maxBlinkingConfidence:minPrescriptionConfidence:maxPrescriptionConfidence:minSunglassesConfidence:maxSunglassesConfidence:minFacemaskConfidence:maxFacemaskConfidence:minHeadgearConfidence:maxHeadgearConfidence:minFaceConfidence:maxFaceConfidence:minFaceCaptureQuality:maxFaceCaptureQuality:minDocumentSize:maxDocumentSize:minDocumentRotation:maxDocumentRotation:minDocumentSkew:maxDocumentSkew:maxLeftDrift:maxRightDrift:maxUpDrift:maxDownDrift:minNumFaces:maxNumFaces:minLuxLevel:maxLuxLevel:pdf417Detected:isAAMVACompliant:issuerNumber:complexSignals:ocrKeywords:)();
  type metadata accessor for MetricsFlags();
  static MetricsFlags.blurriness.getter();
  uint64_t v0 = self;
  id v1 = objc_retainAutoreleasedReturnValue(objc_msgSend(v0, "standardUserDefaults", 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0,
           v98,
           0,
           v99,
           0,
           v100,
           0,
           v101,
           0,
           0,
           0,
           0));
  v2._object = (void *)0x800000010062D6F0;
  v2._countAndFlagsBits = 0xD000000000000031;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.selfie.check-issuer-num", v2);
  uint64_t v4 = v3;

  if ((v4 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v5 = [v0 standardUserDefaults];
    v6._object = (void *)0x800000010062D730;
    v6._countAndFlagsBits = 0xD000000000000031;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-blurriness", v6);
    swift_release();
  }
  ImageQualityCriteria.minBlurriness.setter();
  ImageQualityCriteria.maxBlurriness.setter();
  static MetricsFlags.exposure.getter();
  id v7 = [v0 standardUserDefaults];
  v8._object = (void *)0x800000010062D770;
  v8._countAndFlagsBits = 0xD00000000000002FLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-blurriness", v8);
  uint64_t v10 = v9;

  if ((v10 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v11 = [v0 standardUserDefaults];
    v12._object = (void *)0x800000010062D7A0;
    v12._countAndFlagsBits = 0xD00000000000002FLL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.liveness.check-min-exposure", v12);
    swift_release();
  }
  ImageQualityCriteria.minExposure.setter();
  ImageQualityCriteria.maxExposure.setter();
  static MetricsFlags.faceToImageRatio.getter();
  id v13 = [v0 standardUserDefaults];
  v14._object = (void *)0x800000010062D7D0;
  v14._countAndFlagsBits = 0xD00000000000003ALL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.liveness.check-max-exposure", v14);
  uint64_t v16 = v15;

  if ((v16 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v17 = [v0 standardUserDefaults];
    v18._object = (void *)0x800000010062D810;
    v18._countAndFlagsBits = 0xD00000000000003ALL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-face-to-image-ratio", v18);
    swift_release();
  }
  ImageQualityCriteria.minFaceToImageRatio.setter();
  ImageQualityCriteria.maxFaceToImageRatio.setter();
  static MetricsFlags.faceCenteredRatio.getter();
  id v19 = [v0 standardUserDefaults];
  v20._object = (void *)0x800000010062D850;
  v20._countAndFlagsBits = 0xD00000000000003ALL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-face-to-image-ratio", v20);
  uint64_t v22 = v21;

  if ((v22 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v23 = [v0 standardUserDefaults];
    v24._object = (void *)0x800000010062D890;
    v24._countAndFlagsBits = 0xD00000000000003ALL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-face-centered-ratio", v24);
    swift_release();
  }
  ImageQualityCriteria.minFaceCenteredRatio.setter();
  ImageQualityCriteria.maxFaceCenteredRatio.setter();
  static MetricsFlags.headPitch.getter();
  id v25 = [v0 standardUserDefaults];
  v26._object = (void *)0x800000010062D8D0;
  v26._countAndFlagsBits = 0xD000000000000031;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-face-centered-ratio", v26);
  uint64_t v28 = v27;

  if ((v28 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v29 = [v0 standardUserDefaults];
    v30._object = (void *)0x800000010062D910;
    v30._countAndFlagsBits = 0xD000000000000031;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-head-pitch", v30);
    swift_release();
  }
  ImageQualityCriteria.minHeadPitch.setter();
  ImageQualityCriteria.maxHeadPitch.setter();
  static MetricsFlags.headRoll.getter();
  id v31 = [v0 standardUserDefaults];
  v32._object = (void *)0x800000010062D950;
  v32._countAndFlagsBits = 0xD000000000000030;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-head-pitch", v32);
  uint64_t v34 = v33;

  if ((v34 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v35 = [v0 standardUserDefaults];
    v36._object = (void *)0x800000010062D990;
    v36._countAndFlagsBits = 0xD000000000000030;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-head-roll", v36);
    swift_release();
  }
  ImageQualityCriteria.minHeadRoll.setter();
  ImageQualityCriteria.maxHeadRoll.setter();
  static MetricsFlags.headYaw.getter();
  id v37 = [v0 standardUserDefaults];
  v38._object = (void *)0x800000010062D9D0;
  v38._countAndFlagsBits = 0xD00000000000002FLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-head-roll", v38);
  uint64_t v40 = v39;

  if ((v40 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v41 = [v0 standardUserDefaults];
    v42._object = (void *)0x800000010062DA00;
    v42._countAndFlagsBits = 0xD00000000000002FLL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.liveness.check-min-head-yaw", v42);
    swift_release();
  }
  ImageQualityCriteria.minHeadYaw.setter();
  ImageQualityCriteria.maxHeadYaw.setter();
  static MetricsFlags.blinkingConfidence.getter();
  id v43 = [v0 standardUserDefaults];
  v44._object = (void *)0x800000010062DA30;
  v44._countAndFlagsBits = 0xD00000000000003ALL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.liveness.check-max-head-yaw", v44);
  uint64_t v46 = v45;

  if ((v46 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v47 = [v0 standardUserDefaults];
    v48._object = (void *)0x800000010062DA70;
    v48._countAndFlagsBits = 0xD00000000000003ALL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-blinking-confidence", v48);
    swift_release();
  }
  ImageQualityCriteria.minBlinkingConfidence.setter();
  ImageQualityCriteria.maxBlinkingConfidence.setter();
  static MetricsFlags.prescriptionConfidence.getter();
  id v49 = [v0 standardUserDefaults];
  v50._object = (void *)0x800000010062DAB0;
  v50._countAndFlagsBits = 0xD00000000000003ELL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-blinking-confidence", v50);
  uint64_t v52 = v51;

  if ((v52 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v53 = [v0 standardUserDefaults];
    v54._object = (void *)0x800000010062DAF0;
    v54._countAndFlagsBits = 0xD00000000000003ELL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-prescription-confidence", v54);
    swift_release();
  }
  ImageQualityCriteria.minPrescriptionConfidence.setter();
  ImageQualityCriteria.maxPrescriptionConfidence.setter();
  static MetricsFlags.sunglassesConfidence.getter();
  id v55 = [v0 standardUserDefaults];
  v56._object = (void *)0x800000010062DB30;
  v56._countAndFlagsBits = 0xD00000000000003CLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-prescription-confidence", v56);
  uint64_t v58 = v57;

  if ((v58 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v59 = [v0 standardUserDefaults];
    v60._object = (void *)0x800000010062DB70;
    v60._countAndFlagsBits = 0xD00000000000003CLL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-sunglasses-confidence", v60);
    swift_release();
  }
  ImageQualityCriteria.minSunglassesConfidence.setter();
  ImageQualityCriteria.maxSunglassesConfidence.setter();
  static MetricsFlags.facemaskConfidence.getter();
  id v61 = [v0 standardUserDefaults];
  v62._object = (void *)0x800000010062DBB0;
  v62._countAndFlagsBits = 0xD00000000000003ALL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-sunglasses-confidence", v62);
  uint64_t v64 = v63;

  if ((v64 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v65 = [v0 standardUserDefaults];
    v66._object = (void *)0x800000010062DBF0;
    v66._countAndFlagsBits = 0xD00000000000003ALL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-facemask-confidence", v66);
    swift_release();
  }
  ImageQualityCriteria.minFacemaskConfidence.setter();
  ImageQualityCriteria.maxFacemaskConfidence.setter();
  static MetricsFlags.headgearConfidence.getter();
  id v67 = [v0 standardUserDefaults];
  v68._object = (void *)0x800000010062DC30;
  v68._countAndFlagsBits = 0xD00000000000003ALL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-facemask-confidence", v68);
  uint64_t v70 = v69;

  if ((v70 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v71 = [v0 standardUserDefaults];
    v72._object = (void *)0x800000010062DC70;
    v72._countAndFlagsBits = 0xD00000000000003ALL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-headgear-confidence", v72);
    swift_release();
  }
  ImageQualityCriteria.minHeadgearConfidence.setter();
  ImageQualityCriteria.maxHeadgearConfidence.setter();
  static MetricsFlags.faceCaptureQuality.getter();
  id v73 = [v0 standardUserDefaults];
  v74._object = (void *)0x800000010062DCB0;
  v74._countAndFlagsBits = 0xD00000000000003BLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-headgear-confidence", v74);
  uint64_t v76 = v75;

  if ((v76 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v77 = [v0 standardUserDefaults];
    v78._object = (void *)0x800000010062DCF0;
    v78._countAndFlagsBits = 0xD00000000000003BLL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-face-capture-quality", v78);
    swift_release();
  }
  ImageQualityCriteria.minFaceCaptureQuality.setter();
  ImageQualityCriteria.maxFaceCaptureQuality.setter();
  id v79 = [v0 standardUserDefaults];
  v80._object = (void *)0x800000010062DD30;
  v80._countAndFlagsBits = 0xD00000000000002DLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-face-capture-quality", v80);

  ImageQualityCriteria.maxLeftDrift.setter();
  id v81 = [v0 standardUserDefaults];
  v82._countAndFlagsBits = 0xD00000000000002ELL;
  v82._object = (void *)0x800000010062DD60;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.liveness.check-left-drift", v82);

  ImageQualityCriteria.maxRightDrift.setter();
  id v83 = [v0 standardUserDefaults];
  v84._countAndFlagsBits = 0xD00000000000002BLL;
  v84._object = (void *)0x800000010062DD90;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.liveness.check-right-drift", v84);

  ImageQualityCriteria.maxUpDrift.setter();
  id v85 = [v0 standardUserDefaults];
  v86._object = (void *)0x800000010062DDC0;
  v86._countAndFlagsBits = 0xD00000000000002DLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.liveness.check-up-drift", v86);

  ImageQualityCriteria.maxDownDrift.setter();
  static MetricsFlags.numFaces.getter();
  id v87 = [v0 standardUserDefaults];
  v88._object = (void *)0x800000010062DDF0;
  v88._countAndFlagsBits = 0xD000000000000030;
  Swift::Int_optional v102 = NSUserDefaults.internalInt(forKey:)(v88);
  Swift::Bool is_nil = v102.is_nil;

  if (is_nil)
  {
    swift_release();
  }
  else
  {
    id v90 = [v0 standardUserDefaults];
    v91._object = (void *)0x800000010062DE30;
    v91._countAndFlagsBits = 0xD000000000000030;
    NSUserDefaults.internalInt(forKey:)(v91);
    swift_release();
  }
  ImageQualityCriteria.minNumFaces.setter();
  ImageQualityCriteria.maxNumFaces.setter();
  static MetricsFlags.luxLevel.getter();
  id v92 = [v0 standardUserDefaults];
  v93._object = (void *)0x800000010062DE70;
  v93._countAndFlagsBits = 0xD000000000000030;
  Swift::Int_optional v103 = NSUserDefaults.internalInt(forKey:)(v93);
  Swift::Bool v94 = v103.is_nil;

  if (v94)
  {
    swift_release();
  }
  else
  {
    id v95 = [v0 standardUserDefaults];
    v96._object = (void *)0x800000010062DEB0;
    v96._countAndFlagsBits = 0xD000000000000030;
    NSUserDefaults.internalInt(forKey:)(v96);
    swift_release();
  }
  ImageQualityCriteria.minLuxLevel.setter();
  return ImageQualityCriteria.maxLuxLevel.setter();
}

uint64_t sub_100015AC8()
{
  BYTE2(v101) = 2;
  LOWORD(v101) = 513;
  LOBYTE(v100) = 1;
  LOBYTE(v99) = 1;
  LOBYTE(v98) = 1;
  ImageQualityCriteria.init(minBlurriness:maxBlurriness:minExposure:maxExposure:minCardDistortion:maxCardDistortion:minFaceToImageRatio:maxFaceToImageRatio:minHeadPitch:maxHeadPitch:minHeadRoll:maxHeadRoll:minHeadYaw:maxHeadYaw:minBlinkingConfidence:maxBlinkingConfidence:minPrescriptionConfidence:maxPrescriptionConfidence:minSunglassesConfidence:maxSunglassesConfidence:minFacemaskConfidence:maxFacemaskConfidence:minHeadgearConfidence:maxHeadgearConfidence:minFaceConfidence:maxFaceConfidence:minFaceCaptureQuality:maxFaceCaptureQuality:minDocumentSize:maxDocumentSize:minDocumentRotation:maxDocumentRotation:minDocumentSkew:maxDocumentSkew:maxLeftDrift:maxRightDrift:maxUpDrift:maxDownDrift:minNumFaces:maxNumFaces:minLuxLevel:maxLuxLevel:pdf417Detected:isAAMVACompliant:issuerNumber:complexSignals:ocrKeywords:)();
  type metadata accessor for MetricsFlags();
  static MetricsFlags.blurriness.getter();
  uint64_t v0 = self;
  id v1 = objc_retainAutoreleasedReturnValue(objc_msgSend(v0, "standardUserDefaults", 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0x100000000,
           0,
           v98,
           0,
           v99,
           0,
           v100,
           0,
           v101,
           0,
           0,
           0,
           0));
  v2._object = (void *)0x800000010062E0A0;
  v2._countAndFlagsBits = 0xD000000000000030;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"internalComplexSignal", v2);
  uint64_t v4 = v3;

  if ((v4 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v5 = [v0 standardUserDefaults];
    v6._object = (void *)0x800000010062E0E0;
    v6._countAndFlagsBits = 0xD000000000000030;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-blurriness", v6);
    swift_release();
  }
  ImageQualityCriteria.minBlurriness.setter();
  ImageQualityCriteria.maxBlurriness.setter();
  static MetricsFlags.exposure.getter();
  id v7 = [v0 standardUserDefaults];
  v8._object = (void *)0x800000010062E120;
  v8._countAndFlagsBits = 0xD00000000000002ELL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-blurriness", v8);
  uint64_t v10 = v9;

  if ((v10 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v11 = [v0 standardUserDefaults];
    v12._object = (void *)0x800000010062E150;
    v12._countAndFlagsBits = 0xD00000000000002ELL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.passive.check-min-exposure", v12);
    swift_release();
  }
  ImageQualityCriteria.minExposure.setter();
  ImageQualityCriteria.maxExposure.setter();
  static MetricsFlags.faceToImageRatio.getter();
  id v13 = [v0 standardUserDefaults];
  v14._object = (void *)0x800000010062E180;
  v14._countAndFlagsBits = 0xD000000000000039;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.passive.check-max-exposure", v14);
  uint64_t v16 = v15;

  if ((v16 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v17 = [v0 standardUserDefaults];
    v18._object = (void *)0x800000010062E1C0;
    v18._countAndFlagsBits = 0xD000000000000039;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-face-to-image-ratio", v18);
    swift_release();
  }
  ImageQualityCriteria.minFaceToImageRatio.setter();
  ImageQualityCriteria.maxFaceToImageRatio.setter();
  static MetricsFlags.faceCenteredRatio.getter();
  id v19 = [v0 standardUserDefaults];
  v20._object = (void *)0x800000010062E200;
  v20._countAndFlagsBits = 0xD000000000000039;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-face-to-image-ratio", v20);
  uint64_t v22 = v21;

  if ((v22 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v23 = [v0 standardUserDefaults];
    v24._object = (void *)0x800000010062E240;
    v24._countAndFlagsBits = 0xD000000000000039;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-face-centered-ratio", v24);
    swift_release();
  }
  ImageQualityCriteria.minFaceCenteredRatio.setter();
  ImageQualityCriteria.maxFaceCenteredRatio.setter();
  static MetricsFlags.headPitch.getter();
  id v25 = [v0 standardUserDefaults];
  v26._object = (void *)0x800000010062E280;
  v26._countAndFlagsBits = 0xD000000000000030;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-face-centered-ratio", v26);
  uint64_t v28 = v27;

  if ((v28 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v29 = [v0 standardUserDefaults];
    v30._object = (void *)0x800000010062E2C0;
    v30._countAndFlagsBits = 0xD000000000000030;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-head-pitch", v30);
    swift_release();
  }
  ImageQualityCriteria.minHeadPitch.setter();
  ImageQualityCriteria.maxHeadPitch.setter();
  static MetricsFlags.headRoll.getter();
  id v31 = [v0 standardUserDefaults];
  v32._object = (void *)0x800000010062E300;
  v32._countAndFlagsBits = 0xD00000000000002FLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-head-pitch", v32);
  uint64_t v34 = v33;

  if ((v34 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v35 = [v0 standardUserDefaults];
    v36._object = (void *)0x800000010062E330;
    v36._countAndFlagsBits = 0xD00000000000002FLL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.passive.check-min-head-roll", v36);
    swift_release();
  }
  ImageQualityCriteria.minHeadRoll.setter();
  ImageQualityCriteria.maxHeadRoll.setter();
  static MetricsFlags.headYaw.getter();
  id v37 = [v0 standardUserDefaults];
  v38._object = (void *)0x800000010062E360;
  v38._countAndFlagsBits = 0xD00000000000002ELL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.passive.check-max-head-roll", v38);
  uint64_t v40 = v39;

  if ((v40 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v41 = [v0 standardUserDefaults];
    v42._object = (void *)0x800000010062E390;
    v42._countAndFlagsBits = 0xD00000000000002ELL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.passive.check-min-head-yaw", v42);
    swift_release();
  }
  ImageQualityCriteria.minHeadYaw.setter();
  ImageQualityCriteria.maxHeadYaw.setter();
  static MetricsFlags.blinkingConfidence.getter();
  id v43 = [v0 standardUserDefaults];
  v44._object = (void *)0x800000010062E3C0;
  v44._countAndFlagsBits = 0xD000000000000039;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.passive.check-max-head-yaw", v44);
  uint64_t v46 = v45;

  if ((v46 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v47 = [v0 standardUserDefaults];
    v48._object = (void *)0x800000010062E400;
    v48._countAndFlagsBits = 0xD000000000000039;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-blinking-confidence", v48);
    swift_release();
  }
  ImageQualityCriteria.minBlinkingConfidence.setter();
  ImageQualityCriteria.maxBlinkingConfidence.setter();
  static MetricsFlags.prescriptionConfidence.getter();
  id v49 = [v0 standardUserDefaults];
  v50._object = (void *)0x800000010062E440;
  v50._countAndFlagsBits = 0xD00000000000003DLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-blinking-confidence", v50);
  uint64_t v52 = v51;

  if ((v52 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v53 = [v0 standardUserDefaults];
    v54._object = (void *)0x800000010062E480;
    v54._countAndFlagsBits = 0xD00000000000003DLL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-prescription-confidence", v54);
    swift_release();
  }
  ImageQualityCriteria.minPrescriptionConfidence.setter();
  ImageQualityCriteria.maxPrescriptionConfidence.setter();
  static MetricsFlags.sunglassesConfidence.getter();
  id v55 = [v0 standardUserDefaults];
  v56._object = (void *)0x800000010062E4C0;
  v56._countAndFlagsBits = 0xD00000000000003BLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-prescription-confidence", v56);
  uint64_t v58 = v57;

  if ((v58 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v59 = [v0 standardUserDefaults];
    v60._object = (void *)0x800000010062E500;
    v60._countAndFlagsBits = 0xD00000000000003BLL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-sunglasses-confidence", v60);
    swift_release();
  }
  ImageQualityCriteria.minSunglassesConfidence.setter();
  ImageQualityCriteria.maxSunglassesConfidence.setter();
  static MetricsFlags.facemaskConfidence.getter();
  id v61 = [v0 standardUserDefaults];
  v62._object = (void *)0x800000010062E540;
  v62._countAndFlagsBits = 0xD000000000000039;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-sunglasses-confidence", v62);
  uint64_t v64 = v63;

  if ((v64 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v65 = [v0 standardUserDefaults];
    v66._object = (void *)0x800000010062E580;
    v66._countAndFlagsBits = 0xD000000000000039;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-facemask-confidence", v66);
    swift_release();
  }
  ImageQualityCriteria.minFacemaskConfidence.setter();
  ImageQualityCriteria.maxFacemaskConfidence.setter();
  static MetricsFlags.headgearConfidence.getter();
  id v67 = [v0 standardUserDefaults];
  v68._object = (void *)0x800000010062E5C0;
  v68._countAndFlagsBits = 0xD000000000000039;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-facemask-confidence", v68);
  uint64_t v70 = v69;

  if ((v70 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v71 = [v0 standardUserDefaults];
    v72._object = (void *)0x800000010062E600;
    v72._countAndFlagsBits = 0xD000000000000039;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-headgear-confidence", v72);
    swift_release();
  }
  ImageQualityCriteria.minHeadgearConfidence.setter();
  ImageQualityCriteria.maxHeadgearConfidence.setter();
  static MetricsFlags.faceCaptureQuality.getter();
  id v73 = [v0 standardUserDefaults];
  v74._object = (void *)0x800000010062E640;
  v74._countAndFlagsBits = 0xD00000000000003ALL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-headgear-confidence", v74);
  uint64_t v76 = v75;

  if ((v76 & 0x100000000) != 0)
  {
    swift_release();
  }
  else
  {
    id v77 = [v0 standardUserDefaults];
    v78._object = (void *)0x800000010062E680;
    v78._countAndFlagsBits = 0xD00000000000003ALL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-face-capture-quality", v78);
    swift_release();
  }
  ImageQualityCriteria.minFaceCaptureQuality.setter();
  ImageQualityCriteria.maxFaceCaptureQuality.setter();
  id v79 = [v0 standardUserDefaults];
  v80._object = (void *)0x800000010062E6C0;
  v80._countAndFlagsBits = 0xD00000000000002CLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-face-capture-quality", v80);

  ImageQualityCriteria.maxLeftDrift.setter();
  id v81 = [v0 standardUserDefaults];
  v82._countAndFlagsBits = 0xD00000000000002DLL;
  v82._object = (void *)0x800000010062E6F0;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.passive.check-left-drift", v82);

  ImageQualityCriteria.maxRightDrift.setter();
  id v83 = [v0 standardUserDefaults];
  v84._countAndFlagsBits = 0xD00000000000002ALL;
  v84._object = (void *)0x800000010062E720;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.passive.check-right-drift", v84);

  ImageQualityCriteria.maxUpDrift.setter();
  id v85 = [v0 standardUserDefaults];
  v86._object = (void *)0x800000010062E750;
  v86._countAndFlagsBits = 0xD00000000000002CLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.passive.check-up-drift", v86);

  ImageQualityCriteria.maxDownDrift.setter();
  static MetricsFlags.numFaces.getter();
  id v87 = [v0 standardUserDefaults];
  v88._object = (void *)0x800000010062E780;
  v88._countAndFlagsBits = 0xD00000000000002FLL;
  Swift::Int_optional v102 = NSUserDefaults.internalInt(forKey:)(v88);
  Swift::Bool is_nil = v102.is_nil;

  if (is_nil)
  {
    swift_release();
  }
  else
  {
    id v90 = [v0 standardUserDefaults];
    v91._object = (void *)0x800000010062E7B0;
    v91._countAndFlagsBits = 0xD00000000000002FLL;
    NSUserDefaults.internalInt(forKey:)(v91);
    swift_release();
  }
  ImageQualityCriteria.minNumFaces.setter();
  ImageQualityCriteria.maxNumFaces.setter();
  static MetricsFlags.luxLevel.getter();
  id v92 = [v0 standardUserDefaults];
  v93._object = (void *)0x800000010062E7E0;
  v93._countAndFlagsBits = 0xD00000000000002FLL;
  Swift::Int_optional v103 = NSUserDefaults.internalInt(forKey:)(v93);
  Swift::Bool v94 = v103.is_nil;

  if (v94)
  {
    swift_release();
  }
  else
  {
    id v95 = [v0 standardUserDefaults];
    v96._object = (void *)0x800000010062E810;
    v96._countAndFlagsBits = 0xD00000000000002FLL;
    NSUserDefaults.internalInt(forKey:)(v96);
    swift_release();
  }
  ImageQualityCriteria.minLuxLevel.setter();
  return ImageQualityCriteria.maxLuxLevel.setter();
}

uint64_t sub_100016D5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for IQACode();
  uint64_t v41 = *(void *)(v6 - 8);
  uint64_t v42 = v6;
  __chkstk_darwin(v6);
  uint64_t v40 = (void *)((char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = sub_100007764(&qword_10071FCD8);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  id v11 = (char *)v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  id v13 = (char *)v35 - v12;
  uint64_t v14 = type metadata accessor for IQSignal();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  Swift::String v36 = (char *)v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v39 = (char *)v35 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)v35 - v21;
  __chkstk_darwin(v20);
  Swift::String v24 = (char *)v35 - v23;
  uint64_t v38 = a1;
  sub_100017410(0xD000000000000029, (void *)0x800000010062DF60, 0xD000000000000028, (void *)0x800000010062DF90, 0xD000000000000027, (void *)0x800000010062DFC0, (uint64_t)v13);
  id v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v37(v13, 1, v14) == 1)
  {
    sub_10000C6CC((uint64_t)v13, &qword_10071FCD8);
    id v25 = (char *)_swiftEmptyArrayStorage;
  }
  else
  {
    v35[1] = a2;
    v35[2] = a3;
    v35[0] = *(void *)(v15 + 32);
    ((void (*)(char *, char *, uint64_t))v35[0])(v24, v13, v14);
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v22, v24, v14);
    id v25 = (char *)sub_10010EF7C(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
    unint64_t v27 = *((void *)v25 + 2);
    unint64_t v26 = *((void *)v25 + 3);
    if (v27 >= v26 >> 1) {
      id v25 = (char *)sub_10010EF7C(v26 > 1, v27 + 1, 1, (unint64_t)v25);
    }
    *((void *)v25 + 2) = v27 + 1;
    ((void (*)(char *, char *, uint64_t))v35[0])(&v25[((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(void *)(v15 + 72) * v27], v22, v14);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v24, v14);
  }
  sub_100017410(0xD000000000000029, (void *)0x800000010062DFF0, 0xD000000000000028, (void *)0x800000010062E020, 0xD000000000000027, (void *)0x800000010062E050, (uint64_t)v11);
  if (v37(v11, 1, v14) == 1)
  {
    sub_10000C6CC((uint64_t)v11, &qword_10071FCD8);
  }
  else
  {
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    id v29 = v39;
    v28(v39, v11, v14);
    Swift::String v30 = v36;
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v36, v29, v14);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      id v25 = (char *)sub_10010EF7C(0, *((void *)v25 + 2) + 1, 1, (unint64_t)v25);
    }
    unint64_t v32 = *((void *)v25 + 2);
    unint64_t v31 = *((void *)v25 + 3);
    if (v32 >= v31 >> 1) {
      id v25 = (char *)sub_10010EF7C(v31 > 1, v32 + 1, 1, (unint64_t)v25);
    }
    *((void *)v25 + 2) = v32 + 1;
    v28(&v25[((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(void *)(v15 + 72) * v32], v30, v14);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v39, v14);
  }
  uint64_t v33 = v40;
  *uint64_t v40 = 0xD000000000000015;
  v33[1] = 0x800000010062E080;
  (*(void (**)(void *, void, uint64_t))(v41 + 104))(v33, enum case for IQACode.complex(_:), v42);
  return IQComplexSignal.init(identifier:priority:signals:)();
}

BOOL sub_1000172D0(void *a1, uint64_t a2)
{
  type metadata accessor for MetricsFlags();
  sub_1000193AC(&qword_10071FCC8, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
  swift_retain();
  dispatch thunk of SetAlgebra.intersection(_:)();
  sub_1000193AC(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
  char v4 = dispatch thunk of static Equatable.== infix(_:_:)();
  if (v4)
  {
    a2 = v6;
  }
  else
  {
    swift_release();
    swift_retain_n();
    dispatch thunk of SetAlgebra.formUnion(_:)();
  }
  *a1 = a2;
  return (v4 & 1) == 0;
}

uint64_t sub_100017410@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  v45._countAndFlagsBits = a5;
  v45._object = a6;
  v48._countAndFlagsBits = a3;
  v48._object = a4;
  uint64_t v49 = a7;
  uint64_t v9 = type metadata accessor for IQComparator();
  uint64_t v46 = *(void *)(v9 - 8);
  uint64_t v47 = v9;
  uint64_t v10 = __chkstk_darwin(v9);
  Swift::String v44 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v42 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v42 - v15;
  uint64_t v17 = type metadata accessor for IQCType();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  id v43 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (uint64_t *)((char *)&v42 - v22);
  __chkstk_darwin(v21);
  id v25 = (char *)&v42 - v24;
  unint64_t v26 = self;
  id v27 = [v26 standardUserDefaults];
  v28._countAndFlagsBits = a1;
  v28._object = a2;
  Swift::String_optional v29 = NSUserDefaults.internalString(forKey:)(v28);

  if (v29.value._object)
  {
    sub_1004B40F0(v29.value._countAndFlagsBits, v29.value._object, v23);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t *, uint64_t))(v18 + 32))(v25, v23, v17);
    id v30 = [v26 standardUserDefaults];
    Swift::String_optional v31 = NSUserDefaults.internalString(forKey:)(v48);

    if (v31.value._object)
    {
      sub_1004B4D78(v31.value._countAndFlagsBits, v31.value._object, (uint64_t)v14);
      swift_bridgeObjectRelease();
      uint64_t v33 = v46;
      uint64_t v32 = v47;
      (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v16, v14, v47);
      id v34 = [v26 standardUserDefaults];
      NSUserDefaults.internalFloat(forKey:)(v35, v45);
      uint64_t v37 = v36;

      if ((v37 & 0x100000000) == 0)
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v43, v25, v17);
        (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v44, v16, v32);
        uint64_t v38 = v49;
        IQSignal.init(type:comparator:threshold:)();
        (*(void (**)(char *, uint64_t))(v33 + 8))(v16, v32);
        (*(void (**)(char *, uint64_t))(v18 + 8))(v25, v17);
        uint64_t v39 = type metadata accessor for IQSignal();
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v38, 0, 1, v39);
      }
      (*(void (**)(char *, uint64_t))(v33 + 8))(v16, v32);
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v25, v17);
  }
  uint64_t v41 = type metadata accessor for IQSignal();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v49, 1, 1, v41);
}

uint64_t sub_10001783C(uint64_t a1, int64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  unint64_t v5 = *v3;
  int64_t v6 = *(void *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > *(void *)(v5 + 24) >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    unint64_t v5 = sub_10010EFB0(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *uint64_t v3 = v5;
  }
  uint64_t v14 = type metadata accessor for IQCType();
  uint64_t v15 = *(void *)(v14 - 8);
  unint64_t v16 = v5 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  uint64_t v17 = *(void *)(v15 + 72);
  unint64_t v18 = v16 + v17 * a1;
  swift_arrayDestroy();
  if (!v9) {
    goto LABEL_25;
  }
  uint64_t v19 = *(void *)(v5 + 16);
  uint64_t v20 = v19 - a2;
  if (__OFSUB__(v19, a2)) {
    goto LABEL_33;
  }
  if (v20 < 0)
  {
LABEL_35:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  unint64_t v21 = v18 + v17;
  unint64_t v22 = v16 + v17 * a2;
  if (v18 + v17 < v22 || v21 >= v22 + v20 * v17)
  {
    swift_arrayInitWithTakeFrontToBack();
  }
  else if (v21 != v22)
  {
    swift_arrayInitWithTakeBackToFront();
  }
  uint64_t v24 = *(void *)(v5 + 16);
  BOOL v25 = __OFADD__(v24, v9);
  uint64_t v26 = v24 + v9;
  if (v25)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  *(void *)(v5 + 16) = v26;
LABEL_25:
  if (v17 >= 1) {
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v15 + 16))(v18, a3, v14);
  }
  return sub_10000C6CC(a3, &qword_10071FCA8);
}

char *sub_100017A58(uint64_t a1, int64_t a2, _OWORD *a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v5 = *(void **)v3;
  int64_t v6 = *(void *)(*(void *)v3 + 16);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    unint64_t v5 = sub_10010F534(isUniquelyReferenced_nonNull_native, v13, 1, v5);
  }
  uint64_t v14 = &v5[14 * a1 + 4];
  uint64_t result = (char *)swift_arrayDestroy();
  if (!v9) {
    goto LABEL_20;
  }
  uint64_t v16 = v5[2];
  BOOL v17 = __OFSUB__(v16, a2);
  uint64_t v18 = v16 - a2;
  if (v17) {
    goto LABEL_26;
  }
  if ((v18 & 0x8000000000000000) == 0)
  {
    uint64_t result = (char *)(v14 + 7);
    uint64_t v19 = (char *)&v5[14 * a2 + 4];
    if (v14 + 7 != (_OWORD *)v19 || result >= &v19[112 * v18]) {
      uint64_t result = (char *)memmove(result, v19, 112 * v18);
    }
    uint64_t v20 = v5[2];
    BOOL v17 = __OFADD__(v20, v9);
    uint64_t v21 = v20 + v9;
    if (!v17)
    {
      v5[2] = v21;
LABEL_20:
      long long v22 = a3[5];
      v14[4] = a3[4];
      v14[5] = v22;
      v14[6] = a3[6];
      long long v23 = a3[1];
      *uint64_t v14 = *a3;
      v14[1] = v23;
      long long v24 = a3[3];
      v14[2] = a3[2];
      v14[3] = v24;
      *(void *)uint64_t v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100017C00(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    a3(&var2);
    if (!v3) {
      char v4 = var2;
    }
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3) {
      char v4 = BYTE1(var2);
    }
  }
  return v4 & 1;
}

void *sub_100017C60@<X0>(void *(*a1)(uint64_t *__return_ptr)@<X2>, unsigned char *a2@<X8>)
{
  uint64_t result = a1(&v5);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_100017CA4()
{
  sub_100007764(&qword_10071FCE0);
  uint64_t v0 = type metadata accessor for IQCType();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = *(void *)(v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v65 = swift_allocObject();
  *(_OWORD *)(v65 + 16) = xmmword_100610740;
  unint64_t v4 = v65 + v3;
  uint64_t v5 = *(void (**)(unint64_t, void, uint64_t))(v1 + 104);
  v5(v4, enum case for IQCType.pdf417Detected(_:), v0);
  v5(v4 + v2, enum case for IQCType.isAAMVACompliant(_:), v0);
  v5(v4 + 2 * v2, enum case for IQCType.issuerNumber(_:), v0);
  v5(v4 + 3 * v2, enum case for IQCType.blurriness(_:), v0);
  v5(v4 + 4 * v2, enum case for IQCType.exposure(_:), v0);
  v5(v4 + 5 * v2, enum case for IQCType.documentSize(_:), v0);
  v5(v4 + 6 * v2, enum case for IQCType.documentRotation(_:), v0);
  v5(v4 + 7 * v2, enum case for IQCType.documentSkew(_:), v0);
  v5(v4 + 8 * v2, enum case for IQCType.numFaces(_:), v0);
  v5(v4 + 9 * v2, enum case for IQCType.luxLevel(_:), v0);
  v5(v4 + 10 * v2, enum case for IQCType.faceCenteredRatio(_:), v0);
  v5(v4 + 11 * v2, enum case for IQCType.faceToImageRatio(_:), v0);
  v5(v4 + 12 * v2, enum case for IQCType.leftDrift(_:), v0);
  v5(v4 + 13 * v2, enum case for IQCType.rightDrift(_:), v0);
  v5(v4 + 14 * v2, enum case for IQCType.upDrift(_:), v0);
  v5(v4 + 15 * v2, enum case for IQCType.downDrift(_:), v0);
  v5(v4 + 16 * v2, enum case for IQCType.facemaskConfidence(_:), v0);
  v5(v4 + 17 * v2, enum case for IQCType.headgearConfidence(_:), v0);
  v5(v4 + 18 * v2, enum case for IQCType.sunglassesConfidence(_:), v0);
  v5(v4 + 19 * v2, enum case for IQCType.prescriptionConfidence(_:), v0);
  v5(v4 + 20 * v2, enum case for IQCType.blinkingConfidence(_:), v0);
  v5(v4 + 21 * v2, enum case for IQCType.faceCaptureQuality(_:), v0);
  v5(v4 + 22 * v2, enum case for IQCType.headPitch(_:), v0);
  v5(v4 + 23 * v2, enum case for IQCType.headRoll(_:), v0);
  v5(v4 + 24 * v2, enum case for IQCType.headYaw(_:), v0);
  v5(v4 + 25 * v2, enum case for IQCType.cardDistortion(_:), v0);
  sub_100007764(&qword_10071FCE8);
  int64_t v6 = (int *)(sub_100007764(&qword_10071FCF0) - 8);
  uint64_t v7 = *(void *)(*(void *)v6 + 72);
  unint64_t v8 = (*(unsigned __int8 *)(*(void *)v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v6 + 80);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_100610750;
  int64_t v10 = (void *)(v9 + v8);
  unint64_t v11 = v9 + v8 + v6[14];
  uint64_t v64 = v9;
  void *v10 = 0xD000000000000031;
  v10[1] = 0x800000010062E870;
  uint64_t v12 = enum case for IQACode.blurrinessHigh(_:);
  uint64_t v13 = type metadata accessor for IQACode();
  uint64_t v14 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104);
  v14(v11, v12, v13);
  uint64_t v15 = (void *)((char *)v10 + v7);
  uint64_t v16 = (char *)v10 + v7 + v6[14];
  void *v15 = 0xD00000000000002ELL;
  v15[1] = 0x800000010062E8B0;
  v14((unint64_t)v16, enum case for IQACode.exposureLow(_:), v13);
  BOOL v17 = (void *)((char *)v10 + 2 * v7);
  uint64_t v18 = (char *)v17 + v6[14];
  void *v17 = 0xD00000000000002FLL;
  v17[1] = 0x800000010062E8E0;
  v14((unint64_t)v18, enum case for IQACode.exposureHigh(_:), v13);
  uint64_t v19 = (void *)((char *)v10 + 3 * v7);
  uint64_t v20 = (char *)v19 + v6[14];
  *uint64_t v19 = 0xD000000000000036;
  v19[1] = 0x800000010062E910;
  v14((unint64_t)v20, enum case for IQACode.faceToImageRatioLow(_:), v13);
  uint64_t v21 = (void *)((char *)v10 + 4 * v7);
  long long v22 = (char *)v21 + v6[14];
  *uint64_t v21 = 0xD000000000000037;
  v21[1] = 0x800000010062E950;
  v14((unint64_t)v22, enum case for IQACode.faceToImageRatioHigh(_:), v13);
  long long v23 = (void *)((char *)v10 + 5 * v7);
  long long v24 = (char *)v23 + v6[14];
  *long long v23 = 0xD00000000000002FLL;
  v23[1] = 0x800000010062E990;
  v14((unint64_t)v24, enum case for IQACode.headPitchLow(_:), v13);
  BOOL v25 = (void *)((char *)v10 + 6 * v7);
  uint64_t v26 = (char *)v25 + v6[14];
  *BOOL v25 = 0xD000000000000030;
  v25[1] = 0x800000010062E9C0;
  v14((unint64_t)v26, enum case for IQACode.headPitchHigh(_:), v13);
  id v27 = (void *)((char *)v10 + 7 * v7);
  Swift::String v28 = (char *)v27 + v6[14];
  *id v27 = 0xD00000000000002ELL;
  v27[1] = 0x800000010062EA00;
  v14((unint64_t)v28, enum case for IQACode.headRollLow(_:), v13);
  Swift::String_optional v29 = &v10[v7];
  id v30 = (char *)v29 + v6[14];
  *Swift::String_optional v29 = 0xD00000000000002FLL;
  v29[1] = 0x800000010062EA30;
  v14((unint64_t)v30, enum case for IQACode.headRollHigh(_:), v13);
  Swift::String_optional v31 = (void *)((char *)v10 + 9 * v7);
  uint64_t v32 = (char *)v31 + v6[14];
  *Swift::String_optional v31 = 0xD00000000000002DLL;
  v31[1] = 0x800000010062EA60;
  v14((unint64_t)v32, enum case for IQACode.headYawLow(_:), v13);
  uint64_t v33 = (void *)((char *)v10 + 10 * v7);
  id v34 = (char *)v33 + v6[14];
  *uint64_t v33 = 0xD00000000000002ELL;
  v33[1] = 0x800000010062EA90;
  v14((unint64_t)v34, enum case for IQACode.headYawHigh(_:), v13);
  id v35 = (void *)((char *)v10 + 11 * v7);
  uint64_t v36 = (char *)v35 + v6[14];
  *id v35 = 0xD000000000000039;
  v35[1] = 0x800000010062EAC0;
  v14((unint64_t)v36, enum case for IQACode.blinkingConfidenceHigh(_:), v13);
  uint64_t v37 = (void *)((char *)v10 + 12 * v7);
  uint64_t v38 = (char *)v37 + v6[14];
  *uint64_t v37 = 0xD00000000000003DLL;
  v37[1] = 0x800000010062EB00;
  v14((unint64_t)v38, enum case for IQACode.prescriptionConfidenceHigh(_:), v13);
  uint64_t v39 = (void *)((char *)v10 + 13 * v7);
  uint64_t v40 = (char *)v39 + v6[14];
  *uint64_t v39 = 0xD00000000000003BLL;
  v39[1] = 0x800000010062EB40;
  v14((unint64_t)v40, enum case for IQACode.sunglassesConfidenceHigh(_:), v13);
  uint64_t v41 = (void *)((char *)v10 + 14 * v7);
  uint64_t v42 = (char *)v41 + v6[14];
  *uint64_t v41 = 0xD000000000000039;
  v41[1] = 0x800000010062EB80;
  v14((unint64_t)v42, enum case for IQACode.facemaskConfidenceHigh(_:), v13);
  id v43 = (void *)((char *)v10 + 15 * v7);
  Swift::String v44 = (char *)v43 + v6[14];
  *id v43 = 0xD000000000000039;
  v43[1] = 0x800000010062EBC0;
  v14((unint64_t)v44, enum case for IQACode.headgearConfidenceHigh(_:), v13);
  Swift::String v45 = &v10[2 * v7];
  uint64_t v46 = (char *)v45 + v6[14];
  *Swift::String v45 = 0xD000000000000038;
  v45[1] = 0x800000010062EC00;
  v14((unint64_t)v46, enum case for IQACode.faceCaptureQualityLow(_:), v13);
  uint64_t v47 = (void *)((char *)v10 + 17 * v7);
  Swift::String v48 = (char *)v47 + v6[14];
  *uint64_t v47 = 0xD000000000000033;
  v47[1] = 0x800000010062EC40;
  v14((unint64_t)v48, enum case for IQACode.targetTooFarLeft(_:), v13);
  uint64_t v49 = (void *)((char *)v10 + 18 * v7);
  Swift::String v50 = (char *)v49 + v6[14];
  *uint64_t v49 = 0xD000000000000034;
  v49[1] = 0x800000010062EC80;
  v14((unint64_t)v50, enum case for IQACode.targetTooFarRight(_:), v13);
  uint64_t v51 = (void *)((char *)v10 + 19 * v7);
  uint64_t v52 = (char *)v51 + v6[14];
  *uint64_t v51 = 0xD000000000000031;
  v51[1] = 0x800000010062ECC0;
  v14((unint64_t)v52, enum case for IQACode.targetTooFarUp(_:), v13);
  id v53 = (void *)((char *)v10 + 20 * v7);
  Swift::String v54 = (char *)v53 + v6[14];
  *id v53 = 0xD000000000000033;
  v53[1] = 0x800000010062ED00;
  v14((unint64_t)v54, enum case for IQACode.targetTooFarDown(_:), v13);
  id v55 = (void *)((char *)v10 + 21 * v7);
  Swift::String v56 = (char *)v55 + v6[14];
  *id v55 = 0xD00000000000002ELL;
  v55[1] = 0x800000010062ED40;
  v14((unint64_t)v56, enum case for IQACode.numFacesLow(_:), v13);
  uint64_t v57 = (void *)((char *)v10 + 22 * v7);
  uint64_t v58 = (char *)v57 + v6[14];
  *uint64_t v57 = 0xD00000000000002FLL;
  v57[1] = 0x800000010062ED70;
  v14((unint64_t)v58, enum case for IQACode.numFacesHigh(_:), v13);
  id v59 = (void *)((char *)v10 + 23 * v7);
  Swift::String v60 = (char *)v59 + v6[14];
  *id v59 = 0xD00000000000002ELL;
  v59[1] = 0x800000010062EDA0;
  v14((unint64_t)v60, enum case for IQACode.luxLevelLow(_:), v13);
  id v61 = &v10[3 * v7];
  Swift::String v62 = (char *)v61 + v6[14];
  *id v61 = 0xD00000000000002FLL;
  v61[1] = 0x800000010062EDD0;
  v14((unint64_t)v62, enum case for IQACode.luxLevelHigh(_:), v13);
  sub_10015C704(v64);
  return v65;
}

uint64_t sub_100018860(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 2;
  }
  if (a1 == 116 && a2 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    return 1;
  }
  if (a1 == 102 && a2 == 0xE100000000000000) {
    return 0;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = 0;
  if ((v5 & 1) == 0) {
    return 2;
  }
  return result;
}

uint64_t sub_100018904(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v59 = *(void *)(v2 - 8);
  uint64_t v60 = v2;
  __chkstk_darwin(v2);
  uint64_t v58 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DIPError.Code();
  uint64_t v55 = *(void *)(v4 - 8);
  uint64_t v56 = v4;
  __chkstk_darwin(v4);
  uint64_t v57 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for IQACode();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  Swift::String v54 = (Swift::String_optional *)((char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = __chkstk_darwin(v8);
  Swift::String v66 = (char *)&v52 - v11;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v52 - v12;
  uint64_t v14 = sub_100007764(&qword_10071FC80);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  BOOL v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  p_countAndFlagsBits = (uint64_t *)((char *)&v52 - v18);
  uint64_t v20 = *(void *)(a1 + 64);
  uint64_t v61 = a1 + 64;
  uint64_t v21 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  unint64_t v23 = v22 & v20;
  Swift::String v68 = (void (**)(char *, char *, uint64_t))(v7 + 16);
  uint64_t v69 = v7;
  uint64_t v70 = (void (**)(char *, char *, uint64_t))(v7 + 32);
  uint64_t v64 = a1;
  uint64_t v65 = (uint64_t (**)(char *, uint64_t))(v7 + 8);
  int64_t v62 = (unint64_t)(v21 + 63) >> 6;
  int64_t v53 = v62 - 1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v67 = 0;
  BOOL v25 = _swiftEmptyArrayStorage;
  uint64_t v63 = v13;
  while (1)
  {
    if (v23)
    {
      unint64_t v26 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      unint64_t v27 = v26 | (v67 << 6);
LABEL_8:
      uint64_t v28 = *(void *)(v64 + 56);
      Swift::String_optional v29 = (void *)(*(void *)(v64 + 48) + 16 * v27);
      uint64_t v30 = v29[1];
      *(void *)BOOL v17 = *v29;
      *((void *)v17 + 1) = v30;
      uint64_t v31 = v69;
      uint64_t v32 = v28 + *(void *)(v69 + 72) * v27;
      uint64_t v33 = sub_100007764(&qword_10071FC88);
      (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(&v17[*(int *)(v33 + 48)], v32, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v17, 0, 1, v33);
      swift_bridgeObjectRetain();
      uint64_t v13 = v63;
      goto LABEL_27;
    }
    int64_t v34 = v67 + 1;
    if (__OFADD__(v67, 1))
    {
      __break(1u);
LABEL_40:
      BOOL v25 = (void *)sub_10010F264(0, v25[2] + 1, 1, (unint64_t)v25);
LABEL_35:
      unint64_t v50 = v25[2];
      unint64_t v49 = v25[3];
      if (v50 >= v49 >> 1) {
        BOOL v25 = (void *)sub_10010F264(v49 > 1, v50 + 1, 1, (unint64_t)v25);
      }
      v25[2] = v50 + 1;
      (*(void (**)(unint64_t, uint64_t *, uint64_t))(v69 + 32))((unint64_t)v25+ ((*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80))+ *(void *)(v69 + 72) * v50, p_countAndFlagsBits, v6);
LABEL_38:
      type metadata accessor for JSONEncoder();
      swift_allocObject();
      JSONEncoder.init()();
      id v71 = v25;
      sub_100007764(&qword_10071FC90);
      sub_1000192C0();
      uint64_t v51 = dispatch thunk of JSONEncoder.encode<A>(_:)();
      swift_release();
      swift_bridgeObjectRelease();
      return v51;
    }
    if (v34 < v62)
    {
      unint64_t v35 = *(void *)(v61 + 8 * v34);
      if (v35) {
        goto LABEL_12;
      }
      int64_t v36 = v67 + 2;
      ++v67;
      if (v34 + 1 < v62)
      {
        unint64_t v35 = *(void *)(v61 + 8 * v36);
        if (v35) {
          goto LABEL_15;
        }
        int64_t v67 = v34 + 1;
        if (v34 + 2 < v62)
        {
          unint64_t v35 = *(void *)(v61 + 8 * (v34 + 2));
          if (v35)
          {
            v34 += 2;
            goto LABEL_12;
          }
          int64_t v36 = v34 + 3;
          int64_t v67 = v34 + 2;
          if (v34 + 3 < v62) {
            break;
          }
        }
      }
    }
LABEL_26:
    uint64_t v37 = sub_100007764(&qword_10071FC88);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v17, 1, 1, v37);
    unint64_t v23 = 0;
LABEL_27:
    sub_100019258((uint64_t)v17, (uint64_t)p_countAndFlagsBits);
    uint64_t v38 = sub_100007764(&qword_10071FC88);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v38 - 8) + 48))(p_countAndFlagsBits, 1, v38) == 1)
    {
      swift_release();
      id v46 = [self standardUserDefaults];
      v47._countAndFlagsBits = 0xD000000000000035;
      v47._object = (void *)0x800000010062AF30;
      Swift::String_optional v48 = NSUserDefaults.internalString(forKey:)(v47);

      if (v48.value._object)
      {
        p_countAndFlagsBits = &v54->value._countAndFlagsBits;
        *Swift::String v54 = v48;
        (*(void (**)(uint64_t *, void, uint64_t))(v69 + 104))(p_countAndFlagsBits, enum case for IQACode.complex(_:), v6);
        if (swift_isUniquelyReferenced_nonNull_native()) {
          goto LABEL_35;
        }
        goto LABEL_40;
      }
      goto LABEL_38;
    }
    uint64_t v39 = *p_countAndFlagsBits;
    uint64_t v40 = (void *)p_countAndFlagsBits[1];
    uint64_t v41 = *v70;
    (*v70)(v13, (char *)p_countAndFlagsBits + *(int *)(v38 + 48), v6);
    id v42 = [self standardUserDefaults];
    v43._countAndFlagsBits = v39;
    v43._object = v40;
    LOBYTE(v39) = NSUserDefaults.internalBool(forKey:)(v43);

    swift_bridgeObjectRelease();
    if (v39)
    {
      (*v68)(v66, v13, v6);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        BOOL v25 = (void *)sub_10010F264(0, v25[2] + 1, 1, (unint64_t)v25);
      }
      unint64_t v45 = v25[2];
      unint64_t v44 = v25[3];
      if (v45 >= v44 >> 1) {
        BOOL v25 = (void *)sub_10010F264(v44 > 1, v45 + 1, 1, (unint64_t)v25);
      }
      v25[2] = v45 + 1;
      v41((char *)v25+ ((*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80))+ *(void *)(v69 + 72) * v45, v66, v6);
    }
    uint64_t result = (*v65)(v13, v6);
  }
  unint64_t v35 = *(void *)(v61 + 8 * v36);
  if (v35)
  {
LABEL_15:
    int64_t v34 = v36;
LABEL_12:
    unint64_t v23 = (v35 - 1) & v35;
    unint64_t v27 = __clz(__rbit64(v35)) + (v34 << 6);
    int64_t v67 = v34;
    goto LABEL_8;
  }
  while (1)
  {
    int64_t v34 = v36 + 1;
    if (__OFADD__(v36, 1)) {
      break;
    }
    if (v34 >= v62)
    {
      int64_t v67 = v53;
      goto LABEL_26;
    }
    unint64_t v35 = *(void *)(v61 + 8 * v34);
    ++v36;
    if (v35) {
      goto LABEL_12;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100019258(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_10071FC80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000192C0()
{
  unint64_t result = qword_10071FC98;
  if (!qword_10071FC98)
  {
    sub_100019364(&qword_10071FC90);
    sub_1000193AC(&qword_10071FCA0, (void (*)(uint64_t))&type metadata accessor for IQACode);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10071FC98);
  }
  return result;
}

uint64_t sub_100019364(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_1000193AC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

double sub_1000193F4()
{
  id v0 = [self standardUserDefaults];
  v1._object = (void *)0x800000010062E840;
  v1._countAndFlagsBits = 0xD000000000000027;
  Swift::String_optional v2 = NSUserDefaults.internalString(forKey:)(v1);

  if (v2.value._object)
  {
    uint64_t v4 = __chkstk_darwin(v3);
    if (((uint64_t)v2.value._object & 0x1000000000000000) != 0
      || !((uint64_t)v2.value._object & 0x2000000000000000 | v2.value._countAndFlagsBits & 0x1000000000000000))
    {
      _StringGuts._slowWithCString<A>(_:)();
      swift_bridgeObjectRelease();
      if (v12) {
        goto LABEL_8;
      }
    }
    else
    {
      __chkstk_darwin(v4);
      if (((uint64_t)v2.value._object & 0x2000000000000000) != 0)
      {
        BOOL v9 = LOBYTE(v2.value._countAndFlagsBits) > 0x20u
          || ((1 << SLOBYTE(v2.value._countAndFlagsBits)) & 0x100003E01) == 0;
        if (v9 && (uint64_t v10 = (unsigned __int8 *)_swift_stdlib_strtof_clocale()) != 0)
        {
          int v11 = *v10;
          swift_bridgeObjectRelease();
          if (!v11) {
            goto LABEL_8;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        if ((v2.value._countAndFlagsBits & 0x1000000000000000) != 0)
        {
          uint64_t v5 = ((uint64_t)v2.value._object & 0xFFFFFFFFFFFFFFFLL) + 32;
          uint64_t v6 = v2.value._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v5 = _StringObject.sharedUTF8.getter();
        }
        char v7 = sub_100017C00(v5, v6, (void (*)(uint64_t *__return_ptr))sub_10001969C);
        swift_bridgeObjectRelease();
        if (v7)
        {
LABEL_8:
          LODWORD(result) = 0;
          if (0.0 <= 1.0) {
            return result;
          }
        }
      }
    }
  }
  return 0.0;
}

unsigned char *sub_10001962C@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1 << v3) & 0x100003E01;
  BOOL v6 = v4 || v5 == 0;
  BOOL v7 = v6 && (result = (unsigned char *)_swift_stdlib_strtof_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

void *sub_10001969C@<X0>(unsigned char *a1@<X8>)
{
  double result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

Swift::Int sub_1000196E0(void **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = (void *)sub_1004ED510(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  Swift::Int result = sub_10001974C(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_10001974C(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_136;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v85 = 0;
      uint64_t v86 = *a1;
      for (uint64_t i = 1; i != v3; ++i)
      {
        uint64_t v88 = *(void *)(v86 + 16 * i + 8);
        uint64_t v89 = v85;
        do
        {
          uint64_t v90 = v86 + v89;
          if (v88 >= *(void *)(v86 + v89 + 8)) {
            break;
          }
          if (!v86) {
            goto LABEL_140;
          }
          uint64_t v91 = *(void *)(v90 + 16);
          *(_OWORD *)(v90 + 16) = *(_OWORD *)v90;
          *(void *)uint64_t v90 = v91;
          *(void *)(v90 + 8) = v88;
          v89 -= 16;
        }
        while (v89 != -16);
        v85 += 16;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_145;
  }
  Swift::Int v6 = result;
  uint64_t v100 = a1;
  if (v3 < 2)
  {
    BOOL v9 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v13 = _swiftEmptyArrayStorage[2];
      char v12 = (char *)_swiftEmptyArrayStorage;
LABEL_102:
      id v92 = v12;
      Swift::Int_optional v102 = v9;
      if (v13 >= 2)
      {
        uint64_t v93 = *v100;
        do
        {
          unint64_t v94 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_131;
          }
          if (!v93) {
            goto LABEL_144;
          }
          id v95 = v92;
          uint64_t v96 = *(void *)&v92[16 * v94 + 32];
          uint64_t v97 = *(void *)&v92[16 * v13 + 24];
          sub_100019E18((char *)(v93 + 16 * v96), (char *)(v93 + 16 * *(void *)&v92[16 * v13 + 16]), v93 + 16 * v97, __dst);
          if (v1) {
            break;
          }
          if (v97 < v96) {
            goto LABEL_132;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            id v95 = sub_1004EC924((uint64_t)v95);
          }
          if (v94 >= *((void *)v95 + 2)) {
            goto LABEL_133;
          }
          uint64_t v98 = &v95[16 * v94 + 32];
          *(void *)uint64_t v98 = v96;
          *((void *)v98 + 1) = v97;
          unint64_t v99 = *((void *)v95 + 2);
          if (v13 > v99) {
            goto LABEL_134;
          }
          memmove(&v95[16 * v13 + 16], &v95[16 * v13 + 32], 16 * (v99 - v13));
          id v92 = v95;
          *((void *)v95 + 2) = v99 - 1;
          unint64_t v13 = v99 - 1;
        }
        while (v99 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      v102[2] = 0;
      return swift_bridgeObjectRelease();
    }
    Swift::Int_optional v102 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    sub_100007764(&qword_10071FCF8);
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    Swift::Int_optional v102 = (void *)v8;
    __dst = (char *)(v8 + 32);
  }
  Swift::Int v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v101 = *a1 + 40;
  char v12 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v103 = v6;
  Swift::Int v104 = v3;
  uint64_t v105 = v11;
  while (1)
  {
    Swift::Int v14 = v10++;
    if (v10 < v3)
    {
      uint64_t v15 = *(void *)(v11 + 16 * v10 + 8);
      uint64_t v16 = *(void *)(v11 + 16 * v14 + 8);
      Swift::Int v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        BOOL v17 = (uint64_t *)(v101 + 16 * v14);
        uint64_t v18 = v15;
        while (1)
        {
          uint64_t v20 = *v17;
          v17 += 2;
          uint64_t v19 = v20;
          if (v15 < v16 == v20 >= v18) {
            break;
          }
          ++v10;
          uint64_t v18 = v19;
          if (v3 == v10)
          {
            Swift::Int v10 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v10 < v14) {
          goto LABEL_137;
        }
        if (v14 < v10)
        {
          uint64_t v21 = 16 * v10;
          uint64_t v22 = 16 * v14;
          Swift::Int v23 = v10;
          Swift::Int v24 = v14;
          do
          {
            if (v24 != --v23)
            {
              if (!v11) {
                goto LABEL_143;
              }
              uint64_t v25 = v11 + v21;
              uint64_t v26 = *(void *)(v11 + v22);
              uint64_t v27 = *(void *)(v11 + v22 + 8);
              *(_OWORD *)(v11 + v22) = *(_OWORD *)(v11 + v21 - 16);
              *(void *)(v25 - 16) = v26;
              *(void *)(v25 - 8) = v27;
            }
            ++v24;
            v21 -= 16;
            v22 += 16;
          }
          while (v24 < v23);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_135;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_46;
    }
    Swift::Int v28 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_138;
    }
    if (v28 >= v3) {
      Swift::Int v28 = v3;
    }
    if (v28 < v14) {
      break;
    }
    if (v10 != v28)
    {
      Swift::String_optional v29 = (void *)(v11 + 16 * v10);
      do
      {
        uint64_t v30 = *(void *)(v11 + 16 * v10 + 8);
        Swift::Int v31 = v14;
        uint64_t v32 = v29;
        do
        {
          if (v30 >= *(v32 - 1)) {
            break;
          }
          if (!v11) {
            goto LABEL_141;
          }
          uint64_t v33 = *v32;
          *(_OWORD *)uint64_t v32 = *((_OWORD *)v32 - 1);
          *(v32 - 1) = v30;
          *(v32 - 2) = v33;
          v32 -= 2;
          ++v31;
        }
        while (v10 != v31);
        ++v10;
        v29 += 2;
      }
      while (v10 != v28);
      Swift::Int v10 = v28;
    }
LABEL_46:
    if (v10 < v14) {
      goto LABEL_130;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      char v12 = sub_1004EC56C(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v35 = *((void *)v12 + 2);
    unint64_t v34 = *((void *)v12 + 3);
    unint64_t v13 = v35 + 1;
    uint64_t v11 = v105;
    if (v35 >= v34 >> 1)
    {
      Swift::String v84 = sub_1004EC56C((char *)(v34 > 1), v35 + 1, 1, v12);
      uint64_t v11 = v105;
      char v12 = v84;
    }
    *((void *)v12 + 2) = v13;
    int64_t v36 = v12 + 32;
    uint64_t v37 = &v12[16 * v35 + 32];
    *(void *)uint64_t v37 = v14;
    *((void *)v37 + 1) = v10;
    if (v35)
    {
      while (1)
      {
        unint64_t v38 = v13 - 1;
        if (v13 >= 4)
        {
          Swift::String v43 = &v36[16 * v13];
          uint64_t v44 = *((void *)v43 - 8);
          uint64_t v45 = *((void *)v43 - 7);
          BOOL v49 = __OFSUB__(v45, v44);
          uint64_t v46 = v45 - v44;
          if (v49) {
            goto LABEL_119;
          }
          uint64_t v48 = *((void *)v43 - 6);
          uint64_t v47 = *((void *)v43 - 5);
          BOOL v49 = __OFSUB__(v47, v48);
          uint64_t v41 = v47 - v48;
          char v42 = v49;
          if (v49) {
            goto LABEL_120;
          }
          unint64_t v50 = v13 - 2;
          uint64_t v51 = &v36[16 * v13 - 32];
          uint64_t v53 = *(void *)v51;
          uint64_t v52 = *((void *)v51 + 1);
          BOOL v49 = __OFSUB__(v52, v53);
          uint64_t v54 = v52 - v53;
          if (v49) {
            goto LABEL_122;
          }
          BOOL v49 = __OFADD__(v41, v54);
          uint64_t v55 = v41 + v54;
          if (v49) {
            goto LABEL_125;
          }
          if (v55 >= v46)
          {
            id v73 = &v36[16 * v38];
            uint64_t v75 = *(void *)v73;
            uint64_t v74 = *((void *)v73 + 1);
            BOOL v49 = __OFSUB__(v74, v75);
            uint64_t v76 = v74 - v75;
            if (v49) {
              goto LABEL_129;
            }
            BOOL v66 = v41 < v76;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v67 = *((void *)v12 + 4);
            uint64_t v68 = *((void *)v12 + 5);
            BOOL v49 = __OFSUB__(v68, v67);
            uint64_t v60 = v68 - v67;
            char v61 = v49;
            goto LABEL_77;
          }
          uint64_t v40 = *((void *)v12 + 4);
          uint64_t v39 = *((void *)v12 + 5);
          BOOL v49 = __OFSUB__(v39, v40);
          uint64_t v41 = v39 - v40;
          char v42 = v49;
        }
        if (v42) {
          goto LABEL_121;
        }
        unint64_t v50 = v13 - 2;
        uint64_t v56 = &v36[16 * v13 - 32];
        uint64_t v58 = *(void *)v56;
        uint64_t v57 = *((void *)v56 + 1);
        BOOL v59 = __OFSUB__(v57, v58);
        uint64_t v60 = v57 - v58;
        char v61 = v59;
        if (v59) {
          goto LABEL_124;
        }
        int64_t v62 = &v36[16 * v38];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v49 = __OFSUB__(v63, v64);
        uint64_t v65 = v63 - v64;
        if (v49) {
          goto LABEL_127;
        }
        if (__OFADD__(v60, v65)) {
          goto LABEL_128;
        }
        if (v60 + v65 >= v41)
        {
          BOOL v66 = v41 < v65;
LABEL_83:
          if (v66) {
            unint64_t v38 = v50;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v61) {
          goto LABEL_123;
        }
        uint64_t v69 = &v36[16 * v38];
        uint64_t v71 = *(void *)v69;
        uint64_t v70 = *((void *)v69 + 1);
        BOOL v49 = __OFSUB__(v70, v71);
        uint64_t v72 = v70 - v71;
        if (v49) {
          goto LABEL_126;
        }
        if (v72 < v60) {
          goto LABEL_15;
        }
LABEL_85:
        unint64_t v77 = v38 - 1;
        if (v38 - 1 >= v13)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v11) {
          goto LABEL_142;
        }
        Swift::String v78 = v12;
        id v79 = &v36[16 * v77];
        uint64_t v80 = *(void *)v79;
        id v81 = &v36[16 * v38];
        uint64_t v82 = *((void *)v81 + 1);
        sub_100019E18((char *)(v11 + 16 * *(void *)v79), (char *)(v11 + 16 * *(void *)v81), v11 + 16 * v82, __dst);
        if (v1) {
          goto LABEL_93;
        }
        if (v82 < v80) {
          goto LABEL_116;
        }
        if (v38 > *((void *)v78 + 2)) {
          goto LABEL_117;
        }
        *(void *)id v79 = v80;
        *(void *)&v36[16 * v77 + 8] = v82;
        unint64_t v83 = *((void *)v78 + 2);
        if (v38 >= v83) {
          goto LABEL_118;
        }
        char v12 = v78;
        unint64_t v13 = v83 - 1;
        memmove(&v36[16 * v38], v81 + 16, 16 * (v83 - 1 - v38));
        *((void *)v78 + 2) = v83 - 1;
        uint64_t v11 = v105;
        if (v83 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    Swift::Int v6 = v103;
    Swift::Int v3 = v104;
    if (v10 >= v104)
    {
      BOOL v9 = v102;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100019E18(char *__src, char *a2, unint64_t a3, char *__dst)
{
  BOOL v4 = __dst;
  Swift::Int v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 4;
  uint64_t v25 = __src;
  Swift::Int v24 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      uint64_t v18 = &v4[16 * v13];
      Swift::Int v23 = v18;
      uint64_t v25 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        uint64_t v19 = (char *)(a3 - 16);
        do
        {
          uint64_t v20 = v19 + 16;
          if (*((void *)v18 - 1) >= *((void *)v6 - 1))
          {
            Swift::Int v23 = v18 - 16;
            if (v20 < v18 || v19 >= v18 || v20 != v18) {
              *(_OWORD *)uint64_t v19 = *((_OWORD *)v18 - 1);
            }
            uint64_t v21 = v6;
            v18 -= 16;
            if (v6 <= v7) {
              break;
            }
          }
          else
          {
            uint64_t v21 = v6 - 16;
            if (v20 != v6 || v19 >= v6) {
              *(_OWORD *)uint64_t v19 = *(_OWORD *)v21;
            }
            uint64_t v25 = v6 - 16;
            if (v21 <= v7) {
              break;
            }
          }
          v19 -= 16;
          Swift::Int v6 = v21;
        }
        while (v18 > v4);
      }
LABEL_44:
      sub_1004EC668((void **)&v25, &v24, &v23);
      return 1;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    Swift::Int v14 = &v4[16 * v10];
    Swift::Int v23 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      uint64_t v15 = v4;
      while (1)
      {
        if (*((void *)v6 + 1) >= *((void *)v15 + 1))
        {
          BOOL v4 = v15 + 16;
          BOOL v17 = v15;
          uint64_t v16 = v6;
          if (v7 == v15)
          {
            v15 += 16;
            if (v7 < v4) {
              goto LABEL_22;
            }
          }
          else
          {
            v15 += 16;
          }
        }
        else
        {
          uint64_t v16 = v6 + 16;
          BOOL v17 = v6;
          if (v7 == v6 && v7 < v16) {
            goto LABEL_22;
          }
        }
        *(_OWORD *)uint64_t v7 = *(_OWORD *)v17;
LABEL_22:
        v7 += 16;
        if (v15 < v14)
        {
          Swift::Int v6 = v16;
          if ((unint64_t)v16 < a3) {
            continue;
          }
        }
        Swift::Int v24 = v4;
        uint64_t v25 = v7;
        goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_10001A0A4()
{
  id v0 = (void *)sub_10015C92C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v1 = self;
  id v2 = [v1 standardUserDefaults];
  v3._countAndFlagsBits = 0xD00000000000001FLL;
  v3._object = (void *)0x800000010062F340;
  Swift::Int_optional v67 = NSUserDefaults.internalInt(forKey:)(v3);
  Swift::Int value = v67.value;
  Swift::Bool is_nil = v67.is_nil;

  if (!is_nil)
  {
    id v6 = objc_allocWithZone((Class)type metadata accessor for IdentityGesture());
    id v7 = (id)IdentityGesture.init(gesture:type:)();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    BOOL v66 = v0;
    sub_100561DF0(value, v7, isUniquelyReferenced_nonNull_native);

    swift_bridgeObjectRelease();
  }
  id v9 = [v1 standardUserDefaults];
  v10._countAndFlagsBits = 0xD00000000000001ELL;
  v10._object = (void *)0x800000010062F360;
  Swift::Int_optional v68 = NSUserDefaults.internalInt(forKey:)(v10);
  Swift::Int v11 = v68.value;
  Swift::Bool v12 = v68.is_nil;

  if (!v12)
  {
    id v13 = objc_allocWithZone((Class)type metadata accessor for IdentityGesture());
    id v14 = (id)IdentityGesture.init(gesture:type:)();
    char v15 = swift_isUniquelyReferenced_nonNull_native();
    BOOL v66 = v0;
    sub_100561DF0(v11, v14, v15);

    swift_bridgeObjectRelease();
  }
  id v16 = [v1 standardUserDefaults];
  v17._countAndFlagsBits = 0xD00000000000001CLL;
  v17._object = (void *)0x800000010062F380;
  Swift::Int_optional v69 = NSUserDefaults.internalInt(forKey:)(v17);
  Swift::Int v18 = v69.value;
  Swift::Bool v19 = v69.is_nil;

  if (!v19)
  {
    id v20 = objc_allocWithZone((Class)type metadata accessor for IdentityGesture());
    id v21 = (id)IdentityGesture.init(gesture:type:)();
    char v22 = swift_isUniquelyReferenced_nonNull_native();
    BOOL v66 = v0;
    sub_100561DF0(v18, v21, v22);

    swift_bridgeObjectRelease();
  }
  id v23 = [v1 standardUserDefaults];
  v24._countAndFlagsBits = 0xD00000000000001ELL;
  v24._object = (void *)0x800000010062F3A0;
  Swift::Int_optional v70 = NSUserDefaults.internalInt(forKey:)(v24);
  Swift::Int v25 = v70.value;
  Swift::Bool v26 = v70.is_nil;

  if (!v26)
  {
    id v27 = objc_allocWithZone((Class)type metadata accessor for IdentityGesture());
    id v28 = (id)IdentityGesture.init(gesture:type:)();
    char v29 = swift_isUniquelyReferenced_nonNull_native();
    BOOL v66 = v0;
    sub_100561DF0(v25, v28, v29);

    swift_bridgeObjectRelease();
  }
  id v30 = [v1 standardUserDefaults];
  v31._object = (void *)0x800000010062F3C0;
  v31._countAndFlagsBits = 0xD00000000000001ALL;
  Swift::Int_optional v71 = NSUserDefaults.internalInt(forKey:)(v31);
  Swift::Int v32 = v71.value;
  Swift::Bool v33 = v71.is_nil;

  if (!v33)
  {
    id v34 = objc_allocWithZone((Class)type metadata accessor for IdentityGesture());
    id v35 = (id)IdentityGesture.init(gesture:type:)();
    char v36 = swift_isUniquelyReferenced_nonNull_native();
    BOOL v66 = v0;
    sub_100561DF0(v32, v35, v36);

    swift_bridgeObjectRelease();
  }
  id v37 = [v1 standardUserDefaults];
  v38._object = (void *)0x800000010062F3E0;
  v38._countAndFlagsBits = 0xD00000000000001ALL;
  Swift::Int_optional v72 = NSUserDefaults.internalInt(forKey:)(v38);
  Swift::Int v39 = v72.value;
  Swift::Bool v40 = v72.is_nil;

  if (!v40)
  {
    id v41 = objc_allocWithZone((Class)type metadata accessor for IdentityGesture());
    id v42 = (id)IdentityGesture.init(gesture:type:)();
    char v43 = swift_isUniquelyReferenced_nonNull_native();
    BOOL v66 = v0;
    sub_100561DF0(v39, v42, v43);

    swift_bridgeObjectRelease();
  }
  id v44 = [v1 standardUserDefaults];
  v45._countAndFlagsBits = 0xD00000000000001FLL;
  v45._object = (void *)0x800000010062F400;
  Swift::Int_optional v73 = NSUserDefaults.internalInt(forKey:)(v45);
  Swift::Int v46 = v73.value;
  Swift::Bool v47 = v73.is_nil;

  if (!v47)
  {
    id v48 = objc_allocWithZone((Class)type metadata accessor for IdentityGesture());
    id v49 = (id)IdentityGesture.init(gesture:type:)();
    char v50 = swift_isUniquelyReferenced_nonNull_native();
    BOOL v66 = v0;
    sub_100561DF0(v46, v49, v50);

    swift_bridgeObjectRelease();
  }
  id v51 = [v1 standardUserDefaults];
  v52._countAndFlagsBits = 0xD000000000000023;
  v52._object = (void *)0x800000010062F420;
  Swift::Int_optional v74 = NSUserDefaults.internalInt(forKey:)(v52);
  Swift::Int v53 = v74.value;
  Swift::Bool v54 = v74.is_nil;

  if (!v54)
  {
    id v55 = objc_allocWithZone((Class)type metadata accessor for IdentityGesture());
    id v56 = (id)IdentityGesture.init(gesture:type:)();
    char v57 = swift_isUniquelyReferenced_nonNull_native();
    BOOL v66 = v0;
    sub_100561DF0(v53, v56, v57);

    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain_n();
  uint64_t v58 = sub_1004EB354((uint64_t)v0);
  swift_bridgeObjectRelease();
  BOOL v66 = v58;
  sub_1000196E0(&v66);
  swift_bridgeObjectRelease();
  BOOL v59 = v66;
  uint64_t v60 = v66[2];
  char v61 = _swiftEmptyArrayStorage;
  if (v60)
  {
    BOOL v66 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    int64_t v62 = (void **)(v59 + 4);
    do
    {
      uint64_t v63 = *v62;
      v62 += 2;
      id v64 = v63;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v60;
    }
    while (v60);
    char v61 = v66;
  }
  swift_release();
  swift_bridgeObjectRelease();
  return v61;
}

uint64_t sub_10001A6A4()
{
  id v0 = self;
  id v1 = [v0 standardUserDefaults];
  v2._object = (void *)0x800000010062EE00;
  v2._countAndFlagsBits = 0xD000000000000025;
  Swift::Bool v3 = NSUserDefaults.internalBool(forKey:)(v2);

  if (v3)
  {
    sub_10001A0A4();
    id v4 = [v0 standardUserDefaults];
    v5._countAndFlagsBits = 0xD00000000000001ELL;
    v5._object = (void *)0x800000010062EFF0;
    NSUserDefaults.internalInt(forKey:)(v5);

    id v6 = [v0 standardUserDefaults];
    v7._object = (void *)0x800000010062F010;
    v7._countAndFlagsBits = 0xD000000000000022;
    NSUserDefaults.internalInt(forKey:)(v7);

    id v8 = [v0 standardUserDefaults];
    v9._countAndFlagsBits = 0xD000000000000029;
    v9._object = (void *)0x800000010062F040;
    NSUserDefaults.internalInt(forKey:)(v9);

    id v10 = [v0 standardUserDefaults];
    v11._countAndFlagsBits = 0xD00000000000001CLL;
    v11._object = (void *)0x800000010062F070;
    NSUserDefaults.internalInt(forKey:)(v11);

    id v12 = [v0 standardUserDefaults];
    v13._countAndFlagsBits = 0xD00000000000002ALL;
    v13._object = (void *)0x800000010062F090;
    NSUserDefaults.internalInt(forKey:)(v13);

    id v14 = [v0 standardUserDefaults];
    v15._object = (void *)0x800000010062F0C0;
    v15._countAndFlagsBits = 0xD000000000000022;
    NSUserDefaults.internalInt(forKey:)(v15);

    id v16 = [v0 standardUserDefaults];
    v17._object = (void *)0x800000010062F0F0;
    v17._countAndFlagsBits = 0xD000000000000025;
    NSUserDefaults.internalInt(forKey:)(v17);

    id v18 = [v0 standardUserDefaults];
    v19._countAndFlagsBits = 0xD000000000000028;
    v19._object = (void *)0x800000010062F120;
    Swift::Int_optional v106 = NSUserDefaults.internalInt(forKey:)(v19);
    Swift::Int value = v106.value;
    Swift::Bool is_nil = v106.is_nil;

    uint64_t v22 = 30;
    if (!is_nil) {
      uint64_t v22 = value;
    }
    uint64_t v105 = v22;
    id v23 = [v0 standardUserDefaults];
    v24._object = (void *)0x800000010062F150;
    v24._countAndFlagsBits = 0xD000000000000025;
    Swift::Int_optional v107 = NSUserDefaults.internalInt(forKey:)(v24);
    Swift::Int v25 = v107.value;
    Swift::Bool v26 = v107.is_nil;

    if (v26) {
      uint64_t v27 = 300;
    }
    else {
      uint64_t v27 = v25;
    }
    uint64_t v104 = v27;
    id v28 = [v0 standardUserDefaults];
    v29._countAndFlagsBits = 0xD000000000000023;
    v29._object = (void *)0x800000010062F180;
    Swift::Int_optional v108 = NSUserDefaults.internalInt(forKey:)(v29);
    Swift::Int v30 = v108.value;
    Swift::Bool v31 = v108.is_nil;

    if (v31) {
      uint64_t v32 = 2000;
    }
    else {
      uint64_t v32 = v30;
    }
    uint64_t v103 = v32;
    id v33 = [v0 standardUserDefaults];
    v34._object = (void *)0x800000010062F1B0;
    v34._countAndFlagsBits = 0xD000000000000026;
    Swift::Int_optional v109 = NSUserDefaults.internalInt(forKey:)(v34);
    Swift::Int v35 = v109.value;
    Swift::Bool v36 = v109.is_nil;

    if (v36) {
      uint64_t v37 = 2000;
    }
    else {
      uint64_t v37 = v35;
    }
    uint64_t v102 = v37;
    id v38 = [v0 standardUserDefaults];
    v39._countAndFlagsBits = 0xD000000000000024;
    v39._object = (void *)0x800000010062F1E0;
    Swift::Int_optional v110 = NSUserDefaults.internalInt(forKey:)(v39);
    Swift::Int v40 = v110.value;
    Swift::Bool v41 = v110.is_nil;

    uint64_t v42 = 1000;
    if (v41) {
      uint64_t v43 = 1000;
    }
    else {
      uint64_t v43 = v40;
    }
    uint64_t v101 = v43;
    id v44 = [v0 standardUserDefaults];
    v45._object = (void *)0x800000010062F210;
    v45._countAndFlagsBits = 0xD000000000000030;
    Swift::Int_optional v111 = NSUserDefaults.internalInt(forKey:)(v45);
    Swift::Int v46 = v111.value;
    Swift::Bool v47 = v111.is_nil;

    if (v47) {
      uint64_t v48 = 3000;
    }
    else {
      uint64_t v48 = v46;
    }
    id v49 = [v0 standardUserDefaults];
    v50._object = (void *)0x800000010062F250;
    v50._countAndFlagsBits = 0xD000000000000030;
    Swift::Int_optional v112 = NSUserDefaults.internalInt(forKey:)(v50);
    Swift::Int v51 = v112.value;
    Swift::Bool v52 = v112.is_nil;

    if (!v52) {
      uint64_t v42 = v51;
    }
    id v53 = [v0 standardUserDefaults];
    v54._object = (void *)0x800000010062F290;
    v54._countAndFlagsBits = 0xD00000000000001ELL;
    Swift::Bool v55 = NSUserDefaults.internalBool(forKey:)(v54);

    id v56 = [v0 standardUserDefaults];
    v57._countAndFlagsBits = 0xD000000000000020;
    v57._object = (void *)0x800000010062F2B0;
    Swift::Bool v58 = NSUserDefaults.internalBool(forKey:)(v57);

    id v59 = [v0 standardUserDefaults];
    v60._object = (void *)0x800000010062F2E0;
    v60._countAndFlagsBits = 0xD000000000000022;
    Swift::Bool v61 = NSUserDefaults.internalBool(forKey:)(v60);

    id v62 = [v0 standardUserDefaults];
    v63._object = (void *)0x800000010062F310;
    v63._countAndFlagsBits = 0xD000000000000026;
    Swift::Bool v64 = NSUserDefaults.internalBool(forKey:)(v63);

    id v65 = [v0 standardUserDefaults];
    v66._countAndFlagsBits = 0xD000000000000021;
    v66._object = (void *)0x800000010062EFC0;
    Swift::Bool v67 = NSUserDefaults.internalBool(forKey:)(v66);

    id v68 = objc_allocWithZone((Class)type metadata accessor for IdentityActiveLivenessConfig());
    BYTE4(v100) = !v67;
    BYTE3(v100) = v64;
    BYTE2(v100) = v61;
    BYTE1(v100) = v58;
    LOBYTE(v100) = v55;
    uint64_t v98 = v48;
    uint64_t v99 = v42;
    uint64_t v96 = v102;
    uint64_t v97 = v101;
    uint64_t v94 = v104;
    uint64_t v95 = v103;
    uint64_t v93 = v105;
    IdentityActiveLivenessConfig.init(gestureSequence:minRequiredGestureCount:timeToSkipOption:timeToSkipAccessible:timeToAlert:timeToAlertAccessible:maxRetakeCount:sessionTimeout:faceOutOfBoundFrames:gestureCompletionDelay:tutorialVideoDelay:tutorialVideoDuration:tutorialResumeDelay:gestureDetectedSuccessDuration:lastGestureExtraFrameDuration:requiresGoodLux:enablePrintReplay:enableIDMatching:requireSelfie:enableAutoFlash:)();
  }
  id v69 = [v0 standardUserDefaults:v93, v94, v95, v96, v97, v98, v99, v100];
  v70._countAndFlagsBits = 0xD000000000000026;
  v70._object = (void *)0x800000010062EE30;
  Swift::Bool v71 = NSUserDefaults.internalBool(forKey:)(v70);

  if (v71)
  {
    id v72 = [v0 standardUserDefaults];
    v73._countAndFlagsBits = 0xD000000000000023;
    v73._object = (void *)0x800000010062EE60;
    NSUserDefaults.internalInt(forKey:)(v73);

    id v74 = [v0 standardUserDefaults];
    v75._countAndFlagsBits = 0xD00000000000001ELL;
    v75._object = (void *)0x800000010062EE90;
    NSUserDefaults.internalInt(forKey:)(v75);

    id v76 = [v0 standardUserDefaults];
    v77._countAndFlagsBits = 0xD000000000000029;
    v77._object = (void *)0x800000010062EEB0;
    NSUserDefaults.internalInt(forKey:)(v77);

    id v78 = [v0 standardUserDefaults];
    v79._countAndFlagsBits = 0xD000000000000028;
    v79._object = (void *)0x800000010062EEE0;
    NSUserDefaults.internalInt(forKey:)(v79);

    id v80 = [v0 standardUserDefaults];
    v81._countAndFlagsBits = 0xD00000000000002CLL;
    v81._object = (void *)0x800000010062EF10;
    NSUserDefaults.internalInt(forKey:)(v81);

    id v82 = [v0 standardUserDefaults];
    v83._countAndFlagsBits = 0xD00000000000001FLL;
    v83._object = (void *)0x800000010062EF40;
    NSUserDefaults.internalBool(forKey:)(v83);

    id v84 = [v0 standardUserDefaults];
    v85._object = (void *)0x800000010062EF60;
    v85._countAndFlagsBits = 0xD000000000000021;
    NSUserDefaults.internalBool(forKey:)(v85);

    id v86 = [v0 standardUserDefaults];
    v87._object = (void *)0x800000010062EF90;
    v87._countAndFlagsBits = 0xD000000000000025;
    NSUserDefaults.internalBool(forKey:)(v87);

    id v88 = [v0 standardUserDefaults];
    v89._object = (void *)0x800000010062EFC0;
    v89._countAndFlagsBits = 0xD000000000000021;
    NSUserDefaults.internalBool(forKey:)(v89);

    id v90 = objc_allocWithZone((Class)type metadata accessor for IdentityPassiveLivenessConfig());
    IdentityPassiveLivenessConfig.init(maxRetakeCount:sessionTimeout:faceOutOfBoundFrames:totalFrameCount:minimumValidFrameCount:requiresGoodLux:enablePrintReplay:disableStitchDetection:enableAutoFlash:)();
  }
  id v91 = objc_allocWithZone((Class)type metadata accessor for IdentityLivenessConfig());
  return IdentityLivenessConfig.init(active:passive:)();
}

id sub_10001B054@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  Swift::String v2 = *a1;
  *a2 = *a1;
  return v2;
}

unsigned char *sub_10001B084@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_10001B090()
{
  id v1 = *(os_unfair_lock_s **)(v0 + 16);
  Swift::String v2 = (void **)&v1[4];
  Swift::Bool v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_10001B054(v2, &v5);
  os_unfair_lock_unlock(v3);
  id v4 = v5;
  [v5 invalidateSession];

  os_unfair_lock_lock(v3);
  sub_100025D4C(v2);
  os_unfair_lock_unlock(v3);
}

uint64_t sub_10001B124(double a1)
{
  *(void *)(v2 + 24) = v1;
  *(double *)(v2 + 16) = a1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  *(void *)(v2 + 32) = v3;
  *(void *)(v2 + 40) = *(void *)(v3 - 8);
  *(void *)(v2 + 48) = swift_task_alloc();
  return _swift_task_switch(sub_10001B1E8, 0, 0);
}

uint64_t sub_10001B1E8()
{
  id v12 = v0;
  uint64_t v1 = *(os_unfair_lock_s **)(v0[3] + 16);
  uint64_t v2 = (void **)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_10001B054(v2, &v11);
  os_unfair_lock_unlock(v3);
  id v4 = v11;
  v0[7] = v11;
  if (v4)
  {
    uint64_t v5 = swift_allocObject();
    v0[8] = v5;
    *(void *)(v5 + 16) = v4;
    id v6 = v4;
    Swift::String v7 = (void *)swift_task_alloc();
    v0[9] = v7;
    *Swift::String v7 = v0;
    v7[1] = sub_10001B478;
    v8.n128_u64[0] = v0[2];
    return withTaskTimeoutHandler<A>(timeout:operation:)(v7, &unk_10071FEC8, v5, (char *)&type metadata for () + 8, v8);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[5] + 104))(v0[6], enum case for DIPError.Code.internalError(_:), v0[4]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100025C64((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_task_dealloc();
    Swift::String v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_10001B478()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10001B600;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_10001B594;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10001B594()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10001B600()
{
  uint64_t v1 = *(void **)(v0 + 56);
  swift_release();

  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10001B670(uint64_t a1, uint64_t a2)
{
  v2[19] = a2;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[20] = v3;
  v2[21] = *(void *)(v3 - 8);
  v2[22] = swift_task_alloc();
  return _swift_task_switch(sub_10001B730, 0, 0);
}

uint64_t sub_10001B730()
{
  uint64_t v1 = (void *)v0[19];
  v0[2] = v0;
  v0[3] = sub_10001B824;
  uint64_t v2 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_100529EC4;
  v0[13] = &unk_1006F47C8;
  v0[14] = v2;
  [v1 deleteGlobalAuthACLWithCompletion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10001B824()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 184) = v1;
  if (v1) {
    uint64_t v2 = sub_10001B998;
  }
  else {
    uint64_t v2 = sub_10001B934;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10001B934()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10001B998()
{
  uint64_t v1 = v0[22];
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[21];
  swift_willThrow();
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease();
  swift_getErrorValue();
  v4._countAndFlagsBits = Error.localizedDescription.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v1, enum case for DIPError.Code.unableToDeleteGlobalAuthACLInWatch(_:), v2);
  sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100025C64((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t type metadata accessor for NPKSession()
{
  return self;
}

uint64_t sub_10001BBB4()
{
  v1[19] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[20] = v2;
  v1[21] = *(void *)(v2 - 8);
  v1[22] = swift_task_alloc();
  v1[23] = swift_task_alloc();
  v1[24] = swift_task_alloc();
  v1[25] = swift_task_alloc();
  return _swift_task_switch(sub_10001BC9C, 0, 0);
}

uint64_t sub_10001BC9C()
{
  uint64_t v41 = v0;
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = OBJC_IVAR____TtC8coreidvd8DIPWatch_currentSession;
  *(void *)(v0 + 208) = OBJC_IVAR____TtC8coreidvd8DIPWatch_currentSession;
  uint64_t v3 = *(void *)(*(void *)(v1 + v2) + 16);
  uint64_t v4 = (void **)(v3 + 16);
  uint64_t v5 = (os_unfair_lock_s *)(v3 + 24);
  swift_retain();
  os_unfair_lock_lock(v5);
  sub_10001B054(v4, v40);
  os_unfair_lock_unlock(v5);
  id v6 = v40[0];
  *(void **)(v0 + 216) = v40[0];
  swift_release();
  if (v6 && [v6 status] != (id)1)
  {
    uint64_t v22 = *(void *)(*(void *)(*(void *)(v0 + 152) + *(void *)(v0 + 208)) + 16);
    id v23 = (void **)(v22 + 16);
    Swift::String v24 = (os_unfair_lock_s *)(v22 + 24);
    swift_retain();
    os_unfair_lock_lock(v24);
    sub_10001B054(v23, v40);
    os_unfair_lock_unlock(v24);
    Swift::Int v25 = *(void **)(v0 + 216);
    Swift::Bool v26 = v40[0];
    swift_release();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v27 = *(uint64_t (**)(void *))(v0 + 8);
    return v27(v26);
  }
  else
  {
    uint64_t v7 = *(os_unfair_lock_s **)(*(void *)(v1 + v2) + 24);
    *(unsigned char *)(swift_task_alloc() + 16) = 0;
    __n128 v8 = v7 + 4;
    v7 += 5;
    swift_retain();
    os_unfair_lock_lock(v7);
    sub_100025D34(v8);
    *(void *)(v0 + 224) = 0;
    os_unfair_lock_unlock(v7);
    swift_release();
    swift_task_dealloc();
    if (v6)
    {
      id v9 = v6;
      if ([v9 status] == (id)1)
      {
        defaultLogger()();
        id v10 = v9;
        Swift::String v11 = Logger.logObject.getter();
        os_log_type_t v12 = static os_log_type_t.debug.getter();
        BOOL v13 = os_log_type_enabled(v11, v12);
        uint64_t v14 = *(void *)(v0 + 200);
        uint64_t v15 = *(void *)(v0 + 160);
        uint64_t v16 = *(void *)(v0 + 168);
        if (v13)
        {
          uint64_t v39 = *(void *)(v0 + 160);
          uint64_t v38 = *(void *)(v0 + 200);
          Swift::String v17 = (uint8_t *)swift_slowAlloc();
          v40[0] = (void *)swift_slowAlloc();
          *(_DWORD *)Swift::String v17 = 136446210;
          id v18 = [v10 deviceID];
          uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v21 = v20;

          *(void *)(v0 + 144) = sub_100110D58(v19, v21, (uint64_t *)v40);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          _os_log_impl((void *)&_mh_execute_header, v11, v12, "Connection with watch invalidated with pairingID: %{public}s", v17, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v38, v39);
        }
        else
        {

          (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
        }
      }
      else
      {
      }
    }
    defaultLogger()();
    Swift::String v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      Swift::Bool v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::Bool v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Trying to establish session with watch", v31, 2u);
      swift_slowDealloc();
    }
    uint64_t v32 = *(void *)(v0 + 192);
    uint64_t v33 = *(void *)(v0 + 160);
    uint64_t v34 = *(void *)(v0 + 168);

    Swift::Int v35 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
    *(void *)(v0 + 232) = v35;
    *(void *)(v0 + 240) = (v34 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v35(v32, v33);
    Swift::Bool v36 = self;
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 56) = v0 + 120;
    *(void *)(v0 + 24) = sub_10001C1E4;
    uint64_t v37 = swift_continuation_init();
    *(void *)(v0 + 80) = _NSConcreteStackBlock;
    *(void *)(v0 + 88) = 0x40000000;
    *(void *)(v0 + 96) = sub_10001C898;
    *(void *)(v0 + 104) = &unk_1006F49B8;
    *(void *)(v0 + 112) = v37;
    [v36 sessionForDeviceID:0 completion:v0 + 80];
    return _swift_continuation_await(v0 + 16);
  }
}

uint64_t sub_10001C1E4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 248) = v1;
  if (v1) {
    uint64_t v2 = sub_10001C610;
  }
  else {
    uint64_t v2 = sub_10001C2F4;
  }
  return _swift_task_switch(v2, 0, 0);
}

void sub_10001C2F4()
{
  uint64_t v27 = v0;
  uint64_t v1 = (void *)v0[15];
  defaultLogger()();
  id v2 = v1;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    Swift::Int v25 = (void (*)(uint64_t, uint64_t))v0[29];
    uint64_t v23 = v0[20];
    uint64_t v24 = v0[23];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    v26[0] = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    id v6 = [v2 deviceID];
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v9 = v8;

    v0[17] = sub_100110D58(v7, v9, (uint64_t *)v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Successfully established session with watch with pairingID: %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v25(v24, v23);
  }
  else
  {
    id v10 = (void (*)(uint64_t, uint64_t))v0[29];
    uint64_t v11 = v0[23];
    uint64_t v12 = v0[20];

    v10(v11, v12);
  }
  uint64_t v13 = v0[28];
  uint64_t v14 = *(os_unfair_lock_s **)(*(void *)(v0[19] + v0[26]) + 16);
  *(void *)(swift_task_alloc() + 16) = v2;
  uint64_t v15 = (id *)&v14[4];
  v14 += 6;
  id v16 = v2;
  swift_retain();
  os_unfair_lock_lock(v14);
  sub_100025BE4(v15);
  os_unfair_lock_unlock(v14);
  if (!v13)
  {

    swift_release();
    swift_task_dealloc();
    uint64_t v17 = *(void *)(*(void *)(v0[19] + v0[26]) + 16);
    id v18 = (void **)(v17 + 16);
    uint64_t v19 = (os_unfair_lock_s *)(v17 + 24);
    swift_retain();
    os_unfair_lock_lock(v19);
    sub_10001B054(v18, v26);
    os_unfair_lock_unlock(v19);
    unint64_t v20 = (void *)v0[27];
    unint64_t v21 = v26[0];
    swift_release();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = (void (*)(void *))v0[1];
    v22(v21);
  }
}

uint64_t sub_10001C610()
{
  uint64_t v14 = v0;
  swift_willThrow();
  defaultLogger()();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 128) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to establish session with watch: %@", v3, 0xCu);
    sub_100007764(&qword_1007208D0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(v0 + 232))(*(void *)(v0 + 176), *(void *)(v0 + 160));
  uint64_t v6 = *(void *)(*(void *)(*(void *)(v0 + 152) + *(void *)(v0 + 208)) + 16);
  uint64_t v7 = (void **)(v6 + 16);
  unint64_t v8 = (os_unfair_lock_s *)(v6 + 24);
  swift_retain();
  os_unfair_lock_lock(v8);
  sub_10001B054(v7, &v13);
  os_unfair_lock_unlock(v8);
  unint64_t v9 = *(void **)(v0 + 216);
  id v10 = v13;
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void *))(v0 + 8);
  return v11(v10);
}

NSObject *sub_10001C89C()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v35 = *(void *)(v1 - 8);
  uint64_t v36 = v1;
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v37 = v6;
  uint64_t v38 = v7;
  uint64_t v8 = __chkstk_darwin(v6);
  id v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v34 - v11;
  uint64_t v13 = OBJC_IVAR____TtC8coreidvd8DIPWatch_currentSession;
  type metadata accessor for NPKSession();
  uint64_t v14 = swift_allocObject();
  sub_100007764(&qword_10071FF48);
  uint64_t v15 = swift_allocObject();
  *(_DWORD *)(v15 + 24) = 0;
  *(void *)(v15 + 16) = 0;
  *(void *)(v14 + 16) = v15;
  sub_100007764((uint64_t *)&unk_10071FF50);
  uint64_t v16 = swift_allocObject();
  *(_DWORD *)(v16 + 20) = 0;
  *(unsigned char *)(v16 + 16) = 0;
  *(void *)&v0[v13] = v14;
  *(void *)(v14 + 24) = v16;
  *(void *)&v0[OBJC_IVAR____TtC8coreidvd8DIPWatch_service] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8coreidvd8DIPWatch_kIDVWatchSessionTimeout] = 0x4014000000000000;
  uint64_t v17 = &v0[OBJC_IVAR____TtC8coreidvd8DIPWatch_DIPWatchErrorDomain];
  *(void *)uint64_t v17 = 0xD000000000000025;
  *((void *)v17 + 1) = 0x800000010062FA00;
  *(void *)&v0[OBJC_IVAR____TtC8coreidvd8DIPWatch_partitions] = &off_1006F0E50;
  *(void *)&v0[OBJC_IVAR____TtC8coreidvd8DIPWatch_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  id v18 = (objc_class *)type metadata accessor for DIPWatch();
  v40.receiver = v0;
  v40.super_class = v18;
  id v34 = [super init];
  defaultLogger()();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v19, v20))
  {
    unint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "DIPWatch init called", v21, 2u);
    swift_slowDealloc();
  }

  uint64_t v22 = *(void (**)(char *, uint64_t))(v38 + 8);
  v38 += 8;
  v22(v12, v37);
  sub_100025C28(0, (unint64_t *)&qword_1007208E0);
  static DispatchQoS.unspecified.getter();
  uint64_t v39 = &_swiftEmptyArrayStorage;
  sub_100025C64((unint64_t *)&qword_10071FF60, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100007764((uint64_t *)&unk_100726420);
  sub_100025CAC();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v35 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v36);
  uint64_t v23 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  id v24 = objc_allocWithZone((Class)NPKIDVRemoteDeviceService);
  Swift::Int v25 = v34;
  NSString v26 = String._bridgeToObjectiveC()();
  uint64_t v27 = (objc_class *)[v24 initWithServiceName:v26 delegate:v25 callbackQueue:v23];

  uint64_t v28 = *(Class *)((char *)&v25->isa + OBJC_IVAR____TtC8coreidvd8DIPWatch_service);
  *(Class *)((char *)&v25->isa + OBJC_IVAR____TtC8coreidvd8DIPWatch_service) = v27;

  defaultLogger()();
  Swift::String v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    Swift::Bool v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::Bool v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Successfully registered NPKIDVRemoteDeviceService xpc listener", v31, 2u);
    swift_slowDealloc();
    uint64_t v32 = v23;
    uint64_t v23 = v25;
  }
  else
  {
    uint64_t v32 = v29;
    Swift::String v29 = v25;
  }

  v22(v10, v37);
  return v25;
}

id sub_10001CE3C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "DIPWatch deinit", v8, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  swift_retain();
  sub_10001B090();
  swift_release();
  *(void *)&v1[OBJC_IVAR____TtC8coreidvd8DIPWatch_delegate + 8] = 0;
  swift_unknownObjectWeakAssign();
  uint64_t v9 = *(void **)&v1[OBJC_IVAR____TtC8coreidvd8DIPWatch_service];
  *(void *)&v1[OBJC_IVAR____TtC8coreidvd8DIPWatch_service] = 0;

  id v10 = (objc_class *)type metadata accessor for DIPWatch();
  v12.receiver = v1;
  v12.super_class = v10;
  return [super dealloc];
}

uint64_t sub_10001D08C(uint64_t a1, uint64_t a2)
{
  v2[4] = a1;
  v2[5] = a2;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[9] = v4;
  v2[10] = *(void *)(v4 - 8);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  uint64_t v5 = (void *)swift_task_alloc();
  v2[13] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10001D1E4;
  return sub_10001BBB4();
}

uint64_t sub_10001D1E4(uint64_t a1)
{
  *(void *)(*(void *)v1 + 112) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10001D2E4, 0, 0);
}

uint64_t sub_10001D2E4()
{
  id v34 = v0;
  uint64_t v1 = (void *)v0[14];
  if (v1)
  {
    unint64_t v2 = v0[5];
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    id v3 = v1;
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    BOOL v6 = os_log_type_enabled(v4, v5);
    uint64_t v7 = v0[12];
    uint64_t v9 = v0[9];
    uint64_t v8 = v0[10];
    if (v6)
    {
      uint64_t v28 = v0[5];
      uint64_t v29 = v0[4];
      os_log_type_t type = v5;
      uint64_t v10 = swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136446466;
      uint64_t v32 = v7;
      id v11 = [v3 deviceID];
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v31 = v9;
      unint64_t v14 = v13;

      v0[2] = sub_100110D58(v12, v14, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v10 + 12) = 2082;
      if (v28) {
        uint64_t v15 = v29;
      }
      else {
        uint64_t v15 = 7104878;
      }
      if (v28) {
        unint64_t v16 = v2;
      }
      else {
        unint64_t v16 = 0xE300000000000000;
      }
      swift_bridgeObjectRetain();
      v0[3] = sub_100110D58(v15, v16, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v4, type, "Trying to fetch credential preflight status for watch with pairingID: %{public}s, proofingMinWatchOSVersion: %{public}s", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v32, v31);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    }
    uint64_t v23 = v0[4];
    uint64_t v22 = v0[5];
    id v24 = (void *)swift_allocObject();
    v0[15] = v24;
    v24[2] = v3;
    v24[3] = v23;
    v24[4] = v22;
    id v25 = v3;
    swift_bridgeObjectRetain();
    NSString v26 = (void *)swift_task_alloc();
    v0[16] = v26;
    *NSString v26 = v0;
    v26[1] = sub_10001D7C8;
    v27.n128_u64[0] = 5.0;
    return withTaskTimeoutHandler<A>(timeout:operation:)(v0 + 18, &unk_10071FF40, v24, &type metadata for Bool, v27);
  }
  else
  {
    uint64_t v18 = v0[10];
    uint64_t v17 = v0[11];
    uint64_t v19 = v0[9];
    (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for DIPError.Code.unableToEstablishSessionWithWatch(_:), v0[6]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100025C64((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v20 = (uint64_t (*)(void))v0[1];
    return v20(0);
  }
}

uint64_t sub_10001D7C8()
{
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    unint64_t v2 = sub_10001D974;
  }
  else
  {
    swift_release();
    unint64_t v2 = sub_10001D8E4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10001D8E4()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 144);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_10001D974()
{
  uint64_t v1 = *(void **)(v0 + 112);
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2(0);
}

uint64_t sub_10001DA08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[23] = a3;
  v4[24] = a4;
  v4[21] = a1;
  v4[22] = a2;
  uint64_t v5 = type metadata accessor for Logger();
  v4[25] = v5;
  v4[26] = *(void *)(v5 - 8);
  v4[27] = swift_task_alloc();
  v4[28] = swift_task_alloc();
  v4[29] = swift_task_alloc();
  return _swift_task_switch(sub_10001DAE8, 0, 0);
}

uint64_t sub_10001DAE8()
{
  if (v0[24]) {
    NSString v1 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v1 = 0;
  }
  v0[30] = v1;
  unint64_t v2 = (void *)v0[22];
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_10001DC14;
  uint64_t v3 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10001C898;
  v0[13] = &unk_1006F49A0;
  v0[14] = v3;
  [v2 credentialPreflightStatusForType:1 minOSVersion:v1 completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10001DC14()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 248) = v1;
  if (v1) {
    unint64_t v2 = sub_10001E2A8;
  }
  else {
    unint64_t v2 = sub_10001DD24;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10001DD24()
{
  uint64_t v46 = v0;
  uint64_t v1 = *(void **)(v0 + 120);

  if ((uint64_t)[v1 provisionedPassesCount] <= 0
    && ([v1 preflightSuccessful] & 1) != 0)
  {
    unint64_t v2 = *(void **)(v0 + 176);
    defaultLogger()();
    id v3 = v1;
    id v4 = v2;
    id v5 = v3;
    id v6 = v4;
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t type = static os_log_type_t.debug.getter();
    BOOL v8 = os_log_type_enabled(v7, type);
    uint64_t v9 = *(void *)(v0 + 224);
    uint64_t v10 = *(void *)(v0 + 200);
    uint64_t v11 = *(void *)(v0 + 208);
    uint64_t v12 = *(void **)(v0 + 176);
    if (v8)
    {
      uint64_t v41 = *(void *)(v0 + 224);
      uint64_t v13 = swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136446722;
      id v14 = [v12 deviceID];
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v39 = v10;
      unint64_t v17 = v16;

      *(void *)(v0 + 160) = sub_100110D58(v15, v17, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v13 + 12) = 1024;
      LODWORD(v17) = [v5 preflightSuccessful];

      *(_DWORD *)(v0 + 256) = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v13 + 18) = 2048;
      id v18 = [v5 provisionedPassesCount];

      *(void *)(v0 + 144) = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v7, type, "Credential preflight check successful for watch with pairingID: %{public}s, preflight status: %{BOOL}d, provisionedPass count: %ld", (uint8_t *)v13, 0x1Cu);
      char v19 = 1;
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v41, v39);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
      char v19 = 1;
    }
  }
  else
  {
    os_log_type_t v20 = *(void **)(v0 + 176);
    defaultLogger()();
    id v21 = v1;
    id v22 = v20;
    id v23 = v21;
    id v24 = v22;
    id v25 = Logger.logObject.getter();
    os_log_type_t typea = static os_log_type_t.debug.getter();
    BOOL v26 = os_log_type_enabled(v25, typea);
    uint64_t v27 = *(void *)(v0 + 232);
    uint64_t v28 = *(void *)(v0 + 200);
    uint64_t v29 = *(void *)(v0 + 208);
    os_log_type_t v30 = *(void **)(v0 + 176);
    if (v26)
    {
      uint64_t v42 = *(void *)(v0 + 232);
      uint64_t v31 = swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136446722;
      id v32 = [v30 deviceID];
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v40 = v28;
      unint64_t v35 = v34;

      *(void *)(v0 + 136) = sub_100110D58(v33, v35, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v31 + 12) = 1024;
      LODWORD(v35) = [v23 preflightSuccessful];

      *(_DWORD *)(v0 + 260) = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v31 + 18) = 2048;
      id v36 = [v23 provisionedPassesCount];

      *(void *)(v0 + 152) = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v25, typea, "Credential preflight check failed for watch with pairingID: %{public}s, preflight status: %{BOOL}d, provisionedPass count: %ld", (uint8_t *)v31, 0x1Cu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v42, v40);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
    }
    char v19 = 0;
  }
  **(unsigned char **)(v0 + 168) = v19;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v37 = *(uint64_t (**)(void))(v0 + 8);
  return v37();
}

uint64_t sub_10001E2A8()
{
  uint64_t v1 = *(void **)(v0 + 240);
  swift_willThrow();

  defaultLogger()();
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    id v4 = (uint8_t *)swift_slowAlloc();
    id v5 = (void *)swift_slowAlloc();
    *(_DWORD *)id v4 = 138543362;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 128) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error occurred in fetching credential preflight status for watch: %{public}@", v4, 0xCu);
    sub_100007764(&qword_1007208D0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(*(void *)(v0 + 208) + 8))(*(void *)(v0 + 216), *(void *)(v0 + 200));
  **(unsigned char **)(v0 + 168) = 0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_10001E4BC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_100007764((uint64_t *)&unk_100723450);
    uint64_t v5 = swift_allocError();
    void *v6 = a3;
    id v7 = a3;
    a1 = v3;
    a2 = (void *)v5;
    return _swift_continuation_throwingResumeWithError(a1, a2);
  }
  if (!a2)
  {
    __break(1u);
    return _swift_continuation_throwingResumeWithError(a1, a2);
  }
  **(void **)(*(void *)(v3 + 64) + 40) = a2;
  id v8 = a2;

  return swift_continuation_throwingResume();
}

uint64_t sub_10001E57C()
{
  v1[6] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[7] = v2;
  v1[8] = *(void *)(v2 - 8);
  v1[9] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DIPError();
  v1[10] = v3;
  v1[11] = *(void *)(v3 - 8);
  v1[12] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v1[13] = v4;
  v1[14] = *(void *)(v4 - 8);
  v1[15] = swift_task_alloc();
  v1[16] = swift_task_alloc();
  v1[17] = swift_task_alloc();
  v1[18] = swift_task_alloc();
  uint64_t v5 = (void *)swift_task_alloc();
  v1[19] = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10001E748;
  return sub_10001BBB4();
}

uint64_t sub_10001E748(uint64_t a1)
{
  *(void *)(*(void *)v1 + 160) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10001E848, 0, 0);
}

uint64_t sub_10001E848()
{
  unint64_t v35 = v0;
  uint64_t v1 = (void *)v0[20];
  if (!v1)
  {
    defaultLogger()();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "DIPWatch configureIfNeeded no session set", v9, 2u);
      swift_slowDealloc();
    }
    uint64_t v10 = v0[16];
    uint64_t v11 = v0[13];
    uint64_t v12 = v0[14];
    uint64_t v13 = v0[11];
    uint64_t v33 = v0[12];
    uint64_t v15 = v0[9];
    uint64_t v14 = v0[10];
    uint64_t v17 = v0[7];
    uint64_t v16 = v0[8];

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    (*(void (**)(uint64_t, void, uint64_t))(v16 + 104))(v15, enum case for DIPError.Code.unableToEstablishSessionWithWatch(_:), v17);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_100025C64((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v18, v33, v14);
    _convertErrorToNSError(_:)();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    char v19 = (uint64_t (*)(void))v0[1];
    goto LABEL_8;
  }
  uint64_t v2 = v0[6];
  uint64_t v3 = OBJC_IVAR____TtC8coreidvd8DIPWatch_currentSession;
  v0[21] = OBJC_IVAR____TtC8coreidvd8DIPWatch_currentSession;
  uint64_t v4 = *(void *)(*(void *)(v2 + v3) + 24);
  uint64_t v5 = (unsigned char *)(v4 + 16);
  uint64_t v6 = (os_unfair_lock_s *)(v4 + 20);
  swift_retain();
  os_unfair_lock_lock(v6);
  sub_10001B084(v5, v34);
  os_unfair_lock_unlock(v6);
  char v20 = v34[0];
  swift_release();
  if (v20)
  {

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    char v19 = (uint64_t (*)(void))v0[1];
LABEL_8:
    return v19();
  }
  defaultLogger()();
  id v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v23))
  {
    id v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "DIPWatch configure needed", v24, 2u);
    swift_slowDealloc();
  }
  uint64_t v25 = v0[18];
  uint64_t v26 = v0[13];
  uint64_t v27 = v0[14];
  uint64_t v28 = v0[6];

  uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
  v0[22] = v29;
  v0[23] = (v27 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v29(v25, v26);
  uint64_t v30 = *(void *)(v28 + OBJC_IVAR____TtC8coreidvd8DIPWatch_partitions);
  uint64_t v31 = swift_task_alloc();
  v0[24] = v31;
  *(void *)(v31 + 16) = v1;
  *(void *)(v31 + 24) = v30;
  id v32 = (void *)swift_task_alloc();
  v0[25] = v32;
  void *v32 = v0;
  v32[1] = sub_10001ED20;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t sub_10001ED20()
{
  *(void *)(*(void *)v1 + 208) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10001F010;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_10001EE3C;
  }
  return _swift_task_switch(v2, 0, 0);
}

void sub_10001EE3C()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "DIPWatch configureWithPartition completed successfully", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[26];
  uint64_t v5 = (void (*)(uint64_t, uint64_t))v0[22];
  uint64_t v6 = v0[21];
  uint64_t v7 = v0[17];
  uint64_t v8 = v0[13];
  uint64_t v9 = v0[6];

  v5(v7, v8);
  uint64_t v10 = *(os_unfair_lock_s **)(*(void *)(v9 + v6) + 24);
  *(unsigned char *)(swift_task_alloc() + 16) = 1;
  uint64_t v11 = v10 + 4;
  v10 += 5;
  swift_retain();
  os_unfair_lock_lock(v10);
  sub_1000259C4(v11);
  os_unfair_lock_unlock(v10);
  if (!v4)
  {
    uint64_t v12 = (void *)v0[20];
    swift_release();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = (void (*)(void))v0[1];
    v13();
  }
}

uint64_t sub_10001F010()
{
  swift_task_dealloc();
  defaultLogger()();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 40) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "DIPWatch configureWithPartition returned error %@", v3, 0xCu);
    sub_100007764(&qword_1007208D0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v6 = *(void *)(v0 + 208);
  uint64_t v13 = *(void **)(v0 + 160);
  uint64_t v7 = *(void *)(v0 + 72);
  uint64_t v8 = *(void *)(v0 + 56);
  uint64_t v9 = *(void *)(v0 + 64);
  (*(void (**)(void, void))(v0 + 176))(*(void *)(v0 + 120), *(void *)(v0 + 104));
  _StringGuts.grow(_:)(49);
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0xE000000000000000;
  v10._countAndFlagsBits = 0xD00000000000002FLL;
  v10._object = (void *)0x800000010062F8E0;
  String.append(_:)(v10);
  *(void *)(v0 + 32) = v6;
  sub_100007764((uint64_t *)&unk_100723450);
  _print_unlocked<A, B>(_:_:)();
  (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))(v7, enum case for DIPError.Code.internalError(_:), v8);
  sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
  sub_100025C64((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_10001F394(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v102 = a2;
  uint64_t v95 = a1;
  uint64_t v8 = sub_100007764(&qword_10071FEE0);
  __chkstk_darwin(v8 - 8);
  uint64_t v101 = (char *)v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void **)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v100 = (char *)v91 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v99 = (char *)v91 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v98 = (char *)v91 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v97 = (char *)v91 - v22;
  __chkstk_darwin(v21);
  id v24 = (char *)v91 - v23;
  defaultLogger()();
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v96 = v14;
    uint64_t v27 = swift_slowAlloc();
    uint64_t v93 = v5;
    uint64_t v28 = (uint8_t *)v27;
    uint64_t v29 = swift_slowAlloc();
    unint64_t v94 = a4;
    v91[2] = v29;
    uint64_t v104 = v29;
    *(_DWORD *)uint64_t v28 = 136446210;
    v91[1] = v28 + 4;
    id v30 = (id)stringsArrayFromNPKIDVRemoteDeviceServiceEvents();
    uint64_t v92 = a3;
    id v31 = v30;
    id v32 = v11;
    static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v33 = Array.description.getter();
    unint64_t v35 = v34;
    uint64_t v14 = v96;
    swift_bridgeObjectRelease();
    uint64_t v36 = v33;
    uint64_t v11 = v32;
    uint64_t v103 = sub_100110D58(v36, v35, &v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a3 = v92;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "DIPWatch event received: %{public}s", v28, 0xCu);
    swift_arrayDestroy();
    a4 = v94;
    swift_slowDealloc();
    uint64_t v5 = v93;
    swift_slowDealloc();
  }

  uint64_t v37 = (void (*)(char *, uint64_t))v11[1];
  v37(v24, v10);
  uint64_t v38 = v102;
  switch(v102)
  {
    case 1:
      uint64_t v39 = v98;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v102 = v10;
        uint64_t v42 = (uint8_t *)swift_slowAlloc();
        uint64_t v43 = swift_slowAlloc();
        uint64_t v95 = v11;
        uint64_t v104 = v43;
        *(_DWORD *)uint64_t v42 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v103 = sub_100110D58(a3, a4, &v104);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "DIPWatch received NPKIDVRemoteDeviceServiceEventDidBecomeActive event for watch with pairingID: %s", v42, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        id v44 = v98;
        uint64_t v45 = v102;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        id v44 = v39;
        uint64_t v45 = v10;
      }
      v37(v44, v45);
      uint64_t v79 = type metadata accessor for TaskPriority();
      uint64_t v80 = (uint64_t)v101;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 56))(v101, 1, 1, v79);
      Swift::String v81 = (void *)swift_allocObject();
      v81[2] = 0;
      v81[3] = 0;
      v81[4] = v5;
      v81[5] = a3;
      v81[6] = a4;
      swift_bridgeObjectRetain();
      id v82 = v5;
      Swift::String v83 = &unk_10071FF00;
      goto LABEL_21;
    case 4:
      uint64_t v53 = type metadata accessor for TaskPriority();
      uint64_t v54 = (uint64_t)v101;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v101, 1, 1, v53);
      Swift::Bool v55 = (void *)swift_allocObject();
      v55[2] = 0;
      v55[3] = 0;
      v55[4] = v5;
      v55[5] = a3;
      id v56 = v95;
      v55[6] = a4;
      v55[7] = v56;
      swift_bridgeObjectRetain();
      id v57 = v5;
      id v58 = v56;
      sub_10014043C(v54, (uint64_t)&unk_10071FF10, (uint64_t)v55);
      goto LABEL_27;
    case 8:
      id v59 = v97;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      Swift::String v60 = Logger.logObject.getter();
      os_log_type_t v61 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v60, v61))
      {
        uint64_t v102 = v10;
        id v62 = (uint8_t *)swift_slowAlloc();
        uint64_t v63 = swift_slowAlloc();
        uint64_t v95 = v11;
        uint64_t v104 = v63;
        *(_DWORD *)id v62 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v103 = sub_100110D58(a3, a4, &v104);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v60, v61, "DIPWatch received NPKIDVRemoteDeviceServiceEventRequirePrearmCredential event, trying to prearm watch with pairingID: %s", v62, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        Swift::Bool v64 = v97;
        uint64_t v65 = v102;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        Swift::Bool v64 = v59;
        uint64_t v65 = v10;
      }
      v37(v64, v65);
      uint64_t v85 = type metadata accessor for TaskPriority();
      uint64_t v80 = (uint64_t)v101;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v85 - 8) + 56))(v101, 1, 1, v85);
      Swift::String v81 = (void *)swift_allocObject();
      v81[2] = 0;
      v81[3] = 0;
      v81[4] = v5;
      v81[5] = a3;
      v81[6] = a4;
      swift_bridgeObjectRetain();
      id v86 = v5;
      Swift::String v83 = &unk_10071FF20;
LABEL_21:
      sub_1001405E0(v80, (uint64_t)v83, (uint64_t)v81);
      goto LABEL_27;
    case 16:
      uint64_t v95 = v11;
      Swift::String v66 = v99;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      Swift::Bool v67 = Logger.logObject.getter();
      os_log_type_t v68 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v67, v68))
      {
        uint64_t v102 = v10;
        id v69 = (uint8_t *)swift_slowAlloc();
        uint64_t v104 = swift_slowAlloc();
        *(_DWORD *)id v69 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v103 = sub_100110D58(a3, a4, &v104);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v67, v68, "DIPWatch received NPKIDVRemoteDeviceServiceEventShouldBeDisarmed event for watch with pairingID: %s, trying to unregister for phone lock notifications", v69, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        Swift::String v70 = v99;
        uint64_t v71 = v102;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        Swift::String v70 = v66;
        uint64_t v71 = v10;
      }
      v37(v70, v71);
      uint64_t result = swift_unknownObjectWeakLoadStrong();
      if (result)
      {
        sub_10045D334(a3, a4);
        return swift_unknownObjectRelease();
      }
      return result;
    case 32:
      id v72 = v100;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      Swift::String v73 = Logger.logObject.getter();
      os_log_type_t v74 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v73, v74))
      {
        uint64_t v102 = v10;
        Swift::String v75 = (uint8_t *)swift_slowAlloc();
        uint64_t v76 = swift_slowAlloc();
        uint64_t v95 = v11;
        uint64_t v104 = v76;
        *(_DWORD *)Swift::String v75 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v103 = sub_100110D58(a3, a4, &v104);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v73, v74, "DIPWatch received NPKIDVRemoteDeviceServiceEventDidDeletePass event for watch with pairingID: %s", v75, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        Swift::String v77 = v100;
        uint64_t v78 = v102;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        Swift::String v77 = v72;
        uint64_t v78 = v10;
      }
      v37(v77, v78);
      uint64_t v87 = type metadata accessor for TaskPriority();
      uint64_t v88 = (uint64_t)v101;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v87 - 8) + 56))(v101, 1, 1, v87);
      Swift::String v89 = (void *)swift_allocObject();
      v89[2] = 0;
      v89[3] = 0;
      v89[4] = v5;
      v89[5] = a3;
      v89[6] = a4;
      swift_bridgeObjectRetain();
      id v90 = v5;
      sub_10016F41C(v88, (uint64_t)&unk_10071FEF0, (uint64_t)v89);
LABEL_27:
      uint64_t result = swift_release();
      break;
    default:
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v46 = Logger.logObject.getter();
      uint64_t v47 = v14;
      os_log_type_t v48 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v46, v48))
      {
        uint64_t v49 = v38;
        uint64_t v50 = swift_slowAlloc();
        uint64_t v51 = swift_slowAlloc();
        uint64_t v95 = v11;
        uint64_t v104 = v51;
        *(_DWORD *)uint64_t v50 = 136315394;
        uint64_t v96 = v47;
        swift_bridgeObjectRetain();
        uint64_t v103 = sub_100110D58(a3, a4, &v104);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v50 + 12) = 2048;
        uint64_t v103 = v49;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v46, v48, "DIPWatch received unknown event for watch with pairingID: %s, ignoring event: %lu", (uint8_t *)v50, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        Swift::Bool v52 = v96;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        Swift::Bool v52 = v47;
      }
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v37)(v52, v10);
      break;
  }
  return result;
}

uint64_t sub_100020120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a5;
  v6[5] = a6;
  v6[2] = a1;
  v6[3] = a4;
  return _swift_task_switch(sub_100020144, 0, 0);
}

uint64_t sub_100020144()
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  *(void *)(v0 + 48) = Strong;
  if (Strong)
  {
    uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10072EE50 + dword_10072EE50);
    os_log_type_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 56) = v2;
    void *v2 = v0;
    v2[1] = sub_100020248;
    uint64_t v4 = *(void *)(v0 + 32);
    uint64_t v3 = *(void *)(v0 + 40);
    return v7(v4, v3);
  }
  else
  {
    **(unsigned char **)(v0 + 16) = 1;
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
}

uint64_t sub_100020248()
{
  swift_task_dealloc();
  swift_unknownObjectRelease();
  return _swift_task_switch(sub_100025D30, 0, 0);
}

uint64_t sub_100020360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[21] = a6;
  v7[22] = a7;
  v7[19] = a4;
  v7[20] = a5;
  uint64_t v8 = type metadata accessor for Logger();
  v7[23] = v8;
  v7[24] = *(void *)(v8 - 8);
  v7[25] = swift_task_alloc();
  v7[26] = swift_task_alloc();
  v7[27] = swift_task_alloc();
  v7[28] = swift_task_alloc();
  uint64_t v9 = (void *)swift_task_alloc();
  v7[29] = v9;
  *uint64_t v9 = v7;
  v9[1] = sub_10002047C;
  return sub_10001BBB4();
}

uint64_t sub_10002047C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 240) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10002057C, 0, 0);
}

uint64_t sub_10002057C()
{
  uint64_t v29 = v0;
  uint64_t v1 = v0[30];
  if (v1)
  {
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    os_log_type_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.debug.getter();
    BOOL v4 = os_log_type_enabled(v2, v3);
    uint64_t v5 = v0[27];
    uint64_t v6 = v0[23];
    uint64_t v7 = v0[24];
    unint64_t v8 = v0[21];
    if (v4)
    {
      uint64_t v27 = v1;
      uint64_t v9 = v0[20];
      uint64_t v26 = v0[27];
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v11 = v9;
      uint64_t v1 = v27;
      v0[18] = sub_100110D58(v11, v8, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "DIPWatch received NPKIDVRemoteDeviceServiceEventDidUnpair event, trying to remove proofing session for watch with pairingID: %s", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
      v12(v26, v6);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
      v12(v5, v6);
    }
    v0[31] = v12;
    if (swift_unknownObjectWeakLoadStrong())
    {
      sub_10045DB80(v0[20], v0[21]);
      swift_unknownObjectRelease();
    }
    uint64_t v21 = (void *)v0[22];
    id v22 = (id)stringsArrayFromNPKIDVRemoteDeviceServiceEvents();
    static Array._unconditionallyBridgeFromObjectiveC(_:)();

    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v24 = NPKIDVRemoteDeviceServiceEventsFromStringsArray();

    v0[2] = v0;
    v0[7] = v0 + 15;
    v0[3] = sub_100020990;
    uint64_t v25 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_100021C10;
    v0[13] = &unk_1006F48F8;
    v0[14] = v25;
    [v21 unregisterFromEvents:v24 withSession:v1 completion:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    defaultLogger()();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "DIPWatch no session set", v15, 2u);
      swift_slowDealloc();
    }
    uint64_t v16 = v0[28];
    uint64_t v17 = v0[23];
    uint64_t v18 = v0[24];

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = (uint64_t (*)(void))v0[1];
    return v19();
  }
}

uint64_t sub_100020990()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 256) = v1;
  if (v1) {
    os_log_type_t v2 = sub_100020BF4;
  }
  else {
    os_log_type_t v2 = sub_100020AA0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100020AA0()
{
  uint64_t v1 = v0[15];
  defaultLogger()();
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 134217984;
    v0[17] = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Successfully unregistered from following watch events %lu", v4, 0xCu);
    swift_slowDealloc();
  }
  uint64_t v6 = (void *)v0[30];
  uint64_t v5 = (void (*)(uint64_t, uint64_t))v0[31];
  uint64_t v7 = v0[26];
  uint64_t v8 = v0[23];

  v5(v7, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100020BF4()
{
  swift_willThrow();
  defaultLogger()();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = *(void **)(v0 + 240);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 128) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error occurred in unregistering from watch events %@", v4, 0xCu);
    sub_100007764(&qword_1007208D0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(v0 + 248))(*(void *)(v0 + 200), *(void *)(v0 + 184));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100020E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a5;
  v6[5] = a6;
  v6[2] = a1;
  v6[3] = a4;
  return _swift_task_switch(sub_100020E38, 0, 0);
}

uint64_t sub_100020E38()
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  *(void *)(v0 + 48) = Strong;
  if (Strong)
  {
    uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10072EE58 + dword_10072EE58);
    os_log_type_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 56) = v2;
    void *v2 = v0;
    v2[1] = sub_100020F3C;
    uint64_t v4 = *(void *)(v0 + 32);
    uint64_t v3 = *(void *)(v0 + 40);
    return v7(v4, v3);
  }
  else
  {
    **(unsigned char **)(v0 + 16) = 1;
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
}

uint64_t sub_100020F3C()
{
  swift_task_dealloc();
  swift_unknownObjectRelease();
  return _swift_task_switch(sub_100021054, 0, 0);
}

uint64_t sub_100021054()
{
  **(unsigned char **)(v0 + 16) = *(void *)(v0 + 48) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002107C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[17] = a5;
  v6[18] = a6;
  v6[16] = a4;
  uint64_t v7 = type metadata accessor for DIPError.Code();
  v6[19] = v7;
  v6[20] = *(void *)(v7 - 8);
  v6[21] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DIPError();
  v6[22] = v8;
  v6[23] = *(void *)(v8 - 8);
  v6[24] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Logger();
  v6[25] = v9;
  v6[26] = *(void *)(v9 - 8);
  v6[27] = swift_task_alloc();
  v6[28] = swift_task_alloc();
  uint64_t v10 = (void *)swift_task_alloc();
  v6[29] = v10;
  void *v10 = v6;
  v10[1] = sub_100021238;
  return sub_10001BBB4();
}

uint64_t sub_100021238(uint64_t a1)
{
  *(void *)(*(void *)v1 + 240) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100021338, 0, 0);
}

uint64_t sub_100021338()
{
  uint64_t v1 = (void *)v0[30];
  if (v1)
  {
    v0[2] = v0;
    v0[7] = v0 + 15;
    v0[3] = sub_100021534;
    uint64_t v2 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_100021C10;
    v0[13] = &unk_1006F4910;
    v0[14] = v2;
    [v1 provisionedCredentialCountForType:1 completion:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    defaultLogger()();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "DIPWatch no session set", v5, 2u);
      swift_slowDealloc();
    }
    uint64_t v6 = v0[28];
    uint64_t v7 = v0[25];
    uint64_t v8 = v0[26];

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_100021534()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 248) = v1;
  if (v1) {
    uint64_t v2 = sub_100021B64;
  }
  else {
    uint64_t v2 = sub_100021644;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100021644()
{
  if (*(void *)(v0 + 120) || (uint64_t Strong = swift_unknownObjectWeakLoadStrong(), (*(void *)(v0 + 256) = Strong) == 0))
  {

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
    return v1();
  }
  else
  {
    uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10072EE68 + dword_10072EE68);
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 264) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_100021780;
    uint64_t v6 = *(void *)(v0 + 136);
    uint64_t v5 = *(void *)(v0 + 144);
    return v7(v6, v5);
  }
}

uint64_t sub_100021780()
{
  *(void *)(*(void *)v1 + 272) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100021930;
  }
  else
  {
    swift_unknownObjectRelease();
    uint64_t v2 = sub_10002189C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10002189C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100021930()
{
  uint64_t v1 = (void *)v0[30];
  uint64_t v3 = v0[26];
  uint64_t v2 = v0[27];
  uint64_t v4 = v0[24];
  uint64_t v13 = v0[25];
  uint64_t v5 = v0[22];
  uint64_t v6 = v0[23];
  uint64_t v7 = v0[20];
  uint64_t v8 = v0[21];
  uint64_t v9 = v0[19];
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v8, enum case for DIPError.Code.unableToDeletePrearmTrustKey(_:), v9);
  sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_100025C64((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v10, v4, v5);
  defaultLogger()();
  DIPRecordError(_:message:log:)();

  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v13);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_100021B64()
{
  uint64_t v1 = *(void **)(v0 + 240);
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100021C10(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_100007764((uint64_t *)&unk_100723450);
    uint64_t v5 = swift_allocError();
    void *v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    **(void **)(*(void *)(v3 + 64) + 40) = a2;
    return swift_continuation_throwingResume();
  }
}

uint64_t type metadata accessor for DIPWatch()
{
  return self;
}

uint64_t sub_100021D70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[19] = a3;
  v4[20] = v3;
  v4[17] = a1;
  v4[18] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[21] = v5;
  v4[22] = *(void *)(v5 - 8);
  v4[23] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v4[24] = v6;
  v4[25] = *(void *)(v6 - 8);
  v4[26] = swift_task_alloc();
  id v7 = (void *)swift_task_alloc();
  v4[27] = v7;
  *id v7 = v4;
  v7[1] = sub_100021EBC;
  return sub_10001E57C();
}

uint64_t sub_100021EBC()
{
  *(void *)(*(void *)v1 + 224) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100022638;
  }
  else {
    uint64_t v2 = sub_100021FD0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100021FD0()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "DIPWatch createCredentialInPartition called", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[25];
  uint64_t v4 = v0[26];
  uint64_t v6 = v0[24];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  id v7 = (void *)swift_task_alloc();
  v0[29] = v7;
  *id v7 = v0;
  v7[1] = sub_100022100;
  return sub_10001BBB4();
}

uint64_t sub_100022100(uint64_t a1)
{
  *(void *)(*(void *)v1 + 240) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100022200, 0, 0);
}

uint64_t sub_100022200()
{
  uint64_t v1 = (void *)v0[30];
  if (v1)
  {
    uint64_t v2 = v0[19];
    NSString v3 = String._bridgeToObjectiveC()();
    v0[31] = v3;
    v0[2] = v0;
    v0[7] = v0 + 15;
    v0[3] = sub_10002248C;
    uint64_t v4 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_10044B79C;
    v0[13] = &unk_1006F4840;
    v0[14] = v4;
    [v1 createCredentialInPartition:v3 options:v2 completion:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[22] + 104))(v0[23], enum case for DIPError.Code.internalError(_:), v0[21]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100025C64((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t sub_10002248C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 256) = v1;
  if (v1) {
    uint64_t v2 = sub_1000226C4;
  }
  else {
    uint64_t v2 = sub_10002259C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10002259C()
{
  uint64_t v1 = *(void **)(v0 + 248);

  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 128);

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v4(v2, v3);
}

uint64_t sub_100022638()
{
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000226C4()
{
  uint64_t v1 = (void *)v0[31];
  uint64_t v2 = (void *)v0[30];
  swift_willThrow();

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100022764(uint64_t a1, uint64_t a2)
{
  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[18] = v4;
  v3[19] = *(void *)(v4 - 8);
  v3[20] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[21] = v5;
  v3[22] = *(void *)(v5 - 8);
  v3[23] = swift_task_alloc();
  uint64_t v6 = (void *)swift_task_alloc();
  v3[24] = v6;
  void *v6 = v3;
  v6[1] = sub_1000228B0;
  return sub_10001E57C();
}

uint64_t sub_1000228B0()
{
  *(void *)(*(void *)v1 + 200) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100022FFC;
  }
  else {
    uint64_t v2 = sub_1000229C4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000229C4()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "DIPWatch deleteCredential called", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[22];
  uint64_t v4 = v0[23];
  uint64_t v6 = v0[21];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[26] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100022AF4;
  return sub_10001BBB4();
}

uint64_t sub_100022AF4(uint64_t a1)
{
  *(void *)(*(void *)v1 + 216) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100022BF4, 0, 0);
}

uint64_t sub_100022BF4()
{
  uint64_t v1 = (void *)v0[27];
  if (v1)
  {
    NSString v2 = String._bridgeToObjectiveC()();
    v0[28] = v2;
    v0[2] = v0;
    v0[3] = sub_100022E64;
    uint64_t v3 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_100529EC4;
    v0[13] = &unk_1006F4828;
    v0[14] = v3;
    [v1 deleteCredential:v2 completion:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[19] + 104))(v0[20], enum case for DIPError.Code.internalError(_:), v0[18]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100025C64((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_100022E64()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 232) = v1;
  if (v1) {
    NSString v2 = sub_100023088;
  }
  else {
    NSString v2 = sub_100022F74;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100022F74()
{
  uint64_t v1 = *(void **)(v0 + 216);

  swift_task_dealloc();
  swift_task_dealloc();
  NSString v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100022FFC()
{
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100023088()
{
  uint64_t v1 = (void *)v0[28];
  NSString v2 = (void *)v0[27];
  swift_willThrow();

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100023128(uint64_t a1, uint64_t a2)
{
  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[19] = v4;
  v3[20] = *(void *)(v4 - 8);
  v3[21] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[22] = v5;
  v3[23] = *(void *)(v5 - 8);
  v3[24] = swift_task_alloc();
  uint64_t v6 = (void *)swift_task_alloc();
  v3[25] = v6;
  void *v6 = v3;
  v6[1] = sub_100023274;
  return sub_10001E57C();
}

uint64_t sub_100023274()
{
  *(void *)(*(void *)v1 + 208) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000239D0;
  }
  else {
    uint64_t v2 = sub_100023388;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100023388()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "DIPWatch generateKeySigningKeyForCredential called", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[23];
  uint64_t v4 = v0[24];
  uint64_t v6 = v0[22];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[27] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1000234B8;
  return sub_10001BBB4();
}

uint64_t sub_1000234B8(uint64_t a1)
{
  *(void *)(*(void *)v1 + 224) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000235B8, 0, 0);
}

uint64_t sub_1000235B8()
{
  uint64_t v1 = (void *)v0[28];
  if (v1)
  {
    NSString v2 = String._bridgeToObjectiveC()();
    v0[29] = v2;
    v0[2] = v0;
    v0[7] = v0 + 15;
    v0[3] = sub_100023830;
    uint64_t v3 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_10001E4BC;
    v0[13] = &unk_1006F4810;
    v0[14] = v3;
    [v1 generateKeySigningKeyForCredential:v2 completion:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[20] + 104))(v0[21], enum case for DIPError.Code.internalError(_:), v0[19]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100025C64((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_100023830()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 240) = v1;
  if (v1) {
    NSString v2 = sub_100023A5C;
  }
  else {
    NSString v2 = sub_100023940;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100023940()
{
  uint64_t v1 = *(void **)(v0 + 232);

  uint64_t v2 = *(void *)(v0 + 120);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

uint64_t sub_1000239D0()
{
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100023A5C()
{
  uint64_t v1 = (void *)v0[29];
  uint64_t v2 = (void *)v0[28];
  swift_willThrow();

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100023AFC(uint64_t a1, uint64_t a2)
{
  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[19] = v4;
  v3[20] = *(void *)(v4 - 8);
  v3[21] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[22] = v5;
  v3[23] = *(void *)(v5 - 8);
  v3[24] = swift_task_alloc();
  uint64_t v6 = (void *)swift_task_alloc();
  v3[25] = v6;
  void *v6 = v3;
  v6[1] = sub_100023C48;
  return sub_10001E57C();
}

uint64_t sub_100023C48()
{
  *(void *)(*(void *)v1 + 208) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100025D74;
  }
  else {
    uint64_t v2 = sub_100023D5C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100023D5C()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "DIPWatch generateDeviceEncryptionKeyForCredential called", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[23];
  uint64_t v4 = v0[24];
  uint64_t v6 = v0[22];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[27] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100023E8C;
  return sub_10001BBB4();
}

uint64_t sub_100023E8C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 224) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100023F8C, 0, 0);
}

uint64_t sub_100023F8C()
{
  uint64_t v1 = (void *)v0[28];
  if (v1)
  {
    NSString v2 = String._bridgeToObjectiveC()();
    v0[29] = v2;
    v0[2] = v0;
    v0[7] = v0 + 15;
    v0[3] = sub_10002420C;
    uint64_t v3 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_10001E4BC;
    v0[13] = &unk_1006F47F8;
    v0[14] = v3;
    [v1 generateDeviceEncryptionKeyForCredential:v2 completion:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[20] + 104))(v0[21], enum case for DIPError.Code.internalError(_:), v0[19]);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100025C64((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_10002420C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 240) = v1;
  if (v1) {
    NSString v2 = sub_100025D70;
  }
  else {
    NSString v2 = sub_100025D6C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10002431C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[17] = a2;
  v3[18] = a3;
  v3[16] = a1;
  uint64_t v4 = type metadata accessor for Logger();
  v3[19] = v4;
  v3[20] = *(void *)(v4 - 8);
  v3[21] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v3[22] = v5;
  v3[23] = *(void *)(v5 - 8);
  v3[24] = swift_task_alloc();
  uint64_t v6 = (void *)swift_task_alloc();
  v3[25] = v6;
  void *v6 = v3;
  v6[1] = sub_100024468;
  return sub_10001BBB4();
}

uint64_t sub_100024468(uint64_t a1)
{
  *(void *)(*(void *)v1 + 208) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100024568, 0, 0);
}

uint64_t sub_100024568()
{
  uint64_t v1 = (void *)v0[26];
  if (v1)
  {
    uint64_t v2 = v0[18];
    NSString v3 = String._bridgeToObjectiveC()();
    v0[27] = v3;
    v0[2] = v0;
    v0[7] = v0 + 15;
    v0[3] = sub_100024834;
    uint64_t v4 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_100024AAC;
    v0[13] = &unk_1006F47E0;
    v0[14] = v4;
    [v1 generatePresentmentKeysForCredential:v3 numKeys:v2 completion:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[23] + 104))(v0[24], enum case for DIPError.Code.internalError(_:), v0[22]);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100025C64((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v6 = v0[20];
    uint64_t v5 = v0[21];
    uint64_t v7 = v0[19];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_100024834()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 224) = v1;
  if (v1) {
    uint64_t v2 = sub_1000249D4;
  }
  else {
    uint64_t v2 = sub_100024944;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100024944()
{
  uint64_t v1 = *(void **)(v0 + 216);

  uint64_t v2 = *(void *)(v0 + 120);
  swift_task_dealloc();
  swift_task_dealloc();
  NSString v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

uint64_t sub_1000249D4()
{
  uint64_t v1 = (void *)v0[27];
  uint64_t v2 = (void *)v0[26];
  swift_willThrow();

  uint64_t v4 = v0[20];
  uint64_t v3 = v0[21];
  uint64_t v5 = v0[19];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_100024AAC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_100007764((uint64_t *)&unk_100723450);
    uint64_t v5 = swift_allocError();
    void *v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    sub_100025C28(0, (unint64_t *)&qword_10071FED0);
    **(void **)(*(void *)(v3 + 64) + 40) = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    return swift_continuation_throwingResume();
  }
}

void sub_100024B88(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_100007764(&qword_10071FF30);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_100025A64;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100025250;
  aBlock[3] = &unk_1006F4950;
  uint64_t v10 = _Block_copy(aBlock);
  swift_release();
  [a2 configureWithPartition:isa ackHandler:v10];
  _Block_release(v10);
}

uint64_t sub_100024D50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DIPError.Code();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v27 - v13;
  if (a1)
  {
    swift_errorRetain();
    defaultLogger()();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v28 = v5;
      uint64_t v17 = swift_slowAlloc();
      uint64_t v29 = v4;
      uint64_t v18 = (uint8_t *)v17;
      uint64_t v19 = swift_slowAlloc();
      uint64_t v30 = v7;
      uint64_t v27 = (void *)v19;
      uint64_t v31 = a2;
      *(_DWORD *)uint64_t v18 = 138412290;
      swift_errorRetain();
      uint64_t v20 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v33 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v27 = v20;
      uint64_t v5 = v28;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "DIPWatch configureWithPartition returned error %@", v18, 0xCu);
      sub_100007764(&qword_1007208D0);
      swift_arrayDestroy();
      id v7 = v30;
      swift_slowDealloc();
      uint64_t v4 = v29;
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    uint64_t v33 = 0;
    unint64_t v34 = 0xE000000000000000;
    _StringGuts.grow(_:)(49);
    v25._countAndFlagsBits = 0xD00000000000002FLL;
    v25._object = (void *)0x800000010062F8E0;
    String.append(_:)(v25);
    uint64_t v32 = a1;
    sub_100007764((uint64_t *)&unk_100723450);
    _print_unlocked<A, B>(_:_:)();
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for DIPError.Code.internalError(_:), v4);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100025C64((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v26 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    uint64_t v33 = v26;
    sub_100007764(&qword_10071FF30);
    CheckedContinuation.resume(throwing:)();
    return swift_errorRelease();
  }
  else
  {
    defaultLogger()();
    uint64_t v21 = Logger.logObject.getter();
    uint64_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, (os_log_type_t)v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, (os_log_type_t)v22, "DIPWatch configureWithPartition completed successfully", v23, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    sub_100007764(&qword_10071FF30);
    return CheckedContinuation.resume(returning:)();
  }
}

void sub_100025250(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

uint64_t sub_1000252BC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100025D68;
  return sub_100023AFC(a1, a2);
}

uint64_t sub_100025364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_100025414;
  return sub_10002431C(a1, a2, a3);
}

uint64_t sub_100025414(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

uint64_t sub_100025514()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002554C(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000C494;
  return sub_10001B670(a1, v4);
}

uint64_t sub_1000255F0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100025D64;
  return sub_10002107C(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1000256BC(uint64_t a1)
{
  long long v7 = *(_OWORD *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 48);
  uint64_t v5 = swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 40) = v4;
  *(_OWORD *)(v5 + 24) = v7;
  *(void *)(v5 + 8) = sub_10000C494;
  *(void *)(v5 + 16) = a1;
  return _swift_task_switch(sub_100020E38, 0, 0);
}

uint64_t sub_100025784()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000257D4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = sub_100025D64;
  return sub_100020360(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1000258AC()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000258F4(uint64_t a1)
{
  long long v7 = *(_OWORD *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 48);
  uint64_t v5 = swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 40) = v4;
  *(_OWORD *)(v5 + 24) = v7;
  *(void *)(v5 + 8) = sub_100025D64;
  *(void *)(v5 + 16) = a1;
  return _swift_task_switch(sub_100020144, 0, 0);
}

void sub_1000259BC(uint64_t a1)
{
  sub_100024B88(a1, *(void **)(v1 + 16));
}

unsigned char *sub_1000259C4(unsigned char *result)
{
  *uint64_t result = *(unsigned char *)(v1 + 16);
  return result;
}

uint64_t sub_1000259D0()
{
  uint64_t v1 = sub_100007764(&qword_10071FF30);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100025A64(uint64_t a1)
{
  uint64_t v3 = *(void *)(sub_100007764(&qword_10071FF30) - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_100024D50(a1, v4);
}

uint64_t sub_100025AD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100025AE8()
{
  return swift_release();
}

uint64_t sub_100025AF0()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100025B30(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  long long v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *long long v7 = v2;
  v7[1] = sub_100025D64;
  return sub_10001DA08(a1, v4, v5, v6);
}

id sub_100025BE4(id *a1)
{
  uint64_t v3 = *(void **)(v1 + 16);

  *a1 = v3;
  return v3;
}

uint64_t sub_100025C28(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_100025C64(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100025CAC()
{
  unint64_t result = qword_10071FF70;
  if (!qword_10071FF70)
  {
    sub_100019364((uint64_t *)&unk_100726420);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10071FF70);
  }
  return result;
}

uint64_t sub_100025D08(uint64_t a1)
{
  return a1;
}

unsigned char *sub_100025D34(unsigned char *a1)
{
  return sub_1000259C4(a1);
}

id sub_100025D4C(id *a1)
{
  return sub_100025BE4(a1);
}

ValueMetadata *_s35MobileDocumentReaderDeletionUtilityOMa()
{
  return &_s35MobileDocumentReaderDeletionUtilityON;
}

uint64_t sub_100025D88()
{
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10071FF88 + dword_10071FF88);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000C494;
  return v3();
}

uint64_t sub_100025E28()
{
  uint64_t v1 = type metadata accessor for Logger();
  v0[39] = v1;
  v0[40] = *(void *)(v1 - 8);
  v0[41] = swift_task_alloc();
  return _swift_task_switch(sub_100025EE4, 0, 0);
}

uint64_t sub_100025EE4()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderDeletionUtility attempting to delete data", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 320);
  uint64_t v4 = *(void *)(v0 + 328);
  uint64_t v6 = *(void *)(v0 + 312);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  type metadata accessor for SESKeystore();
  swift_allocObject();
  uint64_t v7 = SESKeystore.init()();
  if (qword_10071F4B0 != -1) {
    swift_once();
  }
  uint64_t v8 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
  uint64_t v9 = (uint64_t)&v8[4];
  uint64_t v10 = v8 + 52;
  os_unfair_lock_lock(v8 + 52);
  sub_1000262B4(v9, (_OWORD *)(v0 + 16));
  os_unfair_lock_unlock(v10);
  uint64_t v11 = *(void *)(v0 + 72);
  swift_retain();
  sub_1000262D0(v0 + 16);
  *(void *)(v0 + 296) = type metadata accessor for MobileDocumentReaderDataContainer();
  *(void *)(v0 + 304) = sub_100026324();
  *(void *)(v0 + 272) = v11;
  type metadata accessor for MobileDocumentReaderAuthenticationStorage();
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 336) = inited;
  *(void *)(inited + 16) = v7;
  sub_10000C6B4((long long *)(v0 + 272), inited + 24);
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v0 + 344) = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_100026130;
  return sub_1001287F8();
}

uint64_t sub_100026130()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10002622C, 0, 0);
}

uint64_t sub_10002622C()
{
  uint64_t v1 = *(void *)(v0 + 336);
  swift_setDeallocating();
  swift_release();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v1 + 24);
  swift_task_dealloc();
  os_log_type_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000262B4@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_10017E7FC(a1, v2, a2);
}

uint64_t sub_1000262D0(uint64_t a1)
{
  return a1;
}

unint64_t sub_100026324()
{
  unint64_t result = qword_10071FF90;
  if (!qword_10071FF90)
  {
    type metadata accessor for MobileDocumentReaderDataContainer();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10071FF90);
  }
  return result;
}

void *sub_10002637C()
{
  uint64_t v0 = sub_1000263C4();
  type metadata accessor for IdentityBiomeBackgroundActivityProvider();
  swift_allocObject();
  unint64_t result = sub_1000265B0((uint64_t)v0);
  qword_1007600D8 = (uint64_t)result;
  return result;
}

void *sub_1000263C4()
{
  uint64_t v0 = type metadata accessor for IdentityBMUserProofingStreamWrapper();
  uint64_t v1 = swift_allocObject();
  id v2 = [(id)BiomeLibrary() WalletPaymentsCommerce];
  swift_unknownObjectRelease();
  id v3 = [v2 UserProofing];
  swift_unknownObjectRelease();
  id v4 = [v3 Result];
  swift_unknownObjectRelease();
  *(void *)(v1 + 16) = v4;
  type metadata accessor for BMUserProofingEventFactory();
  uint64_t v5 = swift_allocObject();
  id v6 = [objc_allocWithZone((Class)IdentityProofingBiomeDataDeletionManager) init];
  v17[3] = v0;
  v17[4] = &off_1006F8EA0;
  v17[0] = v1;
  type metadata accessor for IdentityProofingBiomeManager();
  uint64_t v7 = (void *)swift_allocObject();
  uint64_t v8 = sub_1000279F4((uint64_t)v17, v0);
  __chkstk_darwin(v8);
  uint64_t v10 = (uint64_t *)((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v11 + 16))(v10);
  uint64_t v12 = *v10;
  uint64_t v15 = v0;
  os_log_type_t v16 = &off_1006F8EA0;
  *(void *)&long long v14 = v12;
  v7[9] = 90;
  sub_10000C6B4(&v14, (uint64_t)(v7 + 2));
  v7[7] = v5;
  v7[8] = v6;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v17);
  return v7;
}

void *sub_1000265B0(uint64_t a1)
{
  id v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[2] = 0xD000000000000018;
  v2[3] = 0x800000010062FB20;
  defaultLogger()();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "IdentityBiomeBackgroundActivityProvider initialized", v10, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v2[4] = a1;
  return v2;
}

uint64_t sub_100026718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[13] = a2;
  v3[14] = a3;
  v3[12] = a1;
  uint64_t v4 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v3[15] = v4;
  v3[16] = *(void *)(v4 - 8);
  v3[17] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[18] = v5;
  v3[19] = *(void *)(v5 - 8);
  v3[20] = swift_task_alloc();
  v3[21] = swift_task_alloc();
  v3[22] = swift_task_alloc();
  return _swift_task_switch(sub_100026854, 0, 0);
}

uint64_t sub_100026854()
{
  v0[23] = os_transaction_create();
  type metadata accessor for DIPAccountManager();
  static DIPAccountManager.sharedInstance.getter();
  sub_10000C728(v0 + 2, v0[5]);
  uint64_t v1 = dispatch thunk of DIPAccountManagerProtocol.primaryAppleAccount()();
  if (v1)
  {
    id v2 = (void *)v1;
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
    static DIPAccountManager.sharedInstance.getter();
    sub_10000C728(v0 + 7, v0[10]);
    char v9 = dispatch thunk of DIPAccountManagerProtocol.isHSA2Enabled(account:)();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 7));
    if (v9)
    {

      type metadata accessor for IdentityProofingDataContext();
      swift_allocObject();
      sub_1000FF820();
      v0[24] = v10;
      uint64_t v19 = v10;
      uint64_t v20 = v0[16];
      uint64_t v30 = v0[17];
      uint64_t v21 = v0[15];
      uint64_t v22 = v0[12];
      uint64_t v23 = v0[13];
      uint64_t v24 = *(void *)(v0[14] + 32);
      Swift::String v25 = (void *)swift_allocObject();
      v0[25] = v25;
      v25[2] = v19;
      v25[3] = v22;
      v25[4] = v23;
      v25[5] = v24;
      uint64_t v26 = swift_allocObject();
      v0[26] = v26;
      *(void *)(v26 + 16) = sub_100027920;
      *(void *)(v26 + 24) = v25;
      uint64_t v27 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
      uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 104);
      swift_retain();
      swift_retain();
      swift_retain();
      v28(v30, v27, v21);
      swift_retain();
      uint64_t v29 = (void *)swift_task_alloc();
      v0[27] = v29;
      *uint64_t v29 = v0;
      v29[1] = sub_100026D14;
      return NSManagedObjectContext.perform<A>(schedule:_:)();
    }
    defaultLogger()();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Skipping biome background activity because account is not HSA2", v13, 2u);
      swift_slowDealloc();
    }
    uint64_t v14 = v0[21];
    uint64_t v15 = v0[18];
    uint64_t v16 = v0[19];

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
  }
  else
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
    defaultLogger()();
    id v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Skipping biome background activity because user is not logged in", v5, 2u);
      swift_slowDealloc();
    }
    uint64_t v6 = v0[22];
    uint64_t v7 = v0[18];
    uint64_t v8 = v0[19];

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t sub_100026D14()
{
  id v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 224) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[16] + 8))(v2[17], v2[15]);
  swift_release();
  if (v0)
  {
    id v3 = sub_100026F28;
  }
  else
  {
    swift_release();
    id v3 = sub_100026E90;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100026E90()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100026F28()
{
  swift_release();
  swift_release();
  uint64_t v2 = v0[19];
  uint64_t v1 = v0[20];
  uint64_t v3 = v0[18];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

void sub_10002701C(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v102 = a3;
  uint64_t v103 = a4;
  uint64_t v101 = a2;
  uint64_t v4 = sub_100007764(&qword_1007239B0);
  __chkstk_darwin(v4 - 8);
  uint64_t v100 = (char *)&v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DIPBackgroundDeferralStatus();
  uint64_t v105 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  char v9 = (char *)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v88 - v10;
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v104 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v88 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v88 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v88 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v88 - v22;
  uint64_t v24 = v106;
  Swift::String v25 = (void *)sub_100101DD8();
  if (v24) {
    return;
  }
  uint64_t v93 = v15;
  unint64_t v94 = v21;
  uint64_t v106 = 0;
  uint64_t v92 = v18;
  uint64_t v96 = v6;
  uint64_t v97 = v11;
  uint64_t v98 = v12;
  uint64_t v99 = v9;
  uint64_t v27 = v104;
  uint64_t v26 = v105;
  if (v25)
  {
    id v95 = v25;
    uint64_t v28 = v97;
    v101();
    uint64_t v29 = v26;
    uint64_t v30 = v26 + 104;
    uint64_t v31 = *(void (**)(void))(v26 + 104);
    uint64_t v32 = v99;
    unsigned int v90 = enum case for DIPBackgroundDeferralStatus.shouldDefer(_:);
    uint64_t v33 = v96;
    uint64_t v91 = v30;
    Swift::String v89 = (void (*)(char *, void, uint64_t))v31;
    v31(v99);
    char v34 = static DIPBackgroundDeferralStatus.== infix(_:_:)();
    uint64_t v37 = *(void (**)(char *, uint64_t))(v29 + 8);
    uint64_t v36 = v29 + 8;
    unint64_t v35 = v37;
    v37(v32, v33);
    v37(v28, v33);
    if (v34) {
      goto LABEL_14;
    }
    uint64_t v41 = v27;
    uint64_t v105 = v36;
    uint64_t v42 = v94;
    defaultLogger()();
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Successfully fetched proofing biome data", v45, 2u);
      swift_slowDealloc();
    }

    os_log_type_t v48 = *(void (**)(char *, uint64_t))(v41 + 8);
    uint64_t v47 = v41 + 8;
    uint64_t v46 = v48;
    v48(v42, v98);
    id v49 = [v95 optInDate];
    if (v49)
    {
      uint64_t v50 = v49;
      uint64_t v51 = v35;
      uint64_t v52 = (uint64_t)v100;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v53 = type metadata accessor for Date();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v52, 0, 1, v53);
    }
    else
    {
      uint64_t v51 = v35;
      uint64_t v54 = type metadata accessor for Date();
      uint64_t v52 = (uint64_t)v100;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v100, 1, 1, v54);
    }
    Swift::Bool v55 = v99;
    uint64_t v56 = v106;
    char v57 = sub_1000F816C(v52);
    uint64_t v58 = sub_100027994(v52);
    if (v56) {
      goto LABEL_14;
    }
    if (v57)
    {
      sub_1000F6BFC();

      return;
    }
    id v59 = v46;
    uint64_t v106 = 0;
    Swift::String v60 = v97;
    ((void (*)(uint64_t))v101)(v58);
    v89(v55, v90, v33);
    char v61 = static DIPBackgroundDeferralStatus.== infix(_:_:)();
    v51(v55, v33);
    v51(v60, v33);
    if (v61)
    {
LABEL_14:

      return;
    }
    id v62 = v95;
    if ([v95 isDonated])
    {
      uint64_t v63 = v93;
      defaultLogger()();
      Swift::Bool v64 = Logger.logObject.getter();
      os_log_type_t v65 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v64, v65))
      {
        Swift::String v66 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)Swift::String v66 = 0;
        _os_log_impl((void *)&_mh_execute_header, v64, v65, "The biome data has already been donated.", v66, 2u);
        swift_slowDealloc();
      }

      v59(v63, v98);
      return;
    }
    uint64_t v104 = v47;
    id v67 = [v62 proofingSessionID];
    if (v67)
    {
      os_log_type_t v68 = v67;
      id v69 = v51;
      uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v72 = v71;

      id v73 = [v62 proofingDecision];
      if (!v73)
      {
        swift_bridgeObjectRelease();

        return;
      }
      os_log_type_t v74 = v73;
      uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      Swift::String v77 = v76;

      v107._countAndFlagsBits = v75;
      v107._object = v77;
      unint64_t v78 = sub_100483200(v107);
      if (v78 == 6)
      {
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
      uint64_t v84 = v78;
      uint64_t v104 = v70;
      uint64_t v85 = v97;
      v101();
      uint64_t v86 = v96;
      v89(v55, v90, v96);
      char v87 = static DIPBackgroundDeferralStatus.== infix(_:_:)();
      v69(v55, v86);
      v69(v85, v86);
      if ((v87 & 1) == 0) {
        sub_1000F5BA4(v104, v72, v84);
      }

      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v79 = v59;
      uint64_t v80 = v92;
      defaultLogger()();
      Swift::String v81 = Logger.logObject.getter();
      os_log_type_t v82 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v81, v82))
      {
        Swift::String v83 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)Swift::String v83 = 0;
        _os_log_impl((void *)&_mh_execute_header, v81, v82, "Proofing Session ID doesn't exist in the proofing biome meta data. Exiting...", v83, 2u);
        swift_slowDealloc();
      }

      v79(v80, v98);
    }
  }
  else
  {
    defaultLogger()();
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "No proofing biome data exists. Exiting...", v40, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v27 + 8))(v23, v98);
  }
}

uint64_t sub_100027874()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IdentityBiomeBackgroundActivityProvider()
{
  return self;
}

uint64_t sub_1000278D8()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_100027920()
{
  sub_10002701C(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_100027940()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100027978()
{
  return sub_100430070(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_100027994(uint64_t a1)
{
  uint64_t v2 = sub_100007764(&qword_1007239B0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000279F4(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_100027A44()
{
  return 1;
}

Swift::Int sub_100027A4C()
{
  return Hasher._finalize()();
}

void sub_100027A90()
{
}

Swift::Int sub_100027AB8()
{
  return Hasher._finalize()();
}

uint64_t sub_100027AF8()
{
  return 0x6574707972636E65;
}

uint64_t sub_100027B1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6574707972636E65 && a2 == 0xED00006174614464)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_100027BD8()
{
  return 0;
}

void sub_100027BE4(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_100027BF0(uint64_t a1)
{
  unint64_t v2 = sub_10002D440();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100027C2C(uint64_t a1)
{
  unint64_t v2 = sub_10002D440();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100027C68@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = a2;
  uint64_t v4 = sub_100007764(&qword_100720298);
  uint64_t v14 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v17 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100007764(&qword_100720370);
  uint64_t v16 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DocUploadHandler.DocUploadResult();
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_10002D440();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    sub_10002D494(&qword_100720378);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v6);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v17, v4);
    sub_10002D4DC((uint64_t)v11, v15);
  }
  return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
}

uint64_t sub_100027ED8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100027C68(a1, a2);
}

uint64_t sub_100027EF0(void *a1)
{
  uint64_t v2 = sub_100007764(&qword_100720358);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_10002D440();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_100007764(&qword_100720298);
  sub_10002D494(&qword_100720368);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unsigned char *sub_100028054(unsigned char *result)
{
  *uint64_t result = 1;
  return result;
}

uint64_t sub_100028064(void *a1)
{
  if (*(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

uint64_t sub_1000280E0(uint64_t a1, uint64_t a2)
{
  swift_retain();
  unint64_t v3 = swift_bridgeObjectRetain();
  unint64_t v4 = sub_10002A454(v3, a2);
  char v6 = v5;
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  if ((v6 & 1) == 0)
  {
    sub_1004E7330(v4);
    return swift_release();
  }
  return result;
}

void sub_100028160(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  if (!((unint64_t)*a1 >> 62))
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v4) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease_n();
    return;
  }
LABEL_13:
  swift_bridgeObjectRetain_n();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v4) {
    goto LABEL_11;
  }
LABEL_3:
  uint64_t v5 = 4;
  while (1)
  {
    uint64_t v6 = v5 - 4;
    if ((v3 & 0xC000000000000001) != 0)
    {
      uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v6, 1)) {
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v7 = *(void *)(v3 + 8 * v5);
      swift_retain();
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v6, 1))
      {
LABEL_12:
        __break(1u);
        goto LABEL_13;
      }
    }
    uint64_t v9 = *(os_unfair_lock_s **)(v7 + 16);
    uint64_t v10 = v9 + 4;
    uint64_t v11 = v9 + 5;
    os_unfair_lock_lock(v9 + 5);
    sub_100028054(v10);
    if (v2) {
      break;
    }
    uint64_t v2 = 0;
    os_unfair_lock_unlock(v11);
    swift_release();
    ++v5;
    if (v8 == v4) {
      goto LABEL_11;
    }
  }
  os_unfair_lock_unlock(v11);
  __break(1u);
}

uint64_t sub_1000282A0(unint64_t a1, char *a2, uint64_t a3, void (*a4)(void, unint64_t, uint64_t), uint64_t a5, uint64_t a6)
{
  sub_10002AAC8(a1, a2, a3, a4, a5, a6);

  return swift_release();
}

void sub_1000282D8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "DocUploadHandler.cancelPendingUploads: Signaling cancel.", v8, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v9 = *(os_unfair_lock_s **)(*(void *)(v1 + 16) + 16);
  uint64_t v10 = (uint64_t *)&v9[4];
  uint64_t v11 = v9 + 6;
  os_unfair_lock_lock(v9 + 6);
  sub_100028160(v10);
  os_unfair_lock_unlock(v11);
}

uint64_t sub_10002844C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v59 = a6;
  uint64_t v60 = a7;
  uint64_t v57 = a2;
  uint64_t v58 = a5;
  uint64_t v53 = a3;
  unint64_t v54 = a4;
  uint64_t v56 = a1;
  uint64_t v67 = type metadata accessor for HPKEEncryptionParamsAlgorithmIdentifier();
  uint64_t v65 = *(void *)(v67 - 8);
  uint64_t v55 = *(void *)(v65 + 64);
  __chkstk_darwin(v67);
  Swift::String v66 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for EncryptedMessageEntity();
  uint64_t v63 = *(void *)(v9 - 8);
  uint64_t v64 = v9;
  uint64_t v52 = *(void *)(v63 + 64);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = v11;
  uint64_t v12 = sub_100007764(&qword_10071FEE0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v15 - 8);
  uint64_t v16 = type metadata accessor for DIPSignpost();
  uint64_t v61 = *(void *)(v16 - 8);
  uint64_t v62 = v16;
  uint64_t v17 = *(void *)(v61 + 64);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v46 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v46 - v19;
  static DaemonSignposts.uploadAssetsCloudKitRequest.getter();
  uint64_t v51 = v20;
  DIPSignpost.init(_:)();
  type metadata accessor for DocUploadHandler.UploadRequestToken();
  uint64_t v21 = swift_allocObject();
  sub_100007764((uint64_t *)&unk_10071FF50);
  uint64_t v22 = swift_allocObject();
  *(_DWORD *)(v22 + 20) = 0;
  *(unsigned char *)(v22 + 16) = 0;
  *(void *)(v21 + 16) = v22;
  uint64_t v48 = v21;
  uint64_t v23 = *(os_unfair_lock_s **)(*(void *)(v7 + 16) + 16);
  uint64_t v24 = v23 + 4;
  Swift::String v25 = v23 + 6;
  os_unfair_lock_lock(v23 + 6);
  sub_10002C4B4(v24);
  os_unfair_lock_unlock(v25);
  uint64_t v50 = v14;
  static TaskPriority.userInitiated.getter();
  uint64_t v26 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v14, 0, 1, v26);
  uint64_t v27 = v61;
  (*(void (**)(char *, char *, uint64_t))(v61 + 16))((char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v20, v16);
  uint64_t v28 = v63;
  (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v11, v53, v64);
  uint64_t v29 = v65;
  (*(void (**)(char *, unint64_t, uint64_t))(v65 + 16))(v66, v54, v67);
  uint64_t v30 = v27;
  unint64_t v31 = (*(unsigned __int8 *)(v27 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
  unint64_t v32 = (v17 + v31 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v33 = (v32 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v34 = (*(unsigned __int8 *)(v28 + 80) + v33 + 8) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
  unint64_t v54 = (v52 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v35 = (*(unsigned __int8 *)(v29 + 80) + v54 + 8) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  unint64_t v36 = (v55 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v37 = (char *)swift_allocObject();
  *((void *)v37 + 2) = 0;
  *((void *)v37 + 3) = 0;
  uint64_t v38 = v48;
  *((void *)v37 + 4) = v49;
  *((void *)v37 + 5) = v38;
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))(&v37[v31], v46, v62);
  uint64_t v39 = v57;
  *(void *)&v37[v32] = v56;
  *(void *)&v37[v33] = v39;
  (*(void (**)(char *, char *, uint64_t))(v63 + 32))(&v37[v34], v47, v64);
  uint64_t v40 = v58;
  *(void *)&v37[v54] = v58;
  (*(void (**)(char *, char *, uint64_t))(v65 + 32))(&v37[v35], v66, v67);
  uint64_t v41 = &v37[v36];
  uint64_t v42 = v60;
  *(void *)uint64_t v41 = v59;
  *((void *)v41 + 1) = v42;
  swift_retain();
  swift_retain();
  swift_retain();
  id v43 = v40;
  swift_retain();
  uint64_t v44 = (uint64_t)v50;
  sub_100029844((uint64_t)v50, (uint64_t)&unk_100720288, (uint64_t)v37);
  swift_release();
  swift_release();
  sub_10000C6CC(v44, &qword_10071FEE0);
  return (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v51, v62);
}

uint64_t sub_10002899C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 232) = v15;
  *(_OWORD *)(v8 + 216) = v14;
  *(_OWORD *)(v8 + 200) = v13;
  *(void *)(v8 + 184) = a7;
  *(void *)(v8 + 192) = a8;
  *(void *)(v8 + 168) = a5;
  *(void *)(v8 + 176) = a6;
  *(void *)(v8 + 160) = a4;
  *(void *)(v8 + 240) = type metadata accessor for DocUploadHandler.DocUploadResult();
  *(void *)(v8 + 248) = swift_task_alloc();
  uint64_t v9 = sub_100007764(&qword_100720298);
  *(void *)(v8 + 256) = v9;
  *(void *)(v8 + 264) = *(void *)(v9 - 8);
  *(void *)(v8 + 272) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Logger();
  *(void *)(v8 + 280) = v10;
  *(void *)(v8 + 288) = *(void *)(v10 - 8);
  *(void *)(v8 + 296) = swift_task_alloc();
  *(void *)(v8 + 304) = swift_task_alloc();
  *(void *)(v8 + 312) = swift_task_alloc();
  *(void *)(v8 + 320) = swift_task_alloc();
  *(void *)(v8 + 328) = swift_task_alloc();
  return _swift_task_switch(sub_100028B40, 0, 0);
}

uint64_t sub_100028B40()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "DocUploadHandler.startUploadTask: Saving assets to CloudKit.", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[41];
  uint64_t v5 = v0[35];
  uint64_t v6 = v0[36];
  uint64_t v7 = v0[21];

  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[42] = v8;
  v0[43] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v8(v4, v5);
  swift_beginAccess();
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_1004EB388(v9);
  v0[44] = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = type metadata accessor for DocUploadHandler.UploadRequestToken();
  v0[2] = v7;
  v0[5] = v11;
  v0[6] = &off_1006F4A50;
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, char, char, uint64_t))((char *)&dword_1007202A0 + dword_1007202A0);
  swift_retain();
  uint64_t v12 = (void *)swift_task_alloc();
  v0[45] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100028D14;
  uint64_t v13 = v0[24];
  return v15((uint64_t)v10, v13, 1, 1, (uint64_t)(v0 + 2));
}

uint64_t sub_100028D14()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 368) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    uint64_t v3 = sub_100029544;
  }
  else
  {
    sub_10000C6CC(v2 + 16, (uint64_t *)&unk_1007271E0);
    uint64_t v3 = sub_100028E4C;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100028E4C()
{
  uint64_t v64 = v0;
  uint64_t v61 = v0 + 7;
  v1._object = (void *)0x800000010062FE30;
  v2._countAndFlagsBits = 0x3532616566656666;
  v2._object = (void *)0xE800000000000000;
  v1._countAndFlagsBits = 0xD00000000000003BLL;
  logMilestone(tag:description:)(v2, v1);
  defaultLogger()();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DocUploadHandler.startUploadTask: Creating encrypted message.", v5, 2u);
    swift_slowDealloc();
  }
  uint64_t v6 = (void (*)(uint64_t, uint64_t))v0[42];
  uint64_t v7 = v0[40];
  uint64_t v9 = v0[34];
  uint64_t v8 = v0[35];
  uint64_t v10 = v0[26];
  uint64_t v55 = v0[27];
  uint64_t v58 = v0[46];
  uint64_t v11 = v0[25];

  v6(v7, v8);
  uint64_t v12 = type metadata accessor for TopekaHPKEEncryptor();
  uint64_t v13 = swift_allocObject();
  v0[10] = v12;
  v0[11] = &off_1007055C0;
  v0[7] = v13;
  uint64_t v14 = v58;
  sub_10042B0AC(0, v11, v10, v55, v61, v9);
  if (v58)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v61);
    defaultLogger()();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    BOOL v29 = os_log_type_enabled(v27, v28);
    uint64_t v30 = (void (*)(uint64_t, uint64_t))v0[42];
    uint64_t v31 = v0[37];
    uint64_t v32 = v0[35];
    if (v29)
    {
      uint64_t v59 = v0[37];
      uint64_t v56 = (void (*)(uint64_t, uint64_t))v0[42];
      unint64_t v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v63 = swift_slowAlloc();
      *(_DWORD *)unint64_t v33 = 136315138;
      swift_getErrorValue();
      uint64_t v34 = Error.localizedDescription.getter();
      v0[19] = sub_100110D58(v34, v35, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "DocUploadHandler.startUploadTask: Failed Either Saving or creating Encrypted Message, calling completion callback with error: %s", v33, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v56(v59, v32);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      v30(v31, v32);
    }
    unint64_t v36 = (void (*)(void, unint64_t, uint64_t))v0[28];
    swift_errorRetain();
    v36(0, 0xF000000000000000, v14);
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    uint64_t v16 = v0[33];
    uint64_t v15 = v0[34];
    uint64_t v18 = v0[31];
    uint64_t v17 = v0[32];
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v61);
    v19._countAndFlagsBits = 0xD00000000000003FLL;
    v19._object = (void *)0x800000010062FE70;
    v20._countAndFlagsBits = 0x3436323964633733;
    v20._object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v20, v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v18, v15, v17);
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    defaultLogger()();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "DocUploadHandler.startUploadTask: Attemping to encode results into JSON.", v23, 2u);
      swift_slowDealloc();
    }
    uint64_t v24 = (void (*)(uint64_t, uint64_t))v0[42];
    uint64_t v25 = v0[39];
    uint64_t v26 = v0[35];

    v24(v25, v26);
    sub_10002D3F8(&qword_1007202A8, (void (*)(uint64_t))type metadata accessor for DocUploadHandler.DocUploadResult);
    uint64_t v42 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    unint64_t v44 = v43;
    defaultLogger()();
    uint64_t v45 = Logger.logObject.getter();
    uint64_t v46 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v45, (os_log_type_t)v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v46, "DocUploadHandler.startUploadTask: Success: Calling completion callback with encoded JSON.", v47, 2u);
      swift_slowDealloc();
    }
    uint64_t v48 = (void (*)(uint64_t, uint64_t))v0[42];
    uint64_t v49 = v0[38];
    uint64_t v50 = v0[35];
    uint64_t v51 = v0[33];
    uint64_t v60 = v0[32];
    uint64_t v62 = v0[34];
    uint64_t v57 = v0[31];
    unint64_t v54 = (void (*)(uint64_t, unint64_t, void))v0[28];

    v48(v49, v50);
    v52._countAndFlagsBits = 0xD000000000000048;
    v52._object = (void *)0x800000010062FEB0;
    v53._countAndFlagsBits = 0x6530636335323062;
    v53._object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v53, v52);
    sub_10002CEB0(v42, v44);
    v54(v42, v44, 0);
    sub_10000C5F4(v42, v44);
    swift_release();
    sub_10000C5F4(v42, v44);
    sub_10002CE54(v57);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v62, v60);
  }
  uint64_t v37 = *(os_unfair_lock_s **)(*(void *)(v0[20] + 16) + 16);
  uint64_t v38 = (uint64_t)&v37[4];
  uint64_t v39 = v37 + 6;
  os_unfair_lock_lock(v37 + 6);
  sub_10002CE38(v38);
  os_unfair_lock_unlock(v39);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v40 = (uint64_t (*)(void))v0[1];
  return v40();
}

uint64_t sub_100029544()
{
  Swift::String v20 = v0;
  sub_10000C6CC((uint64_t)(v0 + 2), (uint64_t *)&unk_1007271E0);
  uint64_t v1 = v0[46];
  defaultLogger()();
  swift_errorRetain();
  swift_errorRetain();
  Swift::String v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v18 = (void (*)(uint64_t, uint64_t))v0[42];
    uint64_t v16 = v0[35];
    uint64_t v17 = v0[37];
    os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v4 = 136315138;
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    v0[19] = sub_100110D58(v5, v6, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "DocUploadHandler.startUploadTask: Failed Either Saving or creating Encrypted Message, calling completion callback with error: %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v18(v17, v16);
  }
  else
  {
    uint64_t v7 = (void (*)(uint64_t, uint64_t))v0[42];
    uint64_t v8 = v0[37];
    uint64_t v9 = v0[35];
    swift_errorRelease();
    swift_errorRelease();

    v7(v8, v9);
  }
  uint64_t v10 = (void (*)(void, unint64_t, uint64_t))v0[28];
  swift_errorRetain();
  v10(0, 0xF000000000000000, v1);
  swift_errorRelease();
  swift_errorRelease();
  uint64_t v11 = *(os_unfair_lock_s **)(*(void *)(v0[20] + 16) + 16);
  uint64_t v12 = (uint64_t)&v11[4];
  uint64_t v13 = v11 + 6;
  os_unfair_lock_lock(v11 + 6);
  sub_10002CE38(v12);
  os_unfair_lock_unlock(v13);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_100029844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007764(&qword_10071FEE0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002C95C(a1, (uint64_t)v8);
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_10000C6CC((uint64_t)v8, &qword_10071FEE0);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v13 = v12;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v11 = 0;
  uint64_t v13 = 0;
LABEL_6:
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  if (v13 | v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    v16[2] = v11;
    v16[3] = v13;
  }
  return swift_task_create();
}

uint64_t sub_100029A30@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v22 = a3;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  uint64_t v24 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v23 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v25 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100007764(&qword_100720278);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  EncryptedMessageEntity.init(rawValue:)();
  uint64_t v13 = type metadata accessor for EncryptedMessageEntity();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(v22, v12, v13);
  }
  uint64_t v20 = a1;
  uint64_t v21 = v8;
  uint64_t v22 = v7;
  sub_10000C6CC((uint64_t)v12, &qword_100720278);
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v26 = sub_100110D58(v20, a2, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "DocUploadHandler.mapRecipientString: Failure mapping recipient string (%s) to an entity.", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v21 + 8))(v25, v22);
  (*(void (**)(char *, void, uint64_t))(v24 + 104))(v23, enum case for DIPError.Code.docUploadUnrecognizedRecipient(_:), v5);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10002D3F8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  return swift_willThrow();
}

uint64_t sub_100029EB4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for DIPError.Code();
  uint64_t v28 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v29 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100007764(&qword_100720270);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v26 = v6;
    uint64_t v27 = v8;
    swift_bridgeObjectRetain_n();
    HPKEEncryptionParamsAlgorithmIdentifier.init(rawValue:)();
    uint64_t v15 = type metadata accessor for HPKEEncryptionParamsAlgorithmIdentifier();
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
    {
      sub_10000C6CC((uint64_t)v14, &qword_100720270);
      defaultLogger()();
      swift_bridgeObjectRetain();
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        uint64_t v31 = swift_slowAlloc();
        *(_DWORD *)uint64_t v19 = 136315138;
        uint64_t v25 = v19 + 4;
        swift_bridgeObjectRetain();
        uint64_t v30 = sub_100110D58(a1, a2, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "DocUploadHandler.mapEncryptionVersionString: Failure mapping encryption string (%s) to an algorithm identifier.", v19, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v9);
      v23._countAndFlagsBits = 0xD00000000000004BLL;
      v23._object = (void *)0x800000010062FDA0;
      v24._countAndFlagsBits = 0x6537383763616665;
      v24._object = (void *)0xE800000000000000;
      logMilestone(tag:description:)(v24, v23);
      (*(void (**)(char *, void, uint64_t))(v28 + 104))(v27, enum case for DIPError.Code.docUploadUnrecognizedEncryptionAlgorithm(_:), v26);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10002D3F8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      return swift_willThrow();
    }
    else
    {
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 32))(a3, v14, v15);
    }
  }
  else
  {
    uint64_t v20 = enum case for HPKEEncryptionParamsAlgorithmIdentifier.HPKE_KW_v1(_:);
    uint64_t v21 = type metadata accessor for HPKEEncryptionParamsAlgorithmIdentifier();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 104))(a3, v20, v21);
  }
}

uint64_t sub_10002A3B0()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DocUploadHandler()
{
  return self;
}

uint64_t type metadata accessor for DocUploadHandler.UploadRequestToken()
{
  return self;
}

uint64_t type metadata accessor for DocUploadHandler.UploadRequestTracker()
{
  return self;
}

uint64_t sub_10002A454(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_13;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v4)
  {
    uint64_t v5 = 0;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        swift_unknownObjectRelease();
        if (v6 == a2) {
          return v5;
        }
      }
      else if (*(void *)(a1 + 8 * v5 + 32) == a2)
      {
        return v5;
      }
      if (__OFADD__(v5, 1)) {
        break;
      }
      if (++v5 == v4) {
        return 0;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return 0;
}

void sub_10002A544(unint64_t a1, uint64_t a2, int a3)
{
  int v44 = a3;
  uint64_t v43 = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  uint64_t v37 = *(void *)(v5 - 8);
  uint64_t v38 = v5;
  __chkstk_darwin(v5);
  uint64_t v39 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(__objc2_prop **)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v40 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v35 - v11;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  BOOL v15 = os_log_type_enabled(v13, v14);
  uint64_t v41 = v7;
  if (v15)
  {
    uint64_t v42 = v8;
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 134218240;
    unint64_t v17 = a1 >> 62;
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v18 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    id v45 = (id)v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 1024;
    LODWORD(v45) = v44 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "DocUploadHandler.prepareAssetsForUpload: Preparing %ld for upload with base64 encoding set to : %{BOOL}d", (uint8_t *)v16, 0x12u);
    swift_slowDealloc();

    uint64_t v7 = v41;
    uint64_t v8 = v42;
  }
  else
  {
    unint64_t v17 = a1 >> 62;

    swift_bridgeObjectRelease_n();
  }
  attr = v8->attr;
  p_attr = (__objc2_prop *)&v8->attr;
  uint64_t v19 = attr;
  ((void (*)(char *, uint64_t))attr)(v12, v7);
  if (!v17)
  {
    uint64_t v22 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v22) {
      goto LABEL_8;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    return;
  }
LABEL_22:
  swift_bridgeObjectRetain();
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
  if (!v22) {
    goto LABEL_16;
  }
LABEL_8:
  unint64_t v36 = v19;
  uint64_t v42 = p_attr;
  uint64_t v23 = 4;
  p_attr = &stru_10071A000;
  while (1)
  {
    if ((a1 & 0xC000000000000001) != 0) {
      Swift::String v24 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      Swift::String v24 = (char *)*(id *)(a1 + 8 * v23);
    }
    uint64_t v19 = v24;
    uint64_t v25 = v23 - 3;
    if (__OFADD__(v23 - 4, 1))
    {
      __break(1u);
      goto LABEL_22;
    }
    id v26 = [v24 type];
    if ((unint64_t)v26 > 3) {
      break;
    }
    sub_100429340((void (*)(void, void, void))v19, v44 & 1, (uint64_t)v26);

    if (!v3)
    {
      ++v23;
      if (v25 != v22) {
        continue;
      }
    }
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  uint64_t v27 = v40;
  defaultLogger()();
  uint64_t v28 = v19;
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 134217984;
    id v45 = [v28 type];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v29, v30, "DocUploadHandler.prepareAssetsForUpload: Couldn't map DIAssetType (%ld) to UploadAsset.AssetType", v31, 0xCu);
    swift_slowDealloc();
  }
  else
  {

    uint64_t v29 = v28;
  }
  uint64_t v32 = v38;
  unint64_t v33 = v39;
  uint64_t v34 = v37;

  ((void (*)(char *, uint64_t))v36)(v27, v41);
  (*(void (**)(char *, void, uint64_t))(v34 + 104))(v33, enum case for DIPError.Code.docUploadUnrecognizedAssetType(_:), v32);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10002D3F8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
}

uint64_t sub_10002AAC8(unint64_t a1, char *a2, uint64_t a3, void (*a4)(void, unint64_t, uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v151 = a3;
  uint64_t v155 = type metadata accessor for HPKESuiteKwV1();
  uint64_t v154 = *(void *)(v155 - 8);
  __chkstk_darwin(v155);
  Swift::String v153 = (char *)&v148 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v157 = type metadata accessor for DIPOIDVerifier();
  uint64_t v156 = *(void *)(v157 - 8);
  __chkstk_darwin(v157);
  uint64_t v13 = (char *)&v148 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v161 = type metadata accessor for DIPCertUsage();
  uint64_t v160 = *(void *)(v161 - 8);
  __chkstk_darwin(v161);
  Swift::Bool v162 = (char *)&v148 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v166 = type metadata accessor for HPKEEncryptionParamsAlgorithmIdentifier();
  uint64_t v169 = *(void *)(v166 - 8);
  uint64_t v15 = __chkstk_darwin(v166);
  uint64_t v159 = (char *)&v148 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  unint64_t v167 = (unint64_t)&v148 - v17;
  uint64_t v173 = type metadata accessor for EncryptedMessageEntity();
  uint64_t v175 = *(void *)(v173 - 8);
  uint64_t v18 = __chkstk_darwin(v173);
  id v164 = (char *)&v148 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v178 = (uint64_t)&v148 - v20;
  uint64_t v172 = type metadata accessor for DIPError.Code();
  unint64_t v171 = *(void *)(v172 - 8);
  __chkstk_darwin(v172);
  Swift::Bool v174 = (char *)&v148 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v22 - 8);
  uint64_t v23 = type metadata accessor for DIPSignpost();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v176 = v23;
  uint64_t v177 = v24;
  uint64_t v25 = __chkstk_darwin(v23);
  Swift::Bool v150 = (char *)&v148 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v149 = v26;
  __chkstk_darwin(v25);
  v179 = (char *)&v148 - v27;
  uint64_t v28 = type metadata accessor for Logger();
  uint64_t v184 = *(void *)(v28 - 8);
  uint64_t v185 = v28;
  uint64_t v29 = __chkstk_darwin(v28);
  id v152 = (char *)&v148 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v29);
  Swift::Bool v158 = (char *)&v148 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  Swift::String v165 = (char *)&v148 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v163 = (char *)&v148 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  id v168 = (char *)&v148 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v41 = (char *)&v148 - v40;
  uint64_t v42 = __chkstk_darwin(v39);
  int v44 = (char *)&v148 - v43;
  uint64_t v45 = __chkstk_darwin(v42);
  Swift::Bool v170 = (char *)&v148 - v46;
  __chkstk_darwin(v45);
  uint64_t v48 = (char *)&v148 - v47;
  uint64_t v49 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))swift_allocObject();
  *((void *)v49 + 2) = a4;
  *((void *)v49 + 3) = a5;
  uint64_t v181 = a5;
  uint64_t v182 = v49;
  *((void *)v49 + 4) = a6;
  swift_retain();
  defaultLogger()();
  uint64_t v50 = Logger.logObject.getter();
  os_log_type_t v51 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v50, v51))
  {
    Swift::String v52 = (uint8_t *)swift_slowAlloc();
    v183 = v44;
    *(_WORD *)Swift::String v52 = 0;
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "DocUploadHandler.uploadAssets: entered.", v52, 2u);
    int v44 = v183;
    swift_slowDealloc();
  }

  uint64_t v53 = v184 + 8;
  v183 = *(char **)(v184 + 8);
  ((void (*)(char *, uint64_t))v183)(v48, v185);
  Swift::String v180 = a4;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v54 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v54 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v54)
  {
    uint64_t v172 = (uint64_t)v13;
    unint64_t v171 = a1;
    static DaemonSignposts.uploadAssetsAPI.getter();
    DIPSignpost.init(_:)();
    defaultLogger()();
    uint64_t v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v57 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v57 = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "DocUploadHandler.uploadAssets: Mapping recipient string to EncryptedMessageEntity", v57, 2u);
      swift_slowDealloc();
    }

    uint64_t v58 = (void (*)(char *, uint64_t))v183;
    ((void (*)(char *, uint64_t))v183)(v44, v185);
    id v59 = [a2 recipient];
    uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v62 = v61;

    uint64_t v63 = v178;
    sub_100029A30(v60, v62, v178);
    Swift::Bool v170 = a2;
    Swift::Bool v174 = v41;
    uint64_t v184 = v53;
    swift_bridgeObjectRelease();
    id v73 = v168;
    defaultLogger()();
    uint64_t v74 = v175;
    uint64_t v75 = v164;
    uint64_t v76 = v173;
    (*(void (**)(char *, uint64_t, uint64_t))(v175 + 16))(v164, v63, v173);
    Swift::String v77 = Logger.logObject.getter();
    os_log_type_t v78 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v77, v78))
    {
      uint64_t v79 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v186 = swift_slowAlloc();
      *(_DWORD *)uint64_t v79 = 136315138;
      uint64_t v80 = EncryptedMessageEntity.rawValue.getter();
      uint64_t v189 = sub_100110D58(v80, v81, (uint64_t *)&v186);
      uint64_t v82 = v173;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      id v164 = *(char **)(v74 + 8);
      ((void (*)(char *, uint64_t))v164)(v75, v82);
      _os_log_impl((void *)&_mh_execute_header, v77, v78, "DocUploadHandler.uploadAssets: recipientString mapped to %s", v79, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      ((void (*)(char *, uint64_t))v183)(v168, v185);
    }
    else
    {
      id v164 = *(char **)(v74 + 8);
      ((void (*)(char *, uint64_t))v164)(v75, v76);

      v58(v73, v185);
    }
    uint64_t v83 = v166;
    uint64_t v84 = v169;
    uint64_t v85 = v165;
    uint64_t v86 = v163;
    defaultLogger()();
    char v87 = Logger.logObject.getter();
    os_log_type_t v88 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v87, v88))
    {
      Swift::String v89 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v89 = 0;
      _os_log_impl((void *)&_mh_execute_header, v87, v88, "DocUploadHandler.uploadAssets: Mapping encryptionVersion string to HPKEEncryptionParamsAlgorithmIdentifier", v89, 2u);
      swift_slowDealloc();
    }

    ((void (*)(char *, uint64_t))v183)(v86, v185);
    id v90 = [v170 encryptionVersion];
    if (v90)
    {
      uint64_t v91 = v90;
      uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v94 = v93;
    }
    else
    {
      uint64_t v92 = 0;
      unint64_t v94 = 0;
    }
    unint64_t v95 = v167;
    sub_100029EB4(v92, v94, v167);
    swift_bridgeObjectRelease();
    defaultLogger()();
    uint64_t v96 = v159;
    (*(void (**)(char *, unint64_t, uint64_t))(v84 + 16))(v159, v95, v83);
    uint64_t v97 = Logger.logObject.getter();
    uint64_t v98 = v83;
    os_log_type_t v99 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v97, v99))
    {
      uint64_t v100 = v96;
      uint64_t v101 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v186 = swift_slowAlloc();
      *(_DWORD *)uint64_t v101 = 136315138;
      uint64_t v102 = HPKEEncryptionParamsAlgorithmIdentifier.rawValue.getter();
      uint64_t v189 = sub_100110D58(v102, v103, (uint64_t *)&v186);
      uint64_t v104 = v185;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v105 = *(void (**)(char *, uint64_t))(v169 + 8);
      v105(v100, v98);
      _os_log_impl((void *)&_mh_execute_header, v97, v99, "DocUploadHandler.uploadAssets: Encryption Version maps to %s", v101, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v106 = v165;
      uint64_t v107 = v104;
    }
    else
    {
      uint64_t v105 = *(void (**)(char *, uint64_t))(v84 + 8);
      v105(v96, v98);

      uint64_t v106 = v85;
      uint64_t v107 = v185;
    }
    ((void (*)(char *, uint64_t))v183)(v106, v107);
    Swift::Int_optional v108 = v162;
    Swift::Int_optional v109 = v158;
    defaultLogger()();
    Swift::Int_optional v110 = Logger.logObject.getter();
    os_log_type_t v111 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v110, v111))
    {
      Swift::Int_optional v112 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::Int_optional v112 = 0;
      _os_log_impl((void *)&_mh_execute_header, v110, v111, "DocUploadHandler.uploadAssets: Transforming certificate chain.", v112, 2u);
      Swift::Int_optional v108 = v162;
      swift_slowDealloc();
    }

    ((void (*)(char *, uint64_t))v183)(v109, v185);
    id v113 = [v170 certificateChain];
    static Array._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, void, uint64_t))(v160 + 104))(v108, enum case for DIPCertUsage.inoEncryption(_:), v161);
    decodeCertificateChain(fromDER:)();
    uint64_t v114 = v172;
    DIPOIDVerifier.init()();
    Swift::Int_optional v123 = (void *)DIPOIDVerifier.verifyChain(_:forUsage:)();
    (*(void (**)(uint64_t, uint64_t))(v156 + 8))(v114, v157);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v160 + 8))(v108, v161);
    swift_bridgeObjectRelease();
    id v124 = v153;
    HPKESuiteKwV1.init(pkISm:info:)();
    uint64_t v125 = v155;
    uint64_t v187 = v155;
    uint64_t v188 = &protocol witness table for HPKESuiteKwV1;
    Swift::Bool v126 = sub_10002C2D8((uint64_t *)&v186);
    (*(void (**)(uint64_t *, char *, uint64_t))(v154 + 16))(v126, v124, v125);
    type metadata accessor for CloudKitUploadBuilder();
    uint64_t v127 = swift_allocObject();
    *(void *)(v127 + 16) = sub_10015CB4C((uint64_t)_swiftEmptyArrayStorage);
    *(void *)(v127 + 24) = sub_10015CB58((uint64_t)_swiftEmptyArrayStorage);
    sub_10000C6B4(&v186, v127 + 32);
    id v128 = v152;
    defaultLogger()();
    Swift::String v129 = Logger.logObject.getter();
    os_log_type_t v130 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v129, v130))
    {
      uint64_t v131 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v131 = 0;
      _os_log_impl((void *)&_mh_execute_header, v129, v130, "DocUploadHandler.uploadAssets: Creating upload assets.", v131, 2u);
      swift_slowDealloc();
    }

    ((void (*)(char *, uint64_t))v183)(v128, v185);
    id v132 = v170;
    int v133 = [v170 base64EncodingEnabled];
    sub_10002A544(v171, v127, v133);
    v134._countAndFlagsBits = 0xD000000000000039;
    v134._object = (void *)0x800000010062FC50;
    v135._countAndFlagsBits = 0x6230383239373539;
    v135._object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v135, v134);
    id v136 = [v132 container];
    uint64_t v138 = v176;
    uint64_t v137 = v177;
    uint64_t v139 = v150;
    (*(void (**)(char *, char *, uint64_t))(v177 + 16))(v150, v179, v176);
    unint64_t v140 = (*(unsigned __int8 *)(v137 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v137 + 80);
    unint64_t v141 = (v149 + v140 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v142 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v137 + 32))(v142 + v140, v139, v138);
    uint64_t v143 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v142 + v141);
    id v144 = v182;
    *uint64_t v143 = sub_10002C2CC;
    v143[1] = v144;
    swift_retain();
    uint64_t v145 = (uint64_t)v136;
    uint64_t v146 = v178;
    unint64_t v147 = v167;
    sub_10002844C(v127, v145, v178, v167, v123, (uint64_t)sub_10002C3E4, v142);
    swift_release();

    swift_release();
    (*(void (**)(char *, uint64_t))(v154 + 8))(v153, v155);
    v105((char *)v147, v166);
    ((void (*)(uint64_t, uint64_t))v164)(v146, v173);
    (*(void (**)(char *, uint64_t))(v137 + 8))(v179, v138);
  }
  else
  {
    uint64_t v64 = v170;
    defaultLogger()();
    uint64_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v67 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v67 = 0;
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "DocUploadHandler.uploadAssets: assets array is empty, throwing error.", v67, 2u);
      swift_slowDealloc();
    }

    os_log_type_t v68 = (void (*)(char *, uint64_t))v183;
    ((void (*)(char *, uint64_t))v183)(v64, v185);
    v69._countAndFlagsBits = 0xD000000000000031;
    v69._object = (void *)0x800000010062FC90;
    v70._countAndFlagsBits = 0x3238616232623337;
    v70._object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v70, v69);
    (*(void (**)(char *, void, uint64_t))(v171 + 104))(v174, enum case for DIPError.Code.docUploadNoAssetsProvided(_:), v172);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10002D3F8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v71 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    unint64_t v72 = v180;
    defaultLogger()();
    swift_errorRetain();
    swift_errorRetain();
    id v115 = Logger.logObject.getter();
    os_log_type_t v116 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v115, v116))
    {
      Swift::String v117 = (uint8_t *)swift_slowAlloc();
      uint64_t v118 = swift_slowAlloc();
      Swift::Bool v174 = v41;
      uint64_t v184 = v53;
      *(void *)&long long v186 = v118;
      *(_DWORD *)Swift::String v117 = 136315138;
      swift_getErrorValue();
      uint64_t v119 = Error.localizedDescription.getter();
      uint64_t v189 = sub_100110D58(v119, v120, (uint64_t *)&v186);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v115, v116, "DocUploadHandler.uploadAssets: Failed: Calling completion callback with error: %s", v117, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v68(v174, v185);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      v68(v41, v185);
    }
    swift_errorRetain();
    uint64_t v121 = sub_1001229F4(v71, 0xD00000000000002BLL, 0x800000010062FC20, 103);
    v72(0, 0xF000000000000000, v121);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  return swift_release();
}

uint64_t sub_10002C294()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10002C2CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100121F1C(a1, a2, a3, *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
}

uint64_t *sub_10002C2D8(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_10002C33C()
{
  uint64_t v1 = type metadata accessor for DIPSignpost();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10002C3E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(type metadata accessor for DIPSignpost() - 8);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3
                                                           + ((*(void *)(v7 + 64)
                                                             + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
                                                             + 7) & 0xFFFFFFFFFFFFFFF8));
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  return v8(a1, a2, a3);
}

uint64_t sub_10002C4B4(void *a1)
{
  return sub_100028064(a1);
}

uint64_t sub_10002C4D0()
{
  uint64_t v17 = type metadata accessor for DIPSignpost();
  uint64_t v1 = *(void *)(v17 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v15 = (v2 + 48) & ~v2;
  unint64_t v3 = (((*(void *)(v1 + 64) + v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = type metadata accessor for EncryptedMessageEntity();
  uint64_t v4 = *(void *)(v16 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v3 + v5 + 8) & ~v5;
  unint64_t v7 = (*(void *)(v4 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = type metadata accessor for HPKEEncryptionParamsAlgorithmIdentifier();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = (v7 + v10 + 8) & ~v10;
  uint64_t v12 = v2 | v5 | v10 | 7;
  unint64_t v14 = ((*(void *)(v9 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0 + v15, v17);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v6, v16);

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v0 + v11, v8);
  swift_release();

  return _swift_deallocObject(v0, v14, v12);
}

uint64_t sub_10002C718(uint64_t a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for DIPSignpost() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  type metadata accessor for EncryptedMessageEntity();
  type metadata accessor for HPKEEncryptionParamsAlgorithmIdentifier();
  uint64_t v6 = v1[4];
  uint64_t v12 = v1[3];
  uint64_t v13 = v1[2];
  uint64_t v7 = v1[5];
  uint64_t v8 = *(void *)((char *)v1 + v4);
  uint64_t v9 = *(void *)((char *)v1 + v5);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v14 + 16) = v10;
  void *v10 = v14;
  v10[1] = sub_10000C494;
  return sub_10002899C(a1, v13, v12, v6, v7, (uint64_t)v1 + v3, v8, v9);
}

uint64_t sub_10002C95C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_10071FEE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002C9C4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002C9FC(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *unint64_t v5 = v2;
  v5[1] = sub_10000C494;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100725148 + dword_100725148);
  return v6(a1, v4);
}

uint64_t type metadata accessor for DocUploadHandler.DocUploadResult()
{
  uint64_t result = qword_100720308;
  if (!qword_100720308) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10002CB00(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5)
{
  *(void *)(v5 + 24) = a2;
  *(void *)(v5 + 32) = a5;
  *(unsigned char *)(v5 + 73) = a4;
  *(unsigned char *)(v5 + 72) = a3;
  *(void *)(v5 + 16) = a1;
  return _swift_task_switch(sub_10002CB2C, 0, 0);
}

uint64_t sub_10002CB2C()
{
  uint64_t v1 = *(void *)(v0 + 32);
  char v2 = *(unsigned char *)(v0 + 73);
  char v3 = *(unsigned char *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = sub_1001FA254(*(void *)(v0 + 24));
  *(void *)(v0 + 40) = v5;
  uint64_t v6 = swift_task_alloc();
  *(void *)(v0 + 48) = v6;
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v4;
  *(unsigned char *)(v6 + 32) = v3;
  *(unsigned char *)(v6 + 33) = v2;
  *(void *)(v6 + 40) = v1;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10002CC4C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t sub_10002CC4C()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    char v2 = sub_10002CDCC;
  }
  else
  {
    swift_task_dealloc();
    char v2 = sub_10002CD68;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10002CD68()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10002CDCC()
{
  swift_task_dealloc();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10002CE38(uint64_t a1)
{
  return sub_1000280E0(a1, v1);
}

uint64_t sub_10002CE54(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DocUploadHandler.DocUploadResult();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10002CEB0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_10002CF08(uint64_t a1)
{
  return sub_1001F9CE0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32), *(unsigned __int8 *)(v1 + 33), *(void *)(v1 + 40));
}

uint64_t sub_10002CF1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_100720298);
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t sub_10002CF8C(uint64_t a1)
{
  uint64_t v2 = sub_100007764(&qword_100720298);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_10002CFF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_100720298);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_10002D05C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_100720298);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_10002D0C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_100720298);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_10002D12C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_100720298);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_10002D194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002D1A8);
}

uint64_t sub_10002D1A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_100720298);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_10002D218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002D22C);
}

uint64_t sub_10002D22C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_100720298);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

void sub_10002D2A0()
{
  sub_10002D32C();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_10002D32C()
{
  if (!qword_100720318)
  {
    type metadata accessor for ProofingData(255);
    sub_10002D3F8(&qword_100720320, (void (*)(uint64_t))type metadata accessor for ProofingData);
    sub_10002D3F8((unint64_t *)&unk_100720328, (void (*)(uint64_t))type metadata accessor for ProofingData);
    unint64_t v0 = type metadata accessor for HPKEEncryptedMessageWithKeyWrap();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100720318);
    }
  }
}

uint64_t sub_10002D3F8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10002D440()
{
  unint64_t result = qword_100720360;
  if (!qword_100720360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100720360);
  }
  return result;
}

uint64_t sub_10002D494(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100019364(&qword_100720298);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10002D4DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DocUploadHandler.DocUploadResult();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for DocUploadHandler.DocUploadResult.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for DocUploadHandler.DocUploadResult.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10002D630);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10002D658()
{
  return 0;
}

ValueMetadata *type metadata accessor for DocUploadHandler.DocUploadResult.CodingKeys()
{
  return &type metadata for DocUploadHandler.DocUploadResult.CodingKeys;
}

unint64_t sub_10002D678()
{
  unint64_t result = qword_100720380;
  if (!qword_100720380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100720380);
  }
  return result;
}

unint64_t sub_10002D6D0()
{
  unint64_t result = qword_100720388;
  if (!qword_100720388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100720388);
  }
  return result;
}

unint64_t sub_10002D728()
{
  unint64_t result = qword_100720390;
  if (!qword_100720390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100720390);
  }
  return result;
}

uint64_t sub_10002D77C()
{
  uint64_t v0 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v30 = *(void *)(v0 - 8);
  uint64_t v31 = v0;
  __chkstk_darwin(v0);
  uint64_t v28 = (char *)&v28 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v6);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v7 - 8);
  sub_1000309D0();
  static DispatchQoS.unspecified.getter();
  v35[0] = &_swiftEmptyArrayStorage;
  sub_100031224((unint64_t *)&qword_10071FF60, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100007764((uint64_t *)&unk_100726420);
  sub_100031134((unint64_t *)&qword_10071FF70, (uint64_t *)&unk_100726420);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v2);
  uint64_t v29 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  if (qword_10071F4C0 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_1007602F0;
  uint64_t v9 = type metadata accessor for IdentityProofingActionNotificationFlow();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = 0;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0;
  uint64_t v13 = v30;
  uint64_t v12 = v31;
  uint64_t v14 = v28;
  (*(void (**)(char *, void, uint64_t))(v30 + 104))(v28, enum case for DispatchQoS.QoSClass.default(_:), v31);
  swift_retain();
  uint64_t v15 = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v14, v12);
  uint64_t v16 = sub_1005EC0D0(0, v11, v15);
  type metadata accessor for IdentityProofingBackgroundActivityScheduler();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = 3600;
  type metadata accessor for IdentityProofingDeviceMigrationManagerFactory();
  uint64_t v18 = swift_allocObject();
  type metadata accessor for IdentityProofingWorkflowProvider();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v18;
  type metadata accessor for IdentityProofingUploadsHelper();
  uint64_t v20 = swift_allocObject();
  type metadata accessor for NetworkMonitor();
  *(void *)(v20 + 16) = static NetworkMonitor.shared.getter();
  *(void *)(v20 + 24) = v19;
  void v35[3] = v9;
  v35[4] = &off_1006FABE0;
  v35[0] = v10;
  type metadata accessor for IdentityProofingUpdateManager();
  uint64_t v21 = (void *)swift_allocObject();
  uint64_t v22 = sub_1000279F4((uint64_t)v35, v9);
  __chkstk_darwin(v22);
  uint64_t v24 = (uint64_t *)((char *)&v28 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v25 + 16))(v24);
  uint64_t v26 = *v24;
  uint64_t v33 = v9;
  uint64_t v34 = &off_1006FABE0;
  *(void *)&long long v32 = v26;
  v21[2] = v29;
  v21[3] = v8;
  sub_10000C6B4(&v32, (uint64_t)(v21 + 4));
  v21[9] = v16;
  v21[10] = v17;
  v21[11] = v20;
  swift_retain();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v35);
  uint64_t result = swift_release();
  qword_1007600E0 = (uint64_t)v21;
  return result;
}

uint64_t sub_10002DCA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = v9;
  uint64_t v28 = a5;
  uint64_t v29 = a8;
  int v30 = a7;
  int v27 = a6 & 1;
  uint64_t v15 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v33 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v17 = &v26[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v31 = *(void *)(v18 - 8);
  uint64_t v32 = v18;
  __chkstk_darwin(v18);
  uint64_t v20 = &v26[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v21 = *(void **)(v9 + 16);
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = a3;
  *(void *)(v22 + 24) = a4;
  *(void *)(v22 + 32) = v28;
  *(void *)(v22 + 40) = a1;
  *(void *)(v22 + 48) = a2;
  *(void *)(v22 + 56) = v10;
  *(void *)(v22 + 64) = v29;
  *(void *)(v22 + 72) = a9;
  *(unsigned char *)(v22 + 80) = v27;
  *(unsigned char *)(v22 + 81) = v30;
  aBlock[4] = sub_1000310DC;
  aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100593800;
  aBlock[3] = &unk_1006F4CB0;
  uint64_t v23 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  id v24 = v21;
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t v34 = _swiftEmptyArrayStorage;
  sub_100031224((unint64_t *)&unk_1007223A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007764((uint64_t *)&unk_1007208F0);
  sub_100031134(&qword_1007223B0, (uint64_t *)&unk_1007208F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v23);

  (*(void (**)(unsigned char *, uint64_t))(v33 + 8))(v17, v15);
  (*(void (**)(unsigned char *, uint64_t))(v31 + 8))(v20, v32);
  return swift_release();
}

uint64_t sub_10002DFB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10)
{
  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  sub_1000FF820();
  uint64_t v18 = v17;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a1;
  *(void *)(v19 + 24) = a2;
  *(void *)(v19 + 32) = v18;
  *(void *)(v19 + 40) = a3;
  *(void *)(v19 + 48) = a4;
  *(void *)(v19 + 56) = a5;
  *(void *)(v19 + 64) = a6;
  *(void *)(v19 + 72) = a7;
  *(void *)(v19 + 80) = a8;
  *(unsigned char *)(v19 + 88) = a9 & 1;
  *(unsigned char *)(v19 + 89) = a10 & 1;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000FFE3C((uint64_t)sub_1000311DC, v19);
  swift_release();
  return swift_release();
}

void sub_10002E14C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(unint64_t), uint64_t a9, char a10, char a11)
{
  uint64_t v114 = a8;
  uint64_t v116 = a7;
  uint64_t v17 = sub_100007764(&qword_1007239B0);
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  uint64_t v107 = (char *)&v102 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  Swift::Int_optional v108 = (char *)&v102 - v20;
  uint64_t v21 = type metadata accessor for Date();
  uint64_t v111 = *(void *)(v21 - 8);
  uint64_t v112 = v21;
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v106 = (void (*)(char *, uint64_t))((char *)&v102 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v24 = __chkstk_darwin(v22);
  Swift::Int_optional v110 = (char *)&v102 - v25;
  __chkstk_darwin(v24);
  Swift::Int_optional v109 = (void (*)(char *, uint64_t))((char *)&v102 - v26);
  uint64_t v27 = type metadata accessor for Logger();
  uint64_t v115 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)&v102 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for DIPError.Code();
  uint64_t v117 = *(void *)(v30 - 8);
  uint64_t v118 = v30;
  __chkstk_darwin(v30);
  uint64_t v119 = (uint64_t)&v102 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    sub_100100478(a1, a2);
    uint64_t v33 = v11;
    if (v11) {
      return;
    }
    uint64_t v34 = v32;
    uint64_t v113 = a4;
    if (!a6)
    {
LABEL_4:
      if (v34) {
        goto LABEL_5;
      }
LABEL_13:
      (*(void (**)(uint64_t, void, uint64_t))(v117 + 104))(v119, enum case for DIPError.Code.proofingSessionDoesntExist(_:), v118);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100031224((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      return;
    }
  }
  else
  {
    uint64_t v113 = a4;
    uint64_t v34 = 0;
    uint64_t v33 = v11;
    if (!a6) {
      goto LABEL_4;
    }
  }
  sub_10010096C(a5, a6);
  int v44 = v43;

  if (v33) {
    return;
  }
  uint64_t v34 = v44;
  if (!v44) {
    goto LABEL_13;
  }
LABEL_5:
  id v35 = v34;
  unint64_t v36 = sub_100030EA4(v35);
  if (v36)
  {
    unint64_t v37 = v36;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v38, v39))
    {
      id v105 = v35;
      uint64_t v40 = v33;
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v41 = 134217984;
      if (v37 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v42 = *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      uint64_t v120 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "the asset count is %ld", v41, 0xCu);
      swift_slowDealloc();

      uint64_t v33 = v40;
      id v35 = v105;
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v115 + 8))(v29, v27);
    swift_retain();
    sub_1001F5B2C((uint64_t)[v35 cloudKitUploadsMaxRetryCount]);
    swift_release();
    swift_retain();
    uint64_t v45 = sub_1001FA654(v37);
    uint64_t v47 = v46;
    swift_release();
    id v48 = [v35 workflowID];
    if (v48)
    {
      uint64_t v49 = v48;
      uint64_t v115 = v47;
      uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v52 = v51;

      id v53 = [v35 proofingSessionID];
      if (v53)
      {
        uint64_t v54 = v53;
        uint64_t v118 = v50;
        uint64_t v119 = (uint64_t)v45;
        uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v57 = v56;

        if ([v35 didNotifyOnUploadsCompletion])
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_retain();
          sub_1004366D4(v55, v57, v113);
          swift_release();
          swift_bridgeObjectRelease();
          unint64_t v36 = 0;
          goto LABEL_19;
        }
        uint64_t v117 = v55;
        uint64_t v104 = a9;
        if (*(void *)(v115 + 16))
        {
          uint64_t v58 = v57;
          swift_bridgeObjectRelease();
          sub_10002F444(v119, a10 & 1, a11 & 1, v117, v57);
          uint64_t v59 = v111;
          if (v33)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_23;
          }
          id v73 = [v35 country];
          if (v73)
          {
            uint64_t v74 = v73;
            Swift::Int_optional v109 = (void (*)(char *, uint64_t))static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v76 = v75;
          }
          else
          {
            Swift::Int_optional v109 = 0;
            uint64_t v76 = 0xE000000000000000;
          }
          id v105 = v35;
          id v92 = [v35 createdAt];
          if (v92)
          {
            unint64_t v93 = v92;
            unint64_t v94 = v110;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            unint64_t v95 = *(void (**)(char *, char *, uint64_t))(v59 + 32);
            uint64_t v96 = (uint64_t)v107;
            uint64_t v97 = v94;
            uint64_t v98 = v112;
            v95(v107, v97, v112);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v59 + 56))(v96, 0, 1, v98);
            int v99 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v96, 1, v98);
            uint64_t v57 = v58;
            if (v99 != 1)
            {
              uint64_t v100 = v106;
              v95((char *)v106, (char *)v96, v112);
LABEL_64:
              id v90 = v105;
              id v101 = [v105 manualCheckInterval];
              sub_10002F020(v115, v118, v52, v117, v57, (uint64_t)v109, v76, v113, v100, (uint64_t)v101);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              (*(void (**)(void, uint64_t))(v59 + 8))(v100, v112);
              goto LABEL_65;
            }
          }
          else
          {
            uint64_t v96 = (uint64_t)v107;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v59 + 56))(v107, 1, 1, v112);
          }
          uint64_t v100 = v106;
          Date.init()();
          sub_10000C6CC(v96, &qword_1007239B0);
          goto LABEL_64;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v37 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v119 = _CocoaArrayWrapper.endIndex.getter();
        }
        else
        {
          uint64_t v119 = *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
        }
        id v105 = v35;
        uint64_t v102 = v57;
        uint64_t v103 = v52;
        if (v119)
        {
          if (v119 < 1)
          {
            __break(1u);
            return;
          }
          uint64_t v60 = 0;
          unint64_t v61 = (char *)_swiftEmptyArrayStorage;
          do
          {
            uint64_t v62 = v33;
            if ((v37 & 0xC000000000000001) != 0) {
              id v63 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v63 = *(id *)(v37 + 8 * v60 + 32);
            }
            uint64_t v64 = v63;
            id v65 = [v63 recordUUID:v102, v103, v104];
            if (v65)
            {
              os_log_type_t v66 = v65;
              uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v69 = v68;

              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                unint64_t v61 = sub_10010F3C4(0, *((void *)v61 + 2) + 1, 1, v61);
              }
              unint64_t v71 = *((void *)v61 + 2);
              unint64_t v70 = *((void *)v61 + 3);
              if (v71 >= v70 >> 1) {
                unint64_t v61 = sub_10010F3C4((char *)(v70 > 1), v71 + 1, 1, v61);
              }
              *((void *)v61 + 2) = v71 + 1;
              unint64_t v72 = &v61[16 * v71];
              *((void *)v72 + 4) = v67;
              *((void *)v72 + 5) = v69;
            }
            else
            {
            }
            ++v60;
            uint64_t v33 = v62;
          }
          while (v119 != v60);
        }
        else
        {
          unint64_t v61 = (char *)_swiftEmptyArrayStorage;
        }
        swift_bridgeObjectRelease_n();
        id v77 = [v105 country];
        if (v77)
        {
          os_log_type_t v78 = v77;
          uint64_t v119 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v80 = v79;
        }
        else
        {
          uint64_t v119 = 0;
          uint64_t v80 = 0xE000000000000000;
        }
        uint64_t v82 = v111;
        uint64_t v81 = v112;
        id v83 = [v105 createdAt:v102, v103];
        if (v83)
        {
          uint64_t v84 = v83;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v85 = *(void (**)(void))(v82 + 32);
          uint64_t v86 = (uint64_t)v108;
          v85();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v82 + 56))(v86, 0, 1, v81);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v82 + 48))(v86, 1, v81) != 1)
          {
            uint64_t v87 = v86;
            uint64_t v88 = (uint64_t)v109;
            ((void (*)(void (*)(char *, uint64_t), uint64_t, uint64_t))v85)(v109, v87, v81);
            Swift::String v89 = (void (*)(char *, uint64_t))v88;
LABEL_55:
            id v90 = v105;
            id v91 = [v105 manualCheckInterval];
            sub_10002F020((uint64_t)v61, v118, v103, v117, v102, v119, v80, v113, v89, (uint64_t)v91);
            if (v33)
            {
              (*(void (**)(void, uint64_t))(v82 + 8))(v89, v112);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
LABEL_66:

              return;
            }
            (*(void (**)(void, uint64_t))(v82 + 8))(v89, v112);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_65:
            v114(0);
            goto LABEL_66;
          }
        }
        else
        {
          uint64_t v86 = (uint64_t)v108;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v82 + 56))(v108, 1, 1, v81);
        }
        Swift::String v89 = v109;
        Date.init()();
        sub_10000C6CC(v86, &qword_1007239B0);
        goto LABEL_55;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, void, uint64_t))(v117 + 104))(v119, enum case for DIPError.Code.proofingSessionIDUnavailable(_:), v118);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100031224((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, void, uint64_t))(v117 + 104))(v119, enum case for DIPError.Code.workflowIdDoesNotExist(_:), v118);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100031224((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
    }
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    goto LABEL_23;
  }
LABEL_19:
  v114(v36);
LABEL_23:
}

uint64_t sub_10002F020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(char *, uint64_t), uint64_t a10)
{
  uint64_t v39 = a8;
  uint64_t v37 = type metadata accessor for Logger();
  uint64_t v35 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  unint64_t v36 = (char *)v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (void *)swift_allocObject();
  v19[2] = v10;
  v19[3] = a4;
  uint64_t v38 = a4;
  uint64_t v20 = v10;
  v19[4] = a5;
  v19[5] = a6;
  v19[6] = a7;
  v19[7] = a2;
  v19[8] = a3;
  v19[9] = a1;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v21 = v40;
  runAsyncAndBlock<A>(timeout:file:function:line:_:)();
  uint64_t result = swift_release();
  if (!v21)
  {
    uint64_t v24 = v35;
    uint64_t v23 = v36;
    uint64_t v25 = v37;
    uint64_t v34 = a5;
    uint64_t v40 = a10;
    v32[1] = v20;
    uint64_t v33 = a9;
    defaultLogger()();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Action Notification request complete, will attempt to delete the upload assets meta data.", v28, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v24 + 8))(v23, v25);
    swift_retain();
    sub_1004366D4(v38, v34, v39);
    swift_release();
    uint64_t v29 = type metadata accessor for IdentityManagementSessionDelegate();
    id v30 = [self defaultCenter];
    NSString v31 = String._bridgeToObjectiveC()();
    uint64_t v41 = v29;
    sub_100007764((uint64_t *)&unk_10072E590);
    [v30 postNotificationName:v31 object:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

    swift_unknownObjectRelease();
    return sub_1005E790C(v33);
  }
  return result;
}

uint64_t sub_10002F354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v16;
  *uint64_t v16 = v8;
  v16[1] = sub_10000C494;
  v16[13] = v19;
  v16[14] = a2;
  v16[11] = a7;
  v16[12] = a8;
  v16[9] = a5;
  v16[10] = a6;
  v16[7] = a3;
  v16[8] = a4;
  return _swift_task_switch(sub_100030608, 0, 0);
}

void sub_10002F444(uint64_t a1, char a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v29 = a5;
  uint64_t v27 = a4;
  int v33 = a3;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v25 = *(void *)(v8 - 8);
  uint64_t v26 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0;
  uint64_t v12 = (void *)(v11 + 16);
  dispatch_semaphore_t v13 = dispatch_semaphore_create(0);
  uint64_t v28 = v5;
  uint64_t v14 = *(void *)(v5 + 24);
  uint64_t v32 = 0;
  memset(v31, 0, sizeof(v31));
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v13;
  *(void *)(v15 + 24) = v11;
  sub_100030AF4((uint64_t)v31, (uint64_t)v30);
  uint64_t v16 = swift_allocObject();
  sub_100030BAC((uint64_t)v30, v16 + 16);
  *(void *)(v16 + 56) = a1;
  *(void *)(v16 + 64) = v14;
  *(unsigned char *)(v16 + 72) = a2;
  *(_WORD *)(v16 + 73) = v33;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = sub_100030AEC;
  *(void *)(v17 + 24) = v15;
  swift_retain_n();
  uint64_t v18 = v13;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1001DA5B4(3, (uint64_t)sub_100030C14, v16, (uint64_t)sub_100030C64, v17);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_10000C6CC((uint64_t)v31, (uint64_t *)&unk_1007271E0);
  OS_dispatch_semaphore.wait()();
  swift_beginAccess();
  if (*v12)
  {
    swift_errorRetain();
    defaultLogger()();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "error has occurred during uploads. Will check if status update is required...", v21, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v25 + 8))(v10, v26);
    uint64_t v22 = (void *)swift_allocObject();
    uint64_t v23 = v27;
    void v22[2] = v28;
    v22[3] = v23;
    v22[4] = v29;
    swift_retain();
    swift_bridgeObjectRetain();
    runAsyncAndBlock<A>(file:function:line:_:)();
    swift_release();
    swift_willThrow();
    swift_release();
  }
  else
  {
    swift_release();
  }
}

Swift::Int sub_10002F800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_beginAccess();
    *(void *)(a3 + 16) = a1;
    swift_errorRetain();
    swift_errorRelease();
  }
  else
  {
    defaultLogger()();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Asset uploads successfully complete", v11, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return OS_dispatch_semaphore.signal()();
}

uint64_t sub_10002F988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v7;
  *uint64_t v7 = v4;
  v7[1] = sub_100025D64;
  return sub_10002FA34(a3, a4);
}

uint64_t sub_10002FA34(uint64_t a1, uint64_t a2)
{
  v3[10] = a2;
  v3[11] = v2;
  v3[9] = a1;
  uint64_t v4 = type metadata accessor for Logger();
  v3[12] = v4;
  v3[13] = *(void *)(v4 - 8);
  v3[14] = swift_task_alloc();
  v3[15] = swift_task_alloc();
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  return _swift_task_switch(sub_10002FB20, 0, 0);
}

void sub_10002FB20()
{
  uint64_t v23 = v0;
  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  sub_1000FF820();
  v0[18] = v1;
  sub_1001002FC(v0[9], v0[10]);
  v0[19] = 0;
  unint64_t v4 = v2;
  if (!v2)
  {
LABEL_16:
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    BOOL v14 = os_log_type_enabled(v12, v13);
    uint64_t v15 = v0[15];
    uint64_t v17 = v0[12];
    uint64_t v16 = v0[13];
    unint64_t v18 = v0[10];
    if (v14)
    {
      uint64_t v20 = v0[9];
      uint64_t v21 = v0[12];
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136315138;
      swift_bridgeObjectRetain();
      v0[7] = sub_100110D58(v20, v18, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Proofing session doesn't exist for %s", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();

      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v21);
    }
    else
    {
      swift_release();
      swift_bridgeObjectRelease_n();

      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (void (*)(void))v0[1];
    v3();
    return;
  }
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v11) {
      goto LABEL_8;
    }
    goto LABEL_15;
  }
  if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_15:
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
LABEL_8:
  if ((v4 & 0xC000000000000001) != 0)
  {
    id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v5 = *(id *)(v4 + 32);
  }
  uint64_t v6 = v5;
  v0[20] = v5;
  uint64_t v7 = v0[11];
  swift_bridgeObjectRelease();
  v0[21] = *(void *)(v7 + 88);
  swift_retain();
  id v8 = [v6 totalUploadAssetsFileSizeInBytes];
  char v9 = [v6 canUploadOnExpensiveNetwork];
  os_log_type_t v10 = (void *)swift_task_alloc();
  v0[22] = v10;
  void *v10 = v0;
  v10[1] = sub_10003004C;
  sub_100008ACC((uint64_t)v8, v9);
}

uint64_t sub_10003004C(char a1)
{
  *(unsigned char *)(*(void *)v1 + 184) = a1;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10003016C, 0, 0);
}

uint64_t sub_10003016C()
{
  uint64_t v33 = v0;
  if (*(unsigned char *)(v0 + 184) == 1)
  {
    uint64_t v1 = *(void *)(v0 + 152);
    v35.Swift::Int value = IdentityProofingActionStatus.rawValue.getter();
    v35.Swift::Bool is_nil = 0;
    StoredProofingSession.update(proofingActionStatus:)(v35);
    sub_1000FFAB4();
    if (v1)
    {

      swift_release();
      defaultLogger()();
      swift_errorRetain();
      swift_errorRetain();
      unint64_t v2 = Logger.logObject.getter();
      os_log_type_t v3 = static os_log_type_t.debug.getter();
      BOOL v4 = os_log_type_enabled(v2, v3);
      uint64_t v5 = *(void *)(v0 + 104);
      uint64_t v6 = *(void *)(v0 + 112);
      uint64_t v7 = *(void *)(v0 + 96);
      if (v4)
      {
        uint64_t v31 = *(void *)(v0 + 112);
        uint64_t v30 = *(void *)(v0 + 96);
        id v8 = (uint8_t *)swift_slowAlloc();
        uint64_t v32 = swift_slowAlloc();
        *(_DWORD *)id v8 = 136315138;
        swift_getErrorValue();
        uint64_t v9 = Error.localizedDescription.getter();
        *(void *)(v0 + 48) = sub_100110D58(v9, v10, &v32);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v2, v3, "received an error while updaing the proofing action status %s", v8, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v31, v30);
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();

        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
      }
    }
    else
    {
      defaultLogger()();
      unint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Successfully updated the proofing action status to wait for wifi", v20, 2u);
        swift_slowDealloc();
      }
      uint64_t v21 = *(void **)(v0 + 160);
      uint64_t v22 = *(void *)(v0 + 136);
      uint64_t v23 = *(void *)(v0 + 96);
      uint64_t v24 = *(void *)(v0 + 104);

      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
      uint64_t v25 = type metadata accessor for IdentityManagementSessionDelegate();
      id v26 = [self defaultCenter];
      NSString v27 = String._bridgeToObjectiveC()();
      *(void *)(v0 + 64) = v25;
      sub_100007764((uint64_t *)&unk_10072E590);
      [v26 postNotificationName:v27 object:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
      swift_unknownObjectRelease();

      swift_release();
    }
  }
  else
  {
    defaultLogger()();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      os_log_type_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "No update needed as the device is not waiting for wifi to upload the documents", v13, 2u);
      swift_slowDealloc();
    }
    BOOL v14 = *(void **)(v0 + 160);
    uint64_t v15 = *(void *)(v0 + 128);
    uint64_t v16 = *(void *)(v0 + 96);
    uint64_t v17 = *(void *)(v0 + 104);

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
  return v28();
}

uint64_t sub_1000305DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[13] = a7;
  v8[14] = v7;
  v8[11] = a5;
  v8[12] = a6;
  v8[9] = a3;
  v8[10] = a4;
  v8[7] = a1;
  v8[8] = a2;
  return _swift_task_switch(sub_100030608, 0, 0);
}

uint64_t sub_100030608()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[8];
  sub_100030A10(v0[14] + 32, (uint64_t)(v0 + 2));
  sub_10000C728(v0 + 2, v0[5]);
  sub_100007764(&qword_100720530);
  uint64_t v4 = swift_allocObject();
  v0[15] = v4;
  *(_OWORD *)(v4 + 16) = xmmword_100610730;
  strcpy((char *)(v4 + 32), "UPLOAD_RECORD");
  *(_WORD *)(v4 + 46) = -4864;
  *(_OWORD *)(v4 + 48) = xmmword_100610A70;
  *(void *)(v4 + 72) = 0;
  *(void *)(v4 + 80) = 0;
  *(void *)(v4 + 64) = v1;
  swift_bridgeObjectRetain();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[16] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10003075C;
  uint64_t v6 = v0[10];
  uint64_t v7 = v0[11];
  uint64_t v8 = v0[9];
  uint64_t v9 = v0[7];
  return sub_1001FC910(v4, v8, v6, v7, v2, v9, v3);
}

uint64_t sub_10003075C()
{
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1000308DC;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_100030878;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100030878()
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000308DC()
{
  swift_bridgeObjectRelease();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10003094C()
{
  swift_release();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 32);
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IdentityProofingUpdateManager()
{
  return self;
}

unint64_t sub_1000309D0()
{
  unint64_t result = qword_1007208E0;
  if (!qword_1007208E0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1007208E0);
  }
  return result;
}

uint64_t sub_100030A10(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100030A74()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100030AAC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

Swift::Int sub_100030AEC(uint64_t a1)
{
  return sub_10002F800(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100030AF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764((uint64_t *)&unk_1007271E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100030B5C()
{
  if (*(void *)(v0 + 40)) {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 16);
  }
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 75, 7);
}

uint64_t sub_100030BAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764((uint64_t *)&unk_1007271E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100030C14(void (*a1)(uint64_t), uint64_t a2)
{
  return sub_1001F615C(a1, a2, v2 + 16, *(void *)(v2 + 56), *(void *)(v2 + 64), *(unsigned __int8 *)(v2 + 72), *(unsigned char *)(v2 + 73), *(unsigned __int8 *)(v2 + 74));
}

uint64_t sub_100030C2C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100030C64(uint64_t a1)
{
  return sub_1001F9A4C(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_100030C6C()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100030CAC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10000C494;
  return sub_10002F988(a1, v4, v5, v6);
}

uint64_t sub_100030D60()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100030DB8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_10000C494;
  return sub_10002F354(a1, v4, v5, v6, v7, v8, v9, v10);
}

unint64_t sub_100030EA4(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = [a1 uploadAssets];
  if (v6)
  {
    id v7 = v6;
    sub_100530DA4(v7);
    uint64_t v9 = v8;

    unint64_t v10 = (unint64_t)sub_10052EF50(v9);
    swift_release();
    if (v10)
    {
      if (v10 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();

        swift_bridgeObjectRelease();
        if (v16 > 0) {
          return v10;
        }
      }
      else
      {
        uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);

        if (v11 > 0) {
          return v10;
        }
      }
      swift_bridgeObjectRelease();
    }
    else
    {
    }
  }
  defaultLogger()();
  os_log_type_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    BOOL v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)BOOL v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "No assets exists to be uploaded.", v14, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return 0;
}

uint64_t sub_10003108C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 82, 7);
}

uint64_t sub_1000310DC()
{
  return sub_10002DFB8(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(unsigned char *)(v0 + 80), *(unsigned char *)(v0 + 81));
}

uint64_t sub_10003111C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10003112C()
{
  return swift_release();
}

uint64_t sub_100031134(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100019364(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100031184()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 90, 7);
}

void sub_1000311DC()
{
  sub_10002E14C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void (**)(unint64_t))(v0 + 72), *(void *)(v0 + 80), *(unsigned char *)(v0 + 88), *(unsigned char *)(v0 + 89));
}

uint64_t sub_100031224(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

Swift::Void __swiftcall StoredProofingSession.update(proofingActionStatus:)(Swift::Int64_optional proofingActionStatus)
{
  uint64_t v2 = v1;
  Swift::Bool is_nil = proofingActionStatus.is_nil;
  Swift::Int64 value = proofingActionStatus.value;
  id v5 = [v1 managedObjectContext];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = v2;
    *(void *)(v7 + 24) = value;
    *(unsigned char *)(v7 + 32) = is_nil;
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = sub_1000331EC;
    *(void *)(v8 + 24) = v7;
    v11[4] = sub_100033258;
    v11[5] = v8;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_100032314;
    v11[3] = &unk_1006F4D70;
    uint64_t v9 = _Block_copy(v11);
    id v10 = v2;
    swift_retain();
    swift_release();
    [v6 performBlockAndWait:v9];

    _Block_release(v9);
    LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if (v6) {
      __break(1u);
    }
  }
}

void *StoredProofingSession.entityName.unsafeMutableAddressor()
{
  return &static StoredProofingSession.entityName;
}

uint64_t static StoredProofingSession.entityName.getter()
{
  return 0x676E69666F6F7250;
}

id StoredProofingSession.update(_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:cloudKitUploadsMaxRetryCount:idType:learnMoreURLString:shouldScheduleUploads:connectToWifiReminderInDays:shouldShowNotificationOnWatch:canUploadOnExpensiveNetwork:totalUploadAssetsFileSizeInBytes:provisioningRetryTimeout:provisioningAttemptDate:didNotifyOnUploadsCompletion:hasUserConsentToShareBiomeData:productIdentifier:didAttemptComboProofing:supplementalProvisioningData:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,unsigned __int8 a23,uint64_t a24,uint64_t a25,uint64_t a26,unsigned __int8 a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,unsigned __int8 a33,uint64_t a34,unsigned __int8 a35,unsigned __int8 a36,unsigned __int8 a37,uint64_t a38,uint64_t a39,uint64_t a40,unsigned __int8 a41,unsigned __int8 a42,uint64_t a43,uint64_t a44,unsigned __int8 a45,uint64_t a46,unint64_t a47)
{
  id v48 = v47;
  uint64_t v158 = a4;
  uint64_t v148 = a1;
  uint64_t v149 = a3;
  uint64_t v54 = sub_100007764(&qword_1007239B0);
  uint64_t v55 = *(void *)(v54 - 8);
  uint64_t v56 = *(void *)(v55 + 64);
  uint64_t v57 = __chkstk_darwin(v54 - 8);
  __chkstk_darwin(v57);
  uint64_t v59 = (char *)&v99 - v58;
  id result = [v48 managedObjectContext];
  if (result)
  {
    uint64_t v145 = a46;
    unint64_t v146 = a47;
    int v144 = a45;
    uint64_t v143 = a44;
    uint64_t v142 = a43;
    int v141 = a42;
    int v140 = a41;
    uint64_t v118 = a5;
    uint64_t v124 = a39;
    uint64_t v139 = a38;
    int v138 = a37;
    int v137 = a36;
    int v136 = a35;
    uint64_t v135 = a34;
    int v134 = a33;
    uint64_t v150 = a32;
    uint64_t v132 = a31;
    uint64_t v131 = a30;
    uint64_t v130 = a29;
    uint64_t v128 = a28;
    int v133 = a27;
    uint64_t v126 = a26;
    uint64_t v157 = a25;
    uint64_t v123 = a24;
    int v122 = a23;
    uint64_t v121 = a22;
    uint64_t v156 = a21;
    uint64_t v120 = a20;
    uint64_t v155 = a19;
    uint64_t v119 = a18;
    uint64_t v154 = a17;
    uint64_t v117 = a16;
    id v147 = result;
    uint64_t v115 = a14;
    uint64_t v153 = a13;
    uint64_t v114 = a12;
    uint64_t v152 = a11;
    uint64_t v113 = a10;
    uint64_t v151 = a9;
    uint64_t v112 = v59;
    sub_100033298(a15, (uint64_t)v59);
    sub_100033298(a40, (uint64_t)&v99 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0));
    uint64_t v61 = *(unsigned __int8 *)(v55 + 80);
    uint64_t v129 = a6;
    uint64_t v102 = a7;
    uint64_t v62 = (v61 + 136) & ~v61;
    id v125 = v48;
    unint64_t v103 = (v56 + 7 + v62) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v63 = (v61 + v103 + 16) & ~v61;
    unint64_t v105 = (v56 + 7 + v63) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v100 = a8;
    unint64_t v104 = (v105 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v127 = a2;
    unint64_t v64 = (v104 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v106 = (v64 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v107 = (v64 + 39) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v109 = (v107 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v108 = (v109 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v101 = (uint64_t)&v99 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
    unint64_t v65 = (v108 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v110 = (v65 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v111 = (v65 + 47) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v66 = (v111 + 19) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v116 = (v66 + 17) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v67 = (void *)swift_allocObject();
    uint64_t v68 = v148;
    v67[2] = v48;
    v67[3] = v68;
    uint64_t v69 = v149;
    v67[4] = a2;
    v67[5] = v69;
    uint64_t v70 = v118;
    v67[6] = v158;
    v67[7] = v70;
    uint64_t v71 = v102;
    v67[8] = a6;
    v67[9] = v71;
    uint64_t v72 = v151;
    v67[10] = v100;
    v67[11] = v72;
    uint64_t v73 = v152;
    v67[12] = v113;
    v67[13] = v73;
    uint64_t v74 = v153;
    v67[14] = v114;
    v67[15] = v74;
    v67[16] = v115;
    sub_1000335D0((uint64_t)v112, (uint64_t)v67 + v62);
    uint64_t v75 = (void *)((char *)v67 + v103);
    uint64_t v76 = v154;
    *uint64_t v75 = v117;
    v75[1] = v76;
    sub_1000335D0(v101, (uint64_t)v67 + v63);
    *(void *)((char *)v67 + v105) = v124;
    id v77 = (void *)((char *)v67 + v104);
    uint64_t v78 = v155;
    *id v77 = v119;
    v77[1] = v78;
    uint64_t v79 = (void *)((char *)v67 + v64);
    uint64_t v80 = v156;
    *uint64_t v79 = v120;
    v79[1] = v80;
    uint64_t v81 = (char *)v67 + v106;
    *(void *)uint64_t v81 = v121;
    v81[8] = v122 & 1;
    uint64_t v82 = (void *)((char *)v67 + v107);
    uint64_t v83 = v157;
    *uint64_t v82 = v123;
    v82[1] = v83;
    *(void *)((char *)v67 + v109) = v126;
    *(void *)((char *)v67 + v108) = v128;
    uint64_t v84 = (void *)((char *)v67 + v65);
    uint64_t v85 = v131;
    *uint64_t v84 = v130;
    v84[1] = v85;
    uint64_t v86 = (char *)v67 + v110;
    uint64_t v87 = v150;
    *(void *)uint64_t v86 = v132;
    *((void *)v86 + 1) = v87;
    v86[16] = v134 & 1;
    uint64_t v88 = (char *)v67 + v111;
    *(void *)uint64_t v88 = v135;
    v88[8] = v136 & 1;
    v88[9] = v133 & 1;
    v88[10] = v137 & 1;
    v88[11] = v138 & 1;
    Swift::String v89 = (char *)v67 + v66;
    *(void *)Swift::String v89 = v139;
    v89[8] = v140 & 1;
    v89[9] = v141 & 1;
    id v90 = (char *)v67 + v116;
    uint64_t v91 = v143;
    *(void *)id v90 = v142;
    *((void *)v90 + 1) = v91;
    v90[16] = v144 & 1;
    id v92 = (void *)((char *)v67 + ((v66 + 41) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v94 = v145;
    unint64_t v93 = v146;
    *id v92 = v145;
    v92[1] = v93;
    uint64_t v95 = swift_allocObject();
    *(void *)(v95 + 16) = sub_100033638;
    *(void *)(v95 + 24) = v67;
    aBlock[4] = sub_100037310;
    aBlock[5] = v95;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100032314;
    aBlock[3] = &unk_1006F4DE8;
    uint64_t v96 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    id v97 = v125;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000338D4(v94, v93);
    swift_retain();
    swift_release();
    id v98 = v147;
    [v147 performBlockAndWait:v96];

    _Block_release(v96);
    LOBYTE(v98) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    id result = (id)swift_release();
    if (v98) {
      __break(1u);
    }
  }
  return result;
}

void sub_100031C00(void *a1, uint64_t a2, NSString a3, uint64_t a4, NSString a5, uint64_t a6, NSString a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,char a35,uint64_t a36,char a37,char a38,char a39,char a40,unsigned char *a41,unsigned __int8 a42,unsigned __int8 a43,uint64_t a44,uint64_t a45,unsigned __int8 a46,uint64_t a47,unint64_t a48)
{
  uint64_t v52 = sub_100007764(&qword_1007239B0);
  uint64_t v53 = __chkstk_darwin(v52 - 8);
  uint64_t v84 = &v80[-((v54 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v53);
  uint64_t v56 = &v80[-v55];
  if (a3) {
    a3 = String._bridgeToObjectiveC()();
  }
  [a1 setState:a3];

  if (a5) {
    a5 = String._bridgeToObjectiveC()();
  }
  NSString v57 = a10;
  [a1 setCountry:a5];

  if (a7) {
    a7 = String._bridgeToObjectiveC()();
  }
  NSString v58 = a12;
  [a1 setCredentialIdentifier:a7];

  [a1 setTarget:IdentityTarget.rawValue.getter()];
  if (a10) {
    NSString v57 = String._bridgeToObjectiveC()();
  }
  [a1 setWorkflowID:v57];

  if (a12) {
    NSString v58 = String._bridgeToObjectiveC()();
  }
  [a1 setProofingSessionID:v58];

  if (a14) {
    NSString v59 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v59 = 0;
  }
  [a1 setPairingID:v59];

  [a1 setManualCheckInterval:a15];
  sub_100033298(a16, (uint64_t)v56);
  uint64_t v60 = type metadata accessor for Date();
  uint64_t v61 = *(void *)(v60 - 8);
  uint64_t v62 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v61 + 48);
  Class isa = 0;
  if (v62(v56, 1, v60) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(unsigned char *, uint64_t))(v61 + 8))(v56, v60);
  }
  [a1 setCreatedAt:isa];

  if (a18) {
    NSString v64 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v64 = 0;
  }
  [a1 setProvisioningCredentialID:v64];

  unint64_t v65 = v84;
  sub_100033298(a19, (uint64_t)v84);
  if (v62(v65, 1, v60) == 1)
  {
    Class v66 = 0;
  }
  else
  {
    Class v66 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(unsigned char *, uint64_t))(v61 + 8))(v65, v60);
  }
  [a1 setProvisioningAttemptDate:v66];

  [a1 setProvisioningRetryTimeout:a20];
  if (a22) {
    NSString v67 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v67 = 0;
  }
  [a1 setProvisioningTargetInstanceID:v67];

  if (a24) {
    NSString v69 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v69 = 0;
  }
  [a1 setPartnerSchemeID:v69];

  if (a26) {
    a25 = IdentityProofingActionStatus.rawValue.getter();
  }
  [a1 setProofingActionStatus:a25];
  if (a28) {
    NSString v70 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v70 = 0;
  }
  uint64_t v84 = a41;
  NSString v71 = a34;
  [a1 setLastExecutedActionIdentifier:v70];

  if (a29) {
    uint64_t v72 = a29;
  }
  else {
    uint64_t v72 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  sub_10046DC40((unint64_t)v72);
  swift_bridgeObjectRelease();
  id v73 = objc_allocWithZone((Class)NSSet);
  Class v74 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v75 = [v73 initWithArray:v74];

  [a1 setUploadAssets:v75];
  [a1 setCloudKitUploadsMaxRetryCount:a30];
  if (a32) {
    NSString v76 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v76 = 0;
  }
  int v83 = a43;
  int v81 = a42;
  [a1 setIdType:v76];

  if (a34) {
    NSString v71 = String._bridgeToObjectiveC()();
  }
  int v82 = a46;
  [a1 setLearnMoreURLString:v71];

  [a1 setShouldScheduleUploads:a35 & 1];
  if (a37) {
    a36 = 2;
  }
  [a1 setConnectToWifiReminderInDays:a36];
  [a1 setDidShowWifiReminderAlert:a38 & 1];
  [a1 setShouldShowNotificationOnWatch:a39 & 1];
  [a1 setCanUploadOnExpensiveNetwork:a40 & 1];
  [a1 setTotalUploadAssetsFileSizeInBytes:v84];
  [a1 setDidNotifyOnUploadsCompletion:v81 & 1];
  [a1 setHasUserConsentToShareBiomeData:v83 & 1];
  if (a45) {
    NSString v78 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v78 = 0;
  }
  [a1 setProductIdentifier:v78];

  [a1 setDidAttemptComboProofing:v82 & 1];
  if (a48 >> 60 == 15) {
    Class v79 = 0;
  }
  else {
    Class v79 = Data._bridgeToObjectiveC()().super.isa;
  }
  [a1 setSupplementalProvisioningData:v79];
}

uint64_t sub_1000322EC(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100032314(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

id StoredProofingSession.update(provisioningCredentialIdentifier:targetInstanceIdentifier:partnerSchemeIdentifier:serverAttestedProvisioningData:issuerCurrentCredentialCapacity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  id v10 = v9;
  id result = [v10 managedObjectContext];
  if (result)
  {
    id v27 = result;
    uint64_t v20 = (void *)swift_allocObject();
    unint64_t v21 = a8;
    unint64_t v28 = a8;
    uint64_t v22 = a4;
    uint64_t v23 = v20;
    v20[2] = v10;
    v20[3] = a1;
    v20[4] = a2;
    v20[5] = a3;
    v20[6] = v22;
    v20[7] = a5;
    v20[8] = a6;
    v20[9] = a7;
    v20[10] = v21;
    v20[11] = a9;
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = sub_100033950;
    *(void *)(v24 + 24) = v23;
    aBlock[4] = sub_100037310;
    aBlock[5] = v24;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100032314;
    aBlock[3] = &unk_1006F4E60;
    uint64_t v25 = _Block_copy(aBlock);
    id v26 = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000338D4(a7, v28);
    swift_retain();
    swift_release();
    [v27 performBlockAndWait:v25];

    _Block_release(v25);
    LOBYTE(v25) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    id result = (id)swift_release();
    if (v25) {
      __break(1u);
    }
  }
  return result;
}

id sub_10003252C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10)
{
  NSString v11 = String._bridgeToObjectiveC()();
  [a1 setProvisioningCredentialID:v11];

  NSString v12 = String._bridgeToObjectiveC()();
  [a1 setProvisioningTargetInstanceID:v12];

  NSString v13 = String._bridgeToObjectiveC()();
  [a1 setPartnerSchemeID:v13];

  if (a9 >> 60 == 15) {
    Class isa = 0;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  [a1 setServerAttestedProvisioningData:isa];

  return [a1 setIssuerCurrentCredentialCapacity:a10];
}

Swift::Void __swiftcall StoredProofingSession.update(shouldShowNotificationOnWatch:)(Swift::Bool shouldShowNotificationOnWatch)
{
  uint64_t v2 = v1;
  id v4 = [v1 managedObjectContext];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v2;
    *(unsigned char *)(v6 + 24) = shouldShowNotificationOnWatch;
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = sub_100033998;
    *(void *)(v7 + 24) = v6;
    v10[4] = sub_100037310;
    v10[5] = v7;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 1107296256;
    v10[2] = sub_100032314;
    v10[3] = &unk_1006F4ED8;
    uint64_t v8 = _Block_copy(v10);
    id v9 = v2;
    swift_retain();
    swift_release();
    [v5 performBlockAndWait:v8];

    _Block_release(v8);
    LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if (v5) {
      __break(1u);
    }
  }
}

id StoredProofingSession.update(provisioningAttemptDate:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3);
  id result = [v1 managedObjectContext];
  if (result)
  {
    uint64_t v7 = result;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
    unint64_t v8 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v1;
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v9 + v8, (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = sub_1000339C0;
    *(void *)(v10 + 24) = v9;
    aBlock[4] = sub_100037310;
    aBlock[5] = v10;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100032314;
    aBlock[3] = &unk_1006F4F50;
    NSString v11 = _Block_copy(aBlock);
    id v12 = v1;
    swift_retain();
    swift_release();
    [v7 performBlockAndWait:v11];

    _Block_release(v11);
    LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    id result = (id)swift_release();
    if (v7) {
      __break(1u);
    }
  }
  return result;
}

Swift::Void __swiftcall StoredProofingSession.update(canUploadOnExpensiveNetwork:)(Swift::Bool canUploadOnExpensiveNetwork)
{
  uint64_t v2 = v1;
  id v4 = [v1 managedObjectContext];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v2;
    *(unsigned char *)(v6 + 24) = canUploadOnExpensiveNetwork;
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = sub_1000339DC;
    *(void *)(v7 + 24) = v6;
    v10[4] = sub_100037310;
    v10[5] = v7;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 1107296256;
    v10[2] = sub_100032314;
    v10[3] = &unk_1006F4FC8;
    unint64_t v8 = _Block_copy(v10);
    id v9 = v2;
    swift_retain();
    swift_release();
    [v5 performBlockAndWait:v8];

    _Block_release(v8);
    LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if (v5) {
      __break(1u);
    }
  }
}

id StoredProofingSession.update(_:proofingSessionID:manualCheckInterval:createdAt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v24 = a5;
  uint64_t v12 = sub_100007764(&qword_1007239B0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12 - 8);
  id result = [v6 managedObjectContext];
  if (result)
  {
    uint64_t v16 = result;
    sub_100033298(a6, (uint64_t)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
    unint64_t v17 = (*(unsigned __int8 *)(v13 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    unint64_t v18 = (void *)swift_allocObject();
    v18[2] = v6;
    v18[3] = a1;
    v18[4] = a2;
    v18[5] = a3;
    uint64_t v19 = v24;
    v18[6] = a4;
    v18[7] = v19;
    sub_1000335D0((uint64_t)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v18 + v17);
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = sub_100033B38;
    *(void *)(v20 + 24) = v18;
    aBlock[4] = sub_100037310;
    aBlock[5] = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100032314;
    aBlock[3] = &unk_1006F5040;
    unint64_t v21 = _Block_copy(aBlock);
    id v22 = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    [v16 performBlockAndWait:v21];

    _Block_release(v21);
    LOBYTE(v21) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    id result = (id)swift_release();
    if (v21) {
      __break(1u);
    }
  }
  return result;
}

void sub_100032DF4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = sub_100007764(&qword_1007239B0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v13 = String._bridgeToObjectiveC()();
  [a1 setWorkflowID:v13];

  NSString v14 = String._bridgeToObjectiveC()();
  [a1 setProofingSessionID:v14];

  [a1 setManualCheckInterval:a6];
  sub_100033298(a7, (uint64_t)v12);
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v15 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v12, 1, v15) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v15);
  }
  [a1 setCreatedAt:isa];
}

Swift::Void __swiftcall StoredProofingSession.update(_:_:_:)(Swift::String_optional a1, Swift::String_optional a2, Swift::String_optional a3)
{
  id v4 = v3;
  object = a3.value._object;
  uint64_t countAndFlagsBits = a3.value._countAndFlagsBits;
  uint64_t v7 = a2.value._object;
  uint64_t v8 = a2.value._countAndFlagsBits;
  id v9 = a1.value._object;
  uint64_t v10 = a1.value._countAndFlagsBits;
  id v11 = [v4 managedObjectContext];
  if (v11)
  {
    uint64_t v12 = v11;
    NSString v13 = (void *)swift_allocObject();
    v13[2] = v4;
    v13[3] = v10;
    v13[4] = v9;
    v13[5] = v8;
    v13[6] = v7;
    v13[7] = countAndFlagsBits;
    v13[8] = object;
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = sub_100033BC0;
    *(void *)(v14 + 24) = v13;
    v18[4] = sub_100037310;
    v18[5] = v14;
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 1107296256;
    v18[2] = sub_100032314;
    v18[3] = &unk_1006F50B8;
    uint64_t v15 = _Block_copy(v18);
    swift_bridgeObjectRetain();
    swift_retain();
    id v16 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_release();
    [v12 performBlockAndWait:v15];

    _Block_release(v15);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if (isEscapingClosureAtFileLocation) {
      __break(1u);
    }
  }
}

id sub_100033160(id a1, uint64_t a2, char a3)
{
  if (a3) {
    a2 = IdentityProofingActionStatus.rawValue.getter();
  }

  return [a1 setProofingActionStatus:a2];
}

uint64_t sub_1000331B4()
{
  return _swift_deallocObject(v0, 33, 7);
}

id sub_1000331EC()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (*(unsigned char *)(v0 + 32) == 1) {
    uint64_t v2 = IdentityProofingActionStatus.rawValue.getter();
  }
  else {
    uint64_t v2 = *(void *)(v0 + 24);
  }

  return [v1 setProofingActionStatus:v2];
}

uint64_t sub_100033248()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100033258()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100033280(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100033290()
{
  return swift_release();
}

uint64_t sub_100033298(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_1007239B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100033300()
{
  uint64_t v1 = *(void *)(sub_100007764(&qword_1007239B0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 136) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64) + 7;
  unint64_t v13 = (v2 + ((v4 + v3) & 0xFFFFFFFFFFFFFFF8) + 16) & ~v2;
  unint64_t v12 = ((((((((((((((((((v4 + v13) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
                  + 39) & 0xFFFFFFFFFFFFFFF8)
                + 23) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 47) & 0xFFFFFFFFFFFFFFF8)
        + 19) & 0xFFFFFFFFFFFFFFF8)
      + 41;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  unint64_t v9 = v12 & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  if (!v8(v0 + v13, 1, v6)) {
    (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v0 + v13, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v10 = *(void *)(v0 + v9 + 8);
  if (v10 >> 60 != 15) {
    sub_10000C5F4(*(void *)(v0 + v9), v10);
  }

  return _swift_deallocObject(v0, v9 + 16, v2 | 7);
}

uint64_t sub_1000335D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_1007239B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100033638()
{
  uint64_t v1 = *(void *)(sub_100007764(&qword_1007239B0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 136) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64) + 7;
  unint64_t v5 = (v4 + v3) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = (v2 + v5 + 16) & ~v2;
  unint64_t v7 = (v4 + v6) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v9 + 39) & 0xFFFFFFFFFFFFFFF8;
  long long v11 = *(_OWORD *)(v0 + 80);
  long long v12 = *(_OWORD *)(v0 + 96);
  long long v13 = *(_OWORD *)(v0 + 112);
  unint64_t v14 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  id v16 = (uint64_t *)(v0 + v5);
  unint64_t v17 = (v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v17 + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v18 + 19) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = (v19 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = v0 + ((v17 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = v0 + v18;
  uint64_t v23 = v0 + ((v19 + 41) & 0xFFFFFFFFFFFFFFF8);
  sub_100031C00(*(void **)(v0 + 16), *(void *)(v0 + 24), *(NSString *)(v0 + 32), *(void *)(v0 + 40), *(NSString *)(v0 + 48), *(void *)(v0 + 56), *(NSString *)(v0 + 64), *(void *)(v0 + 72), v11, *((void **)&v11 + 1), v12, *((void **)&v12 + 1), v13, *((uint64_t *)&v13 + 1), *(void *)(v0 + 128), v0 + v3, *v16, v16[1], v0 + v6,
    *(void *)(v0 + v7),
    *(void *)(v0 + v8),
    *(void *)(v0 + v8 + 8),
    *(void *)(v0 + v9),
    *(void *)(v0 + v9 + 8),
    *(void *)(v0 + ((v9 + 23) & 0xFFFFFFFFFFFFFFF8)),
    *(unsigned char *)(v0 + ((v9 + 23) & 0xFFFFFFFFFFFFFFF8) + 8),
    *(void *)(v0 + v10),
    *(void *)(v0 + v10 + 8),
    *(void **)(v0 + v14),
    *(void *)(v0 + v15),
    *(void *)(v0 + v17),
    *(void *)(v0 + v17 + 8),
    *(void *)v21,
    *(void **)(v21 + 8),
    *(unsigned char *)(v21 + 16),
    *(void *)v22,
    *(unsigned char *)(v22 + 8),
    *(unsigned char *)(v22 + 9),
    *(unsigned char *)(v22 + 10),
    *(unsigned char *)(v22 + 11),
    *(unsigned char **)(v0 + v19),
    *(unsigned char *)(v0 + v19 + 8),
    *(unsigned char *)(v0 + v19 + 9),
    *(void *)(v0 + v20),
    *(void *)(v0 + v20 + 8),
    *(unsigned char *)(v0 + v20 + 16),
    *(void *)v23,
    *(void *)(v23 + 8));
}

uint64_t sub_1000338C4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000338D4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10002CEB0(a1, a2);
  }
  return a1;
}

uint64_t sub_1000338E8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v1 = *(void *)(v0 + 80);
  if (v1 >> 60 != 15) {
    sub_10000C5F4(*(void *)(v0 + 72), v1);
  }

  return _swift_deallocObject(v0, 96, 7);
}

id sub_100033950()
{
  return sub_10003252C(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88));
}

uint64_t sub_100033988()
{
  return _swift_deallocObject(v0, 32, 7);
}

id sub_100033998()
{
  return [*(id *)(v0 + 16) setShouldShowNotificationOnWatch:*(unsigned __int8 *)(v0 + 24)];
}

uint64_t sub_1000339AC()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000339C0()
{
}

uint64_t sub_1000339CC()
{
  return _swift_deallocObject(v0, 32, 7);
}

id sub_1000339DC()
{
  return [*(id *)(v0 + 16) setCanUploadOnExpensiveNetwork:*(unsigned __int8 *)(v0 + 24)];
}

uint64_t sub_1000339F0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100033A00()
{
  uint64_t v1 = *(void *)(sub_100007764(&qword_1007239B0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 64) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

void sub_100033B38()
{
  uint64_t v1 = *(void *)(sub_100007764(&qword_1007239B0) - 8);
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = v0[7];
  uint64_t v8 = (uint64_t)v0 + ((*(unsigned __int8 *)(v1 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  sub_100032DF4(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_100033BA8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100033BB8()
{
  return sub_100035A7C(72);
}

void sub_100033BC0()
{
}

uint64_t sub_100033BDC()
{
  return _swift_deallocObject(v0, 32, 7);
}

Swift::Void __swiftcall StoredProofingSession.update(extendedReviewURLString:)(Swift::String_optional extendedReviewURLString)
{
  object = extendedReviewURLString.value._object;
  uint64_t countAndFlagsBits = extendedReviewURLString.value._countAndFlagsBits;
  id v4 = [v1 managedObjectContext];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = (void *)swift_allocObject();
    v6[2] = v1;
    v6[3] = countAndFlagsBits;
    v6[4] = object;
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = sub_100033D80;
    *(void *)(v7 + 24) = v6;
    v11[4] = sub_100037310;
    v11[5] = v7;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_100032314;
    v11[3] = &unk_1006F5130;
    uint64_t v8 = _Block_copy(v11);
    swift_bridgeObjectRetain();
    swift_retain();
    id v9 = v1;
    swift_release();
    [v5 performBlockAndWait:v8];

    _Block_release(v8);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if (isEscapingClosureAtFileLocation) {
      __break(1u);
    }
  }
}

void sub_100033D80()
{
  sub_100033F48(*(id *)(v0 + 16), *(void *)(v0 + 24), *(NSString *)(v0 + 32), (SEL *)&selRef_setExtendedReviewURLString_);
}

uint64_t sub_100033DA8()
{
  return _swift_deallocObject(v0, 32, 7);
}

Swift::Void __swiftcall StoredProofingSession.update(lastExecutedActionIdentifier:)(Swift::String_optional lastExecutedActionIdentifier)
{
  object = lastExecutedActionIdentifier.value._object;
  uint64_t countAndFlagsBits = lastExecutedActionIdentifier.value._countAndFlagsBits;
  id v4 = [v1 managedObjectContext];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = (void *)swift_allocObject();
    v6[2] = v1;
    v6[3] = countAndFlagsBits;
    v6[4] = object;
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = sub_100033FB0;
    *(void *)(v7 + 24) = v6;
    v11[4] = sub_100037310;
    v11[5] = v7;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_100032314;
    v11[3] = &unk_1006F51A8;
    uint64_t v8 = _Block_copy(v11);
    swift_bridgeObjectRetain();
    swift_retain();
    id v9 = v1;
    swift_release();
    [v5 performBlockAndWait:v8];

    _Block_release(v8);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if (isEscapingClosureAtFileLocation) {
      __break(1u);
    }
  }
}

void sub_100033F48(id a1, uint64_t a2, NSString a3, SEL *a4)
{
  if (a3) {
    a3 = String._bridgeToObjectiveC()();
  }
  id v6 = a3;
  [a1 *a4];
}

void sub_100033FB0()
{
  sub_100033F48(*(id *)(v0 + 16), *(void *)(v0 + 24), *(NSString *)(v0 + 32), (SEL *)&selRef_setLastExecutedActionIdentifier_);
}

uint64_t sub_100033FD8()
{
  return _swift_deallocObject(v0, 32, 7);
}

Swift::Void __swiftcall StoredProofingSession.update(uploadAssets:)(Swift::OpaquePointer_optional uploadAssets)
{
  id v2 = [v1 managedObjectContext];
  if (v2)
  {
    uint64_t v3 = v2;
    __chkstk_darwin(v2);
    sub_100007764((uint64_t *)&unk_1007325B0);
    NSManagedObjectContext.performAndWait<A>(_:)();
  }
}

void sub_1000340A8(id a1@<X1>, unint64_t a2@<X0>, unsigned char *a3@<X8>)
{
  if (!a2) {
    goto LABEL_6;
  }
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9 >= 1) {
      goto LABEL_4;
    }
LABEL_6:
    [a1 setUploadAssets:0];
    goto LABEL_7;
  }
  if (*(uint64_t *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10) < 1) {
    goto LABEL_6;
  }
LABEL_4:
  sub_10046DC40(a2);
  id v6 = objc_allocWithZone((Class)NSSet);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v8 = [v6 initWithArray:isa];

  [a1 setUploadAssets:v8];
LABEL_7:
  *a3 = 0;
}

void sub_1000341BC(unsigned char *a1@<X8>)
{
  sub_1000340A8(*(id *)(v1 + 24), *(void *)(v1 + 16), a1);
}

Swift::Void __swiftcall StoredProofingSession.update(idType:)(Swift::String idType)
{
  id v2 = v1;
  object = idType._object;
  uint64_t countAndFlagsBits = idType._countAndFlagsBits;
  id v5 = [v1 managedObjectContext];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = (void *)swift_allocObject();
    v7[2] = v2;
    v7[3] = countAndFlagsBits;
    v7[4] = object;
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = sub_1000343B0;
    *(void *)(v8 + 24) = v7;
    v11[4] = sub_100037310;
    v11[5] = v8;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_100032314;
    v11[3] = &unk_1006F5220;
    uint64_t v9 = _Block_copy(v11);
    id v10 = v2;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    [v6 performBlockAndWait:v9];

    _Block_release(v9);
    LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if (v6) {
      __break(1u);
    }
  }
}

uint64_t sub_100034370()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1000343B0()
{
}

uint64_t sub_1000343D0()
{
  return _swift_deallocObject(v0, 32, 7);
}

id StoredProofingSession.update(state:proofingSessionID:pairingID:target:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  id result = [v7 managedObjectContext];
  if (result)
  {
    unint64_t v17 = result;
    unint64_t v18 = (void *)swift_allocObject();
    v18[2] = v8;
    v18[3] = a1;
    v18[4] = a2;
    v18[5] = a3;
    void v18[6] = a4;
    v18[7] = a5;
    v18[8] = a6;
    v18[9] = a7;
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = sub_10003469C;
    *(void *)(v19 + 24) = v18;
    v22[4] = sub_100037310;
    v22[5] = v19;
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 1107296256;
    void v22[2] = sub_100032314;
    v22[3] = &unk_1006F5298;
    unint64_t v20 = _Block_copy(v22);
    id v21 = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    [v17 performBlockAndWait:v20];

    _Block_release(v20);
    LOBYTE(v17) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    id result = (id)swift_release();
    if (v17) {
      __break(1u);
    }
  }
  return result;
}

id sub_1000345A8(void *a1)
{
  NSString v2 = String._bridgeToObjectiveC()();
  [a1 setState:v2];

  NSString v3 = String._bridgeToObjectiveC()();
  [a1 setProofingSessionID:v3];

  NSString v4 = String._bridgeToObjectiveC()();
  [a1 setPairingID:v4];

  uint64_t v5 = IdentityTarget.rawValue.getter();

  return [a1 setTarget:v5];
}

uint64_t sub_100034694()
{
  return sub_100035A7C(80);
}

id sub_10003469C()
{
  return sub_1000345A8(*(void **)(v0 + 16));
}

uint64_t sub_1000346B0()
{
  return _swift_deallocObject(v0, 32, 7);
}

Swift::Void __swiftcall StoredProofingSession.update(shouldScheduleUploads:)(Swift::Bool shouldScheduleUploads)
{
  NSString v2 = v1;
  id v4 = [v1 managedObjectContext];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v2;
    *(unsigned char *)(v6 + 24) = shouldScheduleUploads;
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = sub_10003487C;
    *(void *)(v7 + 24) = v6;
    v10[4] = sub_100037310;
    v10[5] = v7;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 1107296256;
    v10[2] = sub_100032314;
    v10[3] = &unk_1006F5310;
    uint64_t v8 = _Block_copy(v10);
    id v9 = v2;
    swift_retain();
    swift_release();
    [v5 performBlockAndWait:v8];

    _Block_release(v8);
    LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if (v5) {
      __break(1u);
    }
  }
}

uint64_t sub_100034844()
{
  return _swift_deallocObject(v0, 25, 7);
}

id sub_10003487C()
{
  return [*(id *)(v0 + 16) setShouldScheduleUploads:*(unsigned __int8 *)(v0 + 24)];
}

uint64_t sub_100034890()
{
  return _swift_deallocObject(v0, 32, 7);
}

Swift::Void __swiftcall StoredProofingSession.update(didShowWifiReminderAlert:)(Swift::Bool didShowWifiReminderAlert)
{
  NSString v2 = v1;
  id v4 = [v1 managedObjectContext];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v2;
    *(unsigned char *)(v6 + 24) = didShowWifiReminderAlert;
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = sub_100034A24;
    *(void *)(v7 + 24) = v6;
    v10[4] = sub_100037310;
    v10[5] = v7;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 1107296256;
    v10[2] = sub_100032314;
    v10[3] = &unk_1006F5388;
    uint64_t v8 = _Block_copy(v10);
    id v9 = v2;
    swift_retain();
    swift_release();
    [v5 performBlockAndWait:v8];

    _Block_release(v8);
    LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if (v5) {
      __break(1u);
    }
  }
}

id sub_100034A24()
{
  return [*(id *)(v0 + 16) setDidShowWifiReminderAlert:*(unsigned __int8 *)(v0 + 24)];
}

uint64_t sub_100034A38()
{
  return _swift_deallocObject(v0, 32, 7);
}

Swift::Void __swiftcall StoredProofingSession.update(didNotifyOnUploadsCompletion:)(Swift::Bool didNotifyOnUploadsCompletion)
{
  NSString v2 = v1;
  id v4 = [v1 managedObjectContext];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v2;
    *(unsigned char *)(v6 + 24) = didNotifyOnUploadsCompletion;
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = sub_100034BE0;
    *(void *)(v7 + 24) = v6;
    v10[4] = sub_100037310;
    v10[5] = v7;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 1107296256;
    v10[2] = sub_100032314;
    v10[3] = &unk_1006F5400;
    uint64_t v8 = _Block_copy(v10);
    id v9 = v2;
    swift_retain();
    swift_release();
    [v5 performBlockAndWait:v8];

    _Block_release(v8);
    LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if (v5) {
      __break(1u);
    }
  }
}

id sub_100034BCC(void *a1, char a2)
{
  return [a1 setDidNotifyOnUploadsCompletion:a2 & 1];
}

id sub_100034BE0()
{
  return [*(id *)(v0 + 16) setDidNotifyOnUploadsCompletion:*(unsigned __int8 *)(v0 + 24)];
}

uint64_t sub_100034BF4()
{
  return _swift_deallocObject(v0, 32, 7);
}

Swift::Void __swiftcall StoredProofingSession.update(hasUserConsentToShareBiomeData:)(Swift::Bool hasUserConsentToShareBiomeData)
{
  NSString v2 = v1;
  id v4 = [v1 managedObjectContext];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v2;
    *(unsigned char *)(v6 + 24) = hasUserConsentToShareBiomeData;
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = sub_100034D88;
    *(void *)(v7 + 24) = v6;
    v10[4] = sub_100037310;
    v10[5] = v7;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 1107296256;
    v10[2] = sub_100032314;
    v10[3] = &unk_1006F5478;
    uint64_t v8 = _Block_copy(v10);
    id v9 = v2;
    swift_retain();
    swift_release();
    [v5 performBlockAndWait:v8];

    _Block_release(v8);
    LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if (v5) {
      __break(1u);
    }
  }
}

id sub_100034D88()
{
  return [*(id *)(v0 + 16) setHasUserConsentToShareBiomeData:*(unsigned __int8 *)(v0 + 24)];
}

uint64_t sub_100034D9C()
{
  return _swift_deallocObject(v0, 32, 7);
}

id StoredProofingSession.update(serverAttestedProvisioningData:)(uint64_t a1, unint64_t a2)
{
  NSString v3 = v2;
  id result = [v2 managedObjectContext];
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = (void *)swift_allocObject();
    v8[2] = v3;
    v8[3] = a1;
    v8[4] = a2;
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = sub_100034F4C;
    *(void *)(v9 + 24) = v8;
    v12[4] = sub_100037310;
    v12[5] = v9;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 1107296256;
    v12[2] = sub_100032314;
    v12[3] = &unk_1006F54F0;
    id v10 = _Block_copy(v12);
    id v11 = v3;
    sub_10002CEB0(a1, a2);
    swift_retain();
    swift_release();
    [v7 performBlockAndWait:v10];

    _Block_release(v10);
    LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    id result = (id)swift_release();
    if (v7) {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100034F44()
{
  return sub_10003553C(40);
}

void sub_100034F4C()
{
}

void sub_100034F6C(uint64_t (*a1)(void, void), SEL *a2)
{
  id v4 = (void *)v2[2];
  id v5 = (id)a1(v2[3], v2[4]);
  [v4 *a2:v5];
}

uint64_t sub_100034FD8()
{
  return _swift_deallocObject(v0, 32, 7);
}

Swift::Void __swiftcall StoredProofingSession.update(issuerCurrentCredentialCapacity:)(Swift::Int issuerCurrentCredentialCapacity)
{
  NSString v2 = v1;
  id v4 = [v1 managedObjectContext];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v2;
    *(void *)(v6 + 24) = issuerCurrentCredentialCapacity;
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = sub_10003519C;
    *(void *)(v7 + 24) = v6;
    v10[4] = sub_100037310;
    v10[5] = v7;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 1107296256;
    v10[2] = sub_100032314;
    v10[3] = &unk_1006F5568;
    uint64_t v8 = _Block_copy(v10);
    id v9 = v2;
    swift_retain();
    swift_release();
    [v5 performBlockAndWait:v8];

    _Block_release(v8);
    LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if (v5) {
      __break(1u);
    }
  }
}

uint64_t sub_100035164()
{
  return _swift_deallocObject(v0, 32, 7);
}

id sub_10003519C()
{
  return [*(id *)(v0 + 16) setIssuerCurrentCredentialCapacity:*(void *)(v0 + 24)];
}

uint64_t sub_1000351AC()
{
  return _swift_deallocObject(v0, 32, 7);
}

const char *StoredPrearmTrust.entityName.unsafeMutableAddressor()
{
  return "PrearmTrust";
}

uint64_t static StoredPrearmTrust.entityName.getter()
{
  return 0x72546D7261657250;
}

uint64_t StoredPrearmTrust.Version.init(rawValue:)(__int16 a1)
{
  if ((a1 & 0xFFFC) != 0) {
    return 3;
  }
  else {
    return 0x2010003u >> (8 * a1);
  }
}

uint64_t StoredPrearmTrust.Version.rawValue.getter(unsigned __int8 a1)
{
  return a1 + 1;
}

BOOL sub_100035218(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_10003522C()
{
  __int16 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void sub_100035274()
{
  Hasher._combine(_:)(*v0 + 1);
}

Swift::Int sub_1000352A4()
{
  __int16 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

unsigned __int16 *sub_1000352E8@<X0>(unsigned __int16 *result@<X0>, char *a2@<X8>)
{
  unsigned int v2 = *result;
  if (v2 >= 4) {
    char v3 = 3;
  }
  else {
    char v3 = 0x2010003u >> (8 * v2);
  }
  *a2 = v3;
  return result;
}

void sub_100035310(_WORD *a1@<X8>)
{
  *a1 = *v1 + 1;
}

id StoredPrearmTrust.update(keyBlob:version:)(uint64_t a1, unint64_t a2, __int16 a3)
{
  id v4 = v3;
  id result = [v3 managedObjectContext];
  if (result)
  {
    id v9 = result;
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = v4;
    *(void *)(v10 + 24) = a1;
    *(void *)(v10 + 32) = a2;
    *(_WORD *)(v10 + 40) = a3;
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = sub_100035588;
    *(void *)(v11 + 24) = v10;
    v14[4] = sub_100037310;
    v14[5] = v11;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 1107296256;
    v14[2] = sub_100032314;
    v14[3] = &unk_1006F55E0;
    long long v12 = _Block_copy(v14);
    id v13 = v4;
    sub_10002CEB0(a1, a2);
    swift_retain();
    swift_release();
    [v9 performBlockAndWait:v12];

    _Block_release(v12);
    LOBYTE(v9) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    id result = (id)swift_release();
    if (v9) {
      __break(1u);
    }
  }
  return result;
}

id sub_1000354C0(void *a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [a1 setKeyBlob:isa];

  return [a1 setVersion:a4];
}

uint64_t sub_100035534()
{
  return sub_10003553C(42);
}

uint64_t sub_10003553C(uint64_t a1)
{
  sub_10000C5F4(*(void *)(v1 + 24), *(void *)(v1 + 32));

  return _swift_deallocObject(v1, a1, 7);
}

id sub_100035588()
{
  return sub_1000354C0(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(_WORD *)(v0 + 40));
}

uint64_t sub_100035598()
{
  return _swift_deallocObject(v0, 32, 7);
}

Swift::Void __swiftcall StoredPrearmTrust.update(requiresDeletion:)(Swift::Bool requiresDeletion)
{
  unsigned int v2 = v1;
  id v4 = [v1 managedObjectContext];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v2;
    *(unsigned char *)(v6 + 24) = requiresDeletion;
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = sub_10003572C;
    *(void *)(v7 + 24) = v6;
    v10[4] = sub_100037310;
    v10[5] = v7;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 1107296256;
    v10[2] = sub_100032314;
    v10[3] = &unk_1006F5658;
    uint64_t v8 = _Block_copy(v10);
    id v9 = v2;
    swift_retain();
    swift_release();
    [v5 performBlockAndWait:v8];

    _Block_release(v8);
    LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if (v5) {
      __break(1u);
    }
  }
}

id sub_10003572C()
{
  return [*(id *)(v0 + 16) setRequiresDeletion:*(unsigned __int8 *)(v0 + 24)];
}

uint64_t sub_100035740()
{
  return _swift_deallocObject(v0, 32, 7);
}

const char *StoredUploadAsset.entityName.unsafeMutableAddressor()
{
  return "UploadAsset";
}

uint64_t static StoredUploadAsset.entityName.getter()
{
  return 0x734164616F6C7055;
}

Swift::Void __swiftcall StoredUploadAsset.update(assetFileURL:assetType:recordUUID:)(Swift::String_optional assetFileURL, Swift::String_optional assetType, Swift::String_optional recordUUID)
{
  id v4 = v3;
  object = recordUUID.value._object;
  uint64_t countAndFlagsBits = recordUUID.value._countAndFlagsBits;
  uint64_t v7 = assetType.value._object;
  uint64_t v8 = assetType.value._countAndFlagsBits;
  id v9 = assetFileURL.value._object;
  uint64_t v10 = assetFileURL.value._countAndFlagsBits;
  id v11 = [v4 managedObjectContext];
  if (v11)
  {
    long long v12 = v11;
    id v13 = (void *)swift_allocObject();
    v13[2] = v4;
    v13[3] = v10;
    v13[4] = v9;
    v13[5] = v8;
    v13[6] = v7;
    v13[7] = countAndFlagsBits;
    v13[8] = object;
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = sub_100035AD8;
    *(void *)(v14 + 24) = v13;
    v18[4] = sub_100037310;
    v18[5] = v14;
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 1107296256;
    v18[2] = sub_100032314;
    v18[3] = &unk_1006F56D0;
    unint64_t v15 = _Block_copy(v18);
    swift_bridgeObjectRetain();
    swift_retain();
    id v16 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_release();
    [v12 performBlockAndWait:v15];

    _Block_release(v15);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if (isEscapingClosureAtFileLocation) {
      __break(1u);
    }
  }
}

void sub_100035940(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
}

void sub_10003597C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, NSString a5, uint64_t a6, uint64_t a7, SEL *a8, SEL *a9, SEL *a10)
{
  if (a3) {
    NSString v14 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v14 = 0;
  }
  [a1 *a8:v14];

  if (a5) {
    a5 = String._bridgeToObjectiveC()();
  }
  [a1 *a9:a5];

  if (a7) {
    NSString v15 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v15 = 0;
  }
  id v16 = v15;
  [a1 *a10];
}

uint64_t sub_100035A74()
{
  return sub_100035A7C(72);
}

uint64_t sub_100035A7C(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v1, a1, 7);
}

void sub_100035AD8()
{
}

void sub_100035AF4(SEL *a1, SEL *a2, SEL *a3)
{
  sub_10003597C(*(void **)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), *(NSString *)(v3 + 48), *(void *)(v3 + 56), *(void *)(v3 + 64), a1, a2, a3);
}

uint64_t sub_100035B34()
{
  return _swift_deallocObject(v0, 32, 7);
}

void *StoredProofingBiomeData.entityName.unsafeMutableAddressor()
{
  return &static StoredProofingBiomeData.entityName;
}

unint64_t static StoredProofingBiomeData.entityName.getter()
{
  return 0xD000000000000011;
}

Swift::Void __swiftcall StoredProofingBiomeData.update(proofingSessionID:proofingDecision:isDonated:)(Swift::String_optional proofingSessionID, Swift::String_optional proofingDecision, Swift::Bool isDonated)
{
  id v4 = v3;
  object = proofingDecision.value._object;
  uint64_t countAndFlagsBits = proofingDecision.value._countAndFlagsBits;
  uint64_t v8 = proofingSessionID.value._object;
  uint64_t v9 = proofingSessionID.value._countAndFlagsBits;
  id v10 = [v3 managedObjectContext];
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = v4;
    *(void *)(v12 + 24) = v9;
    *(void *)(v12 + 32) = v8;
    *(void *)(v12 + 40) = countAndFlagsBits;
    *(void *)(v12 + 48) = object;
    *(unsigned char *)(v12 + 56) = isDonated;
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = sub_100035E24;
    *(void *)(v13 + 24) = v12;
    void v16[4] = sub_100037310;
    v16[5] = v13;
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 1107296256;
    v16[2] = sub_100032314;
    v16[3] = &unk_1006F5748;
    NSString v14 = _Block_copy(v16);
    swift_bridgeObjectRetain();
    swift_retain();
    id v15 = v4;
    swift_bridgeObjectRetain();
    swift_release();
    [v11 performBlockAndWait:v14];

    _Block_release(v14);
    LOBYTE(v11) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if (v11) {
      __break(1u);
    }
  }
}

id sub_100035D20(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, NSString a5, char a6)
{
  if (a3) {
    NSString v9 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v9 = 0;
  }
  [a1 setProofingSessionID:v9];

  if (a5) {
    a5 = String._bridgeToObjectiveC()();
  }
  [a1 setProofingDecision:a5];

  return [a1 setIsDonated:a6 & 1];
}

uint64_t sub_100035DDC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 57, 7);
}

id sub_100035E24()
{
  return sub_100035D20(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(NSString *)(v0 + 48), *(unsigned char *)(v0 + 56));
}

uint64_t sub_100035E38()
{
  return _swift_deallocObject(v0, 32, 7);
}

Swift::Void __swiftcall StoredProofingBiomeData.update(isDonated:)(Swift::Bool isDonated)
{
  unsigned int v2 = v1;
  id v4 = [v1 managedObjectContext];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v2;
    *(unsigned char *)(v6 + 24) = isDonated;
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = sub_100035FCC;
    *(void *)(v7 + 24) = v6;
    v10[4] = sub_100037310;
    v10[5] = v7;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 1107296256;
    v10[2] = sub_100032314;
    v10[3] = &unk_1006F57C0;
    uint64_t v8 = _Block_copy(v10);
    id v9 = v2;
    swift_retain();
    swift_release();
    [v5 performBlockAndWait:v8];

    _Block_release(v8);
    LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if (v5) {
      __break(1u);
    }
  }
}

id sub_100035FCC()
{
  return [*(id *)(v0 + 16) setIsDonated:*(unsigned __int8 *)(v0 + 24)];
}

uint64_t sub_100035FE0()
{
  return _swift_deallocObject(v0, 32, 7);
}

Swift::Void __swiftcall StoredProofingBiomeData.update(optInStatus:)(Swift::Bool optInStatus)
{
  unsigned int v2 = v1;
  id v4 = [v1 managedObjectContext];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v2;
    *(unsigned char *)(v6 + 24) = optInStatus;
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = sub_100036174;
    *(void *)(v7 + 24) = v6;
    v10[4] = sub_100037310;
    v10[5] = v7;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 1107296256;
    v10[2] = sub_100032314;
    v10[3] = &unk_1006F5838;
    uint64_t v8 = _Block_copy(v10);
    id v9 = v2;
    swift_retain();
    swift_release();
    [v5 performBlockAndWait:v8];

    _Block_release(v8);
    LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if (v5) {
      __break(1u);
    }
  }
}

id sub_100036174()
{
  return [*(id *)(v0 + 16) setOptInStatus:*(unsigned __int8 *)(v0 + 24)];
}

uint64_t sub_100036188()
{
  return _swift_deallocObject(v0, 32, 7);
}

id StoredProofingBiomeData.update(optInDate:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3);
  id result = [v1 managedObjectContext];
  if (result)
  {
    uint64_t v7 = result;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
    unint64_t v8 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v1;
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v9 + v8, (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = sub_1000364A8;
    *(void *)(v10 + 24) = v9;
    aBlock[4] = sub_100037310;
    aBlock[5] = v10;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100032314;
    aBlock[3] = &unk_1006F58B0;
    id v11 = _Block_copy(aBlock);
    id v12 = v1;
    swift_retain();
    swift_release();
    [v7 performBlockAndWait:v11];

    _Block_release(v11);
    LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    id result = (id)swift_release();
    if (v7) {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1000363DC()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_1000364A8()
{
}

void sub_1000364B4(SEL *a1)
{
  type metadata accessor for Date();
  uint64_t v3 = *(void **)(v1 + 16);
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  [v3 *a1:isa];
}

uint64_t sub_100036550()
{
  return _swift_deallocObject(v0, 32, 7);
}

id StoredProofingBiomeData.update(proofingSessionID:credentialIdentifier:optInDate:optInStatus:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v28 = a3;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  id result = [v6 managedObjectContext];
  if (result)
  {
    id v16 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v13 + 16);
    id v27 = result;
    v16(&v25[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)], a5, v12);
    uint64_t v17 = *(unsigned __int8 *)(v13 + 80);
    int v26 = a6;
    uint64_t v18 = (v17 + 57) & ~v17;
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = v6;
    *(void *)(v19 + 24) = a1;
    uint64_t v20 = v28;
    *(void *)(v19 + 32) = a2;
    *(void *)(v19 + 40) = v20;
    *(void *)(v19 + 48) = a4;
    *(unsigned char *)(v19 + 56) = v26 & 1;
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v13 + 32))(v19 + v18, &v25[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)], v12);
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = sub_1000369B0;
    *(void *)(v21 + 24) = v19;
    aBlock[4] = sub_100037310;
    aBlock[5] = v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100032314;
    aBlock[3] = &unk_1006F5928;
    uint64_t v22 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    id v23 = v6;
    swift_release();
    id v24 = v27;
    [v27 performBlockAndWait:v22];

    _Block_release(v22);
    LOBYTE(v22) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    id result = (id)swift_release();
    if (v22) {
      __break(1u);
    }
  }
  return result;
}

void sub_1000367EC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a3) {
    NSString v8 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v8 = 0;
  }
  [a1 setProofingSessionID:v8];

  NSString v9 = String._bridgeToObjectiveC()();
  [a1 setCredentialIdentifier:v9];

  [a1 setOptInStatus:a6 & 1];
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  [a1 setOptInDate:isa];
}

uint64_t sub_1000368D4()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 57) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_1000369B0()
{
  type metadata accessor for Date();
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 48);
  char v6 = *(unsigned char *)(v0 + 56);

  sub_1000367EC(v1, v2, v3, v4, v5, v6);
}

uint64_t sub_100036A20()
{
  return _swift_deallocObject(v0, 32, 7);
}

void *StoredRandomizedBackgroundActivity.entityName.unsafeMutableAddressor()
{
  return &static StoredRandomizedBackgroundActivity.entityName;
}

unint64_t static StoredRandomizedBackgroundActivity.entityName.getter()
{
  return 0xD00000000000001CLL;
}

uint64_t StoredRandomizedBackgroundActivity.update(lastAttemptAt:lastSuccessfulAttemptAt:nextAttemptAt:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v41 = a3;
  uint64_t v42 = a2;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v39 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100007764(&qword_1007239B0);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v40 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v38 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  id v16 = (char *)&v38 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v38 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v38 - v20;
  id v43 = v4;
  id v22 = [v4 lastAttemptAt];
  if (v22)
  {
    id v23 = v22;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    id v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    v24(v19, 0, 1, v5);
  }
  else
  {
    id v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    v24(v19, 1, 1, v5);
  }
  sub_100036E6C();
  optionalMax<A>(_:_:)();
  sub_100027994((uint64_t)v19);
  uint64_t v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (v25(v21, 1, v5) == 1)
  {
    Class isa = 0;
  }
  else
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v21, v5);
  }
  id v27 = v43;
  [v43 setLastAttemptAt:isa];

  uint64_t v28 = v27;
  id v29 = [v27 lastSuccessfulAttemptAt];
  if (v29)
  {
    uint64_t v30 = v29;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v31 = 0;
  }
  else
  {
    uint64_t v31 = 1;
  }
  v24(v13, v31, 1, v5);
  optionalMax<A>(_:_:)();
  sub_100027994((uint64_t)v13);
  if (v25(v16, 1, v5) == 1)
  {
    Class v32 = 0;
  }
  else
  {
    Class v32 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v16, v5);
  }
  uint64_t v34 = (uint64_t)v40;
  uint64_t v33 = v41;
  [v28 setLastSuccessfulAttemptAt:v32];

  sub_100033298(v33, v34);
  if (v25((char *)v34, 1, v5) == 1) {
    return sub_100027994(v34);
  }
  unint64_t v36 = v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v39, v34, v5);
  Class v37 = Date._bridgeToObjectiveC()().super.isa;
  [v28 setNextAttemptAt:v37];

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v36, v5);
}

unint64_t sub_100036E6C()
{
  unint64_t result = qword_100720558;
  if (!qword_100720558)
  {
    type metadata accessor for Date();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100720558);
  }
  return result;
}

unint64_t sub_100036EC8()
{
  unint64_t result = qword_100720560;
  if (!qword_100720560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100720560);
  }
  return result;
}

unsigned char *initializeBufferWithCopyOfBuffer for IDVDataSource(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t _s7VersionOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s7VersionOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100037084);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t sub_1000370AC(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_1000370B4(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for StoredPrearmTrust.Version()
{
  return &type metadata for StoredPrearmTrust.Version;
}

uint64_t initializeBufferWithCopyOfBuffer for PrearmTrustWrapper(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for PrearmTrustWrapper(uint64_t a1)
{
  sub_10000C5F4(*(void *)a1, *(void *)(a1 + 8));

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PrearmTrustWrapper(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_10002CEB0(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PrearmTrustWrapper(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_10002CEB0(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_10000C5F4(v6, v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for PrearmTrustWrapper(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for PrearmTrustWrapper(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10000C5F4(v4, v5);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for PrearmTrustWrapper(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 34)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PrearmTrustWrapper(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 34) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 34) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PrearmTrustWrapper()
{
  return &type metadata for PrearmTrustWrapper;
}

uint64_t sub_1000373FC()
{
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  if (qword_10071F520 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1007603C8;
  id v1 = objc_allocWithZone((Class)DCBiometricStore);
  swift_bridgeObjectRetain();
  uint64_t v10 = &type metadata for IDCredBiometricStore;
  uint64_t v11 = &off_1007073B0;
  *(void *)&long long v9 = [v1 init];
  type metadata accessor for DigitalPresentmentCredentialManager();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v0;
  sub_10003C148((uint64_t)v12, (uint64_t)&v4);
  if (v5)
  {
    sub_10000C6CC((uint64_t)v12, &qword_100720928);
    sub_10000C6B4(&v4, (uint64_t)&v6);
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_10000C6CC((uint64_t)&v4, &qword_100720928);
    unint64_t v7 = &type metadata for IDCredCredentialStore;
    int v8 = &off_1006F7DB8;
    *(void *)&long long v6 = v0;
    sub_10000C6CC((uint64_t)v12, &qword_100720928);
  }
  sub_10000C6B4(&v6, v2 + 24);
  sub_10000C6B4(&v9, v2 + 64);
  return v2;
}

void *sub_100037558()
{
  id v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v27 = *(void *)(v2 - 8);
  uint64_t v28 = v2;
  __chkstk_darwin(v2);
  int v26 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  long long v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v7);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v8 - 8);
  uint64_t v9 = type metadata accessor for CVConfigurationProvider();
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v24 - v13;
  v0[4] = 0u;
  v0[5] = 0u;
  v0[2] = 0u;
  v0[3] = 0u;
  v0[1] = 0u;
  FeatureFlagProvider.init()();
  uint64_t v15 = sub_1000373FC();
  type metadata accessor for DIPBackgroundActivityManager();
  uint64_t v16 = static DIPBackgroundActivityManager.sharedInstance.getter();
  uint64_t v30 = 0;
  memset(v29, 0, sizeof(v29));
  sub_1004266D8((uint64_t)v29, (uint64_t)v31);
  sub_10003BEEC((uint64_t)v14, (uint64_t)v12);
  sub_10003BF50((uint64_t)v31, (uint64_t)v29);
  uint64_t v17 = sub_10003A068((uint64_t)v12, v15, v16, v29);
  sub_10003BFAC((uint64_t)v31);
  sub_10003C000((uint64_t)v14);
  v1[12] = v17;
  sub_100025C28(0, (unint64_t *)&qword_1007208E0);
  static DispatchQoS.unspecified.getter();
  v31[0] = &_swiftEmptyArrayStorage;
  sub_10003C05C((unint64_t *)&qword_10071FF60, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100007764((uint64_t *)&unk_100726420);
  sub_100031134((unint64_t *)&qword_10071FF70, (uint64_t *)&unk_100726420);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v25);
  uint64_t v18 = v26;
  uint64_t v19 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v1[14] = 0;
  v1[15] = 0;
  v1[13] = v19;
  defaultLogger()();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    id v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Entering Daemon initializer group", v22, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v27 + 8))(v18, v28);
  dispatch_group_enter((dispatch_group_t)qword_1007600B8);
  os_transaction_create();
  sub_1000379E4();
  swift_unknownObjectRelease();
  return v1;
}

void sub_1000379E4()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v14[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100037E64();
  sub_100038990();
  if (qword_10071F4B0 != -1) {
    swift_once();
  }
  uint64_t v5 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
  uint64_t v6 = (uint64_t)&v5[4];
  uint64_t v7 = v5 + 52;
  os_unfair_lock_lock(v5 + 52);
  sub_1000262B4(v6, v15);
  if (v0)
  {
    os_unfair_lock_unlock(v7);
    __break(1u);
  }
  else
  {
    os_unfair_lock_unlock(v7);
    sub_100030A10((uint64_t)v15, (uint64_t)v14);
    sub_1000262D0((uint64_t)v15);
    sub_10000C728(v14, v14[3]);
    sub_100140B9C();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v14);
    sub_100039484();
    if (byte_1007600A0) {
      sub_100039EBC();
    }
    sub_10003A804();
    sub_1000385B0();
    v8._object = (void *)0x8000000100630670;
    v9._uint64_t countAndFlagsBits = 0x3230366538633331;
    v9._object = (void *)0xE800000000000000;
    v8._uint64_t countAndFlagsBits = 0xD000000000000012;
    logMilestone(tag:description:)(v9, v8);
    dispatch_group_leave((dispatch_group_t)qword_1007600B8);
    defaultLogger()();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Leaving Daemon initializer group", v12, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
}

id *sub_100037C58()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    Swift::String v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::String v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Deinit called from DaemonInitializer", v8, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  swift_release();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v1;
}

uint64_t sub_100037E0C()
{
  sub_100037C58();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DaemonInitializer()
{
  return self;
}

void (__cdecl *sub_100037E64())(int)
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v28 = *(void *)(v2 - 8);
  uint64_t v29 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  os_log_type_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  os_log_type_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Setting up System listeners", v14, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (qword_10071F488 != -1) {
    swift_once();
  }
  sub_1000D9250(qword_100760270, *(uint64_t *)algn_100760278, qword_100760280, unk_100760288);
  id v15 = [objc_allocWithZone((Class)type metadata accessor for DIPSystemNotificationListener()) init];
  uint64_t v16 = *(void **)(v1 + 24);
  *(void *)(v1 + 24) = v15;

  id v17 = [self defaultCenter];
  id v18 = [self mainQueue];
  uint64_t v34 = sub_100038368;
  uint64_t v35 = 0;
  aBlock = _NSConcreteStackBlock;
  uint64_t v31 = 1107296256;
  Class v32 = sub_100443B5C;
  uint64_t v33 = &unk_1006F5B80;
  uint64_t v19 = _Block_copy(&aBlock);
  id v20 = [v17 addObserverForName:NSCurrentLocaleDidChangeNotification object:0 queue:v18 usingBlock:v19];
  _Block_release(v19);
  swift_unknownObjectRelease();

  sub_100025C28(0, (unint64_t *)&unk_100720918);
  id v21 = *(id *)(v1 + 104);
  uint64_t v22 = static OS_dispatch_source.makeSignalSource(signal:queue:)();

  *(void *)(v1 + 112) = v22;
  swift_unknownObjectRelease();
  if (*(void *)(v1 + 112))
  {
    swift_getObjectType();
    uint64_t v34 = sub_10003848C;
    uint64_t v35 = 0;
    aBlock = _NSConcreteStackBlock;
    uint64_t v31 = 1107296256;
    Class v32 = sub_100593800;
    uint64_t v33 = &unk_1006F5BA8;
    id v23 = _Block_copy(&aBlock);
    swift_unknownObjectRetain();
    j___s8Dispatch0A3QoSV11unspecifiedACvgZ();
    sub_10006683C();
    OS_dispatch_source.setEventHandler(qos:flags:handler:)();
    _Block_release(v23);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v4, v29);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v27);
  }
  uint64_t v24 = (void (__cdecl *)(int))SIG_IGN.getter();
  __n128 result = signal(15, v24);
  if (*(void *)(v1 + 112))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    OS_dispatch_source.resume()();
    return (void (__cdecl *)(int))swift_unknownObjectRelease();
  }
  return result;
}

void sub_100038368()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Locale changed. stopping daemon", v6, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  exit(0);
}

void sub_10003848C()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "SIGTERM received; shutting down", v6, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  exit(0);
}

uint64_t *sub_1000385B0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v38 - v7;
  defaultLogger()();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    os_log_type_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Setting up IDV listeners", v11, 2u);
    swift_slowDealloc();
  }

  uint64_t v12 = *(void (**)(char *, uint64_t))(v3 + 8);
  v12(v8, v2);
  id v13 = [objc_allocWithZone((Class)type metadata accessor for IDVServiceListener()) init];
  uint64_t v14 = (void *)v1[2];
  v1[2] = v13;

  id v15 = [objc_allocWithZone((Class)type metadata accessor for IdentityManagementListener()) init];
  uint64_t v16 = (void *)v1[4];
  v1[4] = v15;

  uint64_t v17 = v1[4];
  if (v17)
  {
    id v18 = *(void **)(v17 + OBJC_IVAR____TtC8coreidvd26IdentityManagementListener_watchSessionManager);
    id v19 = v18;
  }
  else
  {
    id v18 = 0;
  }
  defaultLogger()();
  id v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "DaemonInitializer setting watch", v22, 2u);
    swift_slowDealloc();
  }

  v12(v6, v2);
  id v23 = (void *)v1[5];
  v1[5] = v18;

  id v24 = [objc_allocWithZone((Class)type metadata accessor for IdentityProofingDataSharingListener()) init];
  uint64_t v25 = (void *)v1[8];
  v1[8] = v24;

  id v26 = [objc_allocWithZone((Class)type metadata accessor for IdentityProvisioningListener()) init];
  uint64_t v27 = (void *)v1[6];
  v1[6] = v26;

  id v28 = [objc_allocWithZone((Class)type metadata accessor for IdentityProofingListener()) init];
  uint64_t v29 = (void *)v1[7];
  v1[7] = v28;

  id v30 = [objc_allocWithZone((Class)type metadata accessor for DIDocUploadSessionListener()) init];
  uint64_t v31 = (void *)v1[9];
  v1[9] = v30;

  id v32 = [objc_allocWithZone((Class)type metadata accessor for MobileDocumentReaderListener()) init];
  uint64_t v33 = (void *)v1[11];
  v1[11] = v32;

  memset(v38, 0, sizeof(v38));
  *(void *)&long long v39 = sub_10003BC84;
  *((void *)&v39 + 1) = v1;
  long long v41 = v39;
  memset(v40, 0, sizeof(v40));
  id v34 = objc_allocWithZone((Class)type metadata accessor for DigitalPresentmentListener());
  swift_retain();
  sub_10003BCD4(v38);
  uint64_t v35 = sub_100468468((uint64_t)v40);
  unint64_t v36 = (void *)v1[10];
  v1[10] = v35;

  if (qword_10071F600 != -1) {
    swift_once();
  }
  sub_1005EA994();
  return sub_10003BDE0(v38);
}

void sub_100038990()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v48 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)v38 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = (uint64_t (**)(uint64_t))type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  id v43 = (void (**)(char *, void, uint64_t (**)(uint64_t)))*(v45 - 1);
  __chkstk_darwin(v45);
  int v44 = (char *)v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v46 = *(void *)(v4 - 8);
  uint64_t v47 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  os_log_type_t v11 = (char *)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Performing daemon launch tasks", v14, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  dispatch_group_t v15 = dispatch_group_create();
  sub_100025C28(0, (unint64_t *)&qword_1007208E0);
  static OS_dispatch_queue.Attributes.concurrent.getter();
  static DispatchQoS.unspecified.getter();
  v43[13](v44, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v45);
  uint64_t v42 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v54 = sub_1000393A4;
  uint64_t v55 = 0;
  aBlock = _NSConcreteStackBlock;
  uint64_t v51 = 1107296256;
  uint64_t v45 = &v52;
  uint64_t v52 = sub_100593800;
  uint64_t v53 = &unk_1006F5A90;
  uint64_t v16 = _Block_copy(&aBlock);
  uint64_t v17 = v15;
  v38[1] = v15;
  id v18 = v17;
  static DispatchQoS.unspecified.getter();
  uint64_t v49 = &_swiftEmptyArrayStorage;
  uint64_t v19 = sub_10003C05C((unint64_t *)&unk_1007223A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v41 = sub_100007764((uint64_t *)&unk_1007208F0);
  int v44 = (char *)sub_100031134(&qword_1007223B0, (uint64_t *)&unk_1007208F0);
  v38[0] = v19;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);

  id v20 = *(void (***)(char *, void, uint64_t (**)(uint64_t)))(v48 + 8);
  v48 += 8;
  id v43 = v20;
  ((void (*)(char *, uint64_t))v20)(v2, v0);
  os_log_type_t v21 = *(void (**)(void, void))(v46 + 8);
  v46 += 8;
  long long v39 = v21;
  v21(v6, v47);
  uint64_t v54 = sub_100039444;
  uint64_t v55 = 0;
  aBlock = _NSConcreteStackBlock;
  uint64_t v51 = 1107296256;
  uint64_t v22 = v6;
  uint64_t v52 = sub_100593800;
  uint64_t v53 = &unk_1006F5AB8;
  id v23 = _Block_copy(&aBlock);
  id v24 = v18;
  static DispatchQoS.unspecified.getter();
  uint64_t v49 = &_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v23);
  uint64_t v25 = v24;

  ((void (*)(char *, uint64_t))v43)(v2, v0);
  uint64_t v26 = v47;
  v39(v6, v47);
  uint64_t v54 = sub_100039448;
  uint64_t v55 = 0;
  aBlock = _NSConcreteStackBlock;
  uint64_t v51 = 1107296256;
  uint64_t v52 = sub_100593800;
  uint64_t v53 = &unk_1006F5AE0;
  uint64_t v27 = _Block_copy(&aBlock);
  id v28 = v25;
  static DispatchQoS.unspecified.getter();
  uint64_t v49 = &_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v27);

  uint64_t v29 = (void (*)(void, void))v43;
  ((void (*)(char *, uint64_t))v43)(v2, v0);
  v39(v22, v26);
  uint64_t v54 = sub_10003A7F8;
  uint64_t v55 = v40;
  aBlock = _NSConcreteStackBlock;
  uint64_t v51 = 1107296256;
  uint64_t v52 = sub_100593800;
  uint64_t v53 = &unk_1006F5B08;
  id v30 = _Block_copy(&aBlock);
  uint64_t v31 = v28;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v49 = &_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v30);

  v29(v2, v0);
  id v32 = v39;
  v39(v22, v47);
  swift_release();
  uint64_t v54 = sub_10003A7FC;
  uint64_t v55 = v40;
  aBlock = _NSConcreteStackBlock;
  uint64_t v51 = 1107296256;
  uint64_t v52 = sub_100593800;
  uint64_t v53 = &unk_1006F5B30;
  uint64_t v33 = _Block_copy(&aBlock);
  id v34 = v31;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v49 = &_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v35 = (void *)v42;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v33);

  ((void (*)(char *, uint64_t))v43)(v2, v0);
  v32(v22, v47);
  swift_release();
  uint64_t v54 = sub_10003A800;
  uint64_t v55 = v40;
  aBlock = _NSConcreteStackBlock;
  uint64_t v51 = 1107296256;
  uint64_t v52 = sub_100593800;
  uint64_t v53 = &unk_1006F5B58;
  unint64_t v36 = _Block_copy(&aBlock);
  Class v37 = v34;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v49 = &_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v36);

  ((void (*)(char *, uint64_t))v43)(v2, v0);
  v32(v22, v47);
  swift_release();
  OS_dispatch_group.wait()();
}

uint64_t sub_1000393A4()
{
  if (qword_10071F4B0 != -1) {
    swift_once();
  }
  uint64_t v0 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
  uint64_t v1 = (uint64_t)&v0[4];
  uint64_t v2 = v0 + 52;
  os_unfair_lock_lock(v0 + 52);
  sub_1000262B4(v1, v4);
  os_unfair_lock_unlock(v2);
  return sub_1000262D0((uint64_t)v4);
}

uint64_t sub_100039448()
{
  type metadata accessor for NetworkMonitor();
  static NetworkMonitor.shared.getter();

  return swift_release();
}

uint64_t sub_100039484()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v30 = *(void *)(v2 - 8);
  uint64_t v31 = v2;
  __chkstk_darwin(v2);
  uint64_t v29 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v27 = *(void *)(v4 - 8);
  uint64_t v28 = v4;
  __chkstk_darwin(v4);
  uint64_t v26 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  os_log_type_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Registering background activities", v16, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  sub_1001BF8C0();
  uint64_t v17 = type metadata accessor for DIPBackgroundActivityManager();
  static DIPBackgroundActivityManager.sharedInstance.getter();
  DIPBackgroundActivityManager.registerActivity(identifier:activity:)();
  swift_release();
  uint64_t v25 = v17;
  static DIPBackgroundActivityManager.sharedInstance.getter();
  DIPBackgroundActivityManager.registerActivity(identifier:activity:)();
  swift_release();
  uint64_t v18 = *(void *)(v1 + 96);
  sub_10000C728((void *)(v18 + 160), *(void *)(v18 + 184));
  swift_retain();
  dispatch thunk of DIPBackgroundActivityManagerProtocol.registerActivity(identifier:activity:)();
  sub_10000C728((void *)(v18 + 160), *(void *)(v18 + 184));
  dispatch thunk of DIPBackgroundActivityManagerProtocol.registerActivity(identifier:activity:)();
  swift_release();
  sub_100025C28(0, (unint64_t *)&qword_1007208E0);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchQoS.QoSClass.default(_:), v6);
  uint64_t v19 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  aBlock[4] = sub_100039AC0;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100593800;
  aBlock[3] = &unk_1006F5A68;
  id v20 = _Block_copy(aBlock);
  os_log_type_t v21 = v26;
  static DispatchQoS.unspecified.getter();
  id v32 = &_swiftEmptyArrayStorage;
  sub_10003C05C((unint64_t *)&unk_1007223A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007764((uint64_t *)&unk_1007208F0);
  sub_100031134(&qword_1007223B0, (uint64_t *)&unk_1007208F0);
  uint64_t v22 = v29;
  uint64_t v23 = v31;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v22, v23);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v21, v28);
  if (qword_10071F458 != -1) {
    swift_once();
  }
  swift_retain();
  static DIPBackgroundActivityManager.sharedInstance.getter();
  DIPBackgroundActivityManager.registerActivity(identifier:activity:)();
  swift_release();
  return swift_release();
}

uint64_t sub_100039AC0()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchTime();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v17 - v9;
  id v11 = (id)qword_1007600B8;
  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  OS_dispatch_group.wait(timeout:)();

  v12(v10, v4);
  if (static DispatchTimeoutResult.== infix(_:_:)())
  {
    defaultLogger()();
    os_log_type_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Timed out waiting for the daemon to be initialized, proceeding to enable push", v15, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  if (qword_10071F558 != -1) {
    swift_once();
  }
  return sub_100446248();
}

uint64_t sub_100039D58()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Starting Managers with Delegates", v6, 2u);
    swift_slowDealloc();
  }

  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (qword_10071F580 != -1) {
    return swift_once();
  }
  return result;
}

void sub_100039EBC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  os_log_type_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = [self standardUserDefaults];
  v7._object = (void *)0x80000001006304F0;
  v7._uint64_t countAndFlagsBits = 0xD000000000000015;
  Swift::Bool v8 = NSUserDefaults.internalBool(forKey:)(v7);

  if (v8)
  {
    defaultLogger()();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      id v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Forcing dirty flag on due to user defaults settings", v11, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    *(void *)(v1 + 120) = os_transaction_create();
    swift_unknownObjectRelease();
  }
}

uint64_t sub_10003A068(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v30 = type metadata accessor for CVConfigurationProvider();
  uint64_t v31 = &off_1006FD048;
  Swift::Bool v8 = sub_10002C2D8(v29);
  sub_10003C0A4(a1, (uint64_t)v8);
  uint64_t v27 = &type metadata for RandomizedBackgroundActivityRunnerFactory;
  uint64_t v28 = &off_1006F8E70;
  v25[3] = &type metadata for CVRequestProvider;
  v25[4] = &off_1007051B8;
  uint64_t v9 = (_OWORD *)swift_allocObject();
  v25[0] = v9;
  long long v10 = a4[1];
  v9[1] = *a4;
  v9[2] = v10;
  v9[3] = a4[2];
  type metadata accessor for CVBackgroundActivity();
  uint64_t v11 = swift_allocObject();
  uint64_t v12 = sub_1000279F4((uint64_t)v29, v30);
  __chkstk_darwin(v12);
  os_log_type_t v14 = (char *)&v25[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v15 + 16))(v14);
  uint64_t v16 = sub_1000279F4((uint64_t)v26, (uint64_t)&type metadata for RandomizedBackgroundActivityRunnerFactory);
  __chkstk_darwin(v16);
  (*(void (**)(void))(v17 + 16))();
  uint64_t v18 = sub_1000279F4((uint64_t)v25, (uint64_t)&type metadata for CVRequestProvider);
  __chkstk_darwin(v18);
  id v20 = (_OWORD *)((char *)&v25[-1] - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_OWORD *))(v21 + 16))(v20);
  uint64_t v22 = sub_10003A338((uint64_t)v14, a2, a3, v20, v11);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v25);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v26);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v29);
  return v22;
}

uint64_t sub_10003A338(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, uint64_t a5)
{
  uint64_t v24 = type metadata accessor for DIPBackgroundActivityManager();
  uint64_t v25 = &protocol witness table for DIPBackgroundActivityManager;
  *(void *)&long long v23 = a3;
  uint64_t v21 = type metadata accessor for CVConfigurationProvider();
  uint64_t v22 = &off_1006FD048;
  long long v10 = sub_10002C2D8((uint64_t *)&v20);
  sub_10003C0A4(a1, (uint64_t)v10);
  uint64_t v18 = &type metadata for RandomizedBackgroundActivityRunnerFactory;
  uint64_t v19 = &off_1006F8E70;
  uint64_t v15 = &type metadata for CVRequestProvider;
  uint64_t v16 = &off_1007051B8;
  uint64_t v11 = (_OWORD *)swift_allocObject();
  *(void *)&long long v14 = v11;
  long long v12 = a4[1];
  v11[1] = *a4;
  v11[2] = v12;
  v11[3] = a4[2];
  swift_defaultActor_initialize();
  sub_10000C6B4(&v20, a5 + 112);
  *(void *)(a5 + 152) = a2;
  sub_10000C6B4(&v17, a5 + 200);
  sub_10000C6B4(&v23, a5 + 160);
  sub_10000C6B4(&v14, a5 + 240);
  return a5;
}

uint64_t sub_10003A450()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  os_log_type_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  swift_retain_n();
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    Swift::Bool v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)Swift::Bool v8 = 138412290;
    long long v10 = *(void **)(v1 + 40);
    if (v10)
    {
      uint64_t v13 = v8 + 12;
      uint64_t v14 = v2;
      uint64_t v15 = v10;
      id v11 = v10;
      uint64_t v2 = v14;
    }
    else
    {
      uint64_t v15 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v10;
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "DaemonInitializer getting watch = %@", v8, 0xCu);
    sub_100007764(&qword_1007208D0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return *(void *)(v1 + 40);
}

uint64_t sub_10003A690()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000C494;
  return sub_1004F0968();
}

uint64_t sub_10003A738(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10003A748()
{
  return swift_release();
}

uint64_t sub_10003A750(uint64_t a1, uint64_t a2)
{
  id v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  void *v6 = v3;
  v6[1] = sub_100025D64;
  return sub_100026718(a1, a2, v2);
}

uint64_t sub_10003A804()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[0] = type metadata accessor for DispatchQoS();
  uint64_t v4 = *(void *)(v14[0] - 8);
  __chkstk_darwin(v14[0]);
  id v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  long long v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100025C28(0, (unint64_t *)&qword_1007208E0);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchQoS.QoSClass.default(_:), v7);
  id v11 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  aBlock[4] = sub_100039D58;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100593800;
  aBlock[3] = &unk_1006F5BD0;
  long long v12 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter();
  v14[1] = &_swiftEmptyArrayStorage;
  sub_10003C05C((unint64_t *)&unk_1007223A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007764((uint64_t *)&unk_1007208F0);
  sub_100031134(&qword_1007223B0, (uint64_t *)&unk_1007208F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return (*(uint64_t (**)(char *, void))(v4 + 8))(v6, v14[0]);
}

uint64_t sub_10003AB60()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  id v6 = (char *)&v33 - v5;
  id v7 = [self mainBundle];
  id v8 = [v7 infoDictionary];

  if (v8)
  {
    uint64_t v9 = 0x6E776F6E6B6E75;
    uint64_t v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (*(void *)(v10 + 16)
      && (unint64_t v11 = sub_100590548(0x656C646E75424643, 0xEF6E6F6973726556), (v12 & 1) != 0)
      && (sub_10003BC28(*(void *)(v10 + 56) + 32 * v11, (uint64_t)&v41), swift_dynamicCast()))
    {
      uint64_t v13 = v39;
      unint64_t v14 = v40;
    }
    else
    {
      unint64_t v14 = 0xE700000000000000;
      uint64_t v13 = 0x6E776F6E6B6E75;
    }
    uint64_t v38 = v13;
    if (*(void *)(v10 + 16)
      && (unint64_t v15 = sub_100590548(0x6F6674616C505444, 0xEF646C6975426D72), (v16 & 1) != 0)
      && (sub_10003BC28(*(void *)(v10 + 56) + 32 * v15, (uint64_t)&v41), swift_dynamicCast()))
    {
      uint64_t v17 = v39;
      unint64_t v18 = v40;
    }
    else
    {
      unint64_t v18 = 0xE700000000000000;
      uint64_t v17 = 0x6E776F6E6B6E75;
    }
    uint64_t v37 = v17;
    if (*(void *)(v10 + 16) && (unint64_t v19 = sub_100590548(0x6975424B44535444, 0xEA0000000000646CLL), (v20 & 1) != 0))
    {
      sub_10003BC28(*(void *)(v10 + 56) + 32 * v19, (uint64_t)&v41);
    }
    else
    {
      long long v41 = 0u;
      long long v42 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((void *)&v42 + 1))
    {
      if (swift_dynamicCast())
      {
        uint64_t v9 = v39;
        unint64_t v21 = v40;
        goto LABEL_24;
      }
    }
    else
    {
      sub_10000C6CC((uint64_t)&v41, (uint64_t *)&unk_100727200);
    }
    unint64_t v21 = 0xE700000000000000;
LABEL_24:
    defaultLogger()();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v34 = v9;
      uint64_t v29 = v28;
      uint64_t v30 = swift_slowAlloc();
      uint64_t v36 = v0;
      *(void *)&long long v41 = v30;
      *(_DWORD *)uint64_t v29 = 136446978;
      uint64_t v35 = v6;
      swift_bridgeObjectRetain();
      uint64_t v39 = sub_100110D58(v38, v14, (uint64_t *)&v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v29 + 12) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v39 = sub_100110D58(v37, v18, (uint64_t *)&v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v29 + 22) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v39 = sub_100110D58(v34, v21, (uint64_t *)&v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v29 + 32) = 2082;
      if (byte_1007600A1) {
        uint64_t v31 = 1702195828;
      }
      else {
        uint64_t v31 = 0x65736C6166;
      }
      if (byte_1007600A1) {
        unint64_t v32 = 0xE400000000000000;
      }
      else {
        unint64_t v32 = 0xE500000000000000;
      }
      uint64_t v39 = sub_100110D58(v31, v32, (uint64_t *)&v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "coreidvd started. version = %{public}s, platform version = %{public}s, sdk version = %{public}s, diagnostics = %{public}s", (uint8_t *)v29, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v35, v36);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v6, v0);
    }
  }
  defaultLogger()();
  uint64_t v22 = Logger.logObject.getter();
  uint64_t v23 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v22, (os_log_type_t)v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, (os_log_type_t)v23, "coreidvd started", v24, 2u);
    swift_slowDealloc();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

void sub_10003B140()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  id v6 = (char *)&v36 - v5;
  uint64_t v7 = type metadata accessor for Locale();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100007764(&qword_100720910);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Locale.current.getter();
  Locale.region.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v14 = type metadata accessor for Locale.Region();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_10000C6CC((uint64_t)v13, &qword_100720910);
    return;
  }
  uint64_t v39 = v0;
  uint64_t v16 = Locale.Region.identifier.getter();
  unint64_t v18 = v17;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
  unint64_t v19 = self;
  id v20 = [v19 standardUserDefaults];
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [v20 stringForKey:v21];

  if (v22)
  {
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v25 = v24;

    if (v16 == v23 && v18 == v25)
    {
      swift_bridgeObjectRelease();
LABEL_8:
      swift_bridgeObjectRelease();
      defaultLogger()();
      os_log_type_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v29 = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "Device region has not changed since last launch", v29, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v39);
      return;
    }
    char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v26) {
      goto LABEL_8;
    }
  }
  uint64_t v38 = v16;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v30, v31))
  {
    unint64_t v32 = (uint8_t *)swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    uint64_t v37 = v19;
    *(_DWORD *)unint64_t v32 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v40 = sub_100110D58(v38, v18, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Detected new device region; region is now %{public}s",
      v32,
      0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v39);
    unint64_t v19 = v37;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v39);
  }
  if (qword_10071F5A0 != -1) {
    swift_once();
  }
  [(id)qword_100760850 removeAllCachedResponses];
  id v33 = [v19 standardUserDefaults];
  NSString v34 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v35 = String._bridgeToObjectiveC()();
  [v33 setObject:v34 forKey:v35];
}

void sub_10003B72C()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  id v6 = (char *)&v34 - v5;
  id v7 = [self mainBundle];
  id v8 = [v7 infoDictionary];

  if (!v8) {
    return;
  }
  uint64_t v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v9 + 16) || (unint64_t v10 = sub_100590548(0x656C646E75424643, 0xEF6E6F6973726556), (v11 & 1) == 0))
  {
    long long v38 = 0u;
    long long v39 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  sub_10003BC28(*(void *)(v9 + 56) + 32 * v10, (uint64_t)&v38);
  swift_bridgeObjectRelease();
  if (!*((void *)&v39 + 1))
  {
LABEL_11:
    sub_10000C6CC((uint64_t)&v38, (uint64_t *)&unk_100727200);
    uint64_t v35 = 0;
    uint64_t v14 = 0;
    goto LABEL_12;
  }
  int v12 = swift_dynamicCast();
  uint64_t v13 = v36;
  if (!v12) {
    uint64_t v13 = 0;
  }
  uint64_t v35 = v13;
  if (v12) {
    uint64_t v14 = v37;
  }
  else {
    uint64_t v14 = 0;
  }
LABEL_12:
  uint64_t v15 = self;
  id v16 = [v15 standardUserDefaults];
  NSString v17 = String._bridgeToObjectiveC()();
  id v18 = [v16 stringForKey:v17];

  if (!v18)
  {
    if (v14) {
      goto LABEL_24;
    }
LABEL_22:
    swift_bridgeObjectRelease();
    char v23 = 1;
    goto LABEL_25;
  }
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v21 = v20;

  if (!v14) {
    goto LABEL_22;
  }
  if (!v21)
  {
LABEL_24:
    char v23 = 0;
    goto LABEL_25;
  }
  uint64_t v22 = HIBYTE(v21) & 0xF;
  if ((v21 & 0x2000000000000000) == 0) {
    uint64_t v22 = v19 & 0xFFFFFFFFFFFFLL;
  }
  if (!v22)
  {
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  if (v35 == v19 && v14 == v21)
  {
    swift_bridgeObjectRelease();
LABEL_35:
    swift_bridgeObjectRelease();
    defaultLogger()();
    os_log_type_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v31, v32))
    {
      id v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Daemon version has not changed since last launch", v33, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
    return;
  }
  char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  char v23 = 0;
  if (v30) {
    goto LABEL_35;
  }
LABEL_25:
  defaultLogger()();
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v24, v25))
  {
    char v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Detected version change since last launch", v26, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  if (qword_10071F5A0 != -1) {
    swift_once();
  }
  [(id)qword_100760850 removeAllCachedResponses];
  id v27 = [v15 standardUserDefaults];
  if (v23)
  {
    NSString v28 = 0;
  }
  else
  {
    NSString v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  NSString v29 = String._bridgeToObjectiveC()();
  [v27 setObject:v28 forKey:v29];

  swift_unknownObjectRelease();
}

uint64_t sub_10003BC28(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10003BC84@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 96);
  a1[3] = type metadata accessor for CVBackgroundActivity();
  a1[4] = &off_100707638;
  *a1 = v3;

  return swift_retain();
}

uint64_t *sub_10003BCD4(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[6];
  uint64_t v5 = a1[8];
  uint64_t v6 = a1[10];
  uint64_t v8 = a1[12];
  uint64_t v9 = a1[14];
  uint64_t v11 = a1[18];
  uint64_t v10 = a1[16];
  sub_10003BDD0(*a1);
  sub_10003BDD0(v2);
  sub_10003BDD0(v3);
  sub_10003BDD0(v4);
  sub_10003BDD0(v5);
  sub_10003BDD0(v6);
  sub_10003BDD0(v8);
  sub_10003BDD0(v9);
  sub_10003BDD0(v10);
  sub_10003BDD0(v11);
  return a1;
}

uint64_t sub_10003BDD0(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t *sub_10003BDE0(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[6];
  uint64_t v5 = a1[8];
  uint64_t v6 = a1[10];
  uint64_t v8 = a1[12];
  uint64_t v9 = a1[14];
  uint64_t v11 = a1[18];
  uint64_t v10 = a1[16];
  sub_10003BEDC(*a1);
  sub_10003BEDC(v2);
  sub_10003BEDC(v3);
  sub_10003BEDC(v4);
  sub_10003BEDC(v5);
  sub_10003BEDC(v6);
  sub_10003BEDC(v8);
  sub_10003BEDC(v9);
  sub_10003BEDC(v10);
  sub_10003BEDC(v11);
  return a1;
}

uint64_t sub_10003BEDC(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_10003BEEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CVConfigurationProvider();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003BF50(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10003BFAC(uint64_t a1)
{
  return a1;
}

uint64_t sub_10003C000(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CVConfigurationProvider();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10003C05C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10003C0A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CVConfigurationProvider();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003C108()
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10003C148(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_100720928);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003C1F8()
{
  uint64_t v0 = sub_100007764(&qword_100720A68);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URL();
  sub_10004440C(v3, qword_100720930);
  uint64_t v4 = sub_1000443D4(v3, (uint64_t)qword_100720930);
  URL.init(string:)();
  uint64_t v5 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v2, 1, v3);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v4, v2, v3);
  }
  __break(1u);
  return result;
}

id sub_10003C328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DIPHTTPSession.Configuration(0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (double *)((char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  int v12 = (char *)&v21 - v11;
  uint64_t v13 = &v3[OBJC_IVAR____TtC8coreidvd23DIPAssessmentWebService_DUA_ORD_ENDPOINT];
  *(void *)uint64_t v13 = 0x726F5F646E65732FLL;
  *((void *)v13 + 1) = 0xE900000000000064;
  uint64_t v14 = &v3[OBJC_IVAR____TtC8coreidvd23DIPAssessmentWebService_DUA_TRAIN_ENDPOINT];
  *(void *)uint64_t v14 = 0x746F5F646E65732FLL;
  *((void *)v14 + 1) = 0xE900000000000064;
  uint64_t v15 = &v3[OBJC_IVAR____TtC8coreidvd23DIPAssessmentWebService_DUA_LABEL_ENDPOINT];
  *(void *)uint64_t v15 = 0x6C6F5F646E65732FLL;
  *((void *)v15 + 1) = 0xE900000000000064;
  sub_1000450F4(a3, (uint64_t)&v21 - v11, type metadata accessor for DIPHTTPSession.Configuration);
  id v16 = &v3[OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation];
  *(void *)id v16 = a1;
  *((void *)v16 + 1) = a2;
  sub_1000450F4((uint64_t)v12, (uint64_t)v10, type metadata accessor for DIPHTTPSession.Configuration);
  type metadata accessor for DIPHTTPSession(0);
  swift_allocObject();
  NSString v17 = v3;
  *(void *)&v17[OBJC_IVAR____TtC8coreidvd13DIPWebService_httpSession] = sub_1005D20EC(v10);

  id v18 = (objc_class *)type metadata accessor for DIPWebService();
  v21.receiver = v17;
  v21.super_class = v18;
  id v19 = [super init];
  sub_100045094((uint64_t)v12, type metadata accessor for DIPHTTPSession.Configuration);
  sub_100045094(a3, type metadata accessor for DIPHTTPSession.Configuration);
  return v19;
}

uint64_t sub_10003C500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[175] = v7;
  v8[174] = a7;
  v8[173] = a6;
  v8[172] = a5;
  v8[171] = a4;
  v8[170] = a3;
  v8[169] = a2;
  v8[168] = a1;
  uint64_t v9 = type metadata accessor for DIPError.Code();
  v8[176] = v9;
  v8[177] = *(void *)(v9 - 8);
  v8[178] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v8[179] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for DIPSignpost();
  v8[180] = v10;
  v8[181] = *(void *)(v10 - 8);
  v8[182] = swift_task_alloc();
  return _swift_task_switch(sub_10003C664, 0, 0);
}

uint64_t sub_10003C664()
{
  uint64_t v1 = v0[173];
  uint64_t v2 = v0[169];
  uint64_t v3 = v0[168];
  static DaemonSignposts.ordRequest.getter();
  DIPSignpost.init(_:)();
  sub_100007764(&qword_100720AC8);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100610730;
  *(void *)(v4 + 32) = 0x692D656C646E7562;
  *(void *)(v4 + 40) = 0xE900000000000064;
  *(void *)(v4 + 48) = v3;
  *(void *)(v4 + 56) = v2;
  swift_bridgeObjectRetain();
  unint64_t v5 = sub_10015CF20(v4);
  if (v1)
  {
    uint64_t v6 = v0[173];
    uint64_t v7 = v0[172];
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_100562120(v7, v6, v8, v10, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v0[183] = v5;
  if (v0[171])
  {
    uint64_t v12 = v0[170];
    uint64_t v13 = v0[171];
LABEL_5:
    v0[185] = v13;
    v0[184] = v12;
    uint64_t v14 = v0[175];
    uint64_t v15 = v0[174];
    v0[167] = type metadata accessor for ORDRequest(0);
    id v16 = sub_10002C2D8(v0 + 164);
    sub_1000450F4(v15, (uint64_t)v16, type metadata accessor for ORDRequest);
    uint64_t v17 = *(void *)(v14 + OBJC_IVAR____TtC8coreidvd23DIPAssessmentWebService_DUA_ORD_ENDPOINT);
    id v18 = *(void **)(v14 + OBJC_IVAR____TtC8coreidvd23DIPAssessmentWebService_DUA_ORD_ENDPOINT + 8);
    swift_bridgeObjectRetain();
    v19._uint64_t countAndFlagsBits = v17;
    v19._object = v18;
    String.append(_:)(v19);
    v0[186] = v13;
    swift_bridgeObjectRetain();
    unint64_t v20 = (void *)swift_task_alloc();
    v0[187] = v20;
    *unint64_t v20 = v0;
    v20[1] = sub_10003CD38;
    return sub_10003E244((uint64_t)(v0 + 164), v12, v13, v5);
  }
  if (qword_10071F4E0 != -1) {
    swift_once();
  }
  uint64_t v22 = *(os_unfair_lock_s **)(qword_100760360 + 56);
  uint64_t v23 = (uint64_t)&v22[4];
  uint64_t v24 = v22 + 112;
  os_unfair_lock_lock(v22 + 112);
  sub_1002AC168(v23, (uint64_t)(v0 + 2));
  os_unfair_lock_unlock(v24);
  sub_100044C64((uint64_t)(v0 + 2), (uint64_t)(v0 + 110));
  sub_100044C64((uint64_t)(v0 + 110), (uint64_t)(v0 + 56));
  if (sub_100044CCC((uint64_t)(v0 + 56)) != 1)
  {
    sub_100044CE4((uint64_t)(v0 + 60));
    sub_100044D90(v0 + 110);
    uint64_t v12 = v0[78];
    uint64_t v13 = v0[79];
    swift_bridgeObjectRetain();
    sub_100044F4C((uint64_t)(v0 + 60));
    goto LABEL_5;
  }
  uint64_t v25 = v0[178];
  uint64_t v26 = v0[177];
  uint64_t v27 = v0[176];
  swift_bridgeObjectRelease();
  NSString v28 = *(void (**)(uint64_t, void, uint64_t))(v26 + 104);
  v28(v25, enum case for DIPError.Code.unexpectedDaemonState(_:), v27);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10004504C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  unsigned int v43 = enum case for DIPError.Code.internalError(_:);
  uint64_t v29 = v0[181];
  uint64_t v44 = v0[180];
  uint64_t v45 = v0[182];
  uint64_t v30 = v0[178];
  uint64_t v42 = v0[176];
  uint64_t v31 = v0[175];
  sub_100007764((uint64_t *)&unk_1007225C0);
  os_log_type_t v32 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  unint64_t v33 = (*(unsigned __int8 *)(*(void *)v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v32 + 80);
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_100610730;
  unint64_t v35 = v34 + v33;
  uint64_t v36 = (void *)(v35 + v32[14]);
  uint64_t v37 = enum case for DIPError.PropertyKey.conversationID(_:);
  uint64_t v38 = type metadata accessor for DIPError.PropertyKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 104))(v35, v37, v38);
  uint64_t v39 = *(void *)(v31 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  uint64_t v40 = *(void *)(v31 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v36[3] = &type metadata for String;
  *uint64_t v36 = v39;
  v36[1] = v40;
  swift_errorRetain();
  swift_bridgeObjectRetain();
  sub_10015C504(v34);
  v28(v30, v43, v42);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v45, v44);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v41 = (uint64_t (*)(void))v0[1];
  return v41();
}

uint64_t sub_10003CD38()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 1504) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_10003CF70;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v2 + 1312);
    uint64_t v3 = sub_10003CE80;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10003CE80()
{
  uint64_t v1 = v0[182];
  uint64_t v2 = v0[181];
  uint64_t v3 = v0[180];
  v4._object = (void *)0x8000000100630BE0;
  v5._uint64_t countAndFlagsBits = 0x6462386637643638;
  v5._object = (void *)0xE800000000000000;
  v4._uint64_t countAndFlagsBits = 0xD000000000000014;
  logMilestone(tag:description:)(v5, v4);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_10003CF70()
{
  uint64_t v27 = v0[185];
  uint64_t v1 = v0[184];
  uint64_t v2 = v0[178];
  uint64_t v29 = v0[177];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 164));
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v3 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(*(void *)v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v3 + 80);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_100610730;
  unint64_t v6 = v5 + v4;
  uint64_t v7 = (void *)(v5 + v4 + v3[14]);
  uint64_t v8 = enum case for DIPError.PropertyKey.serverURL(_:);
  uint64_t v9 = type metadata accessor for DIPError.PropertyKey();
  uint64_t v25 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104);
  v25(v6, v8, v9);
  v7[3] = &type metadata for String;
  *uint64_t v7 = v1;
  v7[1] = v27;
  swift_errorRetain();
  sub_10015C504(v5);
  unsigned int v26 = enum case for DIPError.Code.internalError(_:);
  NSString v28 = *(void (**)(uint64_t))(v29 + 104);
  v28(v2);
  type metadata accessor for DIPError();
  sub_10004504C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  uint64_t v10 = v0[181];
  uint64_t v23 = v0[180];
  uint64_t v24 = v0[182];
  uint64_t v11 = v0[178];
  uint64_t v12 = v0[176];
  uint64_t v13 = v0[175];
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v14 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  unint64_t v15 = (*(unsigned __int8 *)(*(void *)v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v14 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_100610730;
  unint64_t v17 = v16 + v15;
  id v18 = (void *)(v16 + v15 + v14[14]);
  v25(v17, enum case for DIPError.PropertyKey.conversationID(_:), v9);
  uint64_t v19 = *(void *)(v13 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  uint64_t v20 = *(void *)(v13 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v18[3] = &type metadata for String;
  *id v18 = v19;
  v18[1] = v20;
  swift_errorRetain();
  swift_bridgeObjectRetain();
  sub_10015C504(v16);
  ((void (*)(uint64_t, void, uint64_t))v28)(v11, v26, v12);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v24, v23);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  objc_super v21 = (uint64_t (*)(void))v0[1];
  return v21();
}

uint64_t sub_10003D424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[171] = v3;
  v4[170] = a3;
  v4[169] = a2;
  v4[168] = a1;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[172] = v5;
  v4[173] = *(void *)(v5 - 8);
  v4[174] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v4[175] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DIPSignpost();
  v4[176] = v6;
  v4[177] = *(void *)(v6 - 8);
  v4[178] = swift_task_alloc();
  return _swift_task_switch(sub_10003D578, 0, 0);
}

uint64_t sub_10003D578()
{
  uint64_t v1 = v0[170];
  static DaemonSignposts.otdRequest.getter();
  DIPSignpost.init(_:)();
  if (v1)
  {
    uint64_t v2 = v0[169];
    uint64_t v3 = v0[170];
LABEL_3:
    v0[180] = v3;
    v0[179] = v2;
    uint64_t v4 = v0[171];
    uint64_t v5 = v0[168];
    v0[167] = type metadata accessor for OTDRequest(0);
    uint64_t v6 = sub_10002C2D8(v0 + 164);
    sub_1000450F4(v5, (uint64_t)v6, type metadata accessor for OTDRequest);
    uint64_t v7 = *(void *)(v4 + OBJC_IVAR____TtC8coreidvd23DIPAssessmentWebService_DUA_TRAIN_ENDPOINT);
    uint64_t v8 = *(void **)(v4 + OBJC_IVAR____TtC8coreidvd23DIPAssessmentWebService_DUA_TRAIN_ENDPOINT + 8);
    swift_bridgeObjectRetain();
    v9._uint64_t countAndFlagsBits = v7;
    v9._object = v8;
    String.append(_:)(v9);
    v0[181] = v3;
    swift_bridgeObjectRetain();
    uint64_t v10 = (void *)swift_task_alloc();
    v0[182] = v10;
    void *v10 = v0;
    v10[1] = sub_10003DB70;
    return sub_10003E244((uint64_t)(v0 + 164), v2, v3, 0);
  }
  if (qword_10071F4E0 != -1) {
    swift_once();
  }
  uint64_t v12 = *(os_unfair_lock_s **)(qword_100760360 + 56);
  uint64_t v13 = (uint64_t)&v12[4];
  uint64_t v14 = v12 + 112;
  os_unfair_lock_lock(v12 + 112);
  sub_1002AC168(v13, (uint64_t)(v0 + 2));
  os_unfair_lock_unlock(v14);
  sub_100044C64((uint64_t)(v0 + 2), (uint64_t)(v0 + 110));
  sub_100044C64((uint64_t)(v0 + 110), (uint64_t)(v0 + 56));
  if (sub_100044CCC((uint64_t)(v0 + 56)) != 1)
  {
    sub_100044CE4((uint64_t)(v0 + 60));
    sub_100044D90(v0 + 110);
    uint64_t v2 = v0[78];
    uint64_t v3 = v0[79];
    swift_bridgeObjectRetain();
    sub_100044F4C((uint64_t)(v0 + 60));
    goto LABEL_3;
  }
  unint64_t v15 = *(void (**)(uint64_t, void, uint64_t))(v0[173] + 104);
  v15(v0[174], enum case for DIPError.Code.serverUnavailable(_:), v0[172]);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10004504C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  unsigned int v30 = enum case for DIPError.Code.internalError(_:);
  uint64_t v16 = v0[177];
  uint64_t v31 = v0[176];
  uint64_t v32 = v0[178];
  uint64_t v17 = v0[174];
  uint64_t v29 = v0[172];
  uint64_t v18 = v0[171];
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v19 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(*(void *)v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v19 + 80);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_100610730;
  unint64_t v22 = v21 + v20;
  uint64_t v23 = (void *)(v22 + v19[14]);
  uint64_t v24 = enum case for DIPError.PropertyKey.conversationID(_:);
  uint64_t v25 = type metadata accessor for DIPError.PropertyKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 104))(v22, v24, v25);
  uint64_t v26 = *(void *)(v18 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  uint64_t v27 = *(void *)(v18 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v23[3] = &type metadata for String;
  *uint64_t v23 = v26;
  v23[1] = v27;
  swift_errorRetain();
  swift_bridgeObjectRetain();
  sub_10015C504(v21);
  v15(v17, v30, v29);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v32, v31);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  NSString v28 = (uint64_t (*)(void))v0[1];
  return v28();
}

uint64_t sub_10003DB70()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 1464) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_10003DD9C;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v2 + 1312);
    uint64_t v3 = sub_10003DCAC;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10003DCAC()
{
  uint64_t v1 = v0[178];
  uint64_t v2 = v0[177];
  uint64_t v3 = v0[176];
  v4._object = (void *)0x8000000100630B60;
  v5._uint64_t countAndFlagsBits = 0x3135306333336665;
  v5._object = (void *)0xE800000000000000;
  v4._uint64_t countAndFlagsBits = 0xD000000000000014;
  logMilestone(tag:description:)(v5, v4);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_10003DD9C()
{
  uint64_t v27 = v0[180];
  uint64_t v1 = v0[179];
  uint64_t v2 = v0[174];
  uint64_t v29 = v0[173];
  swift_bridgeObjectRelease();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 164));
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v3 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(*(void *)v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v3 + 80);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_100610730;
  unint64_t v6 = v5 + v4;
  uint64_t v7 = (void *)(v5 + v4 + v3[14]);
  uint64_t v8 = enum case for DIPError.PropertyKey.serverURL(_:);
  uint64_t v9 = type metadata accessor for DIPError.PropertyKey();
  uint64_t v25 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104);
  v25(v6, v8, v9);
  v7[3] = &type metadata for String;
  *uint64_t v7 = v1;
  v7[1] = v27;
  swift_errorRetain();
  sub_10015C504(v5);
  unsigned int v26 = enum case for DIPError.Code.internalError(_:);
  NSString v28 = *(void (**)(uint64_t))(v29 + 104);
  v28(v2);
  type metadata accessor for DIPError();
  sub_10004504C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  uint64_t v10 = v0[177];
  uint64_t v23 = v0[176];
  uint64_t v24 = v0[178];
  uint64_t v11 = v0[174];
  uint64_t v12 = v0[172];
  uint64_t v13 = v0[171];
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v14 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  unint64_t v15 = (*(unsigned __int8 *)(*(void *)v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v14 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_100610730;
  unint64_t v17 = v16 + v15;
  uint64_t v18 = (void *)(v16 + v15 + v14[14]);
  v25(v17, enum case for DIPError.PropertyKey.conversationID(_:), v9);
  uint64_t v19 = *(void *)(v13 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  uint64_t v20 = *(void *)(v13 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v18[3] = &type metadata for String;
  *uint64_t v18 = v19;
  v18[1] = v20;
  swift_errorRetain();
  swift_bridgeObjectRetain();
  sub_10015C504(v16);
  ((void (*)(uint64_t, void, uint64_t))v28)(v11, v26, v12);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v24, v23);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(void))v0[1];
  return v21();
}

uint64_t sub_10003E244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[39] = a4;
  v5[40] = v4;
  v5[37] = a2;
  v5[38] = a3;
  v5[36] = a1;
  uint64_t v6 = type metadata accessor for URLRequest();
  v5[41] = v6;
  v5[42] = *(void *)(v6 - 8);
  v5[43] = swift_task_alloc();
  sub_100007764(&qword_100720A68);
  v5[44] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for URL();
  v5[45] = v7;
  v5[46] = *(void *)(v7 - 8);
  v5[47] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DIPError.Code();
  v5[48] = v8;
  v5[49] = *(void *)(v8 - 8);
  v5[50] = swift_task_alloc();
  v5[51] = type metadata accessor for OTDRequest(0);
  v5[52] = swift_task_alloc();
  v5[53] = swift_task_alloc();
  v5[54] = type metadata accessor for ORDRequest(0);
  v5[55] = swift_task_alloc();
  v5[56] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Logger();
  v5[57] = v9;
  v5[58] = *(void *)(v9 - 8);
  v5[59] = swift_task_alloc();
  return _swift_task_switch(sub_10003E4D0, 0, 0);
}

uint64_t sub_10003E4D0()
{
  uint64_t v84 = v0;
  uint64_t v1 = (uint64_t)(v0 + 6);
  uint64_t v2 = v0[36];
  defaultLogger()();
  sub_10003BC28(v2, (uint64_t)(v0 + 2));
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v76 = v0[58];
    uint64_t v77 = v0[57];
    uint64_t v78 = v0[59];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v82 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    sub_10000C728(v0 + 2, v0[5]);
    v0[34] = swift_getDynamicType();
    sub_100007764(&qword_100720AC0);
    uint64_t v6 = String.init<A>(describing:)();
    v0[35] = sub_100110D58(v6, v7, &v82);
    uint64_t v1 = (uint64_t)(v0 + 6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "coreidvd: sendPostRequest of type %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v78, v77);
  }
  else
  {
    uint64_t v9 = v0[58];
    uint64_t v8 = v0[59];
    uint64_t v10 = v0[57];
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  sub_10003BC28(v0[36], v1);
  if (swift_dynamicCast())
  {
    uint64_t v11 = v0[36];
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    sub_10003BC28(v11, (uint64_t)(v0 + 30));
    swift_dynamicCast();
    sub_10004504C(&qword_100720AB8, (void (*)(uint64_t))type metadata accessor for ORDRequest);
    uint64_t v12 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    unint64_t v14 = v13;
    uint64_t v16 = v0[55];
    uint64_t v15 = v0[56];
    swift_release();
    unint64_t v17 = type metadata accessor for ORDRequest;
LABEL_8:
    uint64_t v20 = v17;
    sub_100045094(v16, v17);
    sub_100045094(v15, v20);
    uint64_t v80 = v1;
    goto LABEL_12;
  }
  if (swift_dynamicCast())
  {
    uint64_t v18 = v0[36];
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    sub_10003BC28(v18, (uint64_t)(v0 + 26));
    swift_dynamicCast();
    sub_10004504C(&qword_100720AB0, (void (*)(uint64_t))type metadata accessor for OTDRequest);
    uint64_t v12 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    unint64_t v14 = v19;
    uint64_t v16 = v0[52];
    uint64_t v15 = v0[53];
    swift_release();
    unint64_t v17 = type metadata accessor for OTDRequest;
    goto LABEL_8;
  }
  uint64_t v80 = v1;
  if (!swift_dynamicCast())
  {
    uint64_t v62 = v0[49];
    uint64_t v61 = v0[50];
    uint64_t v63 = v0[48];
    uint64_t v65 = v0[37];
    uint64_t v64 = v0[38];
    Class v66 = (void *)v0[36];
    uint64_t v82 = 0;
    unint64_t v83 = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    uint64_t v82 = 0xD000000000000015;
    unint64_t v83 = 0x8000000100630A40;
    sub_10000C728(v66, v66[3]);
    swift_getDynamicType();
    v67._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v67);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v62 + 104))(v61, enum case for DIPError.Code.badLogic(_:), v63);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v68 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v69 = (*(unsigned __int8 *)(*(void *)v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v68 + 80);
    uint64_t v70 = swift_allocObject();
    *(_OWORD *)(v70 + 16) = xmmword_100610730;
    unint64_t v71 = v70 + v69;
    uint64_t v72 = (void *)(v71 + v68[14]);
    uint64_t v73 = enum case for DIPError.PropertyKey.serverURL(_:);
    uint64_t v74 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 104))(v71, v73, v74);
    v72[3] = &type metadata for String;
    *uint64_t v72 = v65;
    v72[1] = v64;
    swift_bridgeObjectRetain();
    sub_10015C504(v70);
    type metadata accessor for DIPError();
    sub_10004504C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v75 = v80;
    uint64_t v22 = v0[49];
    uint64_t v21 = v0[50];
    uint64_t v79 = v0[48];
    uint64_t v24 = v0[37];
    uint64_t v23 = v0[38];
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v75);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v25 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v26 = (*(unsigned __int8 *)(*(void *)v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v25 + 80);
    uint64_t v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_100610730;
    unint64_t v28 = v27 + v26;
    uint64_t v29 = (void *)(v28 + v25[14]);
    uint64_t v30 = enum case for DIPError.PropertyKey.serverURL(_:);
    uint64_t v31 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 104))(v28, v30, v31);
    uint64_t v29[3] = &type metadata for String;
    *uint64_t v29 = v24;
    v29[1] = v23;
    swift_bridgeObjectRetain();
    swift_errorRetain();
    sub_10015C504(v27);
    (*(void (**)(uint64_t, void, uint64_t))(v22 + 104))(v21, enum case for DIPError.Code.internalError(_:), v79);
    type metadata accessor for DIPError();
    sub_10004504C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    goto LABEL_9;
  }
  uint64_t v49 = v0[36];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_10003BC28(v49, (uint64_t)(v0 + 14));
  swift_dynamicCast();
  uint64_t v50 = v0[19];
  uint64_t v51 = v0[20];
  uint64_t v52 = v0[21];
  v0[22] = v0[18];
  v0[23] = v50;
  v0[24] = v51;
  v0[25] = v52;
  sub_100044FF8();
  uint64_t v12 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v14 = v53;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
LABEL_12:
  uint64_t v34 = v0[45];
  uint64_t v35 = v0[46];
  uint64_t v36 = v0[44];
  v0[60] = v14;
  v0[61] = v12;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v80);
  URL.init(string:)();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v36, 1, v34) == 1)
  {
    uint64_t v38 = v0[49];
    uint64_t v37 = v0[50];
    uint64_t v39 = v0[48];
    uint64_t v41 = v0[37];
    uint64_t v40 = v0[38];
    sub_10000C6CC(v0[44], &qword_100720A68);
    (*(void (**)(uint64_t, void, uint64_t))(v38 + 104))(v37, enum case for DIPError.Code.badLogic(_:), v39);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v42 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v43 = (*(unsigned __int8 *)(*(void *)v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v42 + 80);
    uint64_t v44 = swift_allocObject();
    *(_OWORD *)(v44 + 16) = xmmword_100610730;
    unint64_t v45 = v44 + v43;
    uint64_t v46 = (void *)(v45 + v42[14]);
    uint64_t v47 = enum case for DIPError.PropertyKey.serverURL(_:);
    uint64_t v48 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 104))(v45, v47, v48);
    v46[3] = &type metadata for String;
    *uint64_t v46 = v41;
    v46[1] = v40;
    swift_bridgeObjectRetain();
    sub_10015C504(v44);
    type metadata accessor for DIPError();
    sub_10004504C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_10000C5F4(v12, v14);
LABEL_9:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v32 = (uint64_t (*)(void))v0[1];
    return v32();
  }
  uint64_t v54 = v0[47];
  uint64_t v55 = v0[43];
  uint64_t v56 = v0[39];
  (*(void (**)(uint64_t, void, void))(v0[46] + 32))(v54, v0[44], v0[45]);
  sub_10002CEB0(v12, v14);
  sub_1005D28FC(v54, v56, 0, 0, v55);
  URLRequest.httpMethod.setter();
  v57.value._uint64_t countAndFlagsBits = 0xD000000000000010;
  v57.value._object = (void *)0x8000000100630AC0;
  v58._uint64_t countAndFlagsBits = 0x2D746E65746E6F43;
  v58._object = (void *)0xEC00000065707954;
  URLRequest.setValue(_:forHTTPHeaderField:)(v57, v58);
  URLRequest.httpBody.setter();
  int v81 = (uint64_t (*)(uint64_t, uint64_t, char, char))((char *)&dword_100733FA0 + dword_100733FA0);
  NSString v59 = (void *)swift_task_alloc();
  v0[62] = v59;
  *NSString v59 = v0;
  v59[1] = sub_10003F2B0;
  uint64_t v60 = v0[43];
  return v81(v60, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
}

uint64_t sub_10003F2B0(uint64_t a1, unint64_t a2, void *a3)
{
  *(void *)(*(void *)v4 + 504) = v3;
  swift_task_dealloc();
  if (v3)
  {
    uint64_t v8 = sub_10003F510;
  }
  else
  {
    sub_10000C5F4(a1, a2);

    uint64_t v8 = sub_10003F3E8;
  }
  return _swift_task_switch(v8, 0, 0);
}

uint64_t sub_10003F3E8()
{
  uint64_t v1 = v0[46];
  uint64_t v2 = v0[47];
  uint64_t v3 = v0[45];
  uint64_t v4 = v0[42];
  uint64_t v5 = v0[43];
  uint64_t v6 = v0[41];
  sub_10000C5F4(v0[61], v0[60]);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10003F510()
{
  uint64_t v2 = v0[46];
  uint64_t v1 = v0[47];
  uint64_t v3 = v0[45];
  uint64_t v5 = v0[42];
  uint64_t v4 = v0[43];
  uint64_t v6 = v0[41];
  sub_10000C5F4(v0[61], v0[60]);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10003F630()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

id sub_10003F68C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DIPAssessmentWebService();
  return [super dealloc];
}

uint64_t type metadata accessor for DIPAssessmentWebService()
{
  return self;
}

uint64_t sub_10003F74C()
{
  uint64_t v0 = (int *)type metadata accessor for DIPHTTPSession.Configuration(0);
  sub_10004440C((uint64_t)v0, qword_1007600E8);
  uint64_t v1 = (void *)sub_1000443D4((uint64_t)v0, (uint64_t)qword_1007600E8);
  objc_super v2 = (void *)((char *)v1 + v0[6]);
  void *v2 = 0x3FE0000000000000;
  uint64_t v3 = enum case for DIPBackoffStrategy.exponential(_:);
  uint64_t v4 = type metadata accessor for DIPBackoffStrategy();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 104))(v2, v3, v4);
  *uint64_t v1 = 0x4024000000000000;
  v1[1] = 3;
  *((unsigned char *)v1 + v0[7]) = 0;
  *((unsigned char *)v1 + v0[8]) = 0;
  *((unsigned char *)v1 + v0[9]) = 1;
  uint64_t v6 = (void *)((char *)v1 + v0[10]);
  void *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t sub_10003F828(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 256) = a2;
  *(void *)(v3 + 48) = a1;
  *(void *)(v3 + 56) = v2;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  *(void *)(v3 + 64) = v4;
  *(void *)(v3 + 72) = *(void *)(v4 - 8);
  *(void *)(v3 + 80) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URLRequest();
  *(void *)(v3 + 88) = v5;
  *(void *)(v3 + 96) = *(void *)(v5 - 8);
  *(void *)(v3 + 104) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for URL();
  *(void *)(v3 + 112) = v6;
  *(void *)(v3 + 120) = *(void *)(v6 - 8);
  *(void *)(v3 + 128) = swift_task_alloc();
  *(void *)(v3 + 136) = swift_task_alloc();
  *(void *)(v3 + 144) = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  *(void *)(v3 + 152) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DIPSignpost();
  *(void *)(v3 + 160) = v7;
  *(void *)(v3 + 168) = *(void *)(v7 - 8);
  *(void *)(v3 + 176) = swift_task_alloc();
  return _swift_task_switch(sub_10003FA48, 0, 0);
}

uint64_t sub_10003FA48()
{
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v15 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v4 = *(void *)(v0 + 48);
  static DaemonSignposts.getProfileRequest.getter();
  DIPSignpost.init(_:)();
  sub_100040AE0(v1);
  URL.appendingPathComponent(_:)();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(void *)(v0 + 184) = v5;
  *(void *)(v0 + 192) = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v5(v1, v2);
  sub_100040CD8(v4, v15);
  uint64_t v6 = *(void *)(v0 + 128);
  uint64_t v7 = *(void *)(v0 + 136);
  uint64_t v8 = *(void *)(v0 + 112);
  uint64_t v9 = *(void *)(v0 + 120);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  *(void *)(v0 + 200) = v10;
  *(void *)(v0 + 208) = (v9 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v10(v7, v6, v8);
  URLRequest.init(url:cachePolicy:timeoutInterval:)();
  URLRequest.cachePolicy.setter();
  URLRequest.httpMethod.setter();
  uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, char, char))((char *)&dword_100733FA0 + dword_100733FA0);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 216) = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_10003FCCC;
  uint64_t v12 = *(void *)(v0 + 104);
  char v13 = *(unsigned char *)(v0 + 256);
  return v16(v12, (uint64_t)_swiftEmptyArrayStorage, v13, 0);
}

uint64_t sub_10003FCCC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6 = *v5;
  *(void *)(v6 + 224) = a1;
  *(void *)(v6 + 232) = a2;
  *(unsigned char *)(v6 + 257) = a4;
  *(void *)(v6 + 240) = a3;
  *(void *)(v6 + 248) = v4;
  swift_task_dealloc();
  if (v4) {
    uint64_t v7 = sub_1000405D0;
  }
  else {
    uint64_t v7 = sub_10003FDE8;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_10003FDE8()
{
  uint64_t v2 = *(void **)(v0 + 240);
  uint64_t v1 = *(void *)(v0 + 248);
  uint64_t v4 = *(void *)(v0 + 224);
  unint64_t v3 = *(void *)(v0 + 232);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  sub_10002CEB0(v4, v3);
  id v5 = v2;
  JSONDecoder.init()();
  sub_100044380();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  int v6 = *(unsigned __int8 *)(v0 + 257);
  if (v1)
  {
    unint64_t v7 = *(void *)(v0 + 232);
    uint64_t v8 = *(void *)(v0 + 224);

    sub_10000C5F4(v8, v7);
    swift_release();
    if (v6)
    {
      if (qword_10071F5A0 != -1) {
        swift_once();
      }
      uint64_t v9 = (void *)qword_100760850;
      Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
      [v9 removeCachedResponseForRequest:isa];
    }
    unint64_t v12 = *(void *)(v0 + 232);
    uint64_t v11 = *(void **)(v0 + 240);
    uint64_t v13 = *(void *)(v0 + 224);
    unsigned int v74 = enum case for DIPError.Code.internalError(_:);
    uint64_t v72 = *(void (**)(void))(*(void *)(v0 + 72) + 104);
    v72(*(void *)(v0 + 80));
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10004504C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    sub_10000C5F4(v13, v12);
    swift_errorRelease();
    uint64_t v64 = *(void (**)(uint64_t, uint64_t))(v0 + 184);
    uint64_t v69 = *(void *)(v0 + 168);
    uint64_t v70 = *(void *)(v0 + 160);
    uint64_t v71 = *(void *)(v0 + 176);
    uint64_t v62 = *(void *)(v0 + 128);
    uint64_t v63 = *(void *)(v0 + 144);
    uint64_t v14 = *(void *)(v0 + 96);
    uint64_t v60 = *(void *)(v0 + 104);
    uint64_t v61 = *(void *)(v0 + 112);
    uint64_t v15 = *(void *)(v0 + 80);
    uint64_t v16 = *(void *)(v0 + 56);
    uint64_t v58 = *(void *)(v0 + 64);
    uint64_t v59 = *(void *)(v0 + 88);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v17 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v18 = (*(unsigned __int8 *)(*(void *)v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v17 + 80);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_100610730;
    unint64_t v20 = v19 + v18;
    uint64_t v21 = (void *)(v20 + v17[14]);
    uint64_t v22 = enum case for DIPError.PropertyKey.conversationID(_:);
    uint64_t v23 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 104))(v20, v22, v23);
    uint64_t v24 = *(void *)(v16 + 48);
    uint64_t v25 = *(void *)(v16 + 56);
    v21[3] = &type metadata for String;
    *uint64_t v21 = v24;
    v21[1] = v25;
    swift_errorRetain();
    swift_bridgeObjectRetain();
    sub_10015C504(v19);
    ((void (*)(uint64_t, void, uint64_t))v72)(v15, v74, v58);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v60, v59);
    v64(v62, v61);
    v64(v63, v61);
    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v71, v70);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
    return v26();
  }
  else
  {
    swift_release();
    uint64_t v73 = *(void *)(v0 + 24);
    uint64_t v75 = *(void *)(v0 + 16);
    if (v6)
    {
      unint64_t v28 = *(void *)(v0 + 232);
      uint64_t v29 = *(void *)(v0 + 224);

      sub_10000C5F4(v29, v28);
      v30._uint64_t countAndFlagsBits = 0xD000000000000025;
      v30._object = (void *)0x8000000100630880;
      v31._uint64_t countAndFlagsBits = 0x3465353336353365;
      v31._object = (void *)0xE800000000000000;
      logMilestone(tag:description:)(v31, v30);
    }
    else
    {
      if (qword_10071F5A0 != -1) {
        swift_once();
      }
      unint64_t v32 = *(void *)(v0 + 232);
      uint64_t v33 = *(void **)(v0 + 240);
      uint64_t v34 = *(void *)(v0 + 224);
      uint64_t v35 = qword_100760850;
      id v36 = objc_allocWithZone((Class)NSCachedURLResponse);
      sub_10002CEB0(v34, v32);
      id v37 = v33;
      Class v38 = Data._bridgeToObjectiveC()().super.isa;
      Class v39 = (Class)[v36 initWithResponse:v37 data:v38];
      sub_10000C5F4(v34, v32);

      id v40 = sub_1005200D8(v39, 0);
      if (v40)
      {
        uint64_t v41 = v40;
        Class v42 = URLRequest._bridgeToObjectiveC()().super.isa;
        uint64_t v43 = type metadata accessor for DIPURLCache();
        *(void *)(v0 + 32) = v35;
        *(void *)(v0 + 40) = v43;
        [super storeCachedResponse:v41 forRequest:v42];

        Class v39 = v42;
      }
      unint64_t v45 = *(void *)(v0 + 232);
      uint64_t v44 = *(void **)(v0 + 240);
      uint64_t v46 = *(void *)(v0 + 224);

      sub_10000C5F4(v46, v45);
      v47._uint64_t countAndFlagsBits = 0xD000000000000027;
      v47._object = (void *)0x8000000100630850;
      v48._uint64_t countAndFlagsBits = 0x6565626362666539;
      v48._object = (void *)0xE800000000000000;
      logMilestone(tag:description:)(v48, v47);
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    }
    unint64_t v49 = *(void *)(v0 + 232);
    uint64_t v50 = *(void *)(v0 + 224);
    uint64_t v51 = *(void (**)(uint64_t, uint64_t))(v0 + 184);
    uint64_t v52 = *(void *)(v0 + 168);
    uint64_t v67 = *(void *)(v0 + 160);
    uint64_t v68 = *(void *)(v0 + 176);
    uint64_t v66 = *(void *)(v0 + 144);
    uint64_t v65 = *(void *)(v0 + 128);
    uint64_t v54 = *(void *)(v0 + 104);
    uint64_t v53 = *(void *)(v0 + 112);
    uint64_t v55 = *(void *)(v0 + 88);
    uint64_t v56 = *(void *)(v0 + 96);

    sub_10000C5F4(v50, v49);
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v54, v55);
    v51(v65, v53);
    v51(v66, v53);
    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v68, v67);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    Swift::String_optional v57 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v57(v75, v73);
  }
}

uint64_t sub_1000405D0()
{
  unint64_t v32 = (void (*)(uint64_t *, uint64_t, uint64_t))v0[25];
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[10];
  uint64_t v36 = v0[9];
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v4 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(*(void *)v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v4 + 80);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_100610730;
  unint64_t v7 = v6 + v5;
  uint64_t v8 = (uint64_t *)(v6 + v5 + v4[14]);
  uint64_t v9 = enum case for DIPError.PropertyKey.serverURL(_:);
  uint64_t v35 = type metadata accessor for DIPError.PropertyKey();
  uint64_t v34 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 104);
  v34(v7, v9, v35);
  v8[3] = v2;
  uint64_t v10 = sub_10002C2D8(v8);
  v32(v10, v1, v2);
  swift_errorRetain();
  sub_10015C504(v6);
  LODWORD(v32) = enum case for DIPError.Code.internalError(_:);
  uint64_t v33 = *(void (**)(uint64_t))(v36 + 104);
  v33(v3);
  type metadata accessor for DIPError();
  sub_10004504C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  uint64_t v29 = (void (*)(uint64_t, uint64_t))v0[23];
  uint64_t v11 = v0[21];
  uint64_t v30 = v0[20];
  uint64_t v31 = v0[22];
  uint64_t v28 = v0[18];
  uint64_t v26 = v0[14];
  uint64_t v27 = v0[16];
  uint64_t v12 = v0[12];
  uint64_t v13 = v0[10];
  uint64_t v24 = v0[11];
  uint64_t v25 = v0[13];
  uint64_t v14 = v0[7];
  uint64_t v15 = v0[8];
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v16 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  unint64_t v17 = (*(unsigned __int8 *)(*(void *)v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v16 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_100610730;
  uint64_t v19 = (void *)(v18 + v17 + v16[14]);
  v34(v18 + v17, enum case for DIPError.PropertyKey.conversationID(_:), v35);
  uint64_t v20 = *(void *)(v14 + 48);
  uint64_t v21 = *(void *)(v14 + 56);
  v19[3] = &type metadata for String;
  *uint64_t v19 = v20;
  v19[1] = v21;
  swift_errorRetain();
  swift_bridgeObjectRetain();
  sub_10015C504(v18);
  ((void (*)(uint64_t, void, uint64_t))v33)(v13, v32, v15);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v25, v24);
  v29(v27, v26);
  v29(v28, v26);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v31, v30);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = (uint64_t (*)(void))v0[1];
  return v22();
}

uint64_t sub_100040AE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100007764(&qword_100720A68);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v5 = (void *)static DIPFeatures.sharedInstance.getter();
  if (v5
    && (id v6 = [v5 getStaticAssessmentURL],
        swift_unknownObjectRelease(),
        v6))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    URL.init(string:)();
    swift_bridgeObjectRelease();
    uint64_t v7 = type metadata accessor for URL();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v4, 1, v7);
    if (result == 1) {
      __break(1u);
    }
    else {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a1, v4, v7);
    }
  }
  else
  {
    if (qword_10071F468 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for URL();
    uint64_t v11 = sub_1000443D4(v10, (uint64_t)qword_100720930);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    return v12(a1, v11, v10);
  }
  return result;
}

uint64_t sub_100040CD8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  v20[0] = a2;
  v20[3] = a1;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100007764(&qword_100720A68);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100007764(&qword_100720A70);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for URLComponents();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init(url:resolvingAgainstBaseURL:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_10000C6CC((uint64_t)v11, &qword_100720A70);
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for DIPError.Code.badLogic(_:), v2);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10004504C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    return swift_willThrow();
  }
  else
  {
    unint64_t v17 = v5;
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
    sub_10030C6D8();
    URLComponents.queryItems.setter();
    URLComponents.url.getter();
    uint64_t v18 = type metadata accessor for URL();
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v8, 1, v18) == 1)
    {
      sub_10000C6CC((uint64_t)v8, &qword_100720A68);
      (*(void (**)(char *, void, uint64_t))(v3 + 104))(v17, enum case for DIPError.Code.badLogic(_:), v2);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10004504C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      return (*(uint64_t (**)(void, char *, uint64_t))(v19 + 32))(v20[0], v8, v18);
    }
  }
}

uint64_t sub_100041204(char a1)
{
  *(void *)(v2 + 48) = v1;
  *(unsigned char *)(v2 + 240) = a1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  *(void *)(v2 + 56) = v3;
  *(void *)(v2 + 64) = *(void *)(v3 - 8);
  *(void *)(v2 + 72) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URLRequest();
  *(void *)(v2 + 80) = v4;
  *(void *)(v2 + 88) = *(void *)(v4 - 8);
  *(void *)(v2 + 96) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URL();
  *(void *)(v2 + 104) = v5;
  *(void *)(v2 + 112) = *(void *)(v5 - 8);
  *(void *)(v2 + 120) = swift_task_alloc();
  *(void *)(v2 + 128) = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  *(void *)(v2 + 136) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DIPSignpost();
  *(void *)(v2 + 144) = v6;
  *(void *)(v2 + 152) = *(void *)(v6 - 8);
  *(void *)(v2 + 160) = swift_task_alloc();
  return _swift_task_switch(sub_100041418, 0, 0);
}

uint64_t sub_100041418()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v4 = *(void *)(v0 + 104);
  static DaemonSignposts.getSTSRequest.getter();
  DIPSignpost.init(_:)();
  sub_100040AE0(v2);
  URL.appendingPathComponent(_:)();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(void *)(v0 + 168) = v5;
  *(void *)(v0 + 176) = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v5(v2, v4);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(void *)(v0 + 184) = v6;
  *(void *)(v0 + 192) = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v1, v4);
  URLRequest.init(url:cachePolicy:timeoutInterval:)();
  URLRequest.cachePolicy.setter();
  URLRequest.httpMethod.setter();
  uint64_t v11 = (char *)&dword_100733FA0 + dword_100733FA0;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 200) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1000415B8;
  uint64_t v8 = *(void *)(v0 + 96);
  uint64_t v9 = *(unsigned __int8 *)(v0 + 240);
  return ((uint64_t (*)(uint64_t, void *, uint64_t, void))v11)(v8, _swiftEmptyArrayStorage, v9, 0);
}

uint64_t sub_1000415B8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6 = *v5;
  *(void *)(v6 + 208) = a1;
  *(void *)(v6 + 216) = a2;
  *(unsigned char *)(v6 + 241) = a4;
  *(void *)(v6 + 224) = a3;
  *(void *)(v6 + 232) = v4;
  swift_task_dealloc();
  if (v4) {
    uint64_t v7 = sub_100041FAC;
  }
  else {
    uint64_t v7 = sub_1000416D4;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_1000416D4()
{
  uint64_t v2 = *(void **)(v0 + 224);
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v4 = *(void *)(v0 + 208);
  unint64_t v3 = *(void *)(v0 + 216);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  sub_10002CEB0(v4, v3);
  id v5 = v2;
  JSONDecoder.init()();
  sub_100044B20();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  int v6 = *(unsigned __int8 *)(v0 + 241);
  if (v1)
  {
    unint64_t v7 = *(void *)(v0 + 216);
    uint64_t v8 = *(void *)(v0 + 208);

    sub_10000C5F4(v8, v7);
    swift_release();
    if (v6)
    {
      if (qword_10071F5A0 != -1) {
        swift_once();
      }
      uint64_t v9 = (void *)qword_100760850;
      Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
      [v9 removeCachedResponseForRequest:isa];
    }
    uint64_t v73 = *(void **)(v0 + 224);
    uint64_t v79 = *(void *)(v0 + 208);
    unint64_t v80 = *(void *)(v0 + 216);
    uint64_t v71 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v0 + 184);
    uint64_t v11 = *(void *)(v0 + 128);
    uint64_t v12 = *(void *)(v0 + 104);
    uint64_t v13 = *(void *)(v0 + 72);
    uint64_t v82 = *(void *)(v0 + 64);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v14 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v15 = (*(unsigned __int8 *)(*(void *)v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v14 + 80);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_100610730;
    unint64_t v17 = v16 + v15;
    uint64_t v18 = (uint64_t *)(v16 + v15 + v14[14]);
    uint64_t v19 = enum case for DIPError.PropertyKey.serverURL(_:);
    uint64_t v77 = type metadata accessor for DIPError.PropertyKey();
    uint64_t v76 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 104);
    v76(v17, v19, v77);
    v18[3] = v12;
    uint64_t v20 = sub_10002C2D8(v18);
    v71(v20, v11, v12);
    swift_errorRetain();
    sub_10015C504(v16);
    LODWORD(v71) = enum case for DIPError.Code.internalError(_:);
    uint64_t v72 = *(void (**)(uint64_t))(v82 + 104);
    v72(v13);
    type metadata accessor for DIPError();
    sub_10004504C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    sub_10000C5F4(v79, v80);
    swift_errorRelease();
    uint64_t v69 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
    uint64_t v21 = *(void *)(v0 + 152);
    uint64_t v74 = *(void *)(v0 + 160);
    uint64_t v70 = *(void *)(v0 + 144);
    uint64_t v68 = *(void *)(v0 + 128);
    uint64_t v22 = *(void *)(v0 + 88);
    uint64_t v66 = *(void *)(v0 + 96);
    uint64_t v67 = *(void *)(v0 + 104);
    uint64_t v23 = *(void *)(v0 + 72);
    uint64_t v65 = *(void *)(v0 + 80);
    uint64_t v25 = *(void *)(v0 + 48);
    uint64_t v24 = *(void *)(v0 + 56);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v26 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v27 = (*(unsigned __int8 *)(*(void *)v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v26 + 80);
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_100610730;
    uint64_t v29 = (void *)(v28 + v27 + v26[14]);
    v76(v28 + v27, enum case for DIPError.PropertyKey.conversationID(_:), v77);
    uint64_t v30 = *(void *)(v25 + 48);
    uint64_t v31 = *(void *)(v25 + 56);
    uint64_t v29[3] = &type metadata for String;
    *uint64_t v29 = v30;
    v29[1] = v31;
    swift_errorRetain();
    swift_bridgeObjectRetain();
    sub_10015C504(v28);
    ((void (*)(uint64_t, void, uint64_t))v72)(v23, v71, v24);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v66, v65);
    v69(v68, v67);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v74, v70);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
    return v32();
  }
  else
  {
    swift_release();
    uint64_t v83 = *(void *)(v0 + 16);
    uint64_t v81 = *(void *)(v0 + 24);
    if (v6)
    {
      unint64_t v34 = *(void *)(v0 + 216);
      uint64_t v35 = *(void *)(v0 + 208);

      sub_10000C5F4(v35, v34);
      v36._uint64_t countAndFlagsBits = 0xD000000000000016;
      v36._object = (void *)0x80000001006309E0;
      v37._uint64_t countAndFlagsBits = 0x6437623761323661;
      v37._object = (void *)0xE800000000000000;
      logMilestone(tag:description:)(v37, v36);
    }
    else
    {
      if (qword_10071F5A0 != -1) {
        swift_once();
      }
      unint64_t v38 = *(void *)(v0 + 216);
      Class v39 = *(void **)(v0 + 224);
      uint64_t v40 = *(void *)(v0 + 208);
      uint64_t v41 = qword_100760850;
      id v42 = objc_allocWithZone((Class)NSCachedURLResponse);
      sub_10002CEB0(v40, v38);
      id v43 = v39;
      Class v44 = Data._bridgeToObjectiveC()().super.isa;
      Class v45 = (Class)[v42 initWithResponse:v43 data:v44];
      sub_10000C5F4(v40, v38);

      id v46 = sub_1005200D8(v45, 0);
      if (v46)
      {
        Swift::String v47 = v46;
        Class v48 = URLRequest._bridgeToObjectiveC()().super.isa;
        uint64_t v49 = type metadata accessor for DIPURLCache();
        *(void *)(v0 + 32) = v41;
        *(void *)(v0 + 40) = v49;
        [objc_msgSendSuper2((objc_super *)(v0 + 32), "storeCachedResponse:forRequest:", v47, v48);

        Class v45 = v48;
      }
      unint64_t v51 = *(void *)(v0 + 216);
      uint64_t v50 = *(void **)(v0 + 224);
      uint64_t v52 = *(void *)(v0 + 208);

      sub_10000C5F4(v52, v51);
      v53._uint64_t countAndFlagsBits = 0xD000000000000018;
      v53._object = (void *)0x80000001006309C0;
      v54._uint64_t countAndFlagsBits = 0x3032326230323266;
      v54._object = (void *)0xE800000000000000;
      logMilestone(tag:description:)(v54, v53);
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    }
    unint64_t v55 = *(void *)(v0 + 216);
    uint64_t v56 = *(void *)(v0 + 208);
    uint64_t v57 = *(void *)(v0 + 160);
    uint64_t v75 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
    uint64_t v58 = *(void *)(v0 + 152);
    uint64_t v59 = *(void *)(v0 + 128);
    uint64_t v78 = *(void *)(v0 + 144);
    uint64_t v61 = *(void *)(v0 + 96);
    uint64_t v60 = *(void *)(v0 + 104);
    uint64_t v63 = *(void *)(v0 + 80);
    uint64_t v62 = *(void *)(v0 + 88);

    sub_10000C5F4(v56, v55);
    (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v61, v63);
    v75(v59, v60);
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v57, v78);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v64 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v64(v83, v81);
  }
}

uint64_t sub_100041FAC()
{
  uint64_t v31 = (void (*)(uint64_t *, uint64_t, uint64_t))v0[23];
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[9];
  uint64_t v35 = v0[8];
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v4 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(*(void *)v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v4 + 80);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_100610730;
  unint64_t v7 = v6 + v5;
  uint64_t v8 = (uint64_t *)(v6 + v5 + v4[14]);
  uint64_t v9 = enum case for DIPError.PropertyKey.serverURL(_:);
  uint64_t v34 = type metadata accessor for DIPError.PropertyKey();
  uint64_t v33 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 104);
  v33(v7, v9, v34);
  v8[3] = v2;
  uint64_t v10 = sub_10002C2D8(v8);
  v31(v10, v1, v2);
  swift_errorRetain();
  sub_10015C504(v6);
  LODWORD(v31) = enum case for DIPError.Code.internalError(_:);
  unint64_t v32 = *(void (**)(uint64_t))(v35 + 104);
  v32(v3);
  type metadata accessor for DIPError();
  sub_10004504C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  uint64_t v28 = (void (*)(uint64_t, uint64_t))v0[21];
  uint64_t v11 = v0[19];
  uint64_t v29 = v0[18];
  uint64_t v30 = v0[20];
  uint64_t v27 = v0[16];
  uint64_t v26 = v0[13];
  uint64_t v12 = v0[11];
  uint64_t v13 = v0[9];
  uint64_t v24 = v0[10];
  uint64_t v25 = v0[12];
  uint64_t v15 = v0[6];
  uint64_t v14 = v0[7];
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v16 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  unint64_t v17 = (*(unsigned __int8 *)(*(void *)v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v16 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_100610730;
  uint64_t v19 = (void *)(v18 + v17 + v16[14]);
  v33(v18 + v17, enum case for DIPError.PropertyKey.conversationID(_:), v34);
  uint64_t v20 = *(void *)(v15 + 48);
  uint64_t v21 = *(void *)(v15 + 56);
  v19[3] = &type metadata for String;
  *uint64_t v19 = v20;
  v19[1] = v21;
  swift_errorRetain();
  swift_bridgeObjectRetain();
  sub_10015C504(v18);
  ((void (*)(uint64_t, void, uint64_t))v32)(v13, v31, v14);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v25, v24);
  v28(v27, v26);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v30, v29);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = (uint64_t (*)(void))v0[1];
  return v22();
}

uint64_t sub_1000424B0(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  sub_100007764(&qword_1007239B0);
  v2[7] = swift_task_alloc();
  v2[8] = swift_task_alloc();
  sub_100007764(&qword_100720A68);
  v2[9] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URL();
  v2[10] = v4;
  v2[11] = *(void *)(v4 - 8);
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Date();
  v2[15] = v5;
  v2[16] = *(void *)(v5 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  return _swift_task_switch(sub_1000426D0, 0, 0);
}

uint64_t sub_1000426D0()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[16];
  uint64_t v3 = v0[15];
  uint64_t v4 = v0[13];
  uint64_t v5 = v0[11];
  uint64_t v41 = v0[9];
  uint64_t v37 = v0[10];
  uint64_t v38 = v0[2];
  Date.init()();
  static Date.- infix(_:_:)();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v0[20] = v6;
  v0[21] = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v1, v3);
  Date.init()();
  static Date.+ infix(_:_:)();
  v6(v1, v3);
  sub_100040AE0(v4);
  URL.appendingPathComponent(_:)();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v0[22] = v7;
  v0[23] = (v5 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v37);
  sub_100040CD8(v38, v41);
  uint64_t v8 = v0[10];
  uint64_t v9 = v0[11];
  uint64_t v10 = v0[9];
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v10, 0, 1, v8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v10, 1, v8) == 1)
  {
    sub_10000C6CC(v0[9], &qword_100720A68);
    defaultLogger()();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Unable to construct profile url for cache refresh", v13, 2u);
      swift_slowDealloc();
    }
    uint64_t v14 = v0[5];

    uint64_t v15 = (void (*)(uint64_t, uint64_t))v0[22];
    uint64_t v16 = (void (*)(uint64_t, uint64_t))v0[20];
    uint64_t v17 = v0[19];
    uint64_t v18 = v0[17];
    uint64_t v20 = v0[14];
    uint64_t v19 = v0[15];
    uint64_t v21 = v0[10];
    (*(void (**)(void))(v14 + 8))();
    v15(v20, v21);
    v16(v18, v19);
    v16(v17, v19);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = (uint64_t (*)(void))v0[1];
    return v22();
  }
  else
  {
    (*(void (**)(void, void, void))(v0[11] + 32))(v0[12], v0[9], v0[10]);
    if (qword_10071F5A0 != -1) {
      swift_once();
    }
    uint64_t v25 = v0[16];
    uint64_t v24 = v0[17];
    uint64_t v26 = v0[15];
    uint64_t v28 = v0[7];
    uint64_t v27 = v0[8];
    uint64_t v39 = v0[2];
    uint64_t v42 = qword_100760850;
    uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16);
    v29(v27, v0[19], v26);
    uint64_t v30 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v25 + 56);
    v30(v27, 0, 1, v26);
    v29(v28, v24, v26);
    v30(v28, 0, 1, v26);
    swift_retain();
    sub_100044B74(v39);
    uint64_t v40 = (char *)&dword_100731FA0 + dword_100731FA0;
    uint64_t v31 = (void *)swift_task_alloc();
    v0[24] = v31;
    *uint64_t v31 = v0;
    v31[1] = sub_100042B8C;
    uint64_t v32 = v0[12];
    uint64_t v34 = v0[7];
    uint64_t v33 = v0[8];
    uint64_t v36 = v0[2];
    uint64_t v35 = v0[3];
    return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v40)(v32, 0, v33, v34, v42, v35, v36);
  }
}

uint64_t sub_100042B8C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 64);
  uint64_t v2 = *(void *)(*(void *)v0 + 56);
  uint64_t v3 = *(void *)(*(void *)v0 + 16);
  swift_task_dealloc();
  sub_100044BEC(v3);
  swift_release();
  sub_10000C6CC(v2, &qword_1007239B0);
  sub_10000C6CC(v1, &qword_1007239B0);
  return _swift_task_switch(sub_100042D10, 0, 0);
}

uint64_t sub_100042D10()
{
  uint64_t v1 = (void (*)(void))v0[22];
  uint64_t v2 = (void (*)(uint64_t, uint64_t))v0[20];
  uint64_t v3 = v0[19];
  uint64_t v4 = v0[17];
  uint64_t v6 = v0[14];
  uint64_t v5 = v0[15];
  uint64_t v7 = v0[10];
  v1();
  ((void (*)(uint64_t, uint64_t))v1)(v6, v7);
  v2(v4, v5);
  v2(v3, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100042E40(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DIPError();
  v2[7] = v4;
  v2[8] = *(void *)(v4 - 8);
  v2[9] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v2[10] = v5;
  v2[11] = *(void *)(v5 - 8);
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  return _swift_task_switch(sub_100042FD4, 0, 0);
}

uint64_t sub_100042FD4()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Refreshing profile cache", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[14];
  uint64_t v5 = v0[10];
  uint64_t v6 = v0[11];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[15] = v7;
  v0[16] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[17] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100043118;
  uint64_t v9 = v0[3];
  return sub_10003F828(v9, 1);
}

uint64_t sub_100043118()
{
  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v2 = sub_100043364;
  }
  else
  {
    swift_bridgeObjectRelease();
    os_log_type_t v2 = sub_100043238;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100043238()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Done refreshing configuration cache", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[15];
  uint64_t v5 = v0[13];
  uint64_t v6 = v0[10];

  v4(v5, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100043364()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[15];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[10];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[8];
  (*(void (**)(void, void, void))(v0[5] + 104))(v0[6], enum case for DIPError.Code.internalError(_:), v0[4]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_10004504C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, v3, v5);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  v1(v2, v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3, v5);
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100043580()
{
  v1[2] = v0;
  sub_100007764(&qword_1007239B0);
  v1[3] = swift_task_alloc();
  v1[4] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for URL();
  v1[5] = v2;
  v1[6] = *(void *)(v2 - 8);
  v1[7] = swift_task_alloc();
  v1[8] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Date();
  v1[9] = v3;
  v1[10] = *(void *)(v3 - 8);
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  return _swift_task_switch(sub_100043708, 0, 0);
}

uint64_t sub_100043708()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[11];
  uint64_t v4 = v0[9];
  uint64_t v6 = v0[6];
  uint64_t v5 = v0[7];
  uint64_t v23 = v0[5];
  Date.init()();
  static Date.- infix(_:_:)();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v0[14] = v7;
  v0[15] = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v1, v4);
  Date.init()();
  static Date.+ infix(_:_:)();
  v7(v3, v4);
  sub_100040AE0(v5);
  URL.appendingPathComponent(_:)();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[16] = v8;
  v0[17] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v8(v5, v23);
  if (qword_10071F5A0 != -1) {
    swift_once();
  }
  uint64_t v9 = v0[12];
  uint64_t v10 = v0[9];
  uint64_t v11 = v0[10];
  uint64_t v13 = v0[3];
  uint64_t v12 = v0[4];
  uint64_t v24 = qword_100760850;
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  v14(v12, v0[13], v10);
  uint64_t v15 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56);
  v15(v12, 0, 1, v10);
  v14(v13, v9, v10);
  v15(v13, 0, 1, v10);
  uint64_t v22 = (char *)&dword_100731F98 + dword_100731F98;
  swift_retain();
  uint64_t v16 = (void *)swift_task_alloc();
  v0[18] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_100043974;
  uint64_t v17 = v0[8];
  uint64_t v19 = v0[3];
  uint64_t v18 = v0[4];
  uint64_t v20 = v0[2];
  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))v22)(v17, 0, v18, v19, v24, v20);
}

uint64_t sub_100043974()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32);
  uint64_t v2 = *(void *)(*(void *)v0 + 24);
  swift_task_dealloc();
  swift_release();
  sub_10000C6CC(v2, &qword_1007239B0);
  sub_10000C6CC(v1, &qword_1007239B0);
  return _swift_task_switch(sub_100043ADC, 0, 0);
}

uint64_t sub_100043ADC()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 72);
  (*(void (**)(void, void))(v0 + 128))(*(void *)(v0 + 64), *(void *)(v0 + 40));
  v1(v2, v4);
  v1(v3, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_100043BD0(uint64_t a1)
{
  v1[2] = a1;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DIPError();
  v1[6] = v3;
  v1[7] = *(void *)(v3 - 8);
  v1[8] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v1[9] = v4;
  v1[10] = *(void *)(v4 - 8);
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  return _swift_task_switch(sub_100043D64, 0, 0);
}

uint64_t sub_100043D64()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Refreshing sts cache", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[13];
  uint64_t v5 = v0[9];
  uint64_t v6 = v0[10];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[14] = v7;
  v0[15] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[16] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100043EA4;
  return sub_100041204(1);
}

uint64_t sub_100043EA4()
{
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v2 = sub_1000440F0;
  }
  else
  {
    swift_bridgeObjectRelease();
    os_log_type_t v2 = sub_100043FC4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100043FC4()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Done refreshing sts cache", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[14];
  uint64_t v5 = v0[12];
  uint64_t v6 = v0[9];

  v4(v5, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1000440F0()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[14];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[9];
  uint64_t v5 = v0[6];
  uint64_t v6 = v0[7];
  (*(void (**)(void, void, void))(v0[4] + 104))(v0[5], enum case for DIPError.Code.internalError(_:), v0[3]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_10004504C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, v3, v5);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  v1(v2, v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3, v5);
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10004430C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DIPAssessmentStaticWebService()
{
  return self;
}

unint64_t sub_100044380()
{
  unint64_t result = qword_100720A60;
  if (!qword_100720A60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100720A60);
  }
  return result;
}

uint64_t sub_1000443D4(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t *sub_10004440C(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

id sub_100044470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = a3;
  uint64_t v35 = a4;
  uint64_t v36 = a1;
  uint64_t v37 = a2;
  uint64_t v4 = type metadata accessor for DIPBackoffStrategy();
  uint64_t v33 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (uint64_t *)((char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = (int *)type metadata accessor for DIPHTTPSession.Configuration(0);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v33 - v11;
  if (qword_10071F4B0 != -1) {
    swift_once();
  }
  uint64_t v13 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
  uint64_t v14 = (uint64_t)&v13[4];
  uint64_t v15 = v13 + 52;
  os_unfair_lock_lock(v13 + 52);
  sub_1000262B4(v14, v41);
  os_unfair_lock_unlock(v15);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))&v41[11];
  sub_10003BDD0(*(uint64_t *)&v41[11]);
  sub_1000262D0((uint64_t)v41);
  if (v16)
  {
    id v17 = (id)v16(v36, v37);
    sub_10003BEDC((uint64_t)v16);
  }
  else
  {
    uint64_t v18 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
    uint64_t v19 = (uint64_t)&v18[4];
    uint64_t v20 = v18 + 52;
    os_unfair_lock_lock(v18 + 52);
    sub_1000262B4(v19, v42);
    os_unfair_lock_unlock(v20);
    sub_100030A10((uint64_t)v42, (uint64_t)v38);
    sub_1000262D0((uint64_t)v42);
    sub_10000C728(v38, v38[3]);
    sub_1001418CC((uint64_t)v39);
    sub_100044C64((uint64_t)v39, (uint64_t)v40);
    if (sub_100044CCC((uint64_t)v40) == 1)
    {
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v38);
      if (qword_10071F5F0 != -1) {
        swift_once();
      }
      uint64_t v21 = sub_1000443D4((uint64_t)v7, (uint64_t)qword_1007608A0);
      sub_1000450F4(v21, (uint64_t)v12, type metadata accessor for DIPHTTPSession.Configuration);
    }
    else
    {
      memcpy(v41, v40, sizeof(v41));
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v38);
      memcpy(v42, &v41[2], 0x169uLL);
      sub_100044CE4((uint64_t)v42);
      sub_100044D90(v39);
      sub_100044F4C((uint64_t)v42);
      uint64_t v22 = (uint64_t *)&v42[11];
      if (BYTE8(v42[11])) {
        uint64_t v22 = (uint64_t *)v42 + 1;
      }
      uint64_t v23 = *v22;
      uint64_t v24 = &v42[12];
      if (BYTE8(v42[12])) {
        uint64_t v24 = &v42[1];
      }
      uint64_t v25 = *(void *)v24;
      uint64_t v26 = &v42[13];
      if (BYTE8(v42[13])) {
        uint64_t v26 = (void *)&v42[1] + 1;
      }
      void *v6 = *v26;
      uint64_t v27 = v33;
      (*(void (**)(void *, void, uint64_t))(v33 + 104))(v6, enum case for DIPBackoffStrategy.exponential(_:), v4);
      *(void *)uint64_t v12 = v23;
      *((void *)v12 + 1) = v25;
      (*(void (**)(char *, void *, uint64_t))(v27 + 32))(&v12[v7[6]], v6, v4);
      v12[v7[7]] = 1;
      v12[v7[8]] = 1;
      v12[v7[9]] = 0;
      uint64_t v28 = &v12[v7[10]];
      uint64_t v29 = v35;
      *(void *)uint64_t v28 = v34;
      *((void *)v28 + 1) = v29;
      swift_bridgeObjectRetain();
    }
    sub_1000450F4((uint64_t)v12, (uint64_t)v10, type metadata accessor for DIPHTTPSession.Configuration);
    id v30 = objc_allocWithZone((Class)type metadata accessor for DIPAssessmentWebService());
    uint64_t v31 = v37;
    swift_bridgeObjectRetain();
    id v17 = sub_10003C328(v36, v31, (uint64_t)v10);
    sub_100045094((uint64_t)v12, type metadata accessor for DIPHTTPSession.Configuration);
  }
  return v17;
}

void *sub_1000448A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v29 = a3;
  uint64_t v30 = a1;
  uint64_t v31 = a2;
  uint64_t v5 = (int *)type metadata accessor for DIPHTTPSession.Configuration(0);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (double *)((char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v28 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (uint64_t *)((char *)&v28 - v12);
  if (qword_10071F470 != -1) {
    swift_once();
  }
  uint64_t v14 = (void *)sub_1000443D4((uint64_t)v5, (uint64_t)qword_1007600E8);
  uint64_t v15 = v14[1];
  uint64_t v16 = v5[6];
  char v17 = *((unsigned char *)v14 + v5[7]);
  char v18 = *((unsigned char *)v14 + v5[8]);
  uint64_t v19 = (char *)v14 + v16;
  char v20 = *((unsigned char *)v14 + v5[9]);
  *uint64_t v13 = *v14;
  v13[1] = v15;
  uint64_t v21 = (char *)v13 + v16;
  uint64_t v22 = type metadata accessor for DIPBackoffStrategy();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v21, v19, v22);
  *((unsigned char *)v13 + v5[7]) = v17;
  *((unsigned char *)v13 + v5[8]) = v18;
  *((unsigned char *)v13 + v5[9]) = v20;
  uint64_t v23 = (void *)((char *)v13 + v5[10]);
  *uint64_t v23 = v29;
  v23[1] = a4;
  sub_1000450F4((uint64_t)v13, (uint64_t)v11, type metadata accessor for DIPHTTPSession.Configuration);
  type metadata accessor for DIPAssessmentStaticWebService();
  uint64_t v24 = (void *)swift_allocObject();
  v24[2] = 1937011503;
  v24[3] = 0xE400000000000000;
  v24[4] = 0x656C69666F72702FLL;
  v24[5] = 0xE800000000000000;
  uint64_t v25 = v31;
  v24[6] = v30;
  v24[7] = v25;
  sub_1000450F4((uint64_t)v11, (uint64_t)v8, type metadata accessor for DIPHTTPSession.Configuration);
  type metadata accessor for DIPHTTPSession(0);
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v26 = sub_1005D20EC(v8);
  sub_100045094((uint64_t)v11, type metadata accessor for DIPHTTPSession.Configuration);
  v24[8] = v26;
  sub_100045094((uint64_t)v13, type metadata accessor for DIPHTTPSession.Configuration);
  return v24;
}

unint64_t sub_100044B20()
{
  unint64_t result = qword_100720A90;
  if (!qword_100720A90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100720A90);
  }
  return result;
}

uint64_t sub_100044B74(uint64_t a1)
{
  return a1;
}

uint64_t sub_100044BEC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100044C64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_100722350);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100044CCC(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_100044CE4(uint64_t a1)
{
  return a1;
}

uint64_t *sub_100044D90(uint64_t *a1)
{
  return a1;
}

uint64_t sub_100044E34(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100044F4C(uint64_t a1)
{
  return a1;
}

unint64_t sub_100044FF8()
{
  unint64_t result = qword_100720AA8;
  if (!qword_100720AA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100720AA8);
  }
  return result;
}

uint64_t sub_10004504C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100045094(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000450F4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10004515C()
{
  uint64_t v213 = type metadata accessor for Logger();
  uint64_t v212 = *(void *)(v213 - 8);
  __chkstk_darwin(v213);
  v218 = (char *)&v168 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v211 = type metadata accessor for DigitalPresentmentDocumentType();
  uint64_t v210 = *(void *)(v211 - 8);
  __chkstk_darwin(v211);
  uint64_t v209 = (char *)&v168 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_100007764(&qword_100720AD0);
  __chkstk_darwin(v3 - 8);
  v219 = (char *)&v168 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100007764(&qword_100720AD8);
  __chkstk_darwin(v5 - 8);
  uint64_t v216 = (uint64_t)&v168 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100007764(&qword_100720AE0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v198 = (uint64_t)&v168 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v217 = (uint64_t)&v168 - v10;
  uint64_t v241 = type metadata accessor for DaemonAnalytics.DigitalPresentmentRequestedEventElement();
  uint64_t v228 = *(void *)(v241 - 8);
  uint64_t v11 = __chkstk_darwin(v241);
  v197 = (char *)&v168 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v207 = (unint64_t *)((char *)&v168 - v14);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v192 = (char *)&v168 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v193 = (char *)&v168 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  v194 = (char *)&v168 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v195 = (char *)&v168 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v196 = (char *)&v168 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v199 = (char *)&v168 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v200 = (char *)&v168 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v202 = (char *)&v168 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  v201 = (char *)&v168 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v204 = (char *)&v168 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v205 = (char *)&v168 - v36;
  __chkstk_darwin(v35);
  unint64_t v206 = (char *)&v168 - v37;
  uint64_t v38 = sub_100007764(&qword_100720AE8);
  __chkstk_darwin(v38 - 8);
  uint64_t v40 = (unint64_t *)((char *)&v168 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v271 = type metadata accessor for DaemonAnalytics.DigitalPresentmentRequestedEventRetention();
  unint64_t v274 = *(void *)(v271 - 8);
  __chkstk_darwin(v271);
  v272 = (char *)&v168 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for IdentityIntentToStore();
  uint64_t v259 = *(void *)(v42 - 8);
  uint64_t v43 = __chkstk_darwin(v42);
  v258 = (char *)&v168 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  v275 = (char *)&v168 - v45;
  uint64_t v276 = type metadata accessor for IdentityElement();
  uint64_t v257 = *(void *)(v276 - 8);
  uint64_t v46 = __chkstk_darwin(v276);
  v260 = (char *)&v168 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v46);
  v253 = (char *)&v168 - v48;
  uint64_t v49 = sub_100007764(&qword_100720AF0);
  uint64_t v50 = __chkstk_darwin(v49 - 8);
  v270 = (char *)&v168 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v50);
  uint64_t v269 = (uint64_t)&v168 - v52;
  uint64_t v53 = sub_100007764(&qword_100720AF8);
  uint64_t v54 = __chkstk_darwin(v53 - 8);
  uint64_t v214 = (uint64_t)&v168 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v54);
  uint64_t v57 = (char *)&v168 - v56;
  uint64_t v224 = type metadata accessor for ValidatedDigitalPresentmentRequest();
  uint64_t v58 = *(void *)(v224 - 8);
  __chkstk_darwin(v224);
  uint64_t v215 = (uint64_t)&v168 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = sub_100007764(&qword_100720B00);
  __chkstk_darwin(v60 - 8);
  uint64_t v62 = (unint64_t *)((char *)&v168 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v63 = type metadata accessor for DaemonAnalytics.DigitalPresentmentRequestedEventOutcome();
  uint64_t v64 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  uint64_t v66 = (char *)&v168 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = v0;
  sub_100047808(v62);
  uint64_t v68 = v63;
  uint64_t v69 = v64;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v68) == 1) {
    return sub_10000C6CC((uint64_t)v62, &qword_100720B00);
  }
  (*(void (**)(char *, void *, uint64_t))(v64 + 32))(v66, v62, v68);
  uint64_t v208 = type metadata accessor for DigitalPresentmentRequestDocumentAnalyticsRecorder(0);
  uint64_t v71 = v67;
  uint64_t v189 = v67 + *(int *)(v208 + 28);
  sub_100048D6C(v189, (uint64_t)v57, &qword_100720AF8);
  uint64_t v72 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48);
  uint64_t v73 = v224;
  uint64_t v188 = v58 + 48;
  uint64_t v187 = v72;
  unsigned int v74 = v72((uint64_t)v57, 1, v224);
  uint64_t v223 = v71;
  uint64_t v191 = v68;
  uint64_t v190 = v66;
  if (v74 != 1)
  {
    uint64_t v186 = v64;
    uint64_t v75 = v215;
    sub_100048CA4((uint64_t)v57, v215, (uint64_t (*)(void))type metadata accessor for ValidatedDigitalPresentmentRequest);
    uint64_t v76 = *(void *)(v75 + *(int *)(v73 + 20));
    uint64_t v77 = *(void *)(v76 + 64);
    uint64_t v225 = v76 + 64;
    uint64_t v78 = 1 << *(unsigned char *)(v76 + 32);
    uint64_t v79 = -1;
    if (v78 < 64) {
      uint64_t v79 = ~(-1 << v78);
    }
    unint64_t v80 = v79 & v77;
    int v267 = enum case for IdentityIntentToStore.mayStoreForDays(_:);
    unint64_t v81 = (unint64_t)(v78 + 63) >> 6;
    int v252 = enum case for IdentityIntentToStore.willNotStore(_:);
    int v227 = enum case for IdentityIntentToStore.mayStore(_:);
    v262 = (void (**)(void *, uint64_t, uint64_t, uint64_t))(v274 + 56);
    unsigned int v203 = enum case for DaemonAnalytics.DigitalPresentmentRequestedEventRetention.mayStoreIndefinitely(_:);
    v256 = (void (**)(void *, void, uint64_t))(v274 + 104);
    unsigned int v226 = enum case for DaemonAnalytics.DigitalPresentmentRequestedEventRetention.willNotStore(_:);
    unsigned int v251 = enum case for DaemonAnalytics.DigitalPresentmentRequestedEventRetention.mayStore(_:);
    v266 = (unsigned int (**)(void *, uint64_t, uint64_t))(v274 + 48);
    v250 = (void (**)(char *, void *, uint64_t))(v274 + 32);
    int v249 = enum case for IdentityElement.ageIsOver(_:);
    int v245 = enum case for IdentityElement.givenName(_:);
    int v242 = enum case for IdentityElement.familyName(_:);
    int v240 = enum case for IdentityElement.sex(_:);
    int v239 = enum case for IdentityElement.portrait(_:);
    int v238 = enum case for IdentityElement.address(_:);
    int v237 = enum case for IdentityElement.issuingAuthority(_:);
    int v236 = enum case for IdentityElement.documentDHSComplianceStatus(_:);
    int v235 = enum case for IdentityElement.documentIssueDate(_:);
    int v234 = enum case for IdentityElement.documentExpirationDate(_:);
    int v233 = enum case for IdentityElement.documentNumber(_:);
    int v232 = enum case for IdentityElement.drivingPrivileges(_:);
    int v231 = enum case for IdentityElement.age(_:);
    int v230 = enum case for IdentityElement.dateOfBirth(_:);
    v246 = (void (**)(char *, uint64_t))(v274 + 8);
    v221 = (void (**)(char *, char *, uint64_t))(v274 + 16);
    unsigned int v171 = enum case for DaemonAnalytics.DigitalPresentmentRequestedEventElement.dateOfBirth(_:);
    unsigned int v172 = enum case for DaemonAnalytics.DigitalPresentmentRequestedEventElement.age(_:);
    unsigned int v173 = enum case for DaemonAnalytics.DigitalPresentmentRequestedEventElement.drivingPrivileges(_:);
    unsigned int v174 = enum case for DaemonAnalytics.DigitalPresentmentRequestedEventElement.documentNumber(_:);
    unsigned int v175 = enum case for DaemonAnalytics.DigitalPresentmentRequestedEventElement.documentExpirationDate(_:);
    unsigned int v176 = enum case for DaemonAnalytics.DigitalPresentmentRequestedEventElement.documentIssueDate(_:);
    unsigned int v177 = enum case for DaemonAnalytics.DigitalPresentmentRequestedEventElement.documentDHSComplianceStatus(_:);
    unsigned int v178 = enum case for DaemonAnalytics.DigitalPresentmentRequestedEventElement.issuingAuthority(_:);
    unsigned int v179 = enum case for DaemonAnalytics.DigitalPresentmentRequestedEventElement.address(_:);
    unsigned int v180 = enum case for DaemonAnalytics.DigitalPresentmentRequestedEventElement.portrait(_:);
    unsigned int v181 = enum case for DaemonAnalytics.DigitalPresentmentRequestedEventElement.sex(_:);
    unsigned int v182 = enum case for DaemonAnalytics.DigitalPresentmentRequestedEventElement.familyName(_:);
    unsigned int v183 = enum case for DaemonAnalytics.DigitalPresentmentRequestedEventElement.givenName(_:);
    unsigned int v185 = enum case for DaemonAnalytics.DigitalPresentmentRequestedEventElement.ageAtLeast(_:);
    v273 = (void (**)(char *, char *, uint64_t))(v257 + 16);
    uint64_t v82 = (void (**)(void *, char *, uint64_t))(v259 + 16);
    v264 = (void (**)(char *, uint64_t, uint64_t))(v259 + 32);
    v265 = (void (**)(char *, uint64_t, uint64_t))(v257 + 32);
    v263 = (uint64_t (**)(void *, uint64_t))(v259 + 88);
    v268 = (void (**)(char *, uint64_t))(v259 + 8);
    v248 = (void (**)(void *, uint64_t))(v259 + 96);
    v247 = (uint64_t (**)(char *, uint64_t))(v257 + 88);
    v261 = (void (**)(char *, uint64_t))(v257 + 8);
    v220 = (void (**)(void, void, uint64_t))(v228 + 104);
    uint64_t v222 = v228 + 32;
    uint64_t v184 = (void (**)(char *, uint64_t))(v257 + 96);
    unint64_t v168 = v81 - 1;
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v83 = 0;
    int64_t v243 = v81;
    unint64_t v170 = v81 - 5;
    uint64_t v255 = result;
    uint64_t v169 = result + 104;
    v254 = _swiftEmptyArrayStorage;
    uint64_t v84 = v271;
    uint64_t v85 = v258;
    uint64_t v86 = v253;
    while (!v80)
    {
      int64_t v96 = v83 + 1;
      if (__OFADD__(v83, 1))
      {
        __break(1u);
        return result;
      }
      if (v96 >= v243)
      {
        unint64_t v98 = v83;
      }
      else
      {
        unint64_t v97 = *(void *)(v225 + 8 * v96);
        if (v97) {
          goto LABEL_15;
        }
        unint64_t v98 = v83 + 1;
        if ((uint64_t)(v83 + 2) < v243)
        {
          unint64_t v97 = *(void *)(v225 + 8 * (v83 + 2));
          if (v97)
          {
            int64_t v96 = v83 + 2;
            goto LABEL_15;
          }
          unint64_t v98 = v83 + 2;
          if ((uint64_t)(v83 + 3) < v243)
          {
            unint64_t v97 = *(void *)(v225 + 8 * (v83 + 3));
            if (v97)
            {
              int64_t v96 = v83 + 3;
LABEL_15:
              unint64_t v80 = (v97 - 1) & v97;
              unint64_t v88 = __clz(__rbit64(v97)) + (v96 << 6);
              unint64_t v274 = v96;
LABEL_11:
              uint64_t v89 = v255;
              uint64_t v90 = (uint64_t)v270;
              (*(void (**)(char *, unint64_t, uint64_t))(v257 + 16))(v270, *(void *)(v255 + 48) + *(void *)(v257 + 72) * v88, v276);
              uint64_t v91 = *(void *)(v89 + 56);
              uint64_t v92 = v259;
              uint64_t v93 = v91 + *(void *)(v259 + 72) * v88;
              uint64_t v94 = sub_100007764(&qword_100720B08);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v92 + 16))(v90 + *(int *)(v94 + 48), v93, v42);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v94 - 8) + 56))(v90, 0, 1, v94);
              uint64_t v95 = v258;
              uint64_t v84 = v271;
              goto LABEL_18;
            }
            int64_t v96 = v83 + 4;
            unint64_t v98 = v83 + 3;
            if ((uint64_t)(v83 + 4) < v243)
            {
              unint64_t v97 = *(void *)(v225 + 8 * v96);
              if (v97) {
                goto LABEL_15;
              }
              while (v170 != v83)
              {
                unint64_t v97 = *(void *)(v169 + 8 * v83++);
                if (v97)
                {
                  int64_t v96 = v83 + 4;
                  goto LABEL_15;
                }
              }
              unint64_t v98 = v168;
            }
          }
        }
      }
      uint64_t v95 = v85;
      uint64_t v99 = sub_100007764(&qword_100720B08);
      uint64_t v100 = v270;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v99 - 8) + 56))(v270, 1, 1, v99);
      unint64_t v80 = 0;
      unint64_t v274 = v98;
      uint64_t v90 = (uint64_t)v100;
LABEL_18:
      uint64_t v101 = v269;
      sub_100048C3C(v90, v269);
      uint64_t v102 = sub_100007764(&qword_100720B08);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v102 - 8) + 48))(v101, 1, v102) == 1)
      {
        swift_release();
        sub_100048D0C(v215, (uint64_t (*)(void))type metadata accessor for ValidatedDigitalPresentmentRequest);
        uint64_t v71 = v223;
        uint64_t v69 = v186;
        goto LABEL_127;
      }
      uint64_t v103 = v101 + *(int *)(v102 + 48);
      (*v265)(v86, v101, v276);
      unint64_t v104 = v275;
      (*v264)(v275, v103, v42);
      uint64_t v85 = v95;
      (*v82)(v95, v104, v42);
      int v105 = (*v263)(v95, v42);
      if (v105 == v267)
      {
        (*v248)(v95, v42);
        *uint64_t v40 = *v95;
        (*v256)(v40, v251, v84);
      }
      else if (v105 == v252)
      {
        (*v256)(v40, v226, v84);
      }
      else
      {
        if (v105 != v227)
        {
          (*v262)(v40, 1, 1, v84);
          (*v268)((char *)v95, v42);
          goto LABEL_26;
        }
        (*v256)(v40, v203, v84);
      }
      (*v262)(v40, 0, 1, v84);
LABEL_26:
      if ((*v266)(v40, 1, v84) == 1)
      {
        (*v268)(v275, v42);
        (*v261)(v86, v276);
        uint64_t result = sub_10000C6CC((uint64_t)v40, &qword_100720AE8);
        unint64_t v83 = v274;
      }
      else
      {
        (*v250)(v272, v40, v84);
        unint64_t v106 = v86;
        unint64_t v107 = v260;
        uint64_t v108 = v276;
        (*v273)(v260, v106, v276);
        int v109 = (*v247)(v107, v108);
        if (v109 == v249)
        {
          uint64_t v113 = v260;
          (*v184)(v260, v276);
          uint64_t v114 = *(void *)v113;
          uint64_t v115 = sub_100007764(&qword_100720B10);
          unint64_t v116 = v207;
          uint64_t v117 = (char *)v207 + *(int *)(v115 + 48);
          *uint64_t v207 = v114;
          (*v221)(v117, v272, v84);
          (*v220)(v116, v185, v241);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v254 = (void *)sub_10010F4D4(0, v254[2] + 1, 1, (unint64_t)v254);
          }
          uint64_t v86 = v253;
          unint64_t v119 = v254[2];
          unint64_t v118 = v254[3];
          unint64_t v120 = v119 + 1;
          if (v119 >= v118 >> 1) {
            v254 = (void *)sub_10010F4D4(v118 > 1, v119 + 1, 1, (unint64_t)v254);
          }
          uint64_t v121 = (uint64_t *)&v247;
LABEL_119:
          uint64_t v149 = *(v121 - 32);
          uint64_t v150 = v254;
          v254[2] = v120;
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v228 + 32))((unint64_t)v150+ ((*(unsigned __int8 *)(v228 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v228 + 80))+ *(void *)(v228 + 72) * v119, v149, v241);
          (*v246)(v272, v84);
          (*v268)(v275, v42);
          uint64_t result = ((uint64_t (*)(char *, uint64_t))*v261)(v86, v276);
          unint64_t v83 = v274;
        }
        else
        {
          if (v109 == v245)
          {
            int v122 = v206;
            (*v221)(v206, v272, v84);
            (*v220)(v122, v183, v241);
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v86 = v253;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
              v254 = (void *)sub_10010F4D4(0, v254[2] + 1, 1, (unint64_t)v254);
            }
            unint64_t v119 = v254[2];
            unint64_t v124 = v254[3];
            unint64_t v120 = v119 + 1;
            if (v119 >= v124 >> 1) {
              v254 = (void *)sub_10010F4D4(v124 > 1, v119 + 1, 1, (unint64_t)v254);
            }
            uint64_t v121 = (uint64_t *)&v246;
            goto LABEL_119;
          }
          uint64_t v86 = v253;
          if (v109 == v242)
          {
            id v125 = v205;
            (*v221)(v205, v272, v84);
            (*v220)(v125, v182, v241);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              v254 = (void *)sub_10010F4D4(0, v254[2] + 1, 1, (unint64_t)v254);
            }
            unint64_t v119 = v254[2];
            unint64_t v126 = v254[3];
            unint64_t v120 = v119 + 1;
            if (v119 >= v126 >> 1) {
              v254 = (void *)sub_10010F4D4(v126 > 1, v119 + 1, 1, (unint64_t)v254);
            }
            uint64_t v121 = (uint64_t *)&v244;
            goto LABEL_119;
          }
          if (v109 == v240)
          {
            uint64_t v127 = v204;
            (*v221)(v204, v272, v84);
            (*v220)(v127, v181, v241);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              v254 = (void *)sub_10010F4D4(0, v254[2] + 1, 1, (unint64_t)v254);
            }
            unint64_t v119 = v254[2];
            unint64_t v128 = v254[3];
            unint64_t v120 = v119 + 1;
            if (v119 >= v128 >> 1) {
              v254 = (void *)sub_10010F4D4(v128 > 1, v119 + 1, 1, (unint64_t)v254);
            }
            uint64_t v121 = &v243;
            goto LABEL_119;
          }
          if (v109 == v239)
          {
            uint64_t v129 = v202;
            (*v221)(v202, v272, v84);
            (*v220)(v129, v180, v241);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              v254 = (void *)sub_10010F4D4(0, v254[2] + 1, 1, (unint64_t)v254);
            }
            unint64_t v119 = v254[2];
            unint64_t v130 = v254[3];
            unint64_t v120 = v119 + 1;
            if (v119 >= v130 >> 1) {
              v254 = (void *)sub_10010F4D4(v130 > 1, v119 + 1, 1, (unint64_t)v254);
            }
            uint64_t v121 = &v241;
            goto LABEL_119;
          }
          if (v109 == v238)
          {
            uint64_t v131 = v201;
            (*v221)(v201, v272, v84);
            (*v220)(v131, v179, v241);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              v254 = (void *)sub_10010F4D4(0, v254[2] + 1, 1, (unint64_t)v254);
            }
            unint64_t v119 = v254[2];
            unint64_t v132 = v254[3];
            unint64_t v120 = v119 + 1;
            if (v119 >= v132 >> 1) {
              v254 = (void *)sub_10010F4D4(v132 > 1, v119 + 1, 1, (unint64_t)v254);
            }
            uint64_t v121 = (uint64_t *)&v239;
            goto LABEL_119;
          }
          if (v109 == v237)
          {
            int v133 = v200;
            (*v221)(v200, v272, v84);
            (*v220)(v133, v178, v241);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              v254 = (void *)sub_10010F4D4(0, v254[2] + 1, 1, (unint64_t)v254);
            }
            unint64_t v119 = v254[2];
            unint64_t v134 = v254[3];
            unint64_t v120 = v119 + 1;
            if (v119 >= v134 >> 1) {
              v254 = (void *)sub_10010F4D4(v134 > 1, v119 + 1, 1, (unint64_t)v254);
            }
            uint64_t v121 = (uint64_t *)&v237;
            goto LABEL_119;
          }
          if (v109 == v236)
          {
            uint64_t v135 = v199;
            (*v221)(v199, v272, v84);
            (*v220)(v135, v177, v241);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              v254 = (void *)sub_10010F4D4(0, v254[2] + 1, 1, (unint64_t)v254);
            }
            unint64_t v119 = v254[2];
            unint64_t v136 = v254[3];
            unint64_t v120 = v119 + 1;
            if (v119 >= v136 >> 1) {
              v254 = (void *)sub_10010F4D4(v136 > 1, v119 + 1, 1, (unint64_t)v254);
            }
            uint64_t v121 = (uint64_t *)&v235;
            goto LABEL_119;
          }
          if (v109 == v235)
          {
            int v137 = v197;
            (*v221)(v197, v272, v84);
            (*v220)(v137, v176, v241);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              v254 = (void *)sub_10010F4D4(0, v254[2] + 1, 1, (unint64_t)v254);
            }
            unint64_t v119 = v254[2];
            unint64_t v138 = v254[3];
            unint64_t v120 = v119 + 1;
            if (v119 >= v138 >> 1) {
              v254 = (void *)sub_10010F4D4(v138 > 1, v119 + 1, 1, (unint64_t)v254);
            }
            uint64_t v121 = (uint64_t *)&v231;
            goto LABEL_119;
          }
          if (v109 == v234)
          {
            uint64_t v139 = v196;
            (*v221)(v196, v272, v84);
            (*v220)(v139, v175, v241);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              v254 = (void *)sub_10010F4D4(0, v254[2] + 1, 1, (unint64_t)v254);
            }
            unint64_t v119 = v254[2];
            unint64_t v140 = v254[3];
            unint64_t v120 = v119 + 1;
            if (v119 >= v140 >> 1) {
              v254 = (void *)sub_10010F4D4(v140 > 1, v119 + 1, 1, (unint64_t)v254);
            }
            uint64_t v121 = (uint64_t *)&v229;
            goto LABEL_119;
          }
          if (v109 == v233)
          {
            int v141 = v195;
            (*v221)(v195, v272, v84);
            (*v220)(v141, v174, v241);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              v254 = (void *)sub_10010F4D4(0, v254[2] + 1, 1, (unint64_t)v254);
            }
            unint64_t v119 = v254[2];
            unint64_t v142 = v254[3];
            unint64_t v120 = v119 + 1;
            if (v119 >= v142 >> 1) {
              v254 = (void *)sub_10010F4D4(v142 > 1, v119 + 1, 1, (unint64_t)v254);
            }
            uint64_t v121 = &v228;
            goto LABEL_119;
          }
          if (v109 == v232)
          {
            uint64_t v143 = v194;
            (*v221)(v194, v272, v84);
            (*v220)(v143, v173, v241);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              v254 = (void *)sub_10010F4D4(0, v254[2] + 1, 1, (unint64_t)v254);
            }
            unint64_t v119 = v254[2];
            unint64_t v144 = v254[3];
            unint64_t v120 = v119 + 1;
            if (v119 >= v144 >> 1) {
              v254 = (void *)sub_10010F4D4(v144 > 1, v119 + 1, 1, (unint64_t)v254);
            }
            uint64_t v121 = (uint64_t *)&v226;
            goto LABEL_119;
          }
          if (v109 == v231)
          {
            uint64_t v145 = v193;
            (*v221)(v193, v272, v84);
            (*v220)(v145, v172, v241);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              v254 = (void *)sub_10010F4D4(0, v254[2] + 1, 1, (unint64_t)v254);
            }
            unint64_t v119 = v254[2];
            unint64_t v146 = v254[3];
            unint64_t v120 = v119 + 1;
            if (v119 >= v146 >> 1) {
              v254 = (void *)sub_10010F4D4(v146 > 1, v119 + 1, 1, (unint64_t)v254);
            }
            uint64_t v121 = &v225;
            goto LABEL_119;
          }
          if (v109 == v230)
          {
            id v147 = v192;
            (*v221)(v192, v272, v84);
            (*v220)(v147, v171, v241);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              v254 = (void *)sub_10010F4D4(0, v254[2] + 1, 1, (unint64_t)v254);
            }
            unint64_t v119 = v254[2];
            unint64_t v148 = v254[3];
            unint64_t v120 = v119 + 1;
            if (v119 >= v148 >> 1) {
              v254 = (void *)sub_10010F4D4(v148 > 1, v119 + 1, 1, (unint64_t)v254);
            }
            uint64_t v121 = &v224;
            goto LABEL_119;
          }
          (*v246)(v272, v84);
          (*v268)(v275, v42);
          unint64_t v110 = *v261;
          uint64_t v111 = v276;
          (*v261)(v86, v276);
          uint64_t v112 = v111;
          uint64_t v85 = v95;
          uint64_t result = ((uint64_t (*)(char *, uint64_t))v110)(v260, v112);
          uint64_t v84 = v271;
          unint64_t v83 = v274;
        }
      }
    }
    unint64_t v87 = __clz(__rbit64(v80));
    v80 &= v80 - 1;
    unint64_t v274 = v83;
    unint64_t v88 = v87 | (v83 << 6);
    goto LABEL_11;
  }
  sub_10000C6CC((uint64_t)v57, &qword_100720AF8);
  v254 = _swiftEmptyArrayStorage;
LABEL_127:
  uint64_t v151 = v216;
  uint64_t v152 = sub_100048D6C(v71, v216, &qword_100720AD8);
  __chkstk_darwin(v152);
  uint64_t v167 = v71;
  uint64_t v153 = v217;
  sub_100047EE8((void (*)(char *, uint64_t *))sub_100047EC8, (uint64_t)(&v168 - 4), v217);
  uint64_t v154 = (uint64_t)v219;
  uint64_t v155 = v208;
  sub_10000C6CC(v151, &qword_100720AD8);
  uint64_t v156 = v198;
  sub_100048D6C(v153, v198, &qword_100720AE0);
  uint64_t v157 = type metadata accessor for BundleRecord();
  uint64_t v158 = *(void *)(v157 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v158 + 48))(v156, 1, v157) == 1)
  {
    sub_10000C6CC(v153, &qword_100720AE0);
    sub_10000C6CC(v156, &qword_100720AE0);
  }
  else
  {
    BundleRecord.bundleIdentifier.getter();
    sub_10000C6CC(v153, &qword_100720AE0);
    (*(void (**)(uint64_t, uint64_t))(v158 + 8))(v156, v157);
  }
  uint64_t v159 = v214;
  uint64_t v160 = v224;
  uint64_t v161 = v187;
  sub_100048D6C(v189, v214, &qword_100720AF8);
  if (v161(v159, 1, v160) == 1)
  {
    sub_10000C6CC(v159, &qword_100720AF8);
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_100048D0C(v159, (uint64_t (*)(void))type metadata accessor for ValidatedDigitalPresentmentRequest);
  }
  sub_100048D6C(v223 + *(int *)(v155 + 24), v154, &qword_100720AD0);
  uint64_t v162 = type metadata accessor for IdentityDocumentDescriptor();
  uint64_t v163 = *(void *)(v162 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v163 + 48))(v154, 1, v162) == 1)
  {
    sub_10000C6CC(v154, &qword_100720AD0);
  }
  else
  {
    id v164 = v209;
    IdentityDocumentDescriptor.documentType.getter();
    (*(void (**)(uint64_t, uint64_t))(v163 + 8))(v154, v162);
    DigitalPresentmentDocumentType.description.getter();
    Swift::String v165 = v164;
    uint64_t v155 = v208;
    (*(void (**)(char *, uint64_t))(v210 + 8))(v165, v211);
  }
  type metadata accessor for DaemonAnalytics();
  LOBYTE(v167) = *(unsigned char *)(v223 + *(int *)(v155 + 36));
  uint64_t v166 = v190;
  static DaemonAnalytics.sendDigitalPresentmentRequestDocumentEvent(merchantID:bundleID:documentType:outcome:elements:isTestMDL:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v166, v191);
}

uint64_t sub_100047808@<X0>(void *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100007764(&qword_100723600);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v38 - v11;
  uint64_t v13 = sub_100007764(&qword_100720AF8);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (int *)type metadata accessor for DigitalPresentmentRequestDocumentAnalyticsRecorder(0);
  if (*(unsigned char *)(v1 + v16[5]) == 1)
  {
    uint64_t v17 = enum case for DaemonAnalytics.DigitalPresentmentRequestedEventOutcome.success(_:);
    uint64_t v18 = type metadata accessor for DaemonAnalytics.DigitalPresentmentRequestedEventOutcome();
    uint64_t v39 = *(void *)(v18 - 8);
    (*(void (**)(void *, uint64_t, uint64_t))(v39 + 104))(a1, v17, v18);
    uint64_t v19 = *(uint64_t (**)(void *, void, uint64_t, uint64_t))(v39 + 56);
    return v19(a1, 0, 1, v18);
  }
  uint64_t v21 = *(void *)(v1 + v16[8]);
  if (v21)
  {
    sub_100048D6C(v1 + v16[7], (uint64_t)v15, &qword_100720AF8);
    uint64_t v22 = type metadata accessor for ValidatedDigitalPresentmentRequest();
    int v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v15, 1, v22);
    swift_errorRetain();
    sub_10000C6CC((uint64_t)v15, &qword_100720AF8);
    if (v23 == 1)
    {
      *a1 = v21;
      uint64_t v24 = enum case for DaemonAnalytics.DigitalPresentmentRequestedEventOutcome.validationFailed(_:);
      uint64_t v25 = type metadata accessor for DaemonAnalytics.DigitalPresentmentRequestedEventOutcome();
      uint64_t v26 = *(void *)(v25 - 8);
      (*(void (**)(void *, uint64_t, uint64_t))(v26 + 104))(a1, v24, v25);
      return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(a1, 0, 1, v25);
    }
    swift_getErrorValue();
    Error.dipErrorCode.getter();
    uint64_t v31 = type metadata accessor for DIPError.Code();
    uint64_t v32 = *(void *)(v31 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v12, 1, v31) != 1)
    {
      sub_100048D6C((uint64_t)v12, (uint64_t)v10, &qword_100723600);
      int v33 = (*(uint64_t (**)(char *, uint64_t))(v32 + 88))(v10, v31);
      if (v33 == enum case for DIPError.Code.digitalPresentmentUserCancelled(_:))
      {
        swift_errorRelease();
        uint64_t v34 = (unsigned int *)&enum case for DaemonAnalytics.DigitalPresentmentRequestedEventOutcome.userCancelled(_:);
LABEL_18:
        uint64_t v35 = *v34;
        uint64_t v36 = type metadata accessor for DaemonAnalytics.DigitalPresentmentRequestedEventOutcome();
        uint64_t v37 = *(void *)(v36 - 8);
        (*(void (**)(void *, uint64_t, uint64_t))(v37 + 104))(a1, v35, v36);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v37 + 56))(a1, 0, 1, v36);
        return sub_10000C6CC((uint64_t)v12, &qword_100723600);
      }
      if (v33 == enum case for DIPError.Code.digitalPresentmentAppCancelled(_:))
      {
        swift_errorRelease();
        uint64_t v34 = (unsigned int *)&enum case for DaemonAnalytics.DigitalPresentmentRequestedEventOutcome.appCancelled(_:);
        goto LABEL_18;
      }
      (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v31);
    }
    *a1 = v21;
    uint64_t v34 = (unsigned int *)&enum case for DaemonAnalytics.DigitalPresentmentRequestedEventOutcome.presentmentFailed(_:);
    goto LABEL_18;
  }
  defaultLogger()();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "DigitalPresentmentRequestDocumentAnalyticsRecorder didPresentSuccessfully is false but no error is set", v29, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v30 = type metadata accessor for DaemonAnalytics.DigitalPresentmentRequestedEventOutcome();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(a1, 1, 1, v30);
}

uint64_t type metadata accessor for DigitalPresentmentRequestDocumentAnalyticsRecorder(uint64_t a1)
{
  return sub_100048DF0(a1, (uint64_t *)&unk_100720C30);
}

uint64_t sub_100047E34(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for DigitalPresentmentRequestDocumentAnalyticsRecorder(0);
  sub_10000C728((void *)(a2 + *(int *)(v6 + 40)), *(void *)(a2 + *(int *)(v6 + 40) + 24));
  AuditToken.wrapped.getter();
  uint64_t result = dispatch thunk of BundleRecordFetching.record(withAuditToken:)();
  if (v3) {
    *a3 = v3;
  }
  return result;
}

uint64_t sub_100047EC8(uint64_t a1, void *a2)
{
  return sub_100047E34(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_100047EE8@<X0>(void (*a1)(char *, uint64_t *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3;
  v18[1] = a2;
  uint64_t v8 = type metadata accessor for DigitalPresentmentCallingClientConfig();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100007764(&qword_100720AD8);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100048D6C(v5, (uint64_t)v14, &qword_100720AD8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, v8) == 1)
  {
    uint64_t v15 = type metadata accessor for BundleRecord();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(a3, 1, 1, v15);
  }
  else
  {
    sub_100048CA4((uint64_t)v14, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for DigitalPresentmentCallingClientConfig);
    a1(v11, &v19);
    uint64_t result = sub_100048D0C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for DigitalPresentmentCallingClientConfig);
    if (!v4)
    {
      uint64_t v17 = type metadata accessor for BundleRecord();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(a3, 0, 1, v17);
    }
  }
  return result;
}

uint64_t sub_10004810C()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v57 = *(void *)(v1 - 8);
  uint64_t v58 = v1;
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v50 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v45 - v4;
  uint64_t v6 = type metadata accessor for DigitalPresentmentDocumentType();
  uint64_t v51 = *(void *)(v6 - 8);
  uint64_t v52 = v6;
  __chkstk_darwin(v6);
  uint64_t v55 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100007764(&qword_100720AD8);
  __chkstk_darwin(v8 - 8);
  uint64_t v53 = (uint64_t)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100007764(&qword_100720AE0);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v49 = (uint64_t)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v54 = (uint64_t)&v45 - v13;
  uint64_t v14 = sub_100007764(&qword_100720B18);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t CanRequestDocumentOutcome = type metadata accessor for DaemonAnalytics.DigitalPresentmentCanRequestDocumentOutcome();
  uint64_t v59 = *(void *)(CanRequestDocumentOutcome - 8);
  __chkstk_darwin(CanRequestDocumentOutcome);
  uint64_t v56 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100007764(&qword_100720AD0);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for IdentityDocumentDescriptor();
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v45 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t CanRequestDocumentAnalyticsRecorder = type metadata accessor for DigitalPresentmentCanRequestDocumentAnalyticsRecorder(0);
  sub_100048D6C(v0 + *(int *)(CanRequestDocumentAnalyticsRecorder + 20), (uint64_t)v21, &qword_100720AD0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
  {
    sub_10000C6CC((uint64_t)v21, &qword_100720AD0);
    defaultLogger()();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "DigitalPresentmentCanRequestDocumentAnalyticsRecorder descriptor not set", v29, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v5, v58);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v25, v21, v22);
    sub_1000488F0((uint64_t)v16);
    uint64_t v31 = v59;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v16, 1, CanRequestDocumentOutcome) == 1)
    {
      (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
      return sub_10000C6CC((uint64_t)v16, &qword_100720B18);
    }
    else
    {
      uint64_t v32 = v0;
      uint64_t v47 = v22;
      uint64_t v48 = CanRequestDocumentOutcome;
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v56, v16, CanRequestDocumentOutcome);
      uint64_t v33 = v0 + *(int *)(CanRequestDocumentAnalyticsRecorder + 24);
      uint64_t v34 = v53;
      uint64_t v35 = sub_100048D6C(v33, v53, &qword_100720AD8);
      __chkstk_darwin(v35);
      *(&v45 - 2) = v32;
      uint64_t v36 = v54;
      sub_100047EE8((void (*)(char *, uint64_t *))sub_100048E28, (uint64_t)(&v45 - 4), v54);
      uint64_t v46 = v25;
      sub_10000C6CC(v34, &qword_100720AD8);
      uint64_t v37 = v49;
      sub_100048D6C(v36, v49, &qword_100720AE0);
      uint64_t v38 = type metadata accessor for BundleRecord();
      uint64_t v39 = *(void *)(v38 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38) == 1)
      {
        sub_10000C6CC(v36, &qword_100720AE0);
        sub_10000C6CC(v37, &qword_100720AE0);
        uint64_t v58 = 0;
      }
      else
      {
        uint64_t v58 = BundleRecord.bundleIdentifier.getter();
        sub_10000C6CC(v36, &qword_100720AE0);
        (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v37, v38);
      }
      uint64_t v41 = v51;
      uint64_t v40 = v52;
      type metadata accessor for DaemonAnalytics();
      uint64_t v42 = v55;
      uint64_t v43 = v46;
      IdentityDocumentDescriptor.documentType.getter();
      DigitalPresentmentDocumentType.description.getter();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v40);
      uint64_t v44 = v56;
      static DaemonAnalytics.sendDigitalPresentmentCanRequestDocumentEvent(outcome:bundleID:documentType:isTestMDL:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v59 + 8))(v44, v48);
      return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v43, v47);
    }
  }
}

uint64_t sub_1000488F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t CanRequestDocumentAnalyticsRecorder = (int *)type metadata accessor for DigitalPresentmentCanRequestDocumentAnalyticsRecorder(0);
  if (*(unsigned char *)(v1 + CanRequestDocumentAnalyticsRecorder[10]) == 1)
  {
    uint64_t v8 = (unsigned int *)&enum case for DaemonAnalytics.DigitalPresentmentCanRequestDocumentOutcome.success(_:);
LABEL_9:
    uint64_t v9 = *v8;
    uint64_t CanRequestDocumentOutcome = type metadata accessor for DaemonAnalytics.DigitalPresentmentCanRequestDocumentOutcome();
    uint64_t v18 = *(void *)(CanRequestDocumentOutcome - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 104))(a1, v9, CanRequestDocumentOutcome);
    uint64_t v11 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56);
    return v11(a1, 0, 1, CanRequestDocumentOutcome);
  }
  if (*(unsigned char *)(v1 + CanRequestDocumentAnalyticsRecorder[7]) == 1)
  {
    uint64_t v8 = (unsigned int *)&enum case for DaemonAnalytics.DigitalPresentmentCanRequestDocumentOutcome.missingDocument(_:);
    goto LABEL_9;
  }
  if (*(unsigned char *)(v1 + CanRequestDocumentAnalyticsRecorder[8]) == 1)
  {
    uint64_t v8 = (unsigned int *)&enum case for DaemonAnalytics.DigitalPresentmentCanRequestDocumentOutcome.missingEntitlement(_:);
    goto LABEL_9;
  }
  if (*(unsigned char *)(v1 + CanRequestDocumentAnalyticsRecorder[9]) == 1)
  {
    uint64_t v8 = (unsigned int *)&enum case for DaemonAnalytics.DigitalPresentmentCanRequestDocumentOutcome.notLoggedInWithPasscode(_:);
    goto LABEL_9;
  }
  defaultLogger()();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "DigitalPresentmentCanRequestDocumentAnalyticsRecorder inconsistent outcome", v15, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v16 = type metadata accessor for DaemonAnalytics.DigitalPresentmentCanRequestDocumentOutcome();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a1, 1, 1, v16);
}

uint64_t sub_100048BA8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t CanRequestDocumentAnalyticsRecorder = type metadata accessor for DigitalPresentmentCanRequestDocumentAnalyticsRecorder(0);
  sub_10000C728((void *)(a2 + *(int *)(CanRequestDocumentAnalyticsRecorder + 44)), *(void *)(a2 + *(int *)(CanRequestDocumentAnalyticsRecorder + 44) + 24));
  AuditToken.wrapped.getter();
  uint64_t result = dispatch thunk of BundleRecordFetching.record(withAuditToken:)();
  if (v3) {
    *a3 = v3;
  }
  return result;
}

uint64_t sub_100048C3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_100720AF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100048CA4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100048D0C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100048D6C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100007764(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for DigitalPresentmentCanRequestDocumentAnalyticsRecorder(uint64_t a1)
{
  return sub_100048DF0(a1, (uint64_t *)&unk_100720B78);
}

uint64_t sub_100048DF0(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100048E28(uint64_t a1, void *a2)
{
  return sub_100048BA8(a1, *(void *)(v2 + 16), a2);
}

void *sub_100048E48(unsigned char *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(unsigned char *)a2;
    uint64_t v7 = a3[5];
    uint64_t v8 = &a1[v7];
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for IdentityDocumentDescriptor();
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      uint64_t v12 = sub_100007764(&qword_100720AD0);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    uint64_t v14 = a3[6];
    uint64_t v15 = (char *)v4 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = type metadata accessor for DigitalPresentmentCallingClientConfig();
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = sub_100007764(&qword_100720AD8);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      uint64_t v20 = type metadata accessor for AuditToken();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v15, v16, v20);
      v15[*(int *)(v17 + 20)] = v16[*(int *)(v17 + 20)];
      uint64_t v21 = *(int *)(v17 + 24);
      uint64_t v22 = &v15[v21];
      uint64_t v23 = &v16[v21];
      uint64_t v24 = *((void *)v23 + 1);
      *(void *)uint64_t v22 = *(void *)v23;
      *((void *)v22 + 1) = v24;
      *((void *)v22 + 2) = *((void *)v23 + 2);
      uint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v25(v15, 0, 1, v17);
    }
    uint64_t v26 = a3[8];
    *((unsigned char *)v4 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    *((unsigned char *)v4 + v26) = *((unsigned char *)a2 + v26);
    uint64_t v27 = a3[10];
    *((unsigned char *)v4 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    *((unsigned char *)v4 + v27) = *((unsigned char *)a2 + v27);
    uint64_t v28 = a3[11];
    long long v29 = *(_OWORD *)((char *)a2 + v28 + 24);
    *(_OWORD *)((char *)v4 + v28 + 24) = v29;
    (**(void (***)(void))(v29 - 8))();
  }
  return v4;
}

uint64_t sub_100049170(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for IdentityDocumentDescriptor();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v7 = a1 + a2[6];
  uint64_t v8 = type metadata accessor for DigitalPresentmentCallingClientConfig();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8))
  {
    uint64_t v9 = type metadata accessor for AuditToken();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v7, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v10 = a1 + a2[11];

  return _s8coreidvd24DigitalPresentmentHelperVwxx_0(v10);
}

unsigned char *sub_1000492F0(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for IdentityDocumentDescriptor();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_100007764(&qword_100720AD0);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for DigitalPresentmentCallingClientConfig();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_100007764(&qword_100720AD8);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v18 = type metadata accessor for AuditToken();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v13, v14, v18);
    v13[*(int *)(v15 + 20)] = v14[*(int *)(v15 + 20)];
    uint64_t v19 = *(int *)(v15 + 24);
    uint64_t v20 = &v13[v19];
    uint64_t v21 = &v14[v19];
    uint64_t v22 = *((void *)v21 + 1);
    *(void *)uint64_t v20 = *(void *)v21;
    *((void *)v20 + 1) = v22;
    *((void *)v20 + 2) = *((void *)v21 + 2);
    uint64_t v23 = *(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23(v13, 0, 1, v15);
  }
  uint64_t v24 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v24] = a2[v24];
  uint64_t v25 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v25] = a2[v25];
  uint64_t v26 = a3[11];
  long long v27 = *(_OWORD *)&a2[v26 + 24];
  *(_OWORD *)&a1[v26 + 24] = v27;
  (**(void (***)(void))(v27 - 8))();
  return a1;
}

unsigned char *sub_1000495C8(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for IdentityDocumentDescriptor();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_100007764(&qword_100720AD0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = type metadata accessor for DigitalPresentmentCallingClientConfig();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  int v22 = v20(v17, 1, v18);
  if (!v21)
  {
    if (!v22)
    {
      uint64_t v30 = type metadata accessor for AuditToken();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v30 - 8) + 24))(v16, v17, v30);
      v16[*(int *)(v18 + 20)] = v17[*(int *)(v18 + 20)];
      uint64_t v31 = *(int *)(v18 + 24);
      uint64_t v32 = &v16[v31];
      uint64_t v33 = &v17[v31];
      *(void *)&v16[v31] = *v33;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v32 + 1) = v33[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v32 + 2) = v33[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    sub_100048D0C((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for DigitalPresentmentCallingClientConfig);
    goto LABEL_12;
  }
  if (v22)
  {
LABEL_12:
    uint64_t v28 = sub_100007764(&qword_100720AD8);
    memcpy(v16, v17, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v23 = type metadata accessor for AuditToken();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v23 - 8) + 16))(v16, v17, v23);
  v16[*(int *)(v18 + 20)] = v17[*(int *)(v18 + 20)];
  uint64_t v24 = *(int *)(v18 + 24);
  uint64_t v25 = &v16[v24];
  uint64_t v26 = &v17[v24];
  *uint64_t v25 = *v26;
  v25[1] = v26[1];
  v25[2] = v26[2];
  long long v27 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v19 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v27(v16, 0, 1, v18);
LABEL_13:
  a1[a3[7]] = a2[a3[7]];
  a1[a3[8]] = a2[a3[8]];
  a1[a3[9]] = a2[a3[9]];
  a1[a3[10]] = a2[a3[10]];
  sub_10000A128((uint64_t *)&a1[a3[11]], (uint64_t *)&a2[a3[11]]);
  return a1;
}

unsigned char *sub_1000499BC(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for IdentityDocumentDescriptor();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_100007764(&qword_100720AD0);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[6];
  int v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for DigitalPresentmentCallingClientConfig();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_100007764(&qword_100720AD8);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v18 = type metadata accessor for AuditToken();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v13, v14, v18);
    v13[*(int *)(v15 + 20)] = v14[*(int *)(v15 + 20)];
    uint64_t v19 = *(int *)(v15 + 24);
    uint64_t v20 = &v13[v19];
    int v21 = &v14[v19];
    *((void *)v20 + 2) = *((void *)v21 + 2);
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v22 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v22] = a2[v22];
  uint64_t v23 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v23] = a2[v23];
  uint64_t v24 = a3[11];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  long long v27 = *((_OWORD *)v26 + 1);
  *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
  *((_OWORD *)v25 + 1) = v27;
  *((void *)v25 + 4) = *((void *)v26 + 4);
  return a1;
}

unsigned char *sub_100049C54(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for IdentityDocumentDescriptor();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_100007764(&qword_100720AD0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = type metadata accessor for DigitalPresentmentCallingClientConfig();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  int v22 = v20(v17, 1, v18);
  if (!v21)
  {
    if (!v22)
    {
      uint64_t v35 = type metadata accessor for AuditToken();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v35 - 8) + 40))(v16, v17, v35);
      v16[*(int *)(v18 + 20)] = v17[*(int *)(v18 + 20)];
      uint64_t v36 = *(int *)(v18 + 24);
      uint64_t v37 = &v16[v36];
      uint64_t v38 = &v17[v36];
      *uint64_t v37 = *v38;
      swift_bridgeObjectRelease();
      v37[1] = v38[1];
      swift_bridgeObjectRelease();
      v37[2] = v38[2];
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    sub_100048D0C((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for DigitalPresentmentCallingClientConfig);
    goto LABEL_12;
  }
  if (v22)
  {
LABEL_12:
    uint64_t v27 = sub_100007764(&qword_100720AD8);
    memcpy(v16, v17, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v23 = type metadata accessor for AuditToken();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v23 - 8) + 32))(v16, v17, v23);
  v16[*(int *)(v18 + 20)] = v17[*(int *)(v18 + 20)];
  uint64_t v24 = *(int *)(v18 + 24);
  uint64_t v25 = &v16[v24];
  uint64_t v26 = &v17[v24];
  *((void *)v25 + 2) = *((void *)v26 + 2);
  *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
LABEL_13:
  uint64_t v28 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v28] = a2[v28];
  uint64_t v29 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v29] = a2[v29];
  uint64_t v30 = a3[11];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&a1[v30]);
  long long v33 = *((_OWORD *)v32 + 1);
  *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
  *((_OWORD *)v31 + 1) = v33;
  *((void *)v31 + 4) = *((void *)v32 + 4);
  return a1;
}

uint64_t sub_10004A020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004A034);
}

uint64_t sub_10004A034(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_100007764(&qword_100720AD0);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[5];
LABEL_5:
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v11(a1 + v9, a2, v7);
  }
  uint64_t v10 = sub_100007764(&qword_100720AD8);
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
  {
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[6];
    goto LABEL_5;
  }
  unint64_t v13 = *(void *)(a1 + a3[11] + 24);
  if (v13 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  return (v13 + 1);
}

uint64_t sub_10004A150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004A164);
}

uint64_t sub_10004A164(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_100007764(&qword_100720AD0);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
  }
  else
  {
    uint64_t result = sub_100007764(&qword_100720AD8);
    if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
    {
      *(void *)(a1 + a4[11] + 24) = (a2 - 1);
      return result;
    }
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result - 8);
    uint64_t v11 = a4[6];
  }
  unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);

  return v13(a1 + v11, a2, a2, v9);
}

void sub_10004A27C()
{
  sub_10004CE70(319, &qword_100720B88, (void (*)(uint64_t))&type metadata accessor for IdentityDocumentDescriptor);
  if (v0 <= 0x3F)
  {
    sub_10004CE70(319, (unint64_t *)&unk_100720B90, (void (*)(uint64_t))type metadata accessor for DigitalPresentmentCallingClientConfig);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *sub_10004A398(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for DigitalPresentmentCallingClientConfig();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = sub_100007764(&qword_100720AD8);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      uint64_t v11 = type metadata accessor for AuditToken();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
      *((unsigned char *)a1 + *(int *)(v7 + 20)) = *((unsigned char *)a2 + *(int *)(v7 + 20));
      uint64_t v12 = *(int *)(v7 + 24);
      unint64_t v13 = (uint64_t *)((char *)a1 + v12);
      uint64_t v14 = (uint64_t *)((char *)a2 + v12);
      uint64_t v15 = v14[1];
      *unint64_t v13 = *v14;
      v13[1] = v15;
      v13[2] = v14[2];
      uint64_t v16 = *(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v16(a1, 0, 1, v7);
    }
    uint64_t v17 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    uint64_t v18 = (char *)a1 + v17;
    uint64_t v19 = (char *)a2 + v17;
    uint64_t v20 = type metadata accessor for IdentityDocumentDescriptor();
    uint64_t v21 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      uint64_t v22 = sub_100007764(&qword_100720AD0);
      memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    uint64_t v23 = a3[7];
    uint64_t v24 = (char *)a1 + v23;
    uint64_t v25 = (char *)a2 + v23;
    uint64_t v26 = (int *)type metadata accessor for ValidatedDigitalPresentmentRequest();
    uint64_t v27 = *((void *)v26 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v27 + 48))(v25, 1, v26))
    {
      uint64_t v28 = sub_100007764(&qword_100720AF8);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      uint64_t v61 = v27;
      uint64_t v29 = type metadata accessor for ISO18013KnownDocTypes();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16))(v24, v25, v29);
      *(void *)&v24[v26[5]] = *(void *)&v25[v26[5]];
      uint64_t v30 = v26[6];
      uint64_t v62 = &v25[v30];
      uint64_t v64 = &v24[v30];
      uint64_t v31 = type metadata accessor for Locale.Region();
      uint64_t v32 = *(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16);
      swift_bridgeObjectRetain();
      v32(v64, v62, v31);
      uint64_t v33 = v26[7];
      uint64_t v34 = (uint64_t *)&v24[v33];
      uint64_t v35 = (uint64_t *)&v25[v33];
      uint64_t v36 = *v35;
      unint64_t v37 = v35[1];
      sub_10002CEB0(*v35, v37);
      *uint64_t v34 = v36;
      v34[1] = v37;
      uint64_t v38 = v26[8];
      uint64_t v39 = &v24[v38];
      uint64_t v40 = &v25[v38];
      uint64_t v41 = *((void *)v40 + 1);
      *(void *)uint64_t v39 = *(void *)v40;
      *((void *)v39 + 1) = v41;
      uint64_t v42 = v26[9];
      uint64_t v43 = &v24[v42];
      uint64_t v44 = &v25[v42];
      uint64_t v45 = *((void *)v44 + 1);
      *(void *)uint64_t v43 = *(void *)v44;
      *((void *)v43 + 1) = v45;
      uint64_t v46 = v26[10];
      __dst = &v24[v46];
      uint64_t v65 = &v25[v46];
      uint64_t v47 = type metadata accessor for URL();
      uint64_t v59 = *(void *)(v47 - 8);
      uint64_t v63 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v63(v65, 1, v47))
      {
        uint64_t v48 = sub_100007764(&qword_100720A68);
        memcpy(__dst, v65, *(void *)(*(void *)(v48 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v59 + 16))(__dst, v65, v47);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(__dst, 0, 1, v47);
      }
      uint64_t v49 = v26[11];
      uint64_t v50 = &v24[v49];
      uint64_t v51 = &v25[v49];
      uint64_t v52 = *((void *)v51 + 1);
      *(void *)uint64_t v50 = *(void *)v51;
      *((void *)v50 + 1) = v52;
      uint64_t v53 = *(void (**)(char *, void, uint64_t, int *))(v61 + 56);
      swift_bridgeObjectRetain();
      v53(v24, 0, 1, v26);
    }
    uint64_t v54 = a3[8];
    uint64_t v55 = *(uint64_t *)((char *)a2 + v54);
    swift_errorRetain();
    *(uint64_t *)((char *)a1 + v54) = v55;
    uint64_t v56 = a3[10];
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    long long v57 = *(_OWORD *)((char *)a2 + v56 + 24);
    *(_OWORD *)((char *)a1 + v56 + 24) = v57;
    (**(void (***)(void))(v57 - 8))();
  }
  return a1;
}

uint64_t sub_10004A994(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for DigitalPresentmentCallingClientConfig();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4))
  {
    uint64_t v5 = type metadata accessor for AuditToken();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = a1 + a2[6];
  uint64_t v7 = type metadata accessor for IdentityDocumentDescriptor();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  uint64_t v9 = a1 + a2[7];
  uint64_t v10 = (int *)type metadata accessor for ValidatedDigitalPresentmentRequest();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v10 - 1) + 48))(v9, 1, v10))
  {
    uint64_t v11 = type metadata accessor for ISO18013KnownDocTypes();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v9, v11);
    swift_bridgeObjectRelease();
    uint64_t v12 = v9 + v10[6];
    uint64_t v13 = type metadata accessor for Locale.Region();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
    sub_10000C5F4(*(void *)(v9 + v10[7]), *(void *)(v9 + v10[7] + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v14 = v9 + v10[10];
    uint64_t v15 = type metadata accessor for URL();
    uint64_t v16 = *(void *)(v15 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15)) {
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
    }
    swift_bridgeObjectRelease();
  }
  swift_errorRelease();
  uint64_t v17 = a1 + a2[10];

  return _s8coreidvd24DigitalPresentmentHelperVwxx_0(v17);
}

char *sub_10004ACAC(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DigitalPresentmentCallingClientConfig();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_100007764(&qword_100720AD8);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    uint64_t v9 = type metadata accessor for AuditToken();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
    a1[*(int *)(v6 + 20)] = a2[*(int *)(v6 + 20)];
    uint64_t v10 = *(int *)(v6 + 24);
    uint64_t v11 = &a1[v10];
    uint64_t v12 = &a2[v10];
    uint64_t v13 = *((void *)v12 + 1);
    *(void *)uint64_t v11 = *(void *)v12;
    *((void *)v11 + 1) = v13;
    *((void *)v11 + 2) = *((void *)v12 + 2);
    uint64_t v14 = *(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(a1, 0, 1, v6);
  }
  uint64_t v15 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = type metadata accessor for IdentityDocumentDescriptor();
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    uint64_t v20 = sub_100007764(&qword_100720AD0);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  uint64_t v21 = a3[7];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  uint64_t v24 = (int *)type metadata accessor for ValidatedDigitalPresentmentRequest();
  uint64_t v25 = *((void *)v24 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v25 + 48))(v23, 1, v24))
  {
    uint64_t v26 = sub_100007764(&qword_100720AF8);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    uint64_t v63 = v25;
    uint64_t v64 = a3;
    uint64_t v27 = type metadata accessor for ISO18013KnownDocTypes();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16))(v22, v23, v27);
    *(void *)&v22[v24[5]] = *(void *)&v23[v24[5]];
    uint64_t v28 = v24[6];
    __dsta = &v22[v28];
    uint64_t v29 = &v23[v28];
    uint64_t v30 = type metadata accessor for Locale.Region();
    uint64_t v31 = *(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16);
    swift_bridgeObjectRetain();
    v31(__dsta, v29, v30);
    uint64_t v32 = v24[7];
    uint64_t v33 = (uint64_t *)&v22[v32];
    uint64_t v34 = (uint64_t *)&v23[v32];
    uint64_t v35 = *v34;
    unint64_t v36 = v34[1];
    sub_10002CEB0(*v34, v36);
    *uint64_t v33 = v35;
    v33[1] = v36;
    uint64_t v37 = v24[8];
    uint64_t v38 = &v22[v37];
    uint64_t v39 = &v23[v37];
    uint64_t v40 = *((void *)v39 + 1);
    *(void *)uint64_t v38 = *(void *)v39;
    *((void *)v38 + 1) = v40;
    uint64_t v41 = v24[9];
    uint64_t v42 = &v22[v41];
    uint64_t v43 = &v23[v41];
    uint64_t v44 = *((void *)v43 + 1);
    *(void *)uint64_t v42 = *(void *)v43;
    *((void *)v42 + 1) = v44;
    uint64_t v45 = v24[10];
    uint64_t v60 = &v23[v45];
    __dst = &v22[v45];
    uint64_t v46 = type metadata accessor for URL();
    uint64_t v47 = *(void *)(v46 - 8);
    uint64_t v59 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v59(v60, 1, v46))
    {
      uint64_t v48 = sub_100007764(&qword_100720A68);
      memcpy(__dst, v60, *(void *)(*(void *)(v48 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v47 + 16))(__dst, v60, v46);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(__dst, 0, 1, v46);
    }
    uint64_t v49 = v24[11];
    uint64_t v50 = &v22[v49];
    uint64_t v51 = &v23[v49];
    uint64_t v52 = *((void *)v51 + 1);
    *(void *)uint64_t v50 = *(void *)v51;
    *((void *)v50 + 1) = v52;
    uint64_t v53 = *(void (**)(char *, void, uint64_t, int *))(v63 + 56);
    swift_bridgeObjectRetain();
    v53(v22, 0, 1, v24);
    a3 = v64;
  }
  uint64_t v54 = a3[8];
  uint64_t v55 = *(void *)&a2[v54];
  swift_errorRetain();
  *(void *)&a1[v54] = v55;
  uint64_t v56 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  long long v57 = *(_OWORD *)&a2[v56 + 24];
  *(_OWORD *)&a1[v56 + 24] = v57;
  (**(void (***)(void))(v57 - 8))();
  return a1;
}

unsigned char *sub_10004B25C(unsigned char *a1, unsigned char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DigitalPresentmentCallingClientConfig();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      uint64_t v11 = type metadata accessor for AuditToken();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
      a1[*(int *)(v6 + 20)] = a2[*(int *)(v6 + 20)];
      uint64_t v12 = *(int *)(v6 + 24);
      uint64_t v13 = &a1[v12];
      uint64_t v14 = &a2[v12];
      *uint64_t v13 = *v14;
      v13[1] = v14[1];
      v13[2] = v14[2];
      uint64_t v15 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v7 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v15(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    sub_100048D0C((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for DigitalPresentmentCallingClientConfig);
LABEL_6:
    uint64_t v16 = sub_100007764(&qword_100720AD8);
    memcpy(a1, a2, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v57 = type metadata accessor for AuditToken();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v57 - 8) + 24))(a1, a2, v57);
  a1[*(int *)(v6 + 20)] = a2[*(int *)(v6 + 20)];
  uint64_t v58 = *(int *)(v6 + 24);
  uint64_t v59 = &a1[v58];
  uint64_t v60 = &a2[v58];
  *(void *)&a1[v58] = *(void *)&a2[v58];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v59 + 1) = *((void *)v60 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v59 + 2) = *((void *)v60 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_7:
  a1[a3[5]] = a2[a3[5]];
  uint64_t v17 = a3[6];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  uint64_t v20 = type metadata accessor for IdentityDocumentDescriptor();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  int v23 = v22(v18, 1, v20);
  int v24 = v22(v19, 1, v20);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v24)
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v18, v20);
LABEL_12:
    uint64_t v25 = sub_100007764(&qword_100720AD0);
    memcpy(v18, v19, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 24))(v18, v19, v20);
LABEL_13:
  uint64_t v26 = a3[7];
  uint64_t v27 = &a1[v26];
  uint64_t v28 = &a2[v26];
  uint64_t v29 = (int *)type metadata accessor for ValidatedDigitalPresentmentRequest();
  uint64_t v30 = (void *)*((void *)v29 - 1);
  uint64_t v31 = (uint64_t (*)(char *, uint64_t, int *))v30[6];
  int v32 = v31(v27, 1, v29);
  int v33 = v31(v28, 1, v29);
  if (!v32)
  {
    if (v33)
    {
      sub_100048D0C((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for ValidatedDigitalPresentmentRequest);
      goto LABEL_19;
    }
    uint64_t v103 = a3;
    int v105 = a2;
    uint64_t v61 = type metadata accessor for ISO18013KnownDocTypes();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 24))(v27, v28, v61);
    *(void *)&v27[v29[5]] = *(void *)&v28[v29[5]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v62 = v29[6];
    uint64_t v63 = &v27[v62];
    uint64_t v64 = &v28[v62];
    uint64_t v65 = type metadata accessor for Locale.Region();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 24))(v63, v64, v65);
    uint64_t v66 = v29[7];
    uint64_t v67 = (uint64_t *)&v27[v66];
    uint64_t v68 = (uint64_t *)&v28[v66];
    uint64_t v69 = *v68;
    unint64_t v70 = v68[1];
    sub_10002CEB0(*v68, v70);
    uint64_t v71 = *v67;
    unint64_t v72 = v67[1];
    *uint64_t v67 = v69;
    v67[1] = v70;
    sub_10000C5F4(v71, v72);
    uint64_t v73 = v29[8];
    unsigned int v74 = &v27[v73];
    uint64_t v75 = &v28[v73];
    *(void *)unsigned int v74 = *(void *)v75;
    *((void *)v74 + 1) = *((void *)v75 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v76 = v29[9];
    uint64_t v77 = &v27[v76];
    uint64_t v78 = &v28[v76];
    *(void *)uint64_t v77 = *(void *)v78;
    *((void *)v77 + 1) = *((void *)v78 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v79 = v29[10];
    unint64_t v80 = &v27[v79];
    unint64_t v81 = &v28[v79];
    uint64_t v82 = type metadata accessor for URL();
    uint64_t v83 = *(void *)(v82 - 8);
    uint64_t v84 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v83 + 48);
    __dsta = v80;
    LODWORD(v80) = v84(v80, 1, v82);
    int v85 = v84(v81, 1, v82);
    if (v80)
    {
      if (!v85)
      {
        (*(void (**)(char *, char *, uint64_t))(v83 + 16))(__dsta, v81, v82);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v83 + 56))(__dsta, 0, 1, v82);
        goto LABEL_32;
      }
      size_t v86 = *(void *)(*(void *)(sub_100007764(&qword_100720A68) - 8) + 64);
      unint64_t v87 = __dsta;
    }
    else
    {
      if (!v85)
      {
        (*(void (**)(char *, char *, uint64_t))(v83 + 24))(__dsta, v81, v82);
        goto LABEL_32;
      }
      (*(void (**)(char *, uint64_t))(v83 + 8))(__dsta, v82);
      size_t v86 = *(void *)(*(void *)(sub_100007764(&qword_100720A68) - 8) + 64);
      unint64_t v87 = __dsta;
    }
    memcpy(v87, v81, v86);
LABEL_32:
    a2 = v105;
    uint64_t v92 = v29[11];
    uint64_t v93 = &v27[v92];
    uint64_t v94 = &v28[v92];
    *(void *)uint64_t v93 = *(void *)v94;
    *((void *)v93 + 1) = *((void *)v94 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
LABEL_33:
    a3 = v103;
    goto LABEL_34;
  }
  if (!v33)
  {
    __src = v30;
    uint64_t v103 = a3;
    unint64_t v104 = a2;
    uint64_t v34 = type metadata accessor for ISO18013KnownDocTypes();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16))(v27, v28, v34);
    *(void *)&v27[v29[5]] = *(void *)&v28[v29[5]];
    uint64_t v35 = v29[6];
    unint64_t v36 = &v27[v35];
    uint64_t v37 = &v28[v35];
    uint64_t v38 = type metadata accessor for Locale.Region();
    uint64_t v39 = *(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16);
    swift_bridgeObjectRetain();
    v39(v36, v37, v38);
    uint64_t v40 = v29[7];
    uint64_t v41 = (uint64_t *)&v27[v40];
    uint64_t v42 = (uint64_t *)&v28[v40];
    uint64_t v43 = *v42;
    unint64_t v44 = v42[1];
    sub_10002CEB0(*v42, v44);
    *uint64_t v41 = v43;
    v41[1] = v44;
    uint64_t v45 = v29[8];
    uint64_t v46 = &v27[v45];
    uint64_t v47 = &v28[v45];
    *(void *)uint64_t v46 = *(void *)v47;
    *((void *)v46 + 1) = *((void *)v47 + 1);
    uint64_t v48 = v29[9];
    uint64_t v49 = &v27[v48];
    uint64_t v50 = &v28[v48];
    *(void *)uint64_t v49 = *(void *)v50;
    *((void *)v49 + 1) = *((void *)v50 + 1);
    uint64_t v51 = v29[10];
    uint64_t v99 = &v28[v51];
    __dst = &v27[v51];
    uint64_t v52 = type metadata accessor for URL();
    uint64_t v53 = *(void *)(v52 - 8);
    uint64_t v54 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v54(v99, 1, v52))
    {
      uint64_t v55 = sub_100007764(&qword_100720A68);
      memcpy(__dst, v99, *(void *)(*(void *)(v55 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v53 + 16))(__dst, v99, v52);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(__dst, 0, 1, v52);
    }
    a2 = v104;
    uint64_t v88 = v29[11];
    uint64_t v89 = &v27[v88];
    uint64_t v90 = &v28[v88];
    *(void *)uint64_t v89 = *(void *)v90;
    *((void *)v89 + 1) = *((void *)v90 + 1);
    uint64_t v91 = (void (*)(char *, void, uint64_t, int *))__src[7];
    swift_bridgeObjectRetain();
    v91(v27, 0, 1, v29);
    goto LABEL_33;
  }
LABEL_19:
  uint64_t v56 = sub_100007764(&qword_100720AF8);
  memcpy(v27, v28, *(void *)(*(void *)(v56 - 8) + 64));
LABEL_34:
  uint64_t v95 = a3;
  uint64_t v96 = a3[8];
  uint64_t v97 = *(void *)&a2[v96];
  swift_errorRetain();
  *(void *)&a1[v96] = v97;
  swift_errorRelease();
  a1[v95[9]] = a2[v95[9]];
  sub_10000A128((uint64_t *)&a1[v95[10]], (uint64_t *)&a2[v95[10]]);
  return a1;
}

char *sub_10004BC34(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DigitalPresentmentCallingClientConfig();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_100007764(&qword_100720AD8);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    uint64_t v9 = type metadata accessor for AuditToken();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
    a1[*(int *)(v6 + 20)] = a2[*(int *)(v6 + 20)];
    uint64_t v10 = *(int *)(v6 + 24);
    uint64_t v11 = &a1[v10];
    uint64_t v12 = &a2[v10];
    *((void *)v11 + 2) = *((void *)v12 + 2);
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v13 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = type metadata accessor for IdentityDocumentDescriptor();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = sub_100007764(&qword_100720AD0);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v14, v15, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  uint64_t v19 = a3[7];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v22 = (int *)type metadata accessor for ValidatedDigitalPresentmentRequest();
  uint64_t v23 = *((void *)v22 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = sub_100007764(&qword_100720AF8);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    uint64_t v25 = type metadata accessor for ISO18013KnownDocTypes();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 32))(v20, v21, v25);
    *(void *)&v20[v22[5]] = *(void *)&v21[v22[5]];
    uint64_t v26 = v22[6];
    uint64_t v27 = &v20[v26];
    uint64_t v28 = &v21[v26];
    uint64_t v29 = type metadata accessor for Locale.Region();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32))(v27, v28, v29);
    *(_OWORD *)&v20[v22[7]] = *(_OWORD *)&v21[v22[7]];
    *(_OWORD *)&v20[v22[8]] = *(_OWORD *)&v21[v22[8]];
    *(_OWORD *)&v20[v22[9]] = *(_OWORD *)&v21[v22[9]];
    uint64_t v30 = v22[10];
    __dst = &v20[v30];
    uint64_t v31 = &v21[v30];
    uint64_t v32 = type metadata accessor for URL();
    uint64_t v33 = *(void *)(v32 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
    {
      uint64_t v34 = sub_100007764(&qword_100720A68);
      memcpy(__dst, v31, *(void *)(*(void *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 32))(__dst, v31, v32);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(__dst, 0, 1, v32);
    }
    *(_OWORD *)&v20[v22[11]] = *(_OWORD *)&v21[v22[11]];
    (*(void (**)(char *, void, uint64_t, int *))(v23 + 56))(v20, 0, 1, v22);
  }
  uint64_t v35 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  a1[v35] = a2[v35];
  uint64_t v36 = a3[10];
  uint64_t v37 = &a1[v36];
  uint64_t v38 = &a2[v36];
  long long v39 = *((_OWORD *)v38 + 1);
  *(_OWORD *)uint64_t v37 = *(_OWORD *)v38;
  *((_OWORD *)v37 + 1) = v39;
  *((void *)v37 + 4) = *((void *)v38 + 4);
  return a1;
}

unsigned char *sub_10004C124(unsigned char *a1, unsigned char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DigitalPresentmentCallingClientConfig();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      uint64_t v11 = type metadata accessor for AuditToken();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
      a1[*(int *)(v6 + 20)] = a2[*(int *)(v6 + 20)];
      uint64_t v12 = *(int *)(v6 + 24);
      uint64_t v13 = &a1[v12];
      uint64_t v14 = &a2[v12];
      *((void *)v13 + 2) = *((void *)v14 + 2);
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    sub_100048D0C((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for DigitalPresentmentCallingClientConfig);
LABEL_6:
    uint64_t v15 = sub_100007764(&qword_100720AD8);
    memcpy(a1, a2, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v44 = type metadata accessor for AuditToken();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v44 - 8) + 40))(a1, a2, v44);
  a1[*(int *)(v6 + 20)] = a2[*(int *)(v6 + 20)];
  uint64_t v45 = *(int *)(v6 + 24);
  uint64_t v46 = &a1[v45];
  uint64_t v47 = &a2[v45];
  *(void *)&a1[v45] = *(void *)&a2[v45];
  swift_bridgeObjectRelease();
  *((void *)v46 + 1) = *((void *)v47 + 1);
  swift_bridgeObjectRelease();
  *((void *)v46 + 2) = *((void *)v47 + 2);
  swift_bridgeObjectRelease();
LABEL_7:
  uint64_t v16 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  uint64_t v19 = type metadata accessor for IdentityDocumentDescriptor();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1, v19);
  int v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
LABEL_12:
    uint64_t v24 = sub_100007764(&qword_100720AD0);
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 40))(v17, v18, v19);
LABEL_13:
  uint64_t v25 = a3[7];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  uint64_t v28 = (int *)type metadata accessor for ValidatedDigitalPresentmentRequest();
  uint64_t v29 = *((void *)v28 - 1);
  uint64_t v30 = *(uint64_t (**)(char *, uint64_t, int *))(v29 + 48);
  int v31 = v30(v26, 1, v28);
  int v32 = v30(v27, 1, v28);
  if (!v31)
  {
    if (v32)
    {
      sub_100048D0C((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for ValidatedDigitalPresentmentRequest);
      goto LABEL_19;
    }
    uint64_t v48 = type metadata accessor for ISO18013KnownDocTypes();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 40))(v26, v27, v48);
    *(void *)&v26[v28[5]] = *(void *)&v27[v28[5]];
    swift_bridgeObjectRelease();
    uint64_t v49 = v28[6];
    uint64_t v50 = &v26[v49];
    uint64_t v51 = &v27[v49];
    uint64_t v52 = type metadata accessor for Locale.Region();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 40))(v50, v51, v52);
    uint64_t v53 = v28[7];
    uint64_t v54 = *(void *)&v26[v53];
    unint64_t v55 = *(void *)&v26[v53 + 8];
    *(_OWORD *)&v26[v53] = *(_OWORD *)&v27[v53];
    sub_10000C5F4(v54, v55);
    uint64_t v56 = v28[8];
    uint64_t v57 = &v26[v56];
    uint64_t v58 = &v27[v56];
    uint64_t v60 = *(void *)v58;
    uint64_t v59 = *((void *)v58 + 1);
    *(void *)uint64_t v57 = v60;
    *((void *)v57 + 1) = v59;
    swift_bridgeObjectRelease();
    uint64_t v61 = v28[9];
    uint64_t v62 = &v26[v61];
    uint64_t v63 = &v27[v61];
    uint64_t v65 = *(void *)v63;
    uint64_t v64 = *((void *)v63 + 1);
    *(void *)uint64_t v62 = v65;
    *((void *)v62 + 1) = v64;
    swift_bridgeObjectRelease();
    uint64_t v66 = v28[10];
    uint64_t v67 = &v26[v66];
    __dsta = &v27[v66];
    uint64_t v68 = type metadata accessor for URL();
    uint64_t v83 = *(void *)(v68 - 8);
    uint64_t v84 = v67;
    uint64_t v69 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v83 + 48);
    LODWORD(v67) = v69(v67, 1, v68);
    int v70 = v69(__dsta, 1, v68);
    if (v67)
    {
      if (!v70)
      {
        (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v84, __dsta, v68);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v83 + 56))(v84, 0, 1, v68);
        goto LABEL_32;
      }
      size_t v71 = *(void *)(*(void *)(sub_100007764(&qword_100720A68) - 8) + 64);
      unint64_t v72 = v84;
    }
    else
    {
      if (!v70)
      {
        (*(void (**)(char *, char *, uint64_t))(v83 + 40))(v84, __dsta, v68);
        goto LABEL_32;
      }
      (*(void (**)(char *, uint64_t))(v83 + 8))(v84, v68);
      size_t v71 = *(void *)(*(void *)(sub_100007764(&qword_100720A68) - 8) + 64);
      unint64_t v72 = v84;
    }
    memcpy(v72, __dsta, v71);
LABEL_32:
    uint64_t v73 = v28[11];
    unsigned int v74 = &v26[v73];
    uint64_t v75 = &v27[v73];
    uint64_t v77 = *(void *)v75;
    uint64_t v76 = *((void *)v75 + 1);
    *(void *)unsigned int v74 = v77;
    *((void *)v74 + 1) = v76;
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
  if (v32)
  {
LABEL_19:
    uint64_t v43 = sub_100007764(&qword_100720AF8);
    memcpy(v26, v27, *(void *)(*(void *)(v43 - 8) + 64));
    goto LABEL_33;
  }
  uint64_t v33 = type metadata accessor for ISO18013KnownDocTypes();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 32))(v26, v27, v33);
  *(void *)&v26[v28[5]] = *(void *)&v27[v28[5]];
  uint64_t v34 = v28[6];
  uint64_t v35 = &v26[v34];
  uint64_t v36 = &v27[v34];
  uint64_t v37 = type metadata accessor for Locale.Region();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32))(v35, v36, v37);
  *(_OWORD *)&v26[v28[7]] = *(_OWORD *)&v27[v28[7]];
  *(_OWORD *)&v26[v28[8]] = *(_OWORD *)&v27[v28[8]];
  *(_OWORD *)&v26[v28[9]] = *(_OWORD *)&v27[v28[9]];
  uint64_t v38 = v28[10];
  __dst = &v26[v38];
  long long v39 = &v27[v38];
  uint64_t v40 = type metadata accessor for URL();
  uint64_t v41 = *(void *)(v40 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
  {
    uint64_t v42 = sub_100007764(&qword_100720A68);
    memcpy(__dst, v39, *(void *)(*(void *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v41 + 32))(__dst, v39, v40);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(__dst, 0, 1, v40);
  }
  *(_OWORD *)&v26[v28[11]] = *(_OWORD *)&v27[v28[11]];
  (*(void (**)(char *, void, uint64_t, int *))(v29 + 56))(v26, 0, 1, v28);
LABEL_33:
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_errorRelease();
  uint64_t v78 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  uint64_t v79 = &a1[v78];
  unint64_t v80 = &a2[v78];
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&a1[v78]);
  long long v81 = *((_OWORD *)v80 + 1);
  *(_OWORD *)uint64_t v79 = *(_OWORD *)v80;
  *((_OWORD *)v79 + 1) = v81;
  *((void *)v79 + 4) = *((void *)v80 + 4);
  return a1;
}

uint64_t sub_10004C9F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004CA0C);
}

uint64_t sub_10004CA0C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_100007764(&qword_100720AD8);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_8:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_100007764(&qword_100720AD0);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[6];
LABEL_7:
    uint64_t v10 = a1 + v13;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_8;
  }
  uint64_t v14 = sub_100007764(&qword_100720AF8);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[7];
    goto LABEL_7;
  }
  unint64_t v16 = *(void *)(a1 + a3[10] + 24);
  if (v16 >= 0xFFFFFFFF) {
    LODWORD(v16) = -1;
  }
  return (v16 + 1);
}

uint64_t sub_10004CB7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004CB90);
}

uint64_t sub_10004CB90(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_100007764(&qword_100720AD8);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = sub_100007764(&qword_100720AD0);
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[6];
    }
    else
    {
      uint64_t result = sub_100007764(&qword_100720AF8);
      if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
      {
        *(void *)(a1 + a4[10] + 24) = (a2 - 1);
        return result;
      }
      uint64_t v10 = result;
      uint64_t v14 = *(void *)(result - 8);
      uint64_t v15 = a4[7];
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_10004CCFC()
{
  sub_10004CE70(319, (unint64_t *)&unk_100720B90, (void (*)(uint64_t))type metadata accessor for DigitalPresentmentCallingClientConfig);
  if (v0 <= 0x3F)
  {
    sub_10004CE70(319, &qword_100720B88, (void (*)(uint64_t))&type metadata accessor for IdentityDocumentDescriptor);
    if (v1 <= 0x3F)
    {
      sub_10004CE70(319, (unint64_t *)&unk_100720C40, (void (*)(uint64_t))type metadata accessor for ValidatedDigitalPresentmentRequest);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_10004CE70(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void destroy for IdentityWatchProvisioningProvider(uint64_t *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v2 = a1[13];
  if (v2 >> 60 != 15) {
    sub_10000C5F4(a1[12], v2);
  }
  unint64_t v3 = a1[15];
  if (v3 >> 60 != 15) {
    sub_10000C5F4(a1[14], v3);
  }
  unint64_t v4 = (void *)a1[16];
}

uint64_t initializeWithCopy for IdentityWatchProvisioningProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v9 = (uint64_t *)(a2 + 96);
  unint64_t v10 = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)v9;
  }
  else
  {
    uint64_t v11 = *v9;
    sub_10002CEB0(*v9, v10);
    *(void *)(a1 + 96) = v11;
    *(void *)(a1 + 104) = v10;
  }
  uint64_t v12 = (uint64_t *)(a2 + 112);
  unint64_t v13 = *(void *)(a2 + 120);
  if (v13 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 112) = *(_OWORD *)v12;
  }
  else
  {
    uint64_t v14 = *v12;
    sub_10002CEB0(*v12, *(void *)(a2 + 120));
    *(void *)(a1 + 112) = v14;
    *(void *)(a1 + 120) = v13;
  }
  uint64_t v15 = *(void **)(a2 + 128);
  *(void *)(a1 + 128) = v15;
  id v16 = v15;
  return a1;
}

uint64_t assignWithCopy for IdentityWatchProvisioningProvider(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = v4;
  uint64_t v5 = (uint64_t *)(a2 + 96);
  unint64_t v6 = *(void *)(a2 + 104);
  if (*(void *)(a1 + 104) >> 60 == 15)
  {
    if (v6 >> 60 != 15)
    {
      uint64_t v7 = *v5;
      sub_10002CEB0(*v5, *(void *)(a2 + 104));
      *(void *)(a1 + 96) = v7;
      *(void *)(a1 + 104) = v6;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v6 >> 60 == 15)
  {
    sub_10004D25C(a1 + 96);
LABEL_6:
    *(_OWORD *)(a1 + 96) = *(_OWORD *)v5;
    goto LABEL_8;
  }
  uint64_t v8 = *v5;
  sub_10002CEB0(*v5, *(void *)(a2 + 104));
  uint64_t v9 = *(void *)(a1 + 96);
  unint64_t v10 = *(void *)(a1 + 104);
  *(void *)(a1 + 96) = v8;
  *(void *)(a1 + 104) = v6;
  sub_10000C5F4(v9, v10);
LABEL_8:
  uint64_t v11 = (uint64_t *)(a2 + 112);
  unint64_t v12 = *(void *)(a2 + 120);
  if (*(void *)(a1 + 120) >> 60 != 15)
  {
    if (v12 >> 60 != 15)
    {
      uint64_t v14 = *v11;
      sub_10002CEB0(*v11, *(void *)(a2 + 120));
      uint64_t v15 = *(void *)(a1 + 112);
      unint64_t v16 = *(void *)(a1 + 120);
      *(void *)(a1 + 112) = v14;
      *(void *)(a1 + 120) = v12;
      sub_10000C5F4(v15, v16);
      goto LABEL_15;
    }
    sub_10004D25C(a1 + 112);
    goto LABEL_13;
  }
  if (v12 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)(a1 + 112) = *(_OWORD *)v11;
    goto LABEL_15;
  }
  uint64_t v13 = *v11;
  sub_10002CEB0(*v11, *(void *)(a2 + 120));
  *(void *)(a1 + 112) = v13;
  *(void *)(a1 + 120) = v12;
LABEL_15:
  uint64_t v17 = *(void **)(a2 + 128);
  uint64_t v18 = *(void **)(a1 + 128);
  *(void *)(a1 + 128) = v17;
  id v19 = v17;

  return a1;
}

uint64_t sub_10004D25C(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for IdentityWatchProvisioningProvider(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for IdentityWatchProvisioningProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  uint64_t v9 = (_OWORD *)(a2 + 96);
  unint64_t v10 = *(void *)(a1 + 104);
  if (v10 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v11 = *(void *)(a2 + 104);
  if (v11 >> 60 == 15)
  {
    sub_10004D25C(a1 + 96);
LABEL_4:
    *(_OWORD *)(a1 + 96) = *v9;
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = *(void *)v9;
  *(void *)(a1 + 104) = v11;
  sub_10000C5F4(v12, v10);
LABEL_6:
  uint64_t v13 = (void *)(a2 + 112);
  unint64_t v14 = *(void *)(a1 + 120);
  if (v14 >> 60 != 15)
  {
    unint64_t v15 = *(void *)(a2 + 120);
    if (v15 >> 60 != 15)
    {
      uint64_t v16 = *(void *)(a1 + 112);
      *(void *)(a1 + 112) = *v13;
      *(void *)(a1 + 120) = v15;
      sub_10000C5F4(v16, v14);
      goto LABEL_11;
    }
    sub_10004D25C(a1 + 112);
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)v13;
LABEL_11:
  uint64_t v17 = *(void **)(a1 + 128);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);

  return a1;
}

uint64_t getEnumTagSinglePayload for IdentityWatchProvisioningProvider(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 136)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IdentityWatchProvisioningProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 136) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 136) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IdentityWatchProvisioningProvider()
{
  return &type metadata for IdentityWatchProvisioningProvider;
}

uint64_t sub_10004D4D4()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10004D504()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10004D534()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10004D564()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10004D594()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10004D5C4()
{
  return 2;
}

uint64_t sub_10004D5CC()
{
  uint64_t v1 = *(void *)(v0 + 112);
  sub_1000338D4(v1, *(void *)(v0 + 120));
  return v1;
}

uint64_t sub_10004D600()
{
  uint64_t result = sub_10014D4E0((uint64_t)&off_1006F1218);
  qword_100720C88 = result;
  unk_100720C90 = v1;
  return result;
}

uint64_t sub_10004D62C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = [self standardUserDefaults];
  v7._object = (void *)0x8000000100631990;
  v7._uint64_t countAndFlagsBits = 0xD000000000000033;
  Swift::Bool v8 = NSUserDefaults.internalBool(forKey:)(v7);

  if (v8)
  {
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v21 = v1;
      unint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      v23[0] = v20;
      *(_DWORD *)unint64_t v11 = 136315138;
      type metadata accessor for SecCertificate(0);
      Array<A>.base64EncodedStrings()();
      uint64_t v18 = v11 + 4;
      uint64_t v12 = Array.description.getter();
      uint64_t v19 = v2;
      uint64_t v13 = v12;
      unint64_t v15 = v14;
      swift_bridgeObjectRelease();
      uint64_t v22 = sub_100110D58(v13, v15, v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v1 = v21;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "ISO18013IssuerAuthenticator trusting IACA roots: %s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v19);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
  }
  uint64_t v16 = v1 + OBJC_IVAR____TtC8coreidvd27ISO18013IssuerAuthenticator_oidVerifier;
  swift_beginAccess();
  sub_1000279F4(v16, *(void *)(v16 + 24));
  dispatch thunk of OIDVerifying.setTrustedRoots(_:)();
  return swift_endAccess();
}

uint64_t sub_10004D92C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  uint64_t v5 = sub_100007764(&qword_100720DF0);
  v4[8] = v5;
  v4[9] = *(void *)(v5 - 8);
  v4[10] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v4[11] = v6;
  _OWORD v4[12] = *(void *)(v6 - 8);
  v4[13] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo();
  v4[14] = v7;
  v4[15] = *(void *)(v7 - 8);
  v4[16] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ISO18013MobileSecurityObject();
  v4[17] = v8;
  v4[18] = *(void *)(v8 - 8);
  v4[19] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for ISO18013Response.IssuerSigned();
  v4[20] = v9;
  v4[21] = *(void *)(v9 - 8);
  v4[22] = swift_task_alloc();
  v4[23] = swift_task_alloc();
  v4[24] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for COSE_Sign1();
  v4[25] = v10;
  v4[26] = *(void *)(v10 - 8);
  v4[27] = swift_task_alloc();
  v4[28] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for ISO18013Response.Document();
  v4[29] = v11;
  v4[30] = *(void *)(v11 - 8);
  v4[31] = swift_task_alloc();
  v4[32] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Logger();
  v4[33] = v12;
  v4[34] = *(void *)(v12 - 8);
  v4[35] = swift_task_alloc();
  v4[36] = swift_task_alloc();
  v4[37] = swift_task_alloc();
  sub_100007764(&qword_100720E00);
  v4[38] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for ISO18013KnownDocTypes();
  v4[39] = v13;
  v4[40] = *(void *)(v13 - 8);
  v4[41] = swift_task_alloc();
  return _swift_task_switch(sub_10004DD5C, v3, 0);
}

uint64_t sub_10004DD5C()
{
  unint64_t v80 = v0;
  uint64_t v1 = v0[39];
  uint64_t v2 = v0[40];
  uint64_t v3 = v0[38];
  ISO18013Response.Document.docType.getter();
  ISO18013KnownDocTypes.init(rawValue:)();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    uint64_t v5 = v0[12];
    uint64_t v4 = v0[13];
    uint64_t v6 = v0[11];
    sub_10000C6CC(v0[38], &qword_100720E00);
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    v79[0] = 0xD00000000000001ALL;
    v79[1] = 0x80000001006310F0;
    v7._uint64_t countAndFlagsBits = ISO18013Response.Document.docType.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for DIPError.Code.documentReaderUnknownDocumentType(_:), v6);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100054100((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
LABEL_3:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
  uint64_t v10 = v0[32];
  uint64_t v11 = v0[29];
  uint64_t v12 = v0[30];
  uint64_t v13 = v0[5];
  (*(void (**)(void, void, void))(v0[40] + 32))(v0[41], v0[38], v0[39]);
  defaultLogger()();
  unint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  v0[42] = v14;
  v0[43] = (v12 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v14(v10, v13, v11);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v18 = v0[37];
  uint64_t v20 = v0[33];
  uint64_t v19 = v0[34];
  uint64_t v21 = v0[32];
  uint64_t v22 = v0[30];
  if (v17)
  {
    uint64_t v77 = v0[29];
    log = v15;
    int v23 = (uint8_t *)swift_slowAlloc();
    v79[0] = swift_slowAlloc();
    *(_DWORD *)int v23 = 136315138;
    uint64_t v24 = ISO18013Response.Document.docType.getter();
    v0[3] = sub_100110D58(v24, v25, v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    v26(v21, v77);
    _os_log_impl((void *)&_mh_execute_header, log, v16, "ISO18013IssuerAuthenticator begins validating document with type %s", v23, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v27(v18, v20);
  }
  else
  {
    uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    v26(v0[32], v0[29]);

    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v27(v18, v20);
  }
  v0[44] = v27;
  v0[45] = v26;
  uint64_t v28 = v0[24];
  uint64_t v29 = v0[20];
  uint64_t v30 = v0[21];
  ISO18013Response.Document.issuerSigned.getter();
  ISO18013Response.IssuerSigned.issuerAuth.getter();
  int v31 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
  v0[46] = v31;
  v0[47] = (v30 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v31(v28, v29);
  uint64_t v32 = COSE_Sign1.x509Chain.getter();
  v0[48] = v32;
  if (v32)
  {
    uint64_t v33 = v32;
    uint64_t v34 = (void *)swift_task_alloc();
    v0[49] = v34;
    *uint64_t v34 = v0;
    v34[1] = sub_10004E8D8;
    uint64_t v35 = v0[41];
    uint64_t v36 = v0[6];
    return sub_10004FF24(v33, v36, v35);
  }
  else
  {
    uint64_t v37 = v0[28];
    uint64_t v39 = v0[25];
    uint64_t v38 = v0[26];
    (*(void (**)(void, void, void))(v0[12] + 104))(v0[13], enum case for DIPError.Code.documentReaderMissingIssuerCertificateChain(_:), v0[11]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100054100((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
    v40(v37, v39);
    id v41 = [self standardUserDefaults];
    v42._uint64_t countAndFlagsBits = 0xD000000000000036;
    v42._object = (void *)0x80000001006314C0;
    Swift::Bool v43 = NSUserDefaults.internalBool(forKey:)(v42);

    if (!v43)
    {
      uint64_t v58 = v0[40];
      uint64_t v74 = v0[41];
      uint64_t v76 = v0[39];
      uint64_t v59 = v0[12];
      uint64_t v60 = v0[13];
      uint64_t v73 = v0[11];
      sub_100007764((uint64_t *)&unk_1007225C0);
      uint64_t v61 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v62 = (*(unsigned __int8 *)(*(void *)v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v61 + 80);
      uint64_t v63 = swift_allocObject();
      *(_OWORD *)(v63 + 16) = xmmword_100610730;
      unint64_t v64 = v63 + v62;
      uint64_t v65 = (void *)(v64 + v61[14]);
      uint64_t v66 = enum case for DIPError.PropertyKey.issuerCertificateChain(_:);
      uint64_t v67 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 104))(v64, v66, v67);
      v65[3] = sub_100007764((uint64_t *)&unk_100723650);
      *uint64_t v65 = _swiftEmptyArrayStorage;
      swift_errorRetain();
      sub_10015C504(v63);
      (*(void (**)(uint64_t, void, uint64_t))(v59 + 104))(v60, enum case for DIPError.Code.internalError(_:), v73);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      swift_errorRelease();
      (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v74, v76);
      goto LABEL_3;
    }
    unint64_t v72 = (void (*)(uint64_t, uint64_t))v0[46];
    uint64_t v44 = (void (*)(uint64_t, uint64_t))v0[44];
    uint64_t v45 = v0[35];
    uint64_t v46 = v0[33];
    uint64_t v47 = v0[27];
    uint64_t v75 = v0[25];
    uint64_t v48 = v0[22];
    uint64_t v49 = v0[20];
    defaultLogger()();
    DIPLogError(_:message:log:)();
    v44(v45, v46);
    ISO18013Response.Document.issuerSigned.getter();
    ISO18013Response.IssuerSigned.issuerAuth.getter();
    v72(v48, v49);
    uint64_t v50 = COSE_Sign1.payload.getter();
    unint64_t v52 = v51;
    v40(v47, v75);
    if (v52 >> 60 == 15) {
      uint64_t v53 = 0;
    }
    else {
      uint64_t v53 = v50;
    }
    if (v52 >> 60 == 15) {
      unint64_t v54 = 0xC000000000000000;
    }
    else {
      unint64_t v54 = v52;
    }
    sub_100054148();
    dispatch thunk of CBORDecoder.decode<A>(_:from:)();
    uint64_t v55 = v0[40];
    uint64_t v56 = v0[41];
    uint64_t v57 = v0[39];
    uint64_t v69 = v0[9];
    uint64_t v68 = v0[10];
    uint64_t v70 = v0[8];
    CBOREncodedCBOR.value.getter();
    sub_10000C5F4(v53, v54);
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v68, v70);
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v56, v57);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    size_t v71 = (uint64_t (*)(void *))v0[1];
    return v71(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_10004E8D8(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 400) = a1;
  *(void *)(v4 + 408) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 56);
  swift_bridgeObjectRelease();
  if (v1) {
    uint64_t v6 = sub_10004F884;
  }
  else {
    uint64_t v6 = sub_10004EA28;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_10004EA28()
{
  uint64_t v99 = v0;
  unint64_t v1 = v0[50];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v2 = result;
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
  }
  if (v2)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        return result;
      }
      id v4 = *(id *)(v0[50] + 32);
    }
    uint64_t v5 = v0[51];
    unint64_t v6 = v0[28];
    uint64_t v7 = v0[19];
    swift_bridgeObjectRelease();
    sub_1000524F8(v6, v7);
    if (v5)
    {
      uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v0[26] + 8);
      v8(v0[28], v0[25]);

      goto LABEL_16;
    }
    uint64_t v95 = v4;
    uint64_t v15 = (void (*)(uint64_t, uint64_t))v0[46];
    uint64_t v16 = v0[23];
    uint64_t v18 = v0[19];
    uint64_t v17 = v0[20];
    ISO18013Response.Document.issuerSigned.getter();
    uint64_t v19 = ISO18013Response.IssuerSigned.namespaces.getter();
    v15(v16, v17);
    sub_100054A1C(v19, v18);
    swift_bridgeObjectRelease();
    uint64_t v20 = ISO18013Response.Document.docType.getter();
    uint64_t v22 = v21;
    if (v20 == ISO18013MobileSecurityObject.docType.getter() && v22 == v23)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_14;
    }
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v24)
    {
LABEL_14:
      uint64_t v25 = v0[16];
      ISO18013MobileSecurityObject.validityInfo.getter();
      sub_100052EF4(v25, (unint64_t)v95);
      uint64_t v26 = v0[19];
      uint64_t v27 = v0[5];
      (*(void (**)(void, void))(v0[15] + 8))(v0[16], v0[14]);
      sub_100056388(v27, v26, (uint64_t)v95);
      uint64_t v66 = (void (*)(uint64_t, uint64_t, uint64_t))v0[42];
      uint64_t v67 = v0[31];
      uint64_t v68 = v0[29];
      uint64_t v69 = v0[5];
      defaultLogger()();
      v66(v67, v69, v68);
      uint64_t v70 = Logger.logObject.getter();
      os_log_type_t type = static os_log_type_t.debug.getter();
      BOOL v71 = os_log_type_enabled(v70, type);
      unint64_t v72 = (void (*)(uint64_t, uint64_t))v0[44];
      unint64_t v87 = (void (*)(uint64_t, uint64_t))v0[45];
      uint64_t v73 = v0[40];
      uint64_t v74 = v0[41];
      uint64_t v75 = v0[39];
      uint64_t v94 = v0[36];
      uint64_t v91 = v0[33];
      uint64_t v76 = v0[31];
      uint64_t v77 = v0[28];
      uint64_t v85 = v0[29];
      uint64_t v78 = v0[26];
      uint64_t v97 = v0[25];
      if (v71)
      {
        uint64_t v82 = v0[28];
        uint64_t v79 = (uint8_t *)swift_slowAlloc();
        uint64_t v98 = swift_slowAlloc();
        *(_DWORD *)uint64_t v79 = 136315138;
        uint64_t v80 = ISO18013Response.Document.docType.getter();
        v0[2] = sub_100110D58(v80, v81, &v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v87(v76, v85);
        _os_log_impl((void *)&_mh_execute_header, v70, type, "ISO18013IssuerAuthenticator successfully validated document with type %s", v79, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v72(v94, v91);
        (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v82, v97);
        (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v74, v75);
      }
      else
      {

        v87(v76, v85);
        v72(v94, v91);
        (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v77, v97);
        (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v74, v75);
      }
      (*(void (**)(void, void, void))(v0[18] + 32))(v0[4], v0[19], v0[17]);
      uint64_t v96 = v0[50];
LABEL_27:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v65 = (uint64_t (*)(uint64_t))v0[1];
      return v65(v96);
    }
    uint64_t v92 = v0[28];
    uint64_t v28 = v0[26];
    uint64_t v89 = v0[25];
    uint64_t v29 = v0[18];
    uint64_t v30 = v0[19];
    uint64_t v31 = v0[17];
    (*(void (**)(void, void, void))(v0[12] + 104))(v0[13], enum case for DIPError.Code.documentReaderMismatchedDocType(_:), v0[11]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100054100((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, v31);
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v8(v92, v89);
  }
  else
  {
    uint64_t v9 = v0[28];
    uint64_t v10 = v0[25];
    uint64_t v11 = v0[26];
    uint64_t v13 = v0[12];
    uint64_t v12 = v0[13];
    uint64_t v14 = v0[11];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v13 + 104))(v12, enum case for DIPError.Code.documentReaderMissingIssuerCertificateChain(_:), v14);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100054100((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v8(v9, v10);
  }
LABEL_16:
  uint64_t v32 = v0[50];
  id v33 = [self standardUserDefaults];
  v34._uint64_t countAndFlagsBits = 0xD000000000000036;
  v34._object = (void *)0x80000001006314C0;
  Swift::Bool v35 = NSUserDefaults.internalBool(forKey:)(v34);

  if (v35)
  {
    uint64_t v96 = v32;
    os_log_type_t typea = (void (*)(uint64_t, uint64_t))v0[46];
    uint64_t v88 = v8;
    uint64_t v36 = (void (*)(uint64_t, uint64_t))v0[44];
    uint64_t v37 = v0[35];
    uint64_t v38 = v0[33];
    uint64_t v39 = v0[27];
    uint64_t v86 = v0[25];
    uint64_t v40 = v0[22];
    uint64_t v41 = v0[20];
    defaultLogger()();
    DIPLogError(_:message:log:)();
    v36(v37, v38);
    ISO18013Response.Document.issuerSigned.getter();
    ISO18013Response.IssuerSigned.issuerAuth.getter();
    typea(v40, v41);
    uint64_t v42 = COSE_Sign1.payload.getter();
    unint64_t v44 = v43;
    v88(v39, v86);
    if (v44 >> 60 == 15) {
      uint64_t v45 = 0;
    }
    else {
      uint64_t v45 = v42;
    }
    if (v44 >> 60 == 15) {
      unint64_t v46 = 0xC000000000000000;
    }
    else {
      unint64_t v46 = v44;
    }
    sub_100054148();
    dispatch thunk of CBORDecoder.decode<A>(_:from:)();
    uint64_t v47 = v0[40];
    uint64_t v48 = v0[41];
    uint64_t v49 = v0[39];
    uint64_t v63 = v0[9];
    uint64_t v62 = v0[10];
    uint64_t v64 = v0[8];
    CBOREncodedCBOR.value.getter();
    sub_10000C5F4(v45, v46);
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v62, v64);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v48, v49);
    goto LABEL_27;
  }
  uint64_t v50 = v0[40];
  uint64_t v93 = v0[41];
  uint64_t v90 = v0[39];
  uint64_t v52 = v0[12];
  uint64_t v51 = v0[13];
  uint64_t v53 = v0[11];
  sub_100007764((uint64_t *)&unk_1007225C0);
  unint64_t v54 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  unint64_t v55 = (*(unsigned __int8 *)(*(void *)v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v54 + 80);
  uint64_t v56 = swift_allocObject();
  *(_OWORD *)(v56 + 16) = xmmword_100610730;
  unint64_t v57 = v56 + v55;
  uint64_t v58 = (void *)(v57 + v54[14]);
  uint64_t v59 = enum case for DIPError.PropertyKey.issuerCertificateChain(_:);
  uint64_t v60 = type metadata accessor for DIPError.PropertyKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 104))(v57, v59, v60);
  v58[3] = sub_100007764((uint64_t *)&unk_100723650);
  *uint64_t v58 = v32;
  swift_errorRetain();
  sub_10015C504(v56);
  (*(void (**)(uint64_t, void, uint64_t))(v52 + 104))(v51, enum case for DIPError.Code.internalError(_:), v53);
  type metadata accessor for DIPError();
  sub_100054100((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v93, v90);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v61 = (uint64_t (*)(void))v0[1];
  return v61();
}

uint64_t sub_10004F884()
{
  unint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0[26] + 8);
  v1(v0[28], v0[25]);
  id v2 = [self standardUserDefaults];
  v3._uint64_t countAndFlagsBits = 0xD000000000000036;
  v3._object = (void *)0x80000001006314C0;
  Swift::Bool v4 = NSUserDefaults.internalBool(forKey:)(v3);

  if (v4)
  {
    uint64_t v37 = (void (*)(uint64_t, uint64_t))v0[46];
    uint64_t v5 = (void (*)(uint64_t, uint64_t))v0[44];
    uint64_t v6 = v0[35];
    uint64_t v7 = v0[33];
    uint64_t v8 = v0[27];
    uint64_t v38 = v0[25];
    uint64_t v9 = v0[22];
    uint64_t v10 = v0[20];
    defaultLogger()();
    DIPLogError(_:message:log:)();
    v5(v6, v7);
    ISO18013Response.Document.issuerSigned.getter();
    ISO18013Response.IssuerSigned.issuerAuth.getter();
    v37(v9, v10);
    uint64_t v11 = COSE_Sign1.payload.getter();
    unint64_t v13 = v12;
    v1(v8, v38);
    if (v13 >> 60 == 15) {
      uint64_t v14 = 0;
    }
    else {
      uint64_t v14 = v11;
    }
    if (v13 >> 60 == 15) {
      unint64_t v15 = 0xC000000000000000;
    }
    else {
      unint64_t v15 = v13;
    }
    sub_100054148();
    dispatch thunk of CBORDecoder.decode<A>(_:from:)();
    uint64_t v16 = v0[40];
    uint64_t v17 = v0[41];
    uint64_t v18 = v0[39];
    uint64_t v34 = v0[9];
    uint64_t v33 = v0[10];
    uint64_t v35 = v0[8];
    CBOREncodedCBOR.value.getter();
    sub_10000C5F4(v14, v15);
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v17, v18);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v36 = (uint64_t (*)(void *))v0[1];
    return v36(_swiftEmptyArrayStorage);
  }
  else
  {
    uint64_t v19 = v0[40];
    uint64_t v39 = v0[41];
    uint64_t v20 = v0[39];
    uint64_t v22 = v0[12];
    uint64_t v21 = v0[13];
    uint64_t v23 = v0[11];
    sub_100007764((uint64_t *)&unk_1007225C0);
    char v24 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v25 = (*(unsigned __int8 *)(*(void *)v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v24 + 80);
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_100610730;
    unint64_t v27 = v26 + v25;
    uint64_t v28 = (void *)(v27 + v24[14]);
    uint64_t v29 = enum case for DIPError.PropertyKey.issuerCertificateChain(_:);
    uint64_t v30 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 104))(v27, v29, v30);
    v28[3] = sub_100007764((uint64_t *)&unk_100723650);
    *uint64_t v28 = _swiftEmptyArrayStorage;
    swift_errorRetain();
    sub_10015C504(v26);
    (*(void (**)(uint64_t, void, uint64_t))(v22 + 104))(v21, enum case for DIPError.Code.internalError(_:), v23);
    type metadata accessor for DIPError();
    sub_100054100((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v39, v20);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v31 = (uint64_t (*)(void))v0[1];
    return v31();
  }
}

uint64_t sub_10004FF24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[20] = a3;
  v4[21] = v3;
  v4[18] = a1;
  v4[19] = a2;
  sub_100007764(&qword_100723600);
  v4[22] = swift_task_alloc();
  v4[23] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[24] = v5;
  v4[25] = *(void *)(v5 - 8);
  v4[26] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ISO18013KnownDocTypes();
  v4[27] = v6;
  v4[28] = *(void *)(v6 - 8);
  v4[29] = swift_task_alloc();
  v4[30] = swift_task_alloc();
  v4[31] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DIPCertUsage();
  v4[32] = v7;
  v4[33] = *(void *)(v7 - 8);
  v4[34] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v4[35] = v8;
  v4[36] = *(void *)(v8 - 8);
  v4[37] = swift_task_alloc();
  v4[38] = swift_task_alloc();
  v4[39] = swift_task_alloc();
  return _swift_task_switch(sub_100050174, v3, 0);
}

uint64_t sub_100050174()
{
  *(void *)(v0 + 128) = _swiftEmptyArrayStorage;
  uint64_t v1 = decodeCertificateChain(fromDER:)();
  uint64_t v15 = *(void *)(v0 + 312);
  uint64_t v16 = *(void *)(v0 + 280);
  uint64_t v17 = *(void *)(v0 + 288);
  uint64_t v18 = *(void *)(v0 + 248);
  uint64_t v19 = *(void *)(v0 + 216);
  uint64_t v20 = *(void *)(v0 + 224);
  uint64_t v21 = *(void *)(v0 + 160);
  *(void *)(v0 + 128) = v1;
  defaultLogger()();
  *(void *)(swift_task_alloc() + 16) = v0 + 128;
  Logger.cryptoParam(_:)();
  swift_task_dealloc();
  uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  *(void *)(v0 + 320) = v22;
  *(void *)(v0 + 328) = (v17 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v22(v15, v16);
  uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
  *(void *)(v0 + 336) = v23;
  *(void *)(v0 + 344) = (v20 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v23(v18, v21, v19);
  char v24 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 88);
  *(void *)(v0 + 352) = v24;
  *(void *)(v0 + 360) = (v20 + 88) & 0xFFFFFFFFFFFFLL | 0xA3B5000000000000;
  int v25 = v24(v18, v19);
  int v26 = enum case for ISO18013KnownDocTypes.iso18013_5_1_mDL(_:);
  *(_DWORD *)(v0 + 400) = enum case for ISO18013KnownDocTypes.iso18013_5_1_mDL(_:);
  if (v25 == v26)
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 264) + 104))(*(void *)(v0 + 272), enum case for DIPCertUsage.iso18013IssuerAuth(_:), *(void *)(v0 + 256));
LABEL_9:
    uint64_t v27 = *(void *)(v0 + 168) + OBJC_IVAR____TtC8coreidvd27ISO18013IssuerAuthenticator_oidVerifier;
    swift_beginAccess();
    sub_100030A10(v27, v0 + 16);
    uint64_t v28 = *(void *)(v0 + 40);
    uint64_t v29 = *(void *)(v0 + 48);
    sub_10000C728((void *)(v0 + 16), v28);
    uint64_t v30 = *(void *)(v0 + 128);
    *(void *)(v0 + 368) = v30;
    swift_bridgeObjectRetain();
    uint64_t v31 = (void *)swift_task_alloc();
    *(void *)(v0 + 376) = v31;
    *uint64_t v31 = v0;
    v31[1] = sub_10005081C;
    uint64_t v32 = *(void *)(v0 + 272);
    return dispatch thunk of OIDVerifying.verifyChain(_:forUsage:)(v30, v32, v28, v29);
  }
  if (v25 == enum case for ISO18013KnownDocTypes.japanNationalIDCard(_:))
  {
    static DIPCertUsage.japanNationalIDCardIssuerAuth.getter();
    goto LABEL_9;
  }
  uint64_t v33 = *(void *)(v0 + 248);
  uint64_t v34 = *(void *)(v0 + 216);
  uint64_t v35 = *(void *)(v0 + 224);
  uint64_t v37 = *(void *)(v0 + 200);
  uint64_t v36 = *(void *)(v0 + 208);
  uint64_t v38 = *(void *)(v0 + 192);
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  v39._uint64_t countAndFlagsBits = ISO18013KnownDocTypes.rawValue.getter();
  String.append(_:)(v39);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void, uint64_t))(v37 + 104))(v36, enum case for DIPError.Code.documentReaderUnknownDocumentType(_:), v38);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100054100((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 192);
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v5 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(*(void *)v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v5 + 80);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_100610730;
  unint64_t v8 = v7 + v6;
  uint64_t v9 = (void *)(v8 + v5[14]);
  uint64_t v10 = enum case for DIPError.PropertyKey.issuerCertificateChain(_:);
  uint64_t v11 = type metadata accessor for DIPError.PropertyKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 104))(v8, v10, v11);
  uint64_t v12 = *(void *)(v0 + 128);
  v9[3] = sub_100007764((uint64_t *)&unk_100723650);
  *uint64_t v9 = v12;
  swift_errorRetain();
  swift_bridgeObjectRetain();
  sub_10015C504(v7);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v3, enum case for DIPError.Code.internalError(_:), v4);
  type metadata accessor for DIPError();
  sub_100054100((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

uint64_t sub_10005081C(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[48] = a1;
  v3[49] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[21];
    uint64_t v5 = sub_100051DD0;
  }
  else
  {
    uint64_t v6 = v3[21];
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_100050944;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_100050944()
{
  uint64_t v137 = v0;
  uint64_t v1 = *(void *)(v0 + 392);
  uint64_t v2 = *(void *)(v0 + 152);
  id v3 = *(id *)(v0 + 384);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 16);
  uint64_t v4 = (void *)SecTrustRef.certificateChain.getter();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 128) = v4;
  unint64_t v5 = swift_bridgeObjectRetain();
  sub_1000541AC(v5, v2);
  uint64_t v6 = *(void **)(v0 + 384);
  if (v1)
  {
    uint64_t v7 = *(void *)(v0 + 264);
    uint64_t v8 = *(void *)(v0 + 272);
    uint64_t v9 = *(void *)(v0 + 256);
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
LABEL_63:
    uint64_t v107 = *(void *)(v0 + 200);
    uint64_t v106 = *(void *)(v0 + 208);
    uint64_t v108 = *(void *)(v0 + 192);
    sub_100007764((uint64_t *)&unk_1007225C0);
    int v109 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v110 = (*(unsigned __int8 *)(*(void *)v109 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v109 + 80);
    uint64_t v111 = swift_allocObject();
    *(_OWORD *)(v111 + 16) = xmmword_100610730;
    unint64_t v112 = v111 + v110;
    uint64_t v113 = (void *)(v112 + v109[14]);
    uint64_t v114 = enum case for DIPError.PropertyKey.issuerCertificateChain(_:);
    uint64_t v115 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v115 - 8) + 104))(v112, v114, v115);
    uint64_t v116 = *(void *)(v0 + 128);
    v113[3] = sub_100007764((uint64_t *)&unk_100723650);
    *uint64_t v113 = v116;
    swift_errorRetain();
    swift_bridgeObjectRetain();
    sub_10015C504(v111);
    (*(void (**)(uint64_t, void, uint64_t))(v107 + 104))(v106, enum case for DIPError.Code.internalError(_:), v108);
    type metadata accessor for DIPError();
    sub_100054100((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v117 = *(uint64_t (**)(void))(v0 + 8);
    return v117();
  }
  swift_bridgeObjectRelease();
  unint64_t v10 = SecTrustRef.certificateChain.getter();
  unint64_t v11 = v10;
  if (!(v10 >> 62))
  {
    if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_5;
    }
LABEL_56:
    uint64_t v102 = *(void **)(v0 + 384);
    uint64_t v4 = v102;
LABEL_61:
    uint64_t v21 = *(void *)(v0 + 264);
    os_log_t log = *(os_log_t *)(v0 + 256);
    uint64_t v134 = *(void *)(v0 + 272);
    uint64_t v104 = *(void *)(v0 + 200);
    uint64_t v103 = *(void *)(v0 + 208);
    uint64_t v105 = *(void *)(v0 + 192);
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t, void, uint64_t))(v104 + 104))(v103, enum case for DIPError.Code.documentReaderMissingIssuerCertificateChain(_:), v105);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100054100((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    goto LABEL_62;
  }
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_56;
  }
LABEL_5:
  if ((v11 & 0xC000000000000001) != 0)
  {
    id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_59;
    }
    id v12 = *(id *)(v11 + 32);
  }
  uint64_t v4 = v12;
  swift_bridgeObjectRelease();
  unint64_t v13 = SecTrustRef.certificateChain.getter();
  unint64_t v11 = v13;
  if (!(v13 >> 62))
  {
    uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v14) {
      goto LABEL_10;
    }
    goto LABEL_60;
  }
LABEL_59:
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  if (!v14)
  {
LABEL_60:

    uint64_t v102 = *(void **)(v0 + 384);
    goto LABEL_61;
  }
LABEL_10:
  BOOL v15 = __OFSUB__(v14, 1);
  unint64_t v16 = v14 - 1;
  if (v15)
  {
    __break(1u);
  }
  else if ((v11 & 0xC000000000000001) == 0)
  {
    if ((v16 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v16 < *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v17 = *(id *)(v11 + 8 * v16 + 32);
      goto LABEL_15;
    }
    __break(1u);
LABEL_70:
    swift_once();
    goto LABEL_41;
  }
  id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_15:
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  object = SecCertificateRef.commonName()().value._object;
  swift_bridgeObjectRelease();
  if (!object)
  {
    uint64_t v20 = *(void **)(v0 + 384);
    uint64_t v21 = *(void *)(v0 + 264);
    os_log_t log = *(os_log_t *)(v0 + 256);
    uint64_t v134 = *(void *)(v0 + 272);
    uint64_t v26 = *(void *)(v0 + 200);
    uint64_t v25 = *(void *)(v0 + 208);
    uint64_t v27 = *(void *)(v0 + 192);

    (*(void (**)(uint64_t, void, uint64_t))(v26 + 104))(v25, enum case for DIPError.Code.documentReaderDocSignerMissingCommonName(_:), v27);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100054100((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    goto LABEL_26;
  }
  if ((SecCertificateRef.keyUsage.getter() & 1) == 0)
  {
    uint64_t v20 = *(void **)(v0 + 384);
    uint64_t v21 = *(void *)(v0 + 264);
    os_log_t log = *(os_log_t *)(v0 + 256);
    uint64_t v134 = *(void *)(v0 + 272);
    uint64_t v23 = *(void *)(v0 + 200);
    uint64_t v22 = *(void *)(v0 + 208);
    uint64_t v24 = *(void *)(v0 + 192);

    (*(void (**)(uint64_t, void, uint64_t))(v23 + 104))(v22, enum case for DIPError.Code.documentReaderDocSignerInvalidKeyUsage(_:), v24);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100054100((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
LABEL_26:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

LABEL_62:
    (*(void (**)(uint64_t, os_log_t))(v21 + 8))(v134, log);
    goto LABEL_63;
  }
  uint64_t v28 = SecCertificateRef.countryName.getter();
  if (!v29)
  {
    uint64_t v20 = *(void **)(v0 + 384);
    uint64_t v21 = *(void *)(v0 + 264);
    os_log_t log = *(os_log_t *)(v0 + 256);
    uint64_t v134 = *(void *)(v0 + 272);
    uint64_t v35 = *(void *)(v0 + 200);
    uint64_t v34 = *(void *)(v0 + 208);
    uint64_t v36 = *(void *)(v0 + 192);

    (*(void (**)(uint64_t, void, uint64_t))(v35 + 104))(v34, enum case for DIPError.Code.documentReaderDocSignerInconsistentWithRoot(_:), v36);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100054100((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    goto LABEL_26;
  }
  uint64_t v30 = v28;
  uint64_t v31 = v29;
  if (String.count.getter() != 2)
  {
    uint64_t v37 = *(void **)(v0 + 384);
    uint64_t v38 = *(void *)(v0 + 264);
    uint64_t v125 = *(void *)(v0 + 256);
    os_log_t logb = *(os_log_t *)(v0 + 272);
    uint64_t v39 = *(void *)(v0 + 200);
    uint64_t v40 = *(void *)(v0 + 208);
    uint64_t v41 = *(void *)(v0 + 192);
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t, void, uint64_t))(v39 + 104))(v40, enum case for DIPError.Code.documentReaderDocSignerInconsistentWithRoot(_:), v41);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100054100((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    (*(void (**)(os_log_t, uint64_t))(v38 + 8))(logb, v125);
    goto LABEL_63;
  }
  uint64_t v32 = SecCertificateRef.countryName.getter();
  if (!v33)
  {
    uint64_t v42 = v18;
    unint64_t v43 = *(void **)(v0 + 384);
    swift_bridgeObjectRelease();
LABEL_36:

    uint64_t v51 = *(void **)(v0 + 384);
    uint64_t v52 = *(void *)(v0 + 264);
    os_log_t logc = *(os_log_t *)(v0 + 256);
    uint64_t v135 = *(void *)(v0 + 272);
    (*(void (**)(void, void, void))(*(void *)(v0 + 200) + 104))(*(void *)(v0 + 208), enum case for DIPError.Code.documentReaderDocSignerInconsistentWithRoot(_:), *(void *)(v0 + 192));
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100054100((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    (*(void (**)(uint64_t, os_log_t))(v52 + 8))(v135, logc);
    goto LABEL_63;
  }
  if (v30 == v32 && v31 == v33)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v44 & 1) == 0)
  {
    uint64_t v42 = v18;
    unint64_t v43 = *(void **)(v0 + 384);
    goto LABEL_36;
  }
LABEL_30:
  int v133 = v18;
  uint64_t v45 = SecCertificateRef.stateOrProvinceName.getter();
  if (!v46) {
    goto LABEL_39;
  }
  uint64_t v47 = v45;
  uint64_t v48 = v46;
  uint64_t v49 = SecCertificateRef.stateOrProvinceName.getter();
  if (!v50)
  {
    uint64_t v53 = *(void **)(v0 + 384);
    swift_bridgeObjectRelease();
LABEL_48:

    unint64_t v87 = *(void **)(v0 + 384);
    uint64_t v89 = *(void *)(v0 + 264);
    uint64_t v88 = *(void *)(v0 + 272);
    os_log_t loge = *(os_log_t *)(v0 + 256);
    (*(void (**)(void, void, void))(*(void *)(v0 + 200) + 104))(*(void *)(v0 + 208), enum case for DIPError.Code.documentReaderDocSignerInconsistentWithRoot(_:), *(void *)(v0 + 192));
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100054100((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    (*(void (**)(uint64_t, os_log_t))(v89 + 8))(v88, loge);
    goto LABEL_63;
  }
  if (v49 == v47 && v50 == v48)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_39;
  }
  char v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v54 & 1) == 0)
  {
    uint64_t v53 = *(void **)(v0 + 384);
    goto LABEL_48;
  }
LABEL_39:
  int v55 = *(_DWORD *)(v0 + 400);
  uint64_t v56 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 352);
  uint64_t v57 = *(void *)(v0 + 240);
  uint64_t v58 = *(void *)(v0 + 216);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 336))(v57, *(void *)(v0 + 160), v58);
  int v59 = v56(v57, v58);
  if (v59 != v55)
  {
    if (v59 != enum case for ISO18013KnownDocTypes.japanNationalIDCard(_:))
    {
      uint64_t v82 = *(void *)(v0 + 264);
      int v122 = *(void **)(v0 + 384);
      uint64_t v124 = *(void *)(v0 + 256);
      uint64_t v126 = *(void *)(v0 + 272);
      os_log_t logd = *(os_log_t *)(v0 + 240);
      uint64_t v120 = *(void *)(v0 + 216);
      uint64_t v121 = *(void *)(v0 + 224);
      uint64_t v83 = *(void *)(v0 + 200);
      uint64_t v84 = *(void *)(v0 + 208);
      uint64_t v85 = *(void *)(v0 + 192);

      v136[0] = 0;
      v136[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(28);
      *(void *)(v0 + 104) = 0;
      *(void *)(v0 + 112) = 0xE000000000000000;
      v86._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
      v86._object = (void *)0x80000001006310F0;
      String.append(_:)(v86);
      _print_unlocked<A, B>(_:_:)();
      (*(void (**)(uint64_t, void, uint64_t))(v83 + 104))(v84, enum case for DIPError.Code.documentReaderUnknownDocumentType(_:), v85);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100054100((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();

      (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v126, v124);
      (*(void (**)(os_log_t, uint64_t))(v121 + 8))(logd, v120);
      goto LABEL_63;
    }
    uint64_t v67 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 336);
    uint64_t v68 = *(void *)(v0 + 232);
    uint64_t v69 = *(void *)(v0 + 216);
    uint64_t v70 = *(void *)(v0 + 160);
    defaultLogger()();
    v67(v68, v70, v69);
    BOOL v71 = Logger.logObject.getter();
    os_log_type_t v72 = static os_log_type_t.debug.getter();
    loga = v71;
    BOOL v73 = os_log_type_enabled(v71, v72);
    uint64_t v74 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
    uint64_t v75 = *(void *)(v0 + 304);
    uint64_t v76 = *(void *)(v0 + 280);
    uint64_t v78 = *(void *)(v0 + 224);
    uint64_t v77 = *(void *)(v0 + 232);
    if (v73)
    {
      uint64_t v119 = *(void *)(v0 + 216);
      uint64_t v123 = *(void *)(v0 + 280);
      uint64_t v79 = (uint8_t *)swift_slowAlloc();
      v136[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v79 = 136315138;
      uint64_t v80 = ISO18013KnownDocTypes.rawValue.getter();
      *(void *)(v0 + 136) = sub_100110D58(v80, v81, v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v77, v119);
      _os_log_impl((void *)&_mh_execute_header, loga, v72, "No document signer OID defined for %s.", v79, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v74(v75, v123);
    }
    else
    {
      (*(void (**)(void, void))(v78 + 8))(*(void *)(v0 + 232), *(void *)(v0 + 216));

      v74(v75, v76);
    }
    goto LABEL_50;
  }
  if (qword_10071F478 != -1) {
    goto LABEL_70;
  }
LABEL_41:
  if ((SecCertificateRef.hasOID(oid:)() & 1) == 0)
  {
    uint64_t v60 = *(void **)(v0 + 384);
    uint64_t v62 = *(void *)(v0 + 264);
    uint64_t v61 = *(void *)(v0 + 272);
    uint64_t v63 = *(void *)(v0 + 256);
    uint64_t v65 = *(void *)(v0 + 200);
    uint64_t v64 = *(void *)(v0 + 208);
    uint64_t v66 = *(void *)(v0 + 192);

    (*(void (**)(uint64_t, void, uint64_t))(v65 + 104))(v64, enum case for DIPError.Code.documentReaderDocSignerMissingOID(_:), v66);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100054100((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v61, v63);
    goto LABEL_63;
  }
LABEL_50:
  defaultLogger()();
  uint64_t v90 = Logger.logObject.getter();
  os_log_type_t v91 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v90, v91))
  {
    uint64_t v92 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v92 = 0;
    _os_log_impl((void *)&_mh_execute_header, v90, v91, "ISO18013IssuerAuthenticator successfully validated document signer certificate chain.", v92, 2u);
    swift_slowDealloc();
  }
  uint64_t v93 = *(void **)(v0 + 384);
  uint64_t v94 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
  uint64_t v95 = *(void *)(v0 + 296);
  uint64_t v96 = *(void *)(v0 + 272);
  uint64_t v97 = *(void *)(v0 + 280);
  uint64_t v98 = *(void *)(v0 + 264);
  uint64_t v118 = *(void *)(v0 + 256);

  v94(v95, v97);
  uint64_t v99 = SecTrustRef.certificateChain.getter();

  (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v96, v118);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v100 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v100(v99);
}

uint64_t sub_100051DD0()
{
  uint64_t v1 = v0[24];
  uint64_t v2 = v0[25];
  uint64_t v3 = v0[23];
  swift_bridgeObjectRelease();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  swift_getErrorValue();
  Error.dipErrorCode.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) != 1)
  {
    uint64_t v4 = v0[24];
    uint64_t v5 = v0[25];
    uint64_t v6 = v0[22];
    sub_100048D6C(v0[23], v6, &qword_100723600);
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v5 + 88))(v6, v4) == enum case for DIPError.Code.untrustedCertificate(_:))
    {
      uint64_t v8 = v0[33];
      uint64_t v7 = v0[34];
      uint64_t v9 = v0[32];
      uint64_t v26 = v0[23];
      (*(void (**)(void, void, void))(v0[25] + 104))(v0[26], enum case for DIPError.Code.documentReaderUntrustedIssuer(_:), v0[24]);
      swift_errorRetain();
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100054100((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      swift_errorRelease();
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
      goto LABEL_6;
    }
    (*(void (**)(void, void))(v0[25] + 8))(v0[22], v0[24]);
  }
  uint64_t v10 = v0[33];
  uint64_t v11 = v0[32];
  uint64_t v25 = v0[34];
  uint64_t v26 = v0[23];
  (*(void (**)(void, void, void))(v0[25] + 104))(v0[26], enum case for DIPError.Code.documentReaderFailedToVerifyIssuerChain(_:), v0[24]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100054100((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v25, v11);
LABEL_6:
  sub_10000C6CC(v26, &qword_100723600);
  uint64_t v12 = v0[25];
  uint64_t v13 = v0[26];
  uint64_t v14 = v0[24];
  sub_100007764((uint64_t *)&unk_1007225C0);
  BOOL v15 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  unint64_t v16 = (*(unsigned __int8 *)(*(void *)v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v15 + 80);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_100610730;
  unint64_t v18 = v17 + v16;
  uint64_t v19 = (void *)(v18 + v15[14]);
  uint64_t v20 = enum case for DIPError.PropertyKey.issuerCertificateChain(_:);
  uint64_t v21 = type metadata accessor for DIPError.PropertyKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 104))(v18, v20, v21);
  uint64_t v22 = v0[16];
  v19[3] = sub_100007764((uint64_t *)&unk_100723650);
  *uint64_t v19 = v22;
  swift_errorRetain();
  swift_bridgeObjectRetain();
  sub_10015C504(v17);
  (*(void (**)(uint64_t, void, uint64_t))(v12 + 104))(v13, enum case for DIPError.Code.internalError(_:), v14);
  type metadata accessor for DIPError();
  sub_100054100((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = (uint64_t (*)(void))v0[1];
  return v23();
}

uint64_t sub_100052420()
{
  _StringGuts.grow(_:)(54);
  v0._object = (void *)0x8000000100631420;
  v0._uint64_t countAndFlagsBits = 0xD000000000000034;
  String.append(_:)(v0);
  type metadata accessor for SecCertificate(0);
  swift_bridgeObjectRetain();
  Array<A>.base64EncodedStrings()();
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = Array.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1000524F8@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v58 = a1;
  uint64_t v56 = a2;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  uint64_t v59 = *(void *)(v2 - 8);
  uint64_t v60 = v2;
  __chkstk_darwin(v2);
  uint64_t v61 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100007764(&qword_100720DF0);
  uint64_t v55 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v54 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100007764(&qword_10071FC78);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for PublicKeyAlgorithm();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unint64_t v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = SecCertificateRef.rawECPublicKeyData()();
  if (v18 >> 60 == 15)
  {
    uint64_t v19 = v59;
    uint64_t v20 = v60;
    uint64_t v21 = v61;
    (*(void (**)(char *, void, uint64_t))(v59 + 104))(v61, enum case for DIPError.Code.documentReaderInvalidIssuerAuthCerts(_:), v60);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100054100((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
LABEL_12:
    (*(void (**)(char *, void, uint64_t))(v19 + 104))(v21, enum case for DIPError.Code.internalError(_:), v20);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100054100((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return swift_errorRelease();
  }
  uint64_t v47 = v9;
  uint64_t v48 = v7;
  uint64_t v49 = v6;
  uint64_t v50 = v4;
  uint64_t v51 = v16;
  uint64_t v52 = v17;
  unint64_t v53 = v18;
  SecCertificateRef.publicKeyAlgorithm()();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_10000C6CC((uint64_t)v12, &qword_10071FC78);
    uint64_t v19 = v59;
    uint64_t v20 = v60;
    uint64_t v21 = v61;
    (*(void (**)(char *, void, uint64_t))(v59 + 104))(v61, enum case for DIPError.Code.documentReaderInvalidIssuerAuthCerts(_:), v60);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100054100((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_10000C5E0(v52, v53);
    goto LABEL_12;
  }
  uint64_t v22 = v51;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v51, v12, v13);
  uint64_t v23 = COSE_Sign1.payload.getter();
  uint64_t v46 = v13;
  if (v24 >> 60 == 15)
  {
    uint64_t v25 = v59;
    uint64_t v20 = v60;
    uint64_t v21 = v61;
    (*(void (**)(char *, void, uint64_t))(v59 + 104))(v61, enum case for DIPError.Code.documentReaderMisformattedIssuerAuthStructure(_:), v60);
    unint64_t v58 = sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100054100((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_10000C5E0(v52, v53);
    uint64_t v26 = v22;
    uint64_t v19 = v25;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v26, v46);
    goto LABEL_12;
  }
  unint64_t v27 = v24;
  uint64_t v45 = v14;
  uint64_t v28 = v23;
  uint64_t v29 = COSE_Sign1.signature.getter();
  unint64_t v31 = v30;
  COSE_Sign1.algorithmIdentifier.getter();
  unint64_t v58 = v31;
  uint64_t v33 = v52;
  unint64_t v32 = v53;
  uint64_t v34 = v57;
  COSESignatureValidator.validateSignature(signature:publicKeyData:publicKeyAlgorithm:algorithmIdentifier:payload:)();
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v22, v46);
    sub_10000C5F4(v29, v58);
    sub_10000C5E0(v28, v27);
    sub_10000C5E0(v33, v32);
    uint64_t v19 = v59;
    uint64_t v20 = v60;
    uint64_t v21 = v61;
    goto LABEL_12;
  }
  unint64_t v35 = v27;
  sub_10000C5F4(v29, v58);
  uint64_t v36 = v47;
  defaultLogger()();
  uint64_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "ISO18013IssuerAuthenticator successfully validated signature of IssuerAuth", v39, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v54 + 8))(v36, v48);
  sub_100054148();
  uint64_t v41 = v49;
  uint64_t v40 = v50;
  dispatch thunk of CBORDecoder.decode<A>(_:from:)();
  uint64_t v42 = v55;
  CBOREncodedCBOR.value.getter();
  sub_10000C5E0(v28, v35);
  sub_10000C5E0(v52, v53);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v41, v40);
  return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v51, v46);
}

uint64_t sub_100052EF4(uint64_t a1, unint64_t a2)
{
  unint64_t v30 = a2;
  uint64_t v29 = type metadata accessor for DIPError.Code();
  unint64_t v3 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v28 = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v27 - v10;
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v31 = a1;
  Logger.sensitive(_:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v27[2] = a1;
  ISO18013MobileSecurityObject.ValidityInfo.signed.getter();
  Date.timeIntervalSinceReferenceDate.getter();
  unint64_t v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16(v11, v5);
  if (!SecCertificateIsValid())
  {
    uint64_t v22 = *(void (**)(char *, void, uint64_t))(v3 + 104);
    uint64_t v21 = v28;
    uint64_t v23 = v29;
    v22(v28, enum case for DIPError.Code.documentReaderMSOValidityInfoValidationFailed(_:), v29);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100054100((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    uint64_t v20 = v22;
    uint64_t v19 = v23;
LABEL_8:
    swift_willThrow();
    v20(v21, enum case for DIPError.Code.internalError(_:), v19);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100054100((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return swift_errorRelease();
  }
  unint64_t v30 = v3;
  ISO18013MobileSecurityObject.ValidityInfo.validFrom.getter();
  ISO18013MobileSecurityObject.ValidityInfo.validUntil.getter();
  char v17 = static Date.< infix(_:_:)();
  v16(v9, v5);
  v16(v11, v5);
  if ((v17 & 1) == 0) {
    goto LABEL_6;
  }
  ISO18013MobileSecurityObject.ValidityInfo.validFrom.getter();
  dispatch thunk of static DateProvider.now.getter();
  sub_100054100((unint64_t *)&qword_100720558, (void (*)(uint64_t))&type metadata accessor for Date);
  char v18 = dispatch thunk of static Comparable.< infix(_:_:)();
  v16(v9, v5);
  v16(v11, v5);
  if ((v18 & 1) != 0
    || (dispatch thunk of static DateProvider.now.getter(),
        ISO18013MobileSecurityObject.ValidityInfo.validUntil.getter(),
        char v25 = dispatch thunk of static Comparable.< infix(_:_:)(),
        v16(v9, v5),
        v16(v11, v5),
        (v25 & 1) != 0))
  {
    uint64_t v19 = v29;
    uint64_t v20 = *(void (**)(char *, void, uint64_t))(v30 + 104);
    uint64_t v21 = v28;
    v20(v28, enum case for DIPError.Code.documentReaderExpiredIssuerAuth(_:), v29);
    unint64_t v30 = sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100054100((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
LABEL_7:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    goto LABEL_8;
  }
  ISO18013MobileSecurityObject.ValidityInfo.signed.getter();
  ISO18013MobileSecurityObject.ValidityInfo.validFrom.getter();
  char v26 = dispatch thunk of static Comparable.< infix(_:_:)();
  v16(v9, v5);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v16)(v11, v5);
  if (v26)
  {
LABEL_6:
    uint64_t v19 = v29;
    uint64_t v20 = *(void (**)(char *, void, uint64_t))(v30 + 104);
    uint64_t v21 = v28;
    v20(v28, enum case for DIPError.Code.documentReaderMSOValidityInfoValidationFailed(_:), v29);
    unint64_t v30 = sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100054100((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_1000538FC()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  unint64_t v3 = (char *)v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[0] = 0;
  v12[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(100);
  v4._uint64_t countAndFlagsBits = 0xD000000000000035;
  v4._object = (void *)0x8000000100630EA0;
  String.append(_:)(v4);
  ISO18013MobileSecurityObject.ValidityInfo.signed.getter();
  sub_100054100((unint64_t *)&qword_100723330, (void (*)(uint64_t))&type metadata accessor for Date);
  v5._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void (**)(char *, uint64_t))(v1 + 8);
  v6(v3, v0);
  v7._object = (void *)0x8000000100630EE0;
  v7._uint64_t countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v7);
  ISO18013MobileSecurityObject.ValidityInfo.validFrom.getter();
  v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v6(v3, v0);
  v9._uint64_t countAndFlagsBits = 0xD000000000000015;
  v9._object = (void *)0x8000000100630F00;
  String.append(_:)(v9);
  ISO18013MobileSecurityObject.ValidityInfo.validUntil.getter();
  v10._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v6(v3, v0);
  return v12[0];
}

uint64_t sub_100053B3C()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  unint64_t v3 = (char *)v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  Swift::String v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[0] = 0;
  v13[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(69);
  v8._uint64_t countAndFlagsBits = 0xD000000000000027;
  v8._object = (void *)0x80000001006317A0;
  String.append(_:)(v8);
  sub_100054100((unint64_t *)&qword_100723330, (void (*)(uint64_t))&type metadata accessor for Date);
  v9._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._object = (void *)0x80000001006317D0;
  v10._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v10);
  ISO18013MobileSecurityObject.validityInfo.getter();
  ISO18013MobileSecurityObject.ValidityInfo.validUntil.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v11._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v13[0];
}

uint64_t sub_100053D9C(uint64_t a1, void *a2)
{
  _StringGuts.grow(_:)(90);
  v4._object = (void *)0x80000001006317F0;
  v4._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v4);
  v5._uint64_t countAndFlagsBits = a1;
  v5._object = a2;
  String.append(_:)(v5);
  v6._object = (void *)0x8000000100631820;
  v6._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v6);
  uint64_t v7 = SecCertificateRef.countryName.getter();
  if (v8)
  {
    unint64_t v9 = v8;
  }
  else
  {
    uint64_t v7 = 7104878;
    unint64_t v9 = 0xE300000000000000;
  }
  unint64_t v10 = v9;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_100053E78(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  _StringGuts.grow(_:)(103);
  v8._object = (void *)0x8000000100631850;
  v8._uint64_t countAndFlagsBits = 0xD000000000000030;
  String.append(_:)(v8);
  v9._uint64_t countAndFlagsBits = a1;
  v9._object = a2;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = 0xD000000000000033;
  v10._object = (void *)0x8000000100631890;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = a3;
  v11._object = a4;
  String.append(_:)(v11);
  return 0;
}

uint64_t sub_100053F40()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8coreidvd27ISO18013IssuerAuthenticator_signatureValidator;
  uint64_t v2 = type metadata accessor for COSESignatureValidator();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + OBJC_IVAR____TtC8coreidvd27ISO18013IssuerAuthenticator_oidVerifier);
  swift_release();
  swift_defaultActor_destroy();

  return swift_defaultActor_deallocate();
}

uint64_t sub_100053FDC()
{
  return type metadata accessor for ISO18013IssuerAuthenticator();
}

uint64_t type metadata accessor for ISO18013IssuerAuthenticator()
{
  uint64_t result = qword_100720CE0;
  if (!qword_100720CE0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100054030()
{
  uint64_t result = type metadata accessor for COSESignatureValidator();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000540EC()
{
  return v0;
}

uint64_t sub_1000540F8()
{
  return sub_1000538FC();
}

uint64_t sub_100054100(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100054148()
{
  unint64_t result = qword_100720DF8;
  if (!qword_100720DF8)
  {
    sub_100019364(&qword_100720DF0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100720DF8);
  }
  return result;
}

uint64_t sub_1000541A4()
{
  return sub_100052420();
}

void sub_1000541AC(unint64_t a1, uint64_t a2)
{
  uint64_t v67 = (char *)a2;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v64 = *(void *)(v3 - 8);
  uint64_t v65 = v3;
  __chkstk_darwin(v3);
  uint64_t v63 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  Swift::String v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v62 = (char *)&v59 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v61 = (char *)&v59 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  unint64_t v16 = (char *)&v59 - v15;
  __chkstk_darwin(v14);
  char v18 = (char *)&v59 - v17;
  defaultLogger()();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  unint64_t v21 = v20;
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, (os_log_type_t)v21, "ISO18013IssuerAuthenticator performing revocation check against provided issuer revocation list.", v22, 2u);
    swift_slowDealloc();
  }

  uint64_t v23 = *(void *)(v6 + 8);
  ((void (*)(char *, uint64_t))v23)(v18, v5);
  if (!v67)
  {
    defaultLogger()();
    os_log_type_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "ISO18013IssuerAuthenticator issuer revocation list is missing. Skipping manual revocation check.", v40, 2u);
      swift_slowDealloc();
    }

    uint64_t v41 = v9;
    goto LABEL_40;
  }
  if (!(a1 >> 62))
  {
    uint64_t v24 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v24) {
      goto LABEL_6;
    }
    goto LABEL_37;
  }
LABEL_36:
  swift_bridgeObjectRetain();
  uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
  if (!v24)
  {
LABEL_37:
    swift_bridgeObjectRelease();
    uint64_t v55 = v62;
    defaultLogger()();
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v56, v57))
    {
      unint64_t v58 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v58 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "ISO18013IssuerAuthenticator rootCertificate is missing. Skipping manual revocation check.", v58, 2u);
      swift_slowDealloc();
    }

    uint64_t v41 = v55;
LABEL_40:
    ((void (*)(char *, uint64_t))v23)(v41, v5);
    return;
  }
LABEL_6:
  unint64_t v25 = v24 - 1;
  if (__OFSUB__(v24, 1)) {
    goto LABEL_42;
  }
  unint64_t v21 = a1 & 0xC000000000000001;
  uint64_t v60 = (void (*)(char *, uint64_t))v23;
  if ((a1 & 0xC000000000000001) == 0)
  {
    if ((v25 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v25 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      char v26 = (char *)*(id *)(a1 + 32 + 8 * v25);
      swift_bridgeObjectRelease();
      unint64_t v27 = *(void **)(a1 + 32);
      swift_bridgeObjectRetain();
      id v28 = v27;
      goto LABEL_11;
    }
    __break(1u);
    return;
  }
LABEL_43:
  char v26 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  id v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_11:
  uint64_t v29 = v28;
  if (sub_100146544((uint64_t)v28, (uint64_t)v26, (uint64_t)v67))
  {
LABEL_28:
    swift_bridgeObjectRelease();
    defaultLogger()();
    id v42 = v29;
    unint64_t v43 = Logger.logObject.getter();
    int v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, (os_log_type_t)v44))
    {
      LODWORD(v66) = v44;
      uint64_t v62 = v16;
      uint64_t v67 = v26;
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      uint64_t v61 = (char *)swift_slowAlloc();
      uint64_t v69 = v61;
      *(_DWORD *)uint64_t v45 = 136315138;
      uint64_t v46 = v42;
      uint64_t v47 = SecCertificateRef.serialNumber.getter();
      if (v48 >> 60 == 15)
      {
        object = (void *)0xE300000000000000;
        uint64_t countAndFlagsBits = 7104878;
      }
      else
      {
        uint64_t v52 = v47;
        unint64_t v53 = v48;
        Swift::String v54 = Data.base16EncodedString()();
        uint64_t countAndFlagsBits = v54._countAndFlagsBits;
        object = v54._object;
        sub_10000C5E0(v52, v53);
      }
      uint64_t v51 = v63;
      uint64_t v68 = sub_100110D58(countAndFlagsBits, (unint64_t)object, (uint64_t *)&v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v43, (os_log_type_t)v66, "ISO18103IssuerAuthenticator received revoked serial number %s", v45, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v60(v62, v5);
      char v26 = v67;
    }
    else
    {

      v60(v16, v5);
      uint64_t v51 = v63;
      uint64_t v46 = v42;
    }
    (*(void (**)(char *, void, uint64_t))(v64 + 104))(v51, enum case for DIPError.Code.documentReaderCertificateRevoked(_:), v65);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100054100((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
  else
  {
    uint64_t v62 = v16;
    unint64_t v16 = v26;
    uint64_t v59 = v5;

    if (v24 != 1)
    {
      uint64_t v5 = a1 & 0xFFFFFFFFFFFFFF8;
      uint64_t v23 = 5;
      do
      {
        unint64_t v30 = v23 - 4;
        if (v21)
        {
          id v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (v30 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_42:
            __break(1u);
            goto LABEL_43;
          }
          id v31 = *(id *)(a1 + 8 * v23);
        }
        uint64_t v29 = v31;
        BOOL v32 = __OFADD__(v30, 1);
        uint64_t v33 = v23 - 3;
        if (v32)
        {
          __break(1u);
          goto LABEL_36;
        }
        if (sub_100146544((uint64_t)v31, (uint64_t)v16, (uint64_t)v67))
        {
          uint64_t v5 = v59;
          char v26 = v16;
          unint64_t v16 = v62;
          goto LABEL_28;
        }

        ++v23;
      }
      while (v33 != v24);
    }
    swift_bridgeObjectRelease();
    uint64_t v34 = v61;
    defaultLogger()();
    unint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "ISO18013IssuerAuthenticator issuerRevocationList does not contain the existing certificate chain. Continuing.", v37, 2u);
      swift_slowDealloc();
    }

    v60(v34, v59);
  }
}

uint64_t sub_100054A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v170 = type metadata accessor for DIPError.Code();
  uint64_t v4 = *(void *)(v170 - 8);
  __chkstk_darwin(v170);
  unsigned int v171 = (char *)v154 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ISO18013IssuerSignedItem();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v186 = v6;
  uint64_t v187 = v7;
  __chkstk_darwin(v6);
  unsigned int v185 = (char *)v154 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100007764(&qword_100720E08);
  uint64_t v172 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v192 = (char *)v154 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v190 = (char *)v154 - v12;
  uint64_t v188 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v188 - 8);
  uint64_t v14 = __chkstk_darwin(v188);
  unint64_t v16 = (char *)v154 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v191 = (char *)v154 - v18;
  __chkstk_darwin(v17);
  uint64_t v169 = (char *)v154 - v19;
  uint64_t v20 = sub_100007764(&qword_100720E10);
  __chkstk_darwin(v20 - 8);
  uint64_t v22 = (char *)v154 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for ISO18013DigestAlgorithm();
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  unsigned int v183 = (char *)v154 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    defaultLogger()();
    unint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v30, v31))
    {
      BOOL v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "ISO18013IssuerAuthenticator found nil issuer signed namespaces. Skipping digests check as there is nothing to compare.", v32, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v188);
  }
  uint64_t v168 = v4;
  swift_bridgeObjectRetain();
  uint64_t v166 = a2;
  ISO18013MobileSecurityObject.digestAlgorithm.getter();
  ISO18013DigestAlgorithm.init(rawValue:)();
  uint64_t v26 = v23;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23) == 1)
  {
    swift_bridgeObjectRelease();
    sub_10000C6CC((uint64_t)v22, &qword_100720E10);
    unint64_t v27 = *(void (**)(char *, void, uint64_t))(v168 + 104);
    id v28 = v171;
    uint64_t v29 = v170;
    v27(v171, enum case for DIPError.Code.documentReaderInvalidDigestAlgorithm(_:), v170);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100054100((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    v27(v28, enum case for DIPError.Code.internalError(_:), v29);
LABEL_171:
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100054100((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return swift_errorRelease();
  }
  uint64_t v158 = v24;
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v183, v22, v23);
  int64_t v35 = 0;
  uint64_t v36 = *(void *)(a1 + 64);
  uint64_t v159 = a1 + 64;
  uint64_t v37 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v38 = -1;
  if (v37 < 64) {
    uint64_t v38 = ~(-1 << v37);
  }
  unint64_t v39 = v38 & v36;
  int64_t v161 = (unint64_t)(v37 + 63) >> 6;
  unsigned int v178 = (void (**)(char *, uint64_t))(v13 + 8);
  uint64_t v176 = v172 + 16;
  uint64_t v189 = (void (**)(char *, uint64_t))(v172 + 8);
  unsigned int v180 = (void (**)(char *, uint64_t))(v187 + 8);
  *(void *)&long long v34 = 136315138;
  long long v157 = v34;
  uint64_t v156 = (char *)&type metadata for Any + 8;
  *(void *)&long long v34 = 134217984;
  long long v167 = v34;
  uint64_t v40 = a1;
  uint64_t v175 = v9;
  uint64_t v41 = v190;
  id v42 = v169;
  uint64_t v165 = v40;
  uint64_t v164 = v26;
  if (!v39) {
    goto LABEL_11;
  }
LABEL_10:
  uint64_t v162 = (v39 - 1) & v39;
  int64_t v163 = v35;
  unint64_t v43 = __clz(__rbit64(v39)) | (v35 << 6);
LABEL_22:
  unint64_t v48 = (uint64_t *)(*(void *)(v40 + 48) + 16 * v43);
  uint64_t v50 = *v48;
  unint64_t v49 = v48[1];
  uint64_t v51 = *(void *)(*(void *)(v40 + 56) + 8 * v43);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v52 = ISO18013MobileSecurityObject.valueDigests.getter();
  if (*(void *)(v52 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v53 = sub_100590548(v50, v49);
    if (v54)
    {
      uint64_t v179 = *(void *)(*(void *)(v52 + 56) + 8 * v53);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v179 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v179 = 0;
  }
  swift_bridgeObjectRelease();
  defaultLogger()();
  swift_bridgeObjectRetain();
  uint64_t v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v55, v56))
  {
    uint64_t v57 = swift_slowAlloc();
    __s1[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v57 = v157;
    swift_bridgeObjectRetain();
    *(void *)(v57 + 4) = sub_100110D58(v50, v49, __s1);
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "ISO18013IssuerAuthenticator comparing digests for namespace %s", (uint8_t *)v57, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v41 = v190;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  unsigned int v177 = *v178;
  v177(v42, v188);
  uint64_t v58 = *(void *)(v51 + 16);
  unint64_t v59 = v193;
  if (!v58)
  {
    swift_bridgeObjectRelease();
    goto LABEL_157;
  }
  unint64_t v60 = (*(unsigned __int8 *)(v172 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v172 + 80);
  uint64_t v160 = v51;
  uint64_t v61 = v51 + v60;
  uint64_t v174 = *(void *)(v172 + 72);
  uint64_t v62 = *(void (**)(void))(v172 + 16);
  unsigned int v173 = v62;
  while (2)
  {
    uint64_t v181 = v61;
    uint64_t v182 = v58;
    v62(v41);
    uint64_t v63 = CBOREncodedCBOR.dataValue.getter();
    unint64_t v65 = v64;
    uint64_t v187 = computeISO18013Digest(algorithm:data:)();
    if (v59)
    {
      sub_10000C5F4(v63, v65);
      swift_bridgeObjectRelease();
      (*v189)(v41, v9);
      swift_release();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v158 + 8))(v183, v164);
      (*(void (**)(char *, void, uint64_t))(v168 + 104))(v171, enum case for DIPError.Code.internalError(_:), v170);
      goto LABEL_171;
    }
    unint64_t v67 = v66;
    unint64_t v193 = 0;
    sub_10000C5F4(v63, v65);
    defaultLogger()();
    uint64_t v68 = v9;
    uint64_t v69 = v192;
    ((void (*)(char *, char *, uint64_t))v62)(v192, v41, v68);
    uint64_t v70 = Logger.logObject.getter();
    uint64_t v71 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v70, (os_log_type_t)v71))
    {
      uint64_t v72 = swift_slowAlloc();
      *(_DWORD *)uint64_t v72 = v167;
      BOOL v73 = v185;
      CBOREncodedCBOR.value.getter();
      uint64_t v74 = ISO18013IssuerSignedItem.digestID.getter();
      (*v180)(v73, v186);
      uint64_t v184 = *v189;
      v184(v192, v68);
      *(void *)(v72 + 4) = v74;
      _os_log_impl((void *)&_mh_execute_header, v70, (os_log_type_t)v71, "ISO18013IssuerAuthenticator comparing digests for digestID %lu", (uint8_t *)v72, 0xCu);
      swift_slowDealloc();
    }
    else
    {
      uint64_t v184 = *v189;
      v184(v69, v68);
    }
    unint64_t v75 = v67;

    v177(v191, v188);
    uint64_t v76 = v179;
    uint64_t v77 = v187;
    if (!v179)
    {
      unint64_t v193 = v75;
      goto LABEL_169;
    }
    swift_bridgeObjectRetain();
    uint64_t v78 = v185;
    CBOREncodedCBOR.value.getter();
    uint64_t v79 = ISO18013IssuerSignedItem.digestID.getter();
    (*v180)(v78, v186);
    if (v79 < 0)
    {
      __break(1u);
LABEL_174:
      __break(1u);
LABEL_175:
      __break(1u);
LABEL_176:
      __break(1u);
LABEL_177:
      __break(1u);
      goto LABEL_178;
    }
    if (!*(void *)(v76 + 16) || (unint64_t v80 = sub_1005906D8(v79), (v81 & 1) == 0))
    {
      unint64_t v193 = v75;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      goto LABEL_170;
    }
    uint64_t v82 = (uint64_t *)(*(void *)(v76 + 56) + 16 * v80);
    uint64_t v84 = *v82;
    unint64_t v83 = v82[1];
    unint64_t v85 = v83 >> 62;
    sub_10002CEB0(*v82, v83);
    swift_bridgeObjectRelease();
    uint64_t v86 = 0;
    switch(v75 >> 62)
    {
      case 1uLL:
        LODWORD(v86) = HIDWORD(v77) - v77;
        if (__OFSUB__(HIDWORD(v77), v77)) {
          goto LABEL_174;
        }
        uint64_t v86 = (int)v86;
        break;
      case 2uLL:
        uint64_t v88 = *(void *)(v77 + 16);
        uint64_t v87 = *(void *)(v77 + 24);
        BOOL v44 = __OFSUB__(v87, v88);
        uint64_t v86 = v87 - v88;
        if (!v44) {
          break;
        }
        goto LABEL_175;
      case 3uLL:
        break;
      default:
        uint64_t v86 = BYTE6(v75);
        break;
    }
    switch((int)v85)
    {
      case 1:
        LODWORD(v89) = HIDWORD(v84) - v84;
        if (__OFSUB__(HIDWORD(v84), v84)) {
          goto LABEL_176;
        }
        uint64_t v89 = (int)v89;
LABEL_54:
        if (v86 != v89)
        {
LABEL_167:
          unint64_t v193 = v75;
          sub_10000C5F4(v84, v83);
          swift_bridgeObjectRelease();
LABEL_169:
          swift_bridgeObjectRelease();
LABEL_170:
          uint64_t v151 = *(void (**)(char *, void, uint64_t))(v168 + 104);
          uint64_t v152 = v171;
          uint64_t v153 = v170;
          v151(v171, enum case for DIPError.Code.documentReaderDocSignerInvalidDigest(_:), v170);
          sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
          type metadata accessor for DIPError();
          sub_100054100((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
          sub_10000C5F4(v77, v193);
          v184(v190, v175);
          swift_release();
          (*(void (**)(char *, uint64_t))(v158 + 8))(v183, v164);
          v151(v152, enum case for DIPError.Code.internalError(_:), v153);
          goto LABEL_171;
        }
        if (v86 < 1)
        {
LABEL_34:
          sub_10000C5F4(v84, v83);
          uint64_t v9 = v175;
          unint64_t v59 = v193;
        }
        else
        {
          switch(v75 >> 62)
          {
            case 1uLL:
              if ((int)v77 > v77 >> 32) {
                goto LABEL_179;
              }
              sub_10002CEB0(v77, v75);
              uint64_t v97 = __DataStorage._bytes.getter();
              if (v97)
              {
                uint64_t v98 = v97;
                uint64_t v99 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v77, v99)) {
                  goto LABEL_181;
                }
                uint64_t v100 = (const void *)(v98 + (int)v77 - v99);
                __DataStorage._length.getter();
                if (!v85)
                {
LABEL_101:
                  __s1[0] = v84;
                  LOWORD(__s1[1]) = v83;
                  BYTE2(__s1[1]) = BYTE2(v83);
                  BYTE3(__s1[1]) = BYTE3(v83);
                  BYTE4(__s1[1]) = BYTE4(v83);
                  BYTE5(__s1[1]) = BYTE5(v83);
                  if (!v100) {
                    goto LABEL_203;
                  }
                  int v116 = memcmp(v100, __s1, BYTE6(v83));
                  sub_10000C5F4(v77, v75);
                  goto LABEL_120;
                }
              }
              else
              {
                uint64_t v100 = 0;
                __DataStorage._length.getter();
                if (!v85) {
                  goto LABEL_101;
                }
              }
              if (v85 == 1)
              {
                if (v84 >> 32 < (int)v84) {
                  goto LABEL_189;
                }
                swift_retain();
                uint64_t v101 = (char *)__DataStorage._bytes.getter();
                if (v101)
                {
                  uint64_t v102 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v84, v102)) {
                    goto LABEL_198;
                  }
                  v101 += (int)v84 - v102;
                }
                uint64_t v103 = __DataStorage._length.getter();
                if (v103 >= (v84 >> 32) - (int)v84) {
                  size_t v104 = (v84 >> 32) - (int)v84;
                }
                else {
                  size_t v104 = v103;
                }
                if (!v100) {
                  goto LABEL_200;
                }
                uint64_t v9 = v175;
                if (!v101) {
                  goto LABEL_201;
                }
                int v105 = memcmp(v100, v101, v104);
                sub_10000C5F4(v84, v83);
                sub_10000C5F4(v77, v75);
LABEL_144:
                sub_10000C5F4(v84, v83);
                unint64_t v59 = v193;
                if (v105) {
                  goto LABEL_168;
                }
                break;
              }
              uint64_t v138 = *(void *)(v84 + 16);
              uint64_t v155 = *(const void **)(v84 + 24);
              swift_retain();
              swift_retain();
              uint64_t v139 = __DataStorage._bytes.getter();
              if (v139)
              {
                uint64_t v140 = v139;
                uint64_t v141 = __DataStorage._offset.getter();
                if (__OFSUB__(v138, v141)) {
                  goto LABEL_197;
                }
                unint64_t v142 = (const void *)(v140 + v138 - v141);
              }
              else
              {
                unint64_t v142 = 0;
              }
              int64_t v148 = (int64_t)v155 - v138;
              if (__OFSUB__(v155, v138)) {
                goto LABEL_191;
              }
              uint64_t v149 = __DataStorage._length.getter();
              if (v149 >= v148) {
                size_t v150 = v148;
              }
              else {
                size_t v150 = v149;
              }
              uint64_t v9 = v175;
              if (!v100) {
                goto LABEL_211;
              }
              if (!v142) {
                goto LABEL_212;
              }
              int v131 = memcmp(v100, v142, v150);
              swift_release();
              swift_release();
              sub_10000C5F4(v77, v75);
              goto LABEL_154;
            case 2uLL:
              uint64_t v106 = *(void *)(v77 + 16);
              swift_retain();
              swift_retain();
              uint64_t v107 = __DataStorage._bytes.getter();
              if (v107)
              {
                uint64_t v108 = v107;
                uint64_t v109 = __DataStorage._offset.getter();
                if (__OFSUB__(v106, v109)) {
                  goto LABEL_180;
                }
                unint64_t v110 = (const void *)(v108 + v106 - v109);
              }
              else
              {
                unint64_t v110 = 0;
              }
              __DataStorage._length.getter();
              if (!v85)
              {
                __s1[0] = v84;
                LOWORD(__s1[1]) = v83;
                BYTE2(__s1[1]) = BYTE2(v83);
                BYTE3(__s1[1]) = BYTE3(v83);
                BYTE4(__s1[1]) = BYTE4(v83);
                BYTE5(__s1[1]) = BYTE5(v83);
                if (!v110) {
                  goto LABEL_206;
                }
                int v116 = memcmp(v110, __s1, BYTE6(v83));
                swift_release();
                swift_release();
                goto LABEL_120;
              }
              if (v85 == 1)
              {
                if (v84 >> 32 < (int)v84) {
                  goto LABEL_184;
                }
                swift_retain();
                uint64_t v117 = __DataStorage._bytes.getter();
                if (v117)
                {
                  uint64_t v155 = v110;
                  uint64_t v118 = v117;
                  uint64_t v119 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v84, v119)) {
                    goto LABEL_196;
                  }
                  uint64_t v120 = (const void *)(v118 + (int)v84 - v119);
                  unint64_t v110 = v155;
                }
                else
                {
                  uint64_t v120 = 0;
                }
                uint64_t v146 = __DataStorage._length.getter();
                if (v146 >= (v84 >> 32) - (int)v84) {
                  size_t v147 = (v84 >> 32) - (int)v84;
                }
                else {
                  size_t v147 = v146;
                }
                if (!v110) {
                  goto LABEL_209;
                }
                uint64_t v9 = v175;
                if (!v120) {
                  goto LABEL_210;
                }
                int v105 = memcmp(v110, v120, v147);
                sub_10000C5F4(v84, v83);
                swift_release();
                swift_release();
                goto LABEL_144;
              }
              v154[1] = v75 & 0x3FFFFFFFFFFFFFFFLL;
              uint64_t v132 = *(void *)(v84 + 16);
              uint64_t v155 = *(const void **)(v84 + 24);
              swift_retain();
              swift_retain();
              uint64_t v133 = __DataStorage._bytes.getter();
              if (v133)
              {
                uint64_t v134 = v133;
                uint64_t v135 = v110;
                uint64_t v136 = __DataStorage._offset.getter();
                if (__OFSUB__(v132, v136)) {
                  goto LABEL_195;
                }
                uint64_t v137 = (const void *)(v134 + v132 - v136);
              }
              else
              {
                uint64_t v135 = v110;
                uint64_t v137 = 0;
              }
              int64_t v143 = (int64_t)v155 - v132;
              if (__OFSUB__(v155, v132)) {
                goto LABEL_190;
              }
              uint64_t v144 = __DataStorage._length.getter();
              if (v144 >= v143) {
                size_t v145 = v143;
              }
              else {
                size_t v145 = v144;
              }
              uint64_t v9 = v175;
              if (!v135) {
                goto LABEL_207;
              }
              if (!v137) {
                goto LABEL_208;
              }
              int v131 = memcmp(v135, v137, v145);
              swift_release();
              swift_release();
              goto LABEL_136;
            case 3uLL:
              memset(__s1, 0, 14);
              if (!v85) {
                goto LABEL_92;
              }
              if (v85 == 1)
              {
                uint64_t v92 = (v84 >> 32) - (int)v84;
                if (v84 >> 32 < (int)v84) {
                  goto LABEL_183;
                }
                sub_10002CEB0(v84, v83);
                uint64_t v111 = __DataStorage._bytes.getter();
                if (!v111) {
                  goto LABEL_202;
                }
                uint64_t v94 = v111;
                uint64_t v112 = __DataStorage._offset.getter();
                uint64_t v96 = (int)v84 - v112;
                if (__OFSUB__((int)v84, v112)) {
                  goto LABEL_188;
                }
                goto LABEL_87;
              }
              uint64_t v128 = *(void *)(v84 + 16);
              uint64_t v127 = *(void *)(v84 + 24);
              swift_retain();
              swift_retain();
              uint64_t v123 = (char *)__DataStorage._bytes.getter();
              if (v123)
              {
                uint64_t v129 = __DataStorage._offset.getter();
                if (__OFSUB__(v128, v129)) {
                  goto LABEL_194;
                }
                v123 += v128 - v129;
              }
              BOOL v44 = __OFSUB__(v127, v128);
              int64_t v125 = v127 - v128;
              if (v44) {
                goto LABEL_186;
              }
              uint64_t v126 = __DataStorage._length.getter();
              uint64_t v9 = v175;
              if (!v123) {
                goto LABEL_205;
              }
              goto LABEL_114;
            default:
              __s1[0] = v77;
              LOWORD(__s1[1]) = v75;
              BYTE2(__s1[1]) = BYTE2(v75);
              BYTE3(__s1[1]) = BYTE3(v75);
              BYTE4(__s1[1]) = BYTE4(v75);
              BYTE5(__s1[1]) = BYTE5(v75);
              if (v85)
              {
                if (v85 == 1)
                {
                  uint64_t v92 = (v84 >> 32) - (int)v84;
                  if (v84 >> 32 < (int)v84) {
                    goto LABEL_182;
                  }
                  sub_10002CEB0(v84, v83);
                  uint64_t v93 = __DataStorage._bytes.getter();
                  if (!v93)
                  {
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_200:
                    __break(1u);
LABEL_201:
                    __break(1u);
LABEL_202:
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_203:
                    __break(1u);
LABEL_204:
                    __break(1u);
LABEL_205:
                    __break(1u);
LABEL_206:
                    __break(1u);
LABEL_207:
                    __break(1u);
LABEL_208:
                    __break(1u);
LABEL_209:
                    __break(1u);
LABEL_210:
                    __break(1u);
LABEL_211:
                    __break(1u);
LABEL_212:
                    __break(1u);
                    JUMPOUT(0x100056358);
                  }
                  uint64_t v94 = v93;
                  uint64_t v95 = __DataStorage._offset.getter();
                  uint64_t v96 = (int)v84 - v95;
                  if (__OFSUB__((int)v84, v95)) {
                    goto LABEL_187;
                  }
LABEL_87:
                  uint64_t v113 = __DataStorage._length.getter();
                  if (v113 >= v92) {
                    size_t v114 = v92;
                  }
                  else {
                    size_t v114 = v113;
                  }
                  int v115 = memcmp(__s1, (const void *)(v94 + v96), v114);
                  sub_10000C5F4(v84, v83);
                  sub_10000C5F4(v84, v83);
                  unint64_t v59 = v193;
                  uint64_t v9 = v175;
                  if (v115)
                  {
LABEL_168:
                    unint64_t v193 = v75;
                    swift_bridgeObjectRelease();
                    goto LABEL_169;
                  }
                }
                else
                {
                  uint64_t v122 = *(void *)(v84 + 16);
                  uint64_t v121 = *(void *)(v84 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v123 = (char *)__DataStorage._bytes.getter();
                  if (v123)
                  {
                    uint64_t v124 = __DataStorage._offset.getter();
                    if (__OFSUB__(v122, v124)) {
                      goto LABEL_193;
                    }
                    v123 += v122 - v124;
                  }
                  BOOL v44 = __OFSUB__(v121, v122);
                  int64_t v125 = v121 - v122;
                  if (v44) {
                    goto LABEL_185;
                  }
                  uint64_t v126 = __DataStorage._length.getter();
                  uint64_t v9 = v175;
                  if (!v123) {
                    goto LABEL_204;
                  }
LABEL_114:
                  if (v126 >= v125) {
                    size_t v130 = v125;
                  }
                  else {
                    size_t v130 = v126;
                  }
                  int v131 = memcmp(__s1, v123, v130);
LABEL_136:
                  swift_release();
                  swift_release();
LABEL_154:
                  sub_10000C5F4(v84, v83);
                  unint64_t v59 = v193;
                  if (v131) {
                    goto LABEL_168;
                  }
                }
              }
              else
              {
LABEL_92:
                uint64_t __s2 = v84;
                __int16 v195 = v83;
                char v196 = BYTE2(v83);
                char v197 = BYTE3(v83);
                char v198 = BYTE4(v83);
                char v199 = BYTE5(v83);
                int v116 = memcmp(__s1, &__s2, BYTE6(v83));
LABEL_120:
                sub_10000C5F4(v84, v83);
                uint64_t v9 = v175;
                unint64_t v59 = v193;
                if (v116) {
                  goto LABEL_168;
                }
              }
              break;
          }
        }
        uint64_t v41 = v190;
        v184(v190, v9);
        sub_10000C5F4(v77, v75);
        uint64_t v61 = v181 + v174;
        uint64_t v58 = v182 - 1;
        uint64_t v62 = v173;
        if (v182 != 1) {
          continue;
        }
        swift_bridgeObjectRelease();
        id v42 = v169;
LABEL_157:
        swift_bridgeObjectRelease();
        uint64_t v40 = v165;
        uint64_t v26 = v164;
        int64_t v35 = v163;
        unint64_t v39 = v162;
        if (v162) {
          goto LABEL_10;
        }
LABEL_11:
        BOOL v44 = __OFADD__(v35, 1);
        int64_t v45 = v35 + 1;
        if (v44)
        {
LABEL_178:
          __break(1u);
LABEL_179:
          __break(1u);
LABEL_180:
          __break(1u);
LABEL_181:
          __break(1u);
LABEL_182:
          __break(1u);
LABEL_183:
          __break(1u);
LABEL_184:
          __break(1u);
LABEL_185:
          __break(1u);
LABEL_186:
          __break(1u);
LABEL_187:
          __break(1u);
LABEL_188:
          __break(1u);
LABEL_189:
          __break(1u);
LABEL_190:
          __break(1u);
LABEL_191:
          __break(1u);
          goto LABEL_192;
        }
        if (v45 < v161)
        {
          unint64_t v46 = *(void *)(v159 + 8 * v45);
          if (v46) {
            goto LABEL_21;
          }
          int64_t v47 = v45 + 1;
          if (v45 + 1 < v161)
          {
            unint64_t v46 = *(void *)(v159 + 8 * v47);
            if (v46) {
              goto LABEL_20;
            }
            int64_t v47 = v45 + 2;
            if (v45 + 2 < v161)
            {
              unint64_t v46 = *(void *)(v159 + 8 * v47);
              if (v46) {
                goto LABEL_20;
              }
              int64_t v47 = v45 + 3;
              if (v45 + 3 < v161)
              {
                unint64_t v46 = *(void *)(v159 + 8 * v47);
                if (v46)
                {
LABEL_20:
                  int64_t v45 = v47;
LABEL_21:
                  uint64_t v162 = (v46 - 1) & v46;
                  int64_t v163 = v45;
                  unint64_t v43 = __clz(__rbit64(v46)) + (v45 << 6);
                  goto LABEL_22;
                }
                while (1)
                {
                  int64_t v45 = v47 + 1;
                  if (__OFADD__(v47, 1)) {
                    break;
                  }
                  if (v45 >= v161) {
                    goto LABEL_172;
                  }
                  unint64_t v46 = *(void *)(v159 + 8 * v45);
                  ++v47;
                  if (v46) {
                    goto LABEL_21;
                  }
                }
LABEL_192:
                __break(1u);
LABEL_193:
                __break(1u);
LABEL_194:
                __break(1u);
LABEL_195:
                __break(1u);
LABEL_196:
                __break(1u);
LABEL_197:
                __break(1u);
LABEL_198:
                __break(1u);
              }
            }
          }
        }
LABEL_172:
        swift_release();
        return (*(uint64_t (**)(char *, uint64_t))(v158 + 8))(v183, v26);
      case 2:
        uint64_t v91 = *(void *)(v84 + 16);
        uint64_t v90 = *(void *)(v84 + 24);
        BOOL v44 = __OFSUB__(v90, v91);
        uint64_t v89 = v90 - v91;
        if (!v44) {
          goto LABEL_54;
        }
        goto LABEL_177;
      case 3:
        if (!v86) {
          goto LABEL_34;
        }
        goto LABEL_167;
      default:
        uint64_t v89 = BYTE6(v83);
        goto LABEL_54;
    }
  }
}

uint64_t sub_100056388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v141 = a3;
  uint64_t v139 = a2;
  uint64_t v132 = type metadata accessor for DIPError.Code();
  uint64_t v130 = *(void *)(v132 - 8);
  __chkstk_darwin(v132);
  int v131 = (char *)&v116 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo();
  uint64_t v126 = *(void *)(v127 - 8);
  __chkstk_darwin(v127);
  int64_t v125 = (char *)&v116 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v140 = type metadata accessor for Date();
  uint64_t v147 = *(void *)(v140 - 8);
  uint64_t v6 = __chkstk_darwin(v140);
  uint64_t v124 = (char *)&v116 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v146 = (char *)&v116 - v8;
  uint64_t v118 = type metadata accessor for ISO18013Response.Document();
  uint64_t v117 = *(void *)(v118 - 8);
  __chkstk_darwin(v118);
  uint64_t v120 = (char *)&v116 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ISO18013_5_1_ElementIdentifier();
  uint64_t v136 = *(void (**)(uint64_t, uint64_t))(v10 - 8);
  uint64_t v137 = v10;
  __chkstk_darwin(v10);
  uint64_t v134 = (char *)&v116 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v150 = type metadata accessor for ISO18013Response.IssuerSigned();
  uint64_t v135 = *(void *)(v150 - 8);
  __chkstk_darwin(v150);
  uint64_t v133 = (char *)&v116 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v142 = type metadata accessor for ISO18013KnownDocTypes();
  uint64_t v13 = *(void *)(v142 - 8);
  uint64_t v14 = __chkstk_darwin(v142);
  uint64_t v122 = (char *)&v116 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v116 - v16;
  uint64_t v18 = sub_100007764(&qword_1007239B0);
  uint64_t v19 = __chkstk_darwin(v18 - 8);
  uint64_t v138 = (uint64_t)&v116 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v149 = (uint64_t)&v116 - v21;
  uint64_t v22 = type metadata accessor for Logger();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v123 = (char *)&v116 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v121 = (char *)&v116 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v129 = (char *)&v116 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v119 = (char *)&v116 - v31;
  __chkstk_darwin(v30);
  uint64_t v33 = (char *)&v116 - v32;
  defaultLogger()();
  long long v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v36 = 0;
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "ISO18013IssuerAuthenticator begin validating consistency of response.", v36, 2u);
    swift_slowDealloc();
  }

  uint64_t v37 = *(void (**)(char *, uint64_t))(v23 + 8);
  uint64_t v144 = v22;
  uint64_t v145 = v23 + 8;
  int64_t v143 = v37;
  v37(v33, v22);
  uint64_t v148 = a1;
  uint64_t v38 = ISO18013Response.Document.docType.getter();
  uint64_t v40 = v39;
  uint64_t v41 = *(void (**)(char *, void, uint64_t))(v13 + 104);
  uint64_t v42 = v142;
  v41(v17, enum case for ISO18013KnownDocTypes.iso18013_5_1_mDL(_:), v142);
  uint64_t v43 = ISO18013KnownDocTypes.rawValue.getter();
  uint64_t v44 = v13;
  uint64_t v45 = v43;
  uint64_t v47 = v46;
  unint64_t v48 = *(void (**)(char *, uint64_t))(v44 + 8);
  uint64_t v128 = (void (*)(char *, void, uint64_t))(v44 + 8);
  v48(v17, v42);
  if (v45 == v38 && v47 == v40)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    swift_bridgeObjectRelease();
    uint64_t v50 = v133;
    ISO18013Response.Document.issuerSigned.getter();
    uint64_t v51 = v136;
    uint64_t v128 = (void (*)(char *, void, uint64_t))*((void *)v136 + 13);
    uint64_t v52 = (uint64_t)v134;
    uint64_t v53 = v137;
    v128(v134, enum case for ISO18013_5_1_ElementIdentifier.issueDate(_:), v137);
    sub_1002D88A0(v52, v149);
    char v54 = (void (*)(uint64_t, uint64_t))*((void *)v51 + 1);
    v54(v52, v53);
    uint64_t v135 = *(void *)(v135 + 8);
    uint64_t v136 = v54;
    ((void (*)(char *, uint64_t))v135)(v50, v150);
    ISO18013Response.Document.issuerSigned.getter();
    uint64_t v55 = (void (*)(uint64_t, void, uint64_t))v128;
    v128((char *)v52, enum case for ISO18013_5_1_ElementIdentifier.issuingCountry(_:), v53);
    uint64_t v122 = (char *)sub_1002D88B8(v52);
    uint64_t v142 = v56;
    v54(v52, v53);
    uint64_t v57 = (void (*)(char *, uint64_t))v135;
    ((void (*)(char *, uint64_t))v135)(v50, v150);
    ISO18013Response.Document.issuerSigned.getter();
    v55(v52, enum case for ISO18013_5_1_ElementIdentifier.issuingJurisdiction(_:), v53);
    uint64_t v148 = sub_1002D88B8(v52);
    uint64_t v59 = v58;
    uint64_t v60 = v53;
    uint64_t v61 = v149;
    v136(v52, v60);
    v57(v50, v150);
    uint64_t v62 = v140;
    uint64_t v63 = v146;
    uint64_t v64 = v147;
    goto LABEL_8;
  }
  char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v49) {
    goto LABEL_7;
  }
  uint64_t v76 = v122;
  v41(v122, enum case for ISO18013KnownDocTypes.japanNationalIDCard(_:), v42);
  uint64_t v77 = ISO18013KnownDocTypes.rawValue.getter();
  uint64_t v78 = v76;
  uint64_t v80 = v79;
  v48(v78, v42);
  if (v77 == v38 && v80 == v40)
  {
    swift_bridgeObjectRelease_n();
    uint64_t v61 = v149;
    uint64_t v63 = v146;
    uint64_t v64 = v147;
LABEL_36:
    uint64_t v62 = v140;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v64 + 56))(v61, 1, 1, v140);
    uint64_t v148 = 0;
    uint64_t v59 = 0;
    uint64_t v122 = 0;
    uint64_t v142 = 0;
LABEL_8:
    uint64_t v65 = v138;
    sub_100048D6C(v61, v138, &qword_1007239B0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v65, 1, v62) == 1)
    {
      sub_10000C6CC(v65, &qword_1007239B0);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v64 + 32))(v63, v65, v62);
      unint64_t v66 = v125;
      ISO18013MobileSecurityObject.validityInfo.getter();
      unint64_t v67 = v124;
      ISO18013MobileSecurityObject.ValidityInfo.validFrom.getter();
      (*(void (**)(char *, uint64_t))(v126 + 8))(v66, v127);
      uint64_t v68 = v63;
      char v69 = static Date.< infix(_:_:)();
      uint64_t v72 = *(void (**)(char *, uint64_t))(v64 + 8);
      uint64_t v70 = v64 + 8;
      uint64_t v71 = v72;
      v72(v67, v62);
      if ((v69 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        char v81 = v129;
        uint64_t v82 = defaultLogger()();
        __chkstk_darwin(v82);
        Logger.sensitive(_:)();
        v143(v81, v144);
        unint64_t v83 = *(void (**)(char *, void, uint64_t))(v130 + 104);
        uint64_t v147 = v70;
        uint64_t v84 = v131;
        uint64_t v85 = v132;
        v83(v131, enum case for DIPError.Code.documentReaderDocSignerIssueDateInconsistent(_:), v132);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_100054100((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        sub_10000C6CC(v149, &qword_1007239B0);
        v71(v146, v62);
LABEL_34:
        v83(v84, enum case for DIPError.Code.internalError(_:), v85);
        swift_errorRetain();
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_100054100((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        return swift_errorRelease();
      }
      v71(v68, v62);
      uint64_t v61 = v149;
    }
    uint64_t v73 = v142;
    if (!v142) {
      goto LABEL_24;
    }
    swift_bridgeObjectRetain();
    uint64_t v74 = SecCertificateRef.countryName.getter();
    if (v75)
    {
      if (v122 == (char *)v74 && v73 == v75)
      {
        swift_bridgeObjectRelease_n();
LABEL_23:
        swift_bridgeObjectRelease();
LABEL_24:
        if (!v59)
        {
LABEL_38:
          uint64_t v100 = v123;
          defaultLogger()();
          uint64_t v101 = Logger.logObject.getter();
          os_log_type_t v102 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v101, v102))
          {
            uint64_t v103 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v103 = 0;
            _os_log_impl((void *)&_mh_execute_header, v101, v102, "ISO18013IssuerAuthenticator successfully validated consistency of response.", v103, 2u);
            swift_slowDealloc();
          }

          v143(v100, v144);
          return sub_10000C6CC(v61, &qword_1007239B0);
        }
        uint64_t v87 = SecCertificateRef.stateOrProvinceName.getter();
        if (!v88)
        {
LABEL_37:
          swift_bridgeObjectRelease();
          goto LABEL_38;
        }
        uint64_t v89 = v87;
        uint64_t v90 = v88;
        uint64_t v91 = v59;
        uint64_t v92 = v121;
        defaultLogger()();
        uint64_t v93 = Logger.logObject.getter();
        os_log_type_t v94 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v93, v94))
        {
          uint64_t v95 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v95 = 0;
          _os_log_impl((void *)&_mh_execute_header, v93, v94, "ISO18013IssuerAuthenticator performing issuing jurisdiction consistency check.", v95, 2u);
          swift_slowDealloc();
        }

        v143(v92, v144);
        uint64_t v85 = v132;
        if (v148 == v89 && v91 == v90 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          goto LABEL_37;
        }
        size_t v114 = v129;
        uint64_t v115 = defaultLogger()();
        __chkstk_darwin(v115);
        Logger.sensitive(_:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v143(v114, v144);
        unint64_t v83 = *(void (**)(char *, void, uint64_t))(v130 + 104);
        uint64_t v84 = v131;
        v83(v131, enum case for DIPError.Code.documentReaderDocSignerIssuingJurisdictionInconsistent(_:), v85);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_100054100((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        goto LABEL_33;
      }
      char v86 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v86) {
        goto LABEL_23;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v96 = v129;
    uint64_t v97 = defaultLogger()();
    __chkstk_darwin(v97);
    Logger.sensitive(_:)();
    swift_bridgeObjectRelease();
    v143(v96, v144);
    unint64_t v83 = *(void (**)(char *, void, uint64_t))(v130 + 104);
    uint64_t v84 = v131;
    uint64_t v85 = v132;
    v83(v131, enum case for DIPError.Code.documentReaderDocSignerCountryInconsistent(_:), v132);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100054100((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
LABEL_33:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_10000C6CC(v61, &qword_1007239B0);
    goto LABEL_34;
  }
  char v99 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v61 = v149;
  uint64_t v63 = v146;
  uint64_t v64 = v147;
  if (v99) {
    goto LABEL_36;
  }
  size_t v104 = v119;
  defaultLogger()();
  uint64_t v105 = v117;
  uint64_t v106 = v120;
  uint64_t v107 = v118;
  (*(void (**)(char *, uint64_t, uint64_t))(v117 + 16))(v120, v148, v118);
  uint64_t v108 = Logger.logObject.getter();
  os_log_type_t v109 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v108, v109))
  {
    unint64_t v110 = (uint8_t *)swift_slowAlloc();
    uint64_t v152 = swift_slowAlloc();
    *(_DWORD *)unint64_t v110 = 136315138;
    uint64_t v111 = ISO18013Response.Document.docType.getter();
    uint64_t v151 = sub_100110D58(v111, v112, &v152);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v105 + 8))(v120, v107);
    _os_log_impl((void *)&_mh_execute_header, v108, v109, "ISO18013IssuerAuthenticator skipping consistency check on document with type %s", v110, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v113 = v119;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v105 + 8))(v106, v107);

    uint64_t v113 = v104;
  }
  return ((uint64_t (*)(char *, uint64_t))v143)(v113, v144);
}

uint64_t sub_1000577D0()
{
  return sub_100053E78(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1000577DC()
{
  return sub_100053D9C(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000577E8()
{
  return sub_100053B3C();
}

unint64_t sub_1000577F0(uint64_t a1, uint64_t a2, void *a3)
{
  int v237 = a3;
  uint64_t v239 = a2;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v242 = *(void *)(v3 - 8);
  uint64_t v243 = v3;
  __chkstk_darwin(v3);
  char v244 = (char *)&v212 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100007764(&qword_100720A68);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v219 = (uint64_t)&v212 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v223 = (uint64_t)&v212 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v225 = (char *)&v212 - v11;
  __chkstk_darwin(v10);
  uint64_t v224 = (char *)&v212 - v12;
  uint64_t v13 = sub_100007764(&qword_100720FA0);
  __chkstk_darwin(v13 - 8);
  uint64_t v228 = (char *)&v212 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v240 = sub_100007764(&qword_100720FC8);
  uint64_t v226 = *(void *)(v240 - 8);
  uint64_t v15 = __chkstk_darwin(v240);
  unint64_t v233 = (unint64_t)&v212 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v241 = (uint64_t)&v212 - v17;
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  v220 = (char *)&v212 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v222 = (char *)&v212 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  int v231 = (char *)&v212 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  int v230 = (char *)&v212 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  char v229 = (char *)&v212 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  int v227 = (char *)&v212 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  int v234 = (char *)&v212 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  v221 = (char *)&v212 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v232 = (uint64_t)&v212 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v40 = (char *)&v212 - v39;
  __chkstk_darwin(v38);
  uint64_t v42 = (char *)&v212 - v41;
  defaultLogger()();
  uint64_t v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.debug.getter();
  BOOL v45 = os_log_type_enabled(v43, v44);
  uint64_t v247 = v18;
  if (v45)
  {
    uint64_t v46 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v46 = 0;
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "encrypting and saving item to CloudKit", v46, 2u);
    uint64_t v18 = v247;
    swift_slowDealloc();
  }

  uint64_t v47 = *(void (**)(char *, uint64_t))(v19 + 8);
  uint64_t v245 = v19 + 8;
  v246 = v47;
  v47(v42, v18);
  uint64_t v48 = IdentityDocument.image.getter();
  if (v49 >> 60 == 15)
  {
    uint64_t v51 = v242;
    uint64_t v50 = v243;
    uint64_t v52 = v244;
    (*(void (**)(char *, void, uint64_t))(v242 + 104))(v244, enum case for DIPError.Code.invalidStoredData(_:), v243);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
LABEL_73:
    (*(void (**)(char *, void, uint64_t))(v51 + 104))(v52, enum case for DIPError.Code.internalError(_:), v50);
    swift_errorRetain();
    unint64_t v175 = sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    return v175;
  }
  uint64_t v53 = v48;
  char v54 = (void *)v49;
  id v55 = [self standardUserDefaults];
  v56._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  v56._object = (void *)0x8000000100631C80;
  Swift::Bool v57 = NSUserDefaults.internalBool(forKey:)(v56);

  uint64_t v236 = v53;
  uint64_t v58 = v240;
  if (v57)
  {
    uint64_t v59 = static DIPFeatures.sharedInstance.getter();
    if (v59)
    {
      uint64_t v60 = (void *)v59;
      uint64_t v61 = v54;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      NSString v63 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v60 saveProofingImage:isa withName:v63];

      swift_unknownObjectRelease();
      char v54 = v61;
    }
  }
  defaultLogger()();
  uint64_t v64 = Logger.logObject.getter();
  os_log_type_t v65 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v64, v65))
  {
    unint64_t v66 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v66 = 0;
    _os_log_impl((void *)&_mh_execute_header, v64, v65, "Starting to encrypt images", v66, 2u);
    uint64_t v18 = v247;
    swift_slowDealloc();
  }

  v246(v40, v18);
  uint64_t v67 = v241;
  uint64_t v68 = v241 + *(int *)(v58 + 48);
  sub_10000C728(v237, v237[3]);
  uint64_t v69 = Data.base64EncodedData(options:)();
  unint64_t v71 = v70;
  v249[0] = v69;
  v249[1] = v70;
  sub_10005D424();
  sub_10005D478();
  uint64_t v72 = v238;
  dispatch thunk of HPKESuite.sealMessageAEAD<A>(message:)();
  if (v72)
  {
    sub_10000C5F4(v69, v71);
    sub_10000C5E0(v236, (unint64_t)v54);
    uint64_t v50 = v243;
    uint64_t v52 = v244;
    uint64_t v51 = v242;
    goto LABEL_73;
  }
  uint64_t v73 = v240;
  uint64_t v238 = v68;
  uint64_t v212 = 0;
  int v237 = v54;
  sub_10000C5F4(v69, v71);
  uint64_t v74 = v232;
  defaultLogger()();
  uint64_t v75 = Logger.logObject.getter();
  os_log_type_t v76 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v75, v76))
  {
    uint64_t v77 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v77 = 0;
    _os_log_impl((void *)&_mh_execute_header, v75, v76, "Images encryption complete", v77, 2u);
    swift_slowDealloc();
  }

  v246((char *)v74, v247);
  unint64_t v78 = v233;
  uint64_t v79 = (char *)(v233 + *(int *)(v73 + 48));
  uint64_t v80 = sub_100007764(&qword_100720FB0);
  uint64_t v81 = *(void *)(v80 - 8);
  uint64_t v82 = *(void (**)(char *, uint64_t, uint64_t))(v81 + 16);
  uint64_t v217 = v81 + 16;
  uint64_t v216 = v82;
  v82((char *)v78, v67, v80);
  uint64_t v83 = type metadata accessor for AEADKey();
  uint64_t v84 = *(void *)(v83 - 8);
  uint64_t v85 = *(void (**)(char *, uint64_t, uint64_t))(v84 + 16);
  uint64_t v214 = v84 + 16;
  uint64_t v213 = v85;
  v85(v79, v238, v83);
  uint64_t v250 = SealedMessage.data.getter();
  unint64_t v251 = v86;
  uint64_t v87 = *(void (**)(unint64_t, uint64_t))(v81 + 8);
  uint64_t v218 = v80;
  v87(v78, v80);
  uint64_t v88 = *(void (**)(uint64_t, uint64_t))(v84 + 8);
  uint64_t v215 = v83;
  v88((uint64_t)v79, v83);
  Swift::Bool v89 = shouldIncludeUnencryptedData()();
  uint64_t v90 = v236;
  char v91 = v239;
  uint64_t v92 = v235;
  if (v89)
  {
    uint64_t v93 = v221;
    defaultLogger()();
    os_log_type_t v94 = Logger.logObject.getter();
    os_log_type_t v95 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v94, v95))
    {
      uint64_t v96 = (uint8_t *)swift_slowAlloc();
      v249[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v96 = 136446210;
      char v97 = v91;
      unint64_t v98 = 0xEF746E6F7246746ELL;
      uint64_t v99 = v247;
      uint64_t v100 = 0x656D75636F446469;
      switch(v97)
      {
        case 1:
          uint64_t v101 = 0x6B636142746ELL;
          goto LABEL_22;
        case 2:
          unint64_t v98 = 0xE600000000000000;
          uint64_t v100 = 0x6569666C6573;
          break;
        case 3:
          uint64_t v100 = 0x7373656E6576696CLL;
          unint64_t v98 = 0xED00006F65646956;
          break;
        case 4:
          uint64_t v100 = 0x7261696C69787561;
          uint64_t v101 = 0x6F6564695679;
LABEL_22:
          unint64_t v98 = v101 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
          break;
        default:
          break;
      }
      uint64_t v248 = sub_100110D58(v100, v98, v249);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v94, v95, "allowing unencrypted CK data for %{public}s", v96, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v246(v93, v99);
      uint64_t v90 = v236;
      char v91 = v239;
    }
    else
    {

      v246(v93, v247);
    }
    uint64_t v102 = v250;
    unint64_t v103 = v251;
    uint64_t v250 = v90;
    unint64_t v251 = (unint64_t)v237;
    sub_10002CEB0(v90, (unint64_t)v237);
    sub_10000C5F4(v102, v103);
  }
  uint64_t v104 = v250;
  unint64_t v105 = v251;
  sub_10002CEB0(v250, v251);
  Class v106 = Data._bridgeToObjectiveC()().super.isa;
  sub_10000C5F4(v104, v105);
  id v107 = (id)DigestSha256();

  if (v107)
  {
    uint64_t v108 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v110 = v109;

    sub_10002CEB0(v108, v110);
    Swift::String v111 = Data.base64EncodedString(options:)(0);
    sub_10000C5F4(v108, v110);
    unint64_t v112 = (uint64_t *)(v92 + 24);
    swift_beginAccess();
    if (v111._object)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v248 = *v112;
      *unint64_t v112 = 0x8000000000000000;
      sub_1005626F8(v111._countAndFlagsBits, (uint64_t)v111._object, v91, isUniquelyReferenced_nonNull_native);
      *unint64_t v112 = v248;
      goto LABEL_30;
    }
  }
  else
  {
    swift_beginAccess();
    uint64_t v108 = 0;
    unint64_t v110 = 0xF000000000000000;
  }
  sub_10055FE8C(v91);
LABEL_30:
  swift_bridgeObjectRelease();
  swift_endAccess();
  uint64_t v114 = 0;
  switch(v251 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v250), v250))
      {
        __break(1u);
LABEL_98:
        __break(1u);
LABEL_99:
        __break(1u);
LABEL_100:
        __break(1u);
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
        JUMPOUT(0x10005979CLL);
      }
      uint64_t v114 = HIDWORD(v250) - (int)v250;
LABEL_35:
      swift_beginAccess();
      char v117 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v248 = *(void *)(v92 + 32);
      *(void *)(v92 + 32) = 0x8000000000000000;
      sub_1005625CC(v114, v91, v117);
      *(void *)(v92 + 32) = v248;
      swift_bridgeObjectRelease();
      swift_endAccess();
      uint64_t v118 = v234;
      defaultLogger()();
      sub_1000338D4(v108, v110);
      sub_1000338D4(v108, v110);
      uint64_t v119 = Logger.logObject.getter();
      os_log_type_t v120 = static os_log_type_t.debug.getter();
      BOOL v121 = os_log_type_enabled(v119, v120);
      unint64_t v233 = v110;
      uint64_t v232 = v108;
      if (v121)
      {
        uint64_t v122 = swift_slowAlloc();
        v249[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v122 = 136446466;
        unint64_t v123 = 0xEF746E6F7246746ELL;
        uint64_t v124 = 0x656D75636F446469;
        switch(v91)
        {
          case 1:
            uint64_t v125 = 0x6B636142746ELL;
            goto LABEL_42;
          case 2:
            unint64_t v123 = 0xE600000000000000;
            uint64_t v124 = 0x6569666C6573;
            break;
          case 3:
            uint64_t v124 = 0x7373656E6576696CLL;
            unint64_t v123 = 0xED00006F65646956;
            break;
          case 4:
            uint64_t v124 = 0x7261696C69787561;
            uint64_t v125 = 0x6F6564695679;
LABEL_42:
            unint64_t v123 = v125 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
            break;
          default:
            break;
        }
        uint64_t v248 = sub_100110D58(v124, v123, v249);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v122 + 12) = 2080;
        unint64_t v128 = v233;
        if (v233 >> 60 == 15)
        {
          uint64_t countAndFlagsBits = 0;
          object = (void *)0xE000000000000000;
          uint64_t v131 = v232;
        }
        else
        {
          uint64_t v131 = v232;
          Swift::String v132 = Data.base16EncodedString()();
          uint64_t countAndFlagsBits = v132._countAndFlagsBits;
          object = v132._object;
        }
        uint64_t v248 = sub_100110D58(countAndFlagsBits, (unint64_t)object, v249);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10000C5E0(v131, v128);
        sub_10000C5E0(v131, v128);
        _os_log_impl((void *)&_mh_execute_header, v119, v120, "hash for uploaded %{public}s: %s", (uint8_t *)v122, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v127 = v246;
        uint64_t v126 = v247;
        v246(v234, v247);
        char v91 = v239;
      }
      else
      {
        sub_10000C5E0(v108, v110);
        sub_10000C5E0(v108, v110);

        uint64_t v127 = v246;
        uint64_t v126 = v247;
        v246(v118, v247);
      }
      uint64_t v133 = v240;
      uint64_t v134 = (uint64_t)v228;
      uint64_t v135 = &v228[*(int *)(v240 + 48)];
      v216(v228, v241, v218);
      v213(v135, v238, v215);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v226 + 56))(v134, 0, 1, v133);
      swift_beginAccess();
      sub_10055EE98(v134, v91);
      swift_endAccess();
      uint64_t v136 = v227;
      defaultLogger()();
      uint64_t v137 = Logger.logObject.getter();
      os_log_type_t v138 = static os_log_type_t.debug.getter();
      BOOL v139 = os_log_type_enabled(v137, v138);
      uint64_t v140 = v229;
      if (v139)
      {
        uint64_t v141 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v141 = 0;
        _os_log_impl((void *)&_mh_execute_header, v137, v138, "--- BEGIN LOGGING ENCRYPTED IMAGE SIZE----", v141, 2u);
        uint64_t v126 = v247;
        swift_slowDealloc();
      }

      v127(v136, v126);
      defaultLogger()();
      uint64_t v142 = Logger.logObject.getter();
      uint64_t v143 = v126;
      os_log_type_t v144 = static os_log_type_t.debug.getter();
      BOOL v145 = os_log_type_enabled(v142, v144);
      uint64_t v146 = v230;
      if (v145)
      {
        uint64_t v147 = swift_slowAlloc();
        v249[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v147 = 136446466;
        unint64_t v148 = 0xEF746E6F7246746ELL;
        uint64_t v149 = 0x656D75636F446469;
        switch(v91)
        {
          case 1:
            uint64_t v150 = 0x6B636142746ELL;
            goto LABEL_56;
          case 2:
            unint64_t v148 = 0xE600000000000000;
            uint64_t v149 = 0x6569666C6573;
            break;
          case 3:
            uint64_t v149 = 0x7373656E6576696CLL;
            unint64_t v148 = 0xED00006F65646956;
            break;
          case 4:
            uint64_t v149 = 0x7261696C69787561;
            uint64_t v150 = 0x6F6564695679;
LABEL_56:
            unint64_t v148 = v150 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
            break;
          default:
            break;
        }
        uint64_t v248 = sub_100110D58(v149, v148, v249);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v147 + 12) = 2082;
        swift_beginAccess();
        uint64_t v152 = v231;
        switch(v251 >> 62)
        {
          case 1uLL:
            if (!__OFSUB__(HIDWORD(v250), v250)) {
              goto LABEL_61;
            }
            goto LABEL_99;
          case 2uLL:
            if (!__OFSUB__(*(void *)(v250 + 24), *(void *)(v250 + 16))) {
              goto LABEL_61;
            }
            goto LABEL_100;
          default:
LABEL_61:
            uint64_t v153 = Int.formattedByteSize.getter();
            uint64_t v248 = sub_100110D58(v153, v154, v249);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v142, v144, "%{public}s: %{public}s", (uint8_t *)v147, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v127 = v246;
            uint64_t v151 = v247;
            v246(v140, v247);
            break;
        }
      }
      else
      {

        v127(v140, v143);
        uint64_t v151 = v143;
        uint64_t v152 = v231;
      }
      defaultLogger()();
      uint64_t v155 = Logger.logObject.getter();
      os_log_type_t v156 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v155, v156))
      {
        long long v157 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)long long v157 = 134349056;
        swift_beginAccess();
        uint64_t v158 = 0;
        switch(v251 >> 62)
        {
          case 1uLL:
            LODWORD(v158) = HIDWORD(v250) - v250;
            if (__OFSUB__(HIDWORD(v250), v250)) {
              goto LABEL_101;
            }
            uint64_t v158 = (int)v158;
LABEL_68:
            v249[0] = v158;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v155, v156, "size in bytes: %{public}ld", v157, 0xCu);
            swift_slowDealloc();
            uint64_t v151 = v247;
            break;
          case 2uLL:
            uint64_t v160 = *(void *)(v250 + 16);
            uint64_t v159 = *(void *)(v250 + 24);
            BOOL v161 = __OFSUB__(v159, v160);
            uint64_t v158 = v159 - v160;
            if (!v161) {
              goto LABEL_68;
            }
            goto LABEL_102;
          case 3uLL:
            goto LABEL_68;
          default:
            uint64_t v158 = BYTE6(v251);
            goto LABEL_68;
        }
      }

      v127(v146, v151);
      defaultLogger()();
      uint64_t v162 = Logger.logObject.getter();
      os_log_type_t v163 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v162, v163))
      {
        uint64_t v164 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v164 = 0;
        _os_log_impl((void *)&_mh_execute_header, v162, v163, "--- END LOGGING ENCRYPTED IMAGE SIZE----", v164, 2u);
        uint64_t v151 = v247;
        swift_slowDealloc();
      }

      v127(v152, v151);
      id v165 = [objc_allocWithZone((Class)NSUUID) init];
      id v166 = [v165 UUIDString];

      uint64_t v167 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v169 = v168;

      swift_beginAccess();
      uint64_t v170 = v250;
      unint64_t v171 = v251;
      uint64_t v172 = type metadata accessor for URL();
      uint64_t v238 = *(void *)(v172 - 8);
      unsigned int v173 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v238 + 56);
      uint64_t v174 = (uint64_t)v224;
      v173(v224, 1, 1, v172);
      type metadata accessor for UploadAsset(0);
      unint64_t v175 = swift_allocObject();
      long long v240 = xmmword_100610EF0;
      *(_OWORD *)(v175 + 32) = xmmword_100610EF0;
      v173((char *)(v175 + OBJC_IVAR____TtC8coreidvd11UploadAsset_assetFileURL), 1, 1, v172);
      *(_OWORD *)(v175 + OBJC_IVAR____TtC8coreidvd11UploadAsset_systemData) = v240;
      *(void *)(v175 + 16) = v167;
      *(void *)(v175 + 24) = v169;
      uint64_t v176 = *(void *)(v175 + 32);
      unint64_t v177 = *(void *)(v175 + 40);
      *(void *)(v175 + 32) = v170;
      *(void *)(v175 + 40) = v171;
      sub_10002CEB0(v170, v171);
      sub_10000C5E0(v176, v177);
      *(unsigned char *)(v175 + 48) = v239;
      uint64_t v178 = v175 + OBJC_IVAR____TtC8coreidvd11UploadAsset_assetFileURL;
      swift_beginAccess();
      sub_10005D3BC(v174, v178);
      swift_endAccess();
      uint64_t v179 = v225;
      uint64_t v180 = v212;
      sub_1001F2F44(v225);
      if (v180)
      {
        sub_10000C6CC(v241, &qword_100720FC8);
        sub_10000C5E0(v236, (unint64_t)v237);
        sub_10000C5E0(v232, v233);
        swift_release();
        sub_10000C5F4(v250, v251);
        uint64_t v50 = v243;
        uint64_t v52 = v244;
        uint64_t v51 = v242;
        goto LABEL_73;
      }
      uint64_t v182 = v238;
      char v244 = (char *)v172;
      unsigned int v183 = v222;
      defaultLogger()();
      uint64_t v184 = v223;
      sub_10005D4CC((uint64_t)v179, v223);
      unsigned int v185 = Logger.logObject.getter();
      int v186 = static os_log_type_t.debug.getter();
      BOOL v187 = os_log_type_enabled(v185, (os_log_type_t)v186);
      uint64_t v188 = v241;
      if (v187)
      {
        LODWORD(v243) = v186;
        uint64_t v189 = swift_slowAlloc();
        uint64_t v242 = swift_slowAlloc();
        uint64_t v248 = v242;
        *(_DWORD *)uint64_t v189 = 136315394;
        unint64_t v190 = 0xEF746E6F7246746ELL;
        uint64_t v191 = 0x656D75636F446469;
        switch((char)v239)
        {
          case 1:
            uint64_t v192 = 0x6B636142746ELL;
            goto LABEL_82;
          case 2:
            unint64_t v190 = 0xE600000000000000;
            uint64_t v191 = 0x6569666C6573;
            break;
          case 3:
            uint64_t v191 = 0x7373656E6576696CLL;
            unint64_t v190 = 0xED00006F65646956;
            break;
          case 4:
            uint64_t v191 = 0x7261696C69787561;
            uint64_t v192 = 0x6F6564695679;
LABEL_82:
            unint64_t v190 = v192 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
            break;
          default:
            break;
        }
        uint64_t v252 = sub_100110D58(v191, v190, &v248);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v189 + 12) = 2080;
        uint64_t v194 = v184;
        uint64_t v195 = v219;
        sub_10005D4CC(v194, v219);
        uint64_t v196 = v182;
        char v197 = *(unsigned int (**)(uint64_t, uint64_t, char *))(v182 + 48);
        char v198 = v244;
        if (v197(v195, 1, v244) == 1)
        {
          sub_10000C6CC(v195, &qword_100720A68);
          uint64_t v199 = 0;
          unint64_t v200 = 0xE000000000000000;
        }
        else
        {
          uint64_t v201 = URL.absoluteString.getter();
          uint64_t v202 = v196;
          uint64_t v199 = v201;
          unint64_t v200 = v203;
          (*(void (**)(uint64_t, char *))(v202 + 8))(v195, v198);
        }
        uint64_t v252 = sub_100110D58(v199, v200, &v248);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10000C6CC(v223, &qword_100720A68);
        _os_log_impl((void *)&_mh_execute_header, v185, (os_log_type_t)v243, "Successfully persisted assetData to disk for assetType: %s at path: %s", (uint8_t *)v189, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        unint64_t v193 = v246;
        v246(v222, v247);
        uint64_t v188 = v241;
      }
      else
      {
        sub_10000C6CC(v184, &qword_100720A68);

        unint64_t v193 = v246;
        v246(v183, v247);
      }
      uint64_t v204 = v236;
      switch(*(unsigned char *)(v175 + 48))
      {
        case 1:
          unint64_t v208 = 0xD000000000000025;
          unint64_t v209 = 0x8000000100631D30;
          uint64_t v210 = 0x3165663761383639;
          goto LABEL_95;
        case 2:
          unint64_t v208 = 0xD000000000000024;
          unint64_t v209 = 0x8000000100631CD0;
          uint64_t v210 = 0x6337303262616363;
          goto LABEL_95;
        case 3:
          unint64_t v208 = 0xD00000000000002CLL;
          unint64_t v209 = 0x8000000100631CA0;
          uint64_t v210 = 0x3162336130356262;
          goto LABEL_95;
        case 4:
        case 5:
          defaultLogger()();
          uint64_t v205 = Logger.logObject.getter();
          os_log_type_t v206 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v205, v206))
          {
            uint64_t v207 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v207 = 0;
            _os_log_impl((void *)&_mh_execute_header, v205, v206, "This should never happen.", v207, 2u);
            unint64_t v193 = v246;
            swift_slowDealloc();
          }

          sub_10000C5E0(v236, (unint64_t)v237);
          sub_10000C5E0(v232, v233);
          v193(v220, v247);
          goto LABEL_96;
        default:
          unint64_t v208 = 0xD000000000000026;
          unint64_t v209 = 0x8000000100631D00;
          uint64_t v210 = 0x3930393464363865;
LABEL_95:
          unint64_t v211 = 0xE800000000000000;
          logMilestone(tag:description:)(*(Swift::String *)&v210, *(Swift::String *)&v208);
          sub_10000C5E0(v204, (unint64_t)v237);
          sub_10000C5E0(v232, v233);
LABEL_96:
          sub_10000C6CC((uint64_t)v179, &qword_100720A68);
          sub_10000C6CC(v188, &qword_100720FC8);
          sub_10000C5F4(v250, v251);
          break;
      }
      break;
    case 2uLL:
      uint64_t v115 = *(void *)(v250 + 16);
      uint64_t v116 = *(void *)(v250 + 24);
      uint64_t v114 = v116 - v115;
      if (!__OFSUB__(v116, v115)) {
        goto LABEL_35;
      }
      goto LABEL_98;
    case 3uLL:
      goto LABEL_35;
    default:
      uint64_t v114 = BYTE6(v251);
      goto LABEL_35;
  }
  return v175;
}

unint64_t sub_100059848(os_unfair_lock_s *a1, uint64_t a2, void *a3)
{
  v262 = a3;
  uint64_t v268 = a2;
  int v267 = a1;
  *(void *)&long long v265 = type metadata accessor for DIPError.Code();
  uint64_t v264 = *(void *)(v265 - 8);
  __chkstk_darwin(v265);
  uint64_t v4 = (char *)&v218 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100007764(&qword_100720FA0);
  __chkstk_darwin(v5 - 8);
  uint64_t v226 = (char *)&v218 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v224 = sub_100007764(&qword_100720FA8);
  uint64_t v7 = __chkstk_darwin(v224);
  uint64_t v225 = (char *)&v218 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v234 = (uint64_t)&v218 - v9;
  uint64_t v241 = type metadata accessor for AEADKey();
  uint64_t v240 = *(void *)(v241 - 8);
  __chkstk_darwin(v241);
  unint64_t v233 = (char *)&v218 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v223 = type metadata accessor for UUID();
  uint64_t v222 = *(void *)(v223 - 8);
  __chkstk_darwin(v223);
  v221 = (char *)&v218 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v239 = sub_100007764(&qword_100720FB0);
  uint64_t v238 = *(void *)(v239 - 8);
  __chkstk_darwin(v239);
  uint64_t v232 = (char *)&v218 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100007764(&qword_100720A68);
  __chkstk_darwin(v13 - 8);
  uint64_t v242 = (char *)&v218 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v245 = type metadata accessor for URL();
  uint64_t v250 = *(void *)(v245 - 8);
  uint64_t v15 = __chkstk_darwin(v245);
  char v244 = (char *)&v218 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v18 = (os_unfair_lock_s *)((char *)&v218 - v17);
  uint64_t v237 = type metadata accessor for DIPFileUploadCryptor.Result();
  uint64_t v236 = *(void *)(v237 - 8);
  __chkstk_darwin(v237);
  uint64_t v20 = (char *)&v218 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DIPFileUploadCryptor.Options();
  uint64_t v248 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  unint64_t v251 = (char *)&v218 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v260 = type metadata accessor for AES.GCM.Nonce();
  uint64_t v259 = *(os_unfair_lock_s **)(v260 - 8);
  __chkstk_darwin(v260);
  v258 = (char *)&v218 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for SymmetricKeySize();
  __chkstk_darwin(v24 - 8);
  uint64_t v255 = (uint64_t)&v218 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((void *)&v257 + 1) = type metadata accessor for SymmetricKey();
  *(void *)&long long v257 = *(void *)(*((void *)&v257 + 1) - 8);
  __chkstk_darwin(*((void *)&v257 + 1));
  unint64_t v256 = (unint64_t)&v218 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for Logger();
  uint64_t v28 = *(os_unfair_lock_s **)(v27 - 8);
  uint64_t v29 = __chkstk_darwin(v27);
  int v231 = (char *)&v218 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v29);
  int v227 = (char *)&v218 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v228 = (char *)&v218 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v235 = (char *)&v218 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  char v229 = (char *)&v218 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  int v230 = (os_unfair_lock_s *)((char *)&v218 - v40);
  uint64_t v41 = __chkstk_darwin(v39);
  uint64_t v243 = (char *)&v218 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  v246 = (char *)&v218 - v44;
  __chkstk_darwin(v43);
  uint64_t v46 = (char *)&v218 - v45;
  defaultLogger()();
  uint64_t v47 = Logger.logObject.getter();
  os_log_type_t v48 = static os_log_type_t.debug.getter();
  BOOL v49 = os_log_type_enabled(v47, v48);
  uint64_t v263 = v27;
  uint64_t v249 = v21;
  v253 = v18;
  uint64_t v252 = v20;
  unint64_t v266 = (unint64_t)v4;
  v254 = v28;
  if (v49)
  {
    uint64_t v50 = 0x656D75636F446469;
    uint64_t v51 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v269 = swift_slowAlloc();
    *(_DWORD *)uint64_t v51 = 136315138;
    unint64_t v52 = 0xEF746E6F7246746ELL;
    switch((char)v268)
    {
      case 1:
        unint64_t v52 = 0xEE006B636142746ELL;
        break;
      case 2:
        unint64_t v52 = 0xE600000000000000;
        uint64_t v50 = 0x6569666C6573;
        break;
      case 3:
        uint64_t v50 = 0x7373656E6576696CLL;
        unint64_t v52 = 0xED00006F65646956;
        break;
      case 4:
        uint64_t v50 = 0x7261696C69787561;
        unint64_t v52 = 0xEE006F6564695679;
        break;
      default:
        break;
    }
    uint64_t v271 = sub_100110D58(v50, v52, (uint64_t *)&v269);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "Saving %s FileHandle data to CloudKit", v51, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v53 = *(void (**)(void, void))&v254[2]._os_unfair_lock_opaque;
    v53(v46, v263);
  }
  else
  {

    uint64_t v53 = *(void (**)(void, void))&v28[2]._os_unfair_lock_opaque;
    v53(v46, v27);
  }
  if (!v267)
  {
    uint64_t v66 = 0x656D75636F446469;
    *(void *)&long long v269 = 0;
    *((void *)&v269 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(58);
    v67._object = (void *)0x8000000100631BB0;
    v67._uint64_t countAndFlagsBits = 0xD000000000000038;
    String.append(_:)(v67);
    uint64_t v68 = (void *)0xEF746E6F7246746ELL;
    unint64_t v69 = v266;
    uint64_t v70 = v265;
    uint64_t v71 = v264;
    switch((char)v268)
    {
      case 1:
        uint64_t v68 = (void *)0xEE006B636142746ELL;
        break;
      case 2:
        uint64_t v68 = (void *)0xE600000000000000;
        uint64_t v66 = 0x6569666C6573;
        break;
      case 3:
        uint64_t v66 = 0x7373656E6576696CLL;
        uint64_t v68 = (void *)0xED00006F65646956;
        break;
      case 4:
        uint64_t v66 = 0x7261696C69787561;
        uint64_t v68 = (void *)0xEE006F6564695679;
        break;
      default:
        break;
    }
    v96._uint64_t countAndFlagsBits = v66;
    v96._object = v68;
    String.append(_:)(v96);
    swift_bridgeObjectRelease();
    uint64_t v268 = v269;
    (*(void (**)(unint64_t, void, uint64_t))(v71 + 104))(v69, enum case for DIPError.Code.livenessTempFileCreationFailed(_:), v70);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    goto LABEL_34;
  }
  v220 = v53;
  char v54 = v267;
  static SymmetricKeySize.bits128.getter();
  unint64_t v55 = v256;
  SymmetricKey.init(size:)();
  unint64_t v56 = v261;
  SymmetricKey.withUnsafeBytes<A>(_:)();
  (*(void (**)(unint64_t, void))(v257 + 8))(v55, *((void *)&v257 + 1));
  unint64_t v261 = *((void *)&v269 + 1);
  int v267 = (os_unfair_lock_s *)v269;
  Swift::Bool v57 = v258;
  AES.GCM.Nonce.init()();
  AES.GCM.Nonce.withUnsafeBytes<A>(_:)();
  (*(void (**)(char *, uint64_t))&v259[2]._os_unfair_lock_opaque)(v57, v260);
  long long v58 = v269;
  id v59 = [objc_allocWithZone((Class)NSUUID) init];
  id v60 = [v59 UUIDString];

  uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v63 = v62;

  sub_10000C728(v262, v262[3]);
  uint64_t v64 = dispatch thunk of IdentityKey.getIdentityPublicKeyData()();
  if (v56)
  {
    swift_bridgeObjectRelease();
    sub_10000C5F4(v58, *((unint64_t *)&v58 + 1));
    sub_10000C5F4((uint64_t)v267, v261);

LABEL_33:
    unint64_t v69 = v266;
    uint64_t v70 = v265;
    uint64_t v71 = v264;
LABEL_34:
    (*(void (**)(unint64_t, void, uint64_t))(v71 + 104))(v69, enum case for DIPError.Code.internalError(_:), v70);
    swift_errorRetain();
    unint64_t v121 = sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    return v121;
  }
  uint64_t v72 = v64;
  uint64_t v73 = v65;
  swift_bridgeObjectRetain();
  uint64_t v219 = v54;
  sub_10002CEB0((uint64_t)v267, v261);
  sub_10002CEB0(v58, *((unint64_t *)&v58 + 1));
  sub_10002CEB0(v72, (unint64_t)v73);
  v262 = v73;
  uint64_t v260 = v61;
  DIPFileUploadCryptor.Options.init(eraseInputFileData:copyDataForInternalDiagnostics:uuid:key:nonce:publicKey:)();
  static DIPFileUploadCryptor.encryptFileHandle(_:withOptions:)();
  v258 = v63;
  uint64_t v255 = v72;
  long long v257 = v58;
  DIPFileUploadCryptor.Result.encryptedFileURL.getter();
  uint64_t v74 = (uint64_t)v242;
  DIPFileUploadCryptor.Result.internalDiagnosticsURL.getter();
  uint64_t v75 = v247 + OBJC_IVAR____TtC8coreidvd34IdentityProofingAssetUploadManager_livenessFlowInternalDiagnosticsVideoURL;
  swift_beginAccess();
  sub_10005D3BC(v74, v75);
  swift_endAccess();
  if (qword_10071F4B0 != -1) {
    swift_once();
  }
  os_log_type_t v76 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
  uint64_t v77 = (uint64_t)&v76[4];
  unint64_t v78 = v76 + 52;
  os_unfair_lock_lock(v76 + 52);
  sub_1000262B4(v77, &v269);
  uint64_t v79 = v250;
  uint64_t v80 = v245;
  os_unfair_lock_unlock(v78);
  uint64_t v81 = v270;
  swift_retain();
  sub_1000262D0((uint64_t)&v269);
  uint64_t v82 = *(os_unfair_lock_s **)(v81 + 16);
  uint64_t v83 = v82 + 4;
  uint64_t v84 = v82 + 6;
  os_unfair_lock_lock(v82 + 6);
  sub_10023C370(v83);
  os_unfair_lock_unlock(v84);
  swift_release();
  defaultLogger()();
  uint64_t v85 = Logger.logObject.getter();
  os_log_type_t v86 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v85, v86))
  {
    uint64_t v87 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v87 = 134217984;
    uint64_t v88 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
    uint64_t v89 = (uint64_t)&v88[4];
    uint64_t v90 = v88 + 52;
    os_unfair_lock_lock(v88 + 52);
    sub_1000262B4(v89, &v269);
    os_unfair_lock_unlock(v90);
    uint64_t v91 = v270;
    swift_retain();
    sub_1000262D0((uint64_t)&v269);
    uint64_t v92 = *(os_unfair_lock_s **)(v91 + 16);
    uint64_t v93 = v92 + 4;
    os_log_type_t v94 = v92 + 6;
    os_unfair_lock_lock(v92 + 6);
    sub_100006754(v93, &v271);
    unint64_t v256 = 0;
    os_unfair_lock_unlock(v94);
    uint64_t v95 = v271;
    swift_release();
    *(void *)&long long v269 = v95;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v85, v86, "Current upload count: %ld", v87, 0xCu);
    swift_slowDealloc();
    uint64_t v79 = v250;
  }
  else
  {
    unint64_t v256 = 0;
  }
  char v97 = v244;
  unint64_t v98 = v243;
  uint64_t v99 = v254;

  uint64_t v100 = v99 + 2;
  uint64_t countAndFlagsBits = v263;
  uint64_t v102 = v220;
  v220(v246, v263);
  defaultLogger()();
  unint64_t v103 = *(void (**)(void, void, void))(v79 + 16);
  v246 = (char *)(v79 + 16);
  uint64_t v218 = v103;
  v103(v97, v253, v80);
  uint64_t v104 = Logger.logObject.getter();
  LODWORD(v254) = static os_log_type_t.debug.getter();
  BOOL v105 = os_log_type_enabled(v104, (os_log_type_t)v254);
  uint64_t v259 = v100;
  if (v105)
  {
    Class v106 = v104;
    uint64_t v107 = 0x656D75636F446469;
    uint64_t v108 = swift_slowAlloc();
    *(void *)&long long v269 = swift_slowAlloc();
    *(_DWORD *)uint64_t v108 = 136315394;
    unint64_t v109 = 0xEF746E6F7246746ELL;
    unint64_t v110 = v244;
    Swift::String v111 = v106;
    switch((char)v268)
    {
      case 1:
        unint64_t v109 = 0xEE006B636142746ELL;
        break;
      case 2:
        unint64_t v109 = 0xE600000000000000;
        uint64_t v107 = 0x6569666C6573;
        break;
      case 3:
        uint64_t v107 = 0x7373656E6576696CLL;
        unint64_t v109 = 0xED00006F65646956;
        break;
      case 4:
        uint64_t v107 = 0x7261696C69787561;
        unint64_t v109 = 0xEE006F6564695679;
        break;
      default:
        break;
    }
    uint64_t v271 = sub_100110D58(v107, v109, (uint64_t *)&v269);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v108 + 12) = 2080;
    uint64_t v116 = URL.absoluteString.getter();
    uint64_t v271 = sub_100110D58(v116, v117, (uint64_t *)&v269);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v112 = *(void (**)(void, void))(v250 + 8);
    uint64_t v113 = v245;
    v112(v110, v245);
    _os_log_impl((void *)&_mh_execute_header, v111, (os_log_type_t)v254, "Successfully persisted assetData to disk for assetType: %s at path: %s", (uint8_t *)v108, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t countAndFlagsBits = v263;
    v220(v243, v263);
    uint64_t v115 = v253;
    uint64_t v114 = (uint64_t)v267;
  }
  else
  {
    unint64_t v112 = *(void (**)(void, void))(v79 + 8);
    v112(v97, v80);

    v102(v98, countAndFlagsBits);
    uint64_t v113 = v80;
    uint64_t v114 = (uint64_t)v267;
    uint64_t v115 = v253;
  }
  unint64_t v118 = v256;
  uint64_t v119 = Data.init(contentsOf:options:)();
  if (v118)
  {

    sub_10000C5F4(v255, (unint64_t)v262);
    sub_10000C5F4(v257, *((unint64_t *)&v257 + 1));
    sub_10000C5F4(v114, v261);
    swift_bridgeObjectRelease();
    v112(v115, v113);
    (*(void (**)(char *, uint64_t))(v236 + 8))(v252, v237);
    (*(void (**)(char *, uint64_t))(v248 + 8))(v251, v249);
    goto LABEL_33;
  }
  unint64_t v123 = (os_unfair_lock_s *)v119;
  unint64_t v124 = v120;
  char v244 = 0;
  uint64_t v125 = v230;
  defaultLogger()();
  unint64_t v126 = v124 >> 62;
  sub_10002CEB0((uint64_t)v123, v124);
  sub_10002CEB0((uint64_t)v123, v124);
  uint64_t v127 = Logger.logObject.getter();
  unint64_t v128 = v124;
  os_log_type_t v129 = static os_log_type_t.debug.getter();
  BOOL v130 = os_log_type_enabled(v127, v129);
  unint64_t v256 = v128;
  if (v130)
  {
    uint64_t v131 = (uint8_t *)swift_slowAlloc();
    uint64_t countAndFlagsBits = swift_slowAlloc();
    *(void *)&long long v269 = countAndFlagsBits;
    *(_DWORD *)uint64_t v131 = 136446210;
    switch((int)v126)
    {
      case 1:
        if (!__OFSUB__(HIDWORD(v123), v123)) {
          goto LABEL_42;
        }
        goto LABEL_92;
      case 2:
        if (!__OFSUB__(*(void *)&v123[6]._os_unfair_lock_opaque, *(void *)&v123[4]._os_unfair_lock_opaque)) {
          goto LABEL_42;
        }
        goto LABEL_93;
      default:
LABEL_42:
        uint64_t v132 = Int.formattedByteSize.getter();
        uint64_t v115 = (os_unfair_lock_s *)v133;
        uint64_t v271 = sub_100110D58(v132, v133, (uint64_t *)&v269);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        unint64_t v134 = v256;
        sub_10000C5F4((uint64_t)v123, v256);
        sub_10000C5F4((uint64_t)v123, v134);
        _os_log_impl((void *)&_mh_execute_header, v127, v129, "Read %{public}s from file to upload", v131, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v220(v230, v263);
        break;
    }
  }
  else
  {
    sub_10000C5F4((uint64_t)v123, v128);
    sub_10000C5F4((uint64_t)v123, v128);

    v220(v125, countAndFlagsBits);
  }
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v136 = (id)DigestSha256();

  if (v136)
  {
    uint64_t v137 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v139 = v138;

    sub_10002CEB0(v137, v139);
    Swift::String v140 = Data.base64EncodedString(options:)(0);
    uint64_t countAndFlagsBits = v140._countAndFlagsBits;
    uint64_t v125 = (os_unfair_lock_s *)v137;
    unint64_t v266 = v139;
    sub_10000C5F4(v137, v139);
    uint64_t v141 = (uint64_t *)(v247 + 24);
    swift_beginAccess();
    unsigned __int8 v142 = v268;
    if (v140._object)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v271 = *v141;
      *uint64_t v141 = 0x8000000000000000;
      sub_1005626F8(v140._countAndFlagsBits, (uint64_t)v140._object, v142, isUniquelyReferenced_nonNull_native);
      *uint64_t v141 = v271;
      swift_bridgeObjectRelease();
      uint64_t v144 = (uint64_t)v125;
      goto LABEL_49;
    }
    uint64_t v144 = (uint64_t)v125;
  }
  else
  {
    swift_beginAccess();
    uint64_t v144 = 0;
    unint64_t v266 = 0xF000000000000000;
    unsigned __int8 v142 = v268;
  }
  sub_10055FE8C(v142);
  swift_bridgeObjectRelease();
LABEL_49:
  swift_endAccess();
  uint64_t v145 = 0;
  switch((int)v126)
  {
    case 0:
      uint64_t v145 = BYTE6(v256);
      goto LABEL_54;
    case 1:
      if (__OFSUB__(HIDWORD(v123), v123))
      {
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
        os_unfair_lock_unlock((os_unfair_lock_t)countAndFlagsBits);
        __break(1u);
        os_unfair_lock_unlock(v115);
        __break(1u);
        os_unfair_lock_unlock(v125);
        __break(1u);
        JUMPOUT(0x10005C1F8);
      }
      uint64_t v145 = HIDWORD(v123) - (int)v123;
LABEL_54:
      *(void *)&long long v265 = v126;
      uint64_t v148 = v247;
      swift_beginAccess();
      char v149 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v271 = *(void *)(v148 + 32);
      *(void *)(v148 + 32) = 0x8000000000000000;
      sub_1005625CC(v145, v142, v149);
      *(void *)(v148 + 32) = v271;
      swift_bridgeObjectRelease();
      swift_endAccess();
      uint64_t v150 = v229;
      defaultLogger()();
      unint64_t v151 = v266;
      sub_1000338D4(v144, v266);
      sub_1000338D4(v144, v151);
      uint64_t v152 = Logger.logObject.getter();
      uint64_t v153 = v144;
      os_log_type_t v154 = static os_log_type_t.debug.getter();
      BOOL v155 = os_log_type_enabled(v152, v154);
      v254 = v123;
      uint64_t v264 = v153;
      if (v155)
      {
        uint64_t v156 = 0x656D75636F446469;
        uint64_t v157 = swift_slowAlloc();
        *(void *)&long long v269 = swift_slowAlloc();
        *(_DWORD *)uint64_t v157 = 136446466;
        unint64_t v158 = 0xEF746E6F7246746ELL;
        switch(v142)
        {
          case 1u:
            unint64_t v158 = 0xEE006B636142746ELL;
            break;
          case 2u:
            unint64_t v158 = 0xE600000000000000;
            uint64_t v156 = 0x6569666C6573;
            break;
          case 3u:
            uint64_t v156 = 0x7373656E6576696CLL;
            unint64_t v158 = 0xED00006F65646956;
            break;
          case 4u:
            uint64_t v156 = 0x7261696C69787561;
            unint64_t v158 = 0xEE006F6564695679;
            break;
          default:
            break;
        }
        uint64_t v271 = sub_100110D58(v156, v158, (uint64_t *)&v269);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v157 + 12) = 2080;
        unint64_t v160 = v266;
        if (v266 >> 60 == 15)
        {
          uint64_t v161 = 0;
          object = (void *)0xE000000000000000;
          uint64_t v163 = v264;
        }
        else
        {
          uint64_t v163 = v264;
          Swift::String v164 = Data.base16EncodedString()();
          uint64_t v161 = v164._countAndFlagsBits;
          object = v164._object;
        }
        uint64_t v271 = sub_100110D58(v161, (unint64_t)object, (uint64_t *)&v269);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10000C5E0(v163, v160);
        sub_10000C5E0(v163, v160);
        _os_log_impl((void *)&_mh_execute_header, v152, v154, "hash for uploaded %{public}s: %s", (uint8_t *)v157, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v159 = v263;
        v220(v229, v263);
        unsigned __int8 v142 = v268;
      }
      else
      {
        sub_10000C5E0(v153, v151);
        sub_10000C5E0(v153, v151);

        uint64_t v159 = v263;
        v220(v150, v263);
      }
      defaultLogger()();
      id v165 = Logger.logObject.getter();
      os_log_type_t v166 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v165, v166))
      {
        uint64_t v167 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v167 = 0;
        _os_log_impl((void *)&_mh_execute_header, v165, v166, "--- BEGIN LOGGING ENCRYPTED FILE SIZE----", v167, 2u);
        uint64_t v159 = v263;
        swift_slowDealloc();
      }

      uint64_t v168 = v220;
      uint64_t v125 = v259;
      v220(v235, v159);
      uint64_t v169 = v228;
      defaultLogger()();
      uint64_t v170 = v254;
      unint64_t v171 = v256;
      sub_10002CEB0((uint64_t)v254, v256);
      sub_10002CEB0((uint64_t)v170, v171);
      uint64_t v172 = Logger.logObject.getter();
      os_log_type_t v173 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v172, v173))
      {
        uint64_t v174 = 0x656D75636F446469;
        uint64_t countAndFlagsBits = swift_slowAlloc();
        uint64_t v175 = swift_slowAlloc();
        *(void *)&long long v269 = v175;
        *(_DWORD *)uint64_t countAndFlagsBits = 136446466;
        unint64_t v176 = 0xEF746E6F7246746ELL;
        uint64_t v125 = (os_unfair_lock_s *)v175;
        switch(v142)
        {
          case 1u:
            unint64_t v176 = 0xEE006B636142746ELL;
            break;
          case 2u:
            unint64_t v176 = 0xE600000000000000;
            uint64_t v174 = 0x6569666C6573;
            break;
          case 3u:
            uint64_t v174 = 0x7373656E6576696CLL;
            unint64_t v176 = 0xED00006F65646956;
            break;
          case 4u:
            uint64_t v174 = 0x7261696C69787561;
            unint64_t v176 = 0xEE006F6564695679;
            break;
          default:
            break;
        }
        uint64_t v271 = sub_100110D58(v174, v176, (uint64_t *)&v269);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(countAndFlagsBits + 12) = 2082;
        uint64_t v115 = v267;
        uint64_t v170 = v254;
        switch((uint64_t)v265)
        {
          case 1:
            if (!__OFSUB__(HIDWORD(v254), v254)) {
              goto LABEL_78;
            }
            goto LABEL_94;
          case 2:
            if (!__OFSUB__(*(void *)&v254[6]._os_unfair_lock_opaque, *(void *)&v254[4]._os_unfair_lock_opaque)) {
              goto LABEL_78;
            }
            goto LABEL_95;
          default:
LABEL_78:
            uint64_t v177 = Int.formattedByteSize.getter();
            uint64_t v271 = sub_100110D58(v177, v178, (uint64_t *)&v269);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            unint64_t v171 = v256;
            sub_10000C5F4((uint64_t)v170, v256);
            sub_10000C5F4((uint64_t)v170, v171);
            _os_log_impl((void *)&_mh_execute_header, v172, v173, "%{public}s: %{public}s", (uint8_t *)countAndFlagsBits, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v125 = v259;
            v220(v228, v263);
            break;
        }
      }
      else
      {
        sub_10000C5F4((uint64_t)v170, v171);
        sub_10000C5F4((uint64_t)v170, v171);

        v168(v169, v159);
        uint64_t v115 = v267;
      }
      uint64_t v179 = v227;
      defaultLogger()();
      sub_10002CEB0((uint64_t)v170, v171);
      uint64_t v180 = Logger.logObject.getter();
      uint64_t countAndFlagsBits = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v180, (os_log_type_t)countAndFlagsBits))
      {
        uint64_t v181 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v181 = 134349056;
        uint64_t v182 = v181;
        uint64_t v183 = 0;
        switch((uint64_t)v265)
        {
          case 1:
            LODWORD(v183) = HIDWORD(v170) - v170;
            if (__OFSUB__(HIDWORD(v170), v170)) {
              goto LABEL_96;
            }
            uint64_t v183 = (int)v183;
LABEL_86:
            *(void *)&long long v269 = v183;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            sub_10000C5F4((uint64_t)v170, v256);
            _os_log_impl((void *)&_mh_execute_header, v180, (os_log_type_t)countAndFlagsBits, "size in bytes: %{public}ld", v182, 0xCu);
            swift_slowDealloc();
            break;
          case 2:
            uint64_t v185 = *(void *)&v170[4]._os_unfair_lock_opaque;
            uint64_t v184 = *(void *)&v170[6]._os_unfair_lock_opaque;
            BOOL v186 = __OFSUB__(v184, v185);
            uint64_t v183 = v184 - v185;
            if (!v186) {
              goto LABEL_86;
            }
            goto LABEL_97;
          case 3:
            goto LABEL_86;
          default:
            uint64_t v183 = BYTE6(v256);
            goto LABEL_86;
        }
      }
      else
      {
        sub_10000C5F4((uint64_t)v170, v171);
      }
      uint64_t v187 = v223;
      uint64_t v188 = v222;

      uint64_t v189 = v220;
      v220(v179, v263);
      defaultLogger()();
      unint64_t v190 = Logger.logObject.getter();
      os_log_type_t v191 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v190, v191))
      {
        uint64_t v192 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v192 = 0;
        _os_log_impl((void *)&_mh_execute_header, v190, v191, "--- END LOGGING ENCRYPTED FILE SIZE----", v192, 2u);
        uint64_t v189 = v220;
        swift_slowDealloc();
      }

      v189(v231, v263);
      unint64_t v193 = v221;
      UUID.init()();
      UUID.uuidString.getter();
      (*(void (**)(char *, uint64_t))(v188 + 8))(v193, v187);
      long long v265 = xmmword_100610EF0;
      long long v269 = xmmword_100610EF0;
      sub_10002CEB0((uint64_t)v170, v256);
      sub_10005D424();
      sub_10005D478();
      uint64_t v194 = v232;
      SealedMessage.init(keyID:data:unencryptedData:)();
      Data.base64EncodedString(options:)(0);
      Data.base64EncodedString(options:)(0);
      uint64_t v195 = v233;
      AEADKey.init(secretKey:nonce:)();
      uint64_t v196 = v224;
      uint64_t v197 = v234;
      uint64_t v198 = v234 + *(int *)(v224 + 48);
      uint64_t v199 = *(void (**)(void, void, void))(v238 + 16);
      v199(v234, v194, v239);
      unint64_t v200 = *(void (**)(void, void, void))(v240 + 16);
      v200(v198, v195, v241);
      uint64_t v201 = v225;
      uint64_t v202 = &v225[*(int *)(v196 + 48)];
      uint64_t v203 = v239;
      v199(v225, v197, v239);
      uint64_t v204 = v241;
      v200(v202, v198, v241);
      uint64_t v205 = sub_100007764(&qword_100720FC8);
      uint64_t v206 = (uint64_t)v226;
      uint64_t v207 = &v226[*(int *)(v205 + 48)];
      (*(void (**)(char *, char *, uint64_t))(v238 + 32))(v226, v201, v203);
      (*(void (**)(char *, char *, uint64_t))(v240 + 32))(v207, v202, v204);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v205 - 8) + 56))(v206, 0, 1, v205);
      swift_beginAccess();
      LOBYTE(v194) = v268;
      sub_10055EE98(v206, v268);
      swift_endAccess();
      uint64_t v208 = (uint64_t)v242;
      uint64_t v209 = v245;
      v218(v242, v253, v245);
      uint64_t v210 = v250;
      unint64_t v211 = *(void (**)(void, void, void, void))(v250 + 56);
      v211(v208, 0, 1, v209);
      type metadata accessor for UploadAsset(0);
      unint64_t v121 = swift_allocObject();
      *(_OWORD *)(v121 + 32) = v265;
      v211(v121 + OBJC_IVAR____TtC8coreidvd11UploadAsset_assetFileURL, 1, 1, v209);
      *(_OWORD *)(v121 + OBJC_IVAR____TtC8coreidvd11UploadAsset_systemData) = v265;
      uint64_t v212 = v258;
      *(void *)(v121 + 16) = v260;
      *(void *)(v121 + 24) = v212;
      uint64_t v213 = *(void *)(v121 + 32);
      unint64_t v214 = *(void *)(v121 + 40);
      uint64_t v215 = v254;
      unint64_t v216 = v256;
      *(void *)(v121 + 32) = v254;
      *(void *)(v121 + 40) = v216;
      sub_10002CEB0((uint64_t)v215, v216);
      sub_10000C5E0(v213, v214);
      *(unsigned char *)(v121 + 48) = (_BYTE)v194;
      uint64_t v217 = v121 + OBJC_IVAR____TtC8coreidvd11UploadAsset_assetFileURL;
      swift_beginAccess();
      sub_10005D3BC(v208, v217);
      swift_endAccess();

      sub_10000C5E0(v264, v266);
      sub_10000C5F4((uint64_t)v215, v216);
      sub_10000C5F4(v255, (unint64_t)v262);
      sub_10000C5F4(v257, *((unint64_t *)&v257 + 1));
      sub_10000C5F4((uint64_t)v267, v261);
      sub_10000C6CC(v234, &qword_100720FA8);
      (*(void (**)(char *, uint64_t))(v240 + 8))(v233, v241);
      (*(void (**)(char *, uint64_t))(v238 + 8))(v232, v239);
      (*(void (**)(os_unfair_lock_s *, uint64_t))(v210 + 8))(v253, v209);
      (*(void (**)(char *, uint64_t))(v236 + 8))(v252, v237);
      (*(void (**)(char *, uint64_t))(v248 + 8))(v251, v249);
      break;
    case 2:
      uint64_t v147 = *(void *)&v123[4]._os_unfair_lock_opaque;
      uint64_t v146 = *(void *)&v123[6]._os_unfair_lock_opaque;
      uint64_t v145 = v146 - v147;
      if (!__OFSUB__(v146, v147)) {
        goto LABEL_54;
      }
      goto LABEL_91;
    case 3:
      goto LABEL_54;
    default:
      JUMPOUT(0);
  }
  return v121;
}

uint64_t sub_10005C29C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_10005C2B4(a1, a2, a3);
}

uint64_t sub_10005C2B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  v14[3] = &type metadata for UnsafeRawBufferPointer;
  v14[4] = &protocol witness table for UnsafeRawBufferPointer;
  v14[0] = a1;
  v14[1] = a2;
  uint64_t v4 = sub_10000C728(v14, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  uint64_t v5 = (unsigned char *)*v4;
  if (*v4 && (v6 = (unsigned char *)v4[1], uint64_t v7 = v6 - v5, v6 != v5))
  {
    if (v7 <= 14)
    {
      uint64_t v8 = sub_10014D31C(v5, v6);
      unint64_t v9 = v12 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((unint64_t)v7 >= 0x7FFFFFFF)
    {
      uint64_t v8 = sub_10014D3E0((uint64_t)v5, (uint64_t)v6);
      unint64_t v9 = v13 | 0x8000000000000000;
    }
    else
    {
      uint64_t v8 = sub_10014D45C((uint64_t)v5, (uint64_t)v6);
      unint64_t v9 = v11 | 0x4000000000000000;
    }
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0xC000000000000000;
  }
  uint64_t result = _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v14);
  *a3 = v8;
  a3[1] = v9;
  return result;
}

uint64_t sub_10005C380(uint64_t a1, char a2, char a3, uint64_t a4)
{
  *(void *)(v5 + 64) = a4;
  *(void *)(v5 + 72) = v4;
  *(unsigned char *)(v5 + 201) = a3;
  *(unsigned char *)(v5 + 200) = a2;
  *(void *)(v5 + 56) = a1;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  *(void *)(v5 + 80) = v6;
  *(void *)(v5 + 88) = *(void *)(v6 - 8);
  *(void *)(v5 + 96) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DIPError();
  *(void *)(v5 + 104) = v7;
  *(void *)(v5 + 112) = *(void *)(v7 - 8);
  *(void *)(v5 + 120) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  *(void *)(v5 + 128) = v8;
  *(void *)(v5 + 136) = *(void *)(v8 - 8);
  *(void *)(v5 + 144) = swift_task_alloc();
  *(void *)(v5 + 152) = swift_task_alloc();
  *(void *)(v5 + 160) = swift_task_alloc();
  *(void *)(v5 + 168) = swift_task_alloc();
  return _swift_task_switch(sub_10005C52C, 0, 0);
}

uint64_t sub_10005C52C()
{
  uint64_t v33 = v0;
  unint64_t v1 = *(void *)(v0 + 56);
  if (!(v1 >> 62))
  {
    if (*(uint64_t *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 1) {
      goto LABEL_3;
    }
LABEL_26:
    defaultLogger()();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v2, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v26, "No assets to upload, exiting", v27, 2u);
      swift_slowDealloc();
    }
    uint64_t v5 = *(void *)(v0 + 144);
    goto LABEL_29;
  }
  swift_bridgeObjectRetain();
  uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v25 < 1) {
    goto LABEL_26;
  }
LABEL_3:
  if (qword_10071F4C0 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(v0 + 201) != 1)
  {
    uint64_t v6 = qword_1007602F0;
    uint64_t v7 = *(NSObject **)(v0 + 64);
    if (v7) {
      dispatch_group_enter(v7);
    }
    if (v1 >> 62)
    {
      swift_bridgeObjectRetain();
      unint64_t v9 = (void *)_CocoaArrayWrapper.endIndex.getter();
      uint64_t v8 = (uint64_t)v9;
      if (!v9) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v8 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      unint64_t v9 = (void *)swift_bridgeObjectRetain();
      if (!v8) {
        goto LABEL_22;
      }
    }
    if (v8 < 1)
    {
      __break(1u);
      return withCheckedThrowingContinuation<A>(isolation:function:_:)(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    if ((v1 & 0xC000000000000001) != 0)
    {
      uint64_t v17 = 0;
      do
      {
        int v18 = *(unsigned __int8 *)(v0 + 200);
        ++v17;
        v32[0] = specialized _ArrayBuffer._getElementSlowPath(_:)();
        sub_10005CE6C(v32, v18, 0);
        swift_unknownObjectRelease();
      }
      while (v8 != v17);
    }
    else
    {
      uint64_t v19 = (uint64_t *)(*(void *)(v0 + 56) + 32);
      do
      {
        int v20 = *(unsigned __int8 *)(v0 + 200);
        uint64_t v21 = *v19++;
        v32[0] = v21;
        sub_10005CE6C(v32, v20, 0);
        --v8;
      }
      while (v8);
    }
LABEL_22:
    swift_bridgeObjectRelease();
    char v22 = *(unsigned char *)(v0 + 200);
    uint64_t v23 = *(void *)(v0 + 56);
    *(_OWORD *)(v0 + 32) = 0u;
    *(void *)(v0 + 48) = 0;
    *(_OWORD *)(v0 + 16) = 0u;
    uint64_t v24 = swift_task_alloc();
    *(void *)(v0 + 176) = v24;
    *(void *)(v24 + 16) = v6;
    *(void *)(v24 + 24) = v23;
    *(unsigned char *)(v24 + 32) = 1;
    *(unsigned char *)(v24 + 33) = v22;
    *(void *)(v24 + 40) = v0 + 16;
    unint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 184) = v9;
    *unint64_t v9 = v0;
    v9[1] = sub_10005C948;
    uint64_t v16 = (char *)&type metadata for () + 8;
    unint64_t v13 = 0x800000010062FF00;
    uint64_t v14 = sub_10002CF08;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    unint64_t v12 = 0xD00000000000003FLL;
    uint64_t v15 = v24;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v9, v10, v11, v12, v13, v14, v15, v16);
  }
  defaultLogger()();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "User has opted out of uploading data on expensive network", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 168);
LABEL_29:
  uint64_t v28 = *(void *)(v0 + 128);
  uint64_t v29 = *(void *)(v0 + 136);

  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v5, v28);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
  return v30();
}

uint64_t sub_10005C948()
{
  *(void *)(*(void *)v1 + 192) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10005CBC4;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_10005CA64;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10005CA64()
{
  sub_10000C6CC(v0 + 16, (uint64_t *)&unk_1007271E0);
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Upload has successfully completed!", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void *)(v0 + 160);
  uint64_t v5 = *(void *)(v0 + 128);
  uint64_t v6 = *(void *)(v0 + 136);
  uint64_t v7 = *(void *)(v0 + 64);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  if (v7) {
    dispatch_group_leave(*(dispatch_group_t *)(v0 + 64));
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_10005CBC4()
{
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v5 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 112);
  uint64_t v7 = *(void *)(v0 + 88);
  uint64_t v6 = *(void *)(v0 + 96);
  uint64_t v8 = *(void *)(v0 + 80);
  uint64_t v14 = *(void *)(v0 + 136);
  uint64_t v15 = *(void *)(v0 + 72);
  uint64_t v16 = *(void *)(v0 + 128);
  uint64_t v17 = *(void *)(v0 + 64);
  swift_task_dealloc();
  sub_10000C6CC(v0 + 16, (uint64_t *)&unk_1007271E0);
  (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v6, enum case for DIPError.Code.internalError(_:), v8);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_10000C588();
  swift_allocError();
  unint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v9(v10, v3, v5);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v2, v16);
  swift_errorRelease();
  *(void *)(v15 + 40) = v1;
  swift_errorRetain();
  swift_errorRelease();
  swift_allocError();
  v9(v11, v3, v5);
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v17) {
    dispatch_group_leave(*(dispatch_group_t *)(v0 + 64));
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_10005CE6C(uint64_t *a1, int a2, int a3)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *a1;
  defaultLogger()();
  swift_retain_n();
  unint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    int v21 = a2;
    int v22 = a3;
    uint64_t v23 = v7;
    uint64_t v14 = 0x656D75636F446469;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    uint64_t v26 = v20;
    *(_DWORD *)uint64_t v15 = 136446722;
    uint64_t v16 = *(unsigned __int8 *)(v11 + 48);
    unint64_t v17 = 0xEF746E6F7246746ELL;
    uint64_t v24 = v3;
    switch(v16)
    {
      case 1:
        unint64_t v17 = 0xEE006B636142746ELL;
        break;
      case 2:
        unint64_t v17 = 0xE600000000000000;
        uint64_t v14 = 0x6569666C6573;
        break;
      case 3:
        unint64_t v17 = 0xED00006F65646956;
        uint64_t v14 = 0x7373656E6576696CLL;
        break;
      case 4:
        unint64_t v17 = 0xEE006F6564695679;
        uint64_t v14 = 0x7261696C69787561;
        break;
      case 5:
        unint64_t v17 = 0xEB00000000657079;
        uint64_t v14 = 0x5464696C61766E69;
        break;
      default:
        break;
    }
    uint64_t v25 = sub_100110D58(v14, v17, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 1024;
    LODWORD(v25) = v21 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 18) = 1024;
    LODWORD(v25) = v22 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Starting to upload asset of type %{public}s with options allowsCellularAccess: %{BOOL}d and shouldScheduleUploads: %{BOOL}d", (uint8_t *)v15, 0x18u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v23);
  }
  else
  {

    swift_release_n();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
}

uint64_t sub_10005D1D8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  sub_10000C6CC(v0 + OBJC_IVAR____TtC8coreidvd34IdentityProofingAssetUploadManager_livenessFlowInternalDiagnosticsVideoURL, &qword_100720A68);

  return swift_deallocClassInstance();
}

uint64_t sub_10005D264()
{
  return type metadata accessor for IdentityProofingAssetUploadManager();
}

uint64_t type metadata accessor for IdentityProofingAssetUploadManager()
{
  uint64_t result = qword_100720E40;
  if (!qword_100720E40) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10005D2B8()
{
  sub_10005D364();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_10005D364()
{
  if (!qword_100720E58)
  {
    type metadata accessor for URL();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100720E58);
    }
  }
}

uint64_t sub_10005D3BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_100720A68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_10005D424()
{
  unint64_t result = qword_100720FB8;
  if (!qword_100720FB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100720FB8);
  }
  return result;
}

unint64_t sub_10005D478()
{
  unint64_t result = qword_100720FC0;
  if (!qword_100720FC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100720FC0);
  }
  return result;
}

uint64_t sub_10005D4CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_100720A68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005D534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[22] = a5;
  v6[23] = v5;
  v6[20] = a3;
  v6[21] = a4;
  v6[18] = a1;
  v6[19] = a2;
  uint64_t v7 = type metadata accessor for DIPError.Code();
  v6[24] = v7;
  v6[25] = *(void *)(v7 - 8);
  v6[26] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v6[27] = v8;
  v6[28] = *(void *)(v8 - 8);
  v6[29] = swift_task_alloc();
  v6[30] = swift_task_alloc();
  return _swift_task_switch(sub_10005D668, 0, 0);
}

uint64_t sub_10005D668()
{
  uint64_t v29 = v0;
  unint64_t v1 = v0[22];
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v25 = v0[28];
    uint64_t v26 = v0[27];
    uint64_t v27 = v0[30];
    uint64_t v4 = v0[21];
    uint64_t v5 = v0[22];
    uint64_t v7 = v0[19];
    unint64_t v6 = v0[20];
    uint64_t v8 = swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315394;
    swift_bridgeObjectRetain();
    v0[16] = sub_100110D58(v7, v6, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v8 + 12) = 2080;
    if (v5) {
      uint64_t v9 = v4;
    }
    else {
      uint64_t v9 = 0;
    }
    if (v5) {
      unint64_t v10 = v1;
    }
    else {
      unint64_t v10 = 0xE000000000000000;
    }
    swift_bridgeObjectRetain();
    v0[17] = sub_100110D58(v9, v10, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "hasDocumentCredential: docType %s region %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
    v11(v27, v26);
  }
  else
  {
    uint64_t v12 = v0[30];
    uint64_t v13 = v0[27];
    uint64_t v14 = v0[28];
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v11(v12, v13);
  }
  v0[31] = v11;
  uint64_t v15 = (void *)v0[23];
  uint64_t v16 = sub_10000C728(v15 + 3, v15[6]);
  uint64_t v17 = v15[2];
  v0[32] = v17;
  uint64_t v18 = *v16;
  uint64_t v19 = (void *)swift_task_alloc();
  v0[33] = v19;
  *uint64_t v19 = v0;
  v19[1] = sub_10005D93C;
  uint64_t v20 = v0[21];
  uint64_t v21 = v0[22];
  uint64_t v22 = v0[19];
  uint64_t v23 = v0[20];
  return sub_1000C0824(v17, v22, v23, v20, v21, v18);
}

uint64_t sub_10005D93C(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 272) = a1;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4(0);
  }
  else
  {
    return _swift_task_switch(sub_10005DA9C, 0, 0);
  }
}

uint64_t sub_10005DA9C()
{
  uint64_t v1 = *(void *)(v0[32] + 16);
  v0[35] = v1;
  if (!v1)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12(0);
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  unint64_t v3 = 0;
  while (1)
  {
    v0[36] = v3;
    uint64_t v4 = v0[32];
    if (v3 >= *(void *)(v4 + 16))
    {
      __break(1u);
      return _swift_continuation_await(v2);
    }
    if (*(void *)(v0[34] + 16)) {
      break;
    }
LABEL_4:
    unint64_t v3 = v0[36] + 1;
    if (v3 == v0[35])
    {
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
  }
  uint64_t v5 = v4 + 16 * v3;
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = *(void *)(v5 + 32);
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_100590548(v7, v6);
  if ((v9 & 1) == 0
    || (uint64_t v10 = *(void *)(*(void *)(v0[34] + 56) + 8 * v8),
        v0[37] = v10,
        swift_bridgeObjectRetain(),
        swift_bridgeObjectRelease(),
        uint64_t v11 = *(void *)(v10 + 16),
        (v0[38] = v11) == 0))
  {
    uint64_t v2 = swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  v0[39] = 0;
  uint64_t v14 = v0[23];
  v0[40] = *(void *)(v0[37] + 40);
  sub_10000C728((void *)(v14 + 24), *(void *)(v14 + 48));
  swift_bridgeObjectRetain();
  id v15 = objc_allocWithZone((Class)DCCredentialStore);
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v17 = [v15 initWithPartitions:isa];
  v0[41] = v17;

  NSString v18 = String._bridgeToObjectiveC()();
  v0[42] = v18;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_10005DD80;
  uint64_t v19 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10001E4BC;
  v0[13] = &unk_1006F5D60;
  v0[14] = v19;
  [v17 propertiesOfCredential:v18 completion:v0 + 10];
  uint64_t v2 = (uint64_t)(v0 + 2);
  return _swift_continuation_await(v2);
}

uint64_t sub_10005DD80()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 344) = v1;
  if (v1) {
    uint64_t v2 = sub_10005E3F4;
  }
  else {
    uint64_t v2 = sub_10005DE90;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10005DE90()
{
  uint64_t v1 = *(void **)(v0 + 336);

  uint64_t v2 = *(void **)(v0 + 120);
  *(void *)(v0 + 352) = v2;

  swift_bridgeObjectRelease();
  switch((unint64_t)[v2 credentialState])
  {
    case 0uLL:
      unint64_t v3 = 0xD000000000000027;
      unint64_t v4 = 0x8000000100631F20;
      uint64_t v5 = 0x3961636436363565;
      goto LABEL_11;
    case 1uLL:
      unint64_t v3 = 0xD00000000000002ALL;
      unint64_t v4 = 0x8000000100631F50;
      uint64_t v5 = 0x6132343336333437;
      goto LABEL_11;
    case 2uLL:
      id v6 = [v2 options];
      id v7 = [v6 presentmentAuthPolicy];

      if (v7 == (id)2 && ![v2 hasUsablePresentmentAuthPolicy])
      {
        unint64_t v3 = 0xD000000000000046;
        unint64_t v4 = 0x8000000100631FB0;
        uint64_t v5 = 0x3237336231333930;
LABEL_11:
        unint64_t v10 = 0xE800000000000000;
        logMilestone(tag:description:)(*(Swift::String *)&v5, *(Swift::String *)&v3);
LABEL_12:

        uint64_t v11 = *(void *)(v0 + 312) + 1;
        if (v11 != *(void *)(v0 + 304)) {
          goto LABEL_26;
        }
LABEL_13:
        swift_bridgeObjectRelease();
        while (1)
        {
          unint64_t v12 = *(void *)(v0 + 288) + 1;
          if (v12 == *(void *)(v0 + 280)) {
            break;
          }
          *(void *)(v0 + 288) = v12;
          uint64_t v13 = *(void *)(v0 + 256);
          if (v12 >= *(void *)(v13 + 16))
          {
            __break(1u);
            JUMPOUT(0x10005E3E4);
          }
          if (*(void *)(*(void *)(v0 + 272) + 16))
          {
            uint64_t v14 = v13 + 16 * v12;
            uint64_t v15 = *(void *)(v14 + 40);
            uint64_t v16 = *(void *)(v14 + 32);
            swift_bridgeObjectRetain();
            unint64_t v17 = sub_100590548(v16, v15);
            if ((v18 & 1) == 0) {
              goto LABEL_13;
            }
            uint64_t v19 = *(void *)(*(void *)(*(void *)(v0 + 272) + 56) + 8 * v17);
            *(void *)(v0 + 296) = v19;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v20 = *(void *)(v19 + 16);
            *(void *)(v0 + 304) = v20;
            if (!v20) {
              goto LABEL_13;
            }
            uint64_t v11 = 0;
LABEL_26:
            *(void *)(v0 + 312) = v11;
            uint64_t v26 = *(void *)(v0 + 184);
            *(void *)(v0 + 320) = *(void *)(*(void *)(v0 + 296) + 16 * v11 + 40);
            sub_10000C728((void *)(v26 + 24), *(void *)(v26 + 48));
            swift_bridgeObjectRetain();
            id v27 = objc_allocWithZone((Class)DCCredentialStore);
            swift_bridgeObjectRetain();
            Class isa = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            id v29 = [v27 initWithPartitions:isa];
            *(void *)(v0 + 328) = v29;

            NSString v30 = String._bridgeToObjectiveC()();
            *(void *)(v0 + 336) = v30;
            *(void *)(v0 + 16) = v0;
            *(void *)(v0 + 56) = v0 + 120;
            *(void *)(v0 + 24) = sub_10005DD80;
            uint64_t v31 = swift_continuation_init();
            *(void *)(v0 + 80) = _NSConcreteStackBlock;
            *(void *)(v0 + 88) = 0x40000000;
            *(void *)(v0 + 96) = sub_10001E4BC;
            *(void *)(v0 + 104) = &unk_1006F5D60;
            *(void *)(v0 + 112) = v31;
            [v29 propertiesOfCredential:v30 completion:v0 + 80];
            return _swift_continuation_await(v0 + 16);
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v21 = 0;
        goto LABEL_21;
      }
      if ((sub_1000603B4(*(void *)(v0 + 144)) & 1) == 0)
      {
        uint64_t v23 = *(void **)(v0 + 352);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v24._object = (void *)0x8000000100631F80;
        v25._uint64_t countAndFlagsBits = 0x3461313037376433;
        v25._object = (void *)0xE800000000000000;
        v24._uint64_t countAndFlagsBits = 0xD000000000000026;
        logMilestone(tag:description:)(v25, v24);

        uint64_t v21 = 1;
LABEL_21:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v22 = *(uint64_t (**)(uint64_t))(v0 + 8);
        return v22(v21);
      }
      unint64_t v8 = (void *)swift_task_alloc();
      *(void *)(v0 + 360) = v8;
      *unint64_t v8 = v0;
      v8[1] = sub_10005E5B8;
      uint64_t v9 = *(void *)(v0 + 184);
      v8[17] = v2;
      v8[18] = v9;
      return _swift_task_switch(sub_10005EB98, 0, 0);
    case 3uLL:
      unint64_t v3 = 0xD000000000000029;
      unint64_t v4 = 0x8000000100631EF0;
      uint64_t v5 = 0x6236626235616361;
      goto LABEL_11;
    default:
      goto LABEL_12;
  }
}

uint64_t sub_10005E3F4()
{
  uint64_t v1 = (void *)v0[42];
  uint64_t v2 = (void *)v0[41];
  uint64_t v3 = v0[25];
  uint64_t v4 = v0[26];
  uint64_t v5 = v0[24];
  swift_willThrow();

  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v4, enum case for DIPError.Code.internalError(_:), v5);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v6 = (uint64_t (*)(void))v0[1];
  return v6(0);
}

uint64_t sub_10005E5B8(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 368) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_10005EAEC;
  }
  else
  {
    *(unsigned char *)(v4 + 376) = a1 & 1;
    uint64_t v5 = sub_10005E700;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10005E700()
{
  int v1 = *(unsigned __int8 *)(v0 + 376);
  if (v1)
  {
    defaultLogger()();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "DigitalPresentmentCredentialManager hasDocumentCredential: Biometrics are disabled for Apple Pay & Wallet and calling client is a 1st party biometrics disabled special case", v4, 2u);
      swift_slowDealloc();
    }
    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v0 + 248);
    uint64_t v6 = *(void *)(v0 + 232);
    uint64_t v7 = *(void *)(v0 + 216);

    v5(v6, v7);
    uint64_t v8 = *(void *)(v0 + 312) + 1;
    if (v8 == *(void *)(v0 + 304))
    {
LABEL_5:
      uint64_t v9 = swift_bridgeObjectRelease();
      while (1)
      {
        unint64_t v10 = *(void *)(v0 + 288) + 1;
        if (v10 == *(void *)(v0 + 280))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_14;
        }
        *(void *)(v0 + 288) = v10;
        uint64_t v11 = *(void *)(v0 + 256);
        if (v10 >= *(void *)(v11 + 16)) {
          break;
        }
        if (*(void *)(*(void *)(v0 + 272) + 16))
        {
          uint64_t v12 = v11 + 16 * v10;
          uint64_t v13 = *(void *)(v12 + 40);
          uint64_t v14 = *(void *)(v12 + 32);
          swift_bridgeObjectRetain();
          unint64_t v15 = sub_100590548(v14, v13);
          if (v16)
          {
            uint64_t v17 = *(void *)(*(void *)(*(void *)(v0 + 272) + 56) + 8 * v15);
            *(void *)(v0 + 296) = v17;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v18 = *(void *)(v17 + 16);
            *(void *)(v0 + 304) = v18;
            if (v18)
            {
              uint64_t v8 = 0;
              goto LABEL_18;
            }
          }
          goto LABEL_5;
        }
      }
      __break(1u);
    }
    else
    {
LABEL_18:
      *(void *)(v0 + 312) = v8;
      uint64_t v24 = *(void *)(v0 + 184);
      *(void *)(v0 + 320) = *(void *)(*(void *)(v0 + 296) + 16 * v8 + 40);
      sub_10000C728((void *)(v24 + 24), *(void *)(v24 + 48));
      swift_bridgeObjectRetain();
      id v25 = objc_allocWithZone((Class)DCCredentialStore);
      swift_bridgeObjectRetain();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v27 = [v25 initWithPartitions:isa];
      *(void *)(v0 + 328) = v27;

      NSString v28 = String._bridgeToObjectiveC()();
      *(void *)(v0 + 336) = v28;
      *(void *)(v0 + 16) = v0;
      *(void *)(v0 + 56) = v0 + 120;
      *(void *)(v0 + 24) = sub_10005DD80;
      uint64_t v29 = swift_continuation_init();
      *(void *)(v0 + 80) = _NSConcreteStackBlock;
      *(void *)(v0 + 88) = 0x40000000;
      *(void *)(v0 + 96) = sub_10001E4BC;
      *(void *)(v0 + 104) = &unk_1006F5D60;
      *(void *)(v0 + 112) = v29;
      [v27 propertiesOfCredential:v28 completion:v0 + 80];
      uint64_t v9 = v0 + 16;
    }
    return _swift_continuation_await(v9);
  }
  else
  {
    uint64_t v19 = *(void **)(v0 + 352);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v20._object = (void *)0x8000000100631F80;
    v21._uint64_t countAndFlagsBits = 0x3461313037376433;
    v21._object = (void *)0xE800000000000000;
    v20._uint64_t countAndFlagsBits = 0xD000000000000026;
    logMilestone(tag:description:)(v21, v20);

LABEL_14:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
    return v22(v1 ^ 1u);
  }
}

uint64_t sub_10005EAEC()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_10005EB78(uint64_t a1)
{
  *(void *)(v2 + 136) = a1;
  *(void *)(v2 + 144) = v1;
  return _swift_task_switch(sub_10005EB98, 0, 0);
}

uint64_t sub_10005EB98()
{
  id v1 = [*(id *)(v0 + 136) options];
  id v2 = [v1 presentmentAuthPolicy];

  if (v2 == (id)2)
  {
    uint64_t v3 = *(void **)(v0 + 144);
    uint64_t v4 = v3[11];
    uint64_t v5 = v3[12];
    sub_10000C728(v3 + 8, v4);
    uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v5 + 8) + **(int **)(v5 + 8));
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v6;
    void *v6 = v0;
    v6[1] = sub_10005ED10;
    return v9(v4, v5);
  }
  else
  {
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8(0);
  }
}

uint64_t sub_10005ED10(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[20] = a1;
  v3[21] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = (uint64_t (*)(void))v3[1];
    return v4(0);
  }
  else
  {
    return _swift_task_switch(sub_10005EE48, 0, 0);
  }
}

uint64_t sub_10005EE48()
{
  uint64_t v1 = *(void **)(v0 + 160);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 168);
    type metadata accessor for SecAccessControl(0);
    id v3 = [v1 aclData];
    uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v6 = v5;

    uint64_t v7 = (void *)static SecAccessControlRef.fromData(_:)();
    sub_10000C5F4(v4, v6);
    if (v2)
    {

      uint64_t v8 = *(uint64_t (**)(uint64_t))(v0 + 8);
      uint64_t v9 = 0;
      goto LABEL_7;
    }
    id v11 = objc_allocWithZone((Class)LAContext);
    id v12 = v7;
    id v13 = [v11 init];
    *(void *)(v0 + 120) = sub_100060820();
    *(void *)(v0 + 128) = &off_100709AD8;
    *(void *)(v0 + 96) = v13;
    type metadata accessor for DigitalPresentmentLocalAuthenticationManager();
    uint64_t inited = swift_initStackObject();
    *(unsigned char *)(inited + 64) = 4;
    *(void *)(inited + 72) = 0;
    sub_10000C6B4((long long *)(v0 + 96), inited + 16);
    *(void *)(inited + 56) = v12;
    char v15 = sub_10053F3C0();

    swift_setDeallocating();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(inited + 16);

    swift_bridgeObjectRelease();
    char v10 = v15 ^ 1;
  }
  else
  {
    char v10 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v9 = v10 & 1;
LABEL_7:
  return v8(v9);
}

uint64_t sub_10005EFF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  v4[6] = v3;
  v4[4] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[7] = v5;
  v4[8] = *(void *)(v5 - 8);
  v4[9] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v4[10] = v6;
  v4[11] = *(void *)(v6 - 8);
  _OWORD v4[12] = swift_task_alloc();
  return _swift_task_switch(sub_10005F118, 0, 0);
}

uint64_t sub_10005F118()
{
  uint64_t v1 = (void *)v0[6];
  uint64_t v2 = sub_10000C728(v1 + 3, v1[6]);
  uint64_t v3 = v1[2];
  uint64_t v4 = *v2;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[13] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10005F1C8;
  uint64_t v6 = v0[4];
  uint64_t v7 = v0[5];
  return sub_1000C0DCC(v3, v6, v7, v4);
}

uint64_t sub_10005F1C8(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 112) = a1;
  *(void *)(v3 + 120) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_10005F590;
  }
  else {
    uint64_t v4 = sub_10005F2DC;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10005F2DC()
{
  uint64_t v19 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v15 = v0[11];
    uint64_t v16 = v0[10];
    uint64_t v17 = v0[12];
    unint64_t v3 = v0[5];
    uint64_t v14 = v0[4];
    uint64_t v4 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v5 = Set.description.getter();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    v0[2] = sub_100110D58(v5, v7, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v4 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[3] = sub_100110D58(v14, v3, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "activeRegionsForDocType returning activeRegions %s for docType %s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
  }
  else
  {
    uint64_t v9 = v0[11];
    uint64_t v8 = v0[12];
    uint64_t v10 = v0[10];
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  id v11 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v12 = v0[14];
  return v11(v12);
}

uint64_t sub_10005F590()
{
  (*(void (**)(void, void, void))(v0[8] + 104))(v0[9], enum case for DIPError.Code.internalError(_:), v0[7]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10005F6E4(uint64_t a1, uint64_t a2)
{
  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[19] = v4;
  v3[20] = *(void *)(v4 - 8);
  v3[21] = swift_task_alloc();
  return _swift_task_switch(sub_10005F7A8, 0, 0);
}

uint64_t sub_10005F7A8()
{
  uint64_t v2 = v0[17];
  uint64_t v1 = (void *)v0[18];
  uint64_t v3 = sub_10000C728(v1 + 3, v1[6]);
  uint64_t v4 = v1[2];
  v0[22] = v4;
  uint64_t v5 = *v3;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[23] = v6;
  void *v6 = v0;
  v6[1] = sub_10005F868;
  uint64_t v7 = v0[16];
  return sub_1000BFE44(v4, v7, v2, v5);
}

uint64_t sub_10005F868(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(*v2 + 192) = a1;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    return _swift_task_switch(sub_10005F9B8, 0, 0);
  }
}

uint64_t sub_10005F9B8()
{
  uint64_t v1 = *(void *)(v0[22] + 16);
  v0[25] = v1;
  if (!v1)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(void *))v0[1];
    return v12(&_swiftEmptyArrayStorage);
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  unint64_t v3 = 0;
  while (1)
  {
    v0[26] = v3;
    uint64_t v4 = v0[22];
    if (v3 >= *(void *)(v4 + 16))
    {
      __break(1u);
      return _swift_continuation_await(v2);
    }
    if (*(void *)(v0[24] + 16)) {
      break;
    }
LABEL_4:
    unint64_t v3 = v0[26] + 1;
    if (v3 == v0[25])
    {
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
  }
  uint64_t v5 = v4 + 16 * v3;
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = *(void *)(v5 + 32);
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_100590548(v7, v6);
  if ((v9 & 1) == 0
    || (uint64_t v10 = *(void *)(*(void *)(v0[24] + 56) + 8 * v8),
        v0[27] = v10,
        swift_bridgeObjectRetain(),
        swift_bridgeObjectRelease(),
        uint64_t v11 = *(void *)(v10 + 16),
        (v0[28] = v11) == 0))
  {
    uint64_t v2 = swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  v0[29] = 0;
  v0[30] = &_swiftEmptyArrayStorage;
  uint64_t v14 = v0[27];
  uint64_t v15 = v0[18];
  v0[31] = *(void *)(v14 + 32);
  v0[32] = *(void *)(v14 + 40);
  sub_10000C728((void *)(v15 + 24), *(void *)(v15 + 48));
  swift_bridgeObjectRetain();
  id v16 = objc_allocWithZone((Class)DCCredentialStore);
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v18 = [v16 initWithPartitions:isa];
  v0[33] = v18;

  NSString v19 = String._bridgeToObjectiveC()();
  v0[34] = v19;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_10005FC98;
  uint64_t v20 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10001E4BC;
  v0[13] = &unk_1006F5D48;
  v0[14] = v20;
  [v18 propertiesOfCredential:v19 completion:v0 + 10];
  uint64_t v2 = (uint64_t)(v0 + 2);
  return _swift_continuation_await(v2);
}

uint64_t sub_10005FC98()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 280) = v1;
  if (v1) {
    uint64_t v2 = sub_10006017C;
  }
  else {
    uint64_t v2 = sub_10005FDA8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10005FDA8()
{
  uint64_t v1 = *(void **)(v0 + 272);

  uint64_t v2 = *(void **)(v0 + 120);
  if ([v2 credentialState] == (id)2
    && ((id v3 = [v2 options],
         id v4 = [v3 presentmentAuthPolicy],
         v3,
         v4 != (id)2)
     || ([v2 hasUsablePresentmentAuthPolicy] & 1) != 0))
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v6 = *(char **)(v0 + 240);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
LABEL_26:
    }
      uint64_t v6 = sub_10010F3C4(0, *((void *)v6 + 2) + 1, 1, v6);
    unint64_t v8 = *((void *)v6 + 2);
    unint64_t v7 = *((void *)v6 + 3);
    if (v8 >= v7 >> 1) {
      uint64_t v6 = sub_10010F3C4((char *)(v7 > 1), v8 + 1, 1, v6);
    }
    uint64_t v10 = *(void *)(v0 + 248);
    uint64_t v9 = *(void *)(v0 + 256);
    *((void *)v6 + 2) = v8 + 1;
    uint64_t v11 = &v6[16 * v8];
    *((void *)v11 + 4) = v10;
    *((void *)v11 + 5) = v9;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = *(char **)(v0 + 240);
  }
  uint64_t v13 = *(void *)(v0 + 224);
  uint64_t v12 = *(void *)(v0 + 232);

  if (v12 + 1 == v13)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    while (1)
    {
      unint64_t v14 = *(void *)(v0 + 208) + 1;
      if (v14 == *(void *)(v0 + 200)) {
        break;
      }
      *(void *)(v0 + 208) = v14;
      uint64_t v15 = *(void *)(v0 + 176);
      if (v14 >= *(void *)(v15 + 16))
      {
        __break(1u);
        goto LABEL_26;
      }
      uint64_t v2 = *(void **)(v0 + 192);
      if (v2[2])
      {
        uint64_t v16 = v15 + 16 * v14;
        uint64_t v17 = *(void *)(v16 + 40);
        uint64_t v18 = *(void *)(v16 + 32);
        swift_bridgeObjectRetain();
        unint64_t v19 = sub_100590548(v18, v17);
        if (v20)
        {
          uint64_t v2 = *(void **)(*(void *)(*(void *)(v0 + 192) + 56) + 8 * v19);
          *(void *)(v0 + 216) = v2;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v21 = v2[2];
          *(void *)(v0 + 224) = v21;
          if (v21)
          {
            uint64_t v22 = 0;
            goto LABEL_18;
          }
        }
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v30 = *(uint64_t (**)(char *))(v0 + 8);
    return v30(v6);
  }
  else
  {
    uint64_t v22 = *(void *)(v0 + 232) + 1;
LABEL_18:
    *(void *)(v0 + 232) = v22;
    *(void *)(v0 + 240) = v6;
    uint64_t v23 = *(void *)(v0 + 144);
    uint64_t v24 = *(void *)(v0 + 216) + 16 * v22;
    *(void *)(v0 + 248) = *(void *)(v24 + 32);
    *(void *)(v0 + 256) = *(void *)(v24 + 40);
    sub_10000C728((void *)(v23 + 24), *(void *)(v23 + 48));
    swift_bridgeObjectRetain();
    id v25 = objc_allocWithZone((Class)DCCredentialStore);
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v27 = [v25 initWithPartitions:isa];
    *(void *)(v0 + 264) = v27;

    NSString v28 = String._bridgeToObjectiveC()();
    *(void *)(v0 + 272) = v28;
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 56) = v0 + 120;
    *(void *)(v0 + 24) = sub_10005FC98;
    uint64_t v29 = swift_continuation_init();
    *(void *)(v0 + 80) = _NSConcreteStackBlock;
    *(void *)(v0 + 88) = 0x40000000;
    *(void *)(v0 + 96) = sub_10001E4BC;
    *(void *)(v0 + 104) = &unk_1006F5D48;
    *(void *)(v0 + 112) = v29;
    [v27 propertiesOfCredential:v28 completion:v0 + 80];
    return _swift_continuation_await(v0 + 16);
  }
}

uint64_t sub_10006017C()
{
  uint64_t v1 = (void *)v0[34];
  uint64_t v2 = (void *)v0[33];
  uint64_t v3 = v0[21];
  uint64_t v5 = v0[19];
  uint64_t v4 = v0[20];
  swift_willThrow();

  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v3, enum case for DIPError.Code.internalError(_:), v5);
  swift_errorRetain();
  sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_100060334()
{
  swift_bridgeObjectRelease();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 24);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 64);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DigitalPresentmentCredentialManager()
{
  return self;
}

void sub_1000603A0()
{
  off_100720FD0 = &off_1006F1240;
}

uint64_t sub_1000603B4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DigitalPresentmentCallingClientConfig();
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v6 = *(unsigned __int8 *)(a1 + *(int *)(v3 + 20));
  sub_100060860(a1, (uint64_t)v5);
  if (v6 == 1)
  {
    uint64_t v7 = *(void *)&v5[*(int *)(v2 + 24) + 16];
    uint64_t v8 = *(void *)(v7 + 16);
    if (v8)
    {
      uint64_t v9 = v7 + 32;
      v25[1] = *(void *)&v5[*(int *)(v2 + 24) + 16];
      swift_bridgeObjectRetain_n();
      uint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = (uint64_t *)(v9 + 16 * v10);
        uint64_t v13 = *v11;
        uint64_t v12 = v11[1];
        uint64_t v14 = qword_10071F480;
        swift_bridgeObjectRetain();
        if (v14 != -1) {
          swift_once();
        }
        uint64_t v15 = off_100720FD0;
        uint64_t v16 = *((void *)off_100720FD0 + 2);
        if (v16)
        {
          BOOL v17 = *((void *)off_100720FD0 + 4) == v13 && *((void *)off_100720FD0 + 5) == v12;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
LABEL_30:
            swift_bridgeObjectRelease();
            uint64_t v24 = 1;
LABEL_31:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_32;
          }
          if (v16 != 1)
          {
            if (v15[6] == v13 && v15[7] == v12) {
              goto LABEL_30;
            }
            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if (result) {
              goto LABEL_30;
            }
            if (v16 != 2)
            {
              char v20 = v15 + 9;
              uint64_t v21 = 2;
              while (1)
              {
                uint64_t v22 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  break;
                }
                if (*(v20 - 1) == v13 && *v20 == v12) {
                  goto LABEL_30;
                }
                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                if (result) {
                  goto LABEL_30;
                }
                v20 += 2;
                ++v21;
                if (v22 == v16) {
                  goto LABEL_4;
                }
              }
              __break(1u);
              return result;
            }
          }
        }
LABEL_4:
        ++v10;
        swift_bridgeObjectRelease();
        if (v10 == v8)
        {
          uint64_t v24 = 0;
          goto LABEL_31;
        }
      }
    }
  }
  uint64_t v24 = 0;
LABEL_32:
  sub_1000608C4((uint64_t)v5);
  return v24;
}

uint64_t sub_1000605DC(uint64_t a1, uint64_t a2)
{
  sub_100060734(a1, (uint64_t)v18);
  if (sub_10006079C(v18) == 1 || (uint64_t v3 = v19) == 0)
  {
    uint64_t v17 = 0;
    memset(v16, 0, sizeof(v16));
    id v6 = objc_allocWithZone((Class)DCBiometricStore);
    swift_bridgeObjectRetain();
    uint64_t v14 = &type metadata for IDCredBiometricStore;
    uint64_t v15 = &off_1007073B0;
    *(void *)&long long v13 = [v6 init];
    type metadata accessor for DigitalPresentmentCredentialManager();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = a2;
    sub_10003C148((uint64_t)v16, (uint64_t)&v8);
    if (v9)
    {
      sub_1000607C0((uint64_t)v16);
      sub_10000C6B4(&v8, (uint64_t)&v10);
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_1000607C0((uint64_t)&v8);
      uint64_t v11 = &type metadata for IDCredCredentialStore;
      uint64_t v12 = &off_1006F7DB8;
      *(void *)&long long v10 = a2;
      sub_1000607C0((uint64_t)v16);
    }
    sub_10000C6B4(&v10, v5 + 24);
    sub_10000C6B4(&v13, v5 + 64);
  }
  else
  {
    uint64_t v4 = swift_retain();
    uint64_t v5 = v3(v4);
    sub_10003BEDC((uint64_t)v3);
  }
  return v5;
}

uint64_t sub_100060734(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_1007210C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006079C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000607C0(uint64_t a1)
{
  uint64_t v2 = sub_100007764(&qword_100720928);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100060820()
{
  unint64_t result = qword_1007210D8;
  if (!qword_1007210D8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1007210D8);
  }
  return result;
}

uint64_t sub_100060860(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DigitalPresentmentCallingClientConfig();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000608C4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DigitalPresentmentCallingClientConfig();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_100060920()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = v0;
  machServiceIdentityProofingXPC.getter();
  id v6 = objc_allocWithZone((Class)NSXPCListener);
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v8 = [v6 initWithMachServiceName:v7];

  *(void *)&v5[OBJC_IVAR____TtC8coreidvd24IdentityProofingListener_xpcListener] = v8;
  uint64_t v9 = (objc_class *)type metadata accessor for IdentityProofingListener();
  v17.receiver = v5;
  v17.super_class = v9;
  long long v10 = [(char *)[super init];
  uint64_t v11 = *(void **)&v10[OBJC_IVAR____TtC8coreidvd24IdentityProofingListener_xpcListener];
  uint64_t v12 = v10;
  [v11 setDelegate:v12];
  [v11 resume];
  defaultLogger()();
  long long v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Identity Proofing XPC listener has started", v15, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v12;
}

id sub_100060B44()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Identity Proofing XPC listener is tearing down", v8, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  [*(id *)&v1[OBJC_IVAR____TtC8coreidvd24IdentityProofingListener_xpcListener] invalidate];
  uint64_t v9 = (objc_class *)type metadata accessor for IdentityProofingListener();
  v11.receiver = v1;
  v11.super_class = v9;
  return [super dealloc];
}

uint64_t sub_100060CF0()
{
  return sub_100060D08("Identity Proofing connection invalidated");
}

uint64_t sub_100060CFC()
{
  return sub_100060D08("Identity Proofing connection interrupted");
}

uint64_t sub_100060D08(const char *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, a1, v8, 2u);
    swift_slowDealloc();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t type metadata accessor for IdentityProofingListener()
{
  return self;
}

void sub_100060EC8()
{
  uint64_t v1 = type metadata accessor for DIPError.Code();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v30 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  os_log_type_t v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  swift_retain_n();
  id v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  int v10 = v9;
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v11 = swift_slowAlloc();
    int v25 = v10;
    uint64_t v12 = (uint8_t *)v11;
    uint64_t v26 = swift_slowAlloc();
    uint64_t v32 = v26;
    uint64_t v28 = v2;
    *(_DWORD *)uint64_t v12 = 136315138;
    v23[1] = v12 + 4;
    uint64_t v24 = v12;
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    uint64_t v27 = v5;
    uint64_t v14 = v1;
    uint64_t v15 = v4;
    uint64_t v16 = (void *)Strong;
    uint64_t v31 = Strong;
    sub_100007764(&qword_10072F290);
    uint64_t v17 = Optional.debugDescription.getter();
    uint64_t v29 = v0;
    unint64_t v19 = v18;

    uint64_t v4 = v15;
    uint64_t v1 = v14;
    uint64_t v31 = sub_100110D58(v17, v19, &v32);
    uint64_t v2 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, (os_log_type_t)v25, "Checking connection %s", v24, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v27);
  }
  else
  {

    swift_release_n();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v5);
  }
  uint64_t v20 = swift_unknownObjectWeakLoadStrong();
  if (v20)
  {
    uint64_t v21 = (void *)v20;
    v22._uint64_t countAndFlagsBits = 0xD000000000000024;
    v22._object = (void *)0x8000000100632180;
    if (!NSXPCConnection.isEntitled(_:)(v22))
    {
      (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for DIPError.Code.missingEntitlement(_:), v1);
      sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000C588();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for DIPError.Code.missingEntitlement(_:), v1);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
}

uint64_t sub_10006139C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[10] = a4;
  v5[11] = v4;
  v5[8] = a2;
  v5[9] = a3;
  v5[7] = a1;
  uint64_t v6 = type metadata accessor for DispatchQoS.QoSClass();
  v5[12] = v6;
  v5[13] = *(void *)(v6 - 8);
  v5[14] = swift_task_alloc();
  return _swift_task_switch(sub_100061464, 0, 0);
}

uint64_t sub_100061464()
{
  sub_100060EC8();
  if (qword_1007600C0)
  {
    swift_retain();
    uint64_t v1 = (void *)sub_10003A450();
    id v2 = v1;
    swift_release();
  }
  else
  {
    uint64_t v1 = 0;
  }
  uint64_t v4 = v0[13];
  uint64_t v3 = v0[14];
  uint64_t v5 = v0[12];
  uint64_t v6 = type metadata accessor for IdentityProofingActionNotificationFlow();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = 0;
  sub_1000309D0();
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v3, enum case for DispatchQoS.QoSClass.default(_:), v5);
  uint64_t v8 = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v9 = sub_1005EC0D0(v1, v7, v8);
  v0[15] = v9;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = 0;
  v0[5] = v6;
  v0[6] = &off_1006FABE0;
  v0[2] = v10;
  type metadata accessor for IdentityProofingActionNotificationProvider();
  uint64_t v11 = (void *)swift_allocObject();
  v0[16] = v11;
  uint64_t v12 = sub_1000279F4((uint64_t)(v0 + 2), v6);
  uint64_t v13 = *(void *)(v6 - 8);
  uint64_t v14 = (uint64_t *)swift_task_alloc();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v13 + 16))(v14, v12, v6);
  uint64_t v15 = *v14;
  v11[5] = v6;
  void v11[6] = &off_1006FABE0;
  v11[2] = v15;
  type metadata accessor for IdentityProofingDatabaseProvider();
  uint64_t v16 = swift_allocObject();
  v11[8] = 0;
  v11[9] = v16;
  v11[7] = 0;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  swift_task_dealloc();
  type metadata accessor for IdentityProofingCancellationProvider();
  uint64_t v17 = swift_allocObject();
  v0[17] = v17;
  *(void *)(v17 + 16) = v9;
  *(void *)(v17 + 24) = v11;
  swift_retain();
  swift_retain();
  unint64_t v18 = (void *)swift_task_alloc();
  v0[18] = v18;
  *unint64_t v18 = v0;
  v18[1] = sub_100061770;
  uint64_t v19 = v0[9];
  uint64_t v20 = v0[10];
  uint64_t v22 = v0[7];
  uint64_t v21 = v0[8];
  return sub_1001700D8(v22, v21, v19, v20);
}

uint64_t sub_100061770()
{
  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = sub_10006190C;
  }
  else {
    id v2 = sub_100061884;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100061884()
{
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10006190C()
{
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100061B14(int a1, int a2, void *aBlock, uint64_t a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v4[4] = v6;
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;
  v4[5] = v9;
  swift_retain();
  uint64_t v11 = (void *)swift_task_alloc();
  v4[6] = v11;
  *uint64_t v11 = v4;
  v11[1] = sub_100061C10;
  return sub_10006139C(v5, v7, v8, v10);
}

uint64_t sub_100061C10()
{
  uint64_t v2 = v0;
  uint64_t v4 = *v1;
  uint64_t v3 = *v1;
  uint64_t v5 = *v1;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(v3 + 24);
  if (v2)
  {
    uint64_t v7 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);
  }
  else
  {
    (*(void (**)(void, void))(v6 + 16))(*(void *)(v3 + 24), 0);
  }
  _Block_release(*(const void **)(v4 + 24));
  uint64_t v8 = *(uint64_t (**)(void))(v5 + 8);
  return v8();
}

uint64_t sub_100061DD8()
{
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IdentityProofingSessionProxy()
{
  return self;
}

uint64_t sub_100061E3C()
{
  _Block_release(*(const void **)(v0 + 32));
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100061E8C()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  void *v6 = v1;
  v6[1] = sub_10000C494;
  uint64_t v7 = (uint64_t (*)(int, int, void *, uint64_t))((char *)&dword_100721248 + dword_100721248);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_100061F54()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100061F94(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100025D64;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1007336C0 + dword_1007336C0);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_100062060(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&aBlock - v7;
  defaultLogger()();
  uint64_t v9 = a1;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 67109120;
    LODWORD(aBlock) = [v9 processIdentifier];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v10, v11, "IdentityProofingListener connection received from %d", v12, 8u);
    swift_slowDealloc();
  }
  else
  {

    uint64_t v10 = v9;
  }

  uint64_t v13 = *(void (**)(char *, uint64_t))(v3 + 8);
  v13(v8, v2);
  type metadata accessor for DIIdentityProofingXPCInterface();
  uint64_t v14 = (void *)static DIIdentityProofingXPCInterface.interface()();
  [v9 setExportedInterface:v14];

  type metadata accessor for IdentityProofingSessionProxy();
  uint64_t v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v16 = v9;
  defaultLogger()();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Creating IdentityProofingSessionProxy", v19, 2u);
    swift_slowDealloc();
  }

  v13(v6, v2);
  swift_unknownObjectWeakAssign();
  uint64_t result = os_transaction_create();
  if (result)
  {
    *(void *)(v15 + 24) = result;

    [v16 setExportedObject:v15];
    swift_release();
    uint64_t v27 = sub_100060CF0;
    uint64_t v28 = 0;
    aBlock = _NSConcreteStackBlock;
    uint64_t v24 = 1107296256;
    int v25 = sub_100593800;
    uint64_t v26 = &unk_1006F5DF0;
    uint64_t v21 = _Block_copy(&aBlock);
    [v16 setInvalidationHandler:v21];
    _Block_release(v21);
    uint64_t v27 = sub_100060CFC;
    uint64_t v28 = 0;
    aBlock = _NSConcreteStackBlock;
    uint64_t v24 = 1107296256;
    int v25 = sub_100593800;
    uint64_t v26 = &unk_1006F5E18;
    uint64_t v22 = _Block_copy(&aBlock);
    [v16 setInterruptionHandler:v22];
    _Block_release(v22);
    [v16 resume];
    return 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100062458(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100062468()
{
  return swift_release();
}

void *sub_100062478(uint64_t a1)
{
  uint64_t v72 = type metadata accessor for ISO18013_5_1_ElementIdentifier();
  uint64_t v70 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  uint64_t v71 = (char *)v66 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void **)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for IdentityElement();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  os_log_type_t v11 = (char *)v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v66 - v12;
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v14((char *)v66 - v12, a1, v7);
  int v15 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v13, v7);
  if (v15 == enum case for IdentityElement.ageIsOver(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 96))(v13, v7);
    sub_100007764(&qword_100730CD0);
    uint64_t v16 = (void *)swift_allocObject();
    *((_OWORD *)v16 + 1) = xmmword_100610730;
    void v16[4] = static ISO18013_5_1_ElementIdentifier.ageOver(nn:)();
    v16[5] = v17;
    return v16;
  }
  if (v15 == enum case for IdentityElement.givenName(_:))
  {
    sub_100007764(&qword_100721280);
    uint64_t v18 = v70;
    unint64_t v19 = (*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
    uint64_t v20 = (void *)swift_allocObject();
    *((_OWORD *)v20 + 1) = xmmword_100610730;
    uint64_t v21 = (char *)v20 + v19;
    uint64_t v22 = (unsigned int *)&enum case for ISO18013_5_1_ElementIdentifier.givenName(_:);
LABEL_11:
    (*(void (**)(char *, void, uint64_t))(v18 + 104))(v21, *v22, v72);
    goto LABEL_12;
  }
  if (v15 == enum case for IdentityElement.familyName(_:))
  {
    sub_100007764(&qword_100721280);
    uint64_t v18 = v70;
    unint64_t v23 = (*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
    uint64_t v20 = (void *)swift_allocObject();
    *((_OWORD *)v20 + 1) = xmmword_100610730;
    uint64_t v21 = (char *)v20 + v23;
    uint64_t v22 = (unsigned int *)&enum case for ISO18013_5_1_ElementIdentifier.familyName(_:);
    goto LABEL_11;
  }
  if (v15 == enum case for IdentityElement.sex(_:))
  {
    sub_100007764(&qword_100721280);
    uint64_t v18 = v70;
    unint64_t v24 = (*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
    uint64_t v20 = (void *)swift_allocObject();
    *((_OWORD *)v20 + 1) = xmmword_100610730;
    uint64_t v21 = (char *)v20 + v24;
    uint64_t v22 = (unsigned int *)&enum case for ISO18013_5_1_ElementIdentifier.sex(_:);
    goto LABEL_11;
  }
  if (v15 == enum case for IdentityElement.portrait(_:))
  {
    sub_100007764(&qword_100721280);
    uint64_t v18 = v70;
    unint64_t v25 = (*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
    uint64_t v20 = (void *)swift_allocObject();
    *((_OWORD *)v20 + 1) = xmmword_100610730;
    uint64_t v21 = (char *)v20 + v25;
    uint64_t v22 = (unsigned int *)&enum case for ISO18013_5_1_ElementIdentifier.portrait(_:);
    goto LABEL_11;
  }
  if (v15 == enum case for IdentityElement.address(_:))
  {
    sub_100007764(&qword_100721280);
    uint64_t v41 = v70;
    uint64_t v42 = *(void *)(v70 + 72);
    unint64_t v43 = (*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
    uint64_t v20 = (void *)swift_allocObject();
    *((_OWORD *)v20 + 1) = xmmword_100611010;
    uint64_t v44 = (char *)v20 + v43;
    uint64_t v45 = *(void (**)(char *, void, uint64_t))(v41 + 104);
    uint64_t v46 = v72;
    v45(v44, enum case for ISO18013_5_1_ElementIdentifier.residentAddress(_:), v72);
    v45(&v44[v42], enum case for ISO18013_5_1_ElementIdentifier.residentCity(_:), v46);
    v45(&v44[2 * v42], enum case for ISO18013_5_1_ElementIdentifier.residentState(_:), v46);
    v45(&v44[3 * v42], enum case for ISO18013_5_1_ElementIdentifier.residentCountry(_:), v46);
    v45(&v44[4 * v42], enum case for ISO18013_5_1_ElementIdentifier.residentPostalCode(_:), v46);
  }
  else if (v15 == enum case for IdentityElement.issuingAuthority(_:))
  {
    sub_100007764(&qword_100721280);
    uint64_t v47 = v70;
    uint64_t v48 = *(void *)(v70 + 72);
    unint64_t v49 = (*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
    uint64_t v20 = (void *)swift_allocObject();
    *((_OWORD *)v20 + 1) = xmmword_100611000;
    uint64_t v50 = (char *)v20 + v49;
    uint64_t v51 = *(void (**)(char *, void, uint64_t))(v47 + 104);
    uint64_t v52 = v72;
    v51(v50, enum case for ISO18013_5_1_ElementIdentifier.issuingAuthority(_:), v72);
    v51(&v50[v48], enum case for ISO18013_5_1_ElementIdentifier.issuingJurisdiction(_:), v52);
    v51(&v50[2 * v48], enum case for ISO18013_5_1_ElementIdentifier.issuingCountry(_:), v52);
    v51(&v50[3 * v48], enum case for ISO18013_5_1_ElementIdentifier.unDistinguishingSign(_:), v52);
  }
  else
  {
    if (v15 != enum case for IdentityElement.documentDHSComplianceStatus(_:))
    {
      if (v15 == enum case for IdentityElement.documentIssueDate(_:))
      {
        sub_100007764(&qword_100721280);
        uint64_t v18 = v70;
        unint64_t v53 = (*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
        uint64_t v20 = (void *)swift_allocObject();
        *((_OWORD *)v20 + 1) = xmmword_100610730;
        uint64_t v21 = (char *)v20 + v53;
        uint64_t v22 = (unsigned int *)&enum case for ISO18013_5_1_ElementIdentifier.issueDate(_:);
        goto LABEL_11;
      }
      if (v15 == enum case for IdentityElement.documentExpirationDate(_:))
      {
        sub_100007764(&qword_100721280);
        uint64_t v18 = v70;
        unint64_t v54 = (*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
        uint64_t v20 = (void *)swift_allocObject();
        *((_OWORD *)v20 + 1) = xmmword_100610730;
        uint64_t v21 = (char *)v20 + v54;
        uint64_t v22 = (unsigned int *)&enum case for ISO18013_5_1_ElementIdentifier.expiryDate(_:);
        goto LABEL_11;
      }
      if (v15 == enum case for IdentityElement.documentNumber(_:))
      {
        sub_100007764(&qword_100721280);
        uint64_t v18 = v70;
        unint64_t v55 = (*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
        uint64_t v20 = (void *)swift_allocObject();
        *((_OWORD *)v20 + 1) = xmmword_100610730;
        uint64_t v21 = (char *)v20 + v55;
        uint64_t v22 = (unsigned int *)&enum case for ISO18013_5_1_ElementIdentifier.documentNumber(_:);
        goto LABEL_11;
      }
      if (v15 == enum case for IdentityElement.drivingPrivileges(_:))
      {
        sub_100007764(&qword_100721280);
        uint64_t v18 = v70;
        unint64_t v56 = (*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
        uint64_t v20 = (void *)swift_allocObject();
        *((_OWORD *)v20 + 1) = xmmword_100610730;
        uint64_t v21 = (char *)v20 + v56;
        uint64_t v22 = (unsigned int *)&enum case for ISO18013_5_1_ElementIdentifier.drivingPrivileges(_:);
        goto LABEL_11;
      }
      if (v15 == enum case for IdentityElement.age(_:))
      {
        sub_100007764(&qword_100721280);
        uint64_t v18 = v70;
        unint64_t v57 = (*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
        uint64_t v20 = (void *)swift_allocObject();
        *((_OWORD *)v20 + 1) = xmmword_100610730;
        uint64_t v21 = (char *)v20 + v57;
        uint64_t v22 = (unsigned int *)&enum case for ISO18013_5_1_ElementIdentifier.ageInYears(_:);
        goto LABEL_11;
      }
      if (v15 == enum case for IdentityElement.dateOfBirth(_:))
      {
        sub_100007764(&qword_100721280);
        uint64_t v18 = v70;
        unint64_t v58 = (*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
        uint64_t v20 = (void *)swift_allocObject();
        *((_OWORD *)v20 + 1) = xmmword_100610730;
        uint64_t v21 = (char *)v20 + v58;
        uint64_t v22 = (unsigned int *)&enum case for ISO18013_5_1_ElementIdentifier.birthDate(_:);
        goto LABEL_11;
      }
      unint64_t v69 = v4;
      defaultLogger()();
      v14(v11, a1, v7);
      id v59 = v6;
      id v60 = Logger.logObject.getter();
      os_log_type_t v61 = static os_log_type_t.debug.getter();
      int v68 = v61;
      if (os_log_type_enabled(v60, v61))
      {
        uint64_t v62 = (uint8_t *)swift_slowAlloc();
        Swift::String v67 = (void *)swift_slowAlloc();
        uint64_t v74 = v67;
        *(_DWORD *)uint64_t v62 = 136315138;
        v66[1] = v62 + 4;
        sub_100064350();
        uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v73 = sub_100110D58(v63, v64, (uint64_t *)&v74);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        os_log_type_t v65 = *(void (**)(char *, uint64_t))(v8 + 8);
        v65(v11, v7);
        _os_log_impl((void *)&_mh_execute_header, v60, (os_log_type_t)v68, "unknown element %s", v62, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        os_log_type_t v65 = *(void (**)(char *, uint64_t))(v8 + 8);
        v65(v11, v7);
      }

      ((void (*)(char *, uint64_t))v69[1])(v59, v3);
      v65(v13, v7);
    }
    uint64_t v20 = _swiftEmptyArrayStorage;
  }
LABEL_12:
  int64_t v26 = v20[2];
  if (v26)
  {
    uint64_t v74 = _swiftEmptyArrayStorage;
    sub_10011144C(0, v26, 0);
    uint64_t v28 = *(void *)(v70 + 16);
    uint64_t v27 = v70 + 16;
    unint64_t v69 = v20;
    uint64_t v70 = v28;
    uint64_t v29 = (char *)v20 + ((*(unsigned __int8 *)(v27 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 64));
    uint64_t v30 = *(void *)(v27 + 56);
    uint64_t v31 = (void (**)(char *, uint64_t))(v27 - 8);
    do
    {
      uint64_t v32 = v71;
      uint64_t v33 = v72;
      ((void (*)(char *, char *, uint64_t))v70)(v71, v29, v72);
      uint64_t v34 = ISO18013_5_1_ElementIdentifier.rawValue.getter();
      uint64_t v36 = v35;
      (*v31)(v32, v33);
      uint64_t v16 = v74;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10011144C(0, v16[2] + 1, 1);
        uint64_t v16 = v74;
      }
      unint64_t v38 = v16[2];
      unint64_t v37 = v16[3];
      if (v38 >= v37 >> 1)
      {
        sub_10011144C(v37 > 1, v38 + 1, 1);
        uint64_t v16 = v74;
      }
      _OWORD v16[2] = v38 + 1;
      uint64_t v39 = &v16[2 * v38];
      v39[4] = v34;
      v39[5] = v36;
      v29 += v30;
      --v26;
    }
    while (v26);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  return v16;
}

void *sub_100062FB8(uint64_t a1)
{
  uint64_t v71 = type metadata accessor for ISO18013_AAMVA_ElementIdentifier();
  uint64_t v69 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v70 = (char *)&v64 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void **)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for IdentityElement();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  os_log_type_t v11 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v64 - v12;
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v14((char *)&v64 - v12, a1, v7);
  int v15 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v13, v7);
  uint64_t v16 = _swiftEmptyArrayStorage;
  if (v15 != enum case for IdentityElement.ageIsOver(_:))
  {
    if (v15 == enum case for IdentityElement.givenName(_:))
    {
      sub_100007764(&qword_100721278);
      uint64_t v17 = v69;
      uint64_t v18 = *(void *)(v69 + 72);
      unint64_t v19 = (*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80);
      uint64_t v20 = swift_allocObject();
      *(_OWORD *)(v20 + 16) = xmmword_100611000;
      unint64_t v21 = v20 + v19;
      uint64_t v22 = *(void (**)(unint64_t, void, uint64_t))(v17 + 104);
      uint64_t v23 = v71;
      v22(v21, enum case for ISO18013_AAMVA_ElementIdentifier.givenNameTruncation(_:), v71);
      v22(v21 + v18, enum case for ISO18013_AAMVA_ElementIdentifier.akaGivenName(_:), v23);
      v22(v21 + 2 * v18, enum case for ISO18013_AAMVA_ElementIdentifier.nameSuffix(_:), v23);
      v22(v21 + 3 * v18, enum case for ISO18013_AAMVA_ElementIdentifier.akaSuffix(_:), v23);
      uint64_t v16 = (void *)v20;
      goto LABEL_25;
    }
    if (v15 == enum case for IdentityElement.familyName(_:))
    {
      sub_100007764(&qword_100721278);
      uint64_t v24 = v69;
      uint64_t v25 = *(void *)(v69 + 72);
      unint64_t v26 = (*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80);
      uint64_t v27 = swift_allocObject();
      *(_OWORD *)(v27 + 16) = xmmword_100611020;
      unint64_t v28 = v27 + v26;
      uint64_t v29 = *(void (**)(unint64_t, void, uint64_t))(v24 + 104);
      uint64_t v30 = v71;
      v29(v28, enum case for ISO18013_AAMVA_ElementIdentifier.familyNameTruncation(_:), v71);
      v29(v28 + v25, enum case for ISO18013_AAMVA_ElementIdentifier.akaFamilyName(_:), v30);
      uint64_t v16 = (void *)v27;
      goto LABEL_25;
    }
    if (v15 == enum case for IdentityElement.sex(_:))
    {
      sub_100007764(&qword_100721278);
      uint64_t v31 = v69;
      unint64_t v32 = (*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80);
      uint64_t v33 = swift_allocObject();
      *(_OWORD *)(v33 + 16) = xmmword_100610730;
      unint64_t v34 = v33 + v32;
      uint64_t v35 = (unsigned int *)&enum case for ISO18013_AAMVA_ElementIdentifier.sex(_:);
LABEL_24:
      (*(void (**)(unint64_t, void, uint64_t))(v31 + 104))(v34, *v35, v71);
      uint64_t v16 = (void *)v33;
      goto LABEL_25;
    }
    if (v15 == enum case for IdentityElement.portrait(_:)
      || v15 == enum case for IdentityElement.address(_:)
      || v15 == enum case for IdentityElement.issuingAuthority(_:))
    {
LABEL_16:
      uint64_t v16 = _swiftEmptyArrayStorage;
      goto LABEL_25;
    }
    if (v15 == enum case for IdentityElement.documentDHSComplianceStatus(_:))
    {
      sub_100007764(&qword_100721278);
      uint64_t v31 = v69;
      unint64_t v38 = (*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80);
      uint64_t v33 = swift_allocObject();
      *(_OWORD *)(v33 + 16) = xmmword_100610730;
      unint64_t v34 = v33 + v38;
      uint64_t v35 = (unsigned int *)&enum case for ISO18013_AAMVA_ElementIdentifier.dhsCompliance(_:);
      goto LABEL_24;
    }
    uint64_t v16 = _swiftEmptyArrayStorage;
    if (v15 != enum case for IdentityElement.documentIssueDate(_:)
      && v15 != enum case for IdentityElement.documentExpirationDate(_:)
      && v15 != enum case for IdentityElement.documentNumber(_:))
    {
      if (v15 == enum case for IdentityElement.drivingPrivileges(_:))
      {
        sub_100007764(&qword_100721278);
        uint64_t v31 = v69;
        unint64_t v39 = (*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80);
        uint64_t v33 = swift_allocObject();
        *(_OWORD *)(v33 + 16) = xmmword_100610730;
        unint64_t v34 = v33 + v39;
        uint64_t v35 = (unsigned int *)&enum case for ISO18013_AAMVA_ElementIdentifier.domesticDrivingPrivileges(_:);
        goto LABEL_24;
      }
      if (v15 != enum case for IdentityElement.age(_:) && v15 != enum case for IdentityElement.dateOfBirth(_:))
      {
        int v68 = v4;
        defaultLogger()();
        v14(v11, a1, v7);
        unint64_t v57 = Logger.logObject.getter();
        os_log_type_t v58 = static os_log_type_t.debug.getter();
        int v59 = v58;
        if (os_log_type_enabled(v57, v58))
        {
          int v66 = v59;
          id v60 = (uint8_t *)swift_slowAlloc();
          os_log_type_t v65 = (void *)swift_slowAlloc();
          uint64_t v73 = v65;
          uint64_t v67 = v3;
          *(_DWORD *)id v60 = 136315138;
          sub_100064350();
          uint64_t v61 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v72 = sub_100110D58(v61, v62, (uint64_t *)&v73);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v63 = *(void (**)(char *, uint64_t))(v8 + 8);
          v63(v11, v7);
          _os_log_impl((void *)&_mh_execute_header, v57, (os_log_type_t)v66, "unknown element %s", v60, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          ((void (*)(char *, uint64_t))v68[1])(v6, v67);
        }
        else
        {
          uint64_t v63 = *(void (**)(char *, uint64_t))(v8 + 8);
          v63(v11, v7);

          ((void (*)(char *, uint64_t))v68[1])(v6, v3);
        }
        v63(v13, v7);
        goto LABEL_16;
      }
    }
  }
LABEL_25:
  int64_t v40 = v16[2];
  if (v40)
  {
    uint64_t v73 = _swiftEmptyArrayStorage;
    uint64_t v41 = v16;
    sub_10011144C(0, v40, 0);
    uint64_t v43 = *(void *)(v69 + 16);
    uint64_t v42 = v69 + 16;
    int v68 = v41;
    uint64_t v69 = v43;
    uint64_t v44 = (char *)v41 + ((*(unsigned __int8 *)(v42 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 64));
    uint64_t v45 = *(void *)(v42 + 56);
    uint64_t v46 = (void (**)(char *, uint64_t))(v42 - 8);
    do
    {
      uint64_t v47 = v70;
      uint64_t v48 = v71;
      ((void (*)(char *, char *, uint64_t))v69)(v70, v44, v71);
      uint64_t v49 = ISO18013_AAMVA_ElementIdentifier.rawValue.getter();
      uint64_t v51 = v50;
      (*v46)(v47, v48);
      uint64_t v52 = v73;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10011144C(0, v52[2] + 1, 1);
        uint64_t v52 = v73;
      }
      unint64_t v54 = v52[2];
      unint64_t v53 = v52[3];
      if (v54 >= v53 >> 1)
      {
        sub_10011144C(v53 > 1, v54 + 1, 1);
        uint64_t v52 = v73;
      }
      v52[2] = v54 + 1;
      unint64_t v55 = &v52[2 * v54];
      v55[4] = v49;
      v55[5] = v51;
      v44 += v45;
      --v40;
    }
    while (v40);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  return v52;
}

uint64_t sub_100063850(uint64_t a1, uint64_t (*a2)(char *))
{
  uint64_t v79 = a2;
  uint64_t v3 = type metadata accessor for IdentityIntentToStore();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v89 = (char *)&v66 - v8;
  uint64_t v9 = type metadata accessor for IdentityElement();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100007764(&qword_100720AF0);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v80 = (char *)&v66 - v17;
  uint64_t v18 = (void *)sub_10015D044((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v19 = *(void *)(a1 + 64);
  uint64_t v67 = a1 + 64;
  uint64_t v20 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v21 = -1;
  if (v20 < 64) {
    uint64_t v21 = ~(-1 << v20);
  }
  unint64_t v83 = v21 & v19;
  uint64_t v69 = v10 + 16;
  uint64_t v88 = (void (**)(char *, char *, uint64_t))(v4 + 16);
  uint64_t v77 = (void (**)(char *, uint64_t, uint64_t))(v4 + 32);
  unint64_t v78 = (void (**)(char *, uint64_t, uint64_t))(v10 + 32);
  os_log_type_t v86 = (uint64_t (**)(char *, uint64_t))(v4 + 88);
  int v85 = enum case for IdentityIntentToStore.willNotStore(_:);
  uint64_t v70 = v10;
  uint64_t v71 = v4;
  uint64_t v84 = (void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v73 = (void (**)(char *, uint64_t))(v10 + 8);
  int64_t v68 = (unint64_t)(v20 + 63) >> 6;
  int64_t v66 = v68 - 1;
  uint64_t v72 = a1;
  swift_bridgeObjectRetain();
  int64_t v81 = 0;
  uint64_t v75 = v12;
  uint64_t v76 = v9;
  for (i = v16; ; uint64_t v16 = i)
  {
    if (v83)
    {
      unint64_t v22 = __clz(__rbit64(v83));
      v83 &= v83 - 1;
      unint64_t v23 = v22 | (v81 << 6);
LABEL_7:
      uint64_t v24 = v72;
      (*(void (**)(char *, unint64_t, uint64_t))(v70 + 16))(v16, *(void *)(v72 + 48) + *(void *)(v70 + 72) * v23, v9);
      uint64_t v25 = v71;
      unint64_t v26 = *(void *)(v24 + 56) + *(void *)(v71 + 72) * v23;
      uint64_t v27 = sub_100007764(&qword_100720B08);
      (*(void (**)(char *, unint64_t, uint64_t))(v25 + 16))(&v16[*(int *)(v27 + 48)], v26, v3);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v16, 0, 1, v27);
      uint64_t v28 = (uint64_t)v80;
      goto LABEL_26;
    }
    int64_t v29 = v81 + 1;
    if (__OFADD__(v81, 1)) {
      goto LABEL_61;
    }
    uint64_t v28 = (uint64_t)v80;
    if (v29 < v68)
    {
      unint64_t v30 = *(void *)(v67 + 8 * v29);
      if (v30) {
        goto LABEL_11;
      }
      int64_t v31 = v81 + 2;
      ++v81;
      if (v29 + 1 < v68)
      {
        unint64_t v30 = *(void *)(v67 + 8 * v31);
        if (v30) {
          goto LABEL_14;
        }
        int64_t v81 = v29 + 1;
        if (v29 + 2 < v68)
        {
          unint64_t v30 = *(void *)(v67 + 8 * (v29 + 2));
          if (v30)
          {
            v29 += 2;
            goto LABEL_11;
          }
          int64_t v31 = v29 + 3;
          int64_t v81 = v29 + 2;
          if (v29 + 3 < v68)
          {
            unint64_t v30 = *(void *)(v67 + 8 * v31);
            if (v30)
            {
LABEL_14:
              int64_t v29 = v31;
LABEL_11:
              unint64_t v83 = (v30 - 1) & v30;
              unint64_t v23 = __clz(__rbit64(v30)) + (v29 << 6);
              int64_t v81 = v29;
              goto LABEL_7;
            }
            while (1)
            {
              int64_t v29 = v31 + 1;
              if (__OFADD__(v31, 1)) {
                goto LABEL_62;
              }
              if (v29 >= v68) {
                break;
              }
              unint64_t v30 = *(void *)(v67 + 8 * v29);
              ++v31;
              if (v30) {
                goto LABEL_11;
              }
            }
            int64_t v81 = v66;
          }
        }
      }
    }
    uint64_t v32 = sub_100007764(&qword_100720B08);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v16, 1, 1, v32);
    unint64_t v83 = 0;
LABEL_26:
    sub_100048C3C((uint64_t)v16, v28);
    uint64_t v33 = sub_100007764(&qword_100720B08);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 48))(v28, 1, v33) == 1)
    {
      swift_release();
      return (uint64_t)v18;
    }
    uint64_t v34 = v28 + *(int *)(v33 + 48);
    (*v78)(v12, v28, v9);
    (*v77)(v89, v34, v3);
    uint64_t v35 = v79(v12);
    uint64_t v36 = *(void *)(v35 + 16);
    uint64_t v82 = v35;
    if (v36) {
      break;
    }
LABEL_4:
    swift_bridgeObjectRelease();
    (*v84)(v89, v3);
    uint64_t v12 = v75;
    uint64_t v9 = v76;
    (*v73)(v75, v76);
  }
  uint64_t v87 = *v88;
  unint64_t v37 = (uint64_t *)(v35 + 40);
  while (1)
  {
    uint64_t v38 = *(v37 - 1);
    uint64_t v39 = *v37;
    v87(v7, v89, v3);
    int v40 = (*v86)(v7, v3);
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (v40 != v85)
    {
      uint64_t v90 = v18;
      unint64_t v51 = sub_100590548(v38, v39);
      uint64_t v52 = v18[2];
      BOOL v53 = (v50 & 1) == 0;
      uint64_t v54 = v52 + v53;
      if (__OFADD__(v52, v53)) {
        goto LABEL_58;
      }
      char v55 = v50;
      if (v18[3] < v54)
      {
        sub_1001655C8(v54, isUniquelyReferenced_nonNull_native);
        unint64_t v56 = sub_100590548(v38, v39);
        if ((v55 & 1) != (v57 & 1)) {
          goto LABEL_63;
        }
        unint64_t v51 = v56;
        uint64_t v18 = v90;
        if ((v55 & 1) == 0) {
          goto LABEL_42;
        }
LABEL_50:
        *(unsigned char *)(v18[7] + v51) = 1;
LABEL_51:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*v84)(v7, v3);
        goto LABEL_31;
      }
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v18 = v90;
        if (v50) {
          goto LABEL_50;
        }
      }
      else
      {
        sub_10016AD70();
        uint64_t v18 = v90;
        if (v55) {
          goto LABEL_50;
        }
      }
LABEL_42:
      v18[(v51 >> 6) + 8] |= 1 << v51;
      os_log_type_t v58 = (uint64_t *)(v18[6] + 16 * v51);
      *os_log_type_t v58 = v38;
      v58[1] = v39;
      *(unsigned char *)(v18[7] + v51) = 1;
      uint64_t v59 = v18[2];
      BOOL v60 = __OFADD__(v59, 1);
      uint64_t v61 = v59 + 1;
      if (v60) {
        goto LABEL_59;
      }
      void v18[2] = v61;
      swift_bridgeObjectRetain();
      goto LABEL_51;
    }
    uint64_t v90 = v18;
    unint64_t v43 = sub_100590548(v38, v39);
    uint64_t v44 = v18[2];
    BOOL v45 = (v42 & 1) == 0;
    uint64_t v46 = v44 + v45;
    if (__OFADD__(v44, v45)) {
      break;
    }
    char v47 = v42;
    if (v18[3] >= v46)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v18 = v90;
        if ((v42 & 1) == 0) {
          goto LABEL_46;
        }
      }
      else
      {
        sub_10016AD70();
        uint64_t v18 = v90;
        if ((v47 & 1) == 0) {
          goto LABEL_46;
        }
      }
    }
    else
    {
      sub_1001655C8(v46, isUniquelyReferenced_nonNull_native);
      unint64_t v48 = sub_100590548(v38, v39);
      if ((v47 & 1) != (v49 & 1)) {
        goto LABEL_63;
      }
      unint64_t v43 = v48;
      uint64_t v18 = v90;
      if ((v47 & 1) == 0)
      {
LABEL_46:
        v18[(v43 >> 6) + 8] |= 1 << v43;
        unint64_t v62 = (uint64_t *)(v18[6] + 16 * v43);
        *unint64_t v62 = v38;
        v62[1] = v39;
        *(unsigned char *)(v18[7] + v43) = 0;
        uint64_t v63 = v18[2];
        BOOL v60 = __OFADD__(v63, 1);
        uint64_t v64 = v63 + 1;
        if (v60) {
          goto LABEL_60;
        }
        void v18[2] = v64;
        swift_bridgeObjectRetain();
        goto LABEL_30;
      }
    }
    *(unsigned char *)(v18[7] + v43) = 0;
LABEL_30:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_31:
    v37 += 2;
    if (!--v36) {
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t sub_1000640F0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ISO18013KnownNamespaces();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v6 = sub_10015D158((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v7 = *(int *)(type metadata accessor for ValidatedDigitalPresentmentRequest() + 20);
  uint64_t v8 = *(void *)(a1 + v7);
  uint64_t v9 = sub_100063850(v8, (uint64_t (*)(char *))sub_100062478);
  if (*(void *)(v9 + 16))
  {
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for ISO18013KnownNamespaces.iso18013_5_1(_:), v2);
    uint64_t v10 = ISO18013KnownNamespaces.rawValue.getter();
    uint64_t v12 = v11;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v21 = v6;
    sub_100562838(v9, v10, v12, isUniquelyReferenced_nonNull_native);
    unint64_t v6 = v21;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v8 = *(void *)(a1 + v7);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v14 = sub_100063850(v8, (uint64_t (*)(char *))sub_100062FB8);
  if (*(void *)(v14 + 16))
  {
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for ISO18013KnownNamespaces.iso18013_5_1_aamva(_:), v2);
    uint64_t v15 = ISO18013KnownNamespaces.rawValue.getter();
    uint64_t v17 = v16;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    char v18 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v21 = v6;
    sub_100562838(v14, v15, v17, v18);
    unint64_t v6 = v21;
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return v6;
}

unint64_t sub_100064350()
{
  unint64_t result = qword_100721270;
  if (!qword_100721270)
  {
    type metadata accessor for IdentityElement();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100721270);
  }
  return result;
}

uint64_t sub_1000643A8()
{
  uint64_t v52 = (void *)type metadata accessor for DIPError.Code();
  uint64_t v49 = *(v52 - 1);
  __chkstk_darwin(v52);
  unint64_t v51 = (char *)&v44 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v50 = *(void *)(v2 - 8);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v44 - v6;
  uint64_t v8 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v8 - 8);
  uint64_t v55 = type metadata accessor for DIPSignpost();
  uint64_t v53 = *(void *)(v55 - 8);
  uint64_t v9 = *(void *)(v53 + 64);
  uint64_t v10 = __chkstk_darwin(v55);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v44 - v11;
  static DaemonSignposts.requestDocumentSheet.getter();
  uint64_t v54 = v12;
  DIPSignpost.init(_:)();
  uint64_t v13 = v0;
  uint64_t v14 = v57;
  uint64_t v15 = sub_100064A38();
  if (v14) {
    return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v54, v55);
  }
  uint64_t v17 = v15;
  uint64_t v45 = v9;
  uint64_t v46 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v18 = v7;
  uint64_t v19 = v51;
  uint64_t v20 = v52;
  char v47 = v5;
  uint64_t v48 = 0;
  uint64_t v57 = v2;
  id v21 = [objc_allocWithZone((Class)PKPaymentAuthorizationCoordinator) initWithPaymentRequest:v15];
  if (!v21)
  {
    (*(void (**)(char *, void, void *))(v49 + 104))(v19, enum case for DIPError.Code.dpAuthorizationCoordinatorCreateFailure(_:), v20);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100066498((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v54, v55);
  }
  unint64_t v22 = v21;
  uint64_t v52 = v17;
  unint64_t v23 = v18;
  defaultLogger()();
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    unint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "DigitalPresentmentUIPresenter.present: Created PKPaymentAuthorizedCoordinator.", v26, 2u);
    swift_slowDealloc();
  }

  uint64_t v27 = *(void (**)(char *, uint64_t))(v50 + 8);
  v27(v23, v57);
  [v22 _setPrivateDelegate:*(void *)&v13[OBJC_IVAR____TtC8coreidvd29DigitalPresentmentUIPresenter_privateDelegate]];
  uint64_t v28 = *(void **)&v13[OBJC_IVAR____TtC8coreidvd29DigitalPresentmentUIPresenter_authCoordinator];
  *(void *)&v13[OBJC_IVAR____TtC8coreidvd29DigitalPresentmentUIPresenter_authCoordinator] = v22;
  id v29 = v22;

  unint64_t v30 = v47;
  defaultLogger()();
  int64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.debug.getter();
  BOOL v33 = os_log_type_enabled(v31, v32);
  uint64_t v34 = v45;
  if (v33)
  {
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v35 = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "DigitalPresentmentUIPresenter.present: Calling coordinator.present()", v35, 2u);
    swift_slowDealloc();
  }

  v27(v30, v57);
  uint64_t v37 = v53;
  uint64_t v36 = v54;
  uint64_t v38 = v46;
  uint64_t v39 = v55;
  (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v46, v54, v55);
  unint64_t v40 = (*(unsigned __int8 *)(v37 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
  uint64_t v41 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v37 + 32))(v41 + v40, v38, v39);
  *(void *)(v41 + ((v34 + v40 + 7) & 0xFFFFFFFFFFFFFFF8)) = v13;
  aBlock[4] = sub_1000663E4;
  aBlock[5] = v41;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100065AF8;
  aBlock[3] = &unk_1006F5EB8;
  char v42 = _Block_copy(aBlock);
  unint64_t v43 = v13;
  swift_release();
  [v29 presentWithCompletion:v42];
  _Block_release(v42);

  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v36, v39);
}

char **sub_100064A38()
{
  uint64_t v2 = type metadata accessor for DIPError.Code();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DigitalPresentmentDisplayConfiguration.StringID();
  uint64_t v7 = *(char ***)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v80 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v76 = *(void *)(v9 - 8);
  uint64_t v77 = v9;
  __chkstk_darwin(v9);
  uint64_t v79 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = v0;
  uint64_t v11 = v0 + OBJC_IVAR____TtC8coreidvd29DigitalPresentmentUIPresenter_context;
  uint64_t v12 = type metadata accessor for DigitalPresentmentFlow.Context(0);
  uint64_t v13 = (uint64_t *)(v11 + *(int *)(v12 + 60));
  unint64_t v14 = v13[1];
  if (v14 >> 60 == 15)
  {
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for DIPError.Code.dpExternalizedContextNil(_:), v2);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100066498((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return v7;
  }
  uint64_t v71 = v2;
  uint64_t v72 = v3;
  uint64_t v15 = v5;
  uint64_t v69 = v7;
  uint64_t v70 = v6;
  uint64_t v75 = v11;
  uint64_t v16 = *v13;
  uint64_t v17 = v12;
  id v18 = objc_allocWithZone((Class)PKPaymentRequest);
  sub_10002CEB0(v16, v14);
  uint64_t v7 = (char **)[v18 init];
  uint64_t v73 = v16;
  uint64_t v19 = v75;
  unint64_t v78 = v14;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [v7 setExternalizedContext:isa];

  [v7 setRequestType:13];
  [v7 setConfirmationStyle:1];
  uint64_t v21 = v19 + *(int *)(v17 + 28);
  unint64_t v22 = *(void *)(v21 + 56);
  if (v22 >> 60 == 15)
  {
    unint64_t v23 = v78;
    int64_t v68 = v15;
    uint64_t v24 = v1;
  }
  else
  {
    uint64_t v25 = *(void *)(v21 + 48);
    type metadata accessor for SecAccessControl(0);
    sub_10002CEB0(v25, v22);
    uint64_t v26 = static SecAccessControlRef.fromData(_:)();
    uint64_t v24 = v1;
    if (v1)
    {
      sub_10000C5E0(v25, v22);
LABEL_17:

      uint64_t v41 = v73;
      unint64_t v42 = v78;
      goto LABEL_18;
    }
    uint64_t v27 = (void *)v26;
    uint64_t v67 = v25;
    [v7 setAccesssControlRef:v26];

    defaultLogger()();
    uint64_t v28 = v7;
    id v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.debug.getter();
    int v31 = v30;
    BOOL v32 = os_log_type_enabled(v29, v30);
    int64_t v68 = v15;
    if (v32)
    {
      os_log_t v65 = v29;
      int v66 = v31;
      BOOL v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v64 = swift_slowAlloc();
      uint64_t v82 = v64;
      *(_DWORD *)BOOL v33 = 136315138;
      uint64_t v63 = v33 + 12;
      uint64_t v61 = v33;
      unint64_t v62 = v33 + 4;
      id v60 = [v28 accesssControlRef];
      uint64_t v81 = (uint64_t)v60;
      sub_100007764(&qword_1007212F8);
      uint64_t v34 = Optional.debugDescription.getter();
      unint64_t v36 = v35;

      uint64_t v81 = sub_100110D58(v34, v36, &v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      os_log_t v37 = v65;
      _os_log_impl((void *)&_mh_execute_header, v65, (os_log_type_t)v66, "DigitalPresentmentUIPresenter SecAccessControl = %s", v61, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      sub_10000C5E0(v67, v22);
    }
    else
    {

      sub_10000C5E0(v67, v22);
    }
    (*(void (**)(char *, uint64_t))(v76 + 8))(v79, v77);
    unint64_t v23 = v78;
  }
  uint64_t v39 = v71;
  uint64_t v38 = v72;
  NSString v40 = String._bridgeToObjectiveC()();
  [v7 setClientViewSourceIdentifier:v40];

  static DigitalPresentmentClientSourceDictionaryHelper.createDictionary(displayConfiguration:)();
  if (v24)
  {

    uint64_t v41 = v73;
    unint64_t v42 = v23;
LABEL_18:
    sub_10000C5E0(v41, v42);
    return v7;
  }
  Class v43 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v7 setClientViewSourceParameter:v43];

  [v7 setPaymentContentItems:0];
  id v44 = [v7 accesssControlRef];

  if (!v44)
  {
    (*(void (**)(char *, void, uint64_t))(v38 + 104))(v68, enum case for DIPError.Code.dpAccesssControlRefNil(_:), v39);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100066498((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    goto LABEL_17;
  }
  unsigned __int8 v45 = sub_10053F46C();
  int v46 = v45;
  sub_100065B4C(v45);
  NSString v47 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v7 setLocalizedConfirmationTitle:v47];

  uint64_t v48 = v80;
  if (v46 == 1)
  {
    uint64_t v50 = v69;
    uint64_t v49 = v70;
    uint64_t v79 = v69[13];
    ((void (*)(char *, void, uint64_t))v79)(v80, enum case for DigitalPresentmentDisplayConfiguration.StringID.digitalPresentmentTouchIDRetryText(_:), v70);
    static DigitalPresentmentDisplayConfiguration.getString(_:)();
    unint64_t v51 = v50[1];
    ((void (*)(char *, uint64_t))v51)(v80, v49);
    NSString v52 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v7 setLocalizedBiometricRetryMessage:v52];

    ((void (*)(char *, void, uint64_t))v79)(v80, enum case for DigitalPresentmentDisplayConfiguration.StringID.digitalPresentmentUnboundFingerprintText(_:), v49);
    static DigitalPresentmentDisplayConfiguration.getString(_:)();
    ((void (*)(char *, uint64_t))v51)(v80, v49);
    NSString v53 = String._bridgeToObjectiveC()();
    uint64_t v48 = v80;
    swift_bridgeObjectRelease();
  }
  else
  {
    [v7 setLocalizedBiometricRetryMessage:0];
    NSString v53 = 0;
    uint64_t v50 = v69;
    uint64_t v49 = v70;
  }
  [v7 setLocalizedUnboundBiometricMessage:v53];

  uint64_t v80 = v50[13];
  ((void (*)(char *, void, uint64_t))v80)(v48, enum case for DigitalPresentmentDisplayConfiguration.StringID.presentmentAuthenticationFailedTitleText(_:), v49);
  static DigitalPresentmentDisplayConfiguration.getString(_:)();
  uint64_t v55 = v50[1];
  ((void (*)(char *, uint64_t))v55)(v48, v49);
  NSString v56 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v7 setLocalizedErrorMessage:v56];

  ((void (*)(char *, void, uint64_t))v80)(v48, enum case for DigitalPresentmentDisplayConfiguration.StringID.presentmentSecurelyPresentingTitleText(_:), v49);
  static DigitalPresentmentDisplayConfiguration.getString(_:)();
  ((void (*)(char *, uint64_t))v55)(v48, v49);
  NSString v57 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v7 setLocalizedAuthorizingTitle:v57];

  [v7 setDisablePasscodeFallback:1];
  sub_10040E8D0(v75);
  type metadata accessor for PKPaymentRequestClientAnalyticsParameters(0);
  sub_100066498(&qword_10071F9E0, type metadata accessor for PKPaymentRequestClientAnalyticsParameters);
  Class v58 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v7 setClientAnalyticsParameters:v58];

  sub_10000C5E0(v73, v78);
  return v7;
}

void sub_10006553C(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v20 - v10;
  defaultLogger()();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    unint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v14 = 67109120;
    v20[2] = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "DigitalPresentmentUIPresenter.present: Callback invoked with result=%{BOOL}d", v14, 8u);
    swift_slowDealloc();
  }

  uint64_t v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v11, v5);
  if ((a1 & 1) == 0)
  {
    defaultLogger()();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      id v18 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v18 = 67109120;
      v20[3] = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "DigitalPresentmentUIPresenter.present: Invocation to display presentment sheet called completion with result=%{BOOL}d, canceling", v18, 8u);
      swift_slowDealloc();
    }

    v15(v9, v5);
    uint64_t v19 = *(void **)(a3 + OBJC_IVAR____TtC8coreidvd29DigitalPresentmentUIPresenter_authCoordinator);
    *(void *)(a3 + OBJC_IVAR____TtC8coreidvd29DigitalPresentmentUIPresenter_authCoordinator) = 0;

    sub_1000657D4();
  }
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
}

uint64_t sub_1000657D4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007764(&qword_10071FEE0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v26 - v10;
  defaultLogger()();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    unint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "DigitalPresentmentUIPresenter cancel invoked.", v14, 2u);
    swift_slowDealloc();
  }

  uint64_t v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v11, v5);
  uint64_t v16 = *(void *)(v1 + OBJC_IVAR____TtC8coreidvd29DigitalPresentmentUIPresenter_uiResultPromise);
  defaultLogger()();
  os_log_type_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "DigitalPresentmentUIPresenter dismiss invoked.", v19, 2u);
    swift_slowDealloc();
  }

  v15(v9, v5);
  uint64_t v20 = *(void **)(v1 + OBJC_IVAR____TtC8coreidvd29DigitalPresentmentUIPresenter_authCoordinator);
  if (v20) {
    [v20 dismissWithCompletion:0];
  }
  v21._object = (void *)0x80000001006322D0;
  v22._uint64_t countAndFlagsBits = 0x3665663035323264;
  v22._object = (void *)0xE800000000000000;
  v21._uint64_t countAndFlagsBits = 0xD000000000000015;
  logMilestone(tag:description:)(v22, v21);
  uint64_t v23 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v4, 1, 1, v23);
  uint64_t v24 = (void *)swift_allocObject();
  v24[2] = 0;
  v24[3] = 0;
  v24[4] = v16;
  swift_retain();
  sub_10014043C((uint64_t)v4, (uint64_t)&unk_1007212E8, (uint64_t)v24);
  return swift_release();
}

uint64_t sub_100065AF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

uint64_t sub_100065B4C(char a1)
{
  uint64_t v3 = type metadata accessor for DigitalPresentmentDisplayConfiguration.StringID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(a1)
  {
    case 1:
      uint64_t v7 = (unsigned int *)&enum case for DigitalPresentmentDisplayConfiguration.StringID.touchIDConfirmationTitleText(_:);
      goto LABEL_8;
    case 2:
      sub_10000C728((void *)(v1 + OBJC_IVAR____TtC8coreidvd29DigitalPresentmentUIPresenter_deviceInformationProvider), *(void *)(v1 + OBJC_IVAR____TtC8coreidvd29DigitalPresentmentUIPresenter_deviceInformationProvider + 24));
      char v8 = dispatch thunk of DeviceInformationProviding.isFaceIDDevice.getter();
      uint64_t v9 = *(void (**)(char *, void, uint64_t))(v4 + 104);
      if (v8) {
        goto LABEL_6;
      }
      uint64_t v10 = (unsigned int *)&enum case for DigitalPresentmentDisplayConfiguration.StringID.passcodeConfirmationTitleText(_:);
      goto LABEL_10;
    case 3:
      sub_10000C728((void *)(v1 + OBJC_IVAR____TtC8coreidvd29DigitalPresentmentUIPresenter_deviceInformationProvider), *(void *)(v1 + OBJC_IVAR____TtC8coreidvd29DigitalPresentmentUIPresenter_deviceInformationProvider + 24));
      char v11 = dispatch thunk of DeviceInformationProviding.isFaceIDDevice.getter();
      uint64_t v9 = *(void (**)(char *, void, uint64_t))(v4 + 104);
      if (v11) {
LABEL_6:
      }
        uint64_t v10 = (unsigned int *)&enum case for DigitalPresentmentDisplayConfiguration.StringID.faceIDConfirmationTitleText(_:);
      else {
        uint64_t v10 = (unsigned int *)&enum case for DigitalPresentmentDisplayConfiguration.StringID.touchIDConfirmationTitleText(_:);
      }
LABEL_10:
      v9(v6, *v10, v3);
      break;
    default:
      uint64_t v7 = (unsigned int *)&enum case for DigitalPresentmentDisplayConfiguration.StringID.faceIDConfirmationTitleText(_:);
LABEL_8:
      (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *v7, v3);
      break;
  }
  uint64_t v12 = static DigitalPresentmentDisplayConfiguration.getString(_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v12;
}

uint64_t sub_100065D20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[3] = v5;
  v4[4] = *(void *)(v5 - 8);
  v4[5] = swift_task_alloc();
  return _swift_task_switch(sub_100065DE0, 0, 0);
}

uint64_t sub_100065DE0()
{
  (*(void (**)(void, void, void))(v0[4] + 104))(v0[5], enum case for DIPError.Code.digitalPresentmentAppCancelled(_:), v0[3]);
  sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100066498((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  v0[6] = swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_100007764(&qword_1007212F0);
  sub_1000662E4();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100065F78, v2, v1);
}

uint64_t sub_100065F78()
{
  dispatch thunk of AsyncPromise.fail(error:)();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

id sub_100066028()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return [super dealloc];
}

uint64_t sub_1000660DC()
{
  return type metadata accessor for DigitalPresentmentUIPresenter();
}

uint64_t type metadata accessor for DigitalPresentmentUIPresenter()
{
  uint64_t result = qword_1007212D0;
  if (!qword_1007212D0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100066130()
{
  uint64_t result = type metadata accessor for DigitalPresentmentFlow.Context(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000661F0()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100066230(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10000C494;
  return sub_100065D20(a1, v4, v5, v6);
}

unint64_t sub_1000662E4()
{
  unint64_t result = qword_100723630;
  if (!qword_100723630)
  {
    sub_100019364(&qword_1007212F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100723630);
  }
  return result;
}

uint64_t sub_100066340()
{
  uint64_t v1 = type metadata accessor for DIPSignpost();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6 + 8, v5);
}

void sub_1000663E4(char a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for DIPSignpost() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  sub_10006553C(a1, v1 + v4, v5);
}

uint64_t sub_100066480(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100066490()
{
  return swift_release();
}

uint64_t sub_100066498(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000664E0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DigitalPresentmentFlow.Context(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10006653C(uint64_t a1, void *a2)
{
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v33 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v6 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v9 = v8 | (v6 << 6);
    }
    else
    {
      int64_t v10 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        goto LABEL_38;
      }
      if (v10 >= v33) {
        return swift_release();
      }
      unint64_t v11 = *(void *)(v32 + 8 * v10);
      ++v6;
      if (!v11)
      {
        int64_t v6 = v10 + 1;
        if (v10 + 1 >= v33) {
          return swift_release();
        }
        unint64_t v11 = *(void *)(v32 + 8 * v6);
        if (!v11)
        {
          int64_t v6 = v10 + 2;
          if (v10 + 2 >= v33) {
            return swift_release();
          }
          unint64_t v11 = *(void *)(v32 + 8 * v6);
          if (!v11)
          {
            int64_t v6 = v10 + 3;
            if (v10 + 3 >= v33) {
              return swift_release();
            }
            unint64_t v11 = *(void *)(v32 + 8 * v6);
            if (!v11)
            {
              int64_t v12 = v10 + 4;
              if (v12 >= v33) {
                return swift_release();
              }
              unint64_t v11 = *(void *)(v32 + 8 * v12);
              if (!v11)
              {
                while (1)
                {
                  int64_t v6 = v12 + 1;
                  if (__OFADD__(v12, 1)) {
                    goto LABEL_39;
                  }
                  if (v6 >= v33) {
                    return swift_release();
                  }
                  unint64_t v11 = *(void *)(v32 + 8 * v6);
                  ++v12;
                  if (v11) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v6 = v12;
            }
          }
        }
      }
LABEL_23:
      unint64_t v5 = (v11 - 1) & v11;
      unint64_t v9 = __clz(__rbit64(v11)) + (v6 << 6);
    }
    os_log_type_t v13 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v9);
    uint64_t v15 = *v13;
    uint64_t v14 = v13[1];
    swift_bridgeObjectRetain_n();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    os_log_type_t v17 = (void *)*a2;
    unint64_t v35 = (void *)*a2;
    *a2 = 0x8000000000000000;
    unint64_t v19 = sub_100590548(v15, v14);
    uint64_t v20 = v17[2];
    BOOL v21 = (v18 & 1) == 0;
    uint64_t v22 = v20 + v21;
    if (__OFADD__(v20, v21)) {
      break;
    }
    char v23 = v18;
    if (v17[3] >= v22)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v26 = v35;
        if (v18) {
          goto LABEL_4;
        }
      }
      else
      {
        sub_10016B150();
        uint64_t v26 = v35;
        if (v23) {
          goto LABEL_4;
        }
      }
    }
    else
    {
      sub_100165DA4(v22, isUniquelyReferenced_nonNull_native);
      unint64_t v24 = sub_100590548(v15, v14);
      if ((v23 & 1) != (v25 & 1)) {
        goto LABEL_40;
      }
      unint64_t v19 = v24;
      uint64_t v26 = v35;
      if (v23)
      {
LABEL_4:
        uint64_t v7 = v26[7];
        swift_bridgeObjectRelease();
        *(void *)(v7 + 8 * v19) = &_swiftEmptySetSingleton;
        goto LABEL_5;
      }
    }
    v26[(v19 >> 6) + 8] |= 1 << v19;
    uint64_t v27 = (uint64_t *)(v26[6] + 16 * v19);
    *uint64_t v27 = v15;
    v27[1] = v14;
    *(void *)(v26[7] + 8 * v19) = &_swiftEmptySetSingleton;
    uint64_t v28 = v26[2];
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_37;
    }
    v26[2] = v30;
    swift_bridgeObjectRetain();
LABEL_5:
    *a2 = v26;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10006683C()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

void *sub_10006691C()
{
  if (*(void *)(v0 + 6024))
  {
    uint64_t v1 = *(void **)(v0 + 6024);
  }
  else
  {
    uint64_t v1 = _swiftEmptyArrayStorage;
    *(void *)(v0 + 6024) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100066964(uint64_t a1, uint64_t a2)
{
  v3[3160] = v2;
  v3[3159] = a2;
  v3[3158] = a1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  v3[3161] = v4;
  v3[3162] = *(void *)(v4 - 8);
  v3[3163] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DispatchQoS();
  v3[3164] = v5;
  v3[3165] = *(void *)(v5 - 8);
  v3[3166] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  v3[3167] = v6;
  v3[3168] = *(void *)(v6 - 8);
  v3[3169] = swift_task_alloc();
  v3[3170] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DispatchTime();
  v3[3171] = v7;
  v3[3172] = *(void *)(v7 - 8);
  v3[3173] = swift_task_alloc();
  v3[3174] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for OS_dispatch_source.TimerFlags();
  v3[3175] = v8;
  v3[3176] = *(void *)(v8 - 8);
  v3[3177] = swift_task_alloc();
  sub_100007764(&qword_100722320);
  v3[3178] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Logger();
  v3[3179] = v9;
  v3[3180] = *(void *)(v9 - 8);
  v3[3181] = swift_task_alloc();
  v3[3182] = swift_task_alloc();
  sub_100007764(&qword_100722328);
  v3[3183] = swift_task_alloc();
  uint64_t v10 = sub_100007764(&qword_100722330);
  v3[3184] = v10;
  v3[3185] = *(void *)(v10 - 8);
  v3[3186] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for DIPError.Code();
  v3[3187] = v11;
  v3[3188] = *(void *)(v11 - 8);
  v3[3189] = swift_task_alloc();
  sub_100007764(&qword_100722338);
  v3[3190] = swift_task_alloc();
  v3[3191] = swift_task_alloc();
  uint64_t v12 = sub_100007764((uint64_t *)&unk_100722340);
  v3[3192] = v12;
  v3[3193] = *(void *)(v12 - 8);
  v3[3194] = swift_task_alloc();
  return _swift_task_switch(sub_100066DE4, 0, 0);
}

uint64_t sub_100066DE4()
{
  uint64_t v73 = v0;
  uint64_t v1 = *(void *)(v0 + 25544);
  uint64_t v2 = *(void *)(v0 + 25536);
  uint64_t v3 = *(void *)(v0 + 25528);
  uint64_t v4 = *(void *)(v0 + 25280);
  uint64_t v5 = *(void *)(v0 + 25264);
  sub_1000ABB90((_OWORD *)(v0 + 16));
  sub_1000BEA14(v0 + 16, v4 + 32, &qword_1007222F8);
  *(_OWORD *)(v4 + 6024) = 0u;
  *(_OWORD *)(v4 + 6040) = 0u;
  *(_OWORD *)(v4 + 6049) = 0u;
  *(void *)(v4 + 6072) = sub_10015D18C((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v4 + 6080) = _swiftEmptyArrayStorage;
  *(void *)(v4 + 6088) = sub_10015D198((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v4 + 6096) = sub_10015D198((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v6 = v5 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_inoWorkflow;
  sub_100048D6C(v5 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_inoWorkflow, v3, &qword_100722338);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  unsigned int v8 = v7(v3, 1, v2);
  *(_DWORD *)(v0 + 5940) = v8;
  if (v8 == 1)
  {
    uint64_t v9 = *(void *)(v0 + 25528);
    uint64_t v10 = *(void *)(v0 + 25512);
    uint64_t v11 = *(void *)(v0 + 25504);
    uint64_t v12 = *(void *)(v0 + 25496);
    swift_bridgeObjectRelease();
    sub_10000C6CC(v9, &qword_100722338);
    (*(void (**)(uint64_t, void, uint64_t))(v11 + 104))(v10, enum case for DIPError.Code.serverResponseInconsistent(_:), v12);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000AF434((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_release();
    LODWORD(v9) = *(_DWORD *)(v0 + 5940);
    sub_1000BEA14(*(void *)(v0 + 25280) + 32, v0 + 17800, &qword_1007222F8);
    sub_1000AF47C(v0 + 17800, sub_1000ABBA4);
    if (v9 != 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for LegacySynthesizedWorkflows();
    swift_deallocPartialClassInstance();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
  else
  {
    uint64_t v67 = v4 + 32;
    uint64_t v69 = v6;
    uint64_t v70 = v7;
    uint64_t v65 = v0 + 5944;
    uint64_t v66 = v0 + 11872;
    uint64_t v15 = *(void *)(v0 + 25552);
    uint64_t v16 = *(void *)(v0 + 25544);
    uint64_t v17 = *(void *)(v0 + 25536);
    uint64_t v18 = *(void *)(v0 + 25480);
    uint64_t v19 = *(void *)(v0 + 25472);
    uint64_t v20 = *(void *)(v0 + 25464);
    uint64_t v21 = *(void *)(v0 + 25280);
    uint64_t v22 = *(void *)(v0 + 25264);
    (*(void (**)(uint64_t, void, uint64_t))(v16 + 32))(v15, *(void *)(v0 + 25528), v17);
    JWSSignedJSON.payload.getter();
    uint64_t v64 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v64(v15, v17);
    uint64_t v71 = v21;
    *(void *)(v21 + 16) = *(void *)(v0 + 25208);
    sub_100048D6C(v22 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_spWorkflow, v20, &qword_100722328);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v20, 1, v19) == 1)
    {
      uint64_t v23 = *(void *)(v0 + 25280);
      sub_10000C6CC(*(void *)(v0 + 25464), &qword_100722328);
      *(void *)(v23 + 24) = 0;
      defaultLogger()();
      unint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v26 = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "missing SP Workflow in WorkflowRecommendationResponse", v26, 2u);
        swift_slowDealloc();
      }
      uint64_t v27 = *(void *)(v0 + 25456);
      uint64_t v28 = *(void *)(v0 + 25440);
      uint64_t v29 = *(void *)(v0 + 25432);

      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
    }
    else
    {
      uint64_t v30 = *(void *)(v0 + 25488);
      uint64_t v31 = *(void *)(v0 + 25480);
      uint64_t v32 = *(void *)(v0 + 25472);
      uint64_t v33 = *(void *)(v0 + 25280);
      (*(void (**)(uint64_t, void, uint64_t))(v31 + 32))(v30, *(void *)(v0 + 25464), v32);
      JWSSignedJSON.payload.getter();
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
      *(void *)(v33 + 24) = *(void *)(v0 + 25256);
    }
    uint64_t v34 = *(void *)(v0 + 25280);
    uint64_t v35 = *(void *)(v0 + 25264);
    sub_1000BEA14(v35 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_imageQualityCriteria, v65, &qword_1007222F8);
    sub_1000BEA14(v67, v66, &qword_1007222F8);
    sub_1000BEA14(v65, v67, &qword_1007222F8);
    sub_1000AF47C(v65, sub_1000B21B4);
    sub_1000AF47C(v66, sub_1000ABBA4);
    uint64_t v36 = *(void *)(v35 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_assessmentProfile + 8);
    *(void *)(v34 + 5960) = *(void *)(v35 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_assessmentProfile);
    *(void *)(v34 + 5968) = v36;
    *(void *)(v34 + 5976) = *(void *)(v35 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_assessmentGUIDs);
    uint64_t v37 = *(void *)(v35 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_assessmentBaseURL + 8);
    *(void *)(v34 + 6000) = *(void *)(v35 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_assessmentBaseURL);
    *(void *)(v34 + 6008) = v37;
    *(unsigned char *)(v34 + 6016) = 0;
    uint64_t v38 = _swiftEmptyArrayStorage;
    if (*(void *)(v35 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_nonces)) {
      uint64_t v38 = *(void **)(v35 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_nonces);
    }
    *(void *)(v34 + 5984) = v38;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    defaultLogger()();
    swift_retain_n();
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.debug.getter();
    BOOL v41 = os_log_type_enabled(v39, v40);
    uint64_t v42 = *(void *)(v0 + 25448);
    uint64_t v43 = *(void *)(v0 + 25440);
    uint64_t v44 = *(void *)(v0 + 25432);
    if (v41)
    {
      uint64_t v68 = *(void *)(v0 + 25448);
      unsigned __int8 v45 = (uint8_t *)swift_slowAlloc();
      uint64_t v72 = swift_slowAlloc();
      *(_DWORD *)unsigned __int8 v45 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v46 = Array.description.getter();
      unint64_t v48 = v47;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 25248) = sub_100110D58(v46, v48, &v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "received nonces: %s", v45, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v68, v44);
    }
    else
    {
      swift_release_n();

      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
    }
    uint64_t v49 = *(void *)(v0 + 25536);
    uint64_t v50 = *(void *)(v0 + 25520);
    sub_100048D6C(v69, v50, &qword_100722338);
    if (v70(v50, 1, v49) == 1)
    {
      sub_10000C6CC(*(void *)(v0 + 25520), &qword_100722338);
      char v51 = 0;
    }
    else
    {
      uint64_t v52 = *(void *)(v0 + 25536);
      uint64_t v53 = *(void *)(v0 + 25520);
      JWSSignedJSON.payload.getter();
      uint64_t v54 = *(void *)(v0 + 25224);
      v64(v53, v52);
      uint64_t v55 = *(void *)(v54 + 64);
      uint64_t v56 = *(void *)(v54 + 72);
      swift_bridgeObjectRetain();
      swift_release();
      *(void *)(v0 + 25168) = v55;
      *(void *)(v0 + 25176) = v56;
      *(void *)(v0 + 25184) = 0x61746E6567616DLL;
      *(void *)(v0 + 25192) = 0xE700000000000000;
      sub_1000B5358();
      char v51 = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
    }
    *(unsigned char *)(v0 + 5937) = v51 & 1;
    uint64_t v57 = *(void *)(v0 + 25272);
    uint64_t v58 = *(void *)(*(void *)(v71 + 16) + 176);
    if (v57)
    {
      if (*(void *)(v58 + 16))
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        uint64_t v59 = sub_1005DDA6C(v58);
        swift_bridgeObjectRelease();
        uint64_t v60 = sub_1000848D8(v57, v59);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)(v60 + 16))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v58 = v60;
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        uint64_t v58 = *(void *)(v0 + 25272);
      }
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    *(void *)(v0 + 25568) = v58;
    *(void *)(v0 + 25560) = 0;
    if (qword_10071F4E0 != -1) {
      swift_once();
    }
    if (v51) {
      uint64_t v61 = 0x8000000100632A00;
    }
    else {
      uint64_t v61 = 0;
    }
    if (v51) {
      uint64_t v62 = 0xD000000000000025;
    }
    else {
      uint64_t v62 = 0;
    }
    uint64_t v63 = (void *)swift_task_alloc();
    *(void *)(v0 + 25576) = v63;
    *uint64_t v63 = v0;
    v63[1] = sub_100067964;
    return sub_1002AA1B8(v0 + 24160, v62, v61, v58, 1);
  }
}

uint64_t sub_100067964()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100067AA0, 0, 0);
}

uint64_t sub_100067AA0()
{
  uint64_t v20 = v0;
  sub_1000BEA14(v0 + 24160, v0 + 23728, &qword_100722350);
  if (sub_100044CCC(v0 + 23728) != 1)
  {
    memcpy((void *)(v0 + 24592), (const void *)(v0 + 23728), 0x1B0uLL);
    sub_1000BEA14(v0 + 24992, v0 + 25232, &qword_100722358);
    sub_1000BEA14(v0 + 25232, v0 + 25240, &qword_100722358);
    if (*(void *)(v0 + 25240))
    {
      uint64_t v1 = *(void *)(v0 + 25424);
      sub_100048D6C(*(void *)(v0 + 25264) + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_persoWorkflow, v1, &qword_100722320);
      uint64_t v2 = sub_100007764((uint64_t *)&unk_100722360);
      uint64_t v3 = *(void *)(v2 - 8);
      int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
      uint64_t v5 = *(void *)(v0 + 25424);
      uint64_t v6 = *(void *)(v0 + 25280);
      if (v4 == 1)
      {
        sub_100044D90((uint64_t *)(v0 + 24160));
        sub_10000C6CC(v5, &qword_100722320);
        *(void *)(v6 + 5992) = _swiftEmptyArrayStorage;
      }
      else
      {
        JWSSignedJSON.payload.getter();
        uint64_t v10 = *(void *)(v0 + 25216);
        (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v2);
        *(void *)(v6 + 5992) = v10;
        uint64_t v11 = *(void *)(v10 + 16);
        if (v11)
        {
          swift_bridgeObjectRetain();
          uint64_t v12 = (void *)(v10 + 64);
          do
          {
            uint64_t v13 = *(void *)(v0 + 25280);
            uint64_t v14 = *v12;
            uint64_t v15 = *(v12 - 3);
            v17[0] = *(v12 - 4);
            v17[1] = v15;
            long long v18 = *((_OWORD *)v12 - 1);
            uint64_t v19 = v14;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_100068B7C(v17, v13, v0 + 24592);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v12 += 5;
            --v11;
          }
          while (v11);
          sub_100044D90((uint64_t *)(v0 + 24160));
          swift_bridgeObjectRelease();
        }
        else
        {
          sub_100044D90((uint64_t *)(v0 + 24160));
        }
      }
      uint64_t v16 = (void *)swift_task_alloc();
      *(void *)(v0 + 25584) = v16;
      *uint64_t v16 = v0;
      v16[1] = sub_100068078;
      return sub_10006B168();
    }
    sub_100044D90((uint64_t *)(v0 + 24160));
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 25504) + 104))(*(void *)(v0 + 25512), enum case for DIPError.Code.missingAttributeConfig(_:), *(void *)(v0 + 25496));
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000AF434((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_release();
  swift_release();
  swift_release();
  int v7 = *(_DWORD *)(v0 + 5940);
  sub_1000BEA14(*(void *)(v0 + 25280) + 32, v0 + 17800, &qword_1007222F8);
  sub_1000AF47C(v0 + 17800, sub_1000ABBA4);
  if (v7 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for LegacySynthesizedWorkflows();
  swift_deallocPartialClassInstance();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unsigned int v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_100068078(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 25592) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100068A1C;
  }
  else
  {
    *(void *)(v4 + 25600) = a1;
    uint64_t v5 = sub_1000681A0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000681A0()
{
  uint64_t v1 = v0[3199];
  uint64_t v2 = v0[3160];
  *(void *)(v2 + 6024) = v0[3200];
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v3 = swift_retain();
  sub_100085600(v3, (void *)(v2 + 6088));
  uint64_t v4 = v0[3160];
  if (v1)
  {
    swift_endAccess();
    swift_release();
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
  else
  {
    swift_endAccess();
    swift_release();
    if (*(void *)(v4 + 24))
    {
      uint64_t v7 = (void *)(v0[3160] + 6096);
      swift_beginAccess();
      uint64_t v8 = swift_retain();
      sub_100085600(v8, v7);
      swift_endAccess();
      swift_release();
    }
    uint64_t v9 = v0[3177];
    uint64_t v10 = v0[3176];
    uint64_t v11 = v0[3175];
    uint64_t v43 = v0[3172];
    uint64_t v41 = v0[3171];
    uint64_t v12 = (void *)v0[3170];
    uint64_t v13 = v0[3168];
    uint64_t v35 = v0[3160];
    uint64_t v36 = v0[3173];
    uint64_t v37 = v0[3167];
    sub_100025C28(0, (unint64_t *)&unk_100720918);
    v0[3150] = _swiftEmptyArrayStorage;
    sub_1000AF434(&qword_100722370, 255, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags);
    sub_100007764(&qword_100722378);
    sub_1000B6120((unint64_t *)&unk_100722380, &qword_100722378);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    sub_100025C28(0, (unint64_t *)&qword_1007208E0);
    uint64_t v14 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v15 = static OS_dispatch_source.makeTimerSource(flags:queue:)();

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    swift_beginAccess();
    *(void *)(v35 + 6032) = v15;
    swift_unknownObjectRelease();
    static DispatchTime.now()();
    *uint64_t v12 = 600;
    (*(void (**)(void *, void, uint64_t))(v13 + 104))(v12, enum case for DispatchTimeInterval.seconds(_:), v37);
    + infix(_:_:)();
    uint64_t v16 = *(void (**)(void *, uint64_t))(v13 + 8);
    v16(v12, v37);
    uint64_t v17 = v41;
    uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
    v42(v36, v17);
    if (*(void *)(v35 + 6032))
    {
      long long v18 = (void *)v0[3170];
      uint64_t v19 = (void *)v0[3169];
      uint64_t v20 = v0[3167];
      uint64_t v38 = v0[3160];
      swift_getObjectType();
      uint64_t v21 = enum case for DispatchTimeInterval.never(_:);
      uint64_t v22 = type metadata accessor for DispatchTimeInterval();
      uint64_t v23 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 104);
      v23(v18, v21, v22);
      *uint64_t v19 = 0;
      v23(v19, enum case for DispatchTimeInterval.nanoseconds(_:), v22);
      swift_unknownObjectRetain();
      OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
      swift_unknownObjectRelease();
      v16(v19, v20);
      v16(v18, v20);
      if (*(void *)(v38 + 6032))
      {
        uint64_t v24 = v0[3166];
        uint64_t v25 = v0[3165];
        uint64_t v26 = v0[3163];
        uint64_t v27 = v0[3162];
        uint64_t v39 = v0[3161];
        uint64_t v40 = v0[3164];
        swift_getObjectType();
        uint64_t v28 = swift_allocObject();
        swift_weakInit();
        v0[3132] = sub_1000B5324;
        v0[3133] = v28;
        v0[3128] = _NSConcreteStackBlock;
        v0[3129] = 1107296256;
        v0[3130] = sub_100593800;
        v0[3131] = &unk_1006F6AE0;
        uint64_t v29 = _Block_copy(v0 + 3128);
        swift_unknownObjectRetain();
        swift_retain();
        static DispatchQoS.unspecified.getter();
        sub_10006683C();
        OS_dispatch_source.setEventHandler(qos:flags:handler:)();
        _Block_release(v29);
        swift_unknownObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v39);
        (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v40);
        swift_release();
        swift_release();
      }
    }
    uint64_t v30 = v0[3160];
    swift_beginAccess();
    uint64_t v31 = v0[3174];
    uint64_t v32 = v0[3171];
    if (*(void *)(v30 + 6032))
    {
      swift_endAccess();
      swift_getObjectType();
      swift_unknownObjectRetain();
      OS_dispatch_source.resume()();
      swift_unknownObjectRelease();
      swift_release();
      v42(v31, v32);
    }
    else
    {
      v42(v0[3174], v0[3171]);
      swift_endAccess();
      swift_release();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v33 = (uint64_t (*)(uint64_t))v0[1];
    uint64_t v34 = v0[3160];
    return v33(v34);
  }
}

uint64_t sub_100068A1C()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100068B7C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = (void *)a1[2];
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  if (!v6 || !v6[2])
  {
    if (!v8)
    {
      swift_beginAccess();
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v27 = *(void *)(a2 + 6072);
      *(void *)(a2 + 6072) = 0x8000000000000000;
      uint64_t v12 = 0;
      uint64_t v13 = 0xE000000000000000;
      goto LABEL_10;
    }
    sub_1000BEA14(a3 + 408, (uint64_t)v26, &qword_100722398);
    sub_1000BEA14((uint64_t)v26, (uint64_t)&v27, &qword_100722398);
    uint64_t v14 = v27;
    if (v27 && *(void *)(v27 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v15 = sub_100590548(v7, v8);
      if (v16)
      {
        uint64_t v17 = (uint64_t *)(*(void *)(v14 + 56) + 16 * v15);
        uint64_t v18 = *v17;
        uint64_t v19 = v17[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_beginAccess();
        swift_bridgeObjectRetain();
        char v20 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v25 = *(void *)(a2 + 6072);
        *(void *)(a2 + 6072) = 0x8000000000000000;
        uint64_t v21 = v18;
        uint64_t v22 = v19;
LABEL_13:
        sub_100562890(v21, v22, 0, 0xE000000000000000, v5, v4, v20);
        uint64_t v23 = v25;
        goto LABEL_14;
      }
      swift_bridgeObjectRelease();
    }
    swift_beginAccess();
    swift_bridgeObjectRetain();
    char v20 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v25 = *(void *)(a2 + 6072);
    *(void *)(a2 + 6072) = 0x8000000000000000;
    uint64_t v21 = 0;
    uint64_t v22 = 0xE000000000000000;
    goto LABEL_13;
  }
  uint64_t v9 = v6[4];
  uint64_t v10 = v6[5];
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v27 = *(void *)(a2 + 6072);
  *(void *)(a2 + 6072) = 0x8000000000000000;
  uint64_t v12 = v9;
  uint64_t v13 = v10;
LABEL_10:
  sub_100562890(v12, v13, 0, 0xE000000000000000, v5, v4, isUniquelyReferenced_nonNull_native);
  uint64_t v23 = v27;
LABEL_14:
  *(void *)(a2 + 6072) = v23;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t sub_100068DDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[1683] = v3;
  v4[1682] = a3;
  v4[1681] = a2;
  v4[1680] = a1;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  v4[1684] = v5;
  v4[1685] = *(void *)(v5 - 8);
  v4[1686] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DispatchQoS();
  v4[1687] = v6;
  v4[1688] = *(void *)(v6 - 8);
  v4[1689] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DispatchTimeInterval();
  v4[1690] = v7;
  v4[1691] = *(void *)(v7 - 8);
  v4[1692] = swift_task_alloc();
  v4[1693] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DispatchTime();
  v4[1694] = v8;
  v4[1695] = *(void *)(v8 - 8);
  v4[1696] = swift_task_alloc();
  v4[1697] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for OS_dispatch_source.TimerFlags();
  v4[1698] = v9;
  v4[1699] = *(void *)(v9 - 8);
  v4[1700] = swift_task_alloc();
  sub_100007764(&qword_100722320);
  v4[1701] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for DIPError.Code();
  v4[1702] = v10;
  v4[1703] = *(void *)(v10 - 8);
  v4[1704] = swift_task_alloc();
  sub_100007764(&qword_100722338);
  v4[1705] = swift_task_alloc();
  uint64_t v11 = sub_100007764((uint64_t *)&unk_100722340);
  v4[1706] = v11;
  v4[1707] = *(void *)(v11 - 8);
  v4[1708] = swift_task_alloc();
  return _swift_task_switch(sub_100069154, 0, 0);
}

uint64_t sub_100069154()
{
  uint64_t v1 = *(void *)(v0 + 13656);
  uint64_t v2 = *(void *)(v0 + 13648);
  uint64_t v3 = *(void *)(v0 + 13640);
  uint64_t v4 = *(void *)(v0 + 13464);
  uint64_t v5 = *(void *)(v0 + 13448);
  sub_1000ABB90((_OWORD *)(v0 + 16));
  sub_1000BEA14(v0 + 16, v4 + 32, &qword_1007222F8);
  *(_OWORD *)(v4 + 6024) = 0u;
  *(_OWORD *)(v4 + 6040) = 0u;
  *(_OWORD *)(v4 + 6049) = 0u;
  *(void *)(v4 + 6072) = sub_10015D18C((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v4 + 6080) = _swiftEmptyArrayStorage;
  *(void *)(v4 + 6088) = sub_10015D198((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v4 + 6096) = sub_10015D198((uint64_t)_swiftEmptyArrayStorage);
  *(unsigned char *)(v4 + 6064) = 1;
  sub_100048D6C(v5 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_inoWorkflow, v3, &qword_100722338);
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2);
  *(_DWORD *)(v0 + 5940) = v6;
  uint64_t v7 = *(void *)(v0 + 13456);
  if (v6 == 1)
  {
    uint64_t v8 = *(void *)(v0 + 13640);
    uint64_t v9 = *(void *)(v0 + 13632);
    uint64_t v10 = *(void *)(v0 + 13624);
    uint64_t v11 = *(void *)(v0 + 13616);
    swift_bridgeObjectRelease();
    sub_10000C6CC(v8, &qword_100722338);
    (*(void (**)(uint64_t, void, uint64_t))(v10 + 104))(v9, enum case for DIPError.Code.serverResponseInconsistent(_:), v11);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000AF434((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_release();
    LODWORD(v8) = *(_DWORD *)(v0 + 5940);
    uint64_t v12 = *(void *)(v0 + 13464);
    swift_release();
    sub_1000BEA14(v12 + 32, v0 + 5944, &qword_1007222F8);
    sub_1000AF47C(v0 + 5944, sub_1000ABBA4);
    if (v8 != 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for LegacySynthesizedWorkflows();
    swift_deallocPartialClassInstance();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
  else
  {
    uint64_t v15 = *(void *)(v0 + 13664);
    uint64_t v16 = *(void *)(v0 + 13656);
    uint64_t v17 = *(void *)(v0 + 13648);
    uint64_t v18 = *(void *)(v0 + 13464);
    uint64_t v19 = *(void *)(v0 + 13448);
    char v20 = *(void **)(v0 + 13440);
    (*(void (**)(uint64_t, void, uint64_t))(v16 + 32))(v15, *(void *)(v0 + 13640), v17);
    JWSSignedJSON.payload.getter();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    uint64_t v21 = *(void *)(v0 + 13408);
    *(unsigned char *)(v18 + 6016) = 0;
    *(void *)(v18 + 16) = v21;
    if (*(void *)(v19 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_nonces)) {
      uint64_t v22 = *(void **)(v19 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_nonces);
    }
    else {
      uint64_t v22 = _swiftEmptyArrayStorage;
    }
    *(void *)(v18 + 5984) = v22;
    *(void *)(v18 + 6040) = 0;
    *(void *)(v18 + 6056) = 0;
    *(void *)(v18 + 24) = v20[3];
    uint64_t v23 = v20[746];
    *(void *)(v18 + 5960) = v20[745];
    *(void *)(v18 + 5968) = v23;
    *(void *)(v18 + 5976) = v20[747];
    uint64_t v24 = v20[751];
    *(void *)(v18 + 6000) = v20[750];
    *(void *)(v18 + 6008) = v24;
    *(void *)(v18 + 6048) = v20[756];
    uint64_t v25 = *(void *)(v21 + 176);
    if (v7)
    {
      uint64_t v26 = *(void *)(v0 + 13456);
      uint64_t v27 = *(void *)(v25 + 16);
      swift_bridgeObjectRetain();
      if (v27)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v28 = sub_1005DDA6C(v25);
        swift_bridgeObjectRelease();
        uint64_t v29 = sub_1000848D8(v26, v28);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)(v29 + 16))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v25 = v29;
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v25 = v26;
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    *(void *)(v0 + 13672) = v25;
    if (qword_10071F4E0 != -1) {
      swift_once();
    }
    uint64_t v30 = (void *)swift_task_alloc();
    *(void *)(v0 + 13680) = v30;
    *uint64_t v30 = v0;
    v30[1] = sub_1000697DC;
    return sub_1002AA1B8(v0 + 11872, 0, 0, v25, 1);
  }
}

uint64_t sub_1000697DC()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1000698F4, 0, 0);
}

uint64_t sub_1000698F4()
{
  sub_1000BEA14(v0 + 11872, v0 + 12304, &qword_100722350);
  if (sub_100044CCC(v0 + 12304) != 1)
  {
    memcpy((void *)(v0 + 12736), (const void *)(v0 + 12304), 0x1B0uLL);
    sub_1000BEA14(v0 + 13136, v0 + 13392, &qword_100722358);
    sub_1000BEA14(v0 + 13392, v0 + 13400, &qword_100722358);
    if (*(void *)(v0 + 13400))
    {
      uint64_t v1 = *(void *)(v0 + 13608);
      sub_100048D6C(*(void *)(v0 + 13448) + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_persoWorkflow, v1, &qword_100722320);
      uint64_t v2 = sub_100007764((uint64_t *)&unk_100722360);
      uint64_t v3 = *(void *)(v2 - 8);
      int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
      uint64_t v5 = *(void *)(v0 + 13608);
      uint64_t v6 = *(void *)(v0 + 13464);
      if (v4 == 1)
      {
        uint64_t v7 = *(void *)(v0 + 13440);
        sub_100044D90((uint64_t *)(v0 + 11872));
        sub_10000C6CC(v5, &qword_100722320);
        *(void *)(v6 + 5992) = *(void *)(v7 + 5992);
        swift_bridgeObjectRetain();
LABEL_47:
        uint64_t v53 = (void *)swift_task_alloc();
        *(void *)(v0 + 13688) = v53;
        *uint64_t v53 = v0;
        v53[1] = sub_10006A2E0;
        return sub_10006B168();
      }
      uint64_t v54 = (uint64_t *)(v0 + 11872);
      JWSSignedJSON.payload.getter();
      uint64_t v12 = *(void *)(v0 + 13416);
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v2);
      *(void *)(v6 + 5992) = v12;
      uint64_t v13 = *(void *)(v12 + 16);
      if (!v13)
      {
        sub_100044D90(v54);
        goto LABEL_47;
      }
      uint64_t v57 = v0 + 13384;
      uint64_t v56 = (uint64_t *)(v0 + 13424);
      swift_bridgeObjectRetain_n();
      uint64_t v14 = (uint64_t *)(v12 + 64);
      while (1)
      {
        uint64_t v15 = *(v14 - 3);
        uint64_t v60 = *(v14 - 4);
        uint64_t v17 = (void *)*(v14 - 2);
        uint64_t v16 = *(v14 - 1);
        uint64_t v18 = *v14;
        if (v17)
        {
          if (v17[2]) {
            break;
          }
        }
        if (v18)
        {
          sub_1000BEA14(v0 + 13144, v57, &qword_100722398);
          sub_1000BEA14(v57, (uint64_t)v56, &qword_100722398);
          uint64_t v30 = *v56;
          if (!*v56 || !*(void *)(v30 + 16)) {
            goto LABEL_14;
          }
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          unint64_t v31 = sub_100590548(v16, v18);
          if (v32)
          {
            uint64_t v33 = v15;
            uint64_t v34 = *(void *)(v0 + 13464);
            uint64_t v35 = (uint64_t *)(*(void *)(v30 + 56) + 16 * v31);
            uint64_t v55 = *v35;
            uint64_t v59 = v35[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            swift_beginAccess();
            swift_bridgeObjectRetain();
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v22 = *(void **)(v34 + 6072);
            *(void *)(v34 + 6072) = 0x8000000000000000;
            unint64_t v38 = sub_100590548(v60, v33);
            uint64_t v39 = v22[2];
            BOOL v40 = (v37 & 1) == 0;
            uint64_t result = v39 + v40;
            if (__OFADD__(v39, v40)) {
              goto LABEL_55;
            }
            char v41 = v37;
            if (v22[3] >= result)
            {
              if (isUniquelyReferenced_nonNull_native)
              {
                if ((v37 & 1) == 0) {
                  goto LABEL_43;
                }
              }
              else
              {
                uint64_t result = (uint64_t)sub_10016B15C();
                if ((v41 & 1) == 0) {
                  goto LABEL_43;
                }
              }
            }
            else
            {
              sub_100165DB0(result, isUniquelyReferenced_nonNull_native);
              uint64_t result = sub_100590548(v60, v33);
              if ((v41 & 1) != (v42 & 1))
              {
LABEL_50:
                return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              }
              unint64_t v38 = result;
              if ((v41 & 1) == 0)
              {
LABEL_43:
                v22[(v38 >> 6) + 8] |= 1 << v38;
                uint64_t v50 = (uint64_t *)(v22[6] + 16 * v38);
                *uint64_t v50 = v60;
                v50[1] = v33;
                char v51 = (void *)(v22[7] + 32 * v38);
                *char v51 = v55;
                v51[1] = v59;
                v51[2] = 0;
                v51[3] = 0xE000000000000000;
                uint64_t v52 = v22[2];
                BOOL v48 = __OFADD__(v52, 1);
                uint64_t v49 = v52 + 1;
                if (v48) {
                  goto LABEL_56;
                }
LABEL_40:
                void v22[2] = v49;
                swift_bridgeObjectRetain();
LABEL_41:
                *(void *)(*(void *)(v0 + 13464) + 6072) = v22;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_endAccess();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_13;
              }
            }
            uint64_t v44 = (void *)(v22[7] + 32 * v38);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            *uint64_t v44 = v55;
            v44[1] = v59;
            v44[2] = 0;
            v44[3] = 0xE000000000000000;
            goto LABEL_41;
          }
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
        }
LABEL_13:
        swift_bridgeObjectRelease();
LABEL_14:
        v14 += 5;
        if (!--v13)
        {
          swift_bridgeObjectRelease();
          sub_100044D90(v54);
          swift_bridgeObjectRelease();
          goto LABEL_47;
        }
      }
      uint64_t v19 = *(void *)(v0 + 13464);
      uint64_t v20 = v17[5];
      uint64_t v58 = v17[4];
      swift_beginAccess();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      char v21 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v22 = *(void **)(v19 + 6072);
      *(void *)(v19 + 6072) = 0x8000000000000000;
      uint64_t v23 = v15;
      unint64_t v25 = sub_100590548(v60, v15);
      uint64_t v26 = v22[2];
      BOOL v27 = (v24 & 1) == 0;
      uint64_t result = v26 + v27;
      if (__OFADD__(v26, v27))
      {
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
        return result;
      }
      char v28 = v24;
      if (v22[3] >= result)
      {
        if (v21)
        {
          if ((v24 & 1) == 0) {
            goto LABEL_39;
          }
        }
        else
        {
          uint64_t result = (uint64_t)sub_10016B15C();
          if ((v28 & 1) == 0) {
            goto LABEL_39;
          }
        }
      }
      else
      {
        sub_100165DB0(result, v21);
        uint64_t result = sub_100590548(v60, v23);
        if ((v28 & 1) != (v29 & 1)) {
          goto LABEL_50;
        }
        unint64_t v25 = result;
        if ((v28 & 1) == 0)
        {
LABEL_39:
          v22[(v25 >> 6) + 8] |= 1 << v25;
          unsigned __int8 v45 = (uint64_t *)(v22[6] + 16 * v25);
          *unsigned __int8 v45 = v60;
          v45[1] = v23;
          uint64_t v46 = (void *)(v22[7] + 32 * v25);
          *uint64_t v46 = v58;
          v46[1] = v20;
          v46[2] = 0;
          v46[3] = 0xE000000000000000;
          uint64_t v47 = v22[2];
          BOOL v48 = __OFADD__(v47, 1);
          uint64_t v49 = v47 + 1;
          if (v48) {
            goto LABEL_54;
          }
          goto LABEL_40;
        }
      }
      uint64_t v43 = (void *)(v22[7] + 32 * v25);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *uint64_t v43 = v58;
      v43[1] = v20;
      v43[2] = 0;
      v43[3] = 0xE000000000000000;
      goto LABEL_41;
    }
    sub_100044D90((uint64_t *)(v0 + 11872));
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 13624) + 104))(*(void *)(v0 + 13632), enum case for DIPError.Code.missingAttributeConfig(_:), *(void *)(v0 + 13616));
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000AF434((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_release();
  swift_release();
  swift_release();
  int v8 = *(_DWORD *)(v0 + 5940);
  uint64_t v9 = *(void *)(v0 + 13464);
  swift_release();
  sub_1000BEA14(v9 + 32, v0 + 5944, &qword_1007222F8);
  sub_1000AF47C(v0 + 5944, sub_1000ABBA4);
  if (v8 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for LegacySynthesizedWorkflows();
  swift_deallocPartialClassInstance();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_10006A2E0(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 13696) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10006AC14;
  }
  else
  {
    *(void *)(v4 + 13704) = a1;
    uint64_t v5 = sub_10006A408;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10006A408()
{
  uint64_t v1 = v0[1712];
  uint64_t v2 = v0[1683];
  *(void *)(v2 + 6024) = v0[1713];
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v3 = swift_retain();
  sub_100085600(v3, (void *)(v2 + 6088));
  if (v1)
  {
    swift_endAccess();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
  else
  {
    uint64_t v32 = v0[1700];
    uint64_t v33 = v0[1699];
    uint64_t v31 = v0[1698];
    uint64_t v34 = v0[1696];
    uint64_t v42 = v0[1695];
    uint64_t v40 = v0[1694];
    uint64_t v6 = v0[1691];
    uint64_t v35 = (void *)v0[1693];
    uint64_t v36 = v0[1690];
    uint64_t v7 = v0[1683];
    uint64_t v8 = v0[1680];
    swift_endAccess();
    swift_release();
    swift_beginAccess();
    uint64_t v9 = *(void *)(v8 + 6096);
    swift_beginAccess();
    *(void *)(v7 + 6096) = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_100025C28(0, (unint64_t *)&unk_100720918);
    v0[1679] = _swiftEmptyArrayStorage;
    sub_1000AF434(&qword_100722370, 255, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags);
    sub_100007764(&qword_100722378);
    sub_1000B6120((unint64_t *)&unk_100722380, &qword_100722378);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    sub_100025C28(0, (unint64_t *)&qword_1007208E0);
    uint64_t v10 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v11 = static OS_dispatch_source.makeTimerSource(flags:queue:)();

    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v31);
    swift_beginAccess();
    *(void *)(v7 + 6032) = v11;
    swift_unknownObjectRelease();
    static DispatchTime.now()();
    *uint64_t v35 = 600;
    (*(void (**)(void *, void, uint64_t))(v6 + 104))(v35, enum case for DispatchTimeInterval.seconds(_:), v36);
    + infix(_:_:)();
    uint64_t v12 = *(void (**)(void *, uint64_t))(v6 + 8);
    v12(v35, v36);
    uint64_t v13 = v40;
    char v41 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
    v41(v34, v13);
    if (*(void *)(v7 + 6032))
    {
      uint64_t v14 = (void *)v0[1693];
      uint64_t v15 = (void *)v0[1692];
      uint64_t v16 = v0[1690];
      uint64_t v37 = v0[1683];
      swift_getObjectType();
      uint64_t v17 = enum case for DispatchTimeInterval.never(_:);
      uint64_t v18 = type metadata accessor for DispatchTimeInterval();
      uint64_t v19 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 104);
      v19(v14, v17, v18);
      void *v15 = 0;
      v19(v15, enum case for DispatchTimeInterval.nanoseconds(_:), v18);
      swift_unknownObjectRetain();
      OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
      swift_unknownObjectRelease();
      v12(v15, v16);
      v12(v14, v16);
      if (*(void *)(v37 + 6032))
      {
        uint64_t v20 = v0[1689];
        uint64_t v21 = v0[1688];
        uint64_t v22 = v0[1686];
        uint64_t v23 = v0[1685];
        uint64_t v38 = v0[1684];
        uint64_t v39 = v0[1687];
        swift_getObjectType();
        uint64_t v24 = swift_allocObject();
        swift_weakInit();
        v0[1650] = sub_1000B5324;
        v0[1651] = v24;
        v0[1646] = _NSConcreteStackBlock;
        v0[1647] = 1107296256;
        v0[1648] = sub_100593800;
        v0[1649] = &unk_1006F6B08;
        unint64_t v25 = _Block_copy(v0 + 1646);
        swift_unknownObjectRetain();
        swift_retain();
        static DispatchQoS.unspecified.getter();
        sub_10006683C();
        OS_dispatch_source.setEventHandler(qos:flags:handler:)();
        _Block_release(v25);
        swift_unknownObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v38);
        (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v39);
        swift_release();
        swift_release();
      }
    }
    uint64_t v26 = v0[1683];
    swift_beginAccess();
    uint64_t v27 = v0[1697];
    uint64_t v28 = v0[1694];
    if (*(void *)(v26 + 6032))
    {
      swift_endAccess();
      swift_getObjectType();
      swift_unknownObjectRetain();
      OS_dispatch_source.resume()();
      swift_unknownObjectRelease();
      swift_release();
      swift_release();
      v41(v27, v28);
    }
    else
    {
      v41(v0[1697], v0[1694]);
      swift_endAccess();
      swift_release();
      swift_release();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    char v29 = (uint64_t (*)(uint64_t))v0[1];
    uint64_t v30 = v0[1683];
    return v29(v30);
  }
}

uint64_t sub_10006AC14()
{
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10006AD38(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if (*(void *)(v1 + 6032))
  {
    swift_getObjectType();
    uint64_t v15 = v2;
    void v16[4] = nullsub_7;
    v16[5] = 0;
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 1107296256;
    _OWORD v16[2] = sub_100593800;
    v16[3] = &unk_1006F6B58;
    uint64_t v10 = _Block_copy(v16);
    uint64_t v14 = v6;
    uint64_t v11 = v10;
    swift_unknownObjectRetain();
    static DispatchQoS.unspecified.getter();
    sub_10006683C();
    OS_dispatch_source.setEventHandler(qos:flags:handler:)();
    _Block_release(v11);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v15);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v14);
    if (*(void *)(v1 + 6032))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      OS_dispatch_source.cancel()();
      swift_unknownObjectRelease();
    }
  }
  swift_release();
  swift_release();
  sub_1000BEA14(v1 + 32, (uint64_t)v16, &qword_1007222F8);
  sub_1000AF47C(v16, sub_1000ABBA4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_10006B060(uint64_t a1)
{
  sub_10006AD38(a1);

  return swift_deallocClassInstance();
}

void (*sub_10006B094(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain();
  v6[5] = sub_1000843EC(v6, a2, a3);
  return sub_10006B114;
}

void sub_10006B114(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 40))(*a1, 0);
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t sub_10006B168()
{
  v1[8] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[9] = v2;
  v1[10] = *(void *)(v2 - 8);
  v1[11] = swift_task_alloc();
  return _swift_task_switch(sub_10006B228, 0, 0);
}

uint64_t sub_10006B228()
{
  uint64_t v1 = v0[8];
  if (*(unsigned char *)(v1 + 6064) != 1)
  {
    uint64_t v11 = *(void *)(v1 + 24);
    if (v11)
    {
      uint64_t v4 = *(void **)(v11 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_userInputFields);
      uint64_t v3 = *(void **)(v11 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_pagination);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v3 = _swiftEmptyArrayStorage;
      uint64_t v4 = _swiftEmptyArrayStorage;
    }
    v0[20] = v3;
    v0[21] = v4;
    uint64_t v14 = *(void **)(v1 + 16);
    uint64_t v5 = v14[20];
    uint64_t v6 = v14[21];
    v0[22] = v6;
    uint64_t v7 = v14[22];
    v0[23] = v7;
    swift_beginAccess();
    uint64_t v8 = *(void *)(v1 + 6072);
    v0[24] = v8;
    v0[25] = *(void *)(v1 + 6080);
    uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100722598
                                                                                       + dword_100722598);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v9 = (void *)swift_task_alloc();
    v0[26] = v9;
    *uint64_t v9 = v0;
    uint64_t v10 = sub_10006B858;
    goto LABEL_11;
  }
  uint64_t v2 = *(void **)(v1 + 16);
  uint64_t v3 = *(void **)((char *)v2 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_pagination);
  v0[12] = v3;
  if (v3)
  {
    uint64_t v4 = *(void **)((char *)v2 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_userInputFields);
    v0[13] = v4;
    uint64_t v5 = v2[20];
    uint64_t v6 = v2[21];
    v0[14] = v6;
    uint64_t v7 = v2[22];
    v0[15] = v7;
    swift_beginAccess();
    uint64_t v8 = *(void *)(v1 + 6072);
    v0[16] = v8;
    v0[17] = *(void *)(v1 + 6080);
    uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100722598
                                                                                       + dword_100722598);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v9 = (void *)swift_task_alloc();
    v0[18] = v9;
    *uint64_t v9 = v0;
    uint64_t v10 = sub_10006B600;
LABEL_11:
    v9[1] = v10;
    return v15((uint64_t)v4, (uint64_t)v3, v5, v6, v7, v8);
  }
  (*(void (**)(void, void, void))(v0[10] + 104))(v0[11], enum case for DIPError.Code.internalError(_:), v0[9]);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000AF434((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_10006B600(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 152) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return _swift_task_switch(sub_10006B7AC, 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 8);
    return v5(a1);
  }
}

uint64_t sub_10006B7AC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10006B858(uint64_t a1)
{
  uint64_t v3 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(uint64_t))(v3 + 8);
    return v6(a1);
  }
}

uint64_t sub_10006BAA8()
{
  uint64_t v7 = *(void *)(*(void *)(v0 + 16) + 16);
  swift_bridgeObjectRetain();
  v1._uint64_t countAndFlagsBits = 45;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  uint64_t v2 = *(void *)(v0 + 24);
  if (v2)
  {
    uint64_t v4 = *(void *)(v2 + 16);
    uint64_t v3 = *(void **)(v2 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = (void *)0xEB00000000454C42;
    uint64_t v4 = 0x414C494156414E55;
  }
  v5._uint64_t countAndFlagsBits = v4;
  v5._object = v3;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_10006BB48@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for DIPError.Code();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100007764(&qword_100722300);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(*(void *)(v3 + 16) + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_recipientCertificates);
  uint64_t v32 = a1;
  if (!v14 || !*(void *)(v14 + 16))
  {
    uint64_t v21 = type metadata accessor for RecipientEncryptionCertificate();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v13, 1, 1, v21);
LABEL_8:
    sub_10000C6CC((uint64_t)v13, &qword_100722300);
    unint64_t v30 = 0;
    unint64_t v31 = 0xE000000000000000;
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease();
    unint64_t v30 = 0xD00000000000002DLL;
    unint64_t v31 = 0x8000000100632CC0;
    v24._uint64_t countAndFlagsBits = v32;
    v24._object = a2;
    String.append(_:)(v24);
    (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for DIPError.Code.serverResponseInconsistent(_:), v7);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000AF434((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    return swift_willThrow();
  }
  uint64_t v28 = a3;
  uint64_t v29 = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v15 = sub_100590548(a1, (uint64_t)a2);
  if (v16)
  {
    unint64_t v17 = v15;
    uint64_t v26 = *(void *)(v14 + 56);
    uint64_t v18 = type metadata accessor for RecipientEncryptionCertificate();
    uint64_t v19 = *(void *)(v18 - 8);
    uint64_t v27 = a2;
    uint64_t v20 = v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v13, v26 + *(void *)(v19 + 72) * v17, v18);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v13, 0, 1, v18);
    a2 = v27;
  }
  else
  {
    uint64_t v18 = type metadata accessor for RecipientEncryptionCertificate();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v13, 1, 1, v18);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for RecipientEncryptionCertificate();
  uint64_t v22 = *(void *)(v18 - 8);
  int v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v13, 1, v18);
  uint64_t v7 = v29;
  if (v23 == 1) {
    goto LABEL_8;
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v22 + 32))(v28, v13, v18);
}

uint64_t sub_10006BFC0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for DIPError.Code();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100007764(&qword_100722300);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v3 + 24);
  if (!v14
    || (uint64_t v15 = *(void *)(v14 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_recipientCertificates)) == 0
    || !*(void *)(v15 + 16))
  {
    uint64_t v22 = type metadata accessor for RecipientEncryptionCertificate();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v13, 1, 1, v22);
LABEL_7:
    sub_10000C6CC((uint64_t)v13, &qword_100722300);
    unint64_t v31 = 0;
    unint64_t v32 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    unint64_t v31 = 0xD00000000000002CLL;
    unint64_t v32 = 0x8000000100632C60;
    v23._uint64_t countAndFlagsBits = a1;
    v23._object = a2;
    String.append(_:)(v23);
    (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for DIPError.Code.serverResponseInconsistent(_:), v7);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000AF434((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    return swift_willThrow();
  }
  uint64_t v30 = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v33 = a1;
  unint64_t v16 = sub_100590548(a1, (uint64_t)a2);
  if (v17)
  {
    uint64_t v18 = *(void *)(v15 + 56);
    unint64_t v27 = v16;
    uint64_t v28 = v18;
    uint64_t v19 = type metadata accessor for RecipientEncryptionCertificate();
    uint64_t v20 = *(void *)(v19 - 8);
    uint64_t v29 = a2;
    uint64_t v21 = v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v13, v28 + *(void *)(v20 + 72) * v27, v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v13, 0, 1, v19);
    a2 = v29;
  }
  else
  {
    uint64_t v19 = type metadata accessor for RecipientEncryptionCertificate();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v13, 1, 1, v19);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for RecipientEncryptionCertificate();
  uint64_t v25 = *(void *)(v19 - 8);
  int v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v13, 1, v19);
  a1 = v33;
  if (v26 == 1) {
    goto LABEL_7;
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v25 + 32))(v30, v13, v19);
}

void *sub_10006C434()
{
  uint64_t v1 = *(void *)(v0 + 24);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_userInputFields);
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3) {
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = v3 - 1;
  uint64_t v5 = 32;
  uint64_t v6 = _swiftEmptyArrayStorage;
  while (1)
  {
    long long v7 = *(_OWORD *)(v2 + v5 + 16);
    long long v34 = *(_OWORD *)(v2 + v5);
    long long v35 = v7;
    long long v8 = *(_OWORD *)(v2 + v5 + 32);
    long long v9 = *(_OWORD *)(v2 + v5 + 48);
    long long v10 = *(_OWORD *)(v2 + v5 + 80);
    long long v38 = *(_OWORD *)(v2 + v5 + 64);
    long long v39 = v10;
    long long v36 = v8;
    long long v37 = v9;
    long long v11 = *(_OWORD *)(v2 + v5 + 96);
    long long v12 = *(_OWORD *)(v2 + v5 + 112);
    long long v13 = *(_OWORD *)(v2 + v5 + 128);
    uint64_t v43 = *(void *)(v2 + v5 + 144);
    long long v41 = v12;
    long long v42 = v13;
    long long v40 = v11;
    if (BYTE8(v37))
    {
      sub_1000B53AC((uint64_t)&v34);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v44 = v6;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10011146C(0, v6[2] + 1, 1);
        uint64_t v6 = v44;
      }
      unint64_t v16 = v6[2];
      unint64_t v15 = v6[3];
      if (v16 >= v15 >> 1)
      {
        sub_10011146C(v15 > 1, v16 + 1, 1);
        uint64_t v6 = v44;
      }
      v6[2] = v16 + 1;
      char v17 = &v6[19 * v16];
      long long v18 = v35;
      *((_OWORD *)v17 + 2) = v34;
      *((_OWORD *)v17 + 3) = v18;
      long long v19 = v36;
      long long v20 = v37;
      long long v21 = v39;
      *((_OWORD *)v17 + 6) = v38;
      *((_OWORD *)v17 + 7) = v21;
      *((_OWORD *)v17 + 4) = v19;
      *((_OWORD *)v17 + 5) = v20;
      long long v22 = v40;
      long long v23 = v41;
      long long v24 = v42;
      v17[22] = v43;
      *((_OWORD *)v17 + 9) = v23;
      *((_OWORD *)v17 + 10) = v24;
      *((_OWORD *)v17 + 8) = v22;
    }
    if (!v4) {
      break;
    }
    --v4;
    v5 += 152;
  }
  swift_bridgeObjectRelease();
  int64_t v25 = v6[2];
  if (!v25)
  {
    swift_release();
    return _swiftEmptyArrayStorage;
  }
  *(void *)&long long v34 = _swiftEmptyArrayStorage;
  sub_10011144C(0, v25, 0);
  uint64_t v26 = v34;
  unint64_t v27 = v6 + 5;
  do
  {
    uint64_t v29 = *(v27 - 1);
    uint64_t v28 = *v27;
    *(void *)&long long v34 = v26;
    unint64_t v30 = *(void *)(v26 + 16);
    unint64_t v31 = *(void *)(v26 + 24);
    swift_bridgeObjectRetain();
    if (v30 >= v31 >> 1)
    {
      sub_10011144C(v31 > 1, v30 + 1, 1);
      uint64_t v26 = v34;
    }
    v27 += 19;
    *(void *)(v26 + 16) = v30 + 1;
    uint64_t v32 = v26 + 16 * v30;
    *(void *)(v32 + 32) = v29;
    *(void *)(v32 + 40) = v28;
    --v25;
  }
  while (v25);
  swift_release();
  return (void *)v26;
}

void *sub_10006C648()
{
  uint64_t v1 = sub_100007764(&qword_100722310);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for HardwareAttestationType();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  long long v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v0 + 16);
  if (*(void *)(v8 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_hardwareAttestationTypes))
  {
    long long v9 = *(void **)(v8 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_hardwareAttestationTypes);
  }
  else
  {
    sub_100048D6C(v8 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_hardwareAttestationType, (uint64_t)v3, &qword_100722310);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
    {
      sub_10000C6CC((uint64_t)v3, &qword_100722310);
      long long v9 = _swiftEmptyArrayStorage;
    }
    else
    {
      long long v10 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
      v10(v7, v3, v4);
      sub_100007764(&qword_100722590);
      unint64_t v11 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      long long v9 = (void *)swift_allocObject();
      *((_OWORD *)v9 + 1) = xmmword_100610730;
      v10((char *)v9 + v11, v7, v4);
    }
  }
  swift_bridgeObjectRetain();
  return v9;
}

void *sub_10006C834()
{
  uint64_t v1 = sub_100007764(&qword_100722310);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for HardwareAttestationType();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  long long v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v0 + 24);
  if (!v8)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
LABEL_6:
    sub_10000C6CC((uint64_t)v3, &qword_100722310);
    return _swiftEmptyArrayStorage;
  }
  uint64_t v9 = *(void *)(v8 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_hardwareAttestationTypes);
  if (!v9)
  {
    sub_100048D6C(v8 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_hardwareAttestationType, (uint64_t)v3, &qword_100722310);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) != 1)
    {
      long long v10 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
      v10(v7, v3, v4);
      sub_100007764(&qword_100722590);
      unint64_t v11 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      uint64_t v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_100610730;
      v10((char *)(v9 + v11), v7, v4);
      return (void *)v9;
    }
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  return (void *)v9;
}

void *sub_10006CA3C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_userInputFields);
  int64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    sub_10011144C(0, v2, 0);
    uint64_t v3 = (uint64_t *)(v1 + 40);
    do
    {
      uint64_t v5 = *(v3 - 1);
      uint64_t v4 = *v3;
      unint64_t v6 = _swiftEmptyArrayStorage[2];
      unint64_t v7 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain();
      if (v6 >= v7 >> 1) {
        sub_10011144C(v7 > 1, v6 + 1, 1);
      }
      v3 += 19;
      _swiftEmptyArrayStorage[2] = v6 + 1;
      uint64_t v8 = &_swiftEmptyArrayStorage[2 * v6];
      v8[4] = v5;
      v8[5] = v4;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10006CB30()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = [self standardUserDefaults];
  v7._object = (void *)0x8000000100632C30;
  v7._uint64_t countAndFlagsBits = 0xD000000000000028;
  Swift::Bool v8 = NSUserDefaults.internalBool(forKey:)(v7);

  if (v8)
  {
    defaultLogger()();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, v10))
    {
      unint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "INTERNAL SETTING switched to FORCE AssessmentServer Data", v11, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return 1;
  }
  else
  {
    uint64_t v13 = *(void *)(v1 + 24);
    if (v13) {
      return *(unsigned char *)(v13 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_accountAssessmentDeviceData) & 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_10006CCE0()
{
  uint64_t v1 = v0;
  id v2 = [self standardUserDefaults];
  v3._object = (void *)0x8000000100632C10;
  v3._uint64_t countAndFlagsBits = 0xD000000000000019;
  Swift::Bool v4 = NSUserDefaults.internalBool(forKey:)(v3);

  if (!v4)
  {
    uint64_t v5 = *(void *)(v1 + 24);
    if (v5)
    {
      int v6 = *(unsigned __int8 *)(v5 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_assessBeforeProof);
      if (v6 != 2) {
        return v6 & 1;
      }
    }
    unint64_t v7 = *(void *)(*(void *)(v1 + 16) + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_verifiedClaimFields);
    if (v7)
    {
      if (v7 >> 62) {
        goto LABEL_34;
      }
      uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      for (; v8; uint64_t v8 = _CocoaArrayWrapper.endIndex.getter())
      {
        if ((v7 & 0xC000000000000001) != 0)
        {
          uint64_t v9 = 0;
          while (1)
          {
            uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)();
            uint64_t v11 = v9 + 1;
            if (__OFADD__(v9, 1)) {
              break;
            }
            uint64_t v12 = *(void *)(v10 + 24);
            if (v12)
            {
              if (*(void *)(v10 + 16) == 0x746E656D75636F64 && v12 == 0xE800000000000000)
              {
                swift_bridgeObjectRelease();
                swift_unknownObjectRelease();
                return 0;
              }
              char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_unknownObjectRelease();
              if (v14) {
                goto LABEL_29;
              }
            }
            else
            {
              swift_unknownObjectRelease();
            }
            ++v9;
            if (v11 == v8) {
              goto LABEL_35;
            }
          }
          __break(1u);
        }
        else
        {
          uint64_t v16 = 0;
          while (1)
          {
            uint64_t v17 = v16 + 1;
            if (__OFADD__(v16, 1)) {
              break;
            }
            uint64_t v18 = *(void *)(v7 + 8 * v16 + 32);
            uint64_t v19 = *(void *)(v18 + 24);
            if (v19)
            {
              BOOL v20 = *(void *)(v18 + 16) == 0x746E656D75636F64 && v19 == 0xE800000000000000;
              if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
LABEL_29:
                swift_bridgeObjectRelease();
                return 0;
              }
            }
            ++v16;
            if (v17 == v8) {
              goto LABEL_35;
            }
          }
        }
        __break(1u);
LABEL_34:
        swift_bridgeObjectRetain();
      }
LABEL_35:
      swift_bridgeObjectRelease();
    }
  }
  return 1;
}

uint64_t sub_10006CF18()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t result = __chkstk_darwin(v3);
  int v6 = (char *)&v13 - v5;
  if (*(unsigned char *)(v0 + 6016)) {
    return sub_10043E0AC(0x14uLL);
  }
  uint64_t v7 = *(void *)(v0 + 6040);
  uint64_t v8 = *(void *)(v0 + 5984);
  if (v7 >= *(void *)(v8 + 16))
  {
    defaultLogger()();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "no more fresh nonces to use", v11, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v2 + 8))(v6, v1);
    return 0;
  }
  if ((v7 & 0x8000000000000000) == 0)
  {
    uint64_t v12 = *(void *)(v8 + 16 * v7 + 32);
    *(void *)(v0 + 6040) = v7 + 1;
    swift_bridgeObjectRetain();
    return v12;
  }
  __break(1u);
  return result;
}

uint64_t sub_10006D248(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v35 = *(void *)(v3 - 8);
  uint64_t v36 = v3;
  __chkstk_darwin(v3);
  uint64_t v33 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for DispatchQoS();
  uint64_t v32 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  unint64_t v31 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  os_log_type_t v10 = (uint64_t *)((char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  uint64_t v12 = (uint64_t *)((char *)&v30 - v11);
  uint64_t v13 = type metadata accessor for DispatchTime();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v40 = v13;
  uint64_t v41 = v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v30 - v18;
  v1[748] = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v1[755] = 0;
  BOOL v20 = v1 + 754;
  swift_beginAccess();
  long long v37 = v1;
  if (v1[754])
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    OS_dispatch_source.suspend()();
    swift_unknownObjectRelease();
  }
  long long v39 = v19;
  static DispatchTime.now()();
  *uint64_t v12 = 600;
  long long v21 = *(void (**)(void *, void, uint64_t))(v7 + 104);
  v21(v12, enum case for DispatchTimeInterval.seconds(_:), v6);
  + infix(_:_:)();
  long long v22 = *(void (**)(void *, uint64_t))(v7 + 8);
  v22(v12, v6);
  long long v23 = *(uint64_t (**)(char *, uint64_t))(v41 + 8);
  v41 += 8;
  long long v38 = v23;
  v23(v17, v40);
  if (*v20)
  {
    swift_getObjectType();
    v21(v12, enum case for DispatchTimeInterval.never(_:), v6);
    void *v10 = 0;
    v21(v10, enum case for DispatchTimeInterval.nanoseconds(_:), v6);
    swift_unknownObjectRetain();
    OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
    swift_unknownObjectRelease();
    v22(v10, v6);
    v22(v12, v6);
    if (*v20)
    {
      swift_getObjectType();
      uint64_t v24 = swift_allocObject();
      int64_t v25 = v37;
      swift_weakInit();
      aBlock[4] = sub_1000B5324;
      aBlock[5] = v24;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100593800;
      aBlock[3] = &unk_1006F6B30;
      uint64_t v26 = _Block_copy(aBlock);
      swift_unknownObjectRetain();
      swift_retain();
      unint64_t v27 = v31;
      static DispatchQoS.unspecified.getter();
      uint64_t v28 = v33;
      sub_10006683C();
      OS_dispatch_source.setEventHandler(qos:flags:handler:)();
      _Block_release(v26);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v35 + 8))(v28, v36);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v27, v34);
      swift_release();
      swift_release();
      if (v25[754])
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        OS_dispatch_source.resume()();
        swift_unknownObjectRelease();
      }
    }
  }
  return v38(v39, v40);
}

uint64_t sub_10006D7C4()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    *(void *)(result + 5984) = _swiftEmptyArrayStorage;
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_10006D828(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 5976);
  if (v3 && (uint64_t v4 = *(void *)(v1 + 6048), v4 < *(void *)(v3 + 16)))
  {
    if (v4 < 0)
    {
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v5 = String.init<A>(_:)();
      *(void *)(a1 + 24) = &type metadata for String;
      *(void *)(a1 + 32) = &off_1006FBE20;
      *(void *)a1 = v5;
      *(void *)(a1 + 8) = v6;
      uint64_t v7 = *(void *)(v1 + 6048);
      BOOL v8 = __OFADD__(v7, 1);
      uint64_t v9 = v7 + 1;
      if (!v8)
      {
        *(void *)(v1 + 6048) = v9;
        return;
      }
    }
    __break(1u);
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
}

unint64_t sub_10006D8E0(char a1)
{
  unint64_t result = 0x7265566C65646F6DLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x616353746E6F7266;
      break;
    case 2:
      unint64_t result = 0x6E6163536B636162;
      break;
    case 3:
    case 4:
      unint64_t result = 0x746E656D75636F64;
      break;
    case 5:
      unint64_t result = 0x6569666C6573;
      break;
    case 6:
      unint64_t result = 0x7373656E6576696CLL;
      break;
    case 7:
      unint64_t result = 0x65766973736170;
      break;
    case 8:
      unint64_t result = 0xD000000000000015;
      break;
    case 9:
      unint64_t result = 0x7461726F6C707865;
      break;
    case 10:
      unint64_t result = 0x6953726566667562;
      break;
    case 11:
      unint64_t result = 0x6957656C62617473;
      break;
    case 12:
      unint64_t result = 0x72466E6163536469;
      break;
    case 13:
      unint64_t result = 0x6172466F65646976;
      break;
    case 14:
      unint64_t result = 0x547463655278616DLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10006DAF8()
{
  return sub_10006D8E0(*v0);
}

uint64_t sub_10006DB00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000859B0(a1, a2);
  *a3 = result;
  return result;
}

void sub_10006DB28(unsigned char *a1@<X8>)
{
  *a1 = 15;
}

uint64_t sub_10006DB34(uint64_t a1)
{
  unint64_t v2 = sub_10006E178();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006DB70(uint64_t a1)
{
  unint64_t v2 = sub_10006E178();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IQModel.encode(to:)(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = (void *)__chkstk_darwin(a1);
  uint64_t v5 = sub_100007764(&qword_100721300);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  BOOL v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10000C728(v4, v4[3]);
  sub_10006E178();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v13[0] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    sub_1000BEA14(v3 + 16, (uint64_t)v20, &qword_100721310);
    sub_1000BEA14((uint64_t)v20, (uint64_t)v13, &qword_100721310);
    BYTE4(v12) = 1;
    sub_10006E1CC();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + 848, (uint64_t)v19, &qword_100721310);
    sub_1000BEA14((uint64_t)v19, (uint64_t)v13, &qword_100721310);
    BYTE4(v12) = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + 1680, (uint64_t)v18, &qword_100721310);
    sub_1000BEA14((uint64_t)v18, (uint64_t)v13, &qword_100721310);
    BYTE4(v12) = 3;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + 2512, (uint64_t)v17, &qword_100721310);
    sub_1000BEA14((uint64_t)v17, (uint64_t)v13, &qword_100721310);
    BYTE4(v12) = 4;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + 3344, (uint64_t)v16, &qword_100721310);
    sub_1000BEA14((uint64_t)v16, (uint64_t)v13, &qword_100721310);
    BYTE4(v12) = 5;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + 4176, (uint64_t)v15, &qword_100721310);
    sub_1000BEA14((uint64_t)v15, (uint64_t)v13, &qword_100721310);
    BYTE4(v12) = 6;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + 5008, (uint64_t)v14, &qword_100721310);
    sub_1000BEA14((uint64_t)v14, (uint64_t)v13, &qword_100721310);
    BYTE4(v12) = 7;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + 5840, (uint64_t)v21, (uint64_t *)&unk_100721320);
    sub_1000BEA14((uint64_t)v21, (uint64_t)v13, (uint64_t *)&unk_100721320);
    BYTE4(v12) = 8;
    sub_100007764(&qword_1007268F0);
    sub_1000AB18C((unint64_t *)&qword_100721330, &qword_1007268F0);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v9 = *(unsigned char *)(v3 + 5852);
    v13[0] = 9;
    BYTE4(v12) = v9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v13[0] = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v13[0] = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v13[0] = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v13[0] = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v10 = *(unsigned char *)(v3 + 5920);
    v13[0] = 14;
    BYTE4(v12) = v10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_10006E178()
{
  unint64_t result = qword_100721308;
  if (!qword_100721308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100721308);
  }
  return result;
}

unint64_t sub_10006E1CC()
{
  unint64_t result = qword_100721318;
  if (!qword_100721318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100721318);
  }
  return result;
}

void *IQModel.init(from:)(uint64_t a1)
{
  uint64_t v2 = __chkstk_darwin(a1);
  uint64_t v4 = v3;
  unint64_t result = sub_1000860A8(v2);
  if (!v1) {
    return memcpy(v4, __src, 0x1721uLL);
  }
  return result;
}

uint64_t sub_10006E290(char a1)
{
  uint64_t result = 0x656E697272756C62;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x657275736F707865;
      break;
    case 2:
      uint64_t result = 0x7473694464726163;
      break;
    case 3:
    case 18:
    case 25:
    case 28:
      uint64_t result = 0xD000000000000010;
      break;
    case 4:
      uint64_t result = 0xD000000000000011;
      break;
    case 5:
      uint64_t result = 0x6374695064616568;
      break;
    case 6:
      uint64_t result = 0x6C6C6F5264616568;
      break;
    case 7:
      uint64_t result = 0x77615964616568;
      break;
    case 8:
      uint64_t result = 0x73656361466D756ELL;
      break;
    case 9:
      uint64_t result = 0x65676E615278756CLL;
      break;
    case 10:
      uint64_t result = 0xD000000000000012;
      break;
    case 11:
      uint64_t result = 0xD000000000000016;
      break;
    case 12:
      uint64_t result = 0xD000000000000014;
      break;
    case 13:
      uint64_t result = 0xD000000000000012;
      break;
    case 14:
      uint64_t result = 0xD000000000000012;
      break;
    case 15:
      uint64_t result = 0x666E6F4365636166;
      break;
    case 16:
      uint64_t result = 0x75516569666C6573;
      break;
    case 17:
    case 19:
      uint64_t result = 0x746E656D75636F64;
      break;
    case 20:
      unsigned int v3 = 1952867692;
      goto LABEL_23;
    case 21:
      uint64_t result = 0x6972447468676972;
      break;
    case 22:
      uint64_t result = 0x74666972447075;
      break;
    case 23:
      unsigned int v3 = 1853321060;
LABEL_23:
      uint64_t result = v3 | 0x6669724400000000;
      break;
    case 24:
      uint64_t result = 0x6544373134666470;
      break;
    case 26:
      uint64_t result = 0x61436F7475417369;
      break;
    case 27:
      uint64_t result = 0x5465727574706163;
      break;
    case 29:
      uint64_t result = 0x6556746567726174;
      break;
    case 30:
      uint64_t result = 0x74614D797A7A7566;
      break;
    case 31:
      uint64_t result = 0x7373656E6576696CLL;
      break;
    case 32:
      uint64_t result = 0x456873616C467369;
      break;
    case 33:
      uint64_t result = 0x6F7779654B72636FLL;
      break;
    case 34:
      uint64_t result = 0x5378656C706D6F63;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10006E6F8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_100722078);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  BOOL v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1000A8E38();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_1000BEA14(v3, (uint64_t)v39, &qword_100722088);
  sub_1000BEA14((uint64_t)v39, (uint64_t)v12, &qword_100722088);
  char v11 = 0;
  sub_1000A8E8C();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    sub_1000BEA14(v3 + 32, (uint64_t)v38, &qword_100722088);
    sub_1000BEA14((uint64_t)v38, (uint64_t)v12, &qword_100722088);
    char v11 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + 64, (uint64_t)v37, &qword_100722088);
    sub_1000BEA14((uint64_t)v37, (uint64_t)v12, &qword_100722088);
    char v11 = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + 96, (uint64_t)v36, &qword_100722088);
    sub_1000BEA14((uint64_t)v36, (uint64_t)v12, &qword_100722088);
    char v11 = 3;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + 128, (uint64_t)v35, &qword_100722088);
    sub_1000BEA14((uint64_t)v35, (uint64_t)v12, &qword_100722088);
    char v11 = 4;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + 160, (uint64_t)v34, &qword_100722088);
    sub_1000BEA14((uint64_t)v34, (uint64_t)v12, &qword_100722088);
    char v11 = 5;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + 192, (uint64_t)v33, &qword_100722088);
    sub_1000BEA14((uint64_t)v33, (uint64_t)v12, &qword_100722088);
    char v11 = 6;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + 224, (uint64_t)v32, &qword_100722088);
    sub_1000BEA14((uint64_t)v32, (uint64_t)v12, &qword_100722088);
    char v11 = 7;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + 256, (uint64_t)v31, &qword_100722088);
    sub_1000BEA14((uint64_t)v31, (uint64_t)v12, &qword_100722088);
    char v11 = 8;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + 288, (uint64_t)v30, &qword_100722088);
    sub_1000BEA14((uint64_t)v30, (uint64_t)v12, &qword_100722088);
    char v11 = 9;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + 320, (uint64_t)v29, &qword_100722088);
    sub_1000BEA14((uint64_t)v29, (uint64_t)v12, &qword_100722088);
    char v11 = 10;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + 352, (uint64_t)v28, &qword_100722088);
    sub_1000BEA14((uint64_t)v28, (uint64_t)v12, &qword_100722088);
    char v11 = 11;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + 384, (uint64_t)v27, &qword_100722088);
    sub_1000BEA14((uint64_t)v27, (uint64_t)v12, &qword_100722088);
    char v11 = 12;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + 416, (uint64_t)v26, &qword_100722088);
    sub_1000BEA14((uint64_t)v26, (uint64_t)v12, &qword_100722088);
    char v11 = 13;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + 448, (uint64_t)v25, &qword_100722088);
    sub_1000BEA14((uint64_t)v25, (uint64_t)v12, &qword_100722088);
    char v11 = 14;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + 480, (uint64_t)v24, &qword_100722088);
    sub_1000BEA14((uint64_t)v24, (uint64_t)v12, &qword_100722088);
    char v11 = 15;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + 512, (uint64_t)v23, &qword_100722088);
    sub_1000BEA14((uint64_t)v23, (uint64_t)v12, &qword_100722088);
    char v11 = 16;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + 544, (uint64_t)v22, &qword_100722088);
    sub_1000BEA14((uint64_t)v22, (uint64_t)v12, &qword_100722088);
    char v11 = 17;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + 576, (uint64_t)v21, &qword_100722088);
    sub_1000BEA14((uint64_t)v21, (uint64_t)v12, &qword_100722088);
    char v11 = 18;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + 608, (uint64_t)v20, &qword_100722088);
    sub_1000BEA14((uint64_t)v20, (uint64_t)v12, &qword_100722088);
    char v11 = 19;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + 640, (uint64_t)v19, &qword_100722088);
    sub_1000BEA14((uint64_t)v19, (uint64_t)v12, &qword_100722088);
    char v11 = 20;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + 672, (uint64_t)v18, &qword_100722088);
    sub_1000BEA14((uint64_t)v18, (uint64_t)v12, &qword_100722088);
    char v11 = 21;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + 704, (uint64_t)v17, &qword_100722088);
    sub_1000BEA14((uint64_t)v17, (uint64_t)v12, &qword_100722088);
    char v11 = 22;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + 736, (uint64_t)v16, &qword_100722088);
    sub_1000BEA14((uint64_t)v16, (uint64_t)v12, &qword_100722088);
    char v11 = 23;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + 768, (uint64_t)v15, &qword_100722098);
    sub_1000BEA14((uint64_t)v15, (uint64_t)v12, &qword_100722098);
    char v11 = 24;
    sub_1000A8EE0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + 792, (uint64_t)v14, &qword_100722098);
    sub_1000BEA14((uint64_t)v14, (uint64_t)v12, &qword_100722098);
    char v11 = 25;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v12[0] = 26;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v12[0] = 27;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v12[0] = 28;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v12[0] = 29;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v12[0] = 30;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v12[0] = 31;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v12[0] = 32;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_1000BEA14(v3 + 816, (uint64_t)v40, (uint64_t *)&unk_100721320);
    sub_1000BEA14((uint64_t)v40, (uint64_t)v12, (uint64_t *)&unk_100721320);
    char v11 = 33;
    sub_100007764(&qword_1007268F0);
    sub_1000AB18C((unint64_t *)&qword_100721330, &qword_1007268F0);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + 824, (uint64_t)&v13, &qword_1007220A8);
    sub_1000BEA14((uint64_t)&v13, (uint64_t)v12, &qword_1007220A8);
    char v11 = 34;
    sub_100007764(&qword_1007220B0);
    sub_1000BEA78(&qword_1007220B8, &qword_1007220B0, (void (*)(void))sub_1000A8F34);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10006F3D0(void *a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  v13[1] = a5;
  void v13[2] = a3;
  uint64_t v8 = sub_100007764(&qword_100722228);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1000A9A80();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v17 = a2;
  char v16 = 0;
  sub_100007764(&qword_100722218);
  sub_1000AB18C(&qword_100722230, &qword_100722218);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v5)
  {
    char v15 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v14 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_10006F5BC(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v12 = a4;
  uint64_t v6 = sub_100007764(&qword_1007228E8);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1000BE774();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v4)
  {
    char v14 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v13 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_10006F758(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = a5;
  uint64_t v15 = a4;
  uint64_t v7 = sub_100007764(&qword_1007228F8);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1000BE7C8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v19 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    uint64_t v11 = v14;
    char v18 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v16 = v11;
    char v17 = 2;
    sub_100007764(&qword_100722908);
    sub_1000BEA78(&qword_100722910, &qword_100722908, (void (*)(void))sub_1000BE81C);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_10006F94C(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_100722A48);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_1000BF720();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_10006FAD4(char a1)
{
  unint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000013;
      break;
    case 2:
      unint64_t result = 0x6F697461526975;
      break;
    case 3:
      unint64_t result = 0x676E69646F636E65;
      break;
    case 4:
      unint64_t result = 0xD000000000000017;
      break;
    case 5:
      unint64_t result = 0xD000000000000014;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10006FB94(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_100722920);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_1000BE870();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    char v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v12 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v11 = *(void *)(v3 + 48);
    v10[15] = 3;
    sub_100007764(&qword_1007268F0);
    sub_1000AB18C((unint64_t *)&qword_100721330, &qword_1007268F0);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v10[14] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[13] = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10006FDE4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_1007220C8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1000A8F88();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v14[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    long long v9 = *(_OWORD *)(v3 + 64);
    void v14[2] = *(_OWORD *)(v3 + 48);
    v14[3] = v9;
    uint64_t v15 = *(void *)(v3 + 80);
    long long v10 = *(_OWORD *)(v3 + 32);
    v14[0] = *(_OWORD *)(v3 + 16);
    v14[1] = v10;
    char v13 = 1;
    sub_1000A8FDC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_1000BEA14(v3 + 88, (uint64_t)v16, (uint64_t *)&unk_100721320);
    sub_1000BEA14((uint64_t)v16, (uint64_t)v14, (uint64_t *)&unk_100721320);
    char v13 = 2;
    sub_100007764(&qword_1007268F0);
    sub_1000AB18C((unint64_t *)&qword_100721330, &qword_1007268F0);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100070004(uint64_t a1)
{
  uint64_t v2 = __chkstk_darwin(a1);
  memcpy(__dst, v1, sizeof(__dst));
  return IQModel.encode(to:)(v2);
}

void sub_100070074()
{
  Hasher._combine(_:)(*v0);
}

uint64_t sub_1000700A0()
{
  return sub_10006E290(*v0);
}

uint64_t sub_1000700A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100087424(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000700D0(unsigned char *a1@<X8>)
{
  *a1 = 35;
}

uint64_t sub_1000700DC(uint64_t a1)
{
  unint64_t v2 = sub_1000A8E38();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100070118(uint64_t a1)
{
  unint64_t v2 = sub_1000A8E38();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100070154@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100088354(a1, (uint64_t)v5);
  if (!v2) {
    return memcpy(a2, v5, 0x340uLL);
  }
  return result;
}

uint64_t sub_1000701A8(void *a1)
{
  memcpy(v4, v1, sizeof(v4));
  return sub_10006E6F8(a1);
}

uint64_t sub_1000701FC()
{
  uint64_t v1 = 0x636974796C616E61;
  if (*v0 != 1) {
    uint64_t v1 = 0x797469726F697270;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x65676E6172;
  }
}

uint64_t sub_100070258@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10008BBC4(a1, a2);
  *a3 = result;
  return result;
}

void sub_100070280(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_10007028C(uint64_t a1)
{
  unint64_t v2 = sub_1000A9A80();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000702C8(uint64_t a1)
{
  unint64_t v2 = sub_1000A9A80();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100070304@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10008BD20(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(unsigned char *)(a2 + 8) = v5 & 1;
    *(void *)(a2 + 16) = v6;
    *(unsigned char *)(a2 + 24) = v7 & 1;
  }
  return result;
}

uint64_t sub_100070344(void *a1)
{
  return sub_10006F3D0(a1, *(void *)v1, *(unsigned __int8 *)(v1 + 8), *(void *)(v1 + 16), *(unsigned __int8 *)(v1 + 24));
}

uint64_t sub_10007036C()
{
  uint64_t v1 = 0x636974796C616E61;
  if (*v0 != 1) {
    uint64_t v1 = 0x797469726F697270;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x65756C6176;
  }
}

uint64_t sub_1000703C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10008BF90(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000703F0(uint64_t a1)
{
  unint64_t v2 = sub_1000BE774();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007042C(uint64_t a1)
{
  unint64_t v2 = sub_1000BE774();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100070468@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10008C0EC(a1);
  if (!v2)
  {
    *(unsigned char *)a2 = result;
    *(unsigned char *)(a2 + 1) = BYTE1(result) & 1;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6 & 1;
  }
  return result;
}

uint64_t sub_1000704A8(void *a1)
{
  if (v1[1]) {
    int v2 = 256;
  }
  else {
    int v2 = 0;
  }
  return sub_10006F5BC(a1, v2 | *v1, *((void *)v1 + 1), v1[16]);
}

uint64_t sub_1000704E8()
{
  uint64_t v1 = 0x797469726F697270;
  if (*v0 != 1) {
    uint64_t v1 = 0x736C616E676973;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x696669746E656469;
  }
}

uint64_t sub_100070548@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10008C2CC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100070570(uint64_t a1)
{
  unint64_t v2 = sub_1000BE7C8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000705AC(uint64_t a1)
{
  unint64_t v2 = sub_1000BE7C8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000705E8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10008C430(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_100070618(void *a1)
{
  return sub_10006F758(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_100070638()
{
  uint64_t v1 = 0x74617261706D6F63;
  if (*v0 != 1) {
    uint64_t v1 = 0x6C6F687365726874;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701869940;
  }
}

uint64_t sub_100070694@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10008C6BC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000706BC(uint64_t a1)
{
  unint64_t v2 = sub_1000BF720();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000706F8(uint64_t a1)
{
  unint64_t v2 = sub_1000BF720();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100070734@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10008C81C(a1, (uint64_t)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_DWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_10007077C(void *a1)
{
  return sub_10006F94C(a1);
}

unint64_t sub_100070794()
{
  return sub_10006FAD4(*v0);
}

uint64_t sub_10007079C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10008CAA8(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000707C4(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_1000707D0(uint64_t a1)
{
  unint64_t v2 = sub_1000BE870();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007080C(uint64_t a1)
{
  unint64_t v2 = sub_1000BE870();

  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_100070848@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10008CD0C(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(void *)(a2 + 64) = v7;
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_10007089C(void *a1)
{
  return sub_10006FB94(a1);
}

uint64_t sub_1000708B4()
{
  unint64_t v1 = 0x726F466567616D69;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000015;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701869940;
  }
}

uint64_t sub_100070914@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10008D1A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10007093C(uint64_t a1)
{
  unint64_t v2 = sub_1000A8F88();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100070978(uint64_t a1)
{
  unint64_t v2 = sub_1000A8F88();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1000709B4@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10008D304(a1, (uint64_t *)v8);
  if (!v2)
  {
    long long v5 = v8[3];
    a2[2] = v8[2];
    a2[3] = v5;
    long long v6 = v8[5];
    a2[4] = v8[4];
    a2[5] = v6;
    double result = *(double *)v8;
    long long v7 = v8[1];
    *a2 = v8[0];
    a2[1] = v7;
  }
  return result;
}

uint64_t sub_100070A00(void *a1)
{
  return sub_10006FDE4(a1);
}

uint64_t sub_100070A44(char *a1, char *a2)
{
  return sub_100472474(*a1, *a2);
}

Swift::Int sub_100070A50()
{
  return Hasher._finalize()();
}

uint64_t sub_100070AD4()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100070B44()
{
  return Hasher._finalize()();
}

uint64_t sub_100070BC4@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1006F1270;
  return sub_100075FD0(v2, a1, a2);
}

void sub_100070BD0(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x676E69666F6F7270;
  if (*v1) {
    uint64_t v2 = 0x676E6972616873;
  }
  unint64_t v3 = 0xE800000000000000;
  if (*v1) {
    unint64_t v3 = 0xE700000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100070C10()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100070C70()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100070CC0()
{
  if (*v0) {
    return 0xD000000000000013;
  }
  else {
    return 0x65756C6176;
  }
}

uint64_t sub_100070CFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10008D6C8(a1, a2);
  *a3 = result;
  return result;
}

void sub_100070D24(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_100070D30(uint64_t a1)
{
  unint64_t v2 = sub_1000A92D0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100070D6C(uint64_t a1)
{
  unint64_t v2 = sub_1000A92D0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100070DA8()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_100070DE0(void *a1)
{
  uint64_t v3 = sub_100007764((uint64_t *)&unk_100722580);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  long long v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_1000A92D0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_100070F40(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_100722178);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1000A92D0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    type metadata accessor for ServerEndPoint();
    swift_deallocPartialClassInstance();
  }
  else
  {
    char v14 = 0;
    *(void *)(v1 + 16) = KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)(v1 + 24) = v9;
    char v13 = 1;
    char v11 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(unsigned char *)(v3 + 32) = v11 & 1;
  }
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  return v3;
}

unint64_t sub_100071120(char a1)
{
  unint64_t result = 25705;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x65756C6176;
      break;
    case 2:
    case 3:
      unint64_t result = 0xD000000000000013;
      break;
    case 4:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000711C0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100073194(a1, (void (*)(void))type metadata accessor for ServerEndPoint, (uint64_t (*)(uint64_t))sub_100070F40, a2);
}

uint64_t sub_100071204(void *a1)
{
  return sub_100070DE0(a1);
}

unint64_t sub_100071228()
{
  return sub_100071120(*v0);
}

uint64_t sub_100071230@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10008D7B0(a1, a2);
  *a3 = result;
  return result;
}

void sub_100071258(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_100071264(uint64_t a1)
{
  unint64_t v2 = sub_1000A9324();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000712A0(uint64_t a1)
{
  unint64_t v2 = sub_1000A9324();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000712DC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC8coreidvd22UserInputValidationURL_encryptionAlgorithm;
  uint64_t v2 = type metadata accessor for EncryptionParamsAlgorithmIdentifier();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1000713A0(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_100722570);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_1000A9324();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    type metadata accessor for EncryptionParamsAlgorithmIdentifier();
    sub_1000AF434(&qword_100722578, 255, (void (*)(uint64_t))&type metadata accessor for EncryptionParamsAlgorithmIdentifier);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1000715DC(void *a1)
{
  uint64_t v3 = type metadata accessor for EncryptionParamsAlgorithmIdentifier();
  uint64_t v25 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100007764(&qword_100722188);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a1[3];
  uint64_t v26 = a1;
  sub_10000C728(a1, v10);
  sub_1000A9324();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    uint64_t v14 = (uint64_t)v26;
    uint64_t v16 = v27;
    type metadata accessor for UserInputValidationURL(0);
    swift_deallocPartialClassInstance();
    uint64_t v23 = v14;
  }
  else
  {
    uint64_t v11 = v7;
    char v32 = 0;
    uint64_t v12 = v6;
    uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v16 = v27;
    *(void *)(v27 + 16) = v13;
    *(void *)(v16 + 24) = v17;
    char v31 = 1;
    *(void *)(v16 + 32) = KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)(v16 + 40) = v18;
    char v30 = 2;
    *(unsigned char *)(v16 + 48) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    char v29 = 3;
    sub_1000AF434(&qword_100722198, 255, (void (*)(uint64_t))&type metadata accessor for EncryptionParamsAlgorithmIdentifier);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v16 + OBJC_IVAR____TtC8coreidvd22UserInputValidationURL_encryptionAlgorithm, v5, v3);
    char v28 = 4;
    uint64_t v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v21 = v20;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v12);
    long long v22 = (uint64_t *)(v16 + OBJC_IVAR____TtC8coreidvd22UserInputValidationURL_encryptionCertificate);
    *long long v22 = v19;
    v22[1] = v21;
    uint64_t v23 = (uint64_t)v26;
  }
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v23);
  return v16;
}

uint64_t sub_100071A1C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v12[0] = a4;
  v12[1] = a5;
  uint64_t v7 = sub_100007764(&qword_1007221F0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1000A9984();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    char v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100071B90@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for UserInputValidationURL(0);
  uint64_t v5 = swift_allocObject();
  uint64_t result = sub_1000715DC(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_100071BEC(void *a1)
{
  return sub_1000713A0(a1);
}

uint64_t sub_100071C10(unsigned __int8 *a1, char *a2)
{
  return sub_100471FA0(*a1, *a2);
}

Swift::Int sub_100071C1C()
{
  return Hasher._finalize()();
}

uint64_t sub_100071CE4()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100071D94()
{
  return Hasher._finalize()();
}

unint64_t sub_100071E58@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10008D994(*a1);
  *a2 = result;
  return result;
}

void sub_100071E88(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE400000000000000;
  uint64_t v3 = 1701736302;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE500000000000000;
      uint64_t v3 = 0x64496F6962;
      goto LABEL_3;
    case 2:
      *a1 = 0x65646F6373736170;
      a1[1] = 0xE800000000000000;
      break;
    case 3:
      *a1 = 7958113;
      a1[1] = 0xE300000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_100071F10()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100071F70()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100071FC0()
{
  if (*v0) {
    return 0x6954746567726174;
  }
  else {
    return 0x72656469766F7270;
  }
}

uint64_t sub_100072000@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10008D9E0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100072028(uint64_t a1)
{
  unint64_t v2 = sub_1000A9984();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100072064(uint64_t a1)
{
  unint64_t v2 = sub_1000A9984();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000720A0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10008DAE4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1000720D0(void *a1)
{
  return sub_100071A1C(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_1000720F0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100470ED0(*a1, *a2);
}

Swift::Int sub_1000720FC()
{
  return Hasher._finalize()();
}

uint64_t sub_1000721A0()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100072230()
{
  return Hasher._finalize()();
}

unint64_t sub_1000722D0@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10008DCEC(*a1);
  *a2 = result;
  return result;
}

void sub_100072300(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE900000000000068;
  unint64_t v4 = 0xEB00000000644965;
  uint64_t v5 = 0x7475626972747461;
  if (v2 != 1)
  {
    uint64_t v5 = 25705;
    unint64_t v4 = 0xE200000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x74615070756F7267;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_100072360()
{
  uint64_t v1 = 0x7475626972747461;
  if (*v0 != 1) {
    uint64_t v1 = 25705;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x74615070756F7267;
  }
}

unint64_t sub_1000723BC@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10008DCEC(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000723E4(uint64_t a1)
{
  unint64_t v2 = sub_1000A9378();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100072420(uint64_t a1)
{
  unint64_t v2 = sub_1000A9378();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10007245C(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_1007221A0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1000A9378();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    type metadata accessor for VerifiedClaimField();
    swift_deallocPartialClassInstance();
  }
  else
  {
    char v18 = 0;
    v1[2] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v1[3] = v9;
    char v17 = 1;
    v1[4] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v1[5] = v10;
    char v16 = 2;
    uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v14 = v13;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v3[6] = v12;
    v3[7] = v14;
  }
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  return v3;
}

uint64_t sub_10007268C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1000726D4(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_100722568);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_1000A9378();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_10007285C(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_100722930);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1000BE8C4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v10 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    char v9 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1000729C4(char a1)
{
  unint64_t result = 0xD000000000000014;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6F697463656C6573;
      break;
    case 2:
      unint64_t result = 0x676E69646F636E65;
      break;
    case 4:
      unint64_t result = 0xD000000000000011;
      break;
    case 5:
      unint64_t result = 0xD000000000000010;
      break;
    case 6:
      unint64_t result = 0xD000000000000017;
      break;
    case 7:
      unint64_t result = 0x656E696C6576696CLL;
      break;
    case 8:
      unint64_t result = 0x74756F656D6974;
      break;
    case 9:
      unint64_t result = 0x6B6174655278616DLL;
      break;
    case 10:
      unint64_t result = 0x656C616373;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100072B14(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_1007220E0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1000A9030();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v10) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    *(void *)&long long v10 = *(void *)(v3 + 16);
    char v11 = 1;
    sub_100007764(&qword_1007220F0);
    sub_1000AB18C(&qword_1007220F8, &qword_1007220F0);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v10) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v10 = *(_OWORD *)(v3 + 32);
    char v11 = 3;
    sub_1000A9084();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v10 = *(_OWORD *)(v3 + 48);
    char v11 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v10) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v10) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v10) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v10) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v10) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v10) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100072E70(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v11[1] = a4;
  uint64_t v6 = sub_100007764(&qword_100722108);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  char v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1000A90D8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v4)
  {
    char v12 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_100072FE4(char a1)
{
  unint64_t result = 25705;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6465726975716572;
      break;
    case 2:
    case 3:
    case 7:
      unint64_t result = 0xD000000000000015;
      break;
    case 4:
      unint64_t result = 0xD000000000000014;
      break;
    case 5:
      unint64_t result = 0x6E65646469487369;
      break;
    case 6:
      unint64_t result = 0x72456E4F65646F63;
      break;
    case 8:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 9:
      unint64_t result = 0xD000000000000013;
      break;
    case 10:
      unint64_t result = 0x736567616D69;
      break;
    case 11:
      unint64_t result = 0x65646F4E61746164;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100073150@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100073194(a1, (void (*)(void))type metadata accessor for VerifiedClaimField, (uint64_t (*)(uint64_t))sub_10007245C, a2);
}

uint64_t sub_100073194@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X3>, uint64_t (*a3)(uint64_t)@<X5>, uint64_t *a4@<X8>)
{
  a2();
  uint64_t v8 = swift_allocObject();
  uint64_t result = a3(a1);
  if (!v4) {
    *a4 = v8;
  }
  return result;
}

uint64_t sub_100073204(void *a1)
{
  return sub_1000726D4(a1);
}

BOOL sub_100073228(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_100073240()
{
  if (*v0) {
    return 0x6874646977;
  }
  else {
    return 0x746867696568;
  }
}

uint64_t sub_100073274@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10008DD38(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10007329C(uint64_t a1)
{
  unint64_t v2 = sub_1000BE8C4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000732D8(uint64_t a1)
{
  unint64_t v2 = sub_1000BE8C4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100073314@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10008DE1C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_100073340(void *a1)
{
  return sub_10007285C(a1);
}

unint64_t sub_10007335C()
{
  return sub_1000729C4(*v0);
}

uint64_t sub_100073364@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10008DFC0(a1, a2);
  *a3 = result;
  return result;
}

void sub_10007338C(unsigned char *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_100073398(uint64_t a1)
{
  unint64_t v2 = sub_1000A9030();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000733D4(uint64_t a1)
{
  unint64_t v2 = sub_1000A9030();

  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_100073410@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10008E43C(a1, v8);
  if (!v2)
  {
    long long v5 = v9[0];
    *(_OWORD *)(a2 + 96) = v8[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(_OWORD *)(a2 + 121) = *(_OWORD *)((char *)v9 + 9);
    long long v6 = v8[3];
    *(_OWORD *)(a2 + 32) = v8[2];
    *(_OWORD *)(a2 + 48) = v6;
    long long v7 = v8[5];
    *(_OWORD *)(a2 + 64) = v8[4];
    *(_OWORD *)(a2 + 80) = v7;
    __n128 result = (__n128)v8[1];
    *(_OWORD *)a2 = v8[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_10007346C(void *a1)
{
  return sub_100072B14(a1);
}

uint64_t sub_100073484()
{
  if (*v0) {
    return 0x74615070756F7267;
  }
  else {
    return 0x6564756C636E69;
  }
}

uint64_t sub_1000734C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10008EAE4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000734EC(uint64_t a1)
{
  unint64_t v2 = sub_1000A90D8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100073528(uint64_t a1)
{
  unint64_t v2 = sub_1000A90D8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100073564@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10008EBE4(a1);
  if (!v2)
  {
    *(unsigned char *)a2 = result & 1;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_100073598(void *a1)
{
  return sub_100072E70(a1, *v1, *((void *)v1 + 1), *((void *)v1 + 2));
}

unint64_t sub_1000735B8()
{
  return sub_100072FE4(*v0);
}

uint64_t sub_1000735C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10008ED8C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000735E8(unsigned char *a1@<X8>)
{
  *a1 = 12;
}

uint64_t sub_1000735F4(uint64_t a1)
{
  unint64_t v2 = sub_1000872D4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100073630(uint64_t a1)
{
  unint64_t v2 = sub_1000872D4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t UserInputField.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_100721338);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10000C728(a1, a1[3]);
  sub_1000872D4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v11[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[0] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[0] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[0] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[0] = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[0] = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[0] = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_1000BEA14(v3 + 112, (uint64_t)v15, &qword_100721348);
    sub_1000BEA14((uint64_t)v15, (uint64_t)v11, &qword_100721348);
    char v12 = 9;
    sub_100007764(&qword_100721350);
    sub_1000BEA78(&qword_100721358, &qword_100721350, (void (*)(void))sub_100087328);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + 120, (uint64_t)v14, &qword_100721368);
    sub_1000BEA14((uint64_t)v14, (uint64_t)v11, &qword_100721368);
    char v12 = 10;
    sub_100007764(&qword_100721370);
    sub_1000BEA78(&qword_100721378, &qword_100721370, (void (*)(void))sub_10008737C);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + 128, (uint64_t)v13, &qword_100721388);
    sub_1000BEA14((uint64_t)v13, (uint64_t)v11, &qword_100721388);
    char v12 = 11;
    sub_1000873D0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

double UserInputField.init(from:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10008F240(a1, (uint64_t)v9);
  if (!v2)
  {
    long long v5 = v9[7];
    *(_OWORD *)(a2 + 96) = v9[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(_OWORD *)(a2 + 128) = v9[8];
    *(void *)(a2 + 144) = v10;
    long long v6 = v9[3];
    *(_OWORD *)(a2 + 32) = v9[2];
    *(_OWORD *)(a2 + 48) = v6;
    long long v7 = v9[5];
    *(_OWORD *)(a2 + 64) = v9[4];
    *(_OWORD *)(a2 + 80) = v7;
    double result = *(double *)v9;
    long long v8 = v9[1];
    *(_OWORD *)a2 = v9[0];
    *(_OWORD *)(a2 + 16) = v8;
  }
  return result;
}

uint64_t sub_100073B00(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_1007221D8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  long long v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_1000A9930();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_100073C88(char a1)
{
  uint64_t result = 1701273968;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x656C746974;
      break;
    case 2:
      uint64_t result = 0x656C746954627573;
      break;
    case 3:
      uint64_t result = 0x73646C656966;
      break;
    case 4:
      uint64_t result = 0x736C6562616CLL;
      break;
    case 5:
      uint64_t result = 0x6C6562616CLL;
      break;
    case 6:
      uint64_t result = 0x6570795465676170;
      break;
    case 7:
      uint64_t result = 0x6E6F6974706163;
      break;
    case 8:
      uint64_t result = 0x7373416567616D69;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100073D98(void *a1)
{
  return UserInputField.encode(to:)(a1);
}

uint64_t sub_100073DF4()
{
  uint64_t v1 = 0x7475626972747461;
  if (*v0 != 1) {
    uint64_t v1 = 0x656D737365737361;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x74615070756F7267;
  }
}

uint64_t sub_100073E60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10008FC5C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100073E88(uint64_t a1)
{
  unint64_t v2 = sub_1000A9930();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100073EC4(uint64_t a1)
{
  unint64_t v2 = sub_1000A9930();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100073F00@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10008FDE4(a1, (uint64_t)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(unsigned char *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_100073F48(void *a1)
{
  return sub_100073B00(a1);
}

uint64_t sub_100073F60()
{
  return sub_100073C88(*v0);
}

uint64_t sub_100073F68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100090068(a1, a2);
  *a3 = result;
  return result;
}

void sub_100073F90(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_100073F9C(uint64_t a1)
{
  unint64_t v2 = sub_10008FBB4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100073FD8(uint64_t a1)
{
  unint64_t v2 = sub_10008FBB4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Page.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_100721398);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_10008FBB4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v12) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v12 = *(void *)(v3 + 40);
    char v11 = 3;
    sub_100007764(&qword_1007268F0);
    sub_1000AB18C((unint64_t *)&qword_100721330, &qword_1007268F0);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_1000BEA14(v3 + 48, (uint64_t)v14, &qword_1007213A8);
    sub_1000BEA14((uint64_t)v14, (uint64_t)&v12, &qword_1007213A8);
    char v11 = 4;
    sub_100007764(&qword_1007213B0);
    sub_1000BEA78(&qword_1007213B8, &qword_1007213B0, (void (*)(void))sub_10008FC08);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v12) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_1000BEA14(v3 + 104, (uint64_t)v13, (uint64_t *)&unk_100721320);
    sub_1000BEA14((uint64_t)v13, (uint64_t)&v12, (uint64_t *)&unk_100721320);
    char v11 = 8;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

__n128 Page.init(from:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100090400(a1, (uint64_t *)v7);
  if (!v2)
  {
    long long v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_OWORD *)(a2 + 96) = v7[6];
    long long v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    __n128 result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_1000743E8(void *a1)
{
  return Page.encode(to:)(a1);
}

uint64_t Page.debugDescription.getter()
{
  _StringGuts.grow(_:)(87);
  v1._uint64_t countAndFlagsBits = 0x203A65676170;
  v1._object = (void *)0xE600000000000000;
  String.append(_:)(v1);
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 0x20656C7469740ALL;
  v3._object = (void *)0xE700000000000000;
  String.append(_:)(v3);
  uint64_t v4 = v0[1];
  long long v5 = (void *)v0[2];
  swift_bridgeObjectRetain();
  v6._uint64_t countAndFlagsBits = v4;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 0x6C7469746275730ALL;
  v7._object = (void *)0xEA00000000002065;
  String.append(_:)(v7);
  uint64_t v8 = v0[3];
  char v9 = (void *)v0[4];
  swift_bridgeObjectRetain();
  v10._uint64_t countAndFlagsBits = v8;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 0x2073646C6569660ALL;
  v11._object = (void *)0xE800000000000000;
  String.append(_:)(v11);
  swift_bridgeObjectRetain();
  v12._uint64_t countAndFlagsBits = Array.description.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 0x20736C6562616C0ALL;
  v13._object = (void *)0xE800000000000000;
  String.append(_:)(v13);
  swift_bridgeObjectRetain();
  v14._uint64_t countAndFlagsBits = Array.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = 0x707954656761700ALL;
  v15._object = (void *)0xEA00000000002065;
  String.append(_:)(v15);
  uint64_t v16 = v0[10];
  if (v16) {
    uint64_t v17 = v0[9];
  }
  else {
    uint64_t v17 = 0;
  }
  if (v16) {
    char v18 = (void *)v0[10];
  }
  else {
    char v18 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v19._uint64_t countAndFlagsBits = v17;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 0x6E6F69747061630ALL;
  v20._object = (void *)0xE900000000000020;
  String.append(_:)(v20);
  uint64_t v21 = v0[12];
  if (v21) {
    uint64_t v22 = v0[11];
  }
  else {
    uint64_t v22 = 0;
  }
  if (v21) {
    uint64_t v23 = (void *)v0[12];
  }
  else {
    uint64_t v23 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v24._uint64_t countAndFlagsBits = v22;
  v24._object = v23;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._uint64_t countAndFlagsBits = 0x73416567616D690ALL;
  v25._object = (void *)0xED00002073746573;
  String.append(_:)(v25);
  swift_bridgeObjectRetain();
  v26._uint64_t countAndFlagsBits = Array.description.getter();
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

unint64_t sub_100074714(char a1)
{
  unint64_t result = 0xD00000000000001ALL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000014;
      break;
    case 2:
      unint64_t result = 0x664F7265626D756ELL;
      break;
    case 3:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000747C0(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_1007221C0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  Swift::String v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1000A98DC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v12 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    char v11 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v10 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_100074988(void *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v5 = sub_100007764(a2);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 0;
  uint64_t v9 = v11[1];
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v9)
  {
    char v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v12 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100074B1C(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  v12[1] = a4;
  char v6 = a2 & 1;
  uint64_t v7 = sub_100007764(&qword_100722948);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  char v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1000BE96C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = v6;
  char v14 = 0;
  sub_1000A9228();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v4)
  {
    char v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100074CA4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_100722118);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1000A912C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v12[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v12[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v12[0] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_1000BEA14(v3 + 48, (uint64_t)v16, &qword_100722128);
    sub_1000BEA14((uint64_t)v16, (uint64_t)v12, &qword_100722128);
    char v11 = 3;
    sub_1000A9180();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + 96, (uint64_t)v15, &qword_100722138);
    sub_1000BEA14((uint64_t)v15, (uint64_t)v12, &qword_100722138);
    char v11 = 4;
    sub_1000A91D4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + 144, (uint64_t)&v14, &qword_100722148);
    sub_1000BEA14((uint64_t)&v14, (uint64_t)v12, &qword_100722148);
    char v11 = 5;
    sub_1000A9228();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + 152, (uint64_t)v13, &qword_100722158);
    sub_1000BEA14((uint64_t)v13, (uint64_t)v12, &qword_100722158);
    char v11 = 6;
    sub_100007764(&qword_100722160);
    sub_1000BEA78(&qword_100722168, &qword_100722160, (void (*)(void))sub_1000A927C);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100074FF0(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_1007229A8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_1000BE9C0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    type metadata accessor for EncryptionCertificateInStringFormat(0);
    v8[13] = 2;
    type metadata accessor for EncryptedMessageEntity();
    sub_1000AF434(&qword_1007229B0, 255, (void (*)(uint64_t))&type metadata accessor for EncryptedMessageEntity);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1000751D4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v4 = sub_100007764(&qword_100720278);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100007764(&qword_100722958);
  uint64_t v21 = *(void *)(v7 - 8);
  uint64_t v22 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for EncryptionCertificateInStringFormat(0);
  __chkstk_darwin(v10);
  char v12 = (uint64_t *)((char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000C728(a1, a1[3]);
  sub_1000BE9C0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  uint64_t v19 = v10;
  uint64_t v13 = v21;
  char v25 = 0;
  uint64_t v14 = (uint64_t)v12;
  *char v12 = KeyedDecodingContainer.decode(_:forKey:)();
  v12[1] = v15;
  char v24 = 1;
  void v12[2] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v12[3] = v16;
  type metadata accessor for EncryptedMessageEntity();
  char v23 = 2;
  sub_1000AF434(&qword_100722968, 255, (void (*)(uint64_t))&type metadata accessor for EncryptedMessageEntity);
  uint64_t v17 = v22;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v17);
  sub_1000BEA14((uint64_t)v6, v14 + *(int *)(v19 + 24), &qword_100720278);
  sub_1000B58C0(v14, v20);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  return sub_1000B5924(v14);
}

uint64_t sub_100075500(char a1)
{
  uint64_t result = 25705;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6E6F6973726576;
      break;
    case 2:
      uint64_t result = 0x4E79616C70736964;
      break;
    case 3:
      uint64_t result = 0x72656469766F7270;
      break;
    case 4:
      uint64_t result = 0x617A696E6167726FLL;
      break;
    case 5:
      uint64_t result = 0x7972747375646E69;
      break;
    case 6:
      uint64_t result = 1701869940;
      break;
    case 7:
      uint64_t v3 = 0x68636E75616CLL;
      goto LABEL_10;
    case 8:
      uint64_t v3 = 0x746567726174;
LABEL_10:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x6954000000000000;
      break;
    case 9:
      uint64_t result = 0xD000000000000010;
      break;
    case 10:
      uint64_t result = 0x6574726F70707573;
      break;
    case 11:
      uint64_t result = 0xD000000000000012;
      break;
    case 12:
      uint64_t result = 0x4C746C7561666564;
      break;
    case 13:
      uint64_t result = 0x736E6F4372657375;
      break;
    case 14:
      uint64_t result = 0xD000000000000017;
      break;
    case 15:
      uint64_t result = 0xD000000000000018;
      break;
    case 16:
      uint64_t result = 0x75706E4972657375;
      break;
    case 17:
      uint64_t result = 0xD00000000000001CLL;
      break;
    case 18:
      uint64_t result = 0x4155656C62616E65;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100075774(char a1)
{
  uint64_t result = 25705;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6E6F6973726576;
      break;
    case 2:
      uint64_t result = 0x4E79616C70736964;
      break;
    case 3:
      uint64_t result = 0x72656469766F7270;
      break;
    case 4:
      uint64_t result = 0x617A696E6167726FLL;
      break;
    case 5:
      uint64_t result = 0x7972747375646E69;
      break;
    case 6:
      uint64_t result = 1701869940;
      break;
    case 7:
      uint64_t v3 = 0x68636E75616CLL;
      goto LABEL_10;
    case 8:
      uint64_t v3 = 0x746567726174;
LABEL_10:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x6954000000000000;
      break;
    case 9:
      uint64_t result = 0xD000000000000010;
      break;
    case 10:
      uint64_t result = 0x6574726F70707573;
      break;
    case 11:
      uint64_t result = 0xD000000000000012;
      break;
    case 12:
      uint64_t result = 0x4C746C7561666564;
      break;
    case 13:
      uint64_t result = 0x736E6F4372657375;
      break;
    case 14:
      uint64_t result = 0xD000000000000017;
      break;
    case 15:
      uint64_t result = 0xD000000000000018;
      break;
    case 16:
      uint64_t result = 0x75706E4972657375;
      break;
    case 17:
      uint64_t result = 0xD00000000000001CLL;
      break;
    case 18:
      uint64_t result = 0x4155656C62616E65;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000759EC()
{
  uint64_t v1 = 0x656C746954627573;
  if (*v0 != 1) {
    uint64_t v1 = 2036625250;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x656C746974;
  }
}

uint64_t sub_100075A3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000A93CC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100075A64(uint64_t a1)
{
  unint64_t v2 = sub_1000AB024();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100075AA0(uint64_t a1)
{
  unint64_t v2 = sub_1000AB024();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100075ADC@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_100075DAC(a1, &qword_100722280, (void (*)(void))sub_1000AB024, a2);
}

uint64_t sub_100075B18(void *a1)
{
  return sub_100074988(a1, &qword_100722290, (void (*)(void))sub_1000AB024);
}

unint64_t sub_100075B54()
{
  return sub_100074714(*v0);
}

uint64_t sub_100075B5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000A950C(a1, a2);
  *a3 = result;
  return result;
}

void sub_100075B84(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_100075B90(uint64_t a1)
{
  unint64_t v2 = sub_1000A98DC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100075BCC(uint64_t a1)
{
  unint64_t v2 = sub_1000A98DC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100075C08@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1000A96D8(a1);
  if (!v2)
  {
    *a2 = v5;
    a2[1] = v6;
    a2[2] = result;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_100075C3C(void *a1)
{
  return sub_1000747C0(a1);
}

uint64_t sub_100075C60()
{
  uint64_t v1 = 0x696669746E656469;
  if (*v0 != 1) {
    uint64_t v1 = 0x614E746E65746E69;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x69546E6F74747562;
  }
}

uint64_t sub_100075CD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000A9AD4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100075CF8(uint64_t a1)
{
  unint64_t v2 = sub_1000AAFD0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100075D34(uint64_t a1)
{
  unint64_t v2 = sub_1000AAFD0();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100075D70@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_100075DAC(a1, &qword_100722268, (void (*)(void))sub_1000AAFD0, a2);
}

double sub_100075DAC@<D0>(void *a1@<X0>, uint64_t *a2@<X3>, void (*a3)(void)@<X4>, _OWORD *a4@<X8>)
{
  sub_1000A9C54(a1, a2, a3, (uint64_t *)v8);
  if (!v4)
  {
    long long v7 = v8[1];
    *a4 = v8[0];
    a4[1] = v7;
    double result = *(double *)&v9;
    a4[2] = v9;
  }
  return result;
}

uint64_t sub_100075DFC(void *a1)
{
  return sub_100074988(a1, &qword_100722278, (void (*)(void))sub_1000AAFD0);
}

uint64_t sub_100075E38(char *a1, char *a2)
{
  return sub_100472108(*a1, *a2);
}

Swift::Int sub_100075E44()
{
  return Hasher._finalize()();
}

uint64_t sub_100075ECC()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100075F40()
{
  return Hasher._finalize()();
}

uint64_t sub_100075FC4@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1006F13A8;
  return sub_100075FD0(v2, a1, a2);
}

uint64_t sub_100075FD0@<X0>(Swift::OpaquePointer cases@<0:X3>, Swift::String *a2@<X0>, char *a3@<X8>)
{
  Swift::Int v4 = _findStringSwitchCase(cases:string:)(cases, *a2);
  uint64_t result = swift_bridgeObjectRelease();
  if (v4 == 1) {
    char v6 = 1;
  }
  else {
    char v6 = 2;
  }
  if (!v4) {
    char v6 = 0;
  }
  *a3 = v6;
  return result;
}

void sub_10007602C(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x4953656C676E6973;
  if (*v1) {
    uint64_t v2 = 0x4D49536C617564;
  }
  unint64_t v3 = 0xE90000000000004DLL;
  if (*v1) {
    unint64_t v3 = 0xE700000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100076070()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000760D0()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100076120()
{
  if (*v0) {
    return 0x746E65746E6F63;
  }
  else {
    return 0x6F697469646E6F63;
  }
}

uint64_t sub_100076160@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000A9EF8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100076188(uint64_t a1)
{
  unint64_t v2 = sub_1000BE96C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000761C4(uint64_t a1)
{
  unint64_t v2 = sub_1000BE96C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100076200@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000A9FF8(a1);
  if (!v2)
  {
    *(unsigned char *)a2 = result & 1;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_100076234(void *a1)
{
  return sub_100074B1C(a1, *(unsigned char *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16));
}

uint64_t sub_100076254()
{
  uint64_t result = 25705;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x746E65746E6F63;
      break;
    case 2:
      uint64_t result = 0x69546E6F74747562;
      break;
    case 3:
      uint64_t result = 0x6C6961746564;
      break;
    case 4:
      uint64_t result = 0x7373656E69737562;
      break;
    case 5:
      uint64_t result = 0x6F697469646E6F63;
      break;
    case 6:
      uint64_t result = 7629921;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100076334@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000AA1B8(a1, a2);
  *a3 = result;
  return result;
}

void sub_10007635C(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_100076368(uint64_t a1)
{
  unint64_t v2 = sub_1000A912C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000763A4(uint64_t a1)
{
  unint64_t v2 = sub_1000A912C();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1000763E0@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1000AA4AC(a1, v10);
  if (!v2)
  {
    long long v5 = v10[7];
    a2[6] = v10[6];
    a2[7] = v5;
    long long v6 = v10[9];
    a2[8] = v10[8];
    a2[9] = v6;
    long long v7 = v10[3];
    a2[2] = v10[2];
    a2[3] = v7;
    long long v8 = v10[5];
    a2[4] = v10[4];
    a2[5] = v8;
    double result = *(double *)v10;
    long long v9 = v10[1];
    *a2 = v10[0];
    a2[1] = v9;
  }
  return result;
}

uint64_t sub_10007643C(void *a1)
{
  return sub_100074CA4(a1);
}

Swift::Int sub_100076490()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_1000764D8()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10007651C()
{
  uint64_t v1 = 0x676E696E676973;
  if (*v0 != 1) {
    uint64_t v1 = 0x6E65697069636572;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x656572674179656BLL;
  }
}

uint64_t sub_100076584@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000AECE0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000765AC(uint64_t a1)
{
  unint64_t v2 = sub_1000BE9C0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000765E8(uint64_t a1)
{
  unint64_t v2 = sub_1000BE9C0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100076624@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000751D4(a1, a2);
}

uint64_t sub_10007663C(void *a1)
{
  return sub_100074FF0(a1);
}

uint64_t sub_100076654(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_10007A84C(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_100075500);
}

Swift::Int sub_10007666C(uint64_t a1, uint64_t a2)
{
  return sub_10007A8FC(a1, a2, (void (*)(uint64_t))sub_100075500);
}

uint64_t sub_100076684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007A980(a1, a2, a3, (void (*)(void))sub_100075500);
}

Swift::Int sub_10007669C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007A9F0(a1, a2, a3, (void (*)(uint64_t))sub_100075500);
}

uint64_t sub_1000766B4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1000AEE5C();
  *a1 = result;
  return result;
}

uint64_t sub_1000766E4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100075500(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100076710()
{
  return sub_100075774(*v0);
}

uint64_t sub_100076718@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1000AEE5C();
  *a1 = result;
  return result;
}

void sub_100076740(unsigned char *a1@<X8>)
{
  *a1 = 19;
}

uint64_t sub_10007674C(uint64_t a1)
{
  unint64_t v2 = sub_1000B5980();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100076788(uint64_t a1)
{
  unint64_t v2 = sub_1000B5980();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000767C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, uint64_t a10, uint64_t a11, char a12, long long a13, long long a14, long long a15, long long a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  *(void *)(v25 + 16) = a1;
  *(void *)(v25 + 24) = a2;
  *(void *)(v25 + 32) = a3;
  *(void *)(v25 + 40) = a4;
  *(void *)(v25 + 48) = a5;
  *(void *)(v25 + 56) = a6;
  *(void *)(v25 + 64) = a7;
  *(void *)(v25 + 72) = a8;
  *(_OWORD *)(v25 + 80) = a9;
  *(void *)(v25 + 96) = a10;
  *(void *)(v25 + 104) = a11;
  *(unsigned char *)(v25 + 112) = a12 & 1;
  *(_OWORD *)(v25 + 120) = a13;
  *(_OWORD *)(v25 + 136) = a14;
  *(_OWORD *)(v25 + 152) = a15;
  *(_OWORD *)(v25 + 168) = a16;
  *(void *)(v25 + 184) = a17;
  *(void *)(v25 + 192) = a18;
  uint64_t v26 = v25 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_hardwareAttestationType;
  *(unsigned char *)(v25 + 200) = a19;
  sub_1000BEA14(a20, v26, &qword_100722310);
  *(void *)(v25 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_hardwareAttestationTypes) = a21;
  *(void *)(v25 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_userInputFields) = a22;
  uint64_t v27 = (void *)(v25 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_defaultEncryptionCertificate);
  *uint64_t v27 = a23;
  v27[1] = a24;
  *(unsigned char *)(v25 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_enableUAM) = a25;
  return v25;
}

uint64_t sub_1000768B0(uint64_t a1)
{
  return sub_10007AB94(a1, (void (*)(uint64_t))sub_1000768DC);
}

uint64_t sub_1000768DC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_100722310);
  __chkstk_darwin(v5 - 8);
  long long v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100007764(&qword_1007224A0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1[3];
  char v32 = a1;
  sub_10000C728(a1, v12);
  sub_1000B5980();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    uint64_t v13 = (uint64_t)v32;
    type metadata accessor for LegacyWorkflow(0);
    swift_deallocPartialClassInstance();
    uint64_t v20 = v13;
  }
  else
  {
    LOBYTE(v33) = 0;
    *(void *)(v3 + 16) = KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)(v3 + 24) = v14;
    LOBYTE(v33) = 1;
    *(void *)(v3 + 32) = KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)(v3 + 40) = v15;
    LOBYTE(v33) = 2;
    *(void *)(v3 + 48) = KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)(v3 + 56) = v16;
    LOBYTE(v33) = 3;
    uint64_t v31 = 0;
    *(void *)(v3 + 64) = KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)(v3 + 72) = v17;
    LOBYTE(v33) = 4;
    *(void *)(v3 + 80) = KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)(v3 + 88) = v18;
    LOBYTE(v33) = 5;
    *(void *)(v3 + 96) = KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)(v3 + 104) = v19;
    char v34 = 6;
    sub_1000B59D4();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(unsigned char *)(v3 + 112) = (_BYTE)v33;
    LOBYTE(v33) = 7;
    *(void *)(v3 + 120) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *(void *)(v3 + 128) = v22;
    LOBYTE(v33) = 8;
    *(void *)(v3 + 136) = KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)(v3 + 144) = v23;
    sub_100007764(&qword_1007268F0);
    char v34 = 9;
    sub_1000AB18C((unint64_t *)&qword_1007222C8, &qword_1007268F0);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(void *)(v3 + 152) = v33;
    LOBYTE(v33) = 10;
    *(void *)(v3 + 160) = KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)(v3 + 168) = v24;
    char v34 = 11;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(void *)(v3 + 176) = v33;
    LOBYTE(v33) = 12;
    *(void *)(v3 + 184) = KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)(v3 + 192) = v25;
    char v34 = 13;
    sub_1000B5A28();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(unsigned char *)(v3 + 200) = (_BYTE)v33;
    type metadata accessor for HardwareAttestationType();
    LOBYTE(v33) = 14;
    sub_1000AF434(&qword_1007224C0, 255, (void (*)(uint64_t))&type metadata accessor for HardwareAttestationType);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14((uint64_t)v7, v3 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_hardwareAttestationType, &qword_100722310);
    sub_100007764(&qword_1007224C8);
    char v34 = 15;
    sub_1000B5A7C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(void *)(v3 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_hardwareAttestationTypes) = v33;
    sub_100007764(&qword_1007224D8);
    char v34 = 16;
    sub_1000BEA78(&qword_1007224E0, &qword_1007224D8, (void (*)(void))sub_1000B5B24);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v26 = v33;
    if (!v33) {
      uint64_t v26 = &_swiftEmptyArrayStorage;
    }
    *(void *)(v3 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_userInputFields) = v26;
    LOBYTE(v33) = 17;
    uint64_t v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    char v28 = (uint64_t *)(v3 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_defaultEncryptionCertificate);
    *char v28 = v27;
    v28[1] = v29;
    LOBYTE(v33) = 18;
    char v30 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    *(unsigned char *)(v3 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_enableUAM) = v30;
    uint64_t v20 = (uint64_t)v32;
  }
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v20);
  return v3;
}

uint64_t sub_10007752C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000C6CC(v0 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_hardwareAttestationType, &qword_100722310);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000775F0()
{
  return sub_10007D894((void (*)(void))sub_10007752C);
}

uint64_t sub_100077608(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_100722530);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1000B5980();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v10) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v10) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v10) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v10) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v10) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v10) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v10) = *(unsigned char *)(v3 + 112);
    char v11 = 6;
    sub_1000B5D20();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v10) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v10) = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v10 = *(void *)(v3 + 152);
    char v11 = 9;
    sub_100007764(&qword_1007268F0);
    sub_1000AB18C((unint64_t *)&qword_100721330, &qword_1007268F0);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v10) = 10;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v10 = *(void *)(v3 + 176);
    char v11 = 11;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v10) = 12;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v10) = *(unsigned char *)(v3 + 200);
    char v11 = 13;
    sub_1000B5D74();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v10) = 14;
    type metadata accessor for HardwareAttestationType();
    sub_1000AF434(&qword_100722548, 255, (void (*)(uint64_t))&type metadata accessor for HardwareAttestationType);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v10 = *(void *)(v3 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_hardwareAttestationTypes);
    char v11 = 15;
    sub_100007764(&qword_1007224C8);
    sub_1000B5DC8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v10 = *(void *)(v3 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_userInputFields);
    char v11 = 16;
    sub_100007764(&qword_1007224D8);
    sub_1000BEA78(&qword_100722558, &qword_1007224D8, (void (*)(void))sub_1000B5E70);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v10) = 17;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v10) = 18;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100077BA0(char a1)
{
  unint64_t result = 0x746163696C707061;
  switch(a1)
  {
    case 1:
    case 7:
    case 17:
      unint64_t result = 0xD000000000000016;
      break;
    case 2:
      unint64_t result = 0xD000000000000013;
      break;
    case 3:
      unint64_t result = 0xD000000000000014;
      break;
    case 4:
      unint64_t result = 7107700;
      break;
    case 5:
      unint64_t result = 0xD000000000000021;
      break;
    case 6:
      unint64_t result = 0xD000000000000012;
      break;
    case 8:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 9:
      unint64_t result = 0x6974616E69676170;
      break;
    case 10:
      unint64_t result = 0x65726564726F6E75;
      break;
    case 11:
      unint64_t result = 0x74696B64756F6C63;
      break;
    case 12:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 13:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 14:
      unint64_t result = 0xD000000000000023;
      break;
    case 15:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 16:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100077DD0(char a1)
{
  unint64_t result = 0x746163696C707061;
  switch(a1)
  {
    case 1:
    case 7:
    case 17:
      unint64_t result = 0xD000000000000016;
      break;
    case 2:
      unint64_t result = 0xD000000000000013;
      break;
    case 3:
      unint64_t result = 0xD000000000000014;
      break;
    case 4:
      unint64_t result = 7107700;
      break;
    case 5:
      unint64_t result = 0xD000000000000021;
      break;
    case 6:
      unint64_t result = 0xD000000000000012;
      break;
    case 8:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 9:
      unint64_t result = 0x6974616E69676170;
      break;
    case 10:
      unint64_t result = 0x65726564726F6E75;
      break;
    case 11:
      unint64_t result = 0x74696B64756F6C63;
      break;
    case 12:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 13:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 14:
      unint64_t result = 0xD000000000000023;
      break;
    case 15:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 16:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100078000@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 248))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_10007803C(void *a1)
{
  return sub_100077608(a1);
}

uint64_t sub_100078060(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_10007A84C(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_100077BA0);
}

Swift::Int sub_100078078(uint64_t a1, uint64_t a2)
{
  return sub_10007A8FC(a1, a2, (void (*)(uint64_t))sub_100077BA0);
}

uint64_t sub_100078090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007A980(a1, a2, a3, (void (*)(void))sub_100077BA0);
}

Swift::Int sub_1000780A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007A9F0(a1, a2, a3, (void (*)(uint64_t))sub_100077BA0);
}

uint64_t sub_1000780C0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1000AF05C();
  *a1 = result;
  return result;
}

unint64_t sub_1000780F0@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100077BA0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_10007811C()
{
  return sub_100077DD0(*v0);
}

uint64_t sub_100078124@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1000AF05C();
  *a1 = result;
  return result;
}

void sub_10007814C(unsigned char *a1@<X8>)
{
  *a1 = 18;
}

uint64_t sub_100078158(uint64_t a1)
{
  unint64_t v2 = sub_1000B5B78();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100078194(uint64_t a1)
{
  unint64_t v2 = sub_1000B5B78();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000781D0(uint64_t a1)
{
  return sub_10007AB94(a1, (void (*)(uint64_t))sub_1000781FC);
}

uint64_t sub_1000781FC(void *a1)
{
  int v85 = (void *)type metadata accessor for DIPError.Code();
  uint64_t v83 = *(v85 - 1);
  __chkstk_darwin(v85);
  uint64_t v88 = (char *)v68 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for EncryptedMessageEntity();
  uint64_t v80 = *(void *)(v4 - 8);
  uint64_t v81 = v4;
  __chkstk_darwin(v4);
  uint64_t v82 = (char *)v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for RecipientEncryptionCertificate();
  uint64_t v86 = *(void *)(v6 - 8);
  uint64_t v87 = v6;
  __chkstk_darwin(v6);
  uint64_t v84 = (char *)v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DIPCertUsage();
  uint64_t v78 = *(void *)(v8 - 8);
  uint64_t v79 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v77 = (char *)v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v76 = (char *)v68 - v11;
  uint64_t v12 = type metadata accessor for DIPOIDVerifier();
  uint64_t v89 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100007764(&qword_1007224F0);
  uint64_t v90 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = a1[3];
  uint64_t v92 = a1;
  sub_10000C728(a1, v18);
  sub_1000B5B78();
  uint64_t v19 = v1;
  swift_retain();
  uint64_t v20 = (uint64_t)v91;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v20)
  {
    swift_release();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v92);
    type metadata accessor for LegacyINOWorkflow(0);
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v91 = v14;
    uint64_t v21 = v1;
    uint64_t v75 = v12;
    uint64_t v22 = v90;
    uint64_t v23 = (void *)sub_100007764(&qword_1007268F0);
    char v94 = 0;
    uint64_t v24 = sub_1000AB18C((unint64_t *)&qword_1007222C8, &qword_1007268F0);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v73 = v24;
    id v74 = v23;
    *(Swift::OpaquePointer *)(v1 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_applicationACL) = v93[0];
    sub_100007764(&qword_100722428);
    char v94 = 1;
    sub_1000BEA78(&qword_100722430, &qword_100722428, (void (*)(void))sub_1000B56A0);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(Swift::OpaquePointer *)(v1 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_acceptedVerifiedClaims) = v93[0];
    sub_100007764(&qword_100722500);
    char v94 = 2;
    sub_1000B5BCC();
    uint64_t v72 = 0;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    rawValue = v93[0]._rawValue;
    if (!v93[0]._rawValue) {
      rawValue = &_swiftEmptyArrayStorage;
    }
    *(void *)(v1 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_verifiedClaimFields) = rawValue;
    LOBYTE(v93[0]._rawValue) = 3;
    *(unsigned char *)(v1 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_claimDataConsistency) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    LOBYTE(v93[0]._rawValue) = 5;
    uint64_t v70 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v71 = v27;
    LOBYTE(v93[0]._rawValue) = 6;
    v68[1] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v69 = v28;
    sub_100007764(&qword_100722458);
    char v94 = 7;
    sub_1000B5748();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v68[0] = v93[0];
    sub_100007764(&qword_100722410);
    char v94 = 9;
    sub_1000BEA78(&qword_100722418, &qword_100722410, (void (*)(void))sub_1000B564C);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v29 = v68[0];
    *(Swift::OpaquePointer *)(v1 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_pagination) = v93[0];
    sub_100007764(&qword_100722518);
    char v94 = 10;
    sub_1000B5C70();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(Swift::OpaquePointer *)(v1 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_unorderedUI) = v93[0];
    LOBYTE(v93[0]._rawValue) = 11;
    uint64_t v30 = v15;
    uint64_t v31 = v17;
    uint64_t v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v33 = v1 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_cloudkitRetry;
    *(void *)uint64_t v33 = v32;
    *(unsigned char *)(v33 + 8) = v34 & 1;
    LOBYTE(v93[0]._rawValue) = 12;
    uint64_t v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v36 = v1 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_connectToWifiReminderInDays;
    *(void *)uint64_t v36 = v35;
    *(unsigned char *)(v36 + 8) = v37 & 1;
    LOBYTE(v93[0]._rawValue) = 13;
    uint64_t v38 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v39 = v1 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_provisioningRetryTimeoutInDays;
    *(void *)uint64_t v39 = v38;
    *(unsigned char *)(v39 + 8) = v40 & 1;
    LOBYTE(v93[0]._rawValue) = 14;
    uint64_t v41 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v42 = v1 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_deleteIncompleteCredentialAfterDays;
    *(void *)uint64_t v42 = v41;
    *(unsigned char *)(v42 + 8) = v43 & 1;
    LOBYTE(v93[0]._rawValue) = 15;
    uint64_t v44 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v45 = v1 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_deleteInactiveKeysAfterDays;
    *(void *)uint64_t v45 = v44;
    *(unsigned char *)(v45 + 8) = v46 & 1;
    LOBYTE(v93[0]._rawValue) = 16;
    char v47 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *(unsigned char *)(v1 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_base64EncodeImage) = (v47 == 2) | v47 & 1;
    LOBYTE(v93[0]._rawValue) = 17;
    *(unsigned char *)(v1 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_isBiomeFedStatsEnabled) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    LOBYTE(v93[0]._rawValue) = 4;
    uint64_t v48 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    if (v49)
    {
      uint64_t v50 = sub_1005D18B4(v48, v49);
      char v52 = v51 & 1;
    }
    else
    {
      uint64_t v50 = 0;
      char v52 = 1;
    }
    uint64_t v53 = v1 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_claimTTL;
    *(void *)uint64_t v53 = v50;
    *(unsigned char *)(v53 + 8) = v52;
    DIPOIDVerifier.init()();
    char v94 = 8;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    if (v93[0]._rawValue)
    {
      DIPOIDVerifier.setIntermediates(fromBase64DER:)(v93[0]);
      swift_bridgeObjectRelease();
    }
    if (v71 && v69)
    {
      swift_bridgeObjectRelease();
      uint64_t v54 = *(void (**)(char *, void, uint64_t))(v78 + 104);
      v54(v76, enum case for DIPCertUsage.inoEncryption(_:), v79);
      id v74 = (id)DIPOIDVerifier.verifyLeaf(fromBase64DER:forUsage:)();
      uint64_t v55 = v79;
      uint64_t v56 = *(char **)(v78 + 8);
      uint64_t v57 = v76;
      v78 += 8;
      uint64_t v76 = v56;
      ((void (*)(char *, uint64_t))v56)(v57, v79);
      swift_bridgeObjectRelease();
      v54(v77, enum case for DIPCertUsage.inoSigning(_:), v55);
      uint64_t v58 = (void *)DIPOIDVerifier.verifyLeaf(fromBase64DER:forUsage:)();
      ((void (*)(char *, uint64_t))v76)(v77, v79);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v80 + 104))(v82, enum case for EncryptedMessageEntity.ino(_:), v81);
      int v85 = v74;
      uint64_t v88 = v58;
      RecipientEncryptionCertificate.init(keyAgreement:signing:recipient:)();
      sub_100007764(&qword_100722480);
      uint64_t v59 = (int *)(sub_100007764(&qword_100722488) - 8);
      unint64_t v60 = (*(unsigned __int8 *)(*(void *)v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v59 + 80);
      uint64_t v61 = swift_allocObject();
      *(_OWORD *)(v61 + 16) = xmmword_100610730;
      uint64_t v62 = (void *)(v61 + v60);
      unint64_t v63 = v61 + v60 + v59[14];
      *uint64_t v62 = 0x746C7561666564;
      v62[1] = 0xE700000000000000;
      uint64_t v65 = v86;
      uint64_t v64 = v87;
      (*(void (**)(unint64_t, char *, uint64_t))(v86 + 16))(v63, v84, v87);
      unint64_t v66 = sub_10015D37C(v61);

      (*(void (**)(char *, uint64_t))(v65 + 8))(v84, v64);
    }
    else
    {
      swift_bridgeObjectRelease();
      if (v29)
      {
        unint64_t v66 = sub_10007A0F4((uint64_t)&_swiftEmptyDictionarySingleton, v29, (uint64_t)v91, (void (*)(uint64_t *, char *, uint64_t))sub_100079488);
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v66 = 0;
      }
    }
    *(void *)(v21 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_recipientCertificates) = v66;
    swift_release();
    sub_100030A10((uint64_t)v92, (uint64_t)v93);
    sub_1000768DC(v93);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v31, v30);
    uint64_t v67 = *(void (**)(char *, uint64_t))(v89 + 8);
    uint64_t v19 = v21;
    swift_retain();
    v67(v91, v75);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v92);
    swift_release();
  }
  return v19;
}

uint64_t sub_100079488(uint64_t a1, Swift::String *a2, uint64_t a3)
{
  uint64_t v121 = a3;
  uint64_t v108 = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  uint64_t v112 = *(void *)(v4 - 8);
  uint64_t v113 = v4;
  __chkstk_darwin(v4);
  uint64_t v114 = (char *)&v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for EncryptedMessageEntity();
  uint64_t v119 = *(void *)(v6 - 8);
  uint64_t v120 = v6;
  __chkstk_darwin(v6);
  Class v106 = (char *)&v99 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100007764(&qword_100722300);
  __chkstk_darwin(v8 - 8);
  uint64_t v107 = (char *)&v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DIPOIDVerifier();
  uint64_t v126 = *(void *)(v10 - 8);
  uint64_t v127 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  unint64_t v110 = (char *)&v99 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v117 = (char *)&v99 - v13;
  uint64_t v14 = sub_100007764(&qword_100720278);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v105 = (uint64_t)&v99 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v99 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v99 - v20;
  uint64_t v22 = sub_100007764((uint64_t *)&unk_100722490);
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v104 = (uint64_t *)((char *)&v99 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v25 = __chkstk_darwin(v23);
  unint64_t v103 = (uint64_t *)((char *)&v99 - v26);
  uint64_t v27 = __chkstk_darwin(v25);
  Swift::String v111 = (uint64_t *)((char *)&v99 - v28);
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v116 = (uint64_t *)((char *)&v99 - v30);
  __chkstk_darwin(v29);
  uint64_t v32 = (uint64_t *)((char *)&v99 - v31);
  uint64_t v33 = type metadata accessor for DIPCertUsage();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = __chkstk_darwin(v33);
  char v37 = (char *)&v99 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  uint64_t v39 = (char *)&v99 - v38;
  uint64_t v122 = v22;
  uint64_t v40 = *(int *)(v22 + 48);
  uint64_t v41 = (uint64_t)v32 + v40;
  uint64_t v42 = (uint64_t)a2 + v40;
  uint64_t countAndFlagsBits = a2->_countAndFlagsBits;
  object = a2->_object;
  BOOL v130 = a2;
  uint64_t *v32 = countAndFlagsBits;
  v32[1] = (uint64_t)object;
  uint64_t v45 = v120;
  uint64_t v125 = v42;
  sub_1000B58C0(v42, v41);
  uint64_t v100 = type metadata accessor for EncryptionCertificateInStringFormat(0);
  sub_100048D6C(v41 + *(int *)(v100 + 24), (uint64_t)v21, &qword_100720278);
  uint64_t v46 = v41;
  uint64_t v47 = v119;
  sub_1000B5924(v46);
  uint64_t v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48);
  uint64_t v102 = v47 + 48;
  uint64_t v101 = v48;
  unsigned int v49 = v48((uint64_t)v21, 1, v45);
  uint64_t v115 = v33;
  uint64_t v123 = v34;
  unint64_t v124 = v37;
  if (v49 == 1) {
    goto LABEL_2;
  }
  sub_100048D6C((uint64_t)v21, (uint64_t)v19, &qword_100720278);
  int v52 = (*(uint64_t (**)(char *, uint64_t))(v47 + 88))(v19, v45);
  if (v52 == enum case for EncryptedMessageEntity.idvServer(_:))
  {
    uint64_t v53 = *(void (**)(char *, void, uint64_t))(v123 + 104);
    char v51 = (uint64_t *)v39;
    v53(v39, enum case for DIPCertUsage.inoEncryption(_:), v33);
    v53(v124, enum case for DIPCertUsage.inoSigning(_:), v33);
    sub_10000C6CC((uint64_t)v21, &qword_100720278);
    goto LABEL_5;
  }
  uint64_t v56 = v130;
  uint64_t v55 = v122;
  if (v52 == enum case for EncryptedMessageEntity.ino(_:))
  {
    uint64_t v57 = (unsigned int *)&enum case for DIPCertUsage.inoEncryption(_:);
  }
  else
  {
    if (v52 == enum case for EncryptedMessageEntity.athena(_:)
      || v52 == enum case for EncryptedMessageEntity.assessor(_:))
    {
      sub_10000C6CC((uint64_t)v21, &qword_100720278);
      uint64_t v59 = *(void (**)(char *, void, uint64_t))(v123 + 104);
      v59(v39, enum case for DIPCertUsage.accountAssessmentServerEncryption(_:), v33);
      v59(v124, enum case for DIPCertUsage.accountAssessmentServerSigning(_:), v33);
      goto LABEL_14;
    }
    if (v52 != enum case for EncryptedMessageEntity.issuer(_:))
    {
      (*(void (**)(char *, uint64_t))(v47 + 8))(v19, v45);
      uint64_t v34 = v123;
      char v37 = v124;
LABEL_2:
      uint64_t v50 = *(void (**)(char *, void, uint64_t))(v34 + 104);
      v50(v39, enum case for DIPCertUsage.inoEncryption(_:), v33);
      v50(v37, enum case for DIPCertUsage.inoSigning(_:), v33);
      sub_10000C6CC((uint64_t)v21, &qword_100720278);
      char v51 = (uint64_t *)v39;
LABEL_5:
      uint64_t v54 = v130;
      uint64_t v55 = v122;
      goto LABEL_15;
    }
    uint64_t v57 = (unsigned int *)&enum case for DIPCertUsage.identityEncryptionExternal(_:);
  }
  uint64_t v58 = *(void (**)(char *, void, uint64_t))(v123 + 104);
  v58(v39, *v57, v33);
  v58(v124, enum case for DIPCertUsage.inoSigning(_:), v33);
  sub_10000C6CC((uint64_t)v21, &qword_100720278);
LABEL_14:
  char v51 = (uint64_t *)v39;
  uint64_t v54 = v56;
LABEL_15:
  uint64_t v60 = v126;
  uint64_t v61 = v117;
  unint64_t v109 = *(void (**)(char *, uint64_t, uint64_t))(v126 + 16);
  v109(v117, v121, v127);
  uint64_t v62 = v116;
  uint64_t v63 = (uint64_t)v116 + *(int *)(v55 + 48);
  uint64_t v64 = v54->_object;
  *uint64_t v116 = v54->_countAndFlagsBits;
  v62[1] = (uint64_t)v64;
  sub_1000B58C0(v125, v63);
  swift_bridgeObjectRetain();
  sub_1000B5924(v63);
  uint64_t v116 = v51;
  id v65 = v118;
  unint64_t v66 = (void *)DIPOIDVerifier.verifyLeaf(fromBase64DER:forUsage:)();
  if (v65)
  {
    (*(void (**)(char *, uint64_t))(v60 + 8))(v61, v127);
    swift_bridgeObjectRelease();
    uint64_t v67 = v124;
    uint64_t v128 = 0;
    unint64_t v129 = 0xE000000000000000;
    _StringGuts.grow(_:)(54);
    v68._object = (void *)0x8000000100632BD0;
    v68._uint64_t countAndFlagsBits = 0xD000000000000034;
    String.append(_:)(v68);
    String.append(_:)(*v130);
    (*(void (**)(char *, void, uint64_t))(v112 + 104))(v114, enum case for DIPError.Code.internalError(_:), v113);
    swift_errorRetain();
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000AF434((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    uint64_t v69 = *(void (**)(char *, uint64_t))(v123 + 8);
    uint64_t v70 = v115;
    v69(v67, v115);
    return ((uint64_t (*)(uint64_t *, uint64_t))v69)(v116, v70);
  }
  else
  {
    id v118 = v66;
    uint64_t v72 = v127;
    uint64_t v73 = v60 + 8;
    id v74 = *(void (**)(char *, uint64_t))(v60 + 8);
    uint64_t v126 = v73;
    v74(v61, v127);
    swift_bridgeObjectRelease();
    uint64_t v75 = v111;
    uint64_t v76 = (uint64_t)v111 + *(int *)(v55 + 48);
    uint64_t v77 = v54->_object;
    *Swift::String v111 = v54->_countAndFlagsBits;
    v75[1] = (uint64_t)v77;
    sub_1000B58C0(v125, v76);
    uint64_t v78 = *(void *)(v76 + 24);
    swift_bridgeObjectRetain();
    sub_1000B5924(v76);
    if (v78)
    {
      uint64_t v79 = v110;
      v109(v110, v121, v72);
      uint64_t v80 = (void *)DIPOIDVerifier.verifyLeaf(fromBase64DER:forUsage:)();
      v74(v79, v72);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v80 = 0;
    }
    uint64_t v81 = v122;
    uint64_t v82 = v103;
    uint64_t v83 = (Swift::String *)((char *)v103 + *(int *)(v122 + 48));
    uint64_t v84 = v130->_countAndFlagsBits;
    uint64_t v85 = (uint64_t)v130->_object;
    *unint64_t v103 = v130->_countAndFlagsBits;
    v82[1] = v85;
    uint64_t v86 = v125;
    BOOL v130 = v83;
    sub_1000B58C0(v125, (uint64_t)v83);
    uint64_t v87 = *(int *)(v81 + 48);
    uint64_t v88 = v104;
    uint64_t v89 = (uint64_t)v104 + v87;
    *uint64_t v104 = v84;
    v88[1] = v85;
    sub_1000B58C0(v86, (uint64_t)v88 + v87);
    uint64_t v90 = v105;
    sub_100048D6C(v89 + *(int *)(v100 + 24), v105, &qword_100720278);
    swift_bridgeObjectRetain();
    sub_1000B5924(v89);
    uint64_t v91 = v120;
    if (v101(v90, 1, v120) == 1)
    {
      (*(void (**)(char *, void, uint64_t))(v119 + 104))(v106, enum case for EncryptedMessageEntity.ino(_:), v91);
      sub_10000C6CC(v90, &qword_100720278);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v119 + 32))(v106, v90, v91);
    }
    uint64_t v92 = v123;
    id v93 = v80;
    id v94 = v118;
    uint64_t v95 = (uint64_t)v107;
    RecipientEncryptionCertificate.init(keyAgreement:signing:recipient:)();
    uint64_t v96 = type metadata accessor for RecipientEncryptionCertificate();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v96 - 8) + 56))(v95, 0, 1, v96);
    sub_10055F040(v95, v84, v85);

    char v97 = *(void (**)(char *, uint64_t))(v92 + 8);
    uint64_t v98 = v115;
    v97(v124, v115);
    v97((char *)v116, v98);
    return sub_1000B5924((uint64_t)v130);
  }
}

uint64_t sub_10007A0F4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *, char *, uint64_t))
{
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  uint64_t v30 = sub_100007764((uint64_t *)&unk_100722490);
  uint64_t v7 = __chkstk_darwin(v30);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (uint64_t *)((char *)&v28 - v10);
  uint64_t v34 = a1;
  uint64_t v12 = *(void *)(a2 + 64);
  uint64_t v28 = a2 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v29 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v33 = a2;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v17 = 0;
  if (!v15) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v18 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (unint64_t i = v18 | (v17 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    uint64_t v23 = *(void *)(v33 + 56);
    uint64_t v24 = (uint64_t *)(*(void *)(v33 + 48) + 16 * i);
    uint64_t v25 = *v24;
    uint64_t v26 = v24[1];
    uint64_t v27 = type metadata accessor for EncryptionCertificateInStringFormat(0);
    sub_1000B58C0(v23 + *(void *)(*(void *)(v27 - 8) + 72) * i, (uint64_t)v11 + *(int *)(v30 + 48));
    *uint64_t v11 = v25;
    v11[1] = v26;
    sub_1000BEA14((uint64_t)v11, (uint64_t)v9, (uint64_t *)&unk_100722490);
    swift_bridgeObjectRetain();
    v32(&v34, v9, v31);
    if (v4)
    {
      swift_bridgeObjectRelease();
      sub_10000C6CC((uint64_t)v9, (uint64_t *)&unk_100722490);
      return swift_release();
    }
    uint64_t result = sub_10000C6CC((uint64_t)v9, (uint64_t *)&unk_100722490);
    if (v15) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v17++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v29) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v28 + 8 * v17);
    if (!v21) {
      break;
    }
LABEL_17:
    unint64_t v15 = (v21 - 1) & v21;
  }
  int64_t v22 = v17 + 1;
  if (v17 + 1 >= v29) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v28 + 8 * v22);
  if (v21) {
    goto LABEL_16;
  }
  int64_t v22 = v17 + 2;
  if (v17 + 2 >= v29) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v28 + 8 * v22);
  if (v21) {
    goto LABEL_16;
  }
  int64_t v22 = v17 + 3;
  if (v17 + 3 >= v29) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v28 + 8 * v22);
  if (v21) {
    goto LABEL_16;
  }
  int64_t v22 = v17 + 4;
  if (v17 + 4 >= v29)
  {
LABEL_26:
    swift_release();
    return v34;
  }
  unint64_t v21 = *(void *)(v28 + 8 * v22);
  if (v21)
  {
LABEL_16:
    int64_t v17 = v22;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v17 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v17 >= v29) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v28 + 8 * v17);
    ++v22;
    if (v21) {
      goto LABEL_17;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10007A3C4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10007A444()
{
  sub_10007752C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

unint64_t sub_10007A4FC(char a1)
{
  unint64_t result = 0x4C525565636E6F6ELL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x55676E6972616873;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 4:
      unint64_t result = 0xD000000000000013;
      break;
    case 5:
      unint64_t result = 0x6974616E69676170;
      break;
    case 6:
      unint64_t result = 0xD000000000000016;
      break;
    case 7:
      unint64_t result = 0x746163696C707061;
      break;
    case 8:
      unint64_t result = 0xD000000000000016;
      break;
    case 9:
    case 18:
    case 24:
      unint64_t result = 0xD000000000000012;
      break;
    case 10:
      unint64_t result = 0x62616D75736E6F63;
      break;
    case 11:
      unint64_t result = 0xD000000000000014;
      break;
    case 12:
      unint64_t result = 0x466564756C636E69;
      break;
    case 13:
      unint64_t result = 0xD000000000000028;
      break;
    case 14:
      unint64_t result = 0xD000000000000023;
      break;
    case 15:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 16:
      unint64_t result = 0x697463656E6E6F63;
      break;
    case 17:
      unint64_t result = 0xD000000000000021;
      break;
    case 19:
      unint64_t result = 0xD000000000000016;
      break;
    case 20:
      unint64_t result = 0x46676E6972616873;
      break;
    case 21:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 22:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 23:
      unint64_t result = 0xD000000000000014;
      break;
    case 25:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10007A834(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_10007A84C(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_10007A4FC);
}

uint64_t sub_10007A84C(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = *a2;
  uint64_t v7 = a5(*a1);
  uint64_t v9 = v8;
  if (v7 == a5(v6) && v9 == v10) {
    char v12 = 1;
  }
  else {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

Swift::Int sub_10007A8E4(uint64_t a1, uint64_t a2)
{
  return sub_10007A8FC(a1, a2, (void (*)(uint64_t))sub_10007A4FC);
}

Swift::Int sub_10007A8FC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5 = *v3;
  Hasher.init(_seed:)();
  a3(v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_10007A968(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007A980(a1, a2, a3, (void (*)(void))sub_10007A4FC);
}

uint64_t sub_10007A980(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4(*v4);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10007A9D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007A9F0(a1, a2, a3, (void (*)(uint64_t))sub_10007A4FC);
}

Swift::Int sub_10007A9F0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6 = *v4;
  Hasher.init(_seed:)();
  a4(v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_10007AA58@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1000BEB38();
  *a1 = result;
  return result;
}

unint64_t sub_10007AA88@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10007A4FC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_10007AAB4()
{
  return sub_10007A4FC(*v0);
}

uint64_t sub_10007AABC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1000BEB38();
  *a1 = result;
  return result;
}

void sub_10007AAE4(unsigned char *a1@<X8>)
{
  *a1 = 26;
}

uint64_t sub_10007AAF0(uint64_t a1)
{
  unint64_t v2 = sub_1000B54FC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007AB2C(uint64_t a1)
{
  unint64_t v2 = sub_1000B54FC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10007AB68(uint64_t a1)
{
  return sub_10007AB94(a1, (void (*)(uint64_t))sub_10007ABEC);
}

uint64_t sub_10007AB94(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = swift_allocObject();
  a2(a1);
  return v4;
}

uint64_t sub_10007ABEC(void *a1)
{
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v117 = *(void *)(v3 - 8);
  uint64_t v118 = v3;
  __chkstk_darwin(v3);
  uint64_t v119 = (char *)&v90 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100007764(&qword_100722300);
  __chkstk_darwin(v5 - 8);
  unint64_t v113 = (unint64_t)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for EncryptedMessageEntity();
  uint64_t v109 = *(void *)(v7 - 8);
  uint64_t v110 = v7;
  __chkstk_darwin(v7);
  uint64_t v108 = (char *)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for RecipientEncryptionCertificate();
  unint64_t v111 = *(void *)(v9 - 8);
  uint64_t v112 = v9;
  __chkstk_darwin(v9);
  uint64_t v105 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = type metadata accessor for DIPCertUsage();
  uint64_t v114 = *(void *)(v116 - 8);
  uint64_t v11 = __chkstk_darwin(v116);
  uint64_t v115 = (char *)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v107 = (char *)&v90 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  Class v106 = (char *)&v90 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v104 = (char *)&v90 - v18;
  __chkstk_darwin(v17);
  unint64_t v103 = (char *)&v90 - v19;
  uint64_t v20 = type metadata accessor for DIPOIDVerifier();
  uint64_t v120 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  int64_t v22 = (char *)&v90 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100007764(&qword_1007223C8);
  uint64_t v121 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v90 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = a1[3];
  uint64_t v123 = a1;
  sub_10000C728(a1, v26);
  sub_1000B54FC();
  uint64_t v27 = v1;
  swift_retain();
  uint64_t v28 = v122;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v28)
  {
    swift_release();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v123);
LABEL_4:
    type metadata accessor for LegacySPWorkflow(0);
    swift_deallocPartialClassInstance();
    return v27;
  }
  uint64_t v101 = v22;
  uint64_t v122 = v1;
  uint64_t v102 = v20;
  type metadata accessor for ServerEndPoint();
  char v126 = 0;
  sub_1000AF434(&qword_1007223D8, v29, (void (*)(uint64_t))type metadata accessor for ServerEndPoint);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v31 = v122;
  *(void *)(v122 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_nonceURL) = *(void *)&v124[0];
  char v126 = 1;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  *(void *)(v31 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_sharingURL) = *(void *)&v124[0];
  LOBYTE(v124[0]) = 2;
  uint64_t v100 = 0;
  *(unsigned char *)(v31 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_allowUrlOverride) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  sub_100007764(&qword_1007223E0);
  char v126 = 3;
  sub_1000B5550();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v33 = OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_userInputFieldValidationURLs;
  *(void *)(v31 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_userInputFieldValidationURLs) = *(void *)&v124[0];
  sub_100007764(&qword_1007223F8);
  char v126 = 4;
  sub_1000BEA78(&qword_100722400, &qword_1007223F8, (void (*)(void))sub_1000B55F8);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(void *)(v31 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_shareableAttributes) = *(void *)&v124[0];
  sub_100007764(&qword_100722410);
  char v126 = 5;
  sub_1000BEA78(&qword_100722418, &qword_100722410, (void (*)(void))sub_1000B564C);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(void *)(v31 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_pagination) = *(void *)&v124[0];
  sub_100007764(&qword_100722428);
  char v126 = 6;
  sub_1000BEA78(&qword_100722430, &qword_100722428, (void (*)(void))sub_1000B56A0);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(void *)(v31 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_acceptedVerifiedClaims) = *(void *)&v124[0];
  sub_100007764(&qword_1007268F0);
  char v126 = 7;
  sub_1000AB18C((unint64_t *)&qword_1007222C8, &qword_1007268F0);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(void *)(v31 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_applicationACL) = *(void *)&v124[0];
  LOBYTE(v124[0]) = 8;
  *(unsigned char *)(v31 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_shareAccountAssessment) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
  LOBYTE(v124[0]) = 9;
  uint64_t v99 = v23;
  uint64_t v34 = v25;
  *(unsigned char *)(v122 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_shareINOAssessment) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
  sub_100007764(&qword_100722440);
  char v126 = 10;
  sub_1000BEA78(&qword_100722448, &qword_100722440, (void (*)(void))sub_1000B56F4);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  *(void *)(v122 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_consumableDSD) = *(void *)&v124[0];
  LOBYTE(v124[0]) = 13;
  uint64_t v97 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v98 = v35;
  LOBYTE(v124[0]) = 14;
  uint64_t v95 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v96 = v36;
  LOBYTE(v124[0]) = 17;
  id v93 = (void (*)(char *, uint64_t))KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v94 = v37;
  LOBYTE(v124[0]) = 18;
  uint64_t v92 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v39 = v38;
  sub_100007764(&qword_100722458);
  char v126 = 19;
  sub_1000B5748();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v91 = *(void *)&v124[0];
  LOBYTE(v124[0]) = 11;
  *(unsigned char *)(v122 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_includeEncryptedTSID) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v124[0]) = 12;
  *(unsigned char *)(v122 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_includeFGuid) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v124[0]) = 15;
  *(unsigned char *)(v122 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_accountAssessmentDeviceData) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v126 = 16;
  sub_1000B5818();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  char v40 = v125;
  uint64_t v41 = v122 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_connectivity;
  long long v42 = v124[1];
  *(_OWORD *)uint64_t v41 = v124[0];
  *(_OWORD *)(v41 + 16) = v42;
  *(unsigned char *)(v41 + 32) = v40;
  char v126 = 20;
  sub_1000B586C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  *(unsigned char *)(v122 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_sharingFormat) = v124[0];
  LOBYTE(v124[0]) = 22;
  uint64_t v43 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v44 = (uint64_t *)(v122 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_userAuthorizationBundleName);
  *uint64_t v44 = v43;
  v44[1] = v45;
  LOBYTE(v124[0]) = 23;
  uint64_t v46 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v47 = v122 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_dsdValidityInSeconds;
  *(void *)uint64_t v47 = v46;
  *(unsigned char *)(v47 + 8) = v48 & 1;
  LOBYTE(v124[0]) = 24;
  *(unsigned char *)(v122 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_useExternalGSToken) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v124[0]) = 25;
  *(unsigned char *)(v122 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_assessBeforeProof) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  DIPOIDVerifier.init()();
  char v126 = 21;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v90 = 0;
  if (*(void *)&v124[0])
  {
    DIPOIDVerifier.setIntermediates(fromBase64DER:)(*(Swift::OpaquePointer *)&v124[0]);
    swift_bridgeObjectRelease();
  }
  if (v94 && v39)
  {
    swift_bridgeObjectRelease();
    unsigned int v49 = *(void (**)(char *, void, uint64_t))(v114 + 104);
    v49(v103, enum case for DIPCertUsage.spEncryption(_:), v116);
    uint64_t v50 = v90;
    uint64_t v51 = DIPOIDVerifier.verifyLeaf(fromBase64DER:forUsage:)();
    uint64_t v90 = v50;
    if (v50)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v114 + 8))(v103, v116);
LABEL_27:
      (*(void (**)(char *, void, uint64_t))(v117 + 104))(v119, enum case for DIPError.Code.internalError(_:), v118);
      swift_errorRetain();
      sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1000AF434((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v121 + 8))(v34, v99);
      (*(void (**)(char *, uint64_t))(v120 + 8))(v101, v102);
      LODWORD(v121) = 0;
      LODWORD(v120) = 0;
LABEL_50:
      LODWORD(v119) = 1;
      uint64_t v32 = v100;
      uint64_t v27 = v122;
      goto LABEL_6;
    }
    uint64_t v55 = (void *)v51;
    uint64_t v56 = *(void (**)(char *, uint64_t))(v114 + 8);
    uint64_t v57 = v103;
    uint64_t v58 = v116;
    unint64_t v103 = (char *)(v114 + 8);
    id v93 = v56;
    v56(v57, v116);
    swift_bridgeObjectRelease();
    v49(v104, enum case for DIPCertUsage.spSigning(_:), v58);
    uint64_t v59 = v90;
    uint64_t v60 = DIPOIDVerifier.verifyLeaf(fromBase64DER:forUsage:)();
    uint64_t v90 = v59;
    if (v59)
    {
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v93(v104, v116);
      goto LABEL_27;
    }
    uint64_t v61 = (void *)v60;
    v93(v104, v116);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v109 + 104))(v108, enum case for EncryptedMessageEntity.sp(_:), v110);
    id v62 = v55;
    id v63 = v61;
    uint64_t v64 = v105;
    RecipientEncryptionCertificate.init(keyAgreement:signing:recipient:)();
    sub_100007764(&qword_100722480);
    id v65 = (int *)(sub_100007764(&qword_100722488) - 8);
    unint64_t v66 = (*(unsigned __int8 *)(*(void *)v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v65 + 80);
    uint64_t v67 = swift_allocObject();
    *(_OWORD *)(v67 + 16) = xmmword_100610730;
    Swift::String v68 = (void *)(v67 + v66);
    unint64_t v69 = v67 + v66 + v65[14];
    *Swift::String v68 = 0x746C7561666564;
    v68[1] = 0xE700000000000000;
    unint64_t v71 = v111;
    uint64_t v70 = v112;
    (*(void (**)(unint64_t, char *, uint64_t))(v111 + 16))(v69, v64, v112);
    unint64_t v54 = sub_10015D37C(v67);

    (*(void (**)(char *, uint64_t))(v71 + 8))(v64, v70);
  }
  else
  {
    swift_bridgeObjectRelease();
    if (v91)
    {
      uint64_t v52 = v90;
      uint64_t v53 = sub_10007A0F4((uint64_t)&_swiftEmptyDictionarySingleton, v91, (uint64_t)v101, (void (*)(uint64_t *, char *, uint64_t))sub_10007CD2C);
      uint64_t v90 = v52;
      if (v52)
      {
        swift_bridgeObjectRelease();
        uint64_t v27 = v122;
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v121 + 8))(v34, v99);
        (*(void (**)(char *, uint64_t))(v120 + 8))(v101, v102);
        LODWORD(v121) = 0;
        LODWORD(v120) = 0;
LABEL_14:
        LODWORD(v119) = 1;
        uint64_t v32 = v100;
LABEL_6:
        _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v123);
        swift_release();
        if (!v32) {
          swift_release();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v121)
        {
          sub_10000C6CC(v27 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_accountAssessmentCertificate, &qword_100722300);
          if ((v120 & 1) == 0)
          {
LABEL_12:
            swift_bridgeObjectRelease();
            if (v119) {
              swift_bridgeObjectRelease();
            }
            goto LABEL_4;
          }
        }
        else if (!v120)
        {
          goto LABEL_12;
        }
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
      unint64_t v54 = v53;
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v54 = 0;
    }
  }
  *(void *)(v122 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_recipientCertificates) = v54;
  if (v98 && v96)
  {
    uint64_t v72 = *(void (**)(char *, void, uint64_t))(v114 + 104);
    v72(v106, enum case for DIPCertUsage.accountAssessmentServerEncryption(_:), v116);
    uint64_t v73 = v90;
    uint64_t v74 = DIPOIDVerifier.verifyLeaf(fromBase64DER:forUsage:)();
    uint64_t v90 = v73;
    if (v73)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v114 + 8))(v106, v116);
LABEL_49:
      (*(void (**)(char *, void, uint64_t))(v117 + 104))(v119, enum case for DIPError.Code.internalError(_:), v118);
      swift_errorRetain();
      sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1000AF434((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v121 + 8))(v34, v99);
      (*(void (**)(char *, uint64_t))(v120 + 8))(v101, v102);
      LODWORD(v121) = 0;
      LODWORD(v120) = 1;
      goto LABEL_50;
    }
    uint64_t v83 = (void *)v74;
    uint64_t v84 = *(void (**)(char *, uint64_t))(v114 + 8);
    uint64_t v85 = v116;
    v84(v106, v116);
    swift_bridgeObjectRelease();
    v72(v107, enum case for DIPCertUsage.accountAssessmentServerSigning(_:), v85);
    uint64_t v86 = v90;
    DIPOIDVerifier.verifyLeaf(fromBase64DER:forUsage:)();
    uint64_t v90 = v86;
    if (v86)
    {
      swift_release();

      swift_bridgeObjectRelease();
      v84(v107, v116);
      goto LABEL_49;
    }
    v84(v107, v116);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v109 + 104))(v108, enum case for EncryptedMessageEntity.athena(_:), v110);
    uint64_t v87 = v113;
    RecipientEncryptionCertificate.init(keyAgreement:signing:recipient:)();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v111 + 56))(v87, 0, 1, v112);
    sub_1000BEA14(v87, v122 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_accountAssessmentCertificate, &qword_100722300);
  }
  else
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v111 + 56))(v122 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_accountAssessmentCertificate, 1, 1, v112);
  }
  unint64_t v113 = *(void *)(v122 + v33);
  if (v113 >> 62) {
    goto LABEL_53;
  }
  uint64_t v112 = *(void *)((v113 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  for (; v112; uint64_t v112 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v111 = v113 & 0xC000000000000001;
    LODWORD(v110) = enum case for DIPCertUsage.spInputValidationEncryption(_:);
    uint64_t v75 = v115;
    uint64_t v76 = (void (**)(char *, void, uint64_t))(v114 + 104);
    uint64_t v77 = (void (**)(char *, uint64_t))(v114 + 8);
    uint64_t v78 = 4;
    while (1)
    {
      if (v111)
      {
        uint64_t v79 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v79 = *(void *)(v113 + 8 * v78);
        swift_retain();
      }
      uint64_t v80 = v78 - 3;
      if (__OFADD__(v78 - 4, 1)) {
        break;
      }
      if (*(void *)(v79 + OBJC_IVAR____TtC8coreidvd22UserInputValidationURL_encryptionCertificate + 8))
      {
        (*v76)(v75, v110, v116);
        uint64_t v81 = v90;
        uint64_t v82 = (void *)DIPOIDVerifier.verifyLeaf(fromBase64DER:forUsage:)();
        uint64_t v90 = v81;
        if (v81)
        {
          (*v77)(v115, v116);
          (*(void (**)(char *, void, uint64_t))(v117 + 104))(v119, enum case for DIPError.Code.internalError(_:), v118);
          swift_errorRetain();
          sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
          type metadata accessor for DIPError();
          sub_1000AF434((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
          swift_errorRelease();
          uint64_t v27 = v122;
          swift_release();
          swift_bridgeObjectRelease_n();
          swift_release();
          (*(void (**)(char *, uint64_t))(v121 + 8))(v34, v99);
          (*(void (**)(char *, uint64_t))(v120 + 8))(v101, v102);
          LODWORD(v121) = 1;
          LODWORD(v120) = 1;
          goto LABEL_14;
        }

        (*v77)(v115, v116);
      }
      swift_release();
      ++v78;
      if (v80 == v112) {
        goto LABEL_54;
      }
    }
    __break(1u);
LABEL_53:
    swift_bridgeObjectRetain_n();
  }
LABEL_54:
  swift_release();
  swift_bridgeObjectRelease_n();
  sub_100030A10((uint64_t)v123, (uint64_t)v124);
  uint64_t v88 = v90;
  sub_1000768DC(v124);
  (*(void (**)(char *, uint64_t))(v121 + 8))(v34, v99);
  if (v88)
  {
    (*(void (**)(char *, uint64_t))(v120 + 8))(v101, v102);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v123);
    return v122;
  }
  else
  {
    uint64_t v89 = *(void (**)(char *, uint64_t))(v120 + 8);
    uint64_t v27 = v122;
    swift_retain();
    v89(v101, v102);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v123);
    swift_release();
  }
  return v27;
}

uint64_t sub_10007CD2C(uint64_t a1, Swift::String *a2, uint64_t a3)
{
  uint64_t v88 = a1;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  uint64_t v96 = *(void *)(v5 - 8);
  uint64_t v97 = v5;
  __chkstk_darwin(v5);
  uint64_t v98 = (char *)v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100007764(&qword_100720278);
  __chkstk_darwin(v7 - 8);
  uint64_t v85 = (uint64_t)v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for EncryptedMessageEntity();
  uint64_t v83 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v86 = (char *)v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100007764(&qword_100722300);
  __chkstk_darwin(v10 - 8);
  uint64_t v87 = (char *)v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = type metadata accessor for DIPCertUsage();
  uint64_t v99 = *(void *)(v105 - 8);
  uint64_t v12 = __chkstk_darwin(v105);
  uint64_t v91 = (char *)v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v77 - v14;
  uint64_t v16 = sub_100007764((uint64_t *)&unk_100722490);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v82 = (void *)((char *)v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v81 = (void *)((char *)v77 - v20);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v94 = (void *)((char *)v77 - v22);
  __chkstk_darwin(v21);
  uint64_t v24 = (void *)((char *)v77 - v23);
  uint64_t v25 = type metadata accessor for DIPOIDVerifier();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v90 = (char *)v77 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v30 = (char *)v77 - v29;
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
  uint64_t v92 = a3;
  uint64_t v102 = v32;
  uint64_t v89 = v31;
  ((void (*)(char *, uint64_t))v31)((char *)v77 - v29, a3);
  uint64_t v95 = v16;
  uint64_t v33 = *(int *)(v16 + 48);
  uint64_t v34 = (uint64_t)v24 + v33;
  uint64_t v35 = (uint64_t)a2 + v33;
  uint64_t countAndFlagsBits = a2->_countAndFlagsBits;
  object = a2->_object;
  uint64_t v101 = a2;
  *uint64_t v24 = countAndFlagsBits;
  v24[1] = (uint64_t)object;
  uint64_t v93 = v35;
  sub_1000B58C0(v35, v34);
  swift_bridgeObjectRetain();
  sub_1000B5924(v34);
  uint64_t v38 = v99;
  uint64_t v39 = *(void (**)(char *, void, uint64_t))(v99 + 104);
  v39(v15, enum case for DIPCertUsage.spEncryption(_:), v105);
  id v40 = v100;
  uint64_t v41 = (void *)DIPOIDVerifier.verifyLeaf(fromBase64DER:forUsage:)();
  if (v40)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v15, v105);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v30, v102);
    uint64_t v42 = v97;
    uint64_t v43 = v98;
    uint64_t v44 = v101;
    uint64_t v45 = v96;
    uint64_t v103 = 0;
    unint64_t v104 = 0xE000000000000000;
    _StringGuts.grow(_:)(53);
    v46._object = (void *)0x8000000100632B50;
    v46._uint64_t countAndFlagsBits = 0xD000000000000033;
    String.append(_:)(v46);
    String.append(_:)(*v44);
    (*(void (**)(char *, void, uint64_t))(v45 + 104))(v43, enum case for DIPError.Code.internalError(_:), v42);
    swift_errorRetain();
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000AF434((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return swift_errorRelease();
  }
  else
  {
    v77[1] = v26 + 16;
    uint64_t v78 = v39;
    id v100 = v41;
    swift_bridgeObjectRelease();
    uint64_t v79 = *(void (**)(char *, uint64_t))(v38 + 8);
    v79(v15, v105);
    char v48 = *(void (**)(char *, uint64_t))(v26 + 8);
    uint64_t v99 = v26 + 8;
    uint64_t v80 = v48;
    v48(v30, v102);
    unsigned int v49 = v94;
    uint64_t v50 = v95;
    uint64_t v51 = (uint64_t)v94 + *(int *)(v95 + 48);
    uint64_t v52 = v101->_object;
    *uint64_t v94 = v101->_countAndFlagsBits;
    v49[1] = (uint64_t)v52;
    uint64_t v53 = v93;
    sub_1000B58C0(v93, v51);
    uint64_t v54 = *(void *)(v51 + 24);
    swift_bridgeObjectRetain();
    sub_1000B5924(v51);
    uint64_t v55 = v50;
    if (v54)
    {
      uint64_t v56 = v90;
      v89(v90, v92, v102);
      uint64_t v57 = v91;
      v78(v91, enum case for DIPCertUsage.spSigning(_:), v105);
      uint64_t v58 = (void *)DIPOIDVerifier.verifyLeaf(fromBase64DER:forUsage:)();
      swift_bridgeObjectRelease();
      v79(v57, v105);
      v80(v56, v102);
    }
    else
    {
      uint64_t v58 = 0;
    }
    uint64_t v59 = *(int *)(v55 + 48);
    uint64_t v60 = v81;
    uint64_t v61 = (uint64_t)v81 + v59;
    uint64_t v63 = v101->_countAndFlagsBits;
    uint64_t v62 = (uint64_t)v101->_object;
    *uint64_t v81 = v101->_countAndFlagsBits;
    v60[1] = v62;
    uint64_t v64 = v53;
    uint64_t v105 = (uint64_t)v60 + v59;
    sub_1000B58C0(v53, v61);
    uint64_t v65 = *(int *)(v55 + 48);
    unint64_t v66 = v82;
    uint64_t v67 = (uint64_t)v82 + v65;
    *uint64_t v82 = v63;
    v66[1] = v62;
    sub_1000B58C0(v64, (uint64_t)v66 + v65);
    uint64_t v68 = type metadata accessor for EncryptionCertificateInStringFormat(0);
    uint64_t v69 = v85;
    sub_100048D6C(v67 + *(int *)(v68 + 24), v85, &qword_100720278);
    swift_bridgeObjectRetain();
    sub_1000B5924(v67);
    uint64_t v70 = v83;
    uint64_t v71 = v84;
    int v72 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v83 + 48))(v69, 1, v84);
    uint64_t v73 = (uint64_t)v87;
    if (v72 == 1)
    {
      (*(void (**)(char *, void, uint64_t))(v70 + 104))(v86, enum case for EncryptedMessageEntity.sp(_:), v71);
      sub_10000C6CC(v69, &qword_100720278);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v70 + 32))(v86, v69, v71);
    }
    id v74 = v58;
    id v75 = v100;
    RecipientEncryptionCertificate.init(keyAgreement:signing:recipient:)();
    uint64_t v76 = type metadata accessor for RecipientEncryptionCertificate();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56))(v73, 0, 1, v76);
    sub_10055F040(v73, v63, v62);

    return sub_1000B5924(v105);
  }
}

uint64_t sub_10007D6C8()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000C6CC(v0 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_accountAssessmentCertificate, &qword_100722300);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10007D7A4()
{
  sub_10007752C();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000C6CC(v0 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_accountAssessmentCertificate, &qword_100722300);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10007D87C()
{
  return sub_10007D894((void (*)(void))sub_10007D7A4);
}

uint64_t sub_10007D894(void (*a1)(void))
{
  a1();

  return swift_deallocClassInstance();
}

uint64_t sub_10007D8F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)a2 = a1;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)a2 && *(void *)(*(void *)a2 + 16))
  {
    defaultLogger()();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "got PhoneNumber", v11, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

uint64_t sub_10007DA54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 408) = a8;
  *(void *)(v8 + 416) = v14;
  *(void *)(v8 + 392) = a6;
  *(void *)(v8 + 400) = a7;
  *(void *)(v8 + 376) = a4;
  *(void *)(v8 + 384) = a5;
  *(void *)(v8 + 360) = a1;
  *(void *)(v8 + 368) = a3;
  uint64_t v10 = type metadata accessor for DIPError.Code();
  *(void *)(v8 + 424) = v10;
  *(void *)(v8 + 432) = *(void *)(v10 - 8);
  *(void *)(v8 + 440) = swift_task_alloc();
  *(_OWORD *)(v8 + 448) = *(_OWORD *)a2;
  uint64_t v11 = *(void *)(a2 + 24);
  *(void *)(v8 + 464) = *(void *)(a2 + 16);
  *(void *)(v8 + 472) = v11;
  *(_OWORD *)(v8 + 480) = *(_OWORD *)(a2 + 32);
  *(void *)(v8 + 496) = *(void *)(a2 + 48);
  return _swift_task_switch(sub_10007DB4C, 0, 0);
}

uint64_t sub_10007DB4C()
{
  uint64_t v148 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = v0[61];
  v0[44] = &_swiftEmptyArrayStorage;
  unint64_t v3 = sub_10015D3A4((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v4 = *(void *)(v2 + 16);
  v0[63] = v4;
  uint64_t v144 = v0;
  unint64_t v141 = v3;
  if (!v4)
  {
    uint64_t v139 = (uint64_t)(v0 + 41);
    uint64_t v140 = (uint64_t)(v0 + 43);
    uint64_t v28 = v0[62];
    if (v28)
    {
      uint64_t v29 = *(void *)(v28 + 16);
      if (v29)
      {
        uint64_t v30 = v1 + 2;
        swift_bridgeObjectRetain();
        long long v31 = *(_OWORD *)(v28 + 48);
        *((_OWORD *)v1 + 1) = *(_OWORD *)(v28 + 32);
        *((_OWORD *)v1 + 2) = v31;
        long long v32 = *(_OWORD *)(v28 + 64);
        long long v33 = *(_OWORD *)(v28 + 80);
        long long v34 = *(_OWORD *)(v28 + 112);
        *((_OWORD *)v1 + 5) = *(_OWORD *)(v28 + 96);
        *((_OWORD *)v1 + 6) = v34;
        *((_OWORD *)v1 + 3) = v32;
        *((_OWORD *)v1 + 4) = v33;
        long long v35 = *(_OWORD *)(v28 + 128);
        long long v36 = *(_OWORD *)(v28 + 144);
        long long v37 = *(_OWORD *)(v28 + 176);
        *((_OWORD *)v1 + 9) = *(_OWORD *)(v28 + 160);
        *((_OWORD *)v1 + 10) = v37;
        *((_OWORD *)v1 + 7) = v35;
        *((_OWORD *)v1 + 8) = v36;
        uint64_t v38 = v29 - 1;
        for (uint64_t i = 192; ; i += 160)
        {
          uint64_t v40 = v144[51];
          uint64_t v41 = (void *)v144[52];
          long long v42 = *((_OWORD *)v1 + 8);
          v147[6] = *((_OWORD *)v1 + 7);
          v147[7] = v42;
          long long v43 = *((_OWORD *)v1 + 10);
          v147[8] = *((_OWORD *)v1 + 9);
          v147[9] = v43;
          long long v44 = *((_OWORD *)v1 + 4);
          v147[2] = *((_OWORD *)v1 + 3);
          v147[3] = v44;
          long long v45 = *((_OWORD *)v1 + 6);
          v147[4] = *((_OWORD *)v1 + 5);
          v147[5] = v45;
          long long v46 = *((_OWORD *)v1 + 2);
          v147[0] = *v30;
          v147[1] = v46;
          sub_1000AAE20(v1 + 2);
          sub_10007FA54(v147, v40, v41, v1 + 44);
          sub_1000AAEF8(v1 + 2);
          if (!v38) {
            break;
          }
          long long v47 = *(_OWORD *)(v28 + i + 16);
          *uint64_t v30 = *(_OWORD *)(v28 + i);
          *((_OWORD *)v1 + 2) = v47;
          long long v48 = *(_OWORD *)(v28 + i + 32);
          long long v49 = *(_OWORD *)(v28 + i + 48);
          long long v50 = *(_OWORD *)(v28 + i + 80);
          *((_OWORD *)v1 + 5) = *(_OWORD *)(v28 + i + 64);
          *((_OWORD *)v1 + 6) = v50;
          *((_OWORD *)v1 + 3) = v48;
          *((_OWORD *)v1 + 4) = v49;
          long long v51 = *(_OWORD *)(v28 + i + 96);
          long long v52 = *(_OWORD *)(v28 + i + 112);
          long long v53 = *(_OWORD *)(v28 + i + 144);
          *((_OWORD *)v1 + 9) = *(_OWORD *)(v28 + i + 128);
          *((_OWORD *)v1 + 10) = v53;
          *((_OWORD *)v1 + 7) = v51;
          *((_OWORD *)v1 + 8) = v52;
          --v38;
        }
        swift_bridgeObjectRelease();
        uint64_t v1 = v144;
      }
    }
    unint64_t v138 = v1 + 42;
    uint64_t v66 = v1[50];
    uint64_t v67 = (void *)sub_10015CF20((uint64_t)&_swiftEmptyArrayStorage);
    uint64_t v142 = v66 + 64;
    uint64_t v68 = -1;
    uint64_t v69 = -1 << *(unsigned char *)(v66 + 32);
    if (-v69 < 64) {
      uint64_t v68 = ~(-1 << -(char)v69);
    }
    unint64_t v70 = v68 & *(void *)(v66 + 64);
    int64_t v143 = (unint64_t)(63 - v69) >> 6;
    uint64_t v145 = v66;
    uint64_t v71 = swift_bridgeObjectRetain();
    for (int64_t j = 0; ; int64_t j = v146)
    {
      if (v70)
      {
        unint64_t v76 = __clz(__rbit64(v70));
        v70 &= v70 - 1;
        int64_t v146 = j;
        unint64_t v77 = v76 | (j << 6);
      }
      else
      {
        BOOL v78 = __OFADD__(j, 1);
        int64_t v79 = j + 1;
        if (v78) {
          goto LABEL_89;
        }
        if (v79 >= v143)
        {
LABEL_53:
          uint64_t v97 = v144[51];
          swift_release();
          sub_1000BEA14(v97 + 408, v140, &qword_100722398);
          sub_1000BEA14(v140, v139, &qword_100722398);
          uint64_t v98 = v144[41];
          if (v98 && *(void *)(v98 + 16))
          {
            uint64_t v99 = v144[57];
            uint64_t v100 = v144[58];
            swift_bridgeObjectRetain();
            unint64_t v101 = sub_100590548(v99, v100);
            if (v102)
            {
              uint64_t v103 = (uint64_t *)(*(void *)(v98 + 56) + 16 * v101);
              uint64_t v105 = *v103;
              uint64_t v104 = v103[1];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
LABEL_77:
              uint64_t v120 = sub_100080700(v105, v104, (uint64_t)v67);
              uint64_t v122 = v121;
              swift_bridgeObjectRelease();
              sub_1000BEA14(v140, (uint64_t)v138, &qword_100722398);
              uint64_t v123 = *v138;
              if (*v138 && *(void *)(v123 + 16))
              {
                uint64_t v124 = v144[59];
                uint64_t v125 = v144[60];
                swift_bridgeObjectRetain();
                unint64_t v126 = sub_100590548(v124, v125);
                if (v127)
                {
                  uint64_t v128 = (uint64_t *)(*(void *)(v123 + 56) + 16 * v126);
                  uint64_t v130 = *v128;
                  uint64_t v129 = v128[1];
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRelease();
LABEL_83:
                  uint64_t v132 = sub_100080700(v130, v129, (uint64_t)v67);
                  uint64_t v134 = v133;
                  uint64_t v135 = v144[56];
                  id v136 = (id *)v144[45];
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  sub_100025C28(0, &qword_1007225B0);
                  uint64_t v137 = v144[44];
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  *id v136 = sub_100080ECC(v137, v120, v122, v132, v134, v135);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_task_dealloc();
                  uint64_t v131 = (uint64_t (*)(void))v144[1];
                  goto LABEL_84;
                }
                swift_bridgeObjectRelease();
              }
              uint64_t v130 = v144[59];
              uint64_t v129 = v144[60];
              swift_bridgeObjectRetain();
              goto LABEL_83;
            }
            swift_bridgeObjectRelease();
          }
          uint64_t v105 = v144[57];
          uint64_t v104 = v144[58];
          swift_bridgeObjectRetain();
          goto LABEL_77;
        }
        unint64_t v80 = *(void *)(v142 + 8 * v79);
        if (!v80)
        {
          int64_t v81 = v79 + 1;
          if (v79 + 1 >= v143) {
            goto LABEL_53;
          }
          unint64_t v80 = *(void *)(v142 + 8 * v81);
          if (!v80)
          {
            int64_t v81 = v79 + 2;
            if (v79 + 2 >= v143) {
              goto LABEL_53;
            }
            unint64_t v80 = *(void *)(v142 + 8 * v81);
            if (!v80)
            {
              int64_t v81 = v79 + 3;
              if (v79 + 3 >= v143) {
                goto LABEL_53;
              }
              unint64_t v80 = *(void *)(v142 + 8 * v81);
              if (!v80)
              {
                int64_t v81 = v79 + 4;
                if (v79 + 4 >= v143) {
                  goto LABEL_53;
                }
                unint64_t v80 = *(void *)(v142 + 8 * v81);
                if (!v80)
                {
                  int64_t v81 = v79 + 5;
                  if (v79 + 5 >= v143) {
                    goto LABEL_53;
                  }
                  unint64_t v80 = *(void *)(v142 + 8 * v81);
                  if (!v80)
                  {
                    while (1)
                    {
                      int64_t v79 = v81 + 1;
                      if (__OFADD__(v81, 1)) {
                        goto LABEL_90;
                      }
                      if (v79 >= v143) {
                        goto LABEL_53;
                      }
                      unint64_t v80 = *(void *)(v142 + 8 * v79);
                      ++v81;
                      if (v80) {
                        goto LABEL_37;
                      }
                    }
                  }
                }
              }
            }
          }
          int64_t v79 = v81;
        }
LABEL_37:
        unint64_t v70 = (v80 - 1) & v80;
        int64_t v146 = v79;
        unint64_t v77 = __clz(__rbit64(v80)) + (v79 << 6);
      }
      uint64_t v82 = (uint64_t *)(*(void *)(v145 + 48) + 16 * v77);
      uint64_t v83 = *v82;
      uint64_t v84 = v82[1];
      uint64_t v85 = (uint64_t *)(*(void *)(v145 + 56) + 32 * v77);
      uint64_t v86 = *v85;
      uint64_t v87 = v85[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&v147[0] = v67;
      unint64_t v89 = sub_100590548(v83, v84);
      uint64_t v90 = v67[2];
      BOOL v91 = (v72 & 1) == 0;
      uint64_t v71 = v90 + v91;
      if (__OFADD__(v90, v91))
      {
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
        return _swift_task_switch(v71, v72, v73);
      }
      char v92 = v72;
      if (v67[3] >= v71)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          if (v72) {
            goto LABEL_19;
          }
        }
        else
        {
          uint64_t v71 = (uint64_t)sub_10016A364();
          uint64_t v67 = *(void **)&v147[0];
          if (v92) {
            goto LABEL_19;
          }
        }
      }
      else
      {
        sub_100164294(v71, isUniquelyReferenced_nonNull_native);
        uint64_t v67 = *(void **)&v147[0];
        uint64_t v71 = sub_100590548(v83, v84);
        if ((v92 & 1) != (v72 & 1))
        {
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        }
        unint64_t v89 = v71;
        if (v92)
        {
LABEL_19:
          id v75 = (void *)(v67[7] + 16 * v89);
          swift_bridgeObjectRelease();
          *id v75 = v86;
          v75[1] = v87;
          goto LABEL_20;
        }
      }
      v67[(v89 >> 6) + 8] |= 1 << v89;
      uint64_t v93 = (uint64_t *)(v67[6] + 16 * v89);
      *uint64_t v93 = v83;
      v93[1] = v84;
      uint64_t v94 = (void *)(v67[7] + 16 * v89);
      *uint64_t v94 = v86;
      v94[1] = v87;
      uint64_t v95 = v67[2];
      BOOL v78 = __OFADD__(v95, 1);
      uint64_t v96 = v95 + 1;
      if (v78) {
        goto LABEL_88;
      }
      v67[2] = v96;
      swift_bridgeObjectRetain();
LABEL_20:
      swift_bridgeObjectRelease();
      uint64_t v71 = swift_bridgeObjectRelease();
    }
  }
  uint64_t v5 = v0[61];
  uint64_t v7 = *(void *)(v5 + 32);
  uint64_t v6 = *(void **)(v5 + 40);
  uint64_t v8 = *(void *)(v1[46] + 16);
  swift_bridgeObjectRetain();
  if (!v8) {
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v9 = sub_100590548(v7, (uint64_t)v6);
  if ((v10 & 1) == 0)
  {
    uint64_t v1 = v144;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_14:
    uint64_t v54 = v1[54];
    uint64_t v55 = v1[55];
    uint64_t v56 = v1[53];
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    *(void *)&v147[0] = 0xD000000000000016;
    *((void *)&v147[0] + 1) = 0x8000000100632DB0;
    v57._uint64_t countAndFlagsBits = v7;
    v57._object = v6;
    String.append(_:)(v57);
    v58._uint64_t countAndFlagsBits = 0xD000000000000013;
    v58._object = (void *)0x8000000100632DD0;
    String.append(_:)(v58);
    (*(void (**)(uint64_t, void, uint64_t))(v54 + 104))(v55, enum case for DIPError.Code.unknownAttribute(_:), v56);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v59 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v60 = (*(unsigned __int8 *)(*(void *)v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v59 + 80);
    uint64_t v61 = swift_allocObject();
    *(_OWORD *)(v61 + 16) = xmmword_100610730;
    unint64_t v62 = v61 + v60;
    uint64_t v63 = (uint64_t *)(v62 + v59[14]);
    uint64_t v64 = enum case for DIPError.PropertyKey.attributeID(_:);
    uint64_t v65 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 104))(v62, v64, v65);
    v63[3] = (uint64_t)&type metadata for String;
    *uint64_t v63 = v7;
    v63[1] = (uint64_t)v6;
    sub_10015C504(v61);
    type metadata accessor for DIPError();
    sub_1000AF434((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v131 = (uint64_t (*)(void))v1[1];
LABEL_84:
    return v131();
  }
  uint64_t v11 = (uint64_t)(v144 + 22);
  uint64_t v12 = v144[50];
  uint64_t v13 = v144[46];
  v144[65] = 1;
  v144[64] = v141;
  uint64_t v14 = *(void *)(v13 + 56) + 152 * v9;
  long long v15 = *(_OWORD *)(v14 + 16);
  *((_OWORD *)v144 + 11) = *(_OWORD *)v14;
  *((_OWORD *)v144 + 12) = v15;
  long long v16 = *(_OWORD *)(v14 + 80);
  long long v18 = *(_OWORD *)(v14 + 32);
  long long v17 = *(_OWORD *)(v14 + 48);
  *((_OWORD *)v144 + 15) = *(_OWORD *)(v14 + 64);
  *((_OWORD *)v144 + 16) = v16;
  *((_OWORD *)v144 + 13) = v18;
  *((_OWORD *)v144 + 14) = v17;
  long long v19 = *(_OWORD *)(v14 + 96);
  long long v20 = *(_OWORD *)(v14 + 112);
  long long v21 = *(_OWORD *)(v14 + 128);
  v144[40] = *(void *)(v14 + 144);
  *((_OWORD *)v144 + 18) = v20;
  *((_OWORD *)v144 + 19) = v21;
  *((_OWORD *)v144 + 17) = v19;
  sub_1000B53AC((uint64_t)(v144 + 22));
  swift_bridgeObjectRelease();
  if (!*(void *)(v12 + 16))
  {
    uint64_t v27 = 0;
    uint64_t v26 = 0;
LABEL_65:
    uint64_t v110 = 0;
    uint64_t v111 = 0;
    goto LABEL_66;
  }
  swift_bridgeObjectRetain();
  unint64_t v22 = sub_100590548(v7, (uint64_t)v6);
  uint64_t v23 = v144[50];
  if (v24)
  {
    uint64_t v25 = (uint64_t *)(*(void *)(v23 + 56) + 32 * v22);
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v26 = 0;
    uint64_t v27 = 0;
  }
  swift_bridgeObjectRelease();
  if (!*(void *)(v23 + 16)) {
    goto LABEL_65;
  }
  unint64_t v107 = sub_100590548(v7, (uint64_t)v6);
  if ((v108 & 1) == 0) {
    goto LABEL_65;
  }
  uint64_t v109 = *(void *)(v144[50] + 56) + 32 * v107;
  uint64_t v110 = *(void *)(v109 + 16);
  uint64_t v111 = *(void *)(v109 + 24);
  swift_bridgeObjectRetain();
LABEL_66:
  v144[67] = v111;
  v144[66] = v27;
  swift_bridgeObjectRelease();
  uint64_t v112 = v144[22];
  uint64_t v113 = v144[23];
  v144[68] = v112;
  v144[69] = v113;
  if (v112 == 0xD000000000000010 && v113 == 0x800000010062A670
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v114 = sub_100025C28(0, &qword_1007225E0);
    sub_1000B53AC(v11);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v115 = swift_task_alloc();
    v144[70] = v115;
    *(void *)uint64_t v115 = v144;
    *(void *)(v115 + 8) = sub_10007E7FC;
    uint64_t v116 = v144[47];
    long long v117 = *((_OWORD *)v144 + 24);
    *(void *)(v115 + 536) = v114;
    *(_OWORD *)(v115 + 520) = v117;
    *(void *)(v115 + 504) = v11;
    *(void *)(v115 + 512) = v116;
    uint64_t v71 = (uint64_t)sub_100081088;
    uint64_t v72 = 0;
    uint64_t v73 = 0;
    return _swift_task_switch(v71, v72, v73);
  }
  uint64_t v118 = (void *)swift_task_alloc();
  v144[71] = v118;
  *uint64_t v118 = v144;
  v118[1] = sub_10007E964;
  uint64_t v119 = v144[49];
  return sub_1000816A4(v11, v26, v27, v110, v111, v119);
}

uint64_t sub_10007E7FC(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  swift_task_dealloc();
  if (v1)
  {
    v4[74] = v1;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000B5454((uint64_t)(v4 + 22));
    uint64_t v5 = sub_10007F9DC;
  }
  else
  {
    v4[72] = 0;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v4[73] = a1;
    uint64_t v5 = sub_10007EACC;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10007E964(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  swift_task_dealloc();
  if (v1)
  {
    v4[74] = v1;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000B5454((uint64_t)(v4 + 22));
    uint64_t v5 = sub_10007F9DC;
  }
  else
  {
    v4[72] = 0;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v4[73] = a1;
    uint64_t v5 = sub_10007EACC;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10007EACC()
{
  uint64_t v168 = v0;
  uint64_t v2 = v0 + 176;
  unint64_t v3 = (void *)(v0 + 352);
  id v4 = *(id *)(v0 + 584);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  uint64_t v164 = v0;
  if (*(void *)((*(void *)(v0 + 352) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 352) & 0xFFFFFFFFFFFFFF8)
                                                                                      + 0x18) >> 1)
    goto LABEL_108;
  while (1)
  {
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    unint64_t v5 = *(void *)(v164 + 224);
    if (v5)
    {
      unint64_t v6 = *(void *)(v164 + 216);
      uint64_t v7 = *(void *)(v164 + 512);
      uint64_t v8 = *(void *)(v7 + 16);
      swift_bridgeObjectRetain();
      if (v8)
      {
        swift_bridgeObjectRetain();
        unint64_t v9 = sub_100590548(v6, v5);
        if (v10)
        {
          uint64_t v1 = *(void *)(*(void *)(*(void *)(v164 + 512) + 56) + 8 * v9);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            goto LABEL_111;
          }
          goto LABEL_6;
        }
        swift_bridgeObjectRelease();
        unint64_t v22 = (void *)v164;
        uint64_t v7 = *(void *)(v164 + 512);
      }
      else
      {
        unint64_t v22 = (void *)v164;
      }
      uint64_t v23 = (void *)v22[73];
      uint64_t v24 = v22[69];
      uint64_t v25 = v22[68];
      sub_100007764(&qword_100730CD0);
      uint64_t v1 = swift_allocObject();
      *(_OWORD *)(v1 + 16) = xmmword_100610730;
      *(void *)(v1 + 32) = v25;
      *(void *)(v1 + 40) = v24;
      swift_bridgeObjectRetain();
      sub_1000B5454(v2);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&v167[0] = v7;
      sub_100562A90(v1, v6, v5, isUniquelyReferenced_nonNull_native);
      uint64_t v20 = *(void *)&v167[0];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

LABEL_13:
      long long v21 = (void *)v164;
    }
    else
    {

      sub_1000B5454(v2);
      long long v21 = (void *)v164;
      uint64_t v20 = *(void *)(v164 + 512);
    }
    unint64_t v6 = v21[65];
    uint64_t v27 = v21[61];
    if (v6 != v21[63]) {
      break;
    }
    uint64_t v159 = (uint64_t)(v21 + 41);
    uint64_t v160 = (uint64_t)(v21 + 43);
    swift_bridgeObjectRelease();
    uint64_t v28 = v164;
    uint64_t v29 = *(void *)(v164 + 576);
    uint64_t v30 = *(void *)(v164 + 496);
    if (v30 && (uint64_t v31 = *(void *)(v30 + 16)) != 0)
    {
      uint64_t v1 = v164 + 16;
      swift_bridgeObjectRetain();
      long long v32 = *(_OWORD *)(v30 + 48);
      *(_OWORD *)(v164 + 16) = *(_OWORD *)(v30 + 32);
      *(_OWORD *)(v164 + 32) = v32;
      long long v33 = *(_OWORD *)(v30 + 64);
      long long v34 = *(_OWORD *)(v30 + 80);
      long long v35 = *(_OWORD *)(v30 + 112);
      *(_OWORD *)(v164 + 80) = *(_OWORD *)(v30 + 96);
      *(_OWORD *)(v164 + 96) = v35;
      *(_OWORD *)(v164 + 48) = v33;
      *(_OWORD *)(v164 + 64) = v34;
      long long v36 = *(_OWORD *)(v30 + 128);
      long long v37 = *(_OWORD *)(v30 + 144);
      long long v38 = *(_OWORD *)(v30 + 176);
      *(_OWORD *)(v164 + 144) = *(_OWORD *)(v30 + 160);
      *(_OWORD *)(v164 + 160) = v38;
      *(_OWORD *)(v164 + 112) = v36;
      *(_OWORD *)(v164 + 128) = v37;
      unint64_t v5 = v31 - 1;
      for (uint64_t i = 192; ; i += 160)
      {
        unint64_t v6 = *(void *)(v164 + 408);
        uint64_t v40 = *(void **)(v164 + 416);
        long long v41 = *(_OWORD *)(v164 + 128);
        v167[6] = *(_OWORD *)(v164 + 112);
        v167[7] = v41;
        long long v42 = *(_OWORD *)(v164 + 160);
        v167[8] = *(_OWORD *)(v164 + 144);
        v167[9] = v42;
        long long v43 = *(_OWORD *)(v164 + 64);
        v167[2] = *(_OWORD *)(v164 + 48);
        v167[3] = v43;
        long long v44 = *(_OWORD *)(v164 + 96);
        v167[4] = *(_OWORD *)(v164 + 80);
        v167[5] = v44;
        long long v45 = *(_OWORD *)(v164 + 32);
        v167[0] = *(_OWORD *)v1;
        v167[1] = v45;
        sub_1000AAE20((void *)v1);
        sub_10007FA54(v167, v6, v40, v3);
        sub_1000AAEF8((void *)v1);
        if (!v5) {
          break;
        }
        long long v46 = *(_OWORD *)(v30 + i + 16);
        *(_OWORD *)uint64_t v1 = *(_OWORD *)(v30 + i);
        *(_OWORD *)(v164 + 32) = v46;
        long long v47 = *(_OWORD *)(v30 + i + 32);
        long long v48 = *(_OWORD *)(v30 + i + 48);
        long long v49 = *(_OWORD *)(v30 + i + 80);
        *(_OWORD *)(v164 + 80) = *(_OWORD *)(v30 + i + 64);
        *(_OWORD *)(v164 + 96) = v49;
        *(_OWORD *)(v164 + 48) = v47;
        *(_OWORD *)(v164 + 64) = v48;
        long long v50 = *(_OWORD *)(v30 + i + 96);
        long long v51 = *(_OWORD *)(v30 + i + 112);
        long long v52 = *(_OWORD *)(v30 + i + 144);
        *(_OWORD *)(v164 + 144) = *(_OWORD *)(v30 + i + 128);
        *(_OWORD *)(v164 + 160) = v52;
        *(_OWORD *)(v164 + 112) = v50;
        *(_OWORD *)(v164 + 128) = v51;
        --v5;
      }
      uint64_t v163 = v29;
      swift_bridgeObjectRelease();
      uint64_t v28 = v164;
    }
    else
    {
      uint64_t v163 = *(void *)(v164 + 576);
    }
    unint64_t v158 = (uint64_t *)(v28 + 336);
    uint64_t v75 = *(void *)(v28 + 400);
    unint64_t v3 = (void *)sub_10015CF20((uint64_t)&_swiftEmptyArrayStorage);
    uint64_t v161 = v75 + 64;
    uint64_t v76 = -1;
    uint64_t v77 = -1 << *(unsigned char *)(v75 + 32);
    if (-v77 < 64) {
      uint64_t v76 = ~(-1 << -(char)v77);
    }
    uint64_t v2 = v76 & *(void *)(v75 + 64);
    int64_t v162 = (unint64_t)(63 - v77) >> 6;
    uint64_t v165 = v75;
    swift_bridgeObjectRetain();
    for (int64_t j = 0; ; int64_t j = v166)
    {
      if (v2)
      {
        unint64_t v80 = __clz(__rbit64(v2));
        v2 &= v2 - 1;
        int64_t v166 = j;
        unint64_t v81 = v80 | (j << 6);
      }
      else
      {
        BOOL v82 = __OFADD__(j, 1);
        int64_t v83 = j + 1;
        if (v82) {
          goto LABEL_107;
        }
        uint64_t v2 = v163;
        if (v83 >= v162)
        {
LABEL_65:
          uint64_t v102 = *(void *)(v164 + 408);
          swift_release();
          sub_1000BEA14(v102 + 408, v160, &qword_100722398);
          sub_1000BEA14(v160, v159, &qword_100722398);
          uint64_t v103 = v164;
          uint64_t v104 = *(void *)(v164 + 328);
          if (v104 && *(void *)(v104 + 16))
          {
            uint64_t v105 = *(void *)(v164 + 456);
            uint64_t v106 = *(void *)(v164 + 464);
            swift_bridgeObjectRetain();
            unint64_t v107 = sub_100590548(v105, v106);
            if (v108)
            {
              uint64_t v109 = (uint64_t *)(*(void *)(v104 + 56) + 16 * v107);
              uint64_t v111 = *v109;
              uint64_t v110 = v109[1];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              uint64_t v2 = v163;
              goto LABEL_77;
            }
            swift_bridgeObjectRelease();
            uint64_t v103 = v164;
            uint64_t v2 = v163;
          }
          uint64_t v111 = *(void *)(v103 + 456);
          uint64_t v110 = *(void *)(v103 + 464);
          swift_bridgeObjectRetain();
LABEL_77:
          uint64_t v125 = sub_100080700(v111, v110, (uint64_t)v3);
          if (v2)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            long long v21 = (void *)v164;
            goto LABEL_101;
          }
          uint64_t v127 = v125;
          uint64_t v128 = v126;
          swift_bridgeObjectRelease();
          sub_1000BEA14(v160, (uint64_t)v158, &qword_100722398);
          uint64_t v129 = *v158;
          if (*v158 && *(void *)(v129 + 16))
          {
            uint64_t v130 = *(void *)(v164 + 472);
            uint64_t v131 = *(void *)(v164 + 480);
            swift_bridgeObjectRetain();
            unint64_t v132 = sub_100590548(v130, v131);
            if (v133)
            {
              uint64_t v134 = (uint64_t *)(*(void *)(v129 + 56) + 16 * v132);
              uint64_t v136 = *v134;
              uint64_t v135 = v134[1];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
LABEL_100:
              uint64_t v150 = sub_100080700(v136, v135, (uint64_t)v3);
              uint64_t v152 = v151;
              uint64_t v153 = *(void *)(v164 + 448);
              os_log_type_t v154 = *(id **)(v164 + 360);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_100025C28(0, &qword_1007225B0);
              uint64_t v155 = *(void *)(v164 + 352);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              *os_log_type_t v154 = sub_100080ECC(v155, v127, v128, v150, v152, v153);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_task_dealloc();
              uint64_t v156 = *(uint64_t (**)(void))(v164 + 8);
              goto LABEL_102;
            }
            swift_bridgeObjectRelease();
          }
          uint64_t v136 = *(void *)(v164 + 472);
          uint64_t v135 = *(void *)(v164 + 480);
          swift_bridgeObjectRetain();
          goto LABEL_100;
        }
        unint64_t v84 = *(void *)(v161 + 8 * v83);
        if (!v84)
        {
          int64_t v85 = v83 + 1;
          if (v83 + 1 >= v162) {
            goto LABEL_65;
          }
          unint64_t v84 = *(void *)(v161 + 8 * v85);
          if (!v84)
          {
            int64_t v85 = v83 + 2;
            if (v83 + 2 >= v162) {
              goto LABEL_65;
            }
            unint64_t v84 = *(void *)(v161 + 8 * v85);
            if (!v84)
            {
              int64_t v85 = v83 + 3;
              if (v83 + 3 >= v162) {
                goto LABEL_65;
              }
              unint64_t v84 = *(void *)(v161 + 8 * v85);
              if (!v84)
              {
                int64_t v85 = v83 + 4;
                if (v83 + 4 >= v162) {
                  goto LABEL_65;
                }
                unint64_t v84 = *(void *)(v161 + 8 * v85);
                if (!v84)
                {
                  int64_t v85 = v83 + 5;
                  if (v83 + 5 >= v162) {
                    goto LABEL_65;
                  }
                  unint64_t v84 = *(void *)(v161 + 8 * v85);
                  if (!v84)
                  {
                    while (1)
                    {
                      int64_t v83 = v85 + 1;
                      if (__OFADD__(v85, 1)) {
                        break;
                      }
                      if (v83 >= v162) {
                        goto LABEL_65;
                      }
                      unint64_t v84 = *(void *)(v161 + 8 * v83);
                      ++v85;
                      if (v84) {
                        goto LABEL_49;
                      }
                    }
LABEL_110:
                    __break(1u);
LABEL_111:
                    uint64_t v1 = (uint64_t)sub_10010F3C4(0, *(void *)(v1 + 16) + 1, 1, (char *)v1);
LABEL_6:
                    unint64_t v12 = *(void *)(v1 + 16);
                    unint64_t v11 = *(void *)(v1 + 24);
                    uint64_t v13 = v164;
                    if (v12 >= v11 >> 1)
                    {
                      uint64_t v157 = sub_10010F3C4((char *)(v11 > 1), v12 + 1, 1, (char *)v1);
                      uint64_t v13 = v164;
                      uint64_t v1 = (uint64_t)v157;
                    }
                    uint64_t v14 = *(void **)(v13 + 584);
                    uint64_t v15 = *(void *)(v13 + 552);
                    uint64_t v16 = *(void *)(v164 + 544);
                    uint64_t v17 = *(void *)(v164 + 512);
                    *(void *)(v1 + 16) = v12 + 1;
                    uint64_t v18 = v1 + 16 * v12;
                    *(void *)(v18 + 32) = v16;
                    *(void *)(v18 + 40) = v15;
                    sub_1000B5454(v2);
                    char v19 = swift_isUniquelyReferenced_nonNull_native();
                    *(void *)&v167[0] = v17;
                    sub_100562A90(v1, v6, v5, v19);
                    uint64_t v20 = *(void *)&v167[0];
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();

                    goto LABEL_13;
                  }
                }
              }
            }
          }
          int64_t v83 = v85;
        }
LABEL_49:
        uint64_t v2 = (v84 - 1) & v84;
        int64_t v166 = v83;
        unint64_t v81 = __clz(__rbit64(v84)) + (v83 << 6);
      }
      uint64_t v86 = (uint64_t *)(*(void *)(v165 + 48) + 16 * v81);
      uint64_t v87 = *v86;
      uint64_t v88 = v86[1];
      unint64_t v89 = (uint64_t *)(*(void *)(v165 + 56) + 32 * v81);
      uint64_t v90 = *v89;
      uint64_t v1 = v89[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v91 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&v167[0] = v3;
      unint64_t v5 = sub_100590548(v87, v88);
      uint64_t v93 = v3[2];
      BOOL v94 = (v92 & 1) == 0;
      uint64_t v95 = v93 + v94;
      if (__OFADD__(v93, v94)) {
        break;
      }
      unint64_t v6 = v92;
      if (v3[3] >= v95)
      {
        if (v91)
        {
          if (v92) {
            goto LABEL_31;
          }
        }
        else
        {
          sub_10016A364();
          unint64_t v3 = *(void **)&v167[0];
          if (v6) {
            goto LABEL_31;
          }
        }
      }
      else
      {
        sub_100164294(v95, v91);
        unint64_t v3 = *(void **)&v167[0];
        unint64_t v96 = sub_100590548(v87, v88);
        if ((v6 & 1) != (v97 & 1))
        {
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        }
        unint64_t v5 = v96;
        if (v6)
        {
LABEL_31:
          int64_t v79 = (void *)(v3[7] + 16 * v5);
          swift_bridgeObjectRelease();
          *int64_t v79 = v90;
          v79[1] = v1;
          goto LABEL_32;
        }
      }
      v3[(v5 >> 6) + 8] |= 1 << v5;
      uint64_t v98 = (uint64_t *)(v3[6] + 16 * v5);
      *uint64_t v98 = v87;
      v98[1] = v88;
      uint64_t v99 = (void *)(v3[7] + 16 * v5);
      *uint64_t v99 = v90;
      v99[1] = v1;
      uint64_t v100 = v3[2];
      BOOL v82 = __OFADD__(v100, 1);
      uint64_t v101 = v100 + 1;
      if (v82) {
        goto LABEL_106;
      }
      v3[2] = v101;
      swift_bridgeObjectRetain();
LABEL_32:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  if (v6 >= *(void *)(v27 + 16))
  {
    __break(1u);
    goto LABEL_110;
  }
  uint64_t v53 = v27 + 16 * v6;
  uint64_t v55 = *(void *)(v53 + 32);
  uint64_t v54 = *(void **)(v53 + 40);
  uint64_t v56 = *(void *)(v21[46] + 16);
  swift_bridgeObjectRetain();
  if (!v56)
  {
LABEL_73:
    swift_bridgeObjectRelease();
    uint64_t v113 = v21[54];
    uint64_t v114 = v21[55];
    uint64_t v115 = v21[53];
    *(void *)&v167[0] = 0;
    *((void *)&v167[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    *(void *)&v167[0] = 0xD000000000000016;
    *((void *)&v167[0] + 1) = 0x8000000100632DB0;
    v116._uint64_t countAndFlagsBits = v55;
    v116._object = v54;
    String.append(_:)(v116);
    v117._uint64_t countAndFlagsBits = 0xD000000000000013;
    v117._object = (void *)0x8000000100632DD0;
    String.append(_:)(v117);
    (*(void (**)(uint64_t, void, uint64_t))(v113 + 104))(v114, enum case for DIPError.Code.unknownAttribute(_:), v115);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v118 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v119 = (*(unsigned __int8 *)(*(void *)v118 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v118 + 80);
    uint64_t v120 = swift_allocObject();
    *(_OWORD *)(v120 + 16) = xmmword_100610730;
    unint64_t v121 = v120 + v119;
    uint64_t v122 = (uint64_t *)(v121 + v118[14]);
    uint64_t v123 = enum case for DIPError.PropertyKey.attributeID(_:);
    uint64_t v124 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v124 - 8) + 104))(v121, v123, v124);
    v122[3] = (uint64_t)&type metadata for String;
    *uint64_t v122 = v55;
    v122[1] = (uint64_t)v54;
    sub_10015C504(v120);
    type metadata accessor for DIPError();
    sub_1000AF434((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
LABEL_101:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v156 = (uint64_t (*)(void))v21[1];
LABEL_102:
    return v156();
  }
  swift_bridgeObjectRetain();
  unint64_t v57 = sub_100590548(v55, (uint64_t)v54);
  if ((v58 & 1) == 0)
  {
    long long v21 = (void *)v164;
    swift_bridgeObjectRelease();
    goto LABEL_73;
  }
  uint64_t v59 = (void *)v164;
  *(void *)(v164 + 520) = v6 + 1;
  *(void *)(v164 + 512) = v20;
  uint64_t v60 = *(void *)(v164 + 400);
  uint64_t v61 = *(void *)(*(void *)(v164 + 368) + 56) + 152 * v57;
  long long v62 = *(_OWORD *)(v61 + 16);
  *(_OWORD *)uint64_t v2 = *(_OWORD *)v61;
  *(_OWORD *)(v2 + 16) = v62;
  long long v63 = *(_OWORD *)(v61 + 80);
  long long v65 = *(_OWORD *)(v61 + 32);
  long long v64 = *(_OWORD *)(v61 + 48);
  *(_OWORD *)(v2 + 64) = *(_OWORD *)(v61 + 64);
  *(_OWORD *)(v2 + 80) = v63;
  *(_OWORD *)(v2 + 32) = v65;
  *(_OWORD *)(v2 + 48) = v64;
  long long v67 = *(_OWORD *)(v61 + 112);
  long long v66 = *(_OWORD *)(v61 + 128);
  long long v68 = *(_OWORD *)(v61 + 96);
  *(void *)(v2 + 144) = *(void *)(v61 + 144);
  *(_OWORD *)(v2 + 112) = v67;
  *(_OWORD *)(v2 + 128) = v66;
  *(_OWORD *)(v2 + 96) = v68;
  sub_1000B53AC(v2);
  swift_bridgeObjectRelease();
  if (!*(void *)(v60 + 16))
  {
    uint64_t v74 = 0;
    uint64_t v73 = 0;
LABEL_87:
    uint64_t v140 = 0;
    uint64_t v141 = 0;
    goto LABEL_89;
  }
  swift_bridgeObjectRetain();
  unint64_t v69 = sub_100590548(v55, (uint64_t)v54);
  uint64_t v70 = *(void *)(v164 + 400);
  if (v71)
  {
    uint64_t v72 = (uint64_t *)(*(void *)(v70 + 56) + 32 * v69);
    uint64_t v73 = *v72;
    uint64_t v74 = v72[1];
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v73 = 0;
    uint64_t v74 = 0;
  }
  swift_bridgeObjectRelease();
  if (!*(void *)(v70 + 16))
  {
    uint64_t v140 = 0;
    uint64_t v141 = 0;
    uint64_t v59 = (void *)v164;
    goto LABEL_89;
  }
  uint64_t v59 = (void *)v164;
  unint64_t v137 = sub_100590548(v55, (uint64_t)v54);
  if ((v138 & 1) == 0) {
    goto LABEL_87;
  }
  uint64_t v139 = *(void *)(*(void *)(v164 + 400) + 56) + 32 * v137;
  uint64_t v140 = *(void *)(v139 + 16);
  uint64_t v141 = *(void *)(v139 + 24);
  swift_bridgeObjectRetain();
LABEL_89:
  v59[67] = v141;
  v59[66] = v74;
  swift_bridgeObjectRelease();
  uint64_t v142 = v59[22];
  uint64_t v143 = v59[23];
  v59[68] = v142;
  v59[69] = v143;
  if (v142 == 0xD000000000000010 && v143 == 0x800000010062A670
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v144 = sub_100025C28(0, &qword_1007225E0);
    sub_1000B53AC(v2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v145 = swift_task_alloc();
    *(void *)(v164 + 560) = v145;
    *(void *)uint64_t v145 = v164;
    *(void *)(v145 + 8) = sub_10007E7FC;
    uint64_t v146 = *(void *)(v164 + 376);
    long long v147 = *(_OWORD *)(v164 + 384);
    *(void *)(v145 + 536) = v144;
    *(_OWORD *)(v145 + 520) = v147;
    *(void *)(v145 + 504) = v2;
    *(void *)(v145 + 512) = v146;
    return _swift_task_switch(sub_100081088, 0, 0);
  }
  else
  {
    uint64_t v148 = (void *)swift_task_alloc();
    *(void *)(v164 + 568) = v148;
    *uint64_t v148 = v164;
    v148[1] = sub_10007E964;
    uint64_t v149 = *(void *)(v164 + 392);
    return sub_1000816A4(v2, v73, v74, v140, v141, v149);
  }
}

uint64_t sub_10007F9DC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_10007FA54(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v106 = a4;
  uint64_t v91 = type metadata accessor for Logger();
  uint64_t v90 = *(void *)(v91 - 8);
  uint64_t v7 = __chkstk_darwin(v91);
  unint64_t v9 = (char *)&v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unint64_t v89 = (char *)&v87 - v10;
  uint64_t v12 = a1[2];
  uint64_t v11 = a1[3];
  uint64_t v92 = a1[4];
  uint64_t v13 = a1[5];
  uint64_t v99 = a1[6];
  uint64_t v14 = a1[7];
  uint64_t v101 = v13;
  uint64_t v102 = v14;
  uint64_t v93 = a1[8];
  uint64_t v98 = a1[9];
  uint64_t v94 = a1[10];
  uint64_t v15 = a1[11];
  uint64_t v100 = a1[12];
  uint64_t v16 = a1[13];
  uint64_t v103 = v15;
  uint64_t v104 = v16;
  uint64_t v95 = a1[14];
  uint64_t v105 = a1[15];
  uint64_t v96 = a1[16];
  uint64_t v97 = a1[17];
  uint64_t v17 = (void *)a1[19];
  id v18 = [objc_allocWithZone((Class)DIAttributeLabel) init];
  NSString v19 = String._bridgeToObjectiveC()();
  [v18 setIdentifier:v19];

  sub_1000BEA14(a2 + 408, (uint64_t)v113, &qword_100722398);
  sub_1000BEA14((uint64_t)v113, (uint64_t)&v119, &qword_100722398);
  if (v119 && *(void *)(v119 + 16))
  {
    swift_bridgeObjectRetain();
    sub_100590548(v12, v11);
    if (v20)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
LABEL_7:
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v18 setDefaultValue:v21];

  id v22 = [v18 defaultValue];
  if (!v22) {
    goto LABEL_32;
  }
  uint64_t v23 = v22;
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v26 = v25;

  uint64_t v111 = v24;
  uint64_t v112 = v26;
  unint64_t v109 = 0xD000000000000012;
  unint64_t v110 = 0x8000000100632DF0;
  sub_1000B5358();
  if ((StringProtocol.contains<A>(_:)() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  uint64_t v27 = (void *)*a3;
  if (!v27 || (uint64_t v28 = v27[2]) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_83:

    return;
  }
  if (v28 == 1 || !v17 || !v17[2])
  {
    uint64_t v111 = v24;
    uint64_t v112 = v26;
    unint64_t v109 = 0xD000000000000012;
    unint64_t v110 = 0x8000000100632DF0;
    uint64_t v45 = v27[5];
    uint64_t v107 = v27[4];
    uint64_t v108 = v45;
    StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    swift_bridgeObjectRelease();
    NSString v46 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v18 setDefaultValue:v46];

    defaultLogger()();
    long long v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v47, v48))
    {
      long long v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "replaced 1 phone numbers", v49, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v90 + 8))(v9, v91);
LABEL_32:
    uint64_t v55 = v105;
    uint64_t v54 = v106;
    uint64_t v57 = v103;
    uint64_t v56 = v104;
    uint64_t v59 = v101;
    uint64_t v58 = v102;
    if (v101)
    {
      sub_1000BEA14((uint64_t)v113, (uint64_t)&v111, &qword_100722398);
      if (v111)
      {
        uint64_t v60 = *(void *)(v111 + 16);
        swift_bridgeObjectRetain();
        uint64_t v61 = v92;
        if (v60)
        {
          swift_bridgeObjectRetain();
          sub_100590548(v61, v59);
          if (v62)
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease_n();
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      NSString v63 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v18 setButtonTitle:v63];
    }
    if (!v58)
    {
LABEL_60:
      if (!v56)
      {
LABEL_80:
        id v86 = v18;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((*v54 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v54 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        goto LABEL_83;
      }
      sub_1000BEA14((uint64_t)v113, (uint64_t)&v116, &qword_100722398);
      uint64_t v75 = v116;
      uint64_t v76 = v97;
      if (v116 && *(void *)(v116 + 16))
      {
        swift_bridgeObjectRetain();
        unint64_t v77 = sub_100590548(v100, v56);
        if (v78)
        {
          uint64_t v100 = *(void *)(*(void *)(v75 + 56) + 16 * v77);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
LABEL_67:
          NSString v79 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v18 setBusinessChatButtonTitle:v79];

          sub_1000BEA14((uint64_t)v113, (uint64_t)&v115, &qword_100722398);
          uint64_t v80 = v95;
          if (v115 && *(void *)(v115 + 16))
          {
            swift_bridgeObjectRetain();
            sub_100590548(v80, v55);
            if (v81)
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
LABEL_73:
              NSString v82 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
              [v18 setBusinessChatIdentifier:v82];

              sub_1000BEA14((uint64_t)v113, (uint64_t)&v114, &qword_100722398);
              uint64_t v83 = v96;
              if (v114 && *(void *)(v114 + 16))
              {
                swift_bridgeObjectRetain();
                sub_100590548(v83, v76);
                if (v84)
                {
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRelease();
LABEL_79:
                  NSString v85 = String._bridgeToObjectiveC()();
                  swift_bridgeObjectRelease();
                  [v18 setBusinessChatIntentName:v85];

                  goto LABEL_80;
                }
                swift_bridgeObjectRelease();
              }
              swift_bridgeObjectRetain();
              goto LABEL_79;
            }
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRetain();
          goto LABEL_73;
        }
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRetain();
      goto LABEL_67;
    }
    sub_1000BEA14((uint64_t)v113, (uint64_t)&v109, &qword_100722398);
    unint64_t v64 = v109;
    if (v109 && *(void *)(v109 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v65 = sub_100590548(v99, v58);
      if (v66)
      {
        uint64_t v99 = *(void *)(*(void *)(v64 + 56) + 16 * v65);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
LABEL_47:
        NSString v67 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v18 setDetailTitle:v67];

        sub_1000BEA14((uint64_t)v113, (uint64_t)&v107, &qword_100722398);
        uint64_t v68 = v93;
        if (v107 && *(void *)(v107 + 16))
        {
          uint64_t v69 = v98;
          swift_bridgeObjectRetain();
          sub_100590548(v68, v69);
          if (v70)
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
LABEL_53:
            NSString v71 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            [v18 setDetailSubtitle:v71];

            sub_1000BEA14((uint64_t)v113, (uint64_t)&v117, &qword_100722398);
            uint64_t v72 = v94;
            if (v117 && *(void *)(v117 + 16))
            {
              swift_bridgeObjectRetain();
              sub_100590548(v72, v57);
              if (v73)
              {
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
LABEL_59:
                NSString v74 = String._bridgeToObjectiveC()();
                swift_bridgeObjectRelease();
                [v18 setDetailBody:v74];

                goto LABEL_60;
              }
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRetain();
            goto LABEL_59;
          }
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRetain();
        goto LABEL_53;
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    goto LABEL_47;
  }
  uint64_t v30 = v17[5];
  uint64_t v29 = v17[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_1000BEA14((uint64_t)v113, (uint64_t)&v118, &qword_100722398);
  if (v118 && *(void *)(v118 + 16))
  {
    swift_bridgeObjectRetain();
    sub_100590548(v30, v29);
    if (v31)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  NSString v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  long long v33 = &stru_10071A000;
  [v18 setDefaultValue:v32];

  uint64_t v34 = v27[2];
  if (v34)
  {
    if (v34 != 1)
    {
      uint64_t v36 = v27[4];
      uint64_t v35 = v27[5];
      uint64_t v37 = v27[7];
      uint64_t v88 = v27[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      NSString v38 = [v18 defaultValue];
      if (v38)
      {
        uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v41 = v40;

        uint64_t v111 = v39;
        uint64_t v112 = v41;
        unint64_t v109 = 0xD000000000000012;
        unint64_t v110 = 0x8000000100632DF0;
        uint64_t v107 = v36;
        uint64_t v108 = v35;
        uint64_t v42 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        uint64_t v44 = v43;
        swift_bridgeObjectRelease();
        uint64_t v111 = v42;
        uint64_t v112 = v44;
        unint64_t v109 = 0xD000000000000014;
        unint64_t v110 = 0x8000000100632E10;
        uint64_t v107 = v88;
        uint64_t v108 = v37;
        StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        long long v33 = &stru_10071A000;
        swift_bridgeObjectRelease();
        NSString v38 = String._bridgeToObjectiveC()();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      [v18 v33[215].name:v38];

      long long v50 = v89;
      defaultLogger()();
      long long v51 = Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v51, v52))
      {
        uint64_t v53 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v53 = 0;
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "replaced 2 phone numbers", v53, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v90 + 8))(v50, v91);
      goto LABEL_32;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_100080700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v49 = a3;
  uint64_t v47 = type metadata accessor for DIPError.Code();
  uint64_t v46 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  os_log_type_t v48 = (char *)v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = sub_100007764(&qword_1007225F8);
  uint64_t v6 = *(void *)(v69 - 8);
  __chkstk_darwin(v69);
  uint64_t v58 = (char *)v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100007764(&qword_100722600);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v45 - v13;
  sub_100007764(&qword_100722608);
  Regex.init(_regexString:version:)();
  Regex.ignoresCase(_:)();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v52 = v9 + 8;
  long long v50 = v15;
  v15(v12, v8);
  *(void *)&long long v66 = a1;
  *((void *)&v66 + 1) = a2;
  sub_1000B60CC();
  sub_1000B6120(&qword_100722618, &qword_100722600);
  swift_bridgeObjectRetain();
  long long v51 = v14;
  uint64_t v53 = v8;
  uint64_t v16 = BidirectionalCollection<>.matches<A, B>(of:)();
  uint64_t v17 = *(void *)(v16 + 16);
  if (v17)
  {
    NSString v19 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v18 = v6 + 16;
    uint64_t v56 = v19;
    unint64_t v20 = (*(unsigned __int8 *)(v18 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 64);
    v45[1] = v16;
    unint64_t v21 = v16 + v20;
    uint64_t v57 = (void (**)(char *, uint64_t))(v18 - 8);
    uint64_t v54 = *(void *)(v18 + 56);
    uint64_t v22 = v69;
    uint64_t v23 = v58;
    uint64_t v24 = v18;
    uint64_t v25 = v49;
    uint64_t v55 = v24;
    while (1)
    {
      v56(v23, v21, v22);
      swift_getKeyPath();
      Regex.Match.subscript.getter();
      swift_release();
      uint64_t v26 = static String._fromSubstring(_:)();
      uint64_t v28 = v27;
      swift_bridgeObjectRelease();
      if (!*(void *)(v25 + 16)) {
        break;
      }
      swift_bridgeObjectRetain();
      unint64_t v29 = sub_100590548(v26, (uint64_t)v28);
      if ((v30 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        break;
      }
      char v31 = (uint64_t *)(*(void *)(v25 + 56) + 16 * v29);
      uint64_t v32 = *v31;
      uint64_t v33 = v31[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease_n();
      uint64_t v64 = a1;
      uint64_t v65 = a2;
      swift_getKeyPath();
      uint64_t v34 = v58;
      Regex.Match.subscript.getter();
      swift_release();
      long long v61 = v66;
      uint64_t v62 = v67;
      uint64_t v63 = v68;
      uint64_t v59 = v32;
      uint64_t v60 = v33;
      uint64_t v22 = v69;
      sub_1000B5358();
      sub_1000B6164();
      uint64_t v23 = v34;
      a1 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      a2 = v35;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*v57)(v23, v22);
      swift_bridgeObjectRelease();
      v21 += v54;
      if (!--v17) {
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)&long long v66 = 0;
    *((void *)&v66 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    *(void *)&long long v66 = 0xD000000000000015;
    *((void *)&v66 + 1) = 0x8000000100632E50;
    v36._uint64_t countAndFlagsBits = v26;
    v36._object = v28;
    String.append(_:)(v36);
    v37._uint64_t countAndFlagsBits = 0x656874206E692029;
    v37._object = (void *)0xEF676E6972747320;
    String.append(_:)(v37);
    uint64_t v69 = v66;
    (*(void (**)(char *, void, uint64_t))(v46 + 104))(v48, enum case for DIPError.Code.unknownAttribute(_:), v47);
    sub_100007764((uint64_t *)&unk_1007225C0);
    NSString v38 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v39 = (*(unsigned __int8 *)(*(void *)v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v38 + 80);
    uint64_t v40 = swift_allocObject();
    *(_OWORD *)(v40 + 16) = xmmword_100610730;
    unint64_t v41 = v40 + v39;
    uint64_t v42 = (uint64_t *)(v40 + v39 + v38[14]);
    a1 = enum case for DIPError.PropertyKey.attributeID(_:);
    uint64_t v43 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 104))(v41, a1, v43);
    v42[3] = (uint64_t)&type metadata for String;
    *uint64_t v42 = v26;
    v42[1] = (uint64_t)v28;
    sub_10015C504(v40);
    type metadata accessor for DIPError();
    sub_1000AF434((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    (*v57)(v58, v22);
    v50(v51, v53);
  }
  else
  {
LABEL_6:
    swift_bridgeObjectRelease();
    v50(v51, v53);
  }
  return a1;
}

id sub_100080ECC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v7 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  sub_100025C28(0, &qword_1007223C0);
  id v8 = v7;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v8 setAttributes:isa];

  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v8 setTitle:v10];

  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v8 setSubTitle:v11];

  [v8 setPage:a6];
  sub_100007764(&qword_1007268F0);
  Class v12 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v8 setServerValidationGroup:v12];

  return v8;
}

uint64_t sub_10008105C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[67] = v4;
  v5[66] = a4;
  v5[65] = a3;
  v5[63] = a1;
  v5[64] = a2;
  return _swift_task_switch(sub_100081088, 0, 0);
}

uint64_t sub_100081088()
{
  v0[60] = &_swiftEmptyArrayStorage;
  v0[61] = 0;
  if (qword_10071F4E0 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)swift_task_alloc();
  v0[68] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100081174;
  uint64_t v2 = v0[66];
  return sub_1002AA1B8((uint64_t)(v0 + 2), 0, 0, v2, 1);
}

uint64_t sub_100081174()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10008128C, 0, 0);
}

uint64_t sub_10008128C()
{
  Swift::String v37 = v0;
  uint64_t v1 = v0 + 60;
  uint64_t v2 = *(void *)(v0[63] + 112);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      char v31 = v0 + 61;
      swift_bridgeObjectRetain();
      uint64_t v4 = (uint64_t *)(v2 + 64);
      uint64_t v33 = v0 + 2;
      uint64_t v34 = v0 + 60;
      uint64_t v32 = v0;
      do
      {
        uint64_t v35 = v0[65];
        uint64_t v5 = v0[64];
        uint64_t v6 = v4[6];
        uint64_t v7 = v4[7];
        uint64_t v8 = v4[5];
        uint64_t v10 = v4[3];
        uint64_t v9 = v4[4];
        uint64_t v12 = v4[1];
        uint64_t v11 = v4[2];
        uint64_t v14 = *(v4 - 1);
        uint64_t v13 = *v4;
        uint64_t v16 = *(v4 - 3);
        uint64_t v15 = *(v4 - 2);
        v36[0] = *(v4 - 4);
        v36[1] = v16;
        v36[2] = v15;
        v36[3] = v14;
        v36[4] = v13;
        v36[5] = v12;
        v36[6] = v11;
        v36[7] = v10;
        v36[8] = v9;
        v36[9] = v8;
        v36[10] = v6;
        v36[11] = v7;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_100083314(v36, (uint64_t)v33, v31, v34, v5, v35);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v0 = v32;
        swift_bridgeObjectRelease();
        v4 += 12;
        --v3;
      }
      while (v3);
      swift_bridgeObjectRelease();
      sub_100044D90(v33);
      unint64_t v17 = v32[60];
      uint64_t v1 = v34;
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_100044D90(v0 + 2);
      unint64_t v17 = (unint64_t)&_swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_100044D90(v0 + 2);
    unint64_t v17 = (unint64_t)&_swiftEmptyArrayStorage;
  }
  if (v17 >> 62)
  {
    swift_bridgeObjectRetain();
    id v18 = (id)_CocoaArrayWrapper.endIndex.getter();
    if (v18)
    {
LABEL_11:
      if ((v17 & 0xC000000000000001) != 0)
      {
        id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_24:
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_16:
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();

          goto LABEL_19;
        }
        id v19 = *(id *)(v17 + 32);
      }
      unint64_t v20 = v19;
      swift_bridgeObjectRelease();
      [v20 mutableCopy];

      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_100025C28(0, &qword_1007225F0);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_19;
      }
      unint64_t v21 = (void *)v0[62];
      [v21 setType:DIAttributeIdentityDocumentTypeUnknown];
      id v18 = v21;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_16;
      }
      goto LABEL_24;
    }
  }
  else
  {
    id v18 = *(id *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v18) {
      goto LABEL_11;
    }
  }
  swift_bridgeObjectRelease();
LABEL_19:
  uint64_t v22 = v0[63];
  id v23 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  sub_100025C28(0, &qword_1007225F0);
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v25 = [v23 initWithAcceptableDocs:isa];

  uint64_t v26 = v0[61];
  id v27 = v25;
  [v27 setAcceptableDocTypes:v26];
  NSString v28 = String._bridgeToObjectiveC()();
  sub_1000B5454(v22);
  [v27 setSubmissionKey:v28];

  swift_bridgeObjectRelease();
  unint64_t v29 = (uint64_t (*)(id))v0[1];
  return v29(v27);
}

uint64_t sub_1000816A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[229] = a6;
  v6[228] = a5;
  v6[227] = a4;
  v6[226] = a3;
  v6[225] = a2;
  v6[224] = a1;
  uint64_t v7 = type metadata accessor for DIPError.Code();
  v6[230] = v7;
  v6[231] = *(void *)(v7 - 8);
  v6[232] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Date();
  v6[233] = v8;
  v6[234] = *(void *)(v8 - 8);
  v6[235] = swift_task_alloc();
  sub_100007764(&qword_1007239B0);
  v6[236] = swift_task_alloc();
  return _swift_task_switch(sub_100081804, 0, 0);
}

uint64_t sub_100081804()
{
  if (qword_10071F4E0 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 1896) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000818E4;
  uint64_t v2 = *(void *)(v0 + 1832);
  return sub_1002AA1B8(v0 + 16, 0, 0, v2, 1);
}

uint64_t sub_1000818E4()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1000819E0, 0, 0);
}

uint64_t sub_1000819E0()
{
  uint64_t v153 = v0;
  sub_1000BEA14(v0 + 16, v0 + 880, &qword_100722350);
  if (sub_100044CCC(v0 + 880) == 1)
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 1848) + 104))(*(void *)(v0 + 1856), enum case for DIPError.Code.unexpectedDaemonState(_:), *(void *)(v0 + 1840));
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000AF434((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
LABEL_14:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v62 = *(uint64_t (**)(void))(v0 + 8);
    return v62();
  }
  memcpy((void *)(v0 + 448), (const void *)(v0 + 880), 0x1B0uLL);
  sub_1000BEA14(v0 + 848, v0 + 1776, &qword_100722358);
  sub_1000BEA14(v0 + 1776, v0 + 1784, &qword_100722358);
  uint64_t v1 = *(void *)(v0 + 1784);
  if (!v1 || !*(void *)(v1 + 16))
  {
LABEL_13:
    uint64_t v46 = *(void *)(v0 + 1856);
    uint64_t v47 = *(void *)(v0 + 1848);
    uint64_t v48 = *(void *)(v0 + 1840);
    uint64_t v49 = *(uint64_t **)(v0 + 1792);
    sub_100044D90((uint64_t *)(v0 + 16));
    *(void *)&long long v145 = 0;
    *((void *)&v145 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(57);
    v50._uint64_t countAndFlagsBits = 0xD000000000000025;
    v50._object = (void *)0x8000000100632EC0;
    String.append(_:)(v50);
    uint64_t v52 = *v49;
    long long v51 = (void *)v49[1];
    swift_bridgeObjectRetain();
    v53._uint64_t countAndFlagsBits = v52;
    v53._object = v51;
    String.append(_:)(v53);
    swift_bridgeObjectRelease();
    v54._uint64_t countAndFlagsBits = 0xD000000000000012;
    v54._object = (void *)0x8000000100632EF0;
    String.append(_:)(v54);
    (*(void (**)(uint64_t, void, uint64_t))(v47 + 104))(v46, enum case for DIPError.Code.unexpectedDaemonState(_:), v48);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v55 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v56 = (*(unsigned __int8 *)(*(void *)v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v55 + 80);
    uint64_t v57 = swift_allocObject();
    *(_OWORD *)(v57 + 16) = xmmword_100610730;
    unint64_t v58 = v57 + v56;
    uint64_t v59 = (uint64_t *)(v58 + v55[14]);
    uint64_t v60 = enum case for DIPError.PropertyKey.attributeID(_:);
    uint64_t v61 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 104))(v58, v60, v61);
    v59[3] = (uint64_t)&type metadata for String;
    *uint64_t v59 = v52;
    v59[1] = (uint64_t)v51;
    swift_bridgeObjectRetain();
    sub_10015C504(v57);
    type metadata accessor for DIPError();
    sub_1000AF434((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    goto LABEL_14;
  }
  uint64_t v2 = *(uint64_t **)(v0 + 1792);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  swift_bridgeObjectRetain();
  unint64_t v5 = sub_100590548(v3, v4);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  uint64_t v7 = (_OWORD *)(v0 + 1464);
  uint64_t v137 = v0 + 1680;
  uint64_t v8 = *(void *)(v1 + 56) + 152 * v5;
  long long v9 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)(v0 + 1312) = *(_OWORD *)v8;
  *(_OWORD *)(v0 + 1328) = v9;
  long long v10 = *(_OWORD *)(v8 + 32);
  long long v11 = *(_OWORD *)(v8 + 48);
  long long v12 = *(_OWORD *)(v8 + 80);
  *(_OWORD *)(v0 + 1376) = *(_OWORD *)(v8 + 64);
  *(_OWORD *)(v0 + 1392) = v12;
  *(_OWORD *)(v0 + 1344) = v10;
  *(_OWORD *)(v0 + 1360) = v11;
  long long v13 = *(_OWORD *)(v8 + 96);
  long long v14 = *(_OWORD *)(v8 + 112);
  long long v15 = *(_OWORD *)(v8 + 128);
  *(void *)(v0 + 1456) = *(void *)(v8 + 144);
  *(_OWORD *)(v0 + 1424) = v14;
  *(_OWORD *)(v0 + 1440) = v15;
  *(_OWORD *)(v0 + 1408) = v13;
  sub_1000B5FB4(v0 + 1312);
  swift_bridgeObjectRelease();
  id v16 = [objc_allocWithZone((Class)DIAttribute) init];
  int v17 = *(unsigned __int8 *)(v0 + 1312);
  switch(*(unsigned char *)(v0 + 1312))
  {
    case 1:
      id v66 = v16;
      sub_100044D90((uint64_t *)(v0 + 16));
      id v142 = [objc_allocWithZone((Class)DIAttributePicker) init];
      uint64_t v67 = *(void *)(v0 + 1424);
      *(void *)&long long v145 = &_swiftEmptyArrayStorage;
      uint64_t v140 = *(void *)(v67 + 16);
      if (v140)
      {
        id v136 = v66;
        uint64_t v138 = *(void *)(v0 + 1808);
        uint64_t v68 = (uint64_t *)(v67 + 56);
        swift_bridgeObjectRetain_n();
        for (uint64_t i = 1; ; ++i)
        {
          uint64_t v70 = *(v68 - 3);
          uint64_t v71 = *(v68 - 2);
          uint64_t v72 = *(v68 - 1);
          uint64_t v73 = *v68;
          id v74 = objc_allocWithZone((Class)DIAttributePickerItem);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          NSString v75 = String._bridgeToObjectiveC()();
          NSString v76 = String._bridgeToObjectiveC()();
          id v77 = [v74 initWithName:v75 value:v76];

          if (v77)
          {
            id v78 = v77;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v145 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v145 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            if (v138
              && (v70 == *(void *)(v0 + 1800) && *(void *)(v0 + 1808) == v71
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
               || v72 == *(void *)(v0 + 1800) && *(void *)(v0 + 1808) == v73
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
            {
              [v142 setDefaultValue:v78];
            }
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v140 == i) {
            break;
          }
          v68 += 4;
          if (__OFADD__(i, 1))
          {
            __break(1u);
            JUMPOUT(0x100082EC0);
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v103 = v0 + 1712;
        uint64_t v106 = v0 + 1632;
        id v66 = v136;
      }
      else
      {
        swift_bridgeObjectRetain();
        uint64_t v103 = v0 + 1712;
        uint64_t v106 = v0 + 1632;
      }
      swift_bridgeObjectRelease();
      sub_100025C28(0, (unint64_t *)&unk_100722640);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v142 setPickerItems:isa];

      swift_bridgeObjectRetain();
      NSString v108 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v66 setSubmissionFormat:v108];

      goto LABEL_67;
    case 2:
      uint64_t v141 = v16;
      uint64_t v80 = *(void *)(v0 + 1808);
      sub_100044D90((uint64_t *)(v0 + 16));
      id v81 = [objc_allocWithZone((Class)DIAttributeDate) init];
      [v81 setRequireDay:*(unsigned __int8 *)(v0 + 1419)];
      [v81 setRequireMonth:*(unsigned __int8 *)(v0 + 1420)];
      [v81 setRequireYear:*(unsigned __int8 *)(v0 + 1421)];
      id v82 = v81;
      swift_bridgeObjectRetain();
      NSString v83 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v82 setSubmissionFormat:v83];

      id v142 = v82;
      if (v80)
      {
        id v84 = [objc_allocWithZone((Class)NSDateFormatter) init];
        NSString v85 = [v82 submissionFormat];
        if (!v85)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          NSString v85 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        [v84 setDateFormat:v85];

        NSString v86 = String._bridgeToObjectiveC()();
        id v87 = [v84 dateFromString:v86];

        uint64_t v88 = *(void *)(v0 + 1888);
        if (v87)
        {
          uint64_t v89 = *(void *)(v0 + 1880);
          uint64_t v90 = *(void *)(v0 + 1872);
          uint64_t v91 = *(void *)(v0 + 1864);
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          (*(void (**)(uint64_t, uint64_t, uint64_t))(v90 + 32))(v88, v89, v91);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v90 + 56))(v88, 0, 1, v91);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v90 + 48))(v88, 1, v91) == 1)
          {
            Class v92 = 0;
          }
          else
          {
            uint64_t v118 = *(void *)(v0 + 1888);
            uint64_t v119 = *(void *)(v0 + 1872);
            uint64_t v120 = *(void *)(v0 + 1864);
            Class v92 = Date._bridgeToObjectiveC()().super.isa;
            (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v118, v120);
          }
          uint64_t v103 = v0 + 1712;
        }
        else
        {
          (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 1872) + 56))(*(void *)(v0 + 1888), 1, 1, *(void *)(v0 + 1864));
          Class v92 = 0;
          uint64_t v103 = v0 + 1712;
        }
        [v142 setDefaultValue:v92];

        uint64_t v117 = v0 + 1656;
        uint64_t v116 = v0 + 1608;
        uint64_t v106 = v0 + 1632;
      }
      else
      {

LABEL_74:
        uint64_t v117 = v0 + 1656;
        uint64_t v116 = v0 + 1608;
        uint64_t v103 = v0 + 1712;
        uint64_t v106 = v0 + 1632;
      }
      break;
    case 3:
    case 4:
      id v18 = v16;
      uint64_t v19 = *(void *)(v0 + 1792);
      uint64_t v20 = *(void *)(v0 + 856);
      swift_bridgeObjectRetain();
      sub_100044D90((uint64_t *)(v0 + 16));
      uint64_t v21 = *(void *)(v19 + 120);
      if (v21 && (v144 = &_swiftEmptyArrayStorage, (uint64_t v22 = *(void *)(v21 + 16)) != 0))
      {
        swift_bridgeObjectRetain_n();
        *uint64_t v7 = *(_OWORD *)(v21 + 32);
        long long v23 = *(_OWORD *)(v21 + 96);
        long long v25 = *(_OWORD *)(v21 + 48);
        long long v24 = *(_OWORD *)(v21 + 64);
        *(_OWORD *)(v0 + 1512) = *(_OWORD *)(v21 + 80);
        *(_OWORD *)(v0 + 1528) = v23;
        *(_OWORD *)(v0 + 1480) = v25;
        *(_OWORD *)(v0 + 1496) = v24;
        long long v27 = *(_OWORD *)(v21 + 128);
        long long v26 = *(_OWORD *)(v21 + 144);
        long long v28 = *(_OWORD *)(v21 + 112);
        *(_OWORD *)(v0 + 1585) = *(_OWORD *)(v21 + 153);
        *(_OWORD *)(v0 + 1560) = v27;
        *(_OWORD *)(v0 + 1576) = v26;
        *(_OWORD *)(v0 + 1544) = v28;
        long long v29 = *(_OWORD *)(v21 + 144);
        long long v151 = *(_OWORD *)(v21 + 128);
        v152[0] = v29;
        *(_OWORD *)((char *)v152 + 9) = *(_OWORD *)(v21 + 153);
        long long v30 = *(_OWORD *)(v21 + 80);
        long long v147 = *(_OWORD *)(v21 + 64);
        long long v148 = v30;
        long long v31 = *(_OWORD *)(v21 + 112);
        long long v149 = *(_OWORD *)(v21 + 96);
        long long v150 = v31;
        long long v32 = *(_OWORD *)(v21 + 48);
        long long v145 = *(_OWORD *)(v21 + 32);
        long long v146 = v32;
        sub_1000AB0CC(v0 + 1464);
        sub_100082EF4(&v144, (uint64_t)&v145, v20);
        uint64_t v33 = 176;
        while (1)
        {
          sub_1000AB104(v0 + 1464);
          if (!--v22) {
            break;
          }
          uint64_t v34 = (long long *)(v21 + v33);
          long long v35 = *(_OWORD *)(v21 + v33);
          v33 += 144;
          *uint64_t v7 = v35;
          long long v36 = v34[1];
          long long v37 = v34[2];
          long long v38 = v34[4];
          *(_OWORD *)(v0 + 1512) = v34[3];
          *(_OWORD *)(v0 + 1528) = v38;
          *(_OWORD *)(v0 + 1480) = v36;
          *(_OWORD *)(v0 + 1496) = v37;
          long long v39 = v34[5];
          long long v40 = v34[6];
          long long v41 = v34[7];
          *(_OWORD *)(v0 + 1585) = *(long long *)((char *)v34 + 121);
          *(_OWORD *)(v0 + 1560) = v40;
          *(_OWORD *)(v0 + 1576) = v41;
          *(_OWORD *)(v0 + 1544) = v39;
          long long v42 = v34[7];
          long long v151 = v34[6];
          v152[0] = v42;
          *(_OWORD *)((char *)v152 + 9) = *(long long *)((char *)v34 + 121);
          long long v43 = v34[3];
          long long v147 = v34[2];
          long long v148 = v43;
          long long v44 = v34[5];
          long long v149 = v34[4];
          long long v150 = v44;
          long long v45 = v34[1];
          long long v145 = *v34;
          long long v146 = v45;
          sub_1000AB0CC(v0 + 1464);
          sub_100082EF4(&v144, (uint64_t)&v145, v20);
        }
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      id v121 = [objc_allocWithZone((Class)DIAttributeCamera) init];
      sub_100025C28(0, (unint64_t *)&unk_10072F360);
      Class v122 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v142 = v121;
      [v121 setScanRequirements:v122];

      goto LABEL_74;
    case 5:
      uint64_t v139 = v16;
      sub_100044D90((uint64_t *)(v0 + 16));
      swift_bridgeObjectRelease();
      uint64_t v65 = (Class *)DIAttributeSMSOTP_ptr;
      goto LABEL_45;
    case 6:
      id v98 = v16;
      sub_100044D90((uint64_t *)(v0 + 16));
      id v142 = v98;
      goto LABEL_74;
    default:
      uint64_t v139 = v16;
      sub_100044D90((uint64_t *)(v0 + 16));
      char v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v65 = (Class *)DIAttributeText_ptr;
      if (v64) {
        uint64_t v65 = (Class *)DIAttributeSMSOTP_ptr;
      }
LABEL_45:
      id v143 = *(id *)(v0 + 1792);
      id v93 = [objc_allocWithZone(*v65) init];
      [v93 setMinLength:*(void *)(v0 + 1400)];
      [v93 setMaxLength:*(void *)(v0 + 1408)];
      [v93 setIsSecureText:*(unsigned __int8 *)(v0 + 1416)];
      [v93 setIsSecureVisibleText:*(unsigned __int8 *)(v0 + 1417)];
      [v93 setIsNumeric:*(unsigned __int8 *)(v0 + 1418)];
      id v94 = v93;
      swift_bridgeObjectRetain();
      NSString v95 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v94 setSubmissionFormat:v95];

      sub_1000BEA14((uint64_t)v143 + 24, v0 + 1728, (uint64_t *)&unk_100722630);
      sub_1000BEA14(v0 + 1728, v0 + 1744, (uint64_t *)&unk_100722630);
      NSString v96 = *(NSString *)(v0 + 1752);
      id v97 = v94;
      if (v96) {
        NSString v96 = String._bridgeToObjectiveC()();
      }
      uint64_t v99 = v94;
      uint64_t v100 = *(void *)(v0 + 1792);
      [v99 setClientValidationRegex:v96];

      sub_1000BEA14(v100 + 40, v0 + 1696, (uint64_t *)&unk_100722630);
      sub_1000BEA14(v0 + 1696, v0 + 1760, (uint64_t *)&unk_100722630);
      NSString v101 = *(NSString *)(v0 + 1768);
      id v102 = v99;
      if (v101) {
        NSString v101 = String._bridgeToObjectiveC()();
      }
      uint64_t v103 = v0 + 1712;
      uint64_t v104 = *(void *)(v0 + 1808);
      [v99 setServerValidationURL:v101];

      id v142 = v99;
      if (v104) {
        NSString v105 = String._bridgeToObjectiveC()();
      }
      else {
        NSString v105 = 0;
      }
      [v99 setDefaultValue:v105];

      switch(v17)
      {
        case 5:
          swift_bridgeObjectRelease();
          uint64_t v106 = v0 + 1632;
          goto LABEL_63;
        default:
          char v109 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t v106 = v0 + 1632;
          if ((v109 & 1) == 0) {
            goto LABEL_66;
          }
LABEL_63:
          id v110 = v99;
          swift_bridgeObjectRetain();
          NSString v111 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v110 setSupportingData:v111];

          self;
          uint64_t v112 = swift_dynamicCastObjCClass();
          if (v112)
          {
            uint64_t v113 = (void *)v112;
            uint64_t v114 = *(void *)(v0 + 1440);
            id v115 = v110;
            [v113 setValidityInSeconds:v114];

            id v142 = v115;
          }
          else
          {
            id v142 = v110;
LABEL_66:
          }
          break;
      }
LABEL_67:
      uint64_t v117 = v0 + 1656;
      uint64_t v116 = v0 + 1608;
      break;
  }
  if (*(void *)(v0 + 1824)) {
    NSString v123 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v123 = 0;
  }
  uint64_t v124 = *(void *)(v0 + 1792);
  [v142 setGroup:v123];

  NSString v125 = String._bridgeToObjectiveC()();
  [v142 setIdentifier:v125];

  [v142 setIsSensitive:*(unsigned __int8 *)(v0 + 1432)];
  [v142 setNotForVerification:*(unsigned __int8 *)(v0 + 1433)];
  [v142 setHoldLocally:*(unsigned char *)(v124 + 57) & 1];
  if (*(void *)(v0 + 1360))
  {
    swift_bridgeObjectRetain();
    NSString v126 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v126 = 0;
  }
  [v142 setDisplayFormat:v126];

  NSString v127 = String._bridgeToObjectiveC()();
  [v142 setLocalizedDisplayName:v127];

  NSString v128 = String._bridgeToObjectiveC()();
  [v142 setLocalizedPlaceholder:v128];

  uint64_t v129 = *(void *)(v0 + 1392);
  swift_bridgeObjectRetain();
  sub_1000B6040(v0 + 1312);
  if (!v129) {
    swift_bridgeObjectRetain();
  }
  NSString v130 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v142 setSubmissionKey:v130];

  if ([v142 holdLocally])
  {
    [v142 setCurrentValue:[v142 defaultValue]];
    swift_unknownObjectRelease();
  }
  uint64_t v131 = *(void *)(v0 + 1792);
  [v142 setOptional:(*(unsigned char *)(v131 + 16) & 1) == 0];
  sub_1000BEA14(v131 + 64, v137, (uint64_t *)&unk_100722630);
  sub_1000BEA14(v137, v103, (uint64_t *)&unk_100722630);
  if (*(void *)(v0 + 1720)) {
    NSString v132 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v132 = 0;
  }
  uint64_t v133 = *(void *)(v0 + 1792);
  [v142 setCodeOnError:v132];

  sub_1000BEA14(v133 + 128, v117, &qword_100721388);
  sub_1000BEA14(v117, v106, &qword_100721388);
  [v142 setDataNodeProof:(*(void *)(v0 + 1648) != 0) & *(unsigned char *)(v0 + 1632)];
  sub_1000BEA14(v117, v116, &qword_100721388);
  if (*(void *)(v0 + 1624)) {
    NSString v134 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v134 = 0;
  }
  [v142 setDataNodeProofGroup:v134];

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v135 = *(uint64_t (**)(void))(v0 + 8);
  return v135(v142);
}

void sub_100082EF4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  unint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 56);
  double v10 = *(double *)(a2 + 64);
  int v39 = *(unsigned __int8 *)(a2 + 72);
  double v11 = *(double *)(a2 + 80);
  int v12 = *(unsigned __int8 *)(a2 + 88);
  uint64_t v38 = *(void *)(a2 + 96);
  char v36 = *(unsigned char *)(a2 + 89);
  int v37 = *(unsigned __int8 *)(a2 + 104);
  uint64_t v34 = *(void *)(a2 + 112);
  uint64_t v35 = *(void *)a2;
  int v33 = *(unsigned __int8 *)(a2 + 120);
  id v13 = [objc_allocWithZone((Class)DIAttributeImageCaptureRequirements) init];
  long long v14 = v13;
  if (*(void *)(v4 + 16)) {
    uint64_t v15 = *(void *)(v4 + 32);
  }
  else {
    uint64_t v15 = 1;
  }
  [v13 setSelection:v15];
  if ((v8 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_36;
  }
  [v14 setMinHeight:v8];
  if (v9 < 0)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  [v14 setMinWidth:v9];
  if (v7 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  [v14 setPreferredHeight:v7];
  if (v6 < 0)
  {
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  [v14 setPreferredWidth:v6];
  if (v12) {
    double v11 = 1.0;
  }
  id v16 = [objc_allocWithZone((Class)NSNumber) initWithDouble:v11];
  [v14 setMaximumCompressionRatio:v16];

  if (v39) {
    double v17 = 1.0;
  }
  else {
    double v17 = v10;
  }
  id v18 = [objc_allocWithZone((Class)NSNumber) initWithDouble:v17];
  [v14 setCompressionRatio:v18];

  if (v5 == 2)
  {
    sub_100007764((uint64_t *)&unk_100726920);
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_100610730;
    long long v25 = (void *)DIAttributeImageEncodingPNG;
    *(void *)(v24 + 32) = DIAttributeImageEncodingPNG;
    uint64_t v19 = v38;
    char v20 = v36;
    int v26 = v37;
    uint64_t v21 = v35;
  }
  else
  {
    uint64_t v19 = v38;
    char v20 = v36;
    uint64_t v21 = v35;
    sub_100007764((uint64_t *)&unk_100726920);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_100610730;
    if (v5 == 1) {
      long long v23 = (void **)&DIAttributeImageEncodingJPEG;
    }
    else {
      long long v23 = (void **)&DIAttributeImageEncodingUnknown;
    }
    long long v25 = *v23;
    *(void *)(v22 + 32) = *v23;
    int v26 = v37;
  }
  type metadata accessor for DIAttributeImageEncoding(0);
  id v27 = v25;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v14 setSupportedEncoding:isa];

  if (a3 && *(void *)(a3 + 16))
  {
    swift_bridgeObjectRetain();
    sub_100590548(v21, v3);
    if (v29)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_25;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
LABEL_25:
  unint64_t v8 = (unint64_t)String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v14 setUserMessage:v8];

  [v14 setLiveliness:v20 & 1];
  if (v26) {
    uint64_t v30 = 0x7FFFFFFFLL;
  }
  else {
    uint64_t v30 = v19;
  }
  if (v30 < 0) {
    goto LABEL_39;
  }
  [v14 setTimeout:];
  if (v33) {
    uint64_t v31 = 0;
  }
  else {
    uint64_t v31 = v34;
  }
  if (v31 < 0) {
    goto LABEL_40;
  }
  [v14 setMaxRetakeCount:];
  unint64_t v8 = v14;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
LABEL_41:
  }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
}

void sub_100083314(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  v135[1] = a5;
  v135[2] = a6;
  id v136 = a4;
  uint64_t v9 = type metadata accessor for CharacterSet();
  uint64_t v141 = *(char **)(v9 - 8);
  __chkstk_darwin(v9);
  double v11 = (char *)v135 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Logger();
  id v142 = *(void (***)(void, void))(v12 - 8);
  uint64_t v143 = v12;
  __chkstk_darwin(v12);
  long long v14 = (char *)v135 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *a1;
  unint64_t v15 = a1[1];
  uint64_t v17 = a1[2];
  id v18 = (void *)a1[3];
  uint64_t v139 = a1[4];
  uint64_t v140 = v16;
  uint64_t v19 = (void *)a1[5];
  uint64_t v20 = a1[6];
  uint64_t v144 = (void *)a1[7];
  long long v146 = (char *)a1[8];
  id v147 = v19;
  double v21 = *((double *)a1 + 9);
  uint64_t v137 = a1[10];
  uint64_t v138 = v20;
  uint64_t v22 = a1[11];
  unint64_t v23 = v15;
  uint64_t v145 = v22;
  sub_1000BEA14(a2, (uint64_t)v154, &qword_100722350);
  if (sub_100044CCC((uint64_t)v154) == 1
    || (memcpy(v155, v154, sizeof(v155)),
        sub_1000BEA14((uint64_t)&v155[400], (uint64_t)v156, &qword_100722358),
        sub_1000BEA14((uint64_t)v156, (uint64_t)&v157, &qword_100722358),
        (uint64_t v24 = v157) == 0)
    || !*(void *)(v157 + 16))
  {
LABEL_9:
    defaultLogger()();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    long long v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.info.getter();
    uint64_t v141 = v14;
    os_log_type_t v45 = v44;
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      uint64_t v139 = swift_slowAlloc();
      *(void *)&v152[0] = v139;
      *(_DWORD *)uint64_t v46 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v148 = sub_100110D58(v140, v23, (uint64_t *)v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v43, v45, "no configuration found for attribute type %{public}s", v46, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    ((void (**)(char *, uint64_t))v142)[1](v141, v143);
    return;
  }
  v135[0] = v17;
  swift_bridgeObjectRetain();
  unint64_t v25 = sub_100590548(v140, v23);
  if ((v26 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  uint64_t v143 = v9;
  uint64_t v27 = *(void *)(v24 + 56) + 152 * v25;
  long long v28 = *(_OWORD *)(v27 + 16);
  v152[0] = *(_OWORD *)v27;
  v152[1] = v28;
  long long v29 = *(_OWORD *)(v27 + 80);
  long long v31 = *(_OWORD *)(v27 + 32);
  long long v30 = *(_OWORD *)(v27 + 48);
  v152[4] = *(_OWORD *)(v27 + 64);
  v152[5] = v29;
  v152[2] = v31;
  _OWORD v152[3] = v30;
  long long v32 = *(_OWORD *)(v27 + 96);
  long long v33 = *(_OWORD *)(v27 + 112);
  long long v34 = *(_OWORD *)(v27 + 128);
  uint64_t v153 = *(void *)(v27 + 144);
  v152[7] = v33;
  v152[8] = v34;
  v152[6] = v32;
  sub_1000B5FB4((uint64_t)v152);
  swift_bridgeObjectRelease();
  id v35 = [objc_allocWithZone((Class)DIAttributeDocumentScanRequirements) init];
  NSString v36 = String._bridgeToObjectiveC()();
  [v35 setType:v36];

  id v142 = (void (**)(void, void))v35;
  id v37 = [v35 type];
  uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v40 = v39;
  if (v38 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v40 == v41)
  {
    swift_bridgeObjectRelease_n();
    uint64_t v42 = v135[0];
LABEL_14:

    uint64_t v48 = 2;
    goto LABEL_15;
  }
  char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v42 = v135[0];
  if (v47) {
    goto LABEL_14;
  }
  uint64_t v125 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v127 = v126;
  if (v125 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v127 == v128)
  {
    swift_bridgeObjectRelease_n();
LABEL_71:

    uint64_t v48 = 8;
    goto LABEL_15;
  }
  char v129 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v129) {
    goto LABEL_71;
  }
  uint64_t v130 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v132 = v131;
  if (v130 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v132 == v133)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v134 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v134 & 1) == 0) {
      goto LABEL_16;
    }
  }
  uint64_t v48 = 4;
LABEL_15:
  *a3 |= v48;
LABEL_16:
  uint64_t v49 = v142;
  NSString v50 = String._bridgeToObjectiveC()();
  sub_1000B6040((uint64_t)v152);
  [v49 setUserMessage:v50];

  uint64_t v148 = v42;
  id v149 = v18;
  swift_bridgeObjectRetain();
  static CharacterSet.whitespaces.getter();
  sub_1000B5358();
  uint64_t v51 = StringProtocol.trimmingCharacters(in:)();
  Swift::String v53 = v52;
  Swift::String v54 = (void (*)(char *, uint64_t))*((void *)v141 + 1);
  uint64_t v55 = v143;
  v141 += 8;
  v54(v11, v143);
  swift_bridgeObjectRelease();
  uint64_t v148 = v51;
  id v149 = v53;
  uint64_t v150 = 120;
  unint64_t v151 = 0xE100000000000000;
  unint64_t v56 = (void *)StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  unint64_t v57 = v56[2];
  id v142 = v49;
  if (v57 < 2)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v58 = v56[4];
    unint64_t v59 = v56[5];
    NSString v60 = v49;
    swift_bridgeObjectRetain();
    uint64_t v61 = sub_1005D18B4(v58, v59);
    if (v62) {
      uint64_t v63 = 1280;
    }
    else {
      uint64_t v63 = v61;
    }
    [v60 setMinHeight:v63];

    if (v56[2] < 2uLL)
    {
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
      goto LABEL_81;
    }
    uint64_t v64 = v56[6];
    unint64_t v65 = v56[7];
    id v66 = v60;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v67 = sub_1005D18B4(v64, v65);
    if (v68) {
      uint64_t v69 = 720;
    }
    else {
      uint64_t v69 = v67;
    }
    [v66 setMinWidth:v69];

    uint64_t v55 = v143;
  }
  uint64_t v148 = v139;
  id v149 = v147;
  swift_bridgeObjectRetain();
  static CharacterSet.whitespaces.getter();
  uint64_t v70 = StringProtocol.trimmingCharacters(in:)();
  uint64_t v72 = v71;
  v54(v11, v55);
  swift_bridgeObjectRelease();
  uint64_t v148 = v70;
  id v149 = v72;
  uint64_t v150 = 120;
  unint64_t v151 = 0xE100000000000000;
  uint64_t v73 = (void *)StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  if (v73[2] < 2uLL)
  {
    swift_bridgeObjectRelease();
    id v76 = v142;
  }
  else
  {
    uint64_t v74 = v73[4];
    unint64_t v75 = v73[5];
    id v76 = v142;
    NSString v60 = v142;
    swift_bridgeObjectRetain();
    uint64_t v77 = sub_1005D18B4(v74, v75);
    if (v78) {
      uint64_t v79 = 1920;
    }
    else {
      uint64_t v79 = v77;
    }
    [v60 setPreferredHeight:v79];

    if (v73[2] < 2uLL) {
      goto LABEL_79;
    }
    uint64_t v80 = v73[6];
    unint64_t v81 = v73[7];
    id v82 = v60;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v83 = sub_1005D18B4(v80, v81);
    if (v84) {
      uint64_t v85 = 1080;
    }
    else {
      uint64_t v85 = v83;
    }
    [v82 setPreferredWidth:v85];

    uint64_t v55 = v143;
  }
  uint64_t v148 = v138;
  id v149 = v144;
  swift_bridgeObjectRetain();
  static CharacterSet.whitespaces.getter();
  uint64_t v86 = StringProtocol.trimmingCharacters(in:)();
  uint64_t v88 = v87;
  v54(v11, v55);
  swift_bridgeObjectRelease();
  uint64_t v148 = v86;
  id v149 = v88;
  uint64_t v150 = 58;
  unint64_t v151 = 0xE100000000000000;
  uint64_t v89 = (void *)StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  if (v89[2] < 2uLL)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v90 = v89[4];
    unint64_t v91 = v89[5];
    NSString v60 = v76;
    swift_bridgeObjectRetain();
    uint64_t v92 = sub_1005D18B4(v90, v91);
    if (v93) {
      uint64_t v94 = 4;
    }
    else {
      uint64_t v94 = v92;
    }
    [v60 setRatioHeight:v94];

    if (v89[2] < 2uLL) {
      goto LABEL_80;
    }
    uint64_t v95 = v89[6];
    unint64_t v96 = v89[7];
    id v97 = v60;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v98 = sub_1005D18B4(v95, v96);
    if (v99) {
      uint64_t v100 = 3;
    }
    else {
      uint64_t v100 = v98;
    }
    [v97 setRatioWidth:v100];
  }
  id v101 = objc_allocWithZone((Class)NSNumber);
  id v102 = v76;
  id v103 = [v101 initWithDouble:v21];
  [v102 setMaximumCompressionRatio:v103];

  [v102 setMinBorderPadding:v137];
  type metadata accessor for DIAttributeImageEncoding(0);
  id v104 = v102;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v104 setSupportedEncoding:isa];
  id v147 = v104;

  uint64_t v106 = *((void *)v146 + 2);
  if (v106)
  {
    uint64_t v107 = swift_bridgeObjectRetain() + 40;
    do
    {
      String.lowercased()();
      id v108 = v147;
      NSString v109 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v110 = [v108 supportedEncoding];
      uint64_t v111 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v111 = (uint64_t)sub_10010F514(0, *(void *)(v111 + 16) + 1, 1, (char *)v111);
      }
      unint64_t v113 = *(void *)(v111 + 16);
      unint64_t v112 = *(void *)(v111 + 24);
      if (v113 >= v112 >> 1) {
        uint64_t v111 = (uint64_t)sub_10010F514((char *)(v112 > 1), v113 + 1, 1, (char *)v111);
      }
      v107 += 16;
      *(void *)(v111 + 16) = v113 + 1;
      *(void *)(v111 + 8 * v113 + 32) = v109;
      Class v114 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v108 setSupportedEncoding:v114];

      --v106;
    }
    while (v106);
    swift_bridgeObjectRelease();
  }
  if (!v145)
  {
    NSString v122 = String._bridgeToObjectiveC()();
    id v123 = v147;
    [v147 setCountryCode:v122];

    NSString v60 = v123;
    uint64_t v124 = v136;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v124 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*v124 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    {
LABEL_65:
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      return;
    }
LABEL_81:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    goto LABEL_65;
  }
  uint64_t v115 = *(void *)(v145 + 16);
  if (v115)
  {
    uint64_t v116 = v145 + 40;
    swift_bridgeObjectRetain();
    uint64_t v117 = 1;
    uint64_t v118 = &stru_10071A000;
    long long v146 = (char *)&type metadata for Any + 8;
    uint64_t v119 = v136;
    do
    {
      NSString v60 = *(NSString *)(v116 - 8);
      swift_bridgeObjectRetain();
      [v147 v118[205].attr];
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_100025C28(0, &qword_1007225F0);
      if (swift_dynamicCast())
      {
        id v121 = (void *)v150;
        NSString v60 = String._bridgeToObjectiveC()();
        [v121 setCountryCode:v60];

        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((*v119 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v119 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_bridgeObjectRelease();
        uint64_t v118 = &stru_10071A000;
        if (v115 == v117)
        {
LABEL_63:

          swift_bridgeObjectRelease();
          return;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        if (v115 == v117) {
          goto LABEL_63;
        }
      }
      v116 += 16;
    }
    while (!__OFADD__(v117++, 1));
    __break(1u);
    goto LABEL_78;
  }
}

void sub_100084160()
{
  uint64_t v1 = v0;
  id v2 = [v0 attributes];
  sub_100025C28(0, &qword_1007223C0);
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v3 >> 62))
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    id v8 = [v1 title];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v9 = [v1 subTitle];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v10 = [v1 page];
    id v11 = objc_allocWithZone((Class)DIPage);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_release();
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v11 initWithAttributes:isa title:v13 subTitle:v14 page:v10];

    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v4) {
    goto LABEL_14;
  }
LABEL_3:
  if (v4 >= 1)
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      if ((v3 & 0xC000000000000001) != 0) {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v6 = *(id *)(v3 + 8 * i + 32);
      }
      uint64_t v7 = v6;
      if ([v6 holdLocally])
      {
      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
    }
    goto LABEL_14;
  }
  __break(1u);
}

void (*sub_1000843EC(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  id v6 = malloc(0x58uLL);
  *a1 = v6;
  v6[8] = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  v6[9] = sub_1000846A4(v6);
  v6[10] = sub_10008450C(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_100084498;
}

void sub_100084498(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  id v2 = *(void (**)(void *, void))(*(void *)a1 + 72);
  (*(void (**)(void))(*(void *)a1 + 80))();
  swift_bridgeObjectRelease();
  v2(v1, 0);

  free(v1);
}

void (*sub_10008450C(void *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t v5 = v4;
  id v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  v10[3] = v4;
  v10[1] = a2;
  uint64_t v11 = *v4;
  unint64_t v13 = sub_100590548(a2, a3);
  *((unsigned char *)v10 + 40) = v12 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    char v17 = v12;
    uint64_t v18 = *(void *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4] = v13;
      if (v17)
      {
LABEL_8:
        uint64_t v19 = *(void *)(*(void *)(*v5 + 56) + 8 * v13);
LABEL_12:
        void *v10 = v19;
        return sub_100084654;
      }
LABEL_11:
      uint64_t v19 = 0;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_10016B150();
      goto LABEL_7;
    }
    sub_100165DA4(v16, a4 & 1);
    unint64_t v20 = sub_100590548(a2, a3);
    if ((v17 & 1) == (v21 & 1))
    {
      unint64_t v13 = v20;
      v10[4] = v20;
      if (v17) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_100084654(uint64_t **a1)
{
  uint64_t v1 = *a1;
  sub_1000846E0(*a1, *((unsigned char *)*a1 + 40), (uint64_t *)(*a1)[3], (*a1)[4], (*a1)[1], (*a1)[2]);
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t (*sub_1000846A4(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  *uint64_t v1 = 0x8000000000000000;
  return sub_1000846D4;
}

uint64_t sub_1000846D4(uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

uint64_t sub_1000846E0(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = *a1;
  if (*a1)
  {
    if (a2)
    {
      *(void *)(*(void *)(*a3 + 56) + 8 * a4) = v8;
    }
    else
    {
      sub_1005641B0(a4, a5, a6, v8, *a3);
      swift_bridgeObjectRetain();
    }
  }
  else if (a2)
  {
    swift_arrayDestroy();
    sub_100561134(a4, *a3);
  }

  return swift_bridgeObjectRetain();
}

uint64_t sub_100084790(uint64_t a1)
{
  uint64_t v2 = __chkstk_darwin(a1);
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  char v7 = v6 & 1;
  sub_1000ABB90(v9);
  sub_1000BEA14((uint64_t)v9, v1 + 32, &qword_1007222F8);
  *(_OWORD *)(v1 + 6024) = 0u;
  *(_OWORD *)(v1 + 6040) = 0u;
  *(_OWORD *)(v1 + 6049) = 0u;
  *(void *)(v1 + 6072) = sub_10015D18C((uint64_t)&_swiftEmptyArrayStorage);
  *(void *)(v1 + 6080) = &_swiftEmptyArrayStorage;
  *(void *)(v1 + 6088) = sub_10015D198((uint64_t)&_swiftEmptyArrayStorage);
  *(void *)(v1 + 6096) = sub_10015D198((uint64_t)&_swiftEmptyArrayStorage);
  *(void *)(v1 + 16) = v5;
  *(void *)(v1 + 24) = v4;
  sub_1000BEA14(v1 + 32, (uint64_t)v10, &qword_1007222F8);
  sub_1000BEA14((uint64_t)v9, v1 + 32, &qword_1007222F8);
  swift_retain();
  swift_retain();
  sub_1000AF47C(v10, sub_1000ABBA4);
  *(void *)(v1 + 5960) = 0;
  *(_OWORD *)(v1 + 5968) = 0u;
  *(_OWORD *)(v1 + 6000) = 0u;
  *(void *)(v1 + 5984) = &_swiftEmptyArrayStorage;
  *(void *)(v1 + 5992) = &_swiftEmptyArrayStorage;
  *(unsigned char *)(v1 + 6016) = v7;
  return v1;
}

uint64_t sub_1000848D8(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    unint64_t v4 = 0;
    uint64_t v25 = result + 32;
    uint64_t v5 = a2 + 56;
    char v6 = _swiftEmptyArrayStorage;
    unint64_t v26 = *(void *)(result + 16);
    while (1)
    {
      uint64_t v24 = v6;
      if (v4 <= v2) {
        unint64_t v7 = v2;
      }
      else {
        unint64_t v7 = v4;
      }
      unint64_t v8 = v4;
      while (1)
      {
        if (v8 == v7)
        {
          __break(1u);
          return result;
        }
        unint64_t v4 = v8 + 1;
        if (*(void *)(a2 + 16)) {
          break;
        }
LABEL_8:
        unint64_t v8 = v4;
        if (v4 == v2) {
          return (uint64_t)v24;
        }
      }
      id v9 = (uint64_t *)(v25 + 16 * v8);
      uint64_t v11 = *v9;
      uint64_t v10 = v9[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v12 = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(a2 + 32);
      unint64_t v14 = v12 & ~v13;
      if (((*(void *)(v5 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
        goto LABEL_7;
      }
      uint64_t v15 = *(void *)(a2 + 48);
      uint64_t v16 = (void *)(v15 + 16 * v14);
      BOOL v17 = *v16 == v11 && v16[1] == v10;
      if (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
LABEL_24:
      char v6 = v24;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = sub_10011144C(0, v24[2] + 1, 1);
        char v6 = v24;
      }
      unint64_t v22 = v6[2];
      unint64_t v21 = v6[3];
      if (v22 >= v21 >> 1)
      {
        uint64_t result = sub_10011144C(v21 > 1, v22 + 1, 1);
        char v6 = v24;
      }
      _OWORD v6[2] = v22 + 1;
      unint64_t v23 = &v6[2 * v22];
      v23[4] = v11;
      v23[5] = v10;
      unint64_t v2 = v26;
      if (v4 == v26) {
        return (uint64_t)v6;
      }
    }
    uint64_t v18 = ~v13;
    while (1)
    {
      unint64_t v14 = (v14 + 1) & v18;
      if (((*(void *)(v5 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
        break;
      }
      uint64_t v19 = (void *)(v15 + 16 * v14);
      BOOL v20 = *v19 == v11 && v19[1] == v10;
      if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_24;
      }
    }
LABEL_7:
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v2 = v26;
    goto LABEL_8;
  }
  return (uint64_t)_swiftEmptyArrayStorage;
}

uint64_t sub_100084AF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[209] = a6;
  v6[208] = a5;
  v6[207] = a4;
  v6[206] = a3;
  v6[205] = a2;
  v6[204] = a1;
  uint64_t v7 = type metadata accessor for DIPError.Code();
  v6[210] = v7;
  v6[211] = *(void *)(v7 - 8);
  v6[212] = swift_task_alloc();
  return _swift_task_switch(sub_100084BC4, 0, 0);
}

uint64_t sub_100084BC4()
{
  if (qword_10071F4E0 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 1704) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100084CA4;
  uint64_t v2 = *(void *)(v0 + 1664);
  return sub_1002AA1B8(v0 + 880, 0, 0, v2, 1);
}

uint64_t sub_100084CA4()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100084DA0, 0, 0);
}

uint64_t sub_100084DA0()
{
  sub_1000BEA14(v0 + 880, v0 + 448, &qword_100722350);
  if (sub_100044CCC(v0 + 448) == 1)
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 1688) + 104))(*(void *)(v0 + 1696), enum case for DIPError.Code.unexpectedDaemonState(_:), *(void *)(v0 + 1680));
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000AF434((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
    return v1();
  }
  uint64_t v3 = v0 + 16;
  uint64_t isUniquelyReferenced_nonNull_native = v0 + 1624;
  memcpy((void *)(v0 + 16), (const void *)(v0 + 448), 0x1B0uLL);
  *(void *)(v0 + 1624) = 0;
  if (qword_10071F580 != -1) {
LABEL_30:
  }
    swift_once();
  uint64_t v5 = *(void *)(v0 + 1632);
  id v6 = (id)qword_1007607E8;
  sub_1004E7414(0, (uint64_t)v6, (void *)isUniquelyReferenced_nonNull_native);

  uint64_t v7 = (void *)sub_10015D1A4((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v8 = *(void *)(v5 + 16);
  uint64_t v71 = isUniquelyReferenced_nonNull_native;
  if (!v8)
  {
LABEL_22:
    *(void *)(v0 + 1712) = v7;
    uint64_t v62 = *(void *)(v0 + 1672);
    uint64_t v63 = *(void *)(v0 + 1648);
    *(void *)(v0 + 1616) = *(void *)(v0 + 1640);
    uint64_t v64 = swift_task_alloc();
    *(void *)(v0 + 1720) = v64;
    long long v65 = *(_OWORD *)(v0 + 1656);
    *(void *)(v64 + 16) = v7;
    *(void *)(v64 + 24) = v63;
    *(_OWORD *)(v64 + 32) = v65;
    *(void *)(v64 + 48) = v62;
    *(void *)(v64 + 56) = v3;
    *(void *)(v64 + 64) = v71;
    id v66 = (void *)swift_task_alloc();
    *(void *)(v0 + 1728) = v66;
    uint64_t v67 = sub_100007764(&qword_100722410);
    uint64_t v68 = sub_100025C28(0, &qword_1007225B0);
    uint64_t v69 = sub_1000B6120(&qword_1007225B8, &qword_100722410);
    *id v66 = v0;
    v66[1] = sub_1000853BC;
    return Sequence.asyncMap<A>(_:)(&unk_1007225A8, v64, v67, v68, v69);
  }
  uint64_t v70 = v3;
  uint64_t v72 = v0 + 1312;
  uint64_t v9 = v0 + 1464;
  uint64_t v10 = swift_bridgeObjectRetain();
  long long v11 = *(_OWORD *)(v10 + 48);
  *(_OWORD *)(v0 + 1464) = *(_OWORD *)(v10 + 32);
  *(_OWORD *)(v0 + 1480) = v11;
  long long v12 = *(_OWORD *)(v10 + 64);
  long long v13 = *(_OWORD *)(v10 + 80);
  long long v14 = *(_OWORD *)(v10 + 112);
  *(_OWORD *)(v0 + 1528) = *(_OWORD *)(v10 + 96);
  *(_OWORD *)(v0 + 1544) = v14;
  *(_OWORD *)(v0 + 1496) = v12;
  *(_OWORD *)(v0 + 1512) = v13;
  long long v15 = *(_OWORD *)(v10 + 128);
  long long v16 = *(_OWORD *)(v10 + 144);
  long long v17 = *(_OWORD *)(v10 + 160);
  *(void *)(v0 + 1608) = *(void *)(v10 + 176);
  *(_OWORD *)(v0 + 1576) = v16;
  *(_OWORD *)(v0 + 1592) = v17;
  *(_OWORD *)(v0 + 1560) = v15;
  uint64_t v18 = v10 + 184;
  uint64_t v73 = v0;
  for (uint64_t i = v8 - 1; ; --i)
  {
    uint64_t v3 = *(void *)(v0 + 1472);
    uint64_t v19 = *(void *)(v0 + 1464);
    sub_1000B53AC(v9);
    swift_bridgeObjectRetain();
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v21 = sub_100590548(v19, v3);
    uint64_t v22 = v7[2];
    BOOL v23 = (v20 & 1) == 0;
    uint64_t v24 = v22 + v23;
    if (__OFADD__(v22, v23))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    char v25 = v20;
    if (v7[3] < v24) {
      break;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      if (v20) {
        goto LABEL_15;
      }
    }
    else
    {
      sub_10016AF28();
      if (v25)
      {
LABEL_15:
        uint64_t v28 = v7[7] + 152 * v21;
        long long v29 = *(_OWORD *)(v28 + 16);
        *(_OWORD *)uint64_t v72 = *(_OWORD *)v28;
        *(_OWORD *)(v72 + 16) = v29;
        long long v30 = *(_OWORD *)(v28 + 80);
        long long v32 = *(_OWORD *)(v28 + 32);
        long long v31 = *(_OWORD *)(v28 + 48);
        *(_OWORD *)(v72 + 64) = *(_OWORD *)(v28 + 64);
        *(_OWORD *)(v72 + 80) = v30;
        *(_OWORD *)(v72 + 32) = v32;
        *(_OWORD *)(v72 + 48) = v31;
        long long v34 = *(_OWORD *)(v28 + 112);
        long long v33 = *(_OWORD *)(v28 + 128);
        long long v35 = *(_OWORD *)(v28 + 96);
        *(void *)(v72 + 144) = *(void *)(v28 + 144);
        *(_OWORD *)(v72 + 112) = v34;
        *(_OWORD *)(v72 + 128) = v33;
        *(_OWORD *)(v72 + 96) = v35;
        sub_1000B5454(v72);
        long long v36 = *(_OWORD *)(v9 + 16);
        *(_OWORD *)uint64_t v28 = *(_OWORD *)v9;
        *(_OWORD *)(v28 + 16) = v36;
        long long v37 = *(_OWORD *)(v9 + 80);
        long long v39 = *(_OWORD *)(v9 + 32);
        long long v38 = *(_OWORD *)(v9 + 48);
        *(_OWORD *)(v28 + 64) = *(_OWORD *)(v9 + 64);
        *(_OWORD *)(v28 + 80) = v37;
        *(_OWORD *)(v28 + 32) = v39;
        *(_OWORD *)(v28 + 48) = v38;
        long long v41 = *(_OWORD *)(v9 + 112);
        long long v40 = *(_OWORD *)(v9 + 128);
        long long v42 = *(_OWORD *)(v9 + 96);
        *(void *)(v28 + 144) = *(void *)(v9 + 144);
        *(_OWORD *)(v28 + 112) = v41;
        *(_OWORD *)(v28 + 128) = v40;
        *(_OWORD *)(v28 + 96) = v42;
        goto LABEL_19;
      }
    }
LABEL_17:
    v7[(v21 >> 6) + 8] |= 1 << v21;
    long long v43 = (uint64_t *)(v7[6] + 16 * v21);
    *long long v43 = v19;
    v43[1] = v3;
    uint64_t v44 = v7[7] + 152 * v21;
    uint64_t v45 = *(void *)(v9 + 144);
    long long v47 = *(_OWORD *)(v9 + 112);
    long long v46 = *(_OWORD *)(v9 + 128);
    *(_OWORD *)(v44 + 96) = *(_OWORD *)(v9 + 96);
    *(_OWORD *)(v44 + 112) = v47;
    *(_OWORD *)(v44 + 128) = v46;
    *(void *)(v44 + 144) = v45;
    long long v49 = *(_OWORD *)(v9 + 64);
    long long v48 = *(_OWORD *)(v9 + 80);
    long long v50 = *(_OWORD *)(v9 + 48);
    *(_OWORD *)(v44 + 32) = *(_OWORD *)(v9 + 32);
    *(_OWORD *)(v44 + 48) = v50;
    *(_OWORD *)(v44 + 64) = v49;
    *(_OWORD *)(v44 + 80) = v48;
    long long v51 = *(_OWORD *)(v9 + 16);
    *(_OWORD *)uint64_t v44 = *(_OWORD *)v9;
    *(_OWORD *)(v44 + 16) = v51;
    uint64_t v52 = v7[2];
    BOOL v53 = __OFADD__(v52, 1);
    uint64_t v54 = v52 + 1;
    if (v53) {
      goto LABEL_29;
    }
    v7[2] = v54;
    swift_bridgeObjectRetain();
LABEL_19:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v0 = v73;
    if (!i)
    {
      swift_bridgeObjectRelease();
      uint64_t v3 = v70;
      goto LABEL_22;
    }
    long long v55 = *(_OWORD *)(v18 + 16);
    *(_OWORD *)uint64_t v9 = *(_OWORD *)v18;
    *(_OWORD *)(v9 + 16) = v55;
    long long v56 = *(_OWORD *)(v18 + 32);
    long long v57 = *(_OWORD *)(v18 + 48);
    long long v58 = *(_OWORD *)(v18 + 80);
    *(_OWORD *)(v9 + 64) = *(_OWORD *)(v18 + 64);
    *(_OWORD *)(v9 + 80) = v58;
    *(_OWORD *)(v9 + 32) = v56;
    *(_OWORD *)(v9 + 48) = v57;
    long long v59 = *(_OWORD *)(v18 + 96);
    long long v60 = *(_OWORD *)(v18 + 112);
    long long v61 = *(_OWORD *)(v18 + 128);
    *(void *)(v9 + 144) = *(void *)(v18 + 144);
    *(_OWORD *)(v9 + 112) = v60;
    *(_OWORD *)(v9 + 128) = v61;
    *(_OWORD *)(v9 + 96) = v59;
    v18 += 152;
  }
  sub_1001658E0(v24, isUniquelyReferenced_nonNull_native);
  unint64_t v26 = sub_100590548(v19, v3);
  if ((v25 & 1) == (v27 & 1))
  {
    unint64_t v21 = v26;
    if (v25) {
      goto LABEL_15;
    }
    goto LABEL_17;
  }
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_1000853BC(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 1736) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100085574;
  }
  else
  {
    swift_bridgeObjectRelease();
    *(void *)(v4 + 1744) = a1;
    sub_100044D90((uint64_t *)(v4 + 880));
    swift_task_dealloc();
    uint64_t v5 = sub_100085500;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100085500()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 1744);
  return v1(v2);
}

uint64_t sub_100085574()
{
  swift_bridgeObjectRelease();
  sub_100044D90((uint64_t *)(v0 + 880));
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100085600(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 112))
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v4 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for LegacySPWorkflow(0);
      uint64_t v5 = swift_dynamicCastClass();
      if (v5)
      {
        id v6 = &OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_recipientCertificates;
LABEL_8:
        uint64_t v7 = *(void *)(v5 + *v6);
        swift_bridgeObjectRetain();
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  type metadata accessor for LegacyINOWorkflow(0);
  uint64_t v5 = swift_dynamicCastClass();
  if (v5)
  {
    id v6 = &OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_recipientCertificates;
    goto LABEL_8;
  }
LABEL_9:
  uint64_t v7 = 0;
LABEL_10:
  uint64_t v8 = *(void *)(a1 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_defaultEncryptionCertificate + 8);
  if (!v8)
  {
    swift_bridgeObjectRelease();
LABEL_26:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v38[0] = *a2;
    *a2 = 0x8000000000000000;
    sub_100562864((uint64_t)&_swiftEmptySetSingleton, 0x746C7561666564, 0xE700000000000000, isUniquelyReferenced_nonNull_native);
    *a2 = *(void *)&v38[0];
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v28 = *(void *)(a1 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_userInputFields);
    uint64_t v29 = *(void *)(v28 + 16);
    if (v29)
    {
      swift_bridgeObjectRetain();
      long long v30 = (Swift::Int *)(v28 + 40);
      do
      {
        Swift::Int v31 = *(v30 - 1);
        Swift::Int v32 = *v30;
        long long v33 = sub_10006B094(v38, 0x746C7561666564, 0xE700000000000000);
        if (*v34)
        {
          swift_bridgeObjectRetain();
          sub_1005D83B4(&v36, v31, v32);
          ((void (*)(_OWORD *, void))v33)(v38, 0);
          swift_bridgeObjectRelease();
        }
        else
        {
          ((void (*)(_OWORD *, void))v33)(v38, 0);
        }
        v30 += 19;
        --v29;
      }
      while (v29);
      return swift_bridgeObjectRelease();
    }
    return result;
  }
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v44 = *(void *)(a1 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_defaultEncryptionCertificate);
  sub_10006653C(v7, a2);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a1 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_userInputFields);
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    uint64_t v35 = v8;
    swift_bridgeObjectRetain();
    uint64_t v12 = v11 - 1;
    for (uint64_t i = 32; ; i += 152)
    {
      long long v14 = *(_OWORD *)(v10 + i + 16);
      v38[0] = *(_OWORD *)(v10 + i);
      v38[1] = v14;
      long long v15 = *(_OWORD *)(v10 + i + 32);
      long long v16 = *(_OWORD *)(v10 + i + 48);
      long long v17 = *(_OWORD *)(v10 + i + 80);
      v38[4] = *(_OWORD *)(v10 + i + 64);
      long long v39 = v17;
      void v38[2] = v15;
      v38[3] = v16;
      long long v18 = *(_OWORD *)(v10 + i + 96);
      long long v19 = *(_OWORD *)(v10 + i + 112);
      long long v20 = *(_OWORD *)(v10 + i + 128);
      uint64_t v43 = *(void *)(v10 + i + 144);
      long long v41 = v19;
      long long v42 = v20;
      long long v40 = v18;
      long long v21 = v38[0];
      uint64_t v22 = *((void *)&v18 + 1);
      if (*((void *)&v18 + 1)) {
        break;
      }
      uint64_t v22 = *((void *)&v39 + 1);
      if (*((void *)&v39 + 1))
      {
        uint64_t v23 = v39;
        goto LABEL_18;
      }
      sub_1000B53AC((uint64_t)v38);
      uint64_t v22 = v35;
      swift_bridgeObjectRetain();
      uint64_t v24 = v44;
LABEL_19:
      char v25 = sub_10006B094(&v36, v24, v22);
      if (*v26)
      {
        swift_bridgeObjectRetain();
        sub_1005D83B4(&v37, v21, *((Swift::Int *)&v21 + 1));
        ((void (*)(Swift::Int *, void))v25)(&v36, 0);
        swift_bridgeObjectRelease();
      }
      else
      {
        ((void (*)(Swift::Int *, void))v25)(&v36, 0);
      }
      swift_bridgeObjectRelease();
      sub_1000B5454((uint64_t)v38);
      if (!v12) {
        return swift_bridgeObjectRelease();
      }
      --v12;
    }
    uint64_t v23 = v40;
LABEL_18:
    sub_1000B53AC((uint64_t)v38);
    swift_bridgeObjectRetain();
    uint64_t v24 = v23;
    goto LABEL_19;
  }
  return result;
}

uint64_t sub_1000859B0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7265566C65646F6DLL && a2 == 0xEC0000006E6F6973;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x616353746E6F7266 && a2 == 0xE90000000000006ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E6163536B636162 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x746E656D75636F64 && a2 == 0xED0000746E6F7246 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x746E656D75636F64 && a2 == 0xEC0000006B636142 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6569666C6573 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7373656E6576696CLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x65766973736170 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000100632860 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x7461726F6C707865 && a2 == 0xEB000000006E6F69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x6953726566667562 && a2 == 0xEA0000000000657ALL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x6957656C62617473 && a2 == 0xEC000000776F646ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x72466E6163536469 && a2 == 0xEF65746152656D61 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x6172466F65646976 && a2 == 0xEE0065746152656DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x547463655278616DLL && a2 == 0xED00006C65766172)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 14;
    }
    else {
      return 15;
    }
  }
}

void *sub_1000860A8(uint64_t a1)
{
  BOOL v2 = (void *)__chkstk_darwin(a1);
  char v4 = v3;
  uint64_t v5 = sub_100007764(&qword_100722698);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v2[3];
  uint64_t v43 = v2;
  sub_10000C728(v2, v9);
  sub_10006E178();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    uint64_t v62 = v1;
    int v11 = 0;
    unsigned int v12 = 0;
  }
  else
  {
    long long v41 = v4;
    uint64_t v42 = v6;
    v45[0] = 0;
    uint64_t v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v15 = v14;
    v61[0] = v10;
    v61[1] = v14;
    v59[839] = 1;
    uint64_t v16 = v10;
    sub_1000B6308();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v39 = v16;
    uint64_t v40 = v15;
    sub_1000BEA14((uint64_t)&v60, (uint64_t)v59, &qword_100721310);
    sub_1000BEA14((uint64_t)v59, (uint64_t)&v61[2], &qword_100721310);
    v57[839] = 2;
    sub_1000B635C(v59, sub_1000B4EA4);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14((uint64_t)&v58, (uint64_t)v57, &qword_100721310);
    sub_1000BEA14((uint64_t)v57, (uint64_t)&v61[106], &qword_100721310);
    v55[839] = 3;
    sub_1000B635C(v57, sub_1000B4EA4);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14((uint64_t)&v56, (uint64_t)v55, &qword_100721310);
    sub_1000BEA14((uint64_t)v55, (uint64_t)&v61[210], &qword_100721310);
    v53[839] = 4;
    sub_1000B635C(v55, sub_1000B4EA4);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14((uint64_t)&v54, (uint64_t)v53, &qword_100721310);
    sub_1000BEA14((uint64_t)v53, (uint64_t)&v61[314], &qword_100721310);
    v51[839] = 5;
    sub_1000B635C(v53, sub_1000B4EA4);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14((uint64_t)&v52, (uint64_t)v51, &qword_100721310);
    sub_1000BEA14((uint64_t)v51, (uint64_t)&v61[418], &qword_100721310);
    v49[839] = 6;
    sub_1000B635C(v51, sub_1000B4EA4);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14((uint64_t)&v50, (uint64_t)v49, &qword_100721310);
    sub_1000BEA14((uint64_t)v49, (uint64_t)&v61[522], &qword_100721310);
    v47[839] = 7;
    sub_1000B635C(v49, sub_1000B4EA4);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14((uint64_t)&v48, (uint64_t)v47, &qword_100721310);
    sub_1000BEA14((uint64_t)v47, (uint64_t)&v61[626], &qword_100721310);
    sub_100007764(&qword_1007268F0);
    LOBYTE(v44[0]) = 8;
    sub_1000B635C(v47, sub_1000B4EA4);
    sub_1000AB18C((unint64_t *)&qword_1007222C8, &qword_1007268F0);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v62 = 0;
    uint64_t v17 = *(void *)v45;
    v61[730] = *(void *)v45;
    v45[0] = 9;
    swift_bridgeObjectRetain();
    uint64_t v18 = v62;
    unint64_t v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v62 = v18;
    if (!v18)
    {
      int v20 = v19;
      LODWORD(v61[731]) = v19;
      uint64_t v36 = HIDWORD(v19) & 1;
      BYTE4(v61[731]) = BYTE4(v19) & 1;
      v45[0] = 10;
      uint64_t v38 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      int v37 = v21;
      uint64_t v62 = 0;
      v61[732] = v38;
      LOBYTE(v61[733]) = v21 & 1;
      v45[0] = 11;
      uint64_t v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      int v34 = v22;
      uint64_t v62 = 0;
      v61[734] = v35;
      LOBYTE(v61[735]) = v22 & 1;
      v45[0] = 12;
      uint64_t v33 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      int v32 = v23;
      uint64_t v62 = 0;
      v61[736] = v33;
      LOBYTE(v61[737]) = v23 & 1;
      v45[0] = 13;
      uint64_t v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v62 = 0;
      v61[738] = v31;
      int v30 = v24 & 1;
      LOBYTE(v61[739]) = v24 & 1;
      char v46 = 14;
      unint64_t v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v62 = 0;
      uint64_t v29 = (char *)&v44[731] + 4;
      int v26 = v25;
      uint64_t v27 = HIDWORD(v25) & 1;
      (*(void (**)(char *, uint64_t))(v42 + 8))(v8, v5);
      HIDWORD(v61[739]) = v26;
      LOBYTE(v61[740]) = v27;
      v44[0] = v39;
      v44[1] = v40;
      sub_1000BEA14((uint64_t)v59, (uint64_t)&v44[2], &qword_100721310);
      sub_1000BEA14((uint64_t)v57, (uint64_t)&v44[106], &qword_100721310);
      sub_1000BEA14((uint64_t)v55, (uint64_t)&v44[210], &qword_100721310);
      sub_1000BEA14((uint64_t)v53, (uint64_t)&v44[314], &qword_100721310);
      sub_1000BEA14((uint64_t)v51, (uint64_t)&v44[418], &qword_100721310);
      sub_1000BEA14((uint64_t)v49, (uint64_t)&v44[522], &qword_100721310);
      sub_1000BEA14((uint64_t)v47, (uint64_t)&v44[626], &qword_100721310);
      v44[730] = v17;
      LODWORD(v44[731]) = v20;
      uint64_t v28 = v29;
      *uint64_t v29 = v36;
      v44[732] = v38;
      v28[12] = v37 & 1;
      v44[734] = v35;
      v28[28] = v34 & 1;
      v44[736] = v33;
      v28[44] = v32 & 1;
      v44[738] = v31;
      v28[60] = v30;
      HIDWORD(v44[739]) = v26;
      v28[68] = v27;
      sub_1000B652C((uint64_t)v44);
      swift_bridgeObjectRelease();
      sub_1000B635C(v47, sub_1000AE894);
      sub_1000B635C(v49, sub_1000AE894);
      sub_1000B635C(v51, sub_1000AE894);
      sub_1000B635C(v53, sub_1000AE894);
      sub_1000B635C(v55, sub_1000AE894);
      sub_1000B635C(v57, sub_1000AE894);
      sub_1000B635C(v59, sub_1000AE894);
      swift_bridgeObjectRelease();
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v43);
      memcpy(v45, v61, sizeof(v45));
      sub_1000B8E50((uint64_t)v45);
      return memcpy(v41, v44, 0x1721uLL);
    }
    (*(void (**)(char *, uint64_t))(v42 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    sub_1000B635C(v47, sub_1000AE894);
    sub_1000B635C(v49, sub_1000AE894);
    sub_1000B635C(v51, sub_1000AE894);
    sub_1000B635C(v53, sub_1000AE894);
    sub_1000B635C(v55, sub_1000AE894);
    sub_1000B635C(v57, sub_1000AE894);
    sub_1000B635C(v59, sub_1000AE894);
    swift_bridgeObjectRelease();
    unsigned int v12 = 511;
    int v11 = 1;
  }
  uint64_t result = (void *)_s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v43);
  if (v12)
  {
    uint64_t result = (void *)swift_bridgeObjectRelease();
    if ((v12 & 2) != 0) {
      goto LABEL_19;
    }
LABEL_8:
    if ((v12 & 4) != 0) {
      goto LABEL_20;
    }
LABEL_9:
    if (((v12 >> 3) & 1) == 0) {
      goto LABEL_21;
    }
LABEL_10:
    sub_1000BEA14((uint64_t)&v61[210], (uint64_t)v45, &qword_100721310);
    uint64_t result = (void *)sub_1000B635C(v45, sub_1000AE894);
    if ((v12 >> 4)) {
      goto LABEL_22;
    }
LABEL_11:
    if (((v12 >> 5) & 1) == 0) {
      goto LABEL_23;
    }
LABEL_12:
    sub_1000BEA14((uint64_t)&v61[418], (uint64_t)v45, &qword_100721310);
    uint64_t result = (void *)sub_1000B635C(v45, sub_1000AE894);
    if ((v12 >> 6)) {
      goto LABEL_24;
    }
LABEL_13:
    if (((v12 >> 7) & 1) == 0) {
      goto LABEL_25;
    }
    goto LABEL_14;
  }
  if ((v12 & 2) == 0) {
    goto LABEL_8;
  }
LABEL_19:
  sub_1000BEA14((uint64_t)&v61[2], (uint64_t)v45, &qword_100721310);
  uint64_t result = (void *)sub_1000B635C(v45, sub_1000AE894);
  if (((v12 >> 2) & 1) == 0) {
    goto LABEL_9;
  }
LABEL_20:
  sub_1000BEA14((uint64_t)&v61[106], (uint64_t)v45, &qword_100721310);
  uint64_t result = (void *)sub_1000B635C(v45, sub_1000AE894);
  if ((v12 >> 3)) {
    goto LABEL_10;
  }
LABEL_21:
  if (((v12 >> 4) & 1) == 0) {
    goto LABEL_11;
  }
LABEL_22:
  sub_1000BEA14((uint64_t)&v61[314], (uint64_t)v45, &qword_100721310);
  uint64_t result = (void *)sub_1000B635C(v45, sub_1000AE894);
  if ((v12 >> 5)) {
    goto LABEL_12;
  }
LABEL_23:
  if (((v12 >> 6) & 1) == 0) {
    goto LABEL_13;
  }
LABEL_24:
  sub_1000BEA14((uint64_t)&v61[522], (uint64_t)v45, &qword_100721310);
  uint64_t result = (void *)sub_1000B635C(v45, sub_1000AE894);
  if (((v12 >> 7) & 1) == 0)
  {
LABEL_25:
    if (!v11) {
      return result;
    }
    return (void *)swift_bridgeObjectRelease();
  }
LABEL_14:
  sub_1000BEA14((uint64_t)&v61[626], (uint64_t)v45, &qword_100721310);
  uint64_t result = (void *)sub_1000B635C(v45, sub_1000AE894);
  if (v11) {
    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1000872D4()
{
  unint64_t result = qword_100721340;
  if (!qword_100721340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100721340);
  }
  return result;
}

unint64_t sub_100087328()
{
  unint64_t result = qword_100721360;
  if (!qword_100721360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100721360);
  }
  return result;
}

unint64_t sub_10008737C()
{
  unint64_t result = qword_100721380;
  if (!qword_100721380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100721380);
  }
  return result;
}

unint64_t sub_1000873D0()
{
  unint64_t result = qword_100721390;
  if (!qword_100721390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100721390);
  }
  return result;
}

uint64_t sub_100087424(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656E697272756C62 && a2 == 0xEA00000000007373;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x657275736F707865 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7473694464726163 && a2 == 0xEE006E6F6974726FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000100632F10 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000100632F30 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6374695064616568 && a2 == 0xE900000000000068 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6C6C6F5264616568 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x77615964616568 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x73656361466D756ELL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x65676E615278756CLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000100632F50 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000100632F70 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000100632F90 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000100632FB0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000100632FD0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x666E6F4365636166 && a2 == 0xEE0065636E656469 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x75516569666C6573 && a2 == 0xED00007974696C61 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0x746E656D75636F64 && a2 == 0xEC000000657A6953 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000100632FF0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0x746E656D75636F64 && a2 == 0xEC00000077656B53 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0x666972447466656CLL && a2 == 0xE900000000000074 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 0x6972447468676972 && a2 == 0xEA00000000007466 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else if (a1 == 0x74666972447075 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 22;
  }
  else if (a1 == 0x666972446E776F64 && a2 == 0xE900000000000074 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 23;
  }
  else if (a1 == 0x6544373134666470 && a2 == 0xEE00646574636574 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 24;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000100633010 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 25;
  }
  else if (a1 == 0x61436F7475417369 && a2 == 0xEE00646572757470 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 26;
  }
  else if (a1 == 0x5465727574706163 && a2 == 0xEB00000000656D69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 27;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000100633030 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 28;
  }
  else if (a1 == 0x6556746567726174 && a2 == 0xEE00736563697472 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 29;
  }
  else if (a1 == 0x74614D797A7A7566 && a2 == 0xED0000676E696863 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 30;
  }
  else if (a1 == 0x7373656E6576696CLL && a2 == 0xED00006574756843 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 31;
  }
  else if (a1 == 0x456873616C467369 && a2 == 0xEE0064656C62616ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 32;
  }
  else if (a1 == 0x6F7779654B72636FLL && a2 == 0xEB00000000736472 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 33;
  }
  else if (a1 == 0x5378656C706D6F63 && a2 == 0xEE00736C616E6769)
  {
    swift_bridgeObjectRelease();
    return 34;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 34;
    }
    else {
      return 35;
    }
  }
}

void *sub_100088354@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v195 = sub_100007764(&qword_1007222D0);
  uint64_t v5 = *(void *)(v195 - 8);
  __chkstk_darwin(v195);
  uint64_t v7 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1000A8E38();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    uint64_t v360 = v2;
    LODWORD(v195) = 0;
    unint64_t v9 = 0;
  }
  else
  {
    uint64_t v194 = v5;
    LOBYTE(v196[0]) = 0;
    unint64_t v8 = sub_1000AB1FC();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v191 = a2;
    unint64_t v193 = (unint64_t)a1;
    uint64_t v19 = v197;
    uint64_t v20 = v198;
    uint64_t v21 = v199;
    unint64_t v22 = v8;
    LODWORD(v8) = v200;
    LOBYTE(v196[0]) = 1;
    sub_1000AB250(v197);
    uint64_t v192 = v22;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v107 = v8;
    uint64_t v105 = v20;
    uint64_t v106 = v21;
    uint64_t v108 = v19;
    uint64_t v23 = v197;
    uint64_t v24 = v198;
    uint64_t v25 = v199;
    LODWORD(v19) = v200;
    LOBYTE(v196[0]) = 2;
    sub_1000AB250(v197);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v101 = v19;
    uint64_t v102 = v25;
    uint64_t v103 = v23;
    uint64_t v104 = v24;
    uint64_t v26 = v198;
    uint64_t v27 = v199;
    LODWORD(v24) = v200;
    LOBYTE(v196[0]) = 3;
    uint64_t v100 = v197;
    sub_1000AB250(v197);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v99 = v24;
    uint64_t v97 = v26;
    uint64_t v98 = v27;
    uint64_t v28 = v197;
    uint64_t v29 = v198;
    uint64_t v30 = v199;
    LODWORD(v26) = v200;
    LOBYTE(v196[0]) = 4;
    sub_1000AB250(v197);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v179 = v26;
    uint64_t v95 = v29;
    uint64_t v96 = v30;
    uint64_t v94 = v28;
    uint64_t v31 = v197;
    uint64_t v32 = v198;
    uint64_t v33 = v199;
    LODWORD(v28) = v200;
    LOBYTE(v196[0]) = 5;
    sub_1000AB250(v197);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v93 = v28;
    uint64_t v91 = v32;
    uint64_t v92 = v33;
    uint64_t v90 = v31;
    uint64_t v34 = v197;
    uint64_t v35 = v198;
    uint64_t v36 = v199;
    LODWORD(v32) = v200;
    LOBYTE(v196[0]) = 6;
    sub_1000AB250(v197);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v178 = v32;
    uint64_t v177 = v36;
    uint64_t v176 = v35;
    uint64_t v175 = v34;
    uint64_t v37 = v197;
    uint64_t v38 = v198;
    uint64_t v39 = v199;
    LODWORD(v36) = v200;
    LOBYTE(v196[0]) = 7;
    sub_1000AB250(v197);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v89 = v36;
    uint64_t v87 = v38;
    uint64_t v88 = v39;
    uint64_t v86 = v37;
    LOBYTE(v196[0]) = 8;
    uint64_t v171 = v197;
    uint64_t v172 = v198;
    uint64_t v173 = v199;
    int v174 = v200;
    sub_1000AB250(v197);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    LOBYTE(v196[0]) = 9;
    uint64_t v167 = v197;
    uint64_t v168 = v198;
    uint64_t v169 = v199;
    int v170 = v200;
    sub_1000AB250(v197);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v360 = 0;
    LOBYTE(v196[0]) = 10;
    uint64_t v85 = v197;
    uint64_t v164 = v198;
    uint64_t v165 = v199;
    int v166 = v200;
    sub_1000AB250(v197);
    uint64_t v40 = v360;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v360 = v40;
    if (v40)
    {
      (*(void (**)(char *, uint64_t))(v194 + 8))(v7, v195);
      sub_1000AB1EC(v85);
      sub_1000AB1EC(v167);
      sub_1000AB1EC(v171);
      sub_1000AB1EC(v86);
      sub_1000AB1EC(v175);
      sub_1000AB1EC(v90);
      sub_1000AB1EC(v94);
      sub_1000AB1EC(v100);
      sub_1000AB1EC(v103);
      sub_1000AB1EC(v108);
      LODWORD(v195) = 0;
      unint64_t v9 = 1023;
    }
    else
    {
      LOBYTE(v196[0]) = 11;
      uint64_t v160 = v197;
      uint64_t v161 = v198;
      uint64_t v162 = v199;
      int v163 = v200;
      sub_1000AB250(v197);
      uint64_t v41 = v360;
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
      uint64_t v360 = v41;
      if (v41)
      {
        (*(void (**)(char *, uint64_t))(v194 + 8))(v7, v195);
        sub_1000AB1EC(v160);
        sub_1000AB1EC(v85);
        sub_1000AB1EC(v167);
        sub_1000AB1EC(v171);
        sub_1000AB1EC(v86);
        sub_1000AB1EC(v175);
        sub_1000AB1EC(v90);
        sub_1000AB1EC(v94);
        sub_1000AB1EC(v100);
        sub_1000AB1EC(v103);
        sub_1000AB1EC(v108);
        LODWORD(v195) = 0;
        unint64_t v9 = 2047;
      }
      else
      {
        LOBYTE(v196[0]) = 12;
        uint64_t v156 = v197;
        uint64_t v157 = v198;
        uint64_t v158 = v199;
        int v159 = v200;
        sub_1000AB250(v197);
        uint64_t v42 = v360;
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
        uint64_t v360 = v42;
        if (v42)
        {
          (*(void (**)(char *, uint64_t))(v194 + 8))(v7, v195);
          sub_1000AB1EC(v156);
          sub_1000AB1EC(v160);
          sub_1000AB1EC(v85);
          sub_1000AB1EC(v167);
          sub_1000AB1EC(v171);
          sub_1000AB1EC(v86);
          sub_1000AB1EC(v175);
          sub_1000AB1EC(v90);
          sub_1000AB1EC(v94);
          sub_1000AB1EC(v100);
          sub_1000AB1EC(v103);
          sub_1000AB1EC(v108);
          LODWORD(v195) = 0;
          unint64_t v9 = 4095;
        }
        else
        {
          LOBYTE(v196[0]) = 13;
          uint64_t v84 = v197;
          uint64_t v153 = v198;
          uint64_t v154 = v199;
          int v155 = v200;
          sub_1000AB250(v197);
          uint64_t v43 = v360;
          KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
          uint64_t v360 = v43;
          if (v43)
          {
            (*(void (**)(char *, uint64_t))(v194 + 8))(v7, v195);
            sub_1000AB1EC(v84);
            sub_1000AB1EC(v156);
            sub_1000AB1EC(v160);
            sub_1000AB1EC(v85);
            sub_1000AB1EC(v167);
            sub_1000AB1EC(v171);
            sub_1000AB1EC(v86);
            sub_1000AB1EC(v175);
            sub_1000AB1EC(v90);
            sub_1000AB1EC(v94);
            sub_1000AB1EC(v100);
            sub_1000AB1EC(v103);
            sub_1000AB1EC(v108);
            LODWORD(v195) = 0;
            unint64_t v9 = 0x1FFFLL;
          }
          else
          {
            LOBYTE(v196[0]) = 14;
            uint64_t v149 = v197;
            uint64_t v150 = v198;
            uint64_t v151 = v199;
            int v152 = v200;
            sub_1000AB250(v197);
            uint64_t v44 = v360;
            KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
            uint64_t v360 = v44;
            if (v44)
            {
              (*(void (**)(char *, uint64_t))(v194 + 8))(v7, v195);
              sub_1000AB1EC(v149);
              sub_1000AB1EC(v84);
              sub_1000AB1EC(v156);
              sub_1000AB1EC(v160);
              sub_1000AB1EC(v85);
              sub_1000AB1EC(v167);
              sub_1000AB1EC(v171);
              sub_1000AB1EC(v86);
              sub_1000AB1EC(v175);
              sub_1000AB1EC(v90);
              sub_1000AB1EC(v94);
              sub_1000AB1EC(v100);
              sub_1000AB1EC(v103);
              sub_1000AB1EC(v108);
              LODWORD(v195) = 0;
              unint64_t v9 = 0x3FFFLL;
            }
            else
            {
              LOBYTE(v196[0]) = 15;
              uint64_t v145 = v197;
              uint64_t v146 = v198;
              uint64_t v147 = v199;
              int v148 = v200;
              sub_1000AB250(v197);
              uint64_t v45 = v360;
              KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
              uint64_t v360 = v45;
              if (v45)
              {
                (*(void (**)(char *, uint64_t))(v194 + 8))(v7, v195);
                sub_1000AB1EC(v145);
                sub_1000AB1EC(v149);
                sub_1000AB1EC(v84);
                sub_1000AB1EC(v156);
                sub_1000AB1EC(v160);
                sub_1000AB1EC(v85);
                sub_1000AB1EC(v167);
                sub_1000AB1EC(v171);
                sub_1000AB1EC(v86);
                sub_1000AB1EC(v175);
                sub_1000AB1EC(v90);
                sub_1000AB1EC(v94);
                sub_1000AB1EC(v100);
                sub_1000AB1EC(v103);
                sub_1000AB1EC(v108);
                LODWORD(v195) = 0;
                unint64_t v9 = 0x7FFFLL;
              }
              else
              {
                LOBYTE(v196[0]) = 16;
                uint64_t v141 = v197;
                uint64_t v142 = v198;
                uint64_t v143 = v199;
                int v144 = v200;
                sub_1000AB250(v197);
                uint64_t v46 = v360;
                KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
                uint64_t v360 = v46;
                if (v46)
                {
                  (*(void (**)(char *, uint64_t))(v194 + 8))(v7, v195);
                  sub_1000AB1EC(v141);
                  sub_1000AB1EC(v145);
                  sub_1000AB1EC(v149);
                  sub_1000AB1EC(v84);
                  sub_1000AB1EC(v156);
                  sub_1000AB1EC(v160);
                  sub_1000AB1EC(v85);
                  sub_1000AB1EC(v167);
                  sub_1000AB1EC(v171);
                  sub_1000AB1EC(v86);
                  sub_1000AB1EC(v175);
                  sub_1000AB1EC(v90);
                  sub_1000AB1EC(v94);
                  sub_1000AB1EC(v100);
                  sub_1000AB1EC(v103);
                  sub_1000AB1EC(v108);
                  LODWORD(v195) = 0;
                  unint64_t v9 = 0xFFFFLL;
                }
                else
                {
                  LOBYTE(v196[0]) = 17;
                  uint64_t v137 = v197;
                  uint64_t v138 = v198;
                  uint64_t v139 = v199;
                  int v140 = v200;
                  sub_1000AB250(v197);
                  uint64_t v47 = v360;
                  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
                  uint64_t v360 = v47;
                  if (v47)
                  {
                    (*(void (**)(char *, uint64_t))(v194 + 8))(v7, v195);
                    sub_1000AB1EC(v137);
                    sub_1000AB1EC(v141);
                    sub_1000AB1EC(v145);
                    sub_1000AB1EC(v149);
                    sub_1000AB1EC(v84);
                    sub_1000AB1EC(v156);
                    sub_1000AB1EC(v160);
                    sub_1000AB1EC(v85);
                    sub_1000AB1EC(v167);
                    sub_1000AB1EC(v171);
                    sub_1000AB1EC(v86);
                    sub_1000AB1EC(v175);
                    sub_1000AB1EC(v90);
                    sub_1000AB1EC(v94);
                    sub_1000AB1EC(v100);
                    sub_1000AB1EC(v103);
                    sub_1000AB1EC(v108);
                    LODWORD(v195) = 0;
                    unint64_t v9 = 0x1FFFFLL;
                  }
                  else
                  {
                    LOBYTE(v196[0]) = 18;
                    uint64_t v133 = v197;
                    uint64_t v134 = v198;
                    uint64_t v135 = v199;
                    int v136 = v200;
                    sub_1000AB250(v197);
                    uint64_t v48 = v360;
                    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
                    uint64_t v360 = v48;
                    if (v48)
                    {
                      (*(void (**)(char *, uint64_t))(v194 + 8))(v7, v195);
                      sub_1000AB1EC(v133);
                      sub_1000AB1EC(v137);
                      sub_1000AB1EC(v141);
                      sub_1000AB1EC(v145);
                      sub_1000AB1EC(v149);
                      sub_1000AB1EC(v84);
                      sub_1000AB1EC(v156);
                      sub_1000AB1EC(v160);
                      sub_1000AB1EC(v85);
                      sub_1000AB1EC(v167);
                      sub_1000AB1EC(v171);
                      sub_1000AB1EC(v86);
                      sub_1000AB1EC(v175);
                      sub_1000AB1EC(v90);
                      sub_1000AB1EC(v94);
                      sub_1000AB1EC(v100);
                      sub_1000AB1EC(v103);
                      sub_1000AB1EC(v108);
                      LODWORD(v195) = 0;
                      unint64_t v9 = 0x3FFFFLL;
                    }
                    else
                    {
                      LOBYTE(v196[0]) = 19;
                      uint64_t v129 = v197;
                      uint64_t v130 = v198;
                      uint64_t v131 = v199;
                      int v132 = v200;
                      sub_1000AB250(v197);
                      uint64_t v49 = v360;
                      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
                      uint64_t v360 = v49;
                      if (v49)
                      {
                        (*(void (**)(char *, uint64_t))(v194 + 8))(v7, v195);
                        sub_1000AB1EC(v129);
                        sub_1000AB1EC(v133);
                        sub_1000AB1EC(v137);
                        sub_1000AB1EC(v141);
                        sub_1000AB1EC(v145);
                        sub_1000AB1EC(v149);
                        sub_1000AB1EC(v84);
                        sub_1000AB1EC(v156);
                        sub_1000AB1EC(v160);
                        sub_1000AB1EC(v85);
                        sub_1000AB1EC(v167);
                        sub_1000AB1EC(v171);
                        sub_1000AB1EC(v86);
                        sub_1000AB1EC(v175);
                        sub_1000AB1EC(v90);
                        sub_1000AB1EC(v94);
                        sub_1000AB1EC(v100);
                        sub_1000AB1EC(v103);
                        sub_1000AB1EC(v108);
                        LODWORD(v195) = 0;
                        unint64_t v9 = 0x7FFFFLL;
                      }
                      else
                      {
                        LOBYTE(v196[0]) = 20;
                        uint64_t v124 = v197;
                        uint64_t v126 = v198;
                        uint64_t v127 = v199;
                        int v128 = v200;
                        sub_1000AB250(v197);
                        uint64_t v50 = v360;
                        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
                        uint64_t v360 = v50;
                        if (v50)
                        {
                          (*(void (**)(char *, uint64_t))(v194 + 8))(v7, v195);
                          sub_1000AB1EC(v124);
                          sub_1000AB1EC(v129);
                          sub_1000AB1EC(v133);
                          sub_1000AB1EC(v137);
                          sub_1000AB1EC(v141);
                          sub_1000AB1EC(v145);
                          sub_1000AB1EC(v149);
                          sub_1000AB1EC(v84);
                          sub_1000AB1EC(v156);
                          sub_1000AB1EC(v160);
                          sub_1000AB1EC(v85);
                          sub_1000AB1EC(v167);
                          sub_1000AB1EC(v171);
                          sub_1000AB1EC(v86);
                          sub_1000AB1EC(v175);
                          sub_1000AB1EC(v90);
                          sub_1000AB1EC(v94);
                          sub_1000AB1EC(v100);
                          sub_1000AB1EC(v103);
                          sub_1000AB1EC(v108);
                          LODWORD(v195) = 0;
                          unint64_t v9 = 0xFFFFFLL;
                        }
                        else
                        {
                          LOBYTE(v196[0]) = 21;
                          uint64_t v115 = v197;
                          uint64_t v117 = v198;
                          uint64_t v119 = v199;
                          int v121 = v200;
                          sub_1000AB250(v197);
                          uint64_t v51 = v360;
                          KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
                          uint64_t v360 = v51;
                          if (v51)
                          {
                            (*(void (**)(char *, uint64_t))(v194 + 8))(v7, v195);
                            sub_1000AB1EC(v115);
                            sub_1000AB1EC(v124);
                            sub_1000AB1EC(v129);
                            sub_1000AB1EC(v133);
                            sub_1000AB1EC(v137);
                            sub_1000AB1EC(v141);
                            sub_1000AB1EC(v145);
                            sub_1000AB1EC(v149);
                            sub_1000AB1EC(v84);
                            sub_1000AB1EC(v156);
                            sub_1000AB1EC(v160);
                            sub_1000AB1EC(v85);
                            sub_1000AB1EC(v167);
                            sub_1000AB1EC(v171);
                            sub_1000AB1EC(v86);
                            sub_1000AB1EC(v175);
                            sub_1000AB1EC(v90);
                            sub_1000AB1EC(v94);
                            sub_1000AB1EC(v100);
                            sub_1000AB1EC(v103);
                            sub_1000AB1EC(v108);
                            LODWORD(v195) = 0;
                            unint64_t v9 = 0x1FFFFFLL;
                          }
                          else
                          {
                            LOBYTE(v196[0]) = 22;
                            uint64_t v120 = v197;
                            uint64_t v122 = v198;
                            uint64_t v123 = v199;
                            int v125 = v200;
                            sub_1000AB250(v197);
                            uint64_t v52 = v360;
                            KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
                            uint64_t v360 = v52;
                            if (v52)
                            {
                              (*(void (**)(char *, uint64_t))(v194 + 8))(v7, v195);
                              sub_1000AB1EC(v120);
                              sub_1000AB1EC(v115);
                              sub_1000AB1EC(v124);
                              sub_1000AB1EC(v129);
                              sub_1000AB1EC(v133);
                              sub_1000AB1EC(v137);
                              sub_1000AB1EC(v141);
                              sub_1000AB1EC(v145);
                              sub_1000AB1EC(v149);
                              sub_1000AB1EC(v84);
                              sub_1000AB1EC(v156);
                              sub_1000AB1EC(v160);
                              sub_1000AB1EC(v85);
                              sub_1000AB1EC(v167);
                              sub_1000AB1EC(v171);
                              sub_1000AB1EC(v86);
                              sub_1000AB1EC(v175);
                              sub_1000AB1EC(v90);
                              sub_1000AB1EC(v94);
                              sub_1000AB1EC(v100);
                              sub_1000AB1EC(v103);
                              sub_1000AB1EC(v108);
                              LODWORD(v195) = 0;
                              unint64_t v9 = 0x3FFFFFLL;
                            }
                            else
                            {
                              LOBYTE(v196[0]) = 23;
                              uint64_t v83 = v197;
                              uint64_t v114 = v198;
                              uint64_t v116 = v199;
                              int v118 = v200;
                              sub_1000AB250(v197);
                              uint64_t v53 = v360;
                              KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
                              uint64_t v360 = v53;
                              if (v53)
                              {
                                (*(void (**)(char *, uint64_t))(v194 + 8))(v7, v195);
                                sub_1000AB1EC(v83);
                                sub_1000AB1EC(v120);
                                sub_1000AB1EC(v115);
                                sub_1000AB1EC(v124);
                                sub_1000AB1EC(v129);
                                sub_1000AB1EC(v133);
                                sub_1000AB1EC(v137);
                                sub_1000AB1EC(v141);
                                sub_1000AB1EC(v145);
                                sub_1000AB1EC(v149);
                                sub_1000AB1EC(v84);
                                sub_1000AB1EC(v156);
                                sub_1000AB1EC(v160);
                                sub_1000AB1EC(v85);
                                sub_1000AB1EC(v167);
                                sub_1000AB1EC(v171);
                                sub_1000AB1EC(v86);
                                sub_1000AB1EC(v175);
                                sub_1000AB1EC(v90);
                                sub_1000AB1EC(v94);
                                sub_1000AB1EC(v100);
                                sub_1000AB1EC(v103);
                                sub_1000AB1EC(v108);
                                LODWORD(v195) = 0;
                                unint64_t v9 = 0x7FFFFFLL;
                              }
                              else
                              {
                                LOBYTE(v196[0]) = 24;
                                uint64_t v110 = v197;
                                uint64_t v111 = v198;
                                uint64_t v112 = v199;
                                int v113 = v200;
                                sub_1000AB250(v197);
                                sub_1000AB260();
                                uint64_t v54 = v360;
                                KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
                                uint64_t v360 = v54;
                                if (!v54)
                                {
                                  uint64_t v55 = v197;
                                  uint64_t v56 = v198;
                                  char v57 = v199;
                                  LOBYTE(v196[0]) = 25;
                                  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
                                  uint64_t v360 = 0;
                                  uint64_t v192 = v197;
                                  uint64_t v58 = v198;
                                  int v59 = v199;
                                  LOBYTE(v197) = 26;
                                  int v60 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
                                  uint64_t v360 = 0;
                                  int v61 = v60;
                                  LOBYTE(v197) = 27;
                                  LODWORD(v190) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
                                  uint64_t v360 = 0;
                                  LOBYTE(v197) = 28;
                                  LODWORD(v189) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
                                  uint64_t v360 = 0;
                                  LOBYTE(v197) = 29;
                                  LODWORD(v188) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
                                  uint64_t v360 = 0;
                                  LOBYTE(v197) = 30;
                                  LODWORD(v187) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
                                  uint64_t v360 = 0;
                                  LOBYTE(v197) = 31;
                                  LODWORD(v186) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
                                  uint64_t v360 = 0;
                                  LOBYTE(v197) = 32;
                                  LODWORD(v185) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
                                  uint64_t v360 = 0;
                                  sub_100007764(&qword_1007268F0);
                                  LOBYTE(v196[0]) = 33;
                                  sub_1000AB18C((unint64_t *)&qword_1007222C8, &qword_1007268F0);
                                  uint64_t v62 = v360;
                                  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
                                  uint64_t v360 = v62;
                                  if (v62)
                                  {
                                    (*(void (**)(char *, uint64_t))(v194 + 8))(v7, v195);
                                    sub_1000AB1EC(v110);
                                    sub_1000AB1EC(v83);
                                    sub_1000AB1EC(v120);
                                    sub_1000AB1EC(v115);
                                    sub_1000AB1EC(v124);
                                    sub_1000AB1EC(v129);
                                    sub_1000AB1EC(v133);
                                    sub_1000AB1EC(v137);
                                    sub_1000AB1EC(v141);
                                    sub_1000AB1EC(v145);
                                    sub_1000AB1EC(v149);
                                    sub_1000AB1EC(v84);
                                    sub_1000AB1EC(v156);
                                    sub_1000AB1EC(v160);
                                    sub_1000AB1EC(v85);
                                    sub_1000AB1EC(v167);
                                    sub_1000AB1EC(v171);
                                    sub_1000AB1EC(v86);
                                    sub_1000AB1EC(v175);
                                    sub_1000AB1EC(v90);
                                    sub_1000AB1EC(v94);
                                    sub_1000AB1EC(v100);
                                    sub_1000AB1EC(v103);
                                    sub_1000AB1EC(v108);
                                    int v63 = 0;
                                  }
                                  else
                                  {
                                    uint64_t v73 = v197;
                                    uint64_t v184 = sub_100007764(&qword_1007220B0);
                                    char v333 = 34;
                                    sub_1000BEA78(&qword_1007222E8, &qword_1007220B0, (void (*)(void))sub_1000AB2B4);
                                    uint64_t v109 = v73;
                                    swift_bridgeObjectRetain();
                                    uint64_t v74 = v360;
                                    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
                                    uint64_t v360 = v74;
                                    if (!v74)
                                    {
                                      (*(void (**)(char *, uint64_t))(v194 + 8))(v7, v195);
                                      uint64_t v195 = v334;
                                      v196[0] = v108;
                                      v196[1] = v105;
                                      v196[2] = v106;
                                      LOBYTE(v196[3]) = v107;
                                      v196[4] = v103;
                                      v196[5] = v104;
                                      v196[6] = v102;
                                      LOBYTE(v196[7]) = v101;
                                      v196[8] = v100;
                                      v196[9] = v97;
                                      v196[10] = v98;
                                      LOBYTE(v196[11]) = v99;
                                      v196[12] = v94;
                                      v196[13] = v95;
                                      v196[14] = v96;
                                      LOBYTE(v196[15]) = v179;
                                      v196[16] = v90;
                                      v196[17] = v91;
                                      v196[18] = v92;
                                      LOBYTE(v196[19]) = v93;
                                      v196[20] = v175;
                                      v196[21] = v176;
                                      v196[22] = v177;
                                      LOBYTE(v196[23]) = v178;
                                      v196[24] = v86;
                                      v196[25] = v87;
                                      v196[26] = v88;
                                      LOBYTE(v196[27]) = v89;
                                      v196[28] = v171;
                                      v196[29] = v172;
                                      v196[30] = v173;
                                      LOBYTE(v196[31]) = v174;
                                      v196[32] = v167;
                                      v196[33] = v168;
                                      v196[34] = v169;
                                      LOBYTE(v196[35]) = v170;
                                      v196[36] = v85;
                                      v196[37] = v164;
                                      v196[38] = v165;
                                      LOBYTE(v196[39]) = v166;
                                      v196[40] = v160;
                                      v196[41] = v161;
                                      v196[42] = v162;
                                      LOBYTE(v196[43]) = v163;
                                      v196[44] = v156;
                                      v196[45] = v157;
                                      v196[46] = v158;
                                      LOBYTE(v196[47]) = v159;
                                      v196[48] = v84;
                                      v196[49] = v153;
                                      v196[50] = v154;
                                      LOBYTE(v196[51]) = v155;
                                      v196[52] = v149;
                                      v196[53] = v150;
                                      v196[54] = v151;
                                      LOBYTE(v196[55]) = v152;
                                      v196[56] = v145;
                                      v196[57] = v146;
                                      v196[58] = v147;
                                      LOBYTE(v196[59]) = v148;
                                      v196[60] = v141;
                                      v196[61] = v142;
                                      v196[62] = v143;
                                      LOBYTE(v196[63]) = v144;
                                      v196[64] = v137;
                                      v196[65] = v138;
                                      v196[66] = v139;
                                      LOBYTE(v196[67]) = v140;
                                      v196[68] = v133;
                                      v196[69] = v134;
                                      v196[70] = v135;
                                      LOBYTE(v196[71]) = v136;
                                      v196[72] = v129;
                                      v196[73] = v130;
                                      v196[74] = v131;
                                      LOBYTE(v196[75]) = v132;
                                      v196[76] = v124;
                                      v196[77] = v126;
                                      v196[78] = v127;
                                      LOBYTE(v196[79]) = v128;
                                      v196[80] = v115;
                                      v196[81] = v117;
                                      v196[82] = v119;
                                      LOBYTE(v196[83]) = v121;
                                      v196[84] = v120;
                                      v196[85] = v122;
                                      v196[86] = v123;
                                      LOBYTE(v196[87]) = v125;
                                      v196[88] = v83;
                                      v196[89] = v114;
                                      v196[90] = v116;
                                      LOBYTE(v196[91]) = v118;
                                      uint64_t v75 = v110;
                                      v196[92] = v110;
                                      v196[93] = v111;
                                      v196[94] = v112;
                                      LOBYTE(v196[95]) = v113;
                                      uint64_t v183 = v55;
                                      v196[96] = v55;
                                      v196[97] = v56;
                                      LOBYTE(v196[98]) = v57;
                                      v196[99] = v192;
                                      uint64_t v181 = v58;
                                      v196[100] = v58;
                                      LODWORD(v182) = v59;
                                      LOBYTE(v196[101]) = v59;
                                      LODWORD(v180) = v61;
                                      BYTE1(v196[101]) = v61;
                                      BYTE2(v196[101]) = v190;
                                      BYTE3(v196[101]) = v189;
                                      BYTE4(v196[101]) = v188;
                                      BYTE5(v196[101]) = v187;
                                      BYTE6(v196[101]) = v186;
                                      HIBYTE(v196[101]) = v185;
                                      v196[102] = v109;
                                      v196[103] = v334;
                                      sub_1000AB308(v196);
                                      swift_bridgeObjectRelease();
                                      sub_1000AB1EC(v75);
                                      sub_1000AB1EC(v83);
                                      sub_1000AB1EC(v120);
                                      sub_1000AB1EC(v115);
                                      sub_1000AB1EC(v124);
                                      sub_1000AB1EC(v129);
                                      sub_1000AB1EC(v133);
                                      sub_1000AB1EC(v137);
                                      sub_1000AB1EC(v141);
                                      sub_1000AB1EC(v145);
                                      sub_1000AB1EC(v149);
                                      sub_1000AB1EC(v84);
                                      sub_1000AB1EC(v156);
                                      sub_1000AB1EC(v160);
                                      sub_1000AB1EC(v85);
                                      sub_1000AB1EC(v167);
                                      sub_1000AB1EC(v171);
                                      sub_1000AB1EC(v86);
                                      sub_1000AB1EC(v175);
                                      sub_1000AB1EC(v90);
                                      sub_1000AB1EC(v94);
                                      sub_1000AB1EC(v100);
                                      uint64_t v76 = v104;
                                      char v77 = v101;
                                      sub_1000AB1EC(v103);
                                      uint64_t v78 = v108;
                                      uint64_t v80 = v105;
                                      uint64_t v79 = v106;
                                      unsigned __int8 v81 = v107;
                                      sub_1000AB1EC(v108);
                                      uint64_t v194 = (uint64_t)v296;
                                      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v193);
                                      uint64_t v197 = v78;
                                      uint64_t v198 = v80;
                                      uint64_t v199 = v79;
                                      unsigned __int8 v200 = v81;
                                      uint64_t v202 = v103;
                                      uint64_t v203 = v76;
                                      uint64_t v204 = v102;
                                      char v205 = v77;
                                      uint64_t v207 = v100;
                                      uint64_t v208 = v97;
                                      uint64_t v209 = v98;
                                      char v210 = v99;
                                      uint64_t v212 = v94;
                                      uint64_t v213 = v95;
                                      uint64_t v214 = v96;
                                      char v215 = v179;
                                      uint64_t v217 = v90;
                                      uint64_t v218 = v91;
                                      uint64_t v219 = v92;
                                      char v220 = v93;
                                      uint64_t v222 = v175;
                                      uint64_t v223 = v176;
                                      uint64_t v224 = v177;
                                      char v225 = v178;
                                      uint64_t v227 = v86;
                                      uint64_t v228 = v87;
                                      uint64_t v229 = v88;
                                      char v230 = v89;
                                      uint64_t v232 = v171;
                                      uint64_t v233 = v172;
                                      uint64_t v234 = v173;
                                      char v235 = v174;
                                      uint64_t v237 = v167;
                                      uint64_t v238 = v168;
                                      uint64_t v239 = v169;
                                      char v240 = v170;
                                      uint64_t v242 = v85;
                                      uint64_t v243 = v164;
                                      uint64_t v244 = v165;
                                      char v245 = v166;
                                      uint64_t v247 = v160;
                                      uint64_t v248 = v161;
                                      uint64_t v249 = v162;
                                      char v250 = v163;
                                      uint64_t v252 = v156;
                                      uint64_t v253 = v157;
                                      uint64_t v254 = v158;
                                      char v255 = v159;
                                      uint64_t v257 = v84;
                                      uint64_t v258 = v153;
                                      uint64_t v259 = v154;
                                      char v260 = v155;
                                      uint64_t v262 = v149;
                                      uint64_t v263 = v150;
                                      uint64_t v264 = v151;
                                      char v265 = v152;
                                      uint64_t v267 = v145;
                                      uint64_t v268 = v146;
                                      uint64_t v269 = v147;
                                      char v270 = v148;
                                      uint64_t v272 = v141;
                                      uint64_t v273 = v142;
                                      uint64_t v274 = v143;
                                      char v275 = v144;
                                      uint64_t v277 = v137;
                                      uint64_t v278 = v138;
                                      uint64_t v279 = v139;
                                      char v280 = v140;
                                      uint64_t v282 = v133;
                                      uint64_t v283 = v134;
                                      uint64_t v284 = v135;
                                      char v285 = v136;
                                      uint64_t v287 = v129;
                                      uint64_t v288 = v130;
                                      uint64_t v289 = v131;
                                      char v290 = v132;
                                      uint64_t v292 = v124;
                                      uint64_t v293 = v126;
                                      uint64_t v294 = v127;
                                      char v295 = v128;
                                      uint64_t v297 = v115;
                                      uint64_t v298 = v117;
                                      uint64_t v299 = v119;
                                      char v300 = v121;
                                      *(_DWORD *)uint64_t v201 = v359[0];
                                      *(_DWORD *)uint64_t v206 = *(_DWORD *)v358;
                                      *(_DWORD *)unint64_t v211 = *(_DWORD *)v357;
                                      *(_DWORD *)unint64_t v216 = *(_DWORD *)v356;
                                      *(_DWORD *)&v221[3] = *(_DWORD *)&v355[3];
                                      *(_DWORD *)v221 = *(_DWORD *)v355;
                                      *(_DWORD *)&v226[3] = *(_DWORD *)&v354[3];
                                      *(_DWORD *)uint64_t v226 = *(_DWORD *)v354;
                                      *(_DWORD *)&v231[3] = *(_DWORD *)&v353[3];
                                      *(_DWORD *)int v231 = *(_DWORD *)v353;
                                      *(_DWORD *)&v236[3] = *(_DWORD *)&v352[3];
                                      *(_DWORD *)uint64_t v236 = *(_DWORD *)v352;
                                      *(_DWORD *)uint64_t v241 = *(_DWORD *)v351;
                                      *(_DWORD *)v246 = *(_DWORD *)v350;
                                      *(_DWORD *)unint64_t v251 = *(_DWORD *)v349;
                                      *(_DWORD *)unint64_t v256 = *(_DWORD *)v348;
                                      *(_DWORD *)unint64_t v261 = *(_DWORD *)v347;
                                      *(_DWORD *)unint64_t v266 = *(_DWORD *)v346;
                                      *(_DWORD *)uint64_t v271 = *(_DWORD *)v345;
                                      *(_DWORD *)uint64_t v276 = *(_DWORD *)v344;
                                      *(_DWORD *)v281 = *(_DWORD *)v343;
                                      *(_DWORD *)v286 = *(_DWORD *)v342;
                                      *(_DWORD *)v291 = *(_DWORD *)v341;
                                      *(_DWORD *)uint64_t v194 = *(_DWORD *)v340;
                                      *(_DWORD *)&v201[3] = *(_DWORD *)((char *)v359 + 3);
                                      *(_DWORD *)v301 = *(_DWORD *)v339;
                                      *(_DWORD *)&v206[3] = *(_DWORD *)&v358[3];
                                      *(_DWORD *)&v211[3] = *(_DWORD *)&v357[3];
                                      *(_DWORD *)&v216[3] = *(_DWORD *)&v356[3];
                                      *(_DWORD *)&v241[3] = *(_DWORD *)&v351[3];
                                      *(_DWORD *)&v246[3] = *(_DWORD *)&v350[3];
                                      *(_DWORD *)&v251[3] = *(_DWORD *)&v349[3];
                                      *(_DWORD *)&v256[3] = *(_DWORD *)&v348[3];
                                      *(_DWORD *)&v261[3] = *(_DWORD *)&v347[3];
                                      *(_DWORD *)&v266[3] = *(_DWORD *)&v346[3];
                                      *(_DWORD *)&v271[3] = *(_DWORD *)&v345[3];
                                      *(_DWORD *)&v276[3] = *(_DWORD *)&v344[3];
                                      *(_DWORD *)&v281[3] = *(_DWORD *)&v343[3];
                                      *(_DWORD *)&v286[3] = *(_DWORD *)&v342[3];
                                      *(_DWORD *)&v291[3] = *(_DWORD *)&v341[3];
                                      *(_DWORD *)&v296[3] = *(_DWORD *)&v340[3];
                                      *(_DWORD *)&v301[3] = *(_DWORD *)&v339[3];
                                      uint64_t v302 = v120;
                                      uint64_t v303 = v122;
                                      uint64_t v304 = v123;
                                      char v305 = v125;
                                      *(_DWORD *)v306 = *(_DWORD *)v338;
                                      *(_DWORD *)&v306[3] = *(_DWORD *)&v338[3];
                                      uint64_t v307 = v83;
                                      uint64_t v308 = v114;
                                      uint64_t v309 = v116;
                                      char v310 = v118;
                                      *(_DWORD *)v311 = *(_DWORD *)v337;
                                      *(_DWORD *)&v311[3] = *(_DWORD *)&v337[3];
                                      uint64_t v312 = v110;
                                      uint64_t v313 = v111;
                                      uint64_t v314 = v112;
                                      char v315 = v113;
                                      *(_DWORD *)v316 = *(_DWORD *)v336;
                                      *(_DWORD *)&v316[3] = *(_DWORD *)&v336[3];
                                      uint64_t v317 = v183;
                                      uint64_t v318 = v56;
                                      char v319 = v57;
                                      *(_DWORD *)v320 = *(_DWORD *)v335;
                                      *(_DWORD *)&v320[3] = *(_DWORD *)&v335[3];
                                      uint64_t v321 = v192;
                                      uint64_t v322 = v181;
                                      char v323 = v182;
                                      char v324 = v180;
                                      char v325 = v190;
                                      char v326 = v189;
                                      char v327 = v188;
                                      char v328 = v187;
                                      char v329 = v186;
                                      char v330 = v185;
                                      uint64_t v331 = v109;
                                      uint64_t v332 = v195;
                                      sub_1000AB74C(&v197);
                                      return memcpy((void *)v191, v196, 0x340uLL);
                                    }
                                    (*(void (**)(char *, uint64_t))(v194 + 8))(v7, v195);
                                    swift_bridgeObjectRelease();
                                    sub_1000AB1EC(v110);
                                    sub_1000AB1EC(v83);
                                    sub_1000AB1EC(v120);
                                    sub_1000AB1EC(v115);
                                    sub_1000AB1EC(v124);
                                    sub_1000AB1EC(v129);
                                    sub_1000AB1EC(v133);
                                    sub_1000AB1EC(v137);
                                    sub_1000AB1EC(v141);
                                    sub_1000AB1EC(v145);
                                    sub_1000AB1EC(v149);
                                    sub_1000AB1EC(v84);
                                    sub_1000AB1EC(v156);
                                    sub_1000AB1EC(v160);
                                    sub_1000AB1EC(v85);
                                    sub_1000AB1EC(v167);
                                    sub_1000AB1EC(v171);
                                    sub_1000AB1EC(v86);
                                    sub_1000AB1EC(v175);
                                    sub_1000AB1EC(v90);
                                    sub_1000AB1EC(v94);
                                    sub_1000AB1EC(v100);
                                    sub_1000AB1EC(v103);
                                    sub_1000AB1EC(v108);
                                    int v63 = 1;
                                  }
                                  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v193);
                                  LODWORD(v12) = 1;
                                  LODWORD(v13) = 1;
                                  LODWORD(v14) = 1;
                                  LODWORD(v15) = 1;
                                  LODWORD(v16) = 1;
                                  LODWORD(v17) = 1;
                                  LODWORD(v18) = 1;
                                  uint64_t v180 = 1;
                                  uint64_t v181 = 1;
                                  uint64_t v182 = 1;
                                  uint64_t v183 = 1;
                                  uint64_t v184 = 1;
                                  uint64_t v185 = 1;
                                  uint64_t v186 = 1;
                                  uint64_t v187 = 1;
                                  uint64_t v188 = 1;
                                  uint64_t v189 = 1;
                                  uint64_t v190 = 1;
                                  uint64_t v191 = 1;
                                  uint64_t v192 = 1;
                                  unint64_t v193 = 1;
                                  uint64_t v194 = 1;
                                  LODWORD(v195) = 1;
                                  int v10 = v63;
                                  goto LABEL_45;
                                }
                                (*(void (**)(char *, uint64_t))(v194 + 8))(v7, v195);
                                sub_1000AB1EC(v110);
                                sub_1000AB1EC(v83);
                                sub_1000AB1EC(v120);
                                sub_1000AB1EC(v115);
                                sub_1000AB1EC(v124);
                                sub_1000AB1EC(v129);
                                sub_1000AB1EC(v133);
                                sub_1000AB1EC(v137);
                                sub_1000AB1EC(v141);
                                sub_1000AB1EC(v145);
                                sub_1000AB1EC(v149);
                                sub_1000AB1EC(v84);
                                sub_1000AB1EC(v156);
                                sub_1000AB1EC(v160);
                                sub_1000AB1EC(v85);
                                sub_1000AB1EC(v167);
                                sub_1000AB1EC(v171);
                                sub_1000AB1EC(v86);
                                sub_1000AB1EC(v175);
                                sub_1000AB1EC(v90);
                                sub_1000AB1EC(v94);
                                sub_1000AB1EC(v100);
                                sub_1000AB1EC(v103);
                                sub_1000AB1EC(v108);
                                LODWORD(v195) = 1;
                                unint64_t v9 = 0xFFFFFFLL;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    a1 = (void *)v193;
  }
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  int v10 = 0;
  int v11 = 0;
  uint64_t v12 = (v9 >> 1) & 1;
  uint64_t v13 = (v9 >> 2) & 1;
  uint64_t v14 = (v9 >> 3) & 1;
  uint64_t v15 = (v9 >> 4) & 1;
  uint64_t v16 = (v9 >> 5) & 1;
  uint64_t v17 = (v9 >> 6) & 1;
  uint64_t v18 = (v9 >> 7) & 1;
  uint64_t v180 = (v9 >> 8) & 1;
  uint64_t v181 = (v9 >> 9) & 1;
  uint64_t v182 = (v9 >> 10) & 1;
  uint64_t v183 = (v9 >> 11) & 1;
  uint64_t v184 = (v9 >> 12) & 1;
  uint64_t v185 = (v9 >> 13) & 1;
  uint64_t v186 = (v9 >> 14) & 1;
  uint64_t v187 = (v9 >> 15) & 1;
  uint64_t v188 = (v9 >> 16) & 1;
  uint64_t v189 = (v9 >> 17) & 1;
  uint64_t v190 = (v9 >> 18) & 1;
  uint64_t v191 = (v9 >> 19) & 1;
  uint64_t v192 = (v9 >> 20) & 1;
  unint64_t v193 = (v9 >> 21) & 1;
  uint64_t v194 = (v9 >> 22) & 1;
  if ((v9 & 1) == 0)
  {
    if (v12) {
      goto LABEL_6;
    }
    goto LABEL_46;
  }
LABEL_45:
  int v64 = v12;
  int v65 = v10;
  sub_1000AB1EC(v108);
  int v66 = v64;
  int v11 = v65;
  if (v66)
  {
LABEL_6:
    sub_1000AB1EC(v103);
    if (!v13) {
      goto LABEL_7;
    }
    goto LABEL_47;
  }
LABEL_46:
  if (!v13)
  {
LABEL_7:
    if (v14) {
      goto LABEL_8;
    }
LABEL_48:
    if (!v15) {
      goto LABEL_50;
    }
    goto LABEL_49;
  }
LABEL_47:
  sub_1000AB1EC(v100);
  if (!v14) {
    goto LABEL_48;
  }
LABEL_8:
  sub_1000AB1EC(v94);
  if (v15) {
LABEL_49:
  }
    sub_1000AB1EC(v90);
LABEL_50:
  uint64_t v67 = v167;
  if (v16) {
    sub_1000AB1EC(v175);
  }
  if (v17) {
    sub_1000AB1EC(v86);
  }
  if (v18) {
    sub_1000AB1EC(v171);
  }
  if (v180) {
    sub_1000AB1EC(v67);
  }
  if (v181) {
    sub_1000AB1EC(v85);
  }
  uint64_t v68 = v156;
  if (v182) {
    sub_1000AB1EC(v160);
  }
  if (v183) {
    sub_1000AB1EC(v68);
  }
  if (v184) {
    sub_1000AB1EC(v84);
  }
  if (v185) {
    sub_1000AB1EC(v149);
  }
  uint64_t v69 = v141;
  if (v186) {
    sub_1000AB1EC(v145);
  }
  if (v187) {
    sub_1000AB1EC(v69);
  }
  if (v188) {
    sub_1000AB1EC(v137);
  }
  uint64_t v70 = v129;
  if (v189) {
    sub_1000AB1EC(v133);
  }
  if (v190) {
    sub_1000AB1EC(v70);
  }
  if (v191) {
    sub_1000AB1EC(v124);
  }
  uint64_t v71 = v120;
  if (v192)
  {
    sub_1000AB1EC(v115);
    if (!v193) {
      goto LABEL_82;
    }
LABEL_90:
    sub_1000AB1EC(v71);
    if (!v194) {
      goto LABEL_84;
    }
    goto LABEL_83;
  }
  if (v193) {
    goto LABEL_90;
  }
LABEL_82:
  if (v194) {
LABEL_83:
  }
    sub_1000AB1EC(v83);
LABEL_84:
  if (v195) {
    sub_1000AB1EC(v110);
  }
  unint64_t result = (void *)v109;
  if (v11) {
    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10008BBC4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65676E6172 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x636974796C616E61 && a2 == 0xE900000000000073 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x797469726F697270 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10008BD20(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_100722208);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  sub_10000C728(a1, v7);
  sub_1000A9A80();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_100007764(&qword_100722218);
    v9[15] = 0;
    sub_1000AB18C(&qword_100722220, &qword_100722218);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v7 = v10;
    v9[14] = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    v9[13] = 2;
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_10008BF90(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65756C6176 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x636974796C616E61 && a2 == 0xE900000000000073 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x797469726F697270 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10008C0EC(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_100722988);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1000BE774();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  char v14 = 0;
  unsigned __int8 v7 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v13 = 1;
  char v8 = KeyedDecodingContainer.decode(_:forKey:)();
  char v12 = 2;
  KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  if (v8) {
    int v10 = 256;
  }
  else {
    int v10 = 0;
  }
  return v10 & 0xFFFFFF00 | v7;
}

uint64_t sub_10008C2CC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x797469726F697270 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x736C616E676973 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10008C430(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_100722990);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[4];
  sub_10000C728(a1, a1[3]);
  sub_1000BE7C8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  else
  {
    v9[31] = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    v9[30] = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    sub_100007764(&qword_100722908);
    v9[29] = 2;
    sub_1000BEA78(&qword_100722998, &qword_100722908, (void (*)(void))sub_1000BEAE4);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_10008C6BC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74617261706D6F63 && a2 == 0xEA0000000000726FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C6F687365726874 && a2 == 0xE900000000000064)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10008C81C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100007764(&qword_100722A58);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1000BF720();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  char v24 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v21 = v9;
  char v23 = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v13;
  uint64_t v19 = v12;
  char v22 = 2;
  swift_bridgeObjectRetain();
  uint64_t v20 = v14;
  KeyedDecodingContainer.decode(_:forKey:)();
  int v16 = v15;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  uint64_t v17 = v20;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v21;
  *(void *)(a2 + 8) = v11;
  *(void *)(a2 + 16) = v19;
  *(void *)(a2 + 24) = v17;
  *(_DWORD *)(a2 + 32) = v16;
  return result;
}

uint64_t sub_10008CAA8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x80000001006330B0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000100633170 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6F697461526975 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x676E69646F636E65 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001006330F0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000100633190)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_10008CD0C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100007764(&qword_100722980);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1000BE870();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  char v35 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  char v34 = 1;
  swift_bridgeObjectRetain();
  uint64_t v25 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v26 = v9;
  char v33 = 2;
  uint64_t v27 = v12;
  swift_bridgeObjectRetain();
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v28 = v14;
  uint64_t v23 = v13;
  sub_100007764(&qword_1007268F0);
  char v31 = 3;
  sub_1000AB18C((unint64_t *)&qword_1007222C8, &qword_1007268F0);
  swift_bridgeObjectRetain();
  uint64_t v24 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v15 = v32;
  char v30 = 4;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v17 = v16;
  char v29 = 5;
  uint64_t v18 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v19 = v28;
  swift_bridgeObjectRelease();
  uint64_t v20 = v27;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v26;
  a2[1] = v11;
  a2[2] = v25;
  a2[3] = v20;
  a2[4] = v23;
  a2[5] = v19;
  a2[6] = v15;
  a2[7] = v17;
  a2[8] = v18;
  return result;
}

uint64_t sub_10008D1A8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726F466567616D69 && a2 == 0xEB0000000074616DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000100633050)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10008D304@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100007764(&qword_1007222B8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1000A8F88();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  LOBYTE(v32) = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v30 = v9;
  char v31 = 1;
  sub_1000AB138();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v12 = v33;
  uint64_t v13 = v35;
  uint64_t v23 = v34;
  uint64_t v24 = v32;
  uint64_t v28 = v38;
  uint64_t v29 = v37;
  uint64_t v14 = v39;
  uint64_t v21 = v40;
  uint64_t v22 = v36;
  uint64_t v25 = sub_100007764(&qword_1007268F0);
  char v31 = 2;
  sub_1000AB18C((unint64_t *)&qword_1007222C8, &qword_1007268F0);
  uint64_t v27 = v12;
  swift_bridgeObjectRetain();
  uint64_t v26 = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v15 = v32;
  swift_bridgeObjectRetain();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v16 = v28;
  swift_bridgeObjectRelease();
  uint64_t v17 = v29;
  swift_bridgeObjectRelease();
  uint64_t v18 = v26;
  swift_bridgeObjectRelease();
  uint64_t v19 = v27;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v30;
  a2[1] = v11;
  a2[2] = v24;
  a2[3] = v19;
  a2[4] = v23;
  a2[5] = v18;
  a2[6] = v22;
  a2[7] = v17;
  a2[8] = v16;
  a2[9] = v14;
  a2[10] = v21;
  a2[11] = v15;
  return result;
}

uint64_t sub_10008D6C8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65756C6176 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000100632690)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10008D7B0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000100632690 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001006326E0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000100632700)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

unint64_t sub_10008D994(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1006F12C0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t sub_10008D9E0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x72656469766F7270 && a2 == 0xEA00000000006449;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6954746567726174 && a2 == 0xEA00000000007265)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10008DAE4(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_1007221E0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[4];
  sub_10000C728(a1, a1[3]);
  sub_1000A9984();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  else
  {
    char v11 = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    char v10 = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_10008DCEC(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1006F1340, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t sub_10008DD38(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746867696568 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6874646977 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10008DE1C(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_100722978);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  sub_10000C728(a1, v7);
  sub_1000BE8C4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    v9[15] = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    v9[14] = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  }
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  return v7;
}

uint64_t sub_10008DFC0(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000014 && a2 == 0x8000000100633070
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F697463656C6573 && a2 == 0xE90000000000006ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x676E69646F636E65 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000100633090 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001006330B0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001006330D0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001006330F0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x656E696C6576696CLL && a2 == 0xEA00000000007373 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x74756F656D6974 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6B6174655278616DLL && a2 == 0xEE00746E756F4365 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x656C616373 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 10;
    }
    else {
      return 11;
    }
  }
}

uint64_t sub_10008E43C@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v92 = sub_100007764(&qword_1007222A0);
  uint64_t v5 = *(void *)(v92 - 8);
  __chkstk_darwin(v92);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1000A9030();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  uint64_t v48 = v5;
  LOBYTE(v57) = 0;
  uint64_t v8 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v10 = v9;
  uint64_t v47 = v8;
  sub_100007764(&qword_1007220F0);
  LOBYTE(v49) = 1;
  sub_1000AB18C(&qword_1007222A8, &qword_1007220F0);
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v46 = v10;
  uint64_t v11 = v57;
  LOBYTE(v57) = 2;
  swift_bridgeObjectRetain();
  uint64_t v44 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v45 = v11;
  LOBYTE(v49) = 3;
  sub_1000AB078();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v43 = v57;
  uint64_t v12 = v58;
  LOBYTE(v49) = 4;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v41 = v57;
  uint64_t v42 = v12;
  uint64_t v13 = v58;
  LOBYTE(v57) = 5;
  uint64_t v39 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v40 = v13;
  char v91 = v14 & 1;
  LOBYTE(v57) = 6;
  LOBYTE(v13) = v14;
  uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v38 = v16;
  char v89 = v16 & 1;
  LOBYTE(v57) = 7;
  int v36 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v37 = v15;
  LOBYTE(v57) = 8;
  uint64_t v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v34 = v17;
  char v86 = v17 & 1;
  LOBYTE(v57) = 9;
  uint64_t v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v32 = v19 & 1;
  char v84 = v19 & 1;
  char v81 = 10;
  uint64_t v33 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v21 = v20;
  (*(void (**)(char *, uint64_t))(v48 + 8))(v7, v92);
  char v22 = v21 & 1;
  char v82 = v21 & 1;
  uint64_t v23 = v46;
  *(void *)&long long v49 = v47;
  *((void *)&v49 + 1) = v46;
  uint64_t v24 = v45;
  *(void *)&long long v50 = v45;
  *((void *)&v50 + 1) = v44;
  *(void *)&long long v51 = v43;
  *((void *)&v51 + 1) = v42;
  *(void *)&long long v52 = v41;
  *((void *)&v52 + 1) = v40;
  *(void *)&long long v53 = v39;
  BYTE8(v53) = v13 & 1;
  *(void *)&long long v54 = v37;
  BYTE8(v54) = v38 & 1;
  LOBYTE(v15) = v36;
  BYTE9(v54) = v36;
  uint64_t v25 = v35;
  *(void *)&long long v55 = v35;
  BYTE8(v55) = v34 & 1;
  *(void *)&v56[0] = v18;
  BYTE8(v56[0]) = v32;
  *(void *)&v56[1] = v33;
  BYTE8(v56[1]) = v22;
  sub_1000AB0CC((uint64_t)&v49);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  uint64_t v57 = v47;
  uint64_t v58 = v23;
  uint64_t v59 = v24;
  uint64_t v60 = v44;
  uint64_t v61 = v43;
  uint64_t v62 = v42;
  uint64_t v63 = v41;
  uint64_t v64 = v40;
  uint64_t v65 = v39;
  char v66 = v91;
  *(_DWORD *)uint64_t v67 = *(_DWORD *)v90;
  *(_DWORD *)&v67[3] = *(_DWORD *)&v90[3];
  uint64_t v68 = v37;
  char v69 = v89;
  char v70 = v15;
  int v71 = v87;
  __int16 v72 = v88;
  uint64_t v73 = v25;
  char v74 = v86;
  *(_DWORD *)uint64_t v75 = *(_DWORD *)v85;
  *(_DWORD *)&v75[3] = *(_DWORD *)&v85[3];
  uint64_t v76 = v18;
  char v77 = v84;
  *(_DWORD *)&v78[3] = *(_DWORD *)&v83[3];
  *(_DWORD *)uint64_t v78 = *(_DWORD *)v83;
  uint64_t v79 = v33;
  char v80 = v82;
  uint64_t result = sub_1000AB104((uint64_t)&v57);
  long long v27 = v56[0];
  a2[6] = v55;
  a2[7] = v27;
  *(_OWORD *)((char *)a2 + 121) = *(_OWORD *)((char *)v56 + 9);
  long long v28 = v52;
  a2[2] = v51;
  a2[3] = v28;
  long long v29 = v54;
  a2[4] = v53;
  a2[5] = v29;
  long long v30 = v50;
  *a2 = v49;
  a2[1] = v30;
  return result;
}

uint64_t sub_10008EAE4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6564756C636E69 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74615070756F7267 && a2 == 0xE900000000000068)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10008EBE4(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_100722298);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  sub_10000C728(a1, v7);
  sub_1000A90D8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    v9[15] = 0;
    LOBYTE(v7) = KeyedDecodingContainer.decode(_:forKey:)();
    v9[14] = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  }
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  return v7 & 1;
}

uint64_t sub_10008ED8C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6465726975716572 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000100632880 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001006328A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001006328C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6E65646469487369 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x72456E4F65646F63 && a2 == 0xEB00000000726F72 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000100632700 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD00000000000001DLL && a2 == 0x80000001006328E0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000100632900 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x736567616D69 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x65646F4E61746164 && a2 == 0xED0000666F6F7250)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 11;
    }
    else {
      return 12;
    }
  }
}

uint64_t sub_10008F240@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100007764(&qword_100722668);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  uint64_t v97 = a1;
  sub_10000C728(a1, v9);
  sub_1000872D4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v97);
  }
  uint64_t v10 = v6;
  uint64_t v56 = a2;
  LOBYTE(v69[0]) = 0;
  uint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v13 = v12;
  LOBYTE(v69[0]) = 1;
  swift_bridgeObjectRetain();
  LODWORD(v55) = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v69[0]) = 2;
  uint64_t v54 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v14 = v11;
  LOBYTE(v69[0]) = 3;
  uint64_t v16 = v15;
  swift_bridgeObjectRetain();
  uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v58 = v16;
  uint64_t v53 = v17;
  LOBYTE(v69[0]) = 4;
  uint64_t v19 = v18;
  swift_bridgeObjectRetain();
  int v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v57 = v19;
  int v52 = v20;
  LOBYTE(v69[0]) = 5;
  int v51 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v69[0]) = 6;
  uint64_t v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v23 = v22;
  uint64_t v49 = v21;
  LOBYTE(v69[0]) = 7;
  swift_bridgeObjectRetain();
  uint64_t v47 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v69[0]) = 8;
  uint64_t v50 = v24;
  swift_bridgeObjectRetain();
  uint64_t v46 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v48 = v25;
  uint64_t v44 = v23;
  sub_100007764(&qword_100721350);
  LOBYTE(v59) = 9;
  sub_1000BEA78(&qword_100722670, &qword_100721350, (void (*)(void))sub_1000B620C);
  swift_bridgeObjectRetain();
  uint64_t v43 = 0;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v26 = v69[0];
  sub_100007764(&qword_100721370);
  LOBYTE(v59) = 10;
  sub_1000BEA78(&qword_100722680, &qword_100721370, (void (*)(void))sub_1000B6260);
  uint64_t v45 = v26;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v27 = v69[0];
  char v91 = 11;
  sub_1000B62B4();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  LOBYTE(v26) = v55 & 1;
  int v41 = v55 & 1;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v5);
  uint64_t v55 = v92;
  uint64_t v42 = v93;
  uint64_t v43 = *((void *)&v92 + 1);
  uint64_t v40 = v14;
  *(void *)&long long v59 = v14;
  *((void *)&v59 + 1) = v13;
  LOBYTE(v60) = v26;
  uint64_t v28 = v57;
  *((void *)&v60 + 1) = v54;
  *(void *)&long long v61 = v58;
  *((void *)&v61 + 1) = v53;
  *(void *)&long long v62 = v57;
  BYTE8(v62) = v52;
  BYTE9(v62) = v51;
  uint64_t v29 = v50;
  uint64_t v31 = v44;
  uint64_t v30 = v45;
  *(void *)&long long v63 = v49;
  *((void *)&v63 + 1) = v44;
  *(void *)&long long v64 = v47;
  *((void *)&v64 + 1) = v50;
  *(void *)&long long v65 = v46;
  *((void *)&v65 + 1) = v48;
  *(void *)&long long v66 = v45;
  *((void *)&v66 + 1) = v27;
  long long v67 = v92;
  uint64_t v68 = v93;
  sub_1000B53AC((uint64_t)&v59);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v32 = v48;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v97);
  v69[0] = v40;
  v69[1] = v13;
  char v70 = v41;
  *(_DWORD *)int v71 = v96[0];
  *(_DWORD *)&v71[3] = *(_DWORD *)((char *)v96 + 3);
  uint64_t v72 = v54;
  uint64_t v73 = v58;
  uint64_t v74 = v53;
  uint64_t v75 = v28;
  char v76 = v52;
  char v77 = v51;
  int v78 = v94;
  __int16 v79 = v95;
  uint64_t v80 = v49;
  uint64_t v81 = v31;
  uint64_t v82 = v47;
  uint64_t v83 = v29;
  uint64_t v84 = v46;
  uint64_t v85 = v32;
  uint64_t v86 = v30;
  uint64_t v87 = v27;
  uint64_t v88 = v55;
  uint64_t v89 = v43;
  uint64_t v90 = v42;
  uint64_t result = sub_1000B5454((uint64_t)v69);
  long long v34 = v66;
  uint64_t v35 = v56;
  *(_OWORD *)(v56 + 96) = v65;
  *(_OWORD *)(v35 + 112) = v34;
  *(_OWORD *)(v35 + 128) = v67;
  *(void *)(v35 + 144) = v68;
  long long v36 = v62;
  *(_OWORD *)(v35 + 32) = v61;
  *(_OWORD *)(v35 + 48) = v36;
  long long v37 = v64;
  *(_OWORD *)(v35 + 64) = v63;
  *(_OWORD *)(v35 + 80) = v37;
  long long v38 = v60;
  *(_OWORD *)uint64_t v35 = v59;
  *(_OWORD *)(v35 + 16) = v38;
  return result;
}

unint64_t sub_10008FBB4()
{
  unint64_t result = qword_1007213A0;
  if (!qword_1007213A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007213A0);
  }
  return result;
}

unint64_t sub_10008FC08()
{
  unint64_t result = qword_1007213C0;
  if (!qword_1007213C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007213C0);
  }
  return result;
}

uint64_t sub_10008FC5C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x74615070756F7267 && a2 == 0xE900000000000068;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7475626972747461 && a2 == 0xEB00000000644965 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656D737365737361 && a2 == 0xEA0000000000746ELL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10008FDE4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100007764(&qword_1007221C8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1000A9930();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  char v23 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v20 = v9;
  char v22 = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v14 = v13;
  uint64_t v18 = v12;
  char v21 = 2;
  swift_bridgeObjectRetain();
  uint64_t v19 = v14;
  LOBYTE(v14) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  uint64_t v15 = v19;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v20;
  *(void *)(a2 + 8) = v11;
  *(void *)(a2 + 16) = v18;
  *(void *)(a2 + 24) = v15;
  *(unsigned char *)(a2 + 32) = v14;
  return result;
}

uint64_t sub_100090068(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701273968 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C746954627573 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x73646C656966 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x736C6562616CLL && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6C6562616CLL && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6570795465676170 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6E6F6974706163 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x7373416567616D69 && a2 == 0xEB00000000737465)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 8;
    }
    else {
      return 9;
    }
  }
}

uint64_t sub_100090400@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100007764(&qword_100722650);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_10008FBB4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  LOBYTE(v52) = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v52) = 1;
  uint64_t v48 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v52) = 2;
  uint64_t v11 = v10;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v50 = v11;
  uint64_t v46 = v12;
  uint64_t v14 = v13;
  uint64_t v15 = sub_100007764(&qword_1007268F0);
  char v51 = 3;
  uint64_t v16 = sub_1000AB18C((unint64_t *)&qword_1007222C8, &qword_1007268F0);
  uint64_t v49 = v14;
  swift_bridgeObjectRetain();
  uint64_t v47 = v16;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v44 = v15;
  uint64_t v17 = v52;
  sub_100007764(&qword_1007213B0);
  char v51 = 4;
  sub_1000BEA78(&qword_100722658, &qword_1007213B0, (void (*)(void))sub_1000B61B8);
  uint64_t v45 = v17;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v18 = v52;
  LOBYTE(v52) = 5;
  swift_bridgeObjectRetain();
  uint64_t v41 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v42 = v19;
  uint64_t v43 = v18;
  LOBYTE(v52) = 6;
  swift_bridgeObjectRetain();
  uint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v22 = v21;
  uint64_t v39 = v20;
  uint64_t v40 = v9;
  uint64_t v23 = v42;
  LOBYTE(v52) = 7;
  swift_bridgeObjectRetain();
  uint64_t v37 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v38 = v24;
  char v51 = 8;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v25 = v52;
  swift_bridgeObjectRetain();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v26 = v43;
  swift_bridgeObjectRelease();
  uint64_t v27 = v45;
  swift_bridgeObjectRelease();
  uint64_t v28 = v49;
  swift_bridgeObjectRelease();
  uint64_t v29 = v50;
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v31 = v48;
  *a2 = v40;
  a2[1] = v31;
  uint64_t v32 = v46;
  a2[2] = v29;
  a2[3] = v32;
  a2[4] = v28;
  a2[5] = v27;
  uint64_t v33 = v41;
  a2[6] = v26;
  a2[7] = v33;
  uint64_t v34 = v39;
  a2[8] = v23;
  a2[9] = v34;
  uint64_t v35 = v37;
  a2[10] = v22;
  a2[11] = v35;
  a2[12] = v38;
  a2[13] = v25;
  return result;
}

uint64_t type metadata accessor for LegacySynthesizedWorkflows()
{
  return self;
}

uint64_t destroy for IQModel(void *a1)
{
  swift_bridgeObjectRelease();
  if (a1[104] != 1)
  {
    if (a1[2] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[6] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[10] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[14] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[18] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[22] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[26] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[30] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[34] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[38] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[42] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[46] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[50] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[54] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[58] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[62] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[66] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[70] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[74] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[78] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[82] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[86] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[90] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[94] != 1) {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[208] != 1)
  {
    if (a1[106] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[110] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[114] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[118] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[122] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[126] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[130] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[134] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[138] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[142] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[146] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[150] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[154] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[158] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[162] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[166] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[170] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[174] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[178] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[182] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[186] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[190] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[194] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[198] != 1) {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[312] != 1)
  {
    if (a1[210] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[214] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[218] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[222] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[226] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[230] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[234] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[238] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[242] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[246] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[250] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[254] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[258] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[262] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[266] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[270] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[274] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[278] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[282] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[286] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[290] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[294] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[298] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[302] != 1) {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[416] != 1)
  {
    if (a1[314] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[318] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[322] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[326] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[330] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[334] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[338] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[342] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[346] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[350] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[354] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[358] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[362] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[366] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[370] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[374] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[378] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[382] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[386] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[390] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[394] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[398] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[402] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[406] != 1) {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[520] != 1)
  {
    if (a1[418] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[422] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[426] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[430] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[434] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[438] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[442] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[446] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[450] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[454] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[458] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[462] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[466] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[470] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[474] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[478] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[482] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[486] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[490] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[494] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[498] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[502] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[506] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[510] != 1) {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[624] != 1)
  {
    if (a1[522] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[526] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[530] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[534] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[538] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[542] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[546] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[550] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[554] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[558] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[562] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[566] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[570] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[574] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[578] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[582] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[586] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[590] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[594] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[598] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[602] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[606] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[610] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[614] != 1) {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[728] != 1)
  {
    if (a1[626] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[630] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[634] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[638] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[642] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[646] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[650] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[654] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[658] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[662] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[666] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[670] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[674] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[678] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[682] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[686] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[690] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[694] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[698] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[702] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[706] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[710] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[714] != 1) {
      swift_bridgeObjectRelease();
    }
    if (a1[718] != 1) {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for IQModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 825;
  uint64_t v5 = a2 + 825;
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = (_OWORD *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 832);
  swift_bridgeObjectRetain();
  if (v8 == 1)
  {
    memcpy((void *)(a1 + 16), v7, 0x340uLL);
  }
  else
  {
    if (*(void *)v7 == 1)
    {
      *(_OWORD *)(a1 + 16) = *v7;
      *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)v7 + 9);
    }
    else
    {
      *(void *)(a1 + 16) = *(void *)v7;
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      swift_bridgeObjectRetain();
    }
    uint64_t v9 = *(void *)(a2 + 48);
    if (v9 == 1)
    {
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
    }
    else
    {
      *(void *)(a1 + 48) = v9;
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
      swift_bridgeObjectRetain();
    }
    uint64_t v10 = *(void *)(a2 + 80);
    if (v10 == 1)
    {
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
    }
    else
    {
      *(void *)(a1 + 80) = v10;
      *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      swift_bridgeObjectRetain();
    }
    uint64_t v11 = *(void *)(a2 + 112);
    if (v11 == 1)
    {
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
    }
    else
    {
      *(void *)(a1 + 112) = v11;
      *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
      swift_bridgeObjectRetain();
    }
    uint64_t v12 = *(void *)(a2 + 144);
    if (v12 == 1)
    {
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 153) = *(_OWORD *)(a2 + 153);
    }
    else
    {
      *(void *)(a1 + 144) = v12;
      *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
      swift_bridgeObjectRetain();
    }
    uint64_t v13 = *(void *)(a2 + 176);
    if (v13 == 1)
    {
      *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 185) = *(_OWORD *)(a2 + 185);
    }
    else
    {
      *(void *)(a1 + 176) = v13;
      *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
      swift_bridgeObjectRetain();
    }
    uint64_t v14 = *(void *)(a2 + 208);
    if (v14 == 1)
    {
      *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a1 + 217) = *(_OWORD *)(a2 + 217);
    }
    else
    {
      *(void *)(a1 + 208) = v14;
      *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
      *(void *)(a1 + 224) = *(void *)(a2 + 224);
      *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
      swift_bridgeObjectRetain();
    }
    uint64_t v15 = *(void *)(a2 + 240);
    if (v15 == 1)
    {
      *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
      *(_OWORD *)(a1 + 249) = *(_OWORD *)(a2 + 249);
    }
    else
    {
      *(void *)(a1 + 240) = v15;
      *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
      *(void *)(a1 + 256) = *(void *)(a2 + 256);
      *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
      swift_bridgeObjectRetain();
    }
    uint64_t v16 = *(void *)(a2 + 272);
    if (v16 == 1)
    {
      *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 281) = *(_OWORD *)(a2 + 281);
    }
    else
    {
      *(void *)(a1 + 272) = v16;
      *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
      *(void *)(a1 + 288) = *(void *)(a2 + 288);
      *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
      swift_bridgeObjectRetain();
    }
    uint64_t v17 = *(void *)(a2 + 304);
    if (v17 == 1)
    {
      *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
      *(_OWORD *)(a1 + 313) = *(_OWORD *)(a2 + 313);
    }
    else
    {
      *(void *)(a1 + 304) = v17;
      *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
      *(void *)(a1 + 320) = *(void *)(a2 + 320);
      *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
      swift_bridgeObjectRetain();
    }
    uint64_t v18 = *(void *)(a2 + 336);
    if (v18 == 1)
    {
      *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
      *(_OWORD *)(a1 + 345) = *(_OWORD *)(a2 + 345);
    }
    else
    {
      *(void *)(a1 + 336) = v18;
      *(unsigned char *)(a1 + 344) = *(unsigned char *)(a2 + 344);
      *(void *)(a1 + 352) = *(void *)(a2 + 352);
      *(unsigned char *)(a1 + 360) = *(unsigned char *)(a2 + 360);
      swift_bridgeObjectRetain();
    }
    uint64_t v19 = *(void *)(a2 + 368);
    if (v19 == 1)
    {
      *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
      *(_OWORD *)(a1 + 377) = *(_OWORD *)(a2 + 377);
    }
    else
    {
      *(void *)(a1 + 368) = v19;
      *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
      *(void *)(a1 + 384) = *(void *)(a2 + 384);
      *(unsigned char *)(a1 + 392) = *(unsigned char *)(a2 + 392);
      swift_bridgeObjectRetain();
    }
    uint64_t v20 = *(void *)(a2 + 400);
    if (v20 == 1)
    {
      *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
      *(_OWORD *)(a1 + 409) = *(_OWORD *)(a2 + 409);
    }
    else
    {
      *(void *)(a1 + 400) = v20;
      *(unsigned char *)(a1 + 408) = *(unsigned char *)(a2 + 408);
      *(void *)(a1 + 416) = *(void *)(a2 + 416);
      *(unsigned char *)(a1 + 424) = *(unsigned char *)(a2 + 424);
      swift_bridgeObjectRetain();
    }
    uint64_t v21 = *(void *)(a2 + 432);
    if (v21 == 1)
    {
      *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
      *(_OWORD *)(a1 + 441) = *(_OWORD *)(a2 + 441);
    }
    else
    {
      *(void *)(a1 + 432) = v21;
      *(unsigned char *)(a1 + 440) = *(unsigned char *)(a2 + 440);
      *(void *)(a1 + 448) = *(void *)(a2 + 448);
      *(unsigned char *)(a1 + 456) = *(unsigned char *)(a2 + 456);
      swift_bridgeObjectRetain();
    }
    uint64_t v22 = *(void *)(a2 + 464);
    if (v22 == 1)
    {
      *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
      *(_OWORD *)(a1 + 473) = *(_OWORD *)(a2 + 473);
    }
    else
    {
      *(void *)(a1 + 464) = v22;
      *(unsigned char *)(a1 + 472) = *(unsigned char *)(a2 + 472);
      *(void *)(a1 + 480) = *(void *)(a2 + 480);
      *(unsigned char *)(a1 + 488) = *(unsigned char *)(a2 + 488);
      swift_bridgeObjectRetain();
    }
    uint64_t v23 = *(void *)(a2 + 496);
    if (v23 == 1)
    {
      *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
      *(_OWORD *)(a1 + 505) = *(_OWORD *)(a2 + 505);
    }
    else
    {
      *(void *)(a1 + 496) = v23;
      *(unsigned char *)(a1 + 504) = *(unsigned char *)(a2 + 504);
      *(void *)(a1 + 512) = *(void *)(a2 + 512);
      *(unsigned char *)(a1 + 520) = *(unsigned char *)(a2 + 520);
      swift_bridgeObjectRetain();
    }
    uint64_t v24 = *(void *)(a2 + 528);
    if (v24 == 1)
    {
      *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
      *(_OWORD *)(a1 + 537) = *(_OWORD *)(a2 + 537);
    }
    else
    {
      *(void *)(a1 + 528) = v24;
      *(unsigned char *)(a1 + 536) = *(unsigned char *)(a2 + 536);
      *(void *)(a1 + 544) = *(void *)(a2 + 544);
      *(unsigned char *)(a1 + 552) = *(unsigned char *)(a2 + 552);
      swift_bridgeObjectRetain();
    }
    uint64_t v25 = *(void *)(a2 + 560);
    if (v25 == 1)
    {
      *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
      *(_OWORD *)(a1 + 569) = *(_OWORD *)(a2 + 569);
    }
    else
    {
      *(void *)(a1 + 560) = v25;
      *(unsigned char *)(a1 + 568) = *(unsigned char *)(a2 + 568);
      *(void *)(a1 + 576) = *(void *)(a2 + 576);
      *(unsigned char *)(a1 + 584) = *(unsigned char *)(a2 + 584);
      swift_bridgeObjectRetain();
    }
    uint64_t v26 = *(void *)(a2 + 592);
    if (v26 == 1)
    {
      *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 592);
      *(_OWORD *)(a1 + 601) = *(_OWORD *)(a2 + 601);
    }
    else
    {
      *(void *)(a1 + 592) = v26;
      *(unsigned char *)(a1 + 600) = *(unsigned char *)(a2 + 600);
      *(void *)(a1 + 608) = *(void *)(a2 + 608);
      *(unsigned char *)(a1 + 616) = *(unsigned char *)(a2 + 616);
      swift_bridgeObjectRetain();
    }
    uint64_t v27 = *(void *)(a2 + 624);
    if (v27 == 1)
    {
      *(_OWORD *)(a1 + 624) = *(_OWORD *)(a2 + 624);
      *(_OWORD *)(a1 + 633) = *(_OWORD *)(a2 + 633);
    }
    else
    {
      *(void *)(a1 + 624) = v27;
      *(unsigned char *)(a1 + 632) = *(unsigned char *)(a2 + 632);
      *(void *)(a1 + 640) = *(void *)(a2 + 640);
      *(unsigned char *)(a1 + 648) = *(unsigned char *)(a2 + 648);
      swift_bridgeObjectRetain();
    }
    uint64_t v28 = *(void *)(a2 + 656);
    if (v28 == 1)
    {
      *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
      *(_OWORD *)(a1 + 665) = *(_OWORD *)(a2 + 665);
    }
    else
    {
      *(void *)(a1 + 656) = v28;
      *(unsigned char *)(a1 + 664) = *(unsigned char *)(a2 + 664);
      *(void *)(a1 + 672) = *(void *)(a2 + 672);
      *(unsigned char *)(a1 + 680) = *(unsigned char *)(a2 + 680);
      swift_bridgeObjectRetain();
    }
    uint64_t v29 = *(void *)(a2 + 688);
    if (v29 == 1)
    {
      *(_OWORD *)(a1 + 688) = *(_OWORD *)(a2 + 688);
      *(_OWORD *)(a1 + 697) = *(_OWORD *)(a2 + 697);
    }
    else
    {
      *(void *)(a1 + 688) = v29;
      *(unsigned char *)(a1 + 696) = *(unsigned char *)(a2 + 696);
      *(void *)(a1 + 704) = *(void *)(a2 + 704);
      *(unsigned char *)(a1 + 712) = *(unsigned char *)(a2 + 712);
      swift_bridgeObjectRetain();
    }
    uint64_t v30 = *(void *)(a2 + 720);
    if (v30 == 1)
    {
      *(_OWORD *)(a1 + 720) = *(_OWORD *)(a2 + 720);
      *(_OWORD *)(a1 + 729) = *(_OWORD *)(a2 + 729);
    }
    else
    {
      *(void *)(a1 + 720) = v30;
      *(unsigned char *)(a1 + 728) = *(unsigned char *)(a2 + 728);
      *(void *)(a1 + 736) = *(void *)(a2 + 736);
      *(unsigned char *)(a1 + 744) = *(unsigned char *)(a2 + 744);
      swift_bridgeObjectRetain();
    }
    uint64_t v31 = *(void *)(a2 + 752);
    if (v31 == 1)
    {
      *(_OWORD *)(a1 + 752) = *(_OWORD *)(a2 + 752);
      *(_OWORD *)(a1 + 761) = *(_OWORD *)(a2 + 761);
    }
    else
    {
      *(void *)(a1 + 752) = v31;
      *(unsigned char *)(a1 + 760) = *(unsigned char *)(a2 + 760);
      *(void *)(a1 + 768) = *(void *)(a2 + 768);
      *(unsigned char *)(a1 + 776) = *(unsigned char *)(a2 + 776);
      swift_bridgeObjectRetain();
    }
    *(_OWORD *)(a1 + 784) = *(_OWORD *)(a2 + 784);
    *(unsigned char *)(a1 + 800) = *(unsigned char *)(a2 + 800);
    *(unsigned char *)(a1 + 824) = *(unsigned char *)(a2 + 824);
    *(_OWORD *)(a1 + 808) = *(_OWORD *)(a2 + 808);
    *(_DWORD *)uint64_t v4 = *(_DWORD *)v5;
    *(_WORD *)(a1 + 829) = *(_WORD *)(a2 + 829);
    *(unsigned char *)(a1 + 831) = *(unsigned char *)(a2 + 831);
    *(void *)(a1 + 832) = v8;
    *(void *)(a1 + 840) = *(void *)(a2 + 840);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v32 = (_OWORD *)(a1 + 848);
  uint64_t v33 = (_OWORD *)(a2 + 848);
  uint64_t v34 = *(void *)(a2 + 1664);
  if (v34 == 1)
  {
    memcpy(v32, v33, 0x340uLL);
  }
  else
  {
    if (*(void *)v33 == 1)
    {
      _OWORD *v32 = *v33;
      *(_OWORD *)(a1 + 857) = *(_OWORD *)(a2 + 857);
    }
    else
    {
      *(void *)(a1 + 848) = *(void *)v33;
      *(unsigned char *)(a1 + 856) = *(unsigned char *)(a2 + 856);
      *(void *)(a1 + 864) = *(void *)(a2 + 864);
      *(unsigned char *)(a1 + 872) = *(unsigned char *)(a2 + 872);
      swift_bridgeObjectRetain();
    }
    uint64_t v35 = *(void *)(a2 + 880);
    if (v35 == 1)
    {
      *(_OWORD *)(a1 + 880) = *(_OWORD *)(a2 + 880);
      *(_OWORD *)(a1 + 889) = *(_OWORD *)(a2 + 889);
    }
    else
    {
      *(void *)(a1 + 880) = v35;
      *(unsigned char *)(a1 + 888) = *(unsigned char *)(a2 + 888);
      *(void *)(a1 + 896) = *(void *)(a2 + 896);
      *(unsigned char *)(a1 + 904) = *(unsigned char *)(a2 + 904);
      swift_bridgeObjectRetain();
    }
    uint64_t v36 = *(void *)(a2 + 912);
    if (v36 == 1)
    {
      *(_OWORD *)(a1 + 912) = *(_OWORD *)(a2 + 912);
      *(_OWORD *)(a1 + 921) = *(_OWORD *)(a2 + 921);
    }
    else
    {
      *(void *)(a1 + 912) = v36;
      *(unsigned char *)(a1 + 920) = *(unsigned char *)(a2 + 920);
      *(void *)(a1 + 928) = *(void *)(a2 + 928);
      *(unsigned char *)(a1 + 936) = *(unsigned char *)(a2 + 936);
      swift_bridgeObjectRetain();
    }
    uint64_t v37 = *(void *)(a2 + 944);
    if (v37 == 1)
    {
      *(_OWORD *)(a1 + 944) = *(_OWORD *)(a2 + 944);
      *(_OWORD *)(a1 + 953) = *(_OWORD *)(a2 + 953);
    }
    else
    {
      *(void *)(a1 + 944) = v37;
      *(unsigned char *)(a1 + 952) = *(unsigned char *)(a2 + 952);
      *(void *)(a1 + 960) = *(void *)(a2 + 960);
      *(unsigned char *)(a1 + 968) = *(unsigned char *)(a2 + 968);
      swift_bridgeObjectRetain();
    }
    uint64_t v38 = *(void *)(a2 + 976);
    if (v38 == 1)
    {
      *(_OWORD *)(a1 + 976) = *(_OWORD *)(a2 + 976);
      *(_OWORD *)(a1 + 985) = *(_OWORD *)(a2 + 985);
    }
    else
    {
      *(void *)(a1 + 976) = v38;
      *(unsigned char *)(a1 + 984) = *(unsigned char *)(a2 + 984);
      *(void *)(a1 + 992) = *(void *)(a2 + 992);
      *(unsigned char *)(a1 + 1000) = *(unsigned char *)(a2 + 1000);
      swift_bridgeObjectRetain();
    }
    uint64_t v39 = *(void *)(a2 + 1008);
    if (v39 == 1)
    {
      *(_OWORD *)(a1 + 1008) = *(_OWORD *)(a2 + 1008);
      *(_OWORD *)(a1 + 1017) = *(_OWORD *)(a2 + 1017);
    }
    else
    {
      *(void *)(a1 + 1008) = v39;
      *(unsigned char *)(a1 + 1016) = *(unsigned char *)(a2 + 1016);
      *(void *)(a1 + 1024) = *(void *)(a2 + 1024);
      *(unsigned char *)(a1 + 1032) = *(unsigned char *)(a2 + 1032);
      swift_bridgeObjectRetain();
    }
    uint64_t v40 = *(void *)(a2 + 1040);
    if (v40 == 1)
    {
      *(_OWORD *)(a1 + 1040) = *(_OWORD *)(a2 + 1040);
      *(_OWORD *)(a1 + 1049) = *(_OWORD *)(a2 + 1049);
    }
    else
    {
      *(void *)(a1 + 1040) = v40;
      *(unsigned char *)(a1 + 1048) = *(unsigned char *)(a2 + 1048);
      *(void *)(a1 + 1056) = *(void *)(a2 + 1056);
      *(unsigned char *)(a1 + 1064) = *(unsigned char *)(a2 + 1064);
      swift_bridgeObjectRetain();
    }
    uint64_t v41 = *(void *)(a2 + 1072);
    if (v41 == 1)
    {
      *(_OWORD *)(a1 + 1072) = *(_OWORD *)(a2 + 1072);
      *(_OWORD *)(a1 + 1081) = *(_OWORD *)(a2 + 1081);
    }
    else
    {
      *(void *)(a1 + 1072) = v41;
      *(unsigned char *)(a1 + 1080) = *(unsigned char *)(a2 + 1080);
      *(void *)(a1 + 1088) = *(void *)(a2 + 1088);
      *(unsigned char *)(a1 + 1096) = *(unsigned char *)(a2 + 1096);
      swift_bridgeObjectRetain();
    }
    uint64_t v42 = *(void *)(a2 + 1104);
    if (v42 == 1)
    {
      *(_OWORD *)(a1 + 1104) = *(_OWORD *)(a2 + 1104);
      *(_OWORD *)(a1 + 1113) = *(_OWORD *)(a2 + 1113);
    }
    else
    {
      *(void *)(a1 + 1104) = v42;
      *(unsigned char *)(a1 + 1112) = *(unsigned char *)(a2 + 1112);
      *(void *)(a1 + 1120) = *(void *)(a2 + 1120);
      *(unsigned char *)(a1 + 1128) = *(unsigned char *)(a2 + 1128);
      swift_bridgeObjectRetain();
    }
    uint64_t v43 = *(void *)(a2 + 1136);
    if (v43 == 1)
    {
      *(_OWORD *)(a1 + 1136) = *(_OWORD *)(a2 + 1136);
      *(_OWORD *)(a1 + 1145) = *(_OWORD *)(a2 + 1145);
    }
    else
    {
      *(void *)(a1 + 1136) = v43;
      *(unsigned char *)(a1 + 1144) = *(unsigned char *)(a2 + 1144);
      *(void *)(a1 + 1152) = *(void *)(a2 + 1152);
      *(unsigned char *)(a1 + 1160) = *(unsigned char *)(a2 + 1160);
      swift_bridgeObjectRetain();
    }
    uint64_t v44 = *(void *)(a2 + 1168);
    if (v44 == 1)
    {
      *(_OWORD *)(a1 + 1168) = *(_OWORD *)(a2 + 1168);
      *(_OWORD *)(a1 + 1177) = *(_OWORD *)(a2 + 1177);
    }
    else
    {
      *(void *)(a1 + 1168) = v44;
      *(unsigned char *)(a1 + 1176) = *(unsigned char *)(a2 + 1176);
      *(void *)(a1 + 1184) = *(void *)(a2 + 1184);
      *(unsigned char *)(a1 + 1192) = *(unsigned char *)(a2 + 1192);
      swift_bridgeObjectRetain();
    }
    uint64_t v45 = *(void *)(a2 + 1200);
    if (v45 == 1)
    {
      *(_OWORD *)(a1 + 1200) = *(_OWORD *)(a2 + 1200);
      *(_OWORD *)(a1 + 1209) = *(_OWORD *)(a2 + 1209);
    }
    else
    {
      *(void *)(a1 + 1200) = v45;
      *(unsigned char *)(a1 + 1208) = *(unsigned char *)(a2 + 1208);
      *(void *)(a1 + 1216) = *(void *)(a2 + 1216);
      *(unsigned char *)(a1 + 1224) = *(unsigned char *)(a2 + 1224);
      swift_bridgeObjectRetain();
    }
    uint64_t v46 = *(void *)(a2 + 1232);
    if (v46 == 1)
    {
      *(_OWORD *)(a1 + 1232) = *(_OWORD *)(a2 + 1232);
      *(_OWORD *)(a1 + 1241) = *(_OWORD *)(a2 + 1241);
    }
    else
    {
      *(void *)(a1 + 1232) = v46;
      *(unsigned char *)(a1 + 1240) = *(unsigned char *)(a2 + 1240);
      *(void *)(a1 + 1248) = *(void *)(a2 + 1248);
      *(unsigned char *)(a1 + 1256) = *(unsigned char *)(a2 + 1256);
      swift_bridgeObjectRetain();
    }
    uint64_t v47 = *(void *)(a2 + 1264);
    if (v47 == 1)
    {
      *(_OWORD *)(a1 + 1264) = *(_OWORD *)(a2 + 1264);
      *(_OWORD *)(a1 + 1273) = *(_OWORD *)(a2 + 1273);
    }
    else
    {
      *(void *)(a1 + 1264) = v47;
      *(unsigned char *)(a1 + 1272) = *(unsigned char *)(a2 + 1272);
      *(void *)(a1 + 1280) = *(void *)(a2 + 1280);
      *(unsigned char *)(a1 + 1288) = *(unsigned char *)(a2 + 1288);
      swift_bridgeObjectRetain();
    }
    uint64_t v48 = *(void *)(a2 + 1296);
    if (v48 == 1)
    {
      *(_OWORD *)(a1 + 1296) = *(_OWORD *)(a2 + 1296);
      *(_OWORD *)(a1 + 1305) = *(_OWORD *)(a2 + 1305);
    }
    else
    {
      *(void *)(a1 + 1296) = v48;
      *(unsigned char *)(a1 + 1304) = *(unsigned char *)(a2 + 1304);
      *(void *)(a1 + 1312) = *(void *)(a2 + 1312);
      *(unsigned char *)(a1 + 1320) = *(unsigned char *)(a2 + 1320);
      swift_bridgeObjectRetain();
    }
    uint64_t v49 = *(void *)(a2 + 1328);
    if (v49 == 1)
    {
      *(_OWORD *)(a1 + 1328) = *(_OWORD *)(a2 + 1328);
      *(_OWORD *)(a1 + 1337) = *(_OWORD *)(a2 + 1337);
    }
    else
    {
      *(void *)(a1 + 1328) = v49;
      *(unsigned char *)(a1 + 1336) = *(unsigned char *)(a2 + 1336);
      *(void *)(a1 + 1344) = *(void *)(a2 + 1344);
      *(unsigned char *)(a1 + 1352) = *(unsigned char *)(a2 + 1352);
      swift_bridgeObjectRetain();
    }
    uint64_t v50 = *(void *)(a2 + 1360);
    if (v50 == 1)
    {
      *(_OWORD *)(a1 + 1360) = *(_OWORD *)(a2 + 1360);
      *(_OWORD *)(a1 + 1369) = *(_OWORD *)(a2 + 1369);
    }
    else
    {
      *(void *)(a1 + 1360) = v50;
      *(unsigned char *)(a1 + 1368) = *(unsigned char *)(a2 + 1368);
      *(void *)(a1 + 1376) = *(void *)(a2 + 1376);
      *(unsigned char *)(a1 + 1384) = *(unsigned char *)(a2 + 1384);
      swift_bridgeObjectRetain();
    }
    uint64_t v51 = *(void *)(a2 + 1392);
    if (v51 == 1)
    {
      *(_OWORD *)(a1 + 1392) = *(_OWORD *)(a2 + 1392);
      *(_OWORD *)(a1 + 1401) = *(_OWORD *)(a2 + 1401);
    }
    else
    {
      *(void *)(a1 + 1392) = v51;
      *(unsigned char *)(a1 + 1400) = *(unsigned char *)(a2 + 1400);
      *(void *)(a1 + 1408) = *(void *)(a2 + 1408);
      *(unsigned char *)(a1 + 1416) = *(unsigned char *)(a2 + 1416);
      swift_bridgeObjectRetain();
    }
    uint64_t v52 = *(void *)(a2 + 1424);
    if (v52 == 1)
    {
      *(_OWORD *)(a1 + 1424) = *(_OWORD *)(a2 + 1424);
      *(_OWORD *)(a1 + 1433) = *(_OWORD *)(a2 + 1433);
    }
    else
    {
      *(void *)(a1 + 1424) = v52;
      *(unsigned char *)(a1 + 1432) = *(unsigned char *)(a2 + 1432);
      *(void *)(a1 + 1440) = *(void *)(a2 + 1440);
      *(unsigned char *)(a1 + 1448) = *(unsigned char *)(a2 + 1448);
      swift_bridgeObjectRetain();
    }
    uint64_t v53 = *(void *)(a2 + 1456);
    if (v53 == 1)
    {
      *(_OWORD *)(a1 + 1456) = *(_OWORD *)(a2 + 1456);
      *(_OWORD *)(a1 + 1465) = *(_OWORD *)(a2 + 1465);
    }
    else
    {
      *(void *)(a1 + 1456) = v53;
      *(unsigned char *)(a1 + 1464) = *(unsigned char *)(a2 + 1464);
      *(void *)(a1 + 1472) = *(void *)(a2 + 1472);
      *(unsigned char *)(a1 + 1480) = *(unsigned char *)(a2 + 1480);
      swift_bridgeObjectRetain();
    }
    uint64_t v54 = *(void *)(a2 + 1488);
    if (v54 == 1)
    {
      *(_OWORD *)(a1 + 1488) = *(_OWORD *)(a2 + 1488);
      *(_OWORD *)(a1 + 1497) = *(_OWORD *)(a2 + 1497);
    }
    else
    {
      *(void *)(a1 + 1488) = v54;
      *(unsigned char *)(a1 + 1496) = *(unsigned char *)(a2 + 1496);
      *(void *)(a1 + 1504) = *(void *)(a2 + 1504);
      *(unsigned char *)(a1 + 1512) = *(unsigned char *)(a2 + 1512);
      swift_bridgeObjectRetain();
    }
    uint64_t v55 = *(void *)(a2 + 1520);
    if (v55 == 1)
    {
      *(_OWORD *)(a1 + 1520) = *(_OWORD *)(a2 + 1520);
      *(_OWORD *)(a1 + 1529) = *(_OWORD *)(a2 + 1529);
    }
    else
    {
      *(void *)(a1 + 1520) = v55;
      *(unsigned char *)(a1 + 1528) = *(unsigned char *)(a2 + 1528);
      *(void *)(a1 + 1536) = *(void *)(a2 + 1536);
      *(unsigned char *)(a1 + 1544) = *(unsigned char *)(a2 + 1544);
      swift_bridgeObjectRetain();
    }
    uint64_t v56 = *(void *)(a2 + 1552);
    if (v56 == 1)
    {
      *(_OWORD *)(a1 + 1552) = *(_OWORD *)(a2 + 1552);
      *(_OWORD *)(a1 + 1561) = *(_OWORD *)(a2 + 1561);
    }
    else
    {
      *(void *)(a1 + 1552) = v56;
      *(unsigned char *)(a1 + 1560) = *(unsigned char *)(a2 + 1560);
      *(void *)(a1 + 1568) = *(void *)(a2 + 1568);
      *(unsigned char *)(a1 + 1576) = *(unsigned char *)(a2 + 1576);
      swift_bridgeObjectRetain();
    }
    uint64_t v57 = *(void *)(a2 + 1584);
    if (v57 == 1)
    {
      *(_OWORD *)(a1 + 1584) = *(_OWORD *)(a2 + 1584);
      *(_OWORD *)(a1 + 1593) = *(_OWORD *)(a2 + 1593);
    }
    else
    {
      *(void *)(a1 + 1584) = v57;
      *(unsigned char *)(a1 + 1592) = *(unsigned char *)(a2 + 1592);
      *(void *)(a1 + 1600) = *(void *)(a2 + 1600);
      *(unsigned char *)(a1 + 1608) = *(unsigned char *)(a2 + 1608);
      swift_bridgeObjectRetain();
    }
    *(_OWORD *)(a1 + 1616) = *(_OWORD *)(a2 + 1616);
    *(unsigned char *)(a1 + 1632) = *(unsigned char *)(a2 + 1632);
    *(unsigned char *)(a1 + 1656) = *(unsigned char *)(a2 + 1656);
    *(_OWORD *)(a1 + 1640) = *(_OWORD *)(a2 + 1640);
    *(_DWORD *)(v4 + 832) = *(_DWORD *)(v5 + 832);
    *(_WORD *)(a1 + 1661) = *(_WORD *)(a2 + 1661);
    *(unsigned char *)(a1 + 1663) = *(unsigned char *)(a2 + 1663);
    *(void *)(a1 + 1664) = v34;
    *(void *)(a1 + 1672) = *(void *)(a2 + 1672);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v58 = (_OWORD *)(a1 + 1680);
  long long v59 = (_OWORD *)(a2 + 1680);
  uint64_t v60 = *(void *)(a2 + 2496);
  if (v60 == 1)
  {
    memcpy(v58, v59, 0x340uLL);
  }
  else
  {
    if (*(void *)v59 == 1)
    {
      *uint64_t v58 = *v59;
      *(_OWORD *)(a1 + 1689) = *(_OWORD *)(a2 + 1689);
    }
    else
    {
      *(void *)(a1 + 1680) = *(void *)v59;
      *(unsigned char *)(a1 + 1688) = *(unsigned char *)(a2 + 1688);
      *(void *)(a1 + 1696) = *(void *)(a2 + 1696);
      *(unsigned char *)(a1 + 1704) = *(unsigned char *)(a2 + 1704);
      swift_bridgeObjectRetain();
    }
    uint64_t v61 = *(void *)(a2 + 1712);
    if (v61 == 1)
    {
      *(_OWORD *)(a1 + 1712) = *(_OWORD *)(a2 + 1712);
      *(_OWORD *)(a1 + 1721) = *(_OWORD *)(a2 + 1721);
    }
    else
    {
      *(void *)(a1 + 1712) = v61;
      *(unsigned char *)(a1 + 1720) = *(unsigned char *)(a2 + 1720);
      *(void *)(a1 + 1728) = *(void *)(a2 + 1728);
      *(unsigned char *)(a1 + 1736) = *(unsigned char *)(a2 + 1736);
      swift_bridgeObjectRetain();
    }
    uint64_t v62 = *(void *)(a2 + 1744);
    if (v62 == 1)
    {
      *(_OWORD *)(a1 + 1744) = *(_OWORD *)(a2 + 1744);
      *(_OWORD *)(a1 + 1753) = *(_OWORD *)(a2 + 1753);
    }
    else
    {
      *(void *)(a1 + 1744) = v62;
      *(unsigned char *)(a1 + 1752) = *(unsigned char *)(a2 + 1752);
      *(void *)(a1 + 1760) = *(void *)(a2 + 1760);
      *(unsigned char *)(a1 + 1768) = *(unsigned char *)(a2 + 1768);
      swift_bridgeObjectRetain();
    }
    uint64_t v63 = *(void *)(a2 + 1776);
    if (v63 == 1)
    {
      *(_OWORD *)(a1 + 1776) = *(_OWORD *)(a2 + 1776);
      *(_OWORD *)(a1 + 1785) = *(_OWORD *)(a2 + 1785);
    }
    else
    {
      *(void *)(a1 + 1776) = v63;
      *(unsigned char *)(a1 + 1784) = *(unsigned char *)(a2 + 1784);
      *(void *)(a1 + 1792) = *(void *)(a2 + 1792);
      *(unsigned char *)(a1 + 1800) = *(unsigned char *)(a2 + 1800);
      swift_bridgeObjectRetain();
    }
    uint64_t v64 = *(void *)(a2 + 1808);
    if (v64 == 1)
    {
      *(_OWORD *)(a1 + 1808) = *(_OWORD *)(a2 + 1808);
      *(_OWORD *)(a1 + 1817) = *(_OWORD *)(a2 + 1817);
    }
    else
    {
      *(void *)(a1 + 1808) = v64;
      *(unsigned char *)(a1 + 1816) = *(unsigned char *)(a2 + 1816);
      *(void *)(a1 + 1824) = *(void *)(a2 + 1824);
      *(unsigned char *)(a1 + 1832) = *(unsigned char *)(a2 + 1832);
      swift_bridgeObjectRetain();
    }
    uint64_t v65 = *(void *)(a2 + 1840);
    if (v65 == 1)
    {
      *(_OWORD *)(a1 + 1840) = *(_OWORD *)(a2 + 1840);
      *(_OWORD *)(a1 + 1849) = *(_OWORD *)(a2 + 1849);
    }
    else
    {
      *(void *)(a1 + 1840) = v65;
      *(unsigned char *)(a1 + 1848) = *(unsigned char *)(a2 + 1848);
      *(void *)(a1 + 1856) = *(void *)(a2 + 1856);
      *(unsigned char *)(a1 + 1864) = *(unsigned char *)(a2 + 1864);
      swift_bridgeObjectRetain();
    }
    uint64_t v66 = *(void *)(a2 + 1872);
    if (v66 == 1)
    {
      *(_OWORD *)(a1 + 1872) = *(_OWORD *)(a2 + 1872);
      *(_OWORD *)(a1 + 1881) = *(_OWORD *)(a2 + 1881);
    }
    else
    {
      *(void *)(a1 + 1872) = v66;
      *(unsigned char *)(a1 + 1880) = *(unsigned char *)(a2 + 1880);
      *(void *)(a1 + 1888) = *(void *)(a2 + 1888);
      *(unsigned char *)(a1 + 1896) = *(unsigned char *)(a2 + 1896);
      swift_bridgeObjectRetain();
    }
    uint64_t v67 = *(void *)(a2 + 1904);
    if (v67 == 1)
    {
      *(_OWORD *)(a1 + 1904) = *(_OWORD *)(a2 + 1904);
      *(_OWORD *)(a1 + 1913) = *(_OWORD *)(a2 + 1913);
    }
    else
    {
      *(void *)(a1 + 1904) = v67;
      *(unsigned char *)(a1 + 1912) = *(unsigned char *)(a2 + 1912);
      *(void *)(a1 + 1920) = *(void *)(a2 + 1920);
      *(unsigned char *)(a1 + 1928) = *(unsigned char *)(a2 + 1928);
      swift_bridgeObjectRetain();
    }
    uint64_t v68 = *(void *)(a2 + 1936);
    if (v68 == 1)
    {
      *(_OWORD *)(a1 + 1936) = *(_OWORD *)(a2 + 1936);
      *(_OWORD *)(a1 + 1945) = *(_OWORD *)(a2 + 1945);
    }
    else
    {
      *(void *)(a1 + 1936) = v68;
      *(unsigned char *)(a1 + 1944) = *(unsigned char *)(a2 + 1944);
      *(void *)(a1 + 1952) = *(void *)(a2 + 1952);
      *(unsigned char *)(a1 + 1960) = *(unsigned char *)(a2 + 1960);
      swift_bridgeObjectRetain();
    }
    uint64_t v69 = *(void *)(a2 + 1968);
    if (v69 == 1)
    {
      *(_OWORD *)(a1 + 1968) = *(_OWORD *)(a2 + 1968);
      *(_OWORD *)(a1 + 1977) = *(_OWORD *)(a2 + 1977);
    }
    else
    {
      *(void *)(a1 + 1968) = v69;
      *(unsigned char *)(a1 + 1976) = *(unsigned char *)(a2 + 1976);
      *(void *)(a1 + 1984) = *(void *)(a2 + 1984);
      *(unsigned char *)(a1 + 1992) = *(unsigned char *)(a2 + 1992);
      swift_bridgeObjectRetain();
    }
    uint64_t v70 = *(void *)(a2 + 2000);
    if (v70 == 1)
    {
      *(_OWORD *)(a1 + 2000) = *(_OWORD *)(a2 + 2000);
      *(_OWORD *)(a1 + 2009) = *(_OWORD *)(a2 + 2009);
    }
    else
    {
      *(void *)(a1 + 2000) = v70;
      *(unsigned char *)(a1 + 2008) = *(unsigned char *)(a2 + 2008);
      *(void *)(a1 + 2016) = *(void *)(a2 + 2016);
      *(unsigned char *)(a1 + 2024) = *(unsigned char *)(a2 + 2024);
      swift_bridgeObjectRetain();
    }
    uint64_t v71 = *(void *)(a2 + 2032);
    if (v71 == 1)
    {
      *(_OWORD *)(a1 + 2032) = *(_OWORD *)(a2 + 2032);
      *(_OWORD *)(a1 + 2041) = *(_OWORD *)(a2 + 2041);
    }
    else
    {
      *(void *)(a1 + 2032) = v71;
      *(unsigned char *)(a1 + 2040) = *(unsigned char *)(a2 + 2040);
      *(void *)(a1 + 2048) = *(void *)(a2 + 2048);
      *(unsigned char *)(a1 + 2056) = *(unsigned char *)(a2 + 2056);
      swift_bridgeObjectRetain();
    }
    uint64_t v72 = *(void *)(a2 + 2064);
    if (v72 == 1)
    {
      *(_OWORD *)(a1 + 2064) = *(_OWORD *)(a2 + 2064);
      *(_OWORD *)(a1 + 2073) = *(_OWORD *)(a2 + 2073);
    }
    else
    {
      *(void *)(a1 + 2064) = v72;
      *(unsigned char *)(a1 + 2072) = *(unsigned char *)(a2 + 2072);
      *(void *)(a1 + 2080) = *(void *)(a2 + 2080);
      *(unsigned char *)(a1 + 2088) = *(unsigned char *)(a2 + 2088);
      swift_bridgeObjectRetain();
    }
    uint64_t v73 = *(void *)(a2 + 2096);
    if (v73 == 1)
    {
      *(_OWORD *)(a1 + 2096) = *(_OWORD *)(a2 + 2096);
      *(_OWORD *)(a1 + 2105) = *(_OWORD *)(a2 + 2105);
    }
    else
    {
      *(void *)(a1 + 2096) = v73;
      *(unsigned char *)(a1 + 2104) = *(unsigned char *)(a2 + 2104);
      *(void *)(a1 + 2112) = *(void *)(a2 + 2112);
      *(unsigned char *)(a1 + 2120) = *(unsigned char *)(a2 + 2120);
      swift_bridgeObjectRetain();
    }
    uint64_t v74 = *(void *)(a2 + 2128);
    if (v74 == 1)
    {
      *(_OWORD *)(a1 + 2128) = *(_OWORD *)(a2 + 2128);
      *(_OWORD *)(a1 + 2137) = *(_OWORD *)(a2 + 2137);
    }
    else
    {
      *(void *)(a1 + 2128) = v74;
      *(unsigned char *)(a1 + 2136) = *(unsigned char *)(a2 + 2136);
      *(void *)(a1 + 2144) = *(void *)(a2 + 2144);
      *(unsigned char *)(a1 + 2152) = *(unsigned char *)(a2 + 2152);
      swift_bridgeObjectRetain();
    }
    uint64_t v75 = *(void *)(a2 + 2160);
    if (v75 == 1)
    {
      *(_OWORD *)(a1 + 2160) = *(_OWORD *)(a2 + 2160);
      *(_OWORD *)(a1 + 2169) = *(_OWORD *)(a2 + 2169);
    }
    else
    {
      *(void *)(a1 + 2160) = v75;
      *(unsigned char *)(a1 + 2168) = *(unsigned char *)(a2 + 2168);
      *(void *)(a1 + 2176) = *(void *)(a2 + 2176);
      *(unsigned char *)(a1 + 2184) = *(unsigned char *)(a2 + 2184);
      swift_bridgeObjectRetain();
    }
    uint64_t v76 = *(void *)(a2 + 2192);
    if (v76 == 1)
    {
      *(_OWORD *)(a1 + 2192) = *(_OWORD *)(a2 + 2192);
      *(_OWORD *)(a1 + 2201) = *(_OWORD *)(a2 + 2201);
    }
    else
    {
      *(void *)(a1 + 2192) = v76;
      *(unsigned char *)(a1 + 2200) = *(unsigned char *)(a2 + 2200);
      *(void *)(a1 + 2208) = *(void *)(a2 + 2208);
      *(unsigned char *)(a1 + 2216) = *(unsigned char *)(a2 + 2216);
      swift_bridgeObjectRetain();
    }
    uint64_t v77 = *(void *)(a2 + 2224);
    if (v77 == 1)
    {
      *(_OWORD *)(a1 + 2224) = *(_OWORD *)(a2 + 2224);
      *(_OWORD *)(a1 + 2233) = *(_OWORD *)(a2 + 2233);
    }
    else
    {
      *(void *)(a1 + 2224) = v77;
      *(unsigned char *)(a1 + 2232) = *(unsigned char *)(a2 + 2232);
      *(void *)(a1 + 2240) = *(void *)(a2 + 2240);
      *(unsigned char *)(a1 + 2248) = *(unsigned char *)(a2 + 2248);
      swift_bridgeObjectRetain();
    }
    uint64_t v78 = *(void *)(a2 + 2256);
    if (v78 == 1)
    {
      *(_OWORD *)(a1 + 2256) = *(_OWORD *)(a2 + 2256);
      *(_OWORD *)(a1 + 2265) = *(_OWORD *)(a2 + 2265);
    }
    else
    {
      *(void *)(a1 + 2256) = v78;
      *(unsigned char *)(a1 + 2264) = *(unsigned char *)(a2 + 2264);
      *(void *)(a1 + 2272) = *(void *)(a2 + 2272);
      *(unsigned char *)(a1 + 2280) = *(unsigned char *)(a2 + 2280);
      swift_bridgeObjectRetain();
    }
    uint64_t v79 = *(void *)(a2 + 2288);
    if (v79 == 1)
    {
      *(_OWORD *)(a1 + 2288) = *(_OWORD *)(a2 + 2288);
      *(_OWORD *)(a1 + 2297) = *(_OWORD *)(a2 + 2297);
    }
    else
    {
      *(void *)(a1 + 2288) = v79;
      *(unsigned char *)(a1 + 2296) = *(unsigned char *)(a2 + 2296);
      *(void *)(a1 + 2304) = *(void *)(a2 + 2304);
      *(unsigned char *)(a1 + 2312) = *(unsigned char *)(a2 + 2312);
      swift_bridgeObjectRetain();
    }
    uint64_t v80 = *(void *)(a2 + 2320);
    if (v80 == 1)
    {
      *(_OWORD *)(a1 + 2320) = *(_OWORD *)(a2 + 2320);
      *(_OWORD *)(a1 + 2329) = *(_OWORD *)(a2 + 2329);
    }
    else
    {
      *(void *)(a1 + 2320) = v80;
      *(unsigned char *)(a1 + 2328) = *(unsigned char *)(a2 + 2328);
      *(void *)(a1 + 2336) = *(void *)(a2 + 2336);
      *(unsigned char *)(a1 + 2344) = *(unsigned char *)(a2 + 2344);
      swift_bridgeObjectRetain();
    }
    uint64_t v81 = *(void *)(a2 + 2352);
    if (v81 == 1)
    {
      *(_OWORD *)(a1 + 2352) = *(_OWORD *)(a2 + 2352);
      *(_OWORD *)(a1 + 2361) = *(_OWORD *)(a2 + 2361);
    }
    else
    {
      *(void *)(a1 + 2352) = v81;
      *(unsigned char *)(a1 + 2360) = *(unsigned char *)(a2 + 2360);
      *(void *)(a1 + 2368) = *(void *)(a2 + 2368);
      *(unsigned char *)(a1 + 2376) = *(unsigned char *)(a2 + 2376);
      swift_bridgeObjectRetain();
    }
    uint64_t v82 = *(void *)(a2 + 2384);
    if (v82 == 1)
    {
      *(_OWORD *)(a1 + 2384) = *(_OWORD *)(a2 + 2384);
      *(_OWORD *)(a1 + 2393) = *(_OWORD *)(a2 + 2393);
    }
    else
    {
      *(void *)(a1 + 2384) = v82;
      *(unsigned char *)(a1 + 2392) = *(unsigned char *)(a2 + 2392);
      *(void *)(a1 + 2400) = *(void *)(a2 + 2400);
      *(unsigned char *)(a1 + 2408) = *(unsigned char *)(a2 + 2408);
      swift_bridgeObjectRetain();
    }
    uint64_t v83 = *(void *)(a2 + 2416);
    if (v83 == 1)
    {
      *(_OWORD *)(a1 + 2416) = *(_OWORD *)(a2 + 2416);
      *(_OWORD *)(a1 + 2425) = *(_OWORD *)(a2 + 2425);
    }
    else
    {
      *(void *)(a1 + 2416) = v83;
      *(unsigned char *)(a1 + 2424) = *(unsigned char *)(a2 + 2424);
      *(void *)(a1 + 2432) = *(void *)(a2 + 2432);
      *(unsigned char *)(a1 + 2440) = *(unsigned char *)(a2 + 2440);
      swift_bridgeObjectRetain();
    }
    *(_OWORD *)(a1 + 2448) = *(_OWORD *)(a2 + 2448);
    *(unsigned char *)(a1 + 2464) = *(unsigned char *)(a2 + 2464);
    *(unsigned char *)(a1 + 2488) = *(unsigned char *)(a2 + 2488);
    *(_OWORD *)(a1 + 2472) = *(_OWORD *)(a2 + 2472);
    *(_DWORD *)(v4 + 1664) = *(_DWORD *)(v5 + 1664);
    *(_WORD *)(a1 + 2493) = *(_WORD *)(a2 + 2493);
    *(unsigned char *)(a1 + 2495) = *(unsigned char *)(a2 + 2495);
    *(void *)(a1 + 2496) = v60;
    *(void *)(a1 + 2504) = *(void *)(a2 + 2504);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v84 = (_OWORD *)(a1 + 2512);
  uint64_t v85 = (_OWORD *)(a2 + 2512);
  uint64_t v86 = *(void *)(a2 + 3328);
  if (v86 == 1)
  {
    memcpy(v84, v85, 0x340uLL);
  }
  else
  {
    if (*(void *)v85 == 1)
    {
      *uint64_t v84 = *v85;
      *(_OWORD *)(a1 + 2521) = *(_OWORD *)(a2 + 2521);
    }
    else
    {
      *(void *)(a1 + 2512) = *(void *)v85;
      *(unsigned char *)(a1 + 2520) = *(unsigned char *)(a2 + 2520);
      *(void *)(a1 + 2528) = *(void *)(a2 + 2528);
      *(unsigned char *)(a1 + 2536) = *(unsigned char *)(a2 + 2536);
      swift_bridgeObjectRetain();
    }
    uint64_t v87 = *(void *)(a2 + 2544);
    if (v87 == 1)
    {
      *(_OWORD *)(a1 + 2544) = *(_OWORD *)(a2 + 2544);
      *(_OWORD *)(a1 + 2553) = *(_OWORD *)(a2 + 2553);
    }
    else
    {
      *(void *)(a1 + 2544) = v87;
      *(unsigned char *)(a1 + 2552) = *(unsigned char *)(a2 + 2552);
      *(void *)(a1 + 2560) = *(void *)(a2 + 2560);
      *(unsigned char *)(a1 + 2568) = *(unsigned char *)(a2 + 2568);
      swift_bridgeObjectRetain();
    }
    uint64_t v88 = *(void *)(a2 + 2576);
    if (v88 == 1)
    {
      *(_OWORD *)(a1 + 2576) = *(_OWORD *)(a2 + 2576);
      *(_OWORD *)(a1 + 2585) = *(_OWORD *)(a2 + 2585);
    }
    else
    {
      *(void *)(a1 + 2576) = v88;
      *(unsigned char *)(a1 + 2584) = *(unsigned char *)(a2 + 2584);
      *(void *)(a1 + 2592) = *(void *)(a2 + 2592);
      *(unsigned char *)(a1 + 2600) = *(unsigned char *)(a2 + 2600);
      swift_bridgeObjectRetain();
    }
    uint64_t v89 = *(void *)(a2 + 2608);
    if (v89 == 1)
    {
      *(_OWORD *)(a1 + 2608) = *(_OWORD *)(a2 + 2608);
      *(_OWORD *)(a1 + 2617) = *(_OWORD *)(a2 + 2617);
    }
    else
    {
      *(void *)(a1 + 2608) = v89;
      *(unsigned char *)(a1 + 2616) = *(unsigned char *)(a2 + 2616);
      *(void *)(a1 + 2624) = *(void *)(a2 + 2624);
      *(unsigned char *)(a1 + 2632) = *(unsigned char *)(a2 + 2632);
      swift_bridgeObjectRetain();
    }
    uint64_t v90 = *(void *)(a2 + 2640);
    if (v90 == 1)
    {
      *(_OWORD *)(a1 + 2640) = *(_OWORD *)(a2 + 2640);
      *(_OWORD *)(a1 + 2649) = *(_OWORD *)(a2 + 2649);
    }
    else
    {
      *(void *)(a1 + 2640) = v90;
      *(unsigned char *)(a1 + 2648) = *(unsigned char *)(a2 + 2648);
      *(void *)(a1 + 2656) = *(void *)(a2 + 2656);
      *(unsigned char *)(a1 + 2664) = *(unsigned char *)(a2 + 2664);
      swift_bridgeObjectRetain();
    }
    uint64_t v91 = *(void *)(a2 + 2672);
    if (v91 == 1)
    {
      *(_OWORD *)(a1 + 2672) = *(_OWORD *)(a2 + 2672);
      *(_OWORD *)(a1 + 2681) = *(_OWORD *)(a2 + 2681);
    }
    else
    {
      *(void *)(a1 + 2672) = v91;
      *(unsigned char *)(a1 + 2680) = *(unsigned char *)(a2 + 2680);
      *(void *)(a1 + 2688) = *(void *)(a2 + 2688);
      *(unsigned char *)(a1 + 2696) = *(unsigned char *)(a2 + 2696);
      swift_bridgeObjectRetain();
    }
    uint64_t v92 = *(void *)(a2 + 2704);
    if (v92 == 1)
    {
      *(_OWORD *)(a1 + 2704) = *(_OWORD *)(a2 + 2704);
      *(_OWORD *)(a1 + 2713) = *(_OWORD *)(a2 + 2713);
    }
    else
    {
      *(void *)(a1 + 2704) = v92;
      *(unsigned char *)(a1 + 2712) = *(unsigned char *)(a2 + 2712);
      *(void *)(a1 + 2720) = *(void *)(a2 + 2720);
      *(unsigned char *)(a1 + 2728) = *(unsigned char *)(a2 + 2728);
      swift_bridgeObjectRetain();
    }
    uint64_t v93 = *(void *)(a2 + 2736);
    if (v93 == 1)
    {
      *(_OWORD *)(a1 + 2736) = *(_OWORD *)(a2 + 2736);
      *(_OWORD *)(a1 + 2745) = *(_OWORD *)(a2 + 2745);
    }
    else
    {
      *(void *)(a1 + 2736) = v93;
      *(unsigned char *)(a1 + 2744) = *(unsigned char *)(a2 + 2744);
      *(void *)(a1 + 2752) = *(void *)(a2 + 2752);
      *(unsigned char *)(a1 + 2760) = *(unsigned char *)(a2 + 2760);
      swift_bridgeObjectRetain();
    }
    uint64_t v94 = *(void *)(a2 + 2768);
    if (v94 == 1)
    {
      *(_OWORD *)(a1 + 2768) = *(_OWORD *)(a2 + 2768);
      *(_OWORD *)(a1 + 2777) = *(_OWORD *)(a2 + 2777);
    }
    else
    {
      *(void *)(a1 + 2768) = v94;
      *(unsigned char *)(a1 + 2776) = *(unsigned char *)(a2 + 2776);
      *(void *)(a1 + 2784) = *(void *)(a2 + 2784);
      *(unsigned char *)(a1 + 2792) = *(unsigned char *)(a2 + 2792);
      swift_bridgeObjectRetain();
    }
    uint64_t v95 = *(void *)(a2 + 2800);
    if (v95 == 1)
    {
      *(_OWORD *)(a1 + 2800) = *(_OWORD *)(a2 + 2800);
      *(_OWORD *)(a1 + 2809) = *(_OWORD *)(a2 + 2809);
    }
    else
    {
      *(void *)(a1 + 2800) = v95;
      *(unsigned char *)(a1 + 2808) = *(unsigned char *)(a2 + 2808);
      *(void *)(a1 + 2816) = *(void *)(a2 + 2816);
      *(unsigned char *)(a1 + 2824) = *(unsigned char *)(a2 + 2824);
      swift_bridgeObjectRetain();
    }
    uint64_t v96 = *(void *)(a2 + 2832);
    if (v96 == 1)
    {
      *(_OWORD *)(a1 + 2832) = *(_OWORD *)(a2 + 2832);
      *(_OWORD *)(a1 + 2841) = *(_OWORD *)(a2 + 2841);
    }
    else
    {
      *(void *)(a1 + 2832) = v96;
      *(unsigned char *)(a1 + 2840) = *(unsigned char *)(a2 + 2840);
      *(void *)(a1 + 2848) = *(void *)(a2 + 2848);
      *(unsigned char *)(a1 + 2856) = *(unsigned char *)(a2 + 2856);
      swift_bridgeObjectRetain();
    }
    uint64_t v97 = *(void *)(a2 + 2864);
    if (v97 == 1)
    {
      *(_OWORD *)(a1 + 2864) = *(_OWORD *)(a2 + 2864);
      *(_OWORD *)(a1 + 2873) = *(_OWORD *)(a2 + 2873);
    }
    else
    {
      *(void *)(a1 + 2864) = v97;
      *(unsigned char *)(a1 + 2872) = *(unsigned char *)(a2 + 2872);
      *(void *)(a1 + 2880) = *(void *)(a2 + 2880);
      *(unsigned char *)(a1 + 2888) = *(unsigned char *)(a2 + 2888);
      swift_bridgeObjectRetain();
    }
    uint64_t v98 = *(void *)(a2 + 2896);
    if (v98 == 1)
    {
      *(_OWORD *)(a1 + 2896) = *(_OWORD *)(a2 + 2896);
      *(_OWORD *)(a1 + 2905) = *(_OWORD *)(a2 + 2905);
    }
    else
    {
      *(void *)(a1 + 2896) = v98;
      *(unsigned char *)(a1 + 2904) = *(unsigned char *)(a2 + 2904);
      *(void *)(a1 + 2912) = *(void *)(a2 + 2912);
      *(unsigned char *)(a1 + 2920) = *(unsigned char *)(a2 + 2920);
      swift_bridgeObjectRetain();
    }
    uint64_t v99 = *(void *)(a2 + 2928);
    if (v99 == 1)
    {
      *(_OWORD *)(a1 + 2928) = *(_OWORD *)(a2 + 2928);
      *(_OWORD *)(a1 + 2937) = *(_OWORD *)(a2 + 2937);
    }
    else
    {
      *(void *)(a1 + 2928) = v99;
      *(unsigned char *)(a1 + 2936) = *(unsigned char *)(a2 + 2936);
      *(void *)(a1 + 2944) = *(void *)(a2 + 2944);
      *(unsigned char *)(a1 + 2952) = *(unsigned char *)(a2 + 2952);
      swift_bridgeObjectRetain();
    }
    uint64_t v100 = *(void *)(a2 + 2960);
    if (v100 == 1)
    {
      *(_OWORD *)(a1 + 2960) = *(_OWORD *)(a2 + 2960);
      *(_OWORD *)(a1 + 2969) = *(_OWORD *)(a2 + 2969);
    }
    else
    {
      *(void *)(a1 + 2960) = v100;
      *(unsigned char *)(a1 + 2968) = *(unsigned char *)(a2 + 2968);
      *(void *)(a1 + 2976) = *(void *)(a2 + 2976);
      *(unsigned char *)(a1 + 2984) = *(unsigned char *)(a2 + 2984);
      swift_bridgeObjectRetain();
    }
    uint64_t v101 = *(void *)(a2 + 2992);
    if (v101 == 1)
    {
      *(_OWORD *)(a1 + 2992) = *(_OWORD *)(a2 + 2992);
      *(_OWORD *)(a1 + 3001) = *(_OWORD *)(a2 + 3001);
    }
    else
    {
      *(void *)(a1 + 2992) = v101;
      *(unsigned char *)(a1 + 3000) = *(unsigned char *)(a2 + 3000);
      *(void *)(a1 + 3008) = *(void *)(a2 + 3008);
      *(unsigned char *)(a1 + 3016) = *(unsigned char *)(a2 + 3016);
      swift_bridgeObjectRetain();
    }
    uint64_t v102 = *(void *)(a2 + 3024);
    if (v102 == 1)
    {
      *(_OWORD *)(a1 + 3024) = *(_OWORD *)(a2 + 3024);
      *(_OWORD *)(a1 + 3033) = *(_OWORD *)(a2 + 3033);
    }
    else
    {
      *(void *)(a1 + 3024) = v102;
      *(unsigned char *)(a1 + 3032) = *(unsigned char *)(a2 + 3032);
      *(void *)(a1 + 3040) = *(void *)(a2 + 3040);
      *(unsigned char *)(a1 + 3048) = *(unsigned char *)(a2 + 3048);
      swift_bridgeObjectRetain();
    }
    uint64_t v103 = *(void *)(a2 + 3056);
    if (v103 == 1)
    {
      *(_OWORD *)(a1 + 3056) = *(_OWORD *)(a2 + 3056);
      *(_OWORD *)(a1 + 3065) = *(_OWORD *)(a2 + 3065);
    }
    else
    {
      *(void *)(a1 + 3056) = v103;
      *(unsigned char *)(a1 + 3064) = *(unsigned char *)(a2 + 3064);
      *(void *)(a1 + 3072) = *(void *)(a2 + 3072);
      *(unsigned char *)(a1 + 3080) = *(unsigned char *)(a2 + 3080);
      swift_bridgeObjectRetain();
    }
    uint64_t v104 = *(void *)(a2 + 3088);
    if (v104 == 1)
    {
      *(_OWORD *)(a1 + 3088) = *(_OWORD *)(a2 + 3088);
      *(_OWORD *)(a1 + 3097) = *(_OWORD *)(a2 + 3097);
    }
    else
    {
      *(void *)(a1 + 3088) = v104;
      *(unsigned char *)(a1 + 3096) = *(unsigned char *)(a2 + 3096);
      *(void *)(a1 + 3104) = *(void *)(a2 + 3104);
      *(unsigned char *)(a1 + 3112) = *(unsigned char *)(a2 + 3112);
      swift_bridgeObjectRetain();
    }
    uint64_t v105 = *(void *)(a2 + 3120);
    if (v105 == 1)
    {
      *(_OWORD *)(a1 + 3120) = *(_OWORD *)(a2 + 3120);
      *(_OWORD *)(a1 + 3129) = *(_OWORD *)(a2 + 3129);
    }
    else
    {
      *(void *)(a1 + 3120) = v105;
      *(unsigned char *)(a1 + 3128) = *(unsigned char *)(a2 + 3128);
      *(void *)(a1 + 3136) = *(void *)(a2 + 3136);
      *(unsigned char *)(a1 + 3144) = *(unsigned char *)(a2 + 3144);
      swift_bridgeObjectRetain();
    }
    uint64_t v106 = *(void *)(a2 + 3152);
    if (v106 == 1)
    {
      *(_OWORD *)(a1 + 3152) = *(_OWORD *)(a2 + 3152);
      *(_OWORD *)(a1 + 3161) = *(_OWORD *)(a2 + 3161);
    }
    else
    {
      *(void *)(a1 + 3152) = v106;
      *(unsigned char *)(a1 + 3160) = *(unsigned char *)(a2 + 3160);
      *(void *)(a1 + 3168) = *(void *)(a2 + 3168);
      *(unsigned char *)(a1 + 3176) = *(unsigned char *)(a2 + 3176);
      swift_bridgeObjectRetain();
    }
    uint64_t v107 = *(void *)(a2 + 3184);
    if (v107 == 1)
    {
      *(_OWORD *)(a1 + 3184) = *(_OWORD *)(a2 + 3184);
      *(_OWORD *)(a1 + 3193) = *(_OWORD *)(a2 + 3193);
    }
    else
    {
      *(void *)(a1 + 3184) = v107;
      *(unsigned char *)(a1 + 3192) = *(unsigned char *)(a2 + 3192);
      *(void *)(a1 + 3200) = *(void *)(a2 + 3200);
      *(unsigned char *)(a1 + 3208) = *(unsigned char *)(a2 + 3208);
      swift_bridgeObjectRetain();
    }
    uint64_t v108 = *(void *)(a2 + 3216);
    if (v108 == 1)
    {
      *(_OWORD *)(a1 + 3216) = *(_OWORD *)(a2 + 3216);
      *(_OWORD *)(a1 + 3225) = *(_OWORD *)(a2 + 3225);
    }
    else
    {
      *(void *)(a1 + 3216) = v108;
      *(unsigned char *)(a1 + 3224) = *(unsigned char *)(a2 + 3224);
      *(void *)(a1 + 3232) = *(void *)(a2 + 3232);
      *(unsigned char *)(a1 + 3240) = *(unsigned char *)(a2 + 3240);
      swift_bridgeObjectRetain();
    }
    uint64_t v109 = *(void *)(a2 + 3248);
    if (v109 == 1)
    {
      *(_OWORD *)(a1 + 3248) = *(_OWORD *)(a2 + 3248);
      *(_OWORD *)(a1 + 3257) = *(_OWORD *)(a2 + 3257);
    }
    else
    {
      *(void *)(a1 + 3248) = v109;
      *(unsigned char *)(a1 + 3256) = *(unsigned char *)(a2 + 3256);
      *(void *)(a1 + 3264) = *(void *)(a2 + 3264);
      *(unsigned char *)(a1 + 3272) = *(unsigned char *)(a2 + 3272);
      swift_bridgeObjectRetain();
    }
    *(_OWORD *)(a1 + 3280) = *(_OWORD *)(a2 + 3280);
    *(unsigned char *)(a1 + 3296) = *(unsigned char *)(a2 + 3296);
    *(unsigned char *)(a1 + 3320) = *(unsigned char *)(a2 + 3320);
    *(_OWORD *)(a1 + 3304) = *(_OWORD *)(a2 + 3304);
    *(_DWORD *)(v4 + 2496) = *(_DWORD *)(v5 + 2496);
    *(_WORD *)(a1 + 3325) = *(_WORD *)(a2 + 3325);
    *(unsigned char *)(a1 + 3327) = *(unsigned char *)(a2 + 3327);
    *(void *)(a1 + 3328) = v86;
    *(void *)(a1 + 3336) = *(void *)(a2 + 3336);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v110 = (_OWORD *)(a1 + 3344);
  uint64_t v111 = (_OWORD *)(a2 + 3344);
  uint64_t v112 = *(void *)(a2 + 4160);
  if (v112 == 1)
  {
    memcpy(v110, v111, 0x340uLL);
  }
  else
  {
    if (*(void *)v111 == 1)
    {
      *uint64_t v110 = *v111;
      *(_OWORD *)(a1 + 3353) = *(_OWORD *)(a2 + 3353);
    }
    else
    {
      *(void *)(a1 + 3344) = *(void *)v111;
      *(unsigned char *)(a1 + 3352) = *(unsigned char *)(a2 + 3352);
      *(void *)(a1 + 3360) = *(void *)(a2 + 3360);
      *(unsigned char *)(a1 + 3368) = *(unsigned char *)(a2 + 3368);
      swift_bridgeObjectRetain();
    }
    uint64_t v113 = *(void *)(a2 + 3376);
    if (v113 == 1)
    {
      *(_OWORD *)(a1 + 3376) = *(_OWORD *)(a2 + 3376);
      *(_OWORD *)(a1 + 3385) = *(_OWORD *)(a2 + 3385);
    }
    else
    {
      *(void *)(a1 + 3376) = v113;
      *(unsigned char *)(a1 + 3384) = *(unsigned char *)(a2 + 3384);
      *(void *)(a1 + 3392) = *(void *)(a2 + 3392);
      *(unsigned char *)(a1 + 3400) = *(unsigned char *)(a2 + 3400);
      swift_bridgeObjectRetain();
    }
    uint64_t v114 = *(void *)(a2 + 3408);
    if (v114 == 1)
    {
      *(_OWORD *)(a1 + 3408) = *(_OWORD *)(a2 + 3408);
      *(_OWORD *)(a1 + 3417) = *(_OWORD *)(a2 + 3417);
    }
    else
    {
      *(void *)(a1 + 3408) = v114;
      *(unsigned char *)(a1 + 3416) = *(unsigned char *)(a2 + 3416);
      *(void *)(a1 + 3424) = *(void *)(a2 + 3424);
      *(unsigned char *)(a1 + 3432) = *(unsigned char *)(a2 + 3432);
      swift_bridgeObjectRetain();
    }
    uint64_t v115 = *(void *)(a2 + 3440);
    if (v115 == 1)
    {
      *(_OWORD *)(a1 + 3440) = *(_OWORD *)(a2 + 3440);
      *(_OWORD *)(a1 + 3449) = *(_OWORD *)(a2 + 3449);
    }
    else
    {
      *(void *)(a1 + 3440) = v115;
      *(unsigned char *)(a1 + 3448) = *(unsigned char *)(a2 + 3448);
      *(void *)(a1 + 3456) = *(void *)(a2 + 3456);
      *(unsigned char *)(a1 + 3464) = *(unsigned char *)(a2 + 3464);
      swift_bridgeObjectRetain();
    }
    uint64_t v116 = *(void *)(a2 + 3472);
    if (v116 == 1)
    {
      *(_OWORD *)(a1 + 3472) = *(_OWORD *)(a2 + 3472);
      *(_OWORD *)(a1 + 3481) = *(_OWORD *)(a2 + 3481);
    }
    else
    {
      *(void *)(a1 + 3472) = v116;
      *(unsigned char *)(a1 + 3480) = *(unsigned char *)(a2 + 3480);
      *(void *)(a1 + 3488) = *(void *)(a2 + 3488);
      *(unsigned char *)(a1 + 3496) = *(unsigned char *)(a2 + 3496);
      swift_bridgeObjectRetain();
    }
    uint64_t v117 = *(void *)(a2 + 3504);
    if (v117 == 1)
    {
      *(_OWORD *)(a1 + 3504) = *(_OWORD *)(a2 + 3504);
      *(_OWORD *)(a1 + 3513) = *(_OWORD *)(a2 + 3513);
    }
    else
    {
      *(void *)(a1 + 3504) = v117;
      *(unsigned char *)(a1 + 3512) = *(unsigned char *)(a2 + 3512);
      *(void *)(a1 + 3520) = *(void *)(a2 + 3520);
      *(unsigned char *)(a1 + 3528) = *(unsigned char *)(a2 + 3528);
      swift_bridgeObjectRetain();
    }
    uint64_t v118 = *(void *)(a2 + 3536);
    if (v118 == 1)
    {
      *(_OWORD *)(a1 + 3536) = *(_OWORD *)(a2 + 3536);
      *(_OWORD *)(a1 + 3545) = *(_OWORD *)(a2 + 3545);
    }
    else
    {
      *(void *)(a1 + 3536) = v118;
      *(unsigned char *)(a1 + 3544) = *(unsigned char *)(a2 + 3544);
      *(void *)(a1 + 3552) = *(void *)(a2 + 3552);
      *(unsigned char *)(a1 + 3560) = *(unsigned char *)(a2 + 3560);
      swift_bridgeObjectRetain();
    }
    uint64_t v119 = *(void *)(a2 + 3568);
    if (v119 == 1)
    {
      *(_OWORD *)(a1 + 3568) = *(_OWORD *)(a2 + 3568);
      *(_OWORD *)(a1 + 3577) = *(_OWORD *)(a2 + 3577);
    }
    else
    {
      *(void *)(a1 + 3568) = v119;
      *(unsigned char *)(a1 + 3576) = *(unsigned char *)(a2 + 3576);
      *(void *)(a1 + 3584) = *(void *)(a2 + 3584);
      *(unsigned char *)(a1 + 3592) = *(unsigned char *)(a2 + 3592);
      swift_bridgeObjectRetain();
    }
    uint64_t v120 = *(void *)(a2 + 3600);
    if (v120 == 1)
    {
      *(_OWORD *)(a1 + 3600) = *(_OWORD *)(a2 + 3600);
      *(_OWORD *)(a1 + 3609) = *(_OWORD *)(a2 + 3609);
    }
    else
    {
      *(void *)(a1 + 3600) = v120;
      *(unsigned char *)(a1 + 3608) = *(unsigned char *)(a2 + 3608);
      *(void *)(a1 + 3616) = *(void *)(a2 + 3616);
      *(unsigned char *)(a1 + 3624) = *(unsigned char *)(a2 + 3624);
      swift_bridgeObjectRetain();
    }
    uint64_t v121 = *(void *)(a2 + 3632);
    if (v121 == 1)
    {
      *(_OWORD *)(a1 + 3632) = *(_OWORD *)(a2 + 3632);
      *(_OWORD *)(a1 + 3641) = *(_OWORD *)(a2 + 3641);
    }
    else
    {
      *(void *)(a1 + 3632) = v121;
      *(unsigned char *)(a1 + 3640) = *(unsigned char *)(a2 + 3640);
      *(void *)(a1 + 3648) = *(void *)(a2 + 3648);
      *(unsigned char *)(a1 + 3656) = *(unsigned char *)(a2 + 3656);
      swift_bridgeObjectRetain();
    }
    uint64_t v122 = *(void *)(a2 + 3664);
    if (v122 == 1)
    {
      *(_OWORD *)(a1 + 3664) = *(_OWORD *)(a2 + 3664);
      *(_OWORD *)(a1 + 3673) = *(_OWORD *)(a2 + 3673);
    }
    else
    {
      *(void *)(a1 + 3664) = v122;
      *(unsigned char *)(a1 + 3672) = *(unsigned char *)(a2 + 3672);
      *(void *)(a1 + 3680) = *(void *)(a2 + 3680);
      *(unsigned char *)(a1 + 3688) = *(unsigned char *)(a2 + 3688);
      swift_bridgeObjectRetain();
    }
    uint64_t v123 = *(void *)(a2 + 3696);
    if (v123 == 1)
    {
      *(_OWORD *)(a1 + 3696) = *(_OWORD *)(a2 + 3696);
      *(_OWORD *)(a1 + 3705) = *(_OWORD *)(a2 + 3705);
    }
    else
    {
      *(void *)(a1 + 3696) = v123;
      *(unsigned char *)(a1 + 3704) = *(unsigned char *)(a2 + 3704);
      *(void *)(a1 + 3712) = *(void *)(a2 + 3712);
      *(unsigned char *)(a1 + 3720) = *(unsigned char *)(a2 + 3720);
      swift_bridgeObjectRetain();
    }
    uint64_t v124 = *(void *)(a2 + 3728);
    if (v124 == 1)
    {
      *(_OWORD *)(a1 + 3728) = *(_OWORD *)(a2 + 3728);
      *(_OWORD *)(a1 + 3737) = *(_OWORD *)(a2 + 3737);
    }
    else
    {
      *(void *)(a1 + 3728) = v124;
      *(unsigned char *)(a1 + 3736) = *(unsigned char *)(a2 + 3736);
      *(void *)(a1 + 3744) = *(void *)(a2 + 3744);
      *(unsigned char *)(a1 + 3752) = *(unsigned char *)(a2 + 3752);
      swift_bridgeObjectRetain();
    }
    uint64_t v125 = *(void *)(a2 + 3760);
    if (v125 == 1)
    {
      *(_OWORD *)(a1 + 3760) = *(_OWORD *)(a2 + 3760);
      *(_OWORD *)(a1 + 3769) = *(_OWORD *)(a2 + 3769);
    }
    else
    {
      *(void *)(a1 + 3760) = v125;
      *(unsigned char *)(a1 + 3768) = *(unsigned char *)(a2 + 3768);
      *(void *)(a1 + 3776) = *(void *)(a2 + 3776);
      *(unsigned char *)(a1 + 3784) = *(unsigned char *)(a2 + 3784);
      swift_bridgeObjectRetain();
    }
    uint64_t v126 = *(void *)(a2 + 3792);
    if (v126 == 1)
    {
      *(_OWORD *)(a1 + 3792) = *(_OWORD *)(a2 + 3792);
      *(_OWORD *)(a1 + 3801) = *(_OWORD *)(a2 + 3801);
    }
    else
    {
      *(void *)(a1 + 3792) = v126;
      *(unsigned char *)(a1 + 3800) = *(unsigned char *)(a2 + 3800);
      *(void *)(a1 + 3808) = *(void *)(a2 + 3808);
      *(unsigned char *)(a1 + 3816) = *(unsigned char *)(a2 + 3816);
      swift_bridgeObjectRetain();
    }
    uint64_t v127 = *(void *)(a2 + 3824);
    if (v127 == 1)
    {
      *(_OWORD *)(a1 + 3824) = *(_OWORD *)(a2 + 3824);
      *(_OWORD *)(a1 + 3833) = *(_OWORD *)(a2 + 3833);
    }
    else
    {
      *(void *)(a1 + 3824) = v127;
      *(unsigned char *)(a1 + 3832) = *(unsigned char *)(a2 + 3832);
      *(void *)(a1 + 3840) = *(void *)(a2 + 3840);
      *(unsigned char *)(a1 + 3848) = *(unsigned char *)(a2 + 3848);
      swift_bridgeObjectRetain();
    }
    uint64_t v128 = *(void *)(a2 + 3856);
    if (v128 == 1)
    {
      *(_OWORD *)(a1 + 3856) = *(_OWORD *)(a2 + 3856);
      *(_OWORD *)(a1 + 3865) = *(_OWORD *)(a2 + 3865);
    }
    else
    {
      *(void *)(a1 + 3856) = v128;
      *(unsigned char *)(a1 + 3864) = *(unsigned char *)(a2 + 3864);
      *(void *)(a1 + 3872) = *(void *)(a2 + 3872);
      *(unsigned char *)(a1 + 3880) = *(unsigned char *)(a2 + 3880);
      swift_bridgeObjectRetain();
    }
    uint64_t v129 = *(void *)(a2 + 3888);
    if (v129 == 1)
    {
      *(_OWORD *)(a1 + 3888) = *(_OWORD *)(a2 + 3888);
      *(_OWORD *)(a1 + 3897) = *(_OWORD *)(a2 + 3897);
    }
    else
    {
      *(void *)(a1 + 3888) = v129;
      *(unsigned char *)(a1 + 3896) = *(unsigned char *)(a2 + 3896);
      *(void *)(a1 + 3904) = *(void *)(a2 + 3904);
      *(unsigned char *)(a1 + 3912) = *(unsigned char *)(a2 + 3912);
      swift_bridgeObjectRetain();
    }
    uint64_t v130 = *(void *)(a2 + 3920);
    if (v130 == 1)
    {
      *(_OWORD *)(a1 + 3920) = *(_OWORD *)(a2 + 3920);
      *(_OWORD *)(a1 + 3929) = *(_OWORD *)(a2 + 3929);
    }
    else
    {
      *(void *)(a1 + 3920) = v130;
      *(unsigned char *)(a1 + 3928) = *(unsigned char *)(a2 + 3928);
      *(void *)(a1 + 3936) = *(void *)(a2 + 3936);
      *(unsigned char *)(a1 + 3944) = *(unsigned char *)(a2 + 3944);
      swift_bridgeObjectRetain();
    }
    uint64_t v131 = *(void *)(a2 + 3952);
    if (v131 == 1)
    {
      *(_OWORD *)(a1 + 3952) = *(_OWORD *)(a2 + 3952);
      *(_OWORD *)(a1 + 3961) = *(_OWORD *)(a2 + 3961);
    }
    else
    {
      *(void *)(a1 + 3952) = v131;
      *(unsigned char *)(a1 + 3960) = *(unsigned char *)(a2 + 3960);
      *(void *)(a1 + 3968) = *(void *)(a2 + 3968);
      *(unsigned char *)(a1 + 3976) = *(unsigned char *)(a2 + 3976);
      swift_bridgeObjectRetain();
    }
    uint64_t v132 = *(void *)(a2 + 3984);
    if (v132 == 1)
    {
      *(_OWORD *)(a1 + 3984) = *(_OWORD *)(a2 + 3984);
      *(_OWORD *)(a1 + 3993) = *(_OWORD *)(a2 + 3993);
    }
    else
    {
      *(void *)(a1 + 3984) = v132;
      *(unsigned char *)(a1 + 3992) = *(unsigned char *)(a2 + 3992);
      *(void *)(a1 + 4000) = *(void *)(a2 + 4000);
      *(unsigned char *)(a1 + 4008) = *(unsigned char *)(a2 + 4008);
      swift_bridgeObjectRetain();
    }
    uint64_t v133 = *(void *)(a2 + 4016);
    if (v133 == 1)
    {
      *(_OWORD *)(a1 + 4016) = *(_OWORD *)(a2 + 4016);
      *(_OWORD *)(a1 + 4025) = *(_OWORD *)(a2 + 4025);
    }
    else
    {
      *(void *)(a1 + 4016) = v133;
      *(unsigned char *)(a1 + 4024) = *(unsigned char *)(a2 + 4024);
      *(void *)(a1 + 4032) = *(void *)(a2 + 4032);
      *(unsigned char *)(a1 + 4040) = *(unsigned char *)(a2 + 4040);
      swift_bridgeObjectRetain();
    }
    uint64_t v134 = *(void *)(a2 + 4048);
    if (v134 == 1)
    {
      *(_OWORD *)(a1 + 4048) = *(_OWORD *)(a2 + 4048);
      *(_OWORD *)(a1 + 4057) = *(_OWORD *)(a2 + 4057);
    }
    else
    {
      *(void *)(a1 + 4048) = v134;
      *(unsigned char *)(a1 + 4056) = *(unsigned char *)(a2 + 4056);
      *(void *)(a1 + 4064) = *(void *)(a2 + 4064);
      *(unsigned char *)(a1 + 4072) = *(unsigned char *)(a2 + 4072);
      swift_bridgeObjectRetain();
    }
    uint64_t v135 = *(void *)(a2 + 4080);
    if (v135 == 1)
    {
      *(_OWORD *)(a1 + 4080) = *(_OWORD *)(a2 + 4080);
      *(_OWORD *)(a1 + 4089) = *(_OWORD *)(a2 + 4089);
    }
    else
    {
      *(void *)(a1 + 4080) = v135;
      *(unsigned char *)(a1 + 4088) = *(unsigned char *)(a2 + 4088);
      *(unsigned char *)(a1 + 4104) = *(unsigned char *)(a2 + 4104);
      *(void *)(a1 + 4096) = *(void *)(a2 + 4096);
      swift_bridgeObjectRetain();
    }
    *(_OWORD *)(a1 + 4112) = *(_OWORD *)(a2 + 4112);
    *(_OWORD *)(a1 + 4136) = *(_OWORD *)(a2 + 4136);
    *(unsigned char *)(a1 + 4128) = *(unsigned char *)(a2 + 4128);
    *(unsigned char *)(a1 + 4152) = *(unsigned char *)(a2 + 4152);
    *(_DWORD *)(v4 + 3328) = *(_DWORD *)(v5 + 3328);
    *(_WORD *)(v4 + 3332) = *(_WORD *)(v5 + 3332);
    *(unsigned char *)(v4 + 3334) = *(unsigned char *)(v5 + 3334);
    *(void *)(a1 + 4160) = v112;
    *(void *)(a1 + 4168) = *(void *)(a2 + 4168);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  int v136 = (_OWORD *)(a1 + 4176);
  uint64_t v137 = (_OWORD *)(a2 + 4176);
  uint64_t v138 = *(void *)(a2 + 4992);
  if (v138 == 1)
  {
    memcpy(v136, v137, 0x340uLL);
  }
  else
  {
    if (*(void *)v137 == 1)
    {
      *int v136 = *v137;
      *(_OWORD *)(a1 + 4185) = *(_OWORD *)(a2 + 4185);
    }
    else
    {
      *(void *)(a1 + 4176) = *(void *)v137;
      *(unsigned char *)(v4 + 3359) = *(unsigned char *)(v5 + 3359);
      *(void *)(a1 + 4192) = *(void *)(a2 + 4192);
      *(unsigned char *)(a1 + 4200) = *(unsigned char *)(a2 + 4200);
      swift_bridgeObjectRetain();
    }
    uint64_t v139 = *(void *)(a2 + 4208);
    if (v139 == 1)
    {
      *(_OWORD *)(a1 + 4208) = *(_OWORD *)(a2 + 4208);
      *(_OWORD *)(a1 + 4217) = *(_OWORD *)(a2 + 4217);
    }
    else
    {
      *(void *)(a1 + 4208) = v139;
      *(unsigned char *)(v4 + 3391) = *(unsigned char *)(v5 + 3391);
      *(unsigned char *)(a1 + 4232) = *(unsigned char *)(a2 + 4232);
      *(void *)(a1 + 4224) = *(void *)(a2 + 4224);
      swift_bridgeObjectRetain();
    }
    uint64_t v140 = *(void *)(a2 + 4240);
    if (v140 == 1)
    {
      *(_OWORD *)(a1 + 4240) = *(_OWORD *)(a2 + 4240);
      *(_OWORD *)(a1 + 4249) = *(_OWORD *)(a2 + 4249);
    }
    else
    {
      *(void *)(a1 + 4240) = v140;
      *(unsigned char *)(v4 + 3423) = *(unsigned char *)(v5 + 3423);
      *(unsigned char *)(a1 + 4264) = *(unsigned char *)(a2 + 4264);
      *(void *)(a1 + 4256) = *(void *)(a2 + 4256);
      swift_bridgeObjectRetain();
    }
    uint64_t v141 = *(void *)(a2 + 4272);
    if (v141 == 1)
    {
      *(_OWORD *)(a1 + 4272) = *(_OWORD *)(a2 + 4272);
      *(_OWORD *)(a1 + 4281) = *(_OWORD *)(a2 + 4281);
    }
    else
    {
      *(void *)(a1 + 4272) = v141;
      *(unsigned char *)(v4 + 3455) = *(unsigned char *)(v5 + 3455);
      *(unsigned char *)(a1 + 4296) = *(unsigned char *)(a2 + 4296);
      *(void *)(a1 + 4288) = *(void *)(a2 + 4288);
      swift_bridgeObjectRetain();
    }
    uint64_t v142 = *(void *)(a2 + 4304);
    if (v142 == 1)
    {
      *(_OWORD *)(a1 + 4304) = *(_OWORD *)(a2 + 4304);
      *(_OWORD *)(a1 + 4313) = *(_OWORD *)(a2 + 4313);
    }
    else
    {
      *(void *)(a1 + 4304) = v142;
      *(unsigned char *)(v4 + 3487) = *(unsigned char *)(v5 + 3487);
      *(unsigned char *)(a1 + 4328) = *(unsigned char *)(a2 + 4328);
      *(void *)(a1 + 4320) = *(void *)(a2 + 4320);
      swift_bridgeObjectRetain();
    }
    uint64_t v143 = *(void *)(a2 + 4336);
    if (v143 == 1)
    {
      *(_OWORD *)(a1 + 4336) = *(_OWORD *)(a2 + 4336);
      *(_OWORD *)(a1 + 4345) = *(_OWORD *)(a2 + 4345);
    }
    else
    {
      *(void *)(a1 + 4336) = v143;
      *(unsigned char *)(v4 + 3519) = *(unsigned char *)(v5 + 3519);
      *(unsigned char *)(a1 + 4360) = *(unsigned char *)(a2 + 4360);
      *(void *)(a1 + 4352) = *(void *)(a2 + 4352);
      swift_bridgeObjectRetain();
    }
    uint64_t v144 = *(void *)(a2 + 4368);
    if (v144 == 1)
    {
      *(_OWORD *)(a1 + 4368) = *(_OWORD *)(a2 + 4368);
      *(_OWORD *)(a1 + 4377) = *(_OWORD *)(a2 + 4377);
    }
    else
    {
      *(void *)(a1 + 4368) = v144;
      *(unsigned char *)(v4 + 3551) = *(unsigned char *)(v5 + 3551);
      *(unsigned char *)(a1 + 4392) = *(unsigned char *)(a2 + 4392);
      *(void *)(a1 + 4384) = *(void *)(a2 + 4384);
      swift_bridgeObjectRetain();
    }
    uint64_t v145 = *(void *)(a2 + 4400);
    if (v145 == 1)
    {
      *(_OWORD *)(a1 + 4400) = *(_OWORD *)(a2 + 4400);
      *(_OWORD *)(a1 + 4409) = *(_OWORD *)(a2 + 4409);
    }
    else
    {
      *(void *)(a1 + 4400) = v145;
      *(unsigned char *)(v4 + 3583) = *(unsigned char *)(v5 + 3583);
      *(unsigned char *)(a1 + 4424) = *(unsigned char *)(a2 + 4424);
      *(void *)(a1 + 4416) = *(void *)(a2 + 4416);
      swift_bridgeObjectRetain();
    }
    uint64_t v146 = *(void *)(a2 + 4432);
    if (v146 == 1)
    {
      *(_OWORD *)(a1 + 4432) = *(_OWORD *)(a2 + 4432);
      *(_OWORD *)(a1 + 4441) = *(_OWORD *)(a2 + 4441);
    }
    else
    {
      *(void *)(a1 + 4432) = v146;
      *(unsigned char *)(v4 + 3615) = *(unsigned char *)(v5 + 3615);
      *(unsigned char *)(a1 + 4456) = *(unsigned char *)(a2 + 4456);
      *(void *)(a1 + 4448) = *(void *)(a2 + 4448);
      swift_bridgeObjectRetain();
    }
    uint64_t v147 = *(void *)(a2 + 4464);
    if (v147 == 1)
    {
      *(_OWORD *)(a1 + 4464) = *(_OWORD *)(a2 + 4464);
      *(_OWORD *)(a1 + 4473) = *(_OWORD *)(a2 + 4473);
    }
    else
    {
      *(void *)(a1 + 4464) = v147;
      *(unsigned char *)(v4 + 3647) = *(unsigned char *)(v5 + 3647);
      *(unsigned char *)(a1 + 4488) = *(unsigned char *)(a2 + 4488);
      *(void *)(a1 + 4480) = *(void *)(a2 + 4480);
      swift_bridgeObjectRetain();
    }
    uint64_t v148 = *(void *)(a2 + 4496);
    if (v148 == 1)
    {
      *(_OWORD *)(a1 + 4496) = *(_OWORD *)(a2 + 4496);
      *(_OWORD *)(a1 + 4505) = *(_OWORD *)(a2 + 4505);
    }
    else
    {
      *(void *)(a1 + 4496) = v148;
      *(unsigned char *)(v4 + 3679) = *(unsigned char *)(v5 + 3679);
      *(unsigned char *)(a1 + 4520) = *(unsigned char *)(a2 + 4520);
      *(void *)(a1 + 4512) = *(void *)(a2 + 4512);
      swift_bridgeObjectRetain();
    }
    uint64_t v149 = *(void *)(a2 + 4528);
    if (v149 == 1)
    {
      *(_OWORD *)(a1 + 4528) = *(_OWORD *)(a2 + 4528);
      *(_OWORD *)(a1 + 4537) = *(_OWORD *)(a2 + 4537);
    }
    else
    {
      *(void *)(a1 + 4528) = v149;
      *(unsigned char *)(v4 + 3711) = *(unsigned char *)(v5 + 3711);
      *(unsigned char *)(a1 + 4552) = *(unsigned char *)(a2 + 4552);
      *(void *)(a1 + 4544) = *(void *)(a2 + 4544);
      swift_bridgeObjectRetain();
    }
    uint64_t v150 = *(void *)(a2 + 4560);
    if (v150 == 1)
    {
      *(_OWORD *)(a1 + 4560) = *(_OWORD *)(a2 + 4560);
      *(_OWORD *)(a1 + 4569) = *(_OWORD *)(a2 + 4569);
    }
    else
    {
      *(void *)(a1 + 4560) = v150;
      *(unsigned char *)(v4 + 3743) = *(unsigned char *)(v5 + 3743);
      *(unsigned char *)(a1 + 4584) = *(unsigned char *)(a2 + 4584);
      *(void *)(a1 + 4576) = *(void *)(a2 + 4576);
      swift_bridgeObjectRetain();
    }
    uint64_t v151 = *(void *)(a2 + 4592);
    if (v151 == 1)
    {
      *(_OWORD *)(a1 + 4592) = *(_OWORD *)(a2 + 4592);
      *(_OWORD *)(a1 + 4601) = *(_OWORD *)(a2 + 4601);
    }
    else
    {
      *(void *)(a1 + 4592) = v151;
      *(unsigned char *)(v4 + 3775) = *(unsigned char *)(v5 + 3775);
      *(unsigned char *)(a1 + 4616) = *(unsigned char *)(a2 + 4616);
      *(void *)(a1 + 4608) = *(void *)(a2 + 4608);
      swift_bridgeObjectRetain();
    }
    uint64_t v152 = *(void *)(a2 + 4624);
    if (v152 == 1)
    {
      *(_OWORD *)(a1 + 4624) = *(_OWORD *)(a2 + 4624);
      *(_OWORD *)(a1 + 4633) = *(_OWORD *)(a2 + 4633);
    }
    else
    {
      *(void *)(a1 + 4624) = v152;
      *(unsigned char *)(v4 + 3807) = *(unsigned char *)(v5 + 3807);
      *(unsigned char *)(a1 + 4648) = *(unsigned char *)(a2 + 4648);
      *(void *)(a1 + 4640) = *(void *)(a2 + 4640);
      swift_bridgeObjectRetain();
    }
    uint64_t v153 = *(void *)(a2 + 4656);
    if (v153 == 1)
    {
      *(_OWORD *)(a1 + 4656) = *(_OWORD *)(a2 + 4656);
      *(_OWORD *)(a1 + 4665) = *(_OWORD *)(a2 + 4665);
    }
    else
    {
      *(void *)(a1 + 4656) = v153;
      *(unsigned char *)(v4 + 3839) = *(unsigned char *)(v5 + 3839);
      *(unsigned char *)(a1 + 4680) = *(unsigned char *)(a2 + 4680);
      *(void *)(a1 + 4672) = *(void *)(a2 + 4672);
      swift_bridgeObjectRetain();
    }
    uint64_t v154 = *(void *)(a2 + 4688);
    if (v154 == 1)
    {
      *(_OWORD *)(a1 + 4688) = *(_OWORD *)(a2 + 4688);
      *(_OWORD *)(a1 + 4697) = *(_OWORD *)(a2 + 4697);
    }
    else
    {
      *(void *)(a1 + 4688) = v154;
      *(unsigned char *)(v4 + 3871) = *(unsigned char *)(v5 + 3871);
      *(unsigned char *)(a1 + 4712) = *(unsigned char *)(a2 + 4712);
      *(void *)(a1 + 4704) = *(void *)(a2 + 4704);
      swift_bridgeObjectRetain();
    }
    uint64_t v155 = *(void *)(a2 + 4720);
    if (v155 == 1)
    {
      *(_OWORD *)(a1 + 4720) = *(_OWORD *)(a2 + 4720);
      *(_OWORD *)(a1 + 4729) = *(_OWORD *)(a2 + 4729);
    }
    else
    {
      *(void *)(a1 + 4720) = v155;
      *(unsigned char *)(v4 + 3903) = *(unsigned char *)(v5 + 3903);
      *(unsigned char *)(a1 + 4744) = *(unsigned char *)(a2 + 4744);
      *(void *)(a1 + 4736) = *(void *)(a2 + 4736);
      swift_bridgeObjectRetain();
    }
    uint64_t v156 = *(void *)(a2 + 4752);
    if (v156 == 1)
    {
      *(_OWORD *)(a1 + 4752) = *(_OWORD *)(a2 + 4752);
      *(_OWORD *)(a1 + 4761) = *(_OWORD *)(a2 + 4761);
    }
    else
    {
      *(void *)(a1 + 4752) = v156;
      *(unsigned char *)(v4 + 3935) = *(unsigned char *)(v5 + 3935);
      *(unsigned char *)(a1 + 4776) = *(unsigned char *)(a2 + 4776);
      *(void *)(a1 + 4768) = *(void *)(a2 + 4768);
      swift_bridgeObjectRetain();
    }
    uint64_t v157 = *(void *)(a2 + 4784);
    if (v157 == 1)
    {
      *(_OWORD *)(a1 + 4784) = *(_OWORD *)(a2 + 4784);
      *(_OWORD *)(a1 + 4793) = *(_OWORD *)(a2 + 4793);
    }
    else
    {
      *(void *)(a1 + 4784) = v157;
      *(unsigned char *)(v4 + 3967) = *(unsigned char *)(v5 + 3967);
      *(unsigned char *)(a1 + 4808) = *(unsigned char *)(a2 + 4808);
      *(void *)(a1 + 4800) = *(void *)(a2 + 4800);
      swift_bridgeObjectRetain();
    }
    uint64_t v158 = *(void *)(a2 + 4816);
    if (v158 == 1)
    {
      *(_OWORD *)(a1 + 4816) = *(_OWORD *)(a2 + 4816);
      *(_OWORD *)(a1 + 4825) = *(_OWORD *)(a2 + 4825);
    }
    else
    {
      *(void *)(a1 + 4816) = v158;
      *(unsigned char *)(v4 + 3999) = *(unsigned char *)(v5 + 3999);
      *(unsigned char *)(a1 + 4840) = *(unsigned char *)(a2 + 4840);
      *(void *)(a1 + 4832) = *(void *)(a2 + 4832);
      swift_bridgeObjectRetain();
    }
    uint64_t v159 = *(void *)(a2 + 4848);
    if (v159 == 1)
    {
      *(_OWORD *)(a1 + 4848) = *(_OWORD *)(a2 + 4848);
      *(_OWORD *)(a1 + 4857) = *(_OWORD *)(a2 + 4857);
    }
    else
    {
      *(void *)(a1 + 4848) = v159;
      *(unsigned char *)(v4 + 4031) = *(unsigned char *)(v5 + 4031);
      *(unsigned char *)(a1 + 4872) = *(unsigned char *)(a2 + 4872);
      *(void *)(a1 + 4864) = *(void *)(a2 + 4864);
      swift_bridgeObjectRetain();
    }
    uint64_t v160 = *(void *)(a2 + 4880);
    if (v160 == 1)
    {
      *(_OWORD *)(a1 + 4880) = *(_OWORD *)(a2 + 4880);
      *(_OWORD *)(a1 + 4889) = *(_OWORD *)(a2 + 4889);
    }
    else
    {
      *(void *)(a1 + 4880) = v160;
      *(unsigned char *)(v4 + 4063) = *(unsigned char *)(v5 + 4063);
      *(unsigned char *)(a1 + 4904) = *(unsigned char *)(a2 + 4904);
      *(void *)(a1 + 4896) = *(void *)(a2 + 4896);
      swift_bridgeObjectRetain();
    }
    uint64_t v161 = *(void *)(a2 + 4912);
    if (v161 == 1)
    {
      *(_OWORD *)(a1 + 4912) = *(_OWORD *)(a2 + 4912);
      *(_OWORD *)(a1 + 4921) = *(_OWORD *)(a2 + 4921);
    }
    else
    {
      *(void *)(a1 + 4912) = v161;
      *(unsigned char *)(v4 + 4095) = *(unsigned char *)(v5 + 4095);
      *(unsigned char *)(a1 + 4936) = *(unsigned char *)(a2 + 4936);
      *(void *)(a1 + 4928) = *(void *)(a2 + 4928);
      swift_bridgeObjectRetain();
    }
    *(_OWORD *)(a1 + 4944) = *(_OWORD *)(a2 + 4944);
    *(_OWORD *)(a1 + 4968) = *(_OWORD *)(a2 + 4968);
    *(unsigned char *)(a1 + 4960) = *(unsigned char *)(a2 + 4960);
    *(unsigned char *)(a1 + 4984) = *(unsigned char *)(a2 + 4984);
    *(_DWORD *)(a1 + 4985) = *(_DWORD *)(a2 + 4985);
    *(_WORD *)(a1 + 4989) = *(_WORD *)(a2 + 4989);
    *(unsigned char *)(a1 + 4991) = *(unsigned char *)(a2 + 4991);
    *(void *)(a1 + 4992) = v138;
    *(void *)(a1 + 5000) = *(void *)(a2 + 5000);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v162 = (_OWORD *)(a1 + 5008);
  int v163 = (_OWORD *)(a2 + 5008);
  uint64_t v164 = *(void *)(a2 + 5824);
  if (v164 == 1)
  {
    memcpy(v162, v163, 0x340uLL);
  }
  else
  {
    if (*(void *)v163 == 1)
    {
      *uint64_t v162 = *v163;
      *(_OWORD *)(a1 + 5017) = *(_OWORD *)(a2 + 5017);
    }
    else
    {
      *(void *)(a1 + 5008) = *(void *)v163;
      *(unsigned char *)(a1 + 5016) = *(unsigned char *)(a2 + 5016);
      *(void *)(a1 + 5024) = *(void *)(a2 + 5024);
      *(unsigned char *)(a1 + 5032) = *(unsigned char *)(a2 + 5032);
      swift_bridgeObjectRetain();
    }
    uint64_t v165 = *(void *)(a2 + 5040);
    if (v165 == 1)
    {
      *(_OWORD *)(a1 + 5040) = *(_OWORD *)(a2 + 5040);
      *(_OWORD *)(a1 + 5049) = *(_OWORD *)(a2 + 5049);
    }
    else
    {
      *(void *)(a1 + 5040) = v165;
      *(unsigned char *)(a1 + 5048) = *(unsigned char *)(a2 + 5048);
      *(unsigned char *)(a1 + 5064) = *(unsigned char *)(a2 + 5064);
      *(void *)(a1 + 5056) = *(void *)(a2 + 5056);
      swift_bridgeObjectRetain();
    }
    uint64_t v166 = *(void *)(a2 + 5072);
    if (v166 == 1)
    {
      *(_OWORD *)(a1 + 5072) = *(_OWORD *)(a2 + 5072);
      *(_OWORD *)(a1 + 5081) = *(_OWORD *)(a2 + 5081);
    }
    else
    {
      *(void *)(a1 + 5072) = v166;
      *(unsigned char *)(a1 + 5080) = *(unsigned char *)(a2 + 5080);
      *(unsigned char *)(a1 + 5096) = *(unsigned char *)(a2 + 5096);
      *(void *)(a1 + 5088) = *(void *)(a2 + 5088);
      swift_bridgeObjectRetain();
    }
    uint64_t v167 = *(void *)(a2 + 5104);
    if (v167 == 1)
    {
      *(_OWORD *)(a1 + 5104) = *(_OWORD *)(a2 + 5104);
      *(_OWORD *)(a1 + 5113) = *(_OWORD *)(a2 + 5113);
    }
    else
    {
      *(void *)(a1 + 5104) = v167;
      *(unsigned char *)(a1 + 5112) = *(unsigned char *)(a2 + 5112);
      *(unsigned char *)(a1 + 5128) = *(unsigned char *)(a2 + 5128);
      *(void *)(a1 + 5120) = *(void *)(a2 + 5120);
      swift_bridgeObjectRetain();
    }
    uint64_t v168 = *(void *)(a2 + 5136);
    if (v168 == 1)
    {
      *(_OWORD *)(a1 + 5136) = *(_OWORD *)(a2 + 5136);
      *(_OWORD *)(a1 + 5145) = *(_OWORD *)(a2 + 5145);
    }
    else
    {
      *(void *)(a1 + 5136) = v168;
      *(unsigned char *)(a1 + 5144) = *(unsigned char *)(a2 + 5144);
      *(unsigned char *)(a1 + 5160) = *(unsigned char *)(a2 + 5160);
      *(void *)(a1 + 5152) = *(void *)(a2 + 5152);
      swift_bridgeObjectRetain();
    }
    uint64_t v169 = *(void *)(a2 + 5168);
    if (v169 == 1)
    {
      *(_OWORD *)(a1 + 5168) = *(_OWORD *)(a2 + 5168);
      *(_OWORD *)(a1 + 5177) = *(_OWORD *)(a2 + 5177);
    }
    else
    {
      *(void *)(a1 + 5168) = v169;
      *(unsigned char *)(a1 + 5176) = *(unsigned char *)(a2 + 5176);
      *(unsigned char *)(a1 + 5192) = *(unsigned char *)(a2 + 5192);
      *(void *)(a1 + 5184) = *(void *)(a2 + 5184);
      swift_bridgeObjectRetain();
    }
    uint64_t v170 = *(void *)(a2 + 5200);
    if (v170 == 1)
    {
      *(_OWORD *)(a1 + 5200) = *(_OWORD *)(a2 + 5200);
      *(_OWORD *)(a1 + 5209) = *(_OWORD *)(a2 + 5209);
    }
    else
    {
      *(void *)(a1 + 5200) = v170;
      *(unsigned char *)(a1 + 5208) = *(unsigned char *)(a2 + 5208);
      *(unsigned char *)(a1 + 5224) = *(unsigned char *)(a2 + 5224);
      *(void *)(a1 + 5216) = *(void *)(a2 + 5216);
      swift_bridgeObjectRetain();
    }
    uint64_t v171 = *(void *)(a2 + 5232);
    if (v171 == 1)
    {
      *(_OWORD *)(a1 + 5232) = *(_OWORD *)(a2 + 5232);
      *(_OWORD *)(a1 + 5241) = *(_OWORD *)(a2 + 5241);
    }
    else
    {
      *(void *)(a1 + 5232) = v171;
      *(unsigned char *)(a1 + 5240) = *(unsigned char *)(a2 + 5240);
      *(unsigned char *)(a1 + 5256) = *(unsigned char *)(a2 + 5256);
      *(void *)(a1 + 5248) = *(void *)(a2 + 5248);
      swift_bridgeObjectRetain();
    }
    uint64_t v172 = *(void *)(a2 + 5264);
    if (v172 == 1)
    {
      *(_OWORD *)(a1 + 5264) = *(_OWORD *)(a2 + 5264);
      *(_OWORD *)(a1 + 5273) = *(_OWORD *)(a2 + 5273);
    }
    else
    {
      *(void *)(a1 + 5264) = v172;
      *(unsigned char *)(a1 + 5272) = *(unsigned char *)(a2 + 5272);
      *(unsigned char *)(a1 + 5288) = *(unsigned char *)(a2 + 5288);
      *(void *)(a1 + 5280) = *(void *)(a2 + 5280);
      swift_bridgeObjectRetain();
    }
    uint64_t v173 = *(void *)(a2 + 5296);
    if (v173 == 1)
    {
      *(_OWORD *)(a1 + 5296) = *(_OWORD *)(a2 + 5296);
      *(_OWORD *)(a1 + 5305) = *(_OWORD *)(a2 + 5305);
    }
    else
    {
      *(void *)(a1 + 5296) = v173;
      *(unsigned char *)(a1 + 5304) = *(unsigned char *)(a2 + 5304);
      *(unsigned char *)(a1 + 5320) = *(unsigned char *)(a2 + 5320);
      *(void *)(a1 + 5312) = *(void *)(a2 + 5312);
      swift_bridgeObjectRetain();
    }
    uint64_t v174 = *(void *)(a2 + 5328);
    if (v174 == 1)
    {
      *(_OWORD *)(a1 + 5328) = *(_OWORD *)(a2 + 5328);
      *(_OWORD *)(a1 + 5337) = *(_OWORD *)(a2 + 5337);
    }
    else
    {
      *(void *)(a1 + 5328) = v174;
      *(unsigned char *)(a1 + 5336) = *(unsigned char *)(a2 + 5336);
      *(unsigned char *)(a1 + 5352) = *(unsigned char *)(a2 + 5352);
      *(void *)(a1 + 5344) = *(void *)(a2 + 5344);
      swift_bridgeObjectRetain();
    }
    uint64_t v175 = *(void *)(a2 + 5360);
    if (v175 == 1)
    {
      *(_OWORD *)(a1 + 5360) = *(_OWORD *)(a2 + 5360);
      *(_OWORD *)(a1 + 5369) = *(_OWORD *)(a2 + 5369);
    }
    else
    {
      *(void *)(a1 + 5360) = v175;
      *(unsigned char *)(a1 + 5368) = *(unsigned char *)(a2 + 5368);
      *(unsigned char *)(a1 + 5384) = *(unsigned char *)(a2 + 5384);
      *(void *)(a1 + 5376) = *(void *)(a2 + 5376);
      swift_bridgeObjectRetain();
    }
    uint64_t v176 = *(void *)(a2 + 5392);
    if (v176 == 1)
    {
      *(_OWORD *)(a1 + 5392) = *(_OWORD *)(a2 + 5392);
      *(_OWORD *)(a1 + 5401) = *(_OWORD *)(a2 + 5401);
    }
    else
    {
      *(void *)(a1 + 5392) = v176;
      *(unsigned char *)(a1 + 5400) = *(unsigned char *)(a2 + 5400);
      *(unsigned char *)(a1 + 5416) = *(unsigned char *)(a2 + 5416);
      *(void *)(a1 + 5408) = *(void *)(a2 + 5408);
      swift_bridgeObjectRetain();
    }
    uint64_t v177 = *(void *)(a2 + 5424);
    if (v177 == 1)
    {
      *(_OWORD *)(a1 + 5424) = *(_OWORD *)(a2 + 5424);
      *(_OWORD *)(a1 + 5433) = *(_OWORD *)(a2 + 5433);
    }
    else
    {
      *(void *)(a1 + 5424) = v177;
      *(unsigned char *)(a1 + 5432) = *(unsigned char *)(a2 + 5432);
      *(unsigned char *)(a1 + 5448) = *(unsigned char *)(a2 + 5448);
      *(void *)(a1 + 5440) = *(void *)(a2 + 5440);
      swift_bridgeObjectRetain();
    }
    uint64_t v178 = *(void *)(a2 + 5456);
    if (v178 == 1)
    {
      *(_OWORD *)(a1 + 5456) = *(_OWORD *)(a2 + 5456);
      *(_OWORD *)(a1 + 5465) = *(_OWORD *)(a2 + 5465);
    }
    else
    {
      *(void *)(a1 + 5456) = v178;
      *(unsigned char *)(a1 + 5464) = *(unsigned char *)(a2 + 5464);
      *(unsigned char *)(a1 + 5480) = *(unsigned char *)(a2 + 5480);
      *(void *)(a1 + 5472) = *(void *)(a2 + 5472);
      swift_bridgeObjectRetain();
    }
    uint64_t v179 = *(void *)(a2 + 5488);
    if (v179 == 1)
    {
      *(_OWORD *)(a1 + 5488) = *(_OWORD *)(a2 + 5488);
      *(_OWORD *)(a1 + 5497) = *(_OWORD *)(a2 + 5497);
    }
    else
    {
      *(void *)(a1 + 5488) = v179;
      *(unsigned char *)(a1 + 5496) = *(unsigned char *)(a2 + 5496);
      *(unsigned char *)(a1 + 5512) = *(unsigned char *)(a2 + 5512);
      *(void *)(a1 + 5504) = *(void *)(a2 + 5504);
      swift_bridgeObjectRetain();
    }
    uint64_t v180 = *(void *)(a2 + 5520);
    if (v180 == 1)
    {
      *(_OWORD *)(a1 + 5520) = *(_OWORD *)(a2 + 5520);
      *(_OWORD *)(a1 + 5529) = *(_OWORD *)(a2 + 5529);
    }
    else
    {
      *(void *)(a1 + 5520) = v180;
      *(unsigned char *)(a1 + 5528) = *(unsigned char *)(a2 + 5528);
      *(unsigned char *)(a1 + 5544) = *(unsigned char *)(a2 + 5544);
      *(void *)(a1 + 5536) = *(void *)(a2 + 5536);
      swift_bridgeObjectRetain();
    }
    uint64_t v181 = *(void *)(a2 + 5552);
    if (v181 == 1)
    {
      *(_OWORD *)(a1 + 5552) = *(_OWORD *)(a2 + 5552);
      *(_OWORD *)(a1 + 5561) = *(_OWORD *)(a2 + 5561);
    }
    else
    {
      *(void *)(a1 + 5552) = v181;
      *(unsigned char *)(a1 + 5560) = *(unsigned char *)(a2 + 5560);
      *(unsigned char *)(a1 + 5576) = *(unsigned char *)(a2 + 5576);
      *(void *)(a1 + 5568) = *(void *)(a2 + 5568);
      swift_bridgeObjectRetain();
    }
    uint64_t v182 = *(void *)(a2 + 5584);
    if (v182 == 1)
    {
      *(_OWORD *)(a1 + 5584) = *(_OWORD *)(a2 + 5584);
      *(_OWORD *)(a1 + 5593) = *(_OWORD *)(a2 + 5593);
    }
    else
    {
      *(void *)(a1 + 5584) = v182;
      *(unsigned char *)(a1 + 5592) = *(unsigned char *)(a2 + 5592);
      *(unsigned char *)(a1 + 5608) = *(unsigned char *)(a2 + 5608);
      *(void *)(a1 + 5600) = *(void *)(a2 + 5600);
      swift_bridgeObjectRetain();
    }
    uint64_t v183 = *(void *)(a2 + 5616);
    if (v183 == 1)
    {
      *(_OWORD *)(a1 + 5616) = *(_OWORD *)(a2 + 5616);
      *(_OWORD *)(a1 + 5625) = *(_OWORD *)(a2 + 5625);
    }
    else
    {
      *(void *)(a1 + 5616) = v183;
      *(unsigned char *)(a1 + 5624) = *(unsigned char *)(a2 + 5624);
      *(unsigned char *)(a1 + 5640) = *(unsigned char *)(a2 + 5640);
      *(void *)(a1 + 5632) = *(void *)(a2 + 5632);
      swift_bridgeObjectRetain();
    }
    uint64_t v184 = *(void *)(a2 + 5648);
    if (v184 == 1)
    {
      *(_OWORD *)(a1 + 5648) = *(_OWORD *)(a2 + 5648);
      *(_OWORD *)(a1 + 5657) = *(_OWORD *)(a2 + 5657);
    }
    else
    {
      *(void *)(a1 + 5648) = v184;
      *(unsigned char *)(a1 + 5656) = *(unsigned char *)(a2 + 5656);
      *(unsigned char *)(a1 + 5672) = *(unsigned char *)(a2 + 5672);
      *(void *)(a1 + 5664) = *(void *)(a2 + 5664);
      swift_bridgeObjectRetain();
    }
    uint64_t v185 = *(void *)(a2 + 5680);
    if (v185 == 1)
    {
      *(_OWORD *)(a1 + 5680) = *(_OWORD *)(a2 + 5680);
      *(_OWORD *)(a1 + 5689) = *(_OWORD *)(a2 + 5689);
    }
    else
    {
      *(void *)(a1 + 5680) = v185;
      *(unsigned char *)(a1 + 5688) = *(unsigned char *)(a2 + 5688);
      *(unsigned char *)(a1 + 5704) = *(unsigned char *)(a2 + 5704);
      *(void *)(a1 + 5696) = *(void *)(a2 + 5696);
      swift_bridgeObjectRetain();
    }
    uint64_t v186 = *(void *)(a2 + 5712);
    if (v186 == 1)
    {
      *(_OWORD *)(a1 + 5712) = *(_OWORD *)(a2 + 5712);
      *(_OWORD *)(a1 + 5721) = *(_OWORD *)(a2 + 5721);
    }
    else
    {
      *(void *)(a1 + 5712) = v186;
      *(unsigned char *)(a1 + 5720) = *(unsigned char *)(a2 + 5720);
      *(unsigned char *)(a1 + 5736) = *(unsigned char *)(a2 + 5736);
      *(void *)(a1 + 5728) = *(void *)(a2 + 5728);
      swift_bridgeObjectRetain();
    }
    uint64_t v187 = *(void *)(a2 + 5744);
    if (v187 == 1)
    {
      *(_OWORD *)(a1 + 5744) = *(_OWORD *)(a2 + 5744);
      *(_OWORD *)(a1 + 5753) = *(_OWORD *)(a2 + 5753);
    }
    else
    {
      *(void *)(a1 + 5744) = v187;
      *(unsigned char *)(a1 + 5752) = *(unsigned char *)(a2 + 5752);
      *(unsigned char *)(a1 + 5768) = *(unsigned char *)(a2 + 5768);
      *(void *)(a1 + 5760) = *(void *)(a2 + 5760);
      swift_bridgeObjectRetain();
    }
    *(_OWORD *)(a1 + 5776) = *(_OWORD *)(a2 + 5776);
    *(_OWORD *)(a1 + 5800) = *(_OWORD *)(a2 + 5800);
    *(unsigned char *)(a1 + 5792) = *(unsigned char *)(a2 + 5792);
    *(unsigned char *)(a1 + 5816) = *(unsigned char *)(a2 + 5816);
    *(_DWORD *)(a1 + 5817) = *(_DWORD *)(a2 + 5817);
    *(_WORD *)(a1 + 5821) = *(_WORD *)(a2 + 5821);
    *(unsigned char *)(a1 + 5823) = *(unsigned char *)(a2 + 5823);
    *(void *)(a1 + 5824) = v164;
    *(void *)(a1 + 5832) = *(void *)(a2 + 5832);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  *(void *)(a1 + 5840) = *(void *)(a2 + 5840);
  *(_DWORD *)(a1 + 5848) = *(_DWORD *)(a2 + 5848);
  *(unsigned char *)(a1 + 5852) = *(unsigned char *)(a2 + 5852);
  *(void *)(a1 + 5856) = *(void *)(a2 + 5856);
  *(unsigned char *)(a1 + 5864) = *(unsigned char *)(a2 + 5864);
  *(void *)(a1 + 5872) = *(void *)(a2 + 5872);
  *(unsigned char *)(a1 + 5880) = *(unsigned char *)(a2 + 5880);
  *(void *)(a1 + 5888) = *(void *)(a2 + 5888);
  *(unsigned char *)(a1 + 5896) = *(unsigned char *)(a2 + 5896);
  *(unsigned char *)(a1 + 5912) = *(unsigned char *)(a2 + 5912);
  *(void *)(a1 + 5904) = *(void *)(a2 + 5904);
  *(unsigned char *)(a1 + 5920) = *(unsigned char *)(a2 + 5920);
  *(_DWORD *)(a1 + 5916) = *(_DWORD *)(a2 + 5916);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for IQModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (unsigned char *)(a2 + 280);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = (long long *)(a1 + 16);
  uint64_t v6 = (long long *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 832);
  if (*(void *)(a1 + 832) == 1)
  {
    if (v7 != 1)
    {
      if (*(void *)v6 == 1)
      {
        long long v8 = *v6;
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
        *uint64_t v5 = v8;
      }
      else
      {
        *(void *)(a1 + 16) = *(void *)v6;
        *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
        uint64_t v11 = *(void *)(a2 + 32);
        *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
        *(void *)(a1 + 32) = v11;
        swift_bridgeObjectRetain();
      }
      uint64_t v12 = *(void *)(a2 + 48);
      if (v12 == 1)
      {
        long long v13 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        *(_OWORD *)(a1 + 48) = v13;
      }
      else
      {
        *(void *)(a1 + 48) = v12;
        *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
        uint64_t v15 = *(void *)(a2 + 64);
        *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
        *(void *)(a1 + 64) = v15;
        swift_bridgeObjectRetain();
      }
      uint64_t v16 = *(void *)(a2 + 80);
      if (v16 == 1)
      {
        long long v17 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
        *(_OWORD *)(a1 + 80) = v17;
      }
      else
      {
        *(void *)(a1 + 80) = v16;
        *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
        uint64_t v18 = *(void *)(a2 + 96);
        *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
        *(void *)(a1 + 96) = v18;
        swift_bridgeObjectRetain();
      }
      uint64_t v19 = *(void *)(a2 + 112);
      if (v19 == 1)
      {
        long long v20 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
        *(_OWORD *)(a1 + 112) = v20;
      }
      else
      {
        *(void *)(a1 + 112) = v19;
        *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
        uint64_t v21 = *(void *)(a2 + 128);
        *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
        *(void *)(a1 + 128) = v21;
        swift_bridgeObjectRetain();
      }
      uint64_t v22 = *(void *)(a2 + 144);
      if (v22 == 1)
      {
        long long v23 = *(_OWORD *)(a2 + 144);
        *(_OWORD *)(a1 + 153) = *(_OWORD *)(a2 + 153);
        *(_OWORD *)(a1 + 144) = v23;
      }
      else
      {
        *(void *)(a1 + 144) = v22;
        *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
        uint64_t v24 = *(void *)(a2 + 160);
        *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
        *(void *)(a1 + 160) = v24;
        swift_bridgeObjectRetain();
      }
      uint64_t v25 = *(void *)(a2 + 176);
      if (v25 == 1)
      {
        long long v26 = *(_OWORD *)(a2 + 176);
        *(_OWORD *)(a1 + 185) = *(_OWORD *)(a2 + 185);
        *(_OWORD *)(a1 + 176) = v26;
      }
      else
      {
        *(void *)(a1 + 176) = v25;
        *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
        uint64_t v27 = *(void *)(a2 + 192);
        *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
        *(void *)(a1 + 192) = v27;
        swift_bridgeObjectRetain();
      }
      uint64_t v28 = *(void *)(a2 + 208);
      if (v28 == 1)
      {
        long long v29 = *(_OWORD *)(a2 + 208);
        *(_OWORD *)(a1 + 217) = *(_OWORD *)(a2 + 217);
        *(_OWORD *)(a1 + 208) = v29;
      }
      else
      {
        *(void *)(a1 + 208) = v28;
        *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
        uint64_t v30 = *(void *)(a2 + 224);
        *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
        *(void *)(a1 + 224) = v30;
        swift_bridgeObjectRetain();
      }
      uint64_t v31 = *(void *)(a2 + 240);
      if (v31 == 1)
      {
        long long v32 = *(_OWORD *)(a2 + 240);
        *(_OWORD *)(a1 + 249) = *(_OWORD *)(a2 + 249);
        *(_OWORD *)(a1 + 240) = v32;
      }
      else
      {
        *(void *)(a1 + 240) = v31;
        *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
        uint64_t v33 = *(void *)(a2 + 256);
        *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
        *(void *)(a1 + 256) = v33;
        swift_bridgeObjectRetain();
      }
      uint64_t v34 = *(void *)(a2 + 272);
      if (v34 == 1)
      {
        long long v35 = *(_OWORD *)(a2 + 272);
        *(_OWORD *)(a1 + 281) = *(_OWORD *)(a2 + 281);
        *(_OWORD *)(a1 + 272) = v35;
      }
      else
      {
        *(void *)(a1 + 272) = v34;
        *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
        uint64_t v36 = *(void *)(a2 + 288);
        *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
        *(void *)(a1 + 288) = v36;
        swift_bridgeObjectRetain();
      }
      uint64_t v37 = *(void *)(a2 + 304);
      if (v37 == 1)
      {
        long long v38 = *(_OWORD *)(a2 + 304);
        *(_OWORD *)(a1 + 313) = *(_OWORD *)(a2 + 313);
        *(_OWORD *)(a1 + 304) = v38;
      }
      else
      {
        *(void *)(a1 + 304) = v37;
        *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
        uint64_t v39 = *(void *)(a2 + 320);
        *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
        *(void *)(a1 + 320) = v39;
        swift_bridgeObjectRetain();
      }
      uint64_t v40 = *(void *)(a2 + 336);
      if (v40 == 1)
      {
        long long v41 = *(_OWORD *)(a2 + 336);
        *(_OWORD *)(a1 + 345) = *(_OWORD *)(a2 + 345);
        *(_OWORD *)(a1 + 336) = v41;
      }
      else
      {
        *(void *)(a1 + 336) = v40;
        *(unsigned char *)(a1 + 344) = *(unsigned char *)(a2 + 344);
        uint64_t v42 = *(void *)(a2 + 352);
        *(unsigned char *)(a1 + 360) = *(unsigned char *)(a2 + 360);
        *(void *)(a1 + 352) = v42;
        swift_bridgeObjectRetain();
      }
      uint64_t v43 = *(void *)(a2 + 368);
      if (v43 == 1)
      {
        long long v44 = *(_OWORD *)(a2 + 368);
        *(_OWORD *)(a1 + 377) = *(_OWORD *)(a2 + 377);
        *(_OWORD *)(a1 + 368) = v44;
      }
      else
      {
        *(void *)(a1 + 368) = v43;
        *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
        uint64_t v45 = *(void *)(a2 + 384);
        *(unsigned char *)(a1 + 392) = *(unsigned char *)(a2 + 392);
        *(void *)(a1 + 384) = v45;
        swift_bridgeObjectRetain();
      }
      uint64_t v46 = *(void *)(a2 + 400);
      if (v46 == 1)
      {
        long long v47 = *(_OWORD *)(a2 + 400);
        *(_OWORD *)(a1 + 409) = *(_OWORD *)(a2 + 409);
        *(_OWORD *)(a1 + 400) = v47;
      }
      else
      {
        *(void *)(a1 + 400) = v46;
        *(unsigned char *)(a1 + 408) = *(unsigned char *)(a2 + 408);
        uint64_t v48 = *(void *)(a2 + 416);
        *(unsigned char *)(a1 + 424) = *(unsigned char *)(a2 + 424);
        *(void *)(a1 + 416) = v48;
        swift_bridgeObjectRetain();
      }
      uint64_t v49 = *(void *)(a2 + 432);
      if (v49 == 1)
      {
        long long v50 = *(_OWORD *)(a2 + 432);
        *(_OWORD *)(a1 + 441) = *(_OWORD *)(a2 + 441);
        *(_OWORD *)(a1 + 432) = v50;
      }
      else
      {
        *(void *)(a1 + 432) = v49;
        *(unsigned char *)(a1 + 440) = *(unsigned char *)(a2 + 440);
        uint64_t v51 = *(void *)(a2 + 448);
        *(unsigned char *)(a1 + 456) = *(unsigned char *)(a2 + 456);
        *(void *)(a1 + 448) = v51;
        swift_bridgeObjectRetain();
      }
      uint64_t v52 = *(void *)(a2 + 464);
      if (v52 == 1)
      {
        long long v53 = *(_OWORD *)(a2 + 464);
        *(_OWORD *)(a1 + 473) = *(_OWORD *)(a2 + 473);
        *(_OWORD *)(a1 + 464) = v53;
      }
      else
      {
        *(void *)(a1 + 464) = v52;
        *(unsigned char *)(a1 + 472) = *(unsigned char *)(a2 + 472);
        uint64_t v54 = *(void *)(a2 + 480);
        *(unsigned char *)(a1 + 488) = *(unsigned char *)(a2 + 488);
        *(void *)(a1 + 480) = v54;
        swift_bridgeObjectRetain();
      }
      uint64_t v55 = *(void *)(a2 + 496);
      if (v55 == 1)
      {
        long long v56 = *(_OWORD *)(a2 + 496);
        *(_OWORD *)(a1 + 505) = *(_OWORD *)(a2 + 505);
        *(_OWORD *)(a1 + 496) = v56;
      }
      else
      {
        *(void *)(a1 + 496) = v55;
        *(unsigned char *)(a1 + 504) = *(unsigned char *)(a2 + 504);
        uint64_t v57 = *(void *)(a2 + 512);
        *(unsigned char *)(a1 + 520) = *(unsigned char *)(a2 + 520);
        *(void *)(a1 + 512) = v57;
        swift_bridgeObjectRetain();
      }
      uint64_t v58 = *(void *)(a2 + 528);
      if (v58 == 1)
      {
        long long v59 = *(_OWORD *)(a2 + 528);
        *(_OWORD *)(a1 + 537) = *(_OWORD *)(a2 + 537);
        *(_OWORD *)(a1 + 528) = v59;
      }
      else
      {
        *(void *)(a1 + 528) = v58;
        *(unsigned char *)(a1 + 536) = *(unsigned char *)(a2 + 536);
        uint64_t v60 = *(void *)(a2 + 544);
        *(unsigned char *)(a1 + 552) = *(unsigned char *)(a2 + 552);
        *(void *)(a1 + 544) = v60;
        swift_bridgeObjectRetain();
      }
      uint64_t v61 = *(void *)(a2 + 560);
      if (v61 == 1)
      {
        long long v62 = *(_OWORD *)(a2 + 560);
        *(_OWORD *)(a1 + 569) = *(_OWORD *)(a2 + 569);
        *(_OWORD *)(a1 + 560) = v62;
      }
      else
      {
        *(void *)(a1 + 560) = v61;
        *(unsigned char *)(a1 + 568) = *(unsigned char *)(a2 + 568);
        uint64_t v63 = *(void *)(a2 + 576);
        *(unsigned char *)(a1 + 584) = *(unsigned char *)(a2 + 584);
        *(void *)(a1 + 576) = v63;
        swift_bridgeObjectRetain();
      }
      uint64_t v64 = *(void *)(a2 + 592);
      if (v64 == 1)
      {
        long long v65 = *(_OWORD *)(a2 + 592);
        *(_OWORD *)(a1 + 601) = *(_OWORD *)(a2 + 601);
        *(_OWORD *)(a1 + 592) = v65;
      }
      else
      {
        *(void *)(a1 + 592) = v64;
        *(unsigned char *)(a1 + 600) = *(unsigned char *)(a2 + 600);
        uint64_t v66 = *(void *)(a2 + 608);
        *(unsigned char *)(a1 + 616) = *(unsigned char *)(a2 + 616);
        *(void *)(a1 + 608) = v66;
        swift_bridgeObjectRetain();
      }
      uint64_t v67 = *(void *)(a2 + 624);
      if (v67 == 1)
      {
        long long v68 = *(_OWORD *)(a2 + 624);
        *(_OWORD *)(a1 + 633) = *(_OWORD *)(a2 + 633);
        *(_OWORD *)(a1 + 624) = v68;
      }
      else
      {
        *(void *)(a1 + 624) = v67;
        *(unsigned char *)(a1 + 632) = *(unsigned char *)(a2 + 632);
        uint64_t v69 = *(void *)(a2 + 640);
        *(unsigned char *)(a1 + 648) = *(unsigned char *)(a2 + 648);
        *(void *)(a1 + 640) = v69;
        swift_bridgeObjectRetain();
      }
      uint64_t v70 = *(void *)(a2 + 656);
      if (v70 == 1)
      {
        long long v71 = *(_OWORD *)(a2 + 656);
        *(_OWORD *)(a1 + 665) = *(_OWORD *)(a2 + 665);
        *(_OWORD *)(a1 + 656) = v71;
      }
      else
      {
        *(void *)(a1 + 656) = v70;
        *(unsigned char *)(a1 + 664) = *(unsigned char *)(a2 + 664);
        uint64_t v72 = *(void *)(a2 + 672);
        *(unsigned char *)(a1 + 680) = *(unsigned char *)(a2 + 680);
        *(void *)(a1 + 672) = v72;
        swift_bridgeObjectRetain();
      }
      uint64_t v73 = *(void *)(a2 + 688);
      if (v73 == 1)
      {
        long long v74 = *(_OWORD *)(a2 + 688);
        *(_OWORD *)(a1 + 697) = *(_OWORD *)(a2 + 697);
        *(_OWORD *)(a1 + 688) = v74;
      }
      else
      {
        *(void *)(a1 + 688) = v73;
        *(unsigned char *)(a1 + 696) = *(unsigned char *)(a2 + 696);
        uint64_t v75 = *(void *)(a2 + 704);
        *(unsigned char *)(a1 + 712) = *(unsigned char *)(a2 + 712);
        *(void *)(a1 + 704) = v75;
        swift_bridgeObjectRetain();
      }
      uint64_t v76 = *(void *)(a2 + 720);
      if (v76 == 1)
      {
        long long v77 = *(_OWORD *)(a2 + 720);
        *(_OWORD *)(a1 + 729) = *(_OWORD *)(a2 + 729);
        *(_OWORD *)(a1 + 720) = v77;
      }
      else
      {
        *(void *)(a1 + 720) = v76;
        *(unsigned char *)(a1 + 728) = *(unsigned char *)(a2 + 728);
        uint64_t v78 = *(void *)(a2 + 736);
        *(unsigned char *)(a1 + 744) = *(unsigned char *)(a2 + 744);
        *(void *)(a1 + 736) = v78;
        swift_bridgeObjectRetain();
      }
      uint64_t v79 = *(void *)(a2 + 752);
      if (v79 == 1)
      {
        long long v80 = *(_OWORD *)(a2 + 752);
        *(_OWORD *)(a1 + 761) = *(_OWORD *)(a2 + 761);
        *(_OWORD *)(a1 + 752) = v80;
      }
      else
      {
        *(void *)(a1 + 752) = v79;
        *(unsigned char *)(a1 + 760) = *(unsigned char *)(a2 + 760);
        uint64_t v81 = *(void *)(a2 + 768);
        *(unsigned char *)(a1 + 776) = *(unsigned char *)(a2 + 776);
        *(void *)(a1 + 768) = v81;
        swift_bridgeObjectRetain();
      }
      long long v82 = *(_OWORD *)(a2 + 784);
      *(unsigned char *)(a1 + 800) = *(unsigned char *)(a2 + 800);
      *(_OWORD *)(a1 + 784) = v82;
      long long v83 = *(_OWORD *)(a2 + 808);
      *(unsigned char *)(a1 + 824) = *(unsigned char *)(a2 + 824);
      *(_OWORD *)(a1 + 808) = v83;
      *(unsigned char *)(a1 + 825) = *(unsigned char *)(a2 + 825);
      *(unsigned char *)(a1 + 826) = *(unsigned char *)(a2 + 826);
      *(unsigned char *)(a1 + 827) = *(unsigned char *)(a2 + 827);
      *(unsigned char *)(a1 + 828) = *(unsigned char *)(a2 + 828);
      *(unsigned char *)(a1 + 829) = *(unsigned char *)(a2 + 829);
      *(unsigned char *)(a1 + 830) = *(unsigned char *)(a2 + 830);
      *(unsigned char *)(a1 + 831) = *(unsigned char *)(a2 + 831);
      *(void *)(a1 + 832) = *(void *)(a2 + 832);
      *(void *)(a1 + 840) = *(void *)(a2 + 840);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_248;
    }
LABEL_7:
    memcpy((void *)(a1 + 16), (const void *)(a2 + 16), 0x340uLL);
    goto LABEL_248;
  }
  if (v7 == 1)
  {
    sub_10009F560((void *)(a1 + 16));
    goto LABEL_7;
  }
  uint64_t v9 = *(void *)v6;
  if (*(void *)v5 == 1)
  {
    if (v9 == 1)
    {
      long long v10 = *v6;
      *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      *uint64_t v5 = v10;
    }
    else
    {
      *(void *)(a1 + 16) = v9;
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      uint64_t v84 = *(void *)(a2 + 32);
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      *(void *)(a1 + 32) = v84;
      swift_bridgeObjectRetain();
    }
  }
  else if (v9 == 1)
  {
    sub_10009F534(a1 + 16);
    long long v14 = *(_OWORD *)(a2 + 25);
    *uint64_t v5 = *v6;
    *(_OWORD *)(a1 + 25) = v14;
  }
  else
  {
    *(void *)(a1 + 16) = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    uint64_t v85 = *(void *)(a2 + 32);
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
    *(void *)(a1 + 32) = v85;
  }
  uint64_t v86 = (long long *)(a1 + 48);
  uint64_t v88 = (long long *)(a2 + 48);
  uint64_t v87 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48) == 1)
  {
    if (v87 == 1)
    {
      long long v89 = *v88;
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      *uint64_t v86 = v89;
    }
    else
    {
      *(void *)(a1 + 48) = v87;
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      uint64_t v91 = *(void *)(a2 + 64);
      *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
      *(void *)(a1 + 64) = v91;
      swift_bridgeObjectRetain();
    }
  }
  else if (v87 == 1)
  {
    sub_10009F534(a1 + 48);
    long long v90 = *(_OWORD *)(a2 + 57);
    *uint64_t v86 = *v88;
    *(_OWORD *)(a1 + 57) = v90;
  }
  else
  {
    *(void *)(a1 + 48) = v87;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    uint64_t v92 = *(void *)(a2 + 64);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(void *)(a1 + 64) = v92;
  }
  uint64_t v93 = (long long *)(a1 + 80);
  uint64_t v95 = (long long *)(a2 + 80);
  uint64_t v94 = *(void *)(a2 + 80);
  if (*(void *)(a1 + 80) == 1)
  {
    if (v94 == 1)
    {
      long long v96 = *v95;
      *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
      *uint64_t v93 = v96;
    }
    else
    {
      *(void *)(a1 + 80) = v94;
      *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
      uint64_t v98 = *(void *)(a2 + 96);
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      *(void *)(a1 + 96) = v98;
      swift_bridgeObjectRetain();
    }
  }
  else if (v94 == 1)
  {
    sub_10009F534(a1 + 80);
    long long v97 = *(_OWORD *)(a2 + 89);
    *uint64_t v93 = *v95;
    *(_OWORD *)(a1 + 89) = v97;
  }
  else
  {
    *(void *)(a1 + 80) = v94;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
    uint64_t v99 = *(void *)(a2 + 96);
    *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
    *(void *)(a1 + 96) = v99;
  }
  uint64_t v100 = (long long *)(a1 + 112);
  uint64_t v102 = (long long *)(a2 + 112);
  uint64_t v101 = *(void *)(a2 + 112);
  if (*(void *)(a1 + 112) == 1)
  {
    if (v101 == 1)
    {
      long long v103 = *v102;
      *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
      *uint64_t v100 = v103;
    }
    else
    {
      *(void *)(a1 + 112) = v101;
      *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
      uint64_t v105 = *(void *)(a2 + 128);
      *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
      *(void *)(a1 + 128) = v105;
      swift_bridgeObjectRetain();
    }
  }
  else if (v101 == 1)
  {
    sub_10009F534(a1 + 112);
    long long v104 = *(_OWORD *)(a2 + 121);
    *uint64_t v100 = *v102;
    *(_OWORD *)(a1 + 121) = v104;
  }
  else
  {
    *(void *)(a1 + 112) = v101;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
    uint64_t v106 = *(void *)(a2 + 128);
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
    *(void *)(a1 + 128) = v106;
  }
  uint64_t v107 = (long long *)(a1 + 144);
  uint64_t v109 = (long long *)(a2 + 144);
  uint64_t v108 = *(void *)(a2 + 144);
  if (*(void *)(a1 + 144) == 1)
  {
    if (v108 == 1)
    {
      long long v110 = *v109;
      *(_OWORD *)(a1 + 153) = *(_OWORD *)(a2 + 153);
      *uint64_t v107 = v110;
    }
    else
    {
      *(void *)(a1 + 144) = v108;
      *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
      uint64_t v112 = *(void *)(a2 + 160);
      *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
      *(void *)(a1 + 160) = v112;
      swift_bridgeObjectRetain();
    }
  }
  else if (v108 == 1)
  {
    sub_10009F534(a1 + 144);
    long long v111 = *(_OWORD *)(a2 + 153);
    *uint64_t v107 = *v109;
    *(_OWORD *)(a1 + 153) = v111;
  }
  else
  {
    *(void *)(a1 + 144) = v108;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
    uint64_t v113 = *(void *)(a2 + 160);
    *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
    *(void *)(a1 + 160) = v113;
  }
  uint64_t v114 = (long long *)(a1 + 176);
  uint64_t v116 = (long long *)(a2 + 176);
  uint64_t v115 = *(void *)(a2 + 176);
  if (*(void *)(a1 + 176) == 1)
  {
    if (v115 == 1)
    {
      long long v117 = *v116;
      *(_OWORD *)(a1 + 185) = *(_OWORD *)(a2 + 185);
      *uint64_t v114 = v117;
    }
    else
    {
      *(void *)(a1 + 176) = v115;
      *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
      uint64_t v119 = *(void *)(a2 + 192);
      *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
      *(void *)(a1 + 192) = v119;
      swift_bridgeObjectRetain();
    }
  }
  else if (v115 == 1)
  {
    sub_10009F534(a1 + 176);
    long long v118 = *(_OWORD *)(a2 + 185);
    *uint64_t v114 = *v116;
    *(_OWORD *)(a1 + 185) = v118;
  }
  else
  {
    *(void *)(a1 + 176) = v115;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
    uint64_t v120 = *(void *)(a2 + 192);
    *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
    *(void *)(a1 + 192) = v120;
  }
  uint64_t v121 = (long long *)(a1 + 208);
  uint64_t v123 = (long long *)(a2 + 208);
  uint64_t v122 = *(void *)(a2 + 208);
  if (*(void *)(a1 + 208) == 1)
  {
    if (v122 == 1)
    {
      long long v124 = *v123;
      *(_OWORD *)(a1 + 217) = *(_OWORD *)(a2 + 217);
      *uint64_t v121 = v124;
    }
    else
    {
      *(void *)(a1 + 208) = v122;
      *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
      uint64_t v126 = *(void *)(a2 + 224);
      *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
      *(void *)(a1 + 224) = v126;
      swift_bridgeObjectRetain();
    }
  }
  else if (v122 == 1)
  {
    sub_10009F534(a1 + 208);
    long long v125 = *(_OWORD *)(a2 + 217);
    *uint64_t v121 = *v123;
    *(_OWORD *)(a1 + 217) = v125;
  }
  else
  {
    *(void *)(a1 + 208) = v122;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
    uint64_t v127 = *(void *)(a2 + 224);
    *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
    *(void *)(a1 + 224) = v127;
  }
  uint64_t v128 = (long long *)(a1 + 240);
  uint64_t v130 = (long long *)(a2 + 240);
  uint64_t v129 = *(void *)(a2 + 240);
  if (*(void *)(a1 + 240) == 1)
  {
    if (v129 == 1)
    {
      long long v131 = *v130;
      *(_OWORD *)(a1 + 249) = *(_OWORD *)(a2 + 249);
      *uint64_t v128 = v131;
    }
    else
    {
      *(void *)(a1 + 240) = v129;
      *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
      uint64_t v133 = *(void *)(a2 + 256);
      *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
      *(void *)(a1 + 256) = v133;
      swift_bridgeObjectRetain();
    }
  }
  else if (v129 == 1)
  {
    sub_10009F534(a1 + 240);
    long long v132 = *(_OWORD *)(a2 + 249);
    *uint64_t v128 = *v130;
    *(_OWORD *)(a1 + 249) = v132;
  }
  else
  {
    *(void *)(a1 + 240) = v129;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
    uint64_t v134 = *(void *)(a2 + 256);
    *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
    *(void *)(a1 + 256) = v134;
  }
  uint64_t v135 = (long long *)(a1 + 272);
  int v136 = (long long *)(a2 + 272);
  uint64_t v137 = *(void *)(a2 + 272);
  if (*(void *)(a1 + 272) == 1)
  {
    if (v137 == 1)
    {
      long long v138 = *v136;
      *(_OWORD *)(a1 + 281) = *(_OWORD *)(a2 + 281);
      *uint64_t v135 = v138;
    }
    else
    {
      *(void *)(a1 + 272) = v137;
      *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
      uint64_t v140 = *(void *)(a2 + 288);
      *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
      *(void *)(a1 + 288) = v140;
      swift_bridgeObjectRetain();
    }
  }
  else if (v137 == 1)
  {
    sub_10009F534(a1 + 272);
    long long v139 = *(_OWORD *)(a2 + 281);
    *uint64_t v135 = *v136;
    *(_OWORD *)(a1 + 281) = v139;
  }
  else
  {
    *(void *)(a1 + 272) = v137;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 280) = *v4;
    uint64_t v141 = *(void *)(a2 + 288);
    *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
    *(void *)(a1 + 288) = v141;
  }
  uint64_t v142 = (long long *)(a1 + 304);
  uint64_t v143 = (long long *)(a2 + 304);
  uint64_t v144 = *(void *)(a2 + 304);
  if (*(void *)(a1 + 304) == 1)
  {
    if (v144 == 1)
    {
      long long v145 = *v143;
      *(_OWORD *)(a1 + 313) = *(_OWORD *)(a2 + 313);
      *uint64_t v142 = v145;
    }
    else
    {
      *(void *)(a1 + 304) = v144;
      *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
      uint64_t v147 = *(void *)(a2 + 320);
      *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
      *(void *)(a1 + 320) = v147;
      swift_bridgeObjectRetain();
    }
  }
  else if (v144 == 1)
  {
    sub_10009F534(a1 + 304);
    long long v146 = *(_OWORD *)(a2 + 313);
    *uint64_t v142 = *v143;
    *(_OWORD *)(a1 + 313) = v146;
  }
  else
  {
    *(void *)(a1 + 304) = v144;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 312) = v4[32];
    uint64_t v148 = *(void *)(a2 + 320);
    *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
    *(void *)(a1 + 320) = v148;
  }
  uint64_t v149 = (long long *)(a1 + 336);
  uint64_t v150 = (long long *)(a2 + 336);
  uint64_t v151 = *(void *)(a2 + 336);
  if (*(void *)(a1 + 336) == 1)
  {
    if (v151 == 1)
    {
      long long v152 = *v150;
      *(_OWORD *)(a1 + 345) = *(_OWORD *)(a2 + 345);
      *uint64_t v149 = v152;
    }
    else
    {
      *(void *)(a1 + 336) = v151;
      *(unsigned char *)(a1 + 344) = *(unsigned char *)(a2 + 344);
      uint64_t v154 = *(void *)(a2 + 352);
      *(unsigned char *)(a1 + 360) = *(unsigned char *)(a2 + 360);
      *(void *)(a1 + 352) = v154;
      swift_bridgeObjectRetain();
    }
  }
  else if (v151 == 1)
  {
    sub_10009F534(a1 + 336);
    long long v153 = *(_OWORD *)(a2 + 345);
    *uint64_t v149 = *v150;
    *(_OWORD *)(a1 + 345) = v153;
  }
  else
  {
    *(void *)(a1 + 336) = v151;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 344) = v4[64];
    uint64_t v155 = *(void *)(a2 + 352);
    *(unsigned char *)(a1 + 360) = *(unsigned char *)(a2 + 360);
    *(void *)(a1 + 352) = v155;
  }
  uint64_t v156 = (long long *)(a1 + 368);
  uint64_t v157 = (long long *)(a2 + 368);
  uint64_t v158 = *(void *)(a2 + 368);
  if (*(void *)(a1 + 368) == 1)
  {
    if (v158 == 1)
    {
      long long v159 = *v157;
      *(_OWORD *)(a1 + 377) = *(_OWORD *)(a2 + 377);
      *uint64_t v156 = v159;
    }
    else
    {
      *(void *)(a1 + 368) = v158;
      *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
      uint64_t v161 = *(void *)(a2 + 384);
      *(unsigned char *)(a1 + 392) = *(unsigned char *)(a2 + 392);
      *(void *)(a1 + 384) = v161;
      swift_bridgeObjectRetain();
    }
  }
  else if (v158 == 1)
  {
    sub_10009F534(a1 + 368);
    long long v160 = *(_OWORD *)(a2 + 377);
    *uint64_t v156 = *v157;
    *(_OWORD *)(a1 + 377) = v160;
  }
  else
  {
    *(void *)(a1 + 368) = v158;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 376) = v4[96];
    uint64_t v162 = *(void *)(a2 + 384);
    *(unsigned char *)(a1 + 392) = *(unsigned char *)(a2 + 392);
    *(void *)(a1 + 384) = v162;
  }
  int v163 = (long long *)(a1 + 400);
  uint64_t v164 = (long long *)(a2 + 400);
  uint64_t v165 = *(void *)(a2 + 400);
  if (*(void *)(a1 + 400) == 1)
  {
    if (v165 == 1)
    {
      long long v166 = *v164;
      *(_OWORD *)(a1 + 409) = *(_OWORD *)(a2 + 409);
      *int v163 = v166;
    }
    else
    {
      *(void *)(a1 + 400) = v165;
      *(unsigned char *)(a1 + 408) = *(unsigned char *)(a2 + 408);
      uint64_t v168 = *(void *)(a2 + 416);
      *(unsigned char *)(a1 + 424) = *(unsigned char *)(a2 + 424);
      *(void *)(a1 + 416) = v168;
      swift_bridgeObjectRetain();
    }
  }
  else if (v165 == 1)
  {
    sub_10009F534(a1 + 400);
    long long v167 = *(_OWORD *)(a2 + 409);
    *int v163 = *v164;
    *(_OWORD *)(a1 + 409) = v167;
  }
  else
  {
    *(void *)(a1 + 400) = v165;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 408) = v4[128];
    uint64_t v169 = *(void *)(a2 + 416);
    *(unsigned char *)(a1 + 424) = *(unsigned char *)(a2 + 424);
    *(void *)(a1 + 416) = v169;
  }
  uint64_t v170 = (long long *)(a1 + 432);
  uint64_t v171 = (long long *)(a2 + 432);
  uint64_t v172 = *(void *)(a2 + 432);
  if (*(void *)(a1 + 432) == 1)
  {
    if (v172 == 1)
    {
      long long v173 = *v171;
      *(_OWORD *)(a1 + 441) = *(_OWORD *)(a2 + 441);
      *uint64_t v170 = v173;
    }
    else
    {
      *(void *)(a1 + 432) = v172;
      *(unsigned char *)(a1 + 440) = *(unsigned char *)(a2 + 440);
      uint64_t v175 = *(void *)(a2 + 448);
      *(unsigned char *)(a1 + 456) = *(unsigned char *)(a2 + 456);
      *(void *)(a1 + 448) = v175;
      swift_bridgeObjectRetain();
    }
  }
  else if (v172 == 1)
  {
    sub_10009F534(a1 + 432);
    long long v174 = *(_OWORD *)(a2 + 441);
    *uint64_t v170 = *v171;
    *(_OWORD *)(a1 + 441) = v174;
  }
  else
  {
    *(void *)(a1 + 432) = v172;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 440) = v4[160];
    uint64_t v176 = *(void *)(a2 + 448);
    *(unsigned char *)(a1 + 456) = *(unsigned char *)(a2 + 456);
    *(void *)(a1 + 448) = v176;
  }
  uint64_t v177 = (long long *)(a1 + 464);
  uint64_t v178 = (long long *)(a2 + 464);
  uint64_t v179 = *(void *)(a2 + 464);
  if (*(void *)(a1 + 464) == 1)
  {
    if (v179 == 1)
    {
      long long v180 = *v178;
      *(_OWORD *)(a1 + 473) = *(_OWORD *)(a2 + 473);
      *uint64_t v177 = v180;
    }
    else
    {
      *(void *)(a1 + 464) = v179;
      *(unsigned char *)(a1 + 472) = *(unsigned char *)(a2 + 472);
      uint64_t v182 = *(void *)(a2 + 480);
      *(unsigned char *)(a1 + 488) = *(unsigned char *)(a2 + 488);
      *(void *)(a1 + 480) = v182;
      swift_bridgeObjectRetain();
    }
  }
  else if (v179 == 1)
  {
    sub_10009F534(a1 + 464);
    long long v181 = *(_OWORD *)(a2 + 473);
    *uint64_t v177 = *v178;
    *(_OWORD *)(a1 + 473) = v181;
  }
  else
  {
    *(void *)(a1 + 464) = v179;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 472) = v4[192];
    uint64_t v183 = *(void *)(a2 + 480);
    *(unsigned char *)(a1 + 488) = *(unsigned char *)(a2 + 488);
    *(void *)(a1 + 480) = v183;
  }
  uint64_t v184 = (long long *)(a1 + 496);
  uint64_t v185 = (long long *)(a2 + 496);
  uint64_t v186 = *(void *)(a2 + 496);
  if (*(void *)(a1 + 496) == 1)
  {
    if (v186 == 1)
    {
      long long v187 = *v185;
      *(_OWORD *)(a1 + 505) = *(_OWORD *)(a2 + 505);
      *uint64_t v184 = v187;
    }
    else
    {
      *(void *)(a1 + 496) = v186;
      *(unsigned char *)(a1 + 504) = *(unsigned char *)(a2 + 504);
      uint64_t v189 = *(void *)(a2 + 512);
      *(unsigned char *)(a1 + 520) = *(unsigned char *)(a2 + 520);
      *(void *)(a1 + 512) = v189;
      swift_bridgeObjectRetain();
    }
  }
  else if (v186 == 1)
  {
    sub_10009F534(a1 + 496);
    long long v188 = *(_OWORD *)(a2 + 505);
    *uint64_t v184 = *v185;
    *(_OWORD *)(a1 + 505) = v188;
  }
  else
  {
    *(void *)(a1 + 496) = v186;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 504) = v4[224];
    uint64_t v190 = *(void *)(a2 + 512);
    *(unsigned char *)(a1 + 520) = *(unsigned char *)(a2 + 520);
    *(void *)(a1 + 512) = v190;
  }
  uint64_t v191 = (long long *)(a1 + 528);
  uint64_t v192 = (long long *)(a2 + 528);
  uint64_t v193 = *(void *)(a2 + 528);
  if (*(void *)(a1 + 528) == 1)
  {
    if (v193 == 1)
    {
      long long v194 = *v192;
      *(_OWORD *)(a1 + 537) = *(_OWORD *)(a2 + 537);
      long long *v191 = v194;
    }
    else
    {
      *(void *)(a1 + 528) = v193;
      *(unsigned char *)(a1 + 536) = *(unsigned char *)(a2 + 536);
      uint64_t v196 = *(void *)(a2 + 544);
      *(unsigned char *)(a1 + 552) = *(unsigned char *)(a2 + 552);
      *(void *)(a1 + 544) = v196;
      swift_bridgeObjectRetain();
    }
  }
  else if (v193 == 1)
  {
    sub_10009F534(a1 + 528);
    long long v195 = *(_OWORD *)(a2 + 537);
    long long *v191 = *v192;
    *(_OWORD *)(a1 + 537) = v195;
  }
  else
  {
    *(void *)(a1 + 528) = v193;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 536) = v4[256];
    uint64_t v197 = *(void *)(a2 + 544);
    *(unsigned char *)(a1 + 552) = *(unsigned char *)(a2 + 552);
    *(void *)(a1 + 544) = v197;
  }
  uint64_t v198 = (long long *)(a1 + 560);
  uint64_t v199 = (long long *)(a2 + 560);
  uint64_t v200 = *(void *)(a2 + 560);
  if (*(void *)(a1 + 560) == 1)
  {
    if (v200 == 1)
    {
      long long v201 = *v199;
      *(_OWORD *)(a1 + 569) = *(_OWORD *)(a2 + 569);
      long long *v198 = v201;
    }
    else
    {
      *(void *)(a1 + 560) = v200;
      *(unsigned char *)(a1 + 568) = *(unsigned char *)(a2 + 568);
      uint64_t v203 = *(void *)(a2 + 576);
      *(unsigned char *)(a1 + 584) = *(unsigned char *)(a2 + 584);
      *(void *)(a1 + 576) = v203;
      swift_bridgeObjectRetain();
    }
  }
  else if (v200 == 1)
  {
    sub_10009F534(a1 + 560);
    long long v202 = *(_OWORD *)(a2 + 569);
    long long *v198 = *v199;
    *(_OWORD *)(a1 + 569) = v202;
  }
  else
  {
    *(void *)(a1 + 560) = v200;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 568) = v4[288];
    uint64_t v204 = *(void *)(a2 + 576);
    *(unsigned char *)(a1 + 584) = *(unsigned char *)(a2 + 584);
    *(void *)(a1 + 576) = v204;
  }
  char v205 = (long long *)(a1 + 592);
  uint64_t v206 = (long long *)(a2 + 592);
  uint64_t v207 = *(void *)(a2 + 592);
  if (*(void *)(a1 + 592) == 1)
  {
    if (v207 == 1)
    {
      long long v208 = *v206;
      *(_OWORD *)(a1 + 601) = *(_OWORD *)(a2 + 601);
      *char v205 = v208;
    }
    else
    {
      *(void *)(a1 + 592) = v207;
      *(unsigned char *)(a1 + 600) = *(unsigned char *)(a2 + 600);
      uint64_t v210 = *(void *)(a2 + 608);
      *(unsigned char *)(a1 + 616) = *(unsigned char *)(a2 + 616);
      *(void *)(a1 + 608) = v210;
      swift_bridgeObjectRetain();
    }
  }
  else if (v207 == 1)
  {
    sub_10009F534(a1 + 592);
    long long v209 = *(_OWORD *)(a2 + 601);
    *char v205 = *v206;
    *(_OWORD *)(a1 + 601) = v209;
  }
  else
  {
    *(void *)(a1 + 592) = v207;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 600) = v4[320];
    uint64_t v211 = *(void *)(a2 + 608);
    *(unsigned char *)(a1 + 616) = *(unsigned char *)(a2 + 616);
    *(void *)(a1 + 608) = v211;
  }
  uint64_t v212 = (long long *)(a1 + 624);
  uint64_t v213 = (long long *)(a2 + 624);
  uint64_t v214 = *(void *)(a2 + 624);
  if (*(void *)(a1 + 624) == 1)
  {
    if (v214 == 1)
    {
      long long v215 = *v213;
      *(_OWORD *)(a1 + 633) = *(_OWORD *)(a2 + 633);
      *uint64_t v212 = v215;
    }
    else
    {
      *(void *)(a1 + 624) = v214;
      *(unsigned char *)(a1 + 632) = *(unsigned char *)(a2 + 632);
      uint64_t v217 = *(void *)(a2 + 640);
      *(unsigned char *)(a1 + 648) = *(unsigned char *)(a2 + 648);
      *(void *)(a1 + 640) = v217;
      swift_bridgeObjectRetain();
    }
  }
  else if (v214 == 1)
  {
    sub_10009F534(a1 + 624);
    long long v216 = *(_OWORD *)(a2 + 633);
    *uint64_t v212 = *v213;
    *(_OWORD *)(a1 + 633) = v216;
  }
  else
  {
    *(void *)(a1 + 624) = v214;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 632) = v4[352];
    uint64_t v218 = *(void *)(a2 + 640);
    *(unsigned char *)(a1 + 648) = *(unsigned char *)(a2 + 648);
    *(void *)(a1 + 640) = v218;
  }
  uint64_t v219 = (long long *)(a1 + 656);
  char v220 = (long long *)(a2 + 656);
  uint64_t v221 = *(void *)(a2 + 656);
  if (*(void *)(a1 + 656) == 1)
  {
    if (v221 == 1)
    {
      long long v222 = *v220;
      *(_OWORD *)(a1 + 665) = *(_OWORD *)(a2 + 665);
      long long *v219 = v222;
    }
    else
    {
      *(void *)(a1 + 656) = v221;
      *(unsigned char *)(a1 + 664) = *(unsigned char *)(a2 + 664);
      uint64_t v224 = *(void *)(a2 + 672);
      *(unsigned char *)(a1 + 680) = *(unsigned char *)(a2 + 680);
      *(void *)(a1 + 672) = v224;
      swift_bridgeObjectRetain();
    }
  }
  else if (v221 == 1)
  {
    sub_10009F534(a1 + 656);
    long long v223 = *(_OWORD *)(a2 + 665);
    long long *v219 = *v220;
    *(_OWORD *)(a1 + 665) = v223;
  }
  else
  {
    *(void *)(a1 + 656) = v221;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 664) = v4[384];
    uint64_t v225 = *(void *)(a2 + 672);
    *(unsigned char *)(a1 + 680) = *(unsigned char *)(a2 + 680);
    *(void *)(a1 + 672) = v225;
  }
  uint64_t v226 = (long long *)(a1 + 688);
  uint64_t v227 = (long long *)(a2 + 688);
  uint64_t v228 = *(void *)(a2 + 688);
  if (*(void *)(a1 + 688) == 1)
  {
    if (v228 == 1)
    {
      long long v229 = *v227;
      *(_OWORD *)(a1 + 697) = *(_OWORD *)(a2 + 697);
      *uint64_t v226 = v229;
    }
    else
    {
      *(void *)(a1 + 688) = v228;
      *(unsigned char *)(a1 + 696) = *(unsigned char *)(a2 + 696);
      uint64_t v231 = *(void *)(a2 + 704);
      *(unsigned char *)(a1 + 712) = *(unsigned char *)(a2 + 712);
      *(void *)(a1 + 704) = v231;
      swift_bridgeObjectRetain();
    }
  }
  else if (v228 == 1)
  {
    sub_10009F534(a1 + 688);
    long long v230 = *(_OWORD *)(a2 + 697);
    *uint64_t v226 = *v227;
    *(_OWORD *)(a1 + 697) = v230;
  }
  else
  {
    *(void *)(a1 + 688) = v228;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 696) = v4[416];
    uint64_t v232 = *(void *)(a2 + 704);
    *(unsigned char *)(a1 + 712) = *(unsigned char *)(a2 + 712);
    *(void *)(a1 + 704) = v232;
  }
  uint64_t v233 = (long long *)(a1 + 720);
  uint64_t v234 = (long long *)(a2 + 720);
  uint64_t v235 = *(void *)(a2 + 720);
  if (*(void *)(a1 + 720) == 1)
  {
    if (v235 == 1)
    {
      long long v236 = *v234;
      *(_OWORD *)(a1 + 729) = *(_OWORD *)(a2 + 729);
      *uint64_t v233 = v236;
    }
    else
    {
      *(void *)(a1 + 720) = v235;
      *(unsigned char *)(a1 + 728) = *(unsigned char *)(a2 + 728);
      uint64_t v238 = *(void *)(a2 + 736);
      *(unsigned char *)(a1 + 744) = *(unsigned char *)(a2 + 744);
      *(void *)(a1 + 736) = v238;
      swift_bridgeObjectRetain();
    }
  }
  else if (v235 == 1)
  {
    sub_10009F534(a1 + 720);
    long long v237 = *(_OWORD *)(a2 + 729);
    *uint64_t v233 = *v234;
    *(_OWORD *)(a1 + 729) = v237;
  }
  else
  {
    *(void *)(a1 + 720) = v235;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 728) = v4[448];
    uint64_t v239 = *(void *)(a2 + 736);
    *(unsigned char *)(a1 + 744) = *(unsigned char *)(a2 + 744);
    *(void *)(a1 + 736) = v239;
  }
  char v240 = (long long *)(a1 + 752);
  uint64_t v241 = (long long *)(a2 + 752);
  uint64_t v242 = *(void *)(a2 + 752);
  if (*(void *)(a1 + 752) == 1)
  {
    if (v242 == 1)
    {
      long long v243 = *v241;
      *(_OWORD *)(a1 + 761) = *(_OWORD *)(a2 + 761);
      *char v240 = v243;
    }
    else
    {
      *(void *)(a1 + 752) = v242;
      *(unsigned char *)(a1 + 760) = *(unsigned char *)(a2 + 760);
      uint64_t v245 = *(void *)(a2 + 768);
      *(unsigned char *)(a1 + 776) = *(unsigned char *)(a2 + 776);
      *(void *)(a1 + 768) = v245;
      swift_bridgeObjectRetain();
    }
  }
  else if (v242 == 1)
  {
    sub_10009F534(a1 + 752);
    long long v244 = *(_OWORD *)(a2 + 761);
    *char v240 = *v241;
    *(_OWORD *)(a1 + 761) = v244;
  }
  else
  {
    *(void *)(a1 + 752) = v242;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 760) = v4[480];
    uint64_t v246 = *(void *)(a2 + 768);
    *(unsigned char *)(a1 + 776) = *(unsigned char *)(a2 + 776);
    *(void *)(a1 + 768) = v246;
  }
  long long v247 = *(_OWORD *)(a2 + 784);
  *(unsigned char *)(a1 + 800) = *(unsigned char *)(a2 + 800);
  *(_OWORD *)(a1 + 784) = v247;
  long long v248 = *(_OWORD *)(a2 + 808);
  *(unsigned char *)(a1 + 824) = *(unsigned char *)(a2 + 824);
  *(_OWORD *)(a1 + 808) = v248;
  *(unsigned char *)(a1 + 825) = *(unsigned char *)(a2 + 825);
  *(unsigned char *)(a1 + 826) = *(unsigned char *)(a2 + 826);
  *(unsigned char *)(a1 + 827) = *(unsigned char *)(a2 + 827);
  *(unsigned char *)(a1 + 828) = *(unsigned char *)(a2 + 828);
  *(unsigned char *)(a1 + 829) = *(unsigned char *)(a2 + 829);
  *(unsigned char *)(a1 + 830) = *(unsigned char *)(a2 + 830);
  *(unsigned char *)(a1 + 831) = *(unsigned char *)(a2 + 831);
  *(void *)(a1 + 832) = *(void *)(a2 + 832);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 840) = *(void *)(a2 + 840);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_248:
  uint64_t v249 = (long long *)(a1 + 848);
  char v250 = (long long *)(a2 + 848);
  uint64_t v251 = *(void *)(a2 + 1664);
  if (*(void *)(a1 + 1664) == 1)
  {
    if (v251 != 1)
    {
      if (*(void *)v250 == 1)
      {
        long long v252 = *v250;
        *(_OWORD *)(a1 + 857) = *(_OWORD *)(a2 + 857);
        *uint64_t v249 = v252;
      }
      else
      {
        *(void *)(a1 + 848) = *(void *)v250;
        *(unsigned char *)(a1 + 856) = *(unsigned char *)(a2 + 856);
        uint64_t v255 = *(void *)(a2 + 864);
        *(unsigned char *)(a1 + 872) = *(unsigned char *)(a2 + 872);
        *(void *)(a1 + 864) = v255;
        swift_bridgeObjectRetain();
      }
      uint64_t v256 = *(void *)(a2 + 880);
      if (v256 == 1)
      {
        long long v257 = *(_OWORD *)(a2 + 880);
        *(_OWORD *)(a1 + 889) = *(_OWORD *)(a2 + 889);
        *(_OWORD *)(a1 + 880) = v257;
      }
      else
      {
        *(void *)(a1 + 880) = v256;
        *(unsigned char *)(a1 + 888) = *(unsigned char *)(a2 + 888);
        uint64_t v259 = *(void *)(a2 + 896);
        *(unsigned char *)(a1 + 904) = *(unsigned char *)(a2 + 904);
        *(void *)(a1 + 896) = v259;
        swift_bridgeObjectRetain();
      }
      uint64_t v260 = *(void *)(a2 + 912);
      if (v260 == 1)
      {
        long long v261 = *(_OWORD *)(a2 + 912);
        *(_OWORD *)(a1 + 921) = *(_OWORD *)(a2 + 921);
        *(_OWORD *)(a1 + 912) = v261;
      }
      else
      {
        *(void *)(a1 + 912) = v260;
        *(unsigned char *)(a1 + 920) = *(unsigned char *)(a2 + 920);
        uint64_t v262 = *(void *)(a2 + 928);
        *(unsigned char *)(a1 + 936) = *(unsigned char *)(a2 + 936);
        *(void *)(a1 + 928) = v262;
        swift_bridgeObjectRetain();
      }
      uint64_t v263 = *(void *)(a2 + 944);
      if (v263 == 1)
      {
        long long v264 = *(_OWORD *)(a2 + 944);
        *(_OWORD *)(a1 + 953) = *(_OWORD *)(a2 + 953);
        *(_OWORD *)(a1 + 944) = v264;
      }
      else
      {
        *(void *)(a1 + 944) = v263;
        *(unsigned char *)(a1 + 952) = *(unsigned char *)(a2 + 952);
        uint64_t v265 = *(void *)(a2 + 960);
        *(unsigned char *)(a1 + 968) = *(unsigned char *)(a2 + 968);
        *(void *)(a1 + 960) = v265;
        swift_bridgeObjectRetain();
      }
      uint64_t v266 = *(void *)(a2 + 976);
      if (v266 == 1)
      {
        long long v267 = *(_OWORD *)(a2 + 976);
        *(_OWORD *)(a1 + 985) = *(_OWORD *)(a2 + 985);
        *(_OWORD *)(a1 + 976) = v267;
      }
      else
      {
        *(void *)(a1 + 976) = v266;
        *(unsigned char *)(a1 + 984) = *(unsigned char *)(a2 + 984);
        uint64_t v268 = *(void *)(a2 + 992);
        *(unsigned char *)(a1 + 1000) = *(unsigned char *)(a2 + 1000);
        *(void *)(a1 + 992) = v268;
        swift_bridgeObjectRetain();
      }
      uint64_t v269 = *(void *)(a2 + 1008);
      if (v269 == 1)
      {
        long long v270 = *(_OWORD *)(a2 + 1008);
        *(_OWORD *)(a1 + 1017) = *(_OWORD *)(a2 + 1017);
        *(_OWORD *)(a1 + 1008) = v270;
      }
      else
      {
        *(void *)(a1 + 1008) = v269;
        *(unsigned char *)(a1 + 1016) = *(unsigned char *)(a2 + 1016);
        uint64_t v271 = *(void *)(a2 + 1024);
        *(unsigned char *)(a1 + 1032) = *(unsigned char *)(a2 + 1032);
        *(void *)(a1 + 1024) = v271;
        swift_bridgeObjectRetain();
      }
      uint64_t v272 = *(void *)(a2 + 1040);
      if (v272 == 1)
      {
        long long v273 = *(_OWORD *)(a2 + 1040);
        *(_OWORD *)(a1 + 1049) = *(_OWORD *)(a2 + 1049);
        *(_OWORD *)(a1 + 1040) = v273;
      }
      else
      {
        *(void *)(a1 + 1040) = v272;
        *(unsigned char *)(a1 + 1048) = *(unsigned char *)(a2 + 1048);
        uint64_t v274 = *(void *)(a2 + 1056);
        *(unsigned char *)(a1 + 1064) = *(unsigned char *)(a2 + 1064);
        *(void *)(a1 + 1056) = v274;
        swift_bridgeObjectRetain();
      }
      uint64_t v275 = *(void *)(a2 + 1072);
      if (v275 == 1)
      {
        long long v276 = *(_OWORD *)(a2 + 1072);
        *(_OWORD *)(a1 + 1081) = *(_OWORD *)(a2 + 1081);
        *(_OWORD *)(a1 + 1072) = v276;
      }
      else
      {
        *(void *)(a1 + 1072) = v275;
        *(unsigned char *)(a1 + 1080) = *(unsigned char *)(a2 + 1080);
        uint64_t v277 = *(void *)(a2 + 1088);
        *(unsigned char *)(a1 + 1096) = *(unsigned char *)(a2 + 1096);
        *(void *)(a1 + 1088) = v277;
        swift_bridgeObjectRetain();
      }
      uint64_t v278 = *(void *)(a2 + 1104);
      if (v278 == 1)
      {
        long long v279 = *(_OWORD *)(a2 + 1104);
        *(_OWORD *)(a1 + 1113) = *(_OWORD *)(a2 + 1113);
        *(_OWORD *)(a1 + 1104) = v279;
      }
      else
      {
        *(void *)(a1 + 1104) = v278;
        *(unsigned char *)(a1 + 1112) = *(unsigned char *)(a2 + 1112);
        uint64_t v280 = *(void *)(a2 + 1120);
        *(unsigned char *)(a1 + 1128) = *(unsigned char *)(a2 + 1128);
        *(void *)(a1 + 1120) = v280;
        swift_bridgeObjectRetain();
      }
      uint64_t v281 = *(void *)(a2 + 1136);
      if (v281 == 1)
      {
        long long v282 = *(_OWORD *)(a2 + 1136);
        *(_OWORD *)(a1 + 1145) = *(_OWORD *)(a2 + 1145);
        *(_OWORD *)(a1 + 1136) = v282;
      }
      else
      {
        *(void *)(a1 + 1136) = v281;
        *(unsigned char *)(a1 + 1144) = *(unsigned char *)(a2 + 1144);
        uint64_t v283 = *(void *)(a2 + 1152);
        *(unsigned char *)(a1 + 1160) = *(unsigned char *)(a2 + 1160);
        *(void *)(a1 + 1152) = v283;
        swift_bridgeObjectRetain();
      }
      uint64_t v284 = *(void *)(a2 + 1168);
      if (v284 == 1)
      {
        long long v285 = *(_OWORD *)(a2 + 1168);
        *(_OWORD *)(a1 + 1177) = *(_OWORD *)(a2 + 1177);
        *(_OWORD *)(a1 + 1168) = v285;
      }
      else
      {
        *(void *)(a1 + 1168) = v284;
        *(unsigned char *)(a1 + 1176) = *(unsigned char *)(a2 + 1176);
        uint64_t v286 = *(void *)(a2 + 1184);
        *(unsigned char *)(a1 + 1192) = *(unsigned char *)(a2 + 1192);
        *(void *)(a1 + 1184) = v286;
        swift_bridgeObjectRetain();
      }
      uint64_t v287 = *(void *)(a2 + 1200);
      if (v287 == 1)
      {
        long long v288 = *(_OWORD *)(a2 + 1200);
        *(_OWORD *)(a1 + 1209) = *(_OWORD *)(a2 + 1209);
        *(_OWORD *)(a1 + 1200) = v288;
      }
      else
      {
        *(void *)(a1 + 1200) = v287;
        *(unsigned char *)(a1 + 1208) = *(unsigned char *)(a2 + 1208);
        uint64_t v289 = *(void *)(a2 + 1216);
        *(unsigned char *)(a1 + 1224) = *(unsigned char *)(a2 + 1224);
        *(void *)(a1 + 1216) = v289;
        swift_bridgeObjectRetain();
      }
      uint64_t v290 = *(void *)(a2 + 1232);
      if (v290 == 1)
      {
        long long v291 = *(_OWORD *)(a2 + 1232);
        *(_OWORD *)(a1 + 1241) = *(_OWORD *)(a2 + 1241);
        *(_OWORD *)(a1 + 1232) = v291;
      }
      else
      {
        *(void *)(a1 + 1232) = v290;
        *(unsigned char *)(a1 + 1240) = *(unsigned char *)(a2 + 1240);
        uint64_t v292 = *(void *)(a2 + 1248);
        *(unsigned char *)(a1 + 1256) = *(unsigned char *)(a2 + 1256);
        *(void *)(a1 + 1248) = v292;
        swift_bridgeObjectRetain();
      }
      uint64_t v293 = *(void *)(a2 + 1264);
      if (v293 == 1)
      {
        long long v294 = *(_OWORD *)(a2 + 1264);
        *(_OWORD *)(a1 + 1273) = *(_OWORD *)(a2 + 1273);
        *(_OWORD *)(a1 + 1264) = v294;
      }
      else
      {
        *(void *)(a1 + 1264) = v293;
        *(unsigned char *)(a1 + 1272) = *(unsigned char *)(a2 + 1272);
        uint64_t v295 = *(void *)(a2 + 1280);
        *(unsigned char *)(a1 + 1288) = *(unsigned char *)(a2 + 1288);
        *(void *)(a1 + 1280) = v295;
        swift_bridgeObjectRetain();
      }
      uint64_t v296 = *(void *)(a2 + 1296);
      if (v296 == 1)
      {
        long long v297 = *(_OWORD *)(a2 + 1296);
        *(_OWORD *)(a1 + 1305) = *(_OWORD *)(a2 + 1305);
        *(_OWORD *)(a1 + 1296) = v297;
      }
      else
      {
        *(void *)(a1 + 1296) = v296;
        *(unsigned char *)(a1 + 1304) = *(unsigned char *)(a2 + 1304);
        uint64_t v298 = *(void *)(a2 + 1312);
        *(unsigned char *)(a1 + 1320) = *(unsigned char *)(a2 + 1320);
        *(void *)(a1 + 1312) = v298;
        swift_bridgeObjectRetain();
      }
      uint64_t v299 = *(void *)(a2 + 1328);
      if (v299 == 1)
      {
        long long v300 = *(_OWORD *)(a2 + 1328);
        *(_OWORD *)(a1 + 1337) = *(_OWORD *)(a2 + 1337);
        *(_OWORD *)(a1 + 1328) = v300;
      }
      else
      {
        *(void *)(a1 + 1328) = v299;
        *(unsigned char *)(a1 + 1336) = *(unsigned char *)(a2 + 1336);
        uint64_t v301 = *(void *)(a2 + 1344);
        *(unsigned char *)(a1 + 1352) = *(unsigned char *)(a2 + 1352);
        *(void *)(a1 + 1344) = v301;
        swift_bridgeObjectRetain();
      }
      uint64_t v302 = *(void *)(a2 + 1360);
      if (v302 == 1)
      {
        long long v303 = *(_OWORD *)(a2 + 1360);
        *(_OWORD *)(a1 + 1369) = *(_OWORD *)(a2 + 1369);
        *(_OWORD *)(a1 + 1360) = v303;
      }
      else
      {
        *(void *)(a1 + 1360) = v302;
        *(unsigned char *)(a1 + 1368) = *(unsigned char *)(a2 + 1368);
        uint64_t v304 = *(void *)(a2 + 1376);
        *(unsigned char *)(a1 + 1384) = *(unsigned char *)(a2 + 1384);
        *(void *)(a1 + 1376) = v304;
        swift_bridgeObjectRetain();
      }
      uint64_t v305 = *(void *)(a2 + 1392);
      if (v305 == 1)
      {
        long long v306 = *(_OWORD *)(a2 + 1392);
        *(_OWORD *)(a1 + 1401) = *(_OWORD *)(a2 + 1401);
        *(_OWORD *)(a1 + 1392) = v306;
      }
      else
      {
        *(void *)(a1 + 1392) = v305;
        *(unsigned char *)(a1 + 1400) = *(unsigned char *)(a2 + 1400);
        uint64_t v307 = *(void *)(a2 + 1408);
        *(unsigned char *)(a1 + 1416) = *(unsigned char *)(a2 + 1416);
        *(void *)(a1 + 1408) = v307;
        swift_bridgeObjectRetain();
      }
      uint64_t v308 = *(void *)(a2 + 1424);
      if (v308 == 1)
      {
        long long v309 = *(_OWORD *)(a2 + 1424);
        *(_OWORD *)(a1 + 1433) = *(_OWORD *)(a2 + 1433);
        *(_OWORD *)(a1 + 1424) = v309;
      }
      else
      {
        *(void *)(a1 + 1424) = v308;
        *(unsigned char *)(a1 + 1432) = *(unsigned char *)(a2 + 1432);
        uint64_t v310 = *(void *)(a2 + 1440);
        *(unsigned char *)(a1 + 1448) = *(unsigned char *)(a2 + 1448);
        *(void *)(a1 + 1440) = v310;
        swift_bridgeObjectRetain();
      }
      uint64_t v311 = *(void *)(a2 + 1456);
      if (v311 == 1)
      {
        long long v312 = *(_OWORD *)(a2 + 1456);
        *(_OWORD *)(a1 + 1465) = *(_OWORD *)(a2 + 1465);
        *(_OWORD *)(a1 + 1456) = v312;
      }
      else
      {
        *(void *)(a1 + 1456) = v311;
        *(unsigned char *)(a1 + 1464) = *(unsigned char *)(a2 + 1464);
        uint64_t v313 = *(void *)(a2 + 1472);
        *(unsigned char *)(a1 + 1480) = *(unsigned char *)(a2 + 1480);
        *(void *)(a1 + 1472) = v313;
        swift_bridgeObjectRetain();
      }
      uint64_t v314 = *(void *)(a2 + 1488);
      if (v314 == 1)
      {
        long long v315 = *(_OWORD *)(a2 + 1488);
        *(_OWORD *)(a1 + 1497) = *(_OWORD *)(a2 + 1497);
        *(_OWORD *)(a1 + 1488) = v315;
      }
      else
      {
        *(void *)(a1 + 1488) = v314;
        *(unsigned char *)(a1 + 1496) = *(unsigned char *)(a2 + 1496);
        uint64_t v316 = *(void *)(a2 + 1504);
        *(unsigned char *)(a1 + 1512) = *(unsigned char *)(a2 + 1512);
        *(void *)(a1 + 1504) = v316;
        swift_bridgeObjectRetain();
      }
      uint64_t v317 = *(void *)(a2 + 1520);
      if (v317 == 1)
      {
        long long v318 = *(_OWORD *)(a2 + 1520);
        *(_OWORD *)(a1 + 1529) = *(_OWORD *)(a2 + 1529);
        *(_OWORD *)(a1 + 1520) = v318;
      }
      else
      {
        *(void *)(a1 + 1520) = v317;
        *(unsigned char *)(a1 + 1528) = *(unsigned char *)(a2 + 1528);
        uint64_t v319 = *(void *)(a2 + 1536);
        *(unsigned char *)(a1 + 1544) = *(unsigned char *)(a2 + 1544);
        *(void *)(a1 + 1536) = v319;
        swift_bridgeObjectRetain();
      }
      uint64_t v320 = *(void *)(a2 + 1552);
      if (v320 == 1)
      {
        long long v321 = *(_OWORD *)(a2 + 1552);
        *(_OWORD *)(a1 + 1561) = *(_OWORD *)(a2 + 1561);
        *(_OWORD *)(a1 + 1552) = v321;
      }
      else
      {
        *(void *)(a1 + 1552) = v320;
        *(unsigned char *)(a1 + 1560) = *(unsigned char *)(a2 + 1560);
        uint64_t v322 = *(void *)(a2 + 1568);
        *(unsigned char *)(a1 + 1576) = *(unsigned char *)(a2 + 1576);
        *(void *)(a1 + 1568) = v322;
        swift_bridgeObjectRetain();
      }
      uint64_t v323 = *(void *)(a2 + 1584);
      if (v323 == 1)
      {
        long long v324 = *(_OWORD *)(a2 + 1584);
        *(_OWORD *)(a1 + 1593) = *(_OWORD *)(a2 + 1593);
        *(_OWORD *)(a1 + 1584) = v324;
      }
      else
      {
        *(void *)(a1 + 1584) = v323;
        *(unsigned char *)(a1 + 1592) = *(unsigned char *)(a2 + 1592);
        uint64_t v325 = *(void *)(a2 + 1600);
        *(unsigned char *)(a1 + 1608) = *(unsigned char *)(a2 + 1608);
        *(void *)(a1 + 1600) = v325;
        swift_bridgeObjectRetain();
      }
      long long v326 = *(_OWORD *)(a2 + 1616);
      *(unsigned char *)(a1 + 1632) = *(unsigned char *)(a2 + 1632);
      *(_OWORD *)(a1 + 1616) = v326;
      long long v327 = *(_OWORD *)(a2 + 1640);
      *(unsigned char *)(a1 + 1656) = *(unsigned char *)(a2 + 1656);
      *(_OWORD *)(a1 + 1640) = v327;
      *(unsigned char *)(a1 + 1657) = *(unsigned char *)(a2 + 1657);
      *(unsigned char *)(a1 + 1658) = *(unsigned char *)(a2 + 1658);
      *(unsigned char *)(a1 + 1659) = *(unsigned char *)(a2 + 1659);
      *(unsigned char *)(a1 + 1660) = *(unsigned char *)(a2 + 1660);
      *(unsigned char *)(a1 + 1661) = *(unsigned char *)(a2 + 1661);
      *(unsigned char *)(a1 + 1662) = *(unsigned char *)(a2 + 1662);
      *(unsigned char *)(a1 + 1663) = *(unsigned char *)(a2 + 1663);
      *(void *)(a1 + 1664) = *(void *)(a2 + 1664);
      *(void *)(a1 + 1672) = *(void *)(a2 + 1672);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_495;
    }
LABEL_254:
    memcpy((void *)(a1 + 848), (const void *)(a2 + 848), 0x340uLL);
    goto LABEL_495;
  }
  if (v251 == 1)
  {
    sub_10009F560((void *)(a1 + 848));
    goto LABEL_254;
  }
  uint64_t v253 = *(void *)v250;
  if (*(void *)v249 == 1)
  {
    if (v253 == 1)
    {
      long long v254 = *v250;
      *(_OWORD *)(a1 + 857) = *(_OWORD *)(a2 + 857);
      *uint64_t v249 = v254;
    }
    else
    {
      *(void *)(a1 + 848) = v253;
      *(unsigned char *)(a1 + 856) = *(unsigned char *)(a2 + 856);
      uint64_t v328 = *(void *)(a2 + 864);
      *(unsigned char *)(a1 + 872) = *(unsigned char *)(a2 + 872);
      *(void *)(a1 + 864) = v328;
      swift_bridgeObjectRetain();
    }
  }
  else if (v253 == 1)
  {
    sub_10009F534(a1 + 848);
    long long v258 = *(_OWORD *)(a2 + 857);
    *uint64_t v249 = *v250;
    *(_OWORD *)(a1 + 857) = v258;
  }
  else
  {
    *(void *)(a1 + 848) = v253;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 856) = v4[576];
    uint64_t v329 = *(void *)(a2 + 864);
    *(unsigned char *)(a1 + 872) = *(unsigned char *)(a2 + 872);
    *(void *)(a1 + 864) = v329;
  }
  char v330 = (long long *)(a1 + 880);
  uint64_t v331 = (long long *)(a2 + 880);
  uint64_t v332 = *(void *)(a2 + 880);
  if (*(void *)(a1 + 880) == 1)
  {
    if (v332 == 1)
    {
      long long v333 = *v331;
      *(_OWORD *)(a1 + 889) = *(_OWORD *)(a2 + 889);
      *char v330 = v333;
    }
    else
    {
      *(void *)(a1 + 880) = v332;
      *(unsigned char *)(a1 + 888) = *(unsigned char *)(a2 + 888);
      uint64_t v335 = *(void *)(a2 + 896);
      *(unsigned char *)(a1 + 904) = *(unsigned char *)(a2 + 904);
      *(void *)(a1 + 896) = v335;
      swift_bridgeObjectRetain();
    }
  }
  else if (v332 == 1)
  {
    sub_10009F534(a1 + 880);
    long long v334 = *(_OWORD *)(a2 + 889);
    *char v330 = *v331;
    *(_OWORD *)(a1 + 889) = v334;
  }
  else
  {
    *(void *)(a1 + 880) = v332;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 888) = v4[608];
    uint64_t v336 = *(void *)(a2 + 896);
    *(unsigned char *)(a1 + 904) = *(unsigned char *)(a2 + 904);
    *(void *)(a1 + 896) = v336;
  }
  v337 = (long long *)(a1 + 912);
  v338 = (long long *)(a2 + 912);
  uint64_t v339 = *(void *)(a2 + 912);
  if (*(void *)(a1 + 912) == 1)
  {
    if (v339 == 1)
    {
      long long v340 = *v338;
      *(_OWORD *)(a1 + 921) = *(_OWORD *)(a2 + 921);
      long long *v337 = v340;
    }
    else
    {
      *(void *)(a1 + 912) = v339;
      *(unsigned char *)(a1 + 920) = *(unsigned char *)(a2 + 920);
      uint64_t v342 = *(void *)(a2 + 928);
      *(unsigned char *)(a1 + 936) = *(unsigned char *)(a2 + 936);
      *(void *)(a1 + 928) = v342;
      swift_bridgeObjectRetain();
    }
  }
  else if (v339 == 1)
  {
    sub_10009F534(a1 + 912);
    long long v341 = *(_OWORD *)(a2 + 921);
    long long *v337 = *v338;
    *(_OWORD *)(a1 + 921) = v341;
  }
  else
  {
    *(void *)(a1 + 912) = v339;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 920) = v4[640];
    uint64_t v343 = *(void *)(a2 + 928);
    *(unsigned char *)(a1 + 936) = *(unsigned char *)(a2 + 936);
    *(void *)(a1 + 928) = v343;
  }
  v344 = (long long *)(a1 + 944);
  v345 = (long long *)(a2 + 944);
  uint64_t v346 = *(void *)(a2 + 944);
  if (*(void *)(a1 + 944) == 1)
  {
    if (v346 == 1)
    {
      long long v347 = *v345;
      *(_OWORD *)(a1 + 953) = *(_OWORD *)(a2 + 953);
      long long *v344 = v347;
    }
    else
    {
      *(void *)(a1 + 944) = v346;
      *(unsigned char *)(a1 + 952) = *(unsigned char *)(a2 + 952);
      uint64_t v349 = *(void *)(a2 + 960);
      *(unsigned char *)(a1 + 968) = *(unsigned char *)(a2 + 968);
      *(void *)(a1 + 960) = v349;
      swift_bridgeObjectRetain();
    }
  }
  else if (v346 == 1)
  {
    sub_10009F534(a1 + 944);
    long long v348 = *(_OWORD *)(a2 + 953);
    long long *v344 = *v345;
    *(_OWORD *)(a1 + 953) = v348;
  }
  else
  {
    *(void *)(a1 + 944) = v346;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 952) = v4[672];
    uint64_t v350 = *(void *)(a2 + 960);
    *(unsigned char *)(a1 + 968) = *(unsigned char *)(a2 + 968);
    *(void *)(a1 + 960) = v350;
  }
  v351 = (long long *)(a1 + 976);
  v352 = (long long *)(a2 + 976);
  uint64_t v353 = *(void *)(a2 + 976);
  if (*(void *)(a1 + 976) == 1)
  {
    if (v353 == 1)
    {
      long long v354 = *v352;
      *(_OWORD *)(a1 + 985) = *(_OWORD *)(a2 + 985);
      long long *v351 = v354;
    }
    else
    {
      *(void *)(a1 + 976) = v353;
      *(unsigned char *)(a1 + 984) = *(unsigned char *)(a2 + 984);
      uint64_t v356 = *(void *)(a2 + 992);
      *(unsigned char *)(a1 + 1000) = *(unsigned char *)(a2 + 1000);
      *(void *)(a1 + 992) = v356;
      swift_bridgeObjectRetain();
    }
  }
  else if (v353 == 1)
  {
    sub_10009F534(a1 + 976);
    long long v355 = *(_OWORD *)(a2 + 985);
    long long *v351 = *v352;
    *(_OWORD *)(a1 + 985) = v355;
  }
  else
  {
    *(void *)(a1 + 976) = v353;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 984) = v4[704];
    uint64_t v357 = *(void *)(a2 + 992);
    *(unsigned char *)(a1 + 1000) = *(unsigned char *)(a2 + 1000);
    *(void *)(a1 + 992) = v357;
  }
  v358 = (long long *)(a1 + 1008);
  v359 = (long long *)(a2 + 1008);
  uint64_t v360 = *(void *)(a2 + 1008);
  if (*(void *)(a1 + 1008) == 1)
  {
    if (v360 == 1)
    {
      long long v361 = *v359;
      *(_OWORD *)(a1 + 1017) = *(_OWORD *)(a2 + 1017);
      long long *v358 = v361;
    }
    else
    {
      *(void *)(a1 + 1008) = v360;
      *(unsigned char *)(a1 + 1016) = *(unsigned char *)(a2 + 1016);
      uint64_t v363 = *(void *)(a2 + 1024);
      *(unsigned char *)(a1 + 1032) = *(unsigned char *)(a2 + 1032);
      *(void *)(a1 + 1024) = v363;
      swift_bridgeObjectRetain();
    }
  }
  else if (v360 == 1)
  {
    sub_10009F534(a1 + 1008);
    long long v362 = *(_OWORD *)(a2 + 1017);
    long long *v358 = *v359;
    *(_OWORD *)(a1 + 1017) = v362;
  }
  else
  {
    *(void *)(a1 + 1008) = v360;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 1016) = v4[736];
    uint64_t v364 = *(void *)(a2 + 1024);
    *(unsigned char *)(a1 + 1032) = *(unsigned char *)(a2 + 1032);
    *(void *)(a1 + 1024) = v364;
  }
  v365 = (long long *)(a1 + 1040);
  v366 = (long long *)(a2 + 1040);
  uint64_t v367 = *(void *)(a2 + 1040);
  if (*(void *)(a1 + 1040) == 1)
  {
    if (v367 == 1)
    {
      long long v368 = *v366;
      *(_OWORD *)(a1 + 1049) = *(_OWORD *)(a2 + 1049);
      long long *v365 = v368;
    }
    else
    {
      *(void *)(a1 + 1040) = v367;
      *(unsigned char *)(a1 + 1048) = *(unsigned char *)(a2 + 1048);
      uint64_t v370 = *(void *)(a2 + 1056);
      *(unsigned char *)(a1 + 1064) = *(unsigned char *)(a2 + 1064);
      *(void *)(a1 + 1056) = v370;
      swift_bridgeObjectRetain();
    }
  }
  else if (v367 == 1)
  {
    sub_10009F534(a1 + 1040);
    long long v369 = *(_OWORD *)(a2 + 1049);
    long long *v365 = *v366;
    *(_OWORD *)(a1 + 1049) = v369;
  }
  else
  {
    *(void *)(a1 + 1040) = v367;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 1048) = v4[768];
    uint64_t v371 = *(void *)(a2 + 1056);
    *(unsigned char *)(a1 + 1064) = *(unsigned char *)(a2 + 1064);
    *(void *)(a1 + 1056) = v371;
  }
  v372 = (long long *)(a1 + 1072);
  v373 = (long long *)(a2 + 1072);
  uint64_t v374 = *(void *)(a2 + 1072);
  if (*(void *)(a1 + 1072) == 1)
  {
    if (v374 == 1)
    {
      long long v375 = *v373;
      *(_OWORD *)(a1 + 1081) = *(_OWORD *)(a2 + 1081);
      long long *v372 = v375;
    }
    else
    {
      *(void *)(a1 + 1072) = v374;
      *(unsigned char *)(a1 + 1080) = *(unsigned char *)(a2 + 1080);
      uint64_t v377 = *(void *)(a2 + 1088);
      *(unsigned char *)(a1 + 1096) = *(unsigned char *)(a2 + 1096);
      *(void *)(a1 + 1088) = v377;
      swift_bridgeObjectRetain();
    }
  }
  else if (v374 == 1)
  {
    sub_10009F534(a1 + 1072);
    long long v376 = *(_OWORD *)(a2 + 1081);
    long long *v372 = *v373;
    *(_OWORD *)(a1 + 1081) = v376;
  }
  else
  {
    *(void *)(a1 + 1072) = v374;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 1080) = v4[800];
    uint64_t v378 = *(void *)(a2 + 1088);
    *(unsigned char *)(a1 + 1096) = *(unsigned char *)(a2 + 1096);
    *(void *)(a1 + 1088) = v378;
  }
  v379 = (long long *)(a1 + 1104);
  v380 = (long long *)(a2 + 1104);
  uint64_t v381 = *(void *)(a2 + 1104);
  if (*(void *)(a1 + 1104) == 1)
  {
    if (v381 == 1)
    {
      long long v382 = *v380;
      *(_OWORD *)(a1 + 1113) = *(_OWORD *)(a2 + 1113);
      long long *v379 = v382;
    }
    else
    {
      *(void *)(a1 + 1104) = v381;
      *(unsigned char *)(a1 + 1112) = *(unsigned char *)(a2 + 1112);
      uint64_t v384 = *(void *)(a2 + 1120);
      *(unsigned char *)(a1 + 1128) = *(unsigned char *)(a2 + 1128);
      *(void *)(a1 + 1120) = v384;
      swift_bridgeObjectRetain();
    }
  }
  else if (v381 == 1)
  {
    sub_10009F534(a1 + 1104);
    long long v383 = *(_OWORD *)(a2 + 1113);
    long long *v379 = *v380;
    *(_OWORD *)(a1 + 1113) = v383;
  }
  else
  {
    *(void *)(a1 + 1104) = v381;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 1112) = v4[832];
    uint64_t v385 = *(void *)(a2 + 1120);
    *(unsigned char *)(a1 + 1128) = *(unsigned char *)(a2 + 1128);
    *(void *)(a1 + 1120) = v385;
  }
  v386 = (long long *)(a1 + 1136);
  v387 = (long long *)(a2 + 1136);
  uint64_t v388 = *(void *)(a2 + 1136);
  if (*(void *)(a1 + 1136) == 1)
  {
    if (v388 == 1)
    {
      long long v389 = *v387;
      *(_OWORD *)(a1 + 1145) = *(_OWORD *)(a2 + 1145);
      long long *v386 = v389;
    }
    else
    {
      *(void *)(a1 + 1136) = v388;
      *(unsigned char *)(a1 + 1144) = *(unsigned char *)(a2 + 1144);
      uint64_t v391 = *(void *)(a2 + 1152);
      *(unsigned char *)(a1 + 1160) = *(unsigned char *)(a2 + 1160);
      *(void *)(a1 + 1152) = v391;
      swift_bridgeObjectRetain();
    }
  }
  else if (v388 == 1)
  {
    sub_10009F534(a1 + 1136);
    long long v390 = *(_OWORD *)(a2 + 1145);
    long long *v386 = *v387;
    *(_OWORD *)(a1 + 1145) = v390;
  }
  else
  {
    *(void *)(a1 + 1136) = v388;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 1144) = v4[864];
    uint64_t v392 = *(void *)(a2 + 1152);
    *(unsigned char *)(a1 + 1160) = *(unsigned char *)(a2 + 1160);
    *(void *)(a1 + 1152) = v392;
  }
  v393 = (long long *)(a1 + 1168);
  v394 = (long long *)(a2 + 1168);
  uint64_t v395 = *(void *)(a2 + 1168);
  if (*(void *)(a1 + 1168) == 1)
  {
    if (v395 == 1)
    {
      long long v396 = *v394;
      *(_OWORD *)(a1 + 1177) = *(_OWORD *)(a2 + 1177);
      long long *v393 = v396;
    }
    else
    {
      *(void *)(a1 + 1168) = v395;
      *(unsigned char *)(a1 + 1176) = *(unsigned char *)(a2 + 1176);
      uint64_t v398 = *(void *)(a2 + 1184);
      *(unsigned char *)(a1 + 1192) = *(unsigned char *)(a2 + 1192);
      *(void *)(a1 + 1184) = v398;
      swift_bridgeObjectRetain();
    }
  }
  else if (v395 == 1)
  {
    sub_10009F534(a1 + 1168);
    long long v397 = *(_OWORD *)(a2 + 1177);
    long long *v393 = *v394;
    *(_OWORD *)(a1 + 1177) = v397;
  }
  else
  {
    *(void *)(a1 + 1168) = v395;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 1176) = v4[896];
    uint64_t v399 = *(void *)(a2 + 1184);
    *(unsigned char *)(a1 + 1192) = *(unsigned char *)(a2 + 1192);
    *(void *)(a1 + 1184) = v399;
  }
  v400 = (long long *)(a1 + 1200);
  v401 = (long long *)(a2 + 1200);
  uint64_t v402 = *(void *)(a2 + 1200);
  if (*(void *)(a1 + 1200) == 1)
  {
    if (v402 == 1)
    {
      long long v403 = *v401;
      *(_OWORD *)(a1 + 1209) = *(_OWORD *)(a2 + 1209);
      long long *v400 = v403;
    }
    else
    {
      *(void *)(a1 + 1200) = v402;
      *(unsigned char *)(a1 + 1208) = *(unsigned char *)(a2 + 1208);
      uint64_t v405 = *(void *)(a2 + 1216);
      *(unsigned char *)(a1 + 1224) = *(unsigned char *)(a2 + 1224);
      *(void *)(a1 + 1216) = v405;
      swift_bridgeObjectRetain();
    }
  }
  else if (v402 == 1)
  {
    sub_10009F534(a1 + 1200);
    long long v404 = *(_OWORD *)(a2 + 1209);
    long long *v400 = *v401;
    *(_OWORD *)(a1 + 1209) = v404;
  }
  else
  {
    *(void *)(a1 + 1200) = v402;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 1208) = v4[928];
    uint64_t v406 = *(void *)(a2 + 1216);
    *(unsigned char *)(a1 + 1224) = *(unsigned char *)(a2 + 1224);
    *(void *)(a1 + 1216) = v406;
  }
  v407 = (long long *)(a1 + 1232);
  v408 = (long long *)(a2 + 1232);
  uint64_t v409 = *(void *)(a2 + 1232);
  if (*(void *)(a1 + 1232) == 1)
  {
    if (v409 == 1)
    {
      long long v410 = *v408;
      *(_OWORD *)(a1 + 1241) = *(_OWORD *)(a2 + 1241);
      long long *v407 = v410;
    }
    else
    {
      *(void *)(a1 + 1232) = v409;
      *(unsigned char *)(a1 + 1240) = *(unsigned char *)(a2 + 1240);
      uint64_t v412 = *(void *)(a2 + 1248);
      *(unsigned char *)(a1 + 1256) = *(unsigned char *)(a2 + 1256);
      *(void *)(a1 + 1248) = v412;
      swift_bridgeObjectRetain();
    }
  }
  else if (v409 == 1)
  {
    sub_10009F534(a1 + 1232);
    long long v411 = *(_OWORD *)(a2 + 1241);
    long long *v407 = *v408;
    *(_OWORD *)(a1 + 1241) = v411;
  }
  else
  {
    *(void *)(a1 + 1232) = v409;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 1240) = v4[960];
    uint64_t v413 = *(void *)(a2 + 1248);
    *(unsigned char *)(a1 + 1256) = *(unsigned char *)(a2 + 1256);
    *(void *)(a1 + 1248) = v413;
  }
  v414 = (long long *)(a1 + 1264);
  v415 = (long long *)(a2 + 1264);
  uint64_t v416 = *(void *)(a2 + 1264);
  if (*(void *)(a1 + 1264) == 1)
  {
    if (v416 == 1)
    {
      long long v417 = *v415;
      *(_OWORD *)(a1 + 1273) = *(_OWORD *)(a2 + 1273);
      long long *v414 = v417;
    }
    else
    {
      *(void *)(a1 + 1264) = v416;
      *(unsigned char *)(a1 + 1272) = *(unsigned char *)(a2 + 1272);
      uint64_t v419 = *(void *)(a2 + 1280);
      *(unsigned char *)(a1 + 1288) = *(unsigned char *)(a2 + 1288);
      *(void *)(a1 + 1280) = v419;
      swift_bridgeObjectRetain();
    }
  }
  else if (v416 == 1)
  {
    sub_10009F534(a1 + 1264);
    long long v418 = *(_OWORD *)(a2 + 1273);
    long long *v414 = *v415;
    *(_OWORD *)(a1 + 1273) = v418;
  }
  else
  {
    *(void *)(a1 + 1264) = v416;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 1272) = v4[992];
    uint64_t v420 = *(void *)(a2 + 1280);
    *(unsigned char *)(a1 + 1288) = *(unsigned char *)(a2 + 1288);
    *(void *)(a1 + 1280) = v420;
  }
  v421 = (long long *)(a1 + 1296);
  v422 = (long long *)(a2 + 1296);
  uint64_t v423 = *(void *)(a2 + 1296);
  if (*(void *)(a1 + 1296) == 1)
  {
    if (v423 == 1)
    {
      long long v424 = *v422;
      *(_OWORD *)(a1 + 1305) = *(_OWORD *)(a2 + 1305);
      long long *v421 = v424;
    }
    else
    {
      *(void *)(a1 + 1296) = v423;
      *(unsigned char *)(a1 + 1304) = *(unsigned char *)(a2 + 1304);
      uint64_t v426 = *(void *)(a2 + 1312);
      *(unsigned char *)(a1 + 1320) = *(unsigned char *)(a2 + 1320);
      *(void *)(a1 + 1312) = v426;
      swift_bridgeObjectRetain();
    }
  }
  else if (v423 == 1)
  {
    sub_10009F534(a1 + 1296);
    long long v425 = *(_OWORD *)(a2 + 1305);
    long long *v421 = *v422;
    *(_OWORD *)(a1 + 1305) = v425;
  }
  else
  {
    *(void *)(a1 + 1296) = v423;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 1304) = v4[1024];
    uint64_t v427 = *(void *)(a2 + 1312);
    *(unsigned char *)(a1 + 1320) = *(unsigned char *)(a2 + 1320);
    *(void *)(a1 + 1312) = v427;
  }
  v428 = (long long *)(a1 + 1328);
  v429 = (long long *)(a2 + 1328);
  uint64_t v430 = *(void *)(a2 + 1328);
  if (*(void *)(a1 + 1328) == 1)
  {
    if (v430 == 1)
    {
      long long v431 = *v429;
      *(_OWORD *)(a1 + 1337) = *(_OWORD *)(a2 + 1337);
      long long *v428 = v431;
    }
    else
    {
      *(void *)(a1 + 1328) = v430;
      *(unsigned char *)(a1 + 1336) = *(unsigned char *)(a2 + 1336);
      uint64_t v433 = *(void *)(a2 + 1344);
      *(unsigned char *)(a1 + 1352) = *(unsigned char *)(a2 + 1352);
      *(void *)(a1 + 1344) = v433;
      swift_bridgeObjectRetain();
    }
  }
  else if (v430 == 1)
  {
    sub_10009F534(a1 + 1328);
    long long v432 = *(_OWORD *)(a2 + 1337);
    long long *v428 = *v429;
    *(_OWORD *)(a1 + 1337) = v432;
  }
  else
  {
    *(void *)(a1 + 1328) = v430;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 1336) = v4[1056];
    uint64_t v434 = *(void *)(a2 + 1344);
    *(unsigned char *)(a1 + 1352) = *(unsigned char *)(a2 + 1352);
    *(void *)(a1 + 1344) = v434;
  }
  v435 = (long long *)(a1 + 1360);
  v436 = (long long *)(a2 + 1360);
  uint64_t v437 = *(void *)(a2 + 1360);
  if (*(void *)(a1 + 1360) == 1)
  {
    if (v437 == 1)
    {
      long long v438 = *v436;
      *(_OWORD *)(a1 + 1369) = *(_OWORD *)(a2 + 1369);
      long long *v435 = v438;
    }
    else
    {
      *(void *)(a1 + 1360) = v437;
      *(unsigned char *)(a1 + 1368) = *(unsigned char *)(a2 + 1368);
      uint64_t v440 = *(void *)(a2 + 1376);
      *(unsigned char *)(a1 + 1384) = *(unsigned char *)(a2 + 1384);
      *(void *)(a1 + 1376) = v440;
      swift_bridgeObjectRetain();
    }
  }
  else if (v437 == 1)
  {
    sub_10009F534(a1 + 1360);
    long long v439 = *(_OWORD *)(a2 + 1369);
    long long *v435 = *v436;
    *(_OWORD *)(a1 + 1369) = v439;
  }
  else
  {
    *(void *)(a1 + 1360) = v437;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 1368) = v4[1088];
    uint64_t v441 = *(void *)(a2 + 1376);
    *(unsigned char *)(a1 + 1384) = *(unsigned char *)(a2 + 1384);
    *(void *)(a1 + 1376) = v441;
  }
  v442 = (long long *)(a1 + 1392);
  v443 = (long long *)(a2 + 1392);
  uint64_t v444 = *(void *)(a2 + 1392);
  if (*(void *)(a1 + 1392) == 1)
  {
    if (v444 == 1)
    {
      long long v445 = *v443;
      *(_OWORD *)(a1 + 1401) = *(_OWORD *)(a2 + 1401);
      long long *v442 = v445;
    }
    else
    {
      *(void *)(a1 + 1392) = v444;
      *(unsigned char *)(a1 + 1400) = *(unsigned char *)(a2 + 1400);
      uint64_t v447 = *(void *)(a2 + 1408);
      *(unsigned char *)(a1 + 1416) = *(unsigned char *)(a2 + 1416);
      *(void *)(a1 + 1408) = v447;
      swift_bridgeObjectRetain();
    }
  }
  else if (v444 == 1)
  {
    sub_10009F534(a1 + 1392);
    long long v446 = *(_OWORD *)(a2 + 1401);
    long long *v442 = *v443;
    *(_OWORD *)(a1 + 1401) = v446;
  }
  else
  {
    *(void *)(a1 + 1392) = v444;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 1400) = v4[1120];
    uint64_t v448 = *(void *)(a2 + 1408);
    *(unsigned char *)(a1 + 1416) = *(unsigned char *)(a2 + 1416);
    *(void *)(a1 + 1408) = v448;
  }
  v449 = (long long *)(a1 + 1424);
  v450 = (long long *)(a2 + 1424);
  uint64_t v451 = *(void *)(a2 + 1424);
  if (*(void *)(a1 + 1424) == 1)
  {
    if (v451 == 1)
    {
      long long v452 = *v450;
      *(_OWORD *)(a1 + 1433) = *(_OWORD *)(a2 + 1433);
      long long *v449 = v452;
    }
    else
    {
      *(void *)(a1 + 1424) = v451;
      *(unsigned char *)(a1 + 1432) = *(unsigned char *)(a2 + 1432);
      uint64_t v454 = *(void *)(a2 + 1440);
      *(unsigned char *)(a1 + 1448) = *(unsigned char *)(a2 + 1448);
      *(void *)(a1 + 1440) = v454;
      swift_bridgeObjectRetain();
    }
  }
  else if (v451 == 1)
  {
    sub_10009F534(a1 + 1424);
    long long v453 = *(_OWORD *)(a2 + 1433);
    long long *v449 = *v450;
    *(_OWORD *)(a1 + 1433) = v453;
  }
  else
  {
    *(void *)(a1 + 1424) = v451;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 1432) = v4[1152];
    uint64_t v455 = *(void *)(a2 + 1440);
    *(unsigned char *)(a1 + 1448) = *(unsigned char *)(a2 + 1448);
    *(void *)(a1 + 1440) = v455;
  }
  v456 = (long long *)(a1 + 1456);
  v457 = (long long *)(a2 + 1456);
  uint64_t v458 = *(void *)(a2 + 1456);
  if (*(void *)(a1 + 1456) == 1)
  {
    if (v458 == 1)
    {
      long long v459 = *v457;
      *(_OWORD *)(a1 + 1465) = *(_OWORD *)(a2 + 1465);
      long long *v456 = v459;
    }
    else
    {
      *(void *)(a1 + 1456) = v458;
      *(unsigned char *)(a1 + 1464) = *(unsigned char *)(a2 + 1464);
      uint64_t v461 = *(void *)(a2 + 1472);
      *(unsigned char *)(a1 + 1480) = *(unsigned char *)(a2 + 1480);
      *(void *)(a1 + 1472) = v461;
      swift_bridgeObjectRetain();
    }
  }
  else if (v458 == 1)
  {
    sub_10009F534(a1 + 1456);
    long long v460 = *(_OWORD *)(a2 + 1465);
    long long *v456 = *v457;
    *(_OWORD *)(a1 + 1465) = v460;
  }
  else
  {
    *(void *)(a1 + 1456) = v458;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 1464) = v4[1184];
    uint64_t v462 = *(void *)(a2 + 1472);
    *(unsigned char *)(a1 + 1480) = *(unsigned char *)(a2 + 1480);
    *(void *)(a1 + 1472) = v462;
  }
  v463 = (long long *)(a1 + 1488);
  v464 = (long long *)(a2 + 1488);
  uint64_t v465 = *(void *)(a2 + 1488);
  if (*(void *)(a1 + 1488) == 1)
  {
    if (v465 == 1)
    {
      long long v466 = *v464;
      *(_OWORD *)(a1 + 1497) = *(_OWORD *)(a2 + 1497);
      long long *v463 = v466;
    }
    else
    {
      *(void *)(a1 + 1488) = v465;
      *(unsigned char *)(a1 + 1496) = *(unsigned char *)(a2 + 1496);
      uint64_t v468 = *(void *)(a2 + 1504);
      *(unsigned char *)(a1 + 1512) = *(unsigned char *)(a2 + 1512);
      *(void *)(a1 + 1504) = v468;
      swift_bridgeObjectRetain();
    }
  }
  else if (v465 == 1)
  {
    sub_10009F534(a1 + 1488);
    long long v467 = *(_OWORD *)(a2 + 1497);
    long long *v463 = *v464;
    *(_OWORD *)(a1 + 1497) = v467;
  }
  else
  {
    *(void *)(a1 + 1488) = v465;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 1496) = v4[1216];
    uint64_t v469 = *(void *)(a2 + 1504);
    *(unsigned char *)(a1 + 1512) = *(unsigned char *)(a2 + 1512);
    *(void *)(a1 + 1504) = v469;
  }
  v470 = (long long *)(a1 + 1520);
  v471 = (long long *)(a2 + 1520);
  uint64_t v472 = *(void *)(a2 + 1520);
  if (*(void *)(a1 + 1520) == 1)
  {
    if (v472 == 1)
    {
      long long v473 = *v471;
      *(_OWORD *)(a1 + 1529) = *(_OWORD *)(a2 + 1529);
      long long *v470 = v473;
    }
    else
    {
      *(void *)(a1 + 1520) = v472;
      *(unsigned char *)(a1 + 1528) = *(unsigned char *)(a2 + 1528);
      uint64_t v475 = *(void *)(a2 + 1536);
      *(unsigned char *)(a1 + 1544) = *(unsigned char *)(a2 + 1544);
      *(void *)(a1 + 1536) = v475;
      swift_bridgeObjectRetain();
    }
  }
  else if (v472 == 1)
  {
    sub_10009F534(a1 + 1520);
    long long v474 = *(_OWORD *)(a2 + 1529);
    long long *v470 = *v471;
    *(_OWORD *)(a1 + 1529) = v474;
  }
  else
  {
    *(void *)(a1 + 1520) = v472;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 1528) = v4[1248];
    uint64_t v476 = *(void *)(a2 + 1536);
    *(unsigned char *)(a1 + 1544) = *(unsigned char *)(a2 + 1544);
    *(void *)(a1 + 1536) = v476;
  }
  v477 = (long long *)(a1 + 1552);
  v478 = (long long *)(a2 + 1552);
  uint64_t v479 = *(void *)(a2 + 1552);
  if (*(void *)(a1 + 1552) == 1)
  {
    if (v479 == 1)
    {
      long long v480 = *v478;
      *(_OWORD *)(a1 + 1561) = *(_OWORD *)(a2 + 1561);
      long long *v477 = v480;
    }
    else
    {
      *(void *)(a1 + 1552) = v479;
      *(unsigned char *)(a1 + 1560) = *(unsigned char *)(a2 + 1560);
      uint64_t v482 = *(void *)(a2 + 1568);
      *(unsigned char *)(a1 + 1576) = *(unsigned char *)(a2 + 1576);
      *(void *)(a1 + 1568) = v482;
      swift_bridgeObjectRetain();
    }
  }
  else if (v479 == 1)
  {
    sub_10009F534(a1 + 1552);
    long long v481 = *(_OWORD *)(a2 + 1561);
    long long *v477 = *v478;
    *(_OWORD *)(a1 + 1561) = v481;
  }
  else
  {
    *(void *)(a1 + 1552) = v479;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 1560) = v4[1280];
    uint64_t v483 = *(void *)(a2 + 1568);
    *(unsigned char *)(a1 + 1576) = *(unsigned char *)(a2 + 1576);
    *(void *)(a1 + 1568) = v483;
  }
  v484 = (long long *)(a1 + 1584);
  v485 = (long long *)(a2 + 1584);
  uint64_t v486 = *(void *)(a2 + 1584);
  if (*(void *)(a1 + 1584) == 1)
  {
    if (v486 == 1)
    {
      long long v487 = *v485;
      *(_OWORD *)(a1 + 1593) = *(_OWORD *)(a2 + 1593);
      long long *v484 = v487;
    }
    else
    {
      *(void *)(a1 + 1584) = v486;
      *(unsigned char *)(a1 + 1592) = *(unsigned char *)(a2 + 1592);
      uint64_t v489 = *(void *)(a2 + 1600);
      *(unsigned char *)(a1 + 1608) = *(unsigned char *)(a2 + 1608);
      *(void *)(a1 + 1600) = v489;
      swift_bridgeObjectRetain();
    }
  }
  else if (v486 == 1)
  {
    sub_10009F534(a1 + 1584);
    long long v488 = *(_OWORD *)(a2 + 1593);
    long long *v484 = *v485;
    *(_OWORD *)(a1 + 1593) = v488;
  }
  else
  {
    *(void *)(a1 + 1584) = v486;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 1592) = v4[1312];
    uint64_t v490 = *(void *)(a2 + 1600);
    *(unsigned char *)(a1 + 1608) = *(unsigned char *)(a2 + 1608);
    *(void *)(a1 + 1600) = v490;
  }
  long long v491 = *(_OWORD *)(a2 + 1616);
  *(unsigned char *)(a1 + 1632) = *(unsigned char *)(a2 + 1632);
  *(_OWORD *)(a1 + 1616) = v491;
  long long v492 = *(_OWORD *)(a2 + 1640);
  *(unsigned char *)(a1 + 1656) = *(unsigned char *)(a2 + 1656);
  *(_OWORD *)(a1 + 1640) = v492;
  *(unsigned char *)(a1 + 1657) = *(unsigned char *)(a2 + 1657);
  *(unsigned char *)(a1 + 1658) = *(unsigned char *)(a2 + 1658);
  *(unsigned char *)(a1 + 1659) = *(unsigned char *)(a2 + 1659);
  *(unsigned char *)(a1 + 1660) = *(unsigned char *)(a2 + 1660);
  *(unsigned char *)(a1 + 1661) = *(unsigned char *)(a2 + 1661);
  *(unsigned char *)(a1 + 1662) = *(unsigned char *)(a2 + 1662);
  *(unsigned char *)(a1 + 1663) = *(unsigned char *)(a2 + 1663);
  *(void *)(a1 + 1664) = *(void *)(a2 + 1664);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1672) = *(void *)(a2 + 1672);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_495:
  v493 = (long long *)(a1 + 1680);
  v494 = (long long *)(a2 + 1680);
  uint64_t v495 = *(void *)(a2 + 2496);
  if (*(void *)(a1 + 2496) == 1)
  {
    if (v495 != 1)
    {
      if (*(void *)v494 == 1)
      {
        long long v496 = *v494;
        *(_OWORD *)(a1 + 1689) = *(_OWORD *)(a2 + 1689);
        long long *v493 = v496;
      }
      else
      {
        *(void *)(a1 + 1680) = *(void *)v494;
        *(unsigned char *)(a1 + 1688) = *(unsigned char *)(a2 + 1688);
        uint64_t v499 = *(void *)(a2 + 1696);
        *(unsigned char *)(a1 + 1704) = *(unsigned char *)(a2 + 1704);
        *(void *)(a1 + 1696) = v499;
        swift_bridgeObjectRetain();
      }
      uint64_t v500 = *(void *)(a2 + 1712);
      if (v500 == 1)
      {
        long long v501 = *(_OWORD *)(a2 + 1712);
        *(_OWORD *)(a1 + 1721) = *(_OWORD *)(a2 + 1721);
        *(_OWORD *)(a1 + 1712) = v501;
      }
      else
      {
        *(void *)(a1 + 1712) = v500;
        *(unsigned char *)(a1 + 1720) = *(unsigned char *)(a2 + 1720);
        uint64_t v503 = *(void *)(a2 + 1728);
        *(unsigned char *)(a1 + 1736) = *(unsigned char *)(a2 + 1736);
        *(void *)(a1 + 1728) = v503;
        swift_bridgeObjectRetain();
      }
      uint64_t v504 = *(void *)(a2 + 1744);
      if (v504 == 1)
      {
        long long v505 = *(_OWORD *)(a2 + 1744);
        *(_OWORD *)(a1 + 1753) = *(_OWORD *)(a2 + 1753);
        *(_OWORD *)(a1 + 1744) = v505;
      }
      else
      {
        *(void *)(a1 + 1744) = v504;
        *(unsigned char *)(a1 + 1752) = *(unsigned char *)(a2 + 1752);
        uint64_t v506 = *(void *)(a2 + 1760);
        *(unsigned char *)(a1 + 1768) = *(unsigned char *)(a2 + 1768);
        *(void *)(a1 + 1760) = v506;
        swift_bridgeObjectRetain();
      }
      uint64_t v507 = *(void *)(a2 + 1776);
      if (v507 == 1)
      {
        long long v508 = *(_OWORD *)(a2 + 1776);
        *(_OWORD *)(a1 + 1785) = *(_OWORD *)(a2 + 1785);
        *(_OWORD *)(a1 + 1776) = v508;
      }
      else
      {
        *(void *)(a1 + 1776) = v507;
        *(unsigned char *)(a1 + 1784) = *(unsigned char *)(a2 + 1784);
        uint64_t v509 = *(void *)(a2 + 1792);
        *(unsigned char *)(a1 + 1800) = *(unsigned char *)(a2 + 1800);
        *(void *)(a1 + 1792) = v509;
        swift_bridgeObjectRetain();
      }
      uint64_t v510 = *(void *)(a2 + 1808);
      if (v510 == 1)
      {
        long long v511 = *(_OWORD *)(a2 + 1808);
        *(_OWORD *)(a1 + 1817) = *(_OWORD *)(a2 + 1817);
        *(_OWORD *)(a1 + 1808) = v511;
      }
      else
      {
        *(void *)(a1 + 1808) = v510;
        *(unsigned char *)(a1 + 1816) = *(unsigned char *)(a2 + 1816);
        uint64_t v512 = *(void *)(a2 + 1824);
        *(unsigned char *)(a1 + 1832) = *(unsigned char *)(a2 + 1832);
        *(void *)(a1 + 1824) = v512;
        swift_bridgeObjectRetain();
      }
      uint64_t v513 = *(void *)(a2 + 1840);
      if (v513 == 1)
      {
        long long v514 = *(_OWORD *)(a2 + 1840);
        *(_OWORD *)(a1 + 1849) = *(_OWORD *)(a2 + 1849);
        *(_OWORD *)(a1 + 1840) = v514;
      }
      else
      {
        *(void *)(a1 + 1840) = v513;
        *(unsigned char *)(a1 + 1848) = *(unsigned char *)(a2 + 1848);
        uint64_t v515 = *(void *)(a2 + 1856);
        *(unsigned char *)(a1 + 1864) = *(unsigned char *)(a2 + 1864);
        *(void *)(a1 + 1856) = v515;
        swift_bridgeObjectRetain();
      }
      uint64_t v516 = *(void *)(a2 + 1872);
      if (v516 == 1)
      {
        long long v517 = *(_OWORD *)(a2 + 1872);
        *(_OWORD *)(a1 + 1881) = *(_OWORD *)(a2 + 1881);
        *(_OWORD *)(a1 + 1872) = v517;
      }
      else
      {
        *(void *)(a1 + 1872) = v516;
        *(unsigned char *)(a1 + 1880) = *(unsigned char *)(a2 + 1880);
        uint64_t v518 = *(void *)(a2 + 1888);
        *(unsigned char *)(a1 + 1896) = *(unsigned char *)(a2 + 1896);
        *(void *)(a1 + 1888) = v518;
        swift_bridgeObjectRetain();
      }
      uint64_t v519 = *(void *)(a2 + 1904);
      if (v519 == 1)
      {
        long long v520 = *(_OWORD *)(a2 + 1904);
        *(_OWORD *)(a1 + 1913) = *(_OWORD *)(a2 + 1913);
        *(_OWORD *)(a1 + 1904) = v520;
      }
      else
      {
        *(void *)(a1 + 1904) = v519;
        *(unsigned char *)(a1 + 1912) = *(unsigned char *)(a2 + 1912);
        uint64_t v521 = *(void *)(a2 + 1920);
        *(unsigned char *)(a1 + 1928) = *(unsigned char *)(a2 + 1928);
        *(void *)(a1 + 1920) = v521;
        swift_bridgeObjectRetain();
      }
      uint64_t v522 = *(void *)(a2 + 1936);
      if (v522 == 1)
      {
        long long v523 = *(_OWORD *)(a2 + 1936);
        *(_OWORD *)(a1 + 1945) = *(_OWORD *)(a2 + 1945);
        *(_OWORD *)(a1 + 1936) = v523;
      }
      else
      {
        *(void *)(a1 + 1936) = v522;
        *(unsigned char *)(a1 + 1944) = *(unsigned char *)(a2 + 1944);
        uint64_t v524 = *(void *)(a2 + 1952);
        *(unsigned char *)(a1 + 1960) = *(unsigned char *)(a2 + 1960);
        *(void *)(a1 + 1952) = v524;
        swift_bridgeObjectRetain();
      }
      uint64_t v525 = *(void *)(a2 + 1968);
      if (v525 == 1)
      {
        long long v526 = *(_OWORD *)(a2 + 1968);
        *(_OWORD *)(a1 + 1977) = *(_OWORD *)(a2 + 1977);
        *(_OWORD *)(a1 + 1968) = v526;
      }
      else
      {
        *(void *)(a1 + 1968) = v525;
        *(unsigned char *)(a1 + 1976) = *(unsigned char *)(a2 + 1976);
        uint64_t v527 = *(void *)(a2 + 1984);
        *(unsigned char *)(a1 + 1992) = *(unsigned char *)(a2 + 1992);
        *(void *)(a1 + 1984) = v527;
        swift_bridgeObjectRetain();
      }
      uint64_t v528 = *(void *)(a2 + 2000);
      if (v528 == 1)
      {
        long long v529 = *(_OWORD *)(a2 + 2000);
        *(_OWORD *)(a1 + 2009) = *(_OWORD *)(a2 + 2009);
        *(_OWORD *)(a1 + 2000) = v529;
      }
      else
      {
        *(void *)(a1 + 2000) = v528;
        *(unsigned char *)(a1 + 2008) = *(unsigned char *)(a2 + 2008);
        uint64_t v530 = *(void *)(a2 + 2016);
        *(unsigned char *)(a1 + 2024) = *(unsigned char *)(a2 + 2024);
        *(void *)(a1 + 2016) = v530;
        swift_bridgeObjectRetain();
      }
      uint64_t v531 = *(void *)(a2 + 2032);
      if (v531 == 1)
      {
        long long v532 = *(_OWORD *)(a2 + 2032);
        *(_OWORD *)(a1 + 2041) = *(_OWORD *)(a2 + 2041);
        *(_OWORD *)(a1 + 2032) = v532;
      }
      else
      {
        *(void *)(a1 + 2032) = v531;
        *(unsigned char *)(a1 + 2040) = *(unsigned char *)(a2 + 2040);
        uint64_t v533 = *(void *)(a2 + 2048);
        *(unsigned char *)(a1 + 2056) = *(unsigned char *)(a2 + 2056);
        *(void *)(a1 + 2048) = v533;
        swift_bridgeObjectRetain();
      }
      uint64_t v534 = *(void *)(a2 + 2064);
      if (v534 == 1)
      {
        long long v535 = *(_OWORD *)(a2 + 2064);
        *(_OWORD *)(a1 + 2073) = *(_OWORD *)(a2 + 2073);
        *(_OWORD *)(a1 + 2064) = v535;
      }
      else
      {
        *(void *)(a1 + 2064) = v534;
        *(unsigned char *)(a1 + 2072) = *(unsigned char *)(a2 + 2072);
        uint64_t v536 = *(void *)(a2 + 2080);
        *(unsigned char *)(a1 + 2088) = *(unsigned char *)(a2 + 2088);
        *(void *)(a1 + 2080) = v536;
        swift_bridgeObjectRetain();
      }
      uint64_t v537 = *(void *)(a2 + 2096);
      if (v537 == 1)
      {
        long long v538 = *(_OWORD *)(a2 + 2096);
        *(_OWORD *)(a1 + 2105) = *(_OWORD *)(a2 + 2105);
        *(_OWORD *)(a1 + 2096) = v538;
      }
      else
      {
        *(void *)(a1 + 2096) = v537;
        *(unsigned char *)(a1 + 2104) = *(unsigned char *)(a2 + 2104);
        uint64_t v539 = *(void *)(a2 + 2112);
        *(unsigned char *)(a1 + 2120) = *(unsigned char *)(a2 + 2120);
        *(void *)(a1 + 2112) = v539;
        swift_bridgeObjectRetain();
      }
      uint64_t v540 = *(void *)(a2 + 2128);
      if (v540 == 1)
      {
        long long v541 = *(_OWORD *)(a2 + 2128);
        *(_OWORD *)(a1 + 2137) = *(_OWORD *)(a2 + 2137);
        *(_OWORD *)(a1 + 2128) = v541;
      }
      else
      {
        *(void *)(a1 + 2128) = v540;
        *(unsigned char *)(a1 + 2136) = *(unsigned char *)(a2 + 2136);
        uint64_t v542 = *(void *)(a2 + 2144);
        *(unsigned char *)(a1 + 2152) = *(unsigned char *)(a2 + 2152);
        *(void *)(a1 + 2144) = v542;
        swift_bridgeObjectRetain();
      }
      uint64_t v543 = *(void *)(a2 + 2160);
      if (v543 == 1)
      {
        long long v544 = *(_OWORD *)(a2 + 2160);
        *(_OWORD *)(a1 + 2169) = *(_OWORD *)(a2 + 2169);
        *(_OWORD *)(a1 + 2160) = v544;
      }
      else
      {
        *(void *)(a1 + 2160) = v543;
        *(unsigned char *)(a1 + 2168) = *(unsigned char *)(a2 + 2168);
        uint64_t v545 = *(void *)(a2 + 2176);
        *(unsigned char *)(a1 + 2184) = *(unsigned char *)(a2 + 2184);
        *(void *)(a1 + 2176) = v545;
        swift_bridgeObjectRetain();
      }
      uint64_t v546 = *(void *)(a2 + 2192);
      if (v546 == 1)
      {
        long long v547 = *(_OWORD *)(a2 + 2192);
        *(_OWORD *)(a1 + 2201) = *(_OWORD *)(a2 + 2201);
        *(_OWORD *)(a1 + 2192) = v547;
      }
      else
      {
        *(void *)(a1 + 2192) = v546;
        *(unsigned char *)(a1 + 2200) = *(unsigned char *)(a2 + 2200);
        uint64_t v548 = *(void *)(a2 + 2208);
        *(unsigned char *)(a1 + 2216) = *(unsigned char *)(a2 + 2216);
        *(void *)(a1 + 2208) = v548;
        swift_bridgeObjectRetain();
      }
      uint64_t v549 = *(void *)(a2 + 2224);
      if (v549 == 1)
      {
        long long v550 = *(_OWORD *)(a2 + 2224);
        *(_OWORD *)(a1 + 2233) = *(_OWORD *)(a2 + 2233);
        *(_OWORD *)(a1 + 2224) = v550;
      }
      else
      {
        *(void *)(a1 + 2224) = v549;
        *(unsigned char *)(a1 + 2232) = *(unsigned char *)(a2 + 2232);
        uint64_t v551 = *(void *)(a2 + 2240);
        *(unsigned char *)(a1 + 2248) = *(unsigned char *)(a2 + 2248);
        *(void *)(a1 + 2240) = v551;
        swift_bridgeObjectRetain();
      }
      uint64_t v552 = *(void *)(a2 + 2256);
      if (v552 == 1)
      {
        long long v553 = *(_OWORD *)(a2 + 2256);
        *(_OWORD *)(a1 + 2265) = *(_OWORD *)(a2 + 2265);
        *(_OWORD *)(a1 + 2256) = v553;
      }
      else
      {
        *(void *)(a1 + 2256) = v552;
        *(unsigned char *)(a1 + 2264) = *(unsigned char *)(a2 + 2264);
        uint64_t v554 = *(void *)(a2 + 2272);
        *(unsigned char *)(a1 + 2280) = *(unsigned char *)(a2 + 2280);
        *(void *)(a1 + 2272) = v554;
        swift_bridgeObjectRetain();
      }
      uint64_t v555 = *(void *)(a2 + 2288);
      if (v555 == 1)
      {
        long long v556 = *(_OWORD *)(a2 + 2288);
        *(_OWORD *)(a1 + 2297) = *(_OWORD *)(a2 + 2297);
        *(_OWORD *)(a1 + 2288) = v556;
      }
      else
      {
        *(void *)(a1 + 2288) = v555;
        *(unsigned char *)(a1 + 2296) = *(unsigned char *)(a2 + 2296);
        uint64_t v557 = *(void *)(a2 + 2304);
        *(unsigned char *)(a1 + 2312) = *(unsigned char *)(a2 + 2312);
        *(void *)(a1 + 2304) = v557;
        swift_bridgeObjectRetain();
      }
      uint64_t v558 = *(void *)(a2 + 2320);
      if (v558 == 1)
      {
        long long v559 = *(_OWORD *)(a2 + 2320);
        *(_OWORD *)(a1 + 2329) = *(_OWORD *)(a2 + 2329);
        *(_OWORD *)(a1 + 2320) = v559;
      }
      else
      {
        *(void *)(a1 + 2320) = v558;
        *(unsigned char *)(a1 + 2328) = *(unsigned char *)(a2 + 2328);
        uint64_t v560 = *(void *)(a2 + 2336);
        *(unsigned char *)(a1 + 2344) = *(unsigned char *)(a2 + 2344);
        *(void *)(a1 + 2336) = v560;
        swift_bridgeObjectRetain();
      }
      uint64_t v561 = *(void *)(a2 + 2352);
      if (v561 == 1)
      {
        long long v562 = *(_OWORD *)(a2 + 2352);
        *(_OWORD *)(a1 + 2361) = *(_OWORD *)(a2 + 2361);
        *(_OWORD *)(a1 + 2352) = v562;
      }
      else
      {
        *(void *)(a1 + 2352) = v561;
        *(unsigned char *)(a1 + 2360) = *(unsigned char *)(a2 + 2360);
        uint64_t v563 = *(void *)(a2 + 2368);
        *(unsigned char *)(a1 + 2376) = *(unsigned char *)(a2 + 2376);
        *(void *)(a1 + 2368) = v563;
        swift_bridgeObjectRetain();
      }
      uint64_t v564 = *(void *)(a2 + 2384);
      if (v564 == 1)
      {
        long long v565 = *(_OWORD *)(a2 + 2384);
        *(_OWORD *)(a1 + 2393) = *(_OWORD *)(a2 + 2393);
        *(_OWORD *)(a1 + 2384) = v565;
      }
      else
      {
        *(void *)(a1 + 2384) = v564;
        *(unsigned char *)(a1 + 2392) = *(unsigned char *)(a2 + 2392);
        uint64_t v566 = *(void *)(a2 + 2400);
        *(unsigned char *)(a1 + 2408) = *(unsigned char *)(a2 + 2408);
        *(void *)(a1 + 2400) = v566;
        swift_bridgeObjectRetain();
      }
      uint64_t v567 = *(void *)(a2 + 2416);
      if (v567 == 1)
      {
        long long v568 = *(_OWORD *)(a2 + 2416);
        *(_OWORD *)(a1 + 2425) = *(_OWORD *)(a2 + 2425);
        *(_OWORD *)(a1 + 2416) = v568;
      }
      else
      {
        *(void *)(a1 + 2416) = v567;
        *(unsigned char *)(a1 + 2424) = *(unsigned char *)(a2 + 2424);
        uint64_t v569 = *(void *)(a2 + 2432);
        *(unsigned char *)(a1 + 2440) = *(unsigned char *)(a2 + 2440);
        *(void *)(a1 + 2432) = v569;
        swift_bridgeObjectRetain();
      }
      long long v570 = *(_OWORD *)(a2 + 2448);
      *(unsigned char *)(a1 + 2464) = *(unsigned char *)(a2 + 2464);
      *(_OWORD *)(a1 + 2448) = v570;
      long long v571 = *(_OWORD *)(a2 + 2472);
      *(unsigned char *)(a1 + 2488) = *(unsigned char *)(a2 + 2488);
      *(_OWORD *)(a1 + 2472) = v571;
      *(unsigned char *)(a1 + 2489) = *(unsigned char *)(a2 + 2489);
      *(unsigned char *)(a1 + 2490) = *(unsigned char *)(a2 + 2490);
      *(unsigned char *)(a1 + 2491) = *(unsigned char *)(a2 + 2491);
      *(unsigned char *)(a1 + 2492) = *(unsigned char *)(a2 + 2492);
      *(unsigned char *)(a1 + 2493) = *(unsigned char *)(a2 + 2493);
      *(unsigned char *)(a1 + 2494) = *(unsigned char *)(a2 + 2494);
      *(unsigned char *)(a1 + 2495) = *(unsigned char *)(a2 + 2495);
      *(void *)(a1 + 2496) = *(void *)(a2 + 2496);
      *(void *)(a1 + 2504) = *(void *)(a2 + 2504);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_742;
    }
LABEL_501:
    memcpy((void *)(a1 + 1680), (const void *)(a2 + 1680), 0x340uLL);
    goto LABEL_742;
  }
  if (v495 == 1)
  {
    sub_10009F560((void *)(a1 + 1680));
    goto LABEL_501;
  }
  uint64_t v497 = *(void *)v494;
  if (*(void *)v493 == 1)
  {
    if (v497 == 1)
    {
      long long v498 = *v494;
      *(_OWORD *)(a1 + 1689) = *(_OWORD *)(a2 + 1689);
      long long *v493 = v498;
    }
    else
    {
      *(void *)(a1 + 1680) = v497;
      *(unsigned char *)(a1 + 1688) = *(unsigned char *)(a2 + 1688);
      uint64_t v572 = *(void *)(a2 + 1696);
      *(unsigned char *)(a1 + 1704) = *(unsigned char *)(a2 + 1704);
      *(void *)(a1 + 1696) = v572;
      swift_bridgeObjectRetain();
    }
  }
  else if (v497 == 1)
  {
    sub_10009F534(a1 + 1680);
    long long v502 = *(_OWORD *)(a2 + 1689);
    long long *v493 = *v494;
    *(_OWORD *)(a1 + 1689) = v502;
  }
  else
  {
    *(void *)(a1 + 1680) = v497;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 1688) = v4[1408];
    uint64_t v573 = *(void *)(a2 + 1696);
    *(unsigned char *)(a1 + 1704) = *(unsigned char *)(a2 + 1704);
    *(void *)(a1 + 1696) = v573;
  }
  v574 = (long long *)(a1 + 1712);
  v575 = (long long *)(a2 + 1712);
  uint64_t v576 = *(void *)(a2 + 1712);
  if (*(void *)(a1 + 1712) == 1)
  {
    if (v576 == 1)
    {
      long long v577 = *v575;
      *(_OWORD *)(a1 + 1721) = *(_OWORD *)(a2 + 1721);
      long long *v574 = v577;
    }
    else
    {
      *(void *)(a1 + 1712) = v576;
      *(unsigned char *)(a1 + 1720) = *(unsigned char *)(a2 + 1720);
      uint64_t v579 = *(void *)(a2 + 1728);
      *(unsigned char *)(a1 + 1736) = *(unsigned char *)(a2 + 1736);
      *(void *)(a1 + 1728) = v579;
      swift_bridgeObjectRetain();
    }
  }
  else if (v576 == 1)
  {
    sub_10009F534(a1 + 1712);
    long long v578 = *(_OWORD *)(a2 + 1721);
    long long *v574 = *v575;
    *(_OWORD *)(a1 + 1721) = v578;
  }
  else
  {
    *(void *)(a1 + 1712) = v576;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 1720) = v4[1440];
    uint64_t v580 = *(void *)(a2 + 1728);
    *(unsigned char *)(a1 + 1736) = *(unsigned char *)(a2 + 1736);
    *(void *)(a1 + 1728) = v580;
  }
  v581 = (long long *)(a1 + 1744);
  v582 = (long long *)(a2 + 1744);
  uint64_t v583 = *(void *)(a2 + 1744);
  if (*(void *)(a1 + 1744) == 1)
  {
    if (v583 == 1)
    {
      long long v584 = *v582;
      *(_OWORD *)(a1 + 1753) = *(_OWORD *)(a2 + 1753);
      long long *v581 = v584;
    }
    else
    {
      *(void *)(a1 + 1744) = v583;
      *(unsigned char *)(a1 + 1752) = *(unsigned char *)(a2 + 1752);
      uint64_t v586 = *(void *)(a2 + 1760);
      *(unsigned char *)(a1 + 1768) = *(unsigned char *)(a2 + 1768);
      *(void *)(a1 + 1760) = v586;
      swift_bridgeObjectRetain();
    }
  }
  else if (v583 == 1)
  {
    sub_10009F534(a1 + 1744);
    long long v585 = *(_OWORD *)(a2 + 1753);
    long long *v581 = *v582;
    *(_OWORD *)(a1 + 1753) = v585;
  }
  else
  {
    *(void *)(a1 + 1744) = v583;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 1752) = v4[1472];
    uint64_t v587 = *(void *)(a2 + 1760);
    *(unsigned char *)(a1 + 1768) = *(unsigned char *)(a2 + 1768);
    *(void *)(a1 + 1760) = v587;
  }
  v588 = (long long *)(a1 + 1776);
  v589 = (long long *)(a2 + 1776);
  uint64_t v590 = *(void *)(a2 + 1776);
  if (*(void *)(a1 + 1776) == 1)
  {
    if (v590 == 1)
    {
      long long v591 = *v589;
      *(_OWORD *)(a1 + 1785) = *(_OWORD *)(a2 + 1785);
      long long *v588 = v591;
    }
    else
    {
      *(void *)(a1 + 1776) = v590;
      *(unsigned char *)(a1 + 1784) = *(unsigned char *)(a2 + 1784);
      uint64_t v593 = *(void *)(a2 + 1792);
      *(unsigned char *)(a1 + 1800) = *(unsigned char *)(a2 + 1800);
      *(void *)(a1 + 1792) = v593;
      swift_bridgeObjectRetain();
    }
  }
  else if (v590 == 1)
  {
    sub_10009F534(a1 + 1776);
    long long v592 = *(_OWORD *)(a2 + 1785);
    long long *v588 = *v589;
    *(_OWORD *)(a1 + 1785) = v592;
  }
  else
  {
    *(void *)(a1 + 1776) = v590;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 1784) = v4[1504];
    uint64_t v594 = *(void *)(a2 + 1792);
    *(unsigned char *)(a1 + 1800) = *(unsigned char *)(a2 + 1800);
    *(void *)(a1 + 1792) = v594;
  }
  v595 = (long long *)(a1 + 1808);
  v596 = (long long *)(a2 + 1808);
  uint64_t v597 = *(void *)(a2 + 1808);
  if (*(void *)(a1 + 1808) == 1)
  {
    if (v597 == 1)
    {
      long long v598 = *v596;
      *(_OWORD *)(a1 + 1817) = *(_OWORD *)(a2 + 1817);
      long long *v595 = v598;
    }
    else
    {
      *(void *)(a1 + 1808) = v597;
      *(unsigned char *)(a1 + 1816) = *(unsigned char *)(a2 + 1816);
      uint64_t v600 = *(void *)(a2 + 1824);
      *(unsigned char *)(a1 + 1832) = *(unsigned char *)(a2 + 1832);
      *(void *)(a1 + 1824) = v600;
      swift_bridgeObjectRetain();
    }
  }
  else if (v597 == 1)
  {
    sub_10009F534(a1 + 1808);
    long long v599 = *(_OWORD *)(a2 + 1817);
    long long *v595 = *v596;
    *(_OWORD *)(a1 + 1817) = v599;
  }
  else
  {
    *(void *)(a1 + 1808) = v597;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 1816) = v4[1536];
    uint64_t v601 = *(void *)(a2 + 1824);
    *(unsigned char *)(a1 + 1832) = *(unsigned char *)(a2 + 1832);
    *(void *)(a1 + 1824) = v601;
  }
  v602 = (long long *)(a1 + 1840);
  v603 = (long long *)(a2 + 1840);
  uint64_t v604 = *(void *)(a2 + 1840);
  if (*(void *)(a1 + 1840) == 1)
  {
    if (v604 == 1)
    {
      long long v605 = *v603;
      *(_OWORD *)(a1 + 1849) = *(_OWORD *)(a2 + 1849);
      long long *v602 = v605;
    }
    else
    {
      *(void *)(a1 + 1840) = v604;
      *(unsigned char *)(a1 + 1848) = *(unsigned char *)(a2 + 1848);
      uint64_t v607 = *(void *)(a2 + 1856);
      *(unsigned char *)(a1 + 1864) = *(unsigned char *)(a2 + 1864);
      *(void *)(a1 + 1856) = v607;
      swift_bridgeObjectRetain();
    }
  }
  else if (v604 == 1)
  {
    sub_10009F534(a1 + 1840);
    long long v606 = *(_OWORD *)(a2 + 1849);
    long long *v602 = *v603;
    *(_OWORD *)(a1 + 1849) = v606;
  }
  else
  {
    *(void *)(a1 + 1840) = v604;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 1848) = v4[1568];
    uint64_t v608 = *(void *)(a2 + 1856);
    *(unsigned char *)(a1 + 1864) = *(unsigned char *)(a2 + 1864);
    *(void *)(a1 + 1856) = v608;
  }
  v609 = (long long *)(a1 + 1872);
  v610 = (long long *)(a2 + 1872);
  uint64_t v611 = *(void *)(a2 + 1872);
  if (*(void *)(a1 + 1872) == 1)
  {
    if (v611 == 1)
    {
      long long v612 = *v610;
      *(_OWORD *)(a1 + 1881) = *(_OWORD *)(a2 + 1881);
      long long *v609 = v612;
    }
    else
    {
      *(void *)(a1 + 1872) = v611;
      *(unsigned char *)(a1 + 1880) = *(unsigned char *)(a2 + 1880);
      uint64_t v614 = *(void *)(a2 + 1888);
      *(unsigned char *)(a1 + 1896) = *(unsigned char *)(a2 + 1896);
      *(void *)(a1 + 1888) = v614;
      swift_bridgeObjectRetain();
    }
  }
  else if (v611 == 1)
  {
    sub_10009F534(a1 + 1872);
    long long v613 = *(_OWORD *)(a2 + 1881);
    long long *v609 = *v610;
    *(_OWORD *)(a1 + 1881) = v613;
  }
  else
  {
    *(void *)(a1 + 1872) = v611;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 1880) = v4[1600];
    uint64_t v615 = *(void *)(a2 + 1888);
    *(unsigned char *)(a1 + 1896) = *(unsigned char *)(a2 + 1896);
    *(void *)(a1 + 1888) = v615;
  }
  v616 = (long long *)(a1 + 1904);
  v617 = (long long *)(a2 + 1904);
  uint64_t v618 = *(void *)(a2 + 1904);
  if (*(void *)(a1 + 1904) == 1)
  {
    if (v618 == 1)
    {
      long long v619 = *v617;
      *(_OWORD *)(a1 + 1913) = *(_OWORD *)(a2 + 1913);
      long long *v616 = v619;
    }
    else
    {
      *(void *)(a1 + 1904) = v618;
      *(unsigned char *)(a1 + 1912) = *(unsigned char *)(a2 + 1912);
      uint64_t v621 = *(void *)(a2 + 1920);
      *(unsigned char *)(a1 + 1928) = *(unsigned char *)(a2 + 1928);
      *(void *)(a1 + 1920) = v621;
      swift_bridgeObjectRetain();
    }
  }
  else if (v618 == 1)
  {
    sub_10009F534(a1 + 1904);
    long long v620 = *(_OWORD *)(a2 + 1913);
    long long *v616 = *v617;
    *(_OWORD *)(a1 + 1913) = v620;
  }
  else
  {
    *(void *)(a1 + 1904) = v618;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 1912) = v4[1632];
    uint64_t v622 = *(void *)(a2 + 1920);
    *(unsigned char *)(a1 + 1928) = *(unsigned char *)(a2 + 1928);
    *(void *)(a1 + 1920) = v622;
  }
  v623 = (long long *)(a1 + 1936);
  v624 = (long long *)(a2 + 1936);
  uint64_t v625 = *(void *)(a2 + 1936);
  if (*(void *)(a1 + 1936) == 1)
  {
    if (v625 == 1)
    {
      long long v626 = *v624;
      *(_OWORD *)(a1 + 1945) = *(_OWORD *)(a2 + 1945);
      long long *v623 = v626;
    }
    else
    {
      *(void *)(a1 + 1936) = v625;
      *(unsigned char *)(a1 + 1944) = *(unsigned char *)(a2 + 1944);
      uint64_t v628 = *(void *)(a2 + 1952);
      *(unsigned char *)(a1 + 1960) = *(unsigned char *)(a2 + 1960);
      *(void *)(a1 + 1952) = v628;
      swift_bridgeObjectRetain();
    }
  }
  else if (v625 == 1)
  {
    sub_10009F534(a1 + 1936);
    long long v627 = *(_OWORD *)(a2 + 1945);
    long long *v623 = *v624;
    *(_OWORD *)(a1 + 1945) = v627;
  }
  else
  {
    *(void *)(a1 + 1936) = v625;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 1944) = v4[1664];
    uint64_t v629 = *(void *)(a2 + 1952);
    *(unsigned char *)(a1 + 1960) = *(unsigned char *)(a2 + 1960);
    *(void *)(a1 + 1952) = v629;
  }
  v630 = (long long *)(a1 + 1968);
  v631 = (long long *)(a2 + 1968);
  uint64_t v632 = *(void *)(a2 + 1968);
  if (*(void *)(a1 + 1968) == 1)
  {
    if (v632 == 1)
    {
      long long v633 = *v631;
      *(_OWORD *)(a1 + 1977) = *(_OWORD *)(a2 + 1977);
      long long *v630 = v633;
    }
    else
    {
      *(void *)(a1 + 1968) = v632;
      *(unsigned char *)(a1 + 1976) = *(unsigned char *)(a2 + 1976);
      uint64_t v635 = *(void *)(a2 + 1984);
      *(unsigned char *)(a1 + 1992) = *(unsigned char *)(a2 + 1992);
      *(void *)(a1 + 1984) = v635;
      swift_bridgeObjectRetain();
    }
  }
  else if (v632 == 1)
  {
    sub_10009F534(a1 + 1968);
    long long v634 = *(_OWORD *)(a2 + 1977);
    long long *v630 = *v631;
    *(_OWORD *)(a1 + 1977) = v634;
  }
  else
  {
    *(void *)(a1 + 1968) = v632;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 1976) = v4[1696];
    uint64_t v636 = *(void *)(a2 + 1984);
    *(unsigned char *)(a1 + 1992) = *(unsigned char *)(a2 + 1992);
    *(void *)(a1 + 1984) = v636;
  }
  v637 = (long long *)(a1 + 2000);
  v638 = (long long *)(a2 + 2000);
  uint64_t v639 = *(void *)(a2 + 2000);
  if (*(void *)(a1 + 2000) == 1)
  {
    if (v639 == 1)
    {
      long long v640 = *v638;
      *(_OWORD *)(a1 + 2009) = *(_OWORD *)(a2 + 2009);
      long long *v637 = v640;
    }
    else
    {
      *(void *)(a1 + 2000) = v639;
      *(unsigned char *)(a1 + 2008) = *(unsigned char *)(a2 + 2008);
      uint64_t v642 = *(void *)(a2 + 2016);
      *(unsigned char *)(a1 + 2024) = *(unsigned char *)(a2 + 2024);
      *(void *)(a1 + 2016) = v642;
      swift_bridgeObjectRetain();
    }
  }
  else if (v639 == 1)
  {
    sub_10009F534(a1 + 2000);
    long long v641 = *(_OWORD *)(a2 + 2009);
    long long *v637 = *v638;
    *(_OWORD *)(a1 + 2009) = v641;
  }
  else
  {
    *(void *)(a1 + 2000) = v639;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 2008) = v4[1728];
    uint64_t v643 = *(void *)(a2 + 2016);
    *(unsigned char *)(a1 + 2024) = *(unsigned char *)(a2 + 2024);
    *(void *)(a1 + 2016) = v643;
  }
  v644 = (long long *)(a1 + 2032);
  v645 = (long long *)(a2 + 2032);
  uint64_t v646 = *(void *)(a2 + 2032);
  if (*(void *)(a1 + 2032) == 1)
  {
    if (v646 == 1)
    {
      long long v647 = *v645;
      *(_OWORD *)(a1 + 2041) = *(_OWORD *)(a2 + 2041);
      long long *v644 = v647;
    }
    else
    {
      *(void *)(a1 + 2032) = v646;
      *(unsigned char *)(a1 + 2040) = *(unsigned char *)(a2 + 2040);
      uint64_t v649 = *(void *)(a2 + 2048);
      *(unsigned char *)(a1 + 2056) = *(unsigned char *)(a2 + 2056);
      *(void *)(a1 + 2048) = v649;
      swift_bridgeObjectRetain();
    }
  }
  else if (v646 == 1)
  {
    sub_10009F534(a1 + 2032);
    long long v648 = *(_OWORD *)(a2 + 2041);
    long long *v644 = *v645;
    *(_OWORD *)(a1 + 2041) = v648;
  }
  else
  {
    *(void *)(a1 + 2032) = v646;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 2040) = v4[1760];
    uint64_t v650 = *(void *)(a2 + 2048);
    *(unsigned char *)(a1 + 2056) = *(unsigned char *)(a2 + 2056);
    *(void *)(a1 + 2048) = v650;
  }
  v651 = (long long *)(a1 + 2064);
  v652 = (long long *)(a2 + 2064);
  uint64_t v653 = *(void *)(a2 + 2064);
  if (*(void *)(a1 + 2064) == 1)
  {
    if (v653 == 1)
    {
      long long v654 = *v652;
      *(_OWORD *)(a1 + 2073) = *(_OWORD *)(a2 + 2073);
      long long *v651 = v654;
    }
    else
    {
      *(void *)(a1 + 2064) = v653;
      *(unsigned char *)(a1 + 2072) = *(unsigned char *)(a2 + 2072);
      uint64_t v656 = *(void *)(a2 + 2080);
      *(unsigned char *)(a1 + 2088) = *(unsigned char *)(a2 + 2088);
      *(void *)(a1 + 2080) = v656;
      swift_bridgeObjectRetain();
    }
  }
  else if (v653 == 1)
  {
    sub_10009F534(a1 + 2064);
    long long v655 = *(_OWORD *)(a2 + 2073);
    long long *v651 = *v652;
    *(_OWORD *)(a1 + 2073) = v655;
  }
  else
  {
    *(void *)(a1 + 2064) = v653;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 2072) = v4[1792];
    uint64_t v657 = *(void *)(a2 + 2080);
    *(unsigned char *)(a1 + 2088) = *(unsigned char *)(a2 + 2088);
    *(void *)(a1 + 2080) = v657;
  }
  v658 = (long long *)(a1 + 2096);
  v659 = (long long *)(a2 + 2096);
  uint64_t v660 = *(void *)(a2 + 2096);
  if (*(void *)(a1 + 2096) == 1)
  {
    if (v660 == 1)
    {
      long long v661 = *v659;
      *(_OWORD *)(a1 + 2105) = *(_OWORD *)(a2 + 2105);
      long long *v658 = v661;
    }
    else
    {
      *(void *)(a1 + 2096) = v660;
      *(unsigned char *)(a1 + 2104) = *(unsigned char *)(a2 + 2104);
      uint64_t v663 = *(void *)(a2 + 2112);
      *(unsigned char *)(a1 + 2120) = *(unsigned char *)(a2 + 2120);
      *(void *)(a1 + 2112) = v663;
      swift_bridgeObjectRetain();
    }
  }
  else if (v660 == 1)
  {
    sub_10009F534(a1 + 2096);
    long long v662 = *(_OWORD *)(a2 + 2105);
    long long *v658 = *v659;
    *(_OWORD *)(a1 + 2105) = v662;
  }
  else
  {
    *(void *)(a1 + 2096) = v660;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 2104) = v4[1824];
    uint64_t v664 = *(void *)(a2 + 2112);
    *(unsigned char *)(a1 + 2120) = *(unsigned char *)(a2 + 2120);
    *(void *)(a1 + 2112) = v664;
  }
  v665 = (long long *)(a1 + 2128);
  v666 = (long long *)(a2 + 2128);
  uint64_t v667 = *(void *)(a2 + 2128);
  if (*(void *)(a1 + 2128) == 1)
  {
    if (v667 == 1)
    {
      long long v668 = *v666;
      *(_OWORD *)(a1 + 2137) = *(_OWORD *)(a2 + 2137);
      long long *v665 = v668;
    }
    else
    {
      *(void *)(a1 + 2128) = v667;
      *(unsigned char *)(a1 + 2136) = *(unsigned char *)(a2 + 2136);
      uint64_t v670 = *(void *)(a2 + 2144);
      *(unsigned char *)(a1 + 2152) = *(unsigned char *)(a2 + 2152);
      *(void *)(a1 + 2144) = v670;
      swift_bridgeObjectRetain();
    }
  }
  else if (v667 == 1)
  {
    sub_10009F534(a1 + 2128);
    long long v669 = *(_OWORD *)(a2 + 2137);
    long long *v665 = *v666;
    *(_OWORD *)(a1 + 2137) = v669;
  }
  else
  {
    *(void *)(a1 + 2128) = v667;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 2136) = v4[1856];
    uint64_t v671 = *(void *)(a2 + 2144);
    *(unsigned char *)(a1 + 2152) = *(unsigned char *)(a2 + 2152);
    *(void *)(a1 + 2144) = v671;
  }
  v672 = (long long *)(a1 + 2160);
  v673 = (long long *)(a2 + 2160);
  uint64_t v674 = *(void *)(a2 + 2160);
  if (*(void *)(a1 + 2160) == 1)
  {
    if (v674 == 1)
    {
      long long v675 = *v673;
      *(_OWORD *)(a1 + 2169) = *(_OWORD *)(a2 + 2169);
      long long *v672 = v675;
    }
    else
    {
      *(void *)(a1 + 2160) = v674;
      *(unsigned char *)(a1 + 2168) = *(unsigned char *)(a2 + 2168);
      uint64_t v677 = *(void *)(a2 + 2176);
      *(unsigned char *)(a1 + 2184) = *(unsigned char *)(a2 + 2184);
      *(void *)(a1 + 2176) = v677;
      swift_bridgeObjectRetain();
    }
  }
  else if (v674 == 1)
  {
    sub_10009F534(a1 + 2160);
    long long v676 = *(_OWORD *)(a2 + 2169);
    long long *v672 = *v673;
    *(_OWORD *)(a1 + 2169) = v676;
  }
  else
  {
    *(void *)(a1 + 2160) = v674;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 2168) = v4[1888];
    uint64_t v678 = *(void *)(a2 + 2176);
    *(unsigned char *)(a1 + 2184) = *(unsigned char *)(a2 + 2184);
    *(void *)(a1 + 2176) = v678;
  }
  v679 = (long long *)(a1 + 2192);
  v680 = (long long *)(a2 + 2192);
  uint64_t v681 = *(void *)(a2 + 2192);
  if (*(void *)(a1 + 2192) == 1)
  {
    if (v681 == 1)
    {
      long long v682 = *v680;
      *(_OWORD *)(a1 + 2201) = *(_OWORD *)(a2 + 2201);
      long long *v679 = v682;
    }
    else
    {
      *(void *)(a1 + 2192) = v681;
      *(unsigned char *)(a1 + 2200) = *(unsigned char *)(a2 + 2200);
      uint64_t v684 = *(void *)(a2 + 2208);
      *(unsigned char *)(a1 + 2216) = *(unsigned char *)(a2 + 2216);
      *(void *)(a1 + 2208) = v684;
      swift_bridgeObjectRetain();
    }
  }
  else if (v681 == 1)
  {
    sub_10009F534(a1 + 2192);
    long long v683 = *(_OWORD *)(a2 + 2201);
    long long *v679 = *v680;
    *(_OWORD *)(a1 + 2201) = v683;
  }
  else
  {
    *(void *)(a1 + 2192) = v681;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 2200) = v4[1920];
    uint64_t v685 = *(void *)(a2 + 2208);
    *(unsigned char *)(a1 + 2216) = *(unsigned char *)(a2 + 2216);
    *(void *)(a1 + 2208) = v685;
  }
  v686 = (long long *)(a1 + 2224);
  v687 = (long long *)(a2 + 2224);
  uint64_t v688 = *(void *)(a2 + 2224);
  if (*(void *)(a1 + 2224) == 1)
  {
    if (v688 == 1)
    {
      long long v689 = *v687;
      *(_OWORD *)(a1 + 2233) = *(_OWORD *)(a2 + 2233);
      long long *v686 = v689;
    }
    else
    {
      *(void *)(a1 + 2224) = v688;
      *(unsigned char *)(a1 + 2232) = *(unsigned char *)(a2 + 2232);
      uint64_t v691 = *(void *)(a2 + 2240);
      *(unsigned char *)(a1 + 2248) = *(unsigned char *)(a2 + 2248);
      *(void *)(a1 + 2240) = v691;
      swift_bridgeObjectRetain();
    }
  }
  else if (v688 == 1)
  {
    sub_10009F534(a1 + 2224);
    long long v690 = *(_OWORD *)(a2 + 2233);
    long long *v686 = *v687;
    *(_OWORD *)(a1 + 2233) = v690;
  }
  else
  {
    *(void *)(a1 + 2224) = v688;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 2232) = v4[1952];
    uint64_t v692 = *(void *)(a2 + 2240);
    *(unsigned char *)(a1 + 2248) = *(unsigned char *)(a2 + 2248);
    *(void *)(a1 + 2240) = v692;
  }
  v693 = (long long *)(a1 + 2256);
  v694 = (long long *)(a2 + 2256);
  uint64_t v695 = *(void *)(a2 + 2256);
  if (*(void *)(a1 + 2256) == 1)
  {
    if (v695 == 1)
    {
      long long v696 = *v694;
      *(_OWORD *)(a1 + 2265) = *(_OWORD *)(a2 + 2265);
      long long *v693 = v696;
    }
    else
    {
      *(void *)(a1 + 2256) = v695;
      *(unsigned char *)(a1 + 2264) = *(unsigned char *)(a2 + 2264);
      uint64_t v698 = *(void *)(a2 + 2272);
      *(unsigned char *)(a1 + 2280) = *(unsigned char *)(a2 + 2280);
      *(void *)(a1 + 2272) = v698;
      swift_bridgeObjectRetain();
    }
  }
  else if (v695 == 1)
  {
    sub_10009F534(a1 + 2256);
    long long v697 = *(_OWORD *)(a2 + 2265);
    long long *v693 = *v694;
    *(_OWORD *)(a1 + 2265) = v697;
  }
  else
  {
    *(void *)(a1 + 2256) = v695;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 2264) = v4[1984];
    uint64_t v699 = *(void *)(a2 + 2272);
    *(unsigned char *)(a1 + 2280) = *(unsigned char *)(a2 + 2280);
    *(void *)(a1 + 2272) = v699;
  }
  v700 = (long long *)(a1 + 2288);
  v701 = (long long *)(a2 + 2288);
  uint64_t v702 = *(void *)(a2 + 2288);
  if (*(void *)(a1 + 2288) == 1)
  {
    if (v702 == 1)
    {
      long long v703 = *v701;
      *(_OWORD *)(a1 + 2297) = *(_OWORD *)(a2 + 2297);
      long long *v700 = v703;
    }
    else
    {
      *(void *)(a1 + 2288) = v702;
      *(unsigned char *)(a1 + 2296) = *(unsigned char *)(a2 + 2296);
      uint64_t v705 = *(void *)(a2 + 2304);
      *(unsigned char *)(a1 + 2312) = *(unsigned char *)(a2 + 2312);
      *(void *)(a1 + 2304) = v705;
      swift_bridgeObjectRetain();
    }
  }
  else if (v702 == 1)
  {
    sub_10009F534(a1 + 2288);
    long long v704 = *(_OWORD *)(a2 + 2297);
    long long *v700 = *v701;
    *(_OWORD *)(a1 + 2297) = v704;
  }
  else
  {
    *(void *)(a1 + 2288) = v702;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 2296) = v4[2016];
    uint64_t v706 = *(void *)(a2 + 2304);
    *(unsigned char *)(a1 + 2312) = *(unsigned char *)(a2 + 2312);
    *(void *)(a1 + 2304) = v706;
  }
  v707 = (long long *)(a1 + 2320);
  v708 = (long long *)(a2 + 2320);
  uint64_t v709 = *(void *)(a2 + 2320);
  if (*(void *)(a1 + 2320) == 1)
  {
    if (v709 == 1)
    {
      long long v710 = *v708;
      *(_OWORD *)(a1 + 2329) = *(_OWORD *)(a2 + 2329);
      long long *v707 = v710;
    }
    else
    {
      *(void *)(a1 + 2320) = v709;
      *(unsigned char *)(a1 + 2328) = *(unsigned char *)(a2 + 2328);
      uint64_t v712 = *(void *)(a2 + 2336);
      *(unsigned char *)(a1 + 2344) = *(unsigned char *)(a2 + 2344);
      *(void *)(a1 + 2336) = v712;
      swift_bridgeObjectRetain();
    }
  }
  else if (v709 == 1)
  {
    sub_10009F534(a1 + 2320);
    long long v711 = *(_OWORD *)(a2 + 2329);
    long long *v707 = *v708;
    *(_OWORD *)(a1 + 2329) = v711;
  }
  else
  {
    *(void *)(a1 + 2320) = v709;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 2328) = v4[2048];
    uint64_t v713 = *(void *)(a2 + 2336);
    *(unsigned char *)(a1 + 2344) = *(unsigned char *)(a2 + 2344);
    *(void *)(a1 + 2336) = v713;
  }
  v714 = (long long *)(a1 + 2352);
  v715 = (long long *)(a2 + 2352);
  uint64_t v716 = *(void *)(a2 + 2352);
  if (*(void *)(a1 + 2352) == 1)
  {
    if (v716 == 1)
    {
      long long v717 = *v715;
      *(_OWORD *)(a1 + 2361) = *(_OWORD *)(a2 + 2361);
      long long *v714 = v717;
    }
    else
    {
      *(void *)(a1 + 2352) = v716;
      *(unsigned char *)(a1 + 2360) = *(unsigned char *)(a2 + 2360);
      uint64_t v719 = *(void *)(a2 + 2368);
      *(unsigned char *)(a1 + 2376) = *(unsigned char *)(a2 + 2376);
      *(void *)(a1 + 2368) = v719;
      swift_bridgeObjectRetain();
    }
  }
  else if (v716 == 1)
  {
    sub_10009F534(a1 + 2352);
    long long v718 = *(_OWORD *)(a2 + 2361);
    long long *v714 = *v715;
    *(_OWORD *)(a1 + 2361) = v718;
  }
  else
  {
    *(void *)(a1 + 2352) = v716;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 2360) = v4[2080];
    uint64_t v720 = *(void *)(a2 + 2368);
    *(unsigned char *)(a1 + 2376) = *(unsigned char *)(a2 + 2376);
    *(void *)(a1 + 2368) = v720;
  }
  v721 = (long long *)(a1 + 2384);
  v722 = (long long *)(a2 + 2384);
  uint64_t v723 = *(void *)(a2 + 2384);
  if (*(void *)(a1 + 2384) == 1)
  {
    if (v723 == 1)
    {
      long long v724 = *v722;
      *(_OWORD *)(a1 + 2393) = *(_OWORD *)(a2 + 2393);
      long long *v721 = v724;
    }
    else
    {
      *(void *)(a1 + 2384) = v723;
      *(unsigned char *)(a1 + 2392) = *(unsigned char *)(a2 + 2392);
      uint64_t v726 = *(void *)(a2 + 2400);
      *(unsigned char *)(a1 + 2408) = *(unsigned char *)(a2 + 2408);
      *(void *)(a1 + 2400) = v726;
      swift_bridgeObjectRetain();
    }
  }
  else if (v723 == 1)
  {
    sub_10009F534(a1 + 2384);
    long long v725 = *(_OWORD *)(a2 + 2393);
    long long *v721 = *v722;
    *(_OWORD *)(a1 + 2393) = v725;
  }
  else
  {
    *(void *)(a1 + 2384) = v723;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 2392) = v4[2112];
    uint64_t v727 = *(void *)(a2 + 2400);
    *(unsigned char *)(a1 + 2408) = *(unsigned char *)(a2 + 2408);
    *(void *)(a1 + 2400) = v727;
  }
  v728 = (long long *)(a1 + 2416);
  v729 = (long long *)(a2 + 2416);
  uint64_t v730 = *(void *)(a2 + 2416);
  if (*(void *)(a1 + 2416) == 1)
  {
    if (v730 == 1)
    {
      long long v731 = *v729;
      *(_OWORD *)(a1 + 2425) = *(_OWORD *)(a2 + 2425);
      long long *v728 = v731;
    }
    else
    {
      *(void *)(a1 + 2416) = v730;
      *(unsigned char *)(a1 + 2424) = *(unsigned char *)(a2 + 2424);
      uint64_t v733 = *(void *)(a2 + 2432);
      *(unsigned char *)(a1 + 2440) = *(unsigned char *)(a2 + 2440);
      *(void *)(a1 + 2432) = v733;
      swift_bridgeObjectRetain();
    }
  }
  else if (v730 == 1)
  {
    sub_10009F534(a1 + 2416);
    long long v732 = *(_OWORD *)(a2 + 2425);
    long long *v728 = *v729;
    *(_OWORD *)(a1 + 2425) = v732;
  }
  else
  {
    *(void *)(a1 + 2416) = v730;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 2424) = v4[2144];
    uint64_t v734 = *(void *)(a2 + 2432);
    *(unsigned char *)(a1 + 2440) = *(unsigned char *)(a2 + 2440);
    *(void *)(a1 + 2432) = v734;
  }
  long long v735 = *(_OWORD *)(a2 + 2448);
  *(unsigned char *)(a1 + 2464) = *(unsigned char *)(a2 + 2464);
  *(_OWORD *)(a1 + 2448) = v735;
  long long v736 = *(_OWORD *)(a2 + 2472);
  *(unsigned char *)(a1 + 2488) = *(unsigned char *)(a2 + 2488);
  *(_OWORD *)(a1 + 2472) = v736;
  *(unsigned char *)(a1 + 2489) = *(unsigned char *)(a2 + 2489);
  *(unsigned char *)(a1 + 2490) = *(unsigned char *)(a2 + 2490);
  *(unsigned char *)(a1 + 2491) = *(unsigned char *)(a2 + 2491);
  *(unsigned char *)(a1 + 2492) = *(unsigned char *)(a2 + 2492);
  *(unsigned char *)(a1 + 2493) = *(unsigned char *)(a2 + 2493);
  *(unsigned char *)(a1 + 2494) = *(unsigned char *)(a2 + 2494);
  *(unsigned char *)(a1 + 2495) = *(unsigned char *)(a2 + 2495);
  *(void *)(a1 + 2496) = *(void *)(a2 + 2496);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2504) = *(void *)(a2 + 2504);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_742:
  v737 = (unsigned char *)(a1 + 4153);
  v738 = (long long *)(a1 + 2512);
  v739 = (long long *)(a2 + 2512);
  uint64_t v740 = *(void *)(a2 + 3328);
  if (*(void *)(a1 + 3328) == 1)
  {
    if (v740 != 1)
    {
      if (*(void *)v739 == 1)
      {
        long long v741 = *v739;
        *(_OWORD *)(a1 + 2521) = *(_OWORD *)(a2 + 2521);
        long long *v738 = v741;
      }
      else
      {
        *(void *)(a1 + 2512) = *(void *)v739;
        *(unsigned char *)(a1 + 2520) = *(unsigned char *)(a2 + 2520);
        uint64_t v744 = *(void *)(a2 + 2528);
        *(unsigned char *)(a1 + 2536) = *(unsigned char *)(a2 + 2536);
        *(void *)(a1 + 2528) = v744;
        swift_bridgeObjectRetain();
      }
      uint64_t v745 = *(void *)(a2 + 2544);
      if (v745 == 1)
      {
        long long v746 = *(_OWORD *)(a2 + 2544);
        *(_OWORD *)(a1 + 2553) = *(_OWORD *)(a2 + 2553);
        *(_OWORD *)(a1 + 2544) = v746;
      }
      else
      {
        *(void *)(a1 + 2544) = v745;
        *(unsigned char *)(a1 + 2552) = *(unsigned char *)(a2 + 2552);
        uint64_t v748 = *(void *)(a2 + 2560);
        *(unsigned char *)(a1 + 2568) = *(unsigned char *)(a2 + 2568);
        *(void *)(a1 + 2560) = v748;
        swift_bridgeObjectRetain();
      }
      uint64_t v749 = *(void *)(a2 + 2576);
      if (v749 == 1)
      {
        long long v750 = *(_OWORD *)(a2 + 2576);
        *(_OWORD *)(a1 + 2585) = *(_OWORD *)(a2 + 2585);
        *(_OWORD *)(a1 + 2576) = v750;
      }
      else
      {
        *(void *)(a1 + 2576) = v749;
        *(unsigned char *)(a1 + 2584) = *(unsigned char *)(a2 + 2584);
        uint64_t v751 = *(void *)(a2 + 2592);
        *(unsigned char *)(a1 + 2600) = *(unsigned char *)(a2 + 2600);
        *(void *)(a1 + 2592) = v751;
        swift_bridgeObjectRetain();
      }
      uint64_t v752 = *(void *)(a2 + 2608);
      if (v752 == 1)
      {
        long long v753 = *(_OWORD *)(a2 + 2608);
        *(_OWORD *)(a1 + 2617) = *(_OWORD *)(a2 + 2617);
        *(_OWORD *)(a1 + 2608) = v753;
      }
      else
      {
        *(void *)(a1 + 2608) = v752;
        *(unsigned char *)(a1 + 2616) = *(unsigned char *)(a2 + 2616);
        uint64_t v754 = *(void *)(a2 + 2624);
        *(unsigned char *)(a1 + 2632) = *(unsigned char *)(a2 + 2632);
        *(void *)(a1 + 2624) = v754;
        swift_bridgeObjectRetain();
      }
      uint64_t v755 = *(void *)(a2 + 2640);
      if (v755 == 1)
      {
        long long v756 = *(_OWORD *)(a2 + 2640);
        *(_OWORD *)(a1 + 2649) = *(_OWORD *)(a2 + 2649);
        *(_OWORD *)(a1 + 2640) = v756;
      }
      else
      {
        *(void *)(a1 + 2640) = v755;
        *(unsigned char *)(a1 + 2648) = *(unsigned char *)(a2 + 2648);
        uint64_t v757 = *(void *)(a2 + 2656);
        *(unsigned char *)(a1 + 2664) = *(unsigned char *)(a2 + 2664);
        *(void *)(a1 + 2656) = v757;
        swift_bridgeObjectRetain();
      }
      uint64_t v758 = *(void *)(a2 + 2672);
      if (v758 == 1)
      {
        long long v759 = *(_OWORD *)(a2 + 2672);
        *(_OWORD *)(a1 + 2681) = *(_OWORD *)(a2 + 2681);
        *(_OWORD *)(a1 + 2672) = v759;
      }
      else
      {
        *(void *)(a1 + 2672) = v758;
        *(unsigned char *)(a1 + 2680) = *(unsigned char *)(a2 + 2680);
        uint64_t v760 = *(void *)(a2 + 2688);
        *(unsigned char *)(a1 + 2696) = *(unsigned char *)(a2 + 2696);
        *(void *)(a1 + 2688) = v760;
        swift_bridgeObjectRetain();
      }
      uint64_t v761 = *(void *)(a2 + 2704);
      if (v761 == 1)
      {
        long long v762 = *(_OWORD *)(a2 + 2704);
        *(_OWORD *)(a1 + 2713) = *(_OWORD *)(a2 + 2713);
        *(_OWORD *)(a1 + 2704) = v762;
      }
      else
      {
        *(void *)(a1 + 2704) = v761;
        *(unsigned char *)(a1 + 2712) = *(unsigned char *)(a2 + 2712);
        uint64_t v763 = *(void *)(a2 + 2720);
        *(unsigned char *)(a1 + 2728) = *(unsigned char *)(a2 + 2728);
        *(void *)(a1 + 2720) = v763;
        swift_bridgeObjectRetain();
      }
      uint64_t v764 = *(void *)(a2 + 2736);
      if (v764 == 1)
      {
        long long v765 = *(_OWORD *)(a2 + 2736);
        *(_OWORD *)(a1 + 2745) = *(_OWORD *)(a2 + 2745);
        *(_OWORD *)(a1 + 2736) = v765;
      }
      else
      {
        *(void *)(a1 + 2736) = v764;
        *(unsigned char *)(a1 + 2744) = *(unsigned char *)(a2 + 2744);
        uint64_t v766 = *(void *)(a2 + 2752);
        *(unsigned char *)(a1 + 2760) = *(unsigned char *)(a2 + 2760);
        *(void *)(a1 + 2752) = v766;
        swift_bridgeObjectRetain();
      }
      uint64_t v767 = *(void *)(a2 + 2768);
      if (v767 == 1)
      {
        long long v768 = *(_OWORD *)(a2 + 2768);
        *(_OWORD *)(a1 + 2777) = *(_OWORD *)(a2 + 2777);
        *(_OWORD *)(a1 + 2768) = v768;
      }
      else
      {
        *(void *)(a1 + 2768) = v767;
        *(unsigned char *)(a1 + 2776) = *(unsigned char *)(a2 + 2776);
        uint64_t v769 = *(void *)(a2 + 2784);
        *(unsigned char *)(a1 + 2792) = *(unsigned char *)(a2 + 2792);
        *(void *)(a1 + 2784) = v769;
        swift_bridgeObjectRetain();
      }
      uint64_t v770 = *(void *)(a2 + 2800);
      if (v770 == 1)
      {
        long long v771 = *(_OWORD *)(a2 + 2800);
        *(_OWORD *)(a1 + 2809) = *(_OWORD *)(a2 + 2809);
        *(_OWORD *)(a1 + 2800) = v771;
      }
      else
      {
        *(void *)(a1 + 2800) = v770;
        *(unsigned char *)(a1 + 2808) = *(unsigned char *)(a2 + 2808);
        uint64_t v772 = *(void *)(a2 + 2816);
        *(unsigned char *)(a1 + 2824) = *(unsigned char *)(a2 + 2824);
        *(void *)(a1 + 2816) = v772;
        swift_bridgeObjectRetain();
      }
      uint64_t v773 = *(void *)(a2 + 2832);
      if (v773 == 1)
      {
        long long v774 = *(_OWORD *)(a2 + 2832);
        *(_OWORD *)(a1 + 2841) = *(_OWORD *)(a2 + 2841);
        *(_OWORD *)(a1 + 2832) = v774;
      }
      else
      {
        *(void *)(a1 + 2832) = v773;
        *(unsigned char *)(a1 + 2840) = *(unsigned char *)(a2 + 2840);
        uint64_t v775 = *(void *)(a2 + 2848);
        *(unsigned char *)(a1 + 2856) = *(unsigned char *)(a2 + 2856);
        *(void *)(a1 + 2848) = v775;
        swift_bridgeObjectRetain();
      }
      uint64_t v776 = *(void *)(a2 + 2864);
      if (v776 == 1)
      {
        long long v777 = *(_OWORD *)(a2 + 2864);
        *(_OWORD *)(a1 + 2873) = *(_OWORD *)(a2 + 2873);
        *(_OWORD *)(a1 + 2864) = v777;
      }
      else
      {
        *(void *)(a1 + 2864) = v776;
        *(unsigned char *)(a1 + 2872) = *(unsigned char *)(a2 + 2872);
        uint64_t v778 = *(void *)(a2 + 2880);
        *(unsigned char *)(a1 + 2888) = *(unsigned char *)(a2 + 2888);
        *(void *)(a1 + 2880) = v778;
        swift_bridgeObjectRetain();
      }
      uint64_t v779 = *(void *)(a2 + 2896);
      if (v779 == 1)
      {
        long long v780 = *(_OWORD *)(a2 + 2896);
        *(_OWORD *)(a1 + 2905) = *(_OWORD *)(a2 + 2905);
        *(_OWORD *)(a1 + 2896) = v780;
      }
      else
      {
        *(void *)(a1 + 2896) = v779;
        *(unsigned char *)(a1 + 2904) = *(unsigned char *)(a2 + 2904);
        uint64_t v781 = *(void *)(a2 + 2912);
        *(unsigned char *)(a1 + 2920) = *(unsigned char *)(a2 + 2920);
        *(void *)(a1 + 2912) = v781;
        swift_bridgeObjectRetain();
      }
      uint64_t v782 = *(void *)(a2 + 2928);
      if (v782 == 1)
      {
        long long v783 = *(_OWORD *)(a2 + 2928);
        *(_OWORD *)(a1 + 2937) = *(_OWORD *)(a2 + 2937);
        *(_OWORD *)(a1 + 2928) = v783;
      }
      else
      {
        *(void *)(a1 + 2928) = v782;
        *(unsigned char *)(a1 + 2936) = *(unsigned char *)(a2 + 2936);
        uint64_t v784 = *(void *)(a2 + 2944);
        *(unsigned char *)(a1 + 2952) = *(unsigned char *)(a2 + 2952);
        *(void *)(a1 + 2944) = v784;
        swift_bridgeObjectRetain();
      }
      uint64_t v785 = *(void *)(a2 + 2960);
      if (v785 == 1)
      {
        long long v786 = *(_OWORD *)(a2 + 2960);
        *(_OWORD *)(a1 + 2969) = *(_OWORD *)(a2 + 2969);
        *(_OWORD *)(a1 + 2960) = v786;
      }
      else
      {
        *(void *)(a1 + 2960) = v785;
        *(unsigned char *)(a1 + 2968) = *(unsigned char *)(a2 + 2968);
        uint64_t v787 = *(void *)(a2 + 2976);
        *(unsigned char *)(a1 + 2984) = *(unsigned char *)(a2 + 2984);
        *(void *)(a1 + 2976) = v787;
        swift_bridgeObjectRetain();
      }
      uint64_t v788 = *(void *)(a2 + 2992);
      if (v788 == 1)
      {
        long long v789 = *(_OWORD *)(a2 + 2992);
        *(_OWORD *)(a1 + 3001) = *(_OWORD *)(a2 + 3001);
        *(_OWORD *)(a1 + 2992) = v789;
      }
      else
      {
        *(void *)(a1 + 2992) = v788;
        *(unsigned char *)(a1 + 3000) = *(unsigned char *)(a2 + 3000);
        uint64_t v790 = *(void *)(a2 + 3008);
        *(unsigned char *)(a1 + 3016) = *(unsigned char *)(a2 + 3016);
        *(void *)(a1 + 3008) = v790;
        swift_bridgeObjectRetain();
      }
      uint64_t v791 = *(void *)(a2 + 3024);
      if (v791 == 1)
      {
        long long v792 = *(_OWORD *)(a2 + 3024);
        *(_OWORD *)(a1 + 3033) = *(_OWORD *)(a2 + 3033);
        *(_OWORD *)(a1 + 3024) = v792;
      }
      else
      {
        *(void *)(a1 + 3024) = v791;
        *(unsigned char *)(a1 + 3032) = *(unsigned char *)(a2 + 3032);
        uint64_t v793 = *(void *)(a2 + 3040);
        *(unsigned char *)(a1 + 3048) = *(unsigned char *)(a2 + 3048);
        *(void *)(a1 + 3040) = v793;
        swift_bridgeObjectRetain();
      }
      uint64_t v794 = *(void *)(a2 + 3056);
      if (v794 == 1)
      {
        long long v795 = *(_OWORD *)(a2 + 3056);
        *(_OWORD *)(a1 + 3065) = *(_OWORD *)(a2 + 3065);
        *(_OWORD *)(a1 + 3056) = v795;
      }
      else
      {
        *(void *)(a1 + 3056) = v794;
        *(unsigned char *)(a1 + 3064) = *(unsigned char *)(a2 + 3064);
        uint64_t v796 = *(void *)(a2 + 3072);
        *(unsigned char *)(a1 + 3080) = *(unsigned char *)(a2 + 3080);
        *(void *)(a1 + 3072) = v796;
        swift_bridgeObjectRetain();
      }
      uint64_t v797 = *(void *)(a2 + 3088);
      if (v797 == 1)
      {
        long long v798 = *(_OWORD *)(a2 + 3088);
        *(_OWORD *)(a1 + 3097) = *(_OWORD *)(a2 + 3097);
        *(_OWORD *)(a1 + 3088) = v798;
      }
      else
      {
        *(void *)(a1 + 3088) = v797;
        *(unsigned char *)(a1 + 3096) = *(unsigned char *)(a2 + 3096);
        uint64_t v799 = *(void *)(a2 + 3104);
        *(unsigned char *)(a1 + 3112) = *(unsigned char *)(a2 + 3112);
        *(void *)(a1 + 3104) = v799;
        swift_bridgeObjectRetain();
      }
      uint64_t v800 = *(void *)(a2 + 3120);
      if (v800 == 1)
      {
        long long v801 = *(_OWORD *)(a2 + 3120);
        *(_OWORD *)(a1 + 3129) = *(_OWORD *)(a2 + 3129);
        *(_OWORD *)(a1 + 3120) = v801;
      }
      else
      {
        *(void *)(a1 + 3120) = v800;
        *(unsigned char *)(a1 + 3128) = *(unsigned char *)(a2 + 3128);
        uint64_t v802 = *(void *)(a2 + 3136);
        *(unsigned char *)(a1 + 3144) = *(unsigned char *)(a2 + 3144);
        *(void *)(a1 + 3136) = v802;
        swift_bridgeObjectRetain();
      }
      uint64_t v803 = *(void *)(a2 + 3152);
      if (v803 == 1)
      {
        long long v804 = *(_OWORD *)(a2 + 3152);
        *(_OWORD *)(a1 + 3161) = *(_OWORD *)(a2 + 3161);
        *(_OWORD *)(a1 + 3152) = v804;
      }
      else
      {
        *(void *)(a1 + 3152) = v803;
        *(unsigned char *)(a1 + 3160) = *(unsigned char *)(a2 + 3160);
        uint64_t v805 = *(void *)(a2 + 3168);
        *(unsigned char *)(a1 + 3176) = *(unsigned char *)(a2 + 3176);
        *(void *)(a1 + 3168) = v805;
        swift_bridgeObjectRetain();
      }
      uint64_t v806 = *(void *)(a2 + 3184);
      if (v806 == 1)
      {
        long long v807 = *(_OWORD *)(a2 + 3184);
        *(_OWORD *)(a1 + 3193) = *(_OWORD *)(a2 + 3193);
        *(_OWORD *)(a1 + 3184) = v807;
      }
      else
      {
        *(void *)(a1 + 3184) = v806;
        *(unsigned char *)(a1 + 3192) = *(unsigned char *)(a2 + 3192);
        uint64_t v808 = *(void *)(a2 + 3200);
        *(unsigned char *)(a1 + 3208) = *(unsigned char *)(a2 + 3208);
        *(void *)(a1 + 3200) = v808;
        swift_bridgeObjectRetain();
      }
      uint64_t v809 = *(void *)(a2 + 3216);
      if (v809 == 1)
      {
        long long v810 = *(_OWORD *)(a2 + 3216);
        *(_OWORD *)(a1 + 3225) = *(_OWORD *)(a2 + 3225);
        *(_OWORD *)(a1 + 3216) = v810;
      }
      else
      {
        *(void *)(a1 + 3216) = v809;
        *(unsigned char *)(a1 + 3224) = *(unsigned char *)(a2 + 3224);
        uint64_t v811 = *(void *)(a2 + 3232);
        *(unsigned char *)(a1 + 3240) = *(unsigned char *)(a2 + 3240);
        *(void *)(a1 + 3232) = v811;
        swift_bridgeObjectRetain();
      }
      uint64_t v812 = *(void *)(a2 + 3248);
      if (v812 == 1)
      {
        long long v813 = *(_OWORD *)(a2 + 3248);
        *(_OWORD *)(a1 + 3257) = *(_OWORD *)(a2 + 3257);
        *(_OWORD *)(a1 + 3248) = v813;
      }
      else
      {
        *(void *)(a1 + 3248) = v812;
        *(unsigned char *)(a1 + 3256) = *(unsigned char *)(a2 + 3256);
        uint64_t v814 = *(void *)(a2 + 3264);
        *(unsigned char *)(a1 + 3272) = *(unsigned char *)(a2 + 3272);
        *(void *)(a1 + 3264) = v814;
        swift_bridgeObjectRetain();
      }
      long long v815 = *(_OWORD *)(a2 + 3280);
      *(unsigned char *)(a1 + 3296) = *(unsigned char *)(a2 + 3296);
      *(_OWORD *)(a1 + 3280) = v815;
      long long v816 = *(_OWORD *)(a2 + 3304);
      *(unsigned char *)(a1 + 3320) = *(unsigned char *)(a2 + 3320);
      *(_OWORD *)(a1 + 3304) = v816;
      *(unsigned char *)(a1 + 3321) = *(unsigned char *)(a2 + 3321);
      *(unsigned char *)(a1 + 3322) = *(unsigned char *)(a2 + 3322);
      *(unsigned char *)(a1 + 3323) = *(unsigned char *)(a2 + 3323);
      *(unsigned char *)(a1 + 3324) = *(unsigned char *)(a2 + 3324);
      *(unsigned char *)(a1 + 3325) = *(unsigned char *)(a2 + 3325);
      *(unsigned char *)(a1 + 3326) = *(unsigned char *)(a2 + 3326);
      *(unsigned char *)(a1 + 3327) = *(unsigned char *)(a2 + 3327);
      *(void *)(a1 + 3328) = *(void *)(a2 + 3328);
      *(void *)(a1 + 3336) = *(void *)(a2 + 3336);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_989;
    }
LABEL_748:
    memcpy((void *)(a1 + 2512), (const void *)(a2 + 2512), 0x340uLL);
    goto LABEL_989;
  }
  if (v740 == 1)
  {
    sub_10009F560((void *)(a1 + 2512));
    goto LABEL_748;
  }
  uint64_t v742 = *(void *)v739;
  if (*(void *)v738 == 1)
  {
    if (v742 == 1)
    {
      long long v743 = *v739;
      *(_OWORD *)(a1 + 2521) = *(_OWORD *)(a2 + 2521);
      long long *v738 = v743;
    }
    else
    {
      *(void *)(a1 + 2512) = v742;
      *(unsigned char *)(a1 + 2520) = *(unsigned char *)(a2 + 2520);
      uint64_t v817 = *(void *)(a2 + 2528);
      *(unsigned char *)(a1 + 2536) = *(unsigned char *)(a2 + 2536);
      *(void *)(a1 + 2528) = v817;
      swift_bridgeObjectRetain();
    }
  }
  else if (v742 == 1)
  {
    sub_10009F534(a1 + 2512);
    long long v747 = *(_OWORD *)(a2 + 2521);
    long long *v738 = *v739;
    *(_OWORD *)(a1 + 2521) = v747;
  }
  else
  {
    *(void *)(a1 + 2512) = v742;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 2520) = v4[2240];
    uint64_t v818 = *(void *)(a2 + 2528);
    *(unsigned char *)(a1 + 2536) = *(unsigned char *)(a2 + 2536);
    *(void *)(a1 + 2528) = v818;
  }
  v819 = (long long *)(a1 + 2544);
  v820 = (long long *)(a2 + 2544);
  uint64_t v821 = *(void *)(a2 + 2544);
  if (*(void *)(a1 + 2544) == 1)
  {
    if (v821 == 1)
    {
      long long v822 = *v820;
      *(_OWORD *)(a1 + 2553) = *(_OWORD *)(a2 + 2553);
      long long *v819 = v822;
    }
    else
    {
      *(void *)(a1 + 2544) = v821;
      *(unsigned char *)(a1 + 2552) = *(unsigned char *)(a2 + 2552);
      uint64_t v824 = *(void *)(a2 + 2560);
      *(unsigned char *)(a1 + 2568) = *(unsigned char *)(a2 + 2568);
      *(void *)(a1 + 2560) = v824;
      swift_bridgeObjectRetain();
    }
  }
  else if (v821 == 1)
  {
    sub_10009F534(a1 + 2544);
    long long v823 = *(_OWORD *)(a2 + 2553);
    long long *v819 = *v820;
    *(_OWORD *)(a1 + 2553) = v823;
  }
  else
  {
    *(void *)(a1 + 2544) = v821;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 2552) = v4[2272];
    uint64_t v825 = *(void *)(a2 + 2560);
    *(unsigned char *)(a1 + 2568) = *(unsigned char *)(a2 + 2568);
    *(void *)(a1 + 2560) = v825;
  }
  v826 = (long long *)(a1 + 2576);
  v827 = (long long *)(a2 + 2576);
  uint64_t v828 = *(void *)(a2 + 2576);
  if (*(void *)(a1 + 2576) == 1)
  {
    if (v828 == 1)
    {
      long long v829 = *v827;
      *(_OWORD *)(a1 + 2585) = *(_OWORD *)(a2 + 2585);
      long long *v826 = v829;
    }
    else
    {
      *(void *)(a1 + 2576) = v828;
      *(unsigned char *)(a1 + 2584) = *(unsigned char *)(a2 + 2584);
      uint64_t v831 = *(void *)(a2 + 2592);
      *(unsigned char *)(a1 + 2600) = *(unsigned char *)(a2 + 2600);
      *(void *)(a1 + 2592) = v831;
      swift_bridgeObjectRetain();
    }
  }
  else if (v828 == 1)
  {
    sub_10009F534(a1 + 2576);
    long long v830 = *(_OWORD *)(a2 + 2585);
    long long *v826 = *v827;
    *(_OWORD *)(a1 + 2585) = v830;
  }
  else
  {
    *(void *)(a1 + 2576) = v828;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 2584) = v4[2304];
    uint64_t v832 = *(void *)(a2 + 2592);
    *(unsigned char *)(a1 + 2600) = *(unsigned char *)(a2 + 2600);
    *(void *)(a1 + 2592) = v832;
  }
  v833 = (long long *)(a1 + 2608);
  v834 = (long long *)(a2 + 2608);
  uint64_t v835 = *(void *)(a2 + 2608);
  if (*(void *)(a1 + 2608) == 1)
  {
    if (v835 == 1)
    {
      long long v836 = *v834;
      *(_OWORD *)(a1 + 2617) = *(_OWORD *)(a2 + 2617);
      long long *v833 = v836;
    }
    else
    {
      *(void *)(a1 + 2608) = v835;
      *(unsigned char *)(a1 + 2616) = *(unsigned char *)(a2 + 2616);
      uint64_t v838 = *(void *)(a2 + 2624);
      *(unsigned char *)(a1 + 2632) = *(unsigned char *)(a2 + 2632);
      *(void *)(a1 + 2624) = v838;
      swift_bridgeObjectRetain();
    }
  }
  else if (v835 == 1)
  {
    sub_10009F534(a1 + 2608);
    long long v837 = *(_OWORD *)(a2 + 2617);
    long long *v833 = *v834;
    *(_OWORD *)(a1 + 2617) = v837;
  }
  else
  {
    *(void *)(a1 + 2608) = v835;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 2616) = v4[2336];
    uint64_t v839 = *(void *)(a2 + 2624);
    *(unsigned char *)(a1 + 2632) = *(unsigned char *)(a2 + 2632);
    *(void *)(a1 + 2624) = v839;
  }
  v840 = (long long *)(a1 + 2640);
  v841 = (long long *)(a2 + 2640);
  uint64_t v842 = *(void *)(a2 + 2640);
  if (*(void *)(a1 + 2640) == 1)
  {
    if (v842 == 1)
    {
      long long v843 = *v841;
      *(_OWORD *)(a1 + 2649) = *(_OWORD *)(a2 + 2649);
      long long *v840 = v843;
    }
    else
    {
      *(void *)(a1 + 2640) = v842;
      *(unsigned char *)(a1 + 2648) = *(unsigned char *)(a2 + 2648);
      uint64_t v845 = *(void *)(a2 + 2656);
      *(unsigned char *)(a1 + 2664) = *(unsigned char *)(a2 + 2664);
      *(void *)(a1 + 2656) = v845;
      swift_bridgeObjectRetain();
    }
  }
  else if (v842 == 1)
  {
    sub_10009F534(a1 + 2640);
    long long v844 = *(_OWORD *)(a2 + 2649);
    long long *v840 = *v841;
    *(_OWORD *)(a1 + 2649) = v844;
  }
  else
  {
    *(void *)(a1 + 2640) = v842;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 2648) = v4[2368];
    uint64_t v846 = *(void *)(a2 + 2656);
    *(unsigned char *)(a1 + 2664) = *(unsigned char *)(a2 + 2664);
    *(void *)(a1 + 2656) = v846;
  }
  v847 = (long long *)(a1 + 2672);
  v848 = (long long *)(a2 + 2672);
  uint64_t v849 = *(void *)(a2 + 2672);
  if (*(void *)(a1 + 2672) == 1)
  {
    if (v849 == 1)
    {
      long long v850 = *v848;
      *(_OWORD *)(a1 + 2681) = *(_OWORD *)(a2 + 2681);
      long long *v847 = v850;
    }
    else
    {
      *(void *)(a1 + 2672) = v849;
      *(unsigned char *)(a1 + 2680) = *(unsigned char *)(a2 + 2680);
      uint64_t v852 = *(void *)(a2 + 2688);
      *(unsigned char *)(a1 + 2696) = *(unsigned char *)(a2 + 2696);
      *(void *)(a1 + 2688) = v852;
      swift_bridgeObjectRetain();
    }
  }
  else if (v849 == 1)
  {
    sub_10009F534(a1 + 2672);
    long long v851 = *(_OWORD *)(a2 + 2681);
    long long *v847 = *v848;
    *(_OWORD *)(a1 + 2681) = v851;
  }
  else
  {
    *(void *)(a1 + 2672) = v849;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 2680) = v4[2400];
    uint64_t v853 = *(void *)(a2 + 2688);
    *(unsigned char *)(a1 + 2696) = *(unsigned char *)(a2 + 2696);
    *(void *)(a1 + 2688) = v853;
  }
  v854 = (long long *)(a1 + 2704);
  v855 = (long long *)(a2 + 2704);
  uint64_t v856 = *(void *)(a2 + 2704);
  if (*(void *)(a1 + 2704) == 1)
  {
    if (v856 == 1)
    {
      long long v857 = *v855;
      *(_OWORD *)(a1 + 2713) = *(_OWORD *)(a2 + 2713);
      long long *v854 = v857;
    }
    else
    {
      *(void *)(a1 + 2704) = v856;
      *(unsigned char *)(a1 + 2712) = *(unsigned char *)(a2 + 2712);
      uint64_t v859 = *(void *)(a2 + 2720);
      *(unsigned char *)(a1 + 2728) = *(unsigned char *)(a2 + 2728);
      *(void *)(a1 + 2720) = v859;
      swift_bridgeObjectRetain();
    }
  }
  else if (v856 == 1)
  {
    sub_10009F534(a1 + 2704);
    long long v858 = *(_OWORD *)(a2 + 2713);
    long long *v854 = *v855;
    *(_OWORD *)(a1 + 2713) = v858;
  }
  else
  {
    *(void *)(a1 + 2704) = v856;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 2712) = v4[2432];
    uint64_t v860 = *(void *)(a2 + 2720);
    *(unsigned char *)(a1 + 2728) = *(unsigned char *)(a2 + 2728);
    *(void *)(a1 + 2720) = v860;
  }
  v861 = (long long *)(a1 + 2736);
  v862 = (long long *)(a2 + 2736);
  uint64_t v863 = *(void *)(a2 + 2736);
  if (*(void *)(a1 + 2736) == 1)
  {
    if (v863 == 1)
    {
      long long v864 = *v862;
      *(_OWORD *)(a1 + 2745) = *(_OWORD *)(a2 + 2745);
      long long *v861 = v864;
    }
    else
    {
      *(void *)(a1 + 2736) = v863;
      *(unsigned char *)(a1 + 2744) = *(unsigned char *)(a2 + 2744);
      uint64_t v866 = *(void *)(a2 + 2752);
      *(unsigned char *)(a1 + 2760) = *(unsigned char *)(a2 + 2760);
      *(void *)(a1 + 2752) = v866;
      swift_bridgeObjectRetain();
    }
  }
  else if (v863 == 1)
  {
    sub_10009F534(a1 + 2736);
    long long v865 = *(_OWORD *)(a2 + 2745);
    long long *v861 = *v862;
    *(_OWORD *)(a1 + 2745) = v865;
  }
  else
  {
    *(void *)(a1 + 2736) = v863;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 2744) = v4[2464];
    uint64_t v867 = *(void *)(a2 + 2752);
    *(unsigned char *)(a1 + 2760) = *(unsigned char *)(a2 + 2760);
    *(void *)(a1 + 2752) = v867;
  }
  v868 = (long long *)(a1 + 2768);
  v869 = (long long *)(a2 + 2768);
  uint64_t v870 = *(void *)(a2 + 2768);
  if (*(void *)(a1 + 2768) == 1)
  {
    if (v870 == 1)
    {
      long long v871 = *v869;
      *(_OWORD *)(a1 + 2777) = *(_OWORD *)(a2 + 2777);
      long long *v868 = v871;
    }
    else
    {
      *(void *)(a1 + 2768) = v870;
      *(unsigned char *)(a1 + 2776) = *(unsigned char *)(a2 + 2776);
      uint64_t v873 = *(void *)(a2 + 2784);
      *(unsigned char *)(a1 + 2792) = *(unsigned char *)(a2 + 2792);
      *(void *)(a1 + 2784) = v873;
      swift_bridgeObjectRetain();
    }
  }
  else if (v870 == 1)
  {
    sub_10009F534(a1 + 2768);
    long long v872 = *(_OWORD *)(a2 + 2777);
    long long *v868 = *v869;
    *(_OWORD *)(a1 + 2777) = v872;
  }
  else
  {
    *(void *)(a1 + 2768) = v870;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 2776) = v4[2496];
    uint64_t v874 = *(void *)(a2 + 2784);
    *(unsigned char *)(a1 + 2792) = *(unsigned char *)(a2 + 2792);
    *(void *)(a1 + 2784) = v874;
  }
  v875 = (long long *)(a1 + 2800);
  v876 = (long long *)(a2 + 2800);
  uint64_t v877 = *(void *)(a2 + 2800);
  if (*(void *)(a1 + 2800) == 1)
  {
    if (v877 == 1)
    {
      long long v878 = *v876;
      *(_OWORD *)(a1 + 2809) = *(_OWORD *)(a2 + 2809);
      long long *v875 = v878;
    }
    else
    {
      *(void *)(a1 + 2800) = v877;
      *(unsigned char *)(a1 + 2808) = *(unsigned char *)(a2 + 2808);
      uint64_t v880 = *(void *)(a2 + 2816);
      *(unsigned char *)(a1 + 2824) = *(unsigned char *)(a2 + 2824);
      *(void *)(a1 + 2816) = v880;
      swift_bridgeObjectRetain();
    }
  }
  else if (v877 == 1)
  {
    sub_10009F534(a1 + 2800);
    long long v879 = *(_OWORD *)(a2 + 2809);
    long long *v875 = *v876;
    *(_OWORD *)(a1 + 2809) = v879;
  }
  else
  {
    *(void *)(a1 + 2800) = v877;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 2808) = v4[2528];
    uint64_t v881 = *(void *)(a2 + 2816);
    *(unsigned char *)(a1 + 2824) = *(unsigned char *)(a2 + 2824);
    *(void *)(a1 + 2816) = v881;
  }
  v882 = (long long *)(a1 + 2832);
  v883 = (long long *)(a2 + 2832);
  uint64_t v884 = *(void *)(a2 + 2832);
  if (*(void *)(a1 + 2832) == 1)
  {
    if (v884 == 1)
    {
      long long v885 = *v883;
      *(_OWORD *)(a1 + 2841) = *(_OWORD *)(a2 + 2841);
      long long *v882 = v885;
    }
    else
    {
      *(void *)(a1 + 2832) = v884;
      *(unsigned char *)(a1 + 2840) = *(unsigned char *)(a2 + 2840);
      uint64_t v887 = *(void *)(a2 + 2848);
      *(unsigned char *)(a1 + 2856) = *(unsigned char *)(a2 + 2856);
      *(void *)(a1 + 2848) = v887;
      swift_bridgeObjectRetain();
    }
  }
  else if (v884 == 1)
  {
    sub_10009F534(a1 + 2832);
    long long v886 = *(_OWORD *)(a2 + 2841);
    long long *v882 = *v883;
    *(_OWORD *)(a1 + 2841) = v886;
  }
  else
  {
    *(void *)(a1 + 2832) = v884;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 2840) = v4[2560];
    uint64_t v888 = *(void *)(a2 + 2848);
    *(unsigned char *)(a1 + 2856) = *(unsigned char *)(a2 + 2856);
    *(void *)(a1 + 2848) = v888;
  }
  v889 = (long long *)(a1 + 2864);
  v890 = (long long *)(a2 + 2864);
  uint64_t v891 = *(void *)(a2 + 2864);
  if (*(void *)(a1 + 2864) == 1)
  {
    if (v891 == 1)
    {
      long long v892 = *v890;
      *(_OWORD *)(a1 + 2873) = *(_OWORD *)(a2 + 2873);
      long long *v889 = v892;
    }
    else
    {
      *(void *)(a1 + 2864) = v891;
      *(unsigned char *)(a1 + 2872) = *(unsigned char *)(a2 + 2872);
      uint64_t v894 = *(void *)(a2 + 2880);
      *(unsigned char *)(a1 + 2888) = *(unsigned char *)(a2 + 2888);
      *(void *)(a1 + 2880) = v894;
      swift_bridgeObjectRetain();
    }
  }
  else if (v891 == 1)
  {
    sub_10009F534(a1 + 2864);
    long long v893 = *(_OWORD *)(a2 + 2873);
    long long *v889 = *v890;
    *(_OWORD *)(a1 + 2873) = v893;
  }
  else
  {
    *(void *)(a1 + 2864) = v891;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 2872) = v4[2592];
    uint64_t v895 = *(void *)(a2 + 2880);
    *(unsigned char *)(a1 + 2888) = *(unsigned char *)(a2 + 2888);
    *(void *)(a1 + 2880) = v895;
  }
  v896 = (long long *)(a1 + 2896);
  v897 = (long long *)(a2 + 2896);
  uint64_t v898 = *(void *)(a2 + 2896);
  if (*(void *)(a1 + 2896) == 1)
  {
    if (v898 == 1)
    {
      long long v899 = *v897;
      *(_OWORD *)(a1 + 2905) = *(_OWORD *)(a2 + 2905);
      long long *v896 = v899;
    }
    else
    {
      *(void *)(a1 + 2896) = v898;
      *(unsigned char *)(a1 + 2904) = *(unsigned char *)(a2 + 2904);
      uint64_t v901 = *(void *)(a2 + 2912);
      *(unsigned char *)(a1 + 2920) = *(unsigned char *)(a2 + 2920);
      *(void *)(a1 + 2912) = v901;
      swift_bridgeObjectRetain();
    }
  }
  else if (v898 == 1)
  {
    sub_10009F534(a1 + 2896);
    long long v900 = *(_OWORD *)(a2 + 2905);
    long long *v896 = *v897;
    *(_OWORD *)(a1 + 2905) = v900;
  }
  else
  {
    *(void *)(a1 + 2896) = v898;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 2904) = v4[2624];
    uint64_t v902 = *(void *)(a2 + 2912);
    *(unsigned char *)(a1 + 2920) = *(unsigned char *)(a2 + 2920);
    *(void *)(a1 + 2912) = v902;
  }
  v903 = (long long *)(a1 + 2928);
  v904 = (long long *)(a2 + 2928);
  uint64_t v905 = *(void *)(a2 + 2928);
  if (*(void *)(a1 + 2928) == 1)
  {
    if (v905 == 1)
    {
      long long v906 = *v904;
      *(_OWORD *)(a1 + 2937) = *(_OWORD *)(a2 + 2937);
      long long *v903 = v906;
    }
    else
    {
      *(void *)(a1 + 2928) = v905;
      *(unsigned char *)(a1 + 2936) = *(unsigned char *)(a2 + 2936);
      uint64_t v908 = *(void *)(a2 + 2944);
      *(unsigned char *)(a1 + 2952) = *(unsigned char *)(a2 + 2952);
      *(void *)(a1 + 2944) = v908;
      swift_bridgeObjectRetain();
    }
  }
  else if (v905 == 1)
  {
    sub_10009F534(a1 + 2928);
    long long v907 = *(_OWORD *)(a2 + 2937);
    long long *v903 = *v904;
    *(_OWORD *)(a1 + 2937) = v907;
  }
  else
  {
    *(void *)(a1 + 2928) = v905;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 2936) = v4[2656];
    uint64_t v909 = *(void *)(a2 + 2944);
    *(unsigned char *)(a1 + 2952) = *(unsigned char *)(a2 + 2952);
    *(void *)(a1 + 2944) = v909;
  }
  v910 = (long long *)(a1 + 2960);
  v911 = (long long *)(a2 + 2960);
  uint64_t v912 = *(void *)(a2 + 2960);
  if (*(void *)(a1 + 2960) == 1)
  {
    if (v912 == 1)
    {
      long long v913 = *v911;
      *(_OWORD *)(a1 + 2969) = *(_OWORD *)(a2 + 2969);
      long long *v910 = v913;
    }
    else
    {
      *(void *)(a1 + 2960) = v912;
      *(unsigned char *)(a1 + 2968) = *(unsigned char *)(a2 + 2968);
      uint64_t v915 = *(void *)(a2 + 2976);
      *(unsigned char *)(a1 + 2984) = *(unsigned char *)(a2 + 2984);
      *(void *)(a1 + 2976) = v915;
      swift_bridgeObjectRetain();
    }
  }
  else if (v912 == 1)
  {
    sub_10009F534(a1 + 2960);
    long long v914 = *(_OWORD *)(a2 + 2969);
    long long *v910 = *v911;
    *(_OWORD *)(a1 + 2969) = v914;
  }
  else
  {
    *(void *)(a1 + 2960) = v912;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 2968) = v4[2688];
    uint64_t v916 = *(void *)(a2 + 2976);
    *(unsigned char *)(a1 + 2984) = *(unsigned char *)(a2 + 2984);
    *(void *)(a1 + 2976) = v916;
  }
  v917 = (long long *)(a1 + 2992);
  v918 = (long long *)(a2 + 2992);
  uint64_t v919 = *(void *)(a2 + 2992);
  if (*(void *)(a1 + 2992) == 1)
  {
    if (v919 == 1)
    {
      long long v920 = *v918;
      *(_OWORD *)(a1 + 3001) = *(_OWORD *)(a2 + 3001);
      long long *v917 = v920;
    }
    else
    {
      *(void *)(a1 + 2992) = v919;
      *(unsigned char *)(a1 + 3000) = *(unsigned char *)(a2 + 3000);
      uint64_t v922 = *(void *)(a2 + 3008);
      *(unsigned char *)(a1 + 3016) = *(unsigned char *)(a2 + 3016);
      *(void *)(a1 + 3008) = v922;
      swift_bridgeObjectRetain();
    }
  }
  else if (v919 == 1)
  {
    sub_10009F534(a1 + 2992);
    long long v921 = *(_OWORD *)(a2 + 3001);
    long long *v917 = *v918;
    *(_OWORD *)(a1 + 3001) = v921;
  }
  else
  {
    *(void *)(a1 + 2992) = v919;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 3000) = v4[2720];
    uint64_t v923 = *(void *)(a2 + 3008);
    *(unsigned char *)(a1 + 3016) = *(unsigned char *)(a2 + 3016);
    *(void *)(a1 + 3008) = v923;
  }
  v924 = (long long *)(a1 + 3024);
  v925 = (long long *)(a2 + 3024);
  uint64_t v926 = *(void *)(a2 + 3024);
  if (*(void *)(a1 + 3024) == 1)
  {
    if (v926 == 1)
    {
      long long v927 = *v925;
      *(_OWORD *)(a1 + 3033) = *(_OWORD *)(a2 + 3033);
      long long *v924 = v927;
    }
    else
    {
      *(void *)(a1 + 3024) = v926;
      *(unsigned char *)(a1 + 3032) = *(unsigned char *)(a2 + 3032);
      uint64_t v929 = *(void *)(a2 + 3040);
      *(unsigned char *)(a1 + 3048) = *(unsigned char *)(a2 + 3048);
      *(void *)(a1 + 3040) = v929;
      swift_bridgeObjectRetain();
    }
  }
  else if (v926 == 1)
  {
    sub_10009F534(a1 + 3024);
    long long v928 = *(_OWORD *)(a2 + 3033);
    long long *v924 = *v925;
    *(_OWORD *)(a1 + 3033) = v928;
  }
  else
  {
    *(void *)(a1 + 3024) = v926;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 3032) = v4[2752];
    uint64_t v930 = *(void *)(a2 + 3040);
    *(unsigned char *)(a1 + 3048) = *(unsigned char *)(a2 + 3048);
    *(void *)(a1 + 3040) = v930;
  }
  v931 = (long long *)(a1 + 3056);
  v932 = (long long *)(a2 + 3056);
  uint64_t v933 = *(void *)(a2 + 3056);
  if (*(void *)(a1 + 3056) == 1)
  {
    if (v933 == 1)
    {
      long long v934 = *v932;
      *(_OWORD *)(a1 + 3065) = *(_OWORD *)(a2 + 3065);
      long long *v931 = v934;
    }
    else
    {
      *(void *)(a1 + 3056) = v933;
      *(unsigned char *)(a1 + 3064) = *(unsigned char *)(a2 + 3064);
      uint64_t v936 = *(void *)(a2 + 3072);
      *(unsigned char *)(a1 + 3080) = *(unsigned char *)(a2 + 3080);
      *(void *)(a1 + 3072) = v936;
      swift_bridgeObjectRetain();
    }
  }
  else if (v933 == 1)
  {
    sub_10009F534(a1 + 3056);
    long long v935 = *(_OWORD *)(a2 + 3065);
    long long *v931 = *v932;
    *(_OWORD *)(a1 + 3065) = v935;
  }
  else
  {
    *(void *)(a1 + 3056) = v933;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 3064) = v4[2784];
    uint64_t v937 = *(void *)(a2 + 3072);
    *(unsigned char *)(a1 + 3080) = *(unsigned char *)(a2 + 3080);
    *(void *)(a1 + 3072) = v937;
  }
  v938 = (long long *)(a1 + 3088);
  v939 = (long long *)(a2 + 3088);
  uint64_t v940 = *(void *)(a2 + 3088);
  if (*(void *)(a1 + 3088) == 1)
  {
    if (v940 == 1)
    {
      long long v941 = *v939;
      *(_OWORD *)(a1 + 3097) = *(_OWORD *)(a2 + 3097);
      long long *v938 = v941;
    }
    else
    {
      *(void *)(a1 + 3088) = v940;
      *(unsigned char *)(a1 + 3096) = *(unsigned char *)(a2 + 3096);
      uint64_t v943 = *(void *)(a2 + 3104);
      *(unsigned char *)(a1 + 3112) = *(unsigned char *)(a2 + 3112);
      *(void *)(a1 + 3104) = v943;
      swift_bridgeObjectRetain();
    }
  }
  else if (v940 == 1)
  {
    sub_10009F534(a1 + 3088);
    long long v942 = *(_OWORD *)(a2 + 3097);
    long long *v938 = *v939;
    *(_OWORD *)(a1 + 3097) = v942;
  }
  else
  {
    *(void *)(a1 + 3088) = v940;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 3096) = v4[2816];
    uint64_t v944 = *(void *)(a2 + 3104);
    *(unsigned char *)(a1 + 3112) = *(unsigned char *)(a2 + 3112);
    *(void *)(a1 + 3104) = v944;
  }
  v945 = (long long *)(a1 + 3120);
  v946 = (long long *)(a2 + 3120);
  uint64_t v947 = *(void *)(a2 + 3120);
  if (*(void *)(a1 + 3120) == 1)
  {
    if (v947 == 1)
    {
      long long v948 = *v946;
      *(_OWORD *)(a1 + 3129) = *(_OWORD *)(a2 + 3129);
      long long *v945 = v948;
    }
    else
    {
      *(void *)(a1 + 3120) = v947;
      *(unsigned char *)(a1 + 3128) = *(unsigned char *)(a2 + 3128);
      uint64_t v950 = *(void *)(a2 + 3136);
      *(unsigned char *)(a1 + 3144) = *(unsigned char *)(a2 + 3144);
      *(void *)(a1 + 3136) = v950;
      swift_bridgeObjectRetain();
    }
  }
  else if (v947 == 1)
  {
    sub_10009F534(a1 + 3120);
    long long v949 = *(_OWORD *)(a2 + 3129);
    long long *v945 = *v946;
    *(_OWORD *)(a1 + 3129) = v949;
  }
  else
  {
    *(void *)(a1 + 3120) = v947;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 3128) = v4[2848];
    uint64_t v951 = *(void *)(a2 + 3136);
    *(unsigned char *)(a1 + 3144) = *(unsigned char *)(a2 + 3144);
    *(void *)(a1 + 3136) = v951;
  }
  v952 = (long long *)(a1 + 3152);
  v953 = (long long *)(a2 + 3152);
  uint64_t v954 = *(void *)(a2 + 3152);
  if (*(void *)(a1 + 3152) == 1)
  {
    if (v954 == 1)
    {
      long long v955 = *v953;
      *(_OWORD *)(a1 + 3161) = *(_OWORD *)(a2 + 3161);
      long long *v952 = v955;
    }
    else
    {
      *(void *)(a1 + 3152) = v954;
      *(unsigned char *)(a1 + 3160) = *(unsigned char *)(a2 + 3160);
      uint64_t v957 = *(void *)(a2 + 3168);
      *(unsigned char *)(a1 + 3176) = *(unsigned char *)(a2 + 3176);
      *(void *)(a1 + 3168) = v957;
      swift_bridgeObjectRetain();
    }
  }
  else if (v954 == 1)
  {
    sub_10009F534(a1 + 3152);
    long long v956 = *(_OWORD *)(a2 + 3161);
    long long *v952 = *v953;
    *(_OWORD *)(a1 + 3161) = v956;
  }
  else
  {
    *(void *)(a1 + 3152) = v954;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 3160) = v4[2880];
    uint64_t v958 = *(void *)(a2 + 3168);
    *(unsigned char *)(a1 + 3176) = *(unsigned char *)(a2 + 3176);
    *(void *)(a1 + 3168) = v958;
  }
  v959 = (long long *)(a1 + 3184);
  v960 = (long long *)(a2 + 3184);
  uint64_t v961 = *(void *)(a2 + 3184);
  if (*(void *)(a1 + 3184) == 1)
  {
    if (v961 == 1)
    {
      long long v962 = *v960;
      *(_OWORD *)(a1 + 3193) = *(_OWORD *)(a2 + 3193);
      long long *v959 = v962;
    }
    else
    {
      *(void *)(a1 + 3184) = v961;
      *(unsigned char *)(a1 + 3192) = *(unsigned char *)(a2 + 3192);
      uint64_t v964 = *(void *)(a2 + 3200);
      *(unsigned char *)(a1 + 3208) = *(unsigned char *)(a2 + 3208);
      *(void *)(a1 + 3200) = v964;
      swift_bridgeObjectRetain();
    }
  }
  else if (v961 == 1)
  {
    sub_10009F534(a1 + 3184);
    long long v963 = *(_OWORD *)(a2 + 3193);
    long long *v959 = *v960;
    *(_OWORD *)(a1 + 3193) = v963;
  }
  else
  {
    *(void *)(a1 + 3184) = v961;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 3192) = v4[2912];
    uint64_t v965 = *(void *)(a2 + 3200);
    *(unsigned char *)(a1 + 3208) = *(unsigned char *)(a2 + 3208);
    *(void *)(a1 + 3200) = v965;
  }
  v966 = (long long *)(a1 + 3216);
  v967 = (long long *)(a2 + 3216);
  uint64_t v968 = *(void *)(a2 + 3216);
  if (*(void *)(a1 + 3216) == 1)
  {
    if (v968 == 1)
    {
      long long v969 = *v967;
      *(_OWORD *)(a1 + 3225) = *(_OWORD *)(a2 + 3225);
      long long *v966 = v969;
    }
    else
    {
      *(void *)(a1 + 3216) = v968;
      *(unsigned char *)(a1 + 3224) = *(unsigned char *)(a2 + 3224);
      uint64_t v971 = *(void *)(a2 + 3232);
      *(unsigned char *)(a1 + 3240) = *(unsigned char *)(a2 + 3240);
      *(void *)(a1 + 3232) = v971;
      swift_bridgeObjectRetain();
    }
  }
  else if (v968 == 1)
  {
    sub_10009F534(a1 + 3216);
    long long v970 = *(_OWORD *)(a2 + 3225);
    long long *v966 = *v967;
    *(_OWORD *)(a1 + 3225) = v970;
  }
  else
  {
    *(void *)(a1 + 3216) = v968;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 3224) = v4[2944];
    uint64_t v972 = *(void *)(a2 + 3232);
    *(unsigned char *)(a1 + 3240) = *(unsigned char *)(a2 + 3240);
    *(void *)(a1 + 3232) = v972;
  }
  v973 = (long long *)(a1 + 3248);
  v974 = (long long *)(a2 + 3248);
  uint64_t v975 = *(void *)(a2 + 3248);
  if (*(void *)(a1 + 3248) == 1)
  {
    if (v975 == 1)
    {
      long long v976 = *v974;
      *(_OWORD *)(a1 + 3257) = *(_OWORD *)(a2 + 3257);
      long long *v973 = v976;
    }
    else
    {
      *(void *)(a1 + 3248) = v975;
      *(unsigned char *)(a1 + 3256) = *(unsigned char *)(a2 + 3256);
      uint64_t v978 = *(void *)(a2 + 3264);
      *(unsigned char *)(a1 + 3272) = *(unsigned char *)(a2 + 3272);
      *(void *)(a1 + 3264) = v978;
      swift_bridgeObjectRetain();
    }
  }
  else if (v975 == 1)
  {
    sub_10009F534(a1 + 3248);
    long long v977 = *(_OWORD *)(a2 + 3257);
    long long *v973 = *v974;
    *(_OWORD *)(a1 + 3257) = v977;
  }
  else
  {
    *(void *)(a1 + 3248) = v975;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 3256) = v4[2976];
    uint64_t v979 = *(void *)(a2 + 3264);
    *(unsigned char *)(a1 + 3272) = *(unsigned char *)(a2 + 3272);
    *(void *)(a1 + 3264) = v979;
  }
  long long v980 = *(_OWORD *)(a2 + 3280);
  *(unsigned char *)(a1 + 3296) = *(unsigned char *)(a2 + 3296);
  *(_OWORD *)(a1 + 3280) = v980;
  long long v981 = *(_OWORD *)(a2 + 3304);
  *(unsigned char *)(a1 + 3320) = *(unsigned char *)(a2 + 3320);
  *(_OWORD *)(a1 + 3304) = v981;
  *(unsigned char *)(a1 + 3321) = *(unsigned char *)(a2 + 3321);
  *(unsigned char *)(a1 + 3322) = *(unsigned char *)(a2 + 3322);
  *(unsigned char *)(a1 + 3323) = *(unsigned char *)(a2 + 3323);
  *(unsigned char *)(a1 + 3324) = *(unsigned char *)(a2 + 3324);
  *(unsigned char *)(a1 + 3325) = *(unsigned char *)(a2 + 3325);
  *(unsigned char *)(a1 + 3326) = *(unsigned char *)(a2 + 3326);
  *(unsigned char *)(a1 + 3327) = *(unsigned char *)(a2 + 3327);
  *(void *)(a1 + 3328) = *(void *)(a2 + 3328);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 3336) = *(void *)(a2 + 3336);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_989:
  v982 = (unsigned char *)(a2 + 4376);
  v983 = (long long *)(a1 + 3344);
  v984 = (long long *)(a2 + 3344);
  uint64_t v985 = *(void *)(a2 + 4160);
  if (*(void *)(a1 + 4160) == 1)
  {
    if (v985 != 1)
    {
      if (*(void *)v984 == 1)
      {
        long long v986 = *v984;
        *(_OWORD *)(a1 + 3353) = *(_OWORD *)(a2 + 3353);
        long long *v983 = v986;
      }
      else
      {
        *(void *)(a1 + 3344) = *(void *)v984;
        *(unsigned char *)(a1 + 3352) = *(unsigned char *)(a2 + 3352);
        uint64_t v989 = *(void *)(a2 + 3360);
        *(unsigned char *)(a1 + 3368) = *(unsigned char *)(a2 + 3368);
        *(void *)(a1 + 3360) = v989;
        swift_bridgeObjectRetain();
      }
      uint64_t v990 = *(void *)(a2 + 3376);
      if (v990 == 1)
      {
        long long v991 = *(_OWORD *)(a2 + 3376);
        *(_OWORD *)(a1 + 3385) = *(_OWORD *)(a2 + 3385);
        *(_OWORD *)(a1 + 3376) = v991;
      }
      else
      {
        *(void *)(a1 + 3376) = v990;
        *(unsigned char *)(a1 + 3384) = *(unsigned char *)(a2 + 3384);
        uint64_t v993 = *(void *)(a2 + 3392);
        *(unsigned char *)(a1 + 3400) = *(unsigned char *)(a2 + 3400);
        *(void *)(a1 + 3392) = v993;
        swift_bridgeObjectRetain();
      }
      uint64_t v994 = *(void *)(a2 + 3408);
      if (v994 == 1)
      {
        long long v995 = *(_OWORD *)(a2 + 3408);
        *(_OWORD *)(a1 + 3417) = *(_OWORD *)(a2 + 3417);
        *(_OWORD *)(a1 + 3408) = v995;
      }
      else
      {
        *(void *)(a1 + 3408) = v994;
        *(unsigned char *)(a1 + 3416) = *(unsigned char *)(a2 + 3416);
        uint64_t v996 = *(void *)(a2 + 3424);
        *(unsigned char *)(a1 + 3432) = *(unsigned char *)(a2 + 3432);
        *(void *)(a1 + 3424) = v996;
        swift_bridgeObjectRetain();
      }
      uint64_t v997 = *(void *)(a2 + 3440);
      if (v997 == 1)
      {
        long long v998 = *(_OWORD *)(a2 + 3440);
        *(_OWORD *)(a1 + 3449) = *(_OWORD *)(a2 + 3449);
        *(_OWORD *)(a1 + 3440) = v998;
      }
      else
      {
        *(void *)(a1 + 3440) = v997;
        *(unsigned char *)(a1 + 3448) = *(unsigned char *)(a2 + 3448);
        uint64_t v999 = *(void *)(a2 + 3456);
        *(unsigned char *)(a1 + 3464) = *(unsigned char *)(a2 + 3464);
        *(void *)(a1 + 3456) = v999;
        swift_bridgeObjectRetain();
      }
      uint64_t v1000 = *(void *)(a2 + 3472);
      if (v1000 == 1)
      {
        long long v1001 = *(_OWORD *)(a2 + 3472);
        *(_OWORD *)(a1 + 3481) = *(_OWORD *)(a2 + 3481);
        *(_OWORD *)(a1 + 3472) = v1001;
      }
      else
      {
        *(void *)(a1 + 3472) = v1000;
        *(unsigned char *)(a1 + 3480) = *(unsigned char *)(a2 + 3480);
        uint64_t v1002 = *(void *)(a2 + 3488);
        *(unsigned char *)(a1 + 3496) = *(unsigned char *)(a2 + 3496);
        *(void *)(a1 + 3488) = v1002;
        swift_bridgeObjectRetain();
      }
      uint64_t v1003 = *(void *)(a2 + 3504);
      if (v1003 == 1)
      {
        long long v1004 = *(_OWORD *)(a2 + 3504);
        *(_OWORD *)(a1 + 3513) = *(_OWORD *)(a2 + 3513);
        *(_OWORD *)(a1 + 3504) = v1004;
      }
      else
      {
        *(void *)(a1 + 3504) = v1003;
        *(unsigned char *)(a1 + 3512) = *(unsigned char *)(a2 + 3512);
        uint64_t v1005 = *(void *)(a2 + 3520);
        *(unsigned char *)(a1 + 3528) = *(unsigned char *)(a2 + 3528);
        *(void *)(a1 + 3520) = v1005;
        swift_bridgeObjectRetain();
      }
      uint64_t v1006 = *(void *)(a2 + 3536);
      if (v1006 == 1)
      {
        long long v1007 = *(_OWORD *)(a2 + 3536);
        *(_OWORD *)(a1 + 3545) = *(_OWORD *)(a2 + 3545);
        *(_OWORD *)(a1 + 3536) = v1007;
      }
      else
      {
        *(void *)(a1 + 3536) = v1006;
        *(unsigned char *)(a1 + 3544) = *(unsigned char *)(a2 + 3544);
        uint64_t v1008 = *(void *)(a2 + 3552);
        *(unsigned char *)(a1 + 3560) = *(unsigned char *)(a2 + 3560);
        *(void *)(a1 + 3552) = v1008;
        swift_bridgeObjectRetain();
      }
      uint64_t v1009 = *(void *)(a2 + 3568);
      if (v1009 == 1)
      {
        long long v1010 = *(_OWORD *)(a2 + 3568);
        *(_OWORD *)(a1 + 3577) = *(_OWORD *)(a2 + 3577);
        *(_OWORD *)(a1 + 3568) = v1010;
      }
      else
      {
        *(void *)(a1 + 3568) = v1009;
        *(unsigned char *)(a1 + 3576) = *(unsigned char *)(a2 + 3576);
        uint64_t v1011 = *(void *)(a2 + 3584);
        *(unsigned char *)(a1 + 3592) = *(unsigned char *)(a2 + 3592);
        *(void *)(a1 + 3584) = v1011;
        swift_bridgeObjectRetain();
      }
      uint64_t v1012 = *(void *)(a2 + 3600);
      if (v1012 == 1)
      {
        long long v1013 = *(_OWORD *)(a2 + 3600);
        *(_OWORD *)(a1 + 3609) = *(_OWORD *)(a2 + 3609);
        *(_OWORD *)(a1 + 3600) = v1013;
      }
      else
      {
        *(void *)(a1 + 3600) = v1012;
        *(unsigned char *)(a1 + 3608) = *(unsigned char *)(a2 + 3608);
        uint64_t v1014 = *(void *)(a2 + 3616);
        *(unsigned char *)(a1 + 3624) = *(unsigned char *)(a2 + 3624);
        *(void *)(a1 + 3616) = v1014;
        swift_bridgeObjectRetain();
      }
      uint64_t v1015 = *(void *)(a2 + 3632);
      if (v1015 == 1)
      {
        long long v1016 = *(_OWORD *)(a2 + 3632);
        *(_OWORD *)(a1 + 3641) = *(_OWORD *)(a2 + 3641);
        *(_OWORD *)(a1 + 3632) = v1016;
      }
      else
      {
        *(void *)(a1 + 3632) = v1015;
        *(unsigned char *)(a1 + 3640) = *(unsigned char *)(a2 + 3640);
        uint64_t v1017 = *(void *)(a2 + 3648);
        *(unsigned char *)(a1 + 3656) = *(unsigned char *)(a2 + 3656);
        *(void *)(a1 + 3648) = v1017;
        swift_bridgeObjectRetain();
      }
      uint64_t v1018 = *(void *)(a2 + 3664);
      if (v1018 == 1)
      {
        long long v1019 = *(_OWORD *)(a2 + 3664);
        *(_OWORD *)(a1 + 3673) = *(_OWORD *)(a2 + 3673);
        *(_OWORD *)(a1 + 3664) = v1019;
      }
      else
      {
        *(void *)(a1 + 3664) = v1018;
        *(unsigned char *)(a1 + 3672) = *(unsigned char *)(a2 + 3672);
        uint64_t v1020 = *(void *)(a2 + 3680);
        *(unsigned char *)(a1 + 3688) = *(unsigned char *)(a2 + 3688);
        *(void *)(a1 + 3680) = v1020;
        swift_bridgeObjectRetain();
      }
      uint64_t v1021 = *(void *)(a2 + 3696);
      if (v1021 == 1)
      {
        long long v1022 = *(_OWORD *)(a2 + 3696);
        *(_OWORD *)(a1 + 3705) = *(_OWORD *)(a2 + 3705);
        *(_OWORD *)(a1 + 3696) = v1022;
      }
      else
      {
        *(void *)(a1 + 3696) = v1021;
        *(unsigned char *)(a1 + 3704) = *(unsigned char *)(a2 + 3704);
        uint64_t v1023 = *(void *)(a2 + 3712);
        *(unsigned char *)(a1 + 3720) = *(unsigned char *)(a2 + 3720);
        *(void *)(a1 + 3712) = v1023;
        swift_bridgeObjectRetain();
      }
      uint64_t v1024 = *(void *)(a2 + 3728);
      if (v1024 == 1)
      {
        long long v1025 = *(_OWORD *)(a2 + 3728);
        *(_OWORD *)(a1 + 3737) = *(_OWORD *)(a2 + 3737);
        *(_OWORD *)(a1 + 3728) = v1025;
      }
      else
      {
        *(void *)(a1 + 3728) = v1024;
        *(unsigned char *)(a1 + 3736) = *(unsigned char *)(a2 + 3736);
        uint64_t v1026 = *(void *)(a2 + 3744);
        *(unsigned char *)(a1 + 3752) = *(unsigned char *)(a2 + 3752);
        *(void *)(a1 + 3744) = v1026;
        swift_bridgeObjectRetain();
      }
      uint64_t v1027 = *(void *)(a2 + 3760);
      if (v1027 == 1)
      {
        long long v1028 = *(_OWORD *)(a2 + 3760);
        *(_OWORD *)(a1 + 3769) = *(_OWORD *)(a2 + 3769);
        *(_OWORD *)(a1 + 3760) = v1028;
      }
      else
      {
        *(void *)(a1 + 3760) = v1027;
        *(unsigned char *)(a1 + 3768) = *(unsigned char *)(a2 + 3768);
        uint64_t v1029 = *(void *)(a2 + 3776);
        *(unsigned char *)(a1 + 3784) = *(unsigned char *)(a2 + 3784);
        *(void *)(a1 + 3776) = v1029;
        swift_bridgeObjectRetain();
      }
      uint64_t v1030 = *(void *)(a2 + 3792);
      if (v1030 == 1)
      {
        long long v1031 = *(_OWORD *)(a2 + 3792);
        *(_OWORD *)(a1 + 3801) = *(_OWORD *)(a2 + 3801);
        *(_OWORD *)(a1 + 3792) = v1031;
      }
      else
      {
        *(void *)(a1 + 3792) = v1030;
        *(unsigned char *)(a1 + 3800) = *(unsigned char *)(a2 + 3800);
        uint64_t v1032 = *(void *)(a2 + 3808);
        *(unsigned char *)(a1 + 3816) = *(unsigned char *)(a2 + 3816);
        *(void *)(a1 + 3808) = v1032;
        swift_bridgeObjectRetain();
      }
      uint64_t v1033 = *(void *)(a2 + 3824);
      if (v1033 == 1)
      {
        long long v1034 = *(_OWORD *)(a2 + 3824);
        *(_OWORD *)(a1 + 3833) = *(_OWORD *)(a2 + 3833);
        *(_OWORD *)(a1 + 3824) = v1034;
      }
      else
      {
        *(void *)(a1 + 3824) = v1033;
        *(unsigned char *)(a1 + 3832) = *(unsigned char *)(a2 + 3832);
        uint64_t v1035 = *(void *)(a2 + 3840);
        *(unsigned char *)(a1 + 3848) = *(unsigned char *)(a2 + 3848);
        *(void *)(a1 + 3840) = v1035;
        swift_bridgeObjectRetain();
      }
      uint64_t v1036 = *(void *)(a2 + 3856);
      if (v1036 == 1)
      {
        long long v1037 = *(_OWORD *)(a2 + 3856);
        *(_OWORD *)(a1 + 3865) = *(_OWORD *)(a2 + 3865);
        *(_OWORD *)(a1 + 3856) = v1037;
      }
      else
      {
        *(void *)(a1 + 3856) = v1036;
        *(unsigned char *)(a1 + 3864) = *(unsigned char *)(a2 + 3864);
        uint64_t v1038 = *(void *)(a2 + 3872);
        *(unsigned char *)(a1 + 3880) = *(unsigned char *)(a2 + 3880);
        *(void *)(a1 + 3872) = v1038;
        swift_bridgeObjectRetain();
      }
      uint64_t v1039 = *(void *)(a2 + 3888);
      if (v1039 == 1)
      {
        long long v1040 = *(_OWORD *)(a2 + 3888);
        *(_OWORD *)(a1 + 3897) = *(_OWORD *)(a2 + 3897);
        *(_OWORD *)(a1 + 3888) = v1040;
      }
      else
      {
        *(void *)(a1 + 3888) = v1039;
        *(unsigned char *)(a1 + 3896) = *(unsigned char *)(a2 + 3896);
        uint64_t v1041 = *(void *)(a2 + 3904);
        *(unsigned char *)(a1 + 3912) = *(unsigned char *)(a2 + 3912);
        *(void *)(a1 + 3904) = v1041;
        swift_bridgeObjectRetain();
      }
      uint64_t v1042 = *(void *)(a2 + 3920);
      if (v1042 == 1)
      {
        long long v1043 = *(_OWORD *)(a2 + 3920);
        *(_OWORD *)(a1 + 3929) = *(_OWORD *)(a2 + 3929);
        *(_OWORD *)(a1 + 3920) = v1043;
      }
      else
      {
        *(void *)(a1 + 3920) = v1042;
        *(unsigned char *)(a1 + 3928) = *(unsigned char *)(a2 + 3928);
        uint64_t v1044 = *(void *)(a2 + 3936);
        *(unsigned char *)(a1 + 3944) = *(unsigned char *)(a2 + 3944);
        *(void *)(a1 + 3936) = v1044;
        swift_bridgeObjectRetain();
      }
      uint64_t v1045 = *(void *)(a2 + 3952);
      if (v1045 == 1)
      {
        long long v1046 = *(_OWORD *)(a2 + 3952);
        *(_OWORD *)(a1 + 3961) = *(_OWORD *)(a2 + 3961);
        *(_OWORD *)(a1 + 3952) = v1046;
      }
      else
      {
        *(void *)(a1 + 3952) = v1045;
        *(unsigned char *)(a1 + 3960) = *(unsigned char *)(a2 + 3960);
        uint64_t v1047 = *(void *)(a2 + 3968);
        *(unsigned char *)(a1 + 3976) = *(unsigned char *)(a2 + 3976);
        *(void *)(a1 + 3968) = v1047;
        swift_bridgeObjectRetain();
      }
      uint64_t v1048 = *(void *)(a2 + 3984);
      if (v1048 == 1)
      {
        long long v1049 = *(_OWORD *)(a2 + 3984);
        *(_OWORD *)(a1 + 3993) = *(_OWORD *)(a2 + 3993);
        *(_OWORD *)(a1 + 3984) = v1049;
      }
      else
      {
        *(void *)(a1 + 3984) = v1048;
        *(unsigned char *)(a1 + 3992) = *(unsigned char *)(a2 + 3992);
        uint64_t v1050 = *(void *)(a2 + 4000);
        *(unsigned char *)(a1 + 4008) = *(unsigned char *)(a2 + 4008);
        *(void *)(a1 + 4000) = v1050;
        swift_bridgeObjectRetain();
      }
      uint64_t v1051 = *(void *)(a2 + 4016);
      if (v1051 == 1)
      {
        long long v1052 = *(_OWORD *)(a2 + 4016);
        *(_OWORD *)(a1 + 4025) = *(_OWORD *)(a2 + 4025);
        *(_OWORD *)(a1 + 4016) = v1052;
      }
      else
      {
        *(void *)(a1 + 4016) = v1051;
        *(unsigned char *)(a1 + 4024) = *(unsigned char *)(a2 + 4024);
        uint64_t v1053 = *(void *)(a2 + 4032);
        *(unsigned char *)(a1 + 4040) = *(unsigned char *)(a2 + 4040);
        *(void *)(a1 + 4032) = v1053;
        swift_bridgeObjectRetain();
      }
      uint64_t v1054 = *(void *)(a2 + 4048);
      if (v1054 == 1)
      {
        long long v1055 = *(_OWORD *)(a2 + 4048);
        *(_OWORD *)(a1 + 4057) = *(_OWORD *)(a2 + 4057);
        *(_OWORD *)(a1 + 4048) = v1055;
      }
      else
      {
        *(void *)(a1 + 4048) = v1054;
        *(unsigned char *)(a1 + 4056) = *(unsigned char *)(a2 + 4056);
        uint64_t v1056 = *(void *)(a2 + 4064);
        *(unsigned char *)(a1 + 4072) = *(unsigned char *)(a2 + 4072);
        *(void *)(a1 + 4064) = v1056;
        swift_bridgeObjectRetain();
      }
      uint64_t v1057 = *(void *)(a2 + 4080);
      if (v1057 == 1)
      {
        long long v1058 = *(_OWORD *)(a2 + 4080);
        *(_OWORD *)(a1 + 4089) = *(_OWORD *)(a2 + 4089);
        *(_OWORD *)(a1 + 4080) = v1058;
      }
      else
      {
        *(void *)(a1 + 4080) = v1057;
        *(unsigned char *)(a1 + 4088) = *(unsigned char *)(a2 + 4088);
        uint64_t v1059 = *(void *)(a2 + 4096);
        *(unsigned char *)(a1 + 4104) = *(unsigned char *)(a2 + 4104);
        *(void *)(a1 + 4096) = v1059;
        swift_bridgeObjectRetain();
      }
      long long v1060 = *(_OWORD *)(a2 + 4112);
      *(unsigned char *)(a1 + 4128) = *(unsigned char *)(a2 + 4128);
      *(_OWORD *)(a1 + 4112) = v1060;
      char v1061 = *(unsigned char *)(a2 + 4152);
      *(_OWORD *)(a1 + 4136) = *(_OWORD *)(a2 + 4136);
      *(unsigned char *)(a1 + 4152) = v1061;
      unsigned char *v737 = v4[3873];
      *(unsigned char *)(a1 + 4154) = v4[3874];
      *(unsigned char *)(a1 + 4155) = v4[3875];
      *(unsigned char *)(a1 + 4156) = v4[3876];
      *(unsigned char *)(a1 + 4157) = v4[3877];
      *(unsigned char *)(a1 + 4158) = v4[3878];
      *(unsigned char *)(a1 + 4159) = v4[3879];
      *(void *)(a1 + 4160) = *(void *)(a2 + 4160);
      *(void *)(a1 + 4168) = *(void *)(a2 + 4168);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_1236;
    }
LABEL_995:
    memcpy((void *)(a1 + 3344), (const void *)(a2 + 3344), 0x340uLL);
    goto LABEL_1236;
  }
  if (v985 == 1)
  {
    sub_10009F560((void *)(a1 + 3344));
    goto LABEL_995;
  }
  uint64_t v987 = *(void *)v984;
  if (*(void *)v983 == 1)
  {
    if (v987 == 1)
    {
      long long v988 = *v984;
      *(_OWORD *)(a1 + 3353) = *(_OWORD *)(a2 + 3353);
      long long *v983 = v988;
    }
    else
    {
      *(void *)(a1 + 3344) = v987;
      *(unsigned char *)(a1 + 3352) = *(unsigned char *)(a2 + 3352);
      uint64_t v1062 = *(void *)(a2 + 3360);
      *(unsigned char *)(a1 + 3368) = *(unsigned char *)(a2 + 3368);
      *(void *)(a1 + 3360) = v1062;
      swift_bridgeObjectRetain();
    }
  }
  else if (v987 == 1)
  {
    sub_10009F534(a1 + 3344);
    long long v992 = *(_OWORD *)(a2 + 3353);
    long long *v983 = *v984;
    *(_OWORD *)(a1 + 3353) = v992;
  }
  else
  {
    *(void *)(a1 + 3344) = v987;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 3352) = v4[3072];
    uint64_t v1063 = *(void *)(a2 + 3360);
    *(unsigned char *)(a1 + 3368) = *(unsigned char *)(a2 + 3368);
    *(void *)(a1 + 3360) = v1063;
  }
  v1064 = (long long *)(a1 + 3376);
  v1065 = (long long *)(a2 + 3376);
  uint64_t v1066 = *(void *)(a2 + 3376);
  if (*(void *)(a1 + 3376) == 1)
  {
    if (v1066 == 1)
    {
      long long v1067 = *v1065;
      *(_OWORD *)(a1 + 3385) = *(_OWORD *)(a2 + 3385);
      long long *v1064 = v1067;
    }
    else
    {
      *(void *)(a1 + 3376) = v1066;
      *(unsigned char *)(a1 + 3384) = *(unsigned char *)(a2 + 3384);
      uint64_t v1069 = *(void *)(a2 + 3392);
      *(unsigned char *)(a1 + 3400) = *(unsigned char *)(a2 + 3400);
      *(void *)(a1 + 3392) = v1069;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1066 == 1)
  {
    sub_10009F534(a1 + 3376);
    long long v1068 = *(_OWORD *)(a2 + 3385);
    long long *v1064 = *v1065;
    *(_OWORD *)(a1 + 3385) = v1068;
  }
  else
  {
    *(void *)(a1 + 3376) = v1066;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 3384) = v4[3104];
    uint64_t v1070 = *(void *)(a2 + 3392);
    *(unsigned char *)(a1 + 3400) = *(unsigned char *)(a2 + 3400);
    *(void *)(a1 + 3392) = v1070;
  }
  v1071 = (long long *)(a1 + 3408);
  v1072 = (long long *)(a2 + 3408);
  uint64_t v1073 = *(void *)(a2 + 3408);
  if (*(void *)(a1 + 3408) == 1)
  {
    if (v1073 == 1)
    {
      long long v1074 = *v1072;
      *(_OWORD *)(a1 + 3417) = *(_OWORD *)(a2 + 3417);
      long long *v1071 = v1074;
    }
    else
    {
      *(void *)(a1 + 3408) = v1073;
      *(unsigned char *)(a1 + 3416) = *(unsigned char *)(a2 + 3416);
      uint64_t v1076 = *(void *)(a2 + 3424);
      *(unsigned char *)(a1 + 3432) = *(unsigned char *)(a2 + 3432);
      *(void *)(a1 + 3424) = v1076;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1073 == 1)
  {
    sub_10009F534(a1 + 3408);
    long long v1075 = *(_OWORD *)(a2 + 3417);
    long long *v1071 = *v1072;
    *(_OWORD *)(a1 + 3417) = v1075;
  }
  else
  {
    *(void *)(a1 + 3408) = v1073;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 3416) = v4[3136];
    uint64_t v1077 = *(void *)(a2 + 3424);
    *(unsigned char *)(a1 + 3432) = *(unsigned char *)(a2 + 3432);
    *(void *)(a1 + 3424) = v1077;
  }
  v1078 = (long long *)(a1 + 3440);
  v1079 = (long long *)(a2 + 3440);
  uint64_t v1080 = *(void *)(a2 + 3440);
  if (*(void *)(a1 + 3440) == 1)
  {
    if (v1080 == 1)
    {
      long long v1081 = *v1079;
      *(_OWORD *)(a1 + 3449) = *(_OWORD *)(a2 + 3449);
      long long *v1078 = v1081;
    }
    else
    {
      *(void *)(a1 + 3440) = v1080;
      *(unsigned char *)(a1 + 3448) = *(unsigned char *)(a2 + 3448);
      uint64_t v1083 = *(void *)(a2 + 3456);
      *(unsigned char *)(a1 + 3464) = *(unsigned char *)(a2 + 3464);
      *(void *)(a1 + 3456) = v1083;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1080 == 1)
  {
    sub_10009F534(a1 + 3440);
    long long v1082 = *(_OWORD *)(a2 + 3449);
    long long *v1078 = *v1079;
    *(_OWORD *)(a1 + 3449) = v1082;
  }
  else
  {
    *(void *)(a1 + 3440) = v1080;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 3448) = v4[3168];
    uint64_t v1084 = *(void *)(a2 + 3456);
    *(unsigned char *)(a1 + 3464) = *(unsigned char *)(a2 + 3464);
    *(void *)(a1 + 3456) = v1084;
  }
  v1085 = (long long *)(a1 + 3472);
  v1086 = (long long *)(a2 + 3472);
  uint64_t v1087 = *(void *)(a2 + 3472);
  if (*(void *)(a1 + 3472) == 1)
  {
    if (v1087 == 1)
    {
      long long v1088 = *v1086;
      *(_OWORD *)(a1 + 3481) = *(_OWORD *)(a2 + 3481);
      long long *v1085 = v1088;
    }
    else
    {
      *(void *)(a1 + 3472) = v1087;
      *(unsigned char *)(a1 + 3480) = *(unsigned char *)(a2 + 3480);
      uint64_t v1090 = *(void *)(a2 + 3488);
      *(unsigned char *)(a1 + 3496) = *(unsigned char *)(a2 + 3496);
      *(void *)(a1 + 3488) = v1090;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1087 == 1)
  {
    sub_10009F534(a1 + 3472);
    long long v1089 = *(_OWORD *)(a2 + 3481);
    long long *v1085 = *v1086;
    *(_OWORD *)(a1 + 3481) = v1089;
  }
  else
  {
    *(void *)(a1 + 3472) = v1087;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 3480) = v4[3200];
    uint64_t v1091 = *(void *)(a2 + 3488);
    *(unsigned char *)(a1 + 3496) = *(unsigned char *)(a2 + 3496);
    *(void *)(a1 + 3488) = v1091;
  }
  v1092 = (long long *)(a1 + 3504);
  v1093 = (long long *)(a2 + 3504);
  uint64_t v1094 = *(void *)(a2 + 3504);
  if (*(void *)(a1 + 3504) == 1)
  {
    if (v1094 == 1)
    {
      long long v1095 = *v1093;
      *(_OWORD *)(a1 + 3513) = *(_OWORD *)(a2 + 3513);
      long long *v1092 = v1095;
    }
    else
    {
      *(void *)(a1 + 3504) = v1094;
      *(unsigned char *)(a1 + 3512) = *(unsigned char *)(a2 + 3512);
      uint64_t v1097 = *(void *)(a2 + 3520);
      *(unsigned char *)(a1 + 3528) = *(unsigned char *)(a2 + 3528);
      *(void *)(a1 + 3520) = v1097;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1094 == 1)
  {
    sub_10009F534(a1 + 3504);
    long long v1096 = *(_OWORD *)(a2 + 3513);
    long long *v1092 = *v1093;
    *(_OWORD *)(a1 + 3513) = v1096;
  }
  else
  {
    *(void *)(a1 + 3504) = v1094;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 3512) = v4[3232];
    uint64_t v1098 = *(void *)(a2 + 3520);
    *(unsigned char *)(a1 + 3528) = *(unsigned char *)(a2 + 3528);
    *(void *)(a1 + 3520) = v1098;
  }
  v1099 = (long long *)(a1 + 3536);
  v1100 = (long long *)(a2 + 3536);
  uint64_t v1101 = *(void *)(a2 + 3536);
  if (*(void *)(a1 + 3536) == 1)
  {
    if (v1101 == 1)
    {
      long long v1102 = *v1100;
      *(_OWORD *)(a1 + 3545) = *(_OWORD *)(a2 + 3545);
      long long *v1099 = v1102;
    }
    else
    {
      *(void *)(a1 + 3536) = v1101;
      *(unsigned char *)(a1 + 3544) = *(unsigned char *)(a2 + 3544);
      uint64_t v1104 = *(void *)(a2 + 3552);
      *(unsigned char *)(a1 + 3560) = *(unsigned char *)(a2 + 3560);
      *(void *)(a1 + 3552) = v1104;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1101 == 1)
  {
    sub_10009F534(a1 + 3536);
    long long v1103 = *(_OWORD *)(a2 + 3545);
    long long *v1099 = *v1100;
    *(_OWORD *)(a1 + 3545) = v1103;
  }
  else
  {
    *(void *)(a1 + 3536) = v1101;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 3544) = v4[3264];
    uint64_t v1105 = *(void *)(a2 + 3552);
    *(unsigned char *)(a1 + 3560) = *(unsigned char *)(a2 + 3560);
    *(void *)(a1 + 3552) = v1105;
  }
  v1106 = (long long *)(a1 + 3568);
  v1107 = (long long *)(a2 + 3568);
  uint64_t v1108 = *(void *)(a2 + 3568);
  if (*(void *)(a1 + 3568) == 1)
  {
    if (v1108 == 1)
    {
      long long v1109 = *v1107;
      *(_OWORD *)(a1 + 3577) = *(_OWORD *)(a2 + 3577);
      long long *v1106 = v1109;
    }
    else
    {
      *(void *)(a1 + 3568) = v1108;
      *(unsigned char *)(a1 + 3576) = *(unsigned char *)(a2 + 3576);
      uint64_t v1111 = *(void *)(a2 + 3584);
      *(unsigned char *)(a1 + 3592) = *(unsigned char *)(a2 + 3592);
      *(void *)(a1 + 3584) = v1111;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1108 == 1)
  {
    sub_10009F534(a1 + 3568);
    long long v1110 = *(_OWORD *)(a2 + 3577);
    long long *v1106 = *v1107;
    *(_OWORD *)(a1 + 3577) = v1110;
  }
  else
  {
    *(void *)(a1 + 3568) = v1108;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 3576) = v4[3296];
    uint64_t v1112 = *(void *)(a2 + 3584);
    *(unsigned char *)(a1 + 3592) = *(unsigned char *)(a2 + 3592);
    *(void *)(a1 + 3584) = v1112;
  }
  v1113 = (long long *)(a1 + 3600);
  v1114 = (long long *)(a2 + 3600);
  uint64_t v1115 = *(void *)(a2 + 3600);
  if (*(void *)(a1 + 3600) == 1)
  {
    if (v1115 == 1)
    {
      long long v1116 = *v1114;
      *(_OWORD *)(a1 + 3609) = *(_OWORD *)(a2 + 3609);
      long long *v1113 = v1116;
    }
    else
    {
      *(void *)(a1 + 3600) = v1115;
      *(unsigned char *)(a1 + 3608) = *(unsigned char *)(a2 + 3608);
      uint64_t v1118 = *(void *)(a2 + 3616);
      *(unsigned char *)(a1 + 3624) = *(unsigned char *)(a2 + 3624);
      *(void *)(a1 + 3616) = v1118;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1115 == 1)
  {
    sub_10009F534(a1 + 3600);
    long long v1117 = *(_OWORD *)(a2 + 3609);
    long long *v1113 = *v1114;
    *(_OWORD *)(a1 + 3609) = v1117;
  }
  else
  {
    *(void *)(a1 + 3600) = v1115;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 3608) = v4[3328];
    uint64_t v1119 = *(void *)(a2 + 3616);
    *(unsigned char *)(a1 + 3624) = *(unsigned char *)(a2 + 3624);
    *(void *)(a1 + 3616) = v1119;
  }
  v1120 = (long long *)(a1 + 3632);
  v1121 = (long long *)(a2 + 3632);
  uint64_t v1122 = *(void *)(a2 + 3632);
  if (*(void *)(a1 + 3632) == 1)
  {
    if (v1122 == 1)
    {
      long long v1123 = *v1121;
      *(_OWORD *)(a1 + 3641) = *(_OWORD *)(a2 + 3641);
      long long *v1120 = v1123;
    }
    else
    {
      *(void *)(a1 + 3632) = v1122;
      *(unsigned char *)(a1 + 3640) = *(unsigned char *)(a2 + 3640);
      uint64_t v1125 = *(void *)(a2 + 3648);
      *(unsigned char *)(a1 + 3656) = *(unsigned char *)(a2 + 3656);
      *(void *)(a1 + 3648) = v1125;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1122 == 1)
  {
    sub_10009F534(a1 + 3632);
    long long v1124 = *(_OWORD *)(a2 + 3641);
    long long *v1120 = *v1121;
    *(_OWORD *)(a1 + 3641) = v1124;
  }
  else
  {
    *(void *)(a1 + 3632) = v1122;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 3640) = v4[3360];
    uint64_t v1126 = *(void *)(a2 + 3648);
    *(unsigned char *)(a1 + 3656) = *(unsigned char *)(a2 + 3656);
    *(void *)(a1 + 3648) = v1126;
  }
  v1127 = (long long *)(a1 + 3664);
  v1128 = (long long *)(a2 + 3664);
  uint64_t v1129 = *(void *)(a2 + 3664);
  if (*(void *)(a1 + 3664) == 1)
  {
    if (v1129 == 1)
    {
      long long v1130 = *v1128;
      *(_OWORD *)(a1 + 3673) = *(_OWORD *)(a2 + 3673);
      long long *v1127 = v1130;
    }
    else
    {
      *(void *)(a1 + 3664) = v1129;
      *(unsigned char *)(a1 + 3672) = *(unsigned char *)(a2 + 3672);
      uint64_t v1132 = *(void *)(a2 + 3680);
      *(unsigned char *)(a1 + 3688) = *(unsigned char *)(a2 + 3688);
      *(void *)(a1 + 3680) = v1132;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1129 == 1)
  {
    sub_10009F534(a1 + 3664);
    long long v1131 = *(_OWORD *)(a2 + 3673);
    long long *v1127 = *v1128;
    *(_OWORD *)(a1 + 3673) = v1131;
  }
  else
  {
    *(void *)(a1 + 3664) = v1129;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 3672) = v4[3392];
    uint64_t v1133 = *(void *)(a2 + 3680);
    *(unsigned char *)(a1 + 3688) = *(unsigned char *)(a2 + 3688);
    *(void *)(a1 + 3680) = v1133;
  }
  v1134 = (long long *)(a1 + 3696);
  v1135 = (long long *)(a2 + 3696);
  uint64_t v1136 = *(void *)(a2 + 3696);
  if (*(void *)(a1 + 3696) == 1)
  {
    if (v1136 == 1)
    {
      long long v1137 = *v1135;
      *(_OWORD *)(a1 + 3705) = *(_OWORD *)(a2 + 3705);
      long long *v1134 = v1137;
    }
    else
    {
      *(void *)(a1 + 3696) = v1136;
      *(unsigned char *)(a1 + 3704) = *(unsigned char *)(a2 + 3704);
      uint64_t v1139 = *(void *)(a2 + 3712);
      *(unsigned char *)(a1 + 3720) = *(unsigned char *)(a2 + 3720);
      *(void *)(a1 + 3712) = v1139;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1136 == 1)
  {
    sub_10009F534(a1 + 3696);
    long long v1138 = *(_OWORD *)(a2 + 3705);
    long long *v1134 = *v1135;
    *(_OWORD *)(a1 + 3705) = v1138;
  }
  else
  {
    *(void *)(a1 + 3696) = v1136;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 3704) = v4[3424];
    uint64_t v1140 = *(void *)(a2 + 3712);
    *(unsigned char *)(a1 + 3720) = *(unsigned char *)(a2 + 3720);
    *(void *)(a1 + 3712) = v1140;
  }
  v1141 = (long long *)(a1 + 3728);
  v1142 = (long long *)(a2 + 3728);
  uint64_t v1143 = *(void *)(a2 + 3728);
  if (*(void *)(a1 + 3728) == 1)
  {
    if (v1143 == 1)
    {
      long long v1144 = *v1142;
      *(_OWORD *)(a1 + 3737) = *(_OWORD *)(a2 + 3737);
      long long *v1141 = v1144;
    }
    else
    {
      *(void *)(a1 + 3728) = v1143;
      *(unsigned char *)(a1 + 3736) = *(unsigned char *)(a2 + 3736);
      uint64_t v1146 = *(void *)(a2 + 3744);
      *(unsigned char *)(a1 + 3752) = *(unsigned char *)(a2 + 3752);
      *(void *)(a1 + 3744) = v1146;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1143 == 1)
  {
    sub_10009F534(a1 + 3728);
    long long v1145 = *(_OWORD *)(a2 + 3737);
    long long *v1141 = *v1142;
    *(_OWORD *)(a1 + 3737) = v1145;
  }
  else
  {
    *(void *)(a1 + 3728) = v1143;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 3736) = v4[3456];
    uint64_t v1147 = *(void *)(a2 + 3744);
    *(unsigned char *)(a1 + 3752) = *(unsigned char *)(a2 + 3752);
    *(void *)(a1 + 3744) = v1147;
  }
  v1148 = (long long *)(a1 + 3760);
  v1149 = (long long *)(a2 + 3760);
  uint64_t v1150 = *(void *)(a2 + 3760);
  if (*(void *)(a1 + 3760) == 1)
  {
    if (v1150 == 1)
    {
      long long v1151 = *v1149;
      *(_OWORD *)(a1 + 3769) = *(_OWORD *)(a2 + 3769);
      long long *v1148 = v1151;
    }
    else
    {
      *(void *)(a1 + 3760) = v1150;
      *(unsigned char *)(a1 + 3768) = *(unsigned char *)(a2 + 3768);
      uint64_t v1153 = *(void *)(a2 + 3776);
      *(unsigned char *)(a1 + 3784) = *(unsigned char *)(a2 + 3784);
      *(void *)(a1 + 3776) = v1153;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1150 == 1)
  {
    sub_10009F534(a1 + 3760);
    long long v1152 = *(_OWORD *)(a2 + 3769);
    long long *v1148 = *v1149;
    *(_OWORD *)(a1 + 3769) = v1152;
  }
  else
  {
    *(void *)(a1 + 3760) = v1150;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 3768) = v4[3488];
    uint64_t v1154 = *(void *)(a2 + 3776);
    *(unsigned char *)(a1 + 3784) = *(unsigned char *)(a2 + 3784);
    *(void *)(a1 + 3776) = v1154;
  }
  v1155 = (long long *)(a1 + 3792);
  v1156 = (long long *)(a2 + 3792);
  uint64_t v1157 = *(void *)(a2 + 3792);
  if (*(void *)(a1 + 3792) == 1)
  {
    if (v1157 == 1)
    {
      long long v1158 = *v1156;
      *(_OWORD *)(a1 + 3801) = *(_OWORD *)(a2 + 3801);
      long long *v1155 = v1158;
    }
    else
    {
      *(void *)(a1 + 3792) = v1157;
      *(unsigned char *)(a1 + 3800) = *(unsigned char *)(a2 + 3800);
      uint64_t v1160 = *(void *)(a2 + 3808);
      *(unsigned char *)(a1 + 3816) = *(unsigned char *)(a2 + 3816);
      *(void *)(a1 + 3808) = v1160;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1157 == 1)
  {
    sub_10009F534(a1 + 3792);
    long long v1159 = *(_OWORD *)(a2 + 3801);
    long long *v1155 = *v1156;
    *(_OWORD *)(a1 + 3801) = v1159;
  }
  else
  {
    *(void *)(a1 + 3792) = v1157;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 3800) = v4[3520];
    uint64_t v1161 = *(void *)(a2 + 3808);
    *(unsigned char *)(a1 + 3816) = *(unsigned char *)(a2 + 3816);
    *(void *)(a1 + 3808) = v1161;
  }
  v1162 = (long long *)(a1 + 3824);
  v1163 = (long long *)(a2 + 3824);
  uint64_t v1164 = *(void *)(a2 + 3824);
  if (*(void *)(a1 + 3824) == 1)
  {
    if (v1164 == 1)
    {
      long long v1165 = *v1163;
      *(_OWORD *)(a1 + 3833) = *(_OWORD *)(a2 + 3833);
      long long *v1162 = v1165;
    }
    else
    {
      *(void *)(a1 + 3824) = v1164;
      *(unsigned char *)(a1 + 3832) = *(unsigned char *)(a2 + 3832);
      uint64_t v1167 = *(void *)(a2 + 3840);
      *(unsigned char *)(a1 + 3848) = *(unsigned char *)(a2 + 3848);
      *(void *)(a1 + 3840) = v1167;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1164 == 1)
  {
    sub_10009F534(a1 + 3824);
    long long v1166 = *(_OWORD *)(a2 + 3833);
    long long *v1162 = *v1163;
    *(_OWORD *)(a1 + 3833) = v1166;
  }
  else
  {
    *(void *)(a1 + 3824) = v1164;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 3832) = v4[3552];
    uint64_t v1168 = *(void *)(a2 + 3840);
    *(unsigned char *)(a1 + 3848) = *(unsigned char *)(a2 + 3848);
    *(void *)(a1 + 3840) = v1168;
  }
  v1169 = (long long *)(a1 + 3856);
  v1170 = (long long *)(a2 + 3856);
  uint64_t v1171 = *(void *)(a2 + 3856);
  if (*(void *)(a1 + 3856) == 1)
  {
    if (v1171 == 1)
    {
      long long v1172 = *v1170;
      *(_OWORD *)(a1 + 3865) = *(_OWORD *)(a2 + 3865);
      long long *v1169 = v1172;
    }
    else
    {
      *(void *)(a1 + 3856) = v1171;
      *(unsigned char *)(a1 + 3864) = *(unsigned char *)(a2 + 3864);
      uint64_t v1174 = *(void *)(a2 + 3872);
      *(unsigned char *)(a1 + 3880) = *(unsigned char *)(a2 + 3880);
      *(void *)(a1 + 3872) = v1174;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1171 == 1)
  {
    sub_10009F534(a1 + 3856);
    long long v1173 = *(_OWORD *)(a2 + 3865);
    long long *v1169 = *v1170;
    *(_OWORD *)(a1 + 3865) = v1173;
  }
  else
  {
    *(void *)(a1 + 3856) = v1171;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 3864) = v4[3584];
    uint64_t v1175 = *(void *)(a2 + 3872);
    *(unsigned char *)(a1 + 3880) = *(unsigned char *)(a2 + 3880);
    *(void *)(a1 + 3872) = v1175;
  }
  v1176 = (long long *)(a1 + 3888);
  v1177 = (long long *)(a2 + 3888);
  uint64_t v1178 = *(void *)(a2 + 3888);
  if (*(void *)(a1 + 3888) == 1)
  {
    if (v1178 == 1)
    {
      long long v1179 = *v1177;
      *(_OWORD *)(a1 + 3897) = *(_OWORD *)(a2 + 3897);
      long long *v1176 = v1179;
    }
    else
    {
      *(void *)(a1 + 3888) = v1178;
      *(unsigned char *)(a1 + 3896) = *(unsigned char *)(a2 + 3896);
      uint64_t v1181 = *(void *)(a2 + 3904);
      *(unsigned char *)(a1 + 3912) = *(unsigned char *)(a2 + 3912);
      *(void *)(a1 + 3904) = v1181;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1178 == 1)
  {
    sub_10009F534(a1 + 3888);
    long long v1180 = *(_OWORD *)(a2 + 3897);
    long long *v1176 = *v1177;
    *(_OWORD *)(a1 + 3897) = v1180;
  }
  else
  {
    *(void *)(a1 + 3888) = v1178;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 3896) = v4[3616];
    uint64_t v1182 = *(void *)(a2 + 3904);
    *(unsigned char *)(a1 + 3912) = *(unsigned char *)(a2 + 3912);
    *(void *)(a1 + 3904) = v1182;
  }
  v1183 = (long long *)(a1 + 3920);
  v1184 = (long long *)(a2 + 3920);
  uint64_t v1185 = *(void *)(a2 + 3920);
  if (*(void *)(a1 + 3920) == 1)
  {
    if (v1185 == 1)
    {
      long long v1186 = *v1184;
      *(_OWORD *)(a1 + 3929) = *(_OWORD *)(a2 + 3929);
      long long *v1183 = v1186;
    }
    else
    {
      *(void *)(a1 + 3920) = v1185;
      *(unsigned char *)(a1 + 3928) = *(unsigned char *)(a2 + 3928);
      uint64_t v1188 = *(void *)(a2 + 3936);
      *(unsigned char *)(a1 + 3944) = *(unsigned char *)(a2 + 3944);
      *(void *)(a1 + 3936) = v1188;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1185 == 1)
  {
    sub_10009F534(a1 + 3920);
    long long v1187 = *(_OWORD *)(a2 + 3929);
    long long *v1183 = *v1184;
    *(_OWORD *)(a1 + 3929) = v1187;
  }
  else
  {
    *(void *)(a1 + 3920) = v1185;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 3928) = v4[3648];
    uint64_t v1189 = *(void *)(a2 + 3936);
    *(unsigned char *)(a1 + 3944) = *(unsigned char *)(a2 + 3944);
    *(void *)(a1 + 3936) = v1189;
  }
  v1190 = (long long *)(a1 + 3952);
  v1191 = (long long *)(a2 + 3952);
  uint64_t v1192 = *(void *)(a2 + 3952);
  if (*(void *)(a1 + 3952) == 1)
  {
    if (v1192 == 1)
    {
      long long v1193 = *v1191;
      *(_OWORD *)(a1 + 3961) = *(_OWORD *)(a2 + 3961);
      long long *v1190 = v1193;
    }
    else
    {
      *(void *)(a1 + 3952) = v1192;
      *(unsigned char *)(a1 + 3960) = *(unsigned char *)(a2 + 3960);
      uint64_t v1195 = *(void *)(a2 + 3968);
      *(unsigned char *)(a1 + 3976) = *(unsigned char *)(a2 + 3976);
      *(void *)(a1 + 3968) = v1195;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1192 == 1)
  {
    sub_10009F534(a1 + 3952);
    long long v1194 = *(_OWORD *)(a2 + 3961);
    long long *v1190 = *v1191;
    *(_OWORD *)(a1 + 3961) = v1194;
  }
  else
  {
    *(void *)(a1 + 3952) = v1192;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 3960) = v4[3680];
    uint64_t v1196 = *(void *)(a2 + 3968);
    *(unsigned char *)(a1 + 3976) = *(unsigned char *)(a2 + 3976);
    *(void *)(a1 + 3968) = v1196;
  }
  v1197 = (long long *)(a1 + 3984);
  v1198 = (long long *)(a2 + 3984);
  uint64_t v1199 = *(void *)(a2 + 3984);
  if (*(void *)(a1 + 3984) == 1)
  {
    if (v1199 == 1)
    {
      long long v1200 = *v1198;
      *(_OWORD *)(a1 + 3993) = *(_OWORD *)(a2 + 3993);
      long long *v1197 = v1200;
    }
    else
    {
      *(void *)(a1 + 3984) = v1199;
      *(unsigned char *)(a1 + 3992) = *(unsigned char *)(a2 + 3992);
      uint64_t v1202 = *(void *)(a2 + 4000);
      *(unsigned char *)(a1 + 4008) = *(unsigned char *)(a2 + 4008);
      *(void *)(a1 + 4000) = v1202;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1199 == 1)
  {
    sub_10009F534(a1 + 3984);
    long long v1201 = *(_OWORD *)(a2 + 3993);
    long long *v1197 = *v1198;
    *(_OWORD *)(a1 + 3993) = v1201;
  }
  else
  {
    *(void *)(a1 + 3984) = v1199;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 3992) = v4[3712];
    uint64_t v1203 = *(void *)(a2 + 4000);
    *(unsigned char *)(a1 + 4008) = *(unsigned char *)(a2 + 4008);
    *(void *)(a1 + 4000) = v1203;
  }
  v1204 = (long long *)(a1 + 4016);
  v1205 = (long long *)(a2 + 4016);
  uint64_t v1206 = *(void *)(a2 + 4016);
  if (*(void *)(a1 + 4016) == 1)
  {
    if (v1206 == 1)
    {
      long long v1207 = *v1205;
      *(_OWORD *)(a1 + 4025) = *(_OWORD *)(a2 + 4025);
      long long *v1204 = v1207;
    }
    else
    {
      *(void *)(a1 + 4016) = v1206;
      *(unsigned char *)(a1 + 4024) = *(unsigned char *)(a2 + 4024);
      uint64_t v1209 = *(void *)(a2 + 4032);
      *(unsigned char *)(a1 + 4040) = *(unsigned char *)(a2 + 4040);
      *(void *)(a1 + 4032) = v1209;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1206 == 1)
  {
    sub_10009F534(a1 + 4016);
    long long v1208 = *(_OWORD *)(a2 + 4025);
    long long *v1204 = *v1205;
    *(_OWORD *)(a1 + 4025) = v1208;
  }
  else
  {
    *(void *)(a1 + 4016) = v1206;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 4024) = v4[3744];
    uint64_t v1210 = *(void *)(a2 + 4032);
    *(unsigned char *)(a1 + 4040) = *(unsigned char *)(a2 + 4040);
    *(void *)(a1 + 4032) = v1210;
  }
  v1211 = (long long *)(a1 + 4048);
  v1212 = (long long *)(a2 + 4048);
  uint64_t v1213 = *(void *)(a2 + 4048);
  if (*(void *)(a1 + 4048) == 1)
  {
    if (v1213 == 1)
    {
      long long v1214 = *v1212;
      *(_OWORD *)(a1 + 4057) = *(_OWORD *)(a2 + 4057);
      long long *v1211 = v1214;
    }
    else
    {
      *(void *)(a1 + 4048) = v1213;
      *(unsigned char *)(a1 + 4056) = *(unsigned char *)(a2 + 4056);
      uint64_t v1216 = *(void *)(a2 + 4064);
      *(unsigned char *)(a1 + 4072) = *(unsigned char *)(a2 + 4072);
      *(void *)(a1 + 4064) = v1216;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1213 == 1)
  {
    sub_10009F534(a1 + 4048);
    long long v1215 = *(_OWORD *)(a2 + 4057);
    long long *v1211 = *v1212;
    *(_OWORD *)(a1 + 4057) = v1215;
  }
  else
  {
    *(void *)(a1 + 4048) = v1213;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 4056) = v4[3776];
    uint64_t v1217 = *(void *)(a2 + 4064);
    *(unsigned char *)(a1 + 4072) = *(unsigned char *)(a2 + 4072);
    *(void *)(a1 + 4064) = v1217;
  }
  v1218 = (long long *)(a1 + 4080);
  v1219 = (long long *)(a2 + 4080);
  uint64_t v1220 = *(void *)(a2 + 4080);
  if (*(void *)(a1 + 4080) == 1)
  {
    if (v1220 == 1)
    {
      long long v1221 = *v1219;
      *(_OWORD *)(a1 + 4089) = *(_OWORD *)(a2 + 4089);
      long long *v1218 = v1221;
    }
    else
    {
      *(void *)(a1 + 4080) = v1220;
      *(unsigned char *)(a1 + 4088) = *(unsigned char *)(a2 + 4088);
      uint64_t v1223 = *(void *)(a2 + 4096);
      *(unsigned char *)(a1 + 4104) = *(unsigned char *)(a2 + 4104);
      *(void *)(a1 + 4096) = v1223;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1220 == 1)
  {
    sub_10009F534(a1 + 4080);
    long long v1222 = *(_OWORD *)(a2 + 4089);
    long long *v1218 = *v1219;
    *(_OWORD *)(a1 + 4089) = v1222;
  }
  else
  {
    *(void *)(a1 + 4080) = v1220;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 4088) = v4[3808];
    uint64_t v1224 = *(void *)(a2 + 4096);
    *(unsigned char *)(a1 + 4104) = *(unsigned char *)(a2 + 4104);
    *(void *)(a1 + 4096) = v1224;
  }
  long long v1225 = *(_OWORD *)(a2 + 4112);
  *(unsigned char *)(a1 + 4128) = *(unsigned char *)(a2 + 4128);
  *(_OWORD *)(a1 + 4112) = v1225;
  char v1226 = *(unsigned char *)(a2 + 4152);
  *(_OWORD *)(a1 + 4136) = *(_OWORD *)(a2 + 4136);
  *(unsigned char *)(a1 + 4152) = v1226;
  unsigned char *v737 = v4[3873];
  *(unsigned char *)(a1 + 4154) = v4[3874];
  *(unsigned char *)(a1 + 4155) = v4[3875];
  *(unsigned char *)(a1 + 4156) = v4[3876];
  *(unsigned char *)(a1 + 4157) = v4[3877];
  *(unsigned char *)(a1 + 4158) = v4[3878];
  *(unsigned char *)(a1 + 4159) = v4[3879];
  *(void *)(a1 + 4160) = *(void *)(a2 + 4160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 4168) = *(void *)(a2 + 4168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_1236:
  v1227 = (long long *)(a1 + 4176);
  v1228 = (long long *)(a2 + 4176);
  uint64_t v1229 = *(void *)(a2 + 4992);
  if (*(void *)(a1 + 4992) == 1)
  {
    if (v1229 != 1)
    {
      if (*(void *)v1228 == 1)
      {
        long long v1230 = *v1228;
        *(_OWORD *)(a1 + 4185) = *(_OWORD *)(a2 + 4185);
        long long *v1227 = v1230;
      }
      else
      {
        *(void *)(a1 + 4176) = *(void *)v1228;
        *(unsigned char *)(a1 + 4184) = v4[3904];
        uint64_t v1233 = *(void *)(a2 + 4192);
        *(unsigned char *)(a1 + 4200) = *(unsigned char *)(a2 + 4200);
        *(void *)(a1 + 4192) = v1233;
        swift_bridgeObjectRetain();
      }
      uint64_t v1234 = *(void *)(a2 + 4208);
      if (v1234 == 1)
      {
        long long v1235 = *(_OWORD *)(a2 + 4208);
        *(_OWORD *)(a1 + 4217) = *(_OWORD *)(a2 + 4217);
        *(_OWORD *)(a1 + 4208) = v1235;
      }
      else
      {
        *(void *)(a1 + 4208) = v1234;
        *(unsigned char *)(a1 + 4216) = v4[3936];
        uint64_t v1237 = *(void *)(a2 + 4224);
        *(unsigned char *)(a1 + 4232) = *(unsigned char *)(a2 + 4232);
        *(void *)(a1 + 4224) = v1237;
        swift_bridgeObjectRetain();
      }
      uint64_t v1238 = *(void *)(a2 + 4240);
      if (v1238 == 1)
      {
        long long v1239 = *(_OWORD *)(a2 + 4240);
        *(_OWORD *)(a1 + 4249) = *(_OWORD *)(a2 + 4249);
        *(_OWORD *)(a1 + 4240) = v1239;
      }
      else
      {
        *(void *)(a1 + 4240) = v1238;
        *(unsigned char *)(a1 + 4248) = v4[3968];
        uint64_t v1240 = *(void *)(a2 + 4256);
        *(unsigned char *)(a1 + 4264) = *(unsigned char *)(a2 + 4264);
        *(void *)(a1 + 4256) = v1240;
        swift_bridgeObjectRetain();
      }
      uint64_t v1241 = *(void *)(a2 + 4272);
      if (v1241 == 1)
      {
        long long v1242 = *(_OWORD *)(a2 + 4272);
        *(_OWORD *)(a1 + 4281) = *(_OWORD *)(a2 + 4281);
        *(_OWORD *)(a1 + 4272) = v1242;
      }
      else
      {
        *(void *)(a1 + 4272) = v1241;
        *(unsigned char *)(a1 + 4280) = v4[4000];
        uint64_t v1243 = *(void *)(a2 + 4288);
        *(unsigned char *)(a1 + 4296) = *(unsigned char *)(a2 + 4296);
        *(void *)(a1 + 4288) = v1243;
        swift_bridgeObjectRetain();
      }
      uint64_t v1244 = *(void *)(a2 + 4304);
      if (v1244 == 1)
      {
        long long v1245 = *(_OWORD *)(a2 + 4304);
        *(_OWORD *)(a1 + 4313) = *(_OWORD *)(a2 + 4313);
        *(_OWORD *)(a1 + 4304) = v1245;
      }
      else
      {
        *(void *)(a1 + 4304) = v1244;
        *(unsigned char *)(a1 + 4312) = v4[4032];
        uint64_t v1246 = *(void *)(a2 + 4320);
        *(unsigned char *)(a1 + 4328) = *(unsigned char *)(a2 + 4328);
        *(void *)(a1 + 4320) = v1246;
        swift_bridgeObjectRetain();
      }
      uint64_t v1247 = *(void *)(a2 + 4336);
      if (v1247 == 1)
      {
        long long v1248 = *(_OWORD *)(a2 + 4336);
        *(_OWORD *)(a1 + 4345) = *(_OWORD *)(a2 + 4345);
        *(_OWORD *)(a1 + 4336) = v1248;
      }
      else
      {
        *(void *)(a1 + 4336) = v1247;
        *(unsigned char *)(a1 + 4344) = v4[4064];
        uint64_t v1249 = *(void *)(a2 + 4352);
        *(unsigned char *)(a1 + 4360) = *(unsigned char *)(a2 + 4360);
        *(void *)(a1 + 4352) = v1249;
        swift_bridgeObjectRetain();
      }
      uint64_t v1250 = *(void *)(a2 + 4368);
      if (v1250 == 1)
      {
        long long v1251 = *(_OWORD *)(a2 + 4368);
        *(_OWORD *)(a1 + 4377) = *(_OWORD *)(a2 + 4377);
        *(_OWORD *)(a1 + 4368) = v1251;
      }
      else
      {
        *(void *)(a1 + 4368) = v1250;
        *(unsigned char *)(a1 + 4376) = *v982;
        uint64_t v1252 = *(void *)(a2 + 4384);
        *(unsigned char *)(a1 + 4392) = *(unsigned char *)(a2 + 4392);
        *(void *)(a1 + 4384) = v1252;
        swift_bridgeObjectRetain();
      }
      uint64_t v1253 = *(void *)(a2 + 4400);
      if (v1253 == 1)
      {
        long long v1254 = *(_OWORD *)(a2 + 4400);
        *(_OWORD *)(a1 + 4409) = *(_OWORD *)(a2 + 4409);
        *(_OWORD *)(a1 + 4400) = v1254;
      }
      else
      {
        *(void *)(a1 + 4400) = v1253;
        *(unsigned char *)(a1 + 4408) = *(unsigned char *)(a2 + 4408);
        uint64_t v1255 = *(void *)(a2 + 4416);
        *(unsigned char *)(a1 + 4424) = *(unsigned char *)(a2 + 4424);
        *(void *)(a1 + 4416) = v1255;
        swift_bridgeObjectRetain();
      }
      uint64_t v1256 = *(void *)(a2 + 4432);
      if (v1256 == 1)
      {
        long long v1257 = *(_OWORD *)(a2 + 4432);
        *(_OWORD *)(a1 + 4441) = *(_OWORD *)(a2 + 4441);
        *(_OWORD *)(a1 + 4432) = v1257;
      }
      else
      {
        *(void *)(a1 + 4432) = v1256;
        *(unsigned char *)(a1 + 4440) = *(unsigned char *)(a2 + 4440);
        uint64_t v1258 = *(void *)(a2 + 4448);
        *(unsigned char *)(a1 + 4456) = *(unsigned char *)(a2 + 4456);
        *(void *)(a1 + 4448) = v1258;
        swift_bridgeObjectRetain();
      }
      uint64_t v1259 = *(void *)(a2 + 4464);
      if (v1259 == 1)
      {
        long long v1260 = *(_OWORD *)(a2 + 4464);
        *(_OWORD *)(a1 + 4473) = *(_OWORD *)(a2 + 4473);
        *(_OWORD *)(a1 + 4464) = v1260;
      }
      else
      {
        *(void *)(a1 + 4464) = v1259;
        *(unsigned char *)(a1 + 4472) = *(unsigned char *)(a2 + 4472);
        uint64_t v1261 = *(void *)(a2 + 4480);
        *(unsigned char *)(a1 + 4488) = *(unsigned char *)(a2 + 4488);
        *(void *)(a1 + 4480) = v1261;
        swift_bridgeObjectRetain();
      }
      uint64_t v1262 = *(void *)(a2 + 4496);
      if (v1262 == 1)
      {
        long long v1263 = *(_OWORD *)(a2 + 4496);
        *(_OWORD *)(a1 + 4505) = *(_OWORD *)(a2 + 4505);
        *(_OWORD *)(a1 + 4496) = v1263;
      }
      else
      {
        *(void *)(a1 + 4496) = v1262;
        *(unsigned char *)(a1 + 4504) = *(unsigned char *)(a2 + 4504);
        uint64_t v1264 = *(void *)(a2 + 4512);
        *(unsigned char *)(a1 + 4520) = *(unsigned char *)(a2 + 4520);
        *(void *)(a1 + 4512) = v1264;
        swift_bridgeObjectRetain();
      }
      uint64_t v1265 = *(void *)(a2 + 4528);
      if (v1265 == 1)
      {
        long long v1266 = *(_OWORD *)(a2 + 4528);
        *(_OWORD *)(a1 + 4537) = *(_OWORD *)(a2 + 4537);
        *(_OWORD *)(a1 + 4528) = v1266;
      }
      else
      {
        *(void *)(a1 + 4528) = v1265;
        *(unsigned char *)(a1 + 4536) = *(unsigned char *)(a2 + 4536);
        uint64_t v1267 = *(void *)(a2 + 4544);
        *(unsigned char *)(a1 + 4552) = *(unsigned char *)(a2 + 4552);
        *(void *)(a1 + 4544) = v1267;
        swift_bridgeObjectRetain();
      }
      uint64_t v1268 = *(void *)(a2 + 4560);
      if (v1268 == 1)
      {
        long long v1269 = *(_OWORD *)(a2 + 4560);
        *(_OWORD *)(a1 + 4569) = *(_OWORD *)(a2 + 4569);
        *(_OWORD *)(a1 + 4560) = v1269;
      }
      else
      {
        *(void *)(a1 + 4560) = v1268;
        *(unsigned char *)(a1 + 4568) = *(unsigned char *)(a2 + 4568);
        uint64_t v1270 = *(void *)(a2 + 4576);
        *(unsigned char *)(a1 + 4584) = *(unsigned char *)(a2 + 4584);
        *(void *)(a1 + 4576) = v1270;
        swift_bridgeObjectRetain();
      }
      uint64_t v1271 = *(void *)(a2 + 4592);
      if (v1271 == 1)
      {
        long long v1272 = *(_OWORD *)(a2 + 4592);
        *(_OWORD *)(a1 + 4601) = *(_OWORD *)(a2 + 4601);
        *(_OWORD *)(a1 + 4592) = v1272;
      }
      else
      {
        *(void *)(a1 + 4592) = v1271;
        *(unsigned char *)(a1 + 4600) = *(unsigned char *)(a2 + 4600);
        uint64_t v1273 = *(void *)(a2 + 4608);
        *(unsigned char *)(a1 + 4616) = *(unsigned char *)(a2 + 4616);
        *(void *)(a1 + 4608) = v1273;
        swift_bridgeObjectRetain();
      }
      uint64_t v1274 = *(void *)(a2 + 4624);
      if (v1274 == 1)
      {
        long long v1275 = *(_OWORD *)(a2 + 4624);
        *(_OWORD *)(a1 + 4633) = *(_OWORD *)(a2 + 4633);
        *(_OWORD *)(a1 + 4624) = v1275;
      }
      else
      {
        *(void *)(a1 + 4624) = v1274;
        *(unsigned char *)(a1 + 4632) = *(unsigned char *)(a2 + 4632);
        uint64_t v1276 = *(void *)(a2 + 4640);
        *(unsigned char *)(a1 + 4648) = *(unsigned char *)(a2 + 4648);
        *(void *)(a1 + 4640) = v1276;
        swift_bridgeObjectRetain();
      }
      uint64_t v1277 = *(void *)(a2 + 4656);
      if (v1277 == 1)
      {
        long long v1278 = *(_OWORD *)(a2 + 4656);
        *(_OWORD *)(a1 + 4665) = *(_OWORD *)(a2 + 4665);
        *(_OWORD *)(a1 + 4656) = v1278;
      }
      else
      {
        *(void *)(a1 + 4656) = v1277;
        *(unsigned char *)(a1 + 4664) = *(unsigned char *)(a2 + 4664);
        uint64_t v1279 = *(void *)(a2 + 4672);
        *(unsigned char *)(a1 + 4680) = *(unsigned char *)(a2 + 4680);
        *(void *)(a1 + 4672) = v1279;
        swift_bridgeObjectRetain();
      }
      uint64_t v1280 = *(void *)(a2 + 4688);
      if (v1280 == 1)
      {
        long long v1281 = *(_OWORD *)(a2 + 4688);
        *(_OWORD *)(a1 + 4697) = *(_OWORD *)(a2 + 4697);
        *(_OWORD *)(a1 + 4688) = v1281;
      }
      else
      {
        *(void *)(a1 + 4688) = v1280;
        *(unsigned char *)(a1 + 4696) = *(unsigned char *)(a2 + 4696);
        uint64_t v1282 = *(void *)(a2 + 4704);
        *(unsigned char *)(a1 + 4712) = *(unsigned char *)(a2 + 4712);
        *(void *)(a1 + 4704) = v1282;
        swift_bridgeObjectRetain();
      }
      uint64_t v1283 = *(void *)(a2 + 4720);
      if (v1283 == 1)
      {
        long long v1284 = *(_OWORD *)(a2 + 4720);
        *(_OWORD *)(a1 + 4729) = *(_OWORD *)(a2 + 4729);
        *(_OWORD *)(a1 + 4720) = v1284;
      }
      else
      {
        *(void *)(a1 + 4720) = v1283;
        *(unsigned char *)(a1 + 4728) = *(unsigned char *)(a2 + 4728);
        uint64_t v1285 = *(void *)(a2 + 4736);
        *(unsigned char *)(a1 + 4744) = *(unsigned char *)(a2 + 4744);
        *(void *)(a1 + 4736) = v1285;
        swift_bridgeObjectRetain();
      }
      uint64_t v1286 = *(void *)(a2 + 4752);
      if (v1286 == 1)
      {
        long long v1287 = *(_OWORD *)(a2 + 4752);
        *(_OWORD *)(a1 + 4761) = *(_OWORD *)(a2 + 4761);
        *(_OWORD *)(a1 + 4752) = v1287;
      }
      else
      {
        *(void *)(a1 + 4752) = v1286;
        *(unsigned char *)(a1 + 4760) = *(unsigned char *)(a2 + 4760);
        uint64_t v1288 = *(void *)(a2 + 4768);
        *(unsigned char *)(a1 + 4776) = *(unsigned char *)(a2 + 4776);
        *(void *)(a1 + 4768) = v1288;
        swift_bridgeObjectRetain();
      }
      uint64_t v1289 = *(void *)(a2 + 4784);
      if (v1289 == 1)
      {
        long long v1290 = *(_OWORD *)(a2 + 4784);
        *(_OWORD *)(a1 + 4793) = *(_OWORD *)(a2 + 4793);
        *(_OWORD *)(a1 + 4784) = v1290;
      }
      else
      {
        *(void *)(a1 + 4784) = v1289;
        *(unsigned char *)(a1 + 4792) = *(unsigned char *)(a2 + 4792);
        uint64_t v1291 = *(void *)(a2 + 4800);
        *(unsigned char *)(a1 + 4808) = *(unsigned char *)(a2 + 4808);
        *(void *)(a1 + 4800) = v1291;
        swift_bridgeObjectRetain();
      }
      uint64_t v1292 = *(void *)(a2 + 4816);
      if (v1292 == 1)
      {
        long long v1293 = *(_OWORD *)(a2 + 4816);
        *(_OWORD *)(a1 + 4825) = *(_OWORD *)(a2 + 4825);
        *(_OWORD *)(a1 + 4816) = v1293;
      }
      else
      {
        *(void *)(a1 + 4816) = v1292;
        *(unsigned char *)(a1 + 4824) = *(unsigned char *)(a2 + 4824);
        uint64_t v1294 = *(void *)(a2 + 4832);
        *(unsigned char *)(a1 + 4840) = *(unsigned char *)(a2 + 4840);
        *(void *)(a1 + 4832) = v1294;
        swift_bridgeObjectRetain();
      }
      uint64_t v1295 = *(void *)(a2 + 4848);
      if (v1295 == 1)
      {
        long long v1296 = *(_OWORD *)(a2 + 4848);
        *(_OWORD *)(a1 + 4857) = *(_OWORD *)(a2 + 4857);
        *(_OWORD *)(a1 + 4848) = v1296;
      }
      else
      {
        *(void *)(a1 + 4848) = v1295;
        *(unsigned char *)(a1 + 4856) = *(unsigned char *)(a2 + 4856);
        uint64_t v1297 = *(void *)(a2 + 4864);
        *(unsigned char *)(a1 + 4872) = *(unsigned char *)(a2 + 4872);
        *(void *)(a1 + 4864) = v1297;
        swift_bridgeObjectRetain();
      }
      uint64_t v1298 = *(void *)(a2 + 4880);
      if (v1298 == 1)
      {
        long long v1299 = *(_OWORD *)(a2 + 4880);
        *(_OWORD *)(a1 + 4889) = *(_OWORD *)(a2 + 4889);
        *(_OWORD *)(a1 + 4880) = v1299;
      }
      else
      {
        *(void *)(a1 + 4880) = v1298;
        *(unsigned char *)(a1 + 4888) = *(unsigned char *)(a2 + 4888);
        uint64_t v1300 = *(void *)(a2 + 4896);
        *(unsigned char *)(a1 + 4904) = *(unsigned char *)(a2 + 4904);
        *(void *)(a1 + 4896) = v1300;
        swift_bridgeObjectRetain();
      }
      uint64_t v1301 = *(void *)(a2 + 4912);
      if (v1301 == 1)
      {
        long long v1302 = *(_OWORD *)(a2 + 4912);
        *(_OWORD *)(a1 + 4921) = *(_OWORD *)(a2 + 4921);
        *(_OWORD *)(a1 + 4912) = v1302;
      }
      else
      {
        *(void *)(a1 + 4912) = v1301;
        *(unsigned char *)(a1 + 4920) = *(unsigned char *)(a2 + 4920);
        uint64_t v1303 = *(void *)(a2 + 4928);
        *(unsigned char *)(a1 + 4936) = *(unsigned char *)(a2 + 4936);
        *(void *)(a1 + 4928) = v1303;
        swift_bridgeObjectRetain();
      }
      long long v1304 = *(_OWORD *)(a2 + 4944);
      *(unsigned char *)(a1 + 4960) = *(unsigned char *)(a2 + 4960);
      *(_OWORD *)(a1 + 4944) = v1304;
      char v1305 = *(unsigned char *)(a2 + 4984);
      *(_OWORD *)(a1 + 4968) = *(_OWORD *)(a2 + 4968);
      *(unsigned char *)(a1 + 4984) = v1305;
      *(unsigned char *)(a1 + 4985) = *(unsigned char *)(a2 + 4985);
      *(unsigned char *)(a1 + 4986) = *(unsigned char *)(a2 + 4986);
      *(unsigned char *)(a1 + 4987) = *(unsigned char *)(a2 + 4987);
      *(unsigned char *)(a1 + 4988) = *(unsigned char *)(a2 + 4988);
      *(unsigned char *)(a1 + 4989) = *(unsigned char *)(a2 + 4989);
      *(unsigned char *)(a1 + 4990) = *(unsigned char *)(a2 + 4990);
      *(unsigned char *)(a1 + 4991) = *(unsigned char *)(a2 + 4991);
      *(void *)(a1 + 4992) = *(void *)(a2 + 4992);
      *(void *)(a1 + 5000) = *(void *)(a2 + 5000);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_1483;
    }
LABEL_1242:
    memcpy((void *)(a1 + 4176), (const void *)(a2 + 4176), 0x340uLL);
    goto LABEL_1483;
  }
  if (v1229 == 1)
  {
    sub_10009F560((void *)(a1 + 4176));
    goto LABEL_1242;
  }
  uint64_t v1231 = *(void *)v1228;
  if (*(void *)v1227 == 1)
  {
    if (v1231 == 1)
    {
      long long v1232 = *v1228;
      *(_OWORD *)(a1 + 4185) = *(_OWORD *)(a2 + 4185);
      long long *v1227 = v1232;
    }
    else
    {
      *(void *)(a1 + 4176) = v1231;
      *(unsigned char *)(a1 + 4184) = v4[3904];
      uint64_t v1306 = *(void *)(a2 + 4192);
      *(unsigned char *)(a1 + 4200) = *(unsigned char *)(a2 + 4200);
      *(void *)(a1 + 4192) = v1306;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1231 == 1)
  {
    sub_10009F534(a1 + 4176);
    long long v1236 = *(_OWORD *)(a2 + 4185);
    long long *v1227 = *v1228;
    *(_OWORD *)(a1 + 4185) = v1236;
  }
  else
  {
    *(void *)(a1 + 4176) = v1231;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 4184) = v4[3904];
    uint64_t v1307 = *(void *)(a2 + 4192);
    *(unsigned char *)(a1 + 4200) = *(unsigned char *)(a2 + 4200);
    *(void *)(a1 + 4192) = v1307;
  }
  v1308 = (long long *)(a1 + 4208);
  v1309 = (long long *)(a2 + 4208);
  uint64_t v1310 = *(void *)(a2 + 4208);
  if (*(void *)(a1 + 4208) == 1)
  {
    if (v1310 == 1)
    {
      long long v1311 = *v1309;
      *(_OWORD *)(a1 + 4217) = *(_OWORD *)(a2 + 4217);
      long long *v1308 = v1311;
    }
    else
    {
      *(void *)(a1 + 4208) = v1310;
      *(unsigned char *)(a1 + 4216) = v4[3936];
      uint64_t v1313 = *(void *)(a2 + 4224);
      *(unsigned char *)(a1 + 4232) = *(unsigned char *)(a2 + 4232);
      *(void *)(a1 + 4224) = v1313;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1310 == 1)
  {
    sub_10009F534(a1 + 4208);
    long long v1312 = *(_OWORD *)(a2 + 4217);
    long long *v1308 = *v1309;
    *(_OWORD *)(a1 + 4217) = v1312;
  }
  else
  {
    *(void *)(a1 + 4208) = v1310;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 4216) = v4[3936];
    uint64_t v1314 = *(void *)(a2 + 4224);
    *(unsigned char *)(a1 + 4232) = *(unsigned char *)(a2 + 4232);
    *(void *)(a1 + 4224) = v1314;
  }
  v1315 = (long long *)(a1 + 4240);
  v1316 = (long long *)(a2 + 4240);
  uint64_t v1317 = *(void *)(a2 + 4240);
  if (*(void *)(a1 + 4240) == 1)
  {
    if (v1317 == 1)
    {
      long long v1318 = *v1316;
      *(_OWORD *)(a1 + 4249) = *(_OWORD *)(a2 + 4249);
      long long *v1315 = v1318;
    }
    else
    {
      *(void *)(a1 + 4240) = v1317;
      *(unsigned char *)(a1 + 4248) = v4[3968];
      uint64_t v1320 = *(void *)(a2 + 4256);
      *(unsigned char *)(a1 + 4264) = *(unsigned char *)(a2 + 4264);
      *(void *)(a1 + 4256) = v1320;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1317 == 1)
  {
    sub_10009F534(a1 + 4240);
    long long v1319 = *(_OWORD *)(a2 + 4249);
    long long *v1315 = *v1316;
    *(_OWORD *)(a1 + 4249) = v1319;
  }
  else
  {
    *(void *)(a1 + 4240) = v1317;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 4248) = v4[3968];
    uint64_t v1321 = *(void *)(a2 + 4256);
    *(unsigned char *)(a1 + 4264) = *(unsigned char *)(a2 + 4264);
    *(void *)(a1 + 4256) = v1321;
  }
  v1322 = (long long *)(a1 + 4272);
  v1323 = (long long *)(a2 + 4272);
  uint64_t v1324 = *(void *)(a2 + 4272);
  if (*(void *)(a1 + 4272) == 1)
  {
    if (v1324 == 1)
    {
      long long v1325 = *v1323;
      *(_OWORD *)(a1 + 4281) = *(_OWORD *)(a2 + 4281);
      long long *v1322 = v1325;
    }
    else
    {
      *(void *)(a1 + 4272) = v1324;
      *(unsigned char *)(a1 + 4280) = v4[4000];
      uint64_t v1327 = *(void *)(a2 + 4288);
      *(unsigned char *)(a1 + 4296) = *(unsigned char *)(a2 + 4296);
      *(void *)(a1 + 4288) = v1327;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1324 == 1)
  {
    sub_10009F534(a1 + 4272);
    long long v1326 = *(_OWORD *)(a2 + 4281);
    long long *v1322 = *v1323;
    *(_OWORD *)(a1 + 4281) = v1326;
  }
  else
  {
    *(void *)(a1 + 4272) = v1324;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 4280) = v4[4000];
    uint64_t v1328 = *(void *)(a2 + 4288);
    *(unsigned char *)(a1 + 4296) = *(unsigned char *)(a2 + 4296);
    *(void *)(a1 + 4288) = v1328;
  }
  v1329 = (long long *)(a1 + 4304);
  v1330 = (long long *)(a2 + 4304);
  uint64_t v1331 = *(void *)(a2 + 4304);
  if (*(void *)(a1 + 4304) == 1)
  {
    if (v1331 == 1)
    {
      long long v1332 = *v1330;
      *(_OWORD *)(a1 + 4313) = *(_OWORD *)(a2 + 4313);
      long long *v1329 = v1332;
    }
    else
    {
      *(void *)(a1 + 4304) = v1331;
      *(unsigned char *)(a1 + 4312) = v4[4032];
      uint64_t v1334 = *(void *)(a2 + 4320);
      *(unsigned char *)(a1 + 4328) = *(unsigned char *)(a2 + 4328);
      *(void *)(a1 + 4320) = v1334;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1331 == 1)
  {
    sub_10009F534(a1 + 4304);
    long long v1333 = *(_OWORD *)(a2 + 4313);
    long long *v1329 = *v1330;
    *(_OWORD *)(a1 + 4313) = v1333;
  }
  else
  {
    *(void *)(a1 + 4304) = v1331;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 4312) = v4[4032];
    uint64_t v1335 = *(void *)(a2 + 4320);
    *(unsigned char *)(a1 + 4328) = *(unsigned char *)(a2 + 4328);
    *(void *)(a1 + 4320) = v1335;
  }
  v1336 = (long long *)(a1 + 4336);
  v1337 = (long long *)(a2 + 4336);
  uint64_t v1338 = *(void *)(a2 + 4336);
  if (*(void *)(a1 + 4336) == 1)
  {
    if (v1338 == 1)
    {
      long long v1339 = *v1337;
      *(_OWORD *)(a1 + 4345) = *(_OWORD *)(a2 + 4345);
      long long *v1336 = v1339;
    }
    else
    {
      *(void *)(a1 + 4336) = v1338;
      *(unsigned char *)(a1 + 4344) = v4[4064];
      uint64_t v1341 = *(void *)(a2 + 4352);
      *(unsigned char *)(a1 + 4360) = *(unsigned char *)(a2 + 4360);
      *(void *)(a1 + 4352) = v1341;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1338 == 1)
  {
    sub_10009F534(a1 + 4336);
    long long v1340 = *(_OWORD *)(a2 + 4345);
    long long *v1336 = *v1337;
    *(_OWORD *)(a1 + 4345) = v1340;
  }
  else
  {
    *(void *)(a1 + 4336) = v1338;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 4344) = v4[4064];
    uint64_t v1342 = *(void *)(a2 + 4352);
    *(unsigned char *)(a1 + 4360) = *(unsigned char *)(a2 + 4360);
    *(void *)(a1 + 4352) = v1342;
  }
  v1343 = (long long *)(a1 + 4368);
  v1344 = (long long *)(a2 + 4368);
  uint64_t v1345 = *(void *)(a2 + 4368);
  if (*(void *)(a1 + 4368) == 1)
  {
    if (v1345 == 1)
    {
      long long v1346 = *v1344;
      *(_OWORD *)(a1 + 4377) = *(_OWORD *)(a2 + 4377);
      long long *v1343 = v1346;
    }
    else
    {
      *(void *)(a1 + 4368) = v1345;
      *(unsigned char *)(a1 + 4376) = *v982;
      uint64_t v1348 = *(void *)(a2 + 4384);
      *(unsigned char *)(a1 + 4392) = *(unsigned char *)(a2 + 4392);
      *(void *)(a1 + 4384) = v1348;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1345 == 1)
  {
    sub_10009F534(a1 + 4368);
    long long v1347 = *(_OWORD *)(a2 + 4377);
    long long *v1343 = *v1344;
    *(_OWORD *)(a1 + 4377) = v1347;
  }
  else
  {
    *(void *)(a1 + 4368) = v1345;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 4376) = *v982;
    uint64_t v1349 = *(void *)(a2 + 4384);
    *(unsigned char *)(a1 + 4392) = *(unsigned char *)(a2 + 4392);
    *(void *)(a1 + 4384) = v1349;
  }
  v1350 = (long long *)(a1 + 4400);
  v1351 = (long long *)(a2 + 4400);
  uint64_t v1352 = *(void *)(a2 + 4400);
  if (*(void *)(a1 + 4400) == 1)
  {
    if (v1352 == 1)
    {
      long long v1353 = *v1351;
      *(_OWORD *)(a1 + 4409) = *(_OWORD *)(a2 + 4409);
      long long *v1350 = v1353;
    }
    else
    {
      *(void *)(a1 + 4400) = v1352;
      *(unsigned char *)(a1 + 4408) = *(unsigned char *)(a2 + 4408);
      uint64_t v1355 = *(void *)(a2 + 4416);
      *(unsigned char *)(a1 + 4424) = *(unsigned char *)(a2 + 4424);
      *(void *)(a1 + 4416) = v1355;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1352 == 1)
  {
    sub_10009F534(a1 + 4400);
    long long v1354 = *(_OWORD *)(a2 + 4409);
    long long *v1350 = *v1351;
    *(_OWORD *)(a1 + 4409) = v1354;
  }
  else
  {
    *(void *)(a1 + 4400) = v1352;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 4408) = *(unsigned char *)(a2 + 4408);
    uint64_t v1356 = *(void *)(a2 + 4416);
    *(unsigned char *)(a1 + 4424) = *(unsigned char *)(a2 + 4424);
    *(void *)(a1 + 4416) = v1356;
  }
  v1357 = (long long *)(a1 + 4432);
  v1358 = (long long *)(a2 + 4432);
  uint64_t v1359 = *(void *)(a2 + 4432);
  if (*(void *)(a1 + 4432) == 1)
  {
    if (v1359 == 1)
    {
      long long v1360 = *v1358;
      *(_OWORD *)(a1 + 4441) = *(_OWORD *)(a2 + 4441);
      long long *v1357 = v1360;
    }
    else
    {
      *(void *)(a1 + 4432) = v1359;
      *(unsigned char *)(a1 + 4440) = *(unsigned char *)(a2 + 4440);
      uint64_t v1362 = *(void *)(a2 + 4448);
      *(unsigned char *)(a1 + 4456) = *(unsigned char *)(a2 + 4456);
      *(void *)(a1 + 4448) = v1362;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1359 == 1)
  {
    sub_10009F534(a1 + 4432);
    long long v1361 = *(_OWORD *)(a2 + 4441);
    long long *v1357 = *v1358;
    *(_OWORD *)(a1 + 4441) = v1361;
  }
  else
  {
    *(void *)(a1 + 4432) = v1359;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 4440) = *(unsigned char *)(a2 + 4440);
    uint64_t v1363 = *(void *)(a2 + 4448);
    *(unsigned char *)(a1 + 4456) = *(unsigned char *)(a2 + 4456);
    *(void *)(a1 + 4448) = v1363;
  }
  v1364 = (long long *)(a1 + 4464);
  v1365 = (long long *)(a2 + 4464);
  uint64_t v1366 = *(void *)(a2 + 4464);
  if (*(void *)(a1 + 4464) == 1)
  {
    if (v1366 == 1)
    {
      long long v1367 = *v1365;
      *(_OWORD *)(a1 + 4473) = *(_OWORD *)(a2 + 4473);
      long long *v1364 = v1367;
    }
    else
    {
      *(void *)(a1 + 4464) = v1366;
      *(unsigned char *)(a1 + 4472) = *(unsigned char *)(a2 + 4472);
      uint64_t v1369 = *(void *)(a2 + 4480);
      *(unsigned char *)(a1 + 4488) = *(unsigned char *)(a2 + 4488);
      *(void *)(a1 + 4480) = v1369;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1366 == 1)
  {
    sub_10009F534(a1 + 4464);
    long long v1368 = *(_OWORD *)(a2 + 4473);
    long long *v1364 = *v1365;
    *(_OWORD *)(a1 + 4473) = v1368;
  }
  else
  {
    *(void *)(a1 + 4464) = v1366;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 4472) = *(unsigned char *)(a2 + 4472);
    uint64_t v1370 = *(void *)(a2 + 4480);
    *(unsigned char *)(a1 + 4488) = *(unsigned char *)(a2 + 4488);
    *(void *)(a1 + 4480) = v1370;
  }
  v1371 = (long long *)(a1 + 4496);
  v1372 = (long long *)(a2 + 4496);
  uint64_t v1373 = *(void *)(a2 + 4496);
  if (*(void *)(a1 + 4496) == 1)
  {
    if (v1373 == 1)
    {
      long long v1374 = *v1372;
      *(_OWORD *)(a1 + 4505) = *(_OWORD *)(a2 + 4505);
      long long *v1371 = v1374;
    }
    else
    {
      *(void *)(a1 + 4496) = v1373;
      *(unsigned char *)(a1 + 4504) = *(unsigned char *)(a2 + 4504);
      uint64_t v1376 = *(void *)(a2 + 4512);
      *(unsigned char *)(a1 + 4520) = *(unsigned char *)(a2 + 4520);
      *(void *)(a1 + 4512) = v1376;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1373 == 1)
  {
    sub_10009F534(a1 + 4496);
    long long v1375 = *(_OWORD *)(a2 + 4505);
    long long *v1371 = *v1372;
    *(_OWORD *)(a1 + 4505) = v1375;
  }
  else
  {
    *(void *)(a1 + 4496) = v1373;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 4504) = *(unsigned char *)(a2 + 4504);
    uint64_t v1377 = *(void *)(a2 + 4512);
    *(unsigned char *)(a1 + 4520) = *(unsigned char *)(a2 + 4520);
    *(void *)(a1 + 4512) = v1377;
  }
  v1378 = (long long *)(a1 + 4528);
  v1379 = (long long *)(a2 + 4528);
  uint64_t v1380 = *(void *)(a2 + 4528);
  if (*(void *)(a1 + 4528) == 1)
  {
    if (v1380 == 1)
    {
      long long v1381 = *v1379;
      *(_OWORD *)(a1 + 4537) = *(_OWORD *)(a2 + 4537);
      long long *v1378 = v1381;
    }
    else
    {
      *(void *)(a1 + 4528) = v1380;
      *(unsigned char *)(a1 + 4536) = *(unsigned char *)(a2 + 4536);
      uint64_t v1383 = *(void *)(a2 + 4544);
      *(unsigned char *)(a1 + 4552) = *(unsigned char *)(a2 + 4552);
      *(void *)(a1 + 4544) = v1383;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1380 == 1)
  {
    sub_10009F534(a1 + 4528);
    long long v1382 = *(_OWORD *)(a2 + 4537);
    long long *v1378 = *v1379;
    *(_OWORD *)(a1 + 4537) = v1382;
  }
  else
  {
    *(void *)(a1 + 4528) = v1380;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 4536) = *(unsigned char *)(a2 + 4536);
    uint64_t v1384 = *(void *)(a2 + 4544);
    *(unsigned char *)(a1 + 4552) = *(unsigned char *)(a2 + 4552);
    *(void *)(a1 + 4544) = v1384;
  }
  v1385 = (long long *)(a1 + 4560);
  v1386 = (long long *)(a2 + 4560);
  uint64_t v1387 = *(void *)(a2 + 4560);
  if (*(void *)(a1 + 4560) == 1)
  {
    if (v1387 == 1)
    {
      long long v1388 = *v1386;
      *(_OWORD *)(a1 + 4569) = *(_OWORD *)(a2 + 4569);
      long long *v1385 = v1388;
    }
    else
    {
      *(void *)(a1 + 4560) = v1387;
      *(unsigned char *)(a1 + 4568) = *(unsigned char *)(a2 + 4568);
      uint64_t v1390 = *(void *)(a2 + 4576);
      *(unsigned char *)(a1 + 4584) = *(unsigned char *)(a2 + 4584);
      *(void *)(a1 + 4576) = v1390;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1387 == 1)
  {
    sub_10009F534(a1 + 4560);
    long long v1389 = *(_OWORD *)(a2 + 4569);
    long long *v1385 = *v1386;
    *(_OWORD *)(a1 + 4569) = v1389;
  }
  else
  {
    *(void *)(a1 + 4560) = v1387;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 4568) = *(unsigned char *)(a2 + 4568);
    uint64_t v1391 = *(void *)(a2 + 4576);
    *(unsigned char *)(a1 + 4584) = *(unsigned char *)(a2 + 4584);
    *(void *)(a1 + 4576) = v1391;
  }
  v1392 = (long long *)(a1 + 4592);
  v1393 = (long long *)(a2 + 4592);
  uint64_t v1394 = *(void *)(a2 + 4592);
  if (*(void *)(a1 + 4592) == 1)
  {
    if (v1394 == 1)
    {
      long long v1395 = *v1393;
      *(_OWORD *)(a1 + 4601) = *(_OWORD *)(a2 + 4601);
      long long *v1392 = v1395;
    }
    else
    {
      *(void *)(a1 + 4592) = v1394;
      *(unsigned char *)(a1 + 4600) = *(unsigned char *)(a2 + 4600);
      uint64_t v1397 = *(void *)(a2 + 4608);
      *(unsigned char *)(a1 + 4616) = *(unsigned char *)(a2 + 4616);
      *(void *)(a1 + 4608) = v1397;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1394 == 1)
  {
    sub_10009F534(a1 + 4592);
    long long v1396 = *(_OWORD *)(a2 + 4601);
    long long *v1392 = *v1393;
    *(_OWORD *)(a1 + 4601) = v1396;
  }
  else
  {
    *(void *)(a1 + 4592) = v1394;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 4600) = *(unsigned char *)(a2 + 4600);
    uint64_t v1398 = *(void *)(a2 + 4608);
    *(unsigned char *)(a1 + 4616) = *(unsigned char *)(a2 + 4616);
    *(void *)(a1 + 4608) = v1398;
  }
  v1399 = (long long *)(a1 + 4624);
  v1400 = (long long *)(a2 + 4624);
  uint64_t v1401 = *(void *)(a2 + 4624);
  if (*(void *)(a1 + 4624) == 1)
  {
    if (v1401 == 1)
    {
      long long v1402 = *v1400;
      *(_OWORD *)(a1 + 4633) = *(_OWORD *)(a2 + 4633);
      long long *v1399 = v1402;
    }
    else
    {
      *(void *)(a1 + 4624) = v1401;
      *(unsigned char *)(a1 + 4632) = *(unsigned char *)(a2 + 4632);
      uint64_t v1404 = *(void *)(a2 + 4640);
      *(unsigned char *)(a1 + 4648) = *(unsigned char *)(a2 + 4648);
      *(void *)(a1 + 4640) = v1404;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1401 == 1)
  {
    sub_10009F534(a1 + 4624);
    long long v1403 = *(_OWORD *)(a2 + 4633);
    long long *v1399 = *v1400;
    *(_OWORD *)(a1 + 4633) = v1403;
  }
  else
  {
    *(void *)(a1 + 4624) = v1401;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 4632) = *(unsigned char *)(a2 + 4632);
    uint64_t v1405 = *(void *)(a2 + 4640);
    *(unsigned char *)(a1 + 4648) = *(unsigned char *)(a2 + 4648);
    *(void *)(a1 + 4640) = v1405;
  }
  v1406 = (long long *)(a1 + 4656);
  v1407 = (long long *)(a2 + 4656);
  uint64_t v1408 = *(void *)(a2 + 4656);
  if (*(void *)(a1 + 4656) == 1)
  {
    if (v1408 == 1)
    {
      long long v1409 = *v1407;
      *(_OWORD *)(a1 + 4665) = *(_OWORD *)(a2 + 4665);
      long long *v1406 = v1409;
    }
    else
    {
      *(void *)(a1 + 4656) = v1408;
      *(unsigned char *)(a1 + 4664) = *(unsigned char *)(a2 + 4664);
      uint64_t v1411 = *(void *)(a2 + 4672);
      *(unsigned char *)(a1 + 4680) = *(unsigned char *)(a2 + 4680);
      *(void *)(a1 + 4672) = v1411;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1408 == 1)
  {
    sub_10009F534(a1 + 4656);
    long long v1410 = *(_OWORD *)(a2 + 4665);
    long long *v1406 = *v1407;
    *(_OWORD *)(a1 + 4665) = v1410;
  }
  else
  {
    *(void *)(a1 + 4656) = v1408;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 4664) = *(unsigned char *)(a2 + 4664);
    uint64_t v1412 = *(void *)(a2 + 4672);
    *(unsigned char *)(a1 + 4680) = *(unsigned char *)(a2 + 4680);
    *(void *)(a1 + 4672) = v1412;
  }
  v1413 = (long long *)(a1 + 4688);
  v1414 = (long long *)(a2 + 4688);
  uint64_t v1415 = *(void *)(a2 + 4688);
  if (*(void *)(a1 + 4688) == 1)
  {
    if (v1415 == 1)
    {
      long long v1416 = *v1414;
      *(_OWORD *)(a1 + 4697) = *(_OWORD *)(a2 + 4697);
      long long *v1413 = v1416;
    }
    else
    {
      *(void *)(a1 + 4688) = v1415;
      *(unsigned char *)(a1 + 4696) = *(unsigned char *)(a2 + 4696);
      uint64_t v1418 = *(void *)(a2 + 4704);
      *(unsigned char *)(a1 + 4712) = *(unsigned char *)(a2 + 4712);
      *(void *)(a1 + 4704) = v1418;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1415 == 1)
  {
    sub_10009F534(a1 + 4688);
    long long v1417 = *(_OWORD *)(a2 + 4697);
    long long *v1413 = *v1414;
    *(_OWORD *)(a1 + 4697) = v1417;
  }
  else
  {
    *(void *)(a1 + 4688) = v1415;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 4696) = *(unsigned char *)(a2 + 4696);
    uint64_t v1419 = *(void *)(a2 + 4704);
    *(unsigned char *)(a1 + 4712) = *(unsigned char *)(a2 + 4712);
    *(void *)(a1 + 4704) = v1419;
  }
  v1420 = (long long *)(a1 + 4720);
  v1421 = (long long *)(a2 + 4720);
  uint64_t v1422 = *(void *)(a2 + 4720);
  if (*(void *)(a1 + 4720) == 1)
  {
    if (v1422 == 1)
    {
      long long v1423 = *v1421;
      *(_OWORD *)(a1 + 4729) = *(_OWORD *)(a2 + 4729);
      long long *v1420 = v1423;
    }
    else
    {
      *(void *)(a1 + 4720) = v1422;
      *(unsigned char *)(a1 + 4728) = *(unsigned char *)(a2 + 4728);
      uint64_t v1425 = *(void *)(a2 + 4736);
      *(unsigned char *)(a1 + 4744) = *(unsigned char *)(a2 + 4744);
      *(void *)(a1 + 4736) = v1425;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1422 == 1)
  {
    sub_10009F534(a1 + 4720);
    long long v1424 = *(_OWORD *)(a2 + 4729);
    long long *v1420 = *v1421;
    *(_OWORD *)(a1 + 4729) = v1424;
  }
  else
  {
    *(void *)(a1 + 4720) = v1422;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 4728) = *(unsigned char *)(a2 + 4728);
    uint64_t v1426 = *(void *)(a2 + 4736);
    *(unsigned char *)(a1 + 4744) = *(unsigned char *)(a2 + 4744);
    *(void *)(a1 + 4736) = v1426;
  }
  v1427 = (long long *)(a1 + 4752);
  v1428 = (long long *)(a2 + 4752);
  uint64_t v1429 = *(void *)(a2 + 4752);
  if (*(void *)(a1 + 4752) == 1)
  {
    if (v1429 == 1)
    {
      long long v1430 = *v1428;
      *(_OWORD *)(a1 + 4761) = *(_OWORD *)(a2 + 4761);
      long long *v1427 = v1430;
    }
    else
    {
      *(void *)(a1 + 4752) = v1429;
      *(unsigned char *)(a1 + 4760) = *(unsigned char *)(a2 + 4760);
      uint64_t v1432 = *(void *)(a2 + 4768);
      *(unsigned char *)(a1 + 4776) = *(unsigned char *)(a2 + 4776);
      *(void *)(a1 + 4768) = v1432;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1429 == 1)
  {
    sub_10009F534(a1 + 4752);
    long long v1431 = *(_OWORD *)(a2 + 4761);
    long long *v1427 = *v1428;
    *(_OWORD *)(a1 + 4761) = v1431;
  }
  else
  {
    *(void *)(a1 + 4752) = v1429;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 4760) = *(unsigned char *)(a2 + 4760);
    uint64_t v1433 = *(void *)(a2 + 4768);
    *(unsigned char *)(a1 + 4776) = *(unsigned char *)(a2 + 4776);
    *(void *)(a1 + 4768) = v1433;
  }
  v1434 = (long long *)(a1 + 4784);
  v1435 = (long long *)(a2 + 4784);
  uint64_t v1436 = *(void *)(a2 + 4784);
  if (*(void *)(a1 + 4784) == 1)
  {
    if (v1436 == 1)
    {
      long long v1437 = *v1435;
      *(_OWORD *)(a1 + 4793) = *(_OWORD *)(a2 + 4793);
      long long *v1434 = v1437;
    }
    else
    {
      *(void *)(a1 + 4784) = v1436;
      *(unsigned char *)(a1 + 4792) = *(unsigned char *)(a2 + 4792);
      uint64_t v1439 = *(void *)(a2 + 4800);
      *(unsigned char *)(a1 + 4808) = *(unsigned char *)(a2 + 4808);
      *(void *)(a1 + 4800) = v1439;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1436 == 1)
  {
    sub_10009F534(a1 + 4784);
    long long v1438 = *(_OWORD *)(a2 + 4793);
    long long *v1434 = *v1435;
    *(_OWORD *)(a1 + 4793) = v1438;
  }
  else
  {
    *(void *)(a1 + 4784) = v1436;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 4792) = *(unsigned char *)(a2 + 4792);
    uint64_t v1440 = *(void *)(a2 + 4800);
    *(unsigned char *)(a1 + 4808) = *(unsigned char *)(a2 + 4808);
    *(void *)(a1 + 4800) = v1440;
  }
  v1441 = (long long *)(a1 + 4816);
  v1442 = (long long *)(a2 + 4816);
  uint64_t v1443 = *(void *)(a2 + 4816);
  if (*(void *)(a1 + 4816) == 1)
  {
    if (v1443 == 1)
    {
      long long v1444 = *v1442;
      *(_OWORD *)(a1 + 4825) = *(_OWORD *)(a2 + 4825);
      long long *v1441 = v1444;
    }
    else
    {
      *(void *)(a1 + 4816) = v1443;
      *(unsigned char *)(a1 + 4824) = *(unsigned char *)(a2 + 4824);
      uint64_t v1446 = *(void *)(a2 + 4832);
      *(unsigned char *)(a1 + 4840) = *(unsigned char *)(a2 + 4840);
      *(void *)(a1 + 4832) = v1446;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1443 == 1)
  {
    sub_10009F534(a1 + 4816);
    long long v1445 = *(_OWORD *)(a2 + 4825);
    long long *v1441 = *v1442;
    *(_OWORD *)(a1 + 4825) = v1445;
  }
  else
  {
    *(void *)(a1 + 4816) = v1443;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 4824) = *(unsigned char *)(a2 + 4824);
    uint64_t v1447 = *(void *)(a2 + 4832);
    *(unsigned char *)(a1 + 4840) = *(unsigned char *)(a2 + 4840);
    *(void *)(a1 + 4832) = v1447;
  }
  v1448 = (long long *)(a1 + 4848);
  v1449 = (long long *)(a2 + 4848);
  uint64_t v1450 = *(void *)(a2 + 4848);
  if (*(void *)(a1 + 4848) == 1)
  {
    if (v1450 == 1)
    {
      long long v1451 = *v1449;
      *(_OWORD *)(a1 + 4857) = *(_OWORD *)(a2 + 4857);
      long long *v1448 = v1451;
    }
    else
    {
      *(void *)(a1 + 4848) = v1450;
      *(unsigned char *)(a1 + 4856) = *(unsigned char *)(a2 + 4856);
      uint64_t v1453 = *(void *)(a2 + 4864);
      *(unsigned char *)(a1 + 4872) = *(unsigned char *)(a2 + 4872);
      *(void *)(a1 + 4864) = v1453;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1450 == 1)
  {
    sub_10009F534(a1 + 4848);
    long long v1452 = *(_OWORD *)(a2 + 4857);
    long long *v1448 = *v1449;
    *(_OWORD *)(a1 + 4857) = v1452;
  }
  else
  {
    *(void *)(a1 + 4848) = v1450;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 4856) = *(unsigned char *)(a2 + 4856);
    uint64_t v1454 = *(void *)(a2 + 4864);
    *(unsigned char *)(a1 + 4872) = *(unsigned char *)(a2 + 4872);
    *(void *)(a1 + 4864) = v1454;
  }
  v1455 = (long long *)(a1 + 4880);
  v1456 = (long long *)(a2 + 4880);
  uint64_t v1457 = *(void *)(a2 + 4880);
  if (*(void *)(a1 + 4880) == 1)
  {
    if (v1457 == 1)
    {
      long long v1458 = *v1456;
      *(_OWORD *)(a1 + 4889) = *(_OWORD *)(a2 + 4889);
      long long *v1455 = v1458;
    }
    else
    {
      *(void *)(a1 + 4880) = v1457;
      *(unsigned char *)(a1 + 4888) = *(unsigned char *)(a2 + 4888);
      uint64_t v1460 = *(void *)(a2 + 4896);
      *(unsigned char *)(a1 + 4904) = *(unsigned char *)(a2 + 4904);
      *(void *)(a1 + 4896) = v1460;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1457 == 1)
  {
    sub_10009F534(a1 + 4880);
    long long v1459 = *(_OWORD *)(a2 + 4889);
    long long *v1455 = *v1456;
    *(_OWORD *)(a1 + 4889) = v1459;
  }
  else
  {
    *(void *)(a1 + 4880) = v1457;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 4888) = *(unsigned char *)(a2 + 4888);
    uint64_t v1461 = *(void *)(a2 + 4896);
    *(unsigned char *)(a1 + 4904) = *(unsigned char *)(a2 + 4904);
    *(void *)(a1 + 4896) = v1461;
  }
  v1462 = (long long *)(a1 + 4912);
  v1463 = (long long *)(a2 + 4912);
  uint64_t v1464 = *(void *)(a2 + 4912);
  if (*(void *)(a1 + 4912) == 1)
  {
    if (v1464 == 1)
    {
      long long v1465 = *v1463;
      *(_OWORD *)(a1 + 4921) = *(_OWORD *)(a2 + 4921);
      long long *v1462 = v1465;
    }
    else
    {
      *(void *)(a1 + 4912) = v1464;
      *(unsigned char *)(a1 + 4920) = *(unsigned char *)(a2 + 4920);
      uint64_t v1467 = *(void *)(a2 + 4928);
      *(unsigned char *)(a1 + 4936) = *(unsigned char *)(a2 + 4936);
      *(void *)(a1 + 4928) = v1467;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1464 == 1)
  {
    sub_10009F534(a1 + 4912);
    long long v1466 = *(_OWORD *)(a2 + 4921);
    long long *v1462 = *v1463;
    *(_OWORD *)(a1 + 4921) = v1466;
  }
  else
  {
    *(void *)(a1 + 4912) = v1464;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 4920) = *(unsigned char *)(a2 + 4920);
    uint64_t v1468 = *(void *)(a2 + 4928);
    *(unsigned char *)(a1 + 4936) = *(unsigned char *)(a2 + 4936);
    *(void *)(a1 + 4928) = v1468;
  }
  long long v1469 = *(_OWORD *)(a2 + 4944);
  *(unsigned char *)(a1 + 4960) = *(unsigned char *)(a2 + 4960);
  *(_OWORD *)(a1 + 4944) = v1469;
  char v1470 = *(unsigned char *)(a2 + 4984);
  *(_OWORD *)(a1 + 4968) = *(_OWORD *)(a2 + 4968);
  *(unsigned char *)(a1 + 4984) = v1470;
  *(unsigned char *)(a1 + 4985) = *(unsigned char *)(a2 + 4985);
  *(unsigned char *)(a1 + 4986) = *(unsigned char *)(a2 + 4986);
  *(unsigned char *)(a1 + 4987) = *(unsigned char *)(a2 + 4987);
  *(unsigned char *)(a1 + 4988) = *(unsigned char *)(a2 + 4988);
  *(unsigned char *)(a1 + 4989) = *(unsigned char *)(a2 + 4989);
  *(unsigned char *)(a1 + 4990) = *(unsigned char *)(a2 + 4990);
  *(unsigned char *)(a1 + 4991) = *(unsigned char *)(a2 + 4991);
  *(void *)(a1 + 4992) = *(void *)(a2 + 4992);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 5000) = *(void *)(a2 + 5000);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_1483:
  v1471 = (long long *)(a1 + 5008);
  v1472 = (long long *)(a2 + 5008);
  uint64_t v1473 = *(void *)(a2 + 5824);
  if (*(void *)(a1 + 5824) == 1)
  {
    if (v1473 != 1)
    {
      if (*(void *)v1472 == 1)
      {
        long long v1474 = *v1472;
        *(_OWORD *)(a1 + 5017) = *(_OWORD *)(a2 + 5017);
        long long *v1471 = v1474;
      }
      else
      {
        *(void *)(a1 + 5008) = *(void *)v1472;
        *(unsigned char *)(a1 + 5016) = *(unsigned char *)(a2 + 5016);
        uint64_t v1477 = *(void *)(a2 + 5024);
        *(unsigned char *)(a1 + 5032) = *(unsigned char *)(a2 + 5032);
        *(void *)(a1 + 5024) = v1477;
        swift_bridgeObjectRetain();
      }
      uint64_t v1478 = *(void *)(a2 + 5040);
      if (v1478 == 1)
      {
        long long v1479 = *(_OWORD *)(a2 + 5040);
        *(_OWORD *)(a1 + 5049) = *(_OWORD *)(a2 + 5049);
        *(_OWORD *)(a1 + 5040) = v1479;
      }
      else
      {
        *(void *)(a1 + 5040) = v1478;
        *(unsigned char *)(a1 + 5048) = *(unsigned char *)(a2 + 5048);
        uint64_t v1481 = *(void *)(a2 + 5056);
        *(unsigned char *)(a1 + 5064) = *(unsigned char *)(a2 + 5064);
        *(void *)(a1 + 5056) = v1481;
        swift_bridgeObjectRetain();
      }
      uint64_t v1482 = *(void *)(a2 + 5072);
      if (v1482 == 1)
      {
        long long v1483 = *(_OWORD *)(a2 + 5072);
        *(_OWORD *)(a1 + 5081) = *(_OWORD *)(a2 + 5081);
        *(_OWORD *)(a1 + 5072) = v1483;
      }
      else
      {
        *(void *)(a1 + 5072) = v1482;
        *(unsigned char *)(a1 + 5080) = *(unsigned char *)(a2 + 5080);
        uint64_t v1484 = *(void *)(a2 + 5088);
        *(unsigned char *)(a1 + 5096) = *(unsigned char *)(a2 + 5096);
        *(void *)(a1 + 5088) = v1484;
        swift_bridgeObjectRetain();
      }
      uint64_t v1485 = *(void *)(a2 + 5104);
      if (v1485 == 1)
      {
        long long v1486 = *(_OWORD *)(a2 + 5104);
        *(_OWORD *)(a1 + 5113) = *(_OWORD *)(a2 + 5113);
        *(_OWORD *)(a1 + 5104) = v1486;
      }
      else
      {
        *(void *)(a1 + 5104) = v1485;
        *(unsigned char *)(a1 + 5112) = *(unsigned char *)(a2 + 5112);
        uint64_t v1487 = *(void *)(a2 + 5120);
        *(unsigned char *)(a1 + 5128) = *(unsigned char *)(a2 + 5128);
        *(void *)(a1 + 5120) = v1487;
        swift_bridgeObjectRetain();
      }
      uint64_t v1488 = *(void *)(a2 + 5136);
      if (v1488 == 1)
      {
        long long v1489 = *(_OWORD *)(a2 + 5136);
        *(_OWORD *)(a1 + 5145) = *(_OWORD *)(a2 + 5145);
        *(_OWORD *)(a1 + 5136) = v1489;
      }
      else
      {
        *(void *)(a1 + 5136) = v1488;
        *(unsigned char *)(a1 + 5144) = *(unsigned char *)(a2 + 5144);
        uint64_t v1490 = *(void *)(a2 + 5152);
        *(unsigned char *)(a1 + 5160) = *(unsigned char *)(a2 + 5160);
        *(void *)(a1 + 5152) = v1490;
        swift_bridgeObjectRetain();
      }
      uint64_t v1491 = *(void *)(a2 + 5168);
      if (v1491 == 1)
      {
        long long v1492 = *(_OWORD *)(a2 + 5168);
        *(_OWORD *)(a1 + 5177) = *(_OWORD *)(a2 + 5177);
        *(_OWORD *)(a1 + 5168) = v1492;
      }
      else
      {
        *(void *)(a1 + 5168) = v1491;
        *(unsigned char *)(a1 + 5176) = *(unsigned char *)(a2 + 5176);
        uint64_t v1493 = *(void *)(a2 + 5184);
        *(unsigned char *)(a1 + 5192) = *(unsigned char *)(a2 + 5192);
        *(void *)(a1 + 5184) = v1493;
        swift_bridgeObjectRetain();
      }
      uint64_t v1494 = *(void *)(a2 + 5200);
      if (v1494 == 1)
      {
        long long v1495 = *(_OWORD *)(a2 + 5200);
        *(_OWORD *)(a1 + 5209) = *(_OWORD *)(a2 + 5209);
        *(_OWORD *)(a1 + 5200) = v1495;
      }
      else
      {
        *(void *)(a1 + 5200) = v1494;
        *(unsigned char *)(a1 + 5208) = *(unsigned char *)(a2 + 5208);
        uint64_t v1496 = *(void *)(a2 + 5216);
        *(unsigned char *)(a1 + 5224) = *(unsigned char *)(a2 + 5224);
        *(void *)(a1 + 5216) = v1496;
        swift_bridgeObjectRetain();
      }
      uint64_t v1497 = *(void *)(a2 + 5232);
      if (v1497 == 1)
      {
        long long v1498 = *(_OWORD *)(a2 + 5232);
        *(_OWORD *)(a1 + 5241) = *(_OWORD *)(a2 + 5241);
        *(_OWORD *)(a1 + 5232) = v1498;
      }
      else
      {
        *(void *)(a1 + 5232) = v1497;
        *(unsigned char *)(a1 + 5240) = *(unsigned char *)(a2 + 5240);
        uint64_t v1499 = *(void *)(a2 + 5248);
        *(unsigned char *)(a1 + 5256) = *(unsigned char *)(a2 + 5256);
        *(void *)(a1 + 5248) = v1499;
        swift_bridgeObjectRetain();
      }
      uint64_t v1500 = *(void *)(a2 + 5264);
      if (v1500 == 1)
      {
        long long v1501 = *(_OWORD *)(a2 + 5264);
        *(_OWORD *)(a1 + 5273) = *(_OWORD *)(a2 + 5273);
        *(_OWORD *)(a1 + 5264) = v1501;
      }
      else
      {
        *(void *)(a1 + 5264) = v1500;
        *(unsigned char *)(a1 + 5272) = *(unsigned char *)(a2 + 5272);
        uint64_t v1502 = *(void *)(a2 + 5280);
        *(unsigned char *)(a1 + 5288) = *(unsigned char *)(a2 + 5288);
        *(void *)(a1 + 5280) = v1502;
        swift_bridgeObjectRetain();
      }
      uint64_t v1503 = *(void *)(a2 + 5296);
      if (v1503 == 1)
      {
        long long v1504 = *(_OWORD *)(a2 + 5296);
        *(_OWORD *)(a1 + 5305) = *(_OWORD *)(a2 + 5305);
        *(_OWORD *)(a1 + 5296) = v1504;
      }
      else
      {
        *(void *)(a1 + 5296) = v1503;
        *(unsigned char *)(a1 + 5304) = *(unsigned char *)(a2 + 5304);
        uint64_t v1505 = *(void *)(a2 + 5312);
        *(unsigned char *)(a1 + 5320) = *(unsigned char *)(a2 + 5320);
        *(void *)(a1 + 5312) = v1505;
        swift_bridgeObjectRetain();
      }
      uint64_t v1506 = *(void *)(a2 + 5328);
      if (v1506 == 1)
      {
        long long v1507 = *(_OWORD *)(a2 + 5328);
        *(_OWORD *)(a1 + 5337) = *(_OWORD *)(a2 + 5337);
        *(_OWORD *)(a1 + 5328) = v1507;
      }
      else
      {
        *(void *)(a1 + 5328) = v1506;
        *(unsigned char *)(a1 + 5336) = *(unsigned char *)(a2 + 5336);
        uint64_t v1508 = *(void *)(a2 + 5344);
        *(unsigned char *)(a1 + 5352) = *(unsigned char *)(a2 + 5352);
        *(void *)(a1 + 5344) = v1508;
        swift_bridgeObjectRetain();
      }
      uint64_t v1509 = *(void *)(a2 + 5360);
      if (v1509 == 1)
      {
        long long v1510 = *(_OWORD *)(a2 + 5360);
        *(_OWORD *)(a1 + 5369) = *(_OWORD *)(a2 + 5369);
        *(_OWORD *)(a1 + 5360) = v1510;
      }
      else
      {
        *(void *)(a1 + 5360) = v1509;
        *(unsigned char *)(a1 + 5368) = *(unsigned char *)(a2 + 5368);
        uint64_t v1511 = *(void *)(a2 + 5376);
        *(unsigned char *)(a1 + 5384) = *(unsigned char *)(a2 + 5384);
        *(void *)(a1 + 5376) = v1511;
        swift_bridgeObjectRetain();
      }
      uint64_t v1512 = *(void *)(a2 + 5392);
      if (v1512 == 1)
      {
        long long v1513 = *(_OWORD *)(a2 + 5392);
        *(_OWORD *)(a1 + 5401) = *(_OWORD *)(a2 + 5401);
        *(_OWORD *)(a1 + 5392) = v1513;
      }
      else
      {
        *(void *)(a1 + 5392) = v1512;
        *(unsigned char *)(a1 + 5400) = *(unsigned char *)(a2 + 5400);
        uint64_t v1514 = *(void *)(a2 + 5408);
        *(unsigned char *)(a1 + 5416) = *(unsigned char *)(a2 + 5416);
        *(void *)(a1 + 5408) = v1514;
        swift_bridgeObjectRetain();
      }
      uint64_t v1515 = *(void *)(a2 + 5424);
      if (v1515 == 1)
      {
        long long v1516 = *(_OWORD *)(a2 + 5424);
        *(_OWORD *)(a1 + 5433) = *(_OWORD *)(a2 + 5433);
        *(_OWORD *)(a1 + 5424) = v1516;
      }
      else
      {
        *(void *)(a1 + 5424) = v1515;
        *(unsigned char *)(a1 + 5432) = *(unsigned char *)(a2 + 5432);
        uint64_t v1517 = *(void *)(a2 + 5440);
        *(unsigned char *)(a1 + 5448) = *(unsigned char *)(a2 + 5448);
        *(void *)(a1 + 5440) = v1517;
        swift_bridgeObjectRetain();
      }
      uint64_t v1518 = *(void *)(a2 + 5456);
      if (v1518 == 1)
      {
        long long v1519 = *(_OWORD *)(a2 + 5456);
        *(_OWORD *)(a1 + 5465) = *(_OWORD *)(a2 + 5465);
        *(_OWORD *)(a1 + 5456) = v1519;
      }
      else
      {
        *(void *)(a1 + 5456) = v1518;
        *(unsigned char *)(a1 + 5464) = *(unsigned char *)(a2 + 5464);
        uint64_t v1520 = *(void *)(a2 + 5472);
        *(unsigned char *)(a1 + 5480) = *(unsigned char *)(a2 + 5480);
        *(void *)(a1 + 5472) = v1520;
        swift_bridgeObjectRetain();
      }
      uint64_t v1521 = *(void *)(a2 + 5488);
      if (v1521 == 1)
      {
        long long v1522 = *(_OWORD *)(a2 + 5488);
        *(_OWORD *)(a1 + 5497) = *(_OWORD *)(a2 + 5497);
        *(_OWORD *)(a1 + 5488) = v1522;
      }
      else
      {
        *(void *)(a1 + 5488) = v1521;
        *(unsigned char *)(a1 + 5496) = *(unsigned char *)(a2 + 5496);
        uint64_t v1523 = *(void *)(a2 + 5504);
        *(unsigned char *)(a1 + 5512) = *(unsigned char *)(a2 + 5512);
        *(void *)(a1 + 5504) = v1523;
        swift_bridgeObjectRetain();
      }
      uint64_t v1524 = *(void *)(a2 + 5520);
      if (v1524 == 1)
      {
        long long v1525 = *(_OWORD *)(a2 + 5520);
        *(_OWORD *)(a1 + 5529) = *(_OWORD *)(a2 + 5529);
        *(_OWORD *)(a1 + 5520) = v1525;
      }
      else
      {
        *(void *)(a1 + 5520) = v1524;
        *(unsigned char *)(a1 + 5528) = *(unsigned char *)(a2 + 5528);
        uint64_t v1526 = *(void *)(a2 + 5536);
        *(unsigned char *)(a1 + 5544) = *(unsigned char *)(a2 + 5544);
        *(void *)(a1 + 5536) = v1526;
        swift_bridgeObjectRetain();
      }
      uint64_t v1527 = *(void *)(a2 + 5552);
      if (v1527 == 1)
      {
        long long v1528 = *(_OWORD *)(a2 + 5552);
        *(_OWORD *)(a1 + 5561) = *(_OWORD *)(a2 + 5561);
        *(_OWORD *)(a1 + 5552) = v1528;
      }
      else
      {
        *(void *)(a1 + 5552) = v1527;
        *(unsigned char *)(a1 + 5560) = *(unsigned char *)(a2 + 5560);
        uint64_t v1529 = *(void *)(a2 + 5568);
        *(unsigned char *)(a1 + 5576) = *(unsigned char *)(a2 + 5576);
        *(void *)(a1 + 5568) = v1529;
        swift_bridgeObjectRetain();
      }
      uint64_t v1530 = *(void *)(a2 + 5584);
      if (v1530 == 1)
      {
        long long v1531 = *(_OWORD *)(a2 + 5584);
        *(_OWORD *)(a1 + 5593) = *(_OWORD *)(a2 + 5593);
        *(_OWORD *)(a1 + 5584) = v1531;
      }
      else
      {
        *(void *)(a1 + 5584) = v1530;
        *(unsigned char *)(a1 + 5592) = *(unsigned char *)(a2 + 5592);
        uint64_t v1532 = *(void *)(a2 + 5600);
        *(unsigned char *)(a1 + 5608) = *(unsigned char *)(a2 + 5608);
        *(void *)(a1 + 5600) = v1532;
        swift_bridgeObjectRetain();
      }
      uint64_t v1533 = *(void *)(a2 + 5616);
      if (v1533 == 1)
      {
        long long v1534 = *(_OWORD *)(a2 + 5616);
        *(_OWORD *)(a1 + 5625) = *(_OWORD *)(a2 + 5625);
        *(_OWORD *)(a1 + 5616) = v1534;
      }
      else
      {
        *(void *)(a1 + 5616) = v1533;
        *(unsigned char *)(a1 + 5624) = *(unsigned char *)(a2 + 5624);
        uint64_t v1535 = *(void *)(a2 + 5632);
        *(unsigned char *)(a1 + 5640) = *(unsigned char *)(a2 + 5640);
        *(void *)(a1 + 5632) = v1535;
        swift_bridgeObjectRetain();
      }
      uint64_t v1536 = *(void *)(a2 + 5648);
      if (v1536 == 1)
      {
        long long v1537 = *(_OWORD *)(a2 + 5648);
        *(_OWORD *)(a1 + 5657) = *(_OWORD *)(a2 + 5657);
        *(_OWORD *)(a1 + 5648) = v1537;
      }
      else
      {
        *(void *)(a1 + 5648) = v1536;
        *(unsigned char *)(a1 + 5656) = *(unsigned char *)(a2 + 5656);
        uint64_t v1538 = *(void *)(a2 + 5664);
        *(unsigned char *)(a1 + 5672) = *(unsigned char *)(a2 + 5672);
        *(void *)(a1 + 5664) = v1538;
        swift_bridgeObjectRetain();
      }
      uint64_t v1539 = *(void *)(a2 + 5680);
      if (v1539 == 1)
      {
        long long v1540 = *(_OWORD *)(a2 + 5680);
        *(_OWORD *)(a1 + 5689) = *(_OWORD *)(a2 + 5689);
        *(_OWORD *)(a1 + 5680) = v1540;
      }
      else
      {
        *(void *)(a1 + 5680) = v1539;
        *(unsigned char *)(a1 + 5688) = *(unsigned char *)(a2 + 5688);
        uint64_t v1541 = *(void *)(a2 + 5696);
        *(unsigned char *)(a1 + 5704) = *(unsigned char *)(a2 + 5704);
        *(void *)(a1 + 5696) = v1541;
        swift_bridgeObjectRetain();
      }
      uint64_t v1542 = *(void *)(a2 + 5712);
      if (v1542 == 1)
      {
        long long v1543 = *(_OWORD *)(a2 + 5712);
        *(_OWORD *)(a1 + 5721) = *(_OWORD *)(a2 + 5721);
        *(_OWORD *)(a1 + 5712) = v1543;
      }
      else
      {
        *(void *)(a1 + 5712) = v1542;
        *(unsigned char *)(a1 + 5720) = *(unsigned char *)(a2 + 5720);
        uint64_t v1544 = *(void *)(a2 + 5728);
        *(unsigned char *)(a1 + 5736) = *(unsigned char *)(a2 + 5736);
        *(void *)(a1 + 5728) = v1544;
        swift_bridgeObjectRetain();
      }
      uint64_t v1545 = *(void *)(a2 + 5744);
      if (v1545 == 1)
      {
        long long v1546 = *(_OWORD *)(a2 + 5744);
        *(_OWORD *)(a1 + 5753) = *(_OWORD *)(a2 + 5753);
        *(_OWORD *)(a1 + 5744) = v1546;
      }
      else
      {
        *(void *)(a1 + 5744) = v1545;
        *(unsigned char *)(a1 + 5752) = *(unsigned char *)(a2 + 5752);
        uint64_t v1547 = *(void *)(a2 + 5760);
        *(unsigned char *)(a1 + 5768) = *(unsigned char *)(a2 + 5768);
        *(void *)(a1 + 5760) = v1547;
        swift_bridgeObjectRetain();
      }
      long long v1548 = *(_OWORD *)(a2 + 5776);
      *(unsigned char *)(a1 + 5792) = *(unsigned char *)(a2 + 5792);
      *(_OWORD *)(a1 + 5776) = v1548;
      char v1549 = *(unsigned char *)(a2 + 5816);
      *(_OWORD *)(a1 + 5800) = *(_OWORD *)(a2 + 5800);
      *(unsigned char *)(a1 + 5816) = v1549;
      *(unsigned char *)(a1 + 5817) = *(unsigned char *)(a2 + 5817);
      *(unsigned char *)(a1 + 5818) = *(unsigned char *)(a2 + 5818);
      *(unsigned char *)(a1 + 5819) = *(unsigned char *)(a2 + 5819);
      *(unsigned char *)(a1 + 5820) = *(unsigned char *)(a2 + 5820);
      *(unsigned char *)(a1 + 5821) = *(unsigned char *)(a2 + 5821);
      *(unsigned char *)(a1 + 5822) = *(unsigned char *)(a2 + 5822);
      *(unsigned char *)(a1 + 5823) = *(unsigned char *)(a2 + 5823);
      *(void *)(a1 + 5824) = *(void *)(a2 + 5824);
      *(void *)(a1 + 5832) = *(void *)(a2 + 5832);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_1730;
    }
LABEL_1489:
    memcpy((void *)(a1 + 5008), (const void *)(a2 + 5008), 0x340uLL);
    goto LABEL_1730;
  }
  if (v1473 == 1)
  {
    sub_10009F560((void *)(a1 + 5008));
    goto LABEL_1489;
  }
  uint64_t v1475 = *(void *)v1472;
  if (*(void *)v1471 == 1)
  {
    if (v1475 == 1)
    {
      long long v1476 = *v1472;
      *(_OWORD *)(a1 + 5017) = *(_OWORD *)(a2 + 5017);
      long long *v1471 = v1476;
    }
    else
    {
      *(void *)(a1 + 5008) = v1475;
      *(unsigned char *)(a1 + 5016) = *(unsigned char *)(a2 + 5016);
      uint64_t v1550 = *(void *)(a2 + 5024);
      *(unsigned char *)(a1 + 5032) = *(unsigned char *)(a2 + 5032);
      *(void *)(a1 + 5024) = v1550;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1475 == 1)
  {
    sub_10009F534(a1 + 5008);
    long long v1480 = *(_OWORD *)(a2 + 5017);
    long long *v1471 = *v1472;
    *(_OWORD *)(a1 + 5017) = v1480;
  }
  else
  {
    *(void *)(a1 + 5008) = v1475;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 5016) = *(unsigned char *)(a2 + 5016);
    uint64_t v1551 = *(void *)(a2 + 5024);
    *(unsigned char *)(a1 + 5032) = *(unsigned char *)(a2 + 5032);
    *(void *)(a1 + 5024) = v1551;
  }
  v1552 = (long long *)(a1 + 5040);
  v1553 = (long long *)(a2 + 5040);
  uint64_t v1554 = *(void *)(a2 + 5040);
  if (*(void *)(a1 + 5040) == 1)
  {
    if (v1554 == 1)
    {
      long long v1555 = *v1553;
      *(_OWORD *)(a1 + 5049) = *(_OWORD *)(a2 + 5049);
      long long *v1552 = v1555;
    }
    else
    {
      *(void *)(a1 + 5040) = v1554;
      *(unsigned char *)(a1 + 5048) = *(unsigned char *)(a2 + 5048);
      uint64_t v1557 = *(void *)(a2 + 5056);
      *(unsigned char *)(a1 + 5064) = *(unsigned char *)(a2 + 5064);
      *(void *)(a1 + 5056) = v1557;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1554 == 1)
  {
    sub_10009F534(a1 + 5040);
    long long v1556 = *(_OWORD *)(a2 + 5049);
    long long *v1552 = *v1553;
    *(_OWORD *)(a1 + 5049) = v1556;
  }
  else
  {
    *(void *)(a1 + 5040) = v1554;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 5048) = *(unsigned char *)(a2 + 5048);
    uint64_t v1558 = *(void *)(a2 + 5056);
    *(unsigned char *)(a1 + 5064) = *(unsigned char *)(a2 + 5064);
    *(void *)(a1 + 5056) = v1558;
  }
  v1559 = (long long *)(a1 + 5072);
  v1560 = (long long *)(a2 + 5072);
  uint64_t v1561 = *(void *)(a2 + 5072);
  if (*(void *)(a1 + 5072) == 1)
  {
    if (v1561 == 1)
    {
      long long v1562 = *v1560;
      *(_OWORD *)(a1 + 5081) = *(_OWORD *)(a2 + 5081);
      long long *v1559 = v1562;
    }
    else
    {
      *(void *)(a1 + 5072) = v1561;
      *(unsigned char *)(a1 + 5080) = *(unsigned char *)(a2 + 5080);
      uint64_t v1564 = *(void *)(a2 + 5088);
      *(unsigned char *)(a1 + 5096) = *(unsigned char *)(a2 + 5096);
      *(void *)(a1 + 5088) = v1564;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1561 == 1)
  {
    sub_10009F534(a1 + 5072);
    long long v1563 = *(_OWORD *)(a2 + 5081);
    long long *v1559 = *v1560;
    *(_OWORD *)(a1 + 5081) = v1563;
  }
  else
  {
    *(void *)(a1 + 5072) = v1561;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 5080) = *(unsigned char *)(a2 + 5080);
    uint64_t v1565 = *(void *)(a2 + 5088);
    *(unsigned char *)(a1 + 5096) = *(unsigned char *)(a2 + 5096);
    *(void *)(a1 + 5088) = v1565;
  }
  v1566 = (long long *)(a1 + 5104);
  v1567 = (long long *)(a2 + 5104);
  uint64_t v1568 = *(void *)(a2 + 5104);
  if (*(void *)(a1 + 5104) == 1)
  {
    if (v1568 == 1)
    {
      long long v1569 = *v1567;
      *(_OWORD *)(a1 + 5113) = *(_OWORD *)(a2 + 5113);
      long long *v1566 = v1569;
    }
    else
    {
      *(void *)(a1 + 5104) = v1568;
      *(unsigned char *)(a1 + 5112) = *(unsigned char *)(a2 + 5112);
      uint64_t v1571 = *(void *)(a2 + 5120);
      *(unsigned char *)(a1 + 5128) = *(unsigned char *)(a2 + 5128);
      *(void *)(a1 + 5120) = v1571;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1568 == 1)
  {
    sub_10009F534(a1 + 5104);
    long long v1570 = *(_OWORD *)(a2 + 5113);
    long long *v1566 = *v1567;
    *(_OWORD *)(a1 + 5113) = v1570;
  }
  else
  {
    *(void *)(a1 + 5104) = v1568;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 5112) = *(unsigned char *)(a2 + 5112);
    uint64_t v1572 = *(void *)(a2 + 5120);
    *(unsigned char *)(a1 + 5128) = *(unsigned char *)(a2 + 5128);
    *(void *)(a1 + 5120) = v1572;
  }
  v1573 = (long long *)(a1 + 5136);
  v1574 = (long long *)(a2 + 5136);
  uint64_t v1575 = *(void *)(a2 + 5136);
  if (*(void *)(a1 + 5136) == 1)
  {
    if (v1575 == 1)
    {
      long long v1576 = *v1574;
      *(_OWORD *)(a1 + 5145) = *(_OWORD *)(a2 + 5145);
      long long *v1573 = v1576;
    }
    else
    {
      *(void *)(a1 + 5136) = v1575;
      *(unsigned char *)(a1 + 5144) = *(unsigned char *)(a2 + 5144);
      uint64_t v1578 = *(void *)(a2 + 5152);
      *(unsigned char *)(a1 + 5160) = *(unsigned char *)(a2 + 5160);
      *(void *)(a1 + 5152) = v1578;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1575 == 1)
  {
    sub_10009F534(a1 + 5136);
    long long v1577 = *(_OWORD *)(a2 + 5145);
    long long *v1573 = *v1574;
    *(_OWORD *)(a1 + 5145) = v1577;
  }
  else
  {
    *(void *)(a1 + 5136) = v1575;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 5144) = *(unsigned char *)(a2 + 5144);
    uint64_t v1579 = *(void *)(a2 + 5152);
    *(unsigned char *)(a1 + 5160) = *(unsigned char *)(a2 + 5160);
    *(void *)(a1 + 5152) = v1579;
  }
  v1580 = (long long *)(a1 + 5168);
  v1581 = (long long *)(a2 + 5168);
  uint64_t v1582 = *(void *)(a2 + 5168);
  if (*(void *)(a1 + 5168) == 1)
  {
    if (v1582 == 1)
    {
      long long v1583 = *v1581;
      *(_OWORD *)(a1 + 5177) = *(_OWORD *)(a2 + 5177);
      long long *v1580 = v1583;
    }
    else
    {
      *(void *)(a1 + 5168) = v1582;
      *(unsigned char *)(a1 + 5176) = *(unsigned char *)(a2 + 5176);
      uint64_t v1585 = *(void *)(a2 + 5184);
      *(unsigned char *)(a1 + 5192) = *(unsigned char *)(a2 + 5192);
      *(void *)(a1 + 5184) = v1585;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1582 == 1)
  {
    sub_10009F534(a1 + 5168);
    long long v1584 = *(_OWORD *)(a2 + 5177);
    long long *v1580 = *v1581;
    *(_OWORD *)(a1 + 5177) = v1584;
  }
  else
  {
    *(void *)(a1 + 5168) = v1582;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 5176) = *(unsigned char *)(a2 + 5176);
    uint64_t v1586 = *(void *)(a2 + 5184);
    *(unsigned char *)(a1 + 5192) = *(unsigned char *)(a2 + 5192);
    *(void *)(a1 + 5184) = v1586;
  }
  v1587 = (long long *)(a1 + 5200);
  v1588 = (long long *)(a2 + 5200);
  uint64_t v1589 = *(void *)(a2 + 5200);
  if (*(void *)(a1 + 5200) == 1)
  {
    if (v1589 == 1)
    {
      long long v1590 = *v1588;
      *(_OWORD *)(a1 + 5209) = *(_OWORD *)(a2 + 5209);
      long long *v1587 = v1590;
    }
    else
    {
      *(void *)(a1 + 5200) = v1589;
      *(unsigned char *)(a1 + 5208) = *(unsigned char *)(a2 + 5208);
      uint64_t v1592 = *(void *)(a2 + 5216);
      *(unsigned char *)(a1 + 5224) = *(unsigned char *)(a2 + 5224);
      *(void *)(a1 + 5216) = v1592;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1589 == 1)
  {
    sub_10009F534(a1 + 5200);
    long long v1591 = *(_OWORD *)(a2 + 5209);
    long long *v1587 = *v1588;
    *(_OWORD *)(a1 + 5209) = v1591;
  }
  else
  {
    *(void *)(a1 + 5200) = v1589;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 5208) = *(unsigned char *)(a2 + 5208);
    uint64_t v1593 = *(void *)(a2 + 5216);
    *(unsigned char *)(a1 + 5224) = *(unsigned char *)(a2 + 5224);
    *(void *)(a1 + 5216) = v1593;
  }
  v1594 = (long long *)(a1 + 5232);
  v1595 = (long long *)(a2 + 5232);
  uint64_t v1596 = *(void *)(a2 + 5232);
  if (*(void *)(a1 + 5232) == 1)
  {
    if (v1596 == 1)
    {
      long long v1597 = *v1595;
      *(_OWORD *)(a1 + 5241) = *(_OWORD *)(a2 + 5241);
      long long *v1594 = v1597;
    }
    else
    {
      *(void *)(a1 + 5232) = v1596;
      *(unsigned char *)(a1 + 5240) = *(unsigned char *)(a2 + 5240);
      uint64_t v1599 = *(void *)(a2 + 5248);
      *(unsigned char *)(a1 + 5256) = *(unsigned char *)(a2 + 5256);
      *(void *)(a1 + 5248) = v1599;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1596 == 1)
  {
    sub_10009F534(a1 + 5232);
    long long v1598 = *(_OWORD *)(a2 + 5241);
    long long *v1594 = *v1595;
    *(_OWORD *)(a1 + 5241) = v1598;
  }
  else
  {
    *(void *)(a1 + 5232) = v1596;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 5240) = *(unsigned char *)(a2 + 5240);
    uint64_t v1600 = *(void *)(a2 + 5248);
    *(unsigned char *)(a1 + 5256) = *(unsigned char *)(a2 + 5256);
    *(void *)(a1 + 5248) = v1600;
  }
  v1601 = (long long *)(a1 + 5264);
  v1602 = (long long *)(a2 + 5264);
  uint64_t v1603 = *(void *)(a2 + 5264);
  if (*(void *)(a1 + 5264) == 1)
  {
    if (v1603 == 1)
    {
      long long v1604 = *v1602;
      *(_OWORD *)(a1 + 5273) = *(_OWORD *)(a2 + 5273);
      long long *v1601 = v1604;
    }
    else
    {
      *(void *)(a1 + 5264) = v1603;
      *(unsigned char *)(a1 + 5272) = *(unsigned char *)(a2 + 5272);
      uint64_t v1606 = *(void *)(a2 + 5280);
      *(unsigned char *)(a1 + 5288) = *(unsigned char *)(a2 + 5288);
      *(void *)(a1 + 5280) = v1606;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1603 == 1)
  {
    sub_10009F534(a1 + 5264);
    long long v1605 = *(_OWORD *)(a2 + 5273);
    long long *v1601 = *v1602;
    *(_OWORD *)(a1 + 5273) = v1605;
  }
  else
  {
    *(void *)(a1 + 5264) = v1603;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 5272) = *(unsigned char *)(a2 + 5272);
    uint64_t v1607 = *(void *)(a2 + 5280);
    *(unsigned char *)(a1 + 5288) = *(unsigned char *)(a2 + 5288);
    *(void *)(a1 + 5280) = v1607;
  }
  v1608 = (long long *)(a1 + 5296);
  v1609 = (long long *)(a2 + 5296);
  uint64_t v1610 = *(void *)(a2 + 5296);
  if (*(void *)(a1 + 5296) == 1)
  {
    if (v1610 == 1)
    {
      long long v1611 = *v1609;
      *(_OWORD *)(a1 + 5305) = *(_OWORD *)(a2 + 5305);
      long long *v1608 = v1611;
    }
    else
    {
      *(void *)(a1 + 5296) = v1610;
      *(unsigned char *)(a1 + 5304) = *(unsigned char *)(a2 + 5304);
      uint64_t v1613 = *(void *)(a2 + 5312);
      *(unsigned char *)(a1 + 5320) = *(unsigned char *)(a2 + 5320);
      *(void *)(a1 + 5312) = v1613;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1610 == 1)
  {
    sub_10009F534(a1 + 5296);
    long long v1612 = *(_OWORD *)(a2 + 5305);
    long long *v1608 = *v1609;
    *(_OWORD *)(a1 + 5305) = v1612;
  }
  else
  {
    *(void *)(a1 + 5296) = v1610;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 5304) = *(unsigned char *)(a2 + 5304);
    uint64_t v1614 = *(void *)(a2 + 5312);
    *(unsigned char *)(a1 + 5320) = *(unsigned char *)(a2 + 5320);
    *(void *)(a1 + 5312) = v1614;
  }
  v1615 = (long long *)(a1 + 5328);
  v1616 = (long long *)(a2 + 5328);
  uint64_t v1617 = *(void *)(a2 + 5328);
  if (*(void *)(a1 + 5328) == 1)
  {
    if (v1617 == 1)
    {
      long long v1618 = *v1616;
      *(_OWORD *)(a1 + 5337) = *(_OWORD *)(a2 + 5337);
      long long *v1615 = v1618;
    }
    else
    {
      *(void *)(a1 + 5328) = v1617;
      *(unsigned char *)(a1 + 5336) = *(unsigned char *)(a2 + 5336);
      uint64_t v1620 = *(void *)(a2 + 5344);
      *(unsigned char *)(a1 + 5352) = *(unsigned char *)(a2 + 5352);
      *(void *)(a1 + 5344) = v1620;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1617 == 1)
  {
    sub_10009F534(a1 + 5328);
    long long v1619 = *(_OWORD *)(a2 + 5337);
    long long *v1615 = *v1616;
    *(_OWORD *)(a1 + 5337) = v1619;
  }
  else
  {
    *(void *)(a1 + 5328) = v1617;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 5336) = *(unsigned char *)(a2 + 5336);
    uint64_t v1621 = *(void *)(a2 + 5344);
    *(unsigned char *)(a1 + 5352) = *(unsigned char *)(a2 + 5352);
    *(void *)(a1 + 5344) = v1621;
  }
  v1622 = (long long *)(a1 + 5360);
  v1623 = (long long *)(a2 + 5360);
  uint64_t v1624 = *(void *)(a2 + 5360);
  if (*(void *)(a1 + 5360) == 1)
  {
    if (v1624 == 1)
    {
      long long v1625 = *v1623;
      *(_OWORD *)(a1 + 5369) = *(_OWORD *)(a2 + 5369);
      long long *v1622 = v1625;
    }
    else
    {
      *(void *)(a1 + 5360) = v1624;
      *(unsigned char *)(a1 + 5368) = *(unsigned char *)(a2 + 5368);
      uint64_t v1627 = *(void *)(a2 + 5376);
      *(unsigned char *)(a1 + 5384) = *(unsigned char *)(a2 + 5384);
      *(void *)(a1 + 5376) = v1627;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1624 == 1)
  {
    sub_10009F534(a1 + 5360);
    long long v1626 = *(_OWORD *)(a2 + 5369);
    long long *v1622 = *v1623;
    *(_OWORD *)(a1 + 5369) = v1626;
  }
  else
  {
    *(void *)(a1 + 5360) = v1624;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 5368) = *(unsigned char *)(a2 + 5368);
    uint64_t v1628 = *(void *)(a2 + 5376);
    *(unsigned char *)(a1 + 5384) = *(unsigned char *)(a2 + 5384);
    *(void *)(a1 + 5376) = v1628;
  }
  v1629 = (long long *)(a1 + 5392);
  v1630 = (long long *)(a2 + 5392);
  uint64_t v1631 = *(void *)(a2 + 5392);
  if (*(void *)(a1 + 5392) == 1)
  {
    if (v1631 == 1)
    {
      long long v1632 = *v1630;
      *(_OWORD *)(a1 + 5401) = *(_OWORD *)(a2 + 5401);
      long long *v1629 = v1632;
    }
    else
    {
      *(void *)(a1 + 5392) = v1631;
      *(unsigned char *)(a1 + 5400) = *(unsigned char *)(a2 + 5400);
      uint64_t v1634 = *(void *)(a2 + 5408);
      *(unsigned char *)(a1 + 5416) = *(unsigned char *)(a2 + 5416);
      *(void *)(a1 + 5408) = v1634;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1631 == 1)
  {
    sub_10009F534(a1 + 5392);
    long long v1633 = *(_OWORD *)(a2 + 5401);
    long long *v1629 = *v1630;
    *(_OWORD *)(a1 + 5401) = v1633;
  }
  else
  {
    *(void *)(a1 + 5392) = v1631;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 5400) = *(unsigned char *)(a2 + 5400);
    uint64_t v1635 = *(void *)(a2 + 5408);
    *(unsigned char *)(a1 + 5416) = *(unsigned char *)(a2 + 5416);
    *(void *)(a1 + 5408) = v1635;
  }
  v1636 = (long long *)(a1 + 5424);
  v1637 = (long long *)(a2 + 5424);
  uint64_t v1638 = *(void *)(a2 + 5424);
  if (*(void *)(a1 + 5424) == 1)
  {
    if (v1638 == 1)
    {
      long long v1639 = *v1637;
      *(_OWORD *)(a1 + 5433) = *(_OWORD *)(a2 + 5433);
      long long *v1636 = v1639;
    }
    else
    {
      *(void *)(a1 + 5424) = v1638;
      *(unsigned char *)(a1 + 5432) = *(unsigned char *)(a2 + 5432);
      uint64_t v1641 = *(void *)(a2 + 5440);
      *(unsigned char *)(a1 + 5448) = *(unsigned char *)(a2 + 5448);
      *(void *)(a1 + 5440) = v1641;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1638 == 1)
  {
    sub_10009F534(a1 + 5424);
    long long v1640 = *(_OWORD *)(a2 + 5433);
    long long *v1636 = *v1637;
    *(_OWORD *)(a1 + 5433) = v1640;
  }
  else
  {
    *(void *)(a1 + 5424) = v1638;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 5432) = *(unsigned char *)(a2 + 5432);
    uint64_t v1642 = *(void *)(a2 + 5440);
    *(unsigned char *)(a1 + 5448) = *(unsigned char *)(a2 + 5448);
    *(void *)(a1 + 5440) = v1642;
  }
  v1643 = (long long *)(a1 + 5456);
  v1644 = (long long *)(a2 + 5456);
  uint64_t v1645 = *(void *)(a2 + 5456);
  if (*(void *)(a1 + 5456) == 1)
  {
    if (v1645 == 1)
    {
      long long v1646 = *v1644;
      *(_OWORD *)(a1 + 5465) = *(_OWORD *)(a2 + 5465);
      long long *v1643 = v1646;
    }
    else
    {
      *(void *)(a1 + 5456) = v1645;
      *(unsigned char *)(a1 + 5464) = *(unsigned char *)(a2 + 5464);
      uint64_t v1648 = *(void *)(a2 + 5472);
      *(unsigned char *)(a1 + 5480) = *(unsigned char *)(a2 + 5480);
      *(void *)(a1 + 5472) = v1648;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1645 == 1)
  {
    sub_10009F534(a1 + 5456);
    long long v1647 = *(_OWORD *)(a2 + 5465);
    long long *v1643 = *v1644;
    *(_OWORD *)(a1 + 5465) = v1647;
  }
  else
  {
    *(void *)(a1 + 5456) = v1645;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 5464) = *(unsigned char *)(a2 + 5464);
    uint64_t v1649 = *(void *)(a2 + 5472);
    *(unsigned char *)(a1 + 5480) = *(unsigned char *)(a2 + 5480);
    *(void *)(a1 + 5472) = v1649;
  }
  v1650 = (long long *)(a1 + 5488);
  v1651 = (long long *)(a2 + 5488);
  uint64_t v1652 = *(void *)(a2 + 5488);
  if (*(void *)(a1 + 5488) == 1)
  {
    if (v1652 == 1)
    {
      long long v1653 = *v1651;
      *(_OWORD *)(a1 + 5497) = *(_OWORD *)(a2 + 5497);
      long long *v1650 = v1653;
    }
    else
    {
      *(void *)(a1 + 5488) = v1652;
      *(unsigned char *)(a1 + 5496) = *(unsigned char *)(a2 + 5496);
      uint64_t v1655 = *(void *)(a2 + 5504);
      *(unsigned char *)(a1 + 5512) = *(unsigned char *)(a2 + 5512);
      *(void *)(a1 + 5504) = v1655;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1652 == 1)
  {
    sub_10009F534(a1 + 5488);
    long long v1654 = *(_OWORD *)(a2 + 5497);
    long long *v1650 = *v1651;
    *(_OWORD *)(a1 + 5497) = v1654;
  }
  else
  {
    *(void *)(a1 + 5488) = v1652;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 5496) = *(unsigned char *)(a2 + 5496);
    uint64_t v1656 = *(void *)(a2 + 5504);
    *(unsigned char *)(a1 + 5512) = *(unsigned char *)(a2 + 5512);
    *(void *)(a1 + 5504) = v1656;
  }
  v1657 = (long long *)(a1 + 5520);
  v1658 = (long long *)(a2 + 5520);
  uint64_t v1659 = *(void *)(a2 + 5520);
  if (*(void *)(a1 + 5520) == 1)
  {
    if (v1659 == 1)
    {
      long long v1660 = *v1658;
      *(_OWORD *)(a1 + 5529) = *(_OWORD *)(a2 + 5529);
      long long *v1657 = v1660;
    }
    else
    {
      *(void *)(a1 + 5520) = v1659;
      *(unsigned char *)(a1 + 5528) = *(unsigned char *)(a2 + 5528);
      uint64_t v1662 = *(void *)(a2 + 5536);
      *(unsigned char *)(a1 + 5544) = *(unsigned char *)(a2 + 5544);
      *(void *)(a1 + 5536) = v1662;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1659 == 1)
  {
    sub_10009F534(a1 + 5520);
    long long v1661 = *(_OWORD *)(a2 + 5529);
    long long *v1657 = *v1658;
    *(_OWORD *)(a1 + 5529) = v1661;
  }
  else
  {
    *(void *)(a1 + 5520) = v1659;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 5528) = *(unsigned char *)(a2 + 5528);
    uint64_t v1663 = *(void *)(a2 + 5536);
    *(unsigned char *)(a1 + 5544) = *(unsigned char *)(a2 + 5544);
    *(void *)(a1 + 5536) = v1663;
  }
  v1664 = (long long *)(a1 + 5552);
  v1665 = (long long *)(a2 + 5552);
  uint64_t v1666 = *(void *)(a2 + 5552);
  if (*(void *)(a1 + 5552) == 1)
  {
    if (v1666 == 1)
    {
      long long v1667 = *v1665;
      *(_OWORD *)(a1 + 5561) = *(_OWORD *)(a2 + 5561);
      long long *v1664 = v1667;
    }
    else
    {
      *(void *)(a1 + 5552) = v1666;
      *(unsigned char *)(a1 + 5560) = *(unsigned char *)(a2 + 5560);
      uint64_t v1669 = *(void *)(a2 + 5568);
      *(unsigned char *)(a1 + 5576) = *(unsigned char *)(a2 + 5576);
      *(void *)(a1 + 5568) = v1669;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1666 == 1)
  {
    sub_10009F534(a1 + 5552);
    long long v1668 = *(_OWORD *)(a2 + 5561);
    long long *v1664 = *v1665;
    *(_OWORD *)(a1 + 5561) = v1668;
  }
  else
  {
    *(void *)(a1 + 5552) = v1666;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 5560) = *(unsigned char *)(a2 + 5560);
    uint64_t v1670 = *(void *)(a2 + 5568);
    *(unsigned char *)(a1 + 5576) = *(unsigned char *)(a2 + 5576);
    *(void *)(a1 + 5568) = v1670;
  }
  v1671 = (long long *)(a1 + 5584);
  v1672 = (long long *)(a2 + 5584);
  uint64_t v1673 = *(void *)(a2 + 5584);
  if (*(void *)(a1 + 5584) == 1)
  {
    if (v1673 == 1)
    {
      long long v1674 = *v1672;
      *(_OWORD *)(a1 + 5593) = *(_OWORD *)(a2 + 5593);
      long long *v1671 = v1674;
    }
    else
    {
      *(void *)(a1 + 5584) = v1673;
      *(unsigned char *)(a1 + 5592) = *(unsigned char *)(a2 + 5592);
      uint64_t v1676 = *(void *)(a2 + 5600);
      *(unsigned char *)(a1 + 5608) = *(unsigned char *)(a2 + 5608);
      *(void *)(a1 + 5600) = v1676;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1673 == 1)
  {
    sub_10009F534(a1 + 5584);
    long long v1675 = *(_OWORD *)(a2 + 5593);
    long long *v1671 = *v1672;
    *(_OWORD *)(a1 + 5593) = v1675;
  }
  else
  {
    *(void *)(a1 + 5584) = v1673;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 5592) = *(unsigned char *)(a2 + 5592);
    uint64_t v1677 = *(void *)(a2 + 5600);
    *(unsigned char *)(a1 + 5608) = *(unsigned char *)(a2 + 5608);
    *(void *)(a1 + 5600) = v1677;
  }
  v1678 = (long long *)(a1 + 5616);
  v1679 = (long long *)(a2 + 5616);
  uint64_t v1680 = *(void *)(a2 + 5616);
  if (*(void *)(a1 + 5616) == 1)
  {
    if (v1680 == 1)
    {
      long long v1681 = *v1679;
      *(_OWORD *)(a1 + 5625) = *(_OWORD *)(a2 + 5625);
      long long *v1678 = v1681;
    }
    else
    {
      *(void *)(a1 + 5616) = v1680;
      *(unsigned char *)(a1 + 5624) = *(unsigned char *)(a2 + 5624);
      uint64_t v1683 = *(void *)(a2 + 5632);
      *(unsigned char *)(a1 + 5640) = *(unsigned char *)(a2 + 5640);
      *(void *)(a1 + 5632) = v1683;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1680 == 1)
  {
    sub_10009F534(a1 + 5616);
    long long v1682 = *(_OWORD *)(a2 + 5625);
    long long *v1678 = *v1679;
    *(_OWORD *)(a1 + 5625) = v1682;
  }
  else
  {
    *(void *)(a1 + 5616) = v1680;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 5624) = *(unsigned char *)(a2 + 5624);
    uint64_t v1684 = *(void *)(a2 + 5632);
    *(unsigned char *)(a1 + 5640) = *(unsigned char *)(a2 + 5640);
    *(void *)(a1 + 5632) = v1684;
  }
  v1685 = (long long *)(a1 + 5648);
  v1686 = (long long *)(a2 + 5648);
  uint64_t v1687 = *(void *)(a2 + 5648);
  if (*(void *)(a1 + 5648) == 1)
  {
    if (v1687 == 1)
    {
      long long v1688 = *v1686;
      *(_OWORD *)(a1 + 5657) = *(_OWORD *)(a2 + 5657);
      long long *v1685 = v1688;
    }
    else
    {
      *(void *)(a1 + 5648) = v1687;
      *(unsigned char *)(a1 + 5656) = *(unsigned char *)(a2 + 5656);
      uint64_t v1690 = *(void *)(a2 + 5664);
      *(unsigned char *)(a1 + 5672) = *(unsigned char *)(a2 + 5672);
      *(void *)(a1 + 5664) = v1690;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1687 == 1)
  {
    sub_10009F534(a1 + 5648);
    long long v1689 = *(_OWORD *)(a2 + 5657);
    long long *v1685 = *v1686;
    *(_OWORD *)(a1 + 5657) = v1689;
  }
  else
  {
    *(void *)(a1 + 5648) = v1687;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 5656) = *(unsigned char *)(a2 + 5656);
    uint64_t v1691 = *(void *)(a2 + 5664);
    *(unsigned char *)(a1 + 5672) = *(unsigned char *)(a2 + 5672);
    *(void *)(a1 + 5664) = v1691;
  }
  v1692 = (long long *)(a1 + 5680);
  v1693 = (long long *)(a2 + 5680);
  uint64_t v1694 = *(void *)(a2 + 5680);
  if (*(void *)(a1 + 5680) == 1)
  {
    if (v1694 == 1)
    {
      long long v1695 = *v1693;
      *(_OWORD *)(a1 + 5689) = *(_OWORD *)(a2 + 5689);
      long long *v1692 = v1695;
    }
    else
    {
      *(void *)(a1 + 5680) = v1694;
      *(unsigned char *)(a1 + 5688) = *(unsigned char *)(a2 + 5688);
      uint64_t v1697 = *(void *)(a2 + 5696);
      *(unsigned char *)(a1 + 5704) = *(unsigned char *)(a2 + 5704);
      *(void *)(a1 + 5696) = v1697;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1694 == 1)
  {
    sub_10009F534(a1 + 5680);
    long long v1696 = *(_OWORD *)(a2 + 5689);
    long long *v1692 = *v1693;
    *(_OWORD *)(a1 + 5689) = v1696;
  }
  else
  {
    *(void *)(a1 + 5680) = v1694;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 5688) = *(unsigned char *)(a2 + 5688);
    uint64_t v1698 = *(void *)(a2 + 5696);
    *(unsigned char *)(a1 + 5704) = *(unsigned char *)(a2 + 5704);
    *(void *)(a1 + 5696) = v1698;
  }
  v1699 = (long long *)(a1 + 5712);
  v1700 = (long long *)(a2 + 5712);
  uint64_t v1701 = *(void *)(a2 + 5712);
  if (*(void *)(a1 + 5712) == 1)
  {
    if (v1701 == 1)
    {
      long long v1702 = *v1700;
      *(_OWORD *)(a1 + 5721) = *(_OWORD *)(a2 + 5721);
      long long *v1699 = v1702;
    }
    else
    {
      *(void *)(a1 + 5712) = v1701;
      *(unsigned char *)(a1 + 5720) = *(unsigned char *)(a2 + 5720);
      uint64_t v1704 = *(void *)(a2 + 5728);
      *(unsigned char *)(a1 + 5736) = *(unsigned char *)(a2 + 5736);
      *(void *)(a1 + 5728) = v1704;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1701 == 1)
  {
    sub_10009F534(a1 + 5712);
    long long v1703 = *(_OWORD *)(a2 + 5721);
    long long *v1699 = *v1700;
    *(_OWORD *)(a1 + 5721) = v1703;
  }
  else
  {
    *(void *)(a1 + 5712) = v1701;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 5720) = *(unsigned char *)(a2 + 5720);
    uint64_t v1705 = *(void *)(a2 + 5728);
    *(unsigned char *)(a1 + 5736) = *(unsigned char *)(a2 + 5736);
    *(void *)(a1 + 5728) = v1705;
  }
  v1706 = (long long *)(a1 + 5744);
  v1707 = (long long *)(a2 + 5744);
  uint64_t v1708 = *(void *)(a2 + 5744);
  if (*(void *)(a1 + 5744) == 1)
  {
    if (v1708 == 1)
    {
      long long v1709 = *v1707;
      *(_OWORD *)(a1 + 5753) = *(_OWORD *)(a2 + 5753);
      long long *v1706 = v1709;
    }
    else
    {
      *(void *)(a1 + 5744) = v1708;
      *(unsigned char *)(a1 + 5752) = *(unsigned char *)(a2 + 5752);
      uint64_t v1711 = *(void *)(a2 + 5760);
      *(unsigned char *)(a1 + 5768) = *(unsigned char *)(a2 + 5768);
      *(void *)(a1 + 5760) = v1711;
      swift_bridgeObjectRetain();
    }
  }
  else if (v1708 == 1)
  {
    sub_10009F534(a1 + 5744);
    long long v1710 = *(_OWORD *)(a2 + 5753);
    long long *v1706 = *v1707;
    *(_OWORD *)(a1 + 5753) = v1710;
  }
  else
  {
    *(void *)(a1 + 5744) = v1708;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 5752) = *(unsigned char *)(a2 + 5752);
    uint64_t v1712 = *(void *)(a2 + 5760);
    *(unsigned char *)(a1 + 5768) = *(unsigned char *)(a2 + 5768);
    *(void *)(a1 + 5760) = v1712;
  }
  long long v1713 = *(_OWORD *)(a2 + 5776);
  *(unsigned char *)(a1 + 5792) = *(unsigned char *)(a2 + 5792);
  *(_OWORD *)(a1 + 5776) = v1713;
  char v1714 = *(unsigned char *)(a2 + 5816);
  *(_OWORD *)(a1 + 5800) = *(_OWORD *)(a2 + 5800);
  *(unsigned char *)(a1 + 5816) = v1714;
  *(unsigned char *)(a1 + 5817) = *(unsigned char *)(a2 + 5817);
  *(unsigned char *)(a1 + 5818) = *(unsigned char *)(a2 + 5818);
  *(unsigned char *)(a1 + 5819) = *(unsigned char *)(a2 + 5819);
  *(unsigned char *)(a1 + 5820) = *(unsigned char *)(a2 + 5820);
  *(unsigned char *)(a1 + 5821) = *(unsigned char *)(a2 + 5821);
  *(unsigned char *)(a1 + 5822) = *(unsigned char *)(a2 + 5822);
  *(unsigned char *)(a1 + 5823) = *(unsigned char *)(a2 + 5823);
  *(void *)(a1 + 5824) = *(void *)(a2 + 5824);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 5832) = *(void *)(a2 + 5832);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_1730:
  *(void *)(a1 + 5840) = *(void *)(a2 + 5840);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  char v1715 = *(unsigned char *)(a2 + 5852);
  *(_DWORD *)(a1 + 5848) = *(_DWORD *)(a2 + 5848);
  *(unsigned char *)(a1 + 5852) = v1715;
  uint64_t v1716 = *(void *)(a2 + 5856);
  *(unsigned char *)(a1 + 5864) = *(unsigned char *)(a2 + 5864);
  *(void *)(a1 + 5856) = v1716;
  uint64_t v1717 = *(void *)(a2 + 5872);
  *(unsigned char *)(a1 + 5880) = *(unsigned char *)(a2 + 5880);
  *(void *)(a1 + 5872) = v1717;
  uint64_t v1718 = *(void *)(a2 + 5888);
  *(unsigned char *)(a1 + 5896) = *(unsigned char *)(a2 + 5896);
  *(void *)(a1 + 5888) = v1718;
  uint64_t v1719 = *(void *)(a2 + 5904);
  *(unsigned char *)(a1 + 5912) = *(unsigned char *)(a2 + 5912);
  *(void *)(a1 + 5904) = v1719;
  LODWORD(v1719) = *(_DWORD *)(a2 + 5916);
  *(unsigned char *)(a1 + 5920) = *(unsigned char *)(a2 + 5920);
  *(_DWORD *)(a1 + 5916) = v1719;
  return a1;
}

uint64_t sub_10009F534(uint64_t a1)
{
  return a1;
}

void *sub_10009F560(void *a1)
{
  return a1;
}

void *initializeWithTake for IQModel(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x1721uLL);
}

void *assignWithTake for IQModel(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + 825;
  uint64_t v5 = a2 + 280;
  uint64_t v6 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + 2;
  long long v8 = (_OWORD *)(a2 + 16);
  if (a1[104] == 1) {
    goto LABEL_4;
  }
  if (*(void *)(a2 + 832) == 1)
  {
    sub_10009F560(a1 + 2);
LABEL_4:
    memcpy(a1 + 2, (const void *)(a2 + 16), 0x340uLL);
    goto LABEL_126;
  }
  if (*v7 == 1) {
    goto LABEL_8;
  }
  if (*(void *)v8 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 2));
LABEL_8:
    *(_OWORD *)uint64_t v7 = *v8;
    *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)(a2 + 25);
    goto LABEL_10;
  }
  a1[2] = *(void *)v8;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 24) = *(unsigned char *)(a2 + 24);
  a1[4] = *(void *)(a2 + 32);
  *((unsigned char *)a1 + 40) = *(unsigned char *)(a2 + 40);
LABEL_10:
  uint64_t v9 = *(void *)(a2 + 48);
  if (a1[6] == 1)
  {
LABEL_13:
    *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)((char *)a1 + 57) = *(_OWORD *)(a2 + 57);
    goto LABEL_15;
  }
  if (v9 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 6));
    goto LABEL_13;
  }
  a1[6] = v9;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 56) = *(unsigned char *)(a2 + 56);
  a1[8] = *(void *)(a2 + 64);
  *((unsigned char *)a1 + 72) = *(unsigned char *)(a2 + 72);
LABEL_15:
  uint64_t v10 = *(void *)(a2 + 80);
  if (a1[10] == 1)
  {
LABEL_18:
    *((_OWORD *)a1 + 5) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)((char *)a1 + 89) = *(_OWORD *)(a2 + 89);
    goto LABEL_20;
  }
  if (v10 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 10));
    goto LABEL_18;
  }
  a1[10] = v10;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 88) = *(unsigned char *)(a2 + 88);
  a1[12] = *(void *)(a2 + 96);
  *((unsigned char *)a1 + 104) = *(unsigned char *)(a2 + 104);
LABEL_20:
  uint64_t v11 = *(void *)(a2 + 112);
  if (a1[14] == 1)
  {
LABEL_23:
    *((_OWORD *)a1 + 7) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)((char *)a1 + 121) = *(_OWORD *)(a2 + 121);
    goto LABEL_25;
  }
  if (v11 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 14));
    goto LABEL_23;
  }
  a1[14] = v11;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 120) = *(unsigned char *)(a2 + 120);
  a1[16] = *(void *)(a2 + 128);
  *((unsigned char *)a1 + 136) = *(unsigned char *)(a2 + 136);
LABEL_25:
  uint64_t v12 = *(void *)(a2 + 144);
  if (a1[18] == 1)
  {
LABEL_28:
    *((_OWORD *)a1 + 9) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)((char *)a1 + 153) = *(_OWORD *)(a2 + 153);
    goto LABEL_30;
  }
  if (v12 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 18));
    goto LABEL_28;
  }
  a1[18] = v12;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 152) = *(unsigned char *)(a2 + 152);
  a1[20] = *(void *)(a2 + 160);
  *((unsigned char *)a1 + 168) = *(unsigned char *)(a2 + 168);
LABEL_30:
  uint64_t v13 = *(void *)(a2 + 176);
  if (a1[22] == 1)
  {
LABEL_33:
    *((_OWORD *)a1 + 11) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)((char *)a1 + 185) = *(_OWORD *)(a2 + 185);
    goto LABEL_35;
  }
  if (v13 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 22));
    goto LABEL_33;
  }
  a1[22] = v13;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 184) = *(unsigned char *)(a2 + 184);
  a1[24] = *(void *)(a2 + 192);
  *((unsigned char *)a1 + 200) = *(unsigned char *)(a2 + 200);
LABEL_35:
  uint64_t v14 = *(void *)(a2 + 208);
  if (a1[26] == 1)
  {
LABEL_38:
    *((_OWORD *)a1 + 13) = *(_OWORD *)(a2 + 208);
    *(_OWORD *)((char *)a1 + 217) = *(_OWORD *)(a2 + 217);
    goto LABEL_40;
  }
  if (v14 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 26));
    goto LABEL_38;
  }
  a1[26] = v14;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 216) = *(unsigned char *)(a2 + 216);
  a1[28] = *(void *)(a2 + 224);
  *((unsigned char *)a1 + 232) = *(unsigned char *)(a2 + 232);
LABEL_40:
  uint64_t v15 = *(void *)(a2 + 240);
  if (a1[30] == 1)
  {
LABEL_43:
    *((_OWORD *)a1 + 15) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)((char *)a1 + 249) = *(_OWORD *)(a2 + 249);
    goto LABEL_45;
  }
  if (v15 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 30));
    goto LABEL_43;
  }
  a1[30] = v15;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 248) = *(unsigned char *)(a2 + 248);
  a1[32] = *(void *)(a2 + 256);
  *((unsigned char *)a1 + 264) = *(unsigned char *)(a2 + 264);
LABEL_45:
  if (a1[34] == 1)
  {
LABEL_48:
    *((_OWORD *)a1 + 17) = *(_OWORD *)(a2 + 272);
    *(_OWORD *)((char *)a1 + 281) = *(_OWORD *)(a2 + 281);
    goto LABEL_50;
  }
  uint64_t v16 = *(void *)(a2 + 272);
  if (v16 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 34));
    goto LABEL_48;
  }
  a1[34] = v16;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 280) = *(unsigned char *)v5;
  a1[36] = *(void *)(a2 + 288);
  *((unsigned char *)a1 + 296) = *(unsigned char *)(a2 + 296);
LABEL_50:
  if (a1[38] == 1)
  {
LABEL_53:
    *((_OWORD *)a1 + 19) = *(_OWORD *)(a2 + 304);
    *(_OWORD *)((char *)a1 + 313) = *(_OWORD *)(a2 + 313);
    goto LABEL_55;
  }
  uint64_t v17 = *(void *)(a2 + 304);
  if (v17 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 38));
    goto LABEL_53;
  }
  a1[38] = v17;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 312) = *(unsigned char *)(v5 + 32);
  a1[40] = *(void *)(a2 + 320);
  *((unsigned char *)a1 + 328) = *(unsigned char *)(a2 + 328);
LABEL_55:
  if (a1[42] == 1)
  {
LABEL_58:
    *((_OWORD *)a1 + 21) = *(_OWORD *)(a2 + 336);
    *(_OWORD *)((char *)a1 + 345) = *(_OWORD *)(a2 + 345);
    goto LABEL_60;
  }
  uint64_t v18 = *(void *)(a2 + 336);
  if (v18 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 42));
    goto LABEL_58;
  }
  a1[42] = v18;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 344) = *(unsigned char *)(v5 + 64);
  a1[44] = *(void *)(a2 + 352);
  *((unsigned char *)a1 + 360) = *(unsigned char *)(a2 + 360);
LABEL_60:
  if (a1[46] == 1)
  {
LABEL_63:
    *((_OWORD *)a1 + 23) = *(_OWORD *)(a2 + 368);
    *(_OWORD *)((char *)a1 + 377) = *(_OWORD *)(a2 + 377);
    goto LABEL_65;
  }
  uint64_t v19 = *(void *)(a2 + 368);
  if (v19 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 46));
    goto LABEL_63;
  }
  a1[46] = v19;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 376) = *(unsigned char *)(v5 + 96);
  a1[48] = *(void *)(a2 + 384);
  *((unsigned char *)a1 + 392) = *(unsigned char *)(a2 + 392);
LABEL_65:
  if (a1[50] == 1)
  {
LABEL_68:
    *((_OWORD *)a1 + 25) = *(_OWORD *)(a2 + 400);
    *(_OWORD *)((char *)a1 + 409) = *(_OWORD *)(a2 + 409);
    goto LABEL_70;
  }
  uint64_t v20 = *(void *)(a2 + 400);
  if (v20 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 50));
    goto LABEL_68;
  }
  a1[50] = v20;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 408) = *(unsigned char *)(v5 + 128);
  a1[52] = *(void *)(a2 + 416);
  *((unsigned char *)a1 + 424) = *(unsigned char *)(a2 + 424);
LABEL_70:
  if (a1[54] == 1)
  {
LABEL_73:
    *((_OWORD *)a1 + 27) = *(_OWORD *)(a2 + 432);
    *(_OWORD *)((char *)a1 + 441) = *(_OWORD *)(a2 + 441);
    goto LABEL_75;
  }
  uint64_t v21 = *(void *)(a2 + 432);
  if (v21 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 54));
    goto LABEL_73;
  }
  a1[54] = v21;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 440) = *(unsigned char *)(v5 + 160);
  a1[56] = *(void *)(a2 + 448);
  *((unsigned char *)a1 + 456) = *(unsigned char *)(a2 + 456);
LABEL_75:
  if (a1[58] == 1)
  {
LABEL_78:
    *((_OWORD *)a1 + 29) = *(_OWORD *)(a2 + 464);
    *(_OWORD *)((char *)a1 + 473) = *(_OWORD *)(a2 + 473);
    goto LABEL_80;
  }
  uint64_t v22 = *(void *)(a2 + 464);
  if (v22 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 58));
    goto LABEL_78;
  }
  a1[58] = v22;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 472) = *(unsigned char *)(v5 + 192);
  a1[60] = *(void *)(a2 + 480);
  *((unsigned char *)a1 + 488) = *(unsigned char *)(a2 + 488);
LABEL_80:
  if (a1[62] == 1)
  {
LABEL_83:
    *((_OWORD *)a1 + 31) = *(_OWORD *)(a2 + 496);
    *(_OWORD *)((char *)a1 + 505) = *(_OWORD *)(a2 + 505);
    goto LABEL_85;
  }
  uint64_t v23 = *(void *)(a2 + 496);
  if (v23 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 62));
    goto LABEL_83;
  }
  a1[62] = v23;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 504) = *(unsigned char *)(v5 + 224);
  a1[64] = *(void *)(a2 + 512);
  *((unsigned char *)a1 + 520) = *(unsigned char *)(a2 + 520);
LABEL_85:
  if (a1[66] == 1)
  {
LABEL_88:
    *((_OWORD *)a1 + 33) = *(_OWORD *)(a2 + 528);
    *(_OWORD *)((char *)a1 + 537) = *(_OWORD *)(a2 + 537);
    goto LABEL_90;
  }
  uint64_t v24 = *(void *)(a2 + 528);
  if (v24 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 66));
    goto LABEL_88;
  }
  a1[66] = v24;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 536) = *(unsigned char *)(v5 + 256);
  a1[68] = *(void *)(a2 + 544);
  *((unsigned char *)a1 + 552) = *(unsigned char *)(a2 + 552);
LABEL_90:
  if (a1[70] == 1)
  {
LABEL_93:
    *((_OWORD *)a1 + 35) = *(_OWORD *)(a2 + 560);
    *(_OWORD *)((char *)a1 + 569) = *(_OWORD *)(a2 + 569);
    goto LABEL_95;
  }
  uint64_t v25 = *(void *)(a2 + 560);
  if (v25 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 70));
    goto LABEL_93;
  }
  a1[70] = v25;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 568) = *(unsigned char *)(v5 + 288);
  a1[72] = *(void *)(a2 + 576);
  *((unsigned char *)a1 + 584) = *(unsigned char *)(a2 + 584);
LABEL_95:
  if (a1[74] == 1)
  {
LABEL_98:
    *((_OWORD *)a1 + 37) = *(_OWORD *)(a2 + 592);
    *(_OWORD *)((char *)a1 + 601) = *(_OWORD *)(a2 + 601);
    goto LABEL_100;
  }
  uint64_t v26 = *(void *)(a2 + 592);
  if (v26 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 74));
    goto LABEL_98;
  }
  a1[74] = v26;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 600) = *(unsigned char *)(v5 + 320);
  a1[76] = *(void *)(a2 + 608);
  *((unsigned char *)a1 + 616) = *(unsigned char *)(a2 + 616);
LABEL_100:
  if (a1[78] == 1)
  {
LABEL_103:
    *((_OWORD *)a1 + 39) = *(_OWORD *)(a2 + 624);
    *(_OWORD *)((char *)a1 + 633) = *(_OWORD *)(a2 + 633);
    goto LABEL_105;
  }
  uint64_t v27 = *(void *)(a2 + 624);
  if (v27 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 78));
    goto LABEL_103;
  }
  a1[78] = v27;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 632) = *(unsigned char *)(v5 + 352);
  a1[80] = *(void *)(a2 + 640);
  *((unsigned char *)a1 + 648) = *(unsigned char *)(a2 + 648);
LABEL_105:
  if (a1[82] == 1)
  {
LABEL_108:
    *((_OWORD *)a1 + 41) = *(_OWORD *)(a2 + 656);
    *(_OWORD *)((char *)a1 + 665) = *(_OWORD *)(a2 + 665);
    goto LABEL_110;
  }
  uint64_t v28 = *(void *)(a2 + 656);
  if (v28 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 82));
    goto LABEL_108;
  }
  a1[82] = v28;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 664) = *(unsigned char *)(v5 + 384);
  a1[84] = *(void *)(a2 + 672);
  *((unsigned char *)a1 + 680) = *(unsigned char *)(a2 + 680);
LABEL_110:
  if (a1[86] == 1)
  {
LABEL_113:
    *((_OWORD *)a1 + 43) = *(_OWORD *)(a2 + 688);
    *(_OWORD *)((char *)a1 + 697) = *(_OWORD *)(a2 + 697);
    goto LABEL_115;
  }
  uint64_t v29 = *(void *)(a2 + 688);
  if (v29 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 86));
    goto LABEL_113;
  }
  a1[86] = v29;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 696) = *(unsigned char *)(v5 + 416);
  a1[88] = *(void *)(a2 + 704);
  *((unsigned char *)a1 + 712) = *(unsigned char *)(a2 + 712);
LABEL_115:
  if (a1[90] == 1)
  {
LABEL_118:
    *((_OWORD *)a1 + 45) = *(_OWORD *)(a2 + 720);
    *(_OWORD *)((char *)a1 + 729) = *(_OWORD *)(a2 + 729);
    goto LABEL_120;
  }
  uint64_t v30 = *(void *)(a2 + 720);
  if (v30 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 90));
    goto LABEL_118;
  }
  a1[90] = v30;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 728) = *(unsigned char *)(v5 + 448);
  a1[92] = *(void *)(a2 + 736);
  *((unsigned char *)a1 + 744) = *(unsigned char *)(a2 + 744);
LABEL_120:
  if (a1[94] != 1)
  {
    uint64_t v31 = *(void *)(a2 + 752);
    if (v31 != 1)
    {
      a1[94] = v31;
      swift_bridgeObjectRelease();
      *((unsigned char *)a1 + 760) = *(unsigned char *)(v5 + 480);
      a1[96] = *(void *)(a2 + 768);
      *((unsigned char *)a1 + 776) = *(unsigned char *)(a2 + 776);
      goto LABEL_125;
    }
    sub_10009F534((uint64_t)(a1 + 94));
  }
  *((_OWORD *)a1 + 47) = *(_OWORD *)(a2 + 752);
  *(_OWORD *)((char *)a1 + 761) = *(_OWORD *)(a2 + 761);
LABEL_125:
  *((_OWORD *)a1 + 49) = *(_OWORD *)(a2 + 784);
  *((unsigned char *)a1 + 800) = *(unsigned char *)(a2 + 800);
  *((unsigned char *)a1 + 824) = *(unsigned char *)(a2 + 824);
  *(_OWORD *)(a1 + 101) = *(_OWORD *)(a2 + 808);
  *(_DWORD *)uint64_t v4 = *(_DWORD *)(v5 + 545);
  *(_WORD *)((char *)a1 + 829) = *(_WORD *)(a2 + 829);
  *((unsigned char *)a1 + 831) = *(unsigned char *)(a2 + 831);
  a1[104] = *(void *)(a2 + 832);
  swift_bridgeObjectRelease();
  a1[105] = *(void *)(a2 + 840);
  swift_bridgeObjectRelease();
LABEL_126:
  long long v32 = a1 + 106;
  uint64_t v33 = (_OWORD *)(a2 + 848);
  if (a1[208] == 1)
  {
LABEL_129:
    memcpy(a1 + 106, (const void *)(a2 + 848), 0x340uLL);
    goto LABEL_251;
  }
  if (*(void *)(a2 + 1664) == 1)
  {
    sub_10009F560(a1 + 106);
    goto LABEL_129;
  }
  if (*v32 == 1) {
    goto LABEL_133;
  }
  if (*(void *)v33 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 106));
LABEL_133:
    *(_OWORD *)long long v32 = *v33;
    *(_OWORD *)((char *)a1 + 857) = *(_OWORD *)(a2 + 857);
    goto LABEL_135;
  }
  a1[106] = *(void *)v33;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 856) = *(unsigned char *)(v5 + 576);
  a1[108] = *(void *)(a2 + 864);
  *((unsigned char *)a1 + 872) = *(unsigned char *)(a2 + 872);
LABEL_135:
  if (a1[110] == 1)
  {
LABEL_138:
    *((_OWORD *)a1 + 55) = *(_OWORD *)(a2 + 880);
    *(_OWORD *)((char *)a1 + 889) = *(_OWORD *)(a2 + 889);
    goto LABEL_140;
  }
  uint64_t v34 = *(void *)(a2 + 880);
  if (v34 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 110));
    goto LABEL_138;
  }
  a1[110] = v34;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 888) = *(unsigned char *)(v5 + 608);
  a1[112] = *(void *)(a2 + 896);
  *((unsigned char *)a1 + 904) = *(unsigned char *)(a2 + 904);
LABEL_140:
  if (a1[114] == 1)
  {
LABEL_143:
    *((_OWORD *)a1 + 57) = *(_OWORD *)(a2 + 912);
    *(_OWORD *)((char *)a1 + 921) = *(_OWORD *)(a2 + 921);
    goto LABEL_145;
  }
  uint64_t v35 = *(void *)(a2 + 912);
  if (v35 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 114));
    goto LABEL_143;
  }
  a1[114] = v35;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 920) = *(unsigned char *)(v5 + 640);
  a1[116] = *(void *)(a2 + 928);
  *((unsigned char *)a1 + 936) = *(unsigned char *)(a2 + 936);
LABEL_145:
  if (a1[118] == 1)
  {
LABEL_148:
    *((_OWORD *)a1 + 59) = *(_OWORD *)(a2 + 944);
    *(_OWORD *)((char *)a1 + 953) = *(_OWORD *)(a2 + 953);
    goto LABEL_150;
  }
  uint64_t v36 = *(void *)(a2 + 944);
  if (v36 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 118));
    goto LABEL_148;
  }
  a1[118] = v36;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 952) = *(unsigned char *)(v5 + 672);
  a1[120] = *(void *)(a2 + 960);
  *((unsigned char *)a1 + 968) = *(unsigned char *)(a2 + 968);
LABEL_150:
  if (a1[122] == 1)
  {
LABEL_153:
    *((_OWORD *)a1 + 61) = *(_OWORD *)(a2 + 976);
    *(_OWORD *)((char *)a1 + 985) = *(_OWORD *)(a2 + 985);
    goto LABEL_155;
  }
  uint64_t v37 = *(void *)(a2 + 976);
  if (v37 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 122));
    goto LABEL_153;
  }
  a1[122] = v37;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 984) = *(unsigned char *)(v5 + 704);
  a1[124] = *(void *)(a2 + 992);
  *((unsigned char *)a1 + 1000) = *(unsigned char *)(a2 + 1000);
LABEL_155:
  if (a1[126] == 1)
  {
LABEL_158:
    *((_OWORD *)a1 + 63) = *(_OWORD *)(a2 + 1008);
    *(_OWORD *)((char *)a1 + 1017) = *(_OWORD *)(a2 + 1017);
    goto LABEL_160;
  }
  uint64_t v38 = *(void *)(a2 + 1008);
  if (v38 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 126));
    goto LABEL_158;
  }
  a1[126] = v38;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 1016) = *(unsigned char *)(v5 + 736);
  a1[128] = *(void *)(a2 + 1024);
  *((unsigned char *)a1 + 1032) = *(unsigned char *)(a2 + 1032);
LABEL_160:
  if (a1[130] == 1)
  {
LABEL_163:
    *((_OWORD *)a1 + 65) = *(_OWORD *)(a2 + 1040);
    *(_OWORD *)((char *)a1 + 1049) = *(_OWORD *)(a2 + 1049);
    goto LABEL_165;
  }
  uint64_t v39 = *(void *)(a2 + 1040);
  if (v39 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 130));
    goto LABEL_163;
  }
  a1[130] = v39;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 1048) = *(unsigned char *)(v5 + 768);
  a1[132] = *(void *)(a2 + 1056);
  *((unsigned char *)a1 + 1064) = *(unsigned char *)(a2 + 1064);
LABEL_165:
  if (a1[134] == 1)
  {
LABEL_168:
    *((_OWORD *)a1 + 67) = *(_OWORD *)(a2 + 1072);
    *(_OWORD *)((char *)a1 + 1081) = *(_OWORD *)(a2 + 1081);
    goto LABEL_170;
  }
  uint64_t v40 = *(void *)(a2 + 1072);
  if (v40 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 134));
    goto LABEL_168;
  }
  a1[134] = v40;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 1080) = *(unsigned char *)(v5 + 800);
  a1[136] = *(void *)(a2 + 1088);
  *((unsigned char *)a1 + 1096) = *(unsigned char *)(a2 + 1096);
LABEL_170:
  if (a1[138] == 1)
  {
LABEL_173:
    *((_OWORD *)a1 + 69) = *(_OWORD *)(a2 + 1104);
    *(_OWORD *)((char *)a1 + 1113) = *(_OWORD *)(a2 + 1113);
    goto LABEL_175;
  }
  uint64_t v41 = *(void *)(a2 + 1104);
  if (v41 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 138));
    goto LABEL_173;
  }
  a1[138] = v41;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 1112) = *(unsigned char *)(v5 + 832);
  a1[140] = *(void *)(a2 + 1120);
  *((unsigned char *)a1 + 1128) = *(unsigned char *)(a2 + 1128);
LABEL_175:
  if (a1[142] == 1)
  {
LABEL_178:
    *((_OWORD *)a1 + 71) = *(_OWORD *)(a2 + 1136);
    *(_OWORD *)((char *)a1 + 1145) = *(_OWORD *)(a2 + 1145);
    goto LABEL_180;
  }
  uint64_t v42 = *(void *)(a2 + 1136);
  if (v42 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 142));
    goto LABEL_178;
  }
  a1[142] = v42;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 1144) = *(unsigned char *)(v5 + 864);
  a1[144] = *(void *)(a2 + 1152);
  *((unsigned char *)a1 + 1160) = *(unsigned char *)(a2 + 1160);
LABEL_180:
  if (a1[146] == 1)
  {
LABEL_183:
    *((_OWORD *)a1 + 73) = *(_OWORD *)(a2 + 1168);
    *(_OWORD *)((char *)a1 + 1177) = *(_OWORD *)(a2 + 1177);
    goto LABEL_185;
  }
  uint64_t v43 = *(void *)(a2 + 1168);
  if (v43 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 146));
    goto LABEL_183;
  }
  a1[146] = v43;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 1176) = *(unsigned char *)(v5 + 896);
  a1[148] = *(void *)(a2 + 1184);
  *((unsigned char *)a1 + 1192) = *(unsigned char *)(a2 + 1192);
LABEL_185:
  if (a1[150] == 1)
  {
LABEL_188:
    *((_OWORD *)a1 + 75) = *(_OWORD *)(a2 + 1200);
    *(_OWORD *)((char *)a1 + 1209) = *(_OWORD *)(a2 + 1209);
    goto LABEL_190;
  }
  uint64_t v44 = *(void *)(a2 + 1200);
  if (v44 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 150));
    goto LABEL_188;
  }
  a1[150] = v44;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 1208) = *(unsigned char *)(v5 + 928);
  a1[152] = *(void *)(a2 + 1216);
  *((unsigned char *)a1 + 1224) = *(unsigned char *)(a2 + 1224);
LABEL_190:
  if (a1[154] == 1)
  {
LABEL_193:
    *((_OWORD *)a1 + 77) = *(_OWORD *)(a2 + 1232);
    *(_OWORD *)((char *)a1 + 1241) = *(_OWORD *)(a2 + 1241);
    goto LABEL_195;
  }
  uint64_t v45 = *(void *)(a2 + 1232);
  if (v45 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 154));
    goto LABEL_193;
  }
  a1[154] = v45;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 1240) = *(unsigned char *)(v5 + 960);
  a1[156] = *(void *)(a2 + 1248);
  *((unsigned char *)a1 + 1256) = *(unsigned char *)(a2 + 1256);
LABEL_195:
  if (a1[158] == 1)
  {
LABEL_198:
    *((_OWORD *)a1 + 79) = *(_OWORD *)(a2 + 1264);
    *(_OWORD *)((char *)a1 + 1273) = *(_OWORD *)(a2 + 1273);
    goto LABEL_200;
  }
  uint64_t v46 = *(void *)(a2 + 1264);
  if (v46 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 158));
    goto LABEL_198;
  }
  a1[158] = v46;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 1272) = *(unsigned char *)(v5 + 992);
  a1[160] = *(void *)(a2 + 1280);
  *((unsigned char *)a1 + 1288) = *(unsigned char *)(a2 + 1288);
LABEL_200:
  if (a1[162] == 1)
  {
LABEL_203:
    *((_OWORD *)a1 + 81) = *(_OWORD *)(a2 + 1296);
    *(_OWORD *)((char *)a1 + 1305) = *(_OWORD *)(a2 + 1305);
    goto LABEL_205;
  }
  uint64_t v47 = *(void *)(a2 + 1296);
  if (v47 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 162));
    goto LABEL_203;
  }
  a1[162] = v47;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 1304) = *(unsigned char *)(v5 + 1024);
  a1[164] = *(void *)(a2 + 1312);
  *((unsigned char *)a1 + 1320) = *(unsigned char *)(a2 + 1320);
LABEL_205:
  if (a1[166] == 1)
  {
LABEL_208:
    *((_OWORD *)a1 + 83) = *(_OWORD *)(a2 + 1328);
    *(_OWORD *)((char *)a1 + 1337) = *(_OWORD *)(a2 + 1337);
    goto LABEL_210;
  }
  uint64_t v48 = *(void *)(a2 + 1328);
  if (v48 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 166));
    goto LABEL_208;
  }
  a1[166] = v48;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 1336) = *(unsigned char *)(v5 + 1056);
  a1[168] = *(void *)(a2 + 1344);
  *((unsigned char *)a1 + 1352) = *(unsigned char *)(a2 + 1352);
LABEL_210:
  if (a1[170] == 1)
  {
LABEL_213:
    *((_OWORD *)a1 + 85) = *(_OWORD *)(a2 + 1360);
    *(_OWORD *)((char *)a1 + 1369) = *(_OWORD *)(a2 + 1369);
    goto LABEL_215;
  }
  uint64_t v49 = *(void *)(a2 + 1360);
  if (v49 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 170));
    goto LABEL_213;
  }
  a1[170] = v49;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 1368) = *(unsigned char *)(v5 + 1088);
  a1[172] = *(void *)(a2 + 1376);
  *((unsigned char *)a1 + 1384) = *(unsigned char *)(a2 + 1384);
LABEL_215:
  if (a1[174] == 1)
  {
LABEL_218:
    *((_OWORD *)a1 + 87) = *(_OWORD *)(a2 + 1392);
    *(_OWORD *)((char *)a1 + 1401) = *(_OWORD *)(a2 + 1401);
    goto LABEL_220;
  }
  uint64_t v50 = *(void *)(a2 + 1392);
  if (v50 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 174));
    goto LABEL_218;
  }
  a1[174] = v50;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 1400) = *(unsigned char *)(v5 + 1120);
  a1[176] = *(void *)(a2 + 1408);
  *((unsigned char *)a1 + 1416) = *(unsigned char *)(a2 + 1416);
LABEL_220:
  if (a1[178] == 1)
  {
LABEL_223:
    *((_OWORD *)a1 + 89) = *(_OWORD *)(a2 + 1424);
    *(_OWORD *)((char *)a1 + 1433) = *(_OWORD *)(a2 + 1433);
    goto LABEL_225;
  }
  uint64_t v51 = *(void *)(a2 + 1424);
  if (v51 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 178));
    goto LABEL_223;
  }
  a1[178] = v51;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 1432) = *(unsigned char *)(v5 + 1152);
  a1[180] = *(void *)(a2 + 1440);
  *((unsigned char *)a1 + 1448) = *(unsigned char *)(a2 + 1448);
LABEL_225:
  if (a1[182] == 1)
  {
LABEL_228:
    *((_OWORD *)a1 + 91) = *(_OWORD *)(a2 + 1456);
    *(_OWORD *)((char *)a1 + 1465) = *(_OWORD *)(a2 + 1465);
    goto LABEL_230;
  }
  uint64_t v52 = *(void *)(a2 + 1456);
  if (v52 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 182));
    goto LABEL_228;
  }
  a1[182] = v52;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 1464) = *(unsigned char *)(v5 + 1184);
  a1[184] = *(void *)(a2 + 1472);
  *((unsigned char *)a1 + 1480) = *(unsigned char *)(a2 + 1480);
LABEL_230:
  if (a1[186] == 1)
  {
LABEL_233:
    *((_OWORD *)a1 + 93) = *(_OWORD *)(a2 + 1488);
    *(_OWORD *)((char *)a1 + 1497) = *(_OWORD *)(a2 + 1497);
    goto LABEL_235;
  }
  uint64_t v53 = *(void *)(a2 + 1488);
  if (v53 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 186));
    goto LABEL_233;
  }
  a1[186] = v53;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 1496) = *(unsigned char *)(v5 + 1216);
  a1[188] = *(void *)(a2 + 1504);
  *((unsigned char *)a1 + 1512) = *(unsigned char *)(a2 + 1512);
LABEL_235:
  if (a1[190] == 1)
  {
LABEL_238:
    *((_OWORD *)a1 + 95) = *(_OWORD *)(a2 + 1520);
    *(_OWORD *)((char *)a1 + 1529) = *(_OWORD *)(a2 + 1529);
    goto LABEL_240;
  }
  uint64_t v54 = *(void *)(a2 + 1520);
  if (v54 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 190));
    goto LABEL_238;
  }
  a1[190] = v54;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 1528) = *(unsigned char *)(v5 + 1248);
  a1[192] = *(void *)(a2 + 1536);
  *((unsigned char *)a1 + 1544) = *(unsigned char *)(a2 + 1544);
LABEL_240:
  if (a1[194] == 1)
  {
LABEL_243:
    *((_OWORD *)a1 + 97) = *(_OWORD *)(a2 + 1552);
    *(_OWORD *)((char *)a1 + 1561) = *(_OWORD *)(a2 + 1561);
    goto LABEL_245;
  }
  uint64_t v55 = *(void *)(a2 + 1552);
  if (v55 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 194));
    goto LABEL_243;
  }
  a1[194] = v55;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 1560) = *(unsigned char *)(v5 + 1280);
  a1[196] = *(void *)(a2 + 1568);
  *((unsigned char *)a1 + 1576) = *(unsigned char *)(a2 + 1576);
LABEL_245:
  if (a1[198] != 1)
  {
    uint64_t v56 = *(void *)(a2 + 1584);
    if (v56 != 1)
    {
      a1[198] = v56;
      swift_bridgeObjectRelease();
      *((unsigned char *)a1 + 1592) = *(unsigned char *)(v5 + 1312);
      a1[200] = *(void *)(a2 + 1600);
      *((unsigned char *)a1 + 1608) = *(unsigned char *)(a2 + 1608);
      goto LABEL_250;
    }
    sub_10009F534((uint64_t)(a1 + 198));
  }
  *((_OWORD *)a1 + 99) = *(_OWORD *)(a2 + 1584);
  *(_OWORD *)((char *)a1 + 1593) = *(_OWORD *)(a2 + 1593);
LABEL_250:
  *((_OWORD *)a1 + 101) = *(_OWORD *)(a2 + 1616);
  *((unsigned char *)a1 + 1632) = *(unsigned char *)(a2 + 1632);
  *((unsigned char *)a1 + 1656) = *(unsigned char *)(a2 + 1656);
  *(_OWORD *)(a1 + 205) = *(_OWORD *)(a2 + 1640);
  *((_DWORD *)v4 + 208) = *(_DWORD *)(v5 + 1377);
  *(_WORD *)((char *)a1 + 1661) = *(_WORD *)(a2 + 1661);
  *((unsigned char *)a1 + 1663) = *(unsigned char *)(a2 + 1663);
  a1[208] = *(void *)(a2 + 1664);
  swift_bridgeObjectRelease();
  a1[209] = *(void *)(a2 + 1672);
  swift_bridgeObjectRelease();
LABEL_251:
  uint64_t v57 = a1 + 210;
  uint64_t v58 = (_OWORD *)(a2 + 1680);
  if (a1[312] == 1)
  {
LABEL_254:
    memcpy(a1 + 210, (const void *)(a2 + 1680), 0x340uLL);
    goto LABEL_376;
  }
  if (*(void *)(a2 + 2496) == 1)
  {
    sub_10009F560(a1 + 210);
    goto LABEL_254;
  }
  if (*v57 == 1) {
    goto LABEL_258;
  }
  if (*(void *)v58 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 210));
LABEL_258:
    *(_OWORD *)uint64_t v57 = *v58;
    *(_OWORD *)((char *)a1 + 1689) = *(_OWORD *)(a2 + 1689);
    goto LABEL_260;
  }
  a1[210] = *(void *)v58;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 1688) = *(unsigned char *)(v5 + 1408);
  a1[212] = *(void *)(a2 + 1696);
  *((unsigned char *)a1 + 1704) = *(unsigned char *)(a2 + 1704);
LABEL_260:
  if (a1[214] == 1)
  {
LABEL_263:
    *((_OWORD *)a1 + 107) = *(_OWORD *)(a2 + 1712);
    *(_OWORD *)((char *)a1 + 1721) = *(_OWORD *)(a2 + 1721);
    goto LABEL_265;
  }
  uint64_t v59 = *(void *)(a2 + 1712);
  if (v59 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 214));
    goto LABEL_263;
  }
  a1[214] = v59;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 1720) = *(unsigned char *)(v5 + 1440);
  a1[216] = *(void *)(a2 + 1728);
  *((unsigned char *)a1 + 1736) = *(unsigned char *)(a2 + 1736);
LABEL_265:
  if (a1[218] == 1)
  {
LABEL_268:
    *((_OWORD *)a1 + 109) = *(_OWORD *)(a2 + 1744);
    *(_OWORD *)((char *)a1 + 1753) = *(_OWORD *)(a2 + 1753);
    goto LABEL_270;
  }
  uint64_t v60 = *(void *)(a2 + 1744);
  if (v60 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 218));
    goto LABEL_268;
  }
  a1[218] = v60;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 1752) = *(unsigned char *)(v5 + 1472);
  a1[220] = *(void *)(a2 + 1760);
  *((unsigned char *)a1 + 1768) = *(unsigned char *)(a2 + 1768);
LABEL_270:
  if (a1[222] == 1)
  {
LABEL_273:
    *((_OWORD *)a1 + 111) = *(_OWORD *)(a2 + 1776);
    *(_OWORD *)((char *)a1 + 1785) = *(_OWORD *)(a2 + 1785);
    goto LABEL_275;
  }
  uint64_t v61 = *(void *)(a2 + 1776);
  if (v61 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 222));
    goto LABEL_273;
  }
  a1[222] = v61;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 1784) = *(unsigned char *)(v5 + 1504);
  a1[224] = *(void *)(a2 + 1792);
  *((unsigned char *)a1 + 1800) = *(unsigned char *)(a2 + 1800);
LABEL_275:
  if (a1[226] == 1)
  {
LABEL_278:
    *((_OWORD *)a1 + 113) = *(_OWORD *)(a2 + 1808);
    *(_OWORD *)((char *)a1 + 1817) = *(_OWORD *)(a2 + 1817);
    goto LABEL_280;
  }
  uint64_t v62 = *(void *)(a2 + 1808);
  if (v62 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 226));
    goto LABEL_278;
  }
  a1[226] = v62;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 1816) = *(unsigned char *)(v5 + 1536);
  a1[228] = *(void *)(a2 + 1824);
  *((unsigned char *)a1 + 1832) = *(unsigned char *)(a2 + 1832);
LABEL_280:
  if (a1[230] == 1)
  {
LABEL_283:
    *((_OWORD *)a1 + 115) = *(_OWORD *)(a2 + 1840);
    *(_OWORD *)((char *)a1 + 1849) = *(_OWORD *)(a2 + 1849);
    goto LABEL_285;
  }
  uint64_t v63 = *(void *)(a2 + 1840);
  if (v63 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 230));
    goto LABEL_283;
  }
  a1[230] = v63;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 1848) = *(unsigned char *)(v5 + 1568);
  a1[232] = *(void *)(a2 + 1856);
  *((unsigned char *)a1 + 1864) = *(unsigned char *)(a2 + 1864);
LABEL_285:
  if (a1[234] == 1)
  {
LABEL_288:
    *((_OWORD *)a1 + 117) = *(_OWORD *)(a2 + 1872);
    *(_OWORD *)((char *)a1 + 1881) = *(_OWORD *)(a2 + 1881);
    goto LABEL_290;
  }
  uint64_t v64 = *(void *)(a2 + 1872);
  if (v64 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 234));
    goto LABEL_288;
  }
  a1[234] = v64;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 1880) = *(unsigned char *)(v5 + 1600);
  a1[236] = *(void *)(a2 + 1888);
  *((unsigned char *)a1 + 1896) = *(unsigned char *)(a2 + 1896);
LABEL_290:
  if (a1[238] == 1)
  {
LABEL_293:
    *((_OWORD *)a1 + 119) = *(_OWORD *)(a2 + 1904);
    *(_OWORD *)((char *)a1 + 1913) = *(_OWORD *)(a2 + 1913);
    goto LABEL_295;
  }
  uint64_t v65 = *(void *)(a2 + 1904);
  if (v65 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 238));
    goto LABEL_293;
  }
  a1[238] = v65;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 1912) = *(unsigned char *)(v5 + 1632);
  a1[240] = *(void *)(a2 + 1920);
  *((unsigned char *)a1 + 1928) = *(unsigned char *)(a2 + 1928);
LABEL_295:
  if (a1[242] == 1)
  {
LABEL_298:
    *((_OWORD *)a1 + 121) = *(_OWORD *)(a2 + 1936);
    *(_OWORD *)((char *)a1 + 1945) = *(_OWORD *)(a2 + 1945);
    goto LABEL_300;
  }
  uint64_t v66 = *(void *)(a2 + 1936);
  if (v66 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 242));
    goto LABEL_298;
  }
  a1[242] = v66;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 1944) = *(unsigned char *)(v5 + 1664);
  a1[244] = *(void *)(a2 + 1952);
  *((unsigned char *)a1 + 1960) = *(unsigned char *)(a2 + 1960);
LABEL_300:
  if (a1[246] == 1)
  {
LABEL_303:
    *((_OWORD *)a1 + 123) = *(_OWORD *)(a2 + 1968);
    *(_OWORD *)((char *)a1 + 1977) = *(_OWORD *)(a2 + 1977);
    goto LABEL_305;
  }
  uint64_t v67 = *(void *)(a2 + 1968);
  if (v67 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 246));
    goto LABEL_303;
  }
  a1[246] = v67;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 1976) = *(unsigned char *)(v5 + 1696);
  a1[248] = *(void *)(a2 + 1984);
  *((unsigned char *)a1 + 1992) = *(unsigned char *)(a2 + 1992);
LABEL_305:
  if (a1[250] == 1)
  {
LABEL_308:
    *((_OWORD *)a1 + 125) = *(_OWORD *)(a2 + 2000);
    *(_OWORD *)((char *)a1 + 2009) = *(_OWORD *)(a2 + 2009);
    goto LABEL_310;
  }
  uint64_t v68 = *(void *)(a2 + 2000);
  if (v68 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 250));
    goto LABEL_308;
  }
  a1[250] = v68;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 2008) = *(unsigned char *)(v5 + 1728);
  a1[252] = *(void *)(a2 + 2016);
  *((unsigned char *)a1 + 2024) = *(unsigned char *)(a2 + 2024);
LABEL_310:
  if (a1[254] == 1)
  {
LABEL_313:
    *((_OWORD *)a1 + 127) = *(_OWORD *)(a2 + 2032);
    *(_OWORD *)((char *)a1 + 2041) = *(_OWORD *)(a2 + 2041);
    goto LABEL_315;
  }
  uint64_t v69 = *(void *)(a2 + 2032);
  if (v69 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 254));
    goto LABEL_313;
  }
  a1[254] = v69;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 2040) = *(unsigned char *)(v5 + 1760);
  a1[256] = *(void *)(a2 + 2048);
  *((unsigned char *)a1 + 2056) = *(unsigned char *)(a2 + 2056);
LABEL_315:
  if (a1[258] == 1)
  {
LABEL_318:
    *((_OWORD *)a1 + 129) = *(_OWORD *)(a2 + 2064);
    *(_OWORD *)((char *)a1 + 2073) = *(_OWORD *)(a2 + 2073);
    goto LABEL_320;
  }
  uint64_t v70 = *(void *)(a2 + 2064);
  if (v70 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 258));
    goto LABEL_318;
  }
  a1[258] = v70;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 2072) = *(unsigned char *)(v5 + 1792);
  a1[260] = *(void *)(a2 + 2080);
  *((unsigned char *)a1 + 2088) = *(unsigned char *)(a2 + 2088);
LABEL_320:
  if (a1[262] == 1)
  {
LABEL_323:
    *((_OWORD *)a1 + 131) = *(_OWORD *)(a2 + 2096);
    *(_OWORD *)((char *)a1 + 2105) = *(_OWORD *)(a2 + 2105);
    goto LABEL_325;
  }
  uint64_t v71 = *(void *)(a2 + 2096);
  if (v71 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 262));
    goto LABEL_323;
  }
  a1[262] = v71;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 2104) = *(unsigned char *)(v5 + 1824);
  a1[264] = *(void *)(a2 + 2112);
  *((unsigned char *)a1 + 2120) = *(unsigned char *)(a2 + 2120);
LABEL_325:
  if (a1[266] == 1)
  {
LABEL_328:
    *((_OWORD *)a1 + 133) = *(_OWORD *)(a2 + 2128);
    *(_OWORD *)((char *)a1 + 2137) = *(_OWORD *)(a2 + 2137);
    goto LABEL_330;
  }
  uint64_t v72 = *(void *)(a2 + 2128);
  if (v72 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 266));
    goto LABEL_328;
  }
  a1[266] = v72;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 2136) = *(unsigned char *)(v5 + 1856);
  a1[268] = *(void *)(a2 + 2144);
  *((unsigned char *)a1 + 2152) = *(unsigned char *)(a2 + 2152);
LABEL_330:
  if (a1[270] == 1)
  {
LABEL_333:
    *((_OWORD *)a1 + 135) = *(_OWORD *)(a2 + 2160);
    *(_OWORD *)((char *)a1 + 2169) = *(_OWORD *)(a2 + 2169);
    goto LABEL_335;
  }
  uint64_t v73 = *(void *)(a2 + 2160);
  if (v73 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 270));
    goto LABEL_333;
  }
  a1[270] = v73;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 2168) = *(unsigned char *)(v5 + 1888);
  a1[272] = *(void *)(a2 + 2176);
  *((unsigned char *)a1 + 2184) = *(unsigned char *)(a2 + 2184);
LABEL_335:
  if (a1[274] == 1)
  {
LABEL_338:
    *((_OWORD *)a1 + 137) = *(_OWORD *)(a2 + 2192);
    *(_OWORD *)((char *)a1 + 2201) = *(_OWORD *)(a2 + 2201);
    goto LABEL_340;
  }
  uint64_t v74 = *(void *)(a2 + 2192);
  if (v74 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 274));
    goto LABEL_338;
  }
  a1[274] = v74;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 2200) = *(unsigned char *)(v5 + 1920);
  a1[276] = *(void *)(a2 + 2208);
  *((unsigned char *)a1 + 2216) = *(unsigned char *)(a2 + 2216);
LABEL_340:
  if (a1[278] == 1)
  {
LABEL_343:
    *((_OWORD *)a1 + 139) = *(_OWORD *)(a2 + 2224);
    *(_OWORD *)((char *)a1 + 2233) = *(_OWORD *)(a2 + 2233);
    goto LABEL_345;
  }
  uint64_t v75 = *(void *)(a2 + 2224);
  if (v75 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 278));
    goto LABEL_343;
  }
  a1[278] = v75;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 2232) = *(unsigned char *)(v5 + 1952);
  a1[280] = *(void *)(a2 + 2240);
  *((unsigned char *)a1 + 2248) = *(unsigned char *)(a2 + 2248);
LABEL_345:
  if (a1[282] == 1)
  {
LABEL_348:
    *((_OWORD *)a1 + 141) = *(_OWORD *)(a2 + 2256);
    *(_OWORD *)((char *)a1 + 2265) = *(_OWORD *)(a2 + 2265);
    goto LABEL_350;
  }
  uint64_t v76 = *(void *)(a2 + 2256);
  if (v76 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 282));
    goto LABEL_348;
  }
  a1[282] = v76;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 2264) = *(unsigned char *)(v5 + 1984);
  a1[284] = *(void *)(a2 + 2272);
  *((unsigned char *)a1 + 2280) = *(unsigned char *)(a2 + 2280);
LABEL_350:
  if (a1[286] == 1)
  {
LABEL_353:
    *((_OWORD *)a1 + 143) = *(_OWORD *)(a2 + 2288);
    *(_OWORD *)((char *)a1 + 2297) = *(_OWORD *)(a2 + 2297);
    goto LABEL_355;
  }
  uint64_t v77 = *(void *)(a2 + 2288);
  if (v77 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 286));
    goto LABEL_353;
  }
  a1[286] = v77;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 2296) = *(unsigned char *)(v5 + 2016);
  a1[288] = *(void *)(a2 + 2304);
  *((unsigned char *)a1 + 2312) = *(unsigned char *)(a2 + 2312);
LABEL_355:
  if (a1[290] == 1)
  {
LABEL_358:
    *((_OWORD *)a1 + 145) = *(_OWORD *)(a2 + 2320);
    *(_OWORD *)((char *)a1 + 2329) = *(_OWORD *)(a2 + 2329);
    goto LABEL_360;
  }
  uint64_t v78 = *(void *)(a2 + 2320);
  if (v78 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 290));
    goto LABEL_358;
  }
  a1[290] = v78;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 2328) = *(unsigned char *)(v5 + 2048);
  a1[292] = *(void *)(a2 + 2336);
  *((unsigned char *)a1 + 2344) = *(unsigned char *)(a2 + 2344);
LABEL_360:
  if (a1[294] == 1)
  {
LABEL_363:
    *((_OWORD *)a1 + 147) = *(_OWORD *)(a2 + 2352);
    *(_OWORD *)((char *)a1 + 2361) = *(_OWORD *)(a2 + 2361);
    goto LABEL_365;
  }
  uint64_t v79 = *(void *)(a2 + 2352);
  if (v79 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 294));
    goto LABEL_363;
  }
  a1[294] = v79;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 2360) = *(unsigned char *)(v5 + 2080);
  a1[296] = *(void *)(a2 + 2368);
  *((unsigned char *)a1 + 2376) = *(unsigned char *)(a2 + 2376);
LABEL_365:
  if (a1[298] == 1)
  {
LABEL_368:
    *((_OWORD *)a1 + 149) = *(_OWORD *)(a2 + 2384);
    *(_OWORD *)((char *)a1 + 2393) = *(_OWORD *)(a2 + 2393);
    goto LABEL_370;
  }
  uint64_t v80 = *(void *)(a2 + 2384);
  if (v80 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 298));
    goto LABEL_368;
  }
  a1[298] = v80;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 2392) = *(unsigned char *)(v5 + 2112);
  a1[300] = *(void *)(a2 + 2400);
  *((unsigned char *)a1 + 2408) = *(unsigned char *)(a2 + 2408);
LABEL_370:
  if (a1[302] != 1)
  {
    uint64_t v81 = *(void *)(a2 + 2416);
    if (v81 != 1)
    {
      a1[302] = v81;
      swift_bridgeObjectRelease();
      *((unsigned char *)a1 + 2424) = *(unsigned char *)(v5 + 2144);
      a1[304] = *(void *)(a2 + 2432);
      *((unsigned char *)a1 + 2440) = *(unsigned char *)(a2 + 2440);
      goto LABEL_375;
    }
    sub_10009F534((uint64_t)(a1 + 302));
  }
  *((_OWORD *)a1 + 151) = *(_OWORD *)(a2 + 2416);
  *(_OWORD *)((char *)a1 + 2425) = *(_OWORD *)(a2 + 2425);
LABEL_375:
  *((_OWORD *)a1 + 153) = *(_OWORD *)(a2 + 2448);
  *((unsigned char *)a1 + 2464) = *(unsigned char *)(a2 + 2464);
  *((unsigned char *)a1 + 2488) = *(unsigned char *)(a2 + 2488);
  *(_OWORD *)(a1 + 309) = *(_OWORD *)(a2 + 2472);
  *((_DWORD *)v4 + 416) = *(_DWORD *)(v5 + 2209);
  *(_WORD *)((char *)a1 + 2493) = *(_WORD *)(a2 + 2493);
  *((unsigned char *)a1 + 2495) = *(unsigned char *)(a2 + 2495);
  a1[312] = *(void *)(a2 + 2496);
  swift_bridgeObjectRelease();
  a1[313] = *(void *)(a2 + 2504);
  swift_bridgeObjectRelease();
LABEL_376:
  long long v82 = a1 + 314;
  long long v83 = (_OWORD *)(a2 + 2512);
  if (a1[416] == 1)
  {
LABEL_379:
    memcpy(a1 + 314, (const void *)(a2 + 2512), 0x340uLL);
    goto LABEL_501;
  }
  if (*(void *)(a2 + 3328) == 1)
  {
    sub_10009F560(a1 + 314);
    goto LABEL_379;
  }
  if (*v82 == 1) {
    goto LABEL_383;
  }
  if (*(void *)v83 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 314));
LABEL_383:
    *(_OWORD *)long long v82 = *v83;
    *(_OWORD *)((char *)a1 + 2521) = *(_OWORD *)(a2 + 2521);
    goto LABEL_385;
  }
  a1[314] = *(void *)v83;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 2520) = *(unsigned char *)(v5 + 2240);
  a1[316] = *(void *)(a2 + 2528);
  *((unsigned char *)a1 + 2536) = *(unsigned char *)(a2 + 2536);
LABEL_385:
  if (a1[318] == 1)
  {
LABEL_388:
    *((_OWORD *)a1 + 159) = *(_OWORD *)(a2 + 2544);
    *(_OWORD *)((char *)a1 + 2553) = *(_OWORD *)(a2 + 2553);
    goto LABEL_390;
  }
  uint64_t v84 = *(void *)(a2 + 2544);
  if (v84 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 318));
    goto LABEL_388;
  }
  a1[318] = v84;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 2552) = *(unsigned char *)(v5 + 2272);
  a1[320] = *(void *)(a2 + 2560);
  *((unsigned char *)a1 + 2568) = *(unsigned char *)(a2 + 2568);
LABEL_390:
  if (a1[322] == 1)
  {
LABEL_393:
    *((_OWORD *)a1 + 161) = *(_OWORD *)(a2 + 2576);
    *(_OWORD *)((char *)a1 + 2585) = *(_OWORD *)(a2 + 2585);
    goto LABEL_395;
  }
  uint64_t v85 = *(void *)(a2 + 2576);
  if (v85 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 322));
    goto LABEL_393;
  }
  a1[322] = v85;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 2584) = *(unsigned char *)(v5 + 2304);
  a1[324] = *(void *)(a2 + 2592);
  *((unsigned char *)a1 + 2600) = *(unsigned char *)(a2 + 2600);
LABEL_395:
  if (a1[326] == 1)
  {
LABEL_398:
    *((_OWORD *)a1 + 163) = *(_OWORD *)(a2 + 2608);
    *(_OWORD *)((char *)a1 + 2617) = *(_OWORD *)(a2 + 2617);
    goto LABEL_400;
  }
  uint64_t v86 = *(void *)(a2 + 2608);
  if (v86 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 326));
    goto LABEL_398;
  }
  a1[326] = v86;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 2616) = *(unsigned char *)(v5 + 2336);
  a1[328] = *(void *)(a2 + 2624);
  *((unsigned char *)a1 + 2632) = *(unsigned char *)(a2 + 2632);
LABEL_400:
  if (a1[330] == 1)
  {
LABEL_403:
    *((_OWORD *)a1 + 165) = *(_OWORD *)(a2 + 2640);
    *(_OWORD *)((char *)a1 + 2649) = *(_OWORD *)(a2 + 2649);
    goto LABEL_405;
  }
  uint64_t v87 = *(void *)(a2 + 2640);
  if (v87 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 330));
    goto LABEL_403;
  }
  a1[330] = v87;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 2648) = *(unsigned char *)(v5 + 2368);
  a1[332] = *(void *)(a2 + 2656);
  *((unsigned char *)a1 + 2664) = *(unsigned char *)(a2 + 2664);
LABEL_405:
  if (a1[334] == 1)
  {
LABEL_408:
    *((_OWORD *)a1 + 167) = *(_OWORD *)(a2 + 2672);
    *(_OWORD *)((char *)a1 + 2681) = *(_OWORD *)(a2 + 2681);
    goto LABEL_410;
  }
  uint64_t v88 = *(void *)(a2 + 2672);
  if (v88 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 334));
    goto LABEL_408;
  }
  a1[334] = v88;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 2680) = *(unsigned char *)(v5 + 2400);
  a1[336] = *(void *)(a2 + 2688);
  *((unsigned char *)a1 + 2696) = *(unsigned char *)(a2 + 2696);
LABEL_410:
  if (a1[338] == 1)
  {
LABEL_413:
    *((_OWORD *)a1 + 169) = *(_OWORD *)(a2 + 2704);
    *(_OWORD *)((char *)a1 + 2713) = *(_OWORD *)(a2 + 2713);
    goto LABEL_415;
  }
  uint64_t v89 = *(void *)(a2 + 2704);
  if (v89 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 338));
    goto LABEL_413;
  }
  a1[338] = v89;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 2712) = *(unsigned char *)(v5 + 2432);
  a1[340] = *(void *)(a2 + 2720);
  *((unsigned char *)a1 + 2728) = *(unsigned char *)(a2 + 2728);
LABEL_415:
  if (a1[342] == 1)
  {
LABEL_418:
    *((_OWORD *)a1 + 171) = *(_OWORD *)(a2 + 2736);
    *(_OWORD *)((char *)a1 + 2745) = *(_OWORD *)(a2 + 2745);
    goto LABEL_420;
  }
  uint64_t v90 = *(void *)(a2 + 2736);
  if (v90 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 342));
    goto LABEL_418;
  }
  a1[342] = v90;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 2744) = *(unsigned char *)(v5 + 2464);
  a1[344] = *(void *)(a2 + 2752);
  *((unsigned char *)a1 + 2760) = *(unsigned char *)(a2 + 2760);
LABEL_420:
  if (a1[346] == 1)
  {
LABEL_423:
    *((_OWORD *)a1 + 173) = *(_OWORD *)(a2 + 2768);
    *(_OWORD *)((char *)a1 + 2777) = *(_OWORD *)(a2 + 2777);
    goto LABEL_425;
  }
  uint64_t v91 = *(void *)(a2 + 2768);
  if (v91 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 346));
    goto LABEL_423;
  }
  a1[346] = v91;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 2776) = *(unsigned char *)(v5 + 2496);
  a1[348] = *(void *)(a2 + 2784);
  *((unsigned char *)a1 + 2792) = *(unsigned char *)(a2 + 2792);
LABEL_425:
  if (a1[350] == 1)
  {
LABEL_428:
    *((_OWORD *)a1 + 175) = *(_OWORD *)(a2 + 2800);
    *(_OWORD *)((char *)a1 + 2809) = *(_OWORD *)(a2 + 2809);
    goto LABEL_430;
  }
  uint64_t v92 = *(void *)(a2 + 2800);
  if (v92 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 350));
    goto LABEL_428;
  }
  a1[350] = v92;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 2808) = *(unsigned char *)(v5 + 2528);
  a1[352] = *(void *)(a2 + 2816);
  *((unsigned char *)a1 + 2824) = *(unsigned char *)(a2 + 2824);
LABEL_430:
  if (a1[354] == 1)
  {
LABEL_433:
    *((_OWORD *)a1 + 177) = *(_OWORD *)(a2 + 2832);
    *(_OWORD *)((char *)a1 + 2841) = *(_OWORD *)(a2 + 2841);
    goto LABEL_435;
  }
  uint64_t v93 = *(void *)(a2 + 2832);
  if (v93 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 354));
    goto LABEL_433;
  }
  a1[354] = v93;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 2840) = *(unsigned char *)(v5 + 2560);
  a1[356] = *(void *)(a2 + 2848);
  *((unsigned char *)a1 + 2856) = *(unsigned char *)(a2 + 2856);
LABEL_435:
  if (a1[358] == 1)
  {
LABEL_438:
    *((_OWORD *)a1 + 179) = *(_OWORD *)(a2 + 2864);
    *(_OWORD *)((char *)a1 + 2873) = *(_OWORD *)(a2 + 2873);
    goto LABEL_440;
  }
  uint64_t v94 = *(void *)(a2 + 2864);
  if (v94 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 358));
    goto LABEL_438;
  }
  a1[358] = v94;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 2872) = *(unsigned char *)(v5 + 2592);
  a1[360] = *(void *)(a2 + 2880);
  *((unsigned char *)a1 + 2888) = *(unsigned char *)(a2 + 2888);
LABEL_440:
  if (a1[362] == 1)
  {
LABEL_443:
    *((_OWORD *)a1 + 181) = *(_OWORD *)(a2 + 2896);
    *(_OWORD *)((char *)a1 + 2905) = *(_OWORD *)(a2 + 2905);
    goto LABEL_445;
  }
  uint64_t v95 = *(void *)(a2 + 2896);
  if (v95 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 362));
    goto LABEL_443;
  }
  a1[362] = v95;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 2904) = *(unsigned char *)(v5 + 2624);
  a1[364] = *(void *)(a2 + 2912);
  *((unsigned char *)a1 + 2920) = *(unsigned char *)(a2 + 2920);
LABEL_445:
  if (a1[366] == 1)
  {
LABEL_448:
    *((_OWORD *)a1 + 183) = *(_OWORD *)(a2 + 2928);
    *(_OWORD *)((char *)a1 + 2937) = *(_OWORD *)(a2 + 2937);
    goto LABEL_450;
  }
  uint64_t v96 = *(void *)(a2 + 2928);
  if (v96 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 366));
    goto LABEL_448;
  }
  a1[366] = v96;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 2936) = *(unsigned char *)(v5 + 2656);
  a1[368] = *(void *)(a2 + 2944);
  *((unsigned char *)a1 + 2952) = *(unsigned char *)(a2 + 2952);
LABEL_450:
  if (a1[370] == 1)
  {
LABEL_453:
    *((_OWORD *)a1 + 185) = *(_OWORD *)(a2 + 2960);
    *(_OWORD *)((char *)a1 + 2969) = *(_OWORD *)(a2 + 2969);
    goto LABEL_455;
  }
  uint64_t v97 = *(void *)(a2 + 2960);
  if (v97 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 370));
    goto LABEL_453;
  }
  a1[370] = v97;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 2968) = *(unsigned char *)(v5 + 2688);
  a1[372] = *(void *)(a2 + 2976);
  *((unsigned char *)a1 + 2984) = *(unsigned char *)(a2 + 2984);
LABEL_455:
  if (a1[374] == 1)
  {
LABEL_458:
    *((_OWORD *)a1 + 187) = *(_OWORD *)(a2 + 2992);
    *(_OWORD *)((char *)a1 + 3001) = *(_OWORD *)(a2 + 3001);
    goto LABEL_460;
  }
  uint64_t v98 = *(void *)(a2 + 2992);
  if (v98 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 374));
    goto LABEL_458;
  }
  a1[374] = v98;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 3000) = *(unsigned char *)(v5 + 2720);
  a1[376] = *(void *)(a2 + 3008);
  *((unsigned char *)a1 + 3016) = *(unsigned char *)(a2 + 3016);
LABEL_460:
  if (a1[378] == 1)
  {
LABEL_463:
    *((_OWORD *)a1 + 189) = *(_OWORD *)(a2 + 3024);
    *(_OWORD *)((char *)a1 + 3033) = *(_OWORD *)(a2 + 3033);
    goto LABEL_465;
  }
  uint64_t v99 = *(void *)(a2 + 3024);
  if (v99 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 378));
    goto LABEL_463;
  }
  a1[378] = v99;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 3032) = *(unsigned char *)(v5 + 2752);
  a1[380] = *(void *)(a2 + 3040);
  *((unsigned char *)a1 + 3048) = *(unsigned char *)(a2 + 3048);
LABEL_465:
  if (a1[382] == 1)
  {
LABEL_468:
    *((_OWORD *)a1 + 191) = *(_OWORD *)(a2 + 3056);
    *(_OWORD *)((char *)a1 + 3065) = *(_OWORD *)(a2 + 3065);
    goto LABEL_470;
  }
  uint64_t v100 = *(void *)(a2 + 3056);
  if (v100 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 382));
    goto LABEL_468;
  }
  a1[382] = v100;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 3064) = *(unsigned char *)(v5 + 2784);
  a1[384] = *(void *)(a2 + 3072);
  *((unsigned char *)a1 + 3080) = *(unsigned char *)(a2 + 3080);
LABEL_470:
  if (a1[386] == 1)
  {
LABEL_473:
    *((_OWORD *)a1 + 193) = *(_OWORD *)(a2 + 3088);
    *(_OWORD *)((char *)a1 + 3097) = *(_OWORD *)(a2 + 3097);
    goto LABEL_475;
  }
  uint64_t v101 = *(void *)(a2 + 3088);
  if (v101 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 386));
    goto LABEL_473;
  }
  a1[386] = v101;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 3096) = *(unsigned char *)(v5 + 2816);
  a1[388] = *(void *)(a2 + 3104);
  *((unsigned char *)a1 + 3112) = *(unsigned char *)(a2 + 3112);
LABEL_475:
  if (a1[390] == 1)
  {
LABEL_478:
    *((_OWORD *)a1 + 195) = *(_OWORD *)(a2 + 3120);
    *(_OWORD *)((char *)a1 + 3129) = *(_OWORD *)(a2 + 3129);
    goto LABEL_480;
  }
  uint64_t v102 = *(void *)(a2 + 3120);
  if (v102 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 390));
    goto LABEL_478;
  }
  a1[390] = v102;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 3128) = *(unsigned char *)(v5 + 2848);
  a1[392] = *(void *)(a2 + 3136);
  *((unsigned char *)a1 + 3144) = *(unsigned char *)(a2 + 3144);
LABEL_480:
  if (a1[394] == 1)
  {
LABEL_483:
    *((_OWORD *)a1 + 197) = *(_OWORD *)(a2 + 3152);
    *(_OWORD *)((char *)a1 + 3161) = *(_OWORD *)(a2 + 3161);
    goto LABEL_485;
  }
  uint64_t v103 = *(void *)(a2 + 3152);
  if (v103 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 394));
    goto LABEL_483;
  }
  a1[394] = v103;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 3160) = *(unsigned char *)(v5 + 2880);
  a1[396] = *(void *)(a2 + 3168);
  *((unsigned char *)a1 + 3176) = *(unsigned char *)(a2 + 3176);
LABEL_485:
  if (a1[398] == 1)
  {
LABEL_488:
    *((_OWORD *)a1 + 199) = *(_OWORD *)(a2 + 3184);
    *(_OWORD *)((char *)a1 + 3193) = *(_OWORD *)(a2 + 3193);
    goto LABEL_490;
  }
  uint64_t v104 = *(void *)(a2 + 3184);
  if (v104 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 398));
    goto LABEL_488;
  }
  a1[398] = v104;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 3192) = *(unsigned char *)(v5 + 2912);
  a1[400] = *(void *)(a2 + 3200);
  *((unsigned char *)a1 + 3208) = *(unsigned char *)(a2 + 3208);
LABEL_490:
  if (a1[402] == 1)
  {
LABEL_493:
    *((_OWORD *)a1 + 201) = *(_OWORD *)(a2 + 3216);
    *(_OWORD *)((char *)a1 + 3225) = *(_OWORD *)(a2 + 3225);
    goto LABEL_495;
  }
  uint64_t v105 = *(void *)(a2 + 3216);
  if (v105 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 402));
    goto LABEL_493;
  }
  a1[402] = v105;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 3224) = *(unsigned char *)(v5 + 2944);
  a1[404] = *(void *)(a2 + 3232);
  *((unsigned char *)a1 + 3240) = *(unsigned char *)(a2 + 3240);
LABEL_495:
  if (a1[406] != 1)
  {
    uint64_t v106 = *(void *)(a2 + 3248);
    if (v106 != 1)
    {
      a1[406] = v106;
      swift_bridgeObjectRelease();
      *((unsigned char *)a1 + 3256) = *(unsigned char *)(v5 + 2976);
      a1[408] = *(void *)(a2 + 3264);
      *((unsigned char *)a1 + 3272) = *(unsigned char *)(a2 + 3272);
      goto LABEL_500;
    }
    sub_10009F534((uint64_t)(a1 + 406));
  }
  *((_OWORD *)a1 + 203) = *(_OWORD *)(a2 + 3248);
  *(_OWORD *)((char *)a1 + 3257) = *(_OWORD *)(a2 + 3257);
LABEL_500:
  *((_OWORD *)a1 + 205) = *(_OWORD *)(a2 + 3280);
  *((unsigned char *)a1 + 3296) = *(unsigned char *)(a2 + 3296);
  *((unsigned char *)a1 + 3320) = *(unsigned char *)(a2 + 3320);
  *(_OWORD *)(a1 + 413) = *(_OWORD *)(a2 + 3304);
  *((_DWORD *)v4 + 624) = *(_DWORD *)(v5 + 3041);
  *(_WORD *)((char *)a1 + 3325) = *(_WORD *)(a2 + 3325);
  *((unsigned char *)a1 + 3327) = *(unsigned char *)(a2 + 3327);
  a1[416] = *(void *)(a2 + 3328);
  swift_bridgeObjectRelease();
  a1[417] = *(void *)(a2 + 3336);
  swift_bridgeObjectRelease();
LABEL_501:
  uint64_t v107 = a1 + 418;
  uint64_t v108 = (_OWORD *)(a2 + 3344);
  if (a1[520] == 1)
  {
LABEL_504:
    memcpy(a1 + 418, (const void *)(a2 + 3344), 0x340uLL);
    goto LABEL_626;
  }
  if (*(void *)(a2 + 4160) == 1)
  {
    sub_10009F560(a1 + 418);
    goto LABEL_504;
  }
  if (*v107 == 1) {
    goto LABEL_508;
  }
  if (*(void *)v108 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 418));
LABEL_508:
    *(_OWORD *)uint64_t v107 = *v108;
    *(_OWORD *)((char *)a1 + 3353) = *(_OWORD *)(a2 + 3353);
    goto LABEL_510;
  }
  a1[418] = *(void *)v108;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 3352) = *(unsigned char *)(v5 + 3072);
  a1[420] = *(void *)(a2 + 3360);
  *((unsigned char *)a1 + 3368) = *(unsigned char *)(a2 + 3368);
LABEL_510:
  if (a1[422] == 1)
  {
LABEL_513:
    *((_OWORD *)a1 + 211) = *(_OWORD *)(a2 + 3376);
    *(_OWORD *)((char *)a1 + 3385) = *(_OWORD *)(a2 + 3385);
    goto LABEL_515;
  }
  uint64_t v109 = *(void *)(a2 + 3376);
  if (v109 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 422));
    goto LABEL_513;
  }
  a1[422] = v109;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 3384) = *(unsigned char *)(v5 + 3104);
  a1[424] = *(void *)(a2 + 3392);
  *((unsigned char *)a1 + 3400) = *(unsigned char *)(a2 + 3400);
LABEL_515:
  if (a1[426] == 1)
  {
LABEL_518:
    *((_OWORD *)a1 + 213) = *(_OWORD *)(a2 + 3408);
    *(_OWORD *)((char *)a1 + 3417) = *(_OWORD *)(a2 + 3417);
    goto LABEL_520;
  }
  uint64_t v110 = *(void *)(a2 + 3408);
  if (v110 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 426));
    goto LABEL_518;
  }
  a1[426] = v110;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 3416) = *(unsigned char *)(v5 + 3136);
  a1[428] = *(void *)(a2 + 3424);
  *((unsigned char *)a1 + 3432) = *(unsigned char *)(a2 + 3432);
LABEL_520:
  if (a1[430] == 1)
  {
LABEL_523:
    *((_OWORD *)a1 + 215) = *(_OWORD *)(a2 + 3440);
    *(_OWORD *)((char *)a1 + 3449) = *(_OWORD *)(a2 + 3449);
    goto LABEL_525;
  }
  uint64_t v111 = *(void *)(a2 + 3440);
  if (v111 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 430));
    goto LABEL_523;
  }
  a1[430] = v111;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 3448) = *(unsigned char *)(v5 + 3168);
  a1[432] = *(void *)(a2 + 3456);
  *((unsigned char *)a1 + 3464) = *(unsigned char *)(a2 + 3464);
LABEL_525:
  if (a1[434] == 1)
  {
LABEL_528:
    *((_OWORD *)a1 + 217) = *(_OWORD *)(a2 + 3472);
    *(_OWORD *)((char *)a1 + 3481) = *(_OWORD *)(a2 + 3481);
    goto LABEL_530;
  }
  uint64_t v112 = *(void *)(a2 + 3472);
  if (v112 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 434));
    goto LABEL_528;
  }
  a1[434] = v112;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 3480) = *(unsigned char *)(v5 + 3200);
  a1[436] = *(void *)(a2 + 3488);
  *((unsigned char *)a1 + 3496) = *(unsigned char *)(a2 + 3496);
LABEL_530:
  if (a1[438] == 1)
  {
LABEL_533:
    *((_OWORD *)a1 + 219) = *(_OWORD *)(a2 + 3504);
    *(_OWORD *)((char *)a1 + 3513) = *(_OWORD *)(a2 + 3513);
    goto LABEL_535;
  }
  uint64_t v113 = *(void *)(a2 + 3504);
  if (v113 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 438));
    goto LABEL_533;
  }
  a1[438] = v113;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 3512) = *(unsigned char *)(v5 + 3232);
  a1[440] = *(void *)(a2 + 3520);
  *((unsigned char *)a1 + 3528) = *(unsigned char *)(a2 + 3528);
LABEL_535:
  if (a1[442] == 1)
  {
LABEL_538:
    *((_OWORD *)a1 + 221) = *(_OWORD *)(a2 + 3536);
    *(_OWORD *)((char *)a1 + 3545) = *(_OWORD *)(a2 + 3545);
    goto LABEL_540;
  }
  uint64_t v114 = *(void *)(a2 + 3536);
  if (v114 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 442));
    goto LABEL_538;
  }
  a1[442] = v114;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 3544) = *(unsigned char *)(v5 + 3264);
  a1[444] = *(void *)(a2 + 3552);
  *((unsigned char *)a1 + 3560) = *(unsigned char *)(a2 + 3560);
LABEL_540:
  if (a1[446] == 1)
  {
LABEL_543:
    *((_OWORD *)a1 + 223) = *(_OWORD *)(a2 + 3568);
    *(_OWORD *)((char *)a1 + 3577) = *(_OWORD *)(a2 + 3577);
    goto LABEL_545;
  }
  uint64_t v115 = *(void *)(a2 + 3568);
  if (v115 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 446));
    goto LABEL_543;
  }
  a1[446] = v115;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 3576) = *(unsigned char *)(v5 + 3296);
  a1[448] = *(void *)(a2 + 3584);
  *((unsigned char *)a1 + 3592) = *(unsigned char *)(a2 + 3592);
LABEL_545:
  if (a1[450] == 1)
  {
LABEL_548:
    *((_OWORD *)a1 + 225) = *(_OWORD *)(a2 + 3600);
    *(_OWORD *)((char *)a1 + 3609) = *(_OWORD *)(a2 + 3609);
    goto LABEL_550;
  }
  uint64_t v116 = *(void *)(a2 + 3600);
  if (v116 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 450));
    goto LABEL_548;
  }
  a1[450] = v116;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 3608) = *(unsigned char *)(v5 + 3328);
  a1[452] = *(void *)(a2 + 3616);
  *((unsigned char *)a1 + 3624) = *(unsigned char *)(a2 + 3624);
LABEL_550:
  if (a1[454] == 1)
  {
LABEL_553:
    *((_OWORD *)a1 + 227) = *(_OWORD *)(a2 + 3632);
    *(_OWORD *)((char *)a1 + 3641) = *(_OWORD *)(a2 + 3641);
    goto LABEL_555;
  }
  uint64_t v117 = *(void *)(a2 + 3632);
  if (v117 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 454));
    goto LABEL_553;
  }
  a1[454] = v117;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 3640) = *(unsigned char *)(v5 + 3360);
  a1[456] = *(void *)(a2 + 3648);
  *((unsigned char *)a1 + 3656) = *(unsigned char *)(a2 + 3656);
LABEL_555:
  if (a1[458] == 1)
  {
LABEL_558:
    *((_OWORD *)a1 + 229) = *(_OWORD *)(a2 + 3664);
    *(_OWORD *)((char *)a1 + 3673) = *(_OWORD *)(a2 + 3673);
    goto LABEL_560;
  }
  uint64_t v118 = *(void *)(a2 + 3664);
  if (v118 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 458));
    goto LABEL_558;
  }
  a1[458] = v118;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 3672) = *(unsigned char *)(v5 + 3392);
  a1[460] = *(void *)(a2 + 3680);
  *((unsigned char *)a1 + 3688) = *(unsigned char *)(a2 + 3688);
LABEL_560:
  if (a1[462] == 1)
  {
LABEL_563:
    *((_OWORD *)a1 + 231) = *(_OWORD *)(a2 + 3696);
    *(_OWORD *)((char *)a1 + 3705) = *(_OWORD *)(a2 + 3705);
    goto LABEL_565;
  }
  uint64_t v119 = *(void *)(a2 + 3696);
  if (v119 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 462));
    goto LABEL_563;
  }
  a1[462] = v119;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 3704) = *(unsigned char *)(v5 + 3424);
  a1[464] = *(void *)(a2 + 3712);
  *((unsigned char *)a1 + 3720) = *(unsigned char *)(a2 + 3720);
LABEL_565:
  if (a1[466] == 1)
  {
LABEL_568:
    *((_OWORD *)a1 + 233) = *(_OWORD *)(a2 + 3728);
    *(_OWORD *)((char *)a1 + 3737) = *(_OWORD *)(a2 + 3737);
    goto LABEL_570;
  }
  uint64_t v120 = *(void *)(a2 + 3728);
  if (v120 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 466));
    goto LABEL_568;
  }
  a1[466] = v120;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 3736) = *(unsigned char *)(v5 + 3456);
  a1[468] = *(void *)(a2 + 3744);
  *((unsigned char *)a1 + 3752) = *(unsigned char *)(a2 + 3752);
LABEL_570:
  if (a1[470] == 1)
  {
LABEL_573:
    *((_OWORD *)a1 + 235) = *(_OWORD *)(a2 + 3760);
    *(_OWORD *)((char *)a1 + 3769) = *(_OWORD *)(a2 + 3769);
    goto LABEL_575;
  }
  uint64_t v121 = *(void *)(a2 + 3760);
  if (v121 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 470));
    goto LABEL_573;
  }
  a1[470] = v121;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 3768) = *(unsigned char *)(v5 + 3488);
  a1[472] = *(void *)(a2 + 3776);
  *((unsigned char *)a1 + 3784) = *(unsigned char *)(a2 + 3784);
LABEL_575:
  if (a1[474] == 1)
  {
LABEL_578:
    *((_OWORD *)a1 + 237) = *(_OWORD *)(a2 + 3792);
    *(_OWORD *)((char *)a1 + 3801) = *(_OWORD *)(a2 + 3801);
    goto LABEL_580;
  }
  uint64_t v122 = *(void *)(a2 + 3792);
  if (v122 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 474));
    goto LABEL_578;
  }
  a1[474] = v122;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 3800) = *(unsigned char *)(v5 + 3520);
  a1[476] = *(void *)(a2 + 3808);
  *((unsigned char *)a1 + 3816) = *(unsigned char *)(a2 + 3816);
LABEL_580:
  if (a1[478] == 1)
  {
LABEL_583:
    *((_OWORD *)a1 + 239) = *(_OWORD *)(a2 + 3824);
    *(_OWORD *)((char *)a1 + 3833) = *(_OWORD *)(a2 + 3833);
    goto LABEL_585;
  }
  uint64_t v123 = *(void *)(a2 + 3824);
  if (v123 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 478));
    goto LABEL_583;
  }
  a1[478] = v123;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 3832) = *(unsigned char *)(v5 + 3552);
  a1[480] = *(void *)(a2 + 3840);
  *((unsigned char *)a1 + 3848) = *(unsigned char *)(a2 + 3848);
LABEL_585:
  if (a1[482] == 1)
  {
LABEL_588:
    *((_OWORD *)a1 + 241) = *(_OWORD *)(a2 + 3856);
    *(_OWORD *)((char *)a1 + 3865) = *(_OWORD *)(a2 + 3865);
    goto LABEL_590;
  }
  uint64_t v124 = *(void *)(a2 + 3856);
  if (v124 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 482));
    goto LABEL_588;
  }
  a1[482] = v124;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 3864) = *(unsigned char *)(v5 + 3584);
  a1[484] = *(void *)(a2 + 3872);
  *((unsigned char *)a1 + 3880) = *(unsigned char *)(a2 + 3880);
LABEL_590:
  if (a1[486] == 1)
  {
LABEL_593:
    *((_OWORD *)a1 + 243) = *(_OWORD *)(a2 + 3888);
    *(_OWORD *)((char *)a1 + 3897) = *(_OWORD *)(a2 + 3897);
    goto LABEL_595;
  }
  uint64_t v125 = *(void *)(a2 + 3888);
  if (v125 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 486));
    goto LABEL_593;
  }
  a1[486] = v125;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 3896) = *(unsigned char *)(v5 + 3616);
  a1[488] = *(void *)(a2 + 3904);
  *((unsigned char *)a1 + 3912) = *(unsigned char *)(a2 + 3912);
LABEL_595:
  if (a1[490] == 1)
  {
LABEL_598:
    *((_OWORD *)a1 + 245) = *(_OWORD *)(a2 + 3920);
    *(_OWORD *)((char *)a1 + 3929) = *(_OWORD *)(a2 + 3929);
    goto LABEL_600;
  }
  uint64_t v126 = *(void *)(a2 + 3920);
  if (v126 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 490));
    goto LABEL_598;
  }
  a1[490] = v126;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 3928) = *(unsigned char *)(v5 + 3648);
  a1[492] = *(void *)(a2 + 3936);
  *((unsigned char *)a1 + 3944) = *(unsigned char *)(a2 + 3944);
LABEL_600:
  if (a1[494] == 1)
  {
LABEL_603:
    *((_OWORD *)a1 + 247) = *(_OWORD *)(a2 + 3952);
    *(_OWORD *)((char *)a1 + 3961) = *(_OWORD *)(a2 + 3961);
    goto LABEL_605;
  }
  uint64_t v127 = *(void *)(a2 + 3952);
  if (v127 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 494));
    goto LABEL_603;
  }
  a1[494] = v127;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 3960) = *(unsigned char *)(v5 + 3680);
  a1[496] = *(void *)(a2 + 3968);
  *((unsigned char *)a1 + 3976) = *(unsigned char *)(a2 + 3976);
LABEL_605:
  if (a1[498] == 1)
  {
LABEL_608:
    *((_OWORD *)a1 + 249) = *(_OWORD *)(a2 + 3984);
    *(_OWORD *)((char *)a1 + 3993) = *(_OWORD *)(a2 + 3993);
    goto LABEL_610;
  }
  uint64_t v128 = *(void *)(a2 + 3984);
  if (v128 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 498));
    goto LABEL_608;
  }
  a1[498] = v128;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 3992) = *(unsigned char *)(v5 + 3712);
  a1[500] = *(void *)(a2 + 4000);
  *((unsigned char *)a1 + 4008) = *(unsigned char *)(a2 + 4008);
LABEL_610:
  if (a1[502] == 1)
  {
LABEL_613:
    *((_OWORD *)a1 + 251) = *(_OWORD *)(a2 + 4016);
    *(_OWORD *)((char *)a1 + 4025) = *(_OWORD *)(a2 + 4025);
    goto LABEL_615;
  }
  uint64_t v129 = *(void *)(a2 + 4016);
  if (v129 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 502));
    goto LABEL_613;
  }
  a1[502] = v129;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 4024) = *(unsigned char *)(v5 + 3744);
  a1[504] = *(void *)(a2 + 4032);
  *((unsigned char *)a1 + 4040) = *(unsigned char *)(a2 + 4040);
LABEL_615:
  if (a1[506] == 1)
  {
LABEL_618:
    *((_OWORD *)a1 + 253) = *(_OWORD *)(a2 + 4048);
    *(_OWORD *)((char *)a1 + 4057) = *(_OWORD *)(a2 + 4057);
    goto LABEL_620;
  }
  uint64_t v130 = *(void *)(a2 + 4048);
  if (v130 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 506));
    goto LABEL_618;
  }
  a1[506] = v130;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 4056) = *(unsigned char *)(v5 + 3776);
  a1[508] = *(void *)(a2 + 4064);
  *((unsigned char *)a1 + 4072) = *(unsigned char *)(a2 + 4072);
LABEL_620:
  if (a1[510] != 1)
  {
    uint64_t v131 = *(void *)(a2 + 4080);
    if (v131 != 1)
    {
      a1[510] = v131;
      swift_bridgeObjectRelease();
      *((unsigned char *)a1 + 4088) = *(unsigned char *)(v5 + 3808);
      *((unsigned char *)a1 + 4104) = *(unsigned char *)(a2 + 4104);
      a1[512] = *(void *)(a2 + 4096);
      goto LABEL_625;
    }
    sub_10009F534((uint64_t)(a1 + 510));
  }
  *((_OWORD *)a1 + 255) = *(_OWORD *)(a2 + 4080);
  *(_OWORD *)((char *)a1 + 4089) = *(_OWORD *)(a2 + 4089);
LABEL_625:
  *((_OWORD *)a1 + 257) = *(_OWORD *)(a2 + 4112);
  *((unsigned char *)a1 + 4128) = *(unsigned char *)(a2 + 4128);
  *(_OWORD *)(a1 + 517) = *(_OWORD *)(a2 + 4136);
  *((unsigned char *)a1 + 4152) = *(unsigned char *)(a2 + 4152);
  *((_DWORD *)v4 + 832) = *(_DWORD *)(v5 + 3873);
  *((_WORD *)v4 + 1666) = *(_WORD *)(v5 + 3877);
  v4[3334] = *(unsigned char *)(v5 + 3879);
  a1[520] = *(void *)(a2 + 4160);
  swift_bridgeObjectRelease();
  a1[521] = *(void *)(a2 + 4168);
  swift_bridgeObjectRelease();
LABEL_626:
  long long v132 = a1 + 522;
  uint64_t v133 = (_OWORD *)(a2 + 4176);
  if (a1[624] == 1)
  {
LABEL_629:
    memcpy(a1 + 522, (const void *)(a2 + 4176), 0x340uLL);
    goto LABEL_751;
  }
  if (*(void *)(a2 + 4992) == 1)
  {
    sub_10009F560(a1 + 522);
    goto LABEL_629;
  }
  if (*v132 == 1) {
    goto LABEL_633;
  }
  if (*(void *)v133 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 522));
LABEL_633:
    *(_OWORD *)long long v132 = *v133;
    *(_OWORD *)((char *)a1 + 4185) = *(_OWORD *)(a2 + 4185);
    goto LABEL_635;
  }
  a1[522] = *(void *)v133;
  swift_bridgeObjectRelease();
  v4[3359] = *(unsigned char *)(v5 + 3904);
  a1[524] = *(void *)(a2 + 4192);
  *((unsigned char *)a1 + 4200) = *(unsigned char *)(a2 + 4200);
LABEL_635:
  if (a1[526] == 1)
  {
LABEL_638:
    *((_OWORD *)a1 + 263) = *(_OWORD *)(a2 + 4208);
    *(_OWORD *)((char *)a1 + 4217) = *(_OWORD *)(a2 + 4217);
    goto LABEL_640;
  }
  uint64_t v134 = *(void *)(a2 + 4208);
  if (v134 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 526));
    goto LABEL_638;
  }
  a1[526] = v134;
  swift_bridgeObjectRelease();
  v4[3391] = *(unsigned char *)(v5 + 3936);
  *((unsigned char *)a1 + 4232) = *(unsigned char *)(a2 + 4232);
  a1[528] = *(void *)(a2 + 4224);
LABEL_640:
  if (a1[530] == 1)
  {
LABEL_643:
    *((_OWORD *)a1 + 265) = *(_OWORD *)(a2 + 4240);
    *(_OWORD *)((char *)a1 + 4249) = *(_OWORD *)(a2 + 4249);
    goto LABEL_645;
  }
  uint64_t v135 = *(void *)(a2 + 4240);
  if (v135 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 530));
    goto LABEL_643;
  }
  a1[530] = v135;
  swift_bridgeObjectRelease();
  v4[3423] = *(unsigned char *)(v5 + 3968);
  *((unsigned char *)a1 + 4264) = *(unsigned char *)(a2 + 4264);
  a1[532] = *(void *)(a2 + 4256);
LABEL_645:
  if (a1[534] == 1)
  {
LABEL_648:
    *((_OWORD *)a1 + 267) = *(_OWORD *)(a2 + 4272);
    *(_OWORD *)((char *)a1 + 4281) = *(_OWORD *)(a2 + 4281);
    goto LABEL_650;
  }
  uint64_t v136 = *(void *)(a2 + 4272);
  if (v136 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 534));
    goto LABEL_648;
  }
  a1[534] = v136;
  swift_bridgeObjectRelease();
  v4[3455] = *(unsigned char *)(v5 + 4000);
  *((unsigned char *)a1 + 4296) = *(unsigned char *)(a2 + 4296);
  a1[536] = *(void *)(a2 + 4288);
LABEL_650:
  if (a1[538] == 1)
  {
LABEL_653:
    *((_OWORD *)a1 + 269) = *(_OWORD *)(a2 + 4304);
    *(_OWORD *)((char *)a1 + 4313) = *(_OWORD *)(a2 + 4313);
    goto LABEL_655;
  }
  uint64_t v137 = *(void *)(a2 + 4304);
  if (v137 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 538));
    goto LABEL_653;
  }
  a1[538] = v137;
  swift_bridgeObjectRelease();
  v4[3487] = *(unsigned char *)(v5 + 4032);
  *((unsigned char *)a1 + 4328) = *(unsigned char *)(a2 + 4328);
  a1[540] = *(void *)(a2 + 4320);
LABEL_655:
  if (a1[542] == 1)
  {
LABEL_658:
    *((_OWORD *)a1 + 271) = *(_OWORD *)(a2 + 4336);
    *(_OWORD *)((char *)a1 + 4345) = *(_OWORD *)(a2 + 4345);
    goto LABEL_660;
  }
  uint64_t v138 = *(void *)(a2 + 4336);
  if (v138 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 542));
    goto LABEL_658;
  }
  a1[542] = v138;
  swift_bridgeObjectRelease();
  v4[3519] = *(unsigned char *)(v5 + 4064);
  *((unsigned char *)a1 + 4360) = *(unsigned char *)(a2 + 4360);
  a1[544] = *(void *)(a2 + 4352);
LABEL_660:
  if (a1[546] == 1)
  {
LABEL_663:
    *((_OWORD *)a1 + 273) = *(_OWORD *)(a2 + 4368);
    *(_OWORD *)((char *)a1 + 4377) = *(_OWORD *)(a2 + 4377);
    goto LABEL_665;
  }
  uint64_t v139 = *(void *)(a2 + 4368);
  if (v139 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 546));
    goto LABEL_663;
  }
  a1[546] = v139;
  swift_bridgeObjectRelease();
  v4[3551] = *(unsigned char *)(a2 + 4376);
  *((unsigned char *)a1 + 4392) = *(unsigned char *)(a2 + 4392);
  a1[548] = *(void *)(a2 + 4384);
LABEL_665:
  if (a1[550] == 1)
  {
LABEL_668:
    *((_OWORD *)a1 + 275) = *(_OWORD *)(a2 + 4400);
    *(_OWORD *)((char *)a1 + 4409) = *(_OWORD *)(a2 + 4409);
    goto LABEL_670;
  }
  uint64_t v140 = *(void *)(a2 + 4400);
  if (v140 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 550));
    goto LABEL_668;
  }
  a1[550] = v140;
  swift_bridgeObjectRelease();
  v4[3583] = *(unsigned char *)(a2 + 4408);
  *((unsigned char *)a1 + 4424) = *(unsigned char *)(a2 + 4424);
  a1[552] = *(void *)(a2 + 4416);
LABEL_670:
  if (a1[554] == 1)
  {
LABEL_673:
    *((_OWORD *)a1 + 277) = *(_OWORD *)(a2 + 4432);
    *(_OWORD *)((char *)a1 + 4441) = *(_OWORD *)(a2 + 4441);
    goto LABEL_675;
  }
  uint64_t v141 = *(void *)(a2 + 4432);
  if (v141 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 554));
    goto LABEL_673;
  }
  a1[554] = v141;
  swift_bridgeObjectRelease();
  v4[3615] = *(unsigned char *)(a2 + 4440);
  *((unsigned char *)a1 + 4456) = *(unsigned char *)(a2 + 4456);
  a1[556] = *(void *)(a2 + 4448);
LABEL_675:
  if (a1[558] == 1)
  {
LABEL_678:
    *((_OWORD *)a1 + 279) = *(_OWORD *)(a2 + 4464);
    *(_OWORD *)((char *)a1 + 4473) = *(_OWORD *)(a2 + 4473);
    goto LABEL_680;
  }
  uint64_t v142 = *(void *)(a2 + 4464);
  if (v142 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 558));
    goto LABEL_678;
  }
  a1[558] = v142;
  swift_bridgeObjectRelease();
  v4[3647] = *(unsigned char *)(a2 + 4472);
  *((unsigned char *)a1 + 4488) = *(unsigned char *)(a2 + 4488);
  a1[560] = *(void *)(a2 + 4480);
LABEL_680:
  if (a1[562] == 1)
  {
LABEL_683:
    *((_OWORD *)a1 + 281) = *(_OWORD *)(a2 + 4496);
    *(_OWORD *)((char *)a1 + 4505) = *(_OWORD *)(a2 + 4505);
    goto LABEL_685;
  }
  uint64_t v143 = *(void *)(a2 + 4496);
  if (v143 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 562));
    goto LABEL_683;
  }
  a1[562] = v143;
  swift_bridgeObjectRelease();
  v4[3679] = *(unsigned char *)(a2 + 4504);
  *((unsigned char *)a1 + 4520) = *(unsigned char *)(a2 + 4520);
  a1[564] = *(void *)(a2 + 4512);
LABEL_685:
  if (a1[566] == 1)
  {
LABEL_688:
    *((_OWORD *)a1 + 283) = *(_OWORD *)(a2 + 4528);
    *(_OWORD *)((char *)a1 + 4537) = *(_OWORD *)(a2 + 4537);
    goto LABEL_690;
  }
  uint64_t v144 = *(void *)(a2 + 4528);
  if (v144 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 566));
    goto LABEL_688;
  }
  a1[566] = v144;
  swift_bridgeObjectRelease();
  v4[3711] = *(unsigned char *)(a2 + 4536);
  *((unsigned char *)a1 + 4552) = *(unsigned char *)(a2 + 4552);
  a1[568] = *(void *)(a2 + 4544);
LABEL_690:
  if (a1[570] == 1)
  {
LABEL_693:
    *((_OWORD *)a1 + 285) = *(_OWORD *)(a2 + 4560);
    *(_OWORD *)((char *)a1 + 4569) = *(_OWORD *)(a2 + 4569);
    goto LABEL_695;
  }
  uint64_t v145 = *(void *)(a2 + 4560);
  if (v145 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 570));
    goto LABEL_693;
  }
  a1[570] = v145;
  swift_bridgeObjectRelease();
  v4[3743] = *(unsigned char *)(a2 + 4568);
  *((unsigned char *)a1 + 4584) = *(unsigned char *)(a2 + 4584);
  a1[572] = *(void *)(a2 + 4576);
LABEL_695:
  if (a1[574] == 1)
  {
LABEL_698:
    *((_OWORD *)a1 + 287) = *(_OWORD *)(a2 + 4592);
    *(_OWORD *)((char *)a1 + 4601) = *(_OWORD *)(a2 + 4601);
    goto LABEL_700;
  }
  uint64_t v146 = *(void *)(a2 + 4592);
  if (v146 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 574));
    goto LABEL_698;
  }
  a1[574] = v146;
  swift_bridgeObjectRelease();
  v4[3775] = *(unsigned char *)(a2 + 4600);
  *((unsigned char *)a1 + 4616) = *(unsigned char *)(a2 + 4616);
  a1[576] = *(void *)(a2 + 4608);
LABEL_700:
  if (a1[578] == 1)
  {
LABEL_703:
    *((_OWORD *)a1 + 289) = *(_OWORD *)(a2 + 4624);
    *(_OWORD *)((char *)a1 + 4633) = *(_OWORD *)(a2 + 4633);
    goto LABEL_705;
  }
  uint64_t v147 = *(void *)(a2 + 4624);
  if (v147 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 578));
    goto LABEL_703;
  }
  a1[578] = v147;
  swift_bridgeObjectRelease();
  v4[3807] = *(unsigned char *)(a2 + 4632);
  *((unsigned char *)a1 + 4648) = *(unsigned char *)(a2 + 4648);
  a1[580] = *(void *)(a2 + 4640);
LABEL_705:
  if (a1[582] == 1)
  {
LABEL_708:
    *((_OWORD *)a1 + 291) = *(_OWORD *)(a2 + 4656);
    *(_OWORD *)((char *)a1 + 4665) = *(_OWORD *)(a2 + 4665);
    goto LABEL_710;
  }
  uint64_t v148 = *(void *)(a2 + 4656);
  if (v148 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 582));
    goto LABEL_708;
  }
  a1[582] = v148;
  swift_bridgeObjectRelease();
  v4[3839] = *(unsigned char *)(a2 + 4664);
  *((unsigned char *)a1 + 4680) = *(unsigned char *)(a2 + 4680);
  a1[584] = *(void *)(a2 + 4672);
LABEL_710:
  if (a1[586] == 1)
  {
LABEL_713:
    *((_OWORD *)a1 + 293) = *(_OWORD *)(a2 + 4688);
    *(_OWORD *)((char *)a1 + 4697) = *(_OWORD *)(a2 + 4697);
    goto LABEL_715;
  }
  uint64_t v149 = *(void *)(a2 + 4688);
  if (v149 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 586));
    goto LABEL_713;
  }
  a1[586] = v149;
  swift_bridgeObjectRelease();
  v4[3871] = *(unsigned char *)(a2 + 4696);
  *((unsigned char *)a1 + 4712) = *(unsigned char *)(a2 + 4712);
  a1[588] = *(void *)(a2 + 4704);
LABEL_715:
  if (a1[590] == 1)
  {
LABEL_718:
    *((_OWORD *)a1 + 295) = *(_OWORD *)(a2 + 4720);
    *(_OWORD *)((char *)a1 + 4729) = *(_OWORD *)(a2 + 4729);
    goto LABEL_720;
  }
  uint64_t v150 = *(void *)(a2 + 4720);
  if (v150 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 590));
    goto LABEL_718;
  }
  a1[590] = v150;
  swift_bridgeObjectRelease();
  v4[3903] = *(unsigned char *)(a2 + 4728);
  *((unsigned char *)a1 + 4744) = *(unsigned char *)(a2 + 4744);
  a1[592] = *(void *)(a2 + 4736);
LABEL_720:
  if (a1[594] == 1)
  {
LABEL_723:
    *((_OWORD *)a1 + 297) = *(_OWORD *)(a2 + 4752);
    *(_OWORD *)((char *)a1 + 4761) = *(_OWORD *)(a2 + 4761);
    goto LABEL_725;
  }
  uint64_t v151 = *(void *)(a2 + 4752);
  if (v151 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 594));
    goto LABEL_723;
  }
  a1[594] = v151;
  swift_bridgeObjectRelease();
  v4[3935] = *(unsigned char *)(a2 + 4760);
  *((unsigned char *)a1 + 4776) = *(unsigned char *)(a2 + 4776);
  a1[596] = *(void *)(a2 + 4768);
LABEL_725:
  if (a1[598] == 1)
  {
LABEL_728:
    *((_OWORD *)a1 + 299) = *(_OWORD *)(a2 + 4784);
    *(_OWORD *)((char *)a1 + 4793) = *(_OWORD *)(a2 + 4793);
    goto LABEL_730;
  }
  uint64_t v152 = *(void *)(a2 + 4784);
  if (v152 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 598));
    goto LABEL_728;
  }
  a1[598] = v152;
  swift_bridgeObjectRelease();
  v4[3967] = *(unsigned char *)(a2 + 4792);
  *((unsigned char *)a1 + 4808) = *(unsigned char *)(a2 + 4808);
  a1[600] = *(void *)(a2 + 4800);
LABEL_730:
  if (a1[602] == 1)
  {
LABEL_733:
    *((_OWORD *)a1 + 301) = *(_OWORD *)(a2 + 4816);
    *(_OWORD *)((char *)a1 + 4825) = *(_OWORD *)(a2 + 4825);
    goto LABEL_735;
  }
  uint64_t v153 = *(void *)(a2 + 4816);
  if (v153 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 602));
    goto LABEL_733;
  }
  a1[602] = v153;
  swift_bridgeObjectRelease();
  v4[3999] = *(unsigned char *)(a2 + 4824);
  *((unsigned char *)a1 + 4840) = *(unsigned char *)(a2 + 4840);
  a1[604] = *(void *)(a2 + 4832);
LABEL_735:
  if (a1[606] == 1)
  {
LABEL_738:
    *((_OWORD *)a1 + 303) = *(_OWORD *)(a2 + 4848);
    *(_OWORD *)((char *)a1 + 4857) = *(_OWORD *)(a2 + 4857);
    goto LABEL_740;
  }
  uint64_t v154 = *(void *)(a2 + 4848);
  if (v154 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 606));
    goto LABEL_738;
  }
  a1[606] = v154;
  swift_bridgeObjectRelease();
  v4[4031] = *(unsigned char *)(a2 + 4856);
  *((unsigned char *)a1 + 4872) = *(unsigned char *)(a2 + 4872);
  a1[608] = *(void *)(a2 + 4864);
LABEL_740:
  if (a1[610] == 1)
  {
LABEL_743:
    *((_OWORD *)a1 + 305) = *(_OWORD *)(a2 + 4880);
    *(_OWORD *)((char *)a1 + 4889) = *(_OWORD *)(a2 + 4889);
    goto LABEL_745;
  }
  uint64_t v155 = *(void *)(a2 + 4880);
  if (v155 == 1)
  {
    sub_10009F534((uint64_t)(a1 + 610));
    goto LABEL_743;
  }
  a1[610] = v155;
  swift_bridgeObjectRelease();
  v4[4063] = *(unsigned char *)(a2 + 4888);
  *((unsigned char *)a1 + 4904) = *(unsigned char *)(a2 + 4904);
  a1[612] = *(void *)(a2 + 4896);
LABEL_745:
  if (a1[614] != 1)
  {
    uint64_t v156 = *(void *)(a2 + 4912);
    if (v156 != 1)
    {
      a1[614] = v156;
      swift_bridgeObjectRelease();
      v4[4095] = *(unsigned char *)(a2 + 4920);
      *((unsigned char *)a1 + 4936) = *(unsigned char *)(a2 + 4936);
      a1[616] = *(void *)(a2 + 4928);
      goto LABEL_750;
    }
    sub_10009F534((uint64_t)(a1 + 614));
  }
  *((_OWORD *)a1 + 307) = *(_OWORD *)(a2 + 4912);
  *(_OWORD *)((char *)a1 + 4921) = *(_OWORD *)(a2 + 4921);
LABEL_750:
  *((_OWORD *)a1 + 309) = *(_OWORD *)(a2 + 4944);
  *((unsigned char *)a1 + 4960) = *(unsigned char *)(a2 + 4960);
  *(_OWORD *)(a1 + 621) = *(_OWORD *)(a2 + 4968);
  *((unsigned char *)a1 + 4984) = *(unsigned char *)(a2 + 4984);
  *(_DWORD *)((char *)a1 + 4985) = *(_DWORD *)(a2 + 4985);
  *(_WORD *)((char *)a1 + 4989) = *(_WORD *)(a2 + 4989);
  *((unsigned char *)a1 + 4991) = *(unsigned char *)(a2 + 4991);
  a1[624] = *(void *)(a2 + 4992);
  swift_bridgeObjectRelease();
  a1[625] = *(void *)(a2 + 5000);
  swift_bridgeObjectRelease();
LABEL_751:
  uint64_t v157 = a1 + 626;
  uint64_t v158 = (void *)(a2 + 5008);
  if (a1[728] != 1)
  {
    if (*(void *)(a2 + 5824) == 1)
    {
      sub_10009F560(a1 + 626);
      goto LABEL_754;
    }
    if (*v157 != 1)
    {
      if (*v158 != 1)
      {
        a1[626] = *v158;
        swift_bridgeObjectRelease();
        *((unsigned char *)a1 + 5016) = *(unsigned char *)(a2 + 5016);
        a1[628] = *(void *)(a2 + 5024);
        *((unsigned char *)a1 + 5032) = *(unsigned char *)(a2 + 5032);
LABEL_760:
        if (a1[630] != 1)
        {
          uint64_t v159 = *(void *)(a2 + 5040);
          if (v159 != 1)
          {
            a1[630] = v159;
            swift_bridgeObjectRelease();
            *((unsigned char *)a1 + 5048) = *(unsigned char *)(a2 + 5048);
            *((unsigned char *)a1 + 5064) = *(unsigned char *)(a2 + 5064);
            a1[632] = *(void *)(a2 + 5056);
LABEL_765:
            if (a1[634] != 1)
            {
              uint64_t v160 = *(void *)(a2 + 5072);
              if (v160 != 1)
              {
                a1[634] = v160;
                swift_bridgeObjectRelease();
                *((unsigned char *)a1 + 5080) = *(unsigned char *)(a2 + 5080);
                *((unsigned char *)a1 + 5096) = *(unsigned char *)(a2 + 5096);
                a1[636] = *(void *)(a2 + 5088);
LABEL_770:
                if (a1[638] != 1)
                {
                  uint64_t v161 = *(void *)(a2 + 5104);
                  if (v161 != 1)
                  {
                    a1[638] = v161;
                    swift_bridgeObjectRelease();
                    *((unsigned char *)a1 + 5112) = *(unsigned char *)(a2 + 5112);
                    *((unsigned char *)a1 + 5128) = *(unsigned char *)(a2 + 5128);
                    a1[640] = *(void *)(a2 + 5120);
LABEL_775:
                    if (a1[642] != 1)
                    {
                      uint64_t v162 = *(void *)(a2 + 5136);
                      if (v162 != 1)
                      {
                        a1[642] = v162;
                        swift_bridgeObjectRelease();
                        *((unsigned char *)a1 + 5144) = *(unsigned char *)(a2 + 5144);
                        *((unsigned char *)a1 + 5160) = *(unsigned char *)(a2 + 5160);
                        a1[644] = *(void *)(a2 + 5152);
LABEL_780:
                        if (a1[646] != 1)
                        {
                          uint64_t v163 = *(void *)(a2 + 5168);
                          if (v163 != 1)
                          {
                            a1[646] = v163;
                            swift_bridgeObjectRelease();
                            *((unsigned char *)a1 + 5176) = *(unsigned char *)(a2 + 5176);
                            *((unsigned char *)a1 + 5192) = *(unsigned char *)(a2 + 5192);
                            a1[648] = *(void *)(a2 + 5184);
LABEL_785:
                            if (a1[650] != 1)
                            {
                              uint64_t v164 = *(void *)(a2 + 5200);
                              if (v164 != 1)
                              {
                                a1[650] = v164;
                                swift_bridgeObjectRelease();
                                *((unsigned char *)a1 + 5208) = *(unsigned char *)(a2 + 5208);
                                *((unsigned char *)a1 + 5224) = *(unsigned char *)(a2 + 5224);
                                a1[652] = *(void *)(a2 + 5216);
LABEL_790:
                                if (a1[654] != 1)
                                {
                                  uint64_t v165 = *(void *)(a2 + 5232);
                                  if (v165 != 1)
                                  {
                                    a1[654] = v165;
                                    swift_bridgeObjectRelease();
                                    *((unsigned char *)a1 + 5240) = *(unsigned char *)(a2 + 5240);
                                    *((unsigned char *)a1 + 5256) = *(unsigned char *)(a2 + 5256);
                                    a1[656] = *(void *)(a2 + 5248);
LABEL_795:
                                    if (a1[658] != 1)
                                    {
                                      uint64_t v166 = *(void *)(a2 + 5264);
                                      if (v166 != 1)
                                      {
                                        a1[658] = v166;
                                        swift_bridgeObjectRelease();
                                        *((unsigned char *)a1 + 5272) = *(unsigned char *)(a2 + 5272);
                                        *((unsigned char *)a1 + 5288) = *(unsigned char *)(a2 + 5288);
                                        a1[660] = *(void *)(a2 + 5280);
LABEL_800:
                                        if (a1[662] != 1)
                                        {
                                          uint64_t v167 = *(void *)(a2 + 5296);
                                          if (v167 != 1)
                                          {
                                            a1[662] = v167;
                                            swift_bridgeObjectRelease();
                                            *((unsigned char *)a1 + 5304) = *(unsigned char *)(a2 + 5304);
                                            *((unsigned char *)a1 + 5320) = *(unsigned char *)(a2 + 5320);
                                            a1[664] = *(void *)(a2 + 5312);
LABEL_805:
                                            if (a1[666] != 1)
                                            {
                                              uint64_t v168 = *(void *)(a2 + 5328);
                                              if (v168 != 1)
                                              {
                                                a1[666] = v168;
                                                swift_bridgeObjectRelease();
                                                *((unsigned char *)a1 + 5336) = *(unsigned char *)(a2 + 5336);
                                                *((unsigned char *)a1 + 5352) = *(unsigned char *)(a2 + 5352);
                                                a1[668] = *(void *)(a2 + 5344);
LABEL_810:
                                                if (a1[670] != 1)
                                                {
                                                  uint64_t v169 = *(void *)(a2 + 5360);
                                                  if (v169 != 1)
                                                  {
                                                    a1[670] = v169;
                                                    swift_bridgeObjectRelease();
                                                    *((unsigned char *)a1 + 5368) = *(unsigned char *)(a2 + 5368);
                                                    *((unsigned char *)a1 + 5384) = *(unsigned char *)(a2 + 5384);
                                                    a1[672] = *(void *)(a2 + 5376);
LABEL_815:
                                                    if (a1[674] != 1)
                                                    {
                                                      uint64_t v170 = *(void *)(a2 + 5392);
                                                      if (v170 != 1)
                                                      {
                                                        a1[674] = v170;
                                                        swift_bridgeObjectRelease();
                                                        *((unsigned char *)a1 + 5400) = *(unsigned char *)(a2 + 5400);
                                                        *((unsigned char *)a1 + 5416) = *(unsigned char *)(a2 + 5416);
                                                        a1[676] = *(void *)(a2 + 5408);
LABEL_820:
                                                        if (a1[678] != 1)
                                                        {
                                                          uint64_t v171 = *(void *)(a2 + 5424);
                                                          if (v171 != 1)
                                                          {
                                                            a1[678] = v171;
                                                            swift_bridgeObjectRelease();
                                                            *((unsigned char *)a1 + 5432) = *(unsigned char *)(a2 + 5432);
                                                            *((unsigned char *)a1 + 5448) = *(unsigned char *)(a2 + 5448);
                                                            a1[680] = *(void *)(a2 + 5440);
LABEL_825:
                                                            if (a1[682] != 1)
                                                            {
                                                              uint64_t v172 = *(void *)(a2 + 5456);
                                                              if (v172 != 1)
                                                              {
                                                                a1[682] = v172;
                                                                swift_bridgeObjectRelease();
                                                                *((unsigned char *)a1 + 5464) = *(unsigned char *)(a2 + 5464);
                                                                *((unsigned char *)a1 + 5480) = *(unsigned char *)(a2 + 5480);
                                                                a1[684] = *(void *)(a2 + 5472);
LABEL_830:
                                                                if (a1[686] != 1)
                                                                {
                                                                  uint64_t v173 = *(void *)(a2 + 5488);
                                                                  if (v173 != 1)
                                                                  {
                                                                    a1[686] = v173;
                                                                    swift_bridgeObjectRelease();
                                                                    *((unsigned char *)a1 + 5496) = *(unsigned char *)(a2 + 5496);
                                                                    *((unsigned char *)a1 + 5512) = *(unsigned char *)(a2 + 5512);
                                                                    a1[688] = *(void *)(a2 + 5504);
LABEL_835:
                                                                    if (a1[690] != 1)
                                                                    {
                                                                      uint64_t v174 = *(void *)(a2 + 5520);
                                                                      if (v174 != 1)
                                                                      {
                                                                        a1[690] = v174;
                                                                        swift_bridgeObjectRelease();
                                                                        *((unsigned char *)a1 + 5528) = *(unsigned char *)(a2 + 5528);
                                                                        *((unsigned char *)a1 + 5544) = *(unsigned char *)(a2 + 5544);
                                                                        a1[692] = *(void *)(a2 + 5536);
LABEL_840:
                                                                        if (a1[694] != 1)
                                                                        {
                                                                          uint64_t v175 = *(void *)(a2 + 5552);
                                                                          if (v175 != 1)
                                                                          {
                                                                            a1[694] = v175;
                                                                            swift_bridgeObjectRelease();
                                                                            *((unsigned char *)a1 + 5560) = *(unsigned char *)(a2 + 5560);
                                                                            *((unsigned char *)a1 + 5576) = *(unsigned char *)(a2 + 5576);
                                                                            a1[696] = *(void *)(a2 + 5568);
LABEL_845:
                                                                            if (a1[698] != 1)
                                                                            {
                                                                              uint64_t v176 = *(void *)(a2 + 5584);
                                                                              if (v176 != 1)
                                                                              {
                                                                                a1[698] = v176;
                                                                                swift_bridgeObjectRelease();
                                                                                *((unsigned char *)a1 + 5592) = *(unsigned char *)(a2 + 5592);
                                                                                *((unsigned char *)a1 + 5608) = *(unsigned char *)(a2 + 5608);
                                                                                a1[700] = *(void *)(a2 + 5600);
LABEL_850:
                                                                                if (a1[702] != 1)
                                                                                {
                                                                                  uint64_t v177 = *(void *)(a2 + 5616);
                                                                                  if (v177 != 1)
                                                                                  {
                                                                                    a1[702] = v177;
                                                                                    swift_bridgeObjectRelease();
                                                                                    *((unsigned char *)a1 + 5624) = *(unsigned char *)(a2 + 5624);
                                                                                    *((unsigned char *)a1 + 5640) = *(unsigned char *)(a2 + 5640);
                                                                                    a1[704] = *(void *)(a2 + 5632);
LABEL_855:
                                                                                    if (a1[706] != 1)
                                                                                    {
                                                                                      uint64_t v178 = *(void *)(a2 + 5648);
                                                                                      if (v178 != 1)
                                                                                      {
                                                                                        a1[706] = v178;
                                                                                        swift_bridgeObjectRelease();
                                                                                        *((unsigned char *)a1 + 5656) = *(unsigned char *)(a2 + 5656);
                                                                                        *((unsigned char *)a1 + 5672) = *(unsigned char *)(a2 + 5672);
                                                                                        a1[708] = *(void *)(a2 + 5664);
LABEL_860:
                                                                                        if (a1[710] != 1)
                                                                                        {
                                                                                          uint64_t v179 = *(void *)(a2 + 5680);
                                                                                          if (v179 != 1)
                                                                                          {
                                                                                            a1[710] = v179;
                                                                                            swift_bridgeObjectRelease();
                                                                                            *((unsigned char *)a1 + 5688) = *(unsigned char *)(a2 + 5688);
                                                                                            *((unsigned char *)a1 + 5704) = *(unsigned char *)(a2 + 5704);
                                                                                            a1[712] = *(void *)(a2 + 5696);
LABEL_865:
                                                                                            if (a1[714] != 1)
                                                                                            {
                                                                                              uint64_t v180 = *(void *)(a2 + 5712);
                                                                                              if (v180 != 1)
                                                                                              {
                                                                                                a1[714] = v180;
                                                                                                swift_bridgeObjectRelease();
                                                                                                *((unsigned char *)a1 + 5720) = *(unsigned char *)(a2 + 5720);
                                                                                                *((unsigned char *)a1 + 5736) = *(unsigned char *)(a2 + 5736);
                                                                                                a1[716] = *(void *)(a2 + 5728);
LABEL_870:
                                                                                                if (a1[718] != 1)
                                                                                                {
                                                                                                  uint64_t v181 = *(void *)(a2 + 5744);
                                                                                                  if (v181 != 1)
                                                                                                  {
                                                                                                    a1[718] = v181;
                                                                                                    swift_bridgeObjectRelease();
                                                                                                    *((unsigned char *)a1 + 5752) = *(unsigned char *)(a2 + 5752);
                                                                                                    *((unsigned char *)a1 + 5768) = *(unsigned char *)(a2 + 5768);
                                                                                                    a1[720] = *(void *)(a2 + 5760);
                                                                                                    goto LABEL_875;
                                                                                                  }
                                                                                                  sub_10009F534((uint64_t)(a1 + 718));
                                                                                                }
                                                                                                *((_OWORD *)a1 + 359) = *(_OWORD *)(a2 + 5744);
                                                                                                *(_OWORD *)((char *)a1 + 5753) = *(_OWORD *)(a2 + 5753);
LABEL_875:
                                                                                                *((_OWORD *)a1 + 361) = *(_OWORD *)(a2 + 5776);
                                                                                                *((unsigned char *)a1 + 5792) = *(unsigned char *)(a2 + 5792);
                                                                                                *(_OWORD *)(a1 + 725) = *(_OWORD *)(a2 + 5800);
                                                                                                *((unsigned char *)a1 + 5816) = *(unsigned char *)(a2 + 5816);
                                                                                                *(_DWORD *)((char *)a1 + 5817) = *(_DWORD *)(a2 + 5817);
                                                                                                *(_WORD *)((char *)a1 + 5821) = *(_WORD *)(a2 + 5821);
                                                                                                *((unsigned char *)a1 + 5823) = *(unsigned char *)(a2 + 5823);
                                                                                                a1[728] = *(void *)(a2 + 5824);
                                                                                                swift_bridgeObjectRelease();
                                                                                                a1[729] = *(void *)(a2 + 5832);
                                                                                                swift_bridgeObjectRelease();
                                                                                                goto LABEL_876;
                                                                                              }
                                                                                              sub_10009F534((uint64_t)(a1 + 714));
                                                                                            }
                                                                                            *((_OWORD *)a1 + 357) = *(_OWORD *)(a2 + 5712);
                                                                                            *(_OWORD *)((char *)a1 + 5721) = *(_OWORD *)(a2 + 5721);
                                                                                            goto LABEL_870;
                                                                                          }
                                                                                          sub_10009F534((uint64_t)(a1 + 710));
                                                                                        }
                                                                                        *((_OWORD *)a1 + 355) = *(_OWORD *)(a2 + 5680);
                                                                                        *(_OWORD *)((char *)a1 + 5689) = *(_OWORD *)(a2 + 5689);
                                                                                        goto LABEL_865;
                                                                                      }
                                                                                      sub_10009F534((uint64_t)(a1 + 706));
                                                                                    }
                                                                                    *((_OWORD *)a1 + 353) = *(_OWORD *)(a2 + 5648);
                                                                                    *(_OWORD *)((char *)a1 + 5657) = *(_OWORD *)(a2 + 5657);
                                                                                    goto LABEL_860;
                                                                                  }
                                                                                  sub_10009F534((uint64_t)(a1 + 702));
                                                                                }
                                                                                *((_OWORD *)a1 + 351) = *(_OWORD *)(a2 + 5616);
                                                                                *(_OWORD *)((char *)a1 + 5625) = *(_OWORD *)(a2 + 5625);
                                                                                goto LABEL_855;
                                                                              }
                                                                              sub_10009F534((uint64_t)(a1 + 698));
                                                                            }
                                                                            *((_OWORD *)a1 + 349) = *(_OWORD *)(a2 + 5584);
                                                                            *(_OWORD *)((char *)a1 + 5593) = *(_OWORD *)(a2 + 5593);
                                                                            goto LABEL_850;
                                                                          }
                                                                          sub_10009F534((uint64_t)(a1 + 694));
                                                                        }
                                                                        *((_OWORD *)a1 + 347) = *(_OWORD *)(a2 + 5552);
                                                                        *(_OWORD *)((char *)a1 + 5561) = *(_OWORD *)(a2 + 5561);
                                                                        goto LABEL_845;
                                                                      }
                                                                      sub_10009F534((uint64_t)(a1 + 690));
                                                                    }
                                                                    *((_OWORD *)a1 + 345) = *(_OWORD *)(a2 + 5520);
                                                                    *(_OWORD *)((char *)a1 + 5529) = *(_OWORD *)(a2 + 5529);
                                                                    goto LABEL_840;
                                                                  }
                                                                  sub_10009F534((uint64_t)(a1 + 686));
                                                                }
                                                                *((_OWORD *)a1 + 343) = *(_OWORD *)(a2 + 5488);
                                                                *(_OWORD *)((char *)a1 + 5497) = *(_OWORD *)(a2 + 5497);
                                                                goto LABEL_835;
                                                              }
                                                              sub_10009F534((uint64_t)(a1 + 682));
                                                            }
                                                            *((_OWORD *)a1 + 341) = *(_OWORD *)(a2 + 5456);
                                                            *(_OWORD *)((char *)a1 + 5465) = *(_OWORD *)(a2 + 5465);
                                                            goto LABEL_830;
                                                          }
                                                          sub_10009F534((uint64_t)(a1 + 678));
                                                        }
                                                        *((_OWORD *)a1 + 339) = *(_OWORD *)(a2 + 5424);
                                                        *(_OWORD *)((char *)a1 + 5433) = *(_OWORD *)(a2 + 5433);
                                                        goto LABEL_825;
                                                      }
                                                      sub_10009F534((uint64_t)(a1 + 674));
                                                    }
                                                    *((_OWORD *)a1 + 337) = *(_OWORD *)(a2 + 5392);
                                                    *(_OWORD *)((char *)a1 + 5401) = *(_OWORD *)(a2 + 5401);
                                                    goto LABEL_820;
                                                  }
                                                  sub_10009F534((uint64_t)(a1 + 670));
                                                }
                                                *((_OWORD *)a1 + 335) = *(_OWORD *)(a2 + 5360);
                                                *(_OWORD *)((char *)a1 + 5369) = *(_OWORD *)(a2 + 5369);
                                                goto LABEL_815;
                                              }
                                              sub_10009F534((uint64_t)(a1 + 666));
                                            }
                                            *((_OWORD *)a1 + 333) = *(_OWORD *)(a2 + 5328);
                                            *(_OWORD *)((char *)a1 + 5337) = *(_OWORD *)(a2 + 5337);
                                            goto LABEL_810;
                                          }
                                          sub_10009F534((uint64_t)(a1 + 662));
                                        }
                                        *((_OWORD *)a1 + 331) = *(_OWORD *)(a2 + 5296);
                                        *(_OWORD *)((char *)a1 + 5305) = *(_OWORD *)(a2 + 5305);
                                        goto LABEL_805;
                                      }
                                      sub_10009F534((uint64_t)(a1 + 658));
                                    }
                                    *((_OWORD *)a1 + 329) = *(_OWORD *)(a2 + 5264);
                                    *(_OWORD *)((char *)a1 + 5273) = *(_OWORD *)(a2 + 5273);
                                    goto LABEL_800;
                                  }
                                  sub_10009F534((uint64_t)(a1 + 654));
                                }
                                *((_OWORD *)a1 + 327) = *(_OWORD *)(a2 + 5232);
                                *(_OWORD *)((char *)a1 + 5241) = *(_OWORD *)(a2 + 5241);
                                goto LABEL_795;
                              }
                              sub_10009F534((uint64_t)(a1 + 650));
                            }
                            *((_OWORD *)a1 + 325) = *(_OWORD *)(a2 + 5200);
                            *(_OWORD *)((char *)a1 + 5209) = *(_OWORD *)(a2 + 5209);
                            goto LABEL_790;
                          }
                          sub_10009F534((uint64_t)(a1 + 646));
                        }
                        *((_OWORD *)a1 + 323) = *(_OWORD *)(a2 + 5168);
                        *(_OWORD *)((char *)a1 + 5177) = *(_OWORD *)(a2 + 5177);
                        goto LABEL_785;
                      }
                      sub_10009F534((uint64_t)(a1 + 642));
                    }
                    *((_OWORD *)a1 + 321) = *(_OWORD *)(a2 + 5136);
                    *(_OWORD *)((char *)a1 + 5145) = *(_OWORD *)(a2 + 5145);
                    goto LABEL_780;
                  }
                  sub_10009F534((uint64_t)(a1 + 638));
                }
                *((_OWORD *)a1 + 319) = *(_OWORD *)(a2 + 5104);
                *(_OWORD *)((char *)a1 + 5113) = *(_OWORD *)(a2 + 5113);
                goto LABEL_775;
              }
              sub_10009F534((uint64_t)(a1 + 634));
            }
            *((_OWORD *)a1 + 317) = *(_OWORD *)(a2 + 5072);
            *(_OWORD *)((char *)a1 + 5081) = *(_OWORD *)(a2 + 5081);
            goto LABEL_770;
          }
          sub_10009F534((uint64_t)(a1 + 630));
        }
        *((_OWORD *)a1 + 315) = *(_OWORD *)(a2 + 5040);
        *(_OWORD *)((char *)a1 + 5049) = *(_OWORD *)(a2 + 5049);
        goto LABEL_765;
      }
      sub_10009F534((uint64_t)(a1 + 626));
    }
    *(_OWORD *)uint64_t v157 = *(_OWORD *)v158;
    *(_OWORD *)((char *)a1 + 5017) = *(_OWORD *)(a2 + 5017);
    goto LABEL_760;
  }
LABEL_754:
  memcpy(a1 + 626, (const void *)(a2 + 5008), 0x340uLL);
LABEL_876:
  a1[730] = *(void *)(a2 + 5840);
  swift_bridgeObjectRelease();
  *((_DWORD *)a1 + 1462) = *(_DWORD *)(a2 + 5848);
  *((unsigned char *)a1 + 5852) = *(unsigned char *)(a2 + 5852);
  a1[732] = *(void *)(a2 + 5856);
  *((unsigned char *)a1 + 5864) = *(unsigned char *)(a2 + 5864);
  a1[734] = *(void *)(a2 + 5872);
  *((unsigned char *)a1 + 5880) = *(unsigned char *)(a2 + 5880);
  *((unsigned char *)a1 + 5896) = *(unsigned char *)(a2 + 5896);
  a1[736] = *(void *)(a2 + 5888);
  uint64_t v182 = *(void *)(a2 + 5904);
  *((unsigned char *)a1 + 5912) = *(unsigned char *)(a2 + 5912);
  a1[738] = v182;
  *((unsigned char *)a1 + 5920) = *(unsigned char *)(a2 + 5920);
  *((_DWORD *)a1 + 1479) = *(_DWORD *)(a2 + 5916);
  return a1;
}

uint64_t getEnumTagSinglePayload for IQModel(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 5921)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IQModel(uint64_t result, unsigned int a2, unsigned int a3)
{
  unint64_t v3 = (unsigned char *)(result + 5921);
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 5896) = 0u;
    *(unsigned char *)(result + 5920) = 0;
    *(_OWORD *)(result + 4344) = 0u;
    *(_OWORD *)(result + 4328) = 0u;
    *(_OWORD *)(result + 4312) = 0u;
    *(_OWORD *)(result + 4296) = 0u;
    *(_OWORD *)(result + 4280) = 0u;
    *(_OWORD *)(result + 4264) = 0u;
    *(_OWORD *)(result + 4248) = 0u;
    *(_OWORD *)(result + 4232) = 0u;
    *(_OWORD *)(result + 4216) = 0u;
    *(_OWORD *)(result + 4200) = 0u;
    *(_OWORD *)(result + 4184) = 0u;
    *(_OWORD *)(result + 4168) = 0u;
    *(_OWORD *)(result + 4152) = 0u;
    *(_OWORD *)(result + 4136) = 0u;
    *(_OWORD *)(result + 4120) = 0u;
    *(_OWORD *)(result + 4104) = 0u;
    *(_OWORD *)(result + 4088) = 0u;
    *(_OWORD *)(result + 4072) = 0u;
    *(_OWORD *)(result + 4056) = 0u;
    *(_OWORD *)(result + 4040) = 0u;
    *(_OWORD *)(result + 4024) = 0u;
    *(_OWORD *)(result + 4008) = 0u;
    *(_OWORD *)(result + 3992) = 0u;
    *(_OWORD *)(result + 3976) = 0u;
    *(_OWORD *)(result + 3960) = 0u;
    *(_OWORD *)(result + 3944) = 0u;
    *(_OWORD *)(result + 3928) = 0u;
    *(_OWORD *)(result + 3912) = 0u;
    *(_OWORD *)(result + 3896) = 0u;
    *(_OWORD *)(result + 3880) = 0u;
    *(_OWORD *)(result + 3864) = 0u;
    *(_OWORD *)(result + 3848) = 0u;
    *(_OWORD *)(result + 3832) = 0u;
    *(_OWORD *)(result + 3816) = 0u;
    *(_OWORD *)(result + 3800) = 0u;
    *(_OWORD *)(result + 3784) = 0u;
    *(_OWORD *)(result + 3768) = 0u;
    *(_OWORD *)(result + 3752) = 0u;
    *(_OWORD *)(result + 3736) = 0u;
    *(_OWORD *)(result + 3720) = 0u;
    *(_OWORD *)(result + 3704) = 0u;
    *(_OWORD *)(result + 3688) = 0u;
    *(_OWORD *)(result + 3672) = 0u;
    *(_OWORD *)(result + 3656) = 0u;
    *(_OWORD *)(result + 3640) = 0u;
    *(_OWORD *)(result + 3624) = 0u;
    *(_OWORD *)(result + 3608) = 0u;
    *(_OWORD *)(result + 3592) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 5880) = 0u;
    *(_OWORD *)(result + 5864) = 0u;
    *(_OWORD *)(result + 5848) = 0u;
    *(_OWORD *)(result + 5832) = 0u;
    *(_OWORD *)(result + 5816) = 0u;
    *(_OWORD *)(result + 5800) = 0u;
    *(_OWORD *)(result + 5784) = 0u;
    *(_OWORD *)(result + 5768) = 0u;
    *(_OWORD *)(result + 5752) = 0u;
    *(_OWORD *)(result + 5736) = 0u;
    *(_OWORD *)(result + 5720) = 0u;
    *(_OWORD *)(result + 5704) = 0u;
    *(_OWORD *)(result + 5688) = 0u;
    *(_OWORD *)(result + 5672) = 0u;
    *(_OWORD *)(result + 5656) = 0u;
    *(_OWORD *)(result + 5640) = 0u;
    *(_OWORD *)(result + 5624) = 0u;
    *(_OWORD *)(result + 5608) = 0u;
    *(_OWORD *)(result + 5592) = 0u;
    *(_OWORD *)(result + 5576) = 0u;
    *(_OWORD *)(result + 5560) = 0u;
    *(_OWORD *)(result + 5544) = 0u;
    *(_OWORD *)(result + 5528) = 0u;
    *(_OWORD *)(result + 5512) = 0u;
    *(_OWORD *)(result + 5496) = 0u;
    *(_OWORD *)(result + 5480) = 0u;
    *(_OWORD *)(result + 5464) = 0u;
    *(_OWORD *)(result + 5448) = 0u;
    *(_OWORD *)(result + 5432) = 0u;
    *(_OWORD *)(result + 5416) = 0u;
    *(_OWORD *)(result + 5400) = 0u;
    *(_OWORD *)(result + 5384) = 0u;
    *(_OWORD *)(result + 5368) = 0u;
    *(_OWORD *)(result + 5352) = 0u;
    *(_OWORD *)(result + 5336) = 0u;
    *(_OWORD *)(result + 5320) = 0u;
    *(_OWORD *)(result + 5304) = 0u;
    *(_OWORD *)(result + 5288) = 0u;
    *(_OWORD *)(result + 5272) = 0u;
    *(_OWORD *)(result + 5256) = 0u;
    *(_OWORD *)(result + 5240) = 0u;
    *(_OWORD *)(result + 5224) = 0u;
    *(_OWORD *)(result + 5208) = 0u;
    *(_OWORD *)(result + 5192) = 0u;
    *(_OWORD *)(result + 5176) = 0u;
    *(_OWORD *)(result + 5160) = 0u;
    *(_OWORD *)(result + 5144) = 0u;
    *(_OWORD *)(result + 5128) = 0u;
    *(_OWORD *)(result + 5112) = 0u;
    *(_OWORD *)(result + 5096) = 0u;
    *(_OWORD *)(result + 5080) = 0u;
    *(_OWORD *)(result + 5064) = 0u;
    *(_OWORD *)(result + 5048) = 0u;
    *(_OWORD *)(result + 5032) = 0u;
    *(_OWORD *)(result + 5016) = 0u;
    *(_OWORD *)(result + 5000) = 0u;
    *(_OWORD *)(result + 4984) = 0u;
    *(_OWORD *)(result + 4968) = 0u;
    *(_OWORD *)(result + 4952) = 0u;
    *(_OWORD *)(result + 4936) = 0u;
    *(_OWORD *)(result + 4920) = 0u;
    *(_OWORD *)(result + 4904) = 0u;
    *(_OWORD *)(result + 4888) = 0u;
    *(_OWORD *)(result + 4872) = 0u;
    *(_OWORD *)(result + 4856) = 0u;
    *(_OWORD *)(result + 4840) = 0u;
    *(_OWORD *)(result + 4824) = 0u;
    *(_OWORD *)(result + 4808) = 0u;
    *(_OWORD *)(result + 4792) = 0u;
    *(_OWORD *)(result + 4776) = 0u;
    *(_OWORD *)(result + 4760) = 0u;
    *(_OWORD *)(result + 4744) = 0u;
    *(_OWORD *)(result + 4728) = 0u;
    *(_OWORD *)(result + 4712) = 0u;
    *(_OWORD *)(result + 4696) = 0u;
    *(_OWORD *)(result + 4680) = 0u;
    *(_OWORD *)(result + 4664) = 0u;
    *(_OWORD *)(result + 4648) = 0u;
    *(_OWORD *)(result + 4632) = 0u;
    *(_OWORD *)(result + 4616) = 0u;
    *(_OWORD *)(result + 4600) = 0u;
    *(_OWORD *)(result + 4584) = 0u;
    *(_OWORD *)(result + 4568) = 0u;
    *(_OWORD *)(result + 4552) = 0u;
    *(_OWORD *)(result + 4536) = 0u;
    *(_OWORD *)(result + 4520) = 0u;
    *(_OWORD *)(result + 4504) = 0u;
    *(_OWORD *)(result + 4488) = 0u;
    *(_OWORD *)(result + 4472) = 0u;
    *(_OWORD *)(result + 4456) = 0u;
    *(_OWORD *)(result + 4440) = 0u;
    *(_OWORD *)(result + 4424) = 0u;
    *(_OWORD *)(result + 4408) = 0u;
    *(_OWORD *)(result + 4392) = 0u;
    *(_OWORD *)(result + 4376) = 0u;
    *(_OWORD *)(result + 4360) = 0u;
    *(void *)(result + 5912) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    if (a3 >= 0x7FFFFFFF) {
      *unint64_t v3 = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *unint64_t v3 = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IQModel()
{
  return &type metadata for IQModel;
}

uint64_t type metadata accessor for ServerEndPoint()
{
  return self;
}

uint64_t sub_1000A4044()
{
  return type metadata accessor for UserInputValidationURL(0);
}

uint64_t type metadata accessor for UserInputValidationURL(uint64_t a1)
{
  return sub_100048DF0(a1, qword_100721960);
}

uint64_t sub_1000A406C()
{
  uint64_t result = type metadata accessor for EncryptionParamsAlgorithmIdentifier();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for VerifiedClaimField()
{
  return self;
}

uint64_t destroy for UserInputField()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for UserInputField(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  uint64_t v8 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v8;
  uint64_t v9 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v9;
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  uint64_t v10 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UserInputField(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for UserInputField(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for UserInputField(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  uint64_t v9 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v9;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UserInputField(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 152)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UserInputField(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 152) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 152) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UserInputField()
{
  return &type metadata for UserInputField;
}

uint64_t destroy for Page()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Page(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  uint64_t v8 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Page(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for Page(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t assignWithTake for Page(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Page(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 112)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Page(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 112) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Page()
{
  return &type metadata for Page;
}

uint64_t sub_1000A4978()
{
  return type metadata accessor for LegacyWorkflow(0);
}

uint64_t type metadata accessor for LegacyWorkflow(uint64_t a1)
{
  return sub_100048DF0(a1, (uint64_t *)&unk_100721AF0);
}

void sub_1000A49A0()
{
  sub_1000BC864(319, (unint64_t *)&qword_100721B00, (void (*)(uint64_t))&type metadata accessor for HardwareAttestationType);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_1000A4AB0()
{
  return type metadata accessor for LegacyINOWorkflow(0);
}

uint64_t type metadata accessor for LegacyINOWorkflow(uint64_t a1)
{
  return sub_100048DF0(a1, qword_100721C50);
}

uint64_t sub_1000A4AD8()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1000A4B5C()
{
  return type metadata accessor for LegacySPWorkflow(0);
}

uint64_t type metadata accessor for LegacySPWorkflow(uint64_t a1)
{
  return sub_100048DF0(a1, (uint64_t *)&unk_100721E28);
}

void sub_1000A4B84()
{
  sub_1000BC864(319, (unint64_t *)&unk_100721E38, (void (*)(uint64_t))&type metadata accessor for RecipientEncryptionCertificate);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

__n128 initializeWithTake for AcceptedVerifiedClaim(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for Connectivity(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Connectivity(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Connectivity()
{
  return &type metadata for Connectivity;
}

uint64_t initializeWithCopy for DigitalPresentmentSessionManager.RequestedElement(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DigitalPresentmentSessionManager.RequestedElement(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for DigitalPresentmentSessionManager.RequestedElement(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for DigitalPresentmentSessionManager.RequestedElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for DigitalPresentmentSessionManager.RequestedElement(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DigitalPresentmentSessionManager.RequestedElement(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ShareableAttribute()
{
  return &type metadata for ShareableAttribute;
}

ValueMetadata *type metadata accessor for AcceptedVerifiedClaim()
{
  return &type metadata for AcceptedVerifiedClaim;
}

ValueMetadata *type metadata accessor for UserConsentType()
{
  return &type metadata for UserConsentType;
}

unsigned char *sub_1000A4F14(unsigned char *result, char a2)
{
  *__n128 result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for WorkflowType()
{
  return &type metadata for WorkflowType;
}

uint64_t destroy for IQRangeProperties()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for IQRangeProperties(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for IQRangeProperties(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  return a1;
}

__n128 initializeWithTake for IQRangeProperties(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for IQRangeProperties(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for IQRangeProperties(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 25)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IQRangeProperties(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IQRangeProperties()
{
  return &type metadata for IQRangeProperties;
}

ValueMetadata *type metadata accessor for NonceType()
{
  return &type metadata for NonceType;
}

uint64_t destroy for Label(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 56))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + 104))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Label(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v7)
  {
    long long v13 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v13;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    uint64_t v10 = *(void *)(a2 + 104);
    if (v10) {
      goto LABEL_3;
    }
LABEL_5:
    long long v14 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v14;
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    goto LABEL_6;
  }
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v10 = *(void *)(a2 + 104);
  if (!v10) {
    goto LABEL_5;
  }
LABEL_3:
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v10;
  uint64_t v11 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v11;
  uint64_t v12 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_6:
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Label(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (_OWORD *)(a1 + 48);
  uint64_t v5 = (_OWORD *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56))
  {
    if (v6)
    {
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1000A5554(a1 + 48);
      long long v8 = *(_OWORD *)(a2 + 64);
      long long v7 = *(_OWORD *)(a2 + 80);
      *uint64_t v4 = *v5;
      *(_OWORD *)(a1 + 64) = v8;
      *(_OWORD *)(a1 + 80) = v7;
    }
  }
  else if (v6)
  {
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v9 = *v5;
    long long v10 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v10;
    *uint64_t v4 = v9;
  }
  uint64_t v11 = (_OWORD *)(a1 + 96);
  uint64_t v12 = (_OWORD *)(a2 + 96);
  uint64_t v13 = *(void *)(a2 + 104);
  if (*(void *)(a1 + 104))
  {
    if (v13)
    {
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1000A5584(a1 + 96);
      long long v15 = *(_OWORD *)(a2 + 112);
      long long v14 = *(_OWORD *)(a2 + 128);
      *uint64_t v11 = *v12;
      *(_OWORD *)(a1 + 112) = v15;
      *(_OWORD *)(a1 + 128) = v14;
    }
  }
  else if (v13)
  {
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v16 = *v12;
    long long v17 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v17;
    *uint64_t v11 = v16;
  }
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000A5554(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000A5584(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for DigitalPresentmentEnvironment(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t assignWithTake for Label(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 56))
  {
    uint64_t v7 = *(void *)(a2 + 56);
    if (v7)
    {
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v7;
      swift_bridgeObjectRelease();
      uint64_t v8 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v8;
      swift_bridgeObjectRelease();
      uint64_t v9 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v9;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1000A5554(a1 + 48);
  }
  long long v10 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
LABEL_6:
  if (!*(void *)(a1 + 104))
  {
LABEL_10:
    long long v14 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v14;
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    goto LABEL_11;
  }
  uint64_t v11 = *(void *)(a2 + 104);
  if (!v11)
  {
    sub_1000A5584(a1 + 96);
    goto LABEL_10;
  }
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v13;
  swift_bridgeObjectRelease();
LABEL_11:
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Label(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 160)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Label(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 160) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 160) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Label()
{
  return &type metadata for Label;
}

__n128 initializeWithTake for LabelDetail(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for BusinessChatDetail()
{
  return &type metadata for BusinessChatDetail;
}

uint64_t _s8coreidvd11LabelDetailVwxx_0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s8coreidvd11LabelDetailVwcp_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *_s8coreidvd11LabelDetailVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *_s8coreidvd11LabelDetailVwta_0(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s8coreidvd11LabelDetailVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000A59E0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LabelDetail()
{
  return &type metadata for LabelDetail;
}

uint64_t getEnumTagSinglePayload for Page.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Page.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *__n128 result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A5B98);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Page.CodingKeys()
{
  return &type metadata for Page.CodingKeys;
}

uint64_t sub_1000A5BD4(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

__n128 initializeWithTake for DigitalPresentmentEntitlements(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for DataNodeProofInfo()
{
  return &type metadata for DataNodeProofInfo;
}

uint64_t destroy for CameraImage()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CameraImage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v6 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = v6;
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CameraImage(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v4;
  uint64_t v5 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = v5;
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  uint64_t v6 = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 96) = v6;
  uint64_t v7 = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 112) = v7;
  uint64_t v8 = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 128) = v8;
  return a1;
}

__n128 initializeWithTake for CameraImage(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for CameraImage(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  uint64_t v5 = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 112) = v5;
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  return a1;
}

uint64_t getEnumTagSinglePayload for CameraImage(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 137)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CameraImage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 136) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 137) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 137) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraImage()
{
  return &type metadata for CameraImage;
}

uint64_t destroy for DocumentConfig()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DocumentConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for DocumentConfig(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for DocumentConfig(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for DocumentConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DocumentConfig(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DocumentConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DocumentConfig()
{
  return &type metadata for DocumentConfig;
}

uint64_t getEnumTagSinglePayload for UserInputField.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF5) {
    goto LABEL_17;
  }
  if (a2 + 11 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 11) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 11;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v8 = v6 - 12;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for UserInputField.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *__n128 result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A6438);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 11;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UserInputField.CodingKeys()
{
  return &type metadata for UserInputField.CodingKeys;
}

uint64_t destroy for IQCriteria(void *a1)
{
  if (*a1 != 1) {
    swift_bridgeObjectRelease();
  }
  if (a1[4] != 1) {
    swift_bridgeObjectRelease();
  }
  if (a1[8] != 1) {
    swift_bridgeObjectRelease();
  }
  if (a1[12] != 1) {
    swift_bridgeObjectRelease();
  }
  if (a1[16] != 1) {
    swift_bridgeObjectRelease();
  }
  if (a1[20] != 1) {
    swift_bridgeObjectRelease();
  }
  if (a1[24] != 1) {
    swift_bridgeObjectRelease();
  }
  if (a1[28] != 1) {
    swift_bridgeObjectRelease();
  }
  if (a1[32] != 1) {
    swift_bridgeObjectRelease();
  }
  if (a1[36] != 1) {
    swift_bridgeObjectRelease();
  }
  if (a1[40] != 1) {
    swift_bridgeObjectRelease();
  }
  if (a1[44] != 1) {
    swift_bridgeObjectRelease();
  }
  if (a1[48] != 1) {
    swift_bridgeObjectRelease();
  }
  if (a1[52] != 1) {
    swift_bridgeObjectRelease();
  }
  if (a1[56] != 1) {
    swift_bridgeObjectRelease();
  }
  if (a1[60] != 1) {
    swift_bridgeObjectRelease();
  }
  if (a1[64] != 1) {
    swift_bridgeObjectRelease();
  }
  if (a1[68] != 1) {
    swift_bridgeObjectRelease();
  }
  if (a1[72] != 1) {
    swift_bridgeObjectRelease();
  }
  if (a1[76] != 1) {
    swift_bridgeObjectRelease();
  }
  if (a1[80] != 1) {
    swift_bridgeObjectRelease();
  }
  if (a1[84] != 1) {
    swift_bridgeObjectRelease();
  }
  if (a1[88] != 1) {
    swift_bridgeObjectRelease();
  }
  if (a1[92] != 1) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for IQCriteria(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2 == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    swift_bridgeObjectRetain();
  }
  uint64_t v4 = *(void *)(a2 + 32);
  if (v4 == 1)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  }
  else
  {
    *(void *)(a1 + 32) = v4;
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    swift_bridgeObjectRetain();
  }
  uint64_t v5 = *(void *)(a2 + 64);
  if (v5 == 1)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  }
  else
  {
    *(void *)(a1 + 64) = v5;
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
    swift_bridgeObjectRetain();
  }
  uint64_t v6 = *(void *)(a2 + 96);
  if (v6 == 1)
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 105) = *(_OWORD *)(a2 + 105);
  }
  else
  {
    *(void *)(a1 + 96) = v6;
    *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
    swift_bridgeObjectRetain();
  }
  uint64_t v7 = *(void *)(a2 + 128);
  if (v7 == 1)
  {
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
  }
  else
  {
    *(void *)(a1 + 128) = v7;
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
    swift_bridgeObjectRetain();
  }
  uint64_t v8 = *(void *)(a2 + 160);
  if (v8 == 1)
  {
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 169) = *(_OWORD *)(a2 + 169);
  }
  else
  {
    *(void *)(a1 + 160) = v8;
    *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
    swift_bridgeObjectRetain();
  }
  uint64_t v9 = *(void *)(a2 + 192);
  if (v9 == 1)
  {
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 201) = *(_OWORD *)(a2 + 201);
  }
  else
  {
    *(void *)(a1 + 192) = v9;
    *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
    swift_bridgeObjectRetain();
  }
  uint64_t v10 = *(void *)(a2 + 224);
  if (v10 == 1)
  {
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 233) = *(_OWORD *)(a2 + 233);
  }
  else
  {
    *(void *)(a1 + 224) = v10;
    *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
    swift_bridgeObjectRetain();
  }
  uint64_t v11 = *(void *)(a2 + 256);
  if (v11 == 1)
  {
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 265) = *(_OWORD *)(a2 + 265);
  }
  else
  {
    *(void *)(a1 + 256) = v11;
    *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
    swift_bridgeObjectRetain();
  }
  uint64_t v12 = *(void *)(a2 + 288);
  if (v12 == 1)
  {
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 297) = *(_OWORD *)(a2 + 297);
  }
  else
  {
    *(void *)(a1 + 288) = v12;
    *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
    *(void *)(a1 + 304) = *(void *)(a2 + 304);
    *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
    swift_bridgeObjectRetain();
  }
  uint64_t v13 = *(void *)(a2 + 320);
  if (v13 == 1)
  {
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 329) = *(_OWORD *)(a2 + 329);
  }
  else
  {
    *(void *)(a1 + 320) = v13;
    *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
    *(void *)(a1 + 336) = *(void *)(a2 + 336);
    *(unsigned char *)(a1 + 344) = *(unsigned char *)(a2 + 344);
    swift_bridgeObjectRetain();
  }
  uint64_t v14 = *(void *)(a2 + 352);
  if (v14 == 1)
  {
    *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 361) = *(_OWORD *)(a2 + 361);
  }
  else
  {
    *(void *)(a1 + 352) = v14;
    *(unsigned char *)(a1 + 360) = *(unsigned char *)(a2 + 360);
    *(void *)(a1 + 368) = *(void *)(a2 + 368);
    *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
    swift_bridgeObjectRetain();
  }
  uint64_t v15 = *(void *)(a2 + 384);
  if (v15 == 1)
  {
    *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
    *(_OWORD *)(a1 + 393) = *(_OWORD *)(a2 + 393);
  }
  else
  {
    *(void *)(a1 + 384) = v15;
    *(unsigned char *)(a1 + 392) = *(unsigned char *)(a2 + 392);
    *(void *)(a1 + 400) = *(void *)(a2 + 400);
    *(unsigned char *)(a1 + 408) = *(unsigned char *)(a2 + 408);
    swift_bridgeObjectRetain();
  }
  uint64_t v16 = *(void *)(a2 + 416);
  if (v16 == 1)
  {
    *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 425) = *(_OWORD *)(a2 + 425);
  }
  else
  {
    *(void *)(a1 + 416) = v16;
    *(unsigned char *)(a1 + 424) = *(unsigned char *)(a2 + 424);
    *(void *)(a1 + 432) = *(void *)(a2 + 432);
    *(unsigned char *)(a1 + 440) = *(unsigned char *)(a2 + 440);
    swift_bridgeObjectRetain();
  }
  uint64_t v17 = *(void *)(a2 + 448);
  if (v17 == 1)
  {
    *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 457) = *(_OWORD *)(a2 + 457);
  }
  else
  {
    *(void *)(a1 + 448) = v17;
    *(unsigned char *)(a1 + 456) = *(unsigned char *)(a2 + 456);
    *(void *)(a1 + 464) = *(void *)(a2 + 464);
    *(unsigned char *)(a1 + 472) = *(unsigned char *)(a2 + 472);
    swift_bridgeObjectRetain();
  }
  uint64_t v18 = *(void *)(a2 + 480);
  if (v18 == 1)
  {
    *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
    *(_OWORD *)(a1 + 489) = *(_OWORD *)(a2 + 489);
  }
  else
  {
    *(void *)(a1 + 480) = v18;
    *(unsigned char *)(a1 + 488) = *(unsigned char *)(a2 + 488);
    *(void *)(a1 + 496) = *(void *)(a2 + 496);
    *(unsigned char *)(a1 + 504) = *(unsigned char *)(a2 + 504);
    swift_bridgeObjectRetain();
  }
  uint64_t v19 = *(void *)(a2 + 512);
  if (v19 == 1)
  {
    *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
    *(_OWORD *)(a1 + 521) = *(_OWORD *)(a2 + 521);
  }
  else
  {
    *(void *)(a1 + 512) = v19;
    *(unsigned char *)(a1 + 520) = *(unsigned char *)(a2 + 520);
    *(void *)(a1 + 528) = *(void *)(a2 + 528);
    *(unsigned char *)(a1 + 536) = *(unsigned char *)(a2 + 536);
    swift_bridgeObjectRetain();
  }
  uint64_t v20 = *(void *)(a2 + 544);
  if (v20 == 1)
  {
    *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
    *(_OWORD *)(a1 + 553) = *(_OWORD *)(a2 + 553);
  }
  else
  {
    *(void *)(a1 + 544) = v20;
    *(unsigned char *)(a1 + 552) = *(unsigned char *)(a2 + 552);
    *(void *)(a1 + 560) = *(void *)(a2 + 560);
    *(unsigned char *)(a1 + 568) = *(unsigned char *)(a2 + 568);
    swift_bridgeObjectRetain();
  }
  uint64_t v21 = *(void *)(a2 + 576);
  if (v21 == 1)
  {
    *(_OWORD *)(a1 + 576) = *(_OWORD *)(a2 + 576);
    *(_OWORD *)(a1 + 585) = *(_OWORD *)(a2 + 585);
  }
  else
  {
    *(void *)(a1 + 576) = v21;
    *(unsigned char *)(a1 + 584) = *(unsigned char *)(a2 + 584);
    *(void *)(a1 + 592) = *(void *)(a2 + 592);
    *(unsigned char *)(a1 + 600) = *(unsigned char *)(a2 + 600);
    swift_bridgeObjectRetain();
  }
  uint64_t v22 = *(void *)(a2 + 608);
  if (v22 == 1)
  {
    *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 608);
    *(_OWORD *)(a1 + 617) = *(_OWORD *)(a2 + 617);
  }
  else
  {
    *(void *)(a1 + 608) = v22;
    *(unsigned char *)(a1 + 616) = *(unsigned char *)(a2 + 616);
    *(void *)(a1 + 624) = *(void *)(a2 + 624);
    *(unsigned char *)(a1 + 632) = *(unsigned char *)(a2 + 632);
    swift_bridgeObjectRetain();
  }
  uint64_t v23 = *(void *)(a2 + 640);
  if (v23 == 1)
  {
    *(_OWORD *)(a1 + 640) = *(_OWORD *)(a2 + 640);
    *(_OWORD *)(a1 + 649) = *(_OWORD *)(a2 + 649);
  }
  else
  {
    *(void *)(a1 + 640) = v23;
    *(unsigned char *)(a1 + 648) = *(unsigned char *)(a2 + 648);
    *(void *)(a1 + 656) = *(void *)(a2 + 656);
    *(unsigned char *)(a1 + 664) = *(unsigned char *)(a2 + 664);
    swift_bridgeObjectRetain();
  }
  uint64_t v24 = *(void *)(a2 + 672);
  if (v24 == 1)
  {
    *(_OWORD *)(a1 + 672) = *(_OWORD *)(a2 + 672);
    *(_OWORD *)(a1 + 681) = *(_OWORD *)(a2 + 681);
  }
  else
  {
    *(void *)(a1 + 672) = v24;
    *(unsigned char *)(a1 + 680) = *(unsigned char *)(a2 + 680);
    *(void *)(a1 + 688) = *(void *)(a2 + 688);
    *(unsigned char *)(a1 + 696) = *(unsigned char *)(a2 + 696);
    swift_bridgeObjectRetain();
  }
  uint64_t v25 = *(void *)(a2 + 704);
  if (v25 == 1)
  {
    *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 704);
    *(_OWORD *)(a1 + 713) = *(_OWORD *)(a2 + 713);
  }
  else
  {
    *(void *)(a1 + 704) = v25;
    *(unsigned char *)(a1 + 712) = *(unsigned char *)(a2 + 712);
    *(void *)(a1 + 720) = *(void *)(a2 + 720);
    *(unsigned char *)(a1 + 728) = *(unsigned char *)(a2 + 728);
    swift_bridgeObjectRetain();
  }
  uint64_t v26 = *(void *)(a2 + 736);
  if (v26 == 1)
  {
    *(_OWORD *)(a1 + 736) = *(_OWORD *)(a2 + 736);
    *(_OWORD *)(a1 + 745) = *(_OWORD *)(a2 + 745);
  }
  else
  {
    *(void *)(a1 + 736) = v26;
    *(unsigned char *)(a1 + 744) = *(unsigned char *)(a2 + 744);
    *(void *)(a1 + 752) = *(void *)(a2 + 752);
    *(unsigned char *)(a1 + 760) = *(unsigned char *)(a2 + 760);
    swift_bridgeObjectRetain();
  }
  *(_OWORD *)(a1 + 768) = *(_OWORD *)(a2 + 768);
  *(unsigned char *)(a1 + 784) = *(unsigned char *)(a2 + 784);
  *(unsigned char *)(a1 + 808) = *(unsigned char *)(a2 + 808);
  *(_OWORD *)(a1 + 792) = *(_OWORD *)(a2 + 792);
  *(_DWORD *)(a1 + 809) = *(_DWORD *)(a2 + 809);
  *(_WORD *)(a1 + 813) = *(_WORD *)(a2 + 813);
  *(unsigned char *)(a1 + 815) = *(unsigned char *)(a2 + 815);
  *(void *)(a1 + 816) = *(void *)(a2 + 816);
  *(void *)(a1 + 824) = *(void *)(a2 + 824);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for IQCriteria(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *a2;
  if (v4 == 1)
  {
    if (v5 == 1)
    {
      long long v6 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 9) = *(_OWORD *)((char *)a2 + 9);
      *(_OWORD *)a1 = v6;
    }
    else
    {
      *(void *)a1 = v5;
      *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
      uint64_t v8 = a2[2];
      *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
      *(void *)(a1 + 16) = v8;
      swift_bridgeObjectRetain();
    }
  }
  else if (v5 == 1)
  {
    sub_10009F534(a1);
    long long v7 = *(_OWORD *)((char *)a2 + 9);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = v7;
  }
  else
  {
    *(void *)a1 = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v9 = a2[2];
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    *(void *)(a1 + 16) = v9;
  }
  uint64_t v10 = (long long *)(a1 + 32);
  uint64_t v12 = (long long *)(a2 + 4);
  uint64_t v11 = a2[4];
  if (*(void *)(a1 + 32) == 1)
  {
    if (v11 == 1)
    {
      long long v13 = *v12;
      *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)a2 + 41);
      long long *v10 = v13;
    }
    else
    {
      *(void *)(a1 + 32) = v11;
      *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
      uint64_t v15 = a2[6];
      *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
      *(void *)(a1 + 48) = v15;
      swift_bridgeObjectRetain();
    }
  }
  else if (v11 == 1)
  {
    sub_10009F534(a1 + 32);
    long long v14 = *(_OWORD *)((char *)a2 + 41);
    long long *v10 = *v12;
    *(_OWORD *)(a1 + 41) = v14;
  }
  else
  {
    *(void *)(a1 + 32) = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
    uint64_t v16 = a2[6];
    *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
    *(void *)(a1 + 48) = v16;
  }
  uint64_t v17 = (long long *)(a1 + 64);
  uint64_t v19 = (long long *)(a2 + 8);
  uint64_t v18 = a2[8];
  if (*(void *)(a1 + 64) == 1)
  {
    if (v18 == 1)
    {
      long long v20 = *v19;
      *(_OWORD *)(a1 + 73) = *(_OWORD *)((char *)a2 + 73);
      long long *v17 = v20;
    }
    else
    {
      *(void *)(a1 + 64) = v18;
      *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
      uint64_t v22 = a2[10];
      *(unsigned char *)(a1 + 88) = *((unsigned char *)a2 + 88);
      *(void *)(a1 + 80) = v22;
      swift_bridgeObjectRetain();
    }
  }
  else if (v18 == 1)
  {
    sub_10009F534(a1 + 64);
    long long v21 = *(_OWORD *)((char *)a2 + 73);
    long long *v17 = *v19;
    *(_OWORD *)(a1 + 73) = v21;
  }
  else
  {
    *(void *)(a1 + 64) = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
    uint64_t v23 = a2[10];
    *(unsigned char *)(a1 + 88) = *((unsigned char *)a2 + 88);
    *(void *)(a1 + 80) = v23;
  }
  uint64_t v24 = (long long *)(a1 + 96);
  uint64_t v26 = (long long *)(a2 + 12);
  uint64_t v25 = a2[12];
  if (*(void *)(a1 + 96) == 1)
  {
    if (v25 == 1)
    {
      long long v27 = *v26;
      *(_OWORD *)(a1 + 105) = *(_OWORD *)((char *)a2 + 105);
      *uint64_t v24 = v27;
    }
    else
    {
      *(void *)(a1 + 96) = v25;
      *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
      uint64_t v29 = a2[14];
      *(unsigned char *)(a1 + 120) = *((unsigned char *)a2 + 120);
      *(void *)(a1 + 112) = v29;
      swift_bridgeObjectRetain();
    }
  }
  else if (v25 == 1)
  {
    sub_10009F534(a1 + 96);
    long long v28 = *(_OWORD *)((char *)a2 + 105);
    *uint64_t v24 = *v26;
    *(_OWORD *)(a1 + 105) = v28;
  }
  else
  {
    *(void *)(a1 + 96) = v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
    uint64_t v30 = a2[14];
    *(unsigned char *)(a1 + 120) = *((unsigned char *)a2 + 120);
    *(void *)(a1 + 112) = v30;
  }
  uint64_t v31 = (long long *)(a1 + 128);
  uint64_t v33 = (long long *)(a2 + 16);
  uint64_t v32 = a2[16];
  if (*(void *)(a1 + 128) == 1)
  {
    if (v32 == 1)
    {
      long long v34 = *v33;
      *(_OWORD *)(a1 + 137) = *(_OWORD *)((char *)a2 + 137);
      *uint64_t v31 = v34;
    }
    else
    {
      *(void *)(a1 + 128) = v32;
      *(unsigned char *)(a1 + 136) = *((unsigned char *)a2 + 136);
      uint64_t v36 = a2[18];
      *(unsigned char *)(a1 + 152) = *((unsigned char *)a2 + 152);
      *(void *)(a1 + 144) = v36;
      swift_bridgeObjectRetain();
    }
  }
  else if (v32 == 1)
  {
    sub_10009F534(a1 + 128);
    long long v35 = *(_OWORD *)((char *)a2 + 137);
    *uint64_t v31 = *v33;
    *(_OWORD *)(a1 + 137) = v35;
  }
  else
  {
    *(void *)(a1 + 128) = v32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 136) = *((unsigned char *)a2 + 136);
    uint64_t v37 = a2[18];
    *(unsigned char *)(a1 + 152) = *((unsigned char *)a2 + 152);
    *(void *)(a1 + 144) = v37;
  }
  uint64_t v38 = (long long *)(a1 + 160);
  uint64_t v40 = (long long *)(a2 + 20);
  uint64_t v39 = a2[20];
  if (*(void *)(a1 + 160) == 1)
  {
    if (v39 == 1)
    {
      long long v41 = *v40;
      *(_OWORD *)(a1 + 169) = *(_OWORD *)((char *)a2 + 169);
      *uint64_t v38 = v41;
    }
    else
    {
      *(void *)(a1 + 160) = v39;
      *(unsigned char *)(a1 + 168) = *((unsigned char *)a2 + 168);
      uint64_t v43 = a2[22];
      *(unsigned char *)(a1 + 184) = *((unsigned char *)a2 + 184);
      *(void *)(a1 + 176) = v43;
      swift_bridgeObjectRetain();
    }
  }
  else if (v39 == 1)
  {
    sub_10009F534(a1 + 160);
    long long v42 = *(_OWORD *)((char *)a2 + 169);
    *uint64_t v38 = *v40;
    *(_OWORD *)(a1 + 169) = v42;
  }
  else
  {
    *(void *)(a1 + 160) = v39;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 168) = *((unsigned char *)a2 + 168);
    uint64_t v44 = a2[22];
    *(unsigned char *)(a1 + 184) = *((unsigned char *)a2 + 184);
    *(void *)(a1 + 176) = v44;
  }
  uint64_t v45 = (long long *)(a1 + 192);
  uint64_t v47 = (long long *)(a2 + 24);
  uint64_t v46 = a2[24];
  if (*(void *)(a1 + 192) == 1)
  {
    if (v46 == 1)
    {
      long long v48 = *v47;
      *(_OWORD *)(a1 + 201) = *(_OWORD *)((char *)a2 + 201);
      *uint64_t v45 = v48;
    }
    else
    {
      *(void *)(a1 + 192) = v46;
      *(unsigned char *)(a1 + 200) = *((unsigned char *)a2 + 200);
      uint64_t v50 = a2[26];
      *(unsigned char *)(a1 + 216) = *((unsigned char *)a2 + 216);
      *(void *)(a1 + 208) = v50;
      swift_bridgeObjectRetain();
    }
  }
  else if (v46 == 1)
  {
    sub_10009F534(a1 + 192);
    long long v49 = *(_OWORD *)((char *)a2 + 201);
    *uint64_t v45 = *v47;
    *(_OWORD *)(a1 + 201) = v49;
  }
  else
  {
    *(void *)(a1 + 192) = v46;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 200) = *((unsigned char *)a2 + 200);
    uint64_t v51 = a2[26];
    *(unsigned char *)(a1 + 216) = *((unsigned char *)a2 + 216);
    *(void *)(a1 + 208) = v51;
  }
  uint64_t v52 = (long long *)(a1 + 224);
  uint64_t v54 = (long long *)(a2 + 28);
  uint64_t v53 = a2[28];
  if (*(void *)(a1 + 224) == 1)
  {
    if (v53 == 1)
    {
      long long v55 = *v54;
      *(_OWORD *)(a1 + 233) = *(_OWORD *)((char *)a2 + 233);
      *uint64_t v52 = v55;
    }
    else
    {
      *(void *)(a1 + 224) = v53;
      *(unsigned char *)(a1 + 232) = *((unsigned char *)a2 + 232);
      uint64_t v57 = a2[30];
      *(unsigned char *)(a1 + 248) = *((unsigned char *)a2 + 248);
      *(void *)(a1 + 240) = v57;
      swift_bridgeObjectRetain();
    }
  }
  else if (v53 == 1)
  {
    sub_10009F534(a1 + 224);
    long long v56 = *(_OWORD *)((char *)a2 + 233);
    *uint64_t v52 = *v54;
    *(_OWORD *)(a1 + 233) = v56;
  }
  else
  {
    *(void *)(a1 + 224) = v53;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 232) = *((unsigned char *)a2 + 232);
    uint64_t v58 = a2[30];
    *(unsigned char *)(a1 + 248) = *((unsigned char *)a2 + 248);
    *(void *)(a1 + 240) = v58;
  }
  uint64_t v59 = (long long *)(a1 + 256);
  uint64_t v60 = (long long *)(a2 + 32);
  uint64_t v61 = a2[32];
  if (*(void *)(a1 + 256) == 1)
  {
    if (v61 == 1)
    {
      long long v62 = *v60;
      *(_OWORD *)(a1 + 265) = *(_OWORD *)((char *)a2 + 265);
      *uint64_t v59 = v62;
    }
    else
    {
      *(void *)(a1 + 256) = v61;
      *(unsigned char *)(a1 + 264) = *((unsigned char *)a2 + 264);
      uint64_t v64 = a2[34];
      *(unsigned char *)(a1 + 280) = *((unsigned char *)a2 + 280);
      *(void *)(a1 + 272) = v64;
      swift_bridgeObjectRetain();
    }
  }
  else if (v61 == 1)
  {
    sub_10009F534(a1 + 256);
    long long v63 = *(_OWORD *)((char *)a2 + 265);
    *uint64_t v59 = *v60;
    *(_OWORD *)(a1 + 265) = v63;
  }
  else
  {
    *(void *)(a1 + 256) = v61;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 264) = *((unsigned char *)a2 + 264);
    uint64_t v65 = a2[34];
    *(unsigned char *)(a1 + 280) = *((unsigned char *)a2 + 280);
    *(void *)(a1 + 272) = v65;
  }
  uint64_t v66 = (long long *)(a1 + 288);
  uint64_t v67 = (long long *)(a2 + 36);
  uint64_t v68 = a2[36];
  if (*(void *)(a1 + 288) == 1)
  {
    if (v68 == 1)
    {
      long long v69 = *v67;
      *(_OWORD *)(a1 + 297) = *(_OWORD *)((char *)a2 + 297);
      *uint64_t v66 = v69;
    }
    else
    {
      *(void *)(a1 + 288) = v68;
      *(unsigned char *)(a1 + 296) = *((unsigned char *)a2 + 296);
      uint64_t v71 = a2[38];
      *(unsigned char *)(a1 + 312) = *((unsigned char *)a2 + 312);
      *(void *)(a1 + 304) = v71;
      swift_bridgeObjectRetain();
    }
  }
  else if (v68 == 1)
  {
    sub_10009F534(a1 + 288);
    long long v70 = *(_OWORD *)((char *)a2 + 297);
    *uint64_t v66 = *v67;
    *(_OWORD *)(a1 + 297) = v70;
  }
  else
  {
    *(void *)(a1 + 288) = v68;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 296) = *((unsigned char *)a2 + 296);
    uint64_t v72 = a2[38];
    *(unsigned char *)(a1 + 312) = *((unsigned char *)a2 + 312);
    *(void *)(a1 + 304) = v72;
  }
  uint64_t v73 = (long long *)(a1 + 320);
  uint64_t v74 = (long long *)(a2 + 40);
  uint64_t v75 = a2[40];
  if (*(void *)(a1 + 320) == 1)
  {
    if (v75 == 1)
    {
      long long v76 = *v74;
      *(_OWORD *)(a1 + 329) = *(_OWORD *)((char *)a2 + 329);
      *uint64_t v73 = v76;
    }
    else
    {
      *(void *)(a1 + 320) = v75;
      *(unsigned char *)(a1 + 328) = *((unsigned char *)a2 + 328);
      uint64_t v78 = a2[42];
      *(unsigned char *)(a1 + 344) = *((unsigned char *)a2 + 344);
      *(void *)(a1 + 336) = v78;
      swift_bridgeObjectRetain();
    }
  }
  else if (v75 == 1)
  {
    sub_10009F534(a1 + 320);
    long long v77 = *(_OWORD *)((char *)a2 + 329);
    *uint64_t v73 = *v74;
    *(_OWORD *)(a1 + 329) = v77;
  }
  else
  {
    *(void *)(a1 + 320) = v75;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 328) = *((unsigned char *)a2 + 328);
    uint64_t v79 = a2[42];
    *(unsigned char *)(a1 + 344) = *((unsigned char *)a2 + 344);
    *(void *)(a1 + 336) = v79;
  }
  uint64_t v80 = (long long *)(a1 + 352);
  uint64_t v81 = (long long *)(a2 + 44);
  uint64_t v82 = a2[44];
  if (*(void *)(a1 + 352) == 1)
  {
    if (v82 == 1)
    {
      long long v83 = *v81;
      *(_OWORD *)(a1 + 361) = *(_OWORD *)((char *)a2 + 361);
      *uint64_t v80 = v83;
    }
    else
    {
      *(void *)(a1 + 352) = v82;
      *(unsigned char *)(a1 + 360) = *((unsigned char *)a2 + 360);
      uint64_t v85 = a2[46];
      *(unsigned char *)(a1 + 376) = *((unsigned char *)a2 + 376);
      *(void *)(a1 + 368) = v85;
      swift_bridgeObjectRetain();
    }
  }
  else if (v82 == 1)
  {
    sub_10009F534(a1 + 352);
    long long v84 = *(_OWORD *)((char *)a2 + 361);
    *uint64_t v80 = *v81;
    *(_OWORD *)(a1 + 361) = v84;
  }
  else
  {
    *(void *)(a1 + 352) = v82;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 360) = *((unsigned char *)a2 + 360);
    uint64_t v86 = a2[46];
    *(unsigned char *)(a1 + 376) = *((unsigned char *)a2 + 376);
    *(void *)(a1 + 368) = v86;
  }
  uint64_t v87 = (long long *)(a1 + 384);
  uint64_t v88 = (long long *)(a2 + 48);
  uint64_t v89 = a2[48];
  if (*(void *)(a1 + 384) == 1)
  {
    if (v89 == 1)
    {
      long long v90 = *v88;
      *(_OWORD *)(a1 + 393) = *(_OWORD *)((char *)a2 + 393);
      *uint64_t v87 = v90;
    }
    else
    {
      *(void *)(a1 + 384) = v89;
      *(unsigned char *)(a1 + 392) = *((unsigned char *)a2 + 392);
      uint64_t v92 = a2[50];
      *(unsigned char *)(a1 + 408) = *((unsigned char *)a2 + 408);
      *(void *)(a1 + 400) = v92;
      swift_bridgeObjectRetain();
    }
  }
  else if (v89 == 1)
  {
    sub_10009F534(a1 + 384);
    long long v91 = *(_OWORD *)((char *)a2 + 393);
    *uint64_t v87 = *v88;
    *(_OWORD *)(a1 + 393) = v91;
  }
  else
  {
    *(void *)(a1 + 384) = v89;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 392) = *((unsigned char *)a2 + 392);
    uint64_t v93 = a2[50];
    *(unsigned char *)(a1 + 408) = *((unsigned char *)a2 + 408);
    *(void *)(a1 + 400) = v93;
  }
  uint64_t v94 = (long long *)(a1 + 416);
  uint64_t v95 = (long long *)(a2 + 52);
  uint64_t v96 = a2[52];
  if (*(void *)(a1 + 416) == 1)
  {
    if (v96 == 1)
    {
      long long v97 = *v95;
      *(_OWORD *)(a1 + 425) = *(_OWORD *)((char *)a2 + 425);
      *uint64_t v94 = v97;
    }
    else
    {
      *(void *)(a1 + 416) = v96;
      *(unsigned char *)(a1 + 424) = *((unsigned char *)a2 + 424);
      uint64_t v99 = a2[54];
      *(unsigned char *)(a1 + 440) = *((unsigned char *)a2 + 440);
      *(void *)(a1 + 432) = v99;
      swift_bridgeObjectRetain();
    }
  }
  else if (v96 == 1)
  {
    sub_10009F534(a1 + 416);
    long long v98 = *(_OWORD *)((char *)a2 + 425);
    *uint64_t v94 = *v95;
    *(_OWORD *)(a1 + 425) = v98;
  }
  else
  {
    *(void *)(a1 + 416) = v96;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 424) = *((unsigned char *)a2 + 424);
    uint64_t v100 = a2[54];
    *(unsigned char *)(a1 + 440) = *((unsigned char *)a2 + 440);
    *(void *)(a1 + 432) = v100;
  }
  uint64_t v101 = (long long *)(a1 + 448);
  uint64_t v102 = (long long *)(a2 + 56);
  uint64_t v103 = a2[56];
  if (*(void *)(a1 + 448) == 1)
  {
    if (v103 == 1)
    {
      long long v104 = *v102;
      *(_OWORD *)(a1 + 457) = *(_OWORD *)((char *)a2 + 457);
      *uint64_t v101 = v104;
    }
    else
    {
      *(void *)(a1 + 448) = v103;
      *(unsigned char *)(a1 + 456) = *((unsigned char *)a2 + 456);
      uint64_t v106 = a2[58];
      *(unsigned char *)(a1 + 472) = *((unsigned char *)a2 + 472);
      *(void *)(a1 + 464) = v106;
      swift_bridgeObjectRetain();
    }
  }
  else if (v103 == 1)
  {
    sub_10009F534(a1 + 448);
    long long v105 = *(_OWORD *)((char *)a2 + 457);
    *uint64_t v101 = *v102;
    *(_OWORD *)(a1 + 457) = v105;
  }
  else
  {
    *(void *)(a1 + 448) = v103;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 456) = *((unsigned char *)a2 + 456);
    uint64_t v107 = a2[58];
    *(unsigned char *)(a1 + 472) = *((unsigned char *)a2 + 472);
    *(void *)(a1 + 464) = v107;
  }
  uint64_t v108 = (long long *)(a1 + 480);
  uint64_t v109 = (long long *)(a2 + 60);
  uint64_t v110 = a2[60];
  if (*(void *)(a1 + 480) == 1)
  {
    if (v110 == 1)
    {
      long long v111 = *v109;
      *(_OWORD *)(a1 + 489) = *(_OWORD *)((char *)a2 + 489);
      *uint64_t v108 = v111;
    }
    else
    {
      *(void *)(a1 + 480) = v110;
      *(unsigned char *)(a1 + 488) = *((unsigned char *)a2 + 488);
      uint64_t v113 = a2[62];
      *(unsigned char *)(a1 + 504) = *((unsigned char *)a2 + 504);
      *(void *)(a1 + 496) = v113;
      swift_bridgeObjectRetain();
    }
  }
  else if (v110 == 1)
  {
    sub_10009F534(a1 + 480);
    long long v112 = *(_OWORD *)((char *)a2 + 489);
    *uint64_t v108 = *v109;
    *(_OWORD *)(a1 + 489) = v112;
  }
  else
  {
    *(void *)(a1 + 480) = v110;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 488) = *((unsigned char *)a2 + 488);
    uint64_t v114 = a2[62];
    *(unsigned char *)(a1 + 504) = *((unsigned char *)a2 + 504);
    *(void *)(a1 + 496) = v114;
  }
  uint64_t v115 = (long long *)(a1 + 512);
  uint64_t v116 = (long long *)(a2 + 64);
  uint64_t v117 = a2[64];
  if (*(void *)(a1 + 512) == 1)
  {
    if (v117 == 1)
    {
      long long v118 = *v116;
      *(_OWORD *)(a1 + 521) = *(_OWORD *)((char *)a2 + 521);
      *uint64_t v115 = v118;
    }
    else
    {
      *(void *)(a1 + 512) = v117;
      *(unsigned char *)(a1 + 520) = *((unsigned char *)a2 + 520);
      uint64_t v120 = a2[66];
      *(unsigned char *)(a1 + 536) = *((unsigned char *)a2 + 536);
      *(void *)(a1 + 528) = v120;
      swift_bridgeObjectRetain();
    }
  }
  else if (v117 == 1)
  {
    sub_10009F534(a1 + 512);
    long long v119 = *(_OWORD *)((char *)a2 + 521);
    *uint64_t v115 = *v116;
    *(_OWORD *)(a1 + 521) = v119;
  }
  else
  {
    *(void *)(a1 + 512) = v117;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 520) = *((unsigned char *)a2 + 520);
    uint64_t v121 = a2[66];
    *(unsigned char *)(a1 + 536) = *((unsigned char *)a2 + 536);
    *(void *)(a1 + 528) = v121;
  }
  uint64_t v122 = (long long *)(a1 + 544);
  uint64_t v123 = (long long *)(a2 + 68);
  uint64_t v124 = a2[68];
  if (*(void *)(a1 + 544) == 1)
  {
    if (v124 == 1)
    {
      long long v125 = *v123;
      *(_OWORD *)(a1 + 553) = *(_OWORD *)((char *)a2 + 553);
      *uint64_t v122 = v125;
    }
    else
    {
      *(void *)(a1 + 544) = v124;
      *(unsigned char *)(a1 + 552) = *((unsigned char *)a2 + 552);
      uint64_t v127 = a2[70];
      *(unsigned char *)(a1 + 568) = *((unsigned char *)a2 + 568);
      *(void *)(a1 + 560) = v127;
      swift_bridgeObjectRetain();
    }
  }
  else if (v124 == 1)
  {
    sub_10009F534(a1 + 544);
    long long v126 = *(_OWORD *)((char *)a2 + 553);
    *uint64_t v122 = *v123;
    *(_OWORD *)(a1 + 553) = v126;
  }
  else
  {
    *(void *)(a1 + 544) = v124;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 552) = *((unsigned char *)a2 + 552);
    uint64_t v128 = a2[70];
    *(unsigned char *)(a1 + 568) = *((unsigned char *)a2 + 568);
    *(void *)(a1 + 560) = v128;
  }
  uint64_t v129 = (long long *)(a1 + 576);
  uint64_t v130 = (long long *)(a2 + 72);
  uint64_t v131 = a2[72];
  if (*(void *)(a1 + 576) == 1)
  {
    if (v131 == 1)
    {
      long long v132 = *v130;
      *(_OWORD *)(a1 + 585) = *(_OWORD *)((char *)a2 + 585);
      *uint64_t v129 = v132;
    }
    else
    {
      *(void *)(a1 + 576) = v131;
      *(unsigned char *)(a1 + 584) = *((unsigned char *)a2 + 584);
      uint64_t v134 = a2[74];
      *(unsigned char *)(a1 + 600) = *((unsigned char *)a2 + 600);
      *(void *)(a1 + 592) = v134;
      swift_bridgeObjectRetain();
    }
  }
  else if (v131 == 1)
  {
    sub_10009F534(a1 + 576);
    long long v133 = *(_OWORD *)((char *)a2 + 585);
    *uint64_t v129 = *v130;
    *(_OWORD *)(a1 + 585) = v133;
  }
  else
  {
    *(void *)(a1 + 576) = v131;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 584) = *((unsigned char *)a2 + 584);
    uint64_t v135 = a2[74];
    *(unsigned char *)(a1 + 600) = *((unsigned char *)a2 + 600);
    *(void *)(a1 + 592) = v135;
  }
  uint64_t v136 = (long long *)(a1 + 608);
  uint64_t v137 = (long long *)(a2 + 76);
  uint64_t v138 = a2[76];
  if (*(void *)(a1 + 608) == 1)
  {
    if (v138 == 1)
    {
      long long v139 = *v137;
      *(_OWORD *)(a1 + 617) = *(_OWORD *)((char *)a2 + 617);
      *uint64_t v136 = v139;
    }
    else
    {
      *(void *)(a1 + 608) = v138;
      *(unsigned char *)(a1 + 616) = *((unsigned char *)a2 + 616);
      uint64_t v141 = a2[78];
      *(unsigned char *)(a1 + 632) = *((unsigned char *)a2 + 632);
      *(void *)(a1 + 624) = v141;
      swift_bridgeObjectRetain();
    }
  }
  else if (v138 == 1)
  {
    sub_10009F534(a1 + 608);
    long long v140 = *(_OWORD *)((char *)a2 + 617);
    *uint64_t v136 = *v137;
    *(_OWORD *)(a1 + 617) = v140;
  }
  else
  {
    *(void *)(a1 + 608) = v138;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 616) = *((unsigned char *)a2 + 616);
    uint64_t v142 = a2[78];
    *(unsigned char *)(a1 + 632) = *((unsigned char *)a2 + 632);
    *(void *)(a1 + 624) = v142;
  }
  uint64_t v143 = (long long *)(a1 + 640);
  uint64_t v144 = (long long *)(a2 + 80);
  uint64_t v145 = a2[80];
  if (*(void *)(a1 + 640) == 1)
  {
    if (v145 == 1)
    {
      long long v146 = *v144;
      *(_OWORD *)(a1 + 649) = *(_OWORD *)((char *)a2 + 649);
      *uint64_t v143 = v146;
    }
    else
    {
      *(void *)(a1 + 640) = v145;
      *(unsigned char *)(a1 + 648) = *((unsigned char *)a2 + 648);
      uint64_t v148 = a2[82];
      *(unsigned char *)(a1 + 664) = *((unsigned char *)a2 + 664);
      *(void *)(a1 + 656) = v148;
      swift_bridgeObjectRetain();
    }
  }
  else if (v145 == 1)
  {
    sub_10009F534(a1 + 640);
    long long v147 = *(_OWORD *)((char *)a2 + 649);
    *uint64_t v143 = *v144;
    *(_OWORD *)(a1 + 649) = v147;
  }
  else
  {
    *(void *)(a1 + 640) = v145;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 648) = *((unsigned char *)a2 + 648);
    uint64_t v149 = a2[82];
    *(unsigned char *)(a1 + 664) = *((unsigned char *)a2 + 664);
    *(void *)(a1 + 656) = v149;
  }
  uint64_t v150 = (long long *)(a1 + 672);
  uint64_t v151 = (long long *)(a2 + 84);
  uint64_t v152 = a2[84];
  if (*(void *)(a1 + 672) == 1)
  {
    if (v152 == 1)
    {
      long long v153 = *v151;
      *(_OWORD *)(a1 + 681) = *(_OWORD *)((char *)a2 + 681);
      *uint64_t v150 = v153;
    }
    else
    {
      *(void *)(a1 + 672) = v152;
      *(unsigned char *)(a1 + 680) = *((unsigned char *)a2 + 680);
      uint64_t v155 = a2[86];
      *(unsigned char *)(a1 + 696) = *((unsigned char *)a2 + 696);
      *(void *)(a1 + 688) = v155;
      swift_bridgeObjectRetain();
    }
  }
  else if (v152 == 1)
  {
    sub_10009F534(a1 + 672);
    long long v154 = *(_OWORD *)((char *)a2 + 681);
    *uint64_t v150 = *v151;
    *(_OWORD *)(a1 + 681) = v154;
  }
  else
  {
    *(void *)(a1 + 672) = v152;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 680) = *((unsigned char *)a2 + 680);
    uint64_t v156 = a2[86];
    *(unsigned char *)(a1 + 696) = *((unsigned char *)a2 + 696);
    *(void *)(a1 + 688) = v156;
  }
  uint64_t v157 = (long long *)(a1 + 704);
  uint64_t v158 = (long long *)(a2 + 88);
  uint64_t v159 = a2[88];
  if (*(void *)(a1 + 704) == 1)
  {
    if (v159 == 1)
    {
      long long v160 = *v158;
      *(_OWORD *)(a1 + 713) = *(_OWORD *)((char *)a2 + 713);
      *uint64_t v157 = v160;
    }
    else
    {
      *(void *)(a1 + 704) = v159;
      *(unsigned char *)(a1 + 712) = *((unsigned char *)a2 + 712);
      uint64_t v162 = a2[90];
      *(unsigned char *)(a1 + 728) = *((unsigned char *)a2 + 728);
      *(void *)(a1 + 720) = v162;
      swift_bridgeObjectRetain();
    }
  }
  else if (v159 == 1)
  {
    sub_10009F534(a1 + 704);
    long long v161 = *(_OWORD *)((char *)a2 + 713);
    *uint64_t v157 = *v158;
    *(_OWORD *)(a1 + 713) = v161;
  }
  else
  {
    *(void *)(a1 + 704) = v159;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 712) = *((unsigned char *)a2 + 712);
    uint64_t v163 = a2[90];
    *(unsigned char *)(a1 + 728) = *((unsigned char *)a2 + 728);
    *(void *)(a1 + 720) = v163;
  }
  uint64_t v164 = (long long *)(a1 + 736);
  uint64_t v165 = (long long *)(a2 + 92);
  uint64_t v166 = a2[92];
  if (*(void *)(a1 + 736) == 1)
  {
    if (v166 == 1)
    {
      long long v167 = *v165;
      *(_OWORD *)(a1 + 745) = *(_OWORD *)((char *)a2 + 745);
      *uint64_t v164 = v167;
    }
    else
    {
      *(void *)(a1 + 736) = v166;
      *(unsigned char *)(a1 + 744) = *((unsigned char *)a2 + 744);
      uint64_t v169 = a2[94];
      *(unsigned char *)(a1 + 760) = *((unsigned char *)a2 + 760);
      *(void *)(a1 + 752) = v169;
      swift_bridgeObjectRetain();
    }
  }
  else if (v166 == 1)
  {
    sub_10009F534(a1 + 736);
    long long v168 = *(_OWORD *)((char *)a2 + 745);
    *uint64_t v164 = *v165;
    *(_OWORD *)(a1 + 745) = v168;
  }
  else
  {
    *(void *)(a1 + 736) = v166;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 744) = *((unsigned char *)a2 + 744);
    uint64_t v170 = a2[94];
    *(unsigned char *)(a1 + 760) = *((unsigned char *)a2 + 760);
    *(void *)(a1 + 752) = v170;
  }
  long long v171 = *((_OWORD *)a2 + 48);
  *(unsigned char *)(a1 + 784) = *((unsigned char *)a2 + 784);
  *(_OWORD *)(a1 + 768) = v171;
  long long v172 = *(_OWORD *)(a2 + 99);
  *(unsigned char *)(a1 + 808) = *((unsigned char *)a2 + 808);
  *(_OWORD *)(a1 + 792) = v172;
  *(unsigned char *)(a1 + 809) = *((unsigned char *)a2 + 809);
  *(unsigned char *)(a1 + 810) = *((unsigned char *)a2 + 810);
  *(unsigned char *)(a1 + 811) = *((unsigned char *)a2 + 811);
  *(unsigned char *)(a1 + 812) = *((unsigned char *)a2 + 812);
  *(unsigned char *)(a1 + 813) = *((unsigned char *)a2 + 813);
  *(unsigned char *)(a1 + 814) = *((unsigned char *)a2 + 814);
  *(unsigned char *)(a1 + 815) = *((unsigned char *)a2 + 815);
  *(void *)(a1 + 816) = a2[102];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 824) = a2[103];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for IQCriteria(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x340uLL);
}

uint64_t assignWithTake for IQCriteria(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 == 1) {
    goto LABEL_4;
  }
  if (*(void *)a2 == 1)
  {
    sub_10009F534(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
    goto LABEL_6;
  }
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
LABEL_6:
  uint64_t v4 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32) == 1)
  {
LABEL_9:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
    goto LABEL_11;
  }
  if (v4 == 1)
  {
    sub_10009F534(a1 + 32);
    goto LABEL_9;
  }
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
LABEL_11:
  uint64_t v5 = *(void *)(a2 + 64);
  if (*(void *)(a1 + 64) == 1)
  {
LABEL_14:
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
    goto LABEL_16;
  }
  if (v5 == 1)
  {
    sub_10009F534(a1 + 64);
    goto LABEL_14;
  }
  *(void *)(a1 + 64) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
LABEL_16:
  uint64_t v6 = *(void *)(a2 + 96);
  if (*(void *)(a1 + 96) == 1)
  {
LABEL_19:
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 105) = *(_OWORD *)(a2 + 105);
    goto LABEL_21;
  }
  if (v6 == 1)
  {
    sub_10009F534(a1 + 96);
    goto LABEL_19;
  }
  *(void *)(a1 + 96) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
LABEL_21:
  uint64_t v7 = *(void *)(a2 + 128);
  if (*(void *)(a1 + 128) == 1)
  {
LABEL_24:
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
    goto LABEL_26;
  }
  if (v7 == 1)
  {
    sub_10009F534(a1 + 128);
    goto LABEL_24;
  }
  *(void *)(a1 + 128) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
LABEL_26:
  uint64_t v8 = *(void *)(a2 + 160);
  if (*(void *)(a1 + 160) == 1)
  {
LABEL_29:
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 169) = *(_OWORD *)(a2 + 169);
    goto LABEL_31;
  }
  if (v8 == 1)
  {
    sub_10009F534(a1 + 160);
    goto LABEL_29;
  }
  *(void *)(a1 + 160) = v8;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
LABEL_31:
  uint64_t v9 = *(void *)(a2 + 192);
  if (*(void *)(a1 + 192) == 1)
  {
LABEL_34:
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 201) = *(_OWORD *)(a2 + 201);
    goto LABEL_36;
  }
  if (v9 == 1)
  {
    sub_10009F534(a1 + 192);
    goto LABEL_34;
  }
  *(void *)(a1 + 192) = v9;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
LABEL_36:
  uint64_t v10 = *(void *)(a2 + 224);
  if (*(void *)(a1 + 224) == 1)
  {
LABEL_39:
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 233) = *(_OWORD *)(a2 + 233);
    goto LABEL_41;
  }
  if (v10 == 1)
  {
    sub_10009F534(a1 + 224);
    goto LABEL_39;
  }
  *(void *)(a1 + 224) = v10;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
LABEL_41:
  if (*(void *)(a1 + 256) == 1)
  {
LABEL_44:
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 265) = *(_OWORD *)(a2 + 265);
    goto LABEL_46;
  }
  uint64_t v11 = *(void *)(a2 + 256);
  if (v11 == 1)
  {
    sub_10009F534(a1 + 256);
    goto LABEL_44;
  }
  *(void *)(a1 + 256) = v11;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
LABEL_46:
  if (*(void *)(a1 + 288) == 1)
  {
LABEL_49:
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 297) = *(_OWORD *)(a2 + 297);
    goto LABEL_51;
  }
  uint64_t v12 = *(void *)(a2 + 288);
  if (v12 == 1)
  {
    sub_10009F534(a1 + 288);
    goto LABEL_49;
  }
  *(void *)(a1 + 288) = v12;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
LABEL_51:
  if (*(void *)(a1 + 320) == 1)
  {
LABEL_54:
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 329) = *(_OWORD *)(a2 + 329);
    goto LABEL_56;
  }
  uint64_t v13 = *(void *)(a2 + 320);
  if (v13 == 1)
  {
    sub_10009F534(a1 + 320);
    goto LABEL_54;
  }
  *(void *)(a1 + 320) = v13;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(unsigned char *)(a1 + 344) = *(unsigned char *)(a2 + 344);
LABEL_56:
  if (*(void *)(a1 + 352) == 1)
  {
LABEL_59:
    *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 361) = *(_OWORD *)(a2 + 361);
    goto LABEL_61;
  }
  uint64_t v14 = *(void *)(a2 + 352);
  if (v14 == 1)
  {
    sub_10009F534(a1 + 352);
    goto LABEL_59;
  }
  *(void *)(a1 + 352) = v14;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 360) = *(unsigned char *)(a2 + 360);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
LABEL_61:
  if (*(void *)(a1 + 384) == 1)
  {
LABEL_64:
    *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
    *(_OWORD *)(a1 + 393) = *(_OWORD *)(a2 + 393);
    goto LABEL_66;
  }
  uint64_t v15 = *(void *)(a2 + 384);
  if (v15 == 1)
  {
    sub_10009F534(a1 + 384);
    goto LABEL_64;
  }
  *(void *)(a1 + 384) = v15;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 392) = *(unsigned char *)(a2 + 392);
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  *(unsigned char *)(a1 + 408) = *(unsigned char *)(a2 + 408);
LABEL_66:
  if (*(void *)(a1 + 416) == 1)
  {
LABEL_69:
    *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 425) = *(_OWORD *)(a2 + 425);
    goto LABEL_71;
  }
  uint64_t v16 = *(void *)(a2 + 416);
  if (v16 == 1)
  {
    sub_10009F534(a1 + 416);
    goto LABEL_69;
  }
  *(void *)(a1 + 416) = v16;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 424) = *(unsigned char *)(a2 + 424);
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  *(unsigned char *)(a1 + 440) = *(unsigned char *)(a2 + 440);
LABEL_71:
  if (*(void *)(a1 + 448) == 1)
  {
LABEL_74:
    *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 457) = *(_OWORD *)(a2 + 457);
    goto LABEL_76;
  }
  uint64_t v17 = *(void *)(a2 + 448);
  if (v17 == 1)
  {
    sub_10009F534(a1 + 448);
    goto LABEL_74;
  }
  *(void *)(a1 + 448) = v17;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 456) = *(unsigned char *)(a2 + 456);
  *(void *)(a1 + 464) = *(void *)(a2 + 464);
  *(unsigned char *)(a1 + 472) = *(unsigned char *)(a2 + 472);
LABEL_76:
  if (*(void *)(a1 + 480) == 1)
  {
LABEL_79:
    *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
    *(_OWORD *)(a1 + 489) = *(_OWORD *)(a2 + 489);
    goto LABEL_81;
  }
  uint64_t v18 = *(void *)(a2 + 480);
  if (v18 == 1)
  {
    sub_10009F534(a1 + 480);
    goto LABEL_79;
  }
  *(void *)(a1 + 480) = v18;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 488) = *(unsigned char *)(a2 + 488);
  *(void *)(a1 + 496) = *(void *)(a2 + 496);
  *(unsigned char *)(a1 + 504) = *(unsigned char *)(a2 + 504);
LABEL_81:
  if (*(void *)(a1 + 512) == 1)
  {
LABEL_84:
    *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
    *(_OWORD *)(a1 + 521) = *(_OWORD *)(a2 + 521);
    goto LABEL_86;
  }
  uint64_t v19 = *(void *)(a2 + 512);
  if (v19 == 1)
  {
    sub_10009F534(a1 + 512);
    goto LABEL_84;
  }
  *(void *)(a1 + 512) = v19;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 520) = *(unsigned char *)(a2 + 520);
  *(void *)(a1 + 528) = *(void *)(a2 + 528);
  *(unsigned char *)(a1 + 536) = *(unsigned char *)(a2 + 536);
LABEL_86:
  if (*(void *)(a1 + 544) == 1)
  {
LABEL_89:
    *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
    *(_OWORD *)(a1 + 553) = *(_OWORD *)(a2 + 553);
    goto LABEL_91;
  }
  uint64_t v20 = *(void *)(a2 + 544);
  if (v20 == 1)
  {
    sub_10009F534(a1 + 544);
    goto LABEL_89;
  }
  *(void *)(a1 + 544) = v20;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 552) = *(unsigned char *)(a2 + 552);
  *(void *)(a1 + 560) = *(void *)(a2 + 560);
  *(unsigned char *)(a1 + 568) = *(unsigned char *)(a2 + 568);
LABEL_91:
  if (*(void *)(a1 + 576) == 1)
  {
LABEL_94:
    *(_OWORD *)(a1 + 576) = *(_OWORD *)(a2 + 576);
    *(_OWORD *)(a1 + 585) = *(_OWORD *)(a2 + 585);
    goto LABEL_96;
  }
  uint64_t v21 = *(void *)(a2 + 576);
  if (v21 == 1)
  {
    sub_10009F534(a1 + 576);
    goto LABEL_94;
  }
  *(void *)(a1 + 576) = v21;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 584) = *(unsigned char *)(a2 + 584);
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  *(unsigned char *)(a1 + 600) = *(unsigned char *)(a2 + 600);
LABEL_96:
  if (*(void *)(a1 + 608) == 1)
  {
LABEL_99:
    *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 608);
    *(_OWORD *)(a1 + 617) = *(_OWORD *)(a2 + 617);
    goto LABEL_101;
  }
  uint64_t v22 = *(void *)(a2 + 608);
  if (v22 == 1)
  {
    sub_10009F534(a1 + 608);
    goto LABEL_99;
  }
  *(void *)(a1 + 608) = v22;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 616) = *(unsigned char *)(a2 + 616);
  *(void *)(a1 + 624) = *(void *)(a2 + 624);
  *(unsigned char *)(a1 + 632) = *(unsigned char *)(a2 + 632);
LABEL_101:
  if (*(void *)(a1 + 640) == 1)
  {
LABEL_104:
    *(_OWORD *)(a1 + 640) = *(_OWORD *)(a2 + 640);
    *(_OWORD *)(a1 + 649) = *(_OWORD *)(a2 + 649);
    goto LABEL_106;
  }
  uint64_t v23 = *(void *)(a2 + 640);
  if (v23 == 1)
  {
    sub_10009F534(a1 + 640);
    goto LABEL_104;
  }
  *(void *)(a1 + 640) = v23;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 648) = *(unsigned char *)(a2 + 648);
  *(void *)(a1 + 656) = *(void *)(a2 + 656);
  *(unsigned char *)(a1 + 664) = *(unsigned char *)(a2 + 664);
LABEL_106:
  if (*(void *)(a1 + 672) == 1)
  {
LABEL_109:
    *(_OWORD *)(a1 + 672) = *(_OWORD *)(a2 + 672);
    *(_OWORD *)(a1 + 681) = *(_OWORD *)(a2 + 681);
    goto LABEL_111;
  }
  uint64_t v24 = *(void *)(a2 + 672);
  if (v24 == 1)
  {
    sub_10009F534(a1 + 672);
    goto LABEL_109;
  }
  *(void *)(a1 + 672) = v24;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 680) = *(unsigned char *)(a2 + 680);
  *(void *)(a1 + 688) = *(void *)(a2 + 688);
  *(unsigned char *)(a1 + 696) = *(unsigned char *)(a2 + 696);
LABEL_111:
  if (*(void *)(a1 + 704) == 1)
  {
LABEL_114:
    *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 704);
    *(_OWORD *)(a1 + 713) = *(_OWORD *)(a2 + 713);
    goto LABEL_116;
  }
  uint64_t v25 = *(void *)(a2 + 704);
  if (v25 == 1)
  {
    sub_10009F534(a1 + 704);
    goto LABEL_114;
  }
  *(void *)(a1 + 704) = v25;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 712) = *(unsigned char *)(a2 + 712);
  *(void *)(a1 + 720) = *(void *)(a2 + 720);
  *(unsigned char *)(a1 + 728) = *(unsigned char *)(a2 + 728);
LABEL_116:
  if (*(void *)(a1 + 736) != 1)
  {
    uint64_t v26 = *(void *)(a2 + 736);
    if (v26 != 1)
    {
      *(void *)(a1 + 736) = v26;
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 744) = *(unsigned char *)(a2 + 744);
      *(void *)(a1 + 752) = *(void *)(a2 + 752);
      *(unsigned char *)(a1 + 760) = *(unsigned char *)(a2 + 760);
      goto LABEL_121;
    }
    sub_10009F534(a1 + 736);
  }
  *(_OWORD *)(a1 + 736) = *(_OWORD *)(a2 + 736);
  *(_OWORD *)(a1 + 745) = *(_OWORD *)(a2 + 745);
LABEL_121:
  *(_OWORD *)(a1 + 768) = *(_OWORD *)(a2 + 768);
  *(unsigned char *)(a1 + 784) = *(unsigned char *)(a2 + 784);
  *(unsigned char *)(a1 + 808) = *(unsigned char *)(a2 + 808);
  *(_OWORD *)(a1 + 792) = *(_OWORD *)(a2 + 792);
  *(_DWORD *)(a1 + 809) = *(_DWORD *)(a2 + 809);
  *(_WORD *)(a1 + 813) = *(_WORD *)(a2 + 813);
  *(unsigned char *)(a1 + 815) = *(unsigned char *)(a2 + 815);
  *(void *)(a1 + 816) = *(void *)(a2 + 816);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 824) = *(void *)(a2 + 824);
  swift_bridgeObjectRelease();
  return a1;
}